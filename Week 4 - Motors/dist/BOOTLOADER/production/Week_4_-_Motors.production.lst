

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Aug 14 17:01:47 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1,inline
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,inline
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1,inline
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1,inline
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1,inline
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1,inline
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   162                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   163  0000                     
   164                           ; Version 1.42
   165                           ; Generated 13/04/2017 GMT
   166                           ; 
   167                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   168                           ; All rights reserved.
   169                           ; 
   170                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   171                           ; 
   172                           ; Redistribution and use in source and binary forms, with or without modification, are
   173                           ; permitted provided that the following conditions are met:
   174                           ; 
   175                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   176                           ;        conditions and the following disclaimer.
   177                           ; 
   178                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   179                           ;        of conditions and the following disclaimer in the documentation and/or other
   180                           ;        materials provided with the distribution.
   181                           ; 
   182                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   183                           ;        software without specific prior written permission.
   184                           ; 
   185                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   186                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   187                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   188                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   189                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   190                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   191                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   192                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   193                           ; 
   194                           ; 
   195                           ; Code-generator required, PIC18F67J50 Definitions
   196                           ; 
   197                           ; SFR Addresses
   198  0000                     
   199                           	psect	idataCOMRAM
   200  01471A                     __pidataCOMRAM:
   201                           	opt stack 0
   202                           
   203                           ;initializer for _gCursor
   204  01471A  0006               	dw	6
   205  01471C  0006               	dw	6
   206                           
   207                           ;initializer for _Bus_State
   208  01471E  01                 	db	1
   209                           
   210                           ;initializer for _A
   211  01471F  41                 	db	65
   212                           
   213                           ;initializer for _a
   214  014720  61                 	db	97
   215                           
   216                           ;initializer for _zero
   217  014721  30                 	db	48
   218                           
   219                           ;initializer for _l
   220  014722  80                 	db	128
   221                           
   222                           ;initializer for _w
   223  014723  80                 	db	128
   224                           
   225                           	psect	idataBANK0
   226  01474A                     __pidataBANK0:
   227                           	opt stack 0
   228                           
   229                           ;initializer for _gCharSize
   230  01474A  0005               	dw	5
   231  01474C  0007               	dw	7
   232                           
   233                           ;initializer for _gForecolour
   234  01474E  FFFF               	dw	65535
   235                           
   236                           ;initializer for _change
   237  014750  01                 	db	1
   238                           
   239                           	psect	idataBANK1
   240  01457E                     __pidataBANK1:
   241                           	opt stack 0
   242                           
   243                           ;initializer for main@F7238
   244  01457E  F800               	dw	63488
   245  014580  FFFF               	dw	65535
   246  014582  001F               	dw	31
   247  014584  07E0               	dw	2016
   248  014586  07FF               	dw	2047
   249                           
   250                           ;initializer for main@F7241
   251  014588  4D                 	db	77
   252  014589  6F                 	db	111
   253  01458A  74                 	db	116
   254  01458B  6F                 	db	111
   255  01458C  72                 	db	114
   256  01458D  00                 	db	0
   257                           
   258                           ;initializer for Console_Render@F6956
   259  01458E  0006               	dw	6
   260  014590  0006               	dw	6
   261                           
   262                           ;initializer for _gLineSize
   263  014592  0080               	dw	128
   264  014594  0007               	dw	7
   265                           
   266                           	psect	mediumconst
   267  00FD18                     __pmediumconst:
   268                           	opt stack 0
   269  00FD18  00                 	db	0
   270  00FD19                     _InitList:
   271                           	opt stack 0
   272  00FD19  1100               	dw	4352
   273  00FD1B  0080               	dw	128
   274  00FD1D  012C               	dw	300
   275  00FD1F  B100               	dw	45312
   276  00FD21  0002               	dw	2
   277  00FD23  0035               	dw	53
   278  00FD25  0036               	dw	54
   279  00FD27  B200               	dw	45568
   280  00FD29  0002               	dw	2
   281  00FD2B  0035               	dw	53
   282  00FD2D  0036               	dw	54
   283  00FD2F  B300               	dw	45824
   284  00FD31  0002               	dw	2
   285  00FD33  0035               	dw	53
   286  00FD35  0036               	dw	54
   287  00FD37  0002               	dw	2
   288  00FD39  0035               	dw	53
   289  00FD3B  0036               	dw	54
   290  00FD3D  B400               	dw	46080
   291  00FD3F  0000               	dw	0
   292  00FD41  C000               	dw	49152
   293  00FD43  00A2               	dw	162
   294  00FD45  0002               	dw	2
   295  00FD47  0084               	dw	132
   296  00FD49  C100               	dw	49408
   297  00FD4B  00C5               	dw	197
   298  00FD4D  C200               	dw	49664
   299  00FD4F  000D               	dw	13
   300  00FD51  0000               	dw	0
   301  00FD53  C300               	dw	49920
   302  00FD55  008D               	dw	141
   303  00FD57  002A               	dw	42
   304  00FD59  C400               	dw	50176
   305  00FD5B  008D               	dw	141
   306  00FD5D  00EE               	dw	238
   307  00FD5F  C500               	dw	50432
   308  00FD61  000A               	dw	10
   309  00FD63  3600               	dw	13824
   310  00FD65  00C8               	dw	200
   311  00FD67  E000               	dw	57344
   312  00FD69  0012               	dw	18
   313  00FD6B  001C               	dw	28
   314  00FD6D  0010               	dw	16
   315  00FD6F  0018               	dw	24
   316  00FD71  0033               	dw	51
   317  00FD73  002C               	dw	44
   318  00FD75  0025               	dw	37
   319  00FD77  0028               	dw	40
   320  00FD79  0028               	dw	40
   321  00FD7B  0027               	dw	39
   322  00FD7D  002F               	dw	47
   323  00FD7F  003C               	dw	60
   324  00FD81  0000               	dw	0
   325  00FD83  0003               	dw	3
   326  00FD85  0003               	dw	3
   327  00FD87  0010               	dw	16
   328  00FD89  0080               	dw	128
   329  00FD8B  0078               	dw	120
   330  00FD8D  E100               	dw	57600
   331  00FD8F  0012               	dw	18
   332  00FD91  001C               	dw	28
   333  00FD93  0010               	dw	16
   334  00FD95  0018               	dw	24
   335  00FD97  002D               	dw	45
   336  00FD99  0028               	dw	40
   337  00FD9B  0023               	dw	35
   338  00FD9D  0028               	dw	40
   339  00FD9F  0028               	dw	40
   340  00FDA1  0026               	dw	38
   341  00FDA3  002F               	dw	47
   342  00FDA5  003B               	dw	59
   343  00FDA7  0000               	dw	0
   344  00FDA9  0003               	dw	3
   345  00FDAB  0003               	dw	3
   346  00FDAD  0010               	dw	16
   347  00FDAF  3A00               	dw	14848
   348  00FDB1  0005               	dw	5
   349  00FDB3  2A00               	dw	10752
   350  00FDB5  0000               	dw	0
   351  00FDB7  0002               	dw	2
   352  00FDB9  0000               	dw	0
   353  00FDBB  0081               	dw	129
   354  00FDBD  2B00               	dw	11008
   355  00FDBF  0000               	dw	0
   356  00FDC1  0003               	dw	3
   357  00FDC3  0000               	dw	0
   358  00FDC5  00A2               	dw	162
   359  00FDC7  2900               	dw	10496
   360  00FDC9  2C00               	dw	11264
   361  00FDCB                     __end_of_InitList:
   362                           	opt stack 0
   363  00FDCB                     Timer0_Init@PRESCALE:
   364                           	opt stack 0
   365  00FDCB  0002               	dw	2
   366  00FDCD  0004               	dw	4
   367  00FDCF  0008               	dw	8
   368  00FDD1  0010               	dw	16
   369  00FDD3  0020               	dw	32
   370  00FDD5  0040               	dw	64
   371  00FDD7  0080               	dw	128
   372  00FDD9  0100               	dw	256
   373  00FDDB                     __end_ofTimer0_Init@PRESCALE:
   374                           	opt stack 0
   375  00FDDB                     PortProperty_Valid@F6830:
   376                           	opt stack 0
   377  00FDDB  00                 	db	0
   378  00FDDC  01                 	db	1
   379  00FDDD  02                 	db	2
   380  00FDDE  00                 	db	0
   381  00FDDF  01                 	db	1
   382  00FDE0  00                 	db	0
   383  00FDE1  01                 	db	1
   384  00FDE2  00                 	db	0
   385  00FDE3  02                 	db	2
   386  00FDE4  02                 	db	2
   387  00FDE5  00                 	db	0
   388  00FDE6  00                 	db	0
   389  00FDE7  03                 	db	3
   390  00FDE8  03                 	db	3
   391  00FDE9  03                 	db	3
   392  00FDEA  00                 	db	0
   393  00FDEB                     __end_ofPortProperty_Valid@F6830:
   394                           	opt stack 0
   395  00FDEB                     _MASKS:
   396                           	opt stack 0
   397  00FDEB  00                 	db	0
   398  00FDEC  01                 	db	1
   399  00FDED  03                 	db	3
   400  00FDEE  07                 	db	7
   401  00FDEF  0F                 	db	15
   402  00FDF0  1F                 	db	31
   403  00FDF1  3F                 	db	63
   404  00FDF2  7F                 	db	127
   405  00FDF3  FF                 	db	255
   406  00FDF4                     __end_of_MASKS:
   407                           	opt stack 0
   408  00FDF4                     HMI_SetButton@F7211:
   409                           	opt stack 0
   410  00FDF4  00                 	db	0
   411  00FDF5  02                 	db	2
   412  00FDF6  01                 	db	1
   413  00FDF7  03                 	db	3
   414  00FDF8                     __end_ofHMI_SetButton@F7211:
   415                           	opt stack 0
   416  00FDF8                     Timer2_Init@PRESCALE:
   417                           	opt stack 0
   418  00FDF8  01                 	db	1
   419  00FDF9  04                 	db	4
   420  00FDFA  10                 	db	16
   421  00FDFB                     __end_ofTimer2_Init@PRESCALE:
   422                           	opt stack 0
   423  00FDFB                     _Font5x7:
   424                           	opt stack 0
   425  00FDFB  00                 	db	0
   426  00FDFC  00                 	db	0
   427  00FDFD  00                 	db	0
   428  00FDFE  00                 	db	0
   429  00FDFF  00                 	db	0
   430  00FE00  00                 	db	0
   431  00FE01  00                 	db	0
   432  00FE02  5F                 	db	95
   433  00FE03  00                 	db	0
   434  00FE04  00                 	db	0
   435  00FE05  00                 	db	0
   436  00FE06  07                 	db	7
   437  00FE07  00                 	db	0
   438  00FE08  07                 	db	7
   439  00FE09  00                 	db	0
   440  00FE0A  14                 	db	20
   441  00FE0B  7F                 	db	127
   442  00FE0C  14                 	db	20
   443  00FE0D  7F                 	db	127
   444  00FE0E  14                 	db	20
   445  00FE0F  24                 	db	36
   446  00FE10  2A                 	db	42
   447  00FE11  7F                 	db	127
   448  00FE12  2A                 	db	42
   449  00FE13  12                 	db	18
   450  00FE14  23                 	db	35
   451  00FE15  13                 	db	19
   452  00FE16  08                 	db	8
   453  00FE17  64                 	db	100
   454  00FE18  62                 	db	98
   455  00FE19  36                 	db	54
   456  00FE1A  49                 	db	73
   457  00FE1B  55                 	db	85
   458  00FE1C  22                 	db	34
   459  00FE1D  50                 	db	80
   460  00FE1E  00                 	db	0
   461  00FE1F  05                 	db	5
   462  00FE20  03                 	db	3
   463  00FE21  00                 	db	0
   464  00FE22  00                 	db	0
   465  00FE23  00                 	db	0
   466  00FE24  1C                 	db	28
   467  00FE25  22                 	db	34
   468  00FE26  41                 	db	65
   469  00FE27  00                 	db	0
   470  00FE28  00                 	db	0
   471  00FE29  41                 	db	65
   472  00FE2A  22                 	db	34
   473  00FE2B  1C                 	db	28
   474  00FE2C  00                 	db	0
   475  00FE2D  08                 	db	8
   476  00FE2E  2A                 	db	42
   477  00FE2F  1C                 	db	28
   478  00FE30  2A                 	db	42
   479  00FE31  08                 	db	8
   480  00FE32  08                 	db	8
   481  00FE33  08                 	db	8
   482  00FE34  3E                 	db	62
   483  00FE35  08                 	db	8
   484  00FE36  08                 	db	8
   485  00FE37  00                 	db	0
   486  00FE38  50                 	db	80
   487  00FE39  30                 	db	48
   488  00FE3A  00                 	db	0
   489  00FE3B  00                 	db	0
   490  00FE3C  08                 	db	8
   491  00FE3D  08                 	db	8
   492  00FE3E  08                 	db	8
   493  00FE3F  08                 	db	8
   494  00FE40  08                 	db	8
   495  00FE41  00                 	db	0
   496  00FE42  60                 	db	96
   497  00FE43  60                 	db	96
   498  00FE44  00                 	db	0
   499  00FE45  00                 	db	0
   500  00FE46  20                 	db	32
   501  00FE47  10                 	db	16
   502  00FE48  08                 	db	8
   503  00FE49  04                 	db	4
   504  00FE4A  02                 	db	2
   505  00FE4B  3E                 	db	62
   506  00FE4C  51                 	db	81
   507  00FE4D  49                 	db	73
   508  00FE4E  45                 	db	69
   509  00FE4F  3E                 	db	62
   510  00FE50  00                 	db	0
   511  00FE51  42                 	db	66
   512  00FE52  7F                 	db	127
   513  00FE53  40                 	db	64
   514  00FE54  00                 	db	0
   515  00FE55  42                 	db	66
   516  00FE56  61                 	db	97
   517  00FE57  51                 	db	81
   518  00FE58  49                 	db	73
   519  00FE59  46                 	db	70
   520  00FE5A  21                 	db	33
   521  00FE5B  41                 	db	65
   522  00FE5C  45                 	db	69
   523  00FE5D  4B                 	db	75
   524  00FE5E  31                 	db	49
   525  00FE5F  18                 	db	24
   526  00FE60  14                 	db	20
   527  00FE61  12                 	db	18
   528  00FE62  7F                 	db	127
   529  00FE63  10                 	db	16
   530  00FE64  27                 	db	39
   531  00FE65  45                 	db	69
   532  00FE66  45                 	db	69
   533  00FE67  45                 	db	69
   534  00FE68  39                 	db	57
   535  00FE69  3C                 	db	60
   536  00FE6A  4A                 	db	74
   537  00FE6B  49                 	db	73
   538  00FE6C  49                 	db	73
   539  00FE6D  30                 	db	48
   540  00FE6E  01                 	db	1
   541  00FE6F  71                 	db	113
   542  00FE70  09                 	db	9
   543  00FE71  05                 	db	5
   544  00FE72  03                 	db	3
   545  00FE73  36                 	db	54
   546  00FE74  49                 	db	73
   547  00FE75  49                 	db	73
   548  00FE76  49                 	db	73
   549  00FE77  36                 	db	54
   550  00FE78  06                 	db	6
   551  00FE79  49                 	db	73
   552  00FE7A  49                 	db	73
   553  00FE7B  29                 	db	41
   554  00FE7C  1E                 	db	30
   555  00FE7D  00                 	db	0
   556  00FE7E  36                 	db	54
   557  00FE7F  36                 	db	54
   558  00FE80  00                 	db	0
   559  00FE81  00                 	db	0
   560  00FE82  00                 	db	0
   561  00FE83  56                 	db	86
   562  00FE84  36                 	db	54
   563  00FE85  00                 	db	0
   564  00FE86  00                 	db	0
   565  00FE87  00                 	db	0
   566  00FE88  08                 	db	8
   567  00FE89  14                 	db	20
   568  00FE8A  22                 	db	34
   569  00FE8B  41                 	db	65
   570  00FE8C  14                 	db	20
   571  00FE8D  14                 	db	20
   572  00FE8E  14                 	db	20
   573  00FE8F  14                 	db	20
   574  00FE90  14                 	db	20
   575  00FE91  41                 	db	65
   576  00FE92  22                 	db	34
   577  00FE93  14                 	db	20
   578  00FE94  08                 	db	8
   579  00FE95  00                 	db	0
   580  00FE96  02                 	db	2
   581  00FE97  01                 	db	1
   582  00FE98  51                 	db	81
   583  00FE99  09                 	db	9
   584  00FE9A  06                 	db	6
   585  00FE9B  32                 	db	50
   586  00FE9C  49                 	db	73
   587  00FE9D  79                 	db	121
   588  00FE9E  41                 	db	65
   589  00FE9F  3E                 	db	62
   590  00FEA0  7E                 	db	126
   591  00FEA1  11                 	db	17
   592  00FEA2  11                 	db	17
   593  00FEA3  11                 	db	17
   594  00FEA4  7E                 	db	126
   595  00FEA5  7F                 	db	127
   596  00FEA6  49                 	db	73
   597  00FEA7  49                 	db	73
   598  00FEA8  49                 	db	73
   599  00FEA9  36                 	db	54
   600  00FEAA  3E                 	db	62
   601  00FEAB  41                 	db	65
   602  00FEAC  41                 	db	65
   603  00FEAD  41                 	db	65
   604  00FEAE  22                 	db	34
   605  00FEAF  7F                 	db	127
   606  00FEB0  41                 	db	65
   607  00FEB1  41                 	db	65
   608  00FEB2  22                 	db	34
   609  00FEB3  1C                 	db	28
   610  00FEB4  7F                 	db	127
   611  00FEB5  49                 	db	73
   612  00FEB6  49                 	db	73
   613  00FEB7  49                 	db	73
   614  00FEB8  41                 	db	65
   615  00FEB9  7F                 	db	127
   616  00FEBA  09                 	db	9
   617  00FEBB  09                 	db	9
   618  00FEBC  01                 	db	1
   619  00FEBD  01                 	db	1
   620  00FEBE  3E                 	db	62
   621  00FEBF  41                 	db	65
   622  00FEC0  41                 	db	65
   623  00FEC1  51                 	db	81
   624  00FEC2  32                 	db	50
   625  00FEC3  7F                 	db	127
   626  00FEC4  08                 	db	8
   627  00FEC5  08                 	db	8
   628  00FEC6  08                 	db	8
   629  00FEC7  7F                 	db	127
   630  00FEC8  00                 	db	0
   631  00FEC9  41                 	db	65
   632  00FECA  7F                 	db	127
   633  00FECB  41                 	db	65
   634  00FECC  00                 	db	0
   635  00FECD  20                 	db	32
   636  00FECE  40                 	db	64
   637  00FECF  41                 	db	65
   638  00FED0  3F                 	db	63
   639  00FED1  01                 	db	1
   640  00FED2  7F                 	db	127
   641  00FED3  08                 	db	8
   642  00FED4  14                 	db	20
   643  00FED5  22                 	db	34
   644  00FED6  41                 	db	65
   645  00FED7  7F                 	db	127
   646  00FED8  40                 	db	64
   647  00FED9  40                 	db	64
   648  00FEDA  40                 	db	64
   649  00FEDB  40                 	db	64
   650  00FEDC  7F                 	db	127
   651  00FEDD  02                 	db	2
   652  00FEDE  04                 	db	4
   653  00FEDF  02                 	db	2
   654  00FEE0  7F                 	db	127
   655  00FEE1  7F                 	db	127
   656  00FEE2  04                 	db	4
   657  00FEE3  08                 	db	8
   658  00FEE4  10                 	db	16
   659  00FEE5  7F                 	db	127
   660  00FEE6  3E                 	db	62
   661  00FEE7  41                 	db	65
   662  00FEE8  41                 	db	65
   663  00FEE9  41                 	db	65
   664  00FEEA  3E                 	db	62
   665  00FEEB  7F                 	db	127
   666  00FEEC  09                 	db	9
   667  00FEED  09                 	db	9
   668  00FEEE  09                 	db	9
   669  00FEEF  06                 	db	6
   670  00FEF0  3E                 	db	62
   671  00FEF1  41                 	db	65
   672  00FEF2  51                 	db	81
   673  00FEF3  21                 	db	33
   674  00FEF4  5E                 	db	94
   675  00FEF5  7F                 	db	127
   676  00FEF6  09                 	db	9
   677  00FEF7  19                 	db	25
   678  00FEF8  29                 	db	41
   679  00FEF9  46                 	db	70
   680  00FEFA  46                 	db	70
   681  00FEFB  49                 	db	73
   682  00FEFC  49                 	db	73
   683  00FEFD  49                 	db	73
   684  00FEFE  31                 	db	49
   685  00FEFF  01                 	db	1
   686  00FF00  01                 	db	1
   687  00FF01  7F                 	db	127
   688  00FF02  01                 	db	1
   689  00FF03  01                 	db	1
   690  00FF04  3F                 	db	63
   691  00FF05  40                 	db	64
   692  00FF06  40                 	db	64
   693  00FF07  40                 	db	64
   694  00FF08  3F                 	db	63
   695  00FF09  1F                 	db	31
   696  00FF0A  20                 	db	32
   697  00FF0B  40                 	db	64
   698  00FF0C  20                 	db	32
   699  00FF0D  1F                 	db	31
   700  00FF0E  7F                 	db	127
   701  00FF0F  20                 	db	32
   702  00FF10  18                 	db	24
   703  00FF11  20                 	db	32
   704  00FF12  7F                 	db	127
   705  00FF13  63                 	db	99
   706  00FF14  14                 	db	20
   707  00FF15  08                 	db	8
   708  00FF16  14                 	db	20
   709  00FF17  63                 	db	99
   710  00FF18  03                 	db	3
   711  00FF19  04                 	db	4
   712  00FF1A  78                 	db	120
   713  00FF1B  04                 	db	4
   714  00FF1C  03                 	db	3
   715  00FF1D  61                 	db	97
   716  00FF1E  51                 	db	81
   717  00FF1F  49                 	db	73
   718  00FF20  45                 	db	69
   719  00FF21  43                 	db	67
   720  00FF22  00                 	db	0
   721  00FF23  00                 	db	0
   722  00FF24  7F                 	db	127
   723  00FF25  41                 	db	65
   724  00FF26  41                 	db	65
   725  00FF27  02                 	db	2
   726  00FF28  04                 	db	4
   727  00FF29  08                 	db	8
   728  00FF2A  10                 	db	16
   729  00FF2B  20                 	db	32
   730  00FF2C  41                 	db	65
   731  00FF2D  41                 	db	65
   732  00FF2E  7F                 	db	127
   733  00FF2F  00                 	db	0
   734  00FF30  00                 	db	0
   735  00FF31  04                 	db	4
   736  00FF32  02                 	db	2
   737  00FF33  01                 	db	1
   738  00FF34  02                 	db	2
   739  00FF35  04                 	db	4
   740  00FF36  40                 	db	64
   741  00FF37  40                 	db	64
   742  00FF38  40                 	db	64
   743  00FF39  40                 	db	64
   744  00FF3A  40                 	db	64
   745  00FF3B  00                 	db	0
   746  00FF3C  01                 	db	1
   747  00FF3D  02                 	db	2
   748  00FF3E  04                 	db	4
   749  00FF3F  00                 	db	0
   750  00FF40  20                 	db	32
   751  00FF41  54                 	db	84
   752  00FF42  54                 	db	84
   753  00FF43  54                 	db	84
   754  00FF44  78                 	db	120
   755  00FF45  7F                 	db	127
   756  00FF46  48                 	db	72
   757  00FF47  44                 	db	68
   758  00FF48  44                 	db	68
   759  00FF49  38                 	db	56
   760  00FF4A  38                 	db	56
   761  00FF4B  44                 	db	68
   762  00FF4C  44                 	db	68
   763  00FF4D  44                 	db	68
   764  00FF4E  20                 	db	32
   765  00FF4F  38                 	db	56
   766  00FF50  44                 	db	68
   767  00FF51  44                 	db	68
   768  00FF52  48                 	db	72
   769  00FF53  7F                 	db	127
   770  00FF54  38                 	db	56
   771  00FF55  54                 	db	84
   772  00FF56  54                 	db	84
   773  00FF57  54                 	db	84
   774  00FF58  18                 	db	24
   775  00FF59  08                 	db	8
   776  00FF5A  7E                 	db	126
   777  00FF5B  09                 	db	9
   778  00FF5C  01                 	db	1
   779  00FF5D  02                 	db	2
   780  00FF5E  08                 	db	8
   781  00FF5F  14                 	db	20
   782  00FF60  54                 	db	84
   783  00FF61  54                 	db	84
   784  00FF62  3C                 	db	60
   785  00FF63  7F                 	db	127
   786  00FF64  08                 	db	8
   787  00FF65  04                 	db	4
   788  00FF66  04                 	db	4
   789  00FF67  78                 	db	120
   790  00FF68  00                 	db	0
   791  00FF69  44                 	db	68
   792  00FF6A  7D                 	db	125
   793  00FF6B  40                 	db	64
   794  00FF6C  00                 	db	0
   795  00FF6D  20                 	db	32
   796  00FF6E  40                 	db	64
   797  00FF6F  44                 	db	68
   798  00FF70  3D                 	db	61
   799  00FF71  00                 	db	0
   800  00FF72  00                 	db	0
   801  00FF73  7F                 	db	127
   802  00FF74  10                 	db	16
   803  00FF75  28                 	db	40
   804  00FF76  44                 	db	68
   805  00FF77  00                 	db	0
   806  00FF78  41                 	db	65
   807  00FF79  7F                 	db	127
   808  00FF7A  40                 	db	64
   809  00FF7B  00                 	db	0
   810  00FF7C  7C                 	db	124
   811  00FF7D  04                 	db	4
   812  00FF7E  18                 	db	24
   813  00FF7F  04                 	db	4
   814  00FF80  78                 	db	120
   815  00FF81  7C                 	db	124
   816  00FF82  08                 	db	8
   817  00FF83  04                 	db	4
   818  00FF84  04                 	db	4
   819  00FF85  78                 	db	120
   820  00FF86  38                 	db	56
   821  00FF87  44                 	db	68
   822  00FF88  44                 	db	68
   823  00FF89  44                 	db	68
   824  00FF8A  38                 	db	56
   825  00FF8B  7C                 	db	124
   826  00FF8C  14                 	db	20
   827  00FF8D  14                 	db	20
   828  00FF8E  14                 	db	20
   829  00FF8F  08                 	db	8
   830  00FF90  08                 	db	8
   831  00FF91  14                 	db	20
   832  00FF92  14                 	db	20
   833  00FF93  18                 	db	24
   834  00FF94  7C                 	db	124
   835  00FF95  7C                 	db	124
   836  00FF96  08                 	db	8
   837  00FF97  04                 	db	4
   838  00FF98  04                 	db	4
   839  00FF99  08                 	db	8
   840  00FF9A  48                 	db	72
   841  00FF9B  54                 	db	84
   842  00FF9C  54                 	db	84
   843  00FF9D  54                 	db	84
   844  00FF9E  20                 	db	32
   845  00FF9F  04                 	db	4
   846  00FFA0  3F                 	db	63
   847  00FFA1  44                 	db	68
   848  00FFA2  40                 	db	64
   849  00FFA3  20                 	db	32
   850  00FFA4  3C                 	db	60
   851  00FFA5  40                 	db	64
   852  00FFA6  40                 	db	64
   853  00FFA7  20                 	db	32
   854  00FFA8  7C                 	db	124
   855  00FFA9  1C                 	db	28
   856  00FFAA  20                 	db	32
   857  00FFAB  40                 	db	64
   858  00FFAC  20                 	db	32
   859  00FFAD  1C                 	db	28
   860  00FFAE  3C                 	db	60
   861  00FFAF  40                 	db	64
   862  00FFB0  30                 	db	48
   863  00FFB1  40                 	db	64
   864  00FFB2  3C                 	db	60
   865  00FFB3  44                 	db	68
   866  00FFB4  28                 	db	40
   867  00FFB5  10                 	db	16
   868  00FFB6  28                 	db	40
   869  00FFB7  44                 	db	68
   870  00FFB8  0C                 	db	12
   871  00FFB9  50                 	db	80
   872  00FFBA  50                 	db	80
   873  00FFBB  50                 	db	80
   874  00FFBC  3C                 	db	60
   875  00FFBD  44                 	db	68
   876  00FFBE  64                 	db	100
   877  00FFBF  54                 	db	84
   878  00FFC0  4C                 	db	76
   879  00FFC1  44                 	db	68
   880  00FFC2  00                 	db	0
   881  00FFC3  08                 	db	8
   882  00FFC4  36                 	db	54
   883  00FFC5  41                 	db	65
   884  00FFC6  00                 	db	0
   885  00FFC7  00                 	db	0
   886  00FFC8  00                 	db	0
   887  00FFC9  7F                 	db	127
   888  00FFCA  00                 	db	0
   889  00FFCB  00                 	db	0
   890  00FFCC  00                 	db	0
   891  00FFCD  41                 	db	65
   892  00FFCE  36                 	db	54
   893  00FFCF  08                 	db	8
   894  00FFD0  00                 	db	0
   895  00FFD1  08                 	db	8
   896  00FFD2  08                 	db	8
   897  00FFD3  2A                 	db	42
   898  00FFD4  1C                 	db	28
   899  00FFD5  08                 	db	8
   900  00FFD6  08                 	db	8
   901  00FFD7  1C                 	db	28
   902  00FFD8  2A                 	db	42
   903  00FFD9  08                 	db	8
   904  00FFDA  08                 	db	8
   905  00FFDB                     __end_of_Font5x7:
   906                           	opt stack 0
   907  00FFDB                     _PortG_Property:
   908                           	opt stack 0
   909  00FFDB  FC00               	dw	64512
   910  00FFDD                     __end_of_PortG_Property:
   911                           	opt stack 0
   912  00FFDD                     _PortF_Property:
   913                           	opt stack 0
   914  00FFDD  0FFF               	dw	4095
   915  00FFDF                     __end_of_PortF_Property:
   916                           	opt stack 0
   917  00FFDF                     _PortE_Property:
   918                           	opt stack 0
   919  00FFDF  0000               	dw	0
   920  00FFE1                     __end_of_PortE_Property:
   921                           	opt stack 0
   922  00FFE1                     _PortD_Property:
   923                           	opt stack 0
   924  00FFE1  FFFF               	dw	65535
   925  00FFE3                     __end_of_PortD_Property:
   926                           	opt stack 0
   927  00FFE3                     _PortC_Property:
   928                           	opt stack 0
   929  00FFE3  FFF0               	dw	65520
   930  00FFE5                     __end_of_PortC_Property:
   931                           	opt stack 0
   932  00FFE5                     _PortB_Property:
   933                           	opt stack 0
   934  00FFE5  FF00               	dw	65280
   935  00FFE7                     __end_of_PortB_Property:
   936                           	opt stack 0
   937  00FFE7                     _PortA_Property:
   938                           	opt stack 0
   939  00FFE7  00FF               	dw	255
   940  00FFE9                     __end_of_PortA_Property:
   941                           	opt stack 0
   942  0000                     _TMR0	set	4054
   943  0000                     _PR2	set	4043
   944  0000                     _T2CONbits	set	4042
   945  0000                     _T0CONbits	set	4053
   946  0000                     _RCONbits	set	4048
   947  0000                     _OSCTUNEbits	set	3995
   948  0000                     _PIR3	set	4004
   949  0000                     _PIR2	set	4001
   950  0000                     _PIR1	set	3998
   951  0000                     _INTCONbits	set	4082
   952  0000                     _SSP2CON2bits	set	3947
   953  0000                     _SSP1CON2bits	set	4037
   954  0000                     _SSP1ADD	set	4040
   955  0000                     _ANCON0	set	4033
   956  0000                     _ADRESL	set	4035
   957  0000                     _ADRESH	set	4036
   958  0000                     _ADCON1bits	set	4033
   959  0000                     _ADCON0bits	set	4034
   960  0000                     _SSP2CON1bits	set	3948
   961  0000                     _SSP1CON1bits	set	4038
   962  0000                     _SSP2STATbits	set	3949
   963  0000                     _SSP1STATbits	set	4039
   964  0000                     _PIE3bits	set	4003
   965  0000                     _PIE1bits	set	3997
   966  0000                     _PIR3bits	set	4004
   967  0000                     _PIR1bits	set	3998
   968  0000                     _IPR3bits	set	4005
   969  0000                     _IPR1bits	set	3999
   970  0000                     _PORTFbits	set	3973
   971  0000                     _SSP2CON2	set	3947
   972  0000                     _SSP1CON2	set	4037
   973  0000                     _SSP2BUF	set	3951
   974  0000                     _SSP2CON1	set	3948
   975  0000                     _SSP2STAT	set	3949
   976  0000                     _SSP1BUF	set	4041
   977  0000                     _SSP1CON1	set	4038
   978  0000                     _SSP1STAT	set	4039
   979  0000                     _LATG	set	3983
   980  0000                     _LATF	set	3982
   981  0000                     _LATE	set	3981
   982  0000                     _LATD	set	3980
   983  0000                     _LATC	set	3979
   984  0000                     _LATB	set	3978
   985  0000                     _LATA	set	3977
   986  0000                     _TRISG	set	3992
   987  0000                     _TRISF	set	3991
   988  0000                     _TRISE	set	3990
   989  0000                     _TRISD	set	3989
   990  0000                     _TRISC	set	3988
   991  0000                     _TRISB	set	3987
   992  0000                     _TRISA	set	3986
   993  0000                     _PORTG	set	3974
   994  0000                     _PORTF	set	3973
   995  0000                     _PORTE	set	3972
   996  0000                     _PORTD	set	3971
   997  0000                     _PORTC	set	3970
   998  0000                     _PORTB	set	3969
   999  0000                     _PORTA	set	3968
  1000  00FFE9                     STR_3:
  1001  00FFE9  20                 	db	32
  1002  00FFEA  49                 	db	73	;'I'
  1003  00FFEB  6E                 	db	110	;'n'
  1004  00FFEC  66                 	db	102	;'f'
  1005  00FFED  6F                 	db	111	;'o'
  1006  00FFEE  72                 	db	114	;'r'
  1007  00FFEF  6D                 	db	109	;'m'
  1008  00FFF0  61                 	db	97	;'a'
  1009  00FFF1  74                 	db	116	;'t'
  1010  00FFF2  69                 	db	105	;'i'
  1011  00FFF3  6F                 	db	111	;'o'
  1012  00FFF4  6E                 	db	110	;'n'
  1013  00FFF5  0A                 	db	10
  1014  00FFF6  00                 	db	0
  1015  00FFF7                     STR_4:
  1016  00FFF7  32                 	db	50	;'2'
  1017  00FFF8  30                 	db	48	;'0'
  1018  00FFF9  31                 	db	49	;'1'
  1019  00FFFA  37                 	db	55	;'7'
  1020  00FFFB  00                 	db	0
  1021  00FFFC                     STR_1:
  1022  00FFFC  25                 	db	37
  1023  00FFFD  63                 	db	99	;'c'
  1024  00FFFE  00                 	db	0
  1025  0000                     
  1026                           ; #config settings
  1027  00FFFF  00                 	db	0	; dummy byte at the end
  1028  0000                     
  1029                           	psect	cinit
  1030  012ADA                     __pcinit:
  1031                           	opt stack 0
  1032  012ADA                     start_initialization:
  1033                           	opt stack 0
  1034  012ADA                     __initialization:
  1035                           	opt stack 0
  1036                           
  1037                           ; Initialize objects allocated to BANK1 (24 bytes)
  1038                           ; load TBLPTR registers with __pidataBANK1
  1039  012ADA  0E7E               	movlw	low __pidataBANK1
  1040  012ADC  6EF6               	movwf	tblptrl,c
  1041  012ADE  0E45               	movlw	high __pidataBANK1
  1042  012AE0  6EF7               	movwf	tblptrh,c
  1043  012AE2  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1044  012AE4  6EF8               	movwf	tblptru,c
  1045  012AE6  EE01  F0CA         	lfsr	0,__pdataBANK1
  1046  012AEA  EE10 F018          	lfsr	1,24
  1047  012AEE                     copy_data0:
  1048  012AEE  0009               	tblrd		*+
  1049  012AF0  CFF5 FFEE          	movff	tablat,postinc0
  1050  012AF4  50E5               	movf	postdec1,w,c
  1051  012AF6  50E1               	movf	fsr1l,w,c
  1052  012AF8  E1FA               	bnz	copy_data0
  1053                           
  1054                           ; Initialize objects allocated to BANK0 (7 bytes)
  1055                           ; load TBLPTR registers with __pidataBANK0
  1056  012AFA  0E4A               	movlw	low __pidataBANK0
  1057  012AFC  6EF6               	movwf	tblptrl,c
  1058  012AFE  0E47               	movlw	high __pidataBANK0
  1059  012B00  6EF7               	movwf	tblptrh,c
  1060  012B02  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1061  012B04  6EF8               	movwf	tblptru,c
  1062  012B06  EE00  F0F9         	lfsr	0,__pdataBANK0
  1063  012B0A  EE10 F007          	lfsr	1,7
  1064  012B0E                     copy_data1:
  1065  012B0E  0009               	tblrd		*+
  1066  012B10  CFF5 FFEE          	movff	tablat,postinc0
  1067  012B14  50E5               	movf	postdec1,w,c
  1068  012B16  50E1               	movf	fsr1l,w,c
  1069  012B18  E1FA               	bnz	copy_data1
  1070                           
  1071                           ; Initialize objects allocated to COMRAM (10 bytes)
  1072                           ; load TBLPTR registers with __pidataCOMRAM
  1073  012B1A  0E1A               	movlw	low __pidataCOMRAM
  1074  012B1C  6EF6               	movwf	tblptrl,c
  1075  012B1E  0E47               	movlw	high __pidataCOMRAM
  1076  012B20  6EF7               	movwf	tblptrh,c
  1077  012B22  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1078  012B24  6EF8               	movwf	tblptru,c
  1079  012B26  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1080  012B2A  EE10 F00A          	lfsr	1,10
  1081  012B2E                     copy_data2:
  1082  012B2E  0009               	tblrd		*+
  1083  012B30  CFF5 FFEE          	movff	tablat,postinc0
  1084  012B34  50E5               	movf	postdec1,w,c
  1085  012B36  50E1               	movf	fsr1l,w,c
  1086  012B38  E1FA               	bnz	copy_data2
  1087                           
  1088                           ; Clear objects allocated to BIGRAM (300 bytes)
  1089  012B3A  EE02  F046         	lfsr	0,__pbssBIGRAM
  1090  012B3E  EE11 F02C          	lfsr	1,300
  1091  012B42                     clear_0:
  1092  012B42  6AEE               	clrf	postinc0,c
  1093  012B44  50E5               	movf	postdec1,w,c
  1094  012B46  50E1               	movf	fsr1l,w,c
  1095  012B48  E1FC               	bnz	clear_0
  1096  012B4A  50E2               	movf	fsr1h,w,c
  1097  012B4C  E1FA               	bnz	clear_0
  1098                           
  1099                           ; Clear objects allocated to BANK2 (70 bytes)
  1100  012B4E  EE02  F000         	lfsr	0,__pbssBANK2
  1101  012B52  0E46               	movlw	70
  1102  012B54                     clear_1:
  1103  012B54  6AEE               	clrf	postinc0,c
  1104  012B56  06E8               	decf	wreg,f,c
  1105  012B58  E1FD               	bnz	clear_1
  1106                           
  1107                           ; Clear objects allocated to BANK1 (202 bytes)
  1108  012B5A  EE01  F000         	lfsr	0,__pbssBANK1
  1109  012B5E  0ECA               	movlw	202
  1110  012B60                     clear_2:
  1111  012B60  6AEE               	clrf	postinc0,c
  1112  012B62  06E8               	decf	wreg,f,c
  1113  012B64  E1FD               	bnz	clear_2
  1114                           
  1115                           ; Clear objects allocated to BANK0 (81 bytes)
  1116  012B66  EE00  F060         	lfsr	0,__pbssBANK0
  1117  012B6A  0E51               	movlw	81
  1118  012B6C                     clear_3:
  1119  012B6C  6AEE               	clrf	postinc0,c
  1120  012B6E  06E8               	decf	wreg,f,c
  1121  012B70  E1FD               	bnz	clear_3
  1122                           
  1123                           ; Clear objects allocated to COMRAM (26 bytes)
  1124  012B72  EE00  F025         	lfsr	0,__pbssCOMRAM
  1125  012B76  0E1A               	movlw	26
  1126  012B78                     clear_4:
  1127  012B78  6AEE               	clrf	postinc0,c
  1128  012B7A  06E8               	decf	wreg,f,c
  1129  012B7C  E1FD               	bnz	clear_4
  1130  012B7E                     end_of_initialization:
  1131                           	opt stack 0
  1132  012B7E                     __end_of__initialization:
  1133                           	opt stack 0
  1134  012B7E  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1135  012B80  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1136  012B82  0100               	movlb	0
  1137  012B84  EF6E  F087         	goto	_main	;jump to C main() function
  1138                           tblptru	equ	0xFF8
  1139                           tblptrh	equ	0xFF7
  1140                           tblptrl	equ	0xFF6
  1141                           tablat	equ	0xFF5
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           postdec1	equ	0xFE5
  1145                           fsr1h	equ	0xFE2
  1146                           fsr1l	equ	0xFE1
  1147                           
  1148                           	psect	bssCOMRAM
  1149  000025                     __pbssCOMRAM:
  1150                           	opt stack 0
  1151  000025                     _lQueue:
  1152                           	opt stack 0
  1153  000025                     	ds	3
  1154  000028                     _COUNTER:
  1155                           	opt stack 0
  1156  000028                     	ds	2
  1157  00002A                     _lMotor:
  1158                           	opt stack 0
  1159  00002A                     	ds	2
  1160  00002C                     HMI_GRender@a:
  1161                           	opt stack 0
  1162  00002C                     	ds	2
  1163  00002E                     Timer2_Init@PRE:
  1164                           	opt stack 0
  1165  00002E                     	ds	1
  1166  00002F                     Timer2_Init@INDEX:
  1167                           	opt stack 0
  1168  00002F                     	ds	1
  1169  000030                     Timer0_Init@PRE:
  1170                           	opt stack 0
  1171  000030                     	ds	1
  1172  000031                     _INDEX:
  1173                           	opt stack 0
  1174  000031                     	ds	1
  1175  000032                     rand@screw:
  1176                           	opt stack 0
  1177  000032                     	ds	1
  1178  000033                     OutSeg@a:
  1179                           	opt stack 0
  1180  000033                     	ds	1
  1181  000034                     OutSeg@segset:
  1182                           	opt stack 0
  1183  000034                     	ds	1
  1184  000035                     OutSeg@cur:
  1185                           	opt stack 0
  1186  000035                     	ds	1
  1187  000036                     _lBufferY:
  1188                           	opt stack 0
  1189  000036                     	ds	1
  1190  000037                     _lBufferX:
  1191                           	opt stack 0
  1192  000037                     	ds	1
  1193  000038                     _I2C1T:
  1194                           	opt stack 0
  1195  000038                     	ds	7
  1196                           tblptru	equ	0xFF8
  1197                           tblptrh	equ	0xFF7
  1198                           tblptrl	equ	0xFF6
  1199                           tablat	equ	0xFF5
  1200                           postinc0	equ	0xFEE
  1201                           wreg	equ	0xFE8
  1202                           postdec1	equ	0xFE5
  1203                           fsr1h	equ	0xFE2
  1204                           fsr1l	equ	0xFE1
  1205                           
  1206                           	psect	dataCOMRAM
  1207  00003F                     __pdataCOMRAM:
  1208                           	opt stack 0
  1209  00003F                     _gCursor:
  1210                           	opt stack 0
  1211  00003F                     	ds	4
  1212  000043                     _Bus_State:
  1213                           	opt stack 0
  1214  000043                     	ds	1
  1215  000044                     	ds	1
  1216  000045                     	ds	1
  1217  000046                     	ds	1
  1218  000047                     _l:
  1219                           	opt stack 0
  1220  000047                     	ds	1
  1221  000048                     _w:
  1222                           	opt stack 0
  1223  000048                     	ds	1
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           postinc0	equ	0xFEE
  1229                           wreg	equ	0xFE8
  1230                           postdec1	equ	0xFE5
  1231                           fsr1h	equ	0xFE2
  1232                           fsr1l	equ	0xFE1
  1233                           
  1234                           	psect	bssBANK0
  1235  000060                     __pbssBANK0:
  1236                           	opt stack 0
  1237  000060                     Timer2_Init@DIV:
  1238                           	opt stack 0
  1239  000060                     	ds	4
  1240  000064                     Timer0_Init@DIV:
  1241                           	opt stack 0
  1242  000064                     	ds	4
  1243  000068                     _gISR:
  1244                           	opt stack 0
  1245  000068                     	ds	3
  1246  00006B                     _lStepFunction:
  1247                           	opt stack 0
  1248  00006B                     	ds	3
  1249  00006E                     _I2C1_Done:
  1250                           	opt stack 0
  1251  00006E                     	ds	3
  1252  000071                     _pShiftVal:
  1253                           	opt stack 0
  1254  000071                     	ds	2
  1255  000073                     _val:
  1256                           	opt stack 0
  1257  000073                     	ds	2
  1258  000075                     _lCurrent:
  1259                           	opt stack 0
  1260  000075                     	ds	2
  1261  000077                     _gBackcolour:
  1262                           	opt stack 0
  1263  000077                     	ds	2
  1264  000079                     SPI_Send9@dat:
  1265                           	opt stack 0
  1266  000079                     	ds	2
  1267  00007B                     Event_TestButton@j:
  1268                           	opt stack 0
  1269  00007B                     	ds	1
  1270  00007C                     _u:
  1271                           	opt stack 0
  1272  00007C                     	ds	1
  1273  00007D                     _j:
  1274                           	opt stack 0
  1275  00007D                     	ds	1
  1276  00007E                     _i:
  1277                           	opt stack 0
  1278  00007E                     	ds	1
  1279  00007F                     _ADC_Initialised:
  1280                           	opt stack 0
  1281  00007F                     	ds	1
  1282  000080                     _clearall:
  1283                           	opt stack 0
  1284  000080                     	ds	1
  1285  000081                     _PortE:
  1286                           	opt stack 0
  1287  000081                     	ds	10
  1288  00008B                     _PortD:
  1289                           	opt stack 0
  1290  00008B                     	ds	10
  1291  000095                     _PortC:
  1292                           	opt stack 0
  1293  000095                     	ds	10
  1294  00009F                     _ADC_AN1:
  1295                           	opt stack 0
  1296  00009F                     	ds	5
  1297  0000A4                     _ADC_AN0:
  1298                           	opt stack 0
  1299  0000A4                     	ds	5
  1300  0000A9                     LCD_DrawRectangle@p4:
  1301                           	opt stack 0
  1302  0000A9                     	ds	4
  1303  0000AD                     LCD_DrawRectangle@p2:
  1304                           	opt stack 0
  1305  0000AD                     	ds	4
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1h	equ	0xFE2
  1314                           fsr1l	equ	0xFE1
  1315                           
  1316                           	psect	dataBANK0
  1317  0000F9                     __pdataBANK0:
  1318                           	opt stack 0
  1319  0000F9                     _gCharSize:
  1320                           	opt stack 0
  1321  0000F9                     	ds	4
  1322  0000FD                     _gForecolour:
  1323                           	opt stack 0
  1324  0000FD                     	ds	2
  1325  0000FF                     _change:
  1326                           	opt stack 0
  1327  0000FF                     	ds	1
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           postdec1	equ	0xFE5
  1335                           fsr1h	equ	0xFE2
  1336                           fsr1l	equ	0xFE1
  1337                           
  1338                           	psect	bssBANK1
  1339  000100                     __pbssBANK1:
  1340                           	opt stack 0
  1341  000100                     _lCBuffer:
  1342                           	opt stack 0
  1343  000100                     	ds	30
  1344  00011E                     _I2C2_More:
  1345                           	opt stack 0
  1346  00011E                     	ds	3
  1347  000121                     _I2C1_More:
  1348                           	opt stack 0
  1349  000121                     	ds	3
  1350  000124                     _I2C2_Done:
  1351                           	opt stack 0
  1352  000124                     	ds	3
  1353  000127                     _HMIBoard:
  1354                           	opt stack 0
  1355  000127                     	ds	58
  1356  000161                     _SPI1:
  1357                           	opt stack 0
  1358  000161                     	ds	11
  1359  00016C                     _SPI2:
  1360                           	opt stack 0
  1361  00016C                     	ds	11
  1362  000177                     _DIPSwitch:
  1363                           	opt stack 0
  1364  000177                     	ds	10
  1365  000181                     _TestButton:
  1366                           	opt stack 0
  1367  000181                     	ds	10
  1368  00018B                     _PortG:
  1369                           	opt stack 0
  1370  00018B                     	ds	10
  1371  000195                     _PortB:
  1372                           	opt stack 0
  1373  000195                     	ds	10
  1374  00019F                     _PortA:
  1375                           	opt stack 0
  1376  00019F                     	ds	10
  1377  0001A9                     _PortF:
  1378                           	opt stack 0
  1379  0001A9                     	ds	10
  1380  0001B3                     _I2C2T:
  1381                           	opt stack 0
  1382  0001B3                     	ds	7
  1383  0001BA                     _motor:
  1384                           	opt stack 0
  1385  0001BA                     	ds	6
  1386  0001C0                     _ADC_AN3:
  1387                           	opt stack 0
  1388  0001C0                     	ds	5
  1389  0001C5                     _ADC_AN2:
  1390                           	opt stack 0
  1391  0001C5                     	ds	5
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1h	equ	0xFE2
  1400                           fsr1l	equ	0xFE1
  1401                           
  1402                           	psect	dataBANK1
  1403  0001CA                     __pdataBANK1:
  1404                           	opt stack 0
  1405  0001CA                     main@F7238:
  1406                           	opt stack 0
  1407  0001CA                     	ds	10
  1408  0001D4                     main@F7241:
  1409                           	opt stack 0
  1410  0001D4                     	ds	6
  1411  0001DA                     Console_Render@F6956:
  1412                           	opt stack 0
  1413  0001DA                     	ds	4
  1414  0001DE                     _gLineSize:
  1415                           	opt stack 0
  1416  0001DE                     	ds	4
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1h	equ	0xFE2
  1425                           fsr1l	equ	0xFE1
  1426                           
  1427                           	psect	bssBANK2
  1428  000200                     __pbssBANK2:
  1429                           	opt stack 0
  1430  000200                     Console_MakeField@Fill:
  1431                           	opt stack 0
  1432  000200                     	ds	70
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           postinc0	equ	0xFEE
  1438                           wreg	equ	0xFE8
  1439                           postdec1	equ	0xFE5
  1440                           fsr1h	equ	0xFE2
  1441                           fsr1l	equ	0xFE1
  1442                           
  1443                           	psect	bssBIGRAM
  1444  000246                     __pbssBIGRAM:
  1445                           	opt stack 0
  1446  000246                     _lBuffer:
  1447                           	opt stack 0
  1448  000246                     	ds	300
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           postdec1	equ	0xFE5
  1456                           fsr1h	equ	0xFE2
  1457                           fsr1l	equ	0xFE1
  1458                           
  1459                           	psect	cstackBANK1
  1460  0001E2                     __pcstackBANK1:
  1461                           	opt stack 0
  1462  0001E2                     HMI_Init@in:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x0
  1466  0001E2                     	ds	2
  1467  0001E4                     ??_main:
  1468                           
  1469                           ; 1 bytes @ 0x2
  1470  0001E4                     	ds	1
  1471  0001E5                     main@myName:
  1472                           	opt stack 0
  1473                           
  1474                           ; 6 bytes @ 0x3
  1475  0001E5                     	ds	6
  1476  0001EB                     main@myColours:
  1477                           	opt stack 0
  1478                           
  1479                           ; 10 bytes @ 0x9
  1480  0001EB                     	ds	10
  1481  0001F5                     main@upState:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x13
  1485  0001F5                     	ds	1
  1486  0001F6                     main@i:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x14
  1490  0001F6                     	ds	2
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           postinc0	equ	0xFEE
  1496                           wreg	equ	0xFE8
  1497                           postdec1	equ	0xFE5
  1498                           fsr1h	equ	0xFE2
  1499                           fsr1l	equ	0xFE1
  1500                           
  1501                           	psect	cstackBANK0
  1502  0000B1                     __pcstackBANK0:
  1503                           	opt stack 0
  1504  0000B1                     ??_Console_ClearCursor:
  1505  0000B1                     ??_Console_Init:
  1506  0000B1                     ??_Console_NewLine:
  1507  0000B1                     ??_Console_FormFeed:
  1508  0000B1                     ??_HMI_SetButton:
  1509  0000B1                     ?_GetPortProperties:
  1510                           	opt stack 0
  1511  0000B1                     ?_GetPortPORT:
  1512                           	opt stack 0
  1513  0000B1                     ?_GetPortTRIS:
  1514                           	opt stack 0
  1515  0000B1                     ?___wmul:
  1516                           	opt stack 0
  1517  0000B1                     ?___awdiv:
  1518                           	opt stack 0
  1519  0000B1                     ?___lwdiv:
  1520                           	opt stack 0
  1521  0000B1                     ?___lwmod:
  1522                           	opt stack 0
  1523  0000B1                     ?___lldiv:
  1524                           	opt stack 0
  1525  0000B1                     Mode_Set@pMode:
  1526                           	opt stack 0
  1527  0000B1                     ToSegment@pCHR:
  1528                           	opt stack 0
  1529  0000B1                     HMI_SetLeft@pValue:
  1530                           	opt stack 0
  1531  0000B1                     HMI_SetRight@pValue:
  1532                           	opt stack 0
  1533  0000B1                     HMI_SetUp@pValue:
  1534                           	opt stack 0
  1535  0000B1                     HMI_SetDown@pValue:
  1536                           	opt stack 0
  1537  0000B1                     HMI_SetBar@pValue:
  1538                           	opt stack 0
  1539  0000B1                     Port_GetPin@pInput:
  1540                           	opt stack 0
  1541  0000B1                     Port_GetQuad@pInput:
  1542                           	opt stack 0
  1543  0000B1                     SPI_DisableISR@pInput:
  1544                           	opt stack 0
  1545  0000B1                     SPI_DCS@pInput:
  1546                           	opt stack 0
  1547  0000B1                     SPI_Send@pInput:
  1548                           	opt stack 0
  1549  0000B1                     Byte_SetBit@pInput:
  1550                           	opt stack 0
  1551  0000B1                     Byte_GetBit@pInput:
  1552                           	opt stack 0
  1553  0000B1                     Byte_SetZone@pInput:
  1554                           	opt stack 0
  1555  0000B1                     Byte_GetZone@pInput:
  1556                           	opt stack 0
  1557  0000B1                     Byte_SetByte@pInput:
  1558                           	opt stack 0
  1559  0000B1                     delay_ms@ms:
  1560                           	opt stack 0
  1561  0000B1                     delay_us@us:
  1562                           	opt stack 0
  1563  0000B1                     reverse@input:
  1564                           	opt stack 0
  1565  0000B1                     Console_SetForecolour@pColour:
  1566                           	opt stack 0
  1567  0000B1                     Motor_Continious@pMotor:
  1568                           	opt stack 0
  1569  0000B1                     ___wmul@multiplier:
  1570                           	opt stack 0
  1571  0000B1                     ___awdiv@dividend:
  1572                           	opt stack 0
  1573  0000B1                     ___lwdiv@dividend:
  1574                           	opt stack 0
  1575  0000B1                     ___lwmod@dividend:
  1576                           	opt stack 0
  1577  0000B1                     MXK_Queue@pCallback:
  1578                           	opt stack 0
  1579  0000B1                     Timer0_Start@pFunction:
  1580                           	opt stack 0
  1581  0000B1                     ___lldiv@dividend:
  1582                           	opt stack 0
  1583                           
  1584                           ; 4 bytes @ 0x0
  1585  0000B1                     	ds	1
  1586  0000B2                     HMI_SetSegments@pString:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x1
  1590  0000B2                     	ds	1
  1591  0000B3                     GetPortProperties@pInput:
  1592                           	opt stack 0
  1593  0000B3                     GetPortPORT@pInput:
  1594                           	opt stack 0
  1595  0000B3                     GetPortTRIS@pInput:
  1596                           	opt stack 0
  1597  0000B3                     Port_GetPin@pPin:
  1598                           	opt stack 0
  1599  0000B3                     Port_GetQuad@pQuad:
  1600                           	opt stack 0
  1601  0000B3                     SPI_Send@pData:
  1602                           	opt stack 0
  1603  0000B3                     Byte_SetBit@pBit:
  1604                           	opt stack 0
  1605  0000B3                     Byte_GetBit@pBit:
  1606                           	opt stack 0
  1607  0000B3                     Byte_SetZone@pMax:
  1608                           	opt stack 0
  1609  0000B3                     Byte_GetZone@pMax:
  1610                           	opt stack 0
  1611  0000B3                     Byte_SetByte@pValue:
  1612                           	opt stack 0
  1613  0000B3                     Console_Init@x:
  1614                           	opt stack 0
  1615  0000B3                     Console_FormFeed@x:
  1616                           	opt stack 0
  1617  0000B3                     reverse@length:
  1618                           	opt stack 0
  1619  0000B3                     Motor_Continious@pDirection:
  1620                           	opt stack 0
  1621  0000B3                     ___wmul@multiplicand:
  1622                           	opt stack 0
  1623  0000B3                     ___awdiv@divisor:
  1624                           	opt stack 0
  1625  0000B3                     ___lwdiv@divisor:
  1626                           	opt stack 0
  1627  0000B3                     ___lwmod@divisor:
  1628                           	opt stack 0
  1629  0000B3                     delay_ms@u:
  1630                           	opt stack 0
  1631  0000B3                     delay_us@u:
  1632                           	opt stack 0
  1633  0000B3                     HMI_SetButton@reindex:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x2
  1637  0000B3                     	ds	1
  1638  0000B4                     ??_Port_GetPin:
  1639  0000B4                     ??_Port_GetQuad:
  1640  0000B4                     ??_Byte_GetBit:
  1641  0000B4                     LCD_Write@mode:
  1642                           	opt stack 0
  1643  0000B4                     Byte_SetBit@pValue:
  1644                           	opt stack 0
  1645  0000B4                     Byte_SetZone@pChunk:
  1646                           	opt stack 0
  1647  0000B4                     Byte_GetZone@pChunk:
  1648                           	opt stack 0
  1649  0000B4                     Console_Init@y:
  1650                           	opt stack 0
  1651  0000B4                     Console_FormFeed@y:
  1652                           	opt stack 0
  1653  0000B4                     OutSeg@pSegment:
  1654                           	opt stack 0
  1655  0000B4                     Motor_Move@pMotor:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x3
  1659  0000B4                     	ds	1
  1660  0000B5                     ??_Byte_SetBit:
  1661  0000B5                     ??_Console_IncrementCursor:
  1662  0000B5                     ??_OutSeg:
  1663  0000B5                     LCD_Write@value:
  1664                           	opt stack 0
  1665  0000B5                     Byte_GetBit@Output:
  1666                           	opt stack 0
  1667  0000B5                     Byte_SetZone@pChunkSize:
  1668                           	opt stack 0
  1669  0000B5                     Byte_GetZone@pChunkSize:
  1670                           	opt stack 0
  1671  0000B5                     reverse@tempVar:
  1672                           	opt stack 0
  1673  0000B5                     ___awdiv@counter:
  1674                           	opt stack 0
  1675  0000B5                     ___lwdiv@counter:
  1676                           	opt stack 0
  1677  0000B5                     ___lwmod@counter:
  1678                           	opt stack 0
  1679  0000B5                     HMI_SetSegments@in:
  1680                           	opt stack 0
  1681  0000B5                     ___wmul@product:
  1682                           	opt stack 0
  1683  0000B5                     ___lldiv@divisor:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0x4
  1687  0000B5                     	ds	1
  1688  0000B6                     ??_Byte_GetZone:
  1689  0000B6                     ?_Console_MakeField:
  1690                           	opt stack 0
  1691  0000B6                     Set_Addr_Window@ys:
  1692                           	opt stack 0
  1693  0000B6                     Set_Rotation@m:
  1694                           	opt stack 0
  1695  0000B6                     Port_GetPin@Output:
  1696                           	opt stack 0
  1697  0000B6                     Port_GetQuad@Output:
  1698                           	opt stack 0
  1699  0000B6                     Byte_SetZone@pValue:
  1700                           	opt stack 0
  1701  0000B6                     ___awdiv@sign:
  1702                           	opt stack 0
  1703  0000B6                     LCD_Word_Write@value:
  1704                           	opt stack 0
  1705  0000B6                     reverse@iterator:
  1706                           	opt stack 0
  1707  0000B6                     Motor_Move@pDelta:
  1708                           	opt stack 0
  1709  0000B6                     ___lwdiv@quotient:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x5
  1713  0000B6                     	ds	1
  1714  0000B7                     ??_Byte_SetZone:
  1715  0000B7                     Set_Addr_Window@xe:
  1716                           	opt stack 0
  1717  0000B7                     Set_Rotation@rotation:
  1718                           	opt stack 0
  1719  0000B7                     Byte_GetZone@MASK:
  1720                           	opt stack 0
  1721  0000B7                     OutSeg@pInput:
  1722                           	opt stack 0
  1723  0000B7                     HMI_SetButton@pValue:
  1724                           	opt stack 0
  1725  0000B7                     MXK_BlockSwitchTo@CUR:
  1726                           	opt stack 0
  1727  0000B7                     MXK_SwitchTo@CUR:
  1728                           	opt stack 0
  1729  0000B7                     ___awdiv@quotient:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x6
  1733  0000B7                     	ds	1
  1734  0000B8                     ??_Console_MakeField:
  1735  0000B8                     Set_Addr_Window@ye:
  1736                           	opt stack 0
  1737  0000B8                     Byte_GetZone@Offset:
  1738                           	opt stack 0
  1739  0000B8                     OutSeg@out:
  1740                           	opt stack 0
  1741  0000B8                     HMI_SetButton@v:
  1742                           	opt stack 0
  1743  0000B8                     MXK_BlockSwitchTo@pModule:
  1744                           	opt stack 0
  1745  0000B8                     MXK_SwitchTo@pModule:
  1746                           	opt stack 0
  1747  0000B8                     itos@input:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x7
  1751  0000B8                     	ds	1
  1752  0000B9                     ??_Console_Tab:
  1753  0000B9                     Set_Addr_Window@xs:
  1754                           	opt stack 0
  1755  0000B9                     Byte_GetZone@Output:
  1756                           	opt stack 0
  1757  0000B9                     HMI_Render@a:
  1758                           	opt stack 0
  1759  0000B9                     ___lldiv@quotient:
  1760                           	opt stack 0
  1761                           
  1762                           ; 4 bytes @ 0x8
  1763  0000B9                     	ds	1
  1764  0000BA                     Byte_SetZone@Offset:
  1765                           	opt stack 0
  1766  0000BA                     LCD_Fill@pColour:
  1767                           	opt stack 0
  1768  0000BA                     LCD_FillRectangle@pColour:
  1769                           	opt stack 0
  1770  0000BA                     Byte_GetPair@pInput:
  1771                           	opt stack 0
  1772  0000BA                     itos@destination:
  1773                           	opt stack 0
  1774  0000BA                     Console_MakeField@Index:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x9
  1778  0000BA                     	ds	1
  1779  0000BB                     Byte_SetZone@MASK:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0xA
  1783  0000BB                     	ds	1
  1784  0000BC                     LCD_Fill@i:
  1785                           	opt stack 0
  1786  0000BC                     Byte_GetPair@pPair:
  1787                           	opt stack 0
  1788  0000BC                     Console_MakeField@pInput:
  1789                           	opt stack 0
  1790  0000BC                     Byte_SetPair@pInput:
  1791                           	opt stack 0
  1792  0000BC                     Byte_SetQuad@pInput:
  1793                           	opt stack 0
  1794  0000BC                     itos@Data:
  1795                           	opt stack 0
  1796  0000BC                     LCD_FillRectangle@pPoint:
  1797                           	opt stack 0
  1798                           
  1799                           ; 4 bytes @ 0xB
  1800  0000BC                     	ds	1
  1801  0000BD                     LCD_Fill@j:
  1802                           	opt stack 0
  1803  0000BD                     ___lldiv@counter:
  1804                           	opt stack 0
  1805  0000BD                     Word_GetPair@pInput:
  1806                           	opt stack 0
  1807  0000BD                     Console_MakeField@Column:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0xC
  1811  0000BD                     	ds	1
  1812  0000BE                     Byte_SetPair@pPair:
  1813                           	opt stack 0
  1814  0000BE                     Byte_SetQuad@pQuad:
  1815                           	opt stack 0
  1816  0000BE                     Console_Tab@t:
  1817                           	opt stack 0
  1818  0000BE                     itos@Length:
  1819                           	opt stack 0
  1820  0000BE                     Timer0_Init@pFrequency:
  1821                           	opt stack 0
  1822  0000BE                     Timer2_Init@pFrequency:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0xD
  1826  0000BE                     	ds	1
  1827  0000BF                     Byte_SetPair@pValue:
  1828                           	opt stack 0
  1829  0000BF                     Byte_SetQuad@pValue:
  1830                           	opt stack 0
  1831  0000BF                     Word_GetPair@pPair:
  1832                           	opt stack 0
  1833  0000BF                     Console_Tab@i:
  1834                           	opt stack 0
  1835  0000BF                     _Console_MakeField$10974:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0xE
  1839  0000BF                     	ds	1
  1840  0000C0                     Console_Tab@c:
  1841                           	opt stack 0
  1842  0000C0                     Port_SetPin@pInput:
  1843                           	opt stack 0
  1844  0000C0                     Port_Set@pInput:
  1845                           	opt stack 0
  1846  0000C0                     SPI_MinSpeed@pInput:
  1847                           	opt stack 0
  1848  0000C0                     SPI_MaxSpeed@pInput:
  1849                           	opt stack 0
  1850  0000C0                     Word_SetPair@pInput:
  1851                           	opt stack 0
  1852  0000C0                     PortProperty_Valid@pInput:
  1853                           	opt stack 0
  1854  0000C0                     itos@Out:
  1855                           	opt stack 0
  1856  0000C0                     LCD_FillRectangle@pSize:
  1857                           	opt stack 0
  1858                           
  1859                           ; 4 bytes @ 0xF
  1860  0000C0                     	ds	1
  1861  0000C1                     ??_Console_PrintChar:
  1862  0000C1                     Console_MakeField@x:
  1863                           	opt stack 0
  1864                           
  1865                           ; 1 bytes @ 0x10
  1866  0000C1                     	ds	1
  1867  0000C2                     ??_Timer2_Init:
  1868  0000C2                     ??_Timer0_Init:
  1869  0000C2                     Port_SetPin@pPin:
  1870                           	opt stack 0
  1871  0000C2                     Port_Set@pValue:
  1872                           	opt stack 0
  1873  0000C2                     Word_SetPair@pPair:
  1874                           	opt stack 0
  1875  0000C2                     PortProperty_Valid@pPinDrive:
  1876                           	opt stack 0
  1877  0000C2                     Console_MakeField@y:
  1878                           	opt stack 0
  1879  0000C2                     HMI_SetNumber@pInput:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x11
  1883  0000C2                     	ds	1
  1884  0000C3                     ??_Port_Set:
  1885  0000C3                     Port_SetPin@pValue:
  1886                           	opt stack 0
  1887  0000C3                     Word_SetPair@pValue:
  1888                           	opt stack 0
  1889  0000C3                     PortProperty_Valid@pPin:
  1890                           	opt stack 0
  1891  0000C3                     LCD_DrawField@pField:
  1892                           	opt stack 0
  1893  0000C3                     Timer2_Init@RDIV:
  1894                           	opt stack 0
  1895                           
  1896                           ; 4 bytes @ 0x12
  1897  0000C3                     	ds	1
  1898  0000C4                     ??_PortProperty_Valid:
  1899  0000C4                     ??_LCD_FillRectangle:
  1900  0000C4                     Port_SetPin@Type:
  1901                           	opt stack 0
  1902  0000C4                     Console_PrintChar@pInput:
  1903                           	opt stack 0
  1904  0000C4                     Timer0_Init@pCPUClock:
  1905                           	opt stack 0
  1906                           
  1907                           ; 4 bytes @ 0x13
  1908  0000C4                     	ds	1
  1909  0000C5                     LED_Set@pValue:
  1910                           	opt stack 0
  1911  0000C5                     putch@c:
  1912                           	opt stack 0
  1913  0000C5                     Port_TogglePin@pInput:
  1914                           	opt stack 0
  1915  0000C5                     LCD_DrawField@pPoint:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x14
  1919  0000C5                     	ds	1
  1920  0000C6                     ?_printf:
  1921                           	opt stack 0
  1922  0000C6                     LCD_FillRectangle@i:
  1923                           	opt stack 0
  1924  0000C6                     LED_Set@pLED:
  1925                           	opt stack 0
  1926  0000C6                     printf@f:
  1927                           	opt stack 0
  1928  0000C6                     PortProperty_Valid@Errors:
  1929                           	opt stack 0
  1930                           
  1931                           ; 16 bytes @ 0x15
  1932  0000C6                     	ds	1
  1933  0000C7                     LCD_FillRectangle@j:
  1934                           	opt stack 0
  1935  0000C7                     Port_TogglePin@pPin:
  1936                           	opt stack 0
  1937  0000C7                     Timer2_Init@pCPUClock:
  1938                           	opt stack 0
  1939                           
  1940                           ; 4 bytes @ 0x16
  1941  0000C7                     	ds	1
  1942  0000C8                     Port_TogglePin@Value:
  1943                           	opt stack 0
  1944  0000C8                     Timer0_Init@DIVIDE:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x17
  1948  0000C8                     	ds	1
  1949  0000C9                     LED_Toggle@pLED:
  1950                           	opt stack 0
  1951  0000C9                     LCD_DrawField@pSize:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x18
  1955  0000C9                     	ds	1
  1956  0000CA                     Event_DIPSwitch@pState:
  1957                           	opt stack 0
  1958  0000CA                     Event_HMI_DIPSwitch@pState:
  1959                           	opt stack 0
  1960  0000CA                     Event_TestButton@pState:
  1961                           	opt stack 0
  1962  0000CA                     Event_HMI_LeftButton@pState:
  1963                           	opt stack 0
  1964  0000CA                     Event_HMI_RightButton@pState:
  1965                           	opt stack 0
  1966  0000CA                     Event_HMI_UpButton@pState:
  1967                           	opt stack 0
  1968  0000CA                     Event_HMI_DownButton@pState:
  1969                           	opt stack 0
  1970  0000CA                     printf@flag:
  1971                           	opt stack 0
  1972                           
  1973                           ; 1 bytes @ 0x19
  1974  0000CA                     	ds	1
  1975  0000CB                     Event_DIPSwitch@Bar:
  1976                           	opt stack 0
  1977  0000CB                     Event_HMI_DIPSwitch@Bar:
  1978                           	opt stack 0
  1979  0000CB                     printf@ap:
  1980                           	opt stack 0
  1981  0000CB                     Timer2_Init@DIVIDE:
  1982                           	opt stack 0
  1983                           
  1984                           ; 4 bytes @ 0x1A
  1985  0000CB                     	ds	1
  1986  0000CC                     Button_Poll@pButton:
  1987                           	opt stack 0
  1988  0000CC                     Motor_Speed@pMotor:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x1B
  1992  0000CC                     	ds	1
  1993  0000CD                     ??_LCD_DrawField:
  1994  0000CD                     printf@c:
  1995                           	opt stack 0
  1996                           
  1997                           ; 1 bytes @ 0x1C
  1998  0000CD                     	ds	1
  1999  0000CE                     Button_Poll@pIncrement:
  2000                           	opt stack 0
  2001  0000CE                     Motor_Speed@pFrequency:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x1D
  2005  0000CE                     	ds	1
  2006  0000CF                     ??_Button_Poll:
  2007  0000CF                     LCD_DrawField@count:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x1E
  2011  0000CF                     	ds	1
  2012  0000D0                     
  2013                           ; 1 bytes @ 0x1F
  2014  0000D0                     	ds	1
  2015  0000D1                     LCD_DrawField@xmax:
  2016                           	opt stack 0
  2017                           
  2018                           ; 1 bytes @ 0x20
  2019  0000D1                     	ds	1
  2020  0000D2                     LCD_DrawField@ymax:
  2021                           	opt stack 0
  2022                           
  2023                           ; 1 bytes @ 0x21
  2024  0000D2                     	ds	1
  2025  0000D3                     LCD_DrawField@i:
  2026                           	opt stack 0
  2027  0000D3                     Port_Set@TypeRequired:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x22
  2031  0000D3                     	ds	1
  2032  0000D4                     ??_Console_Render:
  2033  0000D4                     Button_Poll@Pin:
  2034                           	opt stack 0
  2035                           
  2036                           ; 1 bytes @ 0x23
  2037  0000D4                     	ds	1
  2038  0000D5                     Port_Set@TypeActual:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x24
  2042  0000D5                     	ds	1
  2043  0000D6                     PortProperty_Valid@Pair:
  2044                           	opt stack 0
  2045  0000D6                     Console_Render@temp:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x25
  2049  0000D6                     	ds	1
  2050  0000D7                     Port_Set@Type:
  2051                           	opt stack 0
  2052  0000D7                     Port_CheckPairType@pInput:
  2053                           	opt stack 0
  2054  0000D7                     Port_SetPinType@pInput:
  2055                           	opt stack 0
  2056  0000D7                     Console_Render@lCursor:
  2057                           	opt stack 0
  2058                           
  2059                           ; 4 bytes @ 0x26
  2060  0000D7                     	ds	2
  2061  0000D9                     Port_CheckPairType@pPair:
  2062                           	opt stack 0
  2063  0000D9                     Port_SetPinType@pPin:
  2064                           	opt stack 0
  2065                           
  2066                           ; 1 bytes @ 0x28
  2067  0000D9                     	ds	1
  2068  0000DA                     Port_CheckPairType@pDrive:
  2069                           	opt stack 0
  2070  0000DA                     Port_SetPinType@pType:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x29
  2074  0000DA                     	ds	1
  2075  0000DB                     Port_CheckPairType@Pin1:
  2076                           	opt stack 0
  2077  0000DB                     Port_SetPinType@Output:
  2078                           	opt stack 0
  2079  0000DB                     Console_Render@x:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x2A
  2083  0000DB                     	ds	1
  2084  0000DC                     Port_CheckPairType@Pin2:
  2085                           	opt stack 0
  2086  0000DC                     Console_Render@y:
  2087                           	opt stack 0
  2088  0000DC                     Port_SetPinType@Props:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x2B
  2092  0000DC                     	ds	1
  2093  0000DD                     Port_CheckPairType@Output:
  2094                           	opt stack 0
  2095                           
  2096                           ; 1 bytes @ 0x2C
  2097  0000DD                     	ds	1
  2098  0000DE                     LED_Init@pLED:
  2099                           	opt stack 0
  2100  0000DE                     Port_CheckPairType@Props:
  2101                           	opt stack 0
  2102  0000DE                     Motor_Init@pMotor:
  2103                           	opt stack 0
  2104  0000DE                     SPI_Init@pClock:
  2105                           	opt stack 0
  2106                           
  2107                           ; 4 bytes @ 0x2D
  2108  0000DE                     	ds	2
  2109  0000E0                     Port_CheckQuadType@pInput:
  2110                           	opt stack 0
  2111  0000E0                     Motor_Init@pAddress:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2F
  2115  0000E0                     	ds	2
  2116  0000E2                     Port_CheckQuadType@pQuad:
  2117                           	opt stack 0
  2118  0000E2                     SPI_Init@pChannel:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x31
  2122  0000E2                     	ds	1
  2123  0000E3                     Port_CheckQuadType@pDrive:
  2124                           	opt stack 0
  2125  0000E3                     SPI_Init@pMode:
  2126                           	opt stack 0
  2127                           
  2128                           ; 1 bytes @ 0x32
  2129  0000E3                     	ds	1
  2130  0000E4                     Port_CheckQuadType@Pair1:
  2131                           	opt stack 0
  2132  0000E4                     SPI_Init@pInput:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x33
  2136  0000E4                     	ds	1
  2137  0000E5                     Port_CheckQuadType@Pair2:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x34
  2141  0000E5                     	ds	1
  2142  0000E6                     ??_LCD_Init:
  2143  0000E6                     Port_CheckQuadType@Output:
  2144                           	opt stack 0
  2145                           
  2146                           ; 1 bytes @ 0x35
  2147  0000E6                     	ds	1
  2148  0000E7                     Port_CheckPortType@pInput:
  2149                           	opt stack 0
  2150  0000E7                     Port_SetQuadType@pInput:
  2151                           	opt stack 0
  2152                           
  2153                           ; 2 bytes @ 0x36
  2154  0000E7                     	ds	1
  2155  0000E8                     LCD_Init@i:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x37
  2159  0000E8                     	ds	1
  2160  0000E9                     Port_CheckPortType@pDrive:
  2161                           	opt stack 0
  2162  0000E9                     Port_SetQuadType@pQuad:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x38
  2166  0000E9                     	ds	1
  2167  0000EA                     Port_CheckPortType@Output:
  2168                           	opt stack 0
  2169  0000EA                     Port_SetQuadType@pType:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x39
  2173  0000EA                     	ds	1
  2174  0000EB                     Port_SetQuadType@Output:
  2175                           	opt stack 0
  2176  0000EB                     Port_SetType@pInput:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x3A
  2180  0000EB                     	ds	1
  2181  0000EC                     Button_Init@pInput:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x3B
  2185  0000EC                     	ds	1
  2186  0000ED                     Port_SetType@pType:
  2187                           	opt stack 0
  2188                           
  2189                           ; 1 bytes @ 0x3C
  2190  0000ED                     	ds	1
  2191  0000EE                     ??_Port_SetType:
  2192  0000EE                     Button_Init@pThreshold:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x3D
  2196  0000EE                     	ds	2
  2197  0000F0                     Port_SetType@Output:
  2198                           	opt stack 0
  2199  0000F0                     Button_Init@pInitIO:
  2200                           	opt stack 0
  2201                           
  2202                           ; 3 bytes @ 0x3F
  2203  0000F0                     	ds	1
  2204  0000F1                     Port_Init@pInput:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x40
  2208  0000F1                     	ds	2
  2209  0000F3                     Port_Init@pPort:
  2210                           	opt stack 0
  2211  0000F3                     Button_Init@pGetState:
  2212                           	opt stack 0
  2213                           
  2214                           ; 3 bytes @ 0x42
  2215  0000F3                     	ds	1
  2216  0000F4                     ??_Port_Init:
  2217                           
  2218                           ; 1 bytes @ 0x43
  2219  0000F4                     	ds	2
  2220  0000F6                     Port_Init@i:
  2221                           	opt stack 0
  2222  0000F6                     Button_Init@pFunction:
  2223                           	opt stack 0
  2224                           
  2225                           ; 3 bytes @ 0x45
  2226  0000F6                     	ds	1
  2227  0000F7                     
  2228                           ; 1 bytes @ 0x46
  2229  0000F7                     	ds	2
  2230  0000F9                     tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           postdec1	equ	0xFE5
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           
  2240                           ; 1 bytes @ 0x48
  2241                           
  2242                           	psect	cstackCOMRAM
  2243  000001                     __pcstackCOMRAM:
  2244                           	opt stack 0
  2245  000001                     i2Byte_SetBit@pInput:
  2246                           	opt stack 0
  2247  000001                     i2Byte_GetZone@pInput:
  2248                           	opt stack 0
  2249  000001                     i2delay_us@us:
  2250                           	opt stack 0
  2251  000001                     i2MXK_Queue@pCallback:
  2252                           	opt stack 0
  2253                           
  2254                           ; 3 bytes @ 0x0
  2255  000001                     	ds	2
  2256  000003                     i2Byte_SetBit@pBit:
  2257                           	opt stack 0
  2258  000003                     i2Byte_GetZone@pMax:
  2259                           	opt stack 0
  2260  000003                     i2delay_us@u:
  2261                           	opt stack 0
  2262                           
  2263                           ; 4 bytes @ 0x2
  2264  000003                     	ds	1
  2265  000004                     i2Byte_SetBit@pValue:
  2266                           	opt stack 0
  2267  000004                     i2Byte_GetZone@pChunk:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x3
  2271  000004                     	ds	1
  2272  000005                     ??i2_Byte_SetBit:
  2273  000005                     i2Byte_GetZone@pChunkSize:
  2274                           	opt stack 0
  2275                           
  2276                           ; 1 bytes @ 0x4
  2277  000005                     	ds	1
  2278  000006                     ??i2_Byte_GetZone:
  2279                           
  2280                           ; 1 bytes @ 0x5
  2281  000006                     	ds	1
  2282  000007                     i2Byte_GetZone@MASK:
  2283                           	opt stack 0
  2284  000007                     i2MXK_SwitchTo@CUR:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x6
  2288  000007                     	ds	1
  2289  000008                     i2Byte_GetZone@Offset:
  2290                           	opt stack 0
  2291  000008                     i2MXK_SwitchTo@pModule:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x7
  2295  000008                     	ds	1
  2296  000009                     i2Byte_GetZone@Output:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x8
  2300  000009                     	ds	1
  2301  00000A                     i2Byte_GetPair@pInput:
  2302                           	opt stack 0
  2303                           
  2304                           ; 2 bytes @ 0x9
  2305  00000A                     	ds	2
  2306  00000C                     i2Byte_GetPair@pPair:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0xB
  2310  00000C                     	ds	1
  2311  00000D                     i2Word_GetPair@pInput:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0xC
  2315  00000D                     	ds	2
  2316  00000F                     i2Word_GetPair@pPair:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0xE
  2320  00000F                     	ds	1
  2321  000010                     i2Port_SetPin@pInput:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0xF
  2325  000010                     	ds	2
  2326  000012                     i2Port_SetPin@pPin:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x11
  2330  000012                     	ds	1
  2331  000013                     i2Port_SetPin@pValue:
  2332                           	opt stack 0
  2333                           
  2334                           ; 1 bytes @ 0x12
  2335  000013                     	ds	1
  2336  000014                     i2Port_SetPin@Type:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x13
  2340  000014                     	ds	1
  2341  000015                     
  2342                           ; 1 bytes @ 0x14
  2343  000015                     	ds	2
  2344  000017                     ??_ISR_Function:
  2345                           
  2346                           ; 1 bytes @ 0x16
  2347  000017                     	ds	14
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           postinc0	equ	0xFEE
  2353                           wreg	equ	0xFE8
  2354                           postdec1	equ	0xFE5
  2355                           fsr1h	equ	0xFE2
  2356                           fsr1l	equ	0xFE1
  2357                           
  2358 ;;
  2359 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2360 ;;
  2361 ;; *************** function _main *****************
  2362 ;; Defined at:
  2363 ;;		line 24 in file "main.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  myColours      10    9[BANK1 ] unsigned short [5]
  2368 ;;  myName          6    3[BANK1 ] unsigned char [6]
  2369 ;;  i               2   20[BANK1 ] int 
  2370 ;;  upState         1   19[BANK1 ] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      void 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;Total ram usage:       20 bytes
  2385 ;; Hardware stack levels required when called:   17
  2386 ;; This function calls:
  2387 ;;		_Console_Init
  2388 ;;		_Console_Render
  2389 ;;		_Console_SetForecolour
  2390 ;;		_HMI_DIPSwitch
  2391 ;;		_HMI_DownSwitch
  2392 ;;		_HMI_Init
  2393 ;;		_HMI_LeftSwitch
  2394 ;;		_HMI_Poll
  2395 ;;		_HMI_Render
  2396 ;;		_HMI_RightSwitch
  2397 ;;		_HMI_SetSegments
  2398 ;;		_HMI_UpSwitch
  2399 ;;		_ISR_Enable
  2400 ;;		_LCD_Init
  2401 ;;		_MXK_BlockSwitchTo
  2402 ;;		_MXK_DIPSwitch
  2403 ;;		_MXK_Dequeue
  2404 ;;		_MXK_Init
  2405 ;;		_MXK_Release
  2406 ;;		_MXK_TestButton
  2407 ;;		_Motor_Continious
  2408 ;;		_Motor_Init
  2409 ;;		_Motor_Move
  2410 ;;		_Motor_Speed
  2411 ;;		_printf
  2412 ;; This function is called by:
  2413 ;;		Startup code after reset
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text0
  2418  010EDC                     __ptext0:
  2419                           	opt stack 0
  2420  010EDC                     _main:
  2421                           	opt stack 14
  2422                           
  2423                           ;main.c: 30: MXK_Init();
  2424                           
  2425                           ;incstack = 0
  2426  010EDC  ECE6  F08C         	call	_MXK_Init	;wreg free
  2427                           
  2428                           ;main.c: 33: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2429  010EE0  0E01               	movlw	1
  2430  010EE2  ECED  F09F         	call	_MXK_BlockSwitchTo
  2431  010EE6  0900               	iorlw	0
  2432  010EE8  B4D8               	btfsc	status,2,c
  2433  010EEA  D00A               	goto	l12179
  2434                           
  2435                           ;main.c: 34: LCD_Init();
  2436  010EEC  ECA3  F08D         	call	_LCD_Init	;wreg free
  2437                           
  2438                           ;main.c: 36: Console_Init();
  2439  010EF0  EC75  F099         	call	_Console_Init	;wreg free
  2440                           
  2441                           ;main.c: 37: if (MXK_Release())
  2442  010EF4  EC1F  F0A3         	call	_MXK_Release	;wreg free
  2443  010EF8  0900               	iorlw	0
  2444  010EFA  A4D8               	btfss	status,2,c
  2445                           
  2446                           ;main.c: 38: MXK_Dequeue();
  2447  010EFC  EC0C  F0A1         	call	_MXK_Dequeue	;wreg free
  2448  010F00                     l12179:
  2449                           
  2450                           ;main.c: 39: }
  2451                           ;main.c: 42: if (MXK_BlockSwitchTo(eMXK_HMI))
  2452  010F00  0E01               	movlw	1
  2453  010F02  ECED  F09F         	call	_MXK_BlockSwitchTo
  2454  010F06  0900               	iorlw	0
  2455  010F08  B4D8               	btfsc	status,2,c
  2456  010F0A  D008               	goto	l12187
  2457                           
  2458                           ;main.c: 43: {
  2459                           ;main.c: 44: HMI_Init();
  2460  010F0C  EC7A  F089         	call	_HMI_Init	;wreg free
  2461                           
  2462                           ;main.c: 46: if (MXK_Release())
  2463  010F10  EC1F  F0A3         	call	_MXK_Release	;wreg free
  2464  010F14  0900               	iorlw	0
  2465  010F16  A4D8               	btfss	status,2,c
  2466                           
  2467                           ;main.c: 47: MXK_Dequeue();
  2468  010F18  EC0C  F0A1         	call	_MXK_Dequeue	;wreg free
  2469  010F1C                     l12187:
  2470                           
  2471                           ;main.c: 48: }
  2472                           ;main.c: 53: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2473  010F1C  0E08               	movlw	8
  2474  010F1E  ECED  F09F         	call	_MXK_BlockSwitchTo
  2475  010F22  0900               	iorlw	0
  2476  010F24  B4D8               	btfsc	status,2,c
  2477  010F26  D020               	goto	l12197
  2478                           
  2479                           ;main.c: 56: Motor_Init(&motor, 0b1000);
  2480  010F28  0EBA               	movlw	low _motor
  2481  010F2A  0100               	movlb	0	; () banked
  2482  010F2C  6FDE               	movwf	Motor_Init@pMotor& (0+255),b
  2483  010F2E  0E01               	movlw	high _motor
  2484  010F30  0100               	movlb	0	; () banked
  2485  010F32  6FDF               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  2486  010F34  0E00               	movlw	0
  2487  010F36  0100               	movlb	0	; () banked
  2488  010F38  6FE1               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  2489  010F3A  0E08               	movlw	8
  2490  010F3C  6FE0               	movwf	Motor_Init@pAddress& (0+255),b
  2491  010F3E  EC55  F092         	call	_Motor_Init	;wreg free
  2492                           
  2493                           ;main.c: 57: Motor_Move(&motor, 100);
  2494  010F42  0EBA               	movlw	low _motor
  2495  010F44  0100               	movlb	0	; () banked
  2496  010F46  6FB4               	movwf	Motor_Move@pMotor& (0+255),b
  2497  010F48  0E01               	movlw	high _motor
  2498  010F4A  0100               	movlb	0	; () banked
  2499  010F4C  6FB5               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  2500  010F4E  0E00               	movlw	0
  2501  010F50  0100               	movlb	0	; () banked
  2502  010F52  6FB7               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  2503  010F54  0E64               	movlw	100
  2504  010F56  6FB6               	movwf	Motor_Move@pDelta& (0+255),b
  2505  010F58  EC86  F0A0         	call	_Motor_Move	;wreg free
  2506                           
  2507                           ;main.c: 58: if (MXK_Release())
  2508  010F5C  EC1F  F0A3         	call	_MXK_Release	;wreg free
  2509  010F60  0900               	iorlw	0
  2510  010F62  A4D8               	btfss	status,2,c
  2511                           
  2512                           ;main.c: 59: MXK_Dequeue();
  2513  010F64  EC0C  F0A1         	call	_MXK_Dequeue	;wreg free
  2514  010F68                     l12197:
  2515                           
  2516                           ;main.c: 60: }
  2517                           ;main.c: 67: ISR_Enable();
  2518  010F68  EC92  F0A3         	call	_ISR_Enable	;wreg free
  2519  010F6C                     l12199:
  2520                           
  2521                           ;main.c: 74: {
  2522                           ;main.c: 76: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2523  010F6C  0E01               	movlw	1
  2524  010F6E  ECED  F09F         	call	_MXK_BlockSwitchTo
  2525  010F72  0900               	iorlw	0
  2526  010F74  B4D8               	btfsc	status,2,c
  2527  010F76  D090               	goto	l12241
  2528                           
  2529                           ;main.c: 79: printf("%c", (char)35);
  2530  010F78  0EFC               	movlw	low STR_1
  2531  010F7A  0100               	movlb	0	; () banked
  2532  010F7C  6FC6               	movwf	printf@f& (0+255),b
  2533  010F7E  0EFF               	movlw	high STR_1
  2534  010F80  0100               	movlb	0	; () banked
  2535  010F82  6FC7               	movwf	(printf@f+1)& (0+255),b
  2536  010F84  0E00               	movlw	0
  2537  010F86  0100               	movlb	0	; () banked
  2538  010F88  6FC9               	movwf	(?_printf+3)& (0+255),b
  2539  010F8A  0E23               	movlw	35
  2540  010F8C  6FC8               	movwf	(?_printf+2)& (0+255),b
  2541  010F8E  EC07  F098         	call	_printf	;wreg free
  2542                           
  2543                           ;main.c: 80: Colour myColours[] = {0xF800, 0xFFFF, 0x001F, 0x07E0, 0x07FF};
  2544  010F92  EE21  F0CA         	lfsr	2,main@F7238
  2545  010F96  EE11  F0EB         	lfsr	1,main@myColours
  2546  010F9A  0E09               	movlw	9
  2547  010F9C                     u8941:
  2548  010F9C  CFDB FFE3          	movff	plusw2,plusw1
  2549  010FA0  06E8               	decf	wreg,f,c
  2550  010FA2  E2FC               	bc	u8941
  2551                           
  2552                           ;main.c: 81: int i;
  2553                           ;main.c: 82: char myName[] = "Motor";
  2554  010FA4  EE21  F0D4         	lfsr	2,main@F7241
  2555  010FA8  EE11  F0E5         	lfsr	1,main@myName
  2556  010FAC  0E05               	movlw	5
  2557  010FAE                     u8951:
  2558  010FAE  CFDB FFE3          	movff	plusw2,plusw1
  2559  010FB2  06E8               	decf	wreg,f,c
  2560  010FB4  E2FC               	bc	u8951
  2561                           
  2562                           ;main.c: 83: for(i = 0; i < 5; i++){
  2563  010FB6  0E00               	movlw	0
  2564  010FB8  0101               	movlb	1	; () banked
  2565  010FBA  6FF7               	movwf	(main@i+1)& (0+255),b
  2566  010FBC  0E00               	movlw	0
  2567  010FBE  6FF6               	movwf	main@i& (0+255),b
  2568  010FC0                     l12209:
  2569                           
  2570                           ; BSR set to: 1
  2571  010FC0  0101               	movlb	1	; () banked
  2572  010FC2  BFF7               	btfsc	(main@i+1)& (0+255),7,b
  2573  010FC4  D008               	goto	l12213
  2574  010FC6  0101               	movlb	1	; () banked
  2575  010FC8  51F7               	movf	(main@i+1)& (0+255),w,b
  2576  010FCA  E134               	bnz	l12223
  2577  010FCC  0E05               	movlw	5
  2578  010FCE  0101               	movlb	1	; () banked
  2579  010FD0  5DF6               	subwf	main@i& (0+255),w,b
  2580  010FD2  B0D8               	btfsc	status,0,c
  2581  010FD4  D02F               	goto	l12223
  2582  010FD6                     l12213:
  2583                           
  2584                           ; BSR set to: 1
  2585                           ;main.c: 84: Console_SetForecolour(myColours[i]);
  2586  010FD6  90D8               	bcf	status,0,c
  2587  010FD8  0101               	movlb	1	; () banked
  2588  010FDA  35F6               	rlcf	main@i& (0+255),w,b
  2589  010FDC  6ED9               	movwf	fsr2l,c
  2590  010FDE  0101               	movlb	1	; () banked
  2591  010FE0  35F7               	rlcf	(main@i+1)& (0+255),w,b
  2592  010FE2  6EDA               	movwf	fsr2h,c
  2593  010FE4  0EEB               	movlw	low main@myColours
  2594  010FE6  26D9               	addwf	fsr2l,f,c
  2595  010FE8  0E01               	movlw	high main@myColours
  2596  010FEA  22DA               	addwfc	fsr2h,f,c
  2597  010FEC  CFDE F0B1          	movff	postinc2,Console_SetForecolour@pColour
  2598  010FF0  CFDD F0B2          	movff	postdec2,Console_SetForecolour@pColour+1
  2599  010FF4  EC9C  F0A3         	call	_Console_SetForecolour	;wreg free
  2600                           
  2601                           ;main.c: 85: printf("%c", myName[i]);
  2602  010FF8  0EFC               	movlw	low STR_1
  2603  010FFA  0100               	movlb	0	; () banked
  2604  010FFC  6FC6               	movwf	printf@f& (0+255),b
  2605  010FFE  0EFF               	movlw	high STR_1
  2606  011000  0100               	movlb	0	; () banked
  2607  011002  6FC7               	movwf	(printf@f+1)& (0+255),b
  2608  011004  0EE5               	movlw	low main@myName
  2609  011006  0101               	movlb	1	; () banked
  2610  011008  25F6               	addwf	main@i& (0+255),w,b
  2611  01100A  6ED9               	movwf	fsr2l,c
  2612  01100C  0E01               	movlw	high main@myName
  2613  01100E  0101               	movlb	1	; () banked
  2614  011010  21F7               	addwfc	(main@i+1)& (0+255),w,b
  2615  011012  6EDA               	movwf	fsr2h,c
  2616  011014  50DF               	movf	indf2,w,c
  2617  011016  0101               	movlb	1	; () banked
  2618  011018  6FE4               	movwf	??_main& (0+255),b
  2619  01101A  0101               	movlb	1	; () banked
  2620  01101C  51E4               	movf	??_main& (0+255),w,b
  2621  01101E  0100               	movlb	0	; () banked
  2622  011020  6FC8               	movwf	(?_printf+2)& (0+255),b
  2623  011022  6BC9               	clrf	(?_printf+3)& (0+255),b
  2624  011024  EC07  F098         	call	_printf	;wreg free
  2625                           
  2626                           ;main.c: 86: Console_Render();
  2627  011028  EC74  F088         	call	_Console_Render	;wreg free
  2628  01102C  0101               	movlb	1	; () banked
  2629  01102E  4BF6               	infsnz	main@i& (0+255),f,b
  2630  011030  2BF7               	incf	(main@i+1)& (0+255),f,b
  2631  011032  D7C6               	goto	l12209
  2632  011034                     l12223:
  2633                           
  2634                           ; BSR set to: 1
  2635                           ;main.c: 87: }
  2636                           ;main.c: 88: Console_SetForecolour(0xFFFF);
  2637  011034  0EFF               	movlw	255
  2638  011036  0100               	movlb	0	; () banked
  2639  011038  6FB2               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  2640  01103A  69B1               	setf	Console_SetForecolour@pColour& (0+255),b
  2641  01103C  EC9C  F0A3         	call	_Console_SetForecolour	;wreg free
  2642                           
  2643                           ;main.c: 89: printf(" Information\n");
  2644  011040  0EE9               	movlw	low STR_3
  2645  011042  0100               	movlb	0	; () banked
  2646  011044  6FC6               	movwf	printf@f& (0+255),b
  2647  011046  0EFF               	movlw	high STR_3
  2648  011048  0100               	movlb	0	; () banked
  2649  01104A  6FC7               	movwf	(printf@f+1)& (0+255),b
  2650  01104C  EC07  F098         	call	_printf	;wreg free
  2651                           
  2652                           ;main.c: 90: Console_Render();
  2653  011050  EC74  F088         	call	_Console_Render	;wreg free
  2654                           
  2655                           ;main.c: 97: HMI_Poll();
  2656  011054  ECE8  F09A         	call	_HMI_Poll	;wreg free
  2657                           
  2658                           ;main.c: 98: UINT8 upState = HMIBoard.mUp.mGetState();
  2659  011058  EE21  F04A         	lfsr	2,_HMIBoard+35
  2660  01105C  D801               	call	u8988
  2661  01105E  D00A               	goto	u8989
  2662  011060                     u8988:
  2663  011060  0005               	push	
  2664  011062  6EFA               	movwf	pclath,c
  2665  011064  50DE               	movf	postinc2,w,c
  2666  011066  6EFD               	movwf	tosl,c
  2667  011068  50DE               	movf	postinc2,w,c
  2668  01106A  6EFE               	movwf	tosh,c
  2669  01106C  50DE               	movf	postinc2,w,c
  2670  01106E  6EFF               	movwf	tosu,c
  2671  011070  50FA               	movf	pclath,w,c
  2672  011072  0012               	return		;indir
  2673  011074                     u8989:
  2674  011074  0101               	movlb	1	; () banked
  2675  011076  6FF5               	movwf	main@upState& (0+255),b
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;main.c: 104: HMI_SetSegments("2017");
  2679  011078  0EF7               	movlw	low STR_4
  2680  01107A  0100               	movlb	0	; () banked
  2681  01107C  6FB2               	movwf	HMI_SetSegments@pString& (0+255),b
  2682  01107E  0EFF               	movlw	high STR_4
  2683  011080  0100               	movlb	0	; () banked
  2684  011082  6FB3               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  2685  011084  EC73  F091         	call	_HMI_SetSegments	;wreg free
  2686                           
  2687                           ;main.c: 105: HMI_Render();
  2688  011088  EC0C  F0A0         	call	_HMI_Render	;wreg free
  2689                           
  2690                           ;main.c: 107: if (MXK_Release())
  2691  01108C  EC1F  F0A3         	call	_MXK_Release	;wreg free
  2692  011090  0900               	iorlw	0
  2693  011092  A4D8               	btfss	status,2,c
  2694                           
  2695                           ;main.c: 108: MXK_Dequeue();
  2696  011094  EC0C  F0A1         	call	_MXK_Dequeue	;wreg free
  2697  011098                     l12241:
  2698                           
  2699                           ;main.c: 109: }
  2700                           ;main.c: 112: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2701  011098  0E08               	movlw	8
  2702  01109A  ECED  F09F         	call	_MXK_BlockSwitchTo
  2703  01109E  0900               	iorlw	0
  2704  0110A0  B4D8               	btfsc	status,2,c
  2705  0110A2  D764               	goto	l12199
  2706                           
  2707                           ;main.c: 119: Motor_Speed(&motor, 256);
  2708  0110A4  0EBA               	movlw	low _motor
  2709  0110A6  0100               	movlb	0	; () banked
  2710  0110A8  6FCC               	movwf	Motor_Speed@pMotor& (0+255),b
  2711  0110AA  0E01               	movlw	high _motor
  2712  0110AC  0100               	movlb	0	; () banked
  2713  0110AE  6FCD               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  2714  0110B0  0E01               	movlw	1
  2715  0110B2  0100               	movlb	0	; () banked
  2716  0110B4  6FCF               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  2717  0110B6  0E00               	movlw	0
  2718  0110B8  6FCE               	movwf	Motor_Speed@pFrequency& (0+255),b
  2719  0110BA  ECC8  F0A1         	call	_Motor_Speed	;wreg free
  2720                           
  2721                           ;main.c: 120: Motor_Continious(&motor, 1);
  2722  0110BE  0EBA               	movlw	low _motor
  2723  0110C0  0100               	movlb	0	; () banked
  2724  0110C2  6FB1               	movwf	Motor_Continious@pMotor& (0+255),b
  2725  0110C4  0E01               	movlw	high _motor
  2726  0110C6  0100               	movlb	0	; () banked
  2727  0110C8  6FB2               	movwf	(Motor_Continious@pMotor+1)& (0+255),b
  2728  0110CA  0E00               	movlw	0
  2729  0110CC  0100               	movlb	0	; () banked
  2730  0110CE  6FB4               	movwf	(Motor_Continious@pDirection+1)& (0+255),b
  2731  0110D0  0E01               	movlw	1
  2732  0110D2  6FB3               	movwf	Motor_Continious@pDirection& (0+255),b
  2733  0110D4  EC68  F09F         	call	_Motor_Continious	;wreg free
  2734                           
  2735                           ;main.c: 122: if (MXK_Release())
  2736  0110D8  EC1F  F0A3         	call	_MXK_Release	;wreg free
  2737  0110DC  0900               	iorlw	0
  2738  0110DE  B4D8               	btfsc	status,2,c
  2739  0110E0  D745               	goto	l12199
  2740                           
  2741                           ;main.c: 123: MXK_Dequeue();
  2742  0110E2  EC0C  F0A1         	call	_MXK_Dequeue	;wreg free
  2743                           
  2744                           ;main.c: 124: }
  2745                           ;main.c: 125: }
  2746  0110E6  D742               	goto	l12199
  2747  0110E8                     __end_of_main:
  2748                           	opt stack 0
  2749                           tosu	equ	0xFFF
  2750                           tosh	equ	0xFFE
  2751                           tosl	equ	0xFFD
  2752                           pclath	equ	0xFFA
  2753                           tblptru	equ	0xFF8
  2754                           tblptrh	equ	0xFF7
  2755                           tblptrl	equ	0xFF6
  2756                           tablat	equ	0xFF5
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           postdec1	equ	0xFE5
  2760                           plusw1	equ	0xFE3
  2761                           fsr1h	equ	0xFE2
  2762                           fsr1l	equ	0xFE1
  2763                           indf2	equ	0xFDF
  2764                           postinc2	equ	0xFDE
  2765                           postdec2	equ	0xFDD
  2766                           plusw2	equ	0xFDB
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8
  2770                           
  2771 ;; *************** function _printf *****************
  2772 ;; Defined at:
  2773 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  2776 ;;		 -> STR_3(14), STR_2(3), STR_1(3), 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  tmpval          4    0        struct .
  2779 ;;  cp              3    0        PTR const unsigned char 
  2780 ;;  ap              2   26[BANK0 ] PTR void [1]
  2781 ;;		 -> ?_printf(2), 
  2782 ;;  len             2    0        unsigned int 
  2783 ;;  val             2    0        unsigned int 
  2784 ;;  c               1   28[BANK0 ] char 
  2785 ;;  flag            1   25[BANK0 ] unsigned char 
  2786 ;;  prec            1    0        char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  2   21[BANK0 ] int 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2796 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;Total ram usage:        8 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:   12
  2803 ;; This function calls:
  2804 ;;		_putch
  2805 ;; This function is called by:
  2806 ;;		_main
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text1
  2811  01300E                     __ptext1:
  2812                           	opt stack 0
  2813  01300E                     _printf:
  2814                           	opt stack 18
  2815                           
  2816                           ;doprnt.c: 466: va_list ap;
  2817                           ;doprnt.c: 499: signed char c;
  2818                           ;doprnt.c: 506: signed char prec;
  2819                           ;doprnt.c: 508: unsigned char flag;
  2820                           ;doprnt.c: 523: union {
  2821                           ;doprnt.c: 524: unsigned long vd;
  2822                           ;doprnt.c: 525: double integ;
  2823                           ;doprnt.c: 526: } tmpval;
  2824                           ;doprnt.c: 528: unsigned int val;
  2825                           ;doprnt.c: 529: unsigned len;
  2826                           ;doprnt.c: 530: const char * cp;
  2827                           ;doprnt.c: 533: *ap = __va_start();
  2828                           
  2829                           ;incstack = 0
  2830  01300E  0EC8               	movlw	low (?_printf+2)
  2831  013010  0100               	movlb	0	; () banked
  2832  013012  6FCB               	movwf	printf@ap& (0+255),b
  2833  013014  0E00               	movlw	high (?_printf+2)
  2834  013016  0100               	movlb	0	; () banked
  2835  013018  6FCC               	movwf	(printf@ap+1)& (0+255),b
  2836                           
  2837                           ;doprnt.c: 536: while(c = *f++) {
  2838  01301A  D034               	goto	l11581
  2839  01301C                     l11565:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;doprnt.c: 538: if(c != '%')
  2843  01301C  0E25               	movlw	37
  2844  01301E  0100               	movlb	0	; () banked
  2845  013020  19CD               	xorwf	printf@c& (0+255),w,b
  2846  013022  B4D8               	btfsc	status,2,c
  2847  013024  D005               	goto	l11569
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;doprnt.c: 540: {
  2851                           ;doprnt.c: 541: (putch(c) );
  2852  013026  0100               	movlb	0	; () banked
  2853  013028  51CD               	movf	printf@c& (0+255),w,b
  2854  01302A  EC5F  F0A3         	call	_putch
  2855                           
  2856                           ;doprnt.c: 542: continue;
  2857  01302E  D02A               	goto	l11581
  2858  013030                     l11569:
  2859                           
  2860                           ;doprnt.c: 543: }
  2861                           ;doprnt.c: 548: flag = 0;
  2862  013030  0E00               	movlw	0
  2863  013032  0100               	movlb	0	; () banked
  2864  013034  6FCA               	movwf	printf@flag& (0+255),b
  2865                           
  2866                           ;doprnt.c: 635: switch(c = *f++) {
  2867  013036  D011               	goto	l11579
  2868  013038                     l11571:
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2872  013038  C0CB  FFD9         	movff	printf@ap,fsr2l
  2873  01303C  C0CC  FFDA         	movff	printf@ap+1,fsr2h
  2874  013040  50DF               	movf	indf2,w,c
  2875  013042  0100               	movlb	0	; () banked
  2876  013044  6FCD               	movwf	printf@c& (0+255),b
  2877                           
  2878                           ; BSR set to: 0
  2879  013046  0E02               	movlw	2
  2880  013048  0100               	movlb	0	; () banked
  2881  01304A  27CB               	addwf	printf@ap& (0+255),f,b
  2882  01304C  0E00               	movlw	0
  2883  01304E  23CC               	addwfc	(printf@ap+1)& (0+255),f,b
  2884  013050                     l11575:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;doprnt.c: 809: (putch(c) );
  2888  013050  0100               	movlb	0	; () banked
  2889  013052  51CD               	movf	printf@c& (0+255),w,b
  2890  013054  EC5F  F0A3         	call	_putch
  2891                           
  2892                           ;doprnt.c: 822: }
  2893                           
  2894                           ;doprnt.c: 810: continue;
  2895  013058  D015               	goto	l11581
  2896  01305A                     l11579:
  2897  01305A  C0C6  FFF6         	movff	printf@f,tblptrl
  2898  01305E  C0C7  FFF7         	movff	printf@f+1,tblptrh
  2899  013062  0100               	movlb	0	; () banked
  2900  013064  4BC6               	infsnz	printf@f& (0+255),f,b
  2901  013066  2BC7               	incf	(printf@f+1)& (0+255),f,b
  2902  013068                     	if	0	;tblptru may be non-zero
  2903  013068                     	endif
  2904  013068                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2905  013068  0E00               	movlw	low (__mediumconst shr (0+16))
  2906  01306A  6EF8               	movwf	tblptru,c
  2907  01306C                     	endif
  2908  01306C  0008               	tblrd		*
  2909  01306E  CFF5 F0CD          	movff	tablat,printf@c
  2910  013072  0100               	movlb	0	; () banked
  2911  013074  51CD               	movf	printf@c& (0+255),w,b
  2912                           
  2913                           ; Switch size 1, requested type "space"
  2914                           ; Number of cases is 2, Range of values is 0 to 99
  2915                           ; switch strategies available:
  2916                           ; Name         Instructions Cycles
  2917                           ; simple_byte            7     4 (average)
  2918                           ;	Chosen strategy is simple_byte
  2919  013076  0A00               	xorlw	0	; case 0
  2920  013078  B4D8               	btfsc	status,2,c
  2921  01307A  0012               	return	
  2922  01307C  0A63               	xorlw	99	; case 99
  2923  01307E  B4D8               	btfsc	status,2,c
  2924  013080  D7DB               	goto	l11571
  2925  013082  D7E6               	goto	l11575
  2926  013084                     l11581:
  2927  013084  C0C6  FFF6         	movff	printf@f,tblptrl
  2928  013088  C0C7  FFF7         	movff	printf@f+1,tblptrh
  2929  01308C  0100               	movlb	0	; () banked
  2930  01308E  4BC6               	infsnz	printf@f& (0+255),f,b
  2931  013090  2BC7               	incf	(printf@f+1)& (0+255),f,b
  2932  013092                     	if	0	;tblptru may be non-zero
  2933  013092                     	endif
  2934  013092                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2935  013092  0E00               	movlw	low (__mediumconst shr (0+16))
  2936  013094  6EF8               	movwf	tblptru,c
  2937  013096                     	endif
  2938  013096  0008               	tblrd		*
  2939  013098  CFF5 F0CD          	movff	tablat,printf@c
  2940  01309C  0100               	movlb	0	; () banked
  2941  01309E  51CD               	movf	printf@c& (0+255),w,b
  2942  0130A0  B4D8               	btfsc	status,2,c
  2943  0130A2  0012               	return	
  2944  0130A4  D7BB               	goto	l11565
  2945  0130A6                     __end_of_printf:
  2946                           	opt stack 0
  2947                           tosu	equ	0xFFF
  2948                           tosh	equ	0xFFE
  2949                           tosl	equ	0xFFD
  2950                           pclath	equ	0xFFA
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           plusw1	equ	0xFE3
  2959                           fsr1h	equ	0xFE2
  2960                           fsr1l	equ	0xFE1
  2961                           indf2	equ	0xFDF
  2962                           postinc2	equ	0xFDE
  2963                           postdec2	equ	0xFDD
  2964                           plusw2	equ	0xFDB
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _putch *****************
  2970 ;; Defined at:
  2971 ;;		line 454 in file "Library/Console.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  c               1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  c               1   20[BANK0 ] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;Total ram usage:        1 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:   11
  2992 ;; This function calls:
  2993 ;;		_Console_PrintChar
  2994 ;; This function is called by:
  2995 ;;		_printf
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text2
  3000  0146BE                     __ptext2:
  3001                           	opt stack 0
  3002  0146BE                     _putch:
  3003                           	opt stack 18
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;incstack = 0
  3007                           ;putch@c stored from wreg
  3008  0146BE  0100               	movlb	0	; () banked
  3009  0146C0  6FC5               	movwf	putch@c& (0+255),b
  3010                           
  3011                           ;Console.c: 456: Console_PrintChar(c);
  3012  0146C2  0100               	movlb	0	; () banked
  3013  0146C4  51C5               	movf	putch@c& (0+255),w,b
  3014  0146C6  EC20  F08C         	call	_Console_PrintChar
  3015  0146CA  0012               	return		;funcret
  3016  0146CC                     __end_of_putch:
  3017                           	opt stack 0
  3018                           tosu	equ	0xFFF
  3019                           tosh	equ	0xFFE
  3020                           tosl	equ	0xFFD
  3021                           pclath	equ	0xFFA
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           plusw1	equ	0xFE3
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           indf2	equ	0xFDF
  3033                           postinc2	equ	0xFDE
  3034                           postdec2	equ	0xFDD
  3035                           plusw2	equ	0xFDB
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _Console_PrintChar *****************
  3041 ;; Defined at:
  3042 ;;		line 322 in file "Library/Console.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  pInput          1    wreg     unsigned char 
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  pInput          1   19[BANK0 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        4 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:   10
  3063 ;; This function calls:
  3064 ;;		_Console_Backspace
  3065 ;;		_Console_FormFeed
  3066 ;;		_Console_IncrementCursor
  3067 ;;		_Console_NewLine
  3068 ;;		_Console_ResetCursor
  3069 ;;		_Console_Tab
  3070 ;; This function is called by:
  3071 ;;		_putch
  3072 ;;		_Console_PrintString
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text3
  3077  011840                     __ptext3:
  3078                           	opt stack 0
  3079  011840                     _Console_PrintChar:
  3080                           	opt stack 18
  3081                           
  3082                           ;incstack = 0
  3083                           ;Console_PrintChar@pInput stored from wreg
  3084  011840  0100               	movlb	0	; () banked
  3085  011842  6FC4               	movwf	Console_PrintChar@pInput& (0+255),b
  3086                           
  3087                           ;Console.c: 324: switch(pInput)
  3088  011844  D0A8               	goto	l10641
  3089  011846                     l10597:
  3090                           
  3091                           ;Console.c: 327: case '\n':
  3092                           ;Console.c: 328: Console_NewLine();
  3093  011846  EC9F  F098         	call	_Console_NewLine	;wreg free
  3094                           
  3095                           ;Console.c: 329: return;
  3096  01184A  0012               	return	
  3097  01184C                     l10601:
  3098                           
  3099                           ;Console.c: 331: Console_Backspace();
  3100  01184C  EC68  F09E         	call	_Console_Backspace	;wreg free
  3101                           
  3102                           ;Console.c: 332: return;
  3103  011850  0012               	return	
  3104  011852                     l10605:
  3105                           
  3106                           ;Console.c: 334: Console_FormFeed();
  3107  011852  EC30  F099         	call	_Console_FormFeed	;wreg free
  3108                           
  3109                           ;Console.c: 335: return;
  3110  011856  0012               	return	
  3111  011858                     l10609:
  3112                           
  3113                           ;Console.c: 337: Console_Tab();
  3114  011858  ECF4  F093         	call	_Console_Tab	;wreg free
  3115                           
  3116                           ;Console.c: 338: return;
  3117  01185C  0012               	return	
  3118  01185E                     l10613:
  3119                           
  3120                           ;Console.c: 340: Console_IncrementCursor();
  3121  01185E  ECA4  F09C         	call	_Console_IncrementCursor	;wreg free
  3122                           
  3123                           ;Console.c: 341: return;
  3124  011862  0012               	return	
  3125  011864                     l10617:
  3126                           
  3127                           ;Console.c: 343: Console_ResetCursor();
  3128  011864  ECA5  F0A2         	call	_Console_ResetCursor	;wreg free
  3129                           
  3130                           ;Console.c: 344: return;
  3131  011868  0012               	return	
  3132  01186A                     l10621:
  3133                           
  3134                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3135  01186A  C0C4  F0C1         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3136  01186E  0E7F               	movlw	127
  3137  011870  0100               	movlb	0	; () banked
  3138  011872  17C1               	andwf	??_Console_PrintChar& (0+255),f,b
  3139  011874  5036               	movf	_lBufferY,w,c
  3140  011876  0D14               	mullw	20
  3141  011878  0E46               	movlw	low _lBuffer
  3142  01187A  0100               	movlb	0	; () banked
  3143  01187C  6FC2               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3144  01187E  0E02               	movlw	high _lBuffer
  3145  011880  0100               	movlb	0	; () banked
  3146  011882  6FC3               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3147  011884  50F3               	movf	prodl,w,c
  3148  011886  0100               	movlb	0	; () banked
  3149  011888  27C2               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3150  01188A  50F4               	movf	prodh,w,c
  3151  01188C  0100               	movlb	0	; () banked
  3152  01188E  23C3               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3153  011890  5037               	movf	_lBufferX,w,c
  3154  011892  0D01               	mullw	1
  3155  011894  50F3               	movf	prodl,w,c
  3156  011896  0100               	movlb	0	; () banked
  3157  011898  25C2               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3158  01189A  6ED9               	movwf	fsr2l,c
  3159  01189C  50F4               	movf	prodh,w,c
  3160  01189E  0100               	movlb	0	; () banked
  3161  0118A0  21C3               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3162  0118A2  6EDA               	movwf	fsr2h,c
  3163  0118A4  50DF               	movf	indf2,w,c
  3164  0118A6  0B7F               	andlw	127
  3165  0118A8  0100               	movlb	0	; () banked
  3166  0118AA  19C1               	xorwf	??_Console_PrintChar& (0+255),w,b
  3167  0118AC  B4D8               	btfsc	status,2,c
  3168  0118AE  D02B               	goto	l10629
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;Console.c: 351: {
  3172                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3173  0118B0  0E01               	movlw	1
  3174  0118B2  0100               	movlb	0	; () banked
  3175  0118B4  6FFF               	movwf	_change& (0+255),b
  3176                           
  3177                           ; BSR set to: 0
  3178  0118B6  5036               	movf	_lBufferY,w,c
  3179  0118B8  0D14               	mullw	20
  3180  0118BA  0E46               	movlw	low _lBuffer
  3181  0118BC  0100               	movlb	0	; () banked
  3182  0118BE  6FC1               	movwf	??_Console_PrintChar& (0+255),b
  3183  0118C0  0E02               	movlw	high _lBuffer
  3184  0118C2  0100               	movlb	0	; () banked
  3185  0118C4  6FC2               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3186  0118C6  50F3               	movf	prodl,w,c
  3187  0118C8  0100               	movlb	0	; () banked
  3188  0118CA  27C1               	addwf	??_Console_PrintChar& (0+255),f,b
  3189  0118CC  50F4               	movf	prodh,w,c
  3190  0118CE  0100               	movlb	0	; () banked
  3191  0118D0  23C2               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3192  0118D2  5037               	movf	_lBufferX,w,c
  3193  0118D4  0D01               	mullw	1
  3194  0118D6  50F3               	movf	prodl,w,c
  3195  0118D8  0100               	movlb	0	; () banked
  3196  0118DA  25C1               	addwf	??_Console_PrintChar& (0+255),w,b
  3197  0118DC  6ED9               	movwf	fsr2l,c
  3198  0118DE  50F4               	movf	prodh,w,c
  3199  0118E0  0100               	movlb	0	; () banked
  3200  0118E2  21C2               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3201  0118E4  6EDA               	movwf	fsr2h,c
  3202  0118E6  0100               	movlb	0	; () banked
  3203  0118E8  51C4               	movf	Console_PrintChar@pInput& (0+255),w,b
  3204  0118EA  0980               	iorlw	128
  3205  0118EC  6EDF               	movwf	indf2,c
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  3209  0118EE  5036               	movf	_lBufferY,w,c
  3210  0118F0  0D02               	mullw	2
  3211  0118F2  0E00               	movlw	low _lCBuffer
  3212  0118F4  24F3               	addwf	prodl,w,c
  3213  0118F6  6ED9               	movwf	fsr2l,c
  3214  0118F8  0E01               	movlw	high _lCBuffer
  3215  0118FA  20F4               	addwfc	prodh,w,c
  3216  0118FC  6EDA               	movwf	fsr2h,c
  3217  0118FE  C0FD  FFDE         	movff	_gForecolour,postinc2
  3218  011902  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  3219  011906                     l10629:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;Console.c: 354: }
  3223                           ;Console.c: 368: if(Console_IncrementCursor())
  3224  011906  ECA4  F09C         	call	_Console_IncrementCursor	;wreg free
  3225  01190A  0900               	iorlw	0
  3226  01190C  B4D8               	btfsc	status,2,c
  3227  01190E  0012               	return	
  3228                           
  3229                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3230  011910  C0C4  F0C1         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3231  011914  0E7F               	movlw	127
  3232  011916  0100               	movlb	0	; () banked
  3233  011918  17C1               	andwf	??_Console_PrintChar& (0+255),f,b
  3234  01191A  5036               	movf	_lBufferY,w,c
  3235  01191C  0D14               	mullw	20
  3236  01191E  0E46               	movlw	low _lBuffer
  3237  011920  0100               	movlb	0	; () banked
  3238  011922  6FC2               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3239  011924  0E02               	movlw	high _lBuffer
  3240  011926  0100               	movlb	0	; () banked
  3241  011928  6FC3               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3242  01192A  50F3               	movf	prodl,w,c
  3243  01192C  0100               	movlb	0	; () banked
  3244  01192E  27C2               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3245  011930  50F4               	movf	prodh,w,c
  3246  011932  0100               	movlb	0	; () banked
  3247  011934  23C3               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3248  011936  5037               	movf	_lBufferX,w,c
  3249  011938  0D01               	mullw	1
  3250  01193A  50F3               	movf	prodl,w,c
  3251  01193C  0100               	movlb	0	; () banked
  3252  01193E  25C2               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3253  011940  6ED9               	movwf	fsr2l,c
  3254  011942  50F4               	movf	prodh,w,c
  3255  011944  0100               	movlb	0	; () banked
  3256  011946  21C3               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3257  011948  6EDA               	movwf	fsr2h,c
  3258  01194A  50DF               	movf	indf2,w,c
  3259  01194C  0B7F               	andlw	127
  3260  01194E  0100               	movlb	0	; () banked
  3261  011950  19C1               	xorwf	??_Console_PrintChar& (0+255),w,b
  3262  011952  B4D8               	btfsc	status,2,c
  3263  011954  0012               	return	
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3267  011956  0E01               	movlw	1
  3268  011958  0100               	movlb	0	; () banked
  3269  01195A  6FFF               	movwf	_change& (0+255),b
  3270                           
  3271                           ; BSR set to: 0
  3272  01195C  5036               	movf	_lBufferY,w,c
  3273  01195E  0D14               	mullw	20
  3274  011960  0E46               	movlw	low _lBuffer
  3275  011962  0100               	movlb	0	; () banked
  3276  011964  6FC1               	movwf	??_Console_PrintChar& (0+255),b
  3277  011966  0E02               	movlw	high _lBuffer
  3278  011968  0100               	movlb	0	; () banked
  3279  01196A  6FC2               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3280  01196C  50F3               	movf	prodl,w,c
  3281  01196E  0100               	movlb	0	; () banked
  3282  011970  27C1               	addwf	??_Console_PrintChar& (0+255),f,b
  3283  011972  50F4               	movf	prodh,w,c
  3284  011974  0100               	movlb	0	; () banked
  3285  011976  23C2               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3286  011978  5037               	movf	_lBufferX,w,c
  3287  01197A  0D01               	mullw	1
  3288  01197C  50F3               	movf	prodl,w,c
  3289  01197E  0100               	movlb	0	; () banked
  3290  011980  25C1               	addwf	??_Console_PrintChar& (0+255),w,b
  3291  011982  6ED9               	movwf	fsr2l,c
  3292  011984  50F4               	movf	prodh,w,c
  3293  011986  0100               	movlb	0	; () banked
  3294  011988  21C2               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3295  01198A  6EDA               	movwf	fsr2h,c
  3296  01198C  0100               	movlb	0	; () banked
  3297  01198E  51C4               	movf	Console_PrintChar@pInput& (0+255),w,b
  3298  011990  0980               	iorlw	128
  3299  011992  6EDF               	movwf	indf2,c
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;Console.c: 372: };
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;Console.c: 371: return;
  3306                           
  3307                           ; BSR set to: 0
  3308                           
  3309                           ; BSR set to: 0
  3310  011994  0012               	return	
  3311  011996                     l10641:
  3312  011996  0100               	movlb	0	; () banked
  3313  011998  51C4               	movf	Console_PrintChar@pInput& (0+255),w,b
  3314                           
  3315                           ; Switch size 1, requested type "space"
  3316                           ; Number of cases is 8, Range of values is 7 to 35
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte           25    13 (average)
  3320                           ;	Chosen strategy is simple_byte
  3321  01199A  0A07               	xorlw	7	; case 7
  3322  01199C  B4D8               	btfsc	status,2,c
  3323  01199E  D75F               	goto	l10613
  3324  0119A0  0A0F               	xorlw	15	; case 8
  3325  0119A2  B4D8               	btfsc	status,2,c
  3326  0119A4  D753               	goto	l10601
  3327  0119A6  0A01               	xorlw	1	; case 9
  3328  0119A8  B4D8               	btfsc	status,2,c
  3329  0119AA  D756               	goto	l10609
  3330  0119AC  0A03               	xorlw	3	; case 10
  3331  0119AE  B4D8               	btfsc	status,2,c
  3332  0119B0  D74A               	goto	l10597
  3333  0119B2  0A06               	xorlw	6	; case 12
  3334  0119B4  B4D8               	btfsc	status,2,c
  3335  0119B6  D74D               	goto	l10605
  3336  0119B8  0A01               	xorlw	1	; case 13
  3337  0119BA  B4D8               	btfsc	status,2,c
  3338  0119BC  D744               	goto	l10597
  3339  0119BE  0A2D               	xorlw	45	; case 32
  3340  0119C0  B4D8               	btfsc	status,2,c
  3341  0119C2  D753               	goto	l10621
  3342  0119C4  0A03               	xorlw	3	; case 35
  3343  0119C6  B4D8               	btfsc	status,2,c
  3344  0119C8  D74D               	goto	l10617
  3345  0119CA  D74F               	goto	l10621
  3346  0119CC                     __end_of_Console_PrintChar:
  3347                           	opt stack 0
  3348                           tosu	equ	0xFFF
  3349                           tosh	equ	0xFFE
  3350                           tosl	equ	0xFFD
  3351                           pclath	equ	0xFFA
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           postdec1	equ	0xFE5
  3361                           plusw1	equ	0xFE3
  3362                           fsr1h	equ	0xFE2
  3363                           fsr1l	equ	0xFE1
  3364                           indf2	equ	0xFDF
  3365                           postinc2	equ	0xFDE
  3366                           postdec2	equ	0xFDD
  3367                           plusw2	equ	0xFDB
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _Console_Tab *****************
  3373 ;; Defined at:
  3374 ;;		line 260 in file "Library/Console.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  c               1   15[BANK0 ] unsigned char 
  3379 ;;  i               1   14[BANK0 ] unsigned char 
  3380 ;;  t               1   13[BANK0 ] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        8 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    9
  3397 ;; This function calls:
  3398 ;;		_Console_ClearCursor
  3399 ;;		_Console_IncrementCursor
  3400 ;;		___awdiv
  3401 ;; This function is called by:
  3402 ;;		_Console_PrintChar
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text4
  3407  0127E8                     __ptext4:
  3408                           	opt stack 0
  3409  0127E8                     _Console_Tab:
  3410                           	opt stack 18
  3411                           
  3412                           ;Console.c: 262: UINT8 i = 0;
  3413                           
  3414                           ;incstack = 0
  3415  0127E8  0E00               	movlw	0
  3416  0127EA  0100               	movlb	0	; () banked
  3417  0127EC  6FBF               	movwf	Console_Tab@i& (0+255),b
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  3421  0127EE  0EFA               	movlw	250
  3422  0127F0  243F               	addwf	_gCursor,w,c
  3423  0127F2  0100               	movlb	0	; () banked
  3424  0127F4  6FB1               	movwf	___awdiv@dividend& (0+255),b
  3425  0127F6  0EFF               	movlw	255
  3426  0127F8  2040               	addwfc	_gCursor+1,w,c
  3427  0127FA  0100               	movlb	0	; () banked
  3428  0127FC  6FB2               	movwf	(___awdiv@dividend+1)& (0+255),b
  3429  0127FE  0E00               	movlw	0
  3430  012800  0100               	movlb	0	; () banked
  3431  012802  6FB4               	movwf	(___awdiv@divisor+1)& (0+255),b
  3432  012804  0E06               	movlw	6
  3433  012806  6FB3               	movwf	___awdiv@divisor& (0+255),b
  3434  012808  EC55  F094         	call	___awdiv	;wreg free
  3435  01280C  0100               	movlb	0	; () banked
  3436  01280E  51B1               	movf	?___awdiv& (0+255),w,b
  3437  012810  0100               	movlb	0	; () banked
  3438  012812  6FC0               	movwf	Console_Tab@c& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;Console.c: 264: UINT8 t = c/4;
  3442  012814  C0C0  F0B1         	movff	Console_Tab@c,___awdiv@dividend
  3443  012818  0100               	movlb	0	; () banked
  3444  01281A  6BB2               	clrf	(___awdiv@dividend+1)& (0+255),b
  3445  01281C  0E00               	movlw	0
  3446  01281E  0100               	movlb	0	; () banked
  3447  012820  6FB4               	movwf	(___awdiv@divisor+1)& (0+255),b
  3448  012822  0E04               	movlw	4
  3449  012824  6FB3               	movwf	___awdiv@divisor& (0+255),b
  3450  012826  EC55  F094         	call	___awdiv	;wreg free
  3451  01282A  0100               	movlb	0	; () banked
  3452  01282C  51B1               	movf	?___awdiv& (0+255),w,b
  3453  01282E  0100               	movlb	0	; () banked
  3454  012830  6FBE               	movwf	Console_Tab@t& (0+255),b
  3455                           
  3456                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  3457  012832  0E00               	movlw	0
  3458  012834  0100               	movlb	0	; () banked
  3459  012836  6FBF               	movwf	Console_Tab@i& (0+255),b
  3460  012838  D006               	goto	l10257
  3461  01283A                     l10253:
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Console.c: 266: {
  3465                           ;Console.c: 267: Console_ClearCursor();
  3466  01283A  EC4A  F0A0         	call	_Console_ClearCursor	;wreg free
  3467                           
  3468                           ;Console.c: 268: Console_IncrementCursor();
  3469  01283E  ECA4  F09C         	call	_Console_IncrementCursor	;wreg free
  3470  012842  0100               	movlb	0	; () banked
  3471  012844  2BBF               	incf	Console_Tab@i& (0+255),f,b
  3472  012846                     l10257:
  3473                           
  3474                           ; BSR set to: 0
  3475  012846  0100               	movlb	0	; () banked
  3476  012848  51BE               	movf	Console_Tab@t& (0+255),w,b
  3477  01284A  0D04               	mullw	4
  3478  01284C  1EF3               	comf	prodl,f,c
  3479  01284E  1EF4               	comf	prodh,f,c
  3480  012850  4AF3               	infsnz	prodl,f,c
  3481  012852  2AF4               	incf	prodh,f,c
  3482  012854  0100               	movlb	0	; () banked
  3483  012856  51C0               	movf	Console_Tab@c& (0+255),w,b
  3484  012858  0100               	movlb	0	; () banked
  3485  01285A  6FB9               	movwf	??_Console_Tab& (0+255),b
  3486  01285C  6BBA               	clrf	(??_Console_Tab+1)& (0+255),b
  3487  01285E  50F3               	movf	prodl,w,c
  3488  012860  0100               	movlb	0	; () banked
  3489  012862  27B9               	addwf	??_Console_Tab& (0+255),f,b
  3490  012864  50F4               	movf	prodh,w,c
  3491  012866  0100               	movlb	0	; () banked
  3492  012868  23BA               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3493  01286A  0100               	movlb	0	; () banked
  3494  01286C  1FB9               	comf	??_Console_Tab& (0+255),f,b
  3495  01286E  1FBA               	comf	(??_Console_Tab+1)& (0+255),f,b
  3496  012870  4BB9               	infsnz	??_Console_Tab& (0+255),f,b
  3497  012872  2BBA               	incf	(??_Console_Tab+1)& (0+255),f,b
  3498  012874  0E04               	movlw	4
  3499  012876  0100               	movlb	0	; () banked
  3500  012878  27B9               	addwf	??_Console_Tab& (0+255),f,b
  3501  01287A  0E00               	movlw	0
  3502  01287C  23BA               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3503  01287E  0100               	movlb	0	; () banked
  3504  012880  51BF               	movf	Console_Tab@i& (0+255),w,b
  3505  012882  0100               	movlb	0	; () banked
  3506  012884  6FBB               	movwf	(??_Console_Tab+2)& (0+255),b
  3507  012886  6BBC               	clrf	(??_Console_Tab+3)& (0+255),b
  3508  012888  0100               	movlb	0	; () banked
  3509  01288A  51B9               	movf	??_Console_Tab& (0+255),w,b
  3510  01288C  0100               	movlb	0	; () banked
  3511  01288E  5DBB               	subwf	(??_Console_Tab+2)& (0+255),w,b
  3512  012890  0100               	movlb	0	; () banked
  3513  012892  51BC               	movf	(??_Console_Tab+3)& (0+255),w,b
  3514  012894  0A80               	xorlw	128
  3515  012896  0100               	movlb	0	; () banked
  3516  012898  6FBD               	movwf	(??_Console_Tab+4)& (0+255),b
  3517  01289A  0100               	movlb	0	; () banked
  3518  01289C  51BA               	movf	(??_Console_Tab+1)& (0+255),w,b
  3519  01289E  0A80               	xorlw	128
  3520  0128A0  0100               	movlb	0	; () banked
  3521  0128A2  59BD               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  3522  0128A4  B0D8               	btfsc	status,0,c
  3523  0128A6  0012               	return	
  3524  0128A8  D7C8               	goto	l10253
  3525  0128AA                     __end_of_Console_Tab:
  3526                           	opt stack 0
  3527                           tosu	equ	0xFFF
  3528                           tosh	equ	0xFFE
  3529                           tosl	equ	0xFFD
  3530                           pclath	equ	0xFFA
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           postdec1	equ	0xFE5
  3540                           plusw1	equ	0xFE3
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function ___awdiv *****************
  3552 ;; Defined at:
  3553 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  dividend        2    0[BANK0 ] int 
  3556 ;;  divisor         2    2[BANK0 ] int 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  quotient        2    6[BANK0 ] int 
  3559 ;;  sign            1    5[BANK0 ] unsigned char 
  3560 ;;  counter         1    4[BANK0 ] unsigned char 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  2    0[BANK0 ] int 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3570 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;Total ram usage:        8 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    7
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_Console_Tab
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text5
  3585  0128AA                     __ptext5:
  3586                           	opt stack 0
  3587  0128AA                     ___awdiv:
  3588                           	opt stack 19
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;incstack = 0
  3592  0128AA  0E00               	movlw	0
  3593  0128AC  0100               	movlb	0	; () banked
  3594  0128AE  6FB6               	movwf	___awdiv@sign& (0+255),b
  3595                           
  3596                           ; BSR set to: 0
  3597  0128B0  0100               	movlb	0	; () banked
  3598  0128B2  AFB4               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3599  0128B4  D008               	goto	l10005
  3600                           
  3601                           ; BSR set to: 0
  3602  0128B6  0100               	movlb	0	; () banked
  3603  0128B8  6DB3               	negf	___awdiv@divisor& (0+255),b
  3604  0128BA  1FB4               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3605  0128BC  B0D8               	btfsc	status,0,c
  3606  0128BE  2BB4               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3607                           
  3608                           ; BSR set to: 0
  3609  0128C0  0E01               	movlw	1
  3610  0128C2  0100               	movlb	0	; () banked
  3611  0128C4  6FB6               	movwf	___awdiv@sign& (0+255),b
  3612  0128C6                     l10005:
  3613                           
  3614                           ; BSR set to: 0
  3615  0128C6  0100               	movlb	0	; () banked
  3616  0128C8  AFB2               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3617  0128CA  D008               	goto	l10011
  3618                           
  3619                           ; BSR set to: 0
  3620  0128CC  0100               	movlb	0	; () banked
  3621  0128CE  6DB1               	negf	___awdiv@dividend& (0+255),b
  3622  0128D0  1FB2               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3623  0128D2  B0D8               	btfsc	status,0,c
  3624  0128D4  2BB2               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3625                           
  3626                           ; BSR set to: 0
  3627  0128D6  0E01               	movlw	1
  3628  0128D8  0100               	movlb	0	; () banked
  3629  0128DA  1BB6               	xorwf	___awdiv@sign& (0+255),f,b
  3630  0128DC                     l10011:
  3631                           
  3632                           ; BSR set to: 0
  3633  0128DC  0E00               	movlw	0
  3634  0128DE  0100               	movlb	0	; () banked
  3635  0128E0  6FB8               	movwf	(___awdiv@quotient+1)& (0+255),b
  3636  0128E2  0E00               	movlw	0
  3637  0128E4  6FB7               	movwf	___awdiv@quotient& (0+255),b
  3638                           
  3639                           ; BSR set to: 0
  3640  0128E6  0100               	movlb	0	; () banked
  3641  0128E8  51B3               	movf	___awdiv@divisor& (0+255),w,b
  3642  0128EA  0100               	movlb	0	; () banked
  3643  0128EC  11B4               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3644  0128EE  B4D8               	btfsc	status,2,c
  3645  0128F0  D02C               	goto	l10033
  3646                           
  3647                           ; BSR set to: 0
  3648  0128F2  0E01               	movlw	1
  3649  0128F4  0100               	movlb	0	; () banked
  3650  0128F6  6FB5               	movwf	___awdiv@counter& (0+255),b
  3651  0128F8  D006               	goto	l10019
  3652  0128FA                     l10017:
  3653                           
  3654                           ; BSR set to: 0
  3655  0128FA  0100               	movlb	0	; () banked
  3656  0128FC  90D8               	bcf	status,0,c
  3657  0128FE  37B3               	rlcf	___awdiv@divisor& (0+255),f,b
  3658  012900  37B4               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3659  012902  0100               	movlb	0	; () banked
  3660  012904  2BB5               	incf	___awdiv@counter& (0+255),f,b
  3661  012906                     l10019:
  3662                           
  3663                           ; BSR set to: 0
  3664  012906  0100               	movlb	0	; () banked
  3665  012908  AFB4               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3666  01290A  D7F7               	goto	l10017
  3667  01290C                     l10021:
  3668                           
  3669                           ; BSR set to: 0
  3670  01290C  0100               	movlb	0	; () banked
  3671  01290E  90D8               	bcf	status,0,c
  3672  012910  37B7               	rlcf	___awdiv@quotient& (0+255),f,b
  3673  012912  37B8               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3674                           
  3675                           ; BSR set to: 0
  3676  012914  0100               	movlb	0	; () banked
  3677  012916  51B3               	movf	___awdiv@divisor& (0+255),w,b
  3678  012918  0100               	movlb	0	; () banked
  3679  01291A  5DB1               	subwf	___awdiv@dividend& (0+255),w,b
  3680  01291C  0100               	movlb	0	; () banked
  3681  01291E  51B4               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3682  012920  0100               	movlb	0	; () banked
  3683  012922  59B2               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3684  012924  A0D8               	btfss	status,0,c
  3685  012926  D00A               	goto	l10029
  3686                           
  3687                           ; BSR set to: 0
  3688  012928  0100               	movlb	0	; () banked
  3689  01292A  51B3               	movf	___awdiv@divisor& (0+255),w,b
  3690  01292C  0100               	movlb	0	; () banked
  3691  01292E  5FB1               	subwf	___awdiv@dividend& (0+255),f,b
  3692  012930  0100               	movlb	0	; () banked
  3693  012932  51B4               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3694  012934  0100               	movlb	0	; () banked
  3695  012936  5BB2               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3696                           
  3697                           ; BSR set to: 0
  3698  012938  0100               	movlb	0	; () banked
  3699  01293A  81B7               	bsf	___awdiv@quotient& (0+255),0,b
  3700  01293C                     l10029:
  3701                           
  3702                           ; BSR set to: 0
  3703  01293C  0100               	movlb	0	; () banked
  3704  01293E  90D8               	bcf	status,0,c
  3705  012940  33B4               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3706  012942  33B3               	rrcf	___awdiv@divisor& (0+255),f,b
  3707                           
  3708                           ; BSR set to: 0
  3709  012944  0100               	movlb	0	; () banked
  3710  012946  2FB5               	decfsz	___awdiv@counter& (0+255),f,b
  3711  012948  D7E1               	goto	l10021
  3712  01294A                     l10033:
  3713                           
  3714                           ; BSR set to: 0
  3715  01294A  0100               	movlb	0	; () banked
  3716  01294C  51B6               	movf	___awdiv@sign& (0+255),w,b
  3717  01294E  0100               	movlb	0	; () banked
  3718  012950  B4D8               	btfsc	status,2,c
  3719  012952  D005               	goto	l10037
  3720                           
  3721                           ; BSR set to: 0
  3722  012954  0100               	movlb	0	; () banked
  3723  012956  6DB7               	negf	___awdiv@quotient& (0+255),b
  3724  012958  1FB8               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3725  01295A  B0D8               	btfsc	status,0,c
  3726  01295C  2BB8               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3727  01295E                     l10037:
  3728                           
  3729                           ; BSR set to: 0
  3730  01295E  C0B7  F0B1         	movff	___awdiv@quotient,?___awdiv
  3731  012962  C0B8  F0B2         	movff	___awdiv@quotient+1,?___awdiv+1
  3732  012966  0012               	return	
  3733  012968                     __end_of___awdiv:
  3734                           	opt stack 0
  3735                           tosu	equ	0xFFF
  3736                           tosh	equ	0xFFE
  3737                           tosl	equ	0xFFD
  3738                           pclath	equ	0xFFA
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           postdec1	equ	0xFE5
  3748                           plusw1	equ	0xFE3
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           indf2	equ	0xFDF
  3752                           postinc2	equ	0xFDE
  3753                           postdec2	equ	0xFDD
  3754                           plusw2	equ	0xFDB
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _Console_IncrementCursor *****************
  3760 ;; Defined at:
  3761 ;;		line 243 in file "Library/Console.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      unsigned char 
  3768 ;; Registers used:
  3769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;Total ram usage:        2 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    8
  3782 ;; This function calls:
  3783 ;;		_Console_FormFeed
  3784 ;;		_Console_NewLine
  3785 ;; This function is called by:
  3786 ;;		_Console_Tab
  3787 ;;		_Console_PrintChar
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text6
  3792  013948                     __ptext6:
  3793                           	opt stack 0
  3794  013948                     _Console_IncrementCursor:
  3795                           	opt stack 18
  3796                           
  3797                           ;Console.c: 246: lBufferX += 1;
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;incstack = 0
  3801  013948  2A37               	incf	_lBufferX,f,c
  3802                           
  3803                           ;Console.c: 248: gCursor.x += 6;
  3804  01394A  0E06               	movlw	6
  3805  01394C  263F               	addwf	_gCursor,f,c
  3806  01394E  0E00               	movlw	0
  3807  013950  2240               	addwfc	_gCursor+1,f,c
  3808                           
  3809                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  3810  013952  0E06               	movlw	6
  3811  013954  243F               	addwf	_gCursor,w,c
  3812  013956  0100               	movlb	0	; () banked
  3813  013958  6FB5               	movwf	??_Console_IncrementCursor& (0+255),b
  3814  01395A  0E00               	movlw	0
  3815  01395C  2040               	addwfc	_gCursor+1,w,c
  3816  01395E  0100               	movlb	0	; () banked
  3817  013960  6FB6               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  3818  013962  0100               	movlb	0	; () banked
  3819  013964  BFB6               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  3820  013966  D009               	goto	l9957
  3821  013968  0100               	movlb	0	; () banked
  3822  01396A  51B6               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  3823  01396C  E104               	bnz	u6420
  3824  01396E  0E80               	movlw	128
  3825  013970  0100               	movlb	0	; () banked
  3826  013972  5DB5               	subwf	??_Console_IncrementCursor& (0+255),w,b
  3827  013974  B0D8               	btfsc	status,0,c
  3828  013976                     u6420:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;Console.c: 250: Console_NewLine();
  3832  013976  EC9F  F098         	call	_Console_NewLine	;wreg free
  3833  01397A                     l9957:
  3834                           
  3835                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  3836  01397A  0E08               	movlw	8
  3837  01397C  2441               	addwf	_gCursor+2,w,c
  3838  01397E  0100               	movlb	0	; () banked
  3839  013980  6FB5               	movwf	??_Console_IncrementCursor& (0+255),b
  3840  013982  0E00               	movlw	0
  3841  013984  2042               	addwfc	_gCursor+3,w,c
  3842  013986  0100               	movlb	0	; () banked
  3843  013988  6FB6               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  3844  01398A  0100               	movlb	0	; () banked
  3845  01398C  BFB6               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  3846  01398E  D00C               	goto	l9965
  3847  013990  0100               	movlb	0	; () banked
  3848  013992  51B6               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  3849  013994  E105               	bnz	u6430
  3850  013996  0E80               	movlw	128
  3851  013998  0100               	movlb	0	; () banked
  3852  01399A  5DB5               	subwf	??_Console_IncrementCursor& (0+255),w,b
  3853  01399C  A0D8               	btfss	status,0,c
  3854  01399E  D004               	goto	l9965
  3855  0139A0                     u6430:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;Console.c: 252: {
  3859                           ;Console.c: 253: Console_FormFeed();
  3860  0139A0  EC30  F099         	call	_Console_FormFeed	;wreg free
  3861                           
  3862                           ;Console.c: 254: return 1;
  3863  0139A4  0E01               	movlw	1
  3864  0139A6  0012               	return	
  3865  0139A8                     l9965:
  3866                           
  3867                           ;Console.c: 255: }
  3868                           ;Console.c: 257: return 0;
  3869  0139A8  0E00               	movlw	0
  3870  0139AA  0012               	return	
  3871  0139AC                     __end_of_Console_IncrementCursor:
  3872                           	opt stack 0
  3873                           tosu	equ	0xFFF
  3874                           tosh	equ	0xFFE
  3875                           tosl	equ	0xFFD
  3876                           pclath	equ	0xFFA
  3877                           tblptru	equ	0xFF8
  3878                           tblptrh	equ	0xFF7
  3879                           tblptrl	equ	0xFF6
  3880                           tablat	equ	0xFF5
  3881                           prodh	equ	0xFF4
  3882                           prodl	equ	0xFF3
  3883                           postinc0	equ	0xFEE
  3884                           wreg	equ	0xFE8
  3885                           postdec1	equ	0xFE5
  3886                           plusw1	equ	0xFE3
  3887                           fsr1h	equ	0xFE2
  3888                           fsr1l	equ	0xFE1
  3889                           indf2	equ	0xFDF
  3890                           postinc2	equ	0xFDE
  3891                           postdec2	equ	0xFDD
  3892                           plusw2	equ	0xFDB
  3893                           fsr2h	equ	0xFDA
  3894                           fsr2l	equ	0xFD9
  3895                           status	equ	0xFD8
  3896                           
  3897 ;; *************** function _Console_NewLine *****************
  3898 ;; Defined at:
  3899 ;;		line 175 in file "Library/Console.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;		None
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;Total ram usage:        2 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    7
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_Console_IncrementCursor
  3924 ;;		_Console_PrintChar
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text7
  3929  01313E                     __ptext7:
  3930                           	opt stack 0
  3931  01313E                     _Console_NewLine:
  3932                           	opt stack 18
  3933                           
  3934                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  3935                           
  3936                           ;incstack = 0
  3937  01313E  D039               	goto	l9791
  3938  013140                     l9783:
  3939                           
  3940                           ;Console.c: 179: {
  3941                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  3942  013140  5036               	movf	_lBufferY,w,c
  3943  013142  0D14               	mullw	20
  3944  013144  0E46               	movlw	low _lBuffer
  3945  013146  0100               	movlb	0	; () banked
  3946  013148  6FB1               	movwf	??_Console_NewLine& (0+255),b
  3947  01314A  0E02               	movlw	high _lBuffer
  3948  01314C  0100               	movlb	0	; () banked
  3949  01314E  6FB2               	movwf	(??_Console_NewLine+1)& (0+255),b
  3950  013150  50F3               	movf	prodl,w,c
  3951  013152  0100               	movlb	0	; () banked
  3952  013154  27B1               	addwf	??_Console_NewLine& (0+255),f,b
  3953  013156  50F4               	movf	prodh,w,c
  3954  013158  0100               	movlb	0	; () banked
  3955  01315A  23B2               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  3956  01315C  5037               	movf	_lBufferX,w,c
  3957  01315E  0D01               	mullw	1
  3958  013160  50F3               	movf	prodl,w,c
  3959  013162  0100               	movlb	0	; () banked
  3960  013164  25B1               	addwf	??_Console_NewLine& (0+255),w,b
  3961  013166  6ED9               	movwf	fsr2l,c
  3962  013168  50F4               	movf	prodh,w,c
  3963  01316A  0100               	movlb	0	; () banked
  3964  01316C  21B2               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  3965  01316E  6EDA               	movwf	fsr2h,c
  3966  013170  50DF               	movf	indf2,w,c
  3967  013172  B4D8               	btfsc	status,2,c
  3968  013174  D01D               	goto	l9789
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  3972  013176  0E01               	movlw	1
  3973  013178  0100               	movlb	0	; () banked
  3974  01317A  6FFF               	movwf	_change& (0+255),b
  3975                           
  3976                           ; BSR set to: 0
  3977  01317C  5036               	movf	_lBufferY,w,c
  3978  01317E  0D14               	mullw	20
  3979  013180  0E46               	movlw	low _lBuffer
  3980  013182  0100               	movlb	0	; () banked
  3981  013184  6FB1               	movwf	??_Console_NewLine& (0+255),b
  3982  013186  0E02               	movlw	high _lBuffer
  3983  013188  0100               	movlb	0	; () banked
  3984  01318A  6FB2               	movwf	(??_Console_NewLine+1)& (0+255),b
  3985  01318C  50F3               	movf	prodl,w,c
  3986  01318E  0100               	movlb	0	; () banked
  3987  013190  27B1               	addwf	??_Console_NewLine& (0+255),f,b
  3988  013192  50F4               	movf	prodh,w,c
  3989  013194  0100               	movlb	0	; () banked
  3990  013196  23B2               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  3991  013198  5037               	movf	_lBufferX,w,c
  3992  01319A  0D01               	mullw	1
  3993  01319C  50F3               	movf	prodl,w,c
  3994  01319E  0100               	movlb	0	; () banked
  3995  0131A0  25B1               	addwf	??_Console_NewLine& (0+255),w,b
  3996  0131A2  6ED9               	movwf	fsr2l,c
  3997  0131A4  50F4               	movf	prodh,w,c
  3998  0131A6  0100               	movlb	0	; () banked
  3999  0131A8  21B2               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4000  0131AA  6EDA               	movwf	fsr2h,c
  4001  0131AC  0E80               	movlw	128
  4002  0131AE  6EDF               	movwf	indf2,c
  4003  0131B0                     l9789:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;Console.c: 182: lBufferX ++;
  4007  0131B0  2A37               	incf	_lBufferX,f,c
  4008  0131B2                     l9791:
  4009  0131B2  0E13               	movlw	19
  4010  0131B4  6437               	cpfsgt	_lBufferX,c
  4011  0131B6  D7C4               	goto	l9783
  4012                           
  4013                           ;Console.c: 183: }
  4014                           ;Console.c: 185: lBufferX = 0;
  4015  0131B8  0E00               	movlw	0
  4016  0131BA  6E37               	movwf	_lBufferX,c
  4017                           
  4018                           ;Console.c: 186: lBufferY ++;
  4019  0131BC  2A36               	incf	_lBufferY,f,c
  4020                           
  4021                           ;Console.c: 188: gCursor.y += 8;
  4022  0131BE  0E08               	movlw	8
  4023  0131C0  2641               	addwf	_gCursor+2,f,c
  4024  0131C2  0E00               	movlw	0
  4025  0131C4  2242               	addwfc	_gCursor+3,f,c
  4026                           
  4027                           ;Console.c: 189: gCursor.x = 6;
  4028  0131C6  0E00               	movlw	0
  4029  0131C8  6E40               	movwf	_gCursor+1,c
  4030  0131CA  0E06               	movlw	6
  4031  0131CC  6E3F               	movwf	_gCursor,c
  4032  0131CE  0012               	return		;funcret
  4033  0131D0                     __end_of_Console_NewLine:
  4034                           	opt stack 0
  4035                           tosu	equ	0xFFF
  4036                           tosh	equ	0xFFE
  4037                           tosl	equ	0xFFD
  4038                           pclath	equ	0xFFA
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           postinc0	equ	0xFEE
  4046                           wreg	equ	0xFE8
  4047                           postdec1	equ	0xFE5
  4048                           plusw1	equ	0xFE3
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           plusw2	equ	0xFDB
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function _Console_FormFeed *****************
  4060 ;; Defined at:
  4061 ;;		line 192 in file "Library/Console.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;		None
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  y               1    3[BANK0 ] unsigned char 
  4066 ;;  x               1    2[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;Total ram usage:        4 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    7
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_Console_IncrementCursor
  4087 ;;		_Console_PrintChar
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text8
  4092  013260                     __ptext8:
  4093                           	opt stack 0
  4094  013260                     _Console_FormFeed:
  4095                           	opt stack 18
  4096                           
  4097                           ;Console.c: 195: lBufferX = 0;
  4098                           
  4099                           ;incstack = 0
  4100  013260  0E00               	movlw	0
  4101  013262  6E37               	movwf	_lBufferX,c
  4102                           
  4103                           ;Console.c: 196: lBufferY = 0;
  4104  013264  0E00               	movlw	0
  4105  013266  6E36               	movwf	_lBufferY,c
  4106                           
  4107                           ;Console.c: 197: UINT8 x, y;
  4108                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  4109  013268  0E00               	movlw	0
  4110  01326A  0100               	movlb	0	; () banked
  4111  01326C  6FB4               	movwf	Console_FormFeed@y& (0+255),b
  4112  01326E                     l9803:
  4113                           
  4114                           ; BSR set to: 0
  4115  01326E  0E0E               	movlw	14
  4116  013270  0100               	movlb	0	; () banked
  4117  013272  65B4               	cpfsgt	Console_FormFeed@y& (0+255),b
  4118  013274  D001               	goto	l9807
  4119  013276  D02D               	goto	l9825
  4120  013278                     l9807:
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  4124  013278  0E00               	movlw	0
  4125  01327A  0100               	movlb	0	; () banked
  4126  01327C  6FB3               	movwf	Console_FormFeed@x& (0+255),b
  4127  01327E                     l9809:
  4128                           
  4129                           ; BSR set to: 0
  4130  01327E  0E13               	movlw	19
  4131  013280  0100               	movlb	0	; () banked
  4132  013282  65B3               	cpfsgt	Console_FormFeed@x& (0+255),b
  4133  013284  D001               	goto	l9813
  4134  013286  D022               	goto	l9821
  4135  013288                     l9813:
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  4139  013288  0E01               	movlw	1
  4140  01328A  0100               	movlb	0	; () banked
  4141  01328C  6FFF               	movwf	_change& (0+255),b
  4142                           
  4143                           ; BSR set to: 0
  4144  01328E  0100               	movlb	0	; () banked
  4145  013290  51B4               	movf	Console_FormFeed@y& (0+255),w,b
  4146  013292  0D14               	mullw	20
  4147  013294  0E46               	movlw	low _lBuffer
  4148  013296  0100               	movlb	0	; () banked
  4149  013298  6FB1               	movwf	??_Console_FormFeed& (0+255),b
  4150  01329A  0E02               	movlw	high _lBuffer
  4151  01329C  0100               	movlb	0	; () banked
  4152  01329E  6FB2               	movwf	(??_Console_FormFeed+1)& (0+255),b
  4153  0132A0  50F3               	movf	prodl,w,c
  4154  0132A2  0100               	movlb	0	; () banked
  4155  0132A4  27B1               	addwf	??_Console_FormFeed& (0+255),f,b
  4156  0132A6  50F4               	movf	prodh,w,c
  4157  0132A8  0100               	movlb	0	; () banked
  4158  0132AA  23B2               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  4159  0132AC  0100               	movlb	0	; () banked
  4160  0132AE  51B3               	movf	Console_FormFeed@x& (0+255),w,b
  4161  0132B0  0D01               	mullw	1
  4162  0132B2  50F3               	movf	prodl,w,c
  4163  0132B4  0100               	movlb	0	; () banked
  4164  0132B6  25B1               	addwf	??_Console_FormFeed& (0+255),w,b
  4165  0132B8  6ED9               	movwf	fsr2l,c
  4166  0132BA  50F4               	movf	prodh,w,c
  4167  0132BC  0100               	movlb	0	; () banked
  4168  0132BE  21B2               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  4169  0132C0  6EDA               	movwf	fsr2h,c
  4170  0132C2  0E80               	movlw	128
  4171  0132C4  6EDF               	movwf	indf2,c
  4172                           
  4173                           ; BSR set to: 0
  4174  0132C6  0100               	movlb	0	; () banked
  4175  0132C8  2BB3               	incf	Console_FormFeed@x& (0+255),f,b
  4176  0132CA  D7D9               	goto	l9809
  4177  0132CC                     l9821:
  4178                           
  4179                           ; BSR set to: 0
  4180  0132CC  0100               	movlb	0	; () banked
  4181  0132CE  2BB4               	incf	Console_FormFeed@y& (0+255),f,b
  4182  0132D0  D7CE               	goto	l9803
  4183  0132D2                     l9825:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;Console.c: 204: clearall = 1;
  4187  0132D2  0E01               	movlw	1
  4188  0132D4  0100               	movlb	0	; () banked
  4189  0132D6  6F80               	movwf	_clearall& (0+255),b
  4190                           
  4191                           ;Console.c: 205: gCursor.x = 6;
  4192  0132D8  0E00               	movlw	0
  4193  0132DA  6E40               	movwf	_gCursor+1,c
  4194  0132DC  0E06               	movlw	6
  4195  0132DE  6E3F               	movwf	_gCursor,c
  4196                           
  4197                           ;Console.c: 206: gCursor.y = 6;
  4198  0132E0  0E00               	movlw	0
  4199  0132E2  6E42               	movwf	_gCursor+3,c
  4200  0132E4  0E06               	movlw	6
  4201  0132E6  6E41               	movwf	_gCursor+2,c
  4202                           
  4203                           ; BSR set to: 0
  4204  0132E8  0012               	return		;funcret
  4205  0132EA                     __end_of_Console_FormFeed:
  4206                           	opt stack 0
  4207                           tosu	equ	0xFFF
  4208                           tosh	equ	0xFFE
  4209                           tosl	equ	0xFFD
  4210                           pclath	equ	0xFFA
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           postinc0	equ	0xFEE
  4218                           wreg	equ	0xFE8
  4219                           postdec1	equ	0xFE5
  4220                           plusw1	equ	0xFE3
  4221                           fsr1h	equ	0xFE2
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           plusw2	equ	0xFDB
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function _Console_ResetCursor *****************
  4232 ;; Defined at:
  4233 ;;		line 297 in file "Library/Console.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    7
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_Console_PrintChar
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text9
  4262  01454A                     __ptext9:
  4263                           	opt stack 0
  4264  01454A                     _Console_ResetCursor:
  4265                           	opt stack 20
  4266                           
  4267                           ;Console.c: 299: gCursor.x = 6;
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;incstack = 0
  4271  01454A  0E00               	movlw	0
  4272  01454C  6E40               	movwf	_gCursor+1,c
  4273  01454E  0E06               	movlw	6
  4274  014550  6E3F               	movwf	_gCursor,c
  4275                           
  4276                           ;Console.c: 300: gCursor.y = 6;
  4277  014552  0E00               	movlw	0
  4278  014554  6E42               	movwf	_gCursor+3,c
  4279  014556  0E06               	movlw	6
  4280  014558  6E41               	movwf	_gCursor+2,c
  4281                           
  4282                           ;Console.c: 303: lBufferX = 0;
  4283  01455A  0E00               	movlw	0
  4284  01455C  6E37               	movwf	_lBufferX,c
  4285                           
  4286                           ;Console.c: 304: lBufferY = 0;
  4287  01455E  0E00               	movlw	0
  4288  014560  6E36               	movwf	_lBufferY,c
  4289  014562  0012               	return		;funcret
  4290  014564                     __end_of_Console_ResetCursor:
  4291                           	opt stack 0
  4292                           tosu	equ	0xFFF
  4293                           tosh	equ	0xFFE
  4294                           tosl	equ	0xFFD
  4295                           pclath	equ	0xFFA
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           postinc0	equ	0xFEE
  4303                           wreg	equ	0xFE8
  4304                           postdec1	equ	0xFE5
  4305                           plusw1	equ	0xFE3
  4306                           fsr1h	equ	0xFE2
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           plusw2	equ	0xFDB
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _Console_Backspace *****************
  4317 ;; Defined at:
  4318 ;;		line 209 in file "Library/Console.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;Total ram usage:        0 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    8
  4339 ;; This function calls:
  4340 ;;		_Console_ClearCursor
  4341 ;; This function is called by:
  4342 ;;		_Console_PrintChar
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text10
  4347  013CD0                     __ptext10:
  4348                           	opt stack 0
  4349  013CD0                     _Console_Backspace:
  4350                           	opt stack 19
  4351                           
  4352                           ;Console.c: 211: if (lBufferX > 0)
  4353                           
  4354                           ;incstack = 0
  4355  013CD0  5037               	movf	_lBufferX,w,c
  4356  013CD2  B4D8               	btfsc	status,2,c
  4357  013CD4  D006               	goto	l10233
  4358                           
  4359                           ;Console.c: 212: {
  4360                           ;Console.c: 213: gCursor.x -= 6;
  4361  013CD6  0EFA               	movlw	250
  4362  013CD8  263F               	addwf	_gCursor,f,c
  4363  013CDA  0EFF               	movlw	255
  4364  013CDC  2240               	addwfc	_gCursor+1,f,c
  4365                           
  4366                           ;Console.c: 216: lBufferX --;
  4367  013CDE  0637               	decf	_lBufferX,f,c
  4368                           
  4369                           ;Console.c: 218: }
  4370  013CE0  D01B               	goto	l10245
  4371  013CE2                     l10233:
  4372                           
  4373                           ;Console.c: 219: else if (lBufferY > 0)
  4374  013CE2  5036               	movf	_lBufferY,w,c
  4375  013CE4  B4D8               	btfsc	status,2,c
  4376  013CE6  D00C               	goto	l10243
  4377                           
  4378                           ;Console.c: 220: {
  4379                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  4380  013CE8  0E00               	movlw	0
  4381  013CEA  6E40               	movwf	_gCursor+1,c
  4382  013CEC  0E72               	movlw	114
  4383  013CEE  6E3F               	movwf	_gCursor,c
  4384                           
  4385                           ;Console.c: 222: gCursor.y -= 8;
  4386  013CF0  0EF8               	movlw	248
  4387  013CF2  2641               	addwf	_gCursor+2,f,c
  4388  013CF4  0EFF               	movlw	255
  4389  013CF6  2242               	addwfc	_gCursor+3,f,c
  4390                           
  4391                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  4392  013CF8  0E13               	movlw	19
  4393  013CFA  6E37               	movwf	_lBufferX,c
  4394                           
  4395                           ;Console.c: 226: lBufferY --;
  4396  013CFC  0636               	decf	_lBufferY,f,c
  4397                           
  4398                           ;Console.c: 228: }
  4399  013CFE  D00C               	goto	l10245
  4400  013D00                     l10243:
  4401                           
  4402                           ;Console.c: 229: else
  4403                           ;Console.c: 230: {
  4404                           ;Console.c: 231: gCursor.x = 6;
  4405  013D00  0E00               	movlw	0
  4406  013D02  6E40               	movwf	_gCursor+1,c
  4407  013D04  0E06               	movlw	6
  4408  013D06  6E3F               	movwf	_gCursor,c
  4409                           
  4410                           ;Console.c: 232: gCursor.y = 6;
  4411  013D08  0E00               	movlw	0
  4412  013D0A  6E42               	movwf	_gCursor+3,c
  4413  013D0C  0E06               	movlw	6
  4414  013D0E  6E41               	movwf	_gCursor+2,c
  4415                           
  4416                           ;Console.c: 235: lBufferX = 0;
  4417  013D10  0E00               	movlw	0
  4418  013D12  6E37               	movwf	_lBufferX,c
  4419                           
  4420                           ;Console.c: 236: lBufferY = 0;
  4421  013D14  0E00               	movlw	0
  4422  013D16  6E36               	movwf	_lBufferY,c
  4423  013D18                     l10245:
  4424                           
  4425                           ;Console.c: 238: }
  4426                           ;Console.c: 240: Console_ClearCursor();
  4427  013D18  EC4A  F0A0         	call	_Console_ClearCursor	;wreg free
  4428  013D1C  0012               	return		;funcret
  4429  013D1E                     __end_of_Console_Backspace:
  4430                           	opt stack 0
  4431                           tosu	equ	0xFFF
  4432                           tosh	equ	0xFFE
  4433                           tosl	equ	0xFFD
  4434                           pclath	equ	0xFFA
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           plusw1	equ	0xFE3
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           postdec2	equ	0xFDD
  4450                           plusw2	equ	0xFDB
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _Console_ClearCursor *****************
  4456 ;; Defined at:
  4457 ;;		line 308 in file "Library/Console.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    7
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_Console_Backspace
  4482 ;;		_Console_Tab
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text11
  4487  014094                     __ptext11:
  4488                           	opt stack 0
  4489  014094                     _Console_ClearCursor:
  4490                           	opt stack 19
  4491                           
  4492                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  4493                           
  4494                           ;incstack = 0
  4495  014094  0E01               	movlw	1
  4496  014096  0100               	movlb	0	; () banked
  4497  014098  6FFF               	movwf	_change& (0+255),b
  4498                           
  4499                           ; BSR set to: 0
  4500  01409A  5036               	movf	_lBufferY,w,c
  4501  01409C  0D14               	mullw	20
  4502  01409E  0E46               	movlw	low _lBuffer
  4503  0140A0  0100               	movlb	0	; () banked
  4504  0140A2  6FB1               	movwf	??_Console_ClearCursor& (0+255),b
  4505  0140A4  0E02               	movlw	high _lBuffer
  4506  0140A6  0100               	movlb	0	; () banked
  4507  0140A8  6FB2               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  4508  0140AA  50F3               	movf	prodl,w,c
  4509  0140AC  0100               	movlb	0	; () banked
  4510  0140AE  27B1               	addwf	??_Console_ClearCursor& (0+255),f,b
  4511  0140B0  50F4               	movf	prodh,w,c
  4512  0140B2  0100               	movlb	0	; () banked
  4513  0140B4  23B2               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  4514  0140B6  5037               	movf	_lBufferX,w,c
  4515  0140B8  0D01               	mullw	1
  4516  0140BA  50F3               	movf	prodl,w,c
  4517  0140BC  0100               	movlb	0	; () banked
  4518  0140BE  25B1               	addwf	??_Console_ClearCursor& (0+255),w,b
  4519  0140C0  6ED9               	movwf	fsr2l,c
  4520  0140C2  50F4               	movf	prodh,w,c
  4521  0140C4  0100               	movlb	0	; () banked
  4522  0140C6  21B2               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  4523  0140C8  6EDA               	movwf	fsr2h,c
  4524  0140CA  0E80               	movlw	128
  4525  0140CC  6EDF               	movwf	indf2,c
  4526                           
  4527                           ; BSR set to: 0
  4528  0140CE  0012               	return		;funcret
  4529  0140D0                     __end_of_Console_ClearCursor:
  4530                           	opt stack 0
  4531                           tosu	equ	0xFFF
  4532                           tosh	equ	0xFFE
  4533                           tosl	equ	0xFFD
  4534                           pclath	equ	0xFFA
  4535                           tblptru	equ	0xFF8
  4536                           tblptrh	equ	0xFF7
  4537                           tblptrl	equ	0xFF6
  4538                           tablat	equ	0xFF5
  4539                           prodh	equ	0xFF4
  4540                           prodl	equ	0xFF3
  4541                           postinc0	equ	0xFEE
  4542                           wreg	equ	0xFE8
  4543                           postdec1	equ	0xFE5
  4544                           plusw1	equ	0xFE3
  4545                           fsr1h	equ	0xFE2
  4546                           fsr1l	equ	0xFE1
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           plusw2	equ	0xFDB
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function _Motor_Speed *****************
  4556 ;; Defined at:
  4557 ;;		line 117 in file "Library/Motor.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  4560 ;;		 -> motor(6), 
  4561 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      unsigned char 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    9
  4580 ;; This function calls:
  4581 ;;		_Timer0_Init
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text12
  4588  014390                     __ptext12:
  4589                           	opt stack 0
  4590  014390                     _Motor_Speed:
  4591                           	opt stack 21
  4592                           
  4593                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;incstack = 0
  4597  014390  0100               	movlb	0	; () banked
  4598  014392  EE20 F002          	lfsr	2,2
  4599  014396  51CC               	movf	Motor_Speed@pMotor& (0+255),w,b
  4600  014398  26D9               	addwf	fsr2l,f,c
  4601  01439A  51CD               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  4602  01439C  22DA               	addwfc	fsr2h,f,c
  4603  01439E  C0CE  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  4604  0143A2  C0CF  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;Motor.c: 120: Timer0_Init(pFrequency);
  4608  0143A6  C0CE  F0BE         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  4609  0143AA  C0CF  F0BF         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  4610  0143AE  0100               	movlb	0	; () banked
  4611  0143B0  6BC0               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  4612  0143B2  6BC1               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  4613  0143B4  EC0F  F08F         	call	_Timer0_Init	;wreg free
  4614  0143B8  0012               	return	
  4615  0143BA                     __end_of_Motor_Speed:
  4616                           	opt stack 0
  4617                           tosu	equ	0xFFF
  4618                           tosh	equ	0xFFE
  4619                           tosl	equ	0xFFD
  4620                           pclath	equ	0xFFA
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           postinc0	equ	0xFEE
  4628                           wreg	equ	0xFE8
  4629                           postdec1	equ	0xFE5
  4630                           plusw1	equ	0xFE3
  4631                           fsr1h	equ	0xFE2
  4632                           fsr1l	equ	0xFE1
  4633                           indf2	equ	0xFDF
  4634                           postinc2	equ	0xFDE
  4635                           postdec2	equ	0xFDD
  4636                           plusw2	equ	0xFDB
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _Motor_Move *****************
  4642 ;; Defined at:
  4643 ;;		line 51 in file "Library/Motor.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  4646 ;;		 -> motor(6), 
  4647 ;;  pDelta          2    5[BANK0 ] short 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      unsigned char 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4659 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;Total ram usage:        6 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    8
  4666 ;; This function calls:
  4667 ;;		_Timer0_Start
  4668 ;; This function is called by:
  4669 ;;		_main
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text13
  4674  01410C                     __ptext13:
  4675                           	opt stack 0
  4676  01410C                     _Motor_Move:
  4677                           	opt stack 22
  4678                           
  4679                           ;Motor.c: 54: lMotor = pMotor;
  4680                           
  4681                           ;incstack = 0
  4682  01410C  C0B4  F02A         	movff	Motor_Move@pMotor,_lMotor
  4683  014110  C0B5  F02B         	movff	Motor_Move@pMotor+1,_lMotor+1
  4684                           
  4685                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  4686  014114  C0B4  FFD9         	movff	Motor_Move@pMotor,fsr2l
  4687  014118  C0B5  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  4688  01411C  50DE               	movf	postinc2,w,c
  4689  01411E  10DE               	iorwf	postinc2,w,c
  4690  014120  A4D8               	btfss	status,2,c
  4691  014122  0012               	return	
  4692                           
  4693                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  4694                           
  4695                           ;Motor.c: 59: return 0;
  4696                           ;	Return value of _Motor_Move is never used
  4697  014124  C0B4  FFD9         	movff	Motor_Move@pMotor,fsr2l
  4698  014128  C0B5  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  4699  01412C  C0B6  FFDE         	movff	Motor_Move@pDelta,postinc2
  4700  014130  C0B7  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  4701                           
  4702                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  4703  014134  C06B  F0B1         	movff	_lStepFunction,Timer0_Start@pFunction
  4704  014138  C06C  F0B2         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  4705  01413C  C06D  F0B3         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  4706  014140  EC06  F0A2         	call	_Timer0_Start	;wreg free
  4707  014144  0012               	return	
  4708  014146                     __end_of_Motor_Move:
  4709                           	opt stack 0
  4710                           tosu	equ	0xFFF
  4711                           tosh	equ	0xFFE
  4712                           tosl	equ	0xFFD
  4713                           pclath	equ	0xFFA
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           plusw1	equ	0xFE3
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           plusw2	equ	0xFDB
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function _Timer0_Start *****************
  4735 ;; Defined at:
  4736 ;;		line 75 in file "Library/Timer0.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  4739 ;;		 -> Absolute function(1), Motor_Step(1), 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4751 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;Total ram usage:        3 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    7
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_Motor_Move
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text14
  4766  01440C                     __ptext14:
  4767                           	opt stack 0
  4768  01440C                     _Timer0_Start:
  4769                           	opt stack 22
  4770                           
  4771                           ;Timer0.c: 77: gISR = pFunction;
  4772                           
  4773                           ;incstack = 0
  4774  01440C  C0B1  F068         	movff	Timer0_Start@pFunction,_gISR
  4775  014410  C0B2  F069         	movff	Timer0_Start@pFunction+1,_gISR+1
  4776  014414  C0B3  F06A         	movff	Timer0_Start@pFunction+2,_gISR+2
  4777                           
  4778                           ;Timer0.c: 78: TMR0 = COUNTER;
  4779  014418  C028  FFD6         	movff	_COUNTER,4054	;volatile
  4780  01441C  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
  4781                           
  4782                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  4783  014420  50D5               	movf	4053,w,c	;volatile
  4784  014422  1831               	xorwf	_INDEX,w,c
  4785  014424  0BF8               	andlw	-8
  4786  014426  1831               	xorwf	_INDEX,w,c
  4787  014428  6ED5               	movwf	4053,c	;volatile
  4788                           
  4789                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  4790  01442A  94F2               	bcf	intcon,2,c	;volatile
  4791                           
  4792                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  4793  01442C  8AF2               	bsf	intcon,5,c	;volatile
  4794  01442E  0012               	return		;funcret
  4795  014430                     __end_of_Timer0_Start:
  4796                           	opt stack 0
  4797                           tosu	equ	0xFFF
  4798                           tosh	equ	0xFFE
  4799                           tosl	equ	0xFFD
  4800                           pclath	equ	0xFFA
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           prodh	equ	0xFF4
  4806                           prodl	equ	0xFF3
  4807                           intcon	equ	0xFF2
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           postdec1	equ	0xFE5
  4811                           plusw1	equ	0xFE3
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           plusw2	equ	0xFDB
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _Motor_Init *****************
  4823 ;; Defined at:
  4824 ;;		line 26 in file "Library/Motor.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  4827 ;;		 -> motor(6), 
  4828 ;;  pAddress        2   47[BANK0 ] unsigned short 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4840 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;Total ram usage:        4 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:   12
  4847 ;; This function calls:
  4848 ;;		_Port_SetPin
  4849 ;;		_Port_SetPinType
  4850 ;;		_Timer0_Init
  4851 ;; This function is called by:
  4852 ;;		_main
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text15
  4857  0124AA                     __ptext15:
  4858                           	opt stack 0
  4859  0124AA                     _Motor_Init:
  4860                           	opt stack 18
  4861                           
  4862                           ;Motor.c: 28: pMotor->mDelta = 0;
  4863                           
  4864                           ;incstack = 0
  4865  0124AA  C0DE  FFD9         	movff	Motor_Init@pMotor,fsr2l
  4866  0124AE  C0DF  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  4867  0124B2  0E00               	movlw	0
  4868  0124B4  6EDE               	movwf	postinc2,c
  4869  0124B6  0E00               	movlw	0
  4870  0124B8  6EDD               	movwf	postdec2,c
  4871                           
  4872                           ;Motor.c: 29: pMotor->mFrequency = 0;
  4873  0124BA  0100               	movlb	0	; () banked
  4874  0124BC  EE20 F002          	lfsr	2,2
  4875  0124C0  51DE               	movf	Motor_Init@pMotor& (0+255),w,b
  4876  0124C2  26D9               	addwf	fsr2l,f,c
  4877  0124C4  51DF               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  4878  0124C6  22DA               	addwfc	fsr2h,f,c
  4879  0124C8  0E00               	movlw	0
  4880  0124CA  6EDE               	movwf	postinc2,c
  4881  0124CC  0E00               	movlw	0
  4882  0124CE  6EDD               	movwf	postdec2,c
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  4886  0124D0  0100               	movlb	0	; () banked
  4887  0124D2  EE20 F004          	lfsr	2,4
  4888  0124D6  51DE               	movf	Motor_Init@pMotor& (0+255),w,b
  4889  0124D8  26D9               	addwf	fsr2l,f,c
  4890  0124DA  51DF               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  4891  0124DC  22DA               	addwfc	fsr2h,f,c
  4892  0124DE  C0E0  FFDE         	movff	Motor_Init@pAddress,postinc2
  4893  0124E2  C0E1  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  4897  0124E6  0E81               	movlw	low _PortE
  4898  0124E8  0100               	movlb	0	; () banked
  4899  0124EA  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  4900  0124EC  0E00               	movlw	high _PortE
  4901  0124EE  0100               	movlb	0	; () banked
  4902  0124F0  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  4903  0124F2  0E00               	movlw	0
  4904  0124F4  0100               	movlb	0	; () banked
  4905  0124F6  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  4906  0124F8  0E03               	movlw	3
  4907  0124FA  0100               	movlb	0	; () banked
  4908  0124FC  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  4909  0124FE  EC77  F08A         	call	_Port_SetPinType	;wreg free
  4910                           
  4911                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  4912  012502  0E81               	movlw	low _PortE
  4913  012504  0100               	movlb	0	; () banked
  4914  012506  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  4915  012508  0E00               	movlw	high _PortE
  4916  01250A  0100               	movlb	0	; () banked
  4917  01250C  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  4918  01250E  0E01               	movlw	1
  4919  012510  0100               	movlb	0	; () banked
  4920  012512  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  4921  012514  0E03               	movlw	3
  4922  012516  0100               	movlb	0	; () banked
  4923  012518  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  4924  01251A  EC77  F08A         	call	_Port_SetPinType	;wreg free
  4925                           
  4926                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  4927  01251E  0E81               	movlw	low _PortE
  4928  012520  0100               	movlb	0	; () banked
  4929  012522  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  4930  012524  0E00               	movlw	high _PortE
  4931  012526  0100               	movlb	0	; () banked
  4932  012528  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  4933  01252A  0E00               	movlw	0
  4934  01252C  0100               	movlb	0	; () banked
  4935  01252E  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  4936  012530  0E00               	movlw	0
  4937  012532  0100               	movlb	0	; () banked
  4938  012534  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  4939  012536  EC92  F093         	call	_Port_SetPin	;wreg free
  4940                           
  4941                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  4942  01253A  0E81               	movlw	low _PortE
  4943  01253C  0100               	movlb	0	; () banked
  4944  01253E  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  4945  012540  0E00               	movlw	high _PortE
  4946  012542  0100               	movlb	0	; () banked
  4947  012544  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  4948  012546  0E01               	movlw	1
  4949  012548  0100               	movlb	0	; () banked
  4950  01254A  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  4951  01254C  0E00               	movlw	0
  4952  01254E  0100               	movlb	0	; () banked
  4953  012550  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  4954  012552  EC92  F093         	call	_Port_SetPin	;wreg free
  4955                           
  4956                           ;Motor.c: 38: lStepFunction = Motor_Step;
  4957  012556  0EC4               	movlw	low _Motor_Step
  4958  012558  0100               	movlb	0	; () banked
  4959  01255A  6F6B               	movwf	_lStepFunction& (0+255),b
  4960  01255C  0E20               	movlw	high _Motor_Step
  4961  01255E  0100               	movlb	0	; () banked
  4962  012560  6F6C               	movwf	(_lStepFunction+1)& (0+255),b
  4963  012562  0E01               	movlw	low (_Motor_Step shr (0+16))
  4964  012564  0100               	movlb	0	; () banked
  4965  012566  6F6D               	movwf	(_lStepFunction+2)& (0+255),b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;Motor.c: 39: Timer0_Init(1000);
  4969  012568  0EE8               	movlw	232
  4970  01256A  0100               	movlb	0	; () banked
  4971  01256C  6FBE               	movwf	Timer0_Init@pFrequency& (0+255),b
  4972  01256E  0E03               	movlw	3
  4973  012570  6FBF               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  4974  012572  0E00               	movlw	0
  4975  012574  6FC0               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  4976  012576  0E00               	movlw	0
  4977  012578  6FC1               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  4978  01257A  EC0F  F08F         	call	_Timer0_Init	;wreg free
  4979  01257E  0012               	return		;funcret
  4980  012580                     __end_of_Motor_Init:
  4981                           	opt stack 0
  4982                           tosu	equ	0xFFF
  4983                           tosh	equ	0xFFE
  4984                           tosl	equ	0xFFD
  4985                           pclath	equ	0xFFA
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           plusw1	equ	0xFE3
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           plusw2	equ	0xFDB
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function _Timer0_Init *****************
  5008 ;; Defined at:
  5009 ;;		line 25 in file "Library/Timer0.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
  5014 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      void 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:       14 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    8
  5031 ;; This function calls:
  5032 ;;		_Timer0_Clear
  5033 ;;		___lldiv
  5034 ;; This function is called by:
  5035 ;;		_Motor_Init
  5036 ;;		_Motor_Speed
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text16
  5041  011E1E                     __ptext16:
  5042                           	opt stack 0
  5043  011E1E                     _Timer0_Init:
  5044                           	opt stack 21
  5045                           
  5046                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
  5047                           
  5048                           ;incstack = 0
  5049  011E1E  0E80               	movlw	128
  5050  011E20  0100               	movlb	0	; () banked
  5051  011E22  6FC4               	movwf	Timer0_Init@pCPUClock& (0+255),b
  5052  011E24  0E8D               	movlw	141
  5053  011E26  6FC5               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
  5054  011E28  0E5B               	movlw	91
  5055  011E2A  6FC6               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
  5056  011E2C  0E00               	movlw	0
  5057  011E2E  6FC7               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
  5061                           ;Timer0.c: 31: static UINT8 PRE = 0;
  5062                           ;Timer0.c: 32: static UINT32 DIV = 0;
  5063                           ;Timer0.c: 34: UINT32 DIVIDE;
  5064                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
  5065  011E30  9ED5               	bcf	4053,7,c	;volatile
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;Timer0.c: 38: if (pFrequency == 0)
  5069  011E32  0100               	movlb	0	; () banked
  5070  011E34  51BE               	movf	Timer0_Init@pFrequency& (0+255),w,b
  5071  011E36  0100               	movlb	0	; () banked
  5072  011E38  11BF               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
  5073  011E3A  0100               	movlb	0	; () banked
  5074  011E3C  11C0               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
  5075  011E3E  0100               	movlb	0	; () banked
  5076  011E40  11C1               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
  5077  011E42  B4D8               	btfsc	status,2,c
  5078  011E44  0012               	return	
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;Timer0.c: 41: T0CONbits.PSA = 0;
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;Timer0.c: 39: return;
  5085  011E46  96D5               	bcf	4053,3,c	;volatile
  5086                           
  5087                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
  5088  011E48  9CD5               	bcf	4053,6,c	;volatile
  5089                           
  5090                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
  5091  011E4A  9AD5               	bcf	4053,5,c	;volatile
  5092                           
  5093                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
  5094  011E4C  98D5               	bcf	4053,4,c	;volatile
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
  5098  011E4E  C0C4  F0B1         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
  5099  011E52  C0C5  F0B2         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
  5100  011E56  C0C6  F0B3         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
  5101  011E5A  C0C7  F0B4         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
  5102  011E5E  C0BE  F0B5         	movff	Timer0_Init@pFrequency,___lldiv@divisor
  5103  011E62  C0BF  F0B6         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
  5104  011E66  C0C0  F0B7         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
  5105  011E6A  C0C1  F0B8         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
  5106  011E6E  ECB4  F094         	call	___lldiv	;wreg free
  5107  011E72  C0B1  F0C8         	movff	?___lldiv,Timer0_Init@DIVIDE
  5108  011E76  C0B2  F0C9         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
  5109  011E7A  C0B3  F0CA         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
  5110  011E7E  C0B4  F0CB         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
  5111                           
  5112                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
  5113  011E82  D009               	goto	l11097
  5114  011E84                     l11087:
  5115                           
  5116                           ;Timer0.c: 50: {
  5117                           ;Timer0.c: 51: INDEX ++;
  5118  011E84  2A31               	incf	_INDEX,f,c
  5119                           
  5120                           ;Timer0.c: 52: if (INDEX >= 3)
  5121  011E86  0E02               	movlw	2
  5122  011E88  6431               	cpfsgt	_INDEX,c
  5123  011E8A  D001               	goto	l11093
  5124  011E8C  D02D               	goto	l11099
  5125  011E8E                     l11093:
  5126                           
  5127                           ;Timer0.c: 56: if (INDEX >= 8)
  5128  011E8E  0E07               	movlw	7
  5129  011E90  6431               	cpfsgt	_INDEX,c
  5130  011E92  D001               	goto	l11097
  5131  011E94  0012               	return	
  5132  011E96                     l11097:
  5133  011E96  C0C8  F0B1         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
  5134  011E9A  C0C9  F0B2         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
  5135  011E9E  C0CA  F0B3         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
  5136  011EA2  C0CB  F0B4         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
  5137  011EA6  5031               	movf	_INDEX,w,c
  5138  011EA8  0D02               	mullw	2
  5139  011EAA  0ECB               	movlw	low Timer0_Init@PRESCALE
  5140  011EAC  24F3               	addwf	prodl,w,c
  5141  011EAE  6EF6               	movwf	tblptrl,c
  5142  011EB0  0EFD               	movlw	high Timer0_Init@PRESCALE
  5143  011EB2  20F4               	addwfc	prodh,w,c
  5144  011EB4  6EF7               	movwf	tblptrh,c
  5145  011EB6                     	if	1	;There are 3 active tblptr bytes
  5146  011EB6  6AF8               	clrf	tblptru,c
  5147  011EB8  0E00               	movlw	low (__mediumconst shr (0+16))
  5148  011EBA  22F8               	addwfc	tblptru,f,c
  5149  011EBC                     	endif
  5150  011EBC  0009               	tblrd		*+
  5151  011EBE  CFF5 F0C2          	movff	tablat,??_Timer0_Init
  5152  011EC2  0009               	tblrd		*+
  5153  011EC4  CFF5 F0C3          	movff	tablat,??_Timer0_Init+1
  5154  011EC8  C0C2  F0B5         	movff	??_Timer0_Init,___lldiv@divisor
  5155  011ECC  C0C3  F0B6         	movff	??_Timer0_Init+1,___lldiv@divisor+1
  5156  011ED0  0100               	movlb	0	; () banked
  5157  011ED2  6BB7               	clrf	(___lldiv@divisor+2)& (0+255),b
  5158  011ED4  6BB8               	clrf	(___lldiv@divisor+3)& (0+255),b
  5159  011ED6  ECB4  F094         	call	___lldiv	;wreg free
  5160  011EDA  0100               	movlb	0	; () banked
  5161  011EDC  51B4               	movf	(?___lldiv+3)& (0+255),w,b
  5162  011EDE  E1D2               	bnz	l11087
  5163  011EE0  0100               	movlb	0	; () banked
  5164  011EE2  05B3               	decf	(?___lldiv+2)& (0+255),w,b
  5165  011EE4  B0D8               	btfsc	status,0,c
  5166  011EE6  D7CE               	goto	l11087
  5167  011EE8                     l11099:
  5168                           
  5169                           ;Timer0.c: 58: }
  5170                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
  5171  011EE8  5031               	movf	_INDEX,w,c
  5172  011EEA  0D02               	mullw	2
  5173  011EEC  0ECB               	movlw	low Timer0_Init@PRESCALE
  5174  011EEE  24F3               	addwf	prodl,w,c
  5175  011EF0  6EF6               	movwf	tblptrl,c
  5176  011EF2  0EFD               	movlw	high Timer0_Init@PRESCALE
  5177  011EF4  20F4               	addwfc	prodh,w,c
  5178  011EF6  6EF7               	movwf	tblptrh,c
  5179  011EF8                     	if	1	;There are 3 active tblptr bytes
  5180  011EF8  6AF8               	clrf	tblptru,c
  5181  011EFA  0E00               	movlw	low (__mediumconst shr (0+16))
  5182  011EFC  22F8               	addwfc	tblptru,f,c
  5183  011EFE                     	endif
  5184  011EFE  0008               	tblrd		*
  5185  011F00  CFF5 F030          	movff	tablat,Timer0_Init@PRE
  5186                           
  5187                           ;Timer0.c: 63: DIV = (DIVIDE-1);
  5188  011F04  0EFF               	movlw	255
  5189  011F06  0100               	movlb	0	; () banked
  5190  011F08  25C8               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
  5191  011F0A  0100               	movlb	0	; () banked
  5192  011F0C  6F64               	movwf	Timer0_Init@DIV& (0+255),b
  5193  011F0E  0EFF               	movlw	255
  5194  011F10  0100               	movlb	0	; () banked
  5195  011F12  21C9               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
  5196  011F14  0100               	movlb	0	; () banked
  5197  011F16  6F65               	movwf	(Timer0_Init@DIV+1)& (0+255),b
  5198  011F18  0EFF               	movlw	255
  5199  011F1A  0100               	movlb	0	; () banked
  5200  011F1C  21CA               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
  5201  011F1E  0100               	movlb	0	; () banked
  5202  011F20  6F66               	movwf	(Timer0_Init@DIV+2)& (0+255),b
  5203  011F22  0EFF               	movlw	255
  5204  011F24  0100               	movlb	0	; () banked
  5205  011F26  21CB               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
  5206  011F28  0100               	movlb	0	; () banked
  5207  011F2A  6F67               	movwf	(Timer0_Init@DIV+3)& (0+255),b
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
  5211  011F2C  C064  F0B1         	movff	Timer0_Init@DIV,___lldiv@dividend
  5212  011F30  C065  F0B2         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
  5213  011F34  C066  F0B3         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
  5214  011F38  C067  F0B4         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
  5215  011F3C  5030               	movf	Timer0_Init@PRE,w,c
  5216  011F3E  0100               	movlb	0	; () banked
  5217  011F40  6FB5               	movwf	___lldiv@divisor& (0+255),b
  5218  011F42  6BB6               	clrf	(___lldiv@divisor+1)& (0+255),b
  5219  011F44  6BB7               	clrf	(___lldiv@divisor+2)& (0+255),b
  5220  011F46  6BB8               	clrf	(___lldiv@divisor+3)& (0+255),b
  5221  011F48  ECB4  F094         	call	___lldiv	;wreg free
  5222  011F4C  0100               	movlb	0	; () banked
  5223  011F4E  1FB1               	comf	?___lldiv& (0+255),f,b
  5224  011F50  0100               	movlb	0	; () banked
  5225  011F52  1FB2               	comf	(?___lldiv+1)& (0+255),f,b
  5226  011F54  0100               	movlb	0	; () banked
  5227  011F56  4BB1               	infsnz	?___lldiv& (0+255),f,b
  5228  011F58  2BB2               	incf	(?___lldiv+1)& (0+255),f,b
  5229  011F5A  0EFF               	movlw	255
  5230  011F5C  0100               	movlb	0	; () banked
  5231  011F5E  25B1               	addwf	?___lldiv& (0+255),w,b
  5232  011F60  6E28               	movwf	_COUNTER,c
  5233  011F62  0EFF               	movlw	255
  5234  011F64  0100               	movlb	0	; () banked
  5235  011F66  21B2               	addwfc	(?___lldiv+1)& (0+255),w,b
  5236  011F68  6E29               	movwf	_COUNTER+1,c
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;Timer0.c: 68: Timer0_Clear();
  5240  011F6A  EC7B  F0A3         	call	_Timer0_Clear	;wreg free
  5241                           
  5242                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
  5243  011F6E  8ED5               	bsf	4053,7,c	;volatile
  5244  011F70  0012               	return		;funcret
  5245  011F72                     __end_of_Timer0_Init:
  5246                           	opt stack 0
  5247                           tosu	equ	0xFFF
  5248                           tosh	equ	0xFFE
  5249                           tosl	equ	0xFFD
  5250                           pclath	equ	0xFFA
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           plusw1	equ	0xFE3
  5262                           fsr1h	equ	0xFE2
  5263                           fsr1l	equ	0xFE1
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           plusw2	equ	0xFDB
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _Timer0_Clear *****************
  5273 ;; Defined at:
  5274 ;;		line 20 in file "Library/Timer0.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		None
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    7
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_Timer0_Init
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text17
  5303  0146F6                     __ptext17:
  5304                           	opt stack 0
  5305  0146F6                     _Timer0_Clear:
  5306                           	opt stack 21
  5307                           
  5308                           ;Timer0.c: 22: TMR0 = COUNTER;
  5309                           
  5310                           ;incstack = 0
  5311  0146F6  C028  FFD6         	movff	_COUNTER,4054	;volatile
  5312  0146FA  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
  5313                           
  5314                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
  5315  0146FE  94F2               	bcf	intcon,2,c	;volatile
  5316  014700  0012               	return		;funcret
  5317  014702                     __end_of_Timer0_Clear:
  5318                           	opt stack 0
  5319                           tosu	equ	0xFFF
  5320                           tosh	equ	0xFFE
  5321                           tosl	equ	0xFFD
  5322                           pclath	equ	0xFFA
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           intcon	equ	0xFF2
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           postdec1	equ	0xFE5
  5333                           plusw1	equ	0xFE3
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           plusw2	equ	0xFDB
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _Motor_Continious *****************
  5345 ;; Defined at:
  5346 ;;		line 136 in file "Library/Motor.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  pMotor          2    0[BANK0 ] PTR struct Motor
  5349 ;;		 -> motor(6), 
  5350 ;;  pDirection      2    2[BANK0 ] short 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      unsigned char 
  5355 ;; Registers used:
  5356 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;Total ram usage:        4 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    7
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_main
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text18
  5377  013ED0                     __ptext18:
  5378                           	opt stack 0
  5379  013ED0                     _Motor_Continious:
  5380                           	opt stack 23
  5381                           
  5382                           ;Motor.c: 138: if (pMotor == 0)
  5383                           
  5384                           ;incstack = 0
  5385  013ED0  0100               	movlb	0	; () banked
  5386  013ED2  51B1               	movf	Motor_Continious@pMotor& (0+255),w,b
  5387  013ED4  0100               	movlb	0	; () banked
  5388  013ED6  11B2               	iorwf	(Motor_Continious@pMotor+1)& (0+255),w,b
  5389  013ED8  B4D8               	btfsc	status,2,c
  5390  013EDA  0012               	return	
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;Motor.c: 141: if (pDirection > 0)
  5394                           
  5395                           ; BSR set to: 0
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;Motor.c: 139: return 0;
  5399                           ;	Return value of _Motor_Continious is never used
  5400  013EDC  0100               	movlb	0	; () banked
  5401  013EDE  BFB4               	btfsc	(Motor_Continious@pDirection+1)& (0+255),7,b
  5402  013EE0  D010               	goto	l11487
  5403  013EE2  0100               	movlb	0	; () banked
  5404  013EE4  51B4               	movf	(Motor_Continious@pDirection+1)& (0+255),w,b
  5405  013EE6  E104               	bnz	u7970
  5406  013EE8  0100               	movlb	0	; () banked
  5407  013EEA  05B3               	decf	Motor_Continious@pDirection& (0+255),w,b
  5408  013EEC  A0D8               	btfss	status,0,c
  5409  013EEE  D009               	goto	l11487
  5410  013EF0                     u7970:
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;Motor.c: 142: pMotor->mDelta = 32767;
  5414  013EF0  C0B1  FFD9         	movff	Motor_Continious@pMotor,fsr2l
  5415  013EF4  C0B2  FFDA         	movff	Motor_Continious@pMotor+1,fsr2h
  5416  013EF8  0EFF               	movlw	255
  5417  013EFA  6EDE               	movwf	postinc2,c
  5418  013EFC  0E7F               	movlw	127
  5419  013EFE  6EDD               	movwf	postdec2,c
  5420  013F00  0012               	return	
  5421  013F02                     l11487:
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;Motor.c: 143: else
  5425                           ;Motor.c: 144: pMotor->mDelta = -32767;
  5426  013F02  C0B1  FFD9         	movff	Motor_Continious@pMotor,fsr2l
  5427  013F06  C0B2  FFDA         	movff	Motor_Continious@pMotor+1,fsr2h
  5428  013F0A  0E01               	movlw	1
  5429  013F0C  6EDE               	movwf	postinc2,c
  5430  013F0E  0E80               	movlw	128
  5431  013F10  6EDD               	movwf	postdec2,c
  5432                           
  5433                           ; BSR set to: 0
  5434  013F12  0012               	return	
  5435  013F14                     __end_of_Motor_Continious:
  5436                           	opt stack 0
  5437                           tosu	equ	0xFFF
  5438                           tosh	equ	0xFFE
  5439                           tosl	equ	0xFFD
  5440                           pclath	equ	0xFFA
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           intcon	equ	0xFF2
  5448                           postinc0	equ	0xFEE
  5449                           wreg	equ	0xFE8
  5450                           postdec1	equ	0xFE5
  5451                           plusw1	equ	0xFE3
  5452                           fsr1h	equ	0xFE2
  5453                           fsr1l	equ	0xFE1
  5454                           indf2	equ	0xFDF
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           plusw2	equ	0xFDB
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _MXK_Init *****************
  5463 ;; Defined at:
  5464 ;;		line 33 in file "Library/MXK.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;Total ram usage:        0 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:   16
  5485 ;; This function calls:
  5486 ;;		_LED_Init
  5487 ;;		_Port_Init
  5488 ;;		_Port_SetPin
  5489 ;;		_Port_SetPinType
  5490 ;;		_Port_SetQuadType
  5491 ;;		_Port_SetType
  5492 ;;		_delay_ms
  5493 ;; This function is called by:
  5494 ;;		_main
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text19
  5499  0119CC                     __ptext19:
  5500                           	opt stack 0
  5501  0119CC                     _MXK_Init:
  5502                           	opt stack 14
  5503                           
  5504                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;incstack = 0
  5508  0119CC  0E01               	movlw	1
  5509  0119CE  6E43               	movwf	_Bus_State,c
  5510                           
  5511                           ;MXK.c: 36: lQueue = (Function)0;
  5512  0119D0  0E00               	movlw	0
  5513  0119D2  6E25               	movwf	_lQueue,c	;volatile
  5514  0119D4  0E00               	movlw	0
  5515  0119D6  6E26               	movwf	_lQueue+1,c	;volatile
  5516  0119D8  0E00               	movlw	0
  5517  0119DA  6E27               	movwf	_lQueue+2,c	;volatile
  5518                           
  5519                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5520  0119DC  0E9F               	movlw	low _PortA
  5521  0119DE  0100               	movlb	0	; () banked
  5522  0119E0  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5523  0119E2  0E01               	movlw	high _PortA
  5524  0119E4  0100               	movlb	0	; () banked
  5525  0119E6  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5526  0119E8  0E00               	movlw	0
  5527  0119EA  0100               	movlb	0	; () banked
  5528  0119EC  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5529  0119EE  EC57  F08B         	call	_Port_Init	;wreg free
  5530                           
  5531                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5532  0119F2  0E95               	movlw	low _PortB
  5533  0119F4  0100               	movlb	0	; () banked
  5534  0119F6  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5535  0119F8  0E01               	movlw	high _PortB
  5536  0119FA  0100               	movlb	0	; () banked
  5537  0119FC  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5538  0119FE  0E01               	movlw	1
  5539  011A00  0100               	movlb	0	; () banked
  5540  011A02  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5541  011A04  EC57  F08B         	call	_Port_Init	;wreg free
  5542                           
  5543                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5544  011A08  0E95               	movlw	low _PortC
  5545  011A0A  0100               	movlb	0	; () banked
  5546  011A0C  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5547  011A0E  0E00               	movlw	high _PortC
  5548  011A10  0100               	movlb	0	; () banked
  5549  011A12  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5550  011A14  0E02               	movlw	2
  5551  011A16  0100               	movlb	0	; () banked
  5552  011A18  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5553  011A1A  EC57  F08B         	call	_Port_Init	;wreg free
  5554                           
  5555                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5556  011A1E  0E8B               	movlw	low _PortD
  5557  011A20  0100               	movlb	0	; () banked
  5558  011A22  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5559  011A24  0E00               	movlw	high _PortD
  5560  011A26  0100               	movlb	0	; () banked
  5561  011A28  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5562  011A2A  0E03               	movlw	3
  5563  011A2C  0100               	movlb	0	; () banked
  5564  011A2E  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5565  011A30  EC57  F08B         	call	_Port_Init	;wreg free
  5566                           
  5567                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5568  011A34  0E81               	movlw	low _PortE
  5569  011A36  0100               	movlb	0	; () banked
  5570  011A38  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5571  011A3A  0E00               	movlw	high _PortE
  5572  011A3C  0100               	movlb	0	; () banked
  5573  011A3E  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5574  011A40  0E04               	movlw	4
  5575  011A42  0100               	movlb	0	; () banked
  5576  011A44  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5577  011A46  EC57  F08B         	call	_Port_Init	;wreg free
  5578                           
  5579                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5580  011A4A  0EA9               	movlw	low _PortF
  5581  011A4C  0100               	movlb	0	; () banked
  5582  011A4E  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5583  011A50  0E01               	movlw	high _PortF
  5584  011A52  0100               	movlb	0	; () banked
  5585  011A54  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5586  011A56  0E05               	movlw	5
  5587  011A58  0100               	movlb	0	; () banked
  5588  011A5A  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5589  011A5C  EC57  F08B         	call	_Port_Init	;wreg free
  5590                           
  5591                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5592  011A60  0E8B               	movlw	low _PortG
  5593  011A62  0100               	movlb	0	; () banked
  5594  011A64  6FF1               	movwf	Port_Init@pInput& (0+255),b
  5595  011A66  0E01               	movlw	high _PortG
  5596  011A68  0100               	movlb	0	; () banked
  5597  011A6A  6FF2               	movwf	(Port_Init@pInput+1)& (0+255),b
  5598  011A6C  0E06               	movlw	6
  5599  011A6E  0100               	movlb	0	; () banked
  5600  011A70  6FF3               	movwf	Port_Init@pPort& (0+255),b
  5601  011A72  EC57  F08B         	call	_Port_Init	;wreg free
  5602                           
  5603                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5604  011A76  0EA9               	movlw	low _PortF
  5605  011A78  0100               	movlb	0	; () banked
  5606  011A7A  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  5607  011A7C  0E01               	movlw	high _PortF
  5608  011A7E  0100               	movlb	0	; () banked
  5609  011A80  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5610  011A82  0E05               	movlw	5
  5611  011A84  0100               	movlb	0	; () banked
  5612  011A86  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  5613  011A88  0E00               	movlw	0
  5614  011A8A  0100               	movlb	0	; () banked
  5615  011A8C  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  5616  011A8E  EC77  F08A         	call	_Port_SetPinType	;wreg free
  5617                           
  5618                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5619  011A92  0E95               	movlw	low _PortB
  5620  011A94  0100               	movlb	0	; () banked
  5621  011A96  6FE7               	movwf	Port_SetQuadType@pInput& (0+255),b
  5622  011A98  0E01               	movlw	high _PortB
  5623  011A9A  0100               	movlb	0	; () banked
  5624  011A9C  6FE8               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5625  011A9E  0E00               	movlw	0
  5626  011AA0  0100               	movlb	0	; () banked
  5627  011AA2  6FE9               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5628  011AA4  0E00               	movlw	0
  5629  011AA6  0100               	movlb	0	; () banked
  5630  011AA8  6FEA               	movwf	Port_SetQuadType@pType& (0+255),b
  5631  011AAA  EC2E  F085         	call	_Port_SetQuadType	;wreg free
  5632                           
  5633                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5634  011AAE  0EA9               	movlw	low _PortF
  5635  011AB0  0100               	movlb	0	; () banked
  5636  011AB2  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  5637  011AB4  0E01               	movlw	high _PortF
  5638  011AB6  0100               	movlb	0	; () banked
  5639  011AB8  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5640  011ABA  0E06               	movlw	6
  5641  011ABC  0100               	movlb	0	; () banked
  5642  011ABE  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  5643  011AC0  0E03               	movlw	3
  5644  011AC2  0100               	movlb	0	; () banked
  5645  011AC4  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  5646  011AC6  EC77  F08A         	call	_Port_SetPinType	;wreg free
  5647                           
  5648                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5649  011ACA  0E8B               	movlw	low _PortG
  5650  011ACC  0100               	movlb	0	; () banked
  5651  011ACE  6FEB               	movwf	Port_SetType@pInput& (0+255),b
  5652  011AD0  0E01               	movlw	high _PortG
  5653  011AD2  0100               	movlb	0	; () banked
  5654  011AD4  6FEC               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5655  011AD6  0E03               	movlw	3
  5656  011AD8  0100               	movlb	0	; () banked
  5657  011ADA  6FED               	movwf	Port_SetType@pType& (0+255),b
  5658  011ADC  EC59  F086         	call	_Port_SetType	;wreg free
  5659                           
  5660                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5661  011AE0  0E8B               	movlw	low _PortG
  5662  011AE2  0100               	movlb	0	; () banked
  5663  011AE4  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  5664  011AE6  0E01               	movlw	high _PortG
  5665  011AE8  0100               	movlb	0	; () banked
  5666  011AEA  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5667  011AEC  0E04               	movlw	4
  5668  011AEE  0100               	movlb	0	; () banked
  5669  011AF0  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  5670  011AF2  0E00               	movlw	0
  5671  011AF4  0100               	movlb	0	; () banked
  5672  011AF6  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  5673  011AF8  EC92  F093         	call	_Port_SetPin	;wreg free
  5674                           
  5675                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5676  011AFC  0EA9               	movlw	low _PortF
  5677  011AFE  0100               	movlb	0	; () banked
  5678  011B00  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  5679  011B02  0E01               	movlw	high _PortF
  5680  011B04  0100               	movlb	0	; () banked
  5681  011B06  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5682  011B08  0E06               	movlw	6
  5683  011B0A  0100               	movlb	0	; () banked
  5684  011B0C  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  5685  011B0E  0E01               	movlw	1
  5686  011B10  0100               	movlb	0	; () banked
  5687  011B12  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  5688  011B14  EC92  F093         	call	_Port_SetPin	;wreg free
  5689                           
  5690                           ;MXK.c: 55: LED_Init(eLED1);
  5691  011B18  0E00               	movlw	0
  5692  011B1A  EC08  F09D         	call	_LED_Init
  5693                           
  5694                           ;MXK.c: 56: LED_Init(eLED2);
  5695  011B1E  0E01               	movlw	1
  5696  011B20  EC08  F09D         	call	_LED_Init
  5697                           
  5698                           ;MXK.c: 58: PIR1 = 0;
  5699  011B24  0E00               	movlw	0
  5700  011B26  6E9E               	movwf	3998,c	;volatile
  5701                           
  5702                           ;MXK.c: 59: PIR2 = 0;
  5703  011B28  0E00               	movlw	0
  5704  011B2A  6EA1               	movwf	4001,c	;volatile
  5705                           
  5706                           ;MXK.c: 60: PIR3 = 0;
  5707  011B2C  0E00               	movlw	0
  5708  011B2E  6EA4               	movwf	4004,c	;volatile
  5709                           
  5710                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5711  011B30  8E9B               	bsf	3995,7,c	;volatile
  5712                           
  5713                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5714  011B32  8C9B               	bsf	3995,6,c	;volatile
  5715                           
  5716                           ;MXK.c: 66: delay_ms(100);
  5717  011B34  0E00               	movlw	0
  5718  011B36  0100               	movlb	0	; () banked
  5719  011B38  6FB2               	movwf	(delay_ms@ms+1)& (0+255),b
  5720  011B3A  0E64               	movlw	100
  5721  011B3C  6FB1               	movwf	delay_ms@ms& (0+255),b
  5722  011B3E  EC3A  F09C         	call	_delay_ms	;wreg free
  5723                           
  5724                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5725  011B42  8ED0               	bsf	4048,7,c	;volatile
  5726  011B44  0012               	return		;funcret
  5727  011B46                     __end_of_MXK_Init:
  5728                           	opt stack 0
  5729                           tosu	equ	0xFFF
  5730                           tosh	equ	0xFFE
  5731                           tosl	equ	0xFFD
  5732                           pclath	equ	0xFFA
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           postdec1	equ	0xFE5
  5743                           plusw1	equ	0xFE3
  5744                           fsr1h	equ	0xFE2
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           plusw2	equ	0xFDB
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _Port_Init *****************
  5755 ;; Defined at:
  5756 ;;		line 150 in file "Library/Port.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5759 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5760 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5761 ;;  pPort           1   66[BANK0 ] enum E6786
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  i               1   69[BANK0 ] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5773 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;Total ram usage:        6 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:   15
  5780 ;; This function calls:
  5781 ;;		_GetPortPORT
  5782 ;;		_GetPortProperties
  5783 ;;		_GetPortTRIS
  5784 ;;		_Port_Set
  5785 ;;		_Port_SetPinType
  5786 ;;		_Port_SetType
  5787 ;;		_Word_GetPair
  5788 ;; This function is called by:
  5789 ;;		_MXK_Init
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text20
  5794  0116AE                     __ptext20:
  5795                           	opt stack 0
  5796  0116AE                     _Port_Init:
  5797                           	opt stack 14
  5798                           
  5799                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5800                           
  5801                           ;incstack = 0
  5802  0116AE  0100               	movlb	0	; () banked
  5803  0116B0  51F3               	movf	Port_Init@pPort& (0+255),w,b
  5804  0116B2  ECC1  F096         	call	_GetPortProperties
  5805  0116B6  C0F1  FFD9         	movff	Port_Init@pInput,fsr2l
  5806  0116BA  C0F2  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5807  0116BE  0100               	movlb	0	; () banked
  5808  0116C0  C0B1  FFDE         	movff	?_GetPortProperties,postinc2
  5809  0116C4  0100               	movlb	0	; () banked
  5810  0116C6  C0B2  FFDD         	movff	?_GetPortProperties+1,postdec2
  5811                           
  5812                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5813  0116CA  0100               	movlb	0	; () banked
  5814  0116CC  51F3               	movf	Port_Init@pPort& (0+255),w,b
  5815  0116CE  EC14  F097         	call	_GetPortPORT
  5816  0116D2  0100               	movlb	0	; () banked
  5817  0116D4  EE20 F006          	lfsr	2,6
  5818  0116D8  51F1               	movf	Port_Init@pInput& (0+255),w,b
  5819  0116DA  26D9               	addwf	fsr2l,f,c
  5820  0116DC  51F2               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5821  0116DE  22DA               	addwfc	fsr2h,f,c
  5822  0116E0  0100               	movlb	0	; () banked
  5823  0116E2  C0B1  FFDE         	movff	?_GetPortPORT,postinc2
  5824  0116E6  0100               	movlb	0	; () banked
  5825  0116E8  C0B2  FFDD         	movff	?_GetPortPORT+1,postdec2
  5826                           
  5827                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5828  0116EC  0100               	movlb	0	; () banked
  5829  0116EE  51F3               	movf	Port_Init@pPort& (0+255),w,b
  5830  0116F0  EC14  F097         	call	_GetPortPORT
  5831  0116F4  0100               	movlb	0	; () banked
  5832  0116F6  EE20 F004          	lfsr	2,4
  5833  0116FA  51F1               	movf	Port_Init@pInput& (0+255),w,b
  5834  0116FC  26D9               	addwf	fsr2l,f,c
  5835  0116FE  51F2               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5836  011700  22DA               	addwfc	fsr2h,f,c
  5837  011702  0100               	movlb	0	; () banked
  5838  011704  C0B1  FFDE         	movff	?_GetPortPORT,postinc2
  5839  011708  0100               	movlb	0	; () banked
  5840  01170A  C0B2  FFDD         	movff	?_GetPortPORT+1,postdec2
  5841                           
  5842                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5843  01170E  0100               	movlb	0	; () banked
  5844  011710  51F3               	movf	Port_Init@pPort& (0+255),w,b
  5845  011712  EC6E  F096         	call	_GetPortTRIS
  5846  011716  0100               	movlb	0	; () banked
  5847  011718  EE20 F002          	lfsr	2,2
  5848  01171C  51F1               	movf	Port_Init@pInput& (0+255),w,b
  5849  01171E  26D9               	addwf	fsr2l,f,c
  5850  011720  51F2               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5851  011722  22DA               	addwfc	fsr2h,f,c
  5852  011724  0100               	movlb	0	; () banked
  5853  011726  C0B1  FFDE         	movff	?_GetPortTRIS,postinc2
  5854  01172A  0100               	movlb	0	; () banked
  5855  01172C  C0B2  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5859  011730  0100               	movlb	0	; () banked
  5860  011732  EE20 F004          	lfsr	2,4
  5861  011736  51F1               	movf	Port_Init@pInput& (0+255),w,b
  5862  011738  26D9               	addwf	fsr2l,f,c
  5863  01173A  51F2               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5864  01173C  22DA               	addwfc	fsr2h,f,c
  5865  01173E  CFDE F0F4          	movff	postinc2,??_Port_Init
  5866  011742  CFDD F0F5          	movff	postdec2,??_Port_Init+1
  5867  011746  C0F4  FFD9         	movff	??_Port_Init,fsr2l
  5868  01174A  C0F5  FFDA         	movff	??_Port_Init+1,fsr2h
  5869  01174E  0E00               	movlw	0
  5870  011750  6EDF               	movwf	indf2,c
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5874  011752  0100               	movlb	0	; () banked
  5875  011754  EE20 F002          	lfsr	2,2
  5876  011758  51F1               	movf	Port_Init@pInput& (0+255),w,b
  5877  01175A  26D9               	addwf	fsr2l,f,c
  5878  01175C  51F2               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5879  01175E  22DA               	addwfc	fsr2h,f,c
  5880  011760  CFDE F0F4          	movff	postinc2,??_Port_Init
  5881  011764  CFDD F0F5          	movff	postdec2,??_Port_Init+1
  5882  011768  C0F4  FFD9         	movff	??_Port_Init,fsr2l
  5883  01176C  C0F5  FFDA         	movff	??_Port_Init+1,fsr2h
  5884  011770  0EFF               	movlw	255
  5885  011772  6EDF               	movwf	indf2,c
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5889  011774  C0F1  F0EB         	movff	Port_Init@pInput,Port_SetType@pInput
  5890  011778  C0F2  F0EC         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5891  01177C  0E00               	movlw	0
  5892  01177E  0100               	movlb	0	; () banked
  5893  011780  6FED               	movwf	Port_SetType@pType& (0+255),b
  5894  011782  EC59  F086         	call	_Port_SetType	;wreg free
  5895                           
  5896                           ;Port.c: 166: UINT8 i;
  5897                           ;Port.c: 167: for (i=0; i<8; i++)
  5898  011786  0E00               	movlw	0
  5899  011788  0100               	movlb	0	; () banked
  5900  01178A  6FF6               	movwf	Port_Init@i& (0+255),b
  5901  01178C                     l10991:
  5902                           
  5903                           ; BSR set to: 0
  5904  01178C  0E07               	movlw	7
  5905  01178E  0100               	movlb	0	; () banked
  5906  011790  65F6               	cpfsgt	Port_Init@i& (0+255),b
  5907  011792  D031               	goto	l11005
  5908  011794  D04B               	goto	l11011
  5909  011796                     l10995:
  5910                           
  5911                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5912  011796  C0F1  F0D7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5913  01179A  C0F2  F0D8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5914  01179E  C0F6  F0D9         	movff	Port_Init@i,Port_SetPinType@pPin
  5915  0117A2  0E03               	movlw	3
  5916  0117A4  0100               	movlb	0	; () banked
  5917  0117A6  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  5918  0117A8  EC77  F08A         	call	_Port_SetPinType	;wreg free
  5919                           
  5920                           ;Port.c: 173: break;
  5921  0117AC  D03C               	goto	l11007
  5922  0117AE                     l10997:
  5923                           
  5924                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5925  0117AE  C0F1  F0D7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5926  0117B2  C0F2  F0D8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5927  0117B6  C0F6  F0D9         	movff	Port_Init@i,Port_SetPinType@pPin
  5928  0117BA  0E02               	movlw	2
  5929  0117BC  0100               	movlb	0	; () banked
  5930  0117BE  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  5931  0117C0  EC77  F08A         	call	_Port_SetPinType	;wreg free
  5932                           
  5933                           ;Port.c: 176: break;
  5934  0117C4  D030               	goto	l11007
  5935  0117C6                     l10999:
  5936                           
  5937                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5938  0117C6  C0F1  F0D7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5939  0117CA  C0F2  F0D8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5940  0117CE  C0F6  F0D9         	movff	Port_Init@i,Port_SetPinType@pPin
  5941  0117D2  0E01               	movlw	1
  5942  0117D4  0100               	movlb	0	; () banked
  5943  0117D6  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  5944  0117D8  EC77  F08A         	call	_Port_SetPinType	;wreg free
  5945                           
  5946                           ;Port.c: 179: break;
  5947  0117DC  D024               	goto	l11007
  5948  0117DE                     l11001:
  5949                           
  5950                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5951  0117DE  C0F1  F0D7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5952  0117E2  C0F2  F0D8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5953  0117E6  C0F6  F0D9         	movff	Port_Init@i,Port_SetPinType@pPin
  5954  0117EA  0E00               	movlw	0
  5955  0117EC  0100               	movlb	0	; () banked
  5956  0117EE  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  5957  0117F0  EC77  F08A         	call	_Port_SetPinType	;wreg free
  5958                           
  5959                           ;Port.c: 183: }
  5960                           
  5961                           ;Port.c: 182: break;
  5962  0117F4  D018               	goto	l11007
  5963  0117F6                     l11005:
  5964  0117F6  C0F1  FFD9         	movff	Port_Init@pInput,fsr2l
  5965  0117FA  C0F2  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5966  0117FE  CFDE F0BD          	movff	postinc2,Word_GetPair@pInput
  5967  011802  CFDD F0BE          	movff	postdec2,Word_GetPair@pInput+1
  5968  011806  C0F6  F0BF         	movff	Port_Init@i,Word_GetPair@pPair
  5969  01180A  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  5970                           
  5971                           ; Switch size 1, requested type "space"
  5972                           ; Number of cases is 4, Range of values is 0 to 3
  5973                           ; switch strategies available:
  5974                           ; Name         Instructions Cycles
  5975                           ; simple_byte           13     7 (average)
  5976                           ;	Chosen strategy is simple_byte
  5977  01180E  0A00               	xorlw	0	; case 0
  5978  011810  B4D8               	btfsc	status,2,c
  5979  011812  D7C1               	goto	l10995
  5980  011814  0A01               	xorlw	1	; case 1
  5981  011816  B4D8               	btfsc	status,2,c
  5982  011818  D7D6               	goto	l10999
  5983  01181A  0A03               	xorlw	3	; case 2
  5984  01181C  B4D8               	btfsc	status,2,c
  5985  01181E  D7C7               	goto	l10997
  5986  011820  0A01               	xorlw	1	; case 3
  5987  011822  B4D8               	btfsc	status,2,c
  5988  011824  D7DC               	goto	l11001
  5989  011826                     l11007:
  5990  011826  0100               	movlb	0	; () banked
  5991  011828  2BF6               	incf	Port_Init@i& (0+255),f,b
  5992  01182A  D7B0               	goto	l10991
  5993  01182C                     l11011:
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;Port.c: 184: }
  5997                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5998  01182C  C0F1  F0C0         	movff	Port_Init@pInput,Port_Set@pInput
  5999  011830  C0F2  F0C1         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  6000  011834  0E00               	movlw	0
  6001  011836  0100               	movlb	0	; () banked
  6002  011838  6FC2               	movwf	Port_Set@pValue& (0+255),b
  6003  01183A  EC0F  F082         	call	_Port_Set	;wreg free
  6004  01183E  0012               	return		;funcret
  6005  011840                     __end_of_Port_Init:
  6006                           	opt stack 0
  6007                           tosu	equ	0xFFF
  6008                           tosh	equ	0xFFE
  6009                           tosl	equ	0xFFD
  6010                           pclath	equ	0xFFA
  6011                           tblptru	equ	0xFF8
  6012                           tblptrh	equ	0xFF7
  6013                           tblptrl	equ	0xFF6
  6014                           tablat	equ	0xFF5
  6015                           prodh	equ	0xFF4
  6016                           prodl	equ	0xFF3
  6017                           intcon	equ	0xFF2
  6018                           postinc0	equ	0xFEE
  6019                           wreg	equ	0xFE8
  6020                           postdec1	equ	0xFE5
  6021                           plusw1	equ	0xFE3
  6022                           fsr1h	equ	0xFE2
  6023                           fsr1l	equ	0xFE1
  6024                           indf2	equ	0xFDF
  6025                           postinc2	equ	0xFDE
  6026                           postdec2	equ	0xFDD
  6027                           plusw2	equ	0xFDB
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _Port_SetType *****************
  6033 ;; Defined at:
  6034 ;;		line 513 in file "Library/Port.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  6037 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6038 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6039 ;;  pType           1   60[BANK0 ] enum E6795
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  Output          1   63[BANK0 ] enum E6475
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      enum E6475
  6044 ;; Registers used:
  6045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        6 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:   14
  6058 ;; This function calls:
  6059 ;;		_Port_CheckPortType
  6060 ;;		_Word_SetPair
  6061 ;; This function is called by:
  6062 ;;		_Port_Init
  6063 ;;		_MXK_Init
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text21
  6068  010CB2                     __ptext21:
  6069                           	opt stack 0
  6070  010CB2                     _Port_SetType:
  6071                           	opt stack 15
  6072                           
  6073                           ;Port.c: 515: ePinError Output = ePinErrorState;
  6074                           
  6075                           ;incstack = 0
  6076  010CB2  0E05               	movlw	5
  6077  010CB4  0100               	movlb	0	; () banked
  6078  010CB6  6FF0               	movwf	Port_SetType@Output& (0+255),b
  6079                           
  6080                           ;Port.c: 517: switch (pType)
  6081  010CB8  D07A               	goto	l10545
  6082  010CBA                     l10529:
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  6086  010CBA  0100               	movlb	0	; () banked
  6087  010CBC  EE20 F002          	lfsr	2,2
  6088  010CC0  51EB               	movf	Port_SetType@pInput& (0+255),w,b
  6089  010CC2  26D9               	addwf	fsr2l,f,c
  6090  010CC4  51EC               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6091  010CC6  22DA               	addwfc	fsr2h,f,c
  6092  010CC8  CFDE F0EE          	movff	postinc2,??_Port_SetType
  6093  010CCC  CFDD F0EF          	movff	postdec2,??_Port_SetType+1
  6094  010CD0  C0EE  FFD9         	movff	??_Port_SetType,fsr2l
  6095  010CD4  C0EF  FFDA         	movff	??_Port_SetType+1,fsr2h
  6096  010CD8  0EFF               	movlw	255
  6097  010CDA  D067               	goto	L3
  6098  010CDC                     l10531:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  6102  010CDC  C0EB  F0E7         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6103  010CE0  C0EC  F0E8         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6104  010CE4  0E01               	movlw	1
  6105  010CE6  0100               	movlb	0	; () banked
  6106  010CE8  6FE9               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6107  010CEA  ECDA  F09E         	call	_Port_CheckPortType	;wreg free
  6108  010CEE  0100               	movlb	0	; () banked
  6109  010CF0  6FF0               	movwf	Port_SetType@Output& (0+255),b
  6110  010CF2  0100               	movlb	0	; () banked
  6111  010CF4  51F0               	movf	Port_SetType@Output& (0+255),w,b
  6112  010CF6  A4D8               	btfss	status,2,c
  6113  010CF8  0012               	return	
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;Port.c: 527: {
  6117                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  6118  010CFA  0100               	movlb	0	; () banked
  6119  010CFC  EE20 F002          	lfsr	2,2
  6120  010D00  51EB               	movf	Port_SetType@pInput& (0+255),w,b
  6121  010D02  26D9               	addwf	fsr2l,f,c
  6122  010D04  51EC               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6123  010D06  22DA               	addwfc	fsr2h,f,c
  6124  010D08  CFDE F0EE          	movff	postinc2,??_Port_SetType
  6125  010D0C  CFDD F0EF          	movff	postdec2,??_Port_SetType+1
  6126  010D10  C0EE  FFD9         	movff	??_Port_SetType,fsr2l
  6127  010D14  C0EF  FFDA         	movff	??_Port_SetType+1,fsr2h
  6128  010D18  0E00               	movlw	0
  6129  010D1A  6EDF               	movwf	indf2,c
  6130                           
  6131                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  6132  010D1C  0100               	movlb	0	; () banked
  6133  010D1E  EE20 F004          	lfsr	2,4
  6134  010D22  D036               	goto	L8
  6135  010D24                     l10535:
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  6139  010D24  C0EB  F0E7         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6140  010D28  C0EC  F0E8         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6141  010D2C  0E02               	movlw	2
  6142  010D2E  0100               	movlb	0	; () banked
  6143  010D30  6FE9               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6144  010D32  ECDA  F09E         	call	_Port_CheckPortType	;wreg free
  6145  010D36  0100               	movlb	0	; () banked
  6146  010D38  6FF0               	movwf	Port_SetType@Output& (0+255),b
  6147  010D3A  0100               	movlb	0	; () banked
  6148  010D3C  51F0               	movf	Port_SetType@Output& (0+255),w,b
  6149  010D3E  A4D8               	btfss	status,2,c
  6150  010D40  0012               	return	
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;Port.c: 538: {
  6154                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  6155  010D42  0100               	movlb	0	; () banked
  6156  010D44  EE20 F002          	lfsr	2,2
  6157  010D48  51EB               	movf	Port_SetType@pInput& (0+255),w,b
  6158  010D4A  26D9               	addwf	fsr2l,f,c
  6159  010D4C  51EC               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6160  010D4E  22DA               	addwfc	fsr2h,f,c
  6161  010D50  CFDE F0EE          	movff	postinc2,??_Port_SetType
  6162  010D54  CFDD F0EF          	movff	postdec2,??_Port_SetType+1
  6163  010D58  C0EE  FFD9         	movff	??_Port_SetType,fsr2l
  6164  010D5C  C0EF  FFDA         	movff	??_Port_SetType+1,fsr2h
  6165  010D60  0EFF               	movlw	255
  6166  010D62  6EDF               	movwf	indf2,c
  6167                           
  6168                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  6169  010D64  0100               	movlb	0	; () banked
  6170  010D66  EE20 F004          	lfsr	2,4
  6171  010D6A  D7AA               	goto	L4
  6172  010D6C                     l10539:
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  6176  010D6C  C0EB  F0E7         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6177  010D70  C0EC  F0E8         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6178  010D74  0E00               	movlw	0
  6179  010D76  0100               	movlb	0	; () banked
  6180  010D78  6FE9               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6181  010D7A  ECDA  F09E         	call	_Port_CheckPortType	;wreg free
  6182  010D7E  0100               	movlb	0	; () banked
  6183  010D80  6FF0               	movwf	Port_SetType@Output& (0+255),b
  6184  010D82  0100               	movlb	0	; () banked
  6185  010D84  51F0               	movf	Port_SetType@Output& (0+255),w,b
  6186  010D86  A4D8               	btfss	status,2,c
  6187  010D88  0012               	return	
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;Port.c: 549: {
  6191                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  6192  010D8A  0100               	movlb	0	; () banked
  6193  010D8C  EE20 F002          	lfsr	2,2
  6194  010D90                     L8:
  6195  010D90  51EB               	movf	Port_SetType@pInput& (0+255),w,b
  6196  010D92  26D9               	addwf	fsr2l,f,c
  6197  010D94  51EC               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6198  010D96  22DA               	addwfc	fsr2h,f,c
  6199  010D98  CFDE F0EE          	movff	postinc2,??_Port_SetType
  6200  010D9C  CFDD F0EF          	movff	postdec2,??_Port_SetType+1
  6201  010DA0  C0EE  FFD9         	movff	??_Port_SetType,fsr2l
  6202  010DA4  C0EF  FFDA         	movff	??_Port_SetType+1,fsr2h
  6203  010DA8  0E00               	movlw	0
  6204  010DAA                     L3:
  6205  010DAA  6EDF               	movwf	indf2,c
  6206                           
  6207                           ;Port.c: 552: }
  6208  010DAC  D00E               	goto	l10547
  6209  010DAE                     l10545:
  6210                           
  6211                           ; BSR set to: 0
  6212  010DAE  0100               	movlb	0	; () banked
  6213  010DB0  51ED               	movf	Port_SetType@pType& (0+255),w,b
  6214                           
  6215                           ; Switch size 1, requested type "space"
  6216                           ; Number of cases is 4, Range of values is 0 to 3
  6217                           ; switch strategies available:
  6218                           ; Name         Instructions Cycles
  6219                           ; simple_byte           13     7 (average)
  6220                           ;	Chosen strategy is simple_byte
  6221  010DB2  0A00               	xorlw	0	; case 0
  6222  010DB4  B4D8               	btfsc	status,2,c
  6223  010DB6  D781               	goto	l10529
  6224  010DB8  0A01               	xorlw	1	; case 1
  6225  010DBA  B4D8               	btfsc	status,2,c
  6226  010DBC  D78F               	goto	l10531
  6227  010DBE  0A03               	xorlw	3	; case 2
  6228  010DC0  B4D8               	btfsc	status,2,c
  6229  010DC2  D7B0               	goto	l10535
  6230  010DC4  0A01               	xorlw	1	; case 3
  6231  010DC6  B4D8               	btfsc	status,2,c
  6232  010DC8  D7D1               	goto	l10539
  6233  010DCA                     l10547:
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6237  010DCA  0E08               	movlw	8
  6238  010DCC  0100               	movlb	0	; () banked
  6239  010DCE  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6240  010DD0  0100               	movlb	0	; () banked
  6241  010DD2  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6242  010DD4  0E00               	movlw	0
  6243  010DD6  0100               	movlb	0	; () banked
  6244  010DD8  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6245  010DDA  0100               	movlb	0	; () banked
  6246  010DDC  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6247  010DDE  0E00               	movlw	0
  6248  010DE0  0100               	movlb	0	; () banked
  6249  010DE2  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6250  010DE4  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6251  010DE8  EC45  F09F         	call	_Word_SetPair	;wreg free
  6252                           
  6253                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6254  010DEC  0E08               	movlw	8
  6255  010DEE  0100               	movlb	0	; () banked
  6256  010DF0  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6257  010DF2  0100               	movlb	0	; () banked
  6258  010DF4  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6259  010DF6  0E00               	movlw	0
  6260  010DF8  0100               	movlb	0	; () banked
  6261  010DFA  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6262  010DFC  0100               	movlb	0	; () banked
  6263  010DFE  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6264  010E00  0E01               	movlw	1
  6265  010E02  0100               	movlb	0	; () banked
  6266  010E04  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6267  010E06  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6268  010E0A  EC45  F09F         	call	_Word_SetPair	;wreg free
  6269                           
  6270                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6271  010E0E  0E08               	movlw	8
  6272  010E10  0100               	movlb	0	; () banked
  6273  010E12  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6274  010E14  0100               	movlb	0	; () banked
  6275  010E16  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6276  010E18  0E00               	movlw	0
  6277  010E1A  0100               	movlb	0	; () banked
  6278  010E1C  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6279  010E1E  0100               	movlb	0	; () banked
  6280  010E20  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6281  010E22  0E02               	movlw	2
  6282  010E24  0100               	movlb	0	; () banked
  6283  010E26  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6284  010E28  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6285  010E2C  EC45  F09F         	call	_Word_SetPair	;wreg free
  6286                           
  6287                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6288  010E30  0E08               	movlw	8
  6289  010E32  0100               	movlb	0	; () banked
  6290  010E34  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6291  010E36  0100               	movlb	0	; () banked
  6292  010E38  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6293  010E3A  0E00               	movlw	0
  6294  010E3C  0100               	movlb	0	; () banked
  6295  010E3E  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6296  010E40  0100               	movlb	0	; () banked
  6297  010E42  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6298  010E44  0E03               	movlw	3
  6299  010E46  0100               	movlb	0	; () banked
  6300  010E48  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6301  010E4A  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6302  010E4E  EC45  F09F         	call	_Word_SetPair	;wreg free
  6303                           
  6304                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6305  010E52  0E08               	movlw	8
  6306  010E54  0100               	movlb	0	; () banked
  6307  010E56  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6308  010E58  0100               	movlb	0	; () banked
  6309  010E5A  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6310  010E5C  0E00               	movlw	0
  6311  010E5E  0100               	movlb	0	; () banked
  6312  010E60  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6313  010E62  0100               	movlb	0	; () banked
  6314  010E64  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6315  010E66  0E04               	movlw	4
  6316  010E68  0100               	movlb	0	; () banked
  6317  010E6A  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6318  010E6C  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6319  010E70  EC45  F09F         	call	_Word_SetPair	;wreg free
  6320                           
  6321                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6322  010E74  0E08               	movlw	8
  6323  010E76  0100               	movlb	0	; () banked
  6324  010E78  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6325  010E7A  0100               	movlb	0	; () banked
  6326  010E7C  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6327  010E7E  0E00               	movlw	0
  6328  010E80  0100               	movlb	0	; () banked
  6329  010E82  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6330  010E84  0100               	movlb	0	; () banked
  6331  010E86  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6332  010E88  0E05               	movlw	5
  6333  010E8A  0100               	movlb	0	; () banked
  6334  010E8C  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6335  010E8E  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6336  010E92  EC45  F09F         	call	_Word_SetPair	;wreg free
  6337                           
  6338                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6339  010E96  0E08               	movlw	8
  6340  010E98  0100               	movlb	0	; () banked
  6341  010E9A  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6342  010E9C  0100               	movlb	0	; () banked
  6343  010E9E  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6344  010EA0  0E00               	movlw	0
  6345  010EA2  0100               	movlb	0	; () banked
  6346  010EA4  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6347  010EA6  0100               	movlb	0	; () banked
  6348  010EA8  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6349  010EAA  0E06               	movlw	6
  6350  010EAC  0100               	movlb	0	; () banked
  6351  010EAE  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6352  010EB0  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6353  010EB4  EC45  F09F         	call	_Word_SetPair	;wreg free
  6354                           
  6355                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6356  010EB8  0E08               	movlw	8
  6357  010EBA  0100               	movlb	0	; () banked
  6358  010EBC  25EB               	addwf	Port_SetType@pInput& (0+255),w,b
  6359  010EBE  0100               	movlb	0	; () banked
  6360  010EC0  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
  6361  010EC2  0E00               	movlw	0
  6362  010EC4  0100               	movlb	0	; () banked
  6363  010EC6  21EC               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6364  010EC8  0100               	movlb	0	; () banked
  6365  010ECA  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6366  010ECC  0E07               	movlw	7
  6367  010ECE  0100               	movlb	0	; () banked
  6368  010ED0  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
  6369  010ED2  C0ED  F0C3         	movff	Port_SetType@pType,Word_SetPair@pValue
  6370  010ED6  EC45  F09F         	call	_Word_SetPair	;wreg free
  6371  010EDA  0012               	return	
  6372  010EDC                     __end_of_Port_SetType:
  6373                           	opt stack 0
  6374                           tosu	equ	0xFFF
  6375                           tosh	equ	0xFFE
  6376                           tosl	equ	0xFFD
  6377                           pclath	equ	0xFFA
  6378                           tblptru	equ	0xFF8
  6379                           tblptrh	equ	0xFF7
  6380                           tblptrl	equ	0xFF6
  6381                           tablat	equ	0xFF5
  6382                           prodh	equ	0xFF4
  6383                           prodl	equ	0xFF3
  6384                           intcon	equ	0xFF2
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           postdec1	equ	0xFE5
  6388                           plusw1	equ	0xFE3
  6389                           fsr1h	equ	0xFE2
  6390                           fsr1l	equ	0xFE1
  6391                           indf2	equ	0xFDF
  6392                           postinc2	equ	0xFDE
  6393                           postdec2	equ	0xFDD
  6394                           plusw2	equ	0xFDB
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _Port_CheckPortType *****************
  6400 ;; Defined at:
  6401 ;;		line 138 in file "Library/Port.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6404 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6405 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6406 ;;  pDrive          1   56[BANK0 ] enum E6469
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  Output          1   57[BANK0 ] enum E6475
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      enum E6475
  6411 ;; Registers used:
  6412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6418 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;Total ram usage:        4 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:   13
  6425 ;; This function calls:
  6426 ;;		_Port_CheckQuadType
  6427 ;; This function is called by:
  6428 ;;		_Port_SetType
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text22
  6433  013DB4                     __ptext22:
  6434                           	opt stack 0
  6435  013DB4                     _Port_CheckPortType:
  6436                           	opt stack 15
  6437                           
  6438                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6439                           
  6440                           ;incstack = 0
  6441  013DB4  0E05               	movlw	5
  6442  013DB6  0100               	movlb	0	; () banked
  6443  013DB8  6FEA               	movwf	Port_CheckPortType@Output& (0+255),b
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6447  013DBA  C0E7  F0E0         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6448  013DBE  C0E8  F0E1         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6449  013DC2  0E00               	movlw	0
  6450  013DC4  0100               	movlb	0	; () banked
  6451  013DC6  6FE2               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6452  013DC8  C0E9  F0E3         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6453  013DCC  EC6A  F09D         	call	_Port_CheckQuadType	;wreg free
  6454  013DD0  0100               	movlb	0	; () banked
  6455  013DD2  6FEA               	movwf	Port_CheckPortType@Output& (0+255),b
  6456  013DD4  0100               	movlb	0	; () banked
  6457  013DD6  51EA               	movf	Port_CheckPortType@Output& (0+255),w,b
  6458  013DD8  A4D8               	btfss	status,2,c
  6459  013DDA  D00D               	goto	l10131
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6463  013DDC  C0E7  F0E0         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6464  013DE0  C0E8  F0E1         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6465  013DE4  0E01               	movlw	1
  6466  013DE6  0100               	movlb	0	; () banked
  6467  013DE8  6FE2               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6468  013DEA  C0E9  F0E3         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6469  013DEE  EC6A  F09D         	call	_Port_CheckQuadType	;wreg free
  6470  013DF2  0100               	movlb	0	; () banked
  6471  013DF4  6FEA               	movwf	Port_CheckPortType@Output& (0+255),b
  6472  013DF6                     l10131:
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;Port.c: 146: return Output;
  6476  013DF6  0100               	movlb	0	; () banked
  6477  013DF8  51EA               	movf	Port_CheckPortType@Output& (0+255),w,b
  6478  013DFA  0012               	return	
  6479  013DFC                     __end_of_Port_CheckPortType:
  6480                           	opt stack 0
  6481                           tosu	equ	0xFFF
  6482                           tosh	equ	0xFFE
  6483                           tosl	equ	0xFFD
  6484                           pclath	equ	0xFFA
  6485                           tblptru	equ	0xFF8
  6486                           tblptrh	equ	0xFF7
  6487                           tblptrl	equ	0xFF6
  6488                           tablat	equ	0xFF5
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           intcon	equ	0xFF2
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           postdec1	equ	0xFE5
  6495                           plusw1	equ	0xFE3
  6496                           fsr1h	equ	0xFE2
  6497                           fsr1l	equ	0xFE1
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           plusw2	equ	0xFDB
  6502                           fsr2h	equ	0xFDA
  6503                           fsr2l	equ	0xFD9
  6504                           status	equ	0xFD8
  6505                           
  6506 ;; *************** function _Port_Set *****************
  6507 ;; Defined at:
  6508 ;;		line 570 in file "Library/Port.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6511 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6512 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6513 ;;  pValue          1   17[BANK0 ] unsigned char 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6516 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6517 ;;  Type            1   38[BANK0 ] enum E6795
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      void 
  6520 ;; Registers used:
  6521 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6527 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;Total ram usage:       24 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:   10
  6534 ;; This function calls:
  6535 ;;		_Byte_SetByte
  6536 ;;		_Word_GetPair
  6537 ;; This function is called by:
  6538 ;;		_Port_Init
  6539 ;;		_Port_Toggle
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text23
  6544  01041E                     __ptext23:
  6545                           	opt stack 0
  6546  01041E                     _Port_Set:
  6547                           	opt stack 18
  6548                           
  6549                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;incstack = 0
  6553  01041E  0E08               	movlw	8
  6554  010420  0100               	movlb	0	; () banked
  6555  010422  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6556  010424  0100               	movlb	0	; () banked
  6557  010426  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6558  010428  0E00               	movlw	0
  6559  01042A  0100               	movlb	0	; () banked
  6560  01042C  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6561  01042E  0100               	movlb	0	; () banked
  6562  010430  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6563  010432  0E00               	movlw	0
  6564  010434  0100               	movlb	0	; () banked
  6565  010436  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6566  010438  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6567  01043C  0100               	movlb	0	; () banked
  6568  01043E  6FD7               	movwf	Port_Set@Type& (0+255),b
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6572  010440  0100               	movlb	0	; () banked
  6573  010442  51D7               	movf	Port_Set@Type& (0+255),w,b
  6574  010444  0100               	movlb	0	; () banked
  6575  010446  6FC3               	movwf	??_Port_Set& (0+255),b
  6576  010448  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6577  01044A  0E0E               	movlw	14
  6578  01044C                     u6885:
  6579  01044C  90D8               	bcf	status,0,c
  6580  01044E  0100               	movlb	0	; () banked
  6581  010450  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6582  010452  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6583  010454  2EE8               	decfsz	wreg,f,c
  6584  010456  D7FA               	goto	u6885
  6585  010458  0100               	movlb	0	; () banked
  6586  01045A  51D7               	movf	Port_Set@Type& (0+255),w,b
  6587  01045C  0100               	movlb	0	; () banked
  6588  01045E  6FC5               	movwf	(??_Port_Set+2)& (0+255),b
  6589  010460  6BC6               	clrf	(??_Port_Set+3)& (0+255),b
  6590  010462  0E0C               	movlw	12
  6591  010464                     u6895:
  6592  010464  90D8               	bcf	status,0,c
  6593  010466  0100               	movlb	0	; () banked
  6594  010468  37C5               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6595  01046A  37C6               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6596  01046C  2EE8               	decfsz	wreg,f,c
  6597  01046E  D7FA               	goto	u6895
  6598  010470  0100               	movlb	0	; () banked
  6599  010472  51D7               	movf	Port_Set@Type& (0+255),w,b
  6600  010474  0100               	movlb	0	; () banked
  6601  010476  6FC7               	movwf	(??_Port_Set+4)& (0+255),b
  6602  010478  6BC8               	clrf	(??_Port_Set+5)& (0+255),b
  6603  01047A  0E0A               	movlw	10
  6604  01047C                     u6905:
  6605  01047C  90D8               	bcf	status,0,c
  6606  01047E  0100               	movlb	0	; () banked
  6607  010480  37C7               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6608  010482  37C8               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6609  010484  2EE8               	decfsz	wreg,f,c
  6610  010486  D7FA               	goto	u6905
  6611  010488  0100               	movlb	0	; () banked
  6612  01048A  51D7               	movf	Port_Set@Type& (0+255),w,b
  6613  01048C  0100               	movlb	0	; () banked
  6614  01048E  6FCA               	movwf	(??_Port_Set+7)& (0+255),b
  6615  010490  6BC9               	clrf	(??_Port_Set+6)& (0+255),b
  6616  010492  0100               	movlb	0	; () banked
  6617  010494  51D7               	movf	Port_Set@Type& (0+255),w,b
  6618  010496  0100               	movlb	0	; () banked
  6619  010498  6FCB               	movwf	(??_Port_Set+8)& (0+255),b
  6620  01049A  6BCC               	clrf	(??_Port_Set+9)& (0+255),b
  6621  01049C  0E06               	movlw	6
  6622  01049E                     u6915:
  6623  01049E  90D8               	bcf	status,0,c
  6624  0104A0  0100               	movlb	0	; () banked
  6625  0104A2  37CB               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6626  0104A4  37CC               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6627  0104A6  2EE8               	decfsz	wreg,f,c
  6628  0104A8  D7FA               	goto	u6915
  6629  0104AA  0100               	movlb	0	; () banked
  6630  0104AC  51D7               	movf	Port_Set@Type& (0+255),w,b
  6631  0104AE  0100               	movlb	0	; () banked
  6632  0104B0  6FCD               	movwf	(??_Port_Set+10)& (0+255),b
  6633  0104B2  6BCE               	clrf	(??_Port_Set+11)& (0+255),b
  6634  0104B4  0100               	movlb	0	; () banked
  6635  0104B6  3BCD               	swapf	(??_Port_Set+10)& (0+255),f,b
  6636  0104B8  3BCE               	swapf	(??_Port_Set+11)& (0+255),f,b
  6637  0104BA  0EF0               	movlw	240
  6638  0104BC  17CE               	andwf	(??_Port_Set+11)& (0+255),f,b
  6639  0104BE  51CD               	movf	(??_Port_Set+10)& (0+255),w,b
  6640  0104C0  0B0F               	andlw	15
  6641  0104C2  13CE               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6642  0104C4  0EF0               	movlw	240
  6643  0104C6  17CD               	andwf	(??_Port_Set+10)& (0+255),f,b
  6644  0104C8  0100               	movlb	0	; () banked
  6645  0104CA  51D7               	movf	Port_Set@Type& (0+255),w,b
  6646  0104CC  0100               	movlb	0	; () banked
  6647  0104CE  6FCF               	movwf	(??_Port_Set+12)& (0+255),b
  6648  0104D0  6BD0               	clrf	(??_Port_Set+13)& (0+255),b
  6649  0104D2  0100               	movlb	0	; () banked
  6650  0104D4  90D8               	bcf	status,0,c
  6651  0104D6  37CF               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6652  0104D8  37D0               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6653  0104DA  0100               	movlb	0	; () banked
  6654  0104DC  90D8               	bcf	status,0,c
  6655  0104DE  37CF               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6656  0104E0  37D0               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6657  0104E2  0100               	movlb	0	; () banked
  6658  0104E4  51D7               	movf	Port_Set@Type& (0+255),w,b
  6659  0104E6  0100               	movlb	0	; () banked
  6660  0104E8  6FD1               	movwf	(??_Port_Set+14)& (0+255),b
  6661  0104EA  6BD2               	clrf	(??_Port_Set+15)& (0+255),b
  6662  0104EC  0100               	movlb	0	; () banked
  6663  0104EE  51CF               	movf	(??_Port_Set+12)& (0+255),w,b
  6664  0104F0  0100               	movlb	0	; () banked
  6665  0104F2  13D1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6666  0104F4  0100               	movlb	0	; () banked
  6667  0104F6  51D0               	movf	(??_Port_Set+13)& (0+255),w,b
  6668  0104F8  0100               	movlb	0	; () banked
  6669  0104FA  13D2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6670  0104FC  0100               	movlb	0	; () banked
  6671  0104FE  51CD               	movf	(??_Port_Set+10)& (0+255),w,b
  6672  010500  0100               	movlb	0	; () banked
  6673  010502  13D1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6674  010504  0100               	movlb	0	; () banked
  6675  010506  51CE               	movf	(??_Port_Set+11)& (0+255),w,b
  6676  010508  0100               	movlb	0	; () banked
  6677  01050A  13D2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6678  01050C  0100               	movlb	0	; () banked
  6679  01050E  51CB               	movf	(??_Port_Set+8)& (0+255),w,b
  6680  010510  0100               	movlb	0	; () banked
  6681  010512  13D1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6682  010514  0100               	movlb	0	; () banked
  6683  010516  51CC               	movf	(??_Port_Set+9)& (0+255),w,b
  6684  010518  0100               	movlb	0	; () banked
  6685  01051A  13D2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6686  01051C  0100               	movlb	0	; () banked
  6687  01051E  51C9               	movf	(??_Port_Set+6)& (0+255),w,b
  6688  010520  0100               	movlb	0	; () banked
  6689  010522  13D1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6690  010524  0100               	movlb	0	; () banked
  6691  010526  51CA               	movf	(??_Port_Set+7)& (0+255),w,b
  6692  010528  0100               	movlb	0	; () banked
  6693  01052A  13D2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6694  01052C  0100               	movlb	0	; () banked
  6695  01052E  51C7               	movf	(??_Port_Set+4)& (0+255),w,b
  6696  010530  0100               	movlb	0	; () banked
  6697  010532  13D1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6698  010534  0100               	movlb	0	; () banked
  6699  010536  51C8               	movf	(??_Port_Set+5)& (0+255),w,b
  6700  010538  0100               	movlb	0	; () banked
  6701  01053A  13D2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6702  01053C  0100               	movlb	0	; () banked
  6703  01053E  51C5               	movf	(??_Port_Set+2)& (0+255),w,b
  6704  010540  0100               	movlb	0	; () banked
  6705  010542  13D1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6706  010544  0100               	movlb	0	; () banked
  6707  010546  51C6               	movf	(??_Port_Set+3)& (0+255),w,b
  6708  010548  0100               	movlb	0	; () banked
  6709  01054A  13D2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6710  01054C  0100               	movlb	0	; () banked
  6711  01054E  51C3               	movf	??_Port_Set& (0+255),w,b
  6712  010550  0100               	movlb	0	; () banked
  6713  010552  11D1               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6714  010554  0100               	movlb	0	; () banked
  6715  010556  6FD3               	movwf	Port_Set@TypeRequired& (0+255),b
  6716  010558  0100               	movlb	0	; () banked
  6717  01055A  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6718  01055C  0100               	movlb	0	; () banked
  6719  01055E  11D2               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6720  010560  0100               	movlb	0	; () banked
  6721  010562  6FD4               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;Port.c: 574: UINT16 TypeActual = Type;
  6725  010564  C0D7  F0D5         	movff	Port_Set@Type,Port_Set@TypeActual
  6726  010568  0100               	movlb	0	; () banked
  6727  01056A  6BD6               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6731  01056C  0E08               	movlw	8
  6732  01056E  0100               	movlb	0	; () banked
  6733  010570  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6734  010572  0100               	movlb	0	; () banked
  6735  010574  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6736  010576  0E00               	movlw	0
  6737  010578  0100               	movlb	0	; () banked
  6738  01057A  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6739  01057C  0100               	movlb	0	; () banked
  6740  01057E  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6741  010580  0E01               	movlw	1
  6742  010582  0100               	movlb	0	; () banked
  6743  010584  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6744  010586  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6745  01058A  0100               	movlb	0	; () banked
  6746  01058C  6FC3               	movwf	??_Port_Set& (0+255),b
  6747  01058E  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6748  010590  0100               	movlb	0	; () banked
  6749  010592  90D8               	bcf	status,0,c
  6750  010594  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6751  010596  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6752  010598  0100               	movlb	0	; () banked
  6753  01059A  90D8               	bcf	status,0,c
  6754  01059C  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6755  01059E  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6756  0105A0  0100               	movlb	0	; () banked
  6757  0105A2  51C3               	movf	??_Port_Set& (0+255),w,b
  6758  0105A4  0100               	movlb	0	; () banked
  6759  0105A6  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6760  0105A8  0100               	movlb	0	; () banked
  6761  0105AA  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6762  0105AC  0100               	movlb	0	; () banked
  6763  0105AE  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6767  0105B0  0E08               	movlw	8
  6768  0105B2  0100               	movlb	0	; () banked
  6769  0105B4  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6770  0105B6  0100               	movlb	0	; () banked
  6771  0105B8  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6772  0105BA  0E00               	movlw	0
  6773  0105BC  0100               	movlb	0	; () banked
  6774  0105BE  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6775  0105C0  0100               	movlb	0	; () banked
  6776  0105C2  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6777  0105C4  0E02               	movlw	2
  6778  0105C6  0100               	movlb	0	; () banked
  6779  0105C8  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6780  0105CA  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6781  0105CE  0100               	movlb	0	; () banked
  6782  0105D0  6FC3               	movwf	??_Port_Set& (0+255),b
  6783  0105D2  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6784  0105D4  0100               	movlb	0	; () banked
  6785  0105D6  3BC3               	swapf	??_Port_Set& (0+255),f,b
  6786  0105D8  3BC4               	swapf	(??_Port_Set+1)& (0+255),f,b
  6787  0105DA  0EF0               	movlw	240
  6788  0105DC  17C4               	andwf	(??_Port_Set+1)& (0+255),f,b
  6789  0105DE  51C3               	movf	??_Port_Set& (0+255),w,b
  6790  0105E0  0B0F               	andlw	15
  6791  0105E2  13C4               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6792  0105E4  0EF0               	movlw	240
  6793  0105E6  17C3               	andwf	??_Port_Set& (0+255),f,b
  6794  0105E8  0100               	movlb	0	; () banked
  6795  0105EA  51C3               	movf	??_Port_Set& (0+255),w,b
  6796  0105EC  0100               	movlb	0	; () banked
  6797  0105EE  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6798  0105F0  0100               	movlb	0	; () banked
  6799  0105F2  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6800  0105F4  0100               	movlb	0	; () banked
  6801  0105F6  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6805  0105F8  0E08               	movlw	8
  6806  0105FA  0100               	movlb	0	; () banked
  6807  0105FC  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6808  0105FE  0100               	movlb	0	; () banked
  6809  010600  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6810  010602  0E00               	movlw	0
  6811  010604  0100               	movlb	0	; () banked
  6812  010606  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6813  010608  0100               	movlb	0	; () banked
  6814  01060A  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6815  01060C  0E03               	movlw	3
  6816  01060E  0100               	movlb	0	; () banked
  6817  010610  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6818  010612  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6819  010616  0100               	movlb	0	; () banked
  6820  010618  6FC3               	movwf	??_Port_Set& (0+255),b
  6821  01061A  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6822  01061C  0E06               	movlw	6
  6823  01061E                     u6925:
  6824  01061E  90D8               	bcf	status,0,c
  6825  010620  0100               	movlb	0	; () banked
  6826  010622  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6827  010624  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6828  010626  2EE8               	decfsz	wreg,f,c
  6829  010628  D7FA               	goto	u6925
  6830  01062A  0100               	movlb	0	; () banked
  6831  01062C  51C3               	movf	??_Port_Set& (0+255),w,b
  6832  01062E  0100               	movlb	0	; () banked
  6833  010630  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6834  010632  0100               	movlb	0	; () banked
  6835  010634  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6836  010636  0100               	movlb	0	; () banked
  6837  010638  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6841  01063A  0E08               	movlw	8
  6842  01063C  0100               	movlb	0	; () banked
  6843  01063E  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6844  010640  0100               	movlb	0	; () banked
  6845  010642  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6846  010644  0E00               	movlw	0
  6847  010646  0100               	movlb	0	; () banked
  6848  010648  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6849  01064A  0100               	movlb	0	; () banked
  6850  01064C  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6851  01064E  0E04               	movlw	4
  6852  010650  0100               	movlb	0	; () banked
  6853  010652  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6854  010654  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6855  010658  0100               	movlb	0	; () banked
  6856  01065A  6FC3               	movwf	??_Port_Set& (0+255),b
  6857  01065C  0100               	movlb	0	; () banked
  6858  01065E  51C3               	movf	??_Port_Set& (0+255),w,b
  6859  010660  0100               	movlb	0	; () banked
  6860  010662  6FC5               	movwf	(??_Port_Set+2)& (0+255),b
  6861  010664  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6862  010666  0100               	movlb	0	; () banked
  6863  010668  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6864  01066A  0100               	movlb	0	; () banked
  6865  01066C  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6866  01066E  0100               	movlb	0	; () banked
  6867  010670  51C5               	movf	(??_Port_Set+2)& (0+255),w,b
  6868  010672  0100               	movlb	0	; () banked
  6869  010674  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6873  010676  0E08               	movlw	8
  6874  010678  0100               	movlb	0	; () banked
  6875  01067A  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6876  01067C  0100               	movlb	0	; () banked
  6877  01067E  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6878  010680  0E00               	movlw	0
  6879  010682  0100               	movlb	0	; () banked
  6880  010684  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6881  010686  0100               	movlb	0	; () banked
  6882  010688  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6883  01068A  0E05               	movlw	5
  6884  01068C  0100               	movlb	0	; () banked
  6885  01068E  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6886  010690  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6887  010694  0100               	movlb	0	; () banked
  6888  010696  6FC3               	movwf	??_Port_Set& (0+255),b
  6889  010698  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6890  01069A  0E0A               	movlw	10
  6891  01069C                     u6935:
  6892  01069C  90D8               	bcf	status,0,c
  6893  01069E  0100               	movlb	0	; () banked
  6894  0106A0  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6895  0106A2  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6896  0106A4  2EE8               	decfsz	wreg,f,c
  6897  0106A6  D7FA               	goto	u6935
  6898  0106A8  0100               	movlb	0	; () banked
  6899  0106AA  51C3               	movf	??_Port_Set& (0+255),w,b
  6900  0106AC  0100               	movlb	0	; () banked
  6901  0106AE  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6902  0106B0  0100               	movlb	0	; () banked
  6903  0106B2  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6904  0106B4  0100               	movlb	0	; () banked
  6905  0106B6  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6909  0106B8  0E08               	movlw	8
  6910  0106BA  0100               	movlb	0	; () banked
  6911  0106BC  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6912  0106BE  0100               	movlb	0	; () banked
  6913  0106C0  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6914  0106C2  0E00               	movlw	0
  6915  0106C4  0100               	movlb	0	; () banked
  6916  0106C6  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6917  0106C8  0100               	movlb	0	; () banked
  6918  0106CA  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6919  0106CC  0E06               	movlw	6
  6920  0106CE  0100               	movlb	0	; () banked
  6921  0106D0  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6922  0106D2  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6923  0106D6  0100               	movlb	0	; () banked
  6924  0106D8  6FC3               	movwf	??_Port_Set& (0+255),b
  6925  0106DA  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6926  0106DC  0E0C               	movlw	12
  6927  0106DE                     u6945:
  6928  0106DE  90D8               	bcf	status,0,c
  6929  0106E0  0100               	movlb	0	; () banked
  6930  0106E2  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6931  0106E4  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6932  0106E6  2EE8               	decfsz	wreg,f,c
  6933  0106E8  D7FA               	goto	u6945
  6934  0106EA  0100               	movlb	0	; () banked
  6935  0106EC  51C3               	movf	??_Port_Set& (0+255),w,b
  6936  0106EE  0100               	movlb	0	; () banked
  6937  0106F0  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6938  0106F2  0100               	movlb	0	; () banked
  6939  0106F4  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6940  0106F6  0100               	movlb	0	; () banked
  6941  0106F8  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6945  0106FA  0E08               	movlw	8
  6946  0106FC  0100               	movlb	0	; () banked
  6947  0106FE  25C0               	addwf	Port_Set@pInput& (0+255),w,b
  6948  010700  0100               	movlb	0	; () banked
  6949  010702  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
  6950  010704  0E00               	movlw	0
  6951  010706  0100               	movlb	0	; () banked
  6952  010708  21C1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6953  01070A  0100               	movlb	0	; () banked
  6954  01070C  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6955  01070E  0E07               	movlw	7
  6956  010710  0100               	movlb	0	; () banked
  6957  010712  6FBF               	movwf	Word_GetPair@pPair& (0+255),b
  6958  010714  EC2B  F0A0         	call	_Word_GetPair	;wreg free
  6959  010718  0100               	movlb	0	; () banked
  6960  01071A  6FC3               	movwf	??_Port_Set& (0+255),b
  6961  01071C  6BC4               	clrf	(??_Port_Set+1)& (0+255),b
  6962  01071E  0E0E               	movlw	14
  6963  010720                     u6955:
  6964  010720  90D8               	bcf	status,0,c
  6965  010722  0100               	movlb	0	; () banked
  6966  010724  37C3               	rlcf	??_Port_Set& (0+255),f,b
  6967  010726  37C4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6968  010728  2EE8               	decfsz	wreg,f,c
  6969  01072A  D7FA               	goto	u6955
  6970  01072C  0100               	movlb	0	; () banked
  6971  01072E  51C3               	movf	??_Port_Set& (0+255),w,b
  6972  010730  0100               	movlb	0	; () banked
  6973  010732  13D5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6974  010734  0100               	movlb	0	; () banked
  6975  010736  51C4               	movf	(??_Port_Set+1)& (0+255),w,b
  6976  010738  0100               	movlb	0	; () banked
  6977  01073A  13D6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6978                           
  6979                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6980  01073C  0100               	movlb	0	; () banked
  6981  01073E  51D5               	movf	Port_Set@TypeActual& (0+255),w,b
  6982  010740  0100               	movlb	0	; () banked
  6983  010742  19D3               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6984  010744  E148               	bnz	l528
  6985  010746  0100               	movlb	0	; () banked
  6986  010748  51D6               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6987  01074A  0100               	movlb	0	; () banked
  6988  01074C  19D4               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6989  01074E  A4D8               	btfss	status,2,c
  6990  010750  0012               	return	
  6991  010752  D032               	goto	l10583
  6992  010754                     l10573:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6996  010754  0100               	movlb	0	; () banked
  6997  010756  EE20 F002          	lfsr	2,2
  6998  01075A  51C0               	movf	Port_Set@pInput& (0+255),w,b
  6999  01075C  26D9               	addwf	fsr2l,f,c
  7000  01075E  51C1               	movf	(Port_Set@pInput+1)& (0+255),w,b
  7001  010760  22DA               	addwfc	fsr2h,f,c
  7002  010762  CFDE F0B1          	movff	postinc2,Byte_SetByte@pInput
  7003  010766  CFDD F0B2          	movff	postdec2,Byte_SetByte@pInput+1
  7004  01076A  C0C2  F0B3         	movff	Port_Set@pValue,Byte_SetByte@pValue
  7005  01076E  EC66  F0A3         	call	_Byte_SetByte	;wreg free
  7006                           
  7007                           ;Port.c: 594: break;
  7008  010772  0012               	return	
  7009  010774                     l10575:
  7010                           
  7011                           ;Port.c: 597: pValue = ~pValue;
  7012  010774  0100               	movlb	0	; () banked
  7013  010776  1FC2               	comf	Port_Set@pValue& (0+255),f,b
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  7017  010778  0100               	movlb	0	; () banked
  7018  01077A  EE20 F002          	lfsr	2,2
  7019  01077E  51C0               	movf	Port_Set@pInput& (0+255),w,b
  7020  010780  26D9               	addwf	fsr2l,f,c
  7021  010782  51C1               	movf	(Port_Set@pInput+1)& (0+255),w,b
  7022  010784  22DA               	addwfc	fsr2h,f,c
  7023  010786  CFDE F0B1          	movff	postinc2,Byte_SetByte@pInput
  7024  01078A  CFDD F0B2          	movff	postdec2,Byte_SetByte@pInput+1
  7025  01078E  C0C2  F0B3         	movff	Port_Set@pValue,Byte_SetByte@pValue
  7026  010792  EC66  F0A3         	call	_Byte_SetByte	;wreg free
  7027                           
  7028                           ;Port.c: 599: break;
  7029  010796  0012               	return	
  7030  010798                     l10579:
  7031                           
  7032                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  7033  010798  0100               	movlb	0	; () banked
  7034  01079A  EE20 F004          	lfsr	2,4
  7035  01079E  51C0               	movf	Port_Set@pInput& (0+255),w,b
  7036  0107A0  26D9               	addwf	fsr2l,f,c
  7037  0107A2  51C1               	movf	(Port_Set@pInput+1)& (0+255),w,b
  7038  0107A4  22DA               	addwfc	fsr2h,f,c
  7039  0107A6  CFDE F0B1          	movff	postinc2,Byte_SetByte@pInput
  7040  0107AA  CFDD F0B2          	movff	postdec2,Byte_SetByte@pInput+1
  7041  0107AE  C0C2  F0B3         	movff	Port_Set@pValue,Byte_SetByte@pValue
  7042  0107B2  EC66  F0A3         	call	_Byte_SetByte	;wreg free
  7043                           
  7044                           ;Port.c: 606: }
  7045                           
  7046                           ;Port.c: 605: break;
  7047                           
  7048                           ;Port.c: 604: default:
  7049                           
  7050                           ;Port.c: 603: break;
  7051  0107B6  0012               	return	
  7052  0107B8                     l10583:
  7053  0107B8  0100               	movlb	0	; () banked
  7054  0107BA  51D7               	movf	Port_Set@Type& (0+255),w,b
  7055                           
  7056                           ; Switch size 1, requested type "space"
  7057                           ; Number of cases is 4, Range of values is 0 to 3
  7058                           ; switch strategies available:
  7059                           ; Name         Instructions Cycles
  7060                           ; simple_byte           13     7 (average)
  7061                           ;	Chosen strategy is simple_byte
  7062  0107BC  0A00               	xorlw	0	; case 0
  7063  0107BE  B4D8               	btfsc	status,2,c
  7064  0107C0  0012               	return	
  7065  0107C2  0A01               	xorlw	1	; case 1
  7066  0107C4  B4D8               	btfsc	status,2,c
  7067  0107C6  D7C6               	goto	l10573
  7068  0107C8  0A03               	xorlw	3	; case 2
  7069  0107CA  B4D8               	btfsc	status,2,c
  7070  0107CC  D7D3               	goto	l10575
  7071  0107CE  0A01               	xorlw	1	; case 3
  7072  0107D0  A4D8               	btfss	status,2,c
  7073                           
  7074                           ; BSR set to: 0
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;Port.c: 607: }
  7078  0107D2  0012               	return	
  7079  0107D4  D7E1               	goto	l10579
  7080  0107D6                     l528:
  7081  0107D6  0012               	return		;funcret
  7082  0107D8                     __end_of_Port_Set:
  7083                           	opt stack 0
  7084                           tosu	equ	0xFFF
  7085                           tosh	equ	0xFFE
  7086                           tosl	equ	0xFFD
  7087                           pclath	equ	0xFFA
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           postdec1	equ	0xFE5
  7098                           plusw1	equ	0xFE3
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           plusw2	equ	0xFDB
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _Byte_SetByte *****************
  7110 ;; Defined at:
  7111 ;;		line 110 in file "Library/Types.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  7114 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  7115 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  7116 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  7117 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  7118 ;;		 -> NULL(0), 
  7119 ;;  pValue          1    2[BANK0 ] unsigned char 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		fsr2l, fsr2h
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        3 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    7
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_Port_Set
  7142 ;;		_I2C_Init
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text24
  7147  0146CC                     __ptext24:
  7148                           	opt stack 0
  7149  0146CC                     _Byte_SetByte:
  7150                           	opt stack 20
  7151                           
  7152                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  7153                           
  7154                           ;incstack = 0
  7155  0146CC  C0B1  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  7156  0146D0  C0B2  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  7157  0146D4  C0B3  FFDF         	movff	Byte_SetByte@pValue,indf2
  7158  0146D8  0012               	return		;funcret
  7159  0146DA                     __end_of_Byte_SetByte:
  7160                           	opt stack 0
  7161                           tosu	equ	0xFFF
  7162                           tosh	equ	0xFFE
  7163                           tosl	equ	0xFFD
  7164                           pclath	equ	0xFFA
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodh	equ	0xFF4
  7170                           prodl	equ	0xFF3
  7171                           intcon	equ	0xFF2
  7172                           postinc0	equ	0xFEE
  7173                           wreg	equ	0xFE8
  7174                           postdec1	equ	0xFE5
  7175                           plusw1	equ	0xFE3
  7176                           fsr1h	equ	0xFE2
  7177                           fsr1l	equ	0xFE1
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           postdec2	equ	0xFDD
  7181                           plusw2	equ	0xFDB
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function _GetPortTRIS *****************
  7187 ;; Defined at:
  7188 ;;		line 67 in file "Library/Port.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  pInput          1    wreg     enum E6786
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  pInput          1    2[BANK0 ] enum E6786
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  2    0[BANK0 ] PTR struct Byte
  7195 ;; Registers used:
  7196 ;;		wreg, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;Total ram usage:        3 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    7
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_Port_Init
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text25
  7217  012CDC                     __ptext25:
  7218                           	opt stack 0
  7219  012CDC                     _GetPortTRIS:
  7220                           	opt stack 21
  7221                           
  7222                           ;incstack = 0
  7223                           ;GetPortTRIS@pInput stored from wreg
  7224  012CDC  0100               	movlb	0	; () banked
  7225  012CDE  6FB3               	movwf	GetPortTRIS@pInput& (0+255),b
  7226                           
  7227                           ;Port.c: 69: switch (pInput)
  7228  012CE0  D038               	goto	l10525
  7229  012CE2                     l10491:
  7230                           
  7231                           ;Port.c: 72: return (BytePtr)&TRISA;
  7232  012CE2  0E92               	movlw	146
  7233  012CE4  0100               	movlb	0	; () banked
  7234  012CE6  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7235  012CE8  0E0F               	movlw	15
  7236  012CEA  0100               	movlb	0	; () banked
  7237  012CEC  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7238                           
  7239                           ; BSR set to: 0
  7240  012CEE  0012               	return	
  7241  012CF0                     l10495:
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;Port.c: 74: return (BytePtr)&TRISB;
  7245  012CF0  0E93               	movlw	147
  7246  012CF2  0100               	movlb	0	; () banked
  7247  012CF4  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7248  012CF6  0E0F               	movlw	15
  7249  012CF8  0100               	movlb	0	; () banked
  7250  012CFA  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7251                           
  7252                           ; BSR set to: 0
  7253  012CFC  0012               	return	
  7254  012CFE                     l10499:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;Port.c: 76: return (BytePtr)&TRISC;
  7258  012CFE  0E94               	movlw	148
  7259  012D00  0100               	movlb	0	; () banked
  7260  012D02  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7261  012D04  0E0F               	movlw	15
  7262  012D06  0100               	movlb	0	; () banked
  7263  012D08  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7264                           
  7265                           ; BSR set to: 0
  7266  012D0A  0012               	return	
  7267  012D0C                     l10503:
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;Port.c: 78: return (BytePtr)&TRISD;
  7271  012D0C  0E95               	movlw	149
  7272  012D0E  0100               	movlb	0	; () banked
  7273  012D10  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7274  012D12  0E0F               	movlw	15
  7275  012D14  0100               	movlb	0	; () banked
  7276  012D16  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7277                           
  7278                           ; BSR set to: 0
  7279  012D18  0012               	return	
  7280  012D1A                     l10507:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;Port.c: 80: return (BytePtr)&TRISE;
  7284  012D1A  0E96               	movlw	150
  7285  012D1C  0100               	movlb	0	; () banked
  7286  012D1E  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7287  012D20  0E0F               	movlw	15
  7288  012D22  0100               	movlb	0	; () banked
  7289  012D24  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7290                           
  7291                           ; BSR set to: 0
  7292  012D26  0012               	return	
  7293  012D28                     l10511:
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;Port.c: 82: return (BytePtr)&TRISF;
  7297  012D28  0E97               	movlw	151
  7298  012D2A  0100               	movlb	0	; () banked
  7299  012D2C  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7300  012D2E  0E0F               	movlw	15
  7301  012D30  0100               	movlb	0	; () banked
  7302  012D32  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7303                           
  7304                           ; BSR set to: 0
  7305  012D34  0012               	return	
  7306  012D36                     l10515:
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;Port.c: 84: return (BytePtr)&TRISG;
  7310  012D36  0E98               	movlw	152
  7311  012D38  0100               	movlb	0	; () banked
  7312  012D3A  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7313  012D3C  0E0F               	movlw	15
  7314  012D3E  0100               	movlb	0	; () banked
  7315  012D40  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7316                           
  7317                           ; BSR set to: 0
  7318  012D42  0012               	return	
  7319  012D44                     l10519:
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;Port.c: 86: return (void*)0;
  7323  012D44  0E00               	movlw	0
  7324  012D46  0100               	movlb	0	; () banked
  7325  012D48  6FB1               	movwf	?_GetPortTRIS& (0+255),b
  7326  012D4A  0E00               	movlw	0
  7327  012D4C  0100               	movlb	0	; () banked
  7328  012D4E  6FB2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;Port.c: 87: }
  7332                           
  7333                           ; BSR set to: 0
  7334  012D50  0012               	return	
  7335  012D52                     l10525:
  7336  012D52  0100               	movlb	0	; () banked
  7337  012D54  51B3               	movf	GetPortTRIS@pInput& (0+255),w,b
  7338                           
  7339                           ; Switch size 1, requested type "space"
  7340                           ; Number of cases is 7, Range of values is 0 to 6
  7341                           ; switch strategies available:
  7342                           ; Name         Instructions Cycles
  7343                           ; simple_byte           22    12 (average)
  7344                           ;	Chosen strategy is simple_byte
  7345  012D56  0A00               	xorlw	0	; case 0
  7346  012D58  B4D8               	btfsc	status,2,c
  7347  012D5A  D7C3               	goto	l10491
  7348  012D5C  0A01               	xorlw	1	; case 1
  7349  012D5E  B4D8               	btfsc	status,2,c
  7350  012D60  D7C7               	goto	l10495
  7351  012D62  0A03               	xorlw	3	; case 2
  7352  012D64  B4D8               	btfsc	status,2,c
  7353  012D66  D7CB               	goto	l10499
  7354  012D68  0A01               	xorlw	1	; case 3
  7355  012D6A  B4D8               	btfsc	status,2,c
  7356  012D6C  D7CF               	goto	l10503
  7357  012D6E  0A07               	xorlw	7	; case 4
  7358  012D70  B4D8               	btfsc	status,2,c
  7359  012D72  D7D3               	goto	l10507
  7360  012D74  0A01               	xorlw	1	; case 5
  7361  012D76  B4D8               	btfsc	status,2,c
  7362  012D78  D7D7               	goto	l10511
  7363  012D7A  0A03               	xorlw	3	; case 6
  7364  012D7C  B4D8               	btfsc	status,2,c
  7365  012D7E  D7DB               	goto	l10515
  7366  012D80  D7E1               	goto	l10519
  7367  012D82                     __end_of_GetPortTRIS:
  7368                           	opt stack 0
  7369                           tosu	equ	0xFFF
  7370                           tosh	equ	0xFFE
  7371                           tosl	equ	0xFFD
  7372                           pclath	equ	0xFFA
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           intcon	equ	0xFF2
  7380                           postinc0	equ	0xFEE
  7381                           wreg	equ	0xFE8
  7382                           postdec1	equ	0xFE5
  7383                           plusw1	equ	0xFE3
  7384                           fsr1h	equ	0xFE2
  7385                           fsr1l	equ	0xFE1
  7386                           indf2	equ	0xFDF
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           plusw2	equ	0xFDB
  7390                           fsr2h	equ	0xFDA
  7391                           fsr2l	equ	0xFD9
  7392                           status	equ	0xFD8
  7393                           
  7394 ;; *************** function _GetPortProperties *****************
  7395 ;; Defined at:
  7396 ;;		line 21 in file "Library/Port.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;  pInput          1    wreg     enum E6786
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  pInput          1    2[BANK0 ] enum E6786
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7403 ;; Registers used:
  7404 ;;		wreg, status,2, status,0
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;Total ram usage:        3 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    7
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_Port_Init
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           	psect	text26
  7425  012D82                     __ptext26:
  7426                           	opt stack 0
  7427  012D82                     _GetPortProperties:
  7428                           	opt stack 21
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;incstack = 0
  7432                           ;GetPortProperties@pInput stored from wreg
  7433  012D82  0100               	movlb	0	; () banked
  7434  012D84  6FB3               	movwf	GetPortProperties@pInput& (0+255),b
  7435                           
  7436                           ;Port.c: 23: switch (pInput)
  7437  012D86  D038               	goto	l10449
  7438  012D88                     l10415:
  7439                           
  7440                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7441  012D88  0EE7               	movlw	low _PortA_Property
  7442  012D8A  0100               	movlb	0	; () banked
  7443  012D8C  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7444  012D8E  0EFF               	movlw	high _PortA_Property
  7445  012D90  0100               	movlb	0	; () banked
  7446  012D92  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7447                           
  7448                           ; BSR set to: 0
  7449  012D94  0012               	return	
  7450  012D96                     l10419:
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7454  012D96  0EE5               	movlw	low _PortB_Property
  7455  012D98  0100               	movlb	0	; () banked
  7456  012D9A  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7457  012D9C  0EFF               	movlw	high _PortB_Property
  7458  012D9E  0100               	movlb	0	; () banked
  7459  012DA0  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7460                           
  7461                           ; BSR set to: 0
  7462  012DA2  0012               	return	
  7463  012DA4                     l10423:
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7467  012DA4  0EE3               	movlw	low _PortC_Property
  7468  012DA6  0100               	movlb	0	; () banked
  7469  012DA8  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7470  012DAA  0EFF               	movlw	high _PortC_Property
  7471  012DAC  0100               	movlb	0	; () banked
  7472  012DAE  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7473                           
  7474                           ; BSR set to: 0
  7475  012DB0  0012               	return	
  7476  012DB2                     l10427:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7480  012DB2  0EE1               	movlw	low _PortD_Property
  7481  012DB4  0100               	movlb	0	; () banked
  7482  012DB6  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7483  012DB8  0EFF               	movlw	high _PortD_Property
  7484  012DBA  0100               	movlb	0	; () banked
  7485  012DBC  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7486                           
  7487                           ; BSR set to: 0
  7488  012DBE  0012               	return	
  7489  012DC0                     l10431:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7493  012DC0  0EDF               	movlw	low _PortE_Property
  7494  012DC2  0100               	movlb	0	; () banked
  7495  012DC4  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7496  012DC6  0EFF               	movlw	high _PortE_Property
  7497  012DC8  0100               	movlb	0	; () banked
  7498  012DCA  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7499                           
  7500                           ; BSR set to: 0
  7501  012DCC  0012               	return	
  7502  012DCE                     l10435:
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7506  012DCE  0EDD               	movlw	low _PortF_Property
  7507  012DD0  0100               	movlb	0	; () banked
  7508  012DD2  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7509  012DD4  0EFF               	movlw	high _PortF_Property
  7510  012DD6  0100               	movlb	0	; () banked
  7511  012DD8  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7512                           
  7513                           ; BSR set to: 0
  7514  012DDA  0012               	return	
  7515  012DDC                     l10439:
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7519  012DDC  0EDB               	movlw	low _PortG_Property
  7520  012DDE  0100               	movlb	0	; () banked
  7521  012DE0  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7522  012DE2  0EFF               	movlw	high _PortG_Property
  7523  012DE4  0100               	movlb	0	; () banked
  7524  012DE6  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7525                           
  7526                           ; BSR set to: 0
  7527  012DE8  0012               	return	
  7528  012DEA                     l10443:
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;Port.c: 40: return (void*)0;
  7532  012DEA  0E00               	movlw	0
  7533  012DEC  0100               	movlb	0	; () banked
  7534  012DEE  6FB1               	movwf	?_GetPortProperties& (0+255),b
  7535  012DF0  0E00               	movlw	0
  7536  012DF2  0100               	movlb	0	; () banked
  7537  012DF4  6FB2               	movwf	(?_GetPortProperties+1)& (0+255),b
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;Port.c: 41: }
  7541                           
  7542                           ; BSR set to: 0
  7543  012DF6  0012               	return	
  7544  012DF8                     l10449:
  7545  012DF8  0100               	movlb	0	; () banked
  7546  012DFA  51B3               	movf	GetPortProperties@pInput& (0+255),w,b
  7547                           
  7548                           ; Switch size 1, requested type "space"
  7549                           ; Number of cases is 7, Range of values is 0 to 6
  7550                           ; switch strategies available:
  7551                           ; Name         Instructions Cycles
  7552                           ; simple_byte           22    12 (average)
  7553                           ;	Chosen strategy is simple_byte
  7554  012DFC  0A00               	xorlw	0	; case 0
  7555  012DFE  B4D8               	btfsc	status,2,c
  7556  012E00  D7C3               	goto	l10415
  7557  012E02  0A01               	xorlw	1	; case 1
  7558  012E04  B4D8               	btfsc	status,2,c
  7559  012E06  D7C7               	goto	l10419
  7560  012E08  0A03               	xorlw	3	; case 2
  7561  012E0A  B4D8               	btfsc	status,2,c
  7562  012E0C  D7CB               	goto	l10423
  7563  012E0E  0A01               	xorlw	1	; case 3
  7564  012E10  B4D8               	btfsc	status,2,c
  7565  012E12  D7CF               	goto	l10427
  7566  012E14  0A07               	xorlw	7	; case 4
  7567  012E16  B4D8               	btfsc	status,2,c
  7568  012E18  D7D3               	goto	l10431
  7569  012E1A  0A01               	xorlw	1	; case 5
  7570  012E1C  B4D8               	btfsc	status,2,c
  7571  012E1E  D7D7               	goto	l10435
  7572  012E20  0A03               	xorlw	3	; case 6
  7573  012E22  B4D8               	btfsc	status,2,c
  7574  012E24  D7DB               	goto	l10439
  7575  012E26  D7E1               	goto	l10443
  7576  012E28                     __end_of_GetPortProperties:
  7577                           	opt stack 0
  7578                           tosu	equ	0xFFF
  7579                           tosh	equ	0xFFE
  7580                           tosl	equ	0xFFD
  7581                           pclath	equ	0xFFA
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           postdec1	equ	0xFE5
  7592                           plusw1	equ	0xFE3
  7593                           fsr1h	equ	0xFE2
  7594                           fsr1l	equ	0xFE1
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           postdec2	equ	0xFDD
  7598                           plusw2	equ	0xFDB
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _GetPortPORT *****************
  7604 ;; Defined at:
  7605 ;;		line 44 in file "Library/Port.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  pInput          1    wreg     enum E6786
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  pInput          1    2[BANK0 ] enum E6786
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  2    0[BANK0 ] PTR struct Byte
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7619 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;Total ram usage:        3 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    7
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_Port_Init
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text27
  7634  012E28                     __ptext27:
  7635                           	opt stack 0
  7636  012E28                     _GetPortPORT:
  7637                           	opt stack 21
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;incstack = 0
  7641                           ;GetPortPORT@pInput stored from wreg
  7642  012E28  0100               	movlb	0	; () banked
  7643  012E2A  6FB3               	movwf	GetPortPORT@pInput& (0+255),b
  7644                           
  7645                           ;Port.c: 46: switch (pInput)
  7646  012E2C  D038               	goto	l10487
  7647  012E2E                     l10453:
  7648                           
  7649                           ;Port.c: 49: return (BytePtr)&PORTA;
  7650  012E2E  0E80               	movlw	128
  7651  012E30  0100               	movlb	0	; () banked
  7652  012E32  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7653  012E34  0E0F               	movlw	15
  7654  012E36  0100               	movlb	0	; () banked
  7655  012E38  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7656                           
  7657                           ; BSR set to: 0
  7658  012E3A  0012               	return	
  7659  012E3C                     l10457:
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;Port.c: 51: return (BytePtr)&PORTB;
  7663  012E3C  0E81               	movlw	129
  7664  012E3E  0100               	movlb	0	; () banked
  7665  012E40  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7666  012E42  0E0F               	movlw	15
  7667  012E44  0100               	movlb	0	; () banked
  7668  012E46  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7669                           
  7670                           ; BSR set to: 0
  7671  012E48  0012               	return	
  7672  012E4A                     l10461:
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;Port.c: 53: return (BytePtr)&PORTC;
  7676  012E4A  0E82               	movlw	130
  7677  012E4C  0100               	movlb	0	; () banked
  7678  012E4E  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7679  012E50  0E0F               	movlw	15
  7680  012E52  0100               	movlb	0	; () banked
  7681  012E54  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7682                           
  7683                           ; BSR set to: 0
  7684  012E56  0012               	return	
  7685  012E58                     l10465:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;Port.c: 55: return (BytePtr)&PORTD;
  7689  012E58  0E83               	movlw	131
  7690  012E5A  0100               	movlb	0	; () banked
  7691  012E5C  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7692  012E5E  0E0F               	movlw	15
  7693  012E60  0100               	movlb	0	; () banked
  7694  012E62  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7695                           
  7696                           ; BSR set to: 0
  7697  012E64  0012               	return	
  7698  012E66                     l10469:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;Port.c: 57: return (BytePtr)&PORTE;
  7702  012E66  0E84               	movlw	132
  7703  012E68  0100               	movlb	0	; () banked
  7704  012E6A  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7705  012E6C  0E0F               	movlw	15
  7706  012E6E  0100               	movlb	0	; () banked
  7707  012E70  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7708                           
  7709                           ; BSR set to: 0
  7710  012E72  0012               	return	
  7711  012E74                     l10473:
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;Port.c: 59: return (BytePtr)&PORTF;
  7715  012E74  0E85               	movlw	133
  7716  012E76  0100               	movlb	0	; () banked
  7717  012E78  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7718  012E7A  0E0F               	movlw	15
  7719  012E7C  0100               	movlb	0	; () banked
  7720  012E7E  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7721                           
  7722                           ; BSR set to: 0
  7723  012E80  0012               	return	
  7724  012E82                     l10477:
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;Port.c: 61: return (BytePtr)&PORTG;
  7728  012E82  0E86               	movlw	134
  7729  012E84  0100               	movlb	0	; () banked
  7730  012E86  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7731  012E88  0E0F               	movlw	15
  7732  012E8A  0100               	movlb	0	; () banked
  7733  012E8C  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7734                           
  7735                           ; BSR set to: 0
  7736  012E8E  0012               	return	
  7737  012E90                     l10481:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;Port.c: 63: return (void*)0;
  7741  012E90  0E00               	movlw	0
  7742  012E92  0100               	movlb	0	; () banked
  7743  012E94  6FB1               	movwf	?_GetPortPORT& (0+255),b
  7744  012E96  0E00               	movlw	0
  7745  012E98  0100               	movlb	0	; () banked
  7746  012E9A  6FB2               	movwf	(?_GetPortPORT+1)& (0+255),b
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;Port.c: 64: }
  7750                           
  7751                           ; BSR set to: 0
  7752  012E9C  0012               	return	
  7753  012E9E                     l10487:
  7754  012E9E  0100               	movlb	0	; () banked
  7755  012EA0  51B3               	movf	GetPortPORT@pInput& (0+255),w,b
  7756                           
  7757                           ; Switch size 1, requested type "space"
  7758                           ; Number of cases is 7, Range of values is 0 to 6
  7759                           ; switch strategies available:
  7760                           ; Name         Instructions Cycles
  7761                           ; simple_byte           22    12 (average)
  7762                           ;	Chosen strategy is simple_byte
  7763  012EA2  0A00               	xorlw	0	; case 0
  7764  012EA4  B4D8               	btfsc	status,2,c
  7765  012EA6  D7C3               	goto	l10453
  7766  012EA8  0A01               	xorlw	1	; case 1
  7767  012EAA  B4D8               	btfsc	status,2,c
  7768  012EAC  D7C7               	goto	l10457
  7769  012EAE  0A03               	xorlw	3	; case 2
  7770  012EB0  B4D8               	btfsc	status,2,c
  7771  012EB2  D7CB               	goto	l10461
  7772  012EB4  0A01               	xorlw	1	; case 3
  7773  012EB6  B4D8               	btfsc	status,2,c
  7774  012EB8  D7CF               	goto	l10465
  7775  012EBA  0A07               	xorlw	7	; case 4
  7776  012EBC  B4D8               	btfsc	status,2,c
  7777  012EBE  D7D3               	goto	l10469
  7778  012EC0  0A01               	xorlw	1	; case 5
  7779  012EC2  B4D8               	btfsc	status,2,c
  7780  012EC4  D7D7               	goto	l10473
  7781  012EC6  0A03               	xorlw	3	; case 6
  7782  012EC8  B4D8               	btfsc	status,2,c
  7783  012ECA  D7DB               	goto	l10477
  7784  012ECC  D7E1               	goto	l10481
  7785  012ECE                     __end_of_GetPortPORT:
  7786                           	opt stack 0
  7787                           tosu	equ	0xFFF
  7788                           tosh	equ	0xFFE
  7789                           tosl	equ	0xFFD
  7790                           pclath	equ	0xFFA
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           postinc0	equ	0xFEE
  7799                           wreg	equ	0xFE8
  7800                           postdec1	equ	0xFE5
  7801                           plusw1	equ	0xFE3
  7802                           fsr1h	equ	0xFE2
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           plusw2	equ	0xFDB
  7808                           fsr2h	equ	0xFDA
  7809                           fsr2l	equ	0xFD9
  7810                           status	equ	0xFD8
  7811                           
  7812 ;; *************** function _LED_Init *****************
  7813 ;; Defined at:
  7814 ;;		line 15 in file "Library/LED.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;  pLED            1    wreg     enum E6739
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;  pLED            1   45[BANK0 ] enum E6739
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  1    wreg      void 
  7821 ;; Registers used:
  7822 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;Total ram usage:        1 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:   12
  7835 ;; This function calls:
  7836 ;;		_LED_Set
  7837 ;;		_Port_SetPinType
  7838 ;; This function is called by:
  7839 ;;		_MXK_Init
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           	psect	text28
  7844  013A10                     __ptext28:
  7845                           	opt stack 0
  7846  013A10                     _LED_Init:
  7847                           	opt stack 17
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;incstack = 0
  7851                           ;LED_Init@pLED stored from wreg
  7852  013A10  0100               	movlb	0	; () banked
  7853  013A12  6FDE               	movwf	LED_Init@pLED& (0+255),b
  7854                           
  7855                           ;LED.c: 17: switch (pLED)
  7856  013A14  D01E               	goto	l10977
  7857  013A16                     l10971:
  7858                           
  7859                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7860  013A16  0E95               	movlw	low _PortC
  7861  013A18  0100               	movlb	0	; () banked
  7862  013A1A  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  7863  013A1C  0E00               	movlw	high _PortC
  7864  013A1E  0100               	movlb	0	; () banked
  7865  013A20  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7866  013A22  0E00               	movlw	0
  7867  013A24  0100               	movlb	0	; () banked
  7868  013A26  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  7869  013A28  0E03               	movlw	3
  7870  013A2A  0100               	movlb	0	; () banked
  7871  013A2C  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  7872  013A2E  EC77  F08A         	call	_Port_SetPinType	;wreg free
  7873                           
  7874                           ;LED.c: 21: break;
  7875  013A32  D017               	goto	l10979
  7876  013A34                     l10973:
  7877                           
  7878                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7879  013A34  0E95               	movlw	low _PortC
  7880  013A36  0100               	movlb	0	; () banked
  7881  013A38  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  7882  013A3A  0E00               	movlw	high _PortC
  7883  013A3C  0100               	movlb	0	; () banked
  7884  013A3E  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7885  013A40  0E01               	movlw	1
  7886  013A42  0100               	movlb	0	; () banked
  7887  013A44  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  7888  013A46  0E03               	movlw	3
  7889  013A48  0100               	movlb	0	; () banked
  7890  013A4A  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  7891  013A4C  EC77  F08A         	call	_Port_SetPinType	;wreg free
  7892                           
  7893                           ;LED.c: 25: }
  7894                           
  7895                           ;LED.c: 24: break;
  7896  013A50  D008               	goto	l10979
  7897  013A52                     l10977:
  7898  013A52  0100               	movlb	0	; () banked
  7899  013A54  51DE               	movf	LED_Init@pLED& (0+255),w,b
  7900                           
  7901                           ; Switch size 1, requested type "space"
  7902                           ; Number of cases is 2, Range of values is 0 to 1
  7903                           ; switch strategies available:
  7904                           ; Name         Instructions Cycles
  7905                           ; simple_byte            7     4 (average)
  7906                           ;	Chosen strategy is simple_byte
  7907  013A56  0A00               	xorlw	0	; case 0
  7908  013A58  B4D8               	btfsc	status,2,c
  7909  013A5A  D7DD               	goto	l10971
  7910  013A5C  0A01               	xorlw	1	; case 1
  7911  013A5E  B4D8               	btfsc	status,2,c
  7912  013A60  D7E9               	goto	l10973
  7913  013A62                     l10979:
  7914                           
  7915                           ;LED.c: 26: LED_Set(pLED, 0);
  7916  013A62  0E00               	movlw	0
  7917  013A64  0100               	movlb	0	; () banked
  7918  013A66  6FC5               	movwf	LED_Set@pValue& (0+255),b
  7919  013A68  0100               	movlb	0	; () banked
  7920  013A6A  51DE               	movf	LED_Init@pLED& (0+255),w,b
  7921  013A6C  EC18  F09E         	call	_LED_Set
  7922  013A70  0012               	return		;funcret
  7923  013A72                     __end_of_LED_Init:
  7924                           	opt stack 0
  7925                           tosu	equ	0xFFF
  7926                           tosh	equ	0xFFE
  7927                           tosl	equ	0xFFD
  7928                           pclath	equ	0xFFA
  7929                           tblptru	equ	0xFF8
  7930                           tblptrh	equ	0xFF7
  7931                           tblptrl	equ	0xFF6
  7932                           tablat	equ	0xFF5
  7933                           prodh	equ	0xFF4
  7934                           prodl	equ	0xFF3
  7935                           intcon	equ	0xFF2
  7936                           postinc0	equ	0xFEE
  7937                           wreg	equ	0xFE8
  7938                           postdec1	equ	0xFE5
  7939                           plusw1	equ	0xFE3
  7940                           fsr1h	equ	0xFE2
  7941                           fsr1l	equ	0xFE1
  7942                           indf2	equ	0xFDF
  7943                           postinc2	equ	0xFDE
  7944                           postdec2	equ	0xFDD
  7945                           plusw2	equ	0xFDB
  7946                           fsr2h	equ	0xFDA
  7947                           fsr2l	equ	0xFD9
  7948                           status	equ	0xFD8
  7949                           
  7950 ;; *************** function _LED_Set *****************
  7951 ;; Defined at:
  7952 ;;		line 33 in file "Library/LED.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  pLED            1    wreg     enum E6739
  7955 ;;  pValue          1   20[BANK0 ] unsigned char 
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;  pLED            1   21[BANK0 ] enum E6739
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  1    wreg      void 
  7960 ;; Registers used:
  7961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7967 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;Total ram usage:        2 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:   11
  7974 ;; This function calls:
  7975 ;;		_Port_SetPin
  7976 ;; This function is called by:
  7977 ;;		_LED_Init
  7978 ;;		_SYSTEM_Initialize
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text29
  7983  013C30                     __ptext29:
  7984                           	opt stack 0
  7985  013C30                     _LED_Set:
  7986                           	opt stack 17
  7987                           
  7988                           ;incstack = 0
  7989                           ;LED_Set@pLED stored from wreg
  7990  013C30  0100               	movlb	0	; () banked
  7991  013C32  6FC6               	movwf	LED_Set@pLED& (0+255),b
  7992                           
  7993                           ;LED.c: 35: switch (pLED)
  7994  013C34  D01C               	goto	l10411
  7995  013C36                     l10405:
  7996                           
  7997                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7998  013C36  0E95               	movlw	low _PortC
  7999  013C38  0100               	movlb	0	; () banked
  8000  013C3A  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  8001  013C3C  0E00               	movlw	high _PortC
  8002  013C3E  0100               	movlb	0	; () banked
  8003  013C40  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8004  013C42  0E00               	movlw	0
  8005  013C44  0100               	movlb	0	; () banked
  8006  013C46  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  8007  013C48  C0C5  F0C3         	movff	LED_Set@pValue,Port_SetPin@pValue
  8008  013C4C  EC92  F093         	call	_Port_SetPin	;wreg free
  8009                           
  8010                           ;LED.c: 39: break;
  8011  013C50  0012               	return	
  8012  013C52                     l10407:
  8013                           
  8014                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  8015  013C52  0E95               	movlw	low _PortC
  8016  013C54  0100               	movlb	0	; () banked
  8017  013C56  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  8018  013C58  0E00               	movlw	high _PortC
  8019  013C5A  0100               	movlb	0	; () banked
  8020  013C5C  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8021  013C5E  0E01               	movlw	1
  8022  013C60  0100               	movlb	0	; () banked
  8023  013C62  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  8024  013C64  C0C5  F0C3         	movff	LED_Set@pValue,Port_SetPin@pValue
  8025  013C68  EC92  F093         	call	_Port_SetPin	;wreg free
  8026                           
  8027                           ;LED.c: 43: }
  8028                           
  8029                           ;LED.c: 42: break;
  8030  013C6C  0012               	return	
  8031  013C6E                     l10411:
  8032  013C6E  0100               	movlb	0	; () banked
  8033  013C70  51C6               	movf	LED_Set@pLED& (0+255),w,b
  8034                           
  8035                           ; Switch size 1, requested type "space"
  8036                           ; Number of cases is 2, Range of values is 0 to 1
  8037                           ; switch strategies available:
  8038                           ; Name         Instructions Cycles
  8039                           ; simple_byte            7     4 (average)
  8040                           ;	Chosen strategy is simple_byte
  8041  013C72  0A00               	xorlw	0	; case 0
  8042  013C74  B4D8               	btfsc	status,2,c
  8043  013C76  D7DF               	goto	l10405
  8044  013C78  0A01               	xorlw	1	; case 1
  8045  013C7A  A4D8               	btfss	status,2,c
  8046  013C7C  0012               	return	
  8047  013C7E  D7E9               	goto	l10407
  8048  013C80                     __end_of_LED_Set:
  8049                           	opt stack 0
  8050                           tosu	equ	0xFFF
  8051                           tosh	equ	0xFFE
  8052                           tosl	equ	0xFFD
  8053                           pclath	equ	0xFFA
  8054                           tblptru	equ	0xFF8
  8055                           tblptrh	equ	0xFF7
  8056                           tblptrl	equ	0xFF6
  8057                           tablat	equ	0xFF5
  8058                           prodh	equ	0xFF4
  8059                           prodl	equ	0xFF3
  8060                           intcon	equ	0xFF2
  8061                           postinc0	equ	0xFEE
  8062                           wreg	equ	0xFE8
  8063                           postdec1	equ	0xFE5
  8064                           plusw1	equ	0xFE3
  8065                           fsr1h	equ	0xFE2
  8066                           fsr1l	equ	0xFE1
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           plusw2	equ	0xFDB
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function _MXK_Dequeue *****************
  8076 ;; Defined at:
  8077 ;;		line 153 in file "Library/MXK.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;		None
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;Total ram usage:        0 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:   12
  8098 ;; This function calls:
  8099 ;;		Absolute function
  8100 ;;		_Motor_Step
  8101 ;; This function is called by:
  8102 ;;		_main
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text30
  8107  014218                     __ptext30:
  8108                           	opt stack 0
  8109  014218                     _MXK_Dequeue:
  8110                           	opt stack 18
  8111                           
  8112                           ;MXK.c: 155: if (lQueue)
  8113                           
  8114                           ;incstack = 0
  8115  014218  5025               	movf	_lQueue,w,c	;volatile
  8116  01421A  1026               	iorwf	_lQueue+1,w,c	;volatile
  8117  01421C  1027               	iorwf	_lQueue+2,w,c	;volatile
  8118  01421E  B4D8               	btfsc	status,2,c
  8119  014220  D00C               	goto	l12159
  8120                           
  8121                           ;MXK.c: 156: lQueue();
  8122  014222  D801               	call	u8848
  8123  014224  D00A               	goto	l12159
  8124  014226                     u8848:
  8125  014226  0005               	push	
  8126  014228  6EFA               	movwf	pclath,c
  8127  01422A  5025               	movf	_lQueue,w,c	;volatile
  8128  01422C  6EFD               	movwf	tosl,c
  8129  01422E  5026               	movf	_lQueue+1,w,c	;volatile
  8130  014230  6EFE               	movwf	tosh,c
  8131  014232  5027               	movf	_lQueue+2,w,c	;volatile
  8132  014234  6EFF               	movwf	tosu,c
  8133  014236  50FA               	movf	pclath,w,c
  8134  014238  0012               	return		;indir
  8135  01423A                     l12159:
  8136                           
  8137                           ;MXK.c: 157: lQueue = 0;
  8138  01423A  0E00               	movlw	0
  8139  01423C  6E25               	movwf	_lQueue,c	;volatile
  8140  01423E  0E00               	movlw	0
  8141  014240  6E26               	movwf	_lQueue+1,c	;volatile
  8142  014242  0E00               	movlw	0
  8143  014244  6E27               	movwf	_lQueue+2,c	;volatile
  8144  014246  0012               	return		;funcret
  8145  014248                     __end_of_MXK_Dequeue:
  8146                           	opt stack 0
  8147                           tosu	equ	0xFFF
  8148                           tosh	equ	0xFFE
  8149                           tosl	equ	0xFFD
  8150                           pclath	equ	0xFFA
  8151                           tblptru	equ	0xFF8
  8152                           tblptrh	equ	0xFF7
  8153                           tblptrl	equ	0xFF6
  8154                           tablat	equ	0xFF5
  8155                           prodh	equ	0xFF4
  8156                           prodl	equ	0xFF3
  8157                           intcon	equ	0xFF2
  8158                           postinc0	equ	0xFEE
  8159                           wreg	equ	0xFE8
  8160                           postdec1	equ	0xFE5
  8161                           plusw1	equ	0xFE3
  8162                           fsr1h	equ	0xFE2
  8163                           fsr1l	equ	0xFE1
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           postdec2	equ	0xFDD
  8167                           plusw2	equ	0xFDB
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function _Motor_Step *****************
  8173 ;; Defined at:
  8174 ;;		line 75 in file "Library/Motor.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8191 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;Total ram usage:        2 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:   11
  8195 ;; This function calls:
  8196 ;;		_MXK_Queue
  8197 ;;		_MXK_Release
  8198 ;;		_MXK_SwitchTo
  8199 ;;		_Port_SetPin
  8200 ;;		_Timer0_Restart
  8201 ;;		_Timer0_Stop
  8202 ;; This function is called by:
  8203 ;;		_Motor_Init
  8204 ;;		_Timer0_ISR
  8205 ;;		_MXK_Dequeue
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text31
  8210  0120C4                     __ptext31:
  8211                           	opt stack 0
  8212  0120C4                     _Motor_Step:
  8213                           	opt stack 0
  8214                           
  8215                           ;Skip over the trampoline to the duplicate function for level 2
  8216  0120C4  B249               	btfsc	btemp,1,c
  8217  0120C6  EFF4  F090         	goto	i2_Motor_Step
  8218  0120CA                     _Motor_Step$intlevel0:
  8219                           	opt stack 18
  8220                           
  8221                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  8222                           
  8223                           ;incstack = 0
  8224  0120CA  EE20 F004          	lfsr	2,4
  8225  0120CE  502A               	movf	_lMotor,w,c
  8226  0120D0  26D9               	addwf	fsr2l,f,c
  8227  0120D2  502B               	movf	_lMotor+1,w,c
  8228  0120D4  22DA               	addwfc	fsr2h,f,c
  8229  0120D6  50DF               	movf	indf2,w,c
  8230  0120D8  ECAC  F09F         	call	_MXK_SwitchTo
  8231  0120DC  0900               	iorlw	0
  8232  0120DE  B4D8               	btfsc	status,2,c
  8233  0120E0  D07A               	goto	l11151
  8234                           
  8235                           ;Motor.c: 78: {
  8236                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  8237  0120E2  C02A  FFD9         	movff	_lMotor,fsr2l
  8238  0120E6  C02B  FFDA         	movff	_lMotor+1,fsr2h
  8239  0120EA  50DE               	movf	postinc2,w,c
  8240  0120EC  10DE               	iorwf	postinc2,w,c
  8241  0120EE  B4D8               	btfsc	status,2,c
  8242  0120F0  D06D               	goto	l11145
  8243                           
  8244                           ;Motor.c: 80: {
  8245                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  8246  0120F2  C02A  FFD9         	movff	_lMotor,fsr2l
  8247  0120F6  C02B  FFDA         	movff	_lMotor+1,fsr2h
  8248  0120FA  0E01               	movlw	1
  8249  0120FC  BEDB               	btfsc	plusw2,7,c
  8250  0120FE  D026               	goto	l11129
  8251  012100  0E01               	movlw	1
  8252  012102  50DB               	movf	plusw2,w,c
  8253  012104  E103               	bnz	u7500
  8254  012106  04DE               	decf	postinc2,w,c
  8255  012108  A0D8               	btfss	status,0,c
  8256  01210A  D020               	goto	l11129
  8257  01210C                     u7500:
  8258                           
  8259                           ;Motor.c: 83: {
  8260                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  8261  01210C  C02A  FFD9         	movff	_lMotor,fsr2l
  8262  012110  C02B  FFDA         	movff	_lMotor+1,fsr2h
  8263  012114  28DE               	incf	postinc2,w,c
  8264  012116  E104               	bnz	u7510
  8265  012118  0E7F               	movlw	127
  8266  01211A  18DE               	xorwf	postinc2,w,c
  8267  01211C  B4D8               	btfsc	status,2,c
  8268  01211E  D007               	goto	l11127
  8269  012120                     u7510:
  8270                           
  8271                           ;Motor.c: 85: lMotor->mDelta --;
  8272  012120  C02A  FFD9         	movff	_lMotor,fsr2l
  8273  012124  C02B  FFDA         	movff	_lMotor+1,fsr2h
  8274  012128  06DE               	decf	postinc2,f,c
  8275  01212A  0E00               	movlw	0
  8276  01212C  5ADD               	subwfb	postdec2,f,c
  8277  01212E                     l11127:
  8278                           
  8279                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  8280  01212E  0E81               	movlw	low _PortE
  8281  012130  0100               	movlb	0	; () banked
  8282  012132  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  8283  012134  0E00               	movlw	high _PortE
  8284  012136  0100               	movlb	0	; () banked
  8285  012138  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8286  01213A  0E00               	movlw	0
  8287  01213C  0100               	movlb	0	; () banked
  8288  01213E  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  8289  012140  0E01               	movlw	1
  8290  012142  0100               	movlb	0	; () banked
  8291  012144  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  8292  012146  EC92  F093         	call	_Port_SetPin	;wreg free
  8293                           
  8294                           ;Motor.c: 88: }
  8295  01214A  D01F               	goto	l11135
  8296  01214C                     l11129:
  8297                           
  8298                           ;Motor.c: 89: else
  8299                           ;Motor.c: 90: {
  8300                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  8301  01214C  C02A  FFD9         	movff	_lMotor,fsr2l
  8302  012150  C02B  FFDA         	movff	_lMotor+1,fsr2h
  8303  012154  04DE               	decf	postinc2,w,c
  8304  012156  E104               	bnz	u7520
  8305  012158  0E80               	movlw	128
  8306  01215A  18DE               	xorwf	postinc2,w,c
  8307  01215C  B4D8               	btfsc	status,2,c
  8308  01215E  D007               	goto	l11133
  8309  012160                     u7520:
  8310                           
  8311                           ;Motor.c: 92: lMotor->mDelta ++;
  8312  012160  C02A  FFD9         	movff	_lMotor,fsr2l
  8313  012164  C02B  FFDA         	movff	_lMotor+1,fsr2h
  8314  012168  2ADE               	incf	postinc2,f,c
  8315  01216A  0E00               	movlw	0
  8316  01216C  22DD               	addwfc	postdec2,f,c
  8317  01216E                     l11133:
  8318                           
  8319                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  8320  01216E  0E81               	movlw	low _PortE
  8321  012170  0100               	movlb	0	; () banked
  8322  012172  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  8323  012174  0E00               	movlw	high _PortE
  8324  012176  0100               	movlb	0	; () banked
  8325  012178  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8326  01217A  0E00               	movlw	0
  8327  01217C  0100               	movlb	0	; () banked
  8328  01217E  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  8329  012180  0E00               	movlw	0
  8330  012182  0100               	movlb	0	; () banked
  8331  012184  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  8332  012186  EC92  F093         	call	_Port_SetPin	;wreg free
  8333  01218A                     l11135:
  8334                           
  8335                           ;Motor.c: 95: }
  8336                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  8337  01218A  0E81               	movlw	low _PortE
  8338  01218C  0100               	movlb	0	; () banked
  8339  01218E  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  8340  012190  0E00               	movlw	high _PortE
  8341  012192  0100               	movlb	0	; () banked
  8342  012194  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8343  012196  0E01               	movlw	1
  8344  012198  0100               	movlb	0	; () banked
  8345  01219A  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  8346  01219C  0E01               	movlw	1
  8347  01219E  0100               	movlb	0	; () banked
  8348  0121A0  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  8349  0121A2  EC92  F093         	call	_Port_SetPin	;wreg free
  8350                           
  8351                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  8352  0121A6  0E81               	movlw	low _PortE
  8353  0121A8  0100               	movlb	0	; () banked
  8354  0121AA  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
  8355  0121AC  0E00               	movlw	high _PortE
  8356  0121AE  0100               	movlb	0	; () banked
  8357  0121B0  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8358  0121B2  0E01               	movlw	1
  8359  0121B4  0100               	movlb	0	; () banked
  8360  0121B6  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
  8361  0121B8  0E00               	movlw	0
  8362  0121BA  0100               	movlb	0	; () banked
  8363  0121BC  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
  8364  0121BE  EC92  F093         	call	_Port_SetPin	;wreg free
  8365                           
  8366                           ;Motor.c: 101: MXK_Release();
  8367  0121C2  EC1F  F0A3         	call	_MXK_Release	;wreg free
  8368                           
  8369                           ;Motor.c: 102: Timer0_Restart();
  8370  0121C6  EC81  F0A3         	call	_Timer0_Restart	;wreg free
  8371                           
  8372                           ;Motor.c: 103: return;
  8373  0121CA  0012               	return	
  8374  0121CC                     l11145:
  8375                           
  8376                           ;Motor.c: 104: }
  8377                           ;Motor.c: 105: MXK_Release();
  8378  0121CC  EC1F  F0A3         	call	_MXK_Release	;wreg free
  8379                           
  8380                           ;Motor.c: 106: Timer0_Stop();
  8381  0121D0  ECA9  F0A3         	call	_Timer0_Stop	;wreg free
  8382                           
  8383                           ;Motor.c: 107: return;
  8384  0121D4  0012               	return	
  8385  0121D6                     l11151:
  8386                           
  8387                           ;Motor.c: 108: }
  8388                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  8389  0121D6  C06B  F0B1         	movff	_lStepFunction,MXK_Queue@pCallback
  8390  0121DA  C06C  F0B2         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  8391  0121DE  C06D  F0B3         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  8392  0121E2  EC6D  F0A3         	call	_MXK_Queue	;wreg free
  8393  0121E6  0012               	return		;funcret
  8394  0121E8                     __end_of_Motor_Step:
  8395                           	opt stack 0
  8396                           tosu	equ	0xFFF
  8397                           tosh	equ	0xFFE
  8398                           tosl	equ	0xFFD
  8399                           pclath	equ	0xFFA
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           intcon	equ	0xFF2
  8407                           postinc0	equ	0xFEE
  8408                           wreg	equ	0xFE8
  8409                           postdec1	equ	0xFE5
  8410                           plusw1	equ	0xFE3
  8411                           fsr1h	equ	0xFE2
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           plusw2	equ	0xFDB
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _Timer0_Stop *****************
  8422 ;; Defined at:
  8423 ;;		line 89 in file "Library/Timer0.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		None
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;Total ram usage:        0 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    7
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_Motor_Step
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           	psect	text32
  8452  014752                     __ptext32:
  8453                           	opt stack 0
  8454  014752                     _Timer0_Stop:
  8455                           	opt stack 21
  8456                           
  8457                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8458                           
  8459                           ;incstack = 0
  8460  014752  9AF2               	bcf	intcon,5,c	;volatile
  8461                           
  8462                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8463  014754  94F2               	bcf	intcon,2,c	;volatile
  8464  014756  0012               	return		;funcret
  8465  014758                     __end_of_Timer0_Stop:
  8466                           	opt stack 0
  8467                           tosu	equ	0xFFF
  8468                           tosh	equ	0xFFE
  8469                           tosl	equ	0xFFD
  8470                           pclath	equ	0xFFA
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           postinc0	equ	0xFEE
  8479                           wreg	equ	0xFE8
  8480                           postdec1	equ	0xFE5
  8481                           plusw1	equ	0xFE3
  8482                           fsr1h	equ	0xFE2
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           plusw2	equ	0xFDB
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _Timer0_Restart *****************
  8493 ;; Defined at:
  8494 ;;		line 83 in file "Library/Timer0.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;		None
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;		None
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  1    wreg      void 
  8501 ;; Registers used:
  8502 ;;		None
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;Total ram usage:        0 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    7
  8515 ;; This function calls:
  8516 ;;		Nothing
  8517 ;; This function is called by:
  8518 ;;		_Motor_Step
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text33
  8523  014702                     __ptext33:
  8524                           	opt stack 0
  8525  014702                     _Timer0_Restart:
  8526                           	opt stack 21
  8527                           
  8528                           ;Timer0.c: 85: TMR0 = COUNTER;
  8529                           
  8530                           ;incstack = 0
  8531  014702  C028  FFD6         	movff	_COUNTER,4054	;volatile
  8532  014706  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
  8533                           
  8534                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8535  01470A  8AF2               	bsf	intcon,5,c	;volatile
  8536  01470C  0012               	return		;funcret
  8537  01470E                     __end_of_Timer0_Restart:
  8538                           	opt stack 0
  8539                           tosu	equ	0xFFF
  8540                           tosh	equ	0xFFE
  8541                           tosl	equ	0xFFD
  8542                           pclath	equ	0xFFA
  8543                           tblptru	equ	0xFF8
  8544                           tblptrh	equ	0xFF7
  8545                           tblptrl	equ	0xFF6
  8546                           tablat	equ	0xFF5
  8547                           prodh	equ	0xFF4
  8548                           prodl	equ	0xFF3
  8549                           intcon	equ	0xFF2
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           plusw1	equ	0xFE3
  8554                           fsr1h	equ	0xFE2
  8555                           fsr1l	equ	0xFE1
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           postdec2	equ	0xFDD
  8559                           plusw2	equ	0xFDB
  8560                           fsr2h	equ	0xFDA
  8561                           fsr2l	equ	0xFD9
  8562                           status	equ	0xFD8
  8563                           
  8564 ;; *************** function _MXK_SwitchTo *****************
  8565 ;; Defined at:
  8566 ;;		line 105 in file "Library/MXK.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  pModule         1    wreg     enum E6925
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  pModule         1    7[BANK0 ] enum E6925
  8571 ;;  CUR             1    6[BANK0 ] unsigned char 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  1    wreg      unsigned char 
  8574 ;; Registers used:
  8575 ;;		wreg, status,2, status,0, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;Total ram usage:        2 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    8
  8588 ;; This function calls:
  8589 ;;		_delay_us
  8590 ;; This function is called by:
  8591 ;;		_Motor_Step
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           	psect	text34
  8596  013F58                     __ptext34:
  8597                           	opt stack 0
  8598  013F58                     _MXK_SwitchTo:
  8599                           	opt stack 20
  8600                           
  8601                           ;incstack = 0
  8602                           ;MXK_SwitchTo@pModule stored from wreg
  8603  013F58  0100               	movlb	0	; () banked
  8604  013F5A  6FB8               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8605                           
  8606                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8607  013F5C  5086               	movf	3974,w,c	;volatile
  8608  013F5E  0B0F               	andlw	15
  8609  013F60  0100               	movlb	0	; () banked
  8610  013F62  6FB7               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8614  013F64  5043               	movf	_Bus_State,w,c
  8615  013F66  A4D8               	btfss	status,2,c
  8616  013F68  D002               	goto	l10673
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;MXK.c: 110: return 0;
  8620  013F6A  0E00               	movlw	0
  8621                           
  8622                           ; BSR set to: 0
  8623  013F6C  0012               	return	
  8624  013F6E                     l10673:
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8628  013F6E  0E00               	movlw	0
  8629  013F70  6E43               	movwf	_Bus_State,c
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;MXK.c: 114: if (CUR != pModule)
  8633  013F72  0100               	movlb	0	; () banked
  8634  013F74  51B8               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8635  013F76  0100               	movlb	0	; () banked
  8636  013F78  19B7               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8637  013F7A  B4D8               	btfsc	status,2,c
  8638  013F7C  D00C               	goto	l10681
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;MXK.c: 115: {
  8642                           ;MXK.c: 116: PORTG &= ~(0xF);
  8643  013F7E  0EF0               	movlw	240
  8644  013F80  1686               	andwf	3974,f,c	;volatile
  8645                           
  8646                           ;MXK.c: 117: PORTG |= pModule;
  8647  013F82  0100               	movlb	0	; () banked
  8648  013F84  51B8               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8649  013F86  1286               	iorwf	3974,f,c	;volatile
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;MXK.c: 120: delay_us(10);
  8653  013F88  0E00               	movlw	0
  8654  013F8A  0100               	movlb	0	; () banked
  8655  013F8C  6FB2               	movwf	(delay_us@us+1)& (0+255),b
  8656  013F8E  0E0A               	movlw	10
  8657  013F90  6FB1               	movwf	delay_us@us& (0+255),b
  8658  013F92  ECEF  F09D         	call	_delay_us	;wreg free
  8659  013F96                     l10681:
  8660                           
  8661                           ;MXK.c: 121: }
  8662                           ;MXK.c: 122: return 1;
  8663  013F96  0E01               	movlw	1
  8664  013F98  0012               	return	
  8665  013F9A                     __end_of_MXK_SwitchTo:
  8666                           	opt stack 0
  8667                           tosu	equ	0xFFF
  8668                           tosh	equ	0xFFE
  8669                           tosl	equ	0xFFD
  8670                           pclath	equ	0xFFA
  8671                           tblptru	equ	0xFF8
  8672                           tblptrh	equ	0xFF7
  8673                           tblptrl	equ	0xFF6
  8674                           tablat	equ	0xFF5
  8675                           prodh	equ	0xFF4
  8676                           prodl	equ	0xFF3
  8677                           intcon	equ	0xFF2
  8678                           postinc0	equ	0xFEE
  8679                           wreg	equ	0xFE8
  8680                           postdec1	equ	0xFE5
  8681                           plusw1	equ	0xFE3
  8682                           fsr1h	equ	0xFE2
  8683                           fsr1l	equ	0xFE1
  8684                           indf2	equ	0xFDF
  8685                           postinc2	equ	0xFDE
  8686                           postdec2	equ	0xFDD
  8687                           plusw2	equ	0xFDB
  8688                           fsr2h	equ	0xFDA
  8689                           fsr2l	equ	0xFD9
  8690                           status	equ	0xFD8
  8691                           
  8692 ;; *************** function _MXK_Release *****************
  8693 ;; Defined at:
  8694 ;;		line 130 in file "Library/MXK.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      unsigned char 
  8701 ;; Registers used:
  8702 ;;		wreg, status,2, status,0
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;Total ram usage:        0 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    7
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_Motor_Step
  8719 ;;		_main
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text35
  8724  01463E                     __ptext35:
  8725                           	opt stack 0
  8726  01463E                     _MXK_Release:
  8727                           	opt stack 23
  8728                           
  8729                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8730                           
  8731                           ;incstack = 0
  8732  01463E  0E01               	movlw	1
  8733  014640  6E43               	movwf	_Bus_State,c
  8734                           
  8735                           ;MXK.c: 134: if (lQueue != 0)
  8736  014642  5025               	movf	_lQueue,w,c	;volatile
  8737  014644  1026               	iorwf	_lQueue+1,w,c	;volatile
  8738  014646  1027               	iorwf	_lQueue+2,w,c	;volatile
  8739  014648  B4D8               	btfsc	status,2,c
  8740  01464A  D002               	goto	l10693
  8741                           
  8742                           ;MXK.c: 135: return 1;
  8743  01464C  0E01               	movlw	1
  8744  01464E  0012               	return	
  8745  014650                     l10693:
  8746                           
  8747                           ;MXK.c: 137: return 0;
  8748  014650  0E00               	movlw	0
  8749  014652  0012               	return	
  8750  014654                     __end_of_MXK_Release:
  8751                           	opt stack 0
  8752                           tosu	equ	0xFFF
  8753                           tosh	equ	0xFFE
  8754                           tosl	equ	0xFFD
  8755                           pclath	equ	0xFFA
  8756                           tblptru	equ	0xFF8
  8757                           tblptrh	equ	0xFF7
  8758                           tblptrl	equ	0xFF6
  8759                           tablat	equ	0xFF5
  8760                           prodh	equ	0xFF4
  8761                           prodl	equ	0xFF3
  8762                           intcon	equ	0xFF2
  8763                           postinc0	equ	0xFEE
  8764                           wreg	equ	0xFE8
  8765                           postdec1	equ	0xFE5
  8766                           plusw1	equ	0xFE3
  8767                           fsr1h	equ	0xFE2
  8768                           fsr1l	equ	0xFE1
  8769                           indf2	equ	0xFDF
  8770                           postinc2	equ	0xFDE
  8771                           postdec2	equ	0xFDD
  8772                           plusw2	equ	0xFDB
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _MXK_Queue *****************
  8778 ;; Defined at:
  8779 ;;		line 144 in file "Library/MXK.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8782 ;;		 -> Absolute function(1), Motor_Step(1), 
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;		None
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      void 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2, status,0
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8794 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;Total ram usage:        3 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    7
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_Motor_Step
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text36
  8809  0146DA                     __ptext36:
  8810                           	opt stack 0
  8811  0146DA                     _MXK_Queue:
  8812                           	opt stack 21
  8813                           
  8814                           ;MXK.c: 146: lQueue = pCallback;
  8815                           
  8816                           ;incstack = 0
  8817  0146DA  C0B1  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8818  0146DE  C0B2  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8819  0146E2  C0B3  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8820  0146E6  0012               	return		;funcret
  8821  0146E8                     __end_of_MXK_Queue:
  8822                           	opt stack 0
  8823                           tosu	equ	0xFFF
  8824                           tosh	equ	0xFFE
  8825                           tosl	equ	0xFFD
  8826                           pclath	equ	0xFFA
  8827                           tblptru	equ	0xFF8
  8828                           tblptrh	equ	0xFF7
  8829                           tblptrl	equ	0xFF6
  8830                           tablat	equ	0xFF5
  8831                           prodh	equ	0xFF4
  8832                           prodl	equ	0xFF3
  8833                           intcon	equ	0xFF2
  8834                           postinc0	equ	0xFEE
  8835                           wreg	equ	0xFE8
  8836                           postdec1	equ	0xFE5
  8837                           plusw1	equ	0xFE3
  8838                           fsr1h	equ	0xFE2
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           postdec2	equ	0xFDD
  8843                           plusw2	equ	0xFDB
  8844                           fsr2h	equ	0xFDA
  8845                           fsr2l	equ	0xFD9
  8846                           status	equ	0xFD8
  8847                           
  8848 ;; *************** function _MXK_BlockSwitchTo *****************
  8849 ;; Defined at:
  8850 ;;		line 82 in file "Library/MXK.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  pModule         1    wreg     enum E6925
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  pModule         1    7[BANK0 ] enum E6925
  8855 ;;  CUR             1    6[BANK0 ] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      unsigned char 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;Total ram usage:        2 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    8
  8872 ;; This function calls:
  8873 ;;		_delay_us
  8874 ;; This function is called by:
  8875 ;;		_main
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text37
  8880  013FDA                     __ptext37:
  8881                           	opt stack 0
  8882  013FDA                     _MXK_BlockSwitchTo:
  8883                           	opt stack 22
  8884                           
  8885                           ;incstack = 0
  8886                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8887  013FDA  0100               	movlb	0	; () banked
  8888  013FDC  6FB8               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8889                           
  8890                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8891  013FDE  5086               	movf	3974,w,c	;volatile
  8892  013FE0  0B0F               	andlw	15
  8893  013FE2  0100               	movlb	0	; () banked
  8894  013FE4  6FB7               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8895  013FE6                     l11543:
  8896  013FE6  5043               	movf	_Bus_State,w,c
  8897  013FE8  B4D8               	btfsc	status,2,c
  8898  013FEA  D7FD               	goto	l11543
  8899                           
  8900                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8901  013FEC  0E00               	movlw	0
  8902  013FEE  6E43               	movwf	_Bus_State,c
  8903                           
  8904                           ;MXK.c: 90: if (CUR != pModule)
  8905  013FF0  0100               	movlb	0	; () banked
  8906  013FF2  51B8               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8907  013FF4  0100               	movlb	0	; () banked
  8908  013FF6  19B7               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8909  013FF8  B4D8               	btfsc	status,2,c
  8910  013FFA  D00C               	goto	l11553
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;MXK.c: 91: {
  8914                           ;MXK.c: 92: PORTG &= ~(0xF);
  8915  013FFC  0EF0               	movlw	240
  8916  013FFE  1686               	andwf	3974,f,c	;volatile
  8917                           
  8918                           ;MXK.c: 93: PORTG |= pModule;
  8919  014000  0100               	movlb	0	; () banked
  8920  014002  51B8               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8921  014004  1286               	iorwf	3974,f,c	;volatile
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;MXK.c: 96: delay_us(10);
  8925  014006  0E00               	movlw	0
  8926  014008  0100               	movlb	0	; () banked
  8927  01400A  6FB2               	movwf	(delay_us@us+1)& (0+255),b
  8928  01400C  0E0A               	movlw	10
  8929  01400E  6FB1               	movwf	delay_us@us& (0+255),b
  8930  014010  ECEF  F09D         	call	_delay_us	;wreg free
  8931  014014                     l11553:
  8932                           
  8933                           ;MXK.c: 97: }
  8934                           ;MXK.c: 98: return 1;
  8935  014014  0E01               	movlw	1
  8936  014016  0012               	return	
  8937  014018                     __end_of_MXK_BlockSwitchTo:
  8938                           	opt stack 0
  8939                           tosu	equ	0xFFF
  8940                           tosh	equ	0xFFE
  8941                           tosl	equ	0xFFD
  8942                           pclath	equ	0xFFA
  8943                           tblptru	equ	0xFF8
  8944                           tblptrh	equ	0xFF7
  8945                           tblptrl	equ	0xFF6
  8946                           tablat	equ	0xFF5
  8947                           prodh	equ	0xFF4
  8948                           prodl	equ	0xFF3
  8949                           intcon	equ	0xFF2
  8950                           postinc0	equ	0xFEE
  8951                           wreg	equ	0xFE8
  8952                           postdec1	equ	0xFE5
  8953                           plusw1	equ	0xFE3
  8954                           fsr1h	equ	0xFE2
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           plusw2	equ	0xFDB
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           
  8964 ;; *************** function _delay_us *****************
  8965 ;; Defined at:
  8966 ;;		line 255 in file "Library/Types.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  us              2    0[BANK0 ] unsigned short 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  u               4    2[BANK0 ] unsigned long 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      void 
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8980 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;Total ram usage:        6 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    7
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_MXK_BlockSwitchTo
  8991 ;;		_MXK_SwitchTo
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text38
  8996  013BDE                     __ptext38:
  8997                           	opt stack 0
  8998  013BDE                     _delay_us:
  8999                           	opt stack 20
  9000                           
  9001                           ;Types.c: 256: unsigned long u;
  9002                           ;Types.c: 257: while (us--) {
  9003                           
  9004                           ;incstack = 0
  9005  013BDE  D01C               	goto	l10225
  9006  013BE0                     l10217:
  9007                           
  9008                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  9009  013BE0  0E00               	movlw	0
  9010  013BE2  0100               	movlb	0	; () banked
  9011  013BE4  6FB3               	movwf	delay_us@u& (0+255),b
  9012  013BE6  0E00               	movlw	0
  9013  013BE8  6FB4               	movwf	(delay_us@u+1)& (0+255),b
  9014  013BEA  0E00               	movlw	0
  9015  013BEC  6FB5               	movwf	(delay_us@u+2)& (0+255),b
  9016  013BEE  0E00               	movlw	0
  9017  013BF0  6FB6               	movwf	(delay_us@u+3)& (0+255),b
  9018  013BF2                     l10219:
  9019                           
  9020                           ; BSR set to: 0
  9021  013BF2  0100               	movlb	0	; () banked
  9022  013BF4  51B3               	movf	delay_us@u& (0+255),w,b
  9023  013BF6  0100               	movlb	0	; () banked
  9024  013BF8  11B4               	iorwf	(delay_us@u+1)& (0+255),w,b
  9025  013BFA  0100               	movlb	0	; () banked
  9026  013BFC  11B5               	iorwf	(delay_us@u+2)& (0+255),w,b
  9027  013BFE  0100               	movlb	0	; () banked
  9028  013C00  11B6               	iorwf	(delay_us@u+3)& (0+255),w,b
  9029  013C02  A4D8               	btfss	status,2,c
  9030  013C04  D009               	goto	l10225
  9031                           
  9032                           ; BSR set to: 0
  9033                           
  9034                           ; BSR set to: 0
  9035  013C06  F000               	nop		; ;# 
  9036  013C08  0E01               	movlw	1
  9037  013C0A  0100               	movlb	0	; () banked
  9038  013C0C  27B3               	addwf	delay_us@u& (0+255),f,b
  9039  013C0E  0E00               	movlw	0
  9040  013C10  23B4               	addwfc	(delay_us@u+1)& (0+255),f,b
  9041  013C12  23B5               	addwfc	(delay_us@u+2)& (0+255),f,b
  9042  013C14  23B6               	addwfc	(delay_us@u+3)& (0+255),f,b
  9043  013C16  D7ED               	goto	l10219
  9044  013C18                     l10225:
  9045  013C18  0100               	movlb	0	; () banked
  9046  013C1A  07B1               	decf	delay_us@us& (0+255),f,b
  9047  013C1C  A0D8               	btfss	status,0,c
  9048  013C1E  07B2               	decf	(delay_us@us+1)& (0+255),f,b
  9049  013C20  0100               	movlb	0	; () banked
  9050  013C22  29B1               	incf	delay_us@us& (0+255),w,b
  9051  013C24  E1DD               	bnz	l10217
  9052  013C26  0100               	movlb	0	; () banked
  9053  013C28  29B2               	incf	(delay_us@us+1)& (0+255),w,b
  9054  013C2A  B4D8               	btfsc	status,2,c
  9055  013C2C  0012               	return	
  9056  013C2E  D7D8               	goto	l10217
  9057  013C30                     __end_of_delay_us:
  9058                           	opt stack 0
  9059                           tosu	equ	0xFFF
  9060                           tosh	equ	0xFFE
  9061                           tosl	equ	0xFFD
  9062                           pclath	equ	0xFFA
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           postinc0	equ	0xFEE
  9071                           wreg	equ	0xFE8
  9072                           postdec1	equ	0xFE5
  9073                           plusw1	equ	0xFE3
  9074                           fsr1h	equ	0xFE2
  9075                           fsr1l	equ	0xFE1
  9076                           indf2	equ	0xFDF
  9077                           postinc2	equ	0xFDE
  9078                           postdec2	equ	0xFDD
  9079                           plusw2	equ	0xFDB
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function _LCD_Init *****************
  9085 ;; Defined at:
  9086 ;;		line 172 in file "Library/LCD.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;  i               2   55[BANK0 ] unsigned short 
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  1    wreg      void 
  9093 ;; Registers used:
  9094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9102 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;Total ram usage:        4 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:   15
  9107 ;; This function calls:
  9108 ;;		_Configure_GPIOs
  9109 ;;		_LCD_Fill
  9110 ;;		_LCD_Write
  9111 ;;		_Set_Rotation
  9112 ;;		_delay_ms
  9113 ;; This function is called by:
  9114 ;;		_main
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           	psect	text39
  9119  011B46                     __ptext39:
  9120                           	opt stack 0
  9121  011B46                     _LCD_Init:
  9122                           	opt stack 15
  9123                           
  9124                           ;LCD.c: 174: UINT16 i;
  9125                           ;LCD.c: 175: Configure_GPIOs();
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;incstack = 0
  9129  011B46  EC96  F09B         	call	_Configure_GPIOs	;wreg free
  9130                           
  9131                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  9132  011B4A  0E00               	movlw	0
  9133  011B4C  0100               	movlb	0	; () banked
  9134  011B4E  6FE9               	movwf	(LCD_Init@i+1)& (0+255),b
  9135  011B50  0E00               	movlw	0
  9136  011B52  6FE8               	movwf	LCD_Init@i& (0+255),b
  9137                           
  9138                           ; BSR set to: 0
  9139  011B54  0100               	movlb	0	; () banked
  9140  011B56  51E9               	movf	(LCD_Init@i+1)& (0+255),w,b
  9141  011B58  E106               	bnz	u7530
  9142  011B5A  0E59               	movlw	89
  9143  011B5C  0100               	movlb	0	; () banked
  9144  011B5E  5DE8               	subwf	LCD_Init@i& (0+255),w,b
  9145  011B60  B0D8               	btfsc	status,0,c
  9146  011B62  D08B               	goto	l11177
  9147  011B64  D001               	goto	l11161
  9148  011B66                     u7530:
  9149                           
  9150                           ; BSR set to: 0
  9151  011B66  D089               	goto	l11177
  9152  011B68                     l11161:
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;LCD.c: 178: {
  9156                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9157  011B68  90D8               	bcf	status,0,c
  9158  011B6A  0100               	movlb	0	; () banked
  9159  011B6C  35E8               	rlcf	LCD_Init@i& (0+255),w,b
  9160  011B6E  6EF6               	movwf	tblptrl,c
  9161  011B70  0100               	movlb	0	; () banked
  9162  011B72  35E9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9163  011B74  6EF7               	movwf	tblptrh,c
  9164  011B76  0E19               	movlw	low _InitList
  9165  011B78  26F6               	addwf	tblptrl,f,c
  9166  011B7A  0EFD               	movlw	high _InitList
  9167  011B7C  22F7               	addwfc	tblptrh,f,c
  9168  011B7E                     	if	1	;There are 3 active tblptr bytes
  9169  011B7E  6AF8               	clrf	tblptru,c
  9170  011B80  0E00               	movlw	low (__mediumconst shr (0+16))
  9171  011B82  22F8               	addwfc	tblptru,f,c
  9172  011B84                     	endif
  9173  011B84  0009               	tblrd		*+
  9174  011B86  0E80               	movlw	128
  9175  011B88  18F5               	xorwf	tablat,w,c
  9176  011B8A  0009               	tblrd		*+
  9177  011B8C  10F5               	iorwf	tablat,w,c
  9178  011B8E  A4D8               	btfss	status,2,c
  9179  011B90  D022               	goto	l11167
  9180                           
  9181                           ; BSR set to: 0
  9182  011B92  0100               	movlb	0	; () banked
  9183  011B94  51E9               	movf	(LCD_Init@i+1)& (0+255),w,b
  9184  011B96  E11F               	bnz	l11167
  9185  011B98  0E58               	movlw	88
  9186  011B9A  0100               	movlb	0	; () banked
  9187  011B9C  5DE8               	subwf	LCD_Init@i& (0+255),w,b
  9188  011B9E  B0D8               	btfsc	status,0,c
  9189  011BA0  D01A               	goto	l11167
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;LCD.c: 180: delay_ms(InitList[++i]);
  9193  011BA2  0100               	movlb	0	; () banked
  9194  011BA4  4BE8               	infsnz	LCD_Init@i& (0+255),f,b
  9195  011BA6  2BE9               	incf	(LCD_Init@i+1)& (0+255),f,b
  9196  011BA8  90D8               	bcf	status,0,c
  9197  011BAA  0100               	movlb	0	; () banked
  9198  011BAC  35E8               	rlcf	LCD_Init@i& (0+255),w,b
  9199  011BAE  6EF6               	movwf	tblptrl,c
  9200  011BB0  0100               	movlb	0	; () banked
  9201  011BB2  35E9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9202  011BB4  6EF7               	movwf	tblptrh,c
  9203  011BB6  0E19               	movlw	low _InitList
  9204  011BB8  26F6               	addwf	tblptrl,f,c
  9205  011BBA  0EFD               	movlw	high _InitList
  9206  011BBC  22F7               	addwfc	tblptrh,f,c
  9207  011BBE                     	if	1	;There are 3 active tblptr bytes
  9208  011BBE  6AF8               	clrf	tblptru,c
  9209  011BC0  0E00               	movlw	low (__mediumconst shr (0+16))
  9210  011BC2  22F8               	addwfc	tblptru,f,c
  9211  011BC4                     	endif
  9212  011BC4  0009               	tblrd		*+
  9213  011BC6  CFF5 F0B1          	movff	tablat,delay_ms@ms
  9214  011BCA  000A               	tblrd		*-
  9215  011BCC  CFF5 F0B2          	movff	tablat,delay_ms@ms+1
  9216  011BD0  EC3A  F09C         	call	_delay_ms	;wreg free
  9217  011BD4  D04B               	goto	l11173
  9218  011BD6                     l11167:
  9219                           
  9220                           ;LCD.c: 181: else
  9221                           ;LCD.c: 182: {
  9222                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9223  011BD6  90D8               	bcf	status,0,c
  9224  011BD8  0100               	movlb	0	; () banked
  9225  011BDA  35E8               	rlcf	LCD_Init@i& (0+255),w,b
  9226  011BDC  6EF6               	movwf	tblptrl,c
  9227  011BDE  0100               	movlb	0	; () banked
  9228  011BE0  35E9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9229  011BE2  6EF7               	movwf	tblptrh,c
  9230  011BE4  0E19               	movlw	low _InitList
  9231  011BE6  26F6               	addwf	tblptrl,f,c
  9232  011BE8  0EFD               	movlw	high _InitList
  9233  011BEA  22F7               	addwfc	tblptrh,f,c
  9234  011BEC                     	if	1	;There are 3 active tblptr bytes
  9235  011BEC  6AF8               	clrf	tblptru,c
  9236  011BEE  0E00               	movlw	low (__mediumconst shr (0+16))
  9237  011BF0  22F8               	addwfc	tblptru,f,c
  9238  011BF2                     	endif
  9239  011BF2  0009               	tblrd		*+
  9240  011BF4  0E00               	movlw	0
  9241  011BF6  5EF5               	subwf	tablat,f,c
  9242  011BF8  0009               	tblrd		*+
  9243  011BFA  0E01               	movlw	1
  9244  011BFC  5AF5               	subwfb	tablat,f,c
  9245  011BFE  A0D8               	btfss	status,0,c
  9246  011C00  D020               	goto	l11171
  9247                           
  9248                           ; BSR set to: 0
  9249  011C02  0E00               	movlw	0
  9250  011C04  0100               	movlb	0	; () banked
  9251  011C06  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9252  011C08  90D8               	bcf	status,0,c
  9253  011C0A  0100               	movlb	0	; () banked
  9254  011C0C  35E8               	rlcf	LCD_Init@i& (0+255),w,b
  9255  011C0E  6EF6               	movwf	tblptrl,c
  9256  011C10  0100               	movlb	0	; () banked
  9257  011C12  35E9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9258  011C14  6EF7               	movwf	tblptrh,c
  9259  011C16  0E19               	movlw	low _InitList
  9260  011C18  26F6               	addwf	tblptrl,f,c
  9261  011C1A  0EFD               	movlw	high _InitList
  9262  011C1C  22F7               	addwfc	tblptrh,f,c
  9263  011C1E                     	if	1	;There are 3 active tblptr bytes
  9264  011C1E  6AF8               	clrf	tblptru,c
  9265  011C20  0E00               	movlw	low (__mediumconst shr (0+16))
  9266  011C22  22F8               	addwfc	tblptru,f,c
  9267  011C24                     	endif
  9268  011C24  0009               	tblrd		*+
  9269  011C26  CFF5 F0E6          	movff	tablat,??_LCD_Init
  9270  011C2A  0009               	tblrd		*+
  9271  011C2C  CFF5 F0E7          	movff	tablat,??_LCD_Init+1
  9272  011C30  C0E7  F0E6         	movff	??_LCD_Init+1,??_LCD_Init
  9273  011C34  0100               	movlb	0	; () banked
  9274  011C36  6BE7               	clrf	(??_LCD_Init+1)& (0+255),b
  9275  011C38  0100               	movlb	0	; () banked
  9276  011C3A  51E6               	movf	??_LCD_Init& (0+255),w,b
  9277  011C3C  EC3A  F0A2         	call	_LCD_Write
  9278  011C40  D015               	goto	l11173
  9279  011C42                     l11171:
  9280                           
  9281                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  9282  011C42  0E01               	movlw	1
  9283  011C44  0100               	movlb	0	; () banked
  9284  011C46  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9285  011C48  90D8               	bcf	status,0,c
  9286  011C4A  0100               	movlb	0	; () banked
  9287  011C4C  35E8               	rlcf	LCD_Init@i& (0+255),w,b
  9288  011C4E  6EF6               	movwf	tblptrl,c
  9289  011C50  0100               	movlb	0	; () banked
  9290  011C52  35E9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9291  011C54  6EF7               	movwf	tblptrh,c
  9292  011C56  0E19               	movlw	low _InitList
  9293  011C58  26F6               	addwf	tblptrl,f,c
  9294  011C5A  0EFD               	movlw	high _InitList
  9295  011C5C  22F7               	addwfc	tblptrh,f,c
  9296  011C5E                     	if	1	;There are 3 active tblptr bytes
  9297  011C5E  6AF8               	clrf	tblptru,c
  9298  011C60  0E00               	movlw	low (__mediumconst shr (0+16))
  9299  011C62  22F8               	addwfc	tblptru,f,c
  9300  011C64                     	endif
  9301  011C64  0008               	tblrd		*
  9302  011C66  50F5               	movf	tablat,w,c
  9303  011C68  EC3A  F0A2         	call	_LCD_Write
  9304  011C6C                     l11173:
  9305  011C6C  0100               	movlb	0	; () banked
  9306  011C6E  4BE8               	infsnz	LCD_Init@i& (0+255),f,b
  9307  011C70  2BE9               	incf	(LCD_Init@i+1)& (0+255),f,b
  9308                           
  9309                           ; BSR set to: 0
  9310  011C72  0100               	movlb	0	; () banked
  9311  011C74  51E9               	movf	(LCD_Init@i+1)& (0+255),w,b
  9312  011C76  E101               	bnz	l11177
  9313  011C78  D770               	goto	L5
  9314  011C7A                     l11177:
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;LCD.c: 185: }
  9318                           ;LCD.c: 186: }
  9319                           ;LCD.c: 187: delay_ms(100);
  9320  011C7A  0E00               	movlw	0
  9321  011C7C  0100               	movlb	0	; () banked
  9322  011C7E  6FB2               	movwf	(delay_ms@ms+1)& (0+255),b
  9323  011C80  0E64               	movlw	100
  9324  011C82  6FB1               	movwf	delay_ms@ms& (0+255),b
  9325  011C84  EC3A  F09C         	call	_delay_ms	;wreg free
  9326                           
  9327                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  9328  011C88  0E00               	movlw	0
  9329  011C8A  0100               	movlb	0	; () banked
  9330  011C8C  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9331  011C8E  0E29               	movlw	41
  9332  011C90  EC3A  F0A2         	call	_LCD_Write
  9333                           
  9334                           ;LCD.c: 189: Set_Rotation(1);
  9335  011C94  0E01               	movlw	1
  9336  011C96  EC53  F098         	call	_Set_Rotation
  9337                           
  9338                           ;LCD.c: 191: delay_ms(100);
  9339  011C9A  0E00               	movlw	0
  9340  011C9C  0100               	movlb	0	; () banked
  9341  011C9E  6FB2               	movwf	(delay_ms@ms+1)& (0+255),b
  9342  011CA0  0E64               	movlw	100
  9343  011CA2  6FB1               	movwf	delay_ms@ms& (0+255),b
  9344  011CA4  EC3A  F09C         	call	_delay_ms	;wreg free
  9345                           
  9346                           ;LCD.c: 192: LCD_Fill(0x0000);
  9347  011CA8  0E00               	movlw	0
  9348  011CAA  0100               	movlb	0	; () banked
  9349  011CAC  6FBB               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  9350  011CAE  0E00               	movlw	0
  9351  011CB0  6FBA               	movwf	LCD_Fill@pColour& (0+255),b
  9352  011CB2  EC97  F09D         	call	_LCD_Fill	;wreg free
  9353  011CB6  0012               	return		;funcret
  9354  011CB8                     __end_of_LCD_Init:
  9355                           	opt stack 0
  9356                           tosu	equ	0xFFF
  9357                           tosh	equ	0xFFE
  9358                           tosl	equ	0xFFD
  9359                           pclath	equ	0xFFA
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           postinc0	equ	0xFEE
  9368                           wreg	equ	0xFE8
  9369                           postdec1	equ	0xFE5
  9370                           plusw1	equ	0xFE3
  9371                           fsr1h	equ	0xFE2
  9372                           fsr1l	equ	0xFE1
  9373                           indf2	equ	0xFDF
  9374                           postinc2	equ	0xFDE
  9375                           postdec2	equ	0xFDD
  9376                           plusw2	equ	0xFDB
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function _Set_Rotation *****************
  9382 ;; Defined at:
  9383 ;;		line 248 in file "Library/LCD.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  m               1    wreg     unsigned char 
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;  m               1    5[BANK0 ] unsigned char 
  9388 ;;  rotation        1    6[BANK0 ] unsigned char 
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  1    wreg      void 
  9391 ;; Registers used:
  9392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;Total ram usage:        2 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    9
  9405 ;; This function calls:
  9406 ;;		_LCD_Write
  9407 ;; This function is called by:
  9408 ;;		_LCD_Init
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text40
  9413  0130A6                     __ptext40:
  9414                           	opt stack 0
  9415  0130A6                     _Set_Rotation:
  9416                           	opt stack 20
  9417                           
  9418                           ;incstack = 0
  9419                           ;Set_Rotation@m stored from wreg
  9420  0130A6  0100               	movlb	0	; () banked
  9421  0130A8  6FB6               	movwf	Set_Rotation@m& (0+255),b
  9422                           
  9423                           ;LCD.c: 250: UINT8 rotation = 0x00;
  9424  0130AA  0E00               	movlw	0
  9425  0130AC  0100               	movlb	0	; () banked
  9426  0130AE  6FB7               	movwf	Set_Rotation@rotation& (0+255),b
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  9430  0130B0  0E00               	movlw	0
  9431  0130B2  0100               	movlb	0	; () banked
  9432  0130B4  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9433  0130B6  0E36               	movlw	54
  9434  0130B8  EC3A  F0A2         	call	_LCD_Write
  9435                           
  9436                           ;LCD.c: 253: rotation = (m % 4);
  9437  0130BC  0100               	movlb	0	; () banked
  9438  0130BE  51B6               	movf	Set_Rotation@m& (0+255),w,b
  9439  0130C0  0B03               	andlw	3
  9440  0130C2  0100               	movlb	0	; () banked
  9441  0130C4  6FB7               	movwf	Set_Rotation@rotation& (0+255),b
  9442                           
  9443                           ;LCD.c: 255: switch(rotation)
  9444  0130C6  D02C               	goto	l10899
  9445  0130C8                     l10873:
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;LCD.c: 258: {
  9449                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  9450  0130C8  0E01               	movlw	1
  9451  0130CA  0100               	movlb	0	; () banked
  9452  0130CC  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9453  0130CE  0EC8               	movlw	200
  9454  0130D0  EC3A  F0A2         	call	_LCD_Write
  9455                           
  9456                           ;LCD.c: 260: w = 128;
  9457  0130D4  0E80               	movlw	128
  9458  0130D6  6E48               	movwf	_w,c
  9459                           
  9460                           ;LCD.c: 261: l = 128;
  9461  0130D8  0E80               	movlw	128
  9462  0130DA  6E47               	movwf	_l,c
  9463                           
  9464                           ;LCD.c: 262: break;
  9465  0130DC  0012               	return	
  9466  0130DE                     l10879:
  9467                           
  9468                           ;LCD.c: 265: {
  9469                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  9470  0130DE  0E01               	movlw	1
  9471  0130E0  0100               	movlb	0	; () banked
  9472  0130E2  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9473  0130E4  0EA8               	movlw	168
  9474  0130E6  EC3A  F0A2         	call	_LCD_Write
  9475                           
  9476                           ;LCD.c: 267: w = 128;
  9477  0130EA  0E80               	movlw	128
  9478  0130EC  6E48               	movwf	_w,c
  9479                           
  9480                           ;LCD.c: 268: l = 128;
  9481  0130EE  0E80               	movlw	128
  9482  0130F0  6E47               	movwf	_l,c
  9483                           
  9484                           ;LCD.c: 269: break;
  9485  0130F2  0012               	return	
  9486  0130F4                     l10885:
  9487                           
  9488                           ;LCD.c: 272: {
  9489                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9490  0130F4  0E01               	movlw	1
  9491  0130F6  0100               	movlb	0	; () banked
  9492  0130F8  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9493  0130FA  0E08               	movlw	8
  9494  0130FC  EC3A  F0A2         	call	_LCD_Write
  9495                           
  9496                           ;LCD.c: 274: w = 128;
  9497  013100  0E80               	movlw	128
  9498  013102  6E48               	movwf	_w,c
  9499                           
  9500                           ;LCD.c: 275: l = 128;
  9501  013104  0E80               	movlw	128
  9502  013106  6E47               	movwf	_l,c
  9503                           
  9504                           ;LCD.c: 276: break;
  9505  013108  0012               	return	
  9506  01310A                     l10891:
  9507                           
  9508                           ;LCD.c: 279: {
  9509                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9510  01310A  0E01               	movlw	1
  9511  01310C  0100               	movlb	0	; () banked
  9512  01310E  6FB4               	movwf	LCD_Write@mode& (0+255),b
  9513  013110  0E68               	movlw	104
  9514  013112  EC3A  F0A2         	call	_LCD_Write
  9515                           
  9516                           ;LCD.c: 281: w = 128;
  9517  013116  0E80               	movlw	128
  9518  013118  6E48               	movwf	_w,c
  9519                           
  9520                           ;LCD.c: 282: l = 128;
  9521  01311A  0E80               	movlw	128
  9522  01311C  6E47               	movwf	_l,c
  9523                           
  9524                           ;LCD.c: 284: }
  9525                           ;LCD.c: 285: }
  9526                           
  9527                           ;LCD.c: 283: break;
  9528  01311E  0012               	return	
  9529  013120                     l10899:
  9530  013120  0100               	movlb	0	; () banked
  9531  013122  51B7               	movf	Set_Rotation@rotation& (0+255),w,b
  9532                           
  9533                           ; Switch size 1, requested type "space"
  9534                           ; Number of cases is 4, Range of values is 0 to 3
  9535                           ; switch strategies available:
  9536                           ; Name         Instructions Cycles
  9537                           ; simple_byte           13     7 (average)
  9538                           ;	Chosen strategy is simple_byte
  9539  013124  0A00               	xorlw	0	; case 0
  9540  013126  B4D8               	btfsc	status,2,c
  9541  013128  D7CF               	goto	l10873
  9542  01312A  0A01               	xorlw	1	; case 1
  9543  01312C  B4D8               	btfsc	status,2,c
  9544  01312E  D7D7               	goto	l10879
  9545  013130  0A03               	xorlw	3	; case 2
  9546  013132  B4D8               	btfsc	status,2,c
  9547  013134  D7DF               	goto	l10885
  9548  013136  0A01               	xorlw	1	; case 3
  9549  013138  A4D8               	btfss	status,2,c
  9550  01313A  0012               	return	
  9551  01313C  D7E6               	goto	l10891
  9552  01313E                     __end_of_Set_Rotation:
  9553                           	opt stack 0
  9554                           tosu	equ	0xFFF
  9555                           tosh	equ	0xFFE
  9556                           tosl	equ	0xFFD
  9557                           pclath	equ	0xFFA
  9558                           tblptru	equ	0xFF8
  9559                           tblptrh	equ	0xFF7
  9560                           tblptrl	equ	0xFF6
  9561                           tablat	equ	0xFF5
  9562                           prodh	equ	0xFF4
  9563                           prodl	equ	0xFF3
  9564                           intcon	equ	0xFF2
  9565                           postinc0	equ	0xFEE
  9566                           wreg	equ	0xFE8
  9567                           postdec1	equ	0xFE5
  9568                           plusw1	equ	0xFE3
  9569                           fsr1h	equ	0xFE2
  9570                           fsr1l	equ	0xFE1
  9571                           indf2	equ	0xFDF
  9572                           postinc2	equ	0xFDE
  9573                           postdec2	equ	0xFDD
  9574                           plusw2	equ	0xFDB
  9575                           fsr2h	equ	0xFDA
  9576                           fsr2l	equ	0xFD9
  9577                           status	equ	0xFD8
  9578                           
  9579 ;; *************** function _LCD_Fill *****************
  9580 ;; Defined at:
  9581 ;;		line 287 in file "Library/LCD.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;  pColour         2    9[BANK0 ] unsigned short 
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;  j               1   12[BANK0 ] unsigned char 
  9586 ;;  i               1   11[BANK0 ] unsigned char 
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  1    wreg      void 
  9589 ;; Registers used:
  9590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9596 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;Total ram usage:        4 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:   10
  9603 ;; This function calls:
  9604 ;;		_LCD_Word_Write
  9605 ;;		_Set_Addr_Window
  9606 ;; This function is called by:
  9607 ;;		_LCD_Init
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           	psect	text41
  9612  013B2E                     __ptext41:
  9613                           	opt stack 0
  9614  013B2E                     _LCD_Fill:
  9615                           	opt stack 19
  9616                           
  9617                           ;LCD.c: 296: UINT8 i = 0x00;
  9618                           
  9619                           ;incstack = 0
  9620  013B2E  0E00               	movlw	0
  9621  013B30  0100               	movlb	0	; () banked
  9622  013B32  6FBC               	movwf	LCD_Fill@i& (0+255),b
  9623                           
  9624                           ;LCD.c: 297: UINT8 j = 0x00;
  9625  013B34  0E00               	movlw	0
  9626  013B36  0100               	movlb	0	; () banked
  9627  013B38  6FBD               	movwf	LCD_Fill@j& (0+255),b
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9631  013B3A  0E00               	movlw	0
  9632  013B3C  0100               	movlb	0	; () banked
  9633  013B3E  6FB6               	movwf	Set_Addr_Window@ys& (0+255),b
  9634  013B40  0448               	decf	_w,w,c
  9635  013B42  0100               	movlb	0	; () banked
  9636  013B44  6FB7               	movwf	Set_Addr_Window@xe& (0+255),b
  9637  013B46  0447               	decf	_l,w,c
  9638  013B48  0100               	movlb	0	; () banked
  9639  013B4A  6FB8               	movwf	Set_Addr_Window@ye& (0+255),b
  9640  013B4C  0E00               	movlw	0
  9641  013B4E  ECC4  F095         	call	_Set_Addr_Window
  9642                           
  9643                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9644  013B52  C047  F0BD         	movff	_l,LCD_Fill@j
  9645  013B56                     l10907:
  9646  013B56  0100               	movlb	0	; () banked
  9647  013B58  51BD               	movf	LCD_Fill@j& (0+255),w,b
  9648  013B5A  0100               	movlb	0	; () banked
  9649  013B5C  B4D8               	btfsc	status,2,c
  9650  013B5E  0012               	return	
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9654                           
  9655                           ; BSR set to: 0
  9656  013B60  C048  F0BC         	movff	_w,LCD_Fill@i
  9657  013B64                     l10911:
  9658                           
  9659                           ; BSR set to: 0
  9660  013B64  0100               	movlb	0	; () banked
  9661  013B66  51BC               	movf	LCD_Fill@i& (0+255),w,b
  9662  013B68  0100               	movlb	0	; () banked
  9663  013B6A  B4D8               	btfsc	status,2,c
  9664  013B6C  D009               	goto	l10921
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9668                           
  9669                           ; BSR set to: 0
  9670                           
  9671                           ; BSR set to: 0
  9672  013B6E  C0BA  F0B6         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9673  013B72  C0BB  F0B7         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9674  013B76  EC96  F0A2         	call	_LCD_Word_Write	;wreg free
  9675  013B7A  0100               	movlb	0	; () banked
  9676  013B7C  07BC               	decf	LCD_Fill@i& (0+255),f,b
  9677  013B7E  D7F2               	goto	l10911
  9678  013B80                     l10921:
  9679                           
  9680                           ; BSR set to: 0
  9681  013B80  0100               	movlb	0	; () banked
  9682  013B82  07BD               	decf	LCD_Fill@j& (0+255),f,b
  9683  013B84  D7E8               	goto	l10907
  9684  013B86                     __end_of_LCD_Fill:
  9685                           	opt stack 0
  9686                           tosu	equ	0xFFF
  9687                           tosh	equ	0xFFE
  9688                           tosl	equ	0xFFD
  9689                           pclath	equ	0xFFA
  9690                           tblptru	equ	0xFF8
  9691                           tblptrh	equ	0xFF7
  9692                           tblptrl	equ	0xFF6
  9693                           tablat	equ	0xFF5
  9694                           prodh	equ	0xFF4
  9695                           prodl	equ	0xFF3
  9696                           intcon	equ	0xFF2
  9697                           postinc0	equ	0xFEE
  9698                           wreg	equ	0xFE8
  9699                           postdec1	equ	0xFE5
  9700                           plusw1	equ	0xFE3
  9701                           fsr1h	equ	0xFE2
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           plusw2	equ	0xFDB
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function _Configure_GPIOs *****************
  9712 ;; Defined at:
  9713 ;;		line 46 in file "Library/LCD.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;		None
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;		None
  9718 ;; Return value:  Size  Location     Type
  9719 ;;                  1    wreg      void 
  9720 ;; Registers used:
  9721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;Total ram usage:        0 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:   14
  9734 ;; This function calls:
  9735 ;;		_LCD_Reset
  9736 ;;		_Port_SetPinType
  9737 ;;		_SPI_Init
  9738 ;;		_SPI_MaxSpeed
  9739 ;; This function is called by:
  9740 ;;		_LCD_Init
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text42
  9745  01372C                     __ptext42:
  9746                           	opt stack 0
  9747  01372C                     _Configure_GPIOs:
  9748                           	opt stack 15
  9749                           
  9750                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;incstack = 0
  9754  01372C  0EA9               	movlw	low _PortF
  9755  01372E  0100               	movlb	0	; () banked
  9756  013730  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  9757  013732  0E01               	movlw	high _PortF
  9758  013734  0100               	movlb	0	; () banked
  9759  013736  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9760  013738  0E07               	movlw	7
  9761  01373A  0100               	movlb	0	; () banked
  9762  01373C  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  9763  01373E  0E03               	movlw	3
  9764  013740  0100               	movlb	0	; () banked
  9765  013742  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  9766  013744  EC77  F08A         	call	_Port_SetPinType	;wreg free
  9767                           
  9768                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9769  013748  0EA9               	movlw	low _PortF
  9770  01374A  0100               	movlb	0	; () banked
  9771  01374C  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
  9772  01374E  0E01               	movlw	high _PortF
  9773  013750  0100               	movlb	0	; () banked
  9774  013752  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9775  013754  0E06               	movlw	6
  9776  013756  0100               	movlb	0	; () banked
  9777  013758  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
  9778  01375A  0E03               	movlw	3
  9779  01375C  0100               	movlb	0	; () banked
  9780  01375E  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
  9781  013760  EC77  F08A         	call	_Port_SetPinType	;wreg free
  9782                           
  9783                           ;LCD.c: 55: LCD_Reset();
  9784  013764  EC40  F09E         	call	_LCD_Reset	;wreg free
  9785                           
  9786                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9787  013768  0EC0               	movlw	192
  9788  01376A  0100               	movlb	0	; () banked
  9789  01376C  6FDE               	movwf	SPI_Init@pClock& (0+255),b
  9790  01376E  0EC6               	movlw	198
  9791  013770  6FDF               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9792  013772  0E2D               	movlw	45
  9793  013774  6FE0               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9794  013776  0E00               	movlw	0
  9795  013778  6FE1               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9796  01377A  0E01               	movlw	1
  9797  01377C  0100               	movlb	0	; () banked
  9798  01377E  6FE2               	movwf	SPI_Init@pChannel& (0+255),b
  9799  013780  0E01               	movlw	1
  9800  013782  0100               	movlb	0	; () banked
  9801  013784  6FE3               	movwf	SPI_Init@pMode& (0+255),b
  9802  013786  EC00  F080         	call	_SPI_Init	;wreg free
  9803                           
  9804                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9805  01378A  0E6C               	movlw	low _SPI2
  9806  01378C  0100               	movlb	0	; () banked
  9807  01378E  6FC0               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9808  013790  0E01               	movlw	high _SPI2
  9809  013792  0100               	movlb	0	; () banked
  9810  013794  6FC1               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9811  013796  ECAE  F09A         	call	_SPI_MaxSpeed	;wreg free
  9812  01379A  0012               	return		;funcret
  9813  01379C                     __end_of_Configure_GPIOs:
  9814                           	opt stack 0
  9815                           tosu	equ	0xFFF
  9816                           tosh	equ	0xFFE
  9817                           tosl	equ	0xFFD
  9818                           pclath	equ	0xFFA
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           postinc0	equ	0xFEE
  9827                           wreg	equ	0xFE8
  9828                           postdec1	equ	0xFE5
  9829                           plusw1	equ	0xFE3
  9830                           fsr1h	equ	0xFE2
  9831                           fsr1l	equ	0xFE1
  9832                           indf2	equ	0xFDF
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           plusw2	equ	0xFDB
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function _SPI_MaxSpeed *****************
  9841 ;; Defined at:
  9842 ;;		line 201 in file "Library/SPI.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9845 ;;		 -> SPI2(11), 
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      void 
  9850 ;; Registers used:
  9851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9861 ;;Total ram usage:        2 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    9
  9864 ;; This function calls:
  9865 ;;		_Byte_SetBit
  9866 ;;		_Byte_SetQuad
  9867 ;; This function is called by:
  9868 ;;		_Configure_GPIOs
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           	psect	text43
  9873  01355C                     __ptext43:
  9874                           	opt stack 0
  9875  01355C                     _SPI_MaxSpeed:
  9876                           	opt stack 19
  9877                           
  9878                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9879                           
  9880                           ;incstack = 0
  9881  01355C  0100               	movlb	0	; () banked
  9882  01355E  EE20 F006          	lfsr	2,6
  9883  013562  51C0               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9884  013564  26D9               	addwf	fsr2l,f,c
  9885  013566  51C1               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9886  013568  22DA               	addwfc	fsr2h,f,c
  9887  01356A  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
  9888  01356E  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
  9889  013572  0E05               	movlw	5
  9890  013574  0100               	movlb	0	; () banked
  9891  013576  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
  9892  013578  0E00               	movlw	0
  9893  01357A  0100               	movlb	0	; () banked
  9894  01357C  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
  9895  01357E  ECD6  F09C         	call	_Byte_SetBit	;wreg free
  9896                           
  9897                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9898  013582  0100               	movlb	0	; () banked
  9899  013584  EE20 F006          	lfsr	2,6
  9900  013588  51C0               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9901  01358A  26D9               	addwf	fsr2l,f,c
  9902  01358C  51C1               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9903  01358E  22DA               	addwfc	fsr2h,f,c
  9904  013590  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
  9905  013594  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
  9906  013598  0E00               	movlw	0
  9907  01359A  0100               	movlb	0	; () banked
  9908  01359C  6FBE               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9909  01359E  0E00               	movlw	0
  9910  0135A0  0100               	movlb	0	; () banked
  9911  0135A2  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
  9912  0135A4  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
  9913                           
  9914                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9915  0135A8  0100               	movlb	0	; () banked
  9916  0135AA  EE20 F006          	lfsr	2,6
  9917  0135AE  51C0               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9918  0135B0  26D9               	addwf	fsr2l,f,c
  9919  0135B2  51C1               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9920  0135B4  22DA               	addwfc	fsr2h,f,c
  9921  0135B6  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
  9922  0135BA  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
  9923  0135BE  0E05               	movlw	5
  9924  0135C0  0100               	movlb	0	; () banked
  9925  0135C2  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
  9926  0135C4  0E01               	movlw	1
  9927  0135C6  0100               	movlb	0	; () banked
  9928  0135C8  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
  9929  0135CA  ECD6  F09C         	call	_Byte_SetBit	;wreg free
  9930  0135CE  0012               	return		;funcret
  9931  0135D0                     __end_of_SPI_MaxSpeed:
  9932                           	opt stack 0
  9933                           tosu	equ	0xFFF
  9934                           tosh	equ	0xFFE
  9935                           tosl	equ	0xFFD
  9936                           pclath	equ	0xFFA
  9937                           tblptru	equ	0xFF8
  9938                           tblptrh	equ	0xFF7
  9939                           tblptrl	equ	0xFF6
  9940                           tablat	equ	0xFF5
  9941                           prodh	equ	0xFF4
  9942                           prodl	equ	0xFF3
  9943                           intcon	equ	0xFF2
  9944                           postinc0	equ	0xFEE
  9945                           wreg	equ	0xFE8
  9946                           postdec1	equ	0xFE5
  9947                           plusw1	equ	0xFE3
  9948                           fsr1h	equ	0xFE2
  9949                           fsr1l	equ	0xFE1
  9950                           indf2	equ	0xFDF
  9951                           postinc2	equ	0xFDE
  9952                           postdec2	equ	0xFDD
  9953                           plusw2	equ	0xFDB
  9954                           fsr2h	equ	0xFDA
  9955                           fsr2l	equ	0xFD9
  9956                           status	equ	0xFD8
  9957                           
  9958 ;; *************** function _LCD_Reset *****************
  9959 ;; Defined at:
  9960 ;;		line 95 in file "Library/LCD.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;		None
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;		None
  9965 ;; Return value:  Size  Location     Type
  9966 ;;                  1    wreg      void 
  9967 ;; Registers used:
  9968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;Total ram usage:        0 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:   13
  9981 ;; This function calls:
  9982 ;;		_LED_Toggle
  9983 ;;		_Reset_High
  9984 ;;		_Reset_Low
  9985 ;;		_delay_ms
  9986 ;; This function is called by:
  9987 ;;		_Configure_GPIOs
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           	psect	text44
  9992  013C80                     __ptext44:
  9993                           	opt stack 0
  9994  013C80                     _LCD_Reset:
  9995                           	opt stack 15
  9996                           
  9997                           ;LCD.c: 97: Reset_High();
  9998                           
  9999                           ;incstack = 0
 10000  013C80  EC5A  F0A2         	call	_Reset_High	;wreg free
 10001                           
 10002                           ;LCD.c: 98: LED_Toggle(eLED2);
 10003  013C84  0E01               	movlw	1
 10004  013C86  ECFE  F09E         	call	_LED_Toggle
 10005                           
 10006                           ;LCD.c: 99: delay_ms(0x80);
 10007  013C8A  0E00               	movlw	0
 10008  013C8C  0100               	movlb	0	; () banked
 10009  013C8E  6FB2               	movwf	(delay_ms@ms+1)& (0+255),b
 10010  013C90  0E80               	movlw	128
 10011  013C92  6FB1               	movwf	delay_ms@ms& (0+255),b
 10012  013C94  EC3A  F09C         	call	_delay_ms	;wreg free
 10013                           
 10014                           ;LCD.c: 100: LED_Toggle(eLED2);
 10015  013C98  0E01               	movlw	1
 10016  013C9A  ECFE  F09E         	call	_LED_Toggle
 10017                           
 10018                           ;LCD.c: 101: Reset_Low();
 10019  013C9E  EC4B  F0A2         	call	_Reset_Low	;wreg free
 10020                           
 10021                           ;LCD.c: 102: delay_ms(0x80);
 10022  013CA2  0E00               	movlw	0
 10023  013CA4  0100               	movlb	0	; () banked
 10024  013CA6  6FB2               	movwf	(delay_ms@ms+1)& (0+255),b
 10025  013CA8  0E80               	movlw	128
 10026  013CAA  6FB1               	movwf	delay_ms@ms& (0+255),b
 10027  013CAC  EC3A  F09C         	call	_delay_ms	;wreg free
 10028                           
 10029                           ;LCD.c: 103: LED_Toggle(eLED2);
 10030  013CB0  0E01               	movlw	1
 10031  013CB2  ECFE  F09E         	call	_LED_Toggle
 10032                           
 10033                           ;LCD.c: 104: Reset_High();
 10034  013CB6  EC5A  F0A2         	call	_Reset_High	;wreg free
 10035                           
 10036                           ;LCD.c: 105: delay_ms(0x80);
 10037  013CBA  0E00               	movlw	0
 10038  013CBC  0100               	movlb	0	; () banked
 10039  013CBE  6FB2               	movwf	(delay_ms@ms+1)& (0+255),b
 10040  013CC0  0E80               	movlw	128
 10041  013CC2  6FB1               	movwf	delay_ms@ms& (0+255),b
 10042  013CC4  EC3A  F09C         	call	_delay_ms	;wreg free
 10043                           
 10044                           ;LCD.c: 106: LED_Toggle(eLED2);
 10045  013CC8  0E01               	movlw	1
 10046  013CCA  ECFE  F09E         	call	_LED_Toggle
 10047  013CCE  0012               	return		;funcret
 10048  013CD0                     __end_of_LCD_Reset:
 10049                           	opt stack 0
 10050                           tosu	equ	0xFFF
 10051                           tosh	equ	0xFFE
 10052                           tosl	equ	0xFFD
 10053                           pclath	equ	0xFFA
 10054                           tblptru	equ	0xFF8
 10055                           tblptrh	equ	0xFF7
 10056                           tblptrl	equ	0xFF6
 10057                           tablat	equ	0xFF5
 10058                           prodh	equ	0xFF4
 10059                           prodl	equ	0xFF3
 10060                           intcon	equ	0xFF2
 10061                           postinc0	equ	0xFEE
 10062                           wreg	equ	0xFE8
 10063                           postdec1	equ	0xFE5
 10064                           plusw1	equ	0xFE3
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           plusw2	equ	0xFDB
 10071                           fsr2h	equ	0xFDA
 10072                           fsr2l	equ	0xFD9
 10073                           status	equ	0xFD8
 10074                           
 10075 ;; *************** function _delay_ms *****************
 10076 ;; Defined at:
 10077 ;;		line 240 in file "Library/Types.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;  ms              2    0[BANK0 ] unsigned short 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;  u               4    2[BANK0 ] volatile unsigned long 
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      void 
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10091 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;Total ram usage:        6 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    7
 10098 ;; This function calls:
 10099 ;;		Nothing
 10100 ;; This function is called by:
 10101 ;;		_LCD_Reset
 10102 ;;		_LCD_Init
 10103 ;;		_MXK_Init
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           	psect	text45
 10108  013874                     __ptext45:
 10109                           	opt stack 0
 10110  013874                     _delay_ms:
 10111                           	opt stack 22
 10112                           
 10113                           ;Types.c: 242: volatile unsigned long u;
 10114                           ;Types.c: 243: while (ms--)
 10115                           
 10116                           ;incstack = 0
 10117  013874  D01F               	goto	l10121
 10118  013876                     l10113:
 10119                           
 10120                           ;Types.c: 244: {
 10121                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 10122  013876  0E00               	movlw	0
 10123  013878  0100               	movlb	0	; () banked
 10124  01387A  6FB3               	movwf	delay_ms@u& (0+255),b	;volatile
 10125  01387C  0E00               	movlw	0
 10126  01387E  6FB4               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10127  013880  0E00               	movlw	0
 10128  013882  6FB5               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 10129  013884  0E00               	movlw	0
 10130  013886  6FB6               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 10131  013888                     l10115:
 10132                           
 10133                           ; BSR set to: 0
 10134  013888  0100               	movlb	0	; () banked
 10135  01388A  51B6               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 10136  01388C  0100               	movlb	0	; () banked
 10137  01388E  11B5               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 10138  013890  E111               	bnz	l10121
 10139  013892  0EB0               	movlw	176
 10140  013894  0100               	movlb	0	; () banked
 10141  013896  5DB3               	subwf	delay_ms@u& (0+255),w,b	;volatile
 10142  013898  0E04               	movlw	4
 10143  01389A  0100               	movlb	0	; () banked
 10144  01389C  59B4               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 10145  01389E  B0D8               	btfsc	status,0,c
 10146  0138A0  D009               	goto	l10121
 10147                           
 10148                           ; BSR set to: 0
 10149                           
 10150                           ; BSR set to: 0
 10151  0138A2  F000               	nop		; ;# 
 10152  0138A4  0E01               	movlw	1
 10153  0138A6  0100               	movlb	0	; () banked
 10154  0138A8  27B3               	addwf	delay_ms@u& (0+255),f,b	;volatile
 10155  0138AA  0E00               	movlw	0
 10156  0138AC  23B4               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 10157  0138AE  23B5               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 10158  0138B0  23B6               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 10159  0138B2  D7EA               	goto	l10115
 10160  0138B4                     l10121:
 10161  0138B4  0100               	movlb	0	; () banked
 10162  0138B6  07B1               	decf	delay_ms@ms& (0+255),f,b
 10163  0138B8  A0D8               	btfss	status,0,c
 10164  0138BA  07B2               	decf	(delay_ms@ms+1)& (0+255),f,b
 10165  0138BC  0100               	movlb	0	; () banked
 10166  0138BE  29B1               	incf	delay_ms@ms& (0+255),w,b
 10167  0138C0  E1DA               	bnz	l10113
 10168  0138C2  0100               	movlb	0	; () banked
 10169  0138C4  29B2               	incf	(delay_ms@ms+1)& (0+255),w,b
 10170  0138C6  A4D8               	btfss	status,2,c
 10171  0138C8  D7D6               	goto	l10113
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;Types.c: 251: }
 10175                           ;Types.c: 252: }
 10176                           ;Types.c: 253: u = 0x8008;
 10177                           
 10178                           ; BSR set to: 0
 10179  0138CA  0E08               	movlw	8
 10180  0138CC  0100               	movlb	0	; () banked
 10181  0138CE  6FB3               	movwf	delay_ms@u& (0+255),b	;volatile
 10182  0138D0  0E80               	movlw	128
 10183  0138D2  6FB4               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10184  0138D4  0E00               	movlw	0
 10185  0138D6  6FB5               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 10186  0138D8  0E00               	movlw	0
 10187  0138DA  6FB6               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 10188                           
 10189                           ; BSR set to: 0
 10190  0138DC  0012               	return		;funcret
 10191  0138DE                     __end_of_delay_ms:
 10192                           	opt stack 0
 10193                           tosu	equ	0xFFF
 10194                           tosh	equ	0xFFE
 10195                           tosl	equ	0xFFD
 10196                           pclath	equ	0xFFA
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           postdec1	equ	0xFE5
 10207                           plusw1	equ	0xFE3
 10208                           fsr1h	equ	0xFE2
 10209                           fsr1l	equ	0xFE1
 10210                           indf2	equ	0xFDF
 10211                           postinc2	equ	0xFDE
 10212                           postdec2	equ	0xFDD
 10213                           plusw2	equ	0xFDB
 10214                           fsr2h	equ	0xFDA
 10215                           fsr2l	equ	0xFD9
 10216                           status	equ	0xFD8
 10217                           
 10218 ;; *************** function _Reset_Low *****************
 10219 ;; Defined at:
 10220 ;;		line 32 in file "Library/LCD.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;		None
 10223 ;; Auto vars:     Size  Location     Type
 10224 ;;		None
 10225 ;; Return value:  Size  Location     Type
 10226 ;;                  1    wreg      void 
 10227 ;; Registers used:
 10228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;Total ram usage:        0 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:   11
 10241 ;; This function calls:
 10242 ;;		_Port_SetPin
 10243 ;; This function is called by:
 10244 ;;		_LCD_Reset
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           	psect	text46
 10249  014496                     __ptext46:
 10250                           	opt stack 0
 10251  014496                     _Reset_Low:
 10252                           	opt stack 16
 10253                           
 10254                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;incstack = 0
 10258  014496  0EA9               	movlw	low _PortF
 10259  014498  0100               	movlb	0	; () banked
 10260  01449A  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
 10261  01449C  0E01               	movlw	high _PortF
 10262  01449E  0100               	movlb	0	; () banked
 10263  0144A0  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10264  0144A2  0E06               	movlw	6
 10265  0144A4  0100               	movlb	0	; () banked
 10266  0144A6  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
 10267  0144A8  0E01               	movlw	1
 10268  0144AA  0100               	movlb	0	; () banked
 10269  0144AC  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
 10270  0144AE  EC92  F093         	call	_Port_SetPin	;wreg free
 10271  0144B2  0012               	return		;funcret
 10272  0144B4                     __end_of_Reset_Low:
 10273                           	opt stack 0
 10274                           tosu	equ	0xFFF
 10275                           tosh	equ	0xFFE
 10276                           tosl	equ	0xFFD
 10277                           pclath	equ	0xFFA
 10278                           tblptru	equ	0xFF8
 10279                           tblptrh	equ	0xFF7
 10280                           tblptrl	equ	0xFF6
 10281                           tablat	equ	0xFF5
 10282                           prodh	equ	0xFF4
 10283                           prodl	equ	0xFF3
 10284                           intcon	equ	0xFF2
 10285                           postinc0	equ	0xFEE
 10286                           wreg	equ	0xFE8
 10287                           postdec1	equ	0xFE5
 10288                           plusw1	equ	0xFE3
 10289                           fsr1h	equ	0xFE2
 10290                           fsr1l	equ	0xFE1
 10291                           indf2	equ	0xFDF
 10292                           postinc2	equ	0xFDE
 10293                           postdec2	equ	0xFDD
 10294                           plusw2	equ	0xFDB
 10295                           fsr2h	equ	0xFDA
 10296                           fsr2l	equ	0xFD9
 10297                           status	equ	0xFD8
 10298                           
 10299 ;; *************** function _Reset_High *****************
 10300 ;; Defined at:
 10301 ;;		line 36 in file "Library/LCD.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;		None
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      void 
 10308 ;; Registers used:
 10309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10319 ;;Total ram usage:        0 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:   11
 10322 ;; This function calls:
 10323 ;;		_Port_SetPin
 10324 ;; This function is called by:
 10325 ;;		_LCD_Reset
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           	psect	text47
 10330  0144B4                     __ptext47:
 10331                           	opt stack 0
 10332  0144B4                     _Reset_High:
 10333                           	opt stack 16
 10334                           
 10335                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 10336                           
 10337                           ;incstack = 0
 10338  0144B4  0EA9               	movlw	low _PortF
 10339  0144B6  0100               	movlb	0	; () banked
 10340  0144B8  6FC0               	movwf	Port_SetPin@pInput& (0+255),b
 10341  0144BA  0E01               	movlw	high _PortF
 10342  0144BC  0100               	movlb	0	; () banked
 10343  0144BE  6FC1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10344  0144C0  0E06               	movlw	6
 10345  0144C2  0100               	movlb	0	; () banked
 10346  0144C4  6FC2               	movwf	Port_SetPin@pPin& (0+255),b
 10347  0144C6  0E00               	movlw	0
 10348  0144C8  0100               	movlb	0	; () banked
 10349  0144CA  6FC3               	movwf	Port_SetPin@pValue& (0+255),b
 10350  0144CC  EC92  F093         	call	_Port_SetPin	;wreg free
 10351  0144D0  0012               	return		;funcret
 10352  0144D2                     __end_of_Reset_High:
 10353                           	opt stack 0
 10354                           tosu	equ	0xFFF
 10355                           tosh	equ	0xFFE
 10356                           tosl	equ	0xFFD
 10357                           pclath	equ	0xFFA
 10358                           tblptru	equ	0xFF8
 10359                           tblptrh	equ	0xFF7
 10360                           tblptrl	equ	0xFF6
 10361                           tablat	equ	0xFF5
 10362                           prodh	equ	0xFF4
 10363                           prodl	equ	0xFF3
 10364                           intcon	equ	0xFF2
 10365                           postinc0	equ	0xFEE
 10366                           wreg	equ	0xFE8
 10367                           postdec1	equ	0xFE5
 10368                           plusw1	equ	0xFE3
 10369                           fsr1h	equ	0xFE2
 10370                           fsr1l	equ	0xFE1
 10371                           indf2	equ	0xFDF
 10372                           postinc2	equ	0xFDE
 10373                           postdec2	equ	0xFDD
 10374                           plusw2	equ	0xFDB
 10375                           fsr2h	equ	0xFDA
 10376                           fsr2l	equ	0xFD9
 10377                           status	equ	0xFD8
 10378                           
 10379 ;; *************** function _ISR_Enable *****************
 10380 ;; Defined at:
 10381 ;;		line 27 in file "Library/ISR.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;		None
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;		None
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		None
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;Total ram usage:        0 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    7
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		_main
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text48
 10410  014724                     __ptext48:
 10411                           	opt stack 0
 10412  014724                     _ISR_Enable:
 10413                           	opt stack 23
 10414                           
 10415                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10416                           
 10417                           ;incstack = 0
 10418  014724  8CF2               	bsf	intcon,6,c	;volatile
 10419                           
 10420                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10421  014726  8EF2               	bsf	intcon,7,c	;volatile
 10422                           
 10423                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10424  014728  88F2               	bsf	intcon,4,c	;volatile
 10425                           
 10426                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10427  01472A  92F2               	bcf	intcon,1,c	;volatile
 10428  01472C  0012               	return		;funcret
 10429  01472E                     __end_of_ISR_Enable:
 10430                           	opt stack 0
 10431                           tosu	equ	0xFFF
 10432                           tosh	equ	0xFFE
 10433                           tosl	equ	0xFFD
 10434                           pclath	equ	0xFFA
 10435                           tblptru	equ	0xFF8
 10436                           tblptrh	equ	0xFF7
 10437                           tblptrl	equ	0xFF6
 10438                           tablat	equ	0xFF5
 10439                           prodh	equ	0xFF4
 10440                           prodl	equ	0xFF3
 10441                           intcon	equ	0xFF2
 10442                           postinc0	equ	0xFEE
 10443                           wreg	equ	0xFE8
 10444                           postdec1	equ	0xFE5
 10445                           plusw1	equ	0xFE3
 10446                           fsr1h	equ	0xFE2
 10447                           fsr1l	equ	0xFE1
 10448                           indf2	equ	0xFDF
 10449                           postinc2	equ	0xFDE
 10450                           postdec2	equ	0xFDD
 10451                           plusw2	equ	0xFDB
 10452                           fsr2h	equ	0xFDA
 10453                           fsr2l	equ	0xFD9
 10454                           status	equ	0xFD8
 10455                           
 10456 ;; *************** function _HMI_Render *****************
 10457 ;; Defined at:
 10458 ;;		line 138 in file "HMI.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;		None
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;  a               2    8[BANK0 ] unsigned short 
 10463 ;; Return value:  Size  Location     Type
 10464 ;;                  1    wreg      void 
 10465 ;; Registers used:
 10466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10467 ;; Tracked objects:
 10468 ;;		On entry : 0/0
 10469 ;;		On exit  : 0/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10473 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;Total ram usage:        2 bytes
 10477 ;; Hardware stack levels used:    1
 10478 ;; Hardware stack levels required when called:    9
 10479 ;; This function calls:
 10480 ;;		_OutSeg
 10481 ;; This function is called by:
 10482 ;;		_main
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           	psect	text49
 10487  014018                     __ptext49:
 10488                           	opt stack 0
 10489  014018                     _HMI_Render:
 10490                           	opt stack 21
 10491                           
 10492                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10493                           
 10494                           ;incstack = 0
 10495  014018  0E00               	movlw	0
 10496  01401A  0100               	movlb	0	; () banked
 10497  01401C  6FBA               	movwf	(HMI_Render@a+1)& (0+255),b
 10498  01401E  0E00               	movlw	0
 10499  014020  6FB9               	movwf	HMI_Render@a& (0+255),b
 10500  014022                     l11413:
 10501                           
 10502                           ; BSR set to: 0
 10503  014022  0100               	movlb	0	; () banked
 10504  014024  51BA               	movf	(HMI_Render@a+1)& (0+255),w,b
 10505  014026  E116               	bnz	l1166
 10506  014028  0E08               	movlw	8
 10507  01402A  0100               	movlb	0	; () banked
 10508  01402C  5DB9               	subwf	HMI_Render@a& (0+255),w,b
 10509  01402E  B0D8               	btfsc	status,0,c
 10510  014030  0012               	return	
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10514                           
 10515                           ; BSR set to: 0
 10516                           
 10517                           ; BSR set to: 0
 10518  014032  C0B9  F0B4         	movff	HMI_Render@a,OutSeg@pSegment
 10519  014036  0E27               	movlw	low _HMIBoard
 10520  014038  0100               	movlb	0	; () banked
 10521  01403A  25B9               	addwf	HMI_Render@a& (0+255),w,b
 10522  01403C  6ED9               	movwf	fsr2l,c
 10523  01403E  0E01               	movlw	high _HMIBoard
 10524  014040  0100               	movlb	0	; () banked
 10525  014042  21BA               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10526  014044  6EDA               	movwf	fsr2h,c
 10527  014046  50DF               	movf	indf2,w,c
 10528  014048  ECB8  F099         	call	_OutSeg
 10529  01404C  0100               	movlb	0	; () banked
 10530  01404E  4BB9               	infsnz	HMI_Render@a& (0+255),f,b
 10531  014050  2BBA               	incf	(HMI_Render@a+1)& (0+255),f,b
 10532  014052  D7E7               	goto	l11413
 10533  014054                     l1166:
 10534                           
 10535                           ; BSR set to: 0
 10536  014054  0012               	return		;funcret
 10537  014056                     __end_of_HMI_Render:
 10538                           	opt stack 0
 10539                           tosu	equ	0xFFF
 10540                           tosh	equ	0xFFE
 10541                           tosl	equ	0xFFD
 10542                           pclath	equ	0xFFA
 10543                           tblptru	equ	0xFF8
 10544                           tblptrh	equ	0xFF7
 10545                           tblptrl	equ	0xFF6
 10546                           tablat	equ	0xFF5
 10547                           prodh	equ	0xFF4
 10548                           prodl	equ	0xFF3
 10549                           intcon	equ	0xFF2
 10550                           postinc0	equ	0xFEE
 10551                           wreg	equ	0xFE8
 10552                           postdec1	equ	0xFE5
 10553                           plusw1	equ	0xFE3
 10554                           fsr1h	equ	0xFE2
 10555                           fsr1l	equ	0xFE1
 10556                           indf2	equ	0xFDF
 10557                           postinc2	equ	0xFDE
 10558                           postdec2	equ	0xFDD
 10559                           plusw2	equ	0xFDB
 10560                           fsr2h	equ	0xFDA
 10561                           fsr2l	equ	0xFD9
 10562                           status	equ	0xFD8
 10563                           
 10564 ;; *************** function _OutSeg *****************
 10565 ;; Defined at:
 10566 ;;		line 54 in file "HMI.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;  pInput          1    wreg     unsigned char 
 10569 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;  pInput          1    6[BANK0 ] unsigned char 
 10572 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      void 
 10575 ;; Registers used:
 10576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10582 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;Total ram usage:        5 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    8
 10589 ;; This function calls:
 10590 ;;		_SPI_Send
 10591 ;; This function is called by:
 10592 ;;		_HMI_Render
 10593 ;;		_HMI_GRender
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text50
 10598  013370                     __ptext50:
 10599                           	opt stack 0
 10600  013370                     _OutSeg:
 10601                           	opt stack 21
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;incstack = 0
 10605                           ;OutSeg@pInput stored from wreg
 10606  013370  0100               	movlb	0	; () banked
 10607  013372  6FB7               	movwf	OutSeg@pInput& (0+255),b
 10608                           
 10609                           ;HMI.c: 58: static UINT8 cur;
 10610                           ;HMI.c: 59: volatile UINT8 out;
 10611                           ;HMI.c: 60: static UINT8 segset;
 10612                           ;HMI.c: 61: static UINT8 a;
 10613                           ;HMI.c: 83: if (pSegment <= 8)
 10614  013374  0E09               	movlw	9
 10615  013376  0100               	movlb	0	; () banked
 10616  013378  61B4               	cpfslt	OutSeg@pSegment& (0+255),b
 10617  01337A  0012               	return	
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;HMI.c: 84: {
 10621                           ;HMI.c: 85: cur = pInput;
 10622  01337C  C0B7  F035         	movff	OutSeg@pInput,OutSeg@cur
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10626  013380  0E00               	movlw	0
 10627  013382  6E33               	movwf	OutSeg@a,c
 10628  013384                     l11063:
 10629                           
 10630                           ; BSR set to: 0
 10631  013384  0E07               	movlw	7
 10632  013386  6433               	cpfsgt	OutSeg@a,c
 10633  013388  D001               	goto	l11067
 10634  01338A  D027               	goto	l11075
 10635  01338C                     l11067:
 10636                           
 10637                           ;HMI.c: 87: {
 10638                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10639  01338C  C035  F0B5         	movff	OutSeg@cur,??_OutSeg
 10640  013390  0E01               	movlw	1
 10641  013392  0100               	movlb	0	; () banked
 10642  013394  17B5               	andwf	??_OutSeg& (0+255),f,b
 10643  013396  0E06               	movlw	6
 10644  013398  0100               	movlb	0	; () banked
 10645  01339A  6FB6               	movwf	(??_OutSeg+1)& (0+255),b
 10646  01339C                     u7425:
 10647  01339C  0100               	movlb	0	; () banked
 10648  01339E  90D8               	bcf	status,0,c
 10649  0133A0  37B5               	rlcf	??_OutSeg& (0+255),f,b
 10650  0133A2  0100               	movlb	0	; () banked
 10651  0133A4  2FB6               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10652  0133A6  D7FA               	goto	u7425
 10653  0133A8  0100               	movlb	0	; () banked
 10654  0133AA  51B5               	movf	??_OutSeg& (0+255),w,b
 10655  0133AC  6E34               	movwf	OutSeg@segset,c
 10656                           
 10657                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10658  0133AE  0100               	movlb	0	; () banked
 10659  0133B0  39B4               	swapf	OutSeg@pSegment& (0+255),w,b
 10660  0133B2  42E8               	rrncf	wreg,f,c
 10661  0133B4  0BF8               	andlw	248
 10662  0133B6  1033               	iorwf	OutSeg@a,w,c
 10663  0133B8  1034               	iorwf	OutSeg@segset,w,c
 10664  0133BA  0100               	movlb	0	; () banked
 10665  0133BC  6FB8               	movwf	OutSeg@out& (0+255),b	;volatile
 10666                           
 10667                           ;HMI.c: 90: cur >>= 1;
 10668  0133BE  90D8               	bcf	status,0,c
 10669  0133C0  3235               	rrcf	OutSeg@cur,f,c
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10673  0133C2  0E61               	movlw	low _SPI1
 10674  0133C4  0100               	movlb	0	; () banked
 10675  0133C6  6FB1               	movwf	SPI_Send@pInput& (0+255),b
 10676  0133C8  0E01               	movlw	high _SPI1
 10677  0133CA  0100               	movlb	0	; () banked
 10678  0133CC  6FB2               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10679  0133CE  C0B8  F0B3         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10680  0133D2  EC04  F09C         	call	_SPI_Send	;wreg free
 10681  0133D6  2A33               	incf	OutSeg@a,f,c
 10682  0133D8  D7D5               	goto	l11063
 10683  0133DA                     l11075:
 10684                           
 10685                           ;HMI.c: 96: }
 10686                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10687  0133DA  0E61               	movlw	low _SPI1
 10688  0133DC  0100               	movlb	0	; () banked
 10689  0133DE  6FB1               	movwf	SPI_Send@pInput& (0+255),b
 10690  0133E0  0E01               	movlw	high _SPI1
 10691  0133E2  0100               	movlb	0	; () banked
 10692  0133E4  6FB2               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10693  0133E6  0E00               	movlw	0
 10694  0133E8  0100               	movlb	0	; () banked
 10695  0133EA  6FB3               	movwf	SPI_Send@pData& (0+255),b
 10696  0133EC  EC04  F09C         	call	_SPI_Send	;wreg free
 10697  0133F0  0012               	return	
 10698  0133F2                     __end_of_OutSeg:
 10699                           	opt stack 0
 10700                           tosu	equ	0xFFF
 10701                           tosh	equ	0xFFE
 10702                           tosl	equ	0xFFD
 10703                           pclath	equ	0xFFA
 10704                           tblptru	equ	0xFF8
 10705                           tblptrh	equ	0xFF7
 10706                           tblptrl	equ	0xFF6
 10707                           tablat	equ	0xFF5
 10708                           prodh	equ	0xFF4
 10709                           prodl	equ	0xFF3
 10710                           intcon	equ	0xFF2
 10711                           postinc0	equ	0xFEE
 10712                           wreg	equ	0xFE8
 10713                           postdec1	equ	0xFE5
 10714                           plusw1	equ	0xFE3
 10715                           fsr1h	equ	0xFE2
 10716                           fsr1l	equ	0xFE1
 10717                           indf2	equ	0xFDF
 10718                           postinc2	equ	0xFDE
 10719                           postdec2	equ	0xFDD
 10720                           plusw2	equ	0xFDB
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8
 10724                           
 10725 ;; *************** function _HMI_Poll *****************
 10726 ;; Defined at:
 10727 ;;		line 252 in file "HMI.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;		None
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      void 
 10734 ;; Registers used:
 10735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;Total ram usage:        0 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:   15
 10748 ;; This function calls:
 10749 ;;		_Button_Poll
 10750 ;; This function is called by:
 10751 ;;		_main
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text51
 10756  0135D0                     __ptext51:
 10757                           	opt stack 0
 10758  0135D0                     _HMI_Poll:
 10759                           	opt stack 15
 10760                           
 10761                           ;HMI.c: 254: TRISE = 0xFC;
 10762                           
 10763                           ;incstack = 0
 10764  0135D0  0EFC               	movlw	252
 10765  0135D2  6E96               	movwf	3990,c	;volatile
 10766                           
 10767                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10768  0135D4  0E57               	movlw	low (_HMIBoard+48)
 10769  0135D6  0100               	movlb	0	; () banked
 10770  0135D8  6FCC               	movwf	Button_Poll@pButton& (0+255),b
 10771  0135DA  0E01               	movlw	high (_HMIBoard+48)
 10772  0135DC  0100               	movlb	0	; () banked
 10773  0135DE  6FCD               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10774  0135E0  0E01               	movlw	1
 10775  0135E2  0100               	movlb	0	; () banked
 10776  0135E4  6FCE               	movwf	Button_Poll@pIncrement& (0+255),b
 10777  0135E6  EC5C  F08E         	call	_Button_Poll	;wreg free
 10778                           
 10779                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10780  0135EA  0E39               	movlw	low (_HMIBoard+18)
 10781  0135EC  0100               	movlb	0	; () banked
 10782  0135EE  6FCC               	movwf	Button_Poll@pButton& (0+255),b
 10783  0135F0  0E01               	movlw	high (_HMIBoard+18)
 10784  0135F2  0100               	movlb	0	; () banked
 10785  0135F4  6FCD               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10786  0135F6  0E01               	movlw	1
 10787  0135F8  0100               	movlb	0	; () banked
 10788  0135FA  6FCE               	movwf	Button_Poll@pIncrement& (0+255),b
 10789  0135FC  EC5C  F08E         	call	_Button_Poll	;wreg free
 10790                           
 10791                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10792  013600  0E2F               	movlw	low (_HMIBoard+8)
 10793  013602  0100               	movlb	0	; () banked
 10794  013604  6FCC               	movwf	Button_Poll@pButton& (0+255),b
 10795  013606  0E01               	movlw	high (_HMIBoard+8)
 10796  013608  0100               	movlb	0	; () banked
 10797  01360A  6FCD               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10798  01360C  0E01               	movlw	1
 10799  01360E  0100               	movlb	0	; () banked
 10800  013610  6FCE               	movwf	Button_Poll@pIncrement& (0+255),b
 10801  013612  EC5C  F08E         	call	_Button_Poll	;wreg free
 10802                           
 10803                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10804  013616  0E43               	movlw	low (_HMIBoard+28)
 10805  013618  0100               	movlb	0	; () banked
 10806  01361A  6FCC               	movwf	Button_Poll@pButton& (0+255),b
 10807  01361C  0E01               	movlw	high (_HMIBoard+28)
 10808  01361E  0100               	movlb	0	; () banked
 10809  013620  6FCD               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10810  013622  0E01               	movlw	1
 10811  013624  0100               	movlb	0	; () banked
 10812  013626  6FCE               	movwf	Button_Poll@pIncrement& (0+255),b
 10813  013628  EC5C  F08E         	call	_Button_Poll	;wreg free
 10814                           
 10815                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10816  01362C  0E4D               	movlw	low (_HMIBoard+38)
 10817  01362E  0100               	movlb	0	; () banked
 10818  013630  6FCC               	movwf	Button_Poll@pButton& (0+255),b
 10819  013632  0E01               	movlw	high (_HMIBoard+38)
 10820  013634  0100               	movlb	0	; () banked
 10821  013636  6FCD               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10822  013638  0E01               	movlw	1
 10823  01363A  0100               	movlb	0	; () banked
 10824  01363C  6FCE               	movwf	Button_Poll@pIncrement& (0+255),b
 10825  01363E  EC5C  F08E         	call	_Button_Poll	;wreg free
 10826  013642  0012               	return		;funcret
 10827  013644                     __end_of_HMI_Poll:
 10828                           	opt stack 0
 10829                           tosu	equ	0xFFF
 10830                           tosh	equ	0xFFE
 10831                           tosl	equ	0xFFD
 10832                           pclath	equ	0xFFA
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           intcon	equ	0xFF2
 10840                           postinc0	equ	0xFEE
 10841                           wreg	equ	0xFE8
 10842                           postdec1	equ	0xFE5
 10843                           plusw1	equ	0xFE3
 10844                           fsr1h	equ	0xFE2
 10845                           fsr1l	equ	0xFE1
 10846                           indf2	equ	0xFDF
 10847                           postinc2	equ	0xFDE
 10848                           postdec2	equ	0xFDD
 10849                           plusw2	equ	0xFDB
 10850                           fsr2h	equ	0xFDA
 10851                           fsr2l	equ	0xFD9
 10852                           status	equ	0xFD8
 10853                           
 10854 ;; *************** function _Button_Poll *****************
 10855 ;; Defined at:
 10856 ;;		line 57 in file "Library/Button.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10859 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10860 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  Pin             1   35[BANK0 ] unsigned char 
 10863 ;; Return value:  Size  Location     Type
 10864 ;;                  1    wreg      unsigned char 
 10865 ;; Registers used:
 10866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10867 ;; Tracked objects:
 10868 ;;		On entry : 0/0
 10869 ;;		On exit  : 0/0
 10870 ;;		Unchanged: 0/0
 10871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10872 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;Total ram usage:        9 bytes
 10877 ;; Hardware stack levels used:    1
 10878 ;; Hardware stack levels required when called:   14
 10879 ;; This function calls:
 10880 ;;		_Event_DIPSwitch
 10881 ;;		_Event_HMI_DIPSwitch
 10882 ;;		_Event_HMI_DownButton
 10883 ;;		_Event_HMI_LeftButton
 10884 ;;		_Event_HMI_RightButton
 10885 ;;		_Event_HMI_UpButton
 10886 ;;		_Event_TestButton
 10887 ;;		_HMI_DIPSwitch
 10888 ;;		_HMI_DownSwitch
 10889 ;;		_HMI_LeftSwitch
 10890 ;;		_HMI_RightSwitch
 10891 ;;		_HMI_UpSwitch
 10892 ;;		_MXK_DIPSwitch
 10893 ;;		_MXK_TestButton
 10894 ;; This function is called by:
 10895 ;;		_HMI_Poll
 10896 ;;		_MXK_Poll
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           	psect	text52
 10901  011CB8                     __ptext52:
 10902                           	opt stack 0
 10903  011CB8                     _Button_Poll:
 10904                           	opt stack 15
 10905                           
 10906                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10907                           
 10908                           ;incstack = 0
 10909  011CB8  0100               	movlb	0	; () banked
 10910  011CBA  EE20 F007          	lfsr	2,7
 10911  011CBE  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 10912  011CC0  26D9               	addwf	fsr2l,f,c
 10913  011CC2  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10914  011CC4  22DA               	addwfc	fsr2h,f,c
 10915  011CC6  D801               	call	u7188
 10916  011CC8  D00A               	goto	u7189
 10917  011CCA                     u7188:
 10918  011CCA  0005               	push	
 10919  011CCC  6EFA               	movwf	pclath,c
 10920  011CCE  50DE               	movf	postinc2,w,c
 10921  011CD0  6EFD               	movwf	tosl,c
 10922  011CD2  50DE               	movf	postinc2,w,c
 10923  011CD4  6EFE               	movwf	tosh,c
 10924  011CD6  50DE               	movf	postinc2,w,c
 10925  011CD8  6EFF               	movwf	tosu,c
 10926  011CDA  50FA               	movf	pclath,w,c
 10927  011CDC  0012               	return		;indir
 10928  011CDE                     u7189:
 10929  011CDE  0100               	movlb	0	; () banked
 10930  011CE0  6FD4               	movwf	Button_Poll@Pin& (0+255),b
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;Button.c: 61: if (pButton->mState == Pin)
 10934  011CE2  C0CC  FFD9         	movff	Button_Poll@pButton,fsr2l
 10935  011CE6  C0CD  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10936  011CEA  0100               	movlb	0	; () banked
 10937  011CEC  51D4               	movf	Button_Poll@Pin& (0+255),w,b
 10938  011CEE  18DE               	xorwf	postinc2,w,c
 10939  011CF0  A4D8               	btfss	status,2,c
 10940  011CF2  D021               	goto	l10849
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;Button.c: 62: {
 10944                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10945  011CF4  0100               	movlb	0	; () banked
 10946  011CF6  EE20 F001          	lfsr	2,1
 10947  011CFA  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 10948  011CFC  26D9               	addwf	fsr2l,f,c
 10949  011CFE  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10950  011D00  22DA               	addwfc	fsr2h,f,c
 10951  011D02  0100               	movlb	0	; () banked
 10952  011D04  51CE               	movf	Button_Poll@pIncrement& (0+255),w,b
 10953  011D06  5CDE               	subwf	postinc2,w,c
 10954  011D08  B0D8               	btfsc	status,0,c
 10955  011D0A  D00A               	goto	l10847
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;Button.c: 66: pButton->mCount = 0;
 10959  011D0C  0100               	movlb	0	; () banked
 10960  011D0E  EE20 F001          	lfsr	2,1
 10961  011D12  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 10962  011D14  26D9               	addwf	fsr2l,f,c
 10963  011D16  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10964  011D18  22DA               	addwfc	fsr2h,f,c
 10965  011D1A  0E00               	movlw	0
 10966  011D1C  6EDF               	movwf	indf2,c
 10967  011D1E  0012               	return	
 10968  011D20                     l10847:
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;Button.c: 67: else
 10972                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10973  011D20  0100               	movlb	0	; () banked
 10974  011D22  EE20 F001          	lfsr	2,1
 10975  011D26  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 10976  011D28  26D9               	addwf	fsr2l,f,c
 10977  011D2A  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10978  011D2C  22DA               	addwfc	fsr2h,f,c
 10979  011D2E  0100               	movlb	0	; () banked
 10980  011D30  51CE               	movf	Button_Poll@pIncrement& (0+255),w,b
 10981  011D32  5EDF               	subwf	indf2,f,c
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;Button.c: 69: }
 10985  011D34  0012               	return	
 10986  011D36                     l10849:
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10990  011D36  0100               	movlb	0	; () banked
 10991  011D38  EE20 F001          	lfsr	2,1
 10992  011D3C  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 10993  011D3E  26D9               	addwf	fsr2l,f,c
 10994  011D40  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10995  011D42  22DA               	addwfc	fsr2h,f,c
 10996  011D44  50DF               	movf	indf2,w,c
 10997  011D46  0100               	movlb	0	; () banked
 10998  011D48  6FCF               	movwf	??_Button_Poll& (0+255),b
 10999  011D4A  6BD0               	clrf	(??_Button_Poll+1)& (0+255),b
 11000  011D4C  0100               	movlb	0	; () banked
 11001  011D4E  51CE               	movf	Button_Poll@pIncrement& (0+255),w,b
 11002  011D50  0100               	movlb	0	; () banked
 11003  011D52  27CF               	addwf	??_Button_Poll& (0+255),f,b
 11004  011D54  0E00               	movlw	0
 11005  011D56  23D0               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 11006  011D58  0100               	movlb	0	; () banked
 11007  011D5A  EE20 F001          	lfsr	2,1
 11008  011D5E  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 11009  011D60  26D9               	addwf	fsr2l,f,c
 11010  011D62  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11011  011D64  22DA               	addwfc	fsr2h,f,c
 11012  011D66  50DF               	movf	indf2,w,c
 11013  011D68  0100               	movlb	0	; () banked
 11014  011D6A  6FD1               	movwf	(??_Button_Poll+2)& (0+255),b
 11015  011D6C  6BD2               	clrf	(??_Button_Poll+3)& (0+255),b
 11016  011D6E  0100               	movlb	0	; () banked
 11017  011D70  51CF               	movf	??_Button_Poll& (0+255),w,b
 11018  011D72  0100               	movlb	0	; () banked
 11019  011D74  5DD1               	subwf	(??_Button_Poll+2)& (0+255),w,b
 11020  011D76  0100               	movlb	0	; () banked
 11021  011D78  51D2               	movf	(??_Button_Poll+3)& (0+255),w,b
 11022  011D7A  0A80               	xorlw	128
 11023  011D7C  0100               	movlb	0	; () banked
 11024  011D7E  6FD3               	movwf	(??_Button_Poll+4)& (0+255),b
 11025  011D80  0100               	movlb	0	; () banked
 11026  011D82  51D0               	movf	(??_Button_Poll+1)& (0+255),w,b
 11027  011D84  0A80               	xorlw	128
 11028  011D86  0100               	movlb	0	; () banked
 11029  011D88  59D3               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 11030  011D8A  B0D8               	btfsc	status,0,c
 11031  011D8C  0012               	return	
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;Button.c: 73: {
 11035                           ;Button.c: 75: pButton->mCount += pIncrement;
 11036  011D8E  0100               	movlb	0	; () banked
 11037  011D90  EE20 F001          	lfsr	2,1
 11038  011D94  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 11039  011D96  26D9               	addwf	fsr2l,f,c
 11040  011D98  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11041  011D9A  22DA               	addwfc	fsr2h,f,c
 11042  011D9C  0100               	movlb	0	; () banked
 11043  011D9E  51CE               	movf	Button_Poll@pIncrement& (0+255),w,b
 11044  011DA0  26DF               	addwf	indf2,f,c
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 11048  011DA2  0100               	movlb	0	; () banked
 11049  011DA4  EE20 F002          	lfsr	2,2
 11050  011DA8  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 11051  011DAA  26D9               	addwf	fsr2l,f,c
 11052  011DAC  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11053  011DAE  22DA               	addwfc	fsr2h,f,c
 11054  011DB0  0100               	movlb	0	; () banked
 11055  011DB2  EE10 F001          	lfsr	1,1
 11056  011DB6  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 11057  011DB8  26E1               	addwf	fsr1l,f,c
 11058  011DBA  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11059  011DBC  22E2               	addwfc	fsr1h,f,c
 11060  011DBE  50E7               	movf	indf1,w,c
 11061  011DC0  0100               	movlb	0	; () banked
 11062  011DC2  6FD1               	movwf	(??_Button_Poll+2)& (0+255),b
 11063  011DC4  6BD2               	clrf	(??_Button_Poll+3)& (0+255),b
 11064  011DC6  50DE               	movf	postinc2,w,c
 11065  011DC8  0100               	movlb	0	; () banked
 11066  011DCA  5DD1               	subwf	(??_Button_Poll+2)& (0+255),w,b
 11067  011DCC  50DE               	movf	postinc2,w,c
 11068  011DCE  0100               	movlb	0	; () banked
 11069  011DD0  59D2               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 11070  011DD2  A0D8               	btfss	status,0,c
 11071  011DD4  0012               	return	
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;Button.c: 77: {
 11075                           ;Button.c: 79: pButton->mState = Pin;
 11076  011DD6  C0CC  FFD9         	movff	Button_Poll@pButton,fsr2l
 11077  011DDA  C0CD  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 11078  011DDE  C0D4  FFDF         	movff	Button_Poll@Pin,indf2
 11079                           
 11080                           ; BSR set to: 0
 11081                           ;Button.c: 80: pButton->mCount = 0;
 11082  011DE2  0100               	movlb	0	; () banked
 11083  011DE4  EE20 F001          	lfsr	2,1
 11084  011DE8  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 11085  011DEA  26D9               	addwf	fsr2l,f,c
 11086  011DEC  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11087  011DEE  22DA               	addwfc	fsr2h,f,c
 11088  011DF0  0E00               	movlw	0
 11089  011DF2  6EDF               	movwf	indf2,c
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;Button.c: 83: pButton->mFunction(Pin);
 11093  011DF4  0100               	movlb	0	; () banked
 11094  011DF6  EE20 F004          	lfsr	2,4
 11095  011DFA  51CC               	movf	Button_Poll@pButton& (0+255),w,b
 11096  011DFC  26D9               	addwf	fsr2l,f,c
 11097  011DFE  51CD               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 11098  011E00  22DA               	addwfc	fsr2h,f,c
 11099  011E02  D801               	call	u7238
 11100  011E04  0012               	return	
 11101  011E06                     u7238:
 11102  011E06  0005               	push	
 11103  011E08  6EFA               	movwf	pclath,c
 11104  011E0A  50DE               	movf	postinc2,w,c
 11105  011E0C  6EFD               	movwf	tosl,c
 11106  011E0E  50DE               	movf	postinc2,w,c
 11107  011E10  6EFE               	movwf	tosh,c
 11108  011E12  50DE               	movf	postinc2,w,c
 11109  011E14  6EFF               	movwf	tosu,c
 11110  011E16  50FA               	movf	pclath,w,c
 11111  011E18  0100               	movlb	0	; () banked
 11112  011E1A  51D4               	movf	Button_Poll@Pin& (0+255),w,b
 11113  011E1C  0012               	return		;indir
 11114  011E1E                     __end_of_Button_Poll:
 11115                           	opt stack 0
 11116                           tosu	equ	0xFFF
 11117                           tosh	equ	0xFFE
 11118                           tosl	equ	0xFFD
 11119                           pclath	equ	0xFFA
 11120                           tblptru	equ	0xFF8
 11121                           tblptrh	equ	0xFF7
 11122                           tblptrl	equ	0xFF6
 11123                           tablat	equ	0xFF5
 11124                           prodh	equ	0xFF4
 11125                           prodl	equ	0xFF3
 11126                           intcon	equ	0xFF2
 11127                           postinc0	equ	0xFEE
 11128                           wreg	equ	0xFE8
 11129                           indf1	equ	0xFE7
 11130                           postdec1	equ	0xFE5
 11131                           plusw1	equ	0xFE3
 11132                           fsr1h	equ	0xFE2
 11133                           fsr1l	equ	0xFE1
 11134                           indf2	equ	0xFDF
 11135                           postinc2	equ	0xFDE
 11136                           postdec2	equ	0xFDD
 11137                           plusw2	equ	0xFDB
 11138                           fsr2h	equ	0xFDA
 11139                           fsr2l	equ	0xFD9
 11140                           status	equ	0xFD8
 11141                           
 11142 ;; *************** function _MXK_DIPSwitch *****************
 11143 ;; Defined at:
 11144 ;;		line 24 in file "Library/MXK.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;		None
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      unsigned char 
 11151 ;; Registers used:
 11152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;Total ram usage:        0 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    8
 11165 ;; This function calls:
 11166 ;;		_Port_GetQuad
 11167 ;; This function is called by:
 11168 ;;		_FunctInitButton
 11169 ;;		_Button_Poll
 11170 ;;		_main
 11171 ;; This function uses a non-reentrant model
 11172 ;;
 11173                           
 11174                           	psect	text53
 11175  014596                     __ptext53:
 11176                           	opt stack 0
 11177  014596                     _MXK_DIPSwitch:
 11178                           	opt stack 22
 11179                           
 11180                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 11181                           
 11182                           ;incstack = 0
 11183  014596  0E8B               	movlw	low _PortD
 11184  014598  0100               	movlb	0	; () banked
 11185  01459A  6FB1               	movwf	Port_GetQuad@pInput& (0+255),b
 11186  01459C  0E00               	movlw	high _PortD
 11187  01459E  0100               	movlb	0	; () banked
 11188  0145A0  6FB2               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 11189  0145A2  0E00               	movlw	0
 11190  0145A4  0100               	movlb	0	; () banked
 11191  0145A6  6FB3               	movwf	Port_GetQuad@pQuad& (0+255),b
 11192  0145A8  ECB5  F09E         	call	_Port_GetQuad
 11193  0145AC  0012               	return	
 11194  0145AE                     __end_of_MXK_DIPSwitch:
 11195                           	opt stack 0
 11196                           tosu	equ	0xFFF
 11197                           tosh	equ	0xFFE
 11198                           tosl	equ	0xFFD
 11199                           pclath	equ	0xFFA
 11200                           tblptru	equ	0xFF8
 11201                           tblptrh	equ	0xFF7
 11202                           tblptrl	equ	0xFF6
 11203                           tablat	equ	0xFF5
 11204                           prodh	equ	0xFF4
 11205                           prodl	equ	0xFF3
 11206                           intcon	equ	0xFF2
 11207                           postinc0	equ	0xFEE
 11208                           wreg	equ	0xFE8
 11209                           indf1	equ	0xFE7
 11210                           postdec1	equ	0xFE5
 11211                           plusw1	equ	0xFE3
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           plusw2	equ	0xFDB
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _HMI_DIPSwitch *****************
 11223 ;; Defined at:
 11224 ;;		line 47 in file "HMI.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;		None
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      unsigned char 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;Total ram usage:        0 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    8
 11245 ;; This function calls:
 11246 ;;		_Port_GetQuad
 11247 ;; This function is called by:
 11248 ;;		_HMI_Init
 11249 ;;		_Button_Poll
 11250 ;;		_main
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           	psect	text54
 11255  0145AE                     __ptext54:
 11256                           	opt stack 0
 11257  0145AE                     _HMI_DIPSwitch:
 11258                           	opt stack 20
 11259                           
 11260                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 11261                           
 11262                           ;incstack = 0
 11263  0145AE  0E81               	movlw	low _PortE
 11264  0145B0  0100               	movlb	0	; () banked
 11265  0145B2  6FB1               	movwf	Port_GetQuad@pInput& (0+255),b
 11266  0145B4  0E00               	movlw	high _PortE
 11267  0145B6  0100               	movlb	0	; () banked
 11268  0145B8  6FB2               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 11269  0145BA  0E00               	movlw	0
 11270  0145BC  0100               	movlb	0	; () banked
 11271  0145BE  6FB3               	movwf	Port_GetQuad@pQuad& (0+255),b
 11272  0145C0  ECB5  F09E         	call	_Port_GetQuad	;wreg free
 11273  0145C4  0012               	return	
 11274  0145C6                     __end_of_HMI_DIPSwitch:
 11275                           	opt stack 0
 11276                           tosu	equ	0xFFF
 11277                           tosh	equ	0xFFE
 11278                           tosl	equ	0xFFD
 11279                           pclath	equ	0xFFA
 11280                           tblptru	equ	0xFF8
 11281                           tblptrh	equ	0xFF7
 11282                           tblptrl	equ	0xFF6
 11283                           tablat	equ	0xFF5
 11284                           prodh	equ	0xFF4
 11285                           prodl	equ	0xFF3
 11286                           intcon	equ	0xFF2
 11287                           postinc0	equ	0xFEE
 11288                           wreg	equ	0xFE8
 11289                           indf1	equ	0xFE7
 11290                           postdec1	equ	0xFE5
 11291                           plusw1	equ	0xFE3
 11292                           fsr1h	equ	0xFE2
 11293                           fsr1l	equ	0xFE1
 11294                           indf2	equ	0xFDF
 11295                           postinc2	equ	0xFDE
 11296                           postdec2	equ	0xFDD
 11297                           plusw2	equ	0xFDB
 11298                           fsr2h	equ	0xFDA
 11299                           fsr2l	equ	0xFD9
 11300                           status	equ	0xFD8
 11301                           
 11302 ;; *************** function _HMI_DownSwitch *****************
 11303 ;; Defined at:
 11304 ;;		line 42 in file "HMI.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;		None
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;		None
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      unsigned char 
 11311 ;; Registers used:
 11312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;Total ram usage:        0 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    8
 11325 ;; This function calls:
 11326 ;;		_Port_GetPin
 11327 ;; This function is called by:
 11328 ;;		_HMI_Init
 11329 ;;		_Button_Poll
 11330 ;;		_main
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text55
 11335  0145C6                     __ptext55:
 11336                           	opt stack 0
 11337  0145C6                     _HMI_DownSwitch:
 11338                           	opt stack 20
 11339                           
 11340                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 11341                           
 11342                           ;incstack = 0
 11343  0145C6  0E81               	movlw	low _PortE
 11344  0145C8  0100               	movlb	0	; () banked
 11345  0145CA  6FB1               	movwf	Port_GetPin@pInput& (0+255),b
 11346  0145CC  0E00               	movlw	high _PortE
 11347  0145CE  0100               	movlb	0	; () banked
 11348  0145D0  6FB2               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11349  0145D2  0E06               	movlw	6
 11350  0145D4  0100               	movlb	0	; () banked
 11351  0145D6  6FB3               	movwf	Port_GetPin@pPin& (0+255),b
 11352  0145D8  EC22  F09F         	call	_Port_GetPin	;wreg free
 11353  0145DC  0012               	return	
 11354  0145DE                     __end_of_HMI_DownSwitch:
 11355                           	opt stack 0
 11356                           tosu	equ	0xFFF
 11357                           tosh	equ	0xFFE
 11358                           tosl	equ	0xFFD
 11359                           pclath	equ	0xFFA
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           intcon	equ	0xFF2
 11367                           postinc0	equ	0xFEE
 11368                           wreg	equ	0xFE8
 11369                           indf1	equ	0xFE7
 11370                           postdec1	equ	0xFE5
 11371                           plusw1	equ	0xFE3
 11372                           fsr1h	equ	0xFE2
 11373                           fsr1l	equ	0xFE1
 11374                           indf2	equ	0xFDF
 11375                           postinc2	equ	0xFDE
 11376                           postdec2	equ	0xFDD
 11377                           plusw2	equ	0xFDB
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function _HMI_UpSwitch *****************
 11383 ;; Defined at:
 11384 ;;		line 37 in file "HMI.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;		None
 11387 ;; Auto vars:     Size  Location     Type
 11388 ;;		None
 11389 ;; Return value:  Size  Location     Type
 11390 ;;                  1    wreg      unsigned char 
 11391 ;; Registers used:
 11392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11393 ;; Tracked objects:
 11394 ;;		On entry : 0/0
 11395 ;;		On exit  : 0/0
 11396 ;;		Unchanged: 0/0
 11397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;Total ram usage:        0 bytes
 11403 ;; Hardware stack levels used:    1
 11404 ;; Hardware stack levels required when called:    8
 11405 ;; This function calls:
 11406 ;;		_Port_GetPin
 11407 ;; This function is called by:
 11408 ;;		_HMI_Init
 11409 ;;		_Button_Poll
 11410 ;;		_main
 11411 ;; This function uses a non-reentrant model
 11412 ;;
 11413                           
 11414                           	psect	text56
 11415  0145DE                     __ptext56:
 11416                           	opt stack 0
 11417  0145DE                     _HMI_UpSwitch:
 11418                           	opt stack 22
 11419                           
 11420                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11421                           
 11422                           ;incstack = 0
 11423  0145DE  0E81               	movlw	low _PortE
 11424  0145E0  0100               	movlb	0	; () banked
 11425  0145E2  6FB1               	movwf	Port_GetPin@pInput& (0+255),b
 11426  0145E4  0E00               	movlw	high _PortE
 11427  0145E6  0100               	movlb	0	; () banked
 11428  0145E8  6FB2               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11429  0145EA  0E07               	movlw	7
 11430  0145EC  0100               	movlb	0	; () banked
 11431  0145EE  6FB3               	movwf	Port_GetPin@pPin& (0+255),b
 11432  0145F0  EC22  F09F         	call	_Port_GetPin	;wreg free
 11433  0145F4  0012               	return	
 11434  0145F6                     __end_of_HMI_UpSwitch:
 11435                           	opt stack 0
 11436                           tosu	equ	0xFFF
 11437                           tosh	equ	0xFFE
 11438                           tosl	equ	0xFFD
 11439                           pclath	equ	0xFFA
 11440                           tblptru	equ	0xFF8
 11441                           tblptrh	equ	0xFF7
 11442                           tblptrl	equ	0xFF6
 11443                           tablat	equ	0xFF5
 11444                           prodh	equ	0xFF4
 11445                           prodl	equ	0xFF3
 11446                           intcon	equ	0xFF2
 11447                           postinc0	equ	0xFEE
 11448                           wreg	equ	0xFE8
 11449                           indf1	equ	0xFE7
 11450                           postdec1	equ	0xFE5
 11451                           plusw1	equ	0xFE3
 11452                           fsr1h	equ	0xFE2
 11453                           fsr1l	equ	0xFE1
 11454                           indf2	equ	0xFDF
 11455                           postinc2	equ	0xFDE
 11456                           postdec2	equ	0xFDD
 11457                           plusw2	equ	0xFDB
 11458                           fsr2h	equ	0xFDA
 11459                           fsr2l	equ	0xFD9
 11460                           status	equ	0xFD8
 11461                           
 11462 ;; *************** function _HMI_RightSwitch *****************
 11463 ;; Defined at:
 11464 ;;		line 32 in file "HMI.c"
 11465 ;; Parameters:    Size  Location     Type
 11466 ;;		None
 11467 ;; Auto vars:     Size  Location     Type
 11468 ;;		None
 11469 ;; Return value:  Size  Location     Type
 11470 ;;                  1    wreg      unsigned char 
 11471 ;; Registers used:
 11472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11473 ;; Tracked objects:
 11474 ;;		On entry : 0/0
 11475 ;;		On exit  : 0/0
 11476 ;;		Unchanged: 0/0
 11477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;Total ram usage:        0 bytes
 11483 ;; Hardware stack levels used:    1
 11484 ;; Hardware stack levels required when called:    8
 11485 ;; This function calls:
 11486 ;;		_Port_GetPin
 11487 ;; This function is called by:
 11488 ;;		_HMI_Init
 11489 ;;		_Button_Poll
 11490 ;;		_main
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text57
 11495  0145F6                     __ptext57:
 11496                           	opt stack 0
 11497  0145F6                     _HMI_RightSwitch:
 11498                           	opt stack 22
 11499                           
 11500                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11501                           
 11502                           ;incstack = 0
 11503  0145F6  0E81               	movlw	low _PortE
 11504  0145F8  0100               	movlb	0	; () banked
 11505  0145FA  6FB1               	movwf	Port_GetPin@pInput& (0+255),b
 11506  0145FC  0E00               	movlw	high _PortE
 11507  0145FE  0100               	movlb	0	; () banked
 11508  014600  6FB2               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11509  014602  0E04               	movlw	4
 11510  014604  0100               	movlb	0	; () banked
 11511  014606  6FB3               	movwf	Port_GetPin@pPin& (0+255),b
 11512  014608  EC22  F09F         	call	_Port_GetPin	;wreg free
 11513  01460C  0012               	return	
 11514  01460E                     __end_of_HMI_RightSwitch:
 11515                           	opt stack 0
 11516                           tosu	equ	0xFFF
 11517                           tosh	equ	0xFFE
 11518                           tosl	equ	0xFFD
 11519                           pclath	equ	0xFFA
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           intcon	equ	0xFF2
 11527                           postinc0	equ	0xFEE
 11528                           wreg	equ	0xFE8
 11529                           indf1	equ	0xFE7
 11530                           postdec1	equ	0xFE5
 11531                           plusw1	equ	0xFE3
 11532                           fsr1h	equ	0xFE2
 11533                           fsr1l	equ	0xFE1
 11534                           indf2	equ	0xFDF
 11535                           postinc2	equ	0xFDE
 11536                           postdec2	equ	0xFDD
 11537                           plusw2	equ	0xFDB
 11538                           fsr2h	equ	0xFDA
 11539                           fsr2l	equ	0xFD9
 11540                           status	equ	0xFD8
 11541                           
 11542 ;; *************** function _HMI_LeftSwitch *****************
 11543 ;; Defined at:
 11544 ;;		line 27 in file "HMI.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;		None
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      unsigned char 
 11551 ;; Registers used:
 11552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11562 ;;Total ram usage:        0 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    8
 11565 ;; This function calls:
 11566 ;;		_Port_GetPin
 11567 ;; This function is called by:
 11568 ;;		_HMI_Init
 11569 ;;		_Button_Poll
 11570 ;;		_main
 11571 ;; This function uses a non-reentrant model
 11572 ;;
 11573                           
 11574                           	psect	text58
 11575  01460E                     __ptext58:
 11576                           	opt stack 0
 11577  01460E                     _HMI_LeftSwitch:
 11578                           	opt stack 20
 11579                           
 11580                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11581                           
 11582                           ;incstack = 0
 11583  01460E  0E81               	movlw	low _PortE
 11584  014610  0100               	movlb	0	; () banked
 11585  014612  6FB1               	movwf	Port_GetPin@pInput& (0+255),b
 11586  014614  0E00               	movlw	high _PortE
 11587  014616  0100               	movlb	0	; () banked
 11588  014618  6FB2               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11589  01461A  0E05               	movlw	5
 11590  01461C  0100               	movlb	0	; () banked
 11591  01461E  6FB3               	movwf	Port_GetPin@pPin& (0+255),b
 11592  014620  EC22  F09F         	call	_Port_GetPin	;wreg free
 11593  014624  0012               	return	
 11594  014626                     __end_of_HMI_LeftSwitch:
 11595                           	opt stack 0
 11596                           tosu	equ	0xFFF
 11597                           tosh	equ	0xFFE
 11598                           tosl	equ	0xFFD
 11599                           pclath	equ	0xFFA
 11600                           tblptru	equ	0xFF8
 11601                           tblptrh	equ	0xFF7
 11602                           tblptrl	equ	0xFF6
 11603                           tablat	equ	0xFF5
 11604                           prodh	equ	0xFF4
 11605                           prodl	equ	0xFF3
 11606                           intcon	equ	0xFF2
 11607                           postinc0	equ	0xFEE
 11608                           wreg	equ	0xFE8
 11609                           indf1	equ	0xFE7
 11610                           postdec1	equ	0xFE5
 11611                           plusw1	equ	0xFE3
 11612                           fsr1h	equ	0xFE2
 11613                           fsr1l	equ	0xFE1
 11614                           indf2	equ	0xFDF
 11615                           postinc2	equ	0xFDE
 11616                           postdec2	equ	0xFDD
 11617                           plusw2	equ	0xFDB
 11618                           fsr2h	equ	0xFDA
 11619                           fsr2l	equ	0xFD9
 11620                           status	equ	0xFD8
 11621                           
 11622 ;; *************** function _MXK_TestButton *****************
 11623 ;; Defined at:
 11624 ;;		line 14 in file "Library/MXK.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;		None
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;		None
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      unsigned char 
 11631 ;; Registers used:
 11632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11633 ;; Tracked objects:
 11634 ;;		On entry : 0/0
 11635 ;;		On exit  : 0/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;Total ram usage:        0 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; Hardware stack levels required when called:    8
 11645 ;; This function calls:
 11646 ;;		_Port_GetPin
 11647 ;; This function is called by:
 11648 ;;		_FunctInitButton
 11649 ;;		_Button_Poll
 11650 ;;		_main
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           	psect	text59
 11655  014626                     __ptext59:
 11656                           	opt stack 0
 11657  014626                     _MXK_TestButton:
 11658                           	opt stack 22
 11659                           
 11660                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11661                           
 11662                           ;incstack = 0
 11663  014626  0E95               	movlw	low _PortB
 11664  014628  0100               	movlb	0	; () banked
 11665  01462A  6FB1               	movwf	Port_GetPin@pInput& (0+255),b
 11666  01462C  0E01               	movlw	high _PortB
 11667  01462E  0100               	movlb	0	; () banked
 11668  014630  6FB2               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11669  014632  0E04               	movlw	4
 11670  014634  0100               	movlb	0	; () banked
 11671  014636  6FB3               	movwf	Port_GetPin@pPin& (0+255),b
 11672  014638  EC22  F09F         	call	_Port_GetPin	;wreg free
 11673  01463C  0012               	return	
 11674  01463E                     __end_of_MXK_TestButton:
 11675                           	opt stack 0
 11676                           tosu	equ	0xFFF
 11677                           tosh	equ	0xFFE
 11678                           tosl	equ	0xFFD
 11679                           pclath	equ	0xFFA
 11680                           tblptru	equ	0xFF8
 11681                           tblptrh	equ	0xFF7
 11682                           tblptrl	equ	0xFF6
 11683                           tablat	equ	0xFF5
 11684                           prodh	equ	0xFF4
 11685                           prodl	equ	0xFF3
 11686                           intcon	equ	0xFF2
 11687                           postinc0	equ	0xFEE
 11688                           wreg	equ	0xFE8
 11689                           indf1	equ	0xFE7
 11690                           postdec1	equ	0xFE5
 11691                           plusw1	equ	0xFE3
 11692                           fsr1h	equ	0xFE2
 11693                           fsr1l	equ	0xFE1
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           plusw2	equ	0xFDB
 11698                           fsr2h	equ	0xFDA
 11699                           fsr2l	equ	0xFD9
 11700                           status	equ	0xFD8
 11701                           
 11702 ;; *************** function _Port_GetQuad *****************
 11703 ;; Defined at:
 11704 ;;		line 498 in file "Library/Port.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11707 ;;		 -> PortE(10), PortD(10), 
 11708 ;;  pQuad           1    2[BANK0 ] enum E6776
 11709 ;; Auto vars:     Size  Location     Type
 11710 ;;  Output          1    5[BANK0 ] unsigned char 
 11711 ;; Return value:  Size  Location     Type
 11712 ;;                  1    wreg      unsigned char 
 11713 ;; Registers used:
 11714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11715 ;; Tracked objects:
 11716 ;;		On entry : 0/0
 11717 ;;		On exit  : 0/0
 11718 ;;		Unchanged: 0/0
 11719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11720 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11723 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;Total ram usage:        6 bytes
 11725 ;; Hardware stack levels used:    1
 11726 ;; Hardware stack levels required when called:    7
 11727 ;; This function calls:
 11728 ;;		Nothing
 11729 ;; This function is called by:
 11730 ;;		_HMI_DIPSwitch
 11731 ;;		_MXK_DIPSwitch
 11732 ;;		_Port_ToggleQuad
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           	psect	text60
 11737  013D6A                     __ptext60:
 11738                           	opt stack 0
 11739  013D6A                     _Port_GetQuad:
 11740                           	opt stack 22
 11741                           
 11742                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11743                           
 11744                           ;incstack = 0
 11745  013D6A  0100               	movlb	0	; () banked
 11746  013D6C  EE20 F006          	lfsr	2,6
 11747  013D70  51B1               	movf	Port_GetQuad@pInput& (0+255),w,b
 11748  013D72  26D9               	addwf	fsr2l,f,c
 11749  013D74  51B2               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11750  013D76  22DA               	addwfc	fsr2h,f,c
 11751  013D78  CFDE F0B4          	movff	postinc2,??_Port_GetQuad
 11752  013D7C  CFDD F0B5          	movff	postdec2,??_Port_GetQuad+1
 11753  013D80  C0B4  FFD9         	movff	??_Port_GetQuad,fsr2l
 11754  013D84  C0B5  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11755  013D88  50DF               	movf	indf2,w,c
 11756  013D8A  0100               	movlb	0	; () banked
 11757  013D8C  6FB6               	movwf	Port_GetQuad@Output& (0+255),b
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11761  013D8E  0100               	movlb	0	; () banked
 11762  013D90  51B3               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11763  013D92  0D04               	mullw	4
 11764  013D94  28F3               	incf	prodl,w,c
 11765  013D96  0100               	movlb	0	; () banked
 11766  013D98  6FB4               	movwf	??_Port_GetQuad& (0+255),b
 11767  013D9A  D003               	goto	u6690
 11768  013D9C                     u6695:
 11769  013D9C  0100               	movlb	0	; () banked
 11770  013D9E  90D8               	bcf	status,0,c
 11771  013DA0  33B6               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11772  013DA2                     u6690:
 11773  013DA2  0100               	movlb	0	; () banked
 11774  013DA4  2FB4               	decfsz	??_Port_GetQuad& (0+255),f,b
 11775  013DA6  D7FA               	goto	u6695
 11776                           
 11777                           ;Port.c: 502: Output &= 0xF;
 11778  013DA8  0E0F               	movlw	15
 11779  013DAA  0100               	movlb	0	; () banked
 11780  013DAC  17B6               	andwf	Port_GetQuad@Output& (0+255),f,b
 11781                           
 11782                           ; BSR set to: 0
 11783                           ;Port.c: 503: return Output;
 11784  013DAE  0100               	movlb	0	; () banked
 11785  013DB0  51B6               	movf	Port_GetQuad@Output& (0+255),w,b
 11786  013DB2  0012               	return	
 11787  013DB4                     __end_of_Port_GetQuad:
 11788                           	opt stack 0
 11789                           tosu	equ	0xFFF
 11790                           tosh	equ	0xFFE
 11791                           tosl	equ	0xFFD
 11792                           pclath	equ	0xFFA
 11793                           tblptru	equ	0xFF8
 11794                           tblptrh	equ	0xFF7
 11795                           tblptrl	equ	0xFF6
 11796                           tablat	equ	0xFF5
 11797                           prodh	equ	0xFF4
 11798                           prodl	equ	0xFF3
 11799                           intcon	equ	0xFF2
 11800                           postinc0	equ	0xFEE
 11801                           wreg	equ	0xFE8
 11802                           indf1	equ	0xFE7
 11803                           postdec1	equ	0xFE5
 11804                           plusw1	equ	0xFE3
 11805                           fsr1h	equ	0xFE2
 11806                           fsr1l	equ	0xFE1
 11807                           indf2	equ	0xFDF
 11808                           postinc2	equ	0xFDE
 11809                           postdec2	equ	0xFDD
 11810                           plusw2	equ	0xFDB
 11811                           fsr2h	equ	0xFDA
 11812                           fsr2l	equ	0xFD9
 11813                           status	equ	0xFD8
 11814                           
 11815 ;; *************** function _Event_DIPSwitch *****************
 11816 ;; Defined at:
 11817 ;;		line 17 in file "Events.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;  pState          1    wreg     unsigned char 
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  pState          1   25[BANK0 ] unsigned char 
 11822 ;;  Bar             1   26[BANK0 ] unsigned char 
 11823 ;; Return value:  Size  Location     Type
 11824 ;;                  1    wreg      void 
 11825 ;; Registers used:
 11826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11827 ;; Tracked objects:
 11828 ;;		On entry : 0/0
 11829 ;;		On exit  : 0/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11833 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11836 ;;Total ram usage:        2 bytes
 11837 ;; Hardware stack levels used:    1
 11838 ;; Hardware stack levels required when called:   13
 11839 ;; This function calls:
 11840 ;;		_HMI_GetBar
 11841 ;;		_HMI_SetBar
 11842 ;;		_LED_Toggle
 11843 ;; This function is called by:
 11844 ;;		_FunctInitButton
 11845 ;;		_Button_Poll
 11846 ;; This function uses a non-reentrant model
 11847 ;;
 11848                           
 11849                           	psect	text61
 11850  014308                     __ptext61:
 11851                           	opt stack 0
 11852  014308                     _Event_DIPSwitch:
 11853                           	opt stack 15
 11854                           
 11855                           ; BSR set to: 0
 11856                           ;incstack = 0
 11857                           ;Event_DIPSwitch@pState stored from wreg
 11858  014308  0100               	movlb	0	; () banked
 11859  01430A  6FCA               	movwf	Event_DIPSwitch@pState& (0+255),b
 11860                           
 11861                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
 11862  01430C  ECAC  F0A3         	call	_HMI_GetBar	;wreg free
 11863  014310  0100               	movlb	0	; () banked
 11864  014312  6FCB               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;Events.c: 20: Bar &= 0x0F;
 11868  014314  0E0F               	movlw	15
 11869  014316  0100               	movlb	0	; () banked
 11870  014318  17CB               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;Events.c: 21: pState <<= 4;
 11874  01431A  0100               	movlb	0	; () banked
 11875  01431C  3BCA               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11876  01431E  0EF0               	movlw	240
 11877  014320  17CA               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;Events.c: 24: HMI_SetBar(pState | Bar);
 11881  014322  0100               	movlb	0	; () banked
 11882  014324  51CA               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11883  014326  0100               	movlb	0	; () banked
 11884  014328  11CB               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11885  01432A  EC97  F0A3         	call	_HMI_SetBar
 11886                           
 11887                           ;Events.c: 27: LED_Toggle(eLED1);
 11888  01432E  0E00               	movlw	0
 11889  014330  ECFE  F09E         	call	_LED_Toggle
 11890  014334  0012               	return		;funcret
 11891  014336                     __end_of_Event_DIPSwitch:
 11892                           	opt stack 0
 11893                           tosu	equ	0xFFF
 11894                           tosh	equ	0xFFE
 11895                           tosl	equ	0xFFD
 11896                           pclath	equ	0xFFA
 11897                           tblptru	equ	0xFF8
 11898                           tblptrh	equ	0xFF7
 11899                           tblptrl	equ	0xFF6
 11900                           tablat	equ	0xFF5
 11901                           prodh	equ	0xFF4
 11902                           prodl	equ	0xFF3
 11903                           intcon	equ	0xFF2
 11904                           postinc0	equ	0xFEE
 11905                           wreg	equ	0xFE8
 11906                           indf1	equ	0xFE7
 11907                           postdec1	equ	0xFE5
 11908                           plusw1	equ	0xFE3
 11909                           fsr1h	equ	0xFE2
 11910                           fsr1l	equ	0xFE1
 11911                           indf2	equ	0xFDF
 11912                           postinc2	equ	0xFDE
 11913                           postdec2	equ	0xFDD
 11914                           plusw2	equ	0xFDB
 11915                           fsr2h	equ	0xFDA
 11916                           fsr2l	equ	0xFD9
 11917                           status	equ	0xFD8
 11918                           
 11919 ;; *************** function _Event_HMI_DownButton *****************
 11920 ;; Defined at:
 11921 ;;		line 123 in file "Events.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  pState          1    wreg     unsigned char 
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;  pState          1   25[BANK0 ] unsigned char 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;Total ram usage:        1 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:   13
 11942 ;; This function calls:
 11943 ;;		_HMI_SetDown
 11944 ;;		_HMI_SetNumber
 11945 ;;		_LED_Toggle
 11946 ;; This function is called by:
 11947 ;;		_HMI_Init
 11948 ;;		_Button_Poll
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           	psect	text62
 11953  0141E6                     __ptext62:
 11954                           	opt stack 0
 11955  0141E6                     _Event_HMI_DownButton:
 11956                           	opt stack 15
 11957                           
 11958                           ;incstack = 0
 11959                           ;Event_HMI_DownButton@pState stored from wreg
 11960  0141E6  0100               	movlb	0	; () banked
 11961  0141E8  6FCA               	movwf	Event_HMI_DownButton@pState& (0+255),b
 11962                           
 11963                           ;Events.c: 126: HMI_SetDown(pState);
 11964  0141EA  0100               	movlb	0	; () banked
 11965  0141EC  51CA               	movf	Event_HMI_DownButton@pState& (0+255),w,b
 11966  0141EE  EC4B  F0A3         	call	_HMI_SetDown
 11967                           
 11968                           ;Events.c: 128: if (pState == 0)
 11969  0141F2  0100               	movlb	0	; () banked
 11970  0141F4  51CA               	movf	Event_HMI_DownButton@pState& (0+255),w,b
 11971  0141F6  0100               	movlb	0	; () banked
 11972  0141F8  A4D8               	btfss	status,2,c
 11973  0141FA  D00A               	goto	l10799
 11974                           
 11975                           ; BSR set to: 0
 11976                           ;Events.c: 129: {
 11977                           ;Events.c: 130: val -= 1;
 11978  0141FC  0100               	movlb	0	; () banked
 11979  0141FE  0773               	decf	_val& (0+255),f,b
 11980  014200  A0D8               	btfss	status,0,c
 11981  014202  0774               	decf	(_val+1)& (0+255),f,b
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;Events.c: 131: HMI_SetNumber(val);
 11985  014204  C073  F0C2         	movff	_val,HMI_SetNumber@pInput
 11986  014208  C074  F0C3         	movff	_val+1,HMI_SetNumber@pInput+1
 11987  01420C  ECDD  F0A1         	call	_HMI_SetNumber	;wreg free
 11988  014210                     l10799:
 11989                           
 11990                           ;Events.c: 132: }
 11991                           ;Events.c: 135: LED_Toggle(eLED1);
 11992  014210  0E00               	movlw	0
 11993  014212  ECFE  F09E         	call	_LED_Toggle
 11994  014216  0012               	return		;funcret
 11995  014218                     __end_of_Event_HMI_DownButton:
 11996                           	opt stack 0
 11997                           tosu	equ	0xFFF
 11998                           tosh	equ	0xFFE
 11999                           tosl	equ	0xFFD
 12000                           pclath	equ	0xFFA
 12001                           tblptru	equ	0xFF8
 12002                           tblptrh	equ	0xFF7
 12003                           tblptrl	equ	0xFF6
 12004                           tablat	equ	0xFF5
 12005                           prodh	equ	0xFF4
 12006                           prodl	equ	0xFF3
 12007                           intcon	equ	0xFF2
 12008                           postinc0	equ	0xFEE
 12009                           wreg	equ	0xFE8
 12010                           indf1	equ	0xFE7
 12011                           postdec1	equ	0xFE5
 12012                           plusw1	equ	0xFE3
 12013                           fsr1h	equ	0xFE2
 12014                           fsr1l	equ	0xFE1
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           plusw2	equ	0xFDB
 12019                           fsr2h	equ	0xFDA
 12020                           fsr2l	equ	0xFD9
 12021                           status	equ	0xFD8
 12022                           
 12023 ;; *************** function _Event_HMI_UpButton *****************
 12024 ;; Defined at:
 12025 ;;		line 108 in file "Events.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;  pState          1    wreg     unsigned char 
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;  pState          1   25[BANK0 ] unsigned char 
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  1    wreg      void 
 12032 ;; Registers used:
 12033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12043 ;;Total ram usage:        1 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:   13
 12046 ;; This function calls:
 12047 ;;		_HMI_SetNumber
 12048 ;;		_HMI_SetUp
 12049 ;;		_LED_Toggle
 12050 ;; This function is called by:
 12051 ;;		_HMI_Init
 12052 ;;		_Button_Poll
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           	psect	text63
 12057  014248                     __ptext63:
 12058                           	opt stack 0
 12059  014248                     _Event_HMI_UpButton:
 12060                           	opt stack 15
 12061                           
 12062                           ;incstack = 0
 12063                           ;Event_HMI_UpButton@pState stored from wreg
 12064  014248  0100               	movlb	0	; () banked
 12065  01424A  6FCA               	movwf	Event_HMI_UpButton@pState& (0+255),b
 12066                           
 12067                           ;Events.c: 111: HMI_SetUp(pState);
 12068  01424C  0100               	movlb	0	; () banked
 12069  01424E  51CA               	movf	Event_HMI_UpButton@pState& (0+255),w,b
 12070  014250  EC2A  F0A3         	call	_HMI_SetUp
 12071                           
 12072                           ;Events.c: 113: if (pState == 0)
 12073  014254  0100               	movlb	0	; () banked
 12074  014256  51CA               	movf	Event_HMI_UpButton@pState& (0+255),w,b
 12075  014258  0100               	movlb	0	; () banked
 12076  01425A  A4D8               	btfss	status,2,c
 12077  01425C  D009               	goto	l10789
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;Events.c: 114: {
 12081                           ;Events.c: 115: val += 1;
 12082  01425E  0100               	movlb	0	; () banked
 12083  014260  4B73               	infsnz	_val& (0+255),f,b
 12084  014262  2B74               	incf	(_val+1)& (0+255),f,b
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;Events.c: 116: HMI_SetNumber(val);
 12088  014264  C073  F0C2         	movff	_val,HMI_SetNumber@pInput
 12089  014268  C074  F0C3         	movff	_val+1,HMI_SetNumber@pInput+1
 12090  01426C  ECDD  F0A1         	call	_HMI_SetNumber	;wreg free
 12091  014270                     l10789:
 12092                           
 12093                           ;Events.c: 117: }
 12094                           ;Events.c: 120: LED_Toggle(eLED1);
 12095  014270  0E00               	movlw	0
 12096  014272  ECFE  F09E         	call	_LED_Toggle
 12097  014276  0012               	return		;funcret
 12098  014278                     __end_of_Event_HMI_UpButton:
 12099                           	opt stack 0
 12100                           tosu	equ	0xFFF
 12101                           tosh	equ	0xFFE
 12102                           tosl	equ	0xFFD
 12103                           pclath	equ	0xFFA
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           postinc0	equ	0xFEE
 12112                           wreg	equ	0xFE8
 12113                           indf1	equ	0xFE7
 12114                           postdec1	equ	0xFE5
 12115                           plusw1	equ	0xFE3
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           plusw2	equ	0xFDB
 12122                           fsr2h	equ	0xFDA
 12123                           fsr2l	equ	0xFD9
 12124                           status	equ	0xFD8
 12125                           
 12126 ;; *************** function _Event_HMI_RightButton *****************
 12127 ;; Defined at:
 12128 ;;		line 91 in file "Events.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;  pState          1    wreg     unsigned char 
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;  pState          1   25[BANK0 ] unsigned char 
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      void 
 12135 ;; Registers used:
 12136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12145 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12146 ;;Total ram usage:        1 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:   13
 12149 ;; This function calls:
 12150 ;;		_HMI_SetBar
 12151 ;;		_HMI_SetRight
 12152 ;;		_LED_Toggle
 12153 ;; This function is called by:
 12154 ;;		_HMI_Init
 12155 ;;		_Button_Poll
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           	psect	text64
 12160  013F14                     __ptext64:
 12161                           	opt stack 0
 12162  013F14                     _Event_HMI_RightButton:
 12163                           	opt stack 15
 12164                           
 12165                           ;incstack = 0
 12166                           ;Event_HMI_RightButton@pState stored from wreg
 12167  013F14  0100               	movlb	0	; () banked
 12168  013F16  6FCA               	movwf	Event_HMI_RightButton@pState& (0+255),b
 12169                           
 12170                           ;Events.c: 94: HMI_SetRight(pState);
 12171  013F18  0100               	movlb	0	; () banked
 12172  013F1A  51CA               	movf	Event_HMI_RightButton@pState& (0+255),w,b
 12173  013F1C  EC35  F0A3         	call	_HMI_SetRight
 12174                           
 12175                           ;Events.c: 96: if (pState == 0)
 12176  013F20  0100               	movlb	0	; () banked
 12177  013F22  51CA               	movf	Event_HMI_RightButton@pState& (0+255),w,b
 12178  013F24  0100               	movlb	0	; () banked
 12179  013F26  A4D8               	btfss	status,2,c
 12180  013F28  D013               	goto	l10779
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;Events.c: 97: {
 12184                           ;Events.c: 98: if (pShiftVal == 0)
 12185  013F2A  0100               	movlb	0	; () banked
 12186  013F2C  5171               	movf	_pShiftVal& (0+255),w,b
 12187  013F2E  0100               	movlb	0	; () banked
 12188  013F30  1172               	iorwf	(_pShiftVal+1)& (0+255),w,b
 12189  013F32  A4D8               	btfss	status,2,c
 12190  013F34  D005               	goto	l10775
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;Events.c: 99: pShiftVal = 0xFF00;
 12194  013F36  0EFF               	movlw	255
 12195  013F38  0100               	movlb	0	; () banked
 12196  013F3A  6F72               	movwf	(_pShiftVal+1)& (0+255),b
 12197  013F3C  0E00               	movlw	0
 12198  013F3E  6F71               	movwf	_pShiftVal& (0+255),b
 12199  013F40                     l10775:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;Events.c: 100: pShiftVal >>= 1;
 12203  013F40  0100               	movlb	0	; () banked
 12204  013F42  90D8               	bcf	status,0,c
 12205  013F44  3372               	rrcf	(_pShiftVal+1)& (0+255),f,b
 12206  013F46  3371               	rrcf	_pShiftVal& (0+255),f,b
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
 12210  013F48  0100               	movlb	0	; () banked
 12211  013F4A  5171               	movf	_pShiftVal& (0+255),w,b
 12212  013F4C  EC97  F0A3         	call	_HMI_SetBar
 12213  013F50                     l10779:
 12214                           
 12215                           ;Events.c: 103: }
 12216                           ;Events.c: 105: LED_Toggle(eLED1);
 12217  013F50  0E00               	movlw	0
 12218  013F52  ECFE  F09E         	call	_LED_Toggle
 12219  013F56  0012               	return		;funcret
 12220  013F58                     __end_of_Event_HMI_RightButton:
 12221                           	opt stack 0
 12222                           tosu	equ	0xFFF
 12223                           tosh	equ	0xFFE
 12224                           tosl	equ	0xFFD
 12225                           pclath	equ	0xFFA
 12226                           tblptru	equ	0xFF8
 12227                           tblptrh	equ	0xFF7
 12228                           tblptrl	equ	0xFF6
 12229                           tablat	equ	0xFF5
 12230                           prodh	equ	0xFF4
 12231                           prodl	equ	0xFF3
 12232                           intcon	equ	0xFF2
 12233                           postinc0	equ	0xFEE
 12234                           wreg	equ	0xFE8
 12235                           indf1	equ	0xFE7
 12236                           postdec1	equ	0xFE5
 12237                           plusw1	equ	0xFE3
 12238                           fsr1h	equ	0xFE2
 12239                           fsr1l	equ	0xFE1
 12240                           indf2	equ	0xFDF
 12241                           postinc2	equ	0xFDE
 12242                           postdec2	equ	0xFDD
 12243                           plusw2	equ	0xFDB
 12244                           fsr2h	equ	0xFDA
 12245                           fsr2l	equ	0xFD9
 12246                           status	equ	0xFD8
 12247                           
 12248 ;; *************** function _Event_HMI_LeftButton *****************
 12249 ;; Defined at:
 12250 ;;		line 71 in file "Events.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  pState          1    wreg     unsigned char 
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;  pState          1   25[BANK0 ] unsigned char 
 12255 ;; Return value:  Size  Location     Type
 12256 ;;                  1    wreg      void 
 12257 ;; Registers used:
 12258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12268 ;;Total ram usage:        1 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:   13
 12271 ;; This function calls:
 12272 ;;		_HMI_SetBar
 12273 ;;		_HMI_SetLeft
 12274 ;;		_LED_Toggle
 12275 ;; This function is called by:
 12276 ;;		_HMI_Init
 12277 ;;		_Button_Poll
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           	psect	text65
 12282  013B86                     __ptext65:
 12283                           	opt stack 0
 12284  013B86                     _Event_HMI_LeftButton:
 12285                           	opt stack 15
 12286                           
 12287                           ;incstack = 0
 12288                           ;Event_HMI_LeftButton@pState stored from wreg
 12289  013B86  0100               	movlb	0	; () banked
 12290  013B88  6FCA               	movwf	Event_HMI_LeftButton@pState& (0+255),b
 12291                           
 12292                           ;Events.c: 74: HMI_SetLeft(pState);
 12293  013B8A  0100               	movlb	0	; () banked
 12294  013B8C  51CA               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
 12295  013B8E  EC40  F0A3         	call	_HMI_SetLeft
 12296                           
 12297                           ;Events.c: 76: if (pState == 0)
 12298  013B92  0100               	movlb	0	; () banked
 12299  013B94  51CA               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
 12300  013B96  0100               	movlb	0	; () banked
 12301  013B98  A4D8               	btfss	status,2,c
 12302  013B9A  D01D               	goto	l10765
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;Events.c: 77: {
 12306                           ;Events.c: 78: pShiftVal <<= 1;
 12307  013B9C  0100               	movlb	0	; () banked
 12308  013B9E  90D8               	bcf	status,0,c
 12309  013BA0  3771               	rlcf	_pShiftVal& (0+255),f,b
 12310  013BA2  3772               	rlcf	(_pShiftVal+1)& (0+255),f,b
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;Events.c: 79: if (pShiftVal == 0xFF00)
 12314  013BA4  0100               	movlb	0	; () banked
 12315  013BA6  2972               	incf	(_pShiftVal+1)& (0+255),w,b
 12316  013BA8  0100               	movlb	0	; () banked
 12317  013BAA  1171               	iorwf	_pShiftVal& (0+255),w,b
 12318  013BAC  A4D8               	btfss	status,2,c
 12319  013BAE  D006               	goto	l10759
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;Events.c: 80: pShiftVal = 0;
 12323  013BB0  0E00               	movlw	0
 12324  013BB2  0100               	movlb	0	; () banked
 12325  013BB4  6F72               	movwf	(_pShiftVal+1)& (0+255),b
 12326  013BB6  0E00               	movlw	0
 12327  013BB8  6F71               	movwf	_pShiftVal& (0+255),b
 12328  013BBA  D009               	goto	l10763
 12329  013BBC                     l10759:
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;Events.c: 81: else if (pShiftVal < 0xFF)
 12333  013BBC  0100               	movlb	0	; () banked
 12334  013BBE  5172               	movf	(_pShiftVal+1)& (0+255),w,b
 12335  013BC0  E106               	bnz	l10763
 12336  013BC2  0100               	movlb	0	; () banked
 12337  013BC4  2971               	incf	_pShiftVal& (0+255),w,b
 12338  013BC6  B0D8               	btfsc	status,0,c
 12339  013BC8  D002               	goto	l10763
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;Events.c: 82: pShiftVal |= 1;
 12343  013BCA  0100               	movlb	0	; () banked
 12344  013BCC  8171               	bsf	_pShiftVal& (0+255),0,b
 12345  013BCE                     l10763:
 12346                           
 12347                           ; BSR set to: 0
 12348                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
 12349  013BCE  0100               	movlb	0	; () banked
 12350  013BD0  5171               	movf	_pShiftVal& (0+255),w,b
 12351  013BD2  EC97  F0A3         	call	_HMI_SetBar
 12352  013BD6                     l10765:
 12353                           
 12354                           ;Events.c: 85: }
 12355                           ;Events.c: 88: LED_Toggle(eLED1);
 12356  013BD6  0E00               	movlw	0
 12357  013BD8  ECFE  F09E         	call	_LED_Toggle
 12358  013BDC  0012               	return		;funcret
 12359  013BDE                     __end_of_Event_HMI_LeftButton:
 12360                           	opt stack 0
 12361                           tosu	equ	0xFFF
 12362                           tosh	equ	0xFFE
 12363                           tosl	equ	0xFFD
 12364                           pclath	equ	0xFFA
 12365                           tblptru	equ	0xFF8
 12366                           tblptrh	equ	0xFF7
 12367                           tblptrl	equ	0xFF6
 12368                           tablat	equ	0xFF5
 12369                           prodh	equ	0xFF4
 12370                           prodl	equ	0xFF3
 12371                           intcon	equ	0xFF2
 12372                           postinc0	equ	0xFEE
 12373                           wreg	equ	0xFE8
 12374                           indf1	equ	0xFE7
 12375                           postdec1	equ	0xFE5
 12376                           plusw1	equ	0xFE3
 12377                           fsr1h	equ	0xFE2
 12378                           fsr1l	equ	0xFE1
 12379                           indf2	equ	0xFDF
 12380                           postinc2	equ	0xFDE
 12381                           postdec2	equ	0xFDD
 12382                           plusw2	equ	0xFDB
 12383                           fsr2h	equ	0xFDA
 12384                           fsr2l	equ	0xFD9
 12385                           status	equ	0xFD8
 12386                           
 12387 ;; *************** function _Event_HMI_DIPSwitch *****************
 12388 ;; Defined at:
 12389 ;;		line 30 in file "Events.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  pState          1    wreg     unsigned char 
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  pState          1   25[BANK0 ] unsigned char 
 12394 ;;  Bar             1   26[BANK0 ] unsigned char 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      void 
 12397 ;; Registers used:
 12398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12408 ;;Total ram usage:        2 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:   13
 12411 ;; This function calls:
 12412 ;;		_HMI_GetBar
 12413 ;;		_HMI_SetBar
 12414 ;;		_LED_Toggle
 12415 ;; This function is called by:
 12416 ;;		_HMI_Init
 12417 ;;		_Button_Poll
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           	psect	text66
 12422  014364                     __ptext66:
 12423                           	opt stack 0
 12424  014364                     _Event_HMI_DIPSwitch:
 12425                           	opt stack 15
 12426                           
 12427                           ;incstack = 0
 12428                           ;Event_HMI_DIPSwitch@pState stored from wreg
 12429  014364  0100               	movlb	0	; () banked
 12430  014366  6FCA               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
 12431                           
 12432                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
 12433  014368  ECAC  F0A3         	call	_HMI_GetBar	;wreg free
 12434  01436C  0100               	movlb	0	; () banked
 12435  01436E  6FCB               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;Events.c: 33: HMI_SetBar(pState | Bar);
 12439  014370  0100               	movlb	0	; () banked
 12440  014372  51CA               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
 12441  014374  0100               	movlb	0	; () banked
 12442  014376  11CB               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
 12443  014378  EC97  F0A3         	call	_HMI_SetBar
 12444                           
 12445                           ;Events.c: 35: Bar &= 0xF0;
 12446  01437C  0EF0               	movlw	240
 12447  01437E  0100               	movlb	0	; () banked
 12448  014380  17CB               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;Events.c: 36: pState &= 0x0F;
 12452  014382  0E0F               	movlw	15
 12453  014384  0100               	movlb	0	; () banked
 12454  014386  17CA               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;Events.c: 42: LED_Toggle(eLED1);
 12458  014388  0E00               	movlw	0
 12459  01438A  ECFE  F09E         	call	_LED_Toggle
 12460  01438E  0012               	return		;funcret
 12461  014390                     __end_of_Event_HMI_DIPSwitch:
 12462                           	opt stack 0
 12463                           tosu	equ	0xFFF
 12464                           tosh	equ	0xFFE
 12465                           tosl	equ	0xFFD
 12466                           pclath	equ	0xFFA
 12467                           tblptru	equ	0xFF8
 12468                           tblptrh	equ	0xFF7
 12469                           tblptrl	equ	0xFF6
 12470                           tablat	equ	0xFF5
 12471                           prodh	equ	0xFF4
 12472                           prodl	equ	0xFF3
 12473                           intcon	equ	0xFF2
 12474                           postinc0	equ	0xFEE
 12475                           wreg	equ	0xFE8
 12476                           indf1	equ	0xFE7
 12477                           postdec1	equ	0xFE5
 12478                           plusw1	equ	0xFE3
 12479                           fsr1h	equ	0xFE2
 12480                           fsr1l	equ	0xFE1
 12481                           indf2	equ	0xFDF
 12482                           postinc2	equ	0xFDE
 12483                           postdec2	equ	0xFDD
 12484                           plusw2	equ	0xFDB
 12485                           fsr2h	equ	0xFDA
 12486                           fsr2l	equ	0xFD9
 12487                           status	equ	0xFD8
 12488                           
 12489 ;; *************** function _Event_TestButton *****************
 12490 ;; Defined at:
 12491 ;;		line 47 in file "Events.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;  pState          1    wreg     unsigned char 
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;  pState          1   25[BANK0 ] unsigned char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  1    wreg      void 
 12498 ;; Registers used:
 12499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;Total ram usage:        1 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:   13
 12512 ;; This function calls:
 12513 ;;		_HMI_SetButton
 12514 ;;		_HMI_SetNumber
 12515 ;;		_LED_Toggle
 12516 ;; This function is called by:
 12517 ;;		_FunctInitButton
 12518 ;;		_Button_Poll
 12519 ;; This function uses a non-reentrant model
 12520 ;;
 12521                           
 12522                           	psect	text67
 12523  0140D0                     __ptext67:
 12524                           	opt stack 0
 12525  0140D0                     _Event_TestButton:
 12526                           	opt stack 15
 12527                           
 12528                           ;incstack = 0
 12529                           ;Event_TestButton@pState stored from wreg
 12530  0140D0  0100               	movlb	0	; () banked
 12531  0140D2  6FCA               	movwf	Event_TestButton@pState& (0+255),b
 12532                           
 12533                           ;Events.c: 51: static UINT8 j = 0;
 12534                           ;Events.c: 55: if (pState == 0)
 12535  0140D4  0100               	movlb	0	; () banked
 12536  0140D6  51CA               	movf	Event_TestButton@pState& (0+255),w,b
 12537  0140D8  0100               	movlb	0	; () banked
 12538  0140DA  A4D8               	btfss	status,2,c
 12539  0140DC  D013               	goto	l10747
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;Events.c: 56: {
 12543                           ;Events.c: 57: j++;
 12544  0140DE  0100               	movlb	0	; () banked
 12545  0140E0  2B7B               	incf	Event_TestButton@j& (0+255),f,b
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;Events.c: 58: val += j;
 12549  0140E2  0100               	movlb	0	; () banked
 12550  0140E4  517B               	movf	Event_TestButton@j& (0+255),w,b
 12551  0140E6  0100               	movlb	0	; () banked
 12552  0140E8  2773               	addwf	_val& (0+255),f,b
 12553  0140EA  0E00               	movlw	0
 12554  0140EC  2374               	addwfc	(_val+1)& (0+255),f,b
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;Events.c: 59: HMI_SetNumber( val );
 12558  0140EE  C073  F0C2         	movff	_val,HMI_SetNumber@pInput
 12559  0140F2  C074  F0C3         	movff	_val+1,HMI_SetNumber@pInput+1
 12560  0140F6  ECDD  F0A1         	call	_HMI_SetNumber	;wreg free
 12561                           
 12562                           ;Events.c: 62: HMI_SetButton( j & 3 );
 12563  0140FA  0100               	movlb	0	; () banked
 12564  0140FC  517B               	movf	Event_TestButton@j& (0+255),w,b
 12565  0140FE  0B03               	andlw	3
 12566  014100  ECE8  F098         	call	_HMI_SetButton
 12567  014104                     l10747:
 12568                           
 12569                           ;Events.c: 63: }
 12570                           ;Events.c: 67: LED_Toggle(eLED1);
 12571  014104  0E00               	movlw	0
 12572  014106  ECFE  F09E         	call	_LED_Toggle
 12573  01410A  0012               	return		;funcret
 12574  01410C                     __end_of_Event_TestButton:
 12575                           	opt stack 0
 12576                           tosu	equ	0xFFF
 12577                           tosh	equ	0xFFE
 12578                           tosl	equ	0xFFD
 12579                           pclath	equ	0xFFA
 12580                           tblptru	equ	0xFF8
 12581                           tblptrh	equ	0xFF7
 12582                           tblptrl	equ	0xFF6
 12583                           tablat	equ	0xFF5
 12584                           prodh	equ	0xFF4
 12585                           prodl	equ	0xFF3
 12586                           intcon	equ	0xFF2
 12587                           postinc0	equ	0xFEE
 12588                           wreg	equ	0xFE8
 12589                           indf1	equ	0xFE7
 12590                           postdec1	equ	0xFE5
 12591                           plusw1	equ	0xFE3
 12592                           fsr1h	equ	0xFE2
 12593                           fsr1l	equ	0xFE1
 12594                           indf2	equ	0xFDF
 12595                           postinc2	equ	0xFDE
 12596                           postdec2	equ	0xFDD
 12597                           plusw2	equ	0xFDB
 12598                           fsr2h	equ	0xFDA
 12599                           fsr2l	equ	0xFD9
 12600                           status	equ	0xFD8
 12601                           
 12602 ;; *************** function _HMI_SetButton *****************
 12603 ;; Defined at:
 12604 ;;		line 186 in file "HMI.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;  pValue          1    wreg     unsigned char 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;  pValue          1    6[BANK0 ] unsigned char 
 12609 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 12610 ;;  v               1    7[BANK0 ] unsigned char 
 12611 ;; Return value:  Size  Location     Type
 12612 ;;                  1    wreg      void 
 12613 ;; Registers used:
 12614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12621 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12622 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12623 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12624 ;;Total ram usage:        8 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; Hardware stack levels required when called:    7
 12627 ;; This function calls:
 12628 ;;		Nothing
 12629 ;; This function is called by:
 12630 ;;		_Event_TestButton
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           	psect	text68
 12635  0131D0                     __ptext68:
 12636                           	opt stack 0
 12637  0131D0                     _HMI_SetButton:
 12638                           	opt stack 20
 12639                           
 12640                           ;incstack = 0
 12641                           ;HMI_SetButton@pValue stored from wreg
 12642  0131D0  0100               	movlb	0	; () banked
 12643  0131D2  6FB7               	movwf	HMI_SetButton@pValue& (0+255),b
 12644                           
 12645                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 12646  0131D4  0EF4               	movlw	low HMI_SetButton@F7211
 12647  0131D6  6EF6               	movwf	tblptrl,c
 12648  0131D8                     	if	1	;There is more than 1 active tblptr byte
 12649  0131D8  0EFD               	movlw	high HMI_SetButton@F7211
 12650  0131DA  6EF7               	movwf	tblptrh,c
 12651  0131DC                     	endif
 12652  0131DC                     	if	1	;There are 3 active tblptr bytes
 12653  0131DC  0E00               	movlw	low (HMI_SetButton@F7211 shr (0+16))
 12654  0131DE  6EF8               	movwf	tblptru,c
 12655  0131E0                     	endif
 12656  0131E0  0009               	tblrd		*+
 12657  0131E2  CFF5 F0B3          	movff	tablat,HMI_SetButton@reindex
 12658  0131E6  0009               	tblrd		*+
 12659  0131E8  CFF5 F0B4          	movff	tablat,HMI_SetButton@reindex+1
 12660  0131EC  0009               	tblrd		*+
 12661  0131EE  CFF5 F0B5          	movff	tablat,HMI_SetButton@reindex+2
 12662  0131F2  000A               	tblrd		*-
 12663  0131F4  CFF5 F0B6          	movff	tablat,HMI_SetButton@reindex+3
 12664                           
 12665                           ;HMI.c: 189: UINT8 v = 0b00010001;
 12666  0131F8  0E11               	movlw	17
 12667  0131FA  0100               	movlb	0	; () banked
 12668  0131FC  6FB8               	movwf	HMI_SetButton@v& (0+255),b
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;HMI.c: 190: pValue &= 3;
 12672  0131FE  0E03               	movlw	3
 12673  013200  0100               	movlb	0	; () banked
 12674  013202  17B7               	andwf	HMI_SetButton@pValue& (0+255),f,b
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;HMI.c: 191: v = v << reindex[pValue];
 12678  013204  0100               	movlb	0	; () banked
 12679  013206  51B7               	movf	HMI_SetButton@pValue& (0+255),w,b
 12680  013208  0D01               	mullw	1
 12681  01320A  0EB3               	movlw	low HMI_SetButton@reindex
 12682  01320C  24F3               	addwf	prodl,w,c
 12683  01320E  6ED9               	movwf	fsr2l,c
 12684  013210  0E00               	movlw	high HMI_SetButton@reindex
 12685  013212  20F4               	addwfc	prodh,w,c
 12686  013214  6EDA               	movwf	fsr2h,c
 12687  013216  50DF               	movf	indf2,w,c
 12688  013218  0100               	movlb	0	; () banked
 12689  01321A  6FB1               	movwf	??_HMI_SetButton& (0+255),b
 12690  01321C  C0B8  F0B2         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 12691  013220  0100               	movlb	0	; () banked
 12692  013222  2BB1               	incf	??_HMI_SetButton& (0+255),f,b
 12693  013224  D003               	goto	u6844
 12694  013226                     u6845:
 12695  013226  0100               	movlb	0	; () banked
 12696  013228  90D8               	bcf	status,0,c
 12697  01322A  37B2               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 12698  01322C                     u6844:
 12699  01322C  0100               	movlb	0	; () banked
 12700  01322E  2FB1               	decfsz	??_HMI_SetButton& (0+255),f,b
 12701  013230  D7FA               	goto	u6845
 12702  013232  0100               	movlb	0	; () banked
 12703  013234  51B2               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 12704  013236  0100               	movlb	0	; () banked
 12705  013238  6FB8               	movwf	HMI_SetButton@v& (0+255),b
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;HMI.c: 192: v = v >> 4;
 12709  01323A  0100               	movlb	0	; () banked
 12710  01323C  39B8               	swapf	HMI_SetButton@v& (0+255),w,b
 12711  01323E  0B0F               	andlw	15
 12712  013240  0100               	movlb	0	; () banked
 12713  013242  6FB8               	movwf	HMI_SetButton@v& (0+255),b
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;HMI.c: 193: v = v & 0x0F;
 12717  013244  0100               	movlb	0	; () banked
 12718  013246  51B8               	movf	HMI_SetButton@v& (0+255),w,b
 12719  013248  0B0F               	andlw	15
 12720  01324A  0100               	movlb	0	; () banked
 12721  01324C  6FB8               	movwf	HMI_SetButton@v& (0+255),b
 12722                           
 12723                           ; BSR set to: 0
 12724                           ;HMI.c: 194: HMIBoard.pButton = v;
 12725  01324E  0101               	movlb	1	; () banked
 12726  013250  512D               	movf	(_HMIBoard+6)& (0+255),w,b
 12727  013252  0100               	movlb	0	; () banked
 12728  013254  19B8               	xorwf	HMI_SetButton@v& (0+255),w,b
 12729  013256  0BF0               	andlw	-16
 12730  013258  19B8               	xorwf	HMI_SetButton@v& (0+255),w,b
 12731  01325A  0101               	movlb	1	; () banked
 12732  01325C  6F2D               	movwf	(_HMIBoard+6)& (0+255),b
 12733                           
 12734                           ; BSR set to: 1
 12735  01325E  0012               	return		;funcret
 12736  013260                     __end_of_HMI_SetButton:
 12737                           	opt stack 0
 12738                           tosu	equ	0xFFF
 12739                           tosh	equ	0xFFE
 12740                           tosl	equ	0xFFD
 12741                           pclath	equ	0xFFA
 12742                           tblptru	equ	0xFF8
 12743                           tblptrh	equ	0xFF7
 12744                           tblptrl	equ	0xFF6
 12745                           tablat	equ	0xFF5
 12746                           prodh	equ	0xFF4
 12747                           prodl	equ	0xFF3
 12748                           intcon	equ	0xFF2
 12749                           postinc0	equ	0xFEE
 12750                           wreg	equ	0xFE8
 12751                           indf1	equ	0xFE7
 12752                           postdec1	equ	0xFE5
 12753                           plusw1	equ	0xFE3
 12754                           fsr1h	equ	0xFE2
 12755                           fsr1l	equ	0xFE1
 12756                           indf2	equ	0xFDF
 12757                           postinc2	equ	0xFDE
 12758                           postdec2	equ	0xFDD
 12759                           plusw2	equ	0xFDB
 12760                           fsr2h	equ	0xFDA
 12761                           fsr2l	equ	0xFD9
 12762                           status	equ	0xFD8
 12763                           
 12764 ;; *************** function _HMI_SetUp *****************
 12765 ;; Defined at:
 12766 ;;		line 174 in file "HMI.c"
 12767 ;; Parameters:    Size  Location     Type
 12768 ;;  pValue          1    wreg     unsigned char 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;  pValue          1    0[BANK0 ] unsigned char 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      void 
 12773 ;; Registers used:
 12774 ;;		wreg
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;Total ram usage:        1 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    7
 12787 ;; This function calls:
 12788 ;;		Nothing
 12789 ;; This function is called by:
 12790 ;;		_Event_HMI_UpButton
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           	psect	text69
 12795  014654                     __ptext69:
 12796                           	opt stack 0
 12797  014654                     _HMI_SetUp:
 12798                           	opt stack 20
 12799                           
 12800                           ; BSR set to: 1
 12801                           ;incstack = 0
 12802                           ;HMI_SetUp@pValue stored from wreg
 12803  014654  0100               	movlb	0	; () banked
 12804  014656  6FB1               	movwf	HMI_SetUp@pValue& (0+255),b
 12805                           
 12806                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
 12807  014658  0100               	movlb	0	; () banked
 12808  01465A  B1B1               	btfsc	HMI_SetUp@pValue& (0+255),0,b
 12809  01465C  D003               	bra	u6825
 12810  01465E  0101               	movlb	1	; () banked
 12811  014660  912D               	bcf	(_HMIBoard+6)& (0+255),0,b
 12812  014662  D002               	bra	u6826
 12813  014664                     u6825:
 12814  014664  0101               	movlb	1	; () banked
 12815  014666  812D               	bsf	(_HMIBoard+6)& (0+255),0,b
 12816  014668                     u6826:
 12817                           
 12818                           ; BSR set to: 1
 12819  014668  0012               	return		;funcret
 12820  01466A                     __end_of_HMI_SetUp:
 12821                           	opt stack 0
 12822                           tosu	equ	0xFFF
 12823                           tosh	equ	0xFFE
 12824                           tosl	equ	0xFFD
 12825                           pclath	equ	0xFFA
 12826                           tblptru	equ	0xFF8
 12827                           tblptrh	equ	0xFF7
 12828                           tblptrl	equ	0xFF6
 12829                           tablat	equ	0xFF5
 12830                           prodh	equ	0xFF4
 12831                           prodl	equ	0xFF3
 12832                           intcon	equ	0xFF2
 12833                           postinc0	equ	0xFEE
 12834                           wreg	equ	0xFE8
 12835                           indf1	equ	0xFE7
 12836                           postdec1	equ	0xFE5
 12837                           plusw1	equ	0xFE3
 12838                           fsr1h	equ	0xFE2
 12839                           fsr1l	equ	0xFE1
 12840                           indf2	equ	0xFDF
 12841                           postinc2	equ	0xFDE
 12842                           postdec2	equ	0xFDD
 12843                           plusw2	equ	0xFDB
 12844                           fsr2h	equ	0xFDA
 12845                           fsr2l	equ	0xFD9
 12846                           status	equ	0xFD8
 12847                           
 12848 ;; *************** function _HMI_SetRight *****************
 12849 ;; Defined at:
 12850 ;;		line 168 in file "HMI.c"
 12851 ;; Parameters:    Size  Location     Type
 12852 ;;  pValue          1    wreg     unsigned char 
 12853 ;; Auto vars:     Size  Location     Type
 12854 ;;  pValue          1    0[BANK0 ] unsigned char 
 12855 ;; Return value:  Size  Location     Type
 12856 ;;                  1    wreg      void 
 12857 ;; Registers used:
 12858 ;;		wreg
 12859 ;; Tracked objects:
 12860 ;;		On entry : 0/0
 12861 ;;		On exit  : 0/0
 12862 ;;		Unchanged: 0/0
 12863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12867 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12868 ;;Total ram usage:        1 bytes
 12869 ;; Hardware stack levels used:    1
 12870 ;; Hardware stack levels required when called:    7
 12871 ;; This function calls:
 12872 ;;		Nothing
 12873 ;; This function is called by:
 12874 ;;		_Event_HMI_RightButton
 12875 ;; This function uses a non-reentrant model
 12876 ;;
 12877                           
 12878                           	psect	text70
 12879  01466A                     __ptext70:
 12880                           	opt stack 0
 12881  01466A                     _HMI_SetRight:
 12882                           	opt stack 20
 12883                           
 12884                           ; BSR set to: 1
 12885                           ;incstack = 0
 12886                           ;HMI_SetRight@pValue stored from wreg
 12887  01466A  0100               	movlb	0	; () banked
 12888  01466C  6FB1               	movwf	HMI_SetRight@pValue& (0+255),b
 12889                           
 12890                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
 12891  01466E  0100               	movlb	0	; () banked
 12892  014670  B1B1               	btfsc	HMI_SetRight@pValue& (0+255),0,b
 12893  014672  D003               	bra	u6815
 12894  014674  0101               	movlb	1	; () banked
 12895  014676  972D               	bcf	(_HMIBoard+6)& (0+255),3,b
 12896  014678  D002               	bra	u6816
 12897  01467A                     u6815:
 12898  01467A  0101               	movlb	1	; () banked
 12899  01467C  872D               	bsf	(_HMIBoard+6)& (0+255),3,b
 12900  01467E                     u6816:
 12901                           
 12902                           ; BSR set to: 1
 12903  01467E  0012               	return		;funcret
 12904  014680                     __end_of_HMI_SetRight:
 12905                           	opt stack 0
 12906                           tosu	equ	0xFFF
 12907                           tosh	equ	0xFFE
 12908                           tosl	equ	0xFFD
 12909                           pclath	equ	0xFFA
 12910                           tblptru	equ	0xFF8
 12911                           tblptrh	equ	0xFF7
 12912                           tblptrl	equ	0xFF6
 12913                           tablat	equ	0xFF5
 12914                           prodh	equ	0xFF4
 12915                           prodl	equ	0xFF3
 12916                           intcon	equ	0xFF2
 12917                           postinc0	equ	0xFEE
 12918                           wreg	equ	0xFE8
 12919                           indf1	equ	0xFE7
 12920                           postdec1	equ	0xFE5
 12921                           plusw1	equ	0xFE3
 12922                           fsr1h	equ	0xFE2
 12923                           fsr1l	equ	0xFE1
 12924                           indf2	equ	0xFDF
 12925                           postinc2	equ	0xFDE
 12926                           postdec2	equ	0xFDD
 12927                           plusw2	equ	0xFDB
 12928                           fsr2h	equ	0xFDA
 12929                           fsr2l	equ	0xFD9
 12930                           status	equ	0xFD8
 12931                           
 12932 ;; *************** function _HMI_SetLeft *****************
 12933 ;; Defined at:
 12934 ;;		line 162 in file "HMI.c"
 12935 ;; Parameters:    Size  Location     Type
 12936 ;;  pValue          1    wreg     unsigned char 
 12937 ;; Auto vars:     Size  Location     Type
 12938 ;;  pValue          1    0[BANK0 ] unsigned char 
 12939 ;; Return value:  Size  Location     Type
 12940 ;;                  1    wreg      void 
 12941 ;; Registers used:
 12942 ;;		wreg
 12943 ;; Tracked objects:
 12944 ;;		On entry : 0/0
 12945 ;;		On exit  : 0/0
 12946 ;;		Unchanged: 0/0
 12947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12951 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12952 ;;Total ram usage:        1 bytes
 12953 ;; Hardware stack levels used:    1
 12954 ;; Hardware stack levels required when called:    7
 12955 ;; This function calls:
 12956 ;;		Nothing
 12957 ;; This function is called by:
 12958 ;;		_Event_HMI_LeftButton
 12959 ;; This function uses a non-reentrant model
 12960 ;;
 12961                           
 12962                           	psect	text71
 12963  014680                     __ptext71:
 12964                           	opt stack 0
 12965  014680                     _HMI_SetLeft:
 12966                           	opt stack 20
 12967                           
 12968                           ; BSR set to: 1
 12969                           ;incstack = 0
 12970                           ;HMI_SetLeft@pValue stored from wreg
 12971  014680  0100               	movlb	0	; () banked
 12972  014682  6FB1               	movwf	HMI_SetLeft@pValue& (0+255),b
 12973                           
 12974                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
 12975  014684  0100               	movlb	0	; () banked
 12976  014686  B1B1               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
 12977  014688  D003               	bra	u6805
 12978  01468A  0101               	movlb	1	; () banked
 12979  01468C  952D               	bcf	(_HMIBoard+6)& (0+255),2,b
 12980  01468E  D002               	bra	u6806
 12981  014690                     u6805:
 12982  014690  0101               	movlb	1	; () banked
 12983  014692  852D               	bsf	(_HMIBoard+6)& (0+255),2,b
 12984  014694                     u6806:
 12985                           
 12986                           ; BSR set to: 1
 12987  014694  0012               	return		;funcret
 12988  014696                     __end_of_HMI_SetLeft:
 12989                           	opt stack 0
 12990                           tosu	equ	0xFFF
 12991                           tosh	equ	0xFFE
 12992                           tosl	equ	0xFFD
 12993                           pclath	equ	0xFFA
 12994                           tblptru	equ	0xFF8
 12995                           tblptrh	equ	0xFF7
 12996                           tblptrl	equ	0xFF6
 12997                           tablat	equ	0xFF5
 12998                           prodh	equ	0xFF4
 12999                           prodl	equ	0xFF3
 13000                           intcon	equ	0xFF2
 13001                           postinc0	equ	0xFEE
 13002                           wreg	equ	0xFE8
 13003                           indf1	equ	0xFE7
 13004                           postdec1	equ	0xFE5
 13005                           plusw1	equ	0xFE3
 13006                           fsr1h	equ	0xFE2
 13007                           fsr1l	equ	0xFE1
 13008                           indf2	equ	0xFDF
 13009                           postinc2	equ	0xFDE
 13010                           postdec2	equ	0xFDD
 13011                           plusw2	equ	0xFDB
 13012                           fsr2h	equ	0xFDA
 13013                           fsr2l	equ	0xFD9
 13014                           status	equ	0xFD8
 13015                           
 13016 ;; *************** function _HMI_SetNumber *****************
 13017 ;; Defined at:
 13018 ;;		line 221 in file "HMI.c"
 13019 ;; Parameters:    Size  Location     Type
 13020 ;;  pInput          2   17[BANK0 ] int 
 13021 ;; Auto vars:     Size  Location     Type
 13022 ;;		None
 13023 ;; Return value:  Size  Location     Type
 13024 ;;                  1    wreg      void 
 13025 ;; Registers used:
 13026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13027 ;; Tracked objects:
 13028 ;;		On entry : 0/0
 13029 ;;		On exit  : 0/0
 13030 ;;		Unchanged: 0/0
 13031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13036 ;;Total ram usage:        2 bytes
 13037 ;; Hardware stack levels used:    1
 13038 ;; Hardware stack levels required when called:    9
 13039 ;; This function calls:
 13040 ;;		_HMI_SetSegments
 13041 ;;		_itos
 13042 ;; This function is called by:
 13043 ;;		_Event_TestButton
 13044 ;;		_Event_HMI_UpButton
 13045 ;;		_Event_HMI_DownButton
 13046 ;; This function uses a non-reentrant model
 13047 ;;
 13048                           
 13049                           	psect	text72
 13050  0143BA                     __ptext72:
 13051                           	opt stack 0
 13052  0143BA                     _HMI_SetNumber:
 13053                           	opt stack 18
 13054                           
 13055                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 13056                           
 13057                           ; BSR set to: 1
 13058                           ;incstack = 0
 13059  0143BA  C0C2  F0B8         	movff	HMI_SetNumber@pInput,itos@input
 13060  0143BE  C0C3  F0B9         	movff	HMI_SetNumber@pInput+1,itos@input+1
 13061  0143C2  0E27               	movlw	low _HMIBoard
 13062  0143C4  0100               	movlb	0	; () banked
 13063  0143C6  6FBA               	movwf	itos@destination& (0+255),b
 13064  0143C8  0E01               	movlw	high _HMIBoard
 13065  0143CA  0100               	movlb	0	; () banked
 13066  0143CC  6FBB               	movwf	(itos@destination+1)& (0+255),b
 13067  0143CE  ECE9  F091         	call	_itos	;wreg free
 13068                           
 13069                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 13070  0143D2  0E27               	movlw	low _HMIBoard
 13071  0143D4  0100               	movlb	0	; () banked
 13072  0143D6  6FB2               	movwf	HMI_SetSegments@pString& (0+255),b
 13073  0143D8  0E01               	movlw	high _HMIBoard
 13074  0143DA  0100               	movlb	0	; () banked
 13075  0143DC  6FB3               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 13076  0143DE  EC73  F091         	call	_HMI_SetSegments	;wreg free
 13077  0143E2  0012               	return		;funcret
 13078  0143E4                     __end_of_HMI_SetNumber:
 13079                           	opt stack 0
 13080                           tosu	equ	0xFFF
 13081                           tosh	equ	0xFFE
 13082                           tosl	equ	0xFFD
 13083                           pclath	equ	0xFFA
 13084                           tblptru	equ	0xFF8
 13085                           tblptrh	equ	0xFF7
 13086                           tblptrl	equ	0xFF6
 13087                           tablat	equ	0xFF5
 13088                           prodh	equ	0xFF4
 13089                           prodl	equ	0xFF3
 13090                           intcon	equ	0xFF2
 13091                           postinc0	equ	0xFEE
 13092                           wreg	equ	0xFE8
 13093                           indf1	equ	0xFE7
 13094                           postdec1	equ	0xFE5
 13095                           plusw1	equ	0xFE3
 13096                           fsr1h	equ	0xFE2
 13097                           fsr1l	equ	0xFE1
 13098                           indf2	equ	0xFDF
 13099                           postinc2	equ	0xFDE
 13100                           postdec2	equ	0xFDD
 13101                           plusw2	equ	0xFDB
 13102                           fsr2h	equ	0xFDA
 13103                           fsr2l	equ	0xFD9
 13104                           status	equ	0xFD8
 13105                           
 13106 ;; *************** function _itos *****************
 13107 ;; Defined at:
 13108 ;;		line 369 in file "Library/Types.c"
 13109 ;; Parameters:    Size  Location     Type
 13110 ;;  input           2    7[BANK0 ] unsigned short 
 13111 ;;  destination     2    9[BANK0 ] PTR unsigned char 
 13112 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;  Out             2   15[BANK0 ] unsigned short 
 13115 ;;  Length          2   13[BANK0 ] unsigned short 
 13116 ;;  Data            2   11[BANK0 ] PTR unsigned char 
 13117 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13118 ;; Return value:  Size  Location     Type
 13119 ;;                  1    wreg      void 
 13120 ;; Registers used:
 13121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13122 ;; Tracked objects:
 13123 ;;		On entry : 0/0
 13124 ;;		On exit  : 0/0
 13125 ;;		Unchanged: 0/0
 13126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;Total ram usage:       10 bytes
 13132 ;; Hardware stack levels used:    1
 13133 ;; Hardware stack levels required when called:    8
 13134 ;; This function calls:
 13135 ;;		___lwdiv
 13136 ;;		___lwmod
 13137 ;;		_reverse
 13138 ;; This function is called by:
 13139 ;;		_HMI_SetNumber
 13140 ;; This function uses a non-reentrant model
 13141 ;;
 13142                           
 13143                           	psect	text73
 13144  0123D2                     __ptext73:
 13145                           	opt stack 0
 13146  0123D2                     _itos:
 13147                           	opt stack 18
 13148                           
 13149                           ;Types.c: 371: UINT16 Out = input;
 13150                           
 13151                           ;incstack = 0
 13152  0123D2  C0B8  F0C0         	movff	itos@input,itos@Out
 13153  0123D6  C0B9  F0C1         	movff	itos@input+1,itos@Out+1
 13154                           
 13155                           ;Types.c: 372: UINT16 Length = 0;
 13156  0123DA  0E00               	movlw	0
 13157  0123DC  0100               	movlb	0	; () banked
 13158  0123DE  6FBF               	movwf	(itos@Length+1)& (0+255),b
 13159  0123E0  0E00               	movlw	0
 13160  0123E2  6FBE               	movwf	itos@Length& (0+255),b
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;Types.c: 373: char *Data = destination;
 13164  0123E4  C0BA  F0BC         	movff	itos@destination,itos@Data
 13165  0123E8  C0BB  F0BD         	movff	itos@destination+1,itos@Data+1
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;Types.c: 374: if(Out == 0)
 13169  0123EC  0100               	movlb	0	; () banked
 13170  0123EE  51C0               	movf	itos@Out& (0+255),w,b
 13171  0123F0  0100               	movlb	0	; () banked
 13172  0123F2  11C1               	iorwf	(itos@Out+1)& (0+255),w,b
 13173  0123F4  A4D8               	btfss	status,2,c
 13174  0123F6  D034               	goto	l9937
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;Types.c: 375: {
 13178                           ;Types.c: 376: Data[0] = (UINT16)'0';
 13179  0123F8  C0BC  FFD9         	movff	itos@Data,fsr2l
 13180  0123FC  C0BD  FFDA         	movff	itos@Data+1,fsr2h
 13181  012400  0E30               	movlw	48
 13182  012402  6EDF               	movwf	indf2,c
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;Types.c: 377: Length = 1;
 13186  012404  0E00               	movlw	0
 13187  012406  0100               	movlb	0	; () banked
 13188  012408  6FBF               	movwf	(itos@Length+1)& (0+255),b
 13189  01240A  0E01               	movlw	1
 13190  01240C  6FBE               	movwf	itos@Length& (0+255),b
 13191                           
 13192                           ;Types.c: 378: }
 13193  01240E  D040               	goto	l9943
 13194  012410                     l9929:
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;Types.c: 382: {
 13198                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 13199  012410  C0C0  F0B1         	movff	itos@Out,___lwmod@dividend
 13200  012414  C0C1  F0B2         	movff	itos@Out+1,___lwmod@dividend+1
 13201  012418  0E00               	movlw	0
 13202  01241A  0100               	movlb	0	; () banked
 13203  01241C  6FB4               	movwf	(___lwmod@divisor+1)& (0+255),b
 13204  01241E  0E0A               	movlw	10
 13205  012420  6FB3               	movwf	___lwmod@divisor& (0+255),b
 13206  012422  EC39  F09D         	call	___lwmod	;wreg free
 13207  012426  0100               	movlb	0	; () banked
 13208  012428  51B1               	movf	?___lwmod& (0+255),w,b
 13209  01242A  0F30               	addlw	48
 13210  01242C  C0BC  FFD9         	movff	itos@Data,fsr2l
 13211  012430  C0BD  FFDA         	movff	itos@Data+1,fsr2h
 13212  012434  6EDF               	movwf	indf2,c
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;Types.c: 384: Out /= 10;
 13216  012436  C0C0  F0B1         	movff	itos@Out,___lwdiv@dividend
 13217  01243A  C0C1  F0B2         	movff	itos@Out+1,___lwdiv@dividend+1
 13218  01243E  0E00               	movlw	0
 13219  012440  0100               	movlb	0	; () banked
 13220  012442  6FB4               	movwf	(___lwdiv@divisor+1)& (0+255),b
 13221  012444  0E0A               	movlw	10
 13222  012446  6FB3               	movwf	___lwdiv@divisor& (0+255),b
 13223  012448  EC37  F09A         	call	___lwdiv	;wreg free
 13224  01244C  C0B1  F0C0         	movff	?___lwdiv,itos@Out
 13225  012450  C0B2  F0C1         	movff	?___lwdiv+1,itos@Out+1
 13226                           
 13227                           ;Types.c: 385: Length ++;
 13228  012454  0100               	movlb	0	; () banked
 13229  012456  4BBE               	infsnz	itos@Length& (0+255),f,b
 13230  012458  2BBF               	incf	(itos@Length+1)& (0+255),f,b
 13231                           
 13232                           ; BSR set to: 0
 13233                           ;Types.c: 386: Data++;
 13234  01245A  0100               	movlb	0	; () banked
 13235  01245C  4BBC               	infsnz	itos@Data& (0+255),f,b
 13236  01245E  2BBD               	incf	(itos@Data+1)& (0+255),f,b
 13237  012460                     l9937:
 13238                           
 13239                           ; BSR set to: 0
 13240  012460  0100               	movlb	0	; () banked
 13241  012462  51C0               	movf	itos@Out& (0+255),w,b
 13242  012464  0100               	movlb	0	; () banked
 13243  012466  11C1               	iorwf	(itos@Out+1)& (0+255),w,b
 13244  012468  B4D8               	btfsc	status,2,c
 13245  01246A  D008               	goto	l9941
 13246                           
 13247                           ; BSR set to: 0
 13248  01246C  0100               	movlb	0	; () banked
 13249  01246E  51BF               	movf	(itos@Length+1)& (0+255),w,b
 13250  012470  E105               	bnz	l9941
 13251  012472  0E06               	movlw	6
 13252  012474  0100               	movlb	0	; () banked
 13253  012476  5DBE               	subwf	itos@Length& (0+255),w,b
 13254  012478  A0D8               	btfss	status,0,c
 13255  01247A  D7CA               	goto	l9929
 13256  01247C                     l9941:
 13257                           
 13258                           ; BSR set to: 0
 13259                           ;Types.c: 387: }
 13260                           ;Types.c: 388: reverse(destination, Length);
 13261  01247C  C0BA  F0B1         	movff	itos@destination,reverse@input
 13262  012480  C0BB  F0B2         	movff	itos@destination+1,reverse@input+1
 13263  012484  C0BE  F0B3         	movff	itos@Length,reverse@length
 13264  012488  C0BF  F0B4         	movff	itos@Length+1,reverse@length+1
 13265  01248C  ECCE  F09B         	call	_reverse	;wreg free
 13266  012490                     l9943:
 13267                           
 13268                           ;Types.c: 389: }
 13269                           ;Types.c: 390: destination[Length] = '\0';
 13270  012490  0100               	movlb	0	; () banked
 13271  012492  51BE               	movf	itos@Length& (0+255),w,b
 13272  012494  0100               	movlb	0	; () banked
 13273  012496  25BA               	addwf	itos@destination& (0+255),w,b
 13274  012498  6ED9               	movwf	fsr2l,c
 13275  01249A  0100               	movlb	0	; () banked
 13276  01249C  51BF               	movf	(itos@Length+1)& (0+255),w,b
 13277  01249E  0100               	movlb	0	; () banked
 13278  0124A0  21BB               	addwfc	(itos@destination+1)& (0+255),w,b
 13279  0124A2  6EDA               	movwf	fsr2h,c
 13280  0124A4  0E00               	movlw	0
 13281  0124A6  6EDF               	movwf	indf2,c
 13282                           
 13283                           ; BSR set to: 0
 13284  0124A8  0012               	return		;funcret
 13285  0124AA                     __end_of_itos:
 13286                           	opt stack 0
 13287                           tosu	equ	0xFFF
 13288                           tosh	equ	0xFFE
 13289                           tosl	equ	0xFFD
 13290                           pclath	equ	0xFFA
 13291                           tblptru	equ	0xFF8
 13292                           tblptrh	equ	0xFF7
 13293                           tblptrl	equ	0xFF6
 13294                           tablat	equ	0xFF5
 13295                           prodh	equ	0xFF4
 13296                           prodl	equ	0xFF3
 13297                           intcon	equ	0xFF2
 13298                           postinc0	equ	0xFEE
 13299                           wreg	equ	0xFE8
 13300                           indf1	equ	0xFE7
 13301                           postdec1	equ	0xFE5
 13302                           plusw1	equ	0xFE3
 13303                           fsr1h	equ	0xFE2
 13304                           fsr1l	equ	0xFE1
 13305                           indf2	equ	0xFDF
 13306                           postinc2	equ	0xFDE
 13307                           postdec2	equ	0xFDD
 13308                           plusw2	equ	0xFDB
 13309                           fsr2h	equ	0xFDA
 13310                           fsr2l	equ	0xFD9
 13311                           status	equ	0xFD8
 13312                           
 13313 ;; *************** function _reverse *****************
 13314 ;; Defined at:
 13315 ;;		line 357 in file "Library/Types.c"
 13316 ;; Parameters:    Size  Location     Type
 13317 ;;  input           2    0[BANK0 ] PTR unsigned char 
 13318 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13319 ;;  length          2    2[BANK0 ] unsigned short 
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 13322 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13323 ;;  tempVar         1    4[BANK0 ] unsigned char 
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  1    wreg      void 
 13326 ;; Registers used:
 13327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13328 ;; Tracked objects:
 13329 ;;		On entry : 0/0
 13330 ;;		On exit  : 0/0
 13331 ;;		Unchanged: 0/0
 13332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13333 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13334 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13336 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13337 ;;Total ram usage:        7 bytes
 13338 ;; Hardware stack levels used:    1
 13339 ;; Hardware stack levels required when called:    7
 13340 ;; This function calls:
 13341 ;;		Nothing
 13342 ;; This function is called by:
 13343 ;;		_itos
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           	psect	text74
 13348  01379C                     __ptext74:
 13349                           	opt stack 0
 13350  01379C                     _reverse:
 13351                           	opt stack 18
 13352                           
 13353                           ;Types.c: 359: char tempVar,
 13354                           ;Types.c: 360: *iterator = input + length;
 13355                           
 13356                           ; BSR set to: 0
 13357                           ;incstack = 0
 13358  01379C  0100               	movlb	0	; () banked
 13359  01379E  51B3               	movf	reverse@length& (0+255),w,b
 13360  0137A0  0100               	movlb	0	; () banked
 13361  0137A2  25B1               	addwf	reverse@input& (0+255),w,b
 13362  0137A4  0100               	movlb	0	; () banked
 13363  0137A6  6FB6               	movwf	reverse@iterator& (0+255),b
 13364  0137A8  0100               	movlb	0	; () banked
 13365  0137AA  51B4               	movf	(reverse@length+1)& (0+255),w,b
 13366  0137AC  0100               	movlb	0	; () banked
 13367  0137AE  21B2               	addwfc	(reverse@input+1)& (0+255),w,b
 13368  0137B0  0100               	movlb	0	; () banked
 13369  0137B2  6FB7               	movwf	(reverse@iterator+1)& (0+255),b
 13370                           
 13371                           ;Types.c: 362: while ( --iterator > input )
 13372  0137B4  D01A               	goto	l9779
 13373  0137B6                     l9771:
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;Types.c: 363: {
 13377                           ;Types.c: 364: tempVar = *input;
 13378  0137B6  C0B1  FFD9         	movff	reverse@input,fsr2l
 13379  0137BA  C0B2  FFDA         	movff	reverse@input+1,fsr2h
 13380  0137BE  50DF               	movf	indf2,w,c
 13381  0137C0  0100               	movlb	0	; () banked
 13382  0137C2  6FB5               	movwf	reverse@tempVar& (0+255),b
 13383                           
 13384                           ; BSR set to: 0
 13385                           ;Types.c: 365: *input++=*iterator;
 13386  0137C4  C0B6  FFD9         	movff	reverse@iterator,fsr2l
 13387  0137C8  C0B7  FFDA         	movff	reverse@iterator+1,fsr2h
 13388  0137CC  C0B1  FFE1         	movff	reverse@input,fsr1l
 13389  0137D0  C0B2  FFE2         	movff	reverse@input+1,fsr1h
 13390  0137D4  CFDF FFE7          	movff	indf2,indf1
 13391                           
 13392                           ; BSR set to: 0
 13393  0137D8  0100               	movlb	0	; () banked
 13394  0137DA  4BB1               	infsnz	reverse@input& (0+255),f,b
 13395  0137DC  2BB2               	incf	(reverse@input+1)& (0+255),f,b
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;Types.c: 366: *iterator=tempVar;
 13399  0137DE  C0B6  FFD9         	movff	reverse@iterator,fsr2l
 13400  0137E2  C0B7  FFDA         	movff	reverse@iterator+1,fsr2h
 13401  0137E6  C0B5  FFDF         	movff	reverse@tempVar,indf2
 13402  0137EA                     l9779:
 13403                           
 13404                           ; BSR set to: 0
 13405  0137EA  0100               	movlb	0	; () banked
 13406  0137EC  07B6               	decf	reverse@iterator& (0+255),f,b
 13407  0137EE  A0D8               	btfss	status,0,c
 13408  0137F0  07B7               	decf	(reverse@iterator+1)& (0+255),f,b
 13409  0137F2  0100               	movlb	0	; () banked
 13410  0137F4  51B6               	movf	reverse@iterator& (0+255),w,b
 13411  0137F6  0100               	movlb	0	; () banked
 13412  0137F8  5DB1               	subwf	reverse@input& (0+255),w,b
 13413  0137FA  0100               	movlb	0	; () banked
 13414  0137FC  51B7               	movf	(reverse@iterator+1)& (0+255),w,b
 13415  0137FE  0100               	movlb	0	; () banked
 13416  013800  59B2               	subwfb	(reverse@input+1)& (0+255),w,b
 13417  013802  B0D8               	btfsc	status,0,c
 13418  013804  0012               	return	
 13419  013806  D7D7               	goto	l9771
 13420  013808                     __end_of_reverse:
 13421                           	opt stack 0
 13422                           tosu	equ	0xFFF
 13423                           tosh	equ	0xFFE
 13424                           tosl	equ	0xFFD
 13425                           pclath	equ	0xFFA
 13426                           tblptru	equ	0xFF8
 13427                           tblptrh	equ	0xFF7
 13428                           tblptrl	equ	0xFF6
 13429                           tablat	equ	0xFF5
 13430                           prodh	equ	0xFF4
 13431                           prodl	equ	0xFF3
 13432                           intcon	equ	0xFF2
 13433                           postinc0	equ	0xFEE
 13434                           wreg	equ	0xFE8
 13435                           indf1	equ	0xFE7
 13436                           postdec1	equ	0xFE5
 13437                           plusw1	equ	0xFE3
 13438                           fsr1h	equ	0xFE2
 13439                           fsr1l	equ	0xFE1
 13440                           indf2	equ	0xFDF
 13441                           postinc2	equ	0xFDE
 13442                           postdec2	equ	0xFDD
 13443                           plusw2	equ	0xFDB
 13444                           fsr2h	equ	0xFDA
 13445                           fsr2l	equ	0xFD9
 13446                           status	equ	0xFD8
 13447                           
 13448 ;; *************** function ___lwmod *****************
 13449 ;; Defined at:
 13450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 13451 ;; Parameters:    Size  Location     Type
 13452 ;;  dividend        2    0[BANK0 ] unsigned int 
 13453 ;;  divisor         2    2[BANK0 ] unsigned int 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  counter         1    4[BANK0 ] unsigned char 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  2    0[BANK0 ] unsigned int 
 13458 ;; Registers used:
 13459 ;;		wreg, status,2, status,0
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13465 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;Total ram usage:        5 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    7
 13472 ;; This function calls:
 13473 ;;		Nothing
 13474 ;; This function is called by:
 13475 ;;		_itos
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           	psect	text75
 13480  013A72                     __ptext75:
 13481                           	opt stack 0
 13482  013A72                     ___lwmod:
 13483                           	opt stack 18
 13484                           
 13485                           ; BSR set to: 0
 13486                           ;incstack = 0
 13487  013A72  0100               	movlb	0	; () banked
 13488  013A74  51B3               	movf	___lwmod@divisor& (0+255),w,b
 13489  013A76  0100               	movlb	0	; () banked
 13490  013A78  11B4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13491  013A7A  B4D8               	btfsc	status,2,c
 13492  013A7C  D026               	goto	l2452
 13493                           
 13494                           ; BSR set to: 0
 13495  013A7E  0E01               	movlw	1
 13496  013A80  0100               	movlb	0	; () banked
 13497  013A82  6FB5               	movwf	___lwmod@counter& (0+255),b
 13498  013A84  D006               	goto	l9855
 13499  013A86                     l9853:
 13500                           
 13501                           ; BSR set to: 0
 13502  013A86  0100               	movlb	0	; () banked
 13503  013A88  90D8               	bcf	status,0,c
 13504  013A8A  37B3               	rlcf	___lwmod@divisor& (0+255),f,b
 13505  013A8C  37B4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13506  013A8E  0100               	movlb	0	; () banked
 13507  013A90  2BB5               	incf	___lwmod@counter& (0+255),f,b
 13508  013A92                     l9855:
 13509                           
 13510                           ; BSR set to: 0
 13511  013A92  0100               	movlb	0	; () banked
 13512  013A94  AFB4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13513  013A96  D7F7               	goto	l9853
 13514  013A98                     l9857:
 13515                           
 13516                           ; BSR set to: 0
 13517  013A98  0100               	movlb	0	; () banked
 13518  013A9A  51B3               	movf	___lwmod@divisor& (0+255),w,b
 13519  013A9C  0100               	movlb	0	; () banked
 13520  013A9E  5DB1               	subwf	___lwmod@dividend& (0+255),w,b
 13521  013AA0  0100               	movlb	0	; () banked
 13522  013AA2  51B4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13523  013AA4  0100               	movlb	0	; () banked
 13524  013AA6  59B2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13525  013AA8  A0D8               	btfss	status,0,c
 13526  013AAA  D008               	goto	l9861
 13527                           
 13528                           ; BSR set to: 0
 13529  013AAC  0100               	movlb	0	; () banked
 13530  013AAE  51B3               	movf	___lwmod@divisor& (0+255),w,b
 13531  013AB0  0100               	movlb	0	; () banked
 13532  013AB2  5FB1               	subwf	___lwmod@dividend& (0+255),f,b
 13533  013AB4  0100               	movlb	0	; () banked
 13534  013AB6  51B4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13535  013AB8  0100               	movlb	0	; () banked
 13536  013ABA  5BB2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13537  013ABC                     l9861:
 13538                           
 13539                           ; BSR set to: 0
 13540  013ABC  0100               	movlb	0	; () banked
 13541  013ABE  90D8               	bcf	status,0,c
 13542  013AC0  33B4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13543  013AC2  33B3               	rrcf	___lwmod@divisor& (0+255),f,b
 13544                           
 13545                           ; BSR set to: 0
 13546  013AC4  0100               	movlb	0	; () banked
 13547  013AC6  2FB5               	decfsz	___lwmod@counter& (0+255),f,b
 13548  013AC8  D7E7               	goto	l9857
 13549  013ACA                     l2452:
 13550                           
 13551                           ; BSR set to: 0
 13552  013ACA  C0B1  F0B1         	movff	___lwmod@dividend,?___lwmod
 13553  013ACE  C0B2  F0B2         	movff	___lwmod@dividend+1,?___lwmod+1
 13554                           
 13555                           ; BSR set to: 0
 13556  013AD2  0012               	return		;funcret
 13557  013AD4                     __end_of___lwmod:
 13558                           	opt stack 0
 13559                           tosu	equ	0xFFF
 13560                           tosh	equ	0xFFE
 13561                           tosl	equ	0xFFD
 13562                           pclath	equ	0xFFA
 13563                           tblptru	equ	0xFF8
 13564                           tblptrh	equ	0xFF7
 13565                           tblptrl	equ	0xFF6
 13566                           tablat	equ	0xFF5
 13567                           prodh	equ	0xFF4
 13568                           prodl	equ	0xFF3
 13569                           intcon	equ	0xFF2
 13570                           postinc0	equ	0xFEE
 13571                           wreg	equ	0xFE8
 13572                           indf1	equ	0xFE7
 13573                           postdec1	equ	0xFE5
 13574                           plusw1	equ	0xFE3
 13575                           fsr1h	equ	0xFE2
 13576                           fsr1l	equ	0xFE1
 13577                           indf2	equ	0xFDF
 13578                           postinc2	equ	0xFDE
 13579                           postdec2	equ	0xFDD
 13580                           plusw2	equ	0xFDB
 13581                           fsr2h	equ	0xFDA
 13582                           fsr2l	equ	0xFD9
 13583                           status	equ	0xFD8
 13584                           
 13585 ;; *************** function ___lwdiv *****************
 13586 ;; Defined at:
 13587 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 13588 ;; Parameters:    Size  Location     Type
 13589 ;;  dividend        2    0[BANK0 ] unsigned int 
 13590 ;;  divisor         2    2[BANK0 ] unsigned int 
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;  quotient        2    5[BANK0 ] unsigned int 
 13593 ;;  counter         1    4[BANK0 ] unsigned char 
 13594 ;; Return value:  Size  Location     Type
 13595 ;;                  2    0[BANK0 ] unsigned int 
 13596 ;; Registers used:
 13597 ;;		wreg, status,2, status,0
 13598 ;; Tracked objects:
 13599 ;;		On entry : 0/0
 13600 ;;		On exit  : 0/0
 13601 ;;		Unchanged: 0/0
 13602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13603 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;Total ram usage:        7 bytes
 13608 ;; Hardware stack levels used:    1
 13609 ;; Hardware stack levels required when called:    7
 13610 ;; This function calls:
 13611 ;;		Nothing
 13612 ;; This function is called by:
 13613 ;;		_itos
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           	psect	text76
 13618  01346E                     __ptext76:
 13619                           	opt stack 0
 13620  01346E                     ___lwdiv:
 13621                           	opt stack 18
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;incstack = 0
 13625  01346E  0E00               	movlw	0
 13626  013470  0100               	movlb	0	; () banked
 13627  013472  6FB7               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13628  013474  0E00               	movlw	0
 13629  013476  6FB6               	movwf	___lwdiv@quotient& (0+255),b
 13630                           
 13631                           ; BSR set to: 0
 13632  013478  0100               	movlb	0	; () banked
 13633  01347A  51B3               	movf	___lwdiv@divisor& (0+255),w,b
 13634  01347C  0100               	movlb	0	; () banked
 13635  01347E  11B4               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13636  013480  B4D8               	btfsc	status,2,c
 13637  013482  D02C               	goto	l2442
 13638                           
 13639                           ; BSR set to: 0
 13640  013484  0E01               	movlw	1
 13641  013486  0100               	movlb	0	; () banked
 13642  013488  6FB5               	movwf	___lwdiv@counter& (0+255),b
 13643  01348A  D006               	goto	l9835
 13644  01348C                     l9833:
 13645                           
 13646                           ; BSR set to: 0
 13647  01348C  0100               	movlb	0	; () banked
 13648  01348E  90D8               	bcf	status,0,c
 13649  013490  37B3               	rlcf	___lwdiv@divisor& (0+255),f,b
 13650  013492  37B4               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13651  013494  0100               	movlb	0	; () banked
 13652  013496  2BB5               	incf	___lwdiv@counter& (0+255),f,b
 13653  013498                     l9835:
 13654                           
 13655                           ; BSR set to: 0
 13656  013498  0100               	movlb	0	; () banked
 13657  01349A  AFB4               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13658  01349C  D7F7               	goto	l9833
 13659  01349E                     l9837:
 13660                           
 13661                           ; BSR set to: 0
 13662  01349E  0100               	movlb	0	; () banked
 13663  0134A0  90D8               	bcf	status,0,c
 13664  0134A2  37B6               	rlcf	___lwdiv@quotient& (0+255),f,b
 13665  0134A4  37B7               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13666                           
 13667                           ; BSR set to: 0
 13668  0134A6  0100               	movlb	0	; () banked
 13669  0134A8  51B3               	movf	___lwdiv@divisor& (0+255),w,b
 13670  0134AA  0100               	movlb	0	; () banked
 13671  0134AC  5DB1               	subwf	___lwdiv@dividend& (0+255),w,b
 13672  0134AE  0100               	movlb	0	; () banked
 13673  0134B0  51B4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13674  0134B2  0100               	movlb	0	; () banked
 13675  0134B4  59B2               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13676  0134B6  A0D8               	btfss	status,0,c
 13677  0134B8  D00A               	goto	l9845
 13678                           
 13679                           ; BSR set to: 0
 13680  0134BA  0100               	movlb	0	; () banked
 13681  0134BC  51B3               	movf	___lwdiv@divisor& (0+255),w,b
 13682  0134BE  0100               	movlb	0	; () banked
 13683  0134C0  5FB1               	subwf	___lwdiv@dividend& (0+255),f,b
 13684  0134C2  0100               	movlb	0	; () banked
 13685  0134C4  51B4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13686  0134C6  0100               	movlb	0	; () banked
 13687  0134C8  5BB2               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13688                           
 13689                           ; BSR set to: 0
 13690  0134CA  0100               	movlb	0	; () banked
 13691  0134CC  81B6               	bsf	___lwdiv@quotient& (0+255),0,b
 13692  0134CE                     l9845:
 13693                           
 13694                           ; BSR set to: 0
 13695  0134CE  0100               	movlb	0	; () banked
 13696  0134D0  90D8               	bcf	status,0,c
 13697  0134D2  33B4               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13698  0134D4  33B3               	rrcf	___lwdiv@divisor& (0+255),f,b
 13699                           
 13700                           ; BSR set to: 0
 13701  0134D6  0100               	movlb	0	; () banked
 13702  0134D8  2FB5               	decfsz	___lwdiv@counter& (0+255),f,b
 13703  0134DA  D7E1               	goto	l9837
 13704  0134DC                     l2442:
 13705                           
 13706                           ; BSR set to: 0
 13707  0134DC  C0B6  F0B1         	movff	___lwdiv@quotient,?___lwdiv
 13708  0134E0  C0B7  F0B2         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13709                           
 13710                           ; BSR set to: 0
 13711  0134E4  0012               	return		;funcret
 13712  0134E6                     __end_of___lwdiv:
 13713                           	opt stack 0
 13714                           tosu	equ	0xFFF
 13715                           tosh	equ	0xFFE
 13716                           tosl	equ	0xFFD
 13717                           pclath	equ	0xFFA
 13718                           tblptru	equ	0xFF8
 13719                           tblptrh	equ	0xFF7
 13720                           tblptrl	equ	0xFF6
 13721                           tablat	equ	0xFF5
 13722                           prodh	equ	0xFF4
 13723                           prodl	equ	0xFF3
 13724                           intcon	equ	0xFF2
 13725                           postinc0	equ	0xFEE
 13726                           wreg	equ	0xFE8
 13727                           indf1	equ	0xFE7
 13728                           postdec1	equ	0xFE5
 13729                           plusw1	equ	0xFE3
 13730                           fsr1h	equ	0xFE2
 13731                           fsr1l	equ	0xFE1
 13732                           indf2	equ	0xFDF
 13733                           postinc2	equ	0xFDE
 13734                           postdec2	equ	0xFDD
 13735                           plusw2	equ	0xFDB
 13736                           fsr2h	equ	0xFDA
 13737                           fsr2l	equ	0xFD9
 13738                           status	equ	0xFD8
 13739                           
 13740 ;; *************** function _HMI_SetSegments *****************
 13741 ;; Defined at:
 13742 ;;		line 226 in file "HMI.c"
 13743 ;; Parameters:    Size  Location     Type
 13744 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 13745 ;;		 -> STR_4(5), HMIBoard..(8), HMIBoard(58), 
 13746 ;; Auto vars:     Size  Location     Type
 13747 ;;  in              2    4[BANK0 ] unsigned short 
 13748 ;; Return value:  Size  Location     Type
 13749 ;;                  1    wreg      void 
 13750 ;; Registers used:
 13751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13752 ;; Tracked objects:
 13753 ;;		On entry : 0/0
 13754 ;;		On exit  : 0/0
 13755 ;;		Unchanged: 0/0
 13756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13757 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;Total ram usage:        5 bytes
 13762 ;; Hardware stack levels used:    1
 13763 ;; Hardware stack levels required when called:    8
 13764 ;; This function calls:
 13765 ;;		_ToSegment
 13766 ;; This function is called by:
 13767 ;;		_HMI_SetNumber
 13768 ;;		_main
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           	psect	text77
 13773  0122E6                     __ptext77:
 13774                           	opt stack 0
 13775  0122E6                     _HMI_SetSegments:
 13776                           	opt stack 22
 13777                           
 13778                           ;HMI.c: 228: UINT16 in=0;
 13779                           
 13780                           ; BSR set to: 0
 13781                           ;incstack = 0
 13782  0122E6  0E00               	movlw	0
 13783  0122E8  0100               	movlb	0	; () banked
 13784  0122EA  6FB6               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 13785  0122EC  0E00               	movlw	0
 13786  0122EE  6FB5               	movwf	HMI_SetSegments@in& (0+255),b
 13787                           
 13788                           ;HMI.c: 229: while(*pString)
 13789  0122F0  D044               	goto	l9987
 13790  0122F2                     l9971:
 13791                           
 13792                           ;HMI.c: 230: {
 13793                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 13794  0122F2  0E27               	movlw	low _HMIBoard
 13795  0122F4  0100               	movlb	0	; () banked
 13796  0122F6  25B5               	addwf	HMI_SetSegments@in& (0+255),w,b
 13797  0122F8  6ED9               	movwf	fsr2l,c
 13798  0122FA  0E01               	movlw	high _HMIBoard
 13799  0122FC  0100               	movlb	0	; () banked
 13800  0122FE  21B6               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13801  012300  6EDA               	movwf	fsr2h,c
 13802  012302  C0B2  FFF6         	movff	HMI_SetSegments@pString,tblptrl
 13803  012306  C0B3  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
 13804  01230A  0E00               	movlw	low (__mediumconst shr (0+16))
 13805  01230C  6EF8               	movwf	tblptru,c
 13806  01230E  0E0F               	movlw	(high __ramtop+-1)
 13807  012310  64F7               	cpfsgt	tblptrh,c
 13808  012312  D003               	bra	u6447
 13809  012314  0008               	tblrd		*
 13810  012316  50F5               	movf	tablat,w,c
 13811  012318  D005               	bra	u6440
 13812  01231A                     u6447:
 13813  01231A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13814  01231E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13815  012322  50EF               	movf	indf0,w,c
 13816  012324                     u6440:
 13817  012324  ECEC  F083         	call	_ToSegment
 13818  012328  6EDF               	movwf	indf2,c
 13819                           
 13820                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 13821  01232A  0E27               	movlw	low _HMIBoard
 13822  01232C  0100               	movlb	0	; () banked
 13823  01232E  25B5               	addwf	HMI_SetSegments@in& (0+255),w,b
 13824  012330  6ED9               	movwf	fsr2l,c
 13825  012332  0E01               	movlw	high _HMIBoard
 13826  012334  0100               	movlb	0	; () banked
 13827  012336  21B6               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13828  012338  6EDA               	movwf	fsr2h,c
 13829  01233A  0E80               	movlw	128
 13830  01233C  18DE               	xorwf	postinc2,w,c
 13831  01233E  A4D8               	btfss	status,2,c
 13832  012340  D00E               	goto	l9979
 13833                           
 13834                           ; BSR set to: 0
 13835                           ;HMI.c: 234: {
 13836                           ;HMI.c: 235: in--;
 13837  012342  0100               	movlb	0	; () banked
 13838  012344  07B5               	decf	HMI_SetSegments@in& (0+255),f,b
 13839  012346  A0D8               	btfss	status,0,c
 13840  012348  07B6               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 13844  01234A  0E27               	movlw	low _HMIBoard
 13845  01234C  0100               	movlb	0	; () banked
 13846  01234E  25B5               	addwf	HMI_SetSegments@in& (0+255),w,b
 13847  012350  6ED9               	movwf	fsr2l,c
 13848  012352  0E01               	movlw	high _HMIBoard
 13849  012354  0100               	movlb	0	; () banked
 13850  012356  21B6               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13851  012358  6EDA               	movwf	fsr2h,c
 13852  01235A  0E00               	movlw	0
 13853  01235C  8EDB               	bsf	plusw2,7,c
 13854  01235E                     l9979:
 13855                           
 13856                           ; BSR set to: 0
 13857                           ;HMI.c: 237: }
 13858                           ;HMI.c: 239: pString++;
 13859  01235E  0100               	movlb	0	; () banked
 13860  012360  4BB2               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 13861  012362  2BB3               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;HMI.c: 240: in++;
 13865  012364  0100               	movlb	0	; () banked
 13866  012366  4BB5               	infsnz	HMI_SetSegments@in& (0+255),f,b
 13867  012368  2BB6               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 13868                           
 13869                           ; BSR set to: 0
 13870                           ;HMI.c: 241: if (in>=6)
 13871  01236A  0100               	movlb	0	; () banked
 13872  01236C  51B6               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 13873  01236E  E127               	bnz	l9993
 13874  012370  0E06               	movlw	6
 13875  012372  0100               	movlb	0	; () banked
 13876  012374  5DB5               	subwf	HMI_SetSegments@in& (0+255),w,b
 13877  012376  B0D8               	btfsc	status,0,c
 13878  012378  D022               	goto	l9993
 13879  01237A                     l9987:
 13880                           
 13881                           ; BSR set to: 0
 13882  01237A  C0B2  FFF6         	movff	HMI_SetSegments@pString,tblptrl
 13883  01237E  C0B3  FFF7         	movff	HMI_SetSegments@pString+1,tblptrh
 13884  012382  0E00               	movlw	low (__mediumconst shr (0+16))
 13885  012384  6EF8               	movwf	tblptru,c
 13886  012386  0E0F               	movlw	(high __ramtop+-1)
 13887  012388  64F7               	cpfsgt	tblptrh,c
 13888  01238A  D003               	bra	u6477
 13889  01238C  0008               	tblrd		*
 13890  01238E  50F5               	movf	tablat,w,c
 13891  012390  D005               	bra	u6470
 13892  012392                     u6477:
 13893  012392  CFF6 FFE9          	movff	tblptrl,fsr0l
 13894  012396  CFF7 FFEA          	movff	tblptrh,fsr0h
 13895  01239A  50EF               	movf	indf0,w,c
 13896  01239C                     u6470:
 13897  01239C  0900               	iorlw	0
 13898  01239E  B4D8               	btfsc	status,2,c
 13899  0123A0  D00E               	goto	l9993
 13900  0123A2  D7A7               	goto	l9971
 13901  0123A4                     l9989:
 13902                           
 13903                           ;HMI.c: 245: {
 13904                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 13905  0123A4  0E27               	movlw	low _HMIBoard
 13906  0123A6  0100               	movlb	0	; () banked
 13907  0123A8  25B5               	addwf	HMI_SetSegments@in& (0+255),w,b
 13908  0123AA  6ED9               	movwf	fsr2l,c
 13909  0123AC  0E01               	movlw	high _HMIBoard
 13910  0123AE  0100               	movlb	0	; () banked
 13911  0123B0  21B6               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 13912  0123B2  6EDA               	movwf	fsr2h,c
 13913  0123B4  0E00               	movlw	0
 13914  0123B6  6EDF               	movwf	indf2,c
 13915                           
 13916                           ; BSR set to: 0
 13917                           ;HMI.c: 247: in++;
 13918  0123B8  0100               	movlb	0	; () banked
 13919  0123BA  4BB5               	infsnz	HMI_SetSegments@in& (0+255),f,b
 13920  0123BC  2BB6               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 13921  0123BE                     l9993:
 13922  0123BE  0100               	movlb	0	; () banked
 13923  0123C0  51B6               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 13924  0123C2  E106               	bnz	l1215
 13925  0123C4  0E06               	movlw	6
 13926  0123C6  0100               	movlb	0	; () banked
 13927  0123C8  5DB5               	subwf	HMI_SetSegments@in& (0+255),w,b
 13928  0123CA  B0D8               	btfsc	status,0,c
 13929  0123CC  0012               	return	
 13930  0123CE  D7EA               	goto	l9989
 13931  0123D0                     l1215:
 13932                           
 13933                           ; BSR set to: 0
 13934  0123D0  0012               	return		;funcret
 13935  0123D2                     __end_of_HMI_SetSegments:
 13936                           	opt stack 0
 13937                           tosu	equ	0xFFF
 13938                           tosh	equ	0xFFE
 13939                           tosl	equ	0xFFD
 13940                           pclath	equ	0xFFA
 13941                           tblptru	equ	0xFF8
 13942                           tblptrh	equ	0xFF7
 13943                           tblptrl	equ	0xFF6
 13944                           tablat	equ	0xFF5
 13945                           prodh	equ	0xFF4
 13946                           prodl	equ	0xFF3
 13947                           intcon	equ	0xFF2
 13948                           indf0	equ	0xFEF
 13949                           postinc0	equ	0xFEE
 13950                           fsr0h	equ	0xFEA
 13951                           fsr0l	equ	0xFE9
 13952                           wreg	equ	0xFE8
 13953                           indf1	equ	0xFE7
 13954                           postdec1	equ	0xFE5
 13955                           plusw1	equ	0xFE3
 13956                           fsr1h	equ	0xFE2
 13957                           fsr1l	equ	0xFE1
 13958                           indf2	equ	0xFDF
 13959                           postinc2	equ	0xFDE
 13960                           postdec2	equ	0xFDD
 13961                           plusw2	equ	0xFDB
 13962                           fsr2h	equ	0xFDA
 13963                           fsr2l	equ	0xFD9
 13964                           status	equ	0xFD8
 13965                           
 13966 ;; *************** function _ToSegment *****************
 13967 ;; Defined at:
 13968 ;;		line 284 in file "Library/Types.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;  pCHR            1    wreg     unsigned char 
 13971 ;; Auto vars:     Size  Location     Type
 13972 ;;  pCHR            1    0[BANK0 ] unsigned char 
 13973 ;; Return value:  Size  Location     Type
 13974 ;;                  1    wreg      unsigned char 
 13975 ;; Registers used:
 13976 ;;		wreg, status,2, status,0
 13977 ;; Tracked objects:
 13978 ;;		On entry : 0/0
 13979 ;;		On exit  : 0/0
 13980 ;;		Unchanged: 0/0
 13981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13986 ;;Total ram usage:        1 bytes
 13987 ;; Hardware stack levels used:    1
 13988 ;; Hardware stack levels required when called:    7
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		_HMI_SetSegments
 13993 ;; This function uses a non-reentrant model
 13994 ;;
 13995                           
 13996                           	psect	text78
 13997  0107D8                     __ptext78:
 13998                           	opt stack 0
 13999  0107D8                     _ToSegment:
 14000                           	opt stack 22
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;incstack = 0
 14004                           ;ToSegment@pCHR stored from wreg
 14005  0107D8  0100               	movlb	0	; () banked
 14006  0107DA  6FB1               	movwf	ToSegment@pCHR& (0+255),b
 14007                           
 14008                           ;Types.c: 286: switch(pCHR)
 14009  0107DC  D07E               	goto	l9763
 14010  0107DE                     l9509:
 14011  0107DE  0E3F               	movlw	63
 14012  0107E0  0012               	return	
 14013  0107E2                     l9513:
 14014  0107E2  0E06               	movlw	6
 14015  0107E4  0012               	return	
 14016  0107E6                     l9517:
 14017  0107E6  0E5B               	movlw	91
 14018  0107E8  0012               	return	
 14019  0107EA                     l9521:
 14020  0107EA  0E4F               	movlw	79
 14021  0107EC  0012               	return	
 14022  0107EE                     l9525:
 14023  0107EE  0E66               	movlw	102
 14024  0107F0  0012               	return	
 14025  0107F2                     l9529:
 14026  0107F2  0E6D               	movlw	109
 14027  0107F4  0012               	return	
 14028  0107F6                     l9533:
 14029  0107F6  0E7D               	movlw	125
 14030  0107F8  0012               	return	
 14031  0107FA                     l9537:
 14032  0107FA  0E07               	movlw	7
 14033  0107FC  0012               	return	
 14034  0107FE                     l9541:
 14035  0107FE  0E7F               	movlw	127
 14036  010800  0012               	return	
 14037  010802                     l9545:
 14038  010802  0E6F               	movlw	111
 14039  010804  0012               	return	
 14040  010806                     l9549:
 14041  010806  0E5F               	movlw	95
 14042  010808  0012               	return	
 14043  01080A                     l9553:
 14044  01080A  0E7C               	movlw	124
 14045  01080C  0012               	return	
 14046  01080E                     l9557:
 14047  01080E  0E58               	movlw	88
 14048  010810  0012               	return	
 14049  010812                     l9561:
 14050  010812  0E5E               	movlw	94
 14051  010814  0012               	return	
 14052  010816                     l9565:
 14053  010816  0E7B               	movlw	123
 14054  010818  0012               	return	
 14055  01081A                     l9569:
 14056  01081A  0E71               	movlw	113
 14057  01081C  0012               	return	
 14058  01081E                     l9573:
 14059  01081E  0E6F               	movlw	111
 14060  010820  0012               	return	
 14061  010822                     l9577:
 14062  010822  0E74               	movlw	116
 14063  010824  0012               	return	
 14064  010826                     l9581:
 14065  010826  0E04               	movlw	4
 14066  010828  0012               	return	
 14067  01082A                     l9585:
 14068  01082A  0E0E               	movlw	14
 14069  01082C  0012               	return	
 14070  01082E                     l9589:
 14071  01082E  0E7A               	movlw	122
 14072  010830  0012               	return	
 14073  010832                     l9593:
 14074  010832  0E06               	movlw	6
 14075  010834  0012               	return	
 14076  010836                     l9597:
 14077  010836  0E14               	movlw	20
 14078  010838  0012               	return	
 14079  01083A                     l9601:
 14080  01083A  0E54               	movlw	84
 14081  01083C  0012               	return	
 14082  01083E                     l9605:
 14083  01083E  0E5C               	movlw	92
 14084  010840  0012               	return	
 14085  010842                     l9609:
 14086  010842  0E73               	movlw	115
 14087  010844  0012               	return	
 14088  010846                     l9613:
 14089  010846  0E67               	movlw	103
 14090  010848  0012               	return	
 14091  01084A                     l9617:
 14092  01084A  0E50               	movlw	80
 14093  01084C  0012               	return	
 14094  01084E                     l9621:
 14095  01084E  0E6D               	movlw	109
 14096  010850  0012               	return	
 14097  010852                     l9625:
 14098  010852  0E78               	movlw	120
 14099  010854  0012               	return	
 14100  010856                     l9629:
 14101  010856  0E1C               	movlw	28
 14102  010858  0012               	return	
 14103  01085A                     l9633:
 14104  01085A  0E62               	movlw	98
 14105  01085C  0012               	return	
 14106  01085E                     l9637:
 14107  01085E  0E2A               	movlw	42
 14108  010860  0012               	return	
 14109  010862                     l9641:
 14110  010862  0E64               	movlw	100
 14111  010864  0012               	return	
 14112  010866                     l9645:
 14113  010866  0E6E               	movlw	110
 14114  010868  0012               	return	
 14115  01086A                     l9649:
 14116  01086A  0E5B               	movlw	91
 14117  01086C  0012               	return	
 14118  01086E                     l9653:
 14119  01086E  0E77               	movlw	119
 14120  010870  0012               	return	
 14121  010872                     l9657:
 14122  010872  0E7F               	movlw	127
 14123  010874  0012               	return	
 14124  010876                     l9661:
 14125  010876  0E39               	movlw	57
 14126  010878  0012               	return	
 14127  01087A                     l9665:
 14128  01087A  0E3F               	movlw	63
 14129  01087C  0012               	return	
 14130  01087E                     l9669:
 14131  01087E  0E79               	movlw	121
 14132  010880  0012               	return	
 14133  010882                     l9673:
 14134  010882  0E71               	movlw	113
 14135  010884  0012               	return	
 14136  010886                     l9677:
 14137  010886  0E3D               	movlw	61
 14138  010888  0012               	return	
 14139  01088A                     l9681:
 14140  01088A  0E76               	movlw	118
 14141  01088C  0012               	return	
 14142  01088E                     l9685:
 14143  01088E  0E06               	movlw	6
 14144  010890  0012               	return	
 14145  010892                     l9689:
 14146  010892  0E1E               	movlw	30
 14147  010894  0012               	return	
 14148  010896                     l9693:
 14149  010896  0E57               	movlw	87
 14150  010898  0012               	return	
 14151  01089A                     l9697:
 14152  01089A  0E38               	movlw	56
 14153  01089C  0012               	return	
 14154  01089E                     l9701:
 14155  01089E  0E76               	movlw	118
 14156  0108A0  0012               	return	
 14157  0108A2                     l9705:
 14158  0108A2  0E76               	movlw	118
 14159  0108A4  0012               	return	
 14160  0108A6                     l9709:
 14161  0108A6  0E3F               	movlw	63
 14162  0108A8  0012               	return	
 14163  0108AA                     l9713:
 14164  0108AA  0E73               	movlw	115
 14165  0108AC  0012               	return	
 14166  0108AE                     l9717:
 14167  0108AE  0E3F               	movlw	63
 14168  0108B0  0012               	return	
 14169  0108B2                     l9721:
 14170  0108B2  0E77               	movlw	119
 14171  0108B4  0012               	return	
 14172  0108B6                     l9725:
 14173  0108B6  0E6D               	movlw	109
 14174  0108B8  0012               	return	
 14175  0108BA                     l9729:
 14176  0108BA  0E31               	movlw	49
 14177  0108BC  0012               	return	
 14178  0108BE                     l9733:
 14179  0108BE  0E3E               	movlw	62
 14180  0108C0  0012               	return	
 14181  0108C2                     l9737:
 14182  0108C2  0E3E               	movlw	62
 14183  0108C4  0012               	return	
 14184  0108C6                     l9741:
 14185  0108C6  0E7E               	movlw	126
 14186  0108C8  0012               	return	
 14187  0108CA                     l9745:
 14188  0108CA  0E76               	movlw	118
 14189  0108CC  0012               	return	
 14190  0108CE                     l9749:
 14191  0108CE  0E66               	movlw	102
 14192  0108D0  0012               	return	
 14193  0108D2                     l9753:
 14194  0108D2  0E5B               	movlw	91
 14195  0108D4  0012               	return	
 14196  0108D6                     l9757:
 14197  0108D6  0E80               	movlw	128
 14198  0108D8  0012               	return	
 14199  0108DA                     l9763:
 14200  0108DA  0100               	movlb	0	; () banked
 14201  0108DC  51B1               	movf	ToSegment@pCHR& (0+255),w,b
 14202                           
 14203                           ; Switch size 1, requested type "space"
 14204                           ; Number of cases is 63, Range of values is 46 to 122
 14205                           ; switch strategies available:
 14206                           ; Name         Instructions Cycles
 14207                           ; simple_byte          190    96 (average)
 14208                           ;	Chosen strategy is simple_byte
 14209  0108DE  0A2E               	xorlw	46	; case 46
 14210  0108E0  B4D8               	btfsc	status,2,c
 14211  0108E2  D7F9               	goto	l9757
 14212  0108E4  0A1E               	xorlw	30	; case 48
 14213  0108E6  B4D8               	btfsc	status,2,c
 14214  0108E8  D77A               	goto	l9509
 14215  0108EA  0A01               	xorlw	1	; case 49
 14216  0108EC  B4D8               	btfsc	status,2,c
 14217  0108EE  D779               	goto	l9513
 14218  0108F0  0A03               	xorlw	3	; case 50
 14219  0108F2  B4D8               	btfsc	status,2,c
 14220  0108F4  D778               	goto	l9517
 14221  0108F6  0A01               	xorlw	1	; case 51
 14222  0108F8  B4D8               	btfsc	status,2,c
 14223  0108FA  D777               	goto	l9521
 14224  0108FC  0A07               	xorlw	7	; case 52
 14225  0108FE  B4D8               	btfsc	status,2,c
 14226  010900  D776               	goto	l9525
 14227  010902  0A01               	xorlw	1	; case 53
 14228  010904  B4D8               	btfsc	status,2,c
 14229  010906  D775               	goto	l9529
 14230  010908  0A03               	xorlw	3	; case 54
 14231  01090A  B4D8               	btfsc	status,2,c
 14232  01090C  D774               	goto	l9533
 14233  01090E  0A01               	xorlw	1	; case 55
 14234  010910  B4D8               	btfsc	status,2,c
 14235  010912  D773               	goto	l9537
 14236  010914  0A0F               	xorlw	15	; case 56
 14237  010916  B4D8               	btfsc	status,2,c
 14238  010918  D772               	goto	l9541
 14239  01091A  0A01               	xorlw	1	; case 57
 14240  01091C  B4D8               	btfsc	status,2,c
 14241  01091E  D771               	goto	l9545
 14242  010920  0A78               	xorlw	120	; case 65
 14243  010922  B4D8               	btfsc	status,2,c
 14244  010924  D7A4               	goto	l9653
 14245  010926  0A03               	xorlw	3	; case 66
 14246  010928  B4D8               	btfsc	status,2,c
 14247  01092A  D7A3               	goto	l9657
 14248  01092C  0A01               	xorlw	1	; case 67
 14249  01092E  B4D8               	btfsc	status,2,c
 14250  010930  D7A2               	goto	l9661
 14251  010932  0A07               	xorlw	7	; case 68
 14252  010934  B4D8               	btfsc	status,2,c
 14253  010936  D7A1               	goto	l9665
 14254  010938  0A01               	xorlw	1	; case 69
 14255  01093A  B4D8               	btfsc	status,2,c
 14256  01093C  D7A0               	goto	l9669
 14257  01093E  0A03               	xorlw	3	; case 70
 14258  010940  B4D8               	btfsc	status,2,c
 14259  010942  D79F               	goto	l9673
 14260  010944  0A01               	xorlw	1	; case 71
 14261  010946  B4D8               	btfsc	status,2,c
 14262  010948  D79E               	goto	l9677
 14263  01094A  0A0F               	xorlw	15	; case 72
 14264  01094C  B4D8               	btfsc	status,2,c
 14265  01094E  D79D               	goto	l9681
 14266  010950  0A01               	xorlw	1	; case 73
 14267  010952  B4D8               	btfsc	status,2,c
 14268  010954  D79C               	goto	l9685
 14269  010956  0A03               	xorlw	3	; case 74
 14270  010958  B4D8               	btfsc	status,2,c
 14271  01095A  D79B               	goto	l9689
 14272  01095C  0A01               	xorlw	1	; case 75
 14273  01095E  B4D8               	btfsc	status,2,c
 14274  010960  D79A               	goto	l9693
 14275  010962  0A07               	xorlw	7	; case 76
 14276  010964  B4D8               	btfsc	status,2,c
 14277  010966  D799               	goto	l9697
 14278  010968  0A01               	xorlw	1	; case 77
 14279  01096A  B4D8               	btfsc	status,2,c
 14280  01096C  D798               	goto	l9701
 14281  01096E  0A03               	xorlw	3	; case 78
 14282  010970  B4D8               	btfsc	status,2,c
 14283  010972  D797               	goto	l9705
 14284  010974  0A01               	xorlw	1	; case 79
 14285  010976  B4D8               	btfsc	status,2,c
 14286  010978  D796               	goto	l9709
 14287  01097A  0A1F               	xorlw	31	; case 80
 14288  01097C  B4D8               	btfsc	status,2,c
 14289  01097E  D795               	goto	l9713
 14290  010980  0A01               	xorlw	1	; case 81
 14291  010982  B4D8               	btfsc	status,2,c
 14292  010984  D794               	goto	l9717
 14293  010986  0A03               	xorlw	3	; case 82
 14294  010988  B4D8               	btfsc	status,2,c
 14295  01098A  D793               	goto	l9721
 14296  01098C  0A01               	xorlw	1	; case 83
 14297  01098E  B4D8               	btfsc	status,2,c
 14298  010990  D792               	goto	l9725
 14299  010992  0A07               	xorlw	7	; case 84
 14300  010994  B4D8               	btfsc	status,2,c
 14301  010996  D791               	goto	l9729
 14302  010998  0A01               	xorlw	1	; case 85
 14303  01099A  B4D8               	btfsc	status,2,c
 14304  01099C  D790               	goto	l9733
 14305  01099E  0A03               	xorlw	3	; case 86
 14306  0109A0  B4D8               	btfsc	status,2,c
 14307  0109A2  D78F               	goto	l9737
 14308  0109A4  0A01               	xorlw	1	; case 87
 14309  0109A6  B4D8               	btfsc	status,2,c
 14310  0109A8  D78E               	goto	l9741
 14311  0109AA  0A0F               	xorlw	15	; case 88
 14312  0109AC  B4D8               	btfsc	status,2,c
 14313  0109AE  D78D               	goto	l9745
 14314  0109B0  0A01               	xorlw	1	; case 89
 14315  0109B2  B4D8               	btfsc	status,2,c
 14316  0109B4  D78C               	goto	l9749
 14317  0109B6  0A03               	xorlw	3	; case 90
 14318  0109B8  B4D8               	btfsc	status,2,c
 14319  0109BA  D78B               	goto	l9753
 14320  0109BC  0A3B               	xorlw	59	; case 97
 14321  0109BE  B4D8               	btfsc	status,2,c
 14322  0109C0  D722               	goto	l9549
 14323  0109C2  0A03               	xorlw	3	; case 98
 14324  0109C4  B4D8               	btfsc	status,2,c
 14325  0109C6  D721               	goto	l9553
 14326  0109C8  0A01               	xorlw	1	; case 99
 14327  0109CA  B4D8               	btfsc	status,2,c
 14328  0109CC  D720               	goto	l9557
 14329  0109CE  0A07               	xorlw	7	; case 100
 14330  0109D0  B4D8               	btfsc	status,2,c
 14331  0109D2  D71F               	goto	l9561
 14332  0109D4  0A01               	xorlw	1	; case 101
 14333  0109D6  B4D8               	btfsc	status,2,c
 14334  0109D8  D71E               	goto	l9565
 14335  0109DA  0A03               	xorlw	3	; case 102
 14336  0109DC  B4D8               	btfsc	status,2,c
 14337  0109DE  D71D               	goto	l9569
 14338  0109E0  0A01               	xorlw	1	; case 103
 14339  0109E2  B4D8               	btfsc	status,2,c
 14340  0109E4  D71C               	goto	l9573
 14341  0109E6  0A0F               	xorlw	15	; case 104
 14342  0109E8  B4D8               	btfsc	status,2,c
 14343  0109EA  D71B               	goto	l9577
 14344  0109EC  0A01               	xorlw	1	; case 105
 14345  0109EE  B4D8               	btfsc	status,2,c
 14346  0109F0  D71A               	goto	l9581
 14347  0109F2  0A03               	xorlw	3	; case 106
 14348  0109F4  B4D8               	btfsc	status,2,c
 14349  0109F6  D719               	goto	l9585
 14350  0109F8  0A01               	xorlw	1	; case 107
 14351  0109FA  B4D8               	btfsc	status,2,c
 14352  0109FC  D718               	goto	l9589
 14353  0109FE  0A07               	xorlw	7	; case 108
 14354  010A00  B4D8               	btfsc	status,2,c
 14355  010A02  D717               	goto	l9593
 14356  010A04  0A01               	xorlw	1	; case 109
 14357  010A06  B4D8               	btfsc	status,2,c
 14358  010A08  D716               	goto	l9597
 14359  010A0A  0A03               	xorlw	3	; case 110
 14360  010A0C  B4D8               	btfsc	status,2,c
 14361  010A0E  D715               	goto	l9601
 14362  010A10  0A01               	xorlw	1	; case 111
 14363  010A12  B4D8               	btfsc	status,2,c
 14364  010A14  D714               	goto	l9605
 14365  010A16  0A1F               	xorlw	31	; case 112
 14366  010A18  B4D8               	btfsc	status,2,c
 14367  010A1A  D713               	goto	l9609
 14368  010A1C  0A01               	xorlw	1	; case 113
 14369  010A1E  B4D8               	btfsc	status,2,c
 14370  010A20  D712               	goto	l9613
 14371  010A22  0A03               	xorlw	3	; case 114
 14372  010A24  B4D8               	btfsc	status,2,c
 14373  010A26  D711               	goto	l9617
 14374  010A28  0A01               	xorlw	1	; case 115
 14375  010A2A  B4D8               	btfsc	status,2,c
 14376  010A2C  D710               	goto	l9621
 14377  010A2E  0A07               	xorlw	7	; case 116
 14378  010A30  B4D8               	btfsc	status,2,c
 14379  010A32  D70F               	goto	l9625
 14380  010A34  0A01               	xorlw	1	; case 117
 14381  010A36  B4D8               	btfsc	status,2,c
 14382  010A38  D70E               	goto	l9629
 14383  010A3A  0A03               	xorlw	3	; case 118
 14384  010A3C  B4D8               	btfsc	status,2,c
 14385  010A3E  D70D               	goto	l9633
 14386  010A40  0A01               	xorlw	1	; case 119
 14387  010A42  B4D8               	btfsc	status,2,c
 14388  010A44  D70C               	goto	l9637
 14389  010A46  0A0F               	xorlw	15	; case 120
 14390  010A48  B4D8               	btfsc	status,2,c
 14391  010A4A  D70B               	goto	l9641
 14392  010A4C  0A01               	xorlw	1	; case 121
 14393  010A4E  B4D8               	btfsc	status,2,c
 14394  010A50  D70A               	goto	l9645
 14395  010A52  0A03               	xorlw	3	; case 122
 14396  010A54  B4D8               	btfsc	status,2,c
 14397  010A56  D709               	goto	l9649
 14398                           
 14399                           ;Types.c: 354: return 0;
 14400                           
 14401                           ; BSR set to: 0
 14402  010A58  0E00               	movlw	0
 14403  010A5A  0012               	return	
 14404  010A5C                     __end_of_ToSegment:
 14405                           	opt stack 0
 14406                           tosu	equ	0xFFF
 14407                           tosh	equ	0xFFE
 14408                           tosl	equ	0xFFD
 14409                           pclath	equ	0xFFA
 14410                           tblptru	equ	0xFF8
 14411                           tblptrh	equ	0xFF7
 14412                           tblptrl	equ	0xFF6
 14413                           tablat	equ	0xFF5
 14414                           prodh	equ	0xFF4
 14415                           prodl	equ	0xFF3
 14416                           intcon	equ	0xFF2
 14417                           indf0	equ	0xFEF
 14418                           postinc0	equ	0xFEE
 14419                           fsr0h	equ	0xFEA
 14420                           fsr0l	equ	0xFE9
 14421                           wreg	equ	0xFE8
 14422                           indf1	equ	0xFE7
 14423                           postdec1	equ	0xFE5
 14424                           plusw1	equ	0xFE3
 14425                           fsr1h	equ	0xFE2
 14426                           fsr1l	equ	0xFE1
 14427                           indf2	equ	0xFDF
 14428                           postinc2	equ	0xFDE
 14429                           postdec2	equ	0xFDD
 14430                           plusw2	equ	0xFDB
 14431                           fsr2h	equ	0xFDA
 14432                           fsr2l	equ	0xFD9
 14433                           status	equ	0xFD8
 14434                           
 14435 ;; *************** function _HMI_SetDown *****************
 14436 ;; Defined at:
 14437 ;;		line 180 in file "HMI.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;  pValue          1    wreg     unsigned char 
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;  pValue          1    0[BANK0 ] unsigned char 
 14442 ;; Return value:  Size  Location     Type
 14443 ;;                  1    wreg      void 
 14444 ;; Registers used:
 14445 ;;		wreg
 14446 ;; Tracked objects:
 14447 ;;		On entry : 0/0
 14448 ;;		On exit  : 0/0
 14449 ;;		Unchanged: 0/0
 14450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14454 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14455 ;;Total ram usage:        1 bytes
 14456 ;; Hardware stack levels used:    1
 14457 ;; Hardware stack levels required when called:    7
 14458 ;; This function calls:
 14459 ;;		Nothing
 14460 ;; This function is called by:
 14461 ;;		_Event_HMI_DownButton
 14462 ;; This function uses a non-reentrant model
 14463 ;;
 14464                           
 14465                           	psect	text79
 14466  014696                     __ptext79:
 14467                           	opt stack 0
 14468  014696                     _HMI_SetDown:
 14469                           	opt stack 20
 14470                           
 14471                           ;incstack = 0
 14472                           ;HMI_SetDown@pValue stored from wreg
 14473  014696  0100               	movlb	0	; () banked
 14474  014698  6FB1               	movwf	HMI_SetDown@pValue& (0+255),b
 14475                           
 14476                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
 14477  01469A  0100               	movlb	0	; () banked
 14478  01469C  B1B1               	btfsc	HMI_SetDown@pValue& (0+255),0,b
 14479  01469E  D003               	bra	u6835
 14480  0146A0  0101               	movlb	1	; () banked
 14481  0146A2  932D               	bcf	(_HMIBoard+6)& (0+255),1,b
 14482  0146A4  D002               	bra	u6836
 14483  0146A6                     u6835:
 14484  0146A6  0101               	movlb	1	; () banked
 14485  0146A8  832D               	bsf	(_HMIBoard+6)& (0+255),1,b
 14486  0146AA                     u6836:
 14487                           
 14488                           ; BSR set to: 1
 14489  0146AA  0012               	return		;funcret
 14490  0146AC                     __end_of_HMI_SetDown:
 14491                           	opt stack 0
 14492                           tosu	equ	0xFFF
 14493                           tosh	equ	0xFFE
 14494                           tosl	equ	0xFFD
 14495                           pclath	equ	0xFFA
 14496                           tblptru	equ	0xFF8
 14497                           tblptrh	equ	0xFF7
 14498                           tblptrl	equ	0xFF6
 14499                           tablat	equ	0xFF5
 14500                           prodh	equ	0xFF4
 14501                           prodl	equ	0xFF3
 14502                           intcon	equ	0xFF2
 14503                           indf0	equ	0xFEF
 14504                           postinc0	equ	0xFEE
 14505                           fsr0h	equ	0xFEA
 14506                           fsr0l	equ	0xFE9
 14507                           wreg	equ	0xFE8
 14508                           indf1	equ	0xFE7
 14509                           postdec1	equ	0xFE5
 14510                           plusw1	equ	0xFE3
 14511                           fsr1h	equ	0xFE2
 14512                           fsr1l	equ	0xFE1
 14513                           indf2	equ	0xFDF
 14514                           postinc2	equ	0xFDE
 14515                           postdec2	equ	0xFDD
 14516                           plusw2	equ	0xFDB
 14517                           fsr2h	equ	0xFDA
 14518                           fsr2l	equ	0xFD9
 14519                           status	equ	0xFD8
 14520                           
 14521 ;; *************** function _LED_Toggle *****************
 14522 ;; Defined at:
 14523 ;;		line 50 in file "Library/LED.c"
 14524 ;; Parameters:    Size  Location     Type
 14525 ;;  pLED            1    wreg     enum E6739
 14526 ;; Auto vars:     Size  Location     Type
 14527 ;;  pLED            1   24[BANK0 ] enum E6739
 14528 ;; Return value:  Size  Location     Type
 14529 ;;                  1    wreg      void 
 14530 ;; Registers used:
 14531 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14532 ;; Tracked objects:
 14533 ;;		On entry : 0/0
 14534 ;;		On exit  : 0/0
 14535 ;;		Unchanged: 0/0
 14536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14540 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14541 ;;Total ram usage:        1 bytes
 14542 ;; Hardware stack levels used:    1
 14543 ;; Hardware stack levels required when called:   12
 14544 ;; This function calls:
 14545 ;;		_Port_TogglePin
 14546 ;; This function is called by:
 14547 ;;		_LCD_Reset
 14548 ;;		_Event_DIPSwitch
 14549 ;;		_Event_HMI_DIPSwitch
 14550 ;;		_Event_TestButton
 14551 ;;		_Event_HMI_LeftButton
 14552 ;;		_Event_HMI_RightButton
 14553 ;;		_Event_HMI_UpButton
 14554 ;;		_Event_HMI_DownButton
 14555 ;;		_Event_ADCSequenceComplete
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           	psect	text80
 14560  013DFC                     __ptext80:
 14561                           	opt stack 0
 14562  013DFC                     _LED_Toggle:
 14563                           	opt stack 15
 14564                           
 14565                           ; BSR set to: 1
 14566                           ;incstack = 0
 14567                           ;LED_Toggle@pLED stored from wreg
 14568  013DFC  0100               	movlb	0	; () banked
 14569  013DFE  6FC9               	movwf	LED_Toggle@pLED& (0+255),b
 14570                           
 14571                           ;LED.c: 52: switch (pLED)
 14572  013E00  D018               	goto	l10109
 14573  013E02                     l10103:
 14574                           
 14575                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 14576  013E02  0E95               	movlw	low _PortC
 14577  013E04  0100               	movlb	0	; () banked
 14578  013E06  6FC5               	movwf	Port_TogglePin@pInput& (0+255),b
 14579  013E08  0E00               	movlw	high _PortC
 14580  013E0A  0100               	movlb	0	; () banked
 14581  013E0C  6FC6               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14582  013E0E  0E00               	movlw	0
 14583  013E10  0100               	movlb	0	; () banked
 14584  013E12  6FC7               	movwf	Port_TogglePin@pPin& (0+255),b
 14585  013E14  EC3C  F0A1         	call	_Port_TogglePin	;wreg free
 14586                           
 14587                           ;LED.c: 56: break;
 14588  013E18  0012               	return	
 14589  013E1A                     l10105:
 14590                           
 14591                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 14592  013E1A  0E95               	movlw	low _PortC
 14593  013E1C  0100               	movlb	0	; () banked
 14594  013E1E  6FC5               	movwf	Port_TogglePin@pInput& (0+255),b
 14595  013E20  0E00               	movlw	high _PortC
 14596  013E22  0100               	movlb	0	; () banked
 14597  013E24  6FC6               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14598  013E26  0E01               	movlw	1
 14599  013E28  0100               	movlb	0	; () banked
 14600  013E2A  6FC7               	movwf	Port_TogglePin@pPin& (0+255),b
 14601  013E2C  EC3C  F0A1         	call	_Port_TogglePin	;wreg free
 14602                           
 14603                           ;LED.c: 60: }
 14604                           
 14605                           ;LED.c: 59: break;
 14606  013E30  0012               	return	
 14607  013E32                     l10109:
 14608  013E32  0100               	movlb	0	; () banked
 14609  013E34  51C9               	movf	LED_Toggle@pLED& (0+255),w,b
 14610                           
 14611                           ; Switch size 1, requested type "space"
 14612                           ; Number of cases is 2, Range of values is 0 to 1
 14613                           ; switch strategies available:
 14614                           ; Name         Instructions Cycles
 14615                           ; simple_byte            7     4 (average)
 14616                           ;	Chosen strategy is simple_byte
 14617  013E36  0A00               	xorlw	0	; case 0
 14618  013E38  B4D8               	btfsc	status,2,c
 14619  013E3A  D7E3               	goto	l10103
 14620  013E3C  0A01               	xorlw	1	; case 1
 14621  013E3E  A4D8               	btfss	status,2,c
 14622  013E40  0012               	return	
 14623  013E42  D7EB               	goto	l10105
 14624  013E44                     __end_of_LED_Toggle:
 14625                           	opt stack 0
 14626                           tosu	equ	0xFFF
 14627                           tosh	equ	0xFFE
 14628                           tosl	equ	0xFFD
 14629                           pclath	equ	0xFFA
 14630                           tblptru	equ	0xFF8
 14631                           tblptrh	equ	0xFF7
 14632                           tblptrl	equ	0xFF6
 14633                           tablat	equ	0xFF5
 14634                           prodh	equ	0xFF4
 14635                           prodl	equ	0xFF3
 14636                           intcon	equ	0xFF2
 14637                           indf0	equ	0xFEF
 14638                           postinc0	equ	0xFEE
 14639                           fsr0h	equ	0xFEA
 14640                           fsr0l	equ	0xFE9
 14641                           wreg	equ	0xFE8
 14642                           indf1	equ	0xFE7
 14643                           postdec1	equ	0xFE5
 14644                           plusw1	equ	0xFE3
 14645                           fsr1h	equ	0xFE2
 14646                           fsr1l	equ	0xFE1
 14647                           indf2	equ	0xFDF
 14648                           postinc2	equ	0xFDE
 14649                           postdec2	equ	0xFDD
 14650                           plusw2	equ	0xFDB
 14651                           fsr2h	equ	0xFDA
 14652                           fsr2l	equ	0xFD9
 14653                           status	equ	0xFD8
 14654                           
 14655 ;; *************** function _Port_TogglePin *****************
 14656 ;; Defined at:
 14657 ;;		line 278 in file "Library/Port.c"
 14658 ;; Parameters:    Size  Location     Type
 14659 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 14660 ;;		 -> PortC(10), 
 14661 ;;  pPin            1   22[BANK0 ] enum E6750
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;  Value           1   23[BANK0 ] unsigned char 
 14664 ;; Return value:  Size  Location     Type
 14665 ;;                  1    wreg      void 
 14666 ;; Registers used:
 14667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14668 ;; Tracked objects:
 14669 ;;		On entry : 0/0
 14670 ;;		On exit  : 0/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14673 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14676 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14677 ;;Total ram usage:        4 bytes
 14678 ;; Hardware stack levels used:    1
 14679 ;; Hardware stack levels required when called:   11
 14680 ;; This function calls:
 14681 ;;		_Port_GetPin
 14682 ;;		_Port_SetPin
 14683 ;; This function is called by:
 14684 ;;		_LED_Toggle
 14685 ;; This function uses a non-reentrant model
 14686 ;;
 14687                           
 14688                           	psect	text81
 14689  014278                     __ptext81:
 14690                           	opt stack 0
 14691  014278                     _Port_TogglePin:
 14692                           	opt stack 15
 14693                           
 14694                           ;Port.c: 280: UINT8 Value;
 14695                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 14696                           
 14697                           ;incstack = 0
 14698  014278  C0C5  F0B1         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 14699  01427C  C0C6  F0B2         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 14700  014280  C0C7  F0B3         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 14701  014284  EC22  F09F         	call	_Port_GetPin	;wreg free
 14702  014288  0100               	movlb	0	; () banked
 14703  01428A  6FC8               	movwf	Port_TogglePin@Value& (0+255),b
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;Port.c: 282: Value ^= 0x01;
 14707  01428C  0E01               	movlw	1
 14708  01428E  0100               	movlb	0	; () banked
 14709  014290  1BC8               	xorwf	Port_TogglePin@Value& (0+255),f,b
 14710                           
 14711                           ; BSR set to: 0
 14712                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 14713  014292  C0C5  F0C0         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 14714  014296  C0C6  F0C1         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 14715  01429A  C0C7  F0C2         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 14716  01429E  C0C8  F0C3         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 14717  0142A2  EC92  F093         	call	_Port_SetPin	;wreg free
 14718  0142A6  0012               	return		;funcret
 14719  0142A8                     __end_of_Port_TogglePin:
 14720                           	opt stack 0
 14721                           tosu	equ	0xFFF
 14722                           tosh	equ	0xFFE
 14723                           tosl	equ	0xFFD
 14724                           pclath	equ	0xFFA
 14725                           tblptru	equ	0xFF8
 14726                           tblptrh	equ	0xFF7
 14727                           tblptrl	equ	0xFF6
 14728                           tablat	equ	0xFF5
 14729                           prodh	equ	0xFF4
 14730                           prodl	equ	0xFF3
 14731                           intcon	equ	0xFF2
 14732                           indf0	equ	0xFEF
 14733                           postinc0	equ	0xFEE
 14734                           fsr0h	equ	0xFEA
 14735                           fsr0l	equ	0xFE9
 14736                           wreg	equ	0xFE8
 14737                           indf1	equ	0xFE7
 14738                           postdec1	equ	0xFE5
 14739                           plusw1	equ	0xFE3
 14740                           fsr1h	equ	0xFE2
 14741                           fsr1l	equ	0xFE1
 14742                           indf2	equ	0xFDF
 14743                           postinc2	equ	0xFDE
 14744                           postdec2	equ	0xFDD
 14745                           plusw2	equ	0xFDB
 14746                           fsr2h	equ	0xFDA
 14747                           fsr2l	equ	0xFD9
 14748                           status	equ	0xFD8
 14749                           
 14750 ;; *************** function _Port_SetPin *****************
 14751 ;; Defined at:
 14752 ;;		line 247 in file "Library/Port.c"
 14753 ;; Parameters:    Size  Location     Type
 14754 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14755 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14756 ;;  pPin            1   17[BANK0 ] enum E6750
 14757 ;;  pValue          1   18[BANK0 ] unsigned char 
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;  Type            1   19[BANK0 ] enum E6795
 14760 ;; Return value:  Size  Location     Type
 14761 ;;                  1    wreg      void 
 14762 ;; Registers used:
 14763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14764 ;; Tracked objects:
 14765 ;;		On entry : 0/0
 14766 ;;		On exit  : 0/0
 14767 ;;		Unchanged: 0/0
 14768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14769 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14772 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14773 ;;Total ram usage:        5 bytes
 14774 ;; Hardware stack levels used:    1
 14775 ;; Hardware stack levels required when called:   10
 14776 ;; This function calls:
 14777 ;;		_Byte_SetBit
 14778 ;;		_Word_GetPair
 14779 ;; This function is called by:
 14780 ;;		_Reset_Low
 14781 ;;		_Reset_High
 14782 ;;		_LED_Set
 14783 ;;		_Port_TogglePin
 14784 ;;		_Motor_Init
 14785 ;;		_Motor_Step
 14786 ;;		_MXK_Init
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           	psect	text82
 14791  012724                     __ptext82:
 14792                           	opt stack 0
 14793  012724                     _Port_SetPin:
 14794                           	opt stack 19
 14795                           
 14796                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 14797                           
 14798                           ;incstack = 0
 14799  012724  0E08               	movlw	8
 14800  012726  0100               	movlb	0	; () banked
 14801  012728  25C0               	addwf	Port_SetPin@pInput& (0+255),w,b
 14802  01272A  0100               	movlb	0	; () banked
 14803  01272C  6FBD               	movwf	Word_GetPair@pInput& (0+255),b
 14804  01272E  0E00               	movlw	0
 14805  012730  0100               	movlb	0	; () banked
 14806  012732  21C1               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 14807  012734  0100               	movlb	0	; () banked
 14808  012736  6FBE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14809  012738  C0C2  F0BF         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 14810  01273C  EC2B  F0A0         	call	_Word_GetPair	;wreg free
 14811  012740  0100               	movlb	0	; () banked
 14812  012742  6FC4               	movwf	Port_SetPin@Type& (0+255),b
 14813                           
 14814                           ;Port.c: 250: switch (Type)
 14815  012744  D042               	goto	l9477
 14816  012746                     l9463:
 14817                           
 14818                           ; BSR set to: 0
 14819                           ;Port.c: 256: pValue &= 1;
 14820  012746  0E01               	movlw	1
 14821  012748  0100               	movlb	0	; () banked
 14822  01274A  17C3               	andwf	Port_SetPin@pValue& (0+255),f,b
 14823                           
 14824                           ; BSR set to: 0
 14825                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14826  01274C  0100               	movlb	0	; () banked
 14827  01274E  EE20 F002          	lfsr	2,2
 14828  012752  51C0               	movf	Port_SetPin@pInput& (0+255),w,b
 14829  012754  26D9               	addwf	fsr2l,f,c
 14830  012756  51C1               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14831  012758  22DA               	addwfc	fsr2h,f,c
 14832  01275A  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 14833  01275E  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 14834  012762  C0C2  F0B3         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14835  012766  C0C3  F0B4         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14836  01276A  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 14837                           
 14838                           ;Port.c: 258: break;
 14839  01276E  0012               	return	
 14840  012770                     l9467:
 14841                           
 14842                           ;Port.c: 261: pValue &= 1;
 14843  012770  0E01               	movlw	1
 14844  012772  0100               	movlb	0	; () banked
 14845  012774  17C3               	andwf	Port_SetPin@pValue& (0+255),f,b
 14846                           
 14847                           ;Port.c: 262: pValue ^= 1;
 14848  012776  0E01               	movlw	1
 14849  012778  0100               	movlb	0	; () banked
 14850  01277A  1BC3               	xorwf	Port_SetPin@pValue& (0+255),f,b
 14851                           
 14852                           ; BSR set to: 0
 14853                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14854  01277C  0100               	movlb	0	; () banked
 14855  01277E  EE20 F002          	lfsr	2,2
 14856  012782  51C0               	movf	Port_SetPin@pInput& (0+255),w,b
 14857  012784  26D9               	addwf	fsr2l,f,c
 14858  012786  51C1               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14859  012788  22DA               	addwfc	fsr2h,f,c
 14860  01278A  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 14861  01278E  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 14862  012792  C0C2  F0B3         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14863  012796  C0C3  F0B4         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14864  01279A  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 14865                           
 14866                           ;Port.c: 264: break;
 14867  01279E  0012               	return	
 14868  0127A0                     l9471:
 14869                           
 14870                           ;Port.c: 266: pValue &= 1;
 14871  0127A0  0E01               	movlw	1
 14872  0127A2  0100               	movlb	0	; () banked
 14873  0127A4  17C3               	andwf	Port_SetPin@pValue& (0+255),f,b
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 14877  0127A6  0100               	movlb	0	; () banked
 14878  0127A8  EE20 F004          	lfsr	2,4
 14879  0127AC  51C0               	movf	Port_SetPin@pInput& (0+255),w,b
 14880  0127AE  26D9               	addwf	fsr2l,f,c
 14881  0127B0  51C1               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14882  0127B2  22DA               	addwfc	fsr2h,f,c
 14883  0127B4  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 14884  0127B8  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 14885  0127BC  C0C2  F0B3         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14886  0127C0  C0C3  F0B4         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14887  0127C4  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 14888                           
 14889                           ;Port.c: 269: }
 14890                           
 14891                           ;Port.c: 268: break;
 14892  0127C8  0012               	return	
 14893  0127CA                     l9477:
 14894  0127CA  0100               	movlb	0	; () banked
 14895  0127CC  51C4               	movf	Port_SetPin@Type& (0+255),w,b
 14896                           
 14897                           ; Switch size 1, requested type "space"
 14898                           ; Number of cases is 4, Range of values is 0 to 3
 14899                           ; switch strategies available:
 14900                           ; Name         Instructions Cycles
 14901                           ; simple_byte           13     7 (average)
 14902                           ;	Chosen strategy is simple_byte
 14903  0127CE  0A00               	xorlw	0	; case 0
 14904  0127D0  B4D8               	btfsc	status,2,c
 14905  0127D2  0012               	return	
 14906  0127D4  0A01               	xorlw	1	; case 1
 14907  0127D6  B4D8               	btfsc	status,2,c
 14908  0127D8  D7B6               	goto	l9463
 14909  0127DA  0A03               	xorlw	3	; case 2
 14910  0127DC  B4D8               	btfsc	status,2,c
 14911  0127DE  D7C8               	goto	l9467
 14912  0127E0  0A01               	xorlw	1	; case 3
 14913  0127E2  A4D8               	btfss	status,2,c
 14914  0127E4  0012               	return	
 14915  0127E6  D7DC               	goto	l9471
 14916  0127E8                     __end_of_Port_SetPin:
 14917                           	opt stack 0
 14918                           tosu	equ	0xFFF
 14919                           tosh	equ	0xFFE
 14920                           tosl	equ	0xFFD
 14921                           pclath	equ	0xFFA
 14922                           tblptru	equ	0xFF8
 14923                           tblptrh	equ	0xFF7
 14924                           tblptrl	equ	0xFF6
 14925                           tablat	equ	0xFF5
 14926                           prodh	equ	0xFF4
 14927                           prodl	equ	0xFF3
 14928                           intcon	equ	0xFF2
 14929                           indf0	equ	0xFEF
 14930                           postinc0	equ	0xFEE
 14931                           fsr0h	equ	0xFEA
 14932                           fsr0l	equ	0xFE9
 14933                           wreg	equ	0xFE8
 14934                           indf1	equ	0xFE7
 14935                           postdec1	equ	0xFE5
 14936                           plusw1	equ	0xFE3
 14937                           fsr1h	equ	0xFE2
 14938                           fsr1l	equ	0xFE1
 14939                           indf2	equ	0xFDF
 14940                           postinc2	equ	0xFDE
 14941                           postdec2	equ	0xFDD
 14942                           plusw2	equ	0xFDB
 14943                           fsr2h	equ	0xFDA
 14944                           fsr2l	equ	0xFD9
 14945                           status	equ	0xFD8
 14946                           
 14947 ;; *************** function _Port_GetPin *****************
 14948 ;; Defined at:
 14949 ;;		line 271 in file "Library/Port.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 14952 ;;		 -> PortB(10), PortE(10), PortC(10), 
 14953 ;;  pPin            1    2[BANK0 ] enum E6750
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;  Output          1    5[BANK0 ] unsigned char 
 14956 ;; Return value:  Size  Location     Type
 14957 ;;                  1    wreg      unsigned char 
 14958 ;; Registers used:
 14959 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14965 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14968 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14969 ;;Total ram usage:        6 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    7
 14972 ;; This function calls:
 14973 ;;		Nothing
 14974 ;; This function is called by:
 14975 ;;		_Port_TogglePin
 14976 ;;		_HMI_LeftSwitch
 14977 ;;		_HMI_RightSwitch
 14978 ;;		_HMI_UpSwitch
 14979 ;;		_HMI_DownSwitch
 14980 ;;		_MXK_TestButton
 14981 ;; This function uses a non-reentrant model
 14982 ;;
 14983                           
 14984                           	psect	text83
 14985  013E44                     __ptext83:
 14986                           	opt stack 0
 14987  013E44                     _Port_GetPin:
 14988                           	opt stack 22
 14989                           
 14990                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 14991                           
 14992                           ;incstack = 0
 14993  013E44  0100               	movlb	0	; () banked
 14994  013E46  EE20 F006          	lfsr	2,6
 14995  013E4A  51B1               	movf	Port_GetPin@pInput& (0+255),w,b
 14996  013E4C  26D9               	addwf	fsr2l,f,c
 14997  013E4E  51B2               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 14998  013E50  22DA               	addwfc	fsr2h,f,c
 14999  013E52  CFDE F0B4          	movff	postinc2,??_Port_GetPin
 15000  013E56  CFDD F0B5          	movff	postdec2,??_Port_GetPin+1
 15001  013E5A  C0B4  FFD9         	movff	??_Port_GetPin,fsr2l
 15002  013E5E  C0B5  FFDA         	movff	??_Port_GetPin+1,fsr2h
 15003  013E62  50DF               	movf	indf2,w,c
 15004  013E64  0100               	movlb	0	; () banked
 15005  013E66  6FB6               	movwf	Port_GetPin@Output& (0+255),b
 15006                           
 15007                           ; BSR set to: 0
 15008                           ;Port.c: 274: Output >>= (UINT8)pPin;
 15009  013E68  0100               	movlb	0	; () banked
 15010  013E6A  29B3               	incf	Port_GetPin@pPin& (0+255),w,b
 15011  013E6C  0100               	movlb	0	; () banked
 15012  013E6E  6FB4               	movwf	??_Port_GetPin& (0+255),b
 15013  013E70  D003               	goto	u6200
 15014  013E72                     u6205:
 15015  013E72  0100               	movlb	0	; () banked
 15016  013E74  90D8               	bcf	status,0,c
 15017  013E76  33B6               	rrcf	Port_GetPin@Output& (0+255),f,b
 15018  013E78                     u6200:
 15019  013E78  0100               	movlb	0	; () banked
 15020  013E7A  2FB4               	decfsz	??_Port_GetPin& (0+255),f,b
 15021  013E7C  D7FA               	goto	u6205
 15022                           
 15023                           ;Port.c: 275: Output &= 1;
 15024  013E7E  0E01               	movlw	1
 15025  013E80  0100               	movlb	0	; () banked
 15026  013E82  17B6               	andwf	Port_GetPin@Output& (0+255),f,b
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;Port.c: 276: return Output;
 15030  013E84  0100               	movlb	0	; () banked
 15031  013E86  51B6               	movf	Port_GetPin@Output& (0+255),w,b
 15032  013E88  0012               	return	
 15033  013E8A                     __end_of_Port_GetPin:
 15034                           	opt stack 0
 15035                           tosu	equ	0xFFF
 15036                           tosh	equ	0xFFE
 15037                           tosl	equ	0xFFD
 15038                           pclath	equ	0xFFA
 15039                           tblptru	equ	0xFF8
 15040                           tblptrh	equ	0xFF7
 15041                           tblptrl	equ	0xFF6
 15042                           tablat	equ	0xFF5
 15043                           prodh	equ	0xFF4
 15044                           prodl	equ	0xFF3
 15045                           intcon	equ	0xFF2
 15046                           indf0	equ	0xFEF
 15047                           postinc0	equ	0xFEE
 15048                           fsr0h	equ	0xFEA
 15049                           fsr0l	equ	0xFE9
 15050                           wreg	equ	0xFE8
 15051                           indf1	equ	0xFE7
 15052                           postdec1	equ	0xFE5
 15053                           plusw1	equ	0xFE3
 15054                           fsr1h	equ	0xFE2
 15055                           fsr1l	equ	0xFE1
 15056                           indf2	equ	0xFDF
 15057                           postinc2	equ	0xFDE
 15058                           postdec2	equ	0xFDD
 15059                           plusw2	equ	0xFDB
 15060                           fsr2h	equ	0xFDA
 15061                           fsr2l	equ	0xFD9
 15062                           status	equ	0xFD8
 15063                           
 15064 ;; *************** function _HMI_SetBar *****************
 15065 ;; Defined at:
 15066 ;;		line 205 in file "HMI.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;  pValue          1    wreg     unsigned char 
 15069 ;; Auto vars:     Size  Location     Type
 15070 ;;  pValue          1    0[BANK0 ] unsigned char 
 15071 ;; Return value:  Size  Location     Type
 15072 ;;                  1    wreg      void 
 15073 ;; Registers used:
 15074 ;;		wreg
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15084 ;;Total ram usage:        1 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    7
 15087 ;; This function calls:
 15088 ;;		Nothing
 15089 ;; This function is called by:
 15090 ;;		_Event_DIPSwitch
 15091 ;;		_Event_HMI_DIPSwitch
 15092 ;;		_Event_HMI_LeftButton
 15093 ;;		_Event_HMI_RightButton
 15094 ;; This function uses a non-reentrant model
 15095 ;;
 15096                           
 15097                           	psect	text84
 15098  01472E                     __ptext84:
 15099                           	opt stack 0
 15100  01472E                     _HMI_SetBar:
 15101                           	opt stack 20
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;incstack = 0
 15105                           ;HMI_SetBar@pValue stored from wreg
 15106  01472E  0100               	movlb	0	; () banked
 15107  014730  6FB1               	movwf	HMI_SetBar@pValue& (0+255),b
 15108                           
 15109                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 15110  014732  C0B1  F12E         	movff	HMI_SetBar@pValue,_HMIBoard+7
 15111  014736  0012               	return		;funcret
 15112  014738                     __end_of_HMI_SetBar:
 15113                           	opt stack 0
 15114                           tosu	equ	0xFFF
 15115                           tosh	equ	0xFFE
 15116                           tosl	equ	0xFFD
 15117                           pclath	equ	0xFFA
 15118                           tblptru	equ	0xFF8
 15119                           tblptrh	equ	0xFF7
 15120                           tblptrl	equ	0xFF6
 15121                           tablat	equ	0xFF5
 15122                           prodh	equ	0xFF4
 15123                           prodl	equ	0xFF3
 15124                           intcon	equ	0xFF2
 15125                           indf0	equ	0xFEF
 15126                           postinc0	equ	0xFEE
 15127                           fsr0h	equ	0xFEA
 15128                           fsr0l	equ	0xFE9
 15129                           wreg	equ	0xFE8
 15130                           indf1	equ	0xFE7
 15131                           postdec1	equ	0xFE5
 15132                           plusw1	equ	0xFE3
 15133                           fsr1h	equ	0xFE2
 15134                           fsr1l	equ	0xFE1
 15135                           indf2	equ	0xFDF
 15136                           postinc2	equ	0xFDE
 15137                           postdec2	equ	0xFDD
 15138                           plusw2	equ	0xFDB
 15139                           fsr2h	equ	0xFDA
 15140                           fsr2l	equ	0xFD9
 15141                           status	equ	0xFD8
 15142                           
 15143 ;; *************** function _HMI_GetBar *****************
 15144 ;; Defined at:
 15145 ;;		line 209 in file "HMI.c"
 15146 ;; Parameters:    Size  Location     Type
 15147 ;;		None
 15148 ;; Auto vars:     Size  Location     Type
 15149 ;;		None
 15150 ;; Return value:  Size  Location     Type
 15151 ;;                  1    wreg      unsigned char 
 15152 ;; Registers used:
 15153 ;;		wreg, status,2
 15154 ;; Tracked objects:
 15155 ;;		On entry : 0/0
 15156 ;;		On exit  : 0/0
 15157 ;;		Unchanged: 0/0
 15158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15163 ;;Total ram usage:        0 bytes
 15164 ;; Hardware stack levels used:    1
 15165 ;; Hardware stack levels required when called:    7
 15166 ;; This function calls:
 15167 ;;		Nothing
 15168 ;; This function is called by:
 15169 ;;		_Event_DIPSwitch
 15170 ;;		_Event_HMI_DIPSwitch
 15171 ;; This function uses a non-reentrant model
 15172 ;;
 15173                           
 15174                           	psect	text85
 15175  014758                     __ptext85:
 15176                           	opt stack 0
 15177  014758                     _HMI_GetBar:
 15178                           	opt stack 20
 15179                           
 15180                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 15181                           
 15182                           ;incstack = 0
 15183  014758  0101               	movlb	1	; () banked
 15184  01475A  512E               	movf	(_HMIBoard+7)& (0+255),w,b
 15185  01475C  0012               	return	
 15186  01475E                     __end_of_HMI_GetBar:
 15187                           	opt stack 0
 15188                           tosu	equ	0xFFF
 15189                           tosh	equ	0xFFE
 15190                           tosl	equ	0xFFD
 15191                           pclath	equ	0xFFA
 15192                           tblptru	equ	0xFF8
 15193                           tblptrh	equ	0xFF7
 15194                           tblptrl	equ	0xFF6
 15195                           tablat	equ	0xFF5
 15196                           prodh	equ	0xFF4
 15197                           prodl	equ	0xFF3
 15198                           intcon	equ	0xFF2
 15199                           indf0	equ	0xFEF
 15200                           postinc0	equ	0xFEE
 15201                           fsr0h	equ	0xFEA
 15202                           fsr0l	equ	0xFE9
 15203                           wreg	equ	0xFE8
 15204                           indf1	equ	0xFE7
 15205                           postdec1	equ	0xFE5
 15206                           plusw1	equ	0xFE3
 15207                           fsr1h	equ	0xFE2
 15208                           fsr1l	equ	0xFE1
 15209                           indf2	equ	0xFDF
 15210                           postinc2	equ	0xFDE
 15211                           postdec2	equ	0xFDD
 15212                           plusw2	equ	0xFDB
 15213                           fsr2h	equ	0xFDA
 15214                           fsr2l	equ	0xFD9
 15215                           status	equ	0xFD8
 15216                           
 15217 ;; *************** function _HMI_Init *****************
 15218 ;; Defined at:
 15219 ;;		line 104 in file "HMI.c"
 15220 ;; Parameters:    Size  Location     Type
 15221 ;;		None
 15222 ;; Auto vars:     Size  Location     Type
 15223 ;;  in              2    0[BANK1 ] unsigned short 
 15224 ;; Return value:  Size  Location     Type
 15225 ;;                  1    wreg      void 
 15226 ;; Registers used:
 15227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15228 ;; Tracked objects:
 15229 ;;		On entry : 0/0
 15230 ;;		On exit  : 0/0
 15231 ;;		Unchanged: 0/0
 15232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15234 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15236 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15237 ;;Total ram usage:        2 bytes
 15238 ;; Hardware stack levels used:    1
 15239 ;; Hardware stack levels required when called:   16
 15240 ;; This function calls:
 15241 ;;		_Button_Init
 15242 ;;		_SPI_Init
 15243 ;;		_SPI_MinSpeed
 15244 ;; This function is called by:
 15245 ;;		_main
 15246 ;; This function uses a non-reentrant model
 15247 ;;
 15248                           
 15249                           	psect	text86
 15250  0112F4                     __ptext86:
 15251                           	opt stack 0
 15252  0112F4                     _HMI_Init:
 15253                           	opt stack 14
 15254                           
 15255                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 15256                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 15257                           
 15258                           ; BSR set to: 1
 15259                           ;incstack = 0
 15260  0112F4  0E57               	movlw	low (_HMIBoard+48)
 15261  0112F6  0100               	movlb	0	; () banked
 15262  0112F8  6FEC               	movwf	Button_Init@pInput& (0+255),b
 15263  0112FA  0E01               	movlw	high (_HMIBoard+48)
 15264  0112FC  0100               	movlb	0	; () banked
 15265  0112FE  6FED               	movwf	(Button_Init@pInput+1)& (0+255),b
 15266  011300  0E00               	movlw	0
 15267  011302  0100               	movlb	0	; () banked
 15268  011304  6FEF               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15269  011306  0E02               	movlw	2
 15270  011308  6FEE               	movwf	Button_Init@pThreshold& (0+255),b
 15271  01130A  0E6A               	movlw	low _HMI_InitButtons
 15272  01130C  0100               	movlb	0	; () banked
 15273  01130E  6FF0               	movwf	Button_Init@pInitIO& (0+255),b
 15274  011310  0E47               	movlw	high _HMI_InitButtons
 15275  011312  0100               	movlb	0	; () banked
 15276  011314  6FF1               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15277  011316  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15278  011318  0100               	movlb	0	; () banked
 15279  01131A  6FF2               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15280  01131C  0EAE               	movlw	low _HMI_DIPSwitch
 15281  01131E  0100               	movlb	0	; () banked
 15282  011320  6FF3               	movwf	Button_Init@pGetState& (0+255),b
 15283  011322  0E45               	movlw	high _HMI_DIPSwitch
 15284  011324  0100               	movlb	0	; () banked
 15285  011326  6FF4               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15286  011328  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 15287  01132A  0100               	movlb	0	; () banked
 15288  01132C  6FF5               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15289  01132E  0E64               	movlw	low _Event_HMI_DIPSwitch
 15290  011330  0100               	movlb	0	; () banked
 15291  011332  6FF6               	movwf	Button_Init@pFunction& (0+255),b
 15292  011334  0E43               	movlw	high _Event_HMI_DIPSwitch
 15293  011336  0100               	movlb	0	; () banked
 15294  011338  6FF7               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15295  01133A  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 15296  01133C  0100               	movlb	0	; () banked
 15297  01133E  6FF8               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15298  011340  ECC0  F092         	call	_Button_Init	;wreg free
 15299                           
 15300                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 15301                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 15302  011344  0E39               	movlw	low (_HMIBoard+18)
 15303  011346  0100               	movlb	0	; () banked
 15304  011348  6FEC               	movwf	Button_Init@pInput& (0+255),b
 15305  01134A  0E01               	movlw	high (_HMIBoard+18)
 15306  01134C  0100               	movlb	0	; () banked
 15307  01134E  6FED               	movwf	(Button_Init@pInput+1)& (0+255),b
 15308  011350  0E00               	movlw	0
 15309  011352  0100               	movlb	0	; () banked
 15310  011354  6FEF               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15311  011356  0E02               	movlw	2
 15312  011358  6FEE               	movwf	Button_Init@pThreshold& (0+255),b
 15313  01135A  0E6A               	movlw	low _HMI_InitButtons
 15314  01135C  0100               	movlb	0	; () banked
 15315  01135E  6FF0               	movwf	Button_Init@pInitIO& (0+255),b
 15316  011360  0E47               	movlw	high _HMI_InitButtons
 15317  011362  0100               	movlb	0	; () banked
 15318  011364  6FF1               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15319  011366  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15320  011368  0100               	movlb	0	; () banked
 15321  01136A  6FF2               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15322  01136C  0E0E               	movlw	low _HMI_LeftSwitch
 15323  01136E  0100               	movlb	0	; () banked
 15324  011370  6FF3               	movwf	Button_Init@pGetState& (0+255),b
 15325  011372  0E46               	movlw	high _HMI_LeftSwitch
 15326  011374  0100               	movlb	0	; () banked
 15327  011376  6FF4               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15328  011378  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 15329  01137A  0100               	movlb	0	; () banked
 15330  01137C  6FF5               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15331  01137E  0E86               	movlw	low _Event_HMI_LeftButton
 15332  011380  0100               	movlb	0	; () banked
 15333  011382  6FF6               	movwf	Button_Init@pFunction& (0+255),b
 15334  011384  0E3B               	movlw	high _Event_HMI_LeftButton
 15335  011386  0100               	movlb	0	; () banked
 15336  011388  6FF7               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15337  01138A  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 15338  01138C  0100               	movlb	0	; () banked
 15339  01138E  6FF8               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15340  011390  ECC0  F092         	call	_Button_Init	;wreg free
 15341                           
 15342                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 15343                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 15344  011394  0E2F               	movlw	low (_HMIBoard+8)
 15345  011396  0100               	movlb	0	; () banked
 15346  011398  6FEC               	movwf	Button_Init@pInput& (0+255),b
 15347  01139A  0E01               	movlw	high (_HMIBoard+8)
 15348  01139C  0100               	movlb	0	; () banked
 15349  01139E  6FED               	movwf	(Button_Init@pInput+1)& (0+255),b
 15350  0113A0  0E00               	movlw	0
 15351  0113A2  0100               	movlb	0	; () banked
 15352  0113A4  6FEF               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15353  0113A6  0E02               	movlw	2
 15354  0113A8  6FEE               	movwf	Button_Init@pThreshold& (0+255),b
 15355  0113AA  0E6A               	movlw	low _HMI_InitButtons
 15356  0113AC  0100               	movlb	0	; () banked
 15357  0113AE  6FF0               	movwf	Button_Init@pInitIO& (0+255),b
 15358  0113B0  0E47               	movlw	high _HMI_InitButtons
 15359  0113B2  0100               	movlb	0	; () banked
 15360  0113B4  6FF1               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15361  0113B6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15362  0113B8  0100               	movlb	0	; () banked
 15363  0113BA  6FF2               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15364  0113BC  0EF6               	movlw	low _HMI_RightSwitch
 15365  0113BE  0100               	movlb	0	; () banked
 15366  0113C0  6FF3               	movwf	Button_Init@pGetState& (0+255),b
 15367  0113C2  0E45               	movlw	high _HMI_RightSwitch
 15368  0113C4  0100               	movlb	0	; () banked
 15369  0113C6  6FF4               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15370  0113C8  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 15371  0113CA  0100               	movlb	0	; () banked
 15372  0113CC  6FF5               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15373  0113CE  0E14               	movlw	low _Event_HMI_RightButton
 15374  0113D0  0100               	movlb	0	; () banked
 15375  0113D2  6FF6               	movwf	Button_Init@pFunction& (0+255),b
 15376  0113D4  0E3F               	movlw	high _Event_HMI_RightButton
 15377  0113D6  0100               	movlb	0	; () banked
 15378  0113D8  6FF7               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15379  0113DA  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 15380  0113DC  0100               	movlb	0	; () banked
 15381  0113DE  6FF8               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15382  0113E0  ECC0  F092         	call	_Button_Init	;wreg free
 15383                           
 15384                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 15385                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 15386  0113E4  0E43               	movlw	low (_HMIBoard+28)
 15387  0113E6  0100               	movlb	0	; () banked
 15388  0113E8  6FEC               	movwf	Button_Init@pInput& (0+255),b
 15389  0113EA  0E01               	movlw	high (_HMIBoard+28)
 15390  0113EC  0100               	movlb	0	; () banked
 15391  0113EE  6FED               	movwf	(Button_Init@pInput+1)& (0+255),b
 15392  0113F0  0E00               	movlw	0
 15393  0113F2  0100               	movlb	0	; () banked
 15394  0113F4  6FEF               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15395  0113F6  0E02               	movlw	2
 15396  0113F8  6FEE               	movwf	Button_Init@pThreshold& (0+255),b
 15397  0113FA  0E6A               	movlw	low _HMI_InitButtons
 15398  0113FC  0100               	movlb	0	; () banked
 15399  0113FE  6FF0               	movwf	Button_Init@pInitIO& (0+255),b
 15400  011400  0E47               	movlw	high _HMI_InitButtons
 15401  011402  0100               	movlb	0	; () banked
 15402  011404  6FF1               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15403  011406  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15404  011408  0100               	movlb	0	; () banked
 15405  01140A  6FF2               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15406  01140C  0EDE               	movlw	low _HMI_UpSwitch
 15407  01140E  0100               	movlb	0	; () banked
 15408  011410  6FF3               	movwf	Button_Init@pGetState& (0+255),b
 15409  011412  0E45               	movlw	high _HMI_UpSwitch
 15410  011414  0100               	movlb	0	; () banked
 15411  011416  6FF4               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15412  011418  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 15413  01141A  0100               	movlb	0	; () banked
 15414  01141C  6FF5               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15415  01141E  0E48               	movlw	low _Event_HMI_UpButton
 15416  011420  0100               	movlb	0	; () banked
 15417  011422  6FF6               	movwf	Button_Init@pFunction& (0+255),b
 15418  011424  0E42               	movlw	high _Event_HMI_UpButton
 15419  011426  0100               	movlb	0	; () banked
 15420  011428  6FF7               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15421  01142A  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 15422  01142C  0100               	movlb	0	; () banked
 15423  01142E  6FF8               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15424  011430  ECC0  F092         	call	_Button_Init	;wreg free
 15425                           
 15426                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 15427                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 15428  011434  0E4D               	movlw	low (_HMIBoard+38)
 15429  011436  0100               	movlb	0	; () banked
 15430  011438  6FEC               	movwf	Button_Init@pInput& (0+255),b
 15431  01143A  0E01               	movlw	high (_HMIBoard+38)
 15432  01143C  0100               	movlb	0	; () banked
 15433  01143E  6FED               	movwf	(Button_Init@pInput+1)& (0+255),b
 15434  011440  0E00               	movlw	0
 15435  011442  0100               	movlb	0	; () banked
 15436  011444  6FEF               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15437  011446  0E02               	movlw	2
 15438  011448  6FEE               	movwf	Button_Init@pThreshold& (0+255),b
 15439  01144A  0E6A               	movlw	low _HMI_InitButtons
 15440  01144C  0100               	movlb	0	; () banked
 15441  01144E  6FF0               	movwf	Button_Init@pInitIO& (0+255),b
 15442  011450  0E47               	movlw	high _HMI_InitButtons
 15443  011452  0100               	movlb	0	; () banked
 15444  011454  6FF1               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15445  011456  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15446  011458  0100               	movlb	0	; () banked
 15447  01145A  6FF2               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15448  01145C  0EC6               	movlw	low _HMI_DownSwitch
 15449  01145E  0100               	movlb	0	; () banked
 15450  011460  6FF3               	movwf	Button_Init@pGetState& (0+255),b
 15451  011462  0E45               	movlw	high _HMI_DownSwitch
 15452  011464  0100               	movlb	0	; () banked
 15453  011466  6FF4               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15454  011468  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 15455  01146A  0100               	movlb	0	; () banked
 15456  01146C  6FF5               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15457  01146E  0EE6               	movlw	low _Event_HMI_DownButton
 15458  011470  0100               	movlb	0	; () banked
 15459  011472  6FF6               	movwf	Button_Init@pFunction& (0+255),b
 15460  011474  0E41               	movlw	high _Event_HMI_DownButton
 15461  011476  0100               	movlb	0	; () banked
 15462  011478  6FF7               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15463  01147A  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 15464  01147C  0100               	movlb	0	; () banked
 15465  01147E  6FF8               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15466  011480  ECC0  F092         	call	_Button_Init	;wreg free
 15467                           
 15468                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 15469  011484  0EA0               	movlw	160
 15470  011486  0100               	movlb	0	; () banked
 15471  011488  6FDE               	movwf	SPI_Init@pClock& (0+255),b
 15472  01148A  0E86               	movlw	134
 15473  01148C  6FDF               	movwf	(SPI_Init@pClock+1)& (0+255),b
 15474  01148E  0E01               	movlw	1
 15475  011490  6FE0               	movwf	(SPI_Init@pClock+2)& (0+255),b
 15476  011492  0E00               	movlw	0
 15477  011494  6FE1               	movwf	(SPI_Init@pClock+3)& (0+255),b
 15478  011496  0E00               	movlw	0
 15479  011498  0100               	movlb	0	; () banked
 15480  01149A  6FE2               	movwf	SPI_Init@pChannel& (0+255),b
 15481  01149C  0E02               	movlw	2
 15482  01149E  0100               	movlb	0	; () banked
 15483  0114A0  6FE3               	movwf	SPI_Init@pMode& (0+255),b
 15484  0114A2  EC00  F080         	call	_SPI_Init	;wreg free
 15485                           
 15486                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 15487  0114A6  0E61               	movlw	low _SPI1
 15488  0114A8  0100               	movlb	0	; () banked
 15489  0114AA  6FC0               	movwf	SPI_MinSpeed@pInput& (0+255),b
 15490  0114AC  0E01               	movlw	high _SPI1
 15491  0114AE  0100               	movlb	0	; () banked
 15492  0114B0  6FC1               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 15493  0114B2  EC22  F09B         	call	_SPI_MinSpeed	;wreg free
 15494                           
 15495                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 15496  0114B6  0E00               	movlw	0
 15497  0114B8  0101               	movlb	1	; () banked
 15498  0114BA  6FE3               	movwf	(HMI_Init@in+1)& (0+255),b
 15499  0114BC  0E00               	movlw	0
 15500  0114BE  6FE2               	movwf	HMI_Init@in& (0+255),b
 15501  0114C0                     l11401:
 15502                           
 15503                           ; BSR set to: 1
 15504  0114C0  0101               	movlb	1	; () banked
 15505  0114C2  51E3               	movf	(HMI_Init@in+1)& (0+255),w,b
 15506  0114C4  E113               	bnz	l1161
 15507  0114C6  0E08               	movlw	8
 15508  0114C8  0101               	movlb	1	; () banked
 15509  0114CA  5DE2               	subwf	HMI_Init@in& (0+255),w,b
 15510  0114CC  B0D8               	btfsc	status,0,c
 15511  0114CE  0012               	return	
 15512                           
 15513                           ; BSR set to: 1
 15514                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 15515                           
 15516                           ; BSR set to: 1
 15517                           
 15518                           ; BSR set to: 1
 15519  0114D0  0E27               	movlw	low _HMIBoard
 15520  0114D2  0101               	movlb	1	; () banked
 15521  0114D4  25E2               	addwf	HMI_Init@in& (0+255),w,b
 15522  0114D6  6ED9               	movwf	fsr2l,c
 15523  0114D8  0E01               	movlw	high _HMIBoard
 15524  0114DA  0101               	movlb	1	; () banked
 15525  0114DC  21E3               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 15526  0114DE  6EDA               	movwf	fsr2h,c
 15527  0114E0  0E00               	movlw	0
 15528  0114E2  6EDF               	movwf	indf2,c
 15529                           
 15530                           ; BSR set to: 1
 15531  0114E4  0101               	movlb	1	; () banked
 15532  0114E6  4BE2               	infsnz	HMI_Init@in& (0+255),f,b
 15533  0114E8  2BE3               	incf	(HMI_Init@in+1)& (0+255),f,b
 15534  0114EA  D7EA               	goto	l11401
 15535  0114EC                     l1161:
 15536                           
 15537                           ; BSR set to: 1
 15538  0114EC  0012               	return		;funcret
 15539  0114EE                     __end_of_HMI_Init:
 15540                           	opt stack 0
 15541                           tosu	equ	0xFFF
 15542                           tosh	equ	0xFFE
 15543                           tosl	equ	0xFFD
 15544                           pclath	equ	0xFFA
 15545                           tblptru	equ	0xFF8
 15546                           tblptrh	equ	0xFF7
 15547                           tblptrl	equ	0xFF6
 15548                           tablat	equ	0xFF5
 15549                           prodh	equ	0xFF4
 15550                           prodl	equ	0xFF3
 15551                           intcon	equ	0xFF2
 15552                           indf0	equ	0xFEF
 15553                           postinc0	equ	0xFEE
 15554                           fsr0h	equ	0xFEA
 15555                           fsr0l	equ	0xFE9
 15556                           wreg	equ	0xFE8
 15557                           indf1	equ	0xFE7
 15558                           postdec1	equ	0xFE5
 15559                           plusw1	equ	0xFE3
 15560                           fsr1h	equ	0xFE2
 15561                           fsr1l	equ	0xFE1
 15562                           indf2	equ	0xFDF
 15563                           postinc2	equ	0xFDE
 15564                           postdec2	equ	0xFDD
 15565                           plusw2	equ	0xFDB
 15566                           fsr2h	equ	0xFDA
 15567                           fsr2l	equ	0xFD9
 15568                           status	equ	0xFD8
 15569                           
 15570 ;; *************** function _SPI_MinSpeed *****************
 15571 ;; Defined at:
 15572 ;;		line 190 in file "Library/SPI.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15575 ;;		 -> SPI1(11), 
 15576 ;; Auto vars:     Size  Location     Type
 15577 ;;		None
 15578 ;; Return value:  Size  Location     Type
 15579 ;;                  1    wreg      void 
 15580 ;; Registers used:
 15581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15582 ;; Tracked objects:
 15583 ;;		On entry : 0/0
 15584 ;;		On exit  : 0/0
 15585 ;;		Unchanged: 0/0
 15586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15587 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15591 ;;Total ram usage:        2 bytes
 15592 ;; Hardware stack levels used:    1
 15593 ;; Hardware stack levels required when called:    9
 15594 ;; This function calls:
 15595 ;;		_Byte_SetBit
 15596 ;;		_Byte_SetQuad
 15597 ;; This function is called by:
 15598 ;;		_HMI_Init
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           	psect	text87
 15603  013644                     __ptext87:
 15604                           	opt stack 0
 15605  013644                     _SPI_MinSpeed:
 15606                           	opt stack 20
 15607                           
 15608                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15609                           
 15610                           ; BSR set to: 1
 15611                           ;incstack = 0
 15612  013644  0100               	movlb	0	; () banked
 15613  013646  EE20 F006          	lfsr	2,6
 15614  01364A  51C0               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15615  01364C  26D9               	addwf	fsr2l,f,c
 15616  01364E  51C1               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15617  013650  22DA               	addwfc	fsr2h,f,c
 15618  013652  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 15619  013656  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 15620  01365A  0E05               	movlw	5
 15621  01365C  0100               	movlb	0	; () banked
 15622  01365E  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 15623  013660  0E00               	movlw	0
 15624  013662  0100               	movlb	0	; () banked
 15625  013664  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 15626  013666  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 15627                           
 15628                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 15629  01366A  0100               	movlb	0	; () banked
 15630  01366C  EE20 F006          	lfsr	2,6
 15631  013670  51C0               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15632  013672  26D9               	addwf	fsr2l,f,c
 15633  013674  51C1               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15634  013676  22DA               	addwfc	fsr2h,f,c
 15635  013678  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 15636  01367C  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 15637  013680  0E00               	movlw	0
 15638  013682  0100               	movlb	0	; () banked
 15639  013684  6FBE               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15640  013686  0E02               	movlw	2
 15641  013688  0100               	movlb	0	; () banked
 15642  01368A  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 15643  01368C  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 15644                           
 15645                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15646  013690  0100               	movlb	0	; () banked
 15647  013692  EE20 F006          	lfsr	2,6
 15648  013696  51C0               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15649  013698  26D9               	addwf	fsr2l,f,c
 15650  01369A  51C1               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15651  01369C  22DA               	addwfc	fsr2h,f,c
 15652  01369E  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 15653  0136A2  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 15654  0136A6  0E05               	movlw	5
 15655  0136A8  0100               	movlb	0	; () banked
 15656  0136AA  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 15657  0136AC  0E01               	movlw	1
 15658  0136AE  0100               	movlb	0	; () banked
 15659  0136B0  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 15660  0136B2  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 15661  0136B6  0012               	return		;funcret
 15662  0136B8                     __end_of_SPI_MinSpeed:
 15663                           	opt stack 0
 15664                           tosu	equ	0xFFF
 15665                           tosh	equ	0xFFE
 15666                           tosl	equ	0xFFD
 15667                           pclath	equ	0xFFA
 15668                           tblptru	equ	0xFF8
 15669                           tblptrh	equ	0xFF7
 15670                           tblptrl	equ	0xFF6
 15671                           tablat	equ	0xFF5
 15672                           prodh	equ	0xFF4
 15673                           prodl	equ	0xFF3
 15674                           intcon	equ	0xFF2
 15675                           indf0	equ	0xFEF
 15676                           postinc0	equ	0xFEE
 15677                           fsr0h	equ	0xFEA
 15678                           fsr0l	equ	0xFE9
 15679                           wreg	equ	0xFE8
 15680                           indf1	equ	0xFE7
 15681                           postdec1	equ	0xFE5
 15682                           plusw1	equ	0xFE3
 15683                           fsr1h	equ	0xFE2
 15684                           fsr1l	equ	0xFE1
 15685                           indf2	equ	0xFDF
 15686                           postinc2	equ	0xFDE
 15687                           postdec2	equ	0xFDD
 15688                           plusw2	equ	0xFDB
 15689                           fsr2h	equ	0xFDA
 15690                           fsr2l	equ	0xFD9
 15691                           status	equ	0xFD8
 15692                           
 15693 ;; *************** function _SPI_Init *****************
 15694 ;; Defined at:
 15695 ;;		line 12 in file "Library/SPI.c"
 15696 ;; Parameters:    Size  Location     Type
 15697 ;;  pClock          4   45[BANK0 ] unsigned long 
 15698 ;;  pChannel        1   49[BANK0 ] enum E6744
 15699 ;;  pMode           1   50[BANK0 ] enum E6748
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 15702 ;;		 -> SPI1(11), SPI2(11), 
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  1    wreg      void 
 15705 ;; Registers used:
 15706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15712 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15715 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15716 ;;Total ram usage:        8 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:   12
 15719 ;; This function calls:
 15720 ;;		_Byte_SetBit
 15721 ;;		_Byte_SetQuad
 15722 ;;		_Port_SetPinType
 15723 ;;		_SPI_DCS
 15724 ;;		_SPI_DisableISR
 15725 ;;		_Timer2_Init
 15726 ;; This function is called by:
 15727 ;;		_Configure_GPIOs
 15728 ;;		_HMI_Init
 15729 ;; This function uses a non-reentrant model
 15730 ;;
 15731                           
 15732                           	psect	text88
 15733  010000                     __ptext88:
 15734                           	opt stack 0
 15735  010000                     _SPI_Init:
 15736                           	opt stack 16
 15737                           
 15738                           ;SPI.c: 14: SPIPtr pInput;
 15739                           ;SPI.c: 16: switch (pChannel)
 15740                           
 15741                           ;incstack = 0
 15742  010000  D00C               	goto	l10315
 15743  010002                     l10309:
 15744                           
 15745                           ;SPI.c: 19: pInput = &SPI1;
 15746  010002  0E61               	movlw	low _SPI1
 15747  010004  0100               	movlb	0	; () banked
 15748  010006  6FE4               	movwf	SPI_Init@pInput& (0+255),b
 15749  010008  0E01               	movlw	high _SPI1
 15750  01000A  D004               	goto	L6
 15751  01000C                     l10311:
 15752                           
 15753                           ; BSR set to: 0
 15754                           ;SPI.c: 22: pInput = &SPI2;
 15755  01000C  0E6C               	movlw	low _SPI2
 15756  01000E  0100               	movlb	0	; () banked
 15757  010010  6FE4               	movwf	SPI_Init@pInput& (0+255),b
 15758  010012  0E01               	movlw	high _SPI2
 15759  010014                     L6:
 15760  010014  0100               	movlb	0	; () banked
 15761  010016  6FE5               	movwf	(SPI_Init@pInput+1)& (0+255),b
 15762                           
 15763                           ; BSR set to: 0
 15764                           ;SPI.c: 24: };
 15765                           
 15766                           ;SPI.c: 23: break;
 15767  010018  D008               	goto	l10317
 15768  01001A                     l10315:
 15769  01001A  0100               	movlb	0	; () banked
 15770  01001C  51E2               	movf	SPI_Init@pChannel& (0+255),w,b
 15771                           
 15772                           ; Switch size 1, requested type "space"
 15773                           ; Number of cases is 2, Range of values is 0 to 1
 15774                           ; switch strategies available:
 15775                           ; Name         Instructions Cycles
 15776                           ; simple_byte            7     4 (average)
 15777                           ;	Chosen strategy is simple_byte
 15778  01001E  0A00               	xorlw	0	; case 0
 15779  010020  B4D8               	btfsc	status,2,c
 15780  010022  D7EF               	goto	l10309
 15781  010024  0A01               	xorlw	1	; case 1
 15782  010026  B4D8               	btfsc	status,2,c
 15783  010028  D7F1               	goto	l10311
 15784  01002A                     l10317:
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;SPI.c: 26: pInput->mChannel = pChannel;
 15788  01002A  0100               	movlb	0	; () banked
 15789  01002C  EE20 F002          	lfsr	2,2
 15790  010030  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15791  010032  26D9               	addwf	fsr2l,f,c
 15792  010034  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15793  010036  22DA               	addwfc	fsr2h,f,c
 15794  010038  C0E2  FFDF         	movff	SPI_Init@pChannel,indf2
 15795                           
 15796                           ;SPI.c: 35: switch (pChannel)
 15797  01003C  D0B1               	goto	l10337
 15798  01003E                     l10319:
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 15802  01003E  0E95               	movlw	low _PortC
 15803  010040  0100               	movlb	0	; () banked
 15804  010042  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15805  010044  0E00               	movlw	high _PortC
 15806  010046  0100               	movlb	0	; () banked
 15807  010048  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15808  01004A  0E02               	movlw	2
 15809  01004C  0100               	movlb	0	; () banked
 15810  01004E  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15811  010050  0E03               	movlw	3
 15812  010052  0100               	movlb	0	; () banked
 15813  010054  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15814  010056  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15815                           
 15816                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 15817  01005A  0E95               	movlw	low _PortC
 15818  01005C  0100               	movlb	0	; () banked
 15819  01005E  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15820  010060  0E00               	movlw	high _PortC
 15821  010062  0100               	movlb	0	; () banked
 15822  010064  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15823  010066  0E03               	movlw	3
 15824  010068  0100               	movlb	0	; () banked
 15825  01006A  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15826  01006C  0E03               	movlw	3
 15827  01006E  0100               	movlb	0	; () banked
 15828  010070  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15829  010072  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15830                           
 15831                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 15832  010076  0E95               	movlw	low _PortC
 15833  010078  0100               	movlb	0	; () banked
 15834  01007A  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15835  01007C  0E00               	movlw	high _PortC
 15836  01007E  0100               	movlb	0	; () banked
 15837  010080  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15838  010082  0E05               	movlw	5
 15839  010084  0100               	movlb	0	; () banked
 15840  010086  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15841  010088  0E03               	movlw	3
 15842  01008A  0100               	movlb	0	; () banked
 15843  01008C  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15844  01008E  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15845                           
 15846                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 15847  010092  0E95               	movlw	low _PortC
 15848  010094  0100               	movlb	0	; () banked
 15849  010096  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15850  010098  0E00               	movlw	high _PortC
 15851  01009A  0100               	movlb	0	; () banked
 15852  01009C  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15853  01009E  0E04               	movlw	4
 15854  0100A0  0100               	movlb	0	; () banked
 15855  0100A2  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15856  0100A4  0E00               	movlw	0
 15857  0100A6  0100               	movlb	0	; () banked
 15858  0100A8  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15859  0100AA  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15860                           
 15861                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 15862  0100AE  0100               	movlb	0	; () banked
 15863  0100B0  EE20 F003          	lfsr	2,3
 15864  0100B4  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15865  0100B6  26D9               	addwf	fsr2l,f,c
 15866  0100B8  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15867  0100BA  22DA               	addwfc	fsr2h,f,c
 15868  0100BC  0EC7               	movlw	199
 15869  0100BE  6EDE               	movwf	postinc2,c
 15870  0100C0  0E0F               	movlw	15
 15871  0100C2  6EDD               	movwf	postdec2,c
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 15875  0100C4  0100               	movlb	0	; () banked
 15876  0100C6  EE20 F006          	lfsr	2,6
 15877  0100CA  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15878  0100CC  26D9               	addwf	fsr2l,f,c
 15879  0100CE  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15880  0100D0  22DA               	addwfc	fsr2h,f,c
 15881  0100D2  0EC6               	movlw	198
 15882  0100D4  6EDE               	movwf	postinc2,c
 15883  0100D6  0E0F               	movlw	15
 15884  0100D8  6EDD               	movwf	postdec2,c
 15885                           
 15886                           ; BSR set to: 0
 15887                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 15888  0100DA  0100               	movlb	0	; () banked
 15889  0100DC  EE20 F009          	lfsr	2,9
 15890  0100E0  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15891  0100E2  26D9               	addwf	fsr2l,f,c
 15892  0100E4  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15893  0100E6  22DA               	addwfc	fsr2h,f,c
 15894  0100E8  0EC9               	movlw	201
 15895  0100EA  D056               	goto	L7
 15896  0100EC                     l10327:
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 15900  0100EC  0E8B               	movlw	low _PortD
 15901  0100EE  0100               	movlb	0	; () banked
 15902  0100F0  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15903  0100F2  0E00               	movlw	high _PortD
 15904  0100F4  0100               	movlb	0	; () banked
 15905  0100F6  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15906  0100F8  0E07               	movlw	7
 15907  0100FA  0100               	movlb	0	; () banked
 15908  0100FC  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15909  0100FE  0E03               	movlw	3
 15910  010100  0100               	movlb	0	; () banked
 15911  010102  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15912  010104  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15913                           
 15914                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 15915  010108  0E8B               	movlw	low _PortD
 15916  01010A  0100               	movlb	0	; () banked
 15917  01010C  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15918  01010E  0E00               	movlw	high _PortD
 15919  010110  0100               	movlb	0	; () banked
 15920  010112  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15921  010114  0E06               	movlw	6
 15922  010116  0100               	movlb	0	; () banked
 15923  010118  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15924  01011A  0E03               	movlw	3
 15925  01011C  0100               	movlb	0	; () banked
 15926  01011E  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15927  010120  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15928                           
 15929                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 15930  010124  0E8B               	movlw	low _PortD
 15931  010126  0100               	movlb	0	; () banked
 15932  010128  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15933  01012A  0E00               	movlw	high _PortD
 15934  01012C  0100               	movlb	0	; () banked
 15935  01012E  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15936  010130  0E04               	movlw	4
 15937  010132  0100               	movlb	0	; () banked
 15938  010134  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15939  010136  0E03               	movlw	3
 15940  010138  0100               	movlb	0	; () banked
 15941  01013A  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15942  01013C  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15943                           
 15944                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 15945  010140  0E8B               	movlw	low _PortD
 15946  010142  0100               	movlb	0	; () banked
 15947  010144  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 15948  010146  0E00               	movlw	high _PortD
 15949  010148  0100               	movlb	0	; () banked
 15950  01014A  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15951  01014C  0E05               	movlw	5
 15952  01014E  0100               	movlb	0	; () banked
 15953  010150  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 15954  010152  0E00               	movlw	0
 15955  010154  0100               	movlb	0	; () banked
 15956  010156  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 15957  010158  EC77  F08A         	call	_Port_SetPinType	;wreg free
 15958                           
 15959                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 15960  01015C  0100               	movlb	0	; () banked
 15961  01015E  EE20 F003          	lfsr	2,3
 15962  010162  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15963  010164  26D9               	addwf	fsr2l,f,c
 15964  010166  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15965  010168  22DA               	addwfc	fsr2h,f,c
 15966  01016A  0E6D               	movlw	109
 15967  01016C  6EDE               	movwf	postinc2,c
 15968  01016E  0E0F               	movlw	15
 15969  010170  6EDD               	movwf	postdec2,c
 15970                           
 15971                           ; BSR set to: 0
 15972                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 15973  010172  0100               	movlb	0	; () banked
 15974  010174  EE20 F006          	lfsr	2,6
 15975  010178  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15976  01017A  26D9               	addwf	fsr2l,f,c
 15977  01017C  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15978  01017E  22DA               	addwfc	fsr2h,f,c
 15979  010180  0E6C               	movlw	108
 15980  010182  6EDE               	movwf	postinc2,c
 15981  010184  0E0F               	movlw	15
 15982  010186  6EDD               	movwf	postdec2,c
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 15986  010188  0100               	movlb	0	; () banked
 15987  01018A  EE20 F009          	lfsr	2,9
 15988  01018E  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 15989  010190  26D9               	addwf	fsr2l,f,c
 15990  010192  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15991  010194  22DA               	addwfc	fsr2h,f,c
 15992  010196  0E6F               	movlw	111
 15993  010198                     L7:
 15994  010198  6EDE               	movwf	postinc2,c
 15995  01019A  0E0F               	movlw	15
 15996  01019C  6EDD               	movwf	postdec2,c
 15997                           
 15998                           ;SPI.c: 68: break;
 15999  01019E  D009               	goto	l10339
 16000  0101A0                     l10337:
 16001                           
 16002                           ; BSR set to: 0
 16003  0101A0  0100               	movlb	0	; () banked
 16004  0101A2  51E2               	movf	SPI_Init@pChannel& (0+255),w,b
 16005                           
 16006                           ; Switch size 1, requested type "space"
 16007                           ; Number of cases is 2, Range of values is 0 to 1
 16008                           ; switch strategies available:
 16009                           ; Name         Instructions Cycles
 16010                           ; simple_byte            7     4 (average)
 16011                           ;	Chosen strategy is simple_byte
 16012  0101A4  0A00               	xorlw	0	; case 0
 16013  0101A6  B4D8               	btfsc	status,2,c
 16014  0101A8  D74A               	goto	l10319
 16015  0101AA  0A01               	xorlw	1	; case 1
 16016  0101AC  A4D8               	btfss	status,2,c
 16017  0101AE  0012               	return	
 16018  0101B0  D79D               	goto	l10327
 16019  0101B2                     l10339:
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16023  0101B2  0100               	movlb	0	; () banked
 16024  0101B4  EE20 F006          	lfsr	2,6
 16025  0101B8  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16026  0101BA  26D9               	addwf	fsr2l,f,c
 16027  0101BC  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16028  0101BE  22DA               	addwfc	fsr2h,f,c
 16029  0101C0  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16030  0101C4  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16031  0101C8  0E05               	movlw	5
 16032  0101CA  0100               	movlb	0	; () banked
 16033  0101CC  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16034  0101CE  0E00               	movlw	0
 16035  0101D0  0100               	movlb	0	; () banked
 16036  0101D2  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16037  0101D4  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16038                           
 16039                           ;SPI.c: 77: switch(pMode)
 16040  0101D8  D09C               	goto	l10351
 16041  0101DA                     l10341:
 16042                           
 16043                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16044  0101DA  0100               	movlb	0	; () banked
 16045  0101DC  EE20 F006          	lfsr	2,6
 16046  0101E0  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16047  0101E2  26D9               	addwf	fsr2l,f,c
 16048  0101E4  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16049  0101E6  22DA               	addwfc	fsr2h,f,c
 16050  0101E8  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16051  0101EC  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16052  0101F0  0E04               	movlw	4
 16053  0101F2  0100               	movlb	0	; () banked
 16054  0101F4  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16055  0101F6  0E00               	movlw	0
 16056  0101F8  0100               	movlb	0	; () banked
 16057  0101FA  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16058  0101FC  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16059                           
 16060                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16061  010200  0100               	movlb	0	; () banked
 16062  010202  EE20 F003          	lfsr	2,3
 16063  010206  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16064  010208  26D9               	addwf	fsr2l,f,c
 16065  01020A  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16066  01020C  22DA               	addwfc	fsr2h,f,c
 16067  01020E  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16068  010212  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16069  010216  0E06               	movlw	6
 16070  010218  0100               	movlb	0	; () banked
 16071  01021A  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16072  01021C  0E00               	movlw	0
 16073  01021E  0100               	movlb	0	; () banked
 16074  010220  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16075  010222  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16076                           
 16077                           ;SPI.c: 82: break;
 16078  010226  D084               	goto	l10353
 16079  010228                     l10343:
 16080                           
 16081                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16082  010228  0100               	movlb	0	; () banked
 16083  01022A  EE20 F006          	lfsr	2,6
 16084  01022E  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16085  010230  26D9               	addwf	fsr2l,f,c
 16086  010232  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16087  010234  22DA               	addwfc	fsr2h,f,c
 16088  010236  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16089  01023A  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16090  01023E  0E04               	movlw	4
 16091  010240  0100               	movlb	0	; () banked
 16092  010242  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16093  010244  0E00               	movlw	0
 16094  010246  0100               	movlb	0	; () banked
 16095  010248  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16096  01024A  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16097                           
 16098                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16099  01024E  0100               	movlb	0	; () banked
 16100  010250  EE20 F003          	lfsr	2,3
 16101  010254  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16102  010256  26D9               	addwf	fsr2l,f,c
 16103  010258  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16104  01025A  22DA               	addwfc	fsr2h,f,c
 16105  01025C  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16106  010260  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16107  010264  0E06               	movlw	6
 16108  010266  0100               	movlb	0	; () banked
 16109  010268  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16110  01026A  0E01               	movlw	1
 16111  01026C  0100               	movlb	0	; () banked
 16112  01026E  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16113  010270  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16114                           
 16115                           ;SPI.c: 86: break;
 16116  010274  D05D               	goto	l10353
 16117  010276                     l10345:
 16118                           
 16119                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16120  010276  0100               	movlb	0	; () banked
 16121  010278  EE20 F006          	lfsr	2,6
 16122  01027C  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16123  01027E  26D9               	addwf	fsr2l,f,c
 16124  010280  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16125  010282  22DA               	addwfc	fsr2h,f,c
 16126  010284  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16127  010288  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16128  01028C  0E04               	movlw	4
 16129  01028E  0100               	movlb	0	; () banked
 16130  010290  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16131  010292  0E01               	movlw	1
 16132  010294  0100               	movlb	0	; () banked
 16133  010296  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16134  010298  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16135                           
 16136                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16137  01029C  0100               	movlb	0	; () banked
 16138  01029E  EE20 F003          	lfsr	2,3
 16139  0102A2  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16140  0102A4  26D9               	addwf	fsr2l,f,c
 16141  0102A6  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16142  0102A8  22DA               	addwfc	fsr2h,f,c
 16143  0102AA  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16144  0102AE  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16145  0102B2  0E06               	movlw	6
 16146  0102B4  0100               	movlb	0	; () banked
 16147  0102B6  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16148  0102B8  0E00               	movlw	0
 16149  0102BA  0100               	movlb	0	; () banked
 16150  0102BC  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16151  0102BE  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16152                           
 16153                           ;SPI.c: 90: break;
 16154  0102C2  D036               	goto	l10353
 16155  0102C4                     l10347:
 16156                           
 16157                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16158  0102C4  0100               	movlb	0	; () banked
 16159  0102C6  EE20 F006          	lfsr	2,6
 16160  0102CA  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16161  0102CC  26D9               	addwf	fsr2l,f,c
 16162  0102CE  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16163  0102D0  22DA               	addwfc	fsr2h,f,c
 16164  0102D2  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16165  0102D6  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16166  0102DA  0E04               	movlw	4
 16167  0102DC  0100               	movlb	0	; () banked
 16168  0102DE  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16169  0102E0  0E01               	movlw	1
 16170  0102E2  0100               	movlb	0	; () banked
 16171  0102E4  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16172  0102E6  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16173                           
 16174                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16175  0102EA  0100               	movlb	0	; () banked
 16176  0102EC  EE20 F003          	lfsr	2,3
 16177  0102F0  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16178  0102F2  26D9               	addwf	fsr2l,f,c
 16179  0102F4  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16180  0102F6  22DA               	addwfc	fsr2h,f,c
 16181  0102F8  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16182  0102FC  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16183  010300  0E06               	movlw	6
 16184  010302  0100               	movlb	0	; () banked
 16185  010304  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16186  010306  0E01               	movlw	1
 16187  010308  0100               	movlb	0	; () banked
 16188  01030A  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16189  01030C  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16190                           
 16191                           ;SPI.c: 94: break;
 16192  010310  D00F               	goto	l10353
 16193  010312                     l10351:
 16194  010312  0100               	movlb	0	; () banked
 16195  010314  51E3               	movf	SPI_Init@pMode& (0+255),w,b
 16196                           
 16197                           ; Switch size 1, requested type "space"
 16198                           ; Number of cases is 4, Range of values is 0 to 3
 16199                           ; switch strategies available:
 16200                           ; Name         Instructions Cycles
 16201                           ; simple_byte           13     7 (average)
 16202                           ;	Chosen strategy is simple_byte
 16203  010316  0A00               	xorlw	0	; case 0
 16204  010318  B4D8               	btfsc	status,2,c
 16205  01031A  D75F               	goto	l10341
 16206  01031C  0A01               	xorlw	1	; case 1
 16207  01031E  B4D8               	btfsc	status,2,c
 16208  010320  D783               	goto	l10343
 16209  010322  0A03               	xorlw	3	; case 2
 16210  010324  B4D8               	btfsc	status,2,c
 16211  010326  D7A7               	goto	l10345
 16212  010328  0A01               	xorlw	1	; case 3
 16213  01032A  A4D8               	btfss	status,2,c
 16214  01032C  0012               	return	
 16215  01032E  D7CA               	goto	l10347
 16216  010330                     l10353:
 16217                           
 16218                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 16219  010330  0100               	movlb	0	; () banked
 16220  010332  EE20 F006          	lfsr	2,6
 16221  010336  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16222  010338  26D9               	addwf	fsr2l,f,c
 16223  01033A  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16224  01033C  22DA               	addwfc	fsr2h,f,c
 16225  01033E  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16226  010342  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16227  010346  0E07               	movlw	7
 16228  010348  0100               	movlb	0	; () banked
 16229  01034A  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16230  01034C  0E00               	movlw	0
 16231  01034E  0100               	movlb	0	; () banked
 16232  010350  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16233  010352  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16234                           
 16235                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 16236  010356  0100               	movlb	0	; () banked
 16237  010358  EE20 F006          	lfsr	2,6
 16238  01035C  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16239  01035E  26D9               	addwf	fsr2l,f,c
 16240  010360  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16241  010362  22DA               	addwfc	fsr2h,f,c
 16242  010364  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16243  010368  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16244  01036C  0E06               	movlw	6
 16245  01036E  0100               	movlb	0	; () banked
 16246  010370  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16247  010372  0E00               	movlw	0
 16248  010374  0100               	movlb	0	; () banked
 16249  010376  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16250  010378  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16251                           
 16252                           ;SPI.c: 106: Timer2_Init(pClock);
 16253  01037C  C0DE  F0BE         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 16254  010380  C0DF  F0BF         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 16255  010384  C0E0  F0C0         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 16256  010388  C0E1  F0C1         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 16257  01038C  ECB9  F08F         	call	_Timer2_Init	;wreg free
 16258                           
 16259                           ;SPI.c: 112: SPI_DisableISR(pInput);
 16260  010390  C0E4  F0B1         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 16261  010394  C0E5  F0B2         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 16262  010398  ECF2  F0A1         	call	_SPI_DisableISR	;wreg free
 16263                           
 16264                           ;SPI.c: 116: switch (pChannel)
 16265  01039C  D004               	goto	l10361
 16266  01039E                     l615:
 16267                           
 16268                           ; BSR set to: 0
 16269  01039E  869F               	bsf	3999,3,c	;volatile
 16270  0103A0  D00B               	goto	l10363
 16271  0103A2                     l617:
 16272                           
 16273                           ; BSR set to: 0
 16274  0103A2  8EA5               	bsf	4005,7,c	;volatile
 16275  0103A4  D009               	goto	l10363
 16276  0103A6                     l10361:
 16277  0103A6  0100               	movlb	0	; () banked
 16278  0103A8  51E2               	movf	SPI_Init@pChannel& (0+255),w,b
 16279                           
 16280                           ; Switch size 1, requested type "space"
 16281                           ; Number of cases is 2, Range of values is 0 to 1
 16282                           ; switch strategies available:
 16283                           ; Name         Instructions Cycles
 16284                           ; simple_byte            7     4 (average)
 16285                           ;	Chosen strategy is simple_byte
 16286  0103AA  0A00               	xorlw	0	; case 0
 16287  0103AC  B4D8               	btfsc	status,2,c
 16288  0103AE  D7F7               	goto	l615
 16289  0103B0  0A01               	xorlw	1	; case 1
 16290  0103B2  A4D8               	btfss	status,2,c
 16291  0103B4  0012               	return	
 16292  0103B6  D7F5               	goto	l617
 16293  0103B8                     l10363:
 16294                           
 16295                           ; BSR set to: 0
 16296                           ;SPI.c: 124: SPI_DCS(pInput);
 16297  0103B8  C0E4  F0B1         	movff	SPI_Init@pInput,SPI_DCS@pInput
 16298  0103BC  C0E5  F0B2         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 16299  0103C0  EC54  F0A1         	call	_SPI_DCS	;wreg free
 16300                           
 16301                           ;SPI.c: 126: pInput->mBusy = 0;
 16302  0103C4  C0E4  FFD9         	movff	SPI_Init@pInput,fsr2l
 16303  0103C8  C0E5  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 16304  0103CC  0E00               	movlw	0
 16305  0103CE  6EDF               	movwf	indf2,c
 16306                           
 16307                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 16308  0103D0  0100               	movlb	0	; () banked
 16309  0103D2  EE20 F006          	lfsr	2,6
 16310  0103D6  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16311  0103D8  26D9               	addwf	fsr2l,f,c
 16312  0103DA  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16313  0103DC  22DA               	addwfc	fsr2h,f,c
 16314  0103DE  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 16315  0103E2  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 16316  0103E6  0E00               	movlw	0
 16317  0103E8  0100               	movlb	0	; () banked
 16318  0103EA  6FBE               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16319  0103EC  0E03               	movlw	3
 16320  0103EE  0100               	movlb	0	; () banked
 16321  0103F0  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 16322  0103F2  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 16323                           
 16324                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16325  0103F6  0100               	movlb	0	; () banked
 16326  0103F8  EE20 F006          	lfsr	2,6
 16327  0103FC  51E4               	movf	SPI_Init@pInput& (0+255),w,b
 16328  0103FE  26D9               	addwf	fsr2l,f,c
 16329  010400  51E5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16330  010402  22DA               	addwfc	fsr2h,f,c
 16331  010404  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 16332  010408  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 16333  01040C  0E05               	movlw	5
 16334  01040E  0100               	movlb	0	; () banked
 16335  010410  6FB3               	movwf	Byte_SetBit@pBit& (0+255),b
 16336  010412  0E01               	movlw	1
 16337  010414  0100               	movlb	0	; () banked
 16338  010416  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 16339  010418  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 16340  01041C  0012               	return		;funcret
 16341  01041E                     __end_of_SPI_Init:
 16342                           	opt stack 0
 16343                           tosu	equ	0xFFF
 16344                           tosh	equ	0xFFE
 16345                           tosl	equ	0xFFD
 16346                           pclath	equ	0xFFA
 16347                           tblptru	equ	0xFF8
 16348                           tblptrh	equ	0xFF7
 16349                           tblptrl	equ	0xFF6
 16350                           tablat	equ	0xFF5
 16351                           prodh	equ	0xFF4
 16352                           prodl	equ	0xFF3
 16353                           intcon	equ	0xFF2
 16354                           indf0	equ	0xFEF
 16355                           postinc0	equ	0xFEE
 16356                           fsr0h	equ	0xFEA
 16357                           fsr0l	equ	0xFE9
 16358                           wreg	equ	0xFE8
 16359                           indf1	equ	0xFE7
 16360                           postdec1	equ	0xFE5
 16361                           plusw1	equ	0xFE3
 16362                           fsr1h	equ	0xFE2
 16363                           fsr1l	equ	0xFE1
 16364                           indf2	equ	0xFDF
 16365                           postinc2	equ	0xFDE
 16366                           postdec2	equ	0xFDD
 16367                           plusw2	equ	0xFDB
 16368                           fsr2h	equ	0xFDA
 16369                           fsr2l	equ	0xFD9
 16370                           status	equ	0xFD8
 16371                           
 16372 ;; *************** function _Timer2_Init *****************
 16373 ;; Defined at:
 16374 ;;		line 10 in file "Library/Timer2.c"
 16375 ;; Parameters:    Size  Location     Type
 16376 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 16377 ;; Auto vars:     Size  Location     Type
 16378 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 16379 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 16380 ;;  RDIV            4   18[BANK0 ] unsigned long 
 16381 ;; Return value:  Size  Location     Type
 16382 ;;                  1    wreg      void 
 16383 ;; Registers used:
 16384 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16385 ;; Tracked objects:
 16386 ;;		On entry : 0/0
 16387 ;;		On exit  : 0/0
 16388 ;;		Unchanged: 0/0
 16389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16391 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16393 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16394 ;;Total ram usage:       17 bytes
 16395 ;; Hardware stack levels used:    1
 16396 ;; Hardware stack levels required when called:    8
 16397 ;; This function calls:
 16398 ;;		_Timer2_Clear
 16399 ;;		___lldiv
 16400 ;; This function is called by:
 16401 ;;		_SPI_Init
 16402 ;; This function uses a non-reentrant model
 16403 ;;
 16404                           
 16405                           	psect	text89
 16406  011F72                     __ptext89:
 16407                           	opt stack 0
 16408  011F72                     _Timer2_Init:
 16409                           	opt stack 19
 16410                           
 16411                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 16412                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 16413                           ;Timer2.c: 14: static UINT8 PRE = 0;
 16414                           ;Timer2.c: 15: static UINT32 DIV = 0;
 16415                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 16416                           
 16417                           ;incstack = 0
 16418  011F72  0E00               	movlw	0
 16419  011F74  0100               	movlb	0	; () banked
 16420  011F76  6FC7               	movwf	Timer2_Init@pCPUClock& (0+255),b
 16421  011F78  0E6C               	movlw	108
 16422  011F7A  6FC8               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 16423  011F7C  0EDC               	movlw	220
 16424  011F7E  6FC9               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 16425  011F80  0E02               	movlw	2
 16426  011F82  6FCA               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 16427                           
 16428                           ; BSR set to: 0
 16429                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 16430                           ;Timer2.c: 20: pFrequency *= 2;
 16431  011F84  0100               	movlb	0	; () banked
 16432  011F86  90D8               	bcf	status,0,c
 16433  011F88  37BE               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 16434  011F8A  37BF               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 16435  011F8C  37C0               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 16436  011F8E  37C1               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;Timer2.c: 23: pCPUClock /= 4;
 16440  011F90  0E02               	movlw	2
 16441  011F92  0100               	movlb	0	; () banked
 16442  011F94  6FC2               	movwf	??_Timer2_Init& (0+255),b
 16443  011F96                     u6705:
 16444  011F96  90D8               	bcf	status,0,c
 16445  011F98  0100               	movlb	0	; () banked
 16446  011F9A  33CA               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 16447  011F9C  33C9               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 16448  011F9E  33C8               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 16449  011FA0  33C7               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 16450  011FA2  0100               	movlb	0	; () banked
 16451  011FA4  2FC2               	decfsz	??_Timer2_Init& (0+255),f,b
 16452  011FA6  D7F7               	goto	u6705
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 16456  011FA8  C0C7  F0B1         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 16457  011FAC  C0C8  F0B2         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 16458  011FB0  C0C9  F0B3         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 16459  011FB4  C0CA  F0B4         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 16460  011FB8  C0BE  F0B5         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 16461  011FBC  C0BF  F0B6         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 16462  011FC0  C0C0  F0B7         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 16463  011FC4  C0C1  F0B8         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 16464  011FC8  ECB4  F094         	call	___lldiv	;wreg free
 16465  011FCC  C0B1  F0CB         	movff	?___lldiv,Timer2_Init@DIVIDE
 16466  011FD0  C0B2  F0CC         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 16467  011FD4  C0B3  F0CD         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 16468  011FD8  C0B4  F0CE         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 16469                           
 16470                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 16471  011FDC  D00E               	goto	l10187
 16472  011FDE                     l10179:
 16473                           
 16474                           ;Timer2.c: 28: {
 16475                           ;Timer2.c: 29: RDIV = 0;
 16476  011FDE  0E00               	movlw	0
 16477  011FE0  0100               	movlb	0	; () banked
 16478  011FE2  6FC3               	movwf	Timer2_Init@RDIV& (0+255),b
 16479  011FE4  0E00               	movlw	0
 16480  011FE6  6FC4               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 16481  011FE8  0E00               	movlw	0
 16482  011FEA  6FC5               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 16483  011FEC  0E00               	movlw	0
 16484  011FEE  6FC6               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 16485                           
 16486                           ; BSR set to: 0
 16487                           ;Timer2.c: 30: INDEX ++;
 16488  011FF0  2A2F               	incf	Timer2_Init@INDEX,f,c
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;Timer2.c: 31: if (INDEX >= 3)
 16492  011FF2  0E02               	movlw	2
 16493  011FF4  642F               	cpfsgt	Timer2_Init@INDEX,c
 16494  011FF6  D001               	goto	l10187
 16495  011FF8  D025               	goto	l10189
 16496  011FFA                     l10187:
 16497  011FFA  C0CB  F0B1         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 16498  011FFE  C0CC  F0B2         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 16499  012002  C0CD  F0B3         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 16500  012006  C0CE  F0B4         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 16501  01200A  502F               	movf	Timer2_Init@INDEX,w,c
 16502  01200C  0D01               	mullw	1
 16503  01200E  0EF8               	movlw	low Timer2_Init@PRESCALE
 16504  012010  24F3               	addwf	prodl,w,c
 16505  012012  6EF6               	movwf	tblptrl,c
 16506  012014  0EFD               	movlw	high Timer2_Init@PRESCALE
 16507  012016  20F4               	addwfc	prodh,w,c
 16508  012018  6EF7               	movwf	tblptrh,c
 16509  01201A                     	if	1	;There are 3 active tblptr bytes
 16510  01201A  6AF8               	clrf	tblptru,c
 16511  01201C  0E00               	movlw	low (__mediumconst shr (0+16))
 16512  01201E  22F8               	addwfc	tblptru,f,c
 16513  012020                     	endif
 16514  012020  0008               	tblrd		*
 16515  012022  50F5               	movf	tablat,w,c
 16516  012024  0100               	movlb	0	; () banked
 16517  012026  6FB5               	movwf	___lldiv@divisor& (0+255),b
 16518  012028  6BB6               	clrf	(___lldiv@divisor+1)& (0+255),b
 16519  01202A  6BB7               	clrf	(___lldiv@divisor+2)& (0+255),b
 16520  01202C  6BB8               	clrf	(___lldiv@divisor+3)& (0+255),b
 16521  01202E  ECB4  F094         	call	___lldiv	;wreg free
 16522  012032  0100               	movlb	0	; () banked
 16523  012034  51B4               	movf	(?___lldiv+3)& (0+255),w,b
 16524  012036  0100               	movlb	0	; () banked
 16525  012038  11B3               	iorwf	(?___lldiv+2)& (0+255),w,b
 16526  01203A  E1D1               	bnz	l10179
 16527  01203C  0100               	movlb	0	; () banked
 16528  01203E  05B2               	decf	(?___lldiv+1)& (0+255),w,b
 16529  012040  B0D8               	btfsc	status,0,c
 16530  012042  D7CD               	goto	l10179
 16531  012044                     l10189:
 16532                           
 16533                           ; BSR set to: 0
 16534                           ;Timer2.c: 33: }
 16535                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 16536  012044  50CA               	movf	4042,w,c	;volatile
 16537  012046  182F               	xorwf	Timer2_Init@INDEX,w,c
 16538  012048  0BFC               	andlw	-4
 16539  01204A  182F               	xorwf	Timer2_Init@INDEX,w,c
 16540  01204C  6ECA               	movwf	4042,c	;volatile
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 16544  01204E  84CA               	bsf	4042,2,c	;volatile
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;Timer2.c: 44: Timer2_Clear();
 16548  012050  ECA1  F0A3         	call	_Timer2_Clear	;wreg free
 16549                           
 16550                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 16551  012054  502F               	movf	Timer2_Init@INDEX,w,c
 16552  012056  0D01               	mullw	1
 16553  012058  0EF8               	movlw	low Timer2_Init@PRESCALE
 16554  01205A  24F3               	addwf	prodl,w,c
 16555  01205C  6EF6               	movwf	tblptrl,c
 16556  01205E  0EFD               	movlw	high Timer2_Init@PRESCALE
 16557  012060  20F4               	addwfc	prodh,w,c
 16558  012062  6EF7               	movwf	tblptrh,c
 16559  012064                     	if	1	;There are 3 active tblptr bytes
 16560  012064  6AF8               	clrf	tblptru,c
 16561  012066  0E00               	movlw	low (__mediumconst shr (0+16))
 16562  012068  22F8               	addwfc	tblptru,f,c
 16563  01206A                     	endif
 16564  01206A  0008               	tblrd		*
 16565  01206C  CFF5 F02E          	movff	tablat,Timer2_Init@PRE
 16566                           
 16567                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 16568  012070  0EFF               	movlw	255
 16569  012072  0100               	movlb	0	; () banked
 16570  012074  25CB               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 16571  012076  0100               	movlb	0	; () banked
 16572  012078  6F60               	movwf	Timer2_Init@DIV& (0+255),b
 16573  01207A  0EFF               	movlw	255
 16574  01207C  0100               	movlb	0	; () banked
 16575  01207E  21CC               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 16576  012080  0100               	movlb	0	; () banked
 16577  012082  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 16578  012084  0EFF               	movlw	255
 16579  012086  0100               	movlb	0	; () banked
 16580  012088  21CD               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 16581  01208A  0100               	movlb	0	; () banked
 16582  01208C  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 16583  01208E  0EFF               	movlw	255
 16584  012090  0100               	movlb	0	; () banked
 16585  012092  21CE               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 16586  012094  0100               	movlb	0	; () banked
 16587  012096  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 16588                           
 16589                           ; BSR set to: 0
 16590                           ;Timer2.c: 48: INDEX = DIV/PRE;
 16591  012098  C060  F0B1         	movff	Timer2_Init@DIV,___lldiv@dividend
 16592  01209C  C061  F0B2         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 16593  0120A0  C062  F0B3         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 16594  0120A4  C063  F0B4         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 16595  0120A8  502E               	movf	Timer2_Init@PRE,w,c
 16596  0120AA  0100               	movlb	0	; () banked
 16597  0120AC  6FB5               	movwf	___lldiv@divisor& (0+255),b
 16598  0120AE  6BB6               	clrf	(___lldiv@divisor+1)& (0+255),b
 16599  0120B0  6BB7               	clrf	(___lldiv@divisor+2)& (0+255),b
 16600  0120B2  6BB8               	clrf	(___lldiv@divisor+3)& (0+255),b
 16601  0120B4  ECB4  F094         	call	___lldiv	;wreg free
 16602  0120B8  0100               	movlb	0	; () banked
 16603  0120BA  51B1               	movf	?___lldiv& (0+255),w,b
 16604  0120BC  6E2F               	movwf	Timer2_Init@INDEX,c
 16605                           
 16606                           ; BSR set to: 0
 16607                           ;Timer2.c: 49: PR2 = INDEX;
 16608  0120BE  C02F  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 16609                           
 16610                           ; BSR set to: 0
 16611  0120C2  0012               	return		;funcret
 16612  0120C4                     __end_of_Timer2_Init:
 16613                           	opt stack 0
 16614                           tosu	equ	0xFFF
 16615                           tosh	equ	0xFFE
 16616                           tosl	equ	0xFFD
 16617                           pclath	equ	0xFFA
 16618                           tblptru	equ	0xFF8
 16619                           tblptrh	equ	0xFF7
 16620                           tblptrl	equ	0xFF6
 16621                           tablat	equ	0xFF5
 16622                           prodh	equ	0xFF4
 16623                           prodl	equ	0xFF3
 16624                           intcon	equ	0xFF2
 16625                           indf0	equ	0xFEF
 16626                           postinc0	equ	0xFEE
 16627                           fsr0h	equ	0xFEA
 16628                           fsr0l	equ	0xFE9
 16629                           wreg	equ	0xFE8
 16630                           indf1	equ	0xFE7
 16631                           postdec1	equ	0xFE5
 16632                           plusw1	equ	0xFE3
 16633                           fsr1h	equ	0xFE2
 16634                           fsr1l	equ	0xFE1
 16635                           indf2	equ	0xFDF
 16636                           postinc2	equ	0xFDE
 16637                           postdec2	equ	0xFDD
 16638                           plusw2	equ	0xFDB
 16639                           fsr2h	equ	0xFDA
 16640                           fsr2l	equ	0xFD9
 16641                           status	equ	0xFD8
 16642                           
 16643 ;; *************** function ___lldiv *****************
 16644 ;; Defined at:
 16645 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;  dividend        4    0[BANK0 ] unsigned long 
 16648 ;;  divisor         4    4[BANK0 ] unsigned long 
 16649 ;; Auto vars:     Size  Location     Type
 16650 ;;  quotient        4    8[BANK0 ] unsigned long 
 16651 ;;  counter         1   12[BANK0 ] unsigned char 
 16652 ;; Return value:  Size  Location     Type
 16653 ;;                  4    0[BANK0 ] unsigned long 
 16654 ;; Registers used:
 16655 ;;		wreg, status,2, status,0
 16656 ;; Tracked objects:
 16657 ;;		On entry : 0/0
 16658 ;;		On exit  : 0/0
 16659 ;;		Unchanged: 0/0
 16660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16661 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16662 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16664 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16665 ;;Total ram usage:       13 bytes
 16666 ;; Hardware stack levels used:    1
 16667 ;; Hardware stack levels required when called:    7
 16668 ;; This function calls:
 16669 ;;		Nothing
 16670 ;; This function is called by:
 16671 ;;		_Timer0_Init
 16672 ;;		_Timer2_Init
 16673 ;;		_rand_between
 16674 ;;		_I2C_Init
 16675 ;; This function uses a non-reentrant model
 16676 ;;
 16677                           
 16678                           	psect	text90
 16679  012968                     __ptext90:
 16680                           	opt stack 0
 16681  012968                     ___lldiv:
 16682                           	opt stack 21
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;incstack = 0
 16686  012968  0E00               	movlw	0
 16687  01296A  0100               	movlb	0	; () banked
 16688  01296C  6FB9               	movwf	___lldiv@quotient& (0+255),b
 16689  01296E  0E00               	movlw	0
 16690  012970  6FBA               	movwf	(___lldiv@quotient+1)& (0+255),b
 16691  012972  0E00               	movlw	0
 16692  012974  6FBB               	movwf	(___lldiv@quotient+2)& (0+255),b
 16693  012976  0E00               	movlw	0
 16694  012978  6FBC               	movwf	(___lldiv@quotient+3)& (0+255),b
 16695                           
 16696                           ; BSR set to: 0
 16697  01297A  0100               	movlb	0	; () banked
 16698  01297C  51B5               	movf	___lldiv@divisor& (0+255),w,b
 16699  01297E  0100               	movlb	0	; () banked
 16700  012980  11B6               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16701  012982  0100               	movlb	0	; () banked
 16702  012984  11B7               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16703  012986  0100               	movlb	0	; () banked
 16704  012988  11B8               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16705  01298A  B4D8               	btfsc	status,2,c
 16706  01298C  D042               	goto	l2389
 16707                           
 16708                           ; BSR set to: 0
 16709  01298E  0E01               	movlw	1
 16710  012990  0100               	movlb	0	; () banked
 16711  012992  6FBD               	movwf	___lldiv@counter& (0+255),b
 16712  012994  D008               	goto	l10049
 16713  012996                     l10047:
 16714                           
 16715                           ; BSR set to: 0
 16716  012996  0100               	movlb	0	; () banked
 16717  012998  90D8               	bcf	status,0,c
 16718  01299A  37B5               	rlcf	___lldiv@divisor& (0+255),f,b
 16719  01299C  37B6               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16720  01299E  37B7               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16721  0129A0  37B8               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16722  0129A2  0100               	movlb	0	; () banked
 16723  0129A4  2BBD               	incf	___lldiv@counter& (0+255),f,b
 16724  0129A6                     l10049:
 16725                           
 16726                           ; BSR set to: 0
 16727  0129A6  0100               	movlb	0	; () banked
 16728  0129A8  AFB8               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16729  0129AA  D7F5               	goto	l10047
 16730  0129AC                     l10051:
 16731                           
 16732                           ; BSR set to: 0
 16733  0129AC  0100               	movlb	0	; () banked
 16734  0129AE  90D8               	bcf	status,0,c
 16735  0129B0  37B9               	rlcf	___lldiv@quotient& (0+255),f,b
 16736  0129B2  37BA               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16737  0129B4  37BB               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16738  0129B6  37BC               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16739                           
 16740                           ; BSR set to: 0
 16741  0129B8  0100               	movlb	0	; () banked
 16742  0129BA  51B5               	movf	___lldiv@divisor& (0+255),w,b
 16743  0129BC  0100               	movlb	0	; () banked
 16744  0129BE  5DB1               	subwf	___lldiv@dividend& (0+255),w,b
 16745  0129C0  0100               	movlb	0	; () banked
 16746  0129C2  51B6               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16747  0129C4  0100               	movlb	0	; () banked
 16748  0129C6  59B2               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16749  0129C8  0100               	movlb	0	; () banked
 16750  0129CA  51B7               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16751  0129CC  0100               	movlb	0	; () banked
 16752  0129CE  59B3               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16753  0129D0  0100               	movlb	0	; () banked
 16754  0129D2  51B8               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16755  0129D4  0100               	movlb	0	; () banked
 16756  0129D6  59B4               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16757  0129D8  A0D8               	btfss	status,0,c
 16758  0129DA  D012               	goto	l10059
 16759                           
 16760                           ; BSR set to: 0
 16761  0129DC  0100               	movlb	0	; () banked
 16762  0129DE  51B5               	movf	___lldiv@divisor& (0+255),w,b
 16763  0129E0  0100               	movlb	0	; () banked
 16764  0129E2  5FB1               	subwf	___lldiv@dividend& (0+255),f,b
 16765  0129E4  0100               	movlb	0	; () banked
 16766  0129E6  51B6               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16767  0129E8  0100               	movlb	0	; () banked
 16768  0129EA  5BB2               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16769  0129EC  0100               	movlb	0	; () banked
 16770  0129EE  51B7               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16771  0129F0  0100               	movlb	0	; () banked
 16772  0129F2  5BB3               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16773  0129F4  0100               	movlb	0	; () banked
 16774  0129F6  51B8               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16775  0129F8  0100               	movlb	0	; () banked
 16776  0129FA  5BB4               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16777                           
 16778                           ; BSR set to: 0
 16779  0129FC  0100               	movlb	0	; () banked
 16780  0129FE  81B9               	bsf	___lldiv@quotient& (0+255),0,b
 16781  012A00                     l10059:
 16782                           
 16783                           ; BSR set to: 0
 16784  012A00  0100               	movlb	0	; () banked
 16785  012A02  90D8               	bcf	status,0,c
 16786  012A04  33B8               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16787  012A06  33B7               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16788  012A08  33B6               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16789  012A0A  33B5               	rrcf	___lldiv@divisor& (0+255),f,b
 16790                           
 16791                           ; BSR set to: 0
 16792  012A0C  0100               	movlb	0	; () banked
 16793  012A0E  2FBD               	decfsz	___lldiv@counter& (0+255),f,b
 16794  012A10  D7CD               	goto	l10051
 16795  012A12                     l2389:
 16796                           
 16797                           ; BSR set to: 0
 16798  012A12  C0B9  F0B1         	movff	___lldiv@quotient,?___lldiv
 16799  012A16  C0BA  F0B2         	movff	___lldiv@quotient+1,?___lldiv+1
 16800  012A1A  C0BB  F0B3         	movff	___lldiv@quotient+2,?___lldiv+2
 16801  012A1E  C0BC  F0B4         	movff	___lldiv@quotient+3,?___lldiv+3
 16802                           
 16803                           ; BSR set to: 0
 16804  012A22  0012               	return		;funcret
 16805  012A24                     __end_of___lldiv:
 16806                           	opt stack 0
 16807                           tosu	equ	0xFFF
 16808                           tosh	equ	0xFFE
 16809                           tosl	equ	0xFFD
 16810                           pclath	equ	0xFFA
 16811                           tblptru	equ	0xFF8
 16812                           tblptrh	equ	0xFF7
 16813                           tblptrl	equ	0xFF6
 16814                           tablat	equ	0xFF5
 16815                           prodh	equ	0xFF4
 16816                           prodl	equ	0xFF3
 16817                           intcon	equ	0xFF2
 16818                           indf0	equ	0xFEF
 16819                           postinc0	equ	0xFEE
 16820                           fsr0h	equ	0xFEA
 16821                           fsr0l	equ	0xFE9
 16822                           wreg	equ	0xFE8
 16823                           indf1	equ	0xFE7
 16824                           postdec1	equ	0xFE5
 16825                           plusw1	equ	0xFE3
 16826                           fsr1h	equ	0xFE2
 16827                           fsr1l	equ	0xFE1
 16828                           indf2	equ	0xFDF
 16829                           postinc2	equ	0xFDE
 16830                           postdec2	equ	0xFDD
 16831                           plusw2	equ	0xFDB
 16832                           fsr2h	equ	0xFDA
 16833                           fsr2l	equ	0xFD9
 16834                           status	equ	0xFD8
 16835                           
 16836 ;; *************** function _Timer2_Clear *****************
 16837 ;; Defined at:
 16838 ;;		line 3 in file "Library/Timer2.c"
 16839 ;; Parameters:    Size  Location     Type
 16840 ;;		None
 16841 ;; Auto vars:     Size  Location     Type
 16842 ;;		None
 16843 ;; Return value:  Size  Location     Type
 16844 ;;                  1    wreg      void 
 16845 ;; Registers used:
 16846 ;;		None
 16847 ;; Tracked objects:
 16848 ;;		On entry : 0/0
 16849 ;;		On exit  : 0/0
 16850 ;;		Unchanged: 0/0
 16851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16856 ;;Total ram usage:        0 bytes
 16857 ;; Hardware stack levels used:    1
 16858 ;; Hardware stack levels required when called:    7
 16859 ;; This function calls:
 16860 ;;		Nothing
 16861 ;; This function is called by:
 16862 ;;		_Timer2_Init
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           	psect	text91
 16867  014742                     __ptext91:
 16868                           	opt stack 0
 16869  014742                     _Timer2_Clear:
 16870                           	opt stack 19
 16871                           
 16872                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;incstack = 0
 16876  014742  929E               	bcf	3998,1,c	;volatile
 16877                           
 16878                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 16879  014744  929D               	bcf	3997,1,c	;volatile
 16880                           
 16881                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 16882  014746  929F               	bcf	3999,1,c	;volatile
 16883  014748  0012               	return		;funcret
 16884  01474A                     __end_of_Timer2_Clear:
 16885                           	opt stack 0
 16886                           tosu	equ	0xFFF
 16887                           tosh	equ	0xFFE
 16888                           tosl	equ	0xFFD
 16889                           pclath	equ	0xFFA
 16890                           tblptru	equ	0xFF8
 16891                           tblptrh	equ	0xFF7
 16892                           tblptrl	equ	0xFF6
 16893                           tablat	equ	0xFF5
 16894                           prodh	equ	0xFF4
 16895                           prodl	equ	0xFF3
 16896                           intcon	equ	0xFF2
 16897                           indf0	equ	0xFEF
 16898                           postinc0	equ	0xFEE
 16899                           fsr0h	equ	0xFEA
 16900                           fsr0l	equ	0xFE9
 16901                           wreg	equ	0xFE8
 16902                           indf1	equ	0xFE7
 16903                           postdec1	equ	0xFE5
 16904                           plusw1	equ	0xFE3
 16905                           fsr1h	equ	0xFE2
 16906                           fsr1l	equ	0xFE1
 16907                           indf2	equ	0xFDF
 16908                           postinc2	equ	0xFDE
 16909                           postdec2	equ	0xFDD
 16910                           plusw2	equ	0xFDB
 16911                           fsr2h	equ	0xFDA
 16912                           fsr2l	equ	0xFD9
 16913                           status	equ	0xFD8
 16914                           
 16915 ;; *************** function _SPI_DisableISR *****************
 16916 ;; Defined at:
 16917 ;;		line 181 in file "Library/SPI.c"
 16918 ;; Parameters:    Size  Location     Type
 16919 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16920 ;;		 -> SPI1(11), SPI2(11), 
 16921 ;; Auto vars:     Size  Location     Type
 16922 ;;		None
 16923 ;; Return value:  Size  Location     Type
 16924 ;;                  1    wreg      void 
 16925 ;; Registers used:
 16926 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16927 ;; Tracked objects:
 16928 ;;		On entry : 0/0
 16929 ;;		On exit  : 0/0
 16930 ;;		Unchanged: 0/0
 16931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16936 ;;Total ram usage:        2 bytes
 16937 ;; Hardware stack levels used:    1
 16938 ;; Hardware stack levels required when called:    7
 16939 ;; This function calls:
 16940 ;;		Nothing
 16941 ;; This function is called by:
 16942 ;;		_SPI_Init
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           	psect	text92
 16947  0143E4                     __ptext92:
 16948                           	opt stack 0
 16949  0143E4                     _SPI_DisableISR:
 16950                           	opt stack 20
 16951                           
 16952                           ;SPI.c: 183: switch (pInput->mChannel)
 16953                           
 16954                           ;incstack = 0
 16955  0143E4  D004               	goto	l10207
 16956  0143E6                     l655:
 16957                           
 16958                           ; BSR set to: 0
 16959  0143E6  969D               	bcf	3997,3,c	;volatile
 16960  0143E8  0012               	return	
 16961  0143EA                     l657:
 16962                           
 16963                           ; BSR set to: 0
 16964  0143EA  9EA3               	bcf	4003,7,c	;volatile
 16965                           
 16966                           ; BSR set to: 0
 16967                           ;SPI.c: 188: };
 16968                           
 16969                           ; BSR set to: 0
 16970                           
 16971                           ;SPI.c: 187: default: return;
 16972  0143EC  0012               	return	
 16973  0143EE                     l10207:
 16974  0143EE  0100               	movlb	0	; () banked
 16975  0143F0  EE20 F002          	lfsr	2,2
 16976  0143F4  51B1               	movf	SPI_DisableISR@pInput& (0+255),w,b
 16977  0143F6  26D9               	addwf	fsr2l,f,c
 16978  0143F8  51B2               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 16979  0143FA  22DA               	addwfc	fsr2h,f,c
 16980  0143FC  50DF               	movf	indf2,w,c
 16981                           
 16982                           ; Switch size 1, requested type "space"
 16983                           ; Number of cases is 2, Range of values is 0 to 1
 16984                           ; switch strategies available:
 16985                           ; Name         Instructions Cycles
 16986                           ; simple_byte            7     4 (average)
 16987                           ;	Chosen strategy is simple_byte
 16988  0143FE  0A00               	xorlw	0	; case 0
 16989  014400  B4D8               	btfsc	status,2,c
 16990  014402  D7F1               	goto	l655
 16991  014404  0A01               	xorlw	1	; case 1
 16992  014406  A4D8               	btfss	status,2,c
 16993  014408  0012               	return	
 16994  01440A  D7EF               	goto	l657
 16995  01440C                     __end_of_SPI_DisableISR:
 16996                           	opt stack 0
 16997                           tosu	equ	0xFFF
 16998                           tosh	equ	0xFFE
 16999                           tosl	equ	0xFFD
 17000                           pclath	equ	0xFFA
 17001                           tblptru	equ	0xFF8
 17002                           tblptrh	equ	0xFF7
 17003                           tblptrl	equ	0xFF6
 17004                           tablat	equ	0xFF5
 17005                           prodh	equ	0xFF4
 17006                           prodl	equ	0xFF3
 17007                           intcon	equ	0xFF2
 17008                           indf0	equ	0xFEF
 17009                           postinc0	equ	0xFEE
 17010                           fsr0h	equ	0xFEA
 17011                           fsr0l	equ	0xFE9
 17012                           wreg	equ	0xFE8
 17013                           indf1	equ	0xFE7
 17014                           postdec1	equ	0xFE5
 17015                           plusw1	equ	0xFE3
 17016                           fsr1h	equ	0xFE2
 17017                           fsr1l	equ	0xFE1
 17018                           indf2	equ	0xFDF
 17019                           postinc2	equ	0xFDE
 17020                           postdec2	equ	0xFDD
 17021                           plusw2	equ	0xFDB
 17022                           fsr2h	equ	0xFDA
 17023                           fsr2l	equ	0xFD9
 17024                           status	equ	0xFD8
 17025                           
 17026 ;; *************** function _SPI_DCS *****************
 17027 ;; Defined at:
 17028 ;;		line 219 in file "Library/SPI.c"
 17029 ;; Parameters:    Size  Location     Type
 17030 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17031 ;;		 -> SPI1(11), SPI2(11), 
 17032 ;; Auto vars:     Size  Location     Type
 17033 ;;		None
 17034 ;; Return value:  Size  Location     Type
 17035 ;;                  1    wreg      void 
 17036 ;; Registers used:
 17037 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17038 ;; Tracked objects:
 17039 ;;		On entry : 0/0
 17040 ;;		On exit  : 0/0
 17041 ;;		Unchanged: 0/0
 17042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17047 ;;Total ram usage:        2 bytes
 17048 ;; Hardware stack levels used:    1
 17049 ;; Hardware stack levels required when called:    7
 17050 ;; This function calls:
 17051 ;;		Nothing
 17052 ;; This function is called by:
 17053 ;;		_SPI_Init
 17054 ;; This function uses a non-reentrant model
 17055 ;;
 17056                           
 17057                           	psect	text93
 17058  0142A8                     __ptext93:
 17059                           	opt stack 0
 17060  0142A8                     _SPI_DCS:
 17061                           	opt stack 20
 17062                           
 17063                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 17064                           
 17065                           ; BSR set to: 0
 17066                           ;incstack = 0
 17067  0142A8  0100               	movlb	0	; () banked
 17068  0142AA  EE20 F002          	lfsr	2,2
 17069  0142AE  51B1               	movf	SPI_DCS@pInput& (0+255),w,b
 17070  0142B0  26D9               	addwf	fsr2l,f,c
 17071  0142B2  51B2               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 17072  0142B4  22DA               	addwfc	fsr2h,f,c
 17073  0142B6  50DF               	movf	indf2,w,c
 17074  0142B8  A4D8               	btfss	status,2,c
 17075  0142BA  D007               	goto	l10213
 17076                           
 17077                           ; BSR set to: 0
 17078                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 17079  0142BC  C099  FFD9         	movff	_PortC+4,fsr2l
 17080  0142C0  C09A  FFDA         	movff	_PortC+5,fsr2h
 17081  0142C4  0100               	movlb	0	; () banked
 17082  0142C6  84DF               	bsf	indf2,2,c
 17083  0142C8  0012               	return	
 17084  0142CA                     l10213:
 17085                           
 17086                           ; BSR set to: 0
 17087                           ;SPI.c: 223: else
 17088                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 17089  0142CA  C08F  FFD9         	movff	_PortD+4,fsr2l
 17090  0142CE  C090  FFDA         	movff	_PortD+5,fsr2h
 17091  0142D2  0100               	movlb	0	; () banked
 17092  0142D4  8EDF               	bsf	indf2,7,c
 17093  0142D6  0012               	return	
 17094  0142D8                     __end_of_SPI_DCS:
 17095                           	opt stack 0
 17096                           tosu	equ	0xFFF
 17097                           tosh	equ	0xFFE
 17098                           tosl	equ	0xFFD
 17099                           pclath	equ	0xFFA
 17100                           tblptru	equ	0xFF8
 17101                           tblptrh	equ	0xFF7
 17102                           tblptrl	equ	0xFF6
 17103                           tablat	equ	0xFF5
 17104                           prodh	equ	0xFF4
 17105                           prodl	equ	0xFF3
 17106                           intcon	equ	0xFF2
 17107                           indf0	equ	0xFEF
 17108                           postinc0	equ	0xFEE
 17109                           fsr0h	equ	0xFEA
 17110                           fsr0l	equ	0xFE9
 17111                           wreg	equ	0xFE8
 17112                           indf1	equ	0xFE7
 17113                           postdec1	equ	0xFE5
 17114                           plusw1	equ	0xFE3
 17115                           fsr1h	equ	0xFE2
 17116                           fsr1l	equ	0xFE1
 17117                           indf2	equ	0xFDF
 17118                           postinc2	equ	0xFDE
 17119                           postdec2	equ	0xFDD
 17120                           plusw2	equ	0xFDB
 17121                           fsr2h	equ	0xFDA
 17122                           fsr2l	equ	0xFD9
 17123                           status	equ	0xFD8
 17124                           
 17125 ;; *************** function _Button_Init *****************
 17126 ;; Defined at:
 17127 ;;		line 18 in file "Library/Button.c"
 17128 ;; Parameters:    Size  Location     Type
 17129 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 17130 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 17131 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 17132 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 17133 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 17134 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 17135 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 17136 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 17137 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 17138 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 17139 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 17140 ;; Auto vars:     Size  Location     Type
 17141 ;;		None
 17142 ;; Return value:  Size  Location     Type
 17143 ;;                  1    wreg      void 
 17144 ;; Registers used:
 17145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17146 ;; Tracked objects:
 17147 ;;		On entry : 0/0
 17148 ;;		On exit  : 0/0
 17149 ;;		Unchanged: 0/0
 17150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17151 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17155 ;;Total ram usage:       13 bytes
 17156 ;; Hardware stack levels used:    1
 17157 ;; Hardware stack levels required when called:   15
 17158 ;; This function calls:
 17159 ;;		_HMI_InitButtons
 17160 ;;		_MXK_InitDIPSwitch
 17161 ;;		_MXK_InitTestButton
 17162 ;; This function is called by:
 17163 ;;		_HMI_Init
 17164 ;;		_FunctInitButton
 17165 ;; This function uses a non-reentrant model
 17166 ;;
 17167                           
 17168                           	psect	text94
 17169  012580                     __ptext94:
 17170                           	opt stack 0
 17171  012580                     _Button_Init:
 17172                           	opt stack 14
 17173                           
 17174                           ;Button.c: 21: if(pInput==(void*)0)
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;incstack = 0
 17178  012580  0100               	movlb	0	; () banked
 17179  012582  51EC               	movf	Button_Init@pInput& (0+255),w,b
 17180  012584  0100               	movlb	0	; () banked
 17181  012586  11ED               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 17182  012588  B4D8               	btfsc	status,2,c
 17183  01258A  0012               	return	
 17184                           
 17185                           ; BSR set to: 0
 17186                           ;Button.c: 23: if(pInitIO==(void*)0)
 17187                           
 17188                           ; BSR set to: 0
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;Button.c: 22: return;
 17192  01258C  0100               	movlb	0	; () banked
 17193  01258E  51F0               	movf	Button_Init@pInitIO& (0+255),w,b
 17194  012590  0100               	movlb	0	; () banked
 17195  012592  11F1               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 17196  012594  0100               	movlb	0	; () banked
 17197  012596  11F2               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 17198  012598  B4D8               	btfsc	status,2,c
 17199  01259A  0012               	return	
 17200                           
 17201                           ; BSR set to: 0
 17202                           ;Button.c: 25: if(pGetState==(void*)0)
 17203                           
 17204                           ; BSR set to: 0
 17205                           
 17206                           ; BSR set to: 0
 17207                           ;Button.c: 24: return;
 17208  01259C  0100               	movlb	0	; () banked
 17209  01259E  51F3               	movf	Button_Init@pGetState& (0+255),w,b
 17210  0125A0  0100               	movlb	0	; () banked
 17211  0125A2  11F4               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 17212  0125A4  0100               	movlb	0	; () banked
 17213  0125A6  11F5               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 17214  0125A8  B4D8               	btfsc	status,2,c
 17215  0125AA  0012               	return	
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;Button.c: 27: if(pFunction==(void*)0)
 17219                           
 17220                           ; BSR set to: 0
 17221                           
 17222                           ; BSR set to: 0
 17223                           ;Button.c: 26: return;
 17224  0125AC  0100               	movlb	0	; () banked
 17225  0125AE  51F6               	movf	Button_Init@pFunction& (0+255),w,b
 17226  0125B0  0100               	movlb	0	; () banked
 17227  0125B2  11F7               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 17228  0125B4  0100               	movlb	0	; () banked
 17229  0125B6  11F8               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 17230  0125B8  B4D8               	btfsc	status,2,c
 17231  0125BA  0012               	return	
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;Button.c: 30: if(pThreshold == 0)
 17235                           
 17236                           ; BSR set to: 0
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;Button.c: 28: return;
 17240  0125BC  0100               	movlb	0	; () banked
 17241  0125BE  51EE               	movf	Button_Init@pThreshold& (0+255),w,b
 17242  0125C0  0100               	movlb	0	; () banked
 17243  0125C2  11EF               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 17244  0125C4  A4D8               	btfss	status,2,c
 17245  0125C6  D005               	goto	l10827
 17246                           
 17247                           ; BSR set to: 0
 17248                           ;Button.c: 31: pThreshold = 1;
 17249  0125C8  0E00               	movlw	0
 17250  0125CA  0100               	movlb	0	; () banked
 17251  0125CC  6FEF               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17252  0125CE  0E01               	movlw	1
 17253  0125D0  6FEE               	movwf	Button_Init@pThreshold& (0+255),b
 17254  0125D2                     l10827:
 17255                           
 17256                           ; BSR set to: 0
 17257                           ;Button.c: 34: pInput->mState = 0;
 17258  0125D2  C0EC  FFD9         	movff	Button_Init@pInput,fsr2l
 17259  0125D6  C0ED  FFDA         	movff	Button_Init@pInput+1,fsr2h
 17260  0125DA  0E00               	movlw	0
 17261  0125DC  6EDF               	movwf	indf2,c
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;Button.c: 35: pInput->mCount = 0;
 17265  0125DE  0100               	movlb	0	; () banked
 17266  0125E0  EE20 F001          	lfsr	2,1
 17267  0125E4  51EC               	movf	Button_Init@pInput& (0+255),w,b
 17268  0125E6  26D9               	addwf	fsr2l,f,c
 17269  0125E8  51ED               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17270  0125EA  22DA               	addwfc	fsr2h,f,c
 17271  0125EC  0E00               	movlw	0
 17272  0125EE  6EDF               	movwf	indf2,c
 17273                           
 17274                           ; BSR set to: 0
 17275                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 17276  0125F0  0100               	movlb	0	; () banked
 17277  0125F2  EE20 F002          	lfsr	2,2
 17278  0125F6  51EC               	movf	Button_Init@pInput& (0+255),w,b
 17279  0125F8  26D9               	addwf	fsr2l,f,c
 17280  0125FA  51ED               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17281  0125FC  22DA               	addwfc	fsr2h,f,c
 17282  0125FE  C0EE  FFDE         	movff	Button_Init@pThreshold,postinc2
 17283  012602  C0EF  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;Button.c: 37: pInput->mFunction = pFunction;
 17287  012606  0100               	movlb	0	; () banked
 17288  012608  EE20 F004          	lfsr	2,4
 17289  01260C  51EC               	movf	Button_Init@pInput& (0+255),w,b
 17290  01260E  26D9               	addwf	fsr2l,f,c
 17291  012610  51ED               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17292  012612  22DA               	addwfc	fsr2h,f,c
 17293  012614  C0F6  FFDE         	movff	Button_Init@pFunction,postinc2
 17294  012618  C0F7  FFDE         	movff	Button_Init@pFunction+1,postinc2
 17295  01261C  C0F8  FFDE         	movff	Button_Init@pFunction+2,postinc2
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;Button.c: 38: pInput->mGetState = pGetState;
 17299  012620  0100               	movlb	0	; () banked
 17300  012622  EE20 F007          	lfsr	2,7
 17301  012626  51EC               	movf	Button_Init@pInput& (0+255),w,b
 17302  012628  26D9               	addwf	fsr2l,f,c
 17303  01262A  51ED               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17304  01262C  22DA               	addwfc	fsr2h,f,c
 17305  01262E  C0F3  FFDE         	movff	Button_Init@pGetState,postinc2
 17306  012632  C0F4  FFDE         	movff	Button_Init@pGetState+1,postinc2
 17307  012636  C0F5  FFDE         	movff	Button_Init@pGetState+2,postinc2
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;Button.c: 41: pInitIO();
 17311  01263A  D801               	call	u7178
 17312  01263C  0012               	return	
 17313  01263E                     u7178:
 17314  01263E  0005               	push	
 17315  012640  6EFA               	movwf	pclath,c
 17316  012642  0100               	movlb	0	; () banked
 17317  012644  51F0               	movf	Button_Init@pInitIO& (0+255),w,b
 17318  012646  6EFD               	movwf	tosl,c
 17319  012648  51F1               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 17320  01264A  6EFE               	movwf	tosh,c
 17321  01264C  51F2               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 17322  01264E  6EFF               	movwf	tosu,c
 17323  012650  50FA               	movf	pclath,w,c
 17324  012652  0012               	return		;indir
 17325  012654                     __end_of_Button_Init:
 17326                           	opt stack 0
 17327                           tosu	equ	0xFFF
 17328                           tosh	equ	0xFFE
 17329                           tosl	equ	0xFFD
 17330                           pclath	equ	0xFFA
 17331                           tblptru	equ	0xFF8
 17332                           tblptrh	equ	0xFF7
 17333                           tblptrl	equ	0xFF6
 17334                           tablat	equ	0xFF5
 17335                           prodh	equ	0xFF4
 17336                           prodl	equ	0xFF3
 17337                           intcon	equ	0xFF2
 17338                           indf0	equ	0xFEF
 17339                           postinc0	equ	0xFEE
 17340                           fsr0h	equ	0xFEA
 17341                           fsr0l	equ	0xFE9
 17342                           wreg	equ	0xFE8
 17343                           indf1	equ	0xFE7
 17344                           postdec1	equ	0xFE5
 17345                           plusw1	equ	0xFE3
 17346                           fsr1h	equ	0xFE2
 17347                           fsr1l	equ	0xFE1
 17348                           indf2	equ	0xFDF
 17349                           postinc2	equ	0xFDE
 17350                           postdec2	equ	0xFDD
 17351                           plusw2	equ	0xFDB
 17352                           fsr2h	equ	0xFDA
 17353                           fsr2l	equ	0xFD9
 17354                           status	equ	0xFD8
 17355                           
 17356 ;; *************** function _MXK_InitDIPSwitch *****************
 17357 ;; Defined at:
 17358 ;;		line 20 in file "Library/MXK.c"
 17359 ;; Parameters:    Size  Location     Type
 17360 ;;		None
 17361 ;; Auto vars:     Size  Location     Type
 17362 ;;		None
 17363 ;; Return value:  Size  Location     Type
 17364 ;;                  1    wreg      void 
 17365 ;; Registers used:
 17366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17367 ;; Tracked objects:
 17368 ;;		On entry : 0/0
 17369 ;;		On exit  : 0/0
 17370 ;;		Unchanged: 0/0
 17371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17376 ;;Total ram usage:        0 bytes
 17377 ;; Hardware stack levels used:    1
 17378 ;; Hardware stack levels required when called:   14
 17379 ;; This function calls:
 17380 ;;		_Port_SetQuadType
 17381 ;; This function is called by:
 17382 ;;		_FunctInitButton
 17383 ;;		_Button_Init
 17384 ;; This function uses a non-reentrant model
 17385 ;;
 17386                           
 17387                           	psect	text95
 17388  0144D2                     __ptext95:
 17389                           	opt stack 0
 17390  0144D2                     _MXK_InitDIPSwitch:
 17391                           	opt stack 14
 17392                           
 17393                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 17394                           
 17395                           ;incstack = 0
 17396  0144D2  0E8B               	movlw	low _PortD
 17397  0144D4  0100               	movlb	0	; () banked
 17398  0144D6  6FE7               	movwf	Port_SetQuadType@pInput& (0+255),b
 17399  0144D8  0E00               	movlw	high _PortD
 17400  0144DA  0100               	movlb	0	; () banked
 17401  0144DC  6FE8               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 17402  0144DE  0E00               	movlw	0
 17403  0144E0  0100               	movlb	0	; () banked
 17404  0144E2  6FE9               	movwf	Port_SetQuadType@pQuad& (0+255),b
 17405  0144E4  0E00               	movlw	0
 17406  0144E6  0100               	movlb	0	; () banked
 17407  0144E8  6FEA               	movwf	Port_SetQuadType@pType& (0+255),b
 17408  0144EA  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 17409  0144EE  0012               	return		;funcret
 17410  0144F0                     __end_of_MXK_InitDIPSwitch:
 17411                           	opt stack 0
 17412                           tosu	equ	0xFFF
 17413                           tosh	equ	0xFFE
 17414                           tosl	equ	0xFFD
 17415                           pclath	equ	0xFFA
 17416                           tblptru	equ	0xFF8
 17417                           tblptrh	equ	0xFF7
 17418                           tblptrl	equ	0xFF6
 17419                           tablat	equ	0xFF5
 17420                           prodh	equ	0xFF4
 17421                           prodl	equ	0xFF3
 17422                           intcon	equ	0xFF2
 17423                           indf0	equ	0xFEF
 17424                           postinc0	equ	0xFEE
 17425                           fsr0h	equ	0xFEA
 17426                           fsr0l	equ	0xFE9
 17427                           wreg	equ	0xFE8
 17428                           indf1	equ	0xFE7
 17429                           postdec1	equ	0xFE5
 17430                           plusw1	equ	0xFE3
 17431                           fsr1h	equ	0xFE2
 17432                           fsr1l	equ	0xFE1
 17433                           indf2	equ	0xFDF
 17434                           postinc2	equ	0xFDE
 17435                           postdec2	equ	0xFDD
 17436                           plusw2	equ	0xFDB
 17437                           fsr2h	equ	0xFDA
 17438                           fsr2l	equ	0xFD9
 17439                           status	equ	0xFD8
 17440                           
 17441 ;; *************** function _HMI_InitButtons *****************
 17442 ;; Defined at:
 17443 ;;		line 21 in file "HMI.c"
 17444 ;; Parameters:    Size  Location     Type
 17445 ;;		None
 17446 ;; Auto vars:     Size  Location     Type
 17447 ;;		None
 17448 ;; Return value:  Size  Location     Type
 17449 ;;                  1    wreg      void 
 17450 ;; Registers used:
 17451 ;;		None
 17452 ;; Tracked objects:
 17453 ;;		On entry : 0/0
 17454 ;;		On exit  : 0/0
 17455 ;;		Unchanged: 0/0
 17456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17461 ;;Total ram usage:        0 bytes
 17462 ;; Hardware stack levels used:    1
 17463 ;; Hardware stack levels required when called:    7
 17464 ;; This function calls:
 17465 ;;		Nothing
 17466 ;; This function is called by:
 17467 ;;		_HMI_Init
 17468 ;;		_Button_Init
 17469 ;; This function uses a non-reentrant model
 17470 ;;
 17471                           
 17472                           	psect	text96
 17473  01476A                     __ptext96:
 17474                           	opt stack 0
 17475  01476A                     _HMI_InitButtons:
 17476                           	opt stack 21
 17477                           
 17478                           ;HMI.c: 23: TRISE = 0xFF;
 17479                           
 17480                           ;incstack = 0
 17481  01476A  6896               	setf	3990,c	;volatile
 17482  01476C  0012               	return		;funcret
 17483  01476E                     __end_of_HMI_InitButtons:
 17484                           	opt stack 0
 17485                           tosu	equ	0xFFF
 17486                           tosh	equ	0xFFE
 17487                           tosl	equ	0xFFD
 17488                           pclath	equ	0xFFA
 17489                           tblptru	equ	0xFF8
 17490                           tblptrh	equ	0xFF7
 17491                           tblptrl	equ	0xFF6
 17492                           tablat	equ	0xFF5
 17493                           prodh	equ	0xFF4
 17494                           prodl	equ	0xFF3
 17495                           intcon	equ	0xFF2
 17496                           indf0	equ	0xFEF
 17497                           postinc0	equ	0xFEE
 17498                           fsr0h	equ	0xFEA
 17499                           fsr0l	equ	0xFE9
 17500                           wreg	equ	0xFE8
 17501                           indf1	equ	0xFE7
 17502                           postdec1	equ	0xFE5
 17503                           plusw1	equ	0xFE3
 17504                           fsr1h	equ	0xFE2
 17505                           fsr1l	equ	0xFE1
 17506                           indf2	equ	0xFDF
 17507                           postinc2	equ	0xFDE
 17508                           postdec2	equ	0xFDD
 17509                           plusw2	equ	0xFDB
 17510                           fsr2h	equ	0xFDA
 17511                           fsr2l	equ	0xFD9
 17512                           status	equ	0xFD8
 17513                           
 17514 ;; *************** function _MXK_InitTestButton *****************
 17515 ;; Defined at:
 17516 ;;		line 10 in file "Library/MXK.c"
 17517 ;; Parameters:    Size  Location     Type
 17518 ;;		None
 17519 ;; Auto vars:     Size  Location     Type
 17520 ;;		None
 17521 ;; Return value:  Size  Location     Type
 17522 ;;                  1    wreg      void 
 17523 ;; Registers used:
 17524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17525 ;; Tracked objects:
 17526 ;;		On entry : 0/0
 17527 ;;		On exit  : 0/0
 17528 ;;		Unchanged: 0/0
 17529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17534 ;;Total ram usage:        0 bytes
 17535 ;; Hardware stack levels used:    1
 17536 ;; Hardware stack levels required when called:   12
 17537 ;; This function calls:
 17538 ;;		_Port_SetPinType
 17539 ;; This function is called by:
 17540 ;;		_FunctInitButton
 17541 ;;		_Button_Init
 17542 ;; This function uses a non-reentrant model
 17543 ;;
 17544                           
 17545                           	psect	text97
 17546  0144F0                     __ptext97:
 17547                           	opt stack 0
 17548  0144F0                     _MXK_InitTestButton:
 17549                           	opt stack 16
 17550                           
 17551                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 17552                           
 17553                           ;incstack = 0
 17554  0144F0  0E95               	movlw	low _PortB
 17555  0144F2  0100               	movlb	0	; () banked
 17556  0144F4  6FD7               	movwf	Port_SetPinType@pInput& (0+255),b
 17557  0144F6  0E01               	movlw	high _PortB
 17558  0144F8  0100               	movlb	0	; () banked
 17559  0144FA  6FD8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17560  0144FC  0E04               	movlw	4
 17561  0144FE  0100               	movlb	0	; () banked
 17562  014500  6FD9               	movwf	Port_SetPinType@pPin& (0+255),b
 17563  014502  0E00               	movlw	0
 17564  014504  0100               	movlb	0	; () banked
 17565  014506  6FDA               	movwf	Port_SetPinType@pType& (0+255),b
 17566  014508  EC77  F08A         	call	_Port_SetPinType	;wreg free
 17567  01450C  0012               	return		;funcret
 17568  01450E                     __end_of_MXK_InitTestButton:
 17569                           	opt stack 0
 17570                           tosu	equ	0xFFF
 17571                           tosh	equ	0xFFE
 17572                           tosl	equ	0xFFD
 17573                           pclath	equ	0xFFA
 17574                           tblptru	equ	0xFF8
 17575                           tblptrh	equ	0xFF7
 17576                           tblptrl	equ	0xFF6
 17577                           tablat	equ	0xFF5
 17578                           prodh	equ	0xFF4
 17579                           prodl	equ	0xFF3
 17580                           intcon	equ	0xFF2
 17581                           indf0	equ	0xFEF
 17582                           postinc0	equ	0xFEE
 17583                           fsr0h	equ	0xFEA
 17584                           fsr0l	equ	0xFE9
 17585                           wreg	equ	0xFE8
 17586                           indf1	equ	0xFE7
 17587                           postdec1	equ	0xFE5
 17588                           plusw1	equ	0xFE3
 17589                           fsr1h	equ	0xFE2
 17590                           fsr1l	equ	0xFE1
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           plusw2	equ	0xFDB
 17595                           fsr2h	equ	0xFDA
 17596                           fsr2l	equ	0xFD9
 17597                           status	equ	0xFD8
 17598                           
 17599 ;; *************** function _Port_SetPinType *****************
 17600 ;; Defined at:
 17601 ;;		line 189 in file "Library/Port.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17604 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17605 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17606 ;;  pPin            1   40[BANK0 ] enum E6750
 17607 ;;  pType           1   41[BANK0 ] enum E6795
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 17610 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 17611 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 17612 ;;  Output          1   42[BANK0 ] enum E6475
 17613 ;; Return value:  Size  Location     Type
 17614 ;;                  1    wreg      enum E6475
 17615 ;; Registers used:
 17616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17617 ;; Tracked objects:
 17618 ;;		On entry : 0/0
 17619 ;;		On exit  : 0/0
 17620 ;;		Unchanged: 0/0
 17621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17623 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17626 ;;Total ram usage:        7 bytes
 17627 ;; Hardware stack levels used:    1
 17628 ;; Hardware stack levels required when called:   11
 17629 ;; This function calls:
 17630 ;;		_Byte_SetBit
 17631 ;;		_PortProperty_Valid
 17632 ;;		_Word_SetPair
 17633 ;; This function is called by:
 17634 ;;		_Configure_GPIOs
 17635 ;;		_LED_Init
 17636 ;;		_Port_Init
 17637 ;;		_SPI_Init
 17638 ;;		_Motor_Init
 17639 ;;		_MXK_InitTestButton
 17640 ;;		_MXK_Init
 17641 ;;		_I2C_Init
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           	psect	text98
 17646  0114EE                     __ptext98:
 17647                           	opt stack 0
 17648  0114EE                     _Port_SetPinType:
 17649                           	opt stack 18
 17650                           
 17651                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17652                           
 17653                           ;incstack = 0
 17654  0114EE  C0D7  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17655  0114F2  C0D8  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17656  0114F6  CFDE F0DC          	movff	postinc2,Port_SetPinType@Props
 17657  0114FA  CFDD F0DD          	movff	postdec2,Port_SetPinType@Props+1
 17658                           
 17659                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17660  0114FE  0E05               	movlw	5
 17661  011500  0100               	movlb	0	; () banked
 17662  011502  6FDB               	movwf	Port_SetPinType@Output& (0+255),b
 17663                           
 17664                           ;Port.c: 193: switch (pType)
 17665  011504  D0B5               	goto	l10091
 17666  011506                     l10071:
 17667                           
 17668                           ; BSR set to: 0
 17669                           ;Port.c: 197: {
 17670                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17671  011506  0100               	movlb	0	; () banked
 17672  011508  EE20 F002          	lfsr	2,2
 17673  01150C  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17674  01150E  26D9               	addwf	fsr2l,f,c
 17675  011510  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17676  011512  22DA               	addwfc	fsr2h,f,c
 17677  011514  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17678  011518  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17679  01151C  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17680  011520  0E01               	movlw	1
 17681  011522  0100               	movlb	0	; () banked
 17682  011524  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17683  011526  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17684                           
 17685                           ;Port.c: 203: break;
 17686  01152A  D0B0               	goto	l10093
 17687  01152C                     l10073:
 17688                           
 17689                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17690  01152C  C0DC  F0C0         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17691  011530  C0DD  F0C1         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17692  011534  0E01               	movlw	1
 17693  011536  0100               	movlb	0	; () banked
 17694  011538  6FC2               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17695  01153A  C0D9  F0C3         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17696  01153E  ECF9  F099         	call	_PortProperty_Valid	;wreg free
 17697  011542  0100               	movlb	0	; () banked
 17698  011544  6FDB               	movwf	Port_SetPinType@Output& (0+255),b
 17699  011546  0100               	movlb	0	; () banked
 17700  011548  51DB               	movf	Port_SetPinType@Output& (0+255),w,b
 17701  01154A  A4D8               	btfss	status,2,c
 17702  01154C  0012               	return	
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;Port.c: 208: {
 17706                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17707  01154E  0100               	movlb	0	; () banked
 17708  011550  EE20 F002          	lfsr	2,2
 17709  011554  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17710  011556  26D9               	addwf	fsr2l,f,c
 17711  011558  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17712  01155A  22DA               	addwfc	fsr2h,f,c
 17713  01155C  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17714  011560  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17715  011564  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17716  011568  0E00               	movlw	0
 17717  01156A  0100               	movlb	0	; () banked
 17718  01156C  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17719  01156E  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17720                           
 17721                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17722  011572  0100               	movlb	0	; () banked
 17723  011574  EE20 F004          	lfsr	2,4
 17724  011578  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17725  01157A  26D9               	addwf	fsr2l,f,c
 17726  01157C  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17727  01157E  22DA               	addwfc	fsr2h,f,c
 17728  011580  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17729  011584  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17730  011588  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17731  01158C  0E00               	movlw	0
 17732  01158E  0100               	movlb	0	; () banked
 17733  011590  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17734  011592  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17735                           
 17736                           ;Port.c: 214: break;
 17737  011596  D07A               	goto	l10093
 17738  011598                     l10079:
 17739                           
 17740                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17741  011598  C0DC  F0C0         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17742  01159C  C0DD  F0C1         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17743  0115A0  0E02               	movlw	2
 17744  0115A2  0100               	movlb	0	; () banked
 17745  0115A4  6FC2               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17746  0115A6  C0D9  F0C3         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17747  0115AA  ECF9  F099         	call	_PortProperty_Valid	;wreg free
 17748  0115AE  0100               	movlb	0	; () banked
 17749  0115B0  6FDB               	movwf	Port_SetPinType@Output& (0+255),b
 17750  0115B2  0100               	movlb	0	; () banked
 17751  0115B4  51DB               	movf	Port_SetPinType@Output& (0+255),w,b
 17752  0115B6  A4D8               	btfss	status,2,c
 17753  0115B8  0012               	return	
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;Port.c: 220: {
 17757                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17758  0115BA  0100               	movlb	0	; () banked
 17759  0115BC  EE20 F002          	lfsr	2,2
 17760  0115C0  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17761  0115C2  26D9               	addwf	fsr2l,f,c
 17762  0115C4  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17763  0115C6  22DA               	addwfc	fsr2h,f,c
 17764  0115C8  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17765  0115CC  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17766  0115D0  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17767  0115D4  0E01               	movlw	1
 17768  0115D6  0100               	movlb	0	; () banked
 17769  0115D8  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17770  0115DA  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17771                           
 17772                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17773  0115DE  0100               	movlb	0	; () banked
 17774  0115E0  EE20 F004          	lfsr	2,4
 17775  0115E4  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17776  0115E6  26D9               	addwf	fsr2l,f,c
 17777  0115E8  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17778  0115EA  22DA               	addwfc	fsr2h,f,c
 17779  0115EC  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17780  0115F0  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17781  0115F4  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17782  0115F8  0E01               	movlw	1
 17783  0115FA  0100               	movlb	0	; () banked
 17784  0115FC  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17785  0115FE  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17786                           
 17787                           ;Port.c: 226: break;
 17788  011602  D044               	goto	l10093
 17789  011604                     l10085:
 17790                           
 17791                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17792  011604  C0DC  F0C0         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17793  011608  C0DD  F0C1         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17794  01160C  0E00               	movlw	0
 17795  01160E  0100               	movlb	0	; () banked
 17796  011610  6FC2               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17797  011612  C0D9  F0C3         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17798  011616  ECF9  F099         	call	_PortProperty_Valid	;wreg free
 17799  01161A  0100               	movlb	0	; () banked
 17800  01161C  6FDB               	movwf	Port_SetPinType@Output& (0+255),b
 17801  01161E  0100               	movlb	0	; () banked
 17802  011620  51DB               	movf	Port_SetPinType@Output& (0+255),w,b
 17803  011622  A4D8               	btfss	status,2,c
 17804  011624  0012               	return	
 17805                           
 17806                           ; BSR set to: 0
 17807                           ;Port.c: 232: {
 17808                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17809  011626  0100               	movlb	0	; () banked
 17810  011628  EE20 F002          	lfsr	2,2
 17811  01162C  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17812  01162E  26D9               	addwf	fsr2l,f,c
 17813  011630  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17814  011632  22DA               	addwfc	fsr2h,f,c
 17815  011634  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17816  011638  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17817  01163C  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17818  011640  0E00               	movlw	0
 17819  011642  0100               	movlb	0	; () banked
 17820  011644  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17821  011646  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17822                           
 17823                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17824  01164A  0100               	movlb	0	; () banked
 17825  01164C  EE20 F004          	lfsr	2,4
 17826  011650  51D7               	movf	Port_SetPinType@pInput& (0+255),w,b
 17827  011652  26D9               	addwf	fsr2l,f,c
 17828  011654  51D8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17829  011656  22DA               	addwfc	fsr2h,f,c
 17830  011658  CFDE F0B1          	movff	postinc2,Byte_SetBit@pInput
 17831  01165C  CFDD F0B2          	movff	postdec2,Byte_SetBit@pInput+1
 17832  011660  C0D9  F0B3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17833  011664  0E00               	movlw	0
 17834  011666  0100               	movlb	0	; () banked
 17835  011668  6FB4               	movwf	Byte_SetBit@pValue& (0+255),b
 17836  01166A  ECD6  F09C         	call	_Byte_SetBit	;wreg free
 17837                           
 17838                           ;Port.c: 239: }
 17839                           
 17840                           ;Port.c: 238: break;
 17841  01166E  D00E               	goto	l10093
 17842  011670                     l10091:
 17843  011670  0100               	movlb	0	; () banked
 17844  011672  51DA               	movf	Port_SetPinType@pType& (0+255),w,b
 17845                           
 17846                           ; Switch size 1, requested type "space"
 17847                           ; Number of cases is 4, Range of values is 0 to 3
 17848                           ; switch strategies available:
 17849                           ; Name         Instructions Cycles
 17850                           ; simple_byte           13     7 (average)
 17851                           ;	Chosen strategy is simple_byte
 17852  011674  0A00               	xorlw	0	; case 0
 17853  011676  B4D8               	btfsc	status,2,c
 17854  011678  D746               	goto	l10071
 17855  01167A  0A01               	xorlw	1	; case 1
 17856  01167C  B4D8               	btfsc	status,2,c
 17857  01167E  D756               	goto	l10073
 17858  011680  0A03               	xorlw	3	; case 2
 17859  011682  B4D8               	btfsc	status,2,c
 17860  011684  D789               	goto	l10079
 17861  011686  0A01               	xorlw	1	; case 3
 17862  011688  B4D8               	btfsc	status,2,c
 17863  01168A  D7BC               	goto	l10085
 17864  01168C                     l10093:
 17865                           
 17866                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17867  01168C  0E08               	movlw	8
 17868  01168E  0100               	movlb	0	; () banked
 17869  011690  25D7               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17870  011692  0100               	movlb	0	; () banked
 17871  011694  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
 17872  011696  0E00               	movlw	0
 17873  011698  0100               	movlb	0	; () banked
 17874  01169A  21D8               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17875  01169C  0100               	movlb	0	; () banked
 17876  01169E  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17877  0116A0  C0D9  F0C2         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17878  0116A4  C0DA  F0C3         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17879  0116A8  EC45  F09F         	call	_Word_SetPair	;wreg free
 17880  0116AC  0012               	return	
 17881  0116AE                     __end_of_Port_SetPinType:
 17882                           	opt stack 0
 17883                           tosu	equ	0xFFF
 17884                           tosh	equ	0xFFE
 17885                           tosl	equ	0xFFD
 17886                           pclath	equ	0xFFA
 17887                           tblptru	equ	0xFF8
 17888                           tblptrh	equ	0xFF7
 17889                           tblptrl	equ	0xFF6
 17890                           tablat	equ	0xFF5
 17891                           prodh	equ	0xFF4
 17892                           prodl	equ	0xFF3
 17893                           intcon	equ	0xFF2
 17894                           indf0	equ	0xFEF
 17895                           postinc0	equ	0xFEE
 17896                           fsr0h	equ	0xFEA
 17897                           fsr0l	equ	0xFE9
 17898                           wreg	equ	0xFE8
 17899                           indf1	equ	0xFE7
 17900                           postdec1	equ	0xFE5
 17901                           plusw1	equ	0xFE3
 17902                           fsr1h	equ	0xFE2
 17903                           fsr1l	equ	0xFE1
 17904                           indf2	equ	0xFDF
 17905                           postinc2	equ	0xFDE
 17906                           postdec2	equ	0xFDD
 17907                           plusw2	equ	0xFDB
 17908                           fsr2h	equ	0xFDA
 17909                           fsr2l	equ	0xFD9
 17910                           status	equ	0xFD8
 17911                           
 17912 ;; *************** function _Byte_SetBit *****************
 17913 ;; Defined at:
 17914 ;;		line 32 in file "Library/Types.c"
 17915 ;; Parameters:    Size  Location     Type
 17916 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17917 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17918 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17919 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17920 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17921 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17922 ;;		 -> NULL(0), 
 17923 ;;  pBit            1    2[BANK0 ] unsigned char 
 17924 ;;  pValue          1    3[BANK0 ] unsigned char 
 17925 ;; Auto vars:     Size  Location     Type
 17926 ;;		None
 17927 ;; Return value:  Size  Location     Type
 17928 ;;                  1    wreg      void 
 17929 ;; Registers used:
 17930 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17931 ;; Tracked objects:
 17932 ;;		On entry : 0/0
 17933 ;;		On exit  : 0/0
 17934 ;;		Unchanged: 0/0
 17935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17939 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17940 ;;Total ram usage:        7 bytes
 17941 ;; Hardware stack levels used:    1
 17942 ;; Hardware stack levels required when called:    7
 17943 ;; This function calls:
 17944 ;;		Nothing
 17945 ;; This function is called by:
 17946 ;;		_Port_SetPinType
 17947 ;;		_Port_SetPin
 17948 ;;		_SPI_Init
 17949 ;;		_SPI_MinSpeed
 17950 ;;		_SPI_MaxSpeed
 17951 ;;		_Word_SetBit
 17952 ;;		_I2C_Init
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           	psect	text99
 17957  0139AC                     __ptext99:
 17958                           	opt stack 0
 17959  0139AC                     _Byte_SetBit:
 17960                           	opt stack 21
 17961                           
 17962                           ;Types.c: 34: pValue &= 1;
 17963                           
 17964                           ;incstack = 0
 17965  0139AC  0E01               	movlw	1
 17966  0139AE  0100               	movlb	0	; () banked
 17967  0139B0  17B4               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17968                           
 17969                           ; BSR set to: 0
 17970                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17971  0139B2  C0B3  F0B5         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17972  0139B6  0E01               	movlw	1
 17973  0139B8  0100               	movlb	0	; () banked
 17974  0139BA  6FB6               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17975  0139BC  0100               	movlb	0	; () banked
 17976  0139BE  2BB5               	incf	??_Byte_SetBit& (0+255),f,b
 17977  0139C0  D003               	goto	u6144
 17978  0139C2                     u6145:
 17979  0139C2  0100               	movlb	0	; () banked
 17980  0139C4  90D8               	bcf	status,0,c
 17981  0139C6  37B6               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17982  0139C8                     u6144:
 17983  0139C8  0100               	movlb	0	; () banked
 17984  0139CA  2FB5               	decfsz	??_Byte_SetBit& (0+255),f,b
 17985  0139CC  D7FA               	goto	u6145
 17986  0139CE  0100               	movlb	0	; () banked
 17987  0139D0  51B6               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17988  0139D2  0AFF               	xorlw	255
 17989  0139D4  0100               	movlb	0	; () banked
 17990  0139D6  6FB7               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17991  0139D8  C0B1  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17992  0139DC  C0B2  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17993  0139E0  0100               	movlb	0	; () banked
 17994  0139E2  51B7               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17995  0139E4  16DF               	andwf	indf2,f,c
 17996                           
 17997                           ; BSR set to: 0
 17998                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17999  0139E6  C0B3  F0B5         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18000  0139EA  C0B4  F0B6         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 18001  0139EE  0100               	movlb	0	; () banked
 18002  0139F0  2BB5               	incf	??_Byte_SetBit& (0+255),f,b
 18003  0139F2  D003               	goto	u6154
 18004  0139F4                     u6155:
 18005  0139F4  0100               	movlb	0	; () banked
 18006  0139F6  90D8               	bcf	status,0,c
 18007  0139F8  37B6               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18008  0139FA                     u6154:
 18009  0139FA  0100               	movlb	0	; () banked
 18010  0139FC  2FB5               	decfsz	??_Byte_SetBit& (0+255),f,b
 18011  0139FE  D7FA               	goto	u6155
 18012  013A00  C0B1  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18013  013A04  C0B2  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18014  013A08  0100               	movlb	0	; () banked
 18015  013A0A  51B6               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18016  013A0C  12DF               	iorwf	indf2,f,c
 18017                           
 18018                           ; BSR set to: 0
 18019  013A0E  0012               	return		;funcret
 18020  013A10                     __end_of_Byte_SetBit:
 18021                           	opt stack 0
 18022                           tosu	equ	0xFFF
 18023                           tosh	equ	0xFFE
 18024                           tosl	equ	0xFFD
 18025                           pclath	equ	0xFFA
 18026                           tblptru	equ	0xFF8
 18027                           tblptrh	equ	0xFF7
 18028                           tblptrl	equ	0xFF6
 18029                           tablat	equ	0xFF5
 18030                           prodh	equ	0xFF4
 18031                           prodl	equ	0xFF3
 18032                           intcon	equ	0xFF2
 18033                           indf0	equ	0xFEF
 18034                           postinc0	equ	0xFEE
 18035                           fsr0h	equ	0xFEA
 18036                           fsr0l	equ	0xFE9
 18037                           wreg	equ	0xFE8
 18038                           indf1	equ	0xFE7
 18039                           postdec1	equ	0xFE5
 18040                           plusw1	equ	0xFE3
 18041                           fsr1h	equ	0xFE2
 18042                           fsr1l	equ	0xFE1
 18043                           indf2	equ	0xFDF
 18044                           postinc2	equ	0xFDE
 18045                           postdec2	equ	0xFDD
 18046                           plusw2	equ	0xFDB
 18047                           fsr2h	equ	0xFDA
 18048                           fsr2l	equ	0xFD9
 18049                           status	equ	0xFD8
 18050                           
 18051 ;; *************** function _Port_SetQuadType *****************
 18052 ;; Defined at:
 18053 ;;		line 399 in file "Library/Port.c"
 18054 ;; Parameters:    Size  Location     Type
 18055 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 18056 ;;		 -> PortB(10), PortD(10), 
 18057 ;;  pQuad           1   56[BANK0 ] enum E6776
 18058 ;;  pType           1   57[BANK0 ] enum E6795
 18059 ;; Auto vars:     Size  Location     Type
 18060 ;;  Output          1   58[BANK0 ] enum E6475
 18061 ;; Return value:  Size  Location     Type
 18062 ;;                  1    wreg      enum E6475
 18063 ;; Registers used:
 18064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18065 ;; Tracked objects:
 18066 ;;		On entry : 0/0
 18067 ;;		On exit  : 0/0
 18068 ;;		Unchanged: 0/0
 18069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18073 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18074 ;;Total ram usage:        5 bytes
 18075 ;; Hardware stack levels used:    1
 18076 ;; Hardware stack levels required when called:   13
 18077 ;; This function calls:
 18078 ;;		_Byte_SetQuad
 18079 ;;		_Port_CheckQuadType
 18080 ;;		_Word_SetPair
 18081 ;; This function is called by:
 18082 ;;		_MXK_InitDIPSwitch
 18083 ;;		_MXK_Init
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           	psect	text100
 18088  010A5C                     __ptext100:
 18089                           	opt stack 0
 18090  010A5C                     _Port_SetQuadType:
 18091                           	opt stack 16
 18092                           
 18093                           ;Port.c: 401: ePinError Output = ePinErrorState;
 18094                           
 18095                           ; BSR set to: 0
 18096                           ;incstack = 0
 18097  010A5C  0E05               	movlw	5
 18098  010A5E  0100               	movlb	0	; () banked
 18099  010A60  6FEB               	movwf	Port_SetQuadType@Output& (0+255),b
 18100                           
 18101                           ;Port.c: 403: switch (pType)
 18102  010A62  D0C7               	goto	l10153
 18103  010A64                     l10137:
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;Port.c: 407: {
 18107                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18108  010A64  0100               	movlb	0	; () banked
 18109  010A66  EE20 F002          	lfsr	2,2
 18110  010A6A  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18111  010A6C  26D9               	addwf	fsr2l,f,c
 18112  010A6E  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18113  010A70  22DA               	addwfc	fsr2h,f,c
 18114  010A72  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18115  010A76  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18116  010A7A  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18117  010A7E  0E0F               	movlw	15
 18118  010A80  0100               	movlb	0	; () banked
 18119  010A82  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18120  010A84  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18121                           
 18122                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18123  010A88  0100               	movlb	0	; () banked
 18124  010A8A  EE20 F004          	lfsr	2,4
 18125  010A8E  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18126  010A90  26D9               	addwf	fsr2l,f,c
 18127  010A92  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18128  010A94  22DA               	addwfc	fsr2h,f,c
 18129  010A96  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18130  010A9A  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18131  010A9E  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18132  010AA2  0E00               	movlw	0
 18133  010AA4  0100               	movlb	0	; () banked
 18134  010AA6  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18135  010AA8  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18136                           
 18137                           ;Port.c: 413: }
 18138                           ;Port.c: 415: break;
 18139  010AAC  D0B0               	goto	l10155
 18140  010AAE                     l10139:
 18141                           
 18142                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18143  010AAE  C0E7  F0E0         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18144  010AB2  C0E8  F0E1         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18145  010AB6  C0E9  F0E2         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18146  010ABA  0E03               	movlw	3
 18147  010ABC  0100               	movlb	0	; () banked
 18148  010ABE  6FE3               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18149  010AC0  EC6A  F09D         	call	_Port_CheckQuadType	;wreg free
 18150  010AC4  0100               	movlb	0	; () banked
 18151  010AC6  6FEB               	movwf	Port_SetQuadType@Output& (0+255),b
 18152  010AC8  0100               	movlb	0	; () banked
 18153  010ACA  51EB               	movf	Port_SetQuadType@Output& (0+255),w,b
 18154  010ACC  A4D8               	btfss	status,2,c
 18155  010ACE  0012               	return	
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;Port.c: 418: {
 18159                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18160  010AD0  0100               	movlb	0	; () banked
 18161  010AD2  EE20 F002          	lfsr	2,2
 18162  010AD6  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18163  010AD8  26D9               	addwf	fsr2l,f,c
 18164  010ADA  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18165  010ADC  22DA               	addwfc	fsr2h,f,c
 18166  010ADE  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18167  010AE2  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18168  010AE6  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18169  010AEA  0E00               	movlw	0
 18170  010AEC  0100               	movlb	0	; () banked
 18171  010AEE  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18172  010AF0  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18173                           
 18174                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18175  010AF4  0100               	movlb	0	; () banked
 18176  010AF6  EE20 F004          	lfsr	2,4
 18177  010AFA  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18178  010AFC  26D9               	addwf	fsr2l,f,c
 18179  010AFE  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18180  010B00  22DA               	addwfc	fsr2h,f,c
 18181  010B02  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18182  010B06  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18183  010B0A  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18184  010B0E  0E00               	movlw	0
 18185  010B10  0100               	movlb	0	; () banked
 18186  010B12  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18187  010B14  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18188                           
 18189                           ;Port.c: 424: }
 18190  010B18  D07A               	goto	l10155
 18191  010B1A                     l10143:
 18192                           
 18193                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18194  010B1A  C0E7  F0E0         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18195  010B1E  C0E8  F0E1         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18196  010B22  C0E9  F0E2         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18197  010B26  0E03               	movlw	3
 18198  010B28  0100               	movlb	0	; () banked
 18199  010B2A  6FE3               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18200  010B2C  EC6A  F09D         	call	_Port_CheckQuadType	;wreg free
 18201  010B30  0100               	movlb	0	; () banked
 18202  010B32  6FEB               	movwf	Port_SetQuadType@Output& (0+255),b
 18203  010B34  0100               	movlb	0	; () banked
 18204  010B36  51EB               	movf	Port_SetQuadType@Output& (0+255),w,b
 18205  010B38  A4D8               	btfss	status,2,c
 18206  010B3A  0012               	return	
 18207                           
 18208                           ; BSR set to: 0
 18209                           ;Port.c: 429: {
 18210                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18211  010B3C  0100               	movlb	0	; () banked
 18212  010B3E  EE20 F002          	lfsr	2,2
 18213  010B42  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18214  010B44  26D9               	addwf	fsr2l,f,c
 18215  010B46  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18216  010B48  22DA               	addwfc	fsr2h,f,c
 18217  010B4A  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18218  010B4E  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18219  010B52  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18220  010B56  0E0F               	movlw	15
 18221  010B58  0100               	movlb	0	; () banked
 18222  010B5A  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18223  010B5C  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18224                           
 18225                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 18226  010B60  0100               	movlb	0	; () banked
 18227  010B62  EE20 F004          	lfsr	2,4
 18228  010B66  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18229  010B68  26D9               	addwf	fsr2l,f,c
 18230  010B6A  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18231  010B6C  22DA               	addwfc	fsr2h,f,c
 18232  010B6E  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18233  010B72  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18234  010B76  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18235  010B7A  0E0F               	movlw	15
 18236  010B7C  0100               	movlb	0	; () banked
 18237  010B7E  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18238  010B80  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18239                           
 18240                           ;Port.c: 435: }
 18241  010B84  D044               	goto	l10155
 18242  010B86                     l10147:
 18243                           
 18244                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18245  010B86  C0E7  F0E0         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18246  010B8A  C0E8  F0E1         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18247  010B8E  C0E9  F0E2         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18248  010B92  0E03               	movlw	3
 18249  010B94  0100               	movlb	0	; () banked
 18250  010B96  6FE3               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18251  010B98  EC6A  F09D         	call	_Port_CheckQuadType	;wreg free
 18252  010B9C  0100               	movlb	0	; () banked
 18253  010B9E  6FEB               	movwf	Port_SetQuadType@Output& (0+255),b
 18254  010BA0  0100               	movlb	0	; () banked
 18255  010BA2  51EB               	movf	Port_SetQuadType@Output& (0+255),w,b
 18256  010BA4  A4D8               	btfss	status,2,c
 18257  010BA6  0012               	return	
 18258                           
 18259                           ; BSR set to: 0
 18260                           ;Port.c: 440: {
 18261                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18262  010BA8  0100               	movlb	0	; () banked
 18263  010BAA  EE20 F002          	lfsr	2,2
 18264  010BAE  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18265  010BB0  26D9               	addwf	fsr2l,f,c
 18266  010BB2  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18267  010BB4  22DA               	addwfc	fsr2h,f,c
 18268  010BB6  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18269  010BBA  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18270  010BBE  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18271  010BC2  0E00               	movlw	0
 18272  010BC4  0100               	movlb	0	; () banked
 18273  010BC6  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18274  010BC8  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18275                           
 18276                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18277  010BCC  0100               	movlb	0	; () banked
 18278  010BCE  EE20 F004          	lfsr	2,4
 18279  010BD2  51E7               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18280  010BD4  26D9               	addwf	fsr2l,f,c
 18281  010BD6  51E8               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18282  010BD8  22DA               	addwfc	fsr2h,f,c
 18283  010BDA  CFDE F0BC          	movff	postinc2,Byte_SetQuad@pInput
 18284  010BDE  CFDD F0BD          	movff	postdec2,Byte_SetQuad@pInput+1
 18285  010BE2  C0E9  F0BE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18286  010BE6  0E00               	movlw	0
 18287  010BE8  0100               	movlb	0	; () banked
 18288  010BEA  6FBF               	movwf	Byte_SetQuad@pValue& (0+255),b
 18289  010BEC  EC29  F0A2         	call	_Byte_SetQuad	;wreg free
 18290                           
 18291                           ;Port.c: 446: }
 18292  010BF0  D00E               	goto	l10155
 18293  010BF2                     l10153:
 18294  010BF2  0100               	movlb	0	; () banked
 18295  010BF4  51EA               	movf	Port_SetQuadType@pType& (0+255),w,b
 18296                           
 18297                           ; Switch size 1, requested type "space"
 18298                           ; Number of cases is 4, Range of values is 0 to 3
 18299                           ; switch strategies available:
 18300                           ; Name         Instructions Cycles
 18301                           ; simple_byte           13     7 (average)
 18302                           ;	Chosen strategy is simple_byte
 18303  010BF6  0A00               	xorlw	0	; case 0
 18304  010BF8  B4D8               	btfsc	status,2,c
 18305  010BFA  D734               	goto	l10137
 18306  010BFC  0A01               	xorlw	1	; case 1
 18307  010BFE  B4D8               	btfsc	status,2,c
 18308  010C00  D756               	goto	l10139
 18309  010C02  0A03               	xorlw	3	; case 2
 18310  010C04  B4D8               	btfsc	status,2,c
 18311  010C06  D789               	goto	l10143
 18312  010C08  0A01               	xorlw	1	; case 3
 18313  010C0A  B4D8               	btfsc	status,2,c
 18314  010C0C  D7BC               	goto	l10147
 18315  010C0E                     l10155:
 18316                           
 18317                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 18318  010C0E  0E08               	movlw	8
 18319  010C10  0100               	movlb	0	; () banked
 18320  010C12  25E7               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18321  010C14  0100               	movlb	0	; () banked
 18322  010C16  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
 18323  010C18  0E00               	movlw	0
 18324  010C1A  0100               	movlb	0	; () banked
 18325  010C1C  21E8               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18326  010C1E  0100               	movlb	0	; () banked
 18327  010C20  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18328  010C22  0100               	movlb	0	; () banked
 18329  010C24  51E9               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18330  010C26  0D04               	mullw	4
 18331  010C28  CFF3 F0C2          	movff	prodl,Word_SetPair@pPair
 18332  010C2C  C0EA  F0C3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18333  010C30  EC45  F09F         	call	_Word_SetPair	;wreg free
 18334                           
 18335                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 18336  010C34  0E08               	movlw	8
 18337  010C36  0100               	movlb	0	; () banked
 18338  010C38  25E7               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18339  010C3A  0100               	movlb	0	; () banked
 18340  010C3C  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
 18341  010C3E  0E00               	movlw	0
 18342  010C40  0100               	movlb	0	; () banked
 18343  010C42  21E8               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18344  010C44  0100               	movlb	0	; () banked
 18345  010C46  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18346  010C48  0100               	movlb	0	; () banked
 18347  010C4A  51E9               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18348  010C4C  0D04               	mullw	4
 18349  010C4E  28F3               	incf	prodl,w,c
 18350  010C50  0100               	movlb	0	; () banked
 18351  010C52  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
 18352  010C54  C0EA  F0C3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18353  010C58  EC45  F09F         	call	_Word_SetPair	;wreg free
 18354                           
 18355                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 18356  010C5C  0E08               	movlw	8
 18357  010C5E  0100               	movlb	0	; () banked
 18358  010C60  25E7               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18359  010C62  0100               	movlb	0	; () banked
 18360  010C64  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
 18361  010C66  0E00               	movlw	0
 18362  010C68  0100               	movlb	0	; () banked
 18363  010C6A  21E8               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18364  010C6C  0100               	movlb	0	; () banked
 18365  010C6E  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18366  010C70  0100               	movlb	0	; () banked
 18367  010C72  51E9               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18368  010C74  0D04               	mullw	4
 18369  010C76  50F3               	movf	prodl,w,c
 18370  010C78  0F02               	addlw	2
 18371  010C7A  0100               	movlb	0	; () banked
 18372  010C7C  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
 18373  010C7E  C0EA  F0C3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18374  010C82  EC45  F09F         	call	_Word_SetPair	;wreg free
 18375                           
 18376                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 18377  010C86  0E08               	movlw	8
 18378  010C88  0100               	movlb	0	; () banked
 18379  010C8A  25E7               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18380  010C8C  0100               	movlb	0	; () banked
 18381  010C8E  6FC0               	movwf	Word_SetPair@pInput& (0+255),b
 18382  010C90  0E00               	movlw	0
 18383  010C92  0100               	movlb	0	; () banked
 18384  010C94  21E8               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18385  010C96  0100               	movlb	0	; () banked
 18386  010C98  6FC1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18387  010C9A  0100               	movlb	0	; () banked
 18388  010C9C  51E9               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18389  010C9E  0D04               	mullw	4
 18390  010CA0  50F3               	movf	prodl,w,c
 18391  010CA2  0F03               	addlw	3
 18392  010CA4  0100               	movlb	0	; () banked
 18393  010CA6  6FC2               	movwf	Word_SetPair@pPair& (0+255),b
 18394  010CA8  C0EA  F0C3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18395  010CAC  EC45  F09F         	call	_Word_SetPair	;wreg free
 18396  010CB0  0012               	return	
 18397  010CB2                     __end_of_Port_SetQuadType:
 18398                           	opt stack 0
 18399                           tosu	equ	0xFFF
 18400                           tosh	equ	0xFFE
 18401                           tosl	equ	0xFFD
 18402                           pclath	equ	0xFFA
 18403                           tblptru	equ	0xFF8
 18404                           tblptrh	equ	0xFF7
 18405                           tblptrl	equ	0xFF6
 18406                           tablat	equ	0xFF5
 18407                           prodh	equ	0xFF4
 18408                           prodl	equ	0xFF3
 18409                           intcon	equ	0xFF2
 18410                           indf0	equ	0xFEF
 18411                           postinc0	equ	0xFEE
 18412                           fsr0h	equ	0xFEA
 18413                           fsr0l	equ	0xFE9
 18414                           wreg	equ	0xFE8
 18415                           indf1	equ	0xFE7
 18416                           postdec1	equ	0xFE5
 18417                           plusw1	equ	0xFE3
 18418                           fsr1h	equ	0xFE2
 18419                           fsr1l	equ	0xFE1
 18420                           indf2	equ	0xFDF
 18421                           postinc2	equ	0xFDE
 18422                           postdec2	equ	0xFDD
 18423                           plusw2	equ	0xFDB
 18424                           fsr2h	equ	0xFDA
 18425                           fsr2l	equ	0xFD9
 18426                           status	equ	0xFD8
 18427                           
 18428 ;; *************** function _Word_SetPair *****************
 18429 ;; Defined at:
 18430 ;;		line 149 in file "Library/Types.c"
 18431 ;; Parameters:    Size  Location     Type
 18432 ;;  pInput          2   15[BANK0 ] PTR struct Word
 18433 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18434 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18435 ;;  pPair           1   17[BANK0 ] unsigned char 
 18436 ;;  pValue          1   18[BANK0 ] unsigned char 
 18437 ;; Auto vars:     Size  Location     Type
 18438 ;;		None
 18439 ;; Return value:  Size  Location     Type
 18440 ;;                  1    wreg      void 
 18441 ;; Registers used:
 18442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18443 ;; Tracked objects:
 18444 ;;		On entry : 0/0
 18445 ;;		On exit  : 0/0
 18446 ;;		Unchanged: 0/0
 18447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18451 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;Total ram usage:        4 bytes
 18453 ;; Hardware stack levels used:    1
 18454 ;; Hardware stack levels required when called:    9
 18455 ;; This function calls:
 18456 ;;		_Byte_SetPair
 18457 ;; This function is called by:
 18458 ;;		_Port_SetPinType
 18459 ;;		_Port_SetQuadType
 18460 ;;		_Port_SetType
 18461 ;;		_Port_SetPairType
 18462 ;;		_PortProperty_Init
 18463 ;; This function uses a non-reentrant model
 18464 ;;
 18465                           
 18466                           	psect	text101
 18467  013E8A                     __ptext101:
 18468                           	opt stack 0
 18469  013E8A                     _Word_SetPair:
 18470                           	opt stack 19
 18471                           
 18472                           ;Types.c: 151: if (pPair >= 4)
 18473                           
 18474                           ;incstack = 0
 18475  013E8A  0E03               	movlw	3
 18476  013E8C  0100               	movlb	0	; () banked
 18477  013E8E  65C2               	cpfsgt	Word_SetPair@pPair& (0+255),b
 18478  013E90  D014               	goto	l9913
 18479                           
 18480                           ; BSR set to: 0
 18481                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 18482  013E92  0E01               	movlw	1
 18483  013E94  0100               	movlb	0	; () banked
 18484  013E96  25C0               	addwf	Word_SetPair@pInput& (0+255),w,b
 18485  013E98  0100               	movlb	0	; () banked
 18486  013E9A  6FBC               	movwf	Byte_SetPair@pInput& (0+255),b
 18487  013E9C  0E00               	movlw	0
 18488  013E9E  0100               	movlb	0	; () banked
 18489  013EA0  21C1               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 18490  013EA2  0100               	movlb	0	; () banked
 18491  013EA4  6FBD               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 18492  013EA6  0100               	movlb	0	; () banked
 18493  013EA8  51C2               	movf	Word_SetPair@pPair& (0+255),w,b
 18494  013EAA  0FFC               	addlw	252
 18495  013EAC  0100               	movlb	0	; () banked
 18496  013EAE  6FBE               	movwf	Byte_SetPair@pPair& (0+255),b
 18497  013EB0  C0C3  F0BF         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18498  013EB4  EC18  F0A2         	call	_Byte_SetPair	;wreg free
 18499  013EB8  0012               	return	
 18500  013EBA                     l9913:
 18501                           
 18502                           ;Types.c: 153: else
 18503                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 18504  013EBA  C0C0  F0BC         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 18505  013EBE  C0C1  F0BD         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 18506  013EC2  C0C2  F0BE         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 18507  013EC6  C0C3  F0BF         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18508  013ECA  EC18  F0A2         	call	_Byte_SetPair	;wreg free
 18509  013ECE  0012               	return	
 18510  013ED0                     __end_of_Word_SetPair:
 18511                           	opt stack 0
 18512                           tosu	equ	0xFFF
 18513                           tosh	equ	0xFFE
 18514                           tosl	equ	0xFFD
 18515                           pclath	equ	0xFFA
 18516                           tblptru	equ	0xFF8
 18517                           tblptrh	equ	0xFF7
 18518                           tblptrl	equ	0xFF6
 18519                           tablat	equ	0xFF5
 18520                           prodh	equ	0xFF4
 18521                           prodl	equ	0xFF3
 18522                           intcon	equ	0xFF2
 18523                           indf0	equ	0xFEF
 18524                           postinc0	equ	0xFEE
 18525                           fsr0h	equ	0xFEA
 18526                           fsr0l	equ	0xFE9
 18527                           wreg	equ	0xFE8
 18528                           indf1	equ	0xFE7
 18529                           postdec1	equ	0xFE5
 18530                           plusw1	equ	0xFE3
 18531                           fsr1h	equ	0xFE2
 18532                           fsr1l	equ	0xFE1
 18533                           indf2	equ	0xFDF
 18534                           postinc2	equ	0xFDE
 18535                           postdec2	equ	0xFDD
 18536                           plusw2	equ	0xFDB
 18537                           fsr2h	equ	0xFDA
 18538                           fsr2l	equ	0xFD9
 18539                           status	equ	0xFD8
 18540                           
 18541 ;; *************** function _Byte_SetPair *****************
 18542 ;; Defined at:
 18543 ;;		line 83 in file "Library/Types.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18546 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18547 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18548 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 18549 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 18550 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 18551 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 18552 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 18553 ;;		 -> NULL(0), 
 18554 ;;  pPair           1   13[BANK0 ] unsigned char 
 18555 ;;  pValue          1   14[BANK0 ] unsigned char 
 18556 ;; Auto vars:     Size  Location     Type
 18557 ;;		None
 18558 ;; Return value:  Size  Location     Type
 18559 ;;                  1    wreg      void 
 18560 ;; Registers used:
 18561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18562 ;; Tracked objects:
 18563 ;;		On entry : 0/0
 18564 ;;		On exit  : 0/0
 18565 ;;		Unchanged: 0/0
 18566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18567 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18570 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18571 ;;Total ram usage:        4 bytes
 18572 ;; Hardware stack levels used:    1
 18573 ;; Hardware stack levels required when called:    8
 18574 ;; This function calls:
 18575 ;;		_Byte_SetZone
 18576 ;; This function is called by:
 18577 ;;		_Word_SetPair
 18578 ;;		_Port_SetPairType
 18579 ;;		_Port_SetPair
 18580 ;; This function uses a non-reentrant model
 18581 ;;
 18582                           
 18583                           	psect	text102
 18584  014430                     __ptext102:
 18585                           	opt stack 0
 18586  014430                     _Byte_SetPair:
 18587                           	opt stack 19
 18588                           
 18589                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 18590                           
 18591                           ;incstack = 0
 18592  014430  C0BC  F0B1         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 18593  014434  C0BD  F0B2         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 18594  014438  0E04               	movlw	4
 18595  01443A  0100               	movlb	0	; () banked
 18596  01443C  6FB3               	movwf	Byte_SetZone@pMax& (0+255),b
 18597  01443E  C0BE  F0B4         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 18598  014442  0E02               	movlw	2
 18599  014444  0100               	movlb	0	; () banked
 18600  014446  6FB5               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18601  014448  C0BF  F0B6         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 18602  01444C  EC12  F095         	call	_Byte_SetZone	;wreg free
 18603  014450  0012               	return		;funcret
 18604  014452                     __end_of_Byte_SetPair:
 18605                           	opt stack 0
 18606                           tosu	equ	0xFFF
 18607                           tosh	equ	0xFFE
 18608                           tosl	equ	0xFFD
 18609                           pclath	equ	0xFFA
 18610                           tblptru	equ	0xFF8
 18611                           tblptrh	equ	0xFF7
 18612                           tblptrl	equ	0xFF6
 18613                           tablat	equ	0xFF5
 18614                           prodh	equ	0xFF4
 18615                           prodl	equ	0xFF3
 18616                           intcon	equ	0xFF2
 18617                           indf0	equ	0xFEF
 18618                           postinc0	equ	0xFEE
 18619                           fsr0h	equ	0xFEA
 18620                           fsr0l	equ	0xFE9
 18621                           wreg	equ	0xFE8
 18622                           indf1	equ	0xFE7
 18623                           postdec1	equ	0xFE5
 18624                           plusw1	equ	0xFE3
 18625                           fsr1h	equ	0xFE2
 18626                           fsr1l	equ	0xFE1
 18627                           indf2	equ	0xFDF
 18628                           postinc2	equ	0xFDE
 18629                           postdec2	equ	0xFDD
 18630                           plusw2	equ	0xFDB
 18631                           fsr2h	equ	0xFDA
 18632                           fsr2l	equ	0xFD9
 18633                           status	equ	0xFD8
 18634                           
 18635 ;; *************** function _Port_CheckQuadType *****************
 18636 ;; Defined at:
 18637 ;;		line 126 in file "Library/Port.c"
 18638 ;; Parameters:    Size  Location     Type
 18639 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 18640 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18641 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18642 ;;  pQuad           1   49[BANK0 ] enum E6776
 18643 ;;  pDrive          1   50[BANK0 ] enum E6469
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;  Output          1   53[BANK0 ] enum E6475
 18646 ;;  Pair2           1   52[BANK0 ] enum E6760
 18647 ;;  Pair1           1   51[BANK0 ] enum E6760
 18648 ;; Return value:  Size  Location     Type
 18649 ;;                  1    wreg      enum E6475
 18650 ;; Registers used:
 18651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18652 ;; Tracked objects:
 18653 ;;		On entry : 0/0
 18654 ;;		On exit  : 0/0
 18655 ;;		Unchanged: 0/0
 18656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18660 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18661 ;;Total ram usage:        7 bytes
 18662 ;; Hardware stack levels used:    1
 18663 ;; Hardware stack levels required when called:   12
 18664 ;; This function calls:
 18665 ;;		_Port_CheckPairType
 18666 ;; This function is called by:
 18667 ;;		_Port_CheckPortType
 18668 ;;		_Port_SetQuadType
 18669 ;; This function uses a non-reentrant model
 18670 ;;
 18671                           
 18672                           	psect	text103
 18673  013AD4                     __ptext103:
 18674                           	opt stack 0
 18675  013AD4                     _Port_CheckQuadType:
 18676                           	opt stack 15
 18677                           
 18678                           ;Port.c: 128: ePinError Output = ePinErrorState;
 18679                           
 18680                           ;incstack = 0
 18681  013AD4  0E05               	movlw	5
 18682  013AD6  0100               	movlb	0	; () banked
 18683  013AD8  6FE6               	movwf	Port_CheckQuadType@Output& (0+255),b
 18684                           
 18685                           ; BSR set to: 0
 18686                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 18687  013ADA  0100               	movlb	0	; () banked
 18688  013ADC  51E2               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18689  013ADE  0D02               	mullw	2
 18690  013AE0  CFF3 F0E4          	movff	prodl,Port_CheckQuadType@Pair1
 18691                           
 18692                           ; BSR set to: 0
 18693                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 18694  013AE4  0100               	movlb	0	; () banked
 18695  013AE6  51E2               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18696  013AE8  0D02               	mullw	2
 18697  013AEA  28F3               	incf	prodl,w,c
 18698  013AEC  0100               	movlb	0	; () banked
 18699  013AEE  6FE5               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 18700                           
 18701                           ; BSR set to: 0
 18702                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 18703  013AF0  C0E0  F0D7         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18704  013AF4  C0E1  F0D8         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18705  013AF8  C0E4  F0D9         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 18706  013AFC  C0E3  F0DA         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18707  013B00  EC6F  F09C         	call	_Port_CheckPairType	;wreg free
 18708  013B04  0100               	movlb	0	; () banked
 18709  013B06  6FE6               	movwf	Port_CheckQuadType@Output& (0+255),b
 18710  013B08  0100               	movlb	0	; () banked
 18711  013B0A  51E6               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18712  013B0C  A4D8               	btfss	status,2,c
 18713  013B0E  D00C               	goto	l9905
 18714                           
 18715                           ; BSR set to: 0
 18716                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18717  013B10  C0E0  F0D7         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18718  013B14  C0E1  F0D8         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18719  013B18  C0E5  F0D9         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18720  013B1C  C0E3  F0DA         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18721  013B20  EC6F  F09C         	call	_Port_CheckPairType	;wreg free
 18722  013B24  0100               	movlb	0	; () banked
 18723  013B26  6FE6               	movwf	Port_CheckQuadType@Output& (0+255),b
 18724  013B28                     l9905:
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;Port.c: 136: return Output;
 18728  013B28  0100               	movlb	0	; () banked
 18729  013B2A  51E6               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18730  013B2C  0012               	return	
 18731  013B2E                     __end_of_Port_CheckQuadType:
 18732                           	opt stack 0
 18733                           tosu	equ	0xFFF
 18734                           tosh	equ	0xFFE
 18735                           tosl	equ	0xFFD
 18736                           pclath	equ	0xFFA
 18737                           tblptru	equ	0xFF8
 18738                           tblptrh	equ	0xFF7
 18739                           tblptrl	equ	0xFF6
 18740                           tablat	equ	0xFF5
 18741                           prodh	equ	0xFF4
 18742                           prodl	equ	0xFF3
 18743                           intcon	equ	0xFF2
 18744                           indf0	equ	0xFEF
 18745                           postinc0	equ	0xFEE
 18746                           fsr0h	equ	0xFEA
 18747                           fsr0l	equ	0xFE9
 18748                           wreg	equ	0xFE8
 18749                           indf1	equ	0xFE7
 18750                           postdec1	equ	0xFE5
 18751                           plusw1	equ	0xFE3
 18752                           fsr1h	equ	0xFE2
 18753                           fsr1l	equ	0xFE1
 18754                           indf2	equ	0xFDF
 18755                           postinc2	equ	0xFDE
 18756                           postdec2	equ	0xFDD
 18757                           plusw2	equ	0xFDB
 18758                           fsr2h	equ	0xFDA
 18759                           fsr2l	equ	0xFD9
 18760                           status	equ	0xFD8
 18761                           
 18762 ;; *************** function _Port_CheckPairType *****************
 18763 ;; Defined at:
 18764 ;;		line 112 in file "Library/Port.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18767 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18768 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18769 ;;  pPair           1   40[BANK0 ] enum E6760
 18770 ;;  pDrive          1   41[BANK0 ] enum E6469
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18773 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18774 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18775 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18776 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18777 ;;  Output          1   44[BANK0 ] enum E6475
 18778 ;;  Pin2            1   43[BANK0 ] enum E6750
 18779 ;;  Pin1            1   42[BANK0 ] enum E6750
 18780 ;; Return value:  Size  Location     Type
 18781 ;;                  1    wreg      enum E6475
 18782 ;; Registers used:
 18783 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18784 ;; Tracked objects:
 18785 ;;		On entry : 0/0
 18786 ;;		On exit  : 0/0
 18787 ;;		Unchanged: 0/0
 18788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18790 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18792 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18793 ;;Total ram usage:        9 bytes
 18794 ;; Hardware stack levels used:    1
 18795 ;; Hardware stack levels required when called:   11
 18796 ;; This function calls:
 18797 ;;		_PortProperty_Valid
 18798 ;; This function is called by:
 18799 ;;		_Port_CheckQuadType
 18800 ;;		_Port_SetPairType
 18801 ;; This function uses a non-reentrant model
 18802 ;;
 18803                           
 18804                           	psect	text104
 18805  0138DE                     __ptext104:
 18806                           	opt stack 0
 18807  0138DE                     _Port_CheckPairType:
 18808                           	opt stack 15
 18809                           
 18810                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18811                           
 18812                           ; BSR set to: 0
 18813                           ;incstack = 0
 18814  0138DE  0E05               	movlw	5
 18815  0138E0  0100               	movlb	0	; () banked
 18816  0138E2  6FDD               	movwf	Port_CheckPairType@Output& (0+255),b
 18817                           
 18818                           ; BSR set to: 0
 18819                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18820  0138E4  C0D7  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18821  0138E8  C0D8  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18822  0138EC  CFDE F0DE          	movff	postinc2,Port_CheckPairType@Props
 18823  0138F0  CFDD F0DF          	movff	postdec2,Port_CheckPairType@Props+1
 18824                           
 18825                           ; BSR set to: 0
 18826                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18827  0138F4  0100               	movlb	0	; () banked
 18828  0138F6  51D9               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18829  0138F8  0D02               	mullw	2
 18830  0138FA  CFF3 F0DB          	movff	prodl,Port_CheckPairType@Pin1
 18831                           
 18832                           ; BSR set to: 0
 18833                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18834  0138FE  0100               	movlb	0	; () banked
 18835  013900  51D9               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18836  013902  0D02               	mullw	2
 18837  013904  28F3               	incf	prodl,w,c
 18838  013906  0100               	movlb	0	; () banked
 18839  013908  6FDC               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18843  01390A  C0DE  F0C0         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18844  01390E  C0DF  F0C1         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18845  013912  C0DA  F0C2         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18846  013916  C0DB  F0C3         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18847  01391A  ECF9  F099         	call	_PortProperty_Valid	;wreg free
 18848  01391E  0100               	movlb	0	; () banked
 18849  013920  6FDD               	movwf	Port_CheckPairType@Output& (0+255),b
 18850  013922  0100               	movlb	0	; () banked
 18851  013924  51DD               	movf	Port_CheckPairType@Output& (0+255),w,b
 18852  013926  A4D8               	btfss	status,2,c
 18853  013928  D00C               	goto	l9491
 18854                           
 18855                           ; BSR set to: 0
 18856                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18857  01392A  C0DE  F0C0         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18858  01392E  C0DF  F0C1         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18859  013932  C0DA  F0C2         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18860  013936  C0DC  F0C3         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18861  01393A  ECF9  F099         	call	_PortProperty_Valid	;wreg free
 18862  01393E  0100               	movlb	0	; () banked
 18863  013940  6FDD               	movwf	Port_CheckPairType@Output& (0+255),b
 18864  013942                     l9491:
 18865                           
 18866                           ; BSR set to: 0
 18867                           ;Port.c: 124: return Output;
 18868  013942  0100               	movlb	0	; () banked
 18869  013944  51DD               	movf	Port_CheckPairType@Output& (0+255),w,b
 18870  013946  0012               	return	
 18871  013948                     __end_of_Port_CheckPairType:
 18872                           	opt stack 0
 18873                           tosu	equ	0xFFF
 18874                           tosh	equ	0xFFE
 18875                           tosl	equ	0xFFD
 18876                           pclath	equ	0xFFA
 18877                           tblptru	equ	0xFF8
 18878                           tblptrh	equ	0xFF7
 18879                           tblptrl	equ	0xFF6
 18880                           tablat	equ	0xFF5
 18881                           prodh	equ	0xFF4
 18882                           prodl	equ	0xFF3
 18883                           intcon	equ	0xFF2
 18884                           indf0	equ	0xFEF
 18885                           postinc0	equ	0xFEE
 18886                           fsr0h	equ	0xFEA
 18887                           fsr0l	equ	0xFE9
 18888                           wreg	equ	0xFE8
 18889                           indf1	equ	0xFE7
 18890                           postdec1	equ	0xFE5
 18891                           plusw1	equ	0xFE3
 18892                           fsr1h	equ	0xFE2
 18893                           fsr1l	equ	0xFE1
 18894                           indf2	equ	0xFDF
 18895                           postinc2	equ	0xFDE
 18896                           postdec2	equ	0xFDD
 18897                           plusw2	equ	0xFDB
 18898                           fsr2h	equ	0xFDA
 18899                           fsr2l	equ	0xFD9
 18900                           status	equ	0xFD8
 18901                           
 18902 ;; *************** function _PortProperty_Valid *****************
 18903 ;; Defined at:
 18904 ;;		line 220 in file "Library/Types.c"
 18905 ;; Parameters:    Size  Location     Type
 18906 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18907 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18908 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18909 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18910 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18911 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18912 ;;  pPin            1   18[BANK0 ] unsigned char 
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18915 ;;  Pair            1   37[BANK0 ] enum E6469
 18916 ;; Return value:  Size  Location     Type
 18917 ;;                  1    wreg      enum E6475
 18918 ;; Registers used:
 18919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18920 ;; Tracked objects:
 18921 ;;		On entry : 0/0
 18922 ;;		On exit  : 0/0
 18923 ;;		Unchanged: 0/0
 18924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18925 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18929 ;;Total ram usage:       23 bytes
 18930 ;; Hardware stack levels used:    1
 18931 ;; Hardware stack levels required when called:   10
 18932 ;; This function calls:
 18933 ;;		_Word_GetPair
 18934 ;; This function is called by:
 18935 ;;		_Port_CheckPairType
 18936 ;;		_Port_SetPinType
 18937 ;; This function uses a non-reentrant model
 18938 ;;
 18939                           
 18940                           	psect	text105
 18941  0133F2                     __ptext105:
 18942                           	opt stack 0
 18943  0133F2                     _PortProperty_Valid:
 18944                           	opt stack 18
 18945                           
 18946                           ;Types.c: 222: ePinDrive Pair;
 18947                           ;Types.c: 223: const ePinError Errors[4][4] =
 18948                           ;Types.c: 224: {
 18949                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18950                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18951                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18952                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18953                           ;Types.c: 230: };
 18954                           
 18955                           ; BSR set to: 0
 18956                           ;incstack = 0
 18957  0133F2  0EDB               	movlw	low PortProperty_Valid@F6830
 18958  0133F4  6EF6               	movwf	tblptrl,c
 18959  0133F6                     	if	1	;There is more than 1 active tblptr byte
 18960  0133F6  0EFD               	movlw	high PortProperty_Valid@F6830
 18961  0133F8  6EF7               	movwf	tblptrh,c
 18962  0133FA                     	endif
 18963  0133FA                     	if	1	;There are 3 active tblptr bytes
 18964  0133FA  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 18965  0133FC  6EF8               	movwf	tblptru,c
 18966  0133FE                     	endif
 18967  0133FE  EE20  F0C6         	lfsr	2,PortProperty_Valid@Errors
 18968  013402  0E0F               	movlw	15
 18969  013404                     u6110:
 18970  013404  0009               	tblrd		*+
 18971  013406  CFF5 FFDE          	movff	tablat,postinc2
 18972  01340A  06E8               	decf	wreg,f,c
 18973  01340C  E2FB               	bc	u6110
 18974                           
 18975                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18976  01340E  C0C0  F0BD         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18977  013412  C0C1  F0BE         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18978  013416  C0C3  F0BF         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18979  01341A  EC2B  F0A0         	call	_Word_GetPair	;wreg free
 18980  01341E  0100               	movlb	0	; () banked
 18981  013420  6FD6               	movwf	PortProperty_Valid@Pair& (0+255),b
 18982                           
 18983                           ; BSR set to: 0
 18984                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18985  013422  0E04               	movlw	4
 18986  013424  0100               	movlb	0	; () banked
 18987  013426  61C2               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18988  013428  D020               	goto	l9431
 18989                           
 18990                           ; BSR set to: 0
 18991  01342A  0E04               	movlw	4
 18992  01342C  0100               	movlb	0	; () banked
 18993  01342E  61D6               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18994  013430  D01C               	goto	l9431
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18998  013432  0100               	movlb	0	; () banked
 18999  013434  51C2               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 19000  013436  0D04               	mullw	4
 19001  013438  0EC6               	movlw	low PortProperty_Valid@Errors
 19002  01343A  0100               	movlb	0	; () banked
 19003  01343C  6FC4               	movwf	??_PortProperty_Valid& (0+255),b
 19004  01343E  0E00               	movlw	high PortProperty_Valid@Errors
 19005  013440  0100               	movlb	0	; () banked
 19006  013442  6FC5               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 19007  013444  50F3               	movf	prodl,w,c
 19008  013446  0100               	movlb	0	; () banked
 19009  013448  27C4               	addwf	??_PortProperty_Valid& (0+255),f,b
 19010  01344A  50F4               	movf	prodh,w,c
 19011  01344C  0100               	movlb	0	; () banked
 19012  01344E  23C5               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 19013  013450  0100               	movlb	0	; () banked
 19014  013452  51D6               	movf	PortProperty_Valid@Pair& (0+255),w,b
 19015  013454  0D01               	mullw	1
 19016  013456  50F3               	movf	prodl,w,c
 19017  013458  0100               	movlb	0	; () banked
 19018  01345A  25C4               	addwf	??_PortProperty_Valid& (0+255),w,b
 19019  01345C  6ED9               	movwf	fsr2l,c
 19020  01345E  50F4               	movf	prodh,w,c
 19021  013460  0100               	movlb	0	; () banked
 19022  013462  21C5               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 19023  013464  6EDA               	movwf	fsr2h,c
 19024  013466  50DF               	movf	indf2,w,c
 19025                           
 19026                           ; BSR set to: 0
 19027  013468  0012               	return	
 19028  01346A                     l9431:
 19029                           
 19030                           ; BSR set to: 0
 19031                           ;Types.c: 237: return ePinErrorState;
 19032  01346A  0E05               	movlw	5
 19033  01346C  0012               	return	
 19034  01346E                     __end_of_PortProperty_Valid:
 19035                           	opt stack 0
 19036                           tosu	equ	0xFFF
 19037                           tosh	equ	0xFFE
 19038                           tosl	equ	0xFFD
 19039                           pclath	equ	0xFFA
 19040                           tblptru	equ	0xFF8
 19041                           tblptrh	equ	0xFF7
 19042                           tblptrl	equ	0xFF6
 19043                           tablat	equ	0xFF5
 19044                           prodh	equ	0xFF4
 19045                           prodl	equ	0xFF3
 19046                           intcon	equ	0xFF2
 19047                           indf0	equ	0xFEF
 19048                           postinc0	equ	0xFEE
 19049                           fsr0h	equ	0xFEA
 19050                           fsr0l	equ	0xFE9
 19051                           wreg	equ	0xFE8
 19052                           indf1	equ	0xFE7
 19053                           postdec1	equ	0xFE5
 19054                           plusw1	equ	0xFE3
 19055                           fsr1h	equ	0xFE2
 19056                           fsr1l	equ	0xFE1
 19057                           indf2	equ	0xFDF
 19058                           postinc2	equ	0xFDE
 19059                           postdec2	equ	0xFDD
 19060                           plusw2	equ	0xFDB
 19061                           fsr2h	equ	0xFDA
 19062                           fsr2l	equ	0xFD9
 19063                           status	equ	0xFD8
 19064                           
 19065 ;; *************** function _Word_GetPair *****************
 19066 ;; Defined at:
 19067 ;;		line 156 in file "Library/Types.c"
 19068 ;; Parameters:    Size  Location     Type
 19069 ;;  pInput          2   12[BANK0 ] PTR struct Word
 19070 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19071 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19072 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19073 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19074 ;;  pPair           1   14[BANK0 ] unsigned char 
 19075 ;; Auto vars:     Size  Location     Type
 19076 ;;		None
 19077 ;; Return value:  Size  Location     Type
 19078 ;;                  1    wreg      unsigned char 
 19079 ;; Registers used:
 19080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19081 ;; Tracked objects:
 19082 ;;		On entry : 0/0
 19083 ;;		On exit  : 0/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19086 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;Total ram usage:        3 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:    9
 19093 ;; This function calls:
 19094 ;;		_Byte_GetPair
 19095 ;; This function is called by:
 19096 ;;		_Port_Init
 19097 ;;		_Port_SetPin
 19098 ;;		_Port_Set
 19099 ;;		_PortProperty_Valid
 19100 ;;		_Port_SetPair
 19101 ;;		_Port_SetQuad
 19102 ;; This function uses a non-reentrant model
 19103 ;;
 19104                           
 19105                           	psect	text106
 19106  014056                     __ptext106:
 19107                           	opt stack 0
 19108  014056                     _Word_GetPair:
 19109                           	opt stack 18
 19110                           
 19111                           ;Types.c: 158: if (pPair >= 4)
 19112                           
 19113                           ; BSR set to: 0
 19114                           ;incstack = 0
 19115  014056  0E03               	movlw	3
 19116  014058  0100               	movlb	0	; () banked
 19117  01405A  65BF               	cpfsgt	Word_GetPair@pPair& (0+255),b
 19118  01405C  D012               	goto	l9415
 19119                           
 19120                           ; BSR set to: 0
 19121                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 19122  01405E  0E01               	movlw	1
 19123  014060  0100               	movlb	0	; () banked
 19124  014062  25BD               	addwf	Word_GetPair@pInput& (0+255),w,b
 19125  014064  0100               	movlb	0	; () banked
 19126  014066  6FBA               	movwf	Byte_GetPair@pInput& (0+255),b
 19127  014068  0E00               	movlw	0
 19128  01406A  0100               	movlb	0	; () banked
 19129  01406C  21BE               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 19130  01406E  0100               	movlb	0	; () banked
 19131  014070  6FBB               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 19132  014072  0100               	movlb	0	; () banked
 19133  014074  51BF               	movf	Word_GetPair@pPair& (0+255),w,b
 19134  014076  0FFC               	addlw	252
 19135  014078  0100               	movlb	0	; () banked
 19136  01407A  6FBC               	movwf	Byte_GetPair@pPair& (0+255),b
 19137  01407C  EC87  F0A2         	call	_Byte_GetPair	;wreg free
 19138  014080  0012               	return	
 19139  014082                     l9415:
 19140                           
 19141                           ;Types.c: 160: else
 19142                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 19143  014082  C0BD  F0BA         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 19144  014086  C0BE  F0BB         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 19145  01408A  C0BF  F0BC         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 19146  01408E  EC87  F0A2         	call	_Byte_GetPair	;wreg free
 19147  014092  0012               	return	
 19148  014094                     __end_of_Word_GetPair:
 19149                           	opt stack 0
 19150                           tosu	equ	0xFFF
 19151                           tosh	equ	0xFFE
 19152                           tosl	equ	0xFFD
 19153                           pclath	equ	0xFFA
 19154                           tblptru	equ	0xFF8
 19155                           tblptrh	equ	0xFF7
 19156                           tblptrl	equ	0xFF6
 19157                           tablat	equ	0xFF5
 19158                           prodh	equ	0xFF4
 19159                           prodl	equ	0xFF3
 19160                           intcon	equ	0xFF2
 19161                           indf0	equ	0xFEF
 19162                           postinc0	equ	0xFEE
 19163                           fsr0h	equ	0xFEA
 19164                           fsr0l	equ	0xFE9
 19165                           wreg	equ	0xFE8
 19166                           indf1	equ	0xFE7
 19167                           postdec1	equ	0xFE5
 19168                           plusw1	equ	0xFE3
 19169                           fsr1h	equ	0xFE2
 19170                           fsr1l	equ	0xFE1
 19171                           indf2	equ	0xFDF
 19172                           postinc2	equ	0xFDE
 19173                           postdec2	equ	0xFDD
 19174                           plusw2	equ	0xFDB
 19175                           fsr2h	equ	0xFDA
 19176                           fsr2l	equ	0xFD9
 19177                           status	equ	0xFD8
 19178                           
 19179 ;; *************** function _Byte_GetPair *****************
 19180 ;; Defined at:
 19181 ;;		line 87 in file "Library/Types.c"
 19182 ;; Parameters:    Size  Location     Type
 19183 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 19184 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19185 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19186 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19187 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19188 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19189 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19190 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19191 ;;		 -> NULL(0), 
 19192 ;;  pPair           1   11[BANK0 ] unsigned char 
 19193 ;; Auto vars:     Size  Location     Type
 19194 ;;		None
 19195 ;; Return value:  Size  Location     Type
 19196 ;;                  1    wreg      unsigned char 
 19197 ;; Registers used:
 19198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19199 ;; Tracked objects:
 19200 ;;		On entry : 0/0
 19201 ;;		On exit  : 0/0
 19202 ;;		Unchanged: 0/0
 19203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19204 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;Total ram usage:        3 bytes
 19209 ;; Hardware stack levels used:    1
 19210 ;; Hardware stack levels required when called:    8
 19211 ;; This function calls:
 19212 ;;		_Byte_GetZone
 19213 ;; This function is called by:
 19214 ;;		_Word_GetPair
 19215 ;; This function uses a non-reentrant model
 19216 ;;
 19217                           
 19218                           	psect	text107
 19219  01450E                     __ptext107:
 19220                           	opt stack 0
 19221  01450E                     _Byte_GetPair:
 19222                           	opt stack 18
 19223                           
 19224                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 19225                           
 19226                           ;incstack = 0
 19227  01450E  C0BA  F0B1         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 19228  014512  C0BB  F0B2         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 19229  014516  0E04               	movlw	4
 19230  014518  0100               	movlb	0	; () banked
 19231  01451A  6FB3               	movwf	Byte_GetZone@pMax& (0+255),b
 19232  01451C  C0BC  F0B4         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 19233  014520  0E02               	movlw	2
 19234  014522  0100               	movlb	0	; () banked
 19235  014524  6FB5               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 19236  014526  ECB9  F097         	call	_Byte_GetZone	;wreg free
 19237  01452A  0012               	return	
 19238  01452C                     __end_of_Byte_GetPair:
 19239                           	opt stack 0
 19240                           tosu	equ	0xFFF
 19241                           tosh	equ	0xFFE
 19242                           tosl	equ	0xFFD
 19243                           pclath	equ	0xFFA
 19244                           tblptru	equ	0xFF8
 19245                           tblptrh	equ	0xFF7
 19246                           tblptrl	equ	0xFF6
 19247                           tablat	equ	0xFF5
 19248                           prodh	equ	0xFF4
 19249                           prodl	equ	0xFF3
 19250                           intcon	equ	0xFF2
 19251                           indf0	equ	0xFEF
 19252                           postinc0	equ	0xFEE
 19253                           fsr0h	equ	0xFEA
 19254                           fsr0l	equ	0xFE9
 19255                           wreg	equ	0xFE8
 19256                           indf1	equ	0xFE7
 19257                           postdec1	equ	0xFE5
 19258                           plusw1	equ	0xFE3
 19259                           fsr1h	equ	0xFE2
 19260                           fsr1l	equ	0xFE1
 19261                           indf2	equ	0xFDF
 19262                           postinc2	equ	0xFDE
 19263                           postdec2	equ	0xFDD
 19264                           plusw2	equ	0xFDB
 19265                           fsr2h	equ	0xFDA
 19266                           fsr2l	equ	0xFD9
 19267                           status	equ	0xFD8
 19268                           
 19269 ;; *************** function _Byte_GetZone *****************
 19270 ;; Defined at:
 19271 ;;		line 64 in file "Library/Types.c"
 19272 ;; Parameters:    Size  Location     Type
 19273 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19274 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19275 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19276 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19277 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19278 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19279 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19280 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19281 ;;		 -> NULL(0), 
 19282 ;;  pMax            1    2[BANK0 ] unsigned char 
 19283 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19284 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19285 ;; Auto vars:     Size  Location     Type
 19286 ;;  Output          1    8[BANK0 ] unsigned char 
 19287 ;;  Offset          1    7[BANK0 ] unsigned char 
 19288 ;;  MASK            1    6[BANK0 ] unsigned char 
 19289 ;; Return value:  Size  Location     Type
 19290 ;;                  1    wreg      unsigned char 
 19291 ;; Registers used:
 19292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19293 ;; Tracked objects:
 19294 ;;		On entry : 0/0
 19295 ;;		On exit  : 0/0
 19296 ;;		Unchanged: 0/0
 19297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19298 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19299 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19301 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19302 ;;Total ram usage:        9 bytes
 19303 ;; Hardware stack levels used:    1
 19304 ;; Hardware stack levels required when called:    7
 19305 ;; This function calls:
 19306 ;;		Nothing
 19307 ;; This function is called by:
 19308 ;;		_Byte_GetPair
 19309 ;;		_Byte_GetTriple
 19310 ;;		_Byte_GetQuad
 19311 ;; This function uses a non-reentrant model
 19312 ;;
 19313                           
 19314                           	psect	text108
 19315  012F72                     __ptext108:
 19316                           	opt stack 0
 19317  012F72                     _Byte_GetZone:
 19318                           	opt stack 18
 19319                           
 19320                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 19321                           
 19322                           ;incstack = 0
 19323  012F72  C0B1  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 19324  012F76  C0B2  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 19325  012F7A  0E00               	movlw	low (__mediumconst shr (0+16))
 19326  012F7C  6EF8               	movwf	tblptru,c
 19327  012F7E  0E0F               	movlw	(high __ramtop+-1)
 19328  012F80  64F7               	cpfsgt	tblptrh,c
 19329  012F82  D003               	bra	u6077
 19330  012F84  0008               	tblrd		*
 19331  012F86  50F5               	movf	tablat,w,c
 19332  012F88  D005               	bra	u6070
 19333  012F8A                     u6077:
 19334  012F8A  CFF6 FFE9          	movff	tblptrl,fsr0l
 19335  012F8E  CFF7 FFEA          	movff	tblptrh,fsr0h
 19336  012F92  50EF               	movf	indf0,w,c
 19337  012F94                     u6070:
 19338  012F94  0100               	movlb	0	; () banked
 19339  012F96  6FB9               	movwf	Byte_GetZone@Output& (0+255),b
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 19343  012F98  0100               	movlb	0	; () banked
 19344  012F9A  51B5               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19345  012F9C  0D01               	mullw	1
 19346  012F9E  0EEB               	movlw	low _MASKS
 19347  012FA0  24F3               	addwf	prodl,w,c
 19348  012FA2  6EF6               	movwf	tblptrl,c
 19349  012FA4  0EFD               	movlw	high _MASKS
 19350  012FA6  20F4               	addwfc	prodh,w,c
 19351  012FA8  6EF7               	movwf	tblptrh,c
 19352  012FAA                     	if	1	;There are 3 active tblptr bytes
 19353  012FAA  6AF8               	clrf	tblptru,c
 19354  012FAC  0E00               	movlw	low (__mediumconst shr (0+16))
 19355  012FAE  22F8               	addwfc	tblptru,f,c
 19356  012FB0                     	endif
 19357  012FB0  0008               	tblrd		*
 19358  012FB2  CFF5 F0B7          	movff	tablat,Byte_GetZone@MASK
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;Types.c: 68: UINT8 Offset = 0;
 19362  012FB6  0E00               	movlw	0
 19363  012FB8  0100               	movlb	0	; () banked
 19364  012FBA  6FB8               	movwf	Byte_GetZone@Offset& (0+255),b
 19365                           
 19366                           ;Types.c: 70: while (pChunk >= pMax)
 19367  012FBC  D006               	goto	l9389
 19368  012FBE                     l9385:
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;Types.c: 71: {
 19372                           ;Types.c: 72: pChunk -= pMax;
 19373  012FBE  0100               	movlb	0	; () banked
 19374  012FC0  51B3               	movf	Byte_GetZone@pMax& (0+255),w,b
 19375  012FC2  0100               	movlb	0	; () banked
 19376  012FC4  5FB4               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 19377                           
 19378                           ; BSR set to: 0
 19379                           ;Types.c: 73: Offset += 1;
 19380  012FC6  0100               	movlb	0	; () banked
 19381  012FC8  2BB8               	incf	Byte_GetZone@Offset& (0+255),f,b
 19382  012FCA                     l9389:
 19383                           
 19384                           ; BSR set to: 0
 19385  012FCA  0100               	movlb	0	; () banked
 19386  012FCC  51B3               	movf	Byte_GetZone@pMax& (0+255),w,b
 19387  012FCE  0100               	movlb	0	; () banked
 19388  012FD0  5DB4               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 19389  012FD2  B0D8               	btfsc	status,0,c
 19390  012FD4  D7F4               	goto	l9385
 19391                           
 19392                           ; BSR set to: 0
 19393                           ;Types.c: 74: }
 19394                           ;Types.c: 75: pChunk *= pChunkSize;
 19395                           
 19396                           ; BSR set to: 0
 19397  012FD6  0100               	movlb	0	; () banked
 19398  012FD8  51B5               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19399  012FDA  0100               	movlb	0	; () banked
 19400  012FDC  03B4               	mulwf	Byte_GetZone@pChunk& (0+255),b
 19401  012FDE  50F3               	movf	prodl,w,c
 19402  012FE0  6FB4               	movwf	Byte_GetZone@pChunk& (0+255),b
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;Types.c: 76: pChunk += Offset;
 19406  012FE2  0100               	movlb	0	; () banked
 19407  012FE4  51B8               	movf	Byte_GetZone@Offset& (0+255),w,b
 19408  012FE6  0100               	movlb	0	; () banked
 19409  012FE8  27B4               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 19410                           
 19411                           ; BSR set to: 0
 19412                           ;Types.c: 78: Output >>= pChunk;
 19413  012FEA  0100               	movlb	0	; () banked
 19414  012FEC  29B4               	incf	Byte_GetZone@pChunk& (0+255),w,b
 19415  012FEE  0100               	movlb	0	; () banked
 19416  012FF0  6FB6               	movwf	??_Byte_GetZone& (0+255),b
 19417  012FF2  D003               	goto	u6090
 19418  012FF4                     u6095:
 19419  012FF4  0100               	movlb	0	; () banked
 19420  012FF6  90D8               	bcf	status,0,c
 19421  012FF8  33B9               	rrcf	Byte_GetZone@Output& (0+255),f,b
 19422  012FFA                     u6090:
 19423  012FFA  0100               	movlb	0	; () banked
 19424  012FFC  2FB6               	decfsz	??_Byte_GetZone& (0+255),f,b
 19425  012FFE  D7FA               	goto	u6095
 19426                           
 19427                           ;Types.c: 79: Output &= MASK;
 19428  013000  0100               	movlb	0	; () banked
 19429  013002  51B7               	movf	Byte_GetZone@MASK& (0+255),w,b
 19430  013004  0100               	movlb	0	; () banked
 19431  013006  17B9               	andwf	Byte_GetZone@Output& (0+255),f,b
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;Types.c: 80: return Output;
 19435  013008  0100               	movlb	0	; () banked
 19436  01300A  51B9               	movf	Byte_GetZone@Output& (0+255),w,b
 19437  01300C  0012               	return	
 19438  01300E                     __end_of_Byte_GetZone:
 19439                           	opt stack 0
 19440                           tosu	equ	0xFFF
 19441                           tosh	equ	0xFFE
 19442                           tosl	equ	0xFFD
 19443                           pclath	equ	0xFFA
 19444                           tblptru	equ	0xFF8
 19445                           tblptrh	equ	0xFF7
 19446                           tblptrl	equ	0xFF6
 19447                           tablat	equ	0xFF5
 19448                           prodh	equ	0xFF4
 19449                           prodl	equ	0xFF3
 19450                           intcon	equ	0xFF2
 19451                           indf0	equ	0xFEF
 19452                           postinc0	equ	0xFEE
 19453                           fsr0h	equ	0xFEA
 19454                           fsr0l	equ	0xFE9
 19455                           wreg	equ	0xFE8
 19456                           indf1	equ	0xFE7
 19457                           postdec1	equ	0xFE5
 19458                           plusw1	equ	0xFE3
 19459                           fsr1h	equ	0xFE2
 19460                           fsr1l	equ	0xFE1
 19461                           indf2	equ	0xFDF
 19462                           postinc2	equ	0xFDE
 19463                           postdec2	equ	0xFDD
 19464                           plusw2	equ	0xFDB
 19465                           fsr2h	equ	0xFDA
 19466                           fsr2l	equ	0xFD9
 19467                           status	equ	0xFD8
 19468                           
 19469 ;; *************** function _Byte_SetQuad *****************
 19470 ;; Defined at:
 19471 ;;		line 101 in file "Library/Types.c"
 19472 ;; Parameters:    Size  Location     Type
 19473 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19474 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 19475 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19476 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19477 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19478 ;;		 -> NULL(0), 
 19479 ;;  pQuad           1   13[BANK0 ] unsigned char 
 19480 ;;  pValue          1   14[BANK0 ] unsigned char 
 19481 ;; Auto vars:     Size  Location     Type
 19482 ;;		None
 19483 ;; Return value:  Size  Location     Type
 19484 ;;                  1    wreg      void 
 19485 ;; Registers used:
 19486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19487 ;; Tracked objects:
 19488 ;;		On entry : 0/0
 19489 ;;		On exit  : 0/0
 19490 ;;		Unchanged: 0/0
 19491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19492 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19495 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19496 ;;Total ram usage:        4 bytes
 19497 ;; Hardware stack levels used:    1
 19498 ;; Hardware stack levels required when called:    8
 19499 ;; This function calls:
 19500 ;;		_Byte_SetZone
 19501 ;; This function is called by:
 19502 ;;		_Port_SetQuadType
 19503 ;;		_SPI_Init
 19504 ;;		_SPI_MinSpeed
 19505 ;;		_SPI_MaxSpeed
 19506 ;;		_Port_SetQuad
 19507 ;;		_Word_SetQuad
 19508 ;;		_I2C_Init
 19509 ;; This function uses a non-reentrant model
 19510 ;;
 19511                           
 19512                           	psect	text109
 19513  014452                     __ptext109:
 19514                           	opt stack 0
 19515  014452                     _Byte_SetQuad:
 19516                           	opt stack 20
 19517                           
 19518                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 19519                           
 19520                           ; BSR set to: 0
 19521                           ;incstack = 0
 19522  014452  C0BC  F0B1         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 19523  014456  C0BD  F0B2         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 19524  01445A  0E02               	movlw	2
 19525  01445C  0100               	movlb	0	; () banked
 19526  01445E  6FB3               	movwf	Byte_SetZone@pMax& (0+255),b
 19527  014460  C0BE  F0B4         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 19528  014464  0E04               	movlw	4
 19529  014466  0100               	movlb	0	; () banked
 19530  014468  6FB5               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19531  01446A  C0BF  F0B6         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 19532  01446E  EC12  F095         	call	_Byte_SetZone	;wreg free
 19533  014472  0012               	return		;funcret
 19534  014474                     __end_of_Byte_SetQuad:
 19535                           	opt stack 0
 19536                           tosu	equ	0xFFF
 19537                           tosh	equ	0xFFE
 19538                           tosl	equ	0xFFD
 19539                           pclath	equ	0xFFA
 19540                           tblptru	equ	0xFF8
 19541                           tblptrh	equ	0xFF7
 19542                           tblptrl	equ	0xFF6
 19543                           tablat	equ	0xFF5
 19544                           prodh	equ	0xFF4
 19545                           prodl	equ	0xFF3
 19546                           intcon	equ	0xFF2
 19547                           indf0	equ	0xFEF
 19548                           postinc0	equ	0xFEE
 19549                           fsr0h	equ	0xFEA
 19550                           fsr0l	equ	0xFE9
 19551                           wreg	equ	0xFE8
 19552                           indf1	equ	0xFE7
 19553                           postdec1	equ	0xFE5
 19554                           plusw1	equ	0xFE3
 19555                           fsr1h	equ	0xFE2
 19556                           fsr1l	equ	0xFE1
 19557                           indf2	equ	0xFDF
 19558                           postinc2	equ	0xFDE
 19559                           postdec2	equ	0xFDD
 19560                           plusw2	equ	0xFDB
 19561                           fsr2h	equ	0xFDA
 19562                           fsr2l	equ	0xFD9
 19563                           status	equ	0xFD8
 19564                           
 19565 ;; *************** function _Byte_SetZone *****************
 19566 ;; Defined at:
 19567 ;;		line 47 in file "Library/Types.c"
 19568 ;; Parameters:    Size  Location     Type
 19569 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19570 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19571 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19572 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 19573 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 19574 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19575 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19576 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19577 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19578 ;;  pMax            1    2[BANK0 ] unsigned char 
 19579 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19580 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19581 ;;  pValue          1    5[BANK0 ] unsigned char 
 19582 ;; Auto vars:     Size  Location     Type
 19583 ;;  MASK            1   10[BANK0 ] unsigned char 
 19584 ;;  Offset          1    9[BANK0 ] unsigned char 
 19585 ;; Return value:  Size  Location     Type
 19586 ;;                  1    wreg      void 
 19587 ;; Registers used:
 19588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19589 ;; Tracked objects:
 19590 ;;		On entry : 0/0
 19591 ;;		On exit  : 0/0
 19592 ;;		Unchanged: 0/0
 19593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19594 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19596 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19597 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19598 ;;Total ram usage:       11 bytes
 19599 ;; Hardware stack levels used:    1
 19600 ;; Hardware stack levels required when called:    7
 19601 ;; This function calls:
 19602 ;;		Nothing
 19603 ;; This function is called by:
 19604 ;;		_Byte_SetPair
 19605 ;;		_Byte_SetQuad
 19606 ;;		_Byte_SetTriple
 19607 ;; This function uses a non-reentrant model
 19608 ;;
 19609                           
 19610                           	psect	text110
 19611  012A24                     __ptext110:
 19612                           	opt stack 0
 19613  012A24                     _Byte_SetZone:
 19614                           	opt stack 19
 19615                           
 19616                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 19617                           
 19618                           ;incstack = 0
 19619  012A24  0100               	movlb	0	; () banked
 19620  012A26  51B5               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19621  012A28  0D01               	mullw	1
 19622  012A2A  0EEB               	movlw	low _MASKS
 19623  012A2C  24F3               	addwf	prodl,w,c
 19624  012A2E  6EF6               	movwf	tblptrl,c
 19625  012A30  0EFD               	movlw	high _MASKS
 19626  012A32  20F4               	addwfc	prodh,w,c
 19627  012A34  6EF7               	movwf	tblptrh,c
 19628  012A36                     	if	1	;There are 3 active tblptr bytes
 19629  012A36  6AF8               	clrf	tblptru,c
 19630  012A38  0E00               	movlw	low (__mediumconst shr (0+16))
 19631  012A3A  22F8               	addwfc	tblptru,f,c
 19632  012A3C                     	endif
 19633  012A3C  0008               	tblrd		*
 19634  012A3E  CFF5 F0BB          	movff	tablat,Byte_SetZone@MASK
 19635                           
 19636                           ; BSR set to: 0
 19637                           ;Types.c: 50: UINT8 Offset = 0;
 19638  012A42  0E00               	movlw	0
 19639  012A44  0100               	movlb	0	; () banked
 19640  012A46  6FBA               	movwf	Byte_SetZone@Offset& (0+255),b
 19641                           
 19642                           ;Types.c: 52: while (pChunk >= pMax)
 19643  012A48  D006               	goto	l9449
 19644  012A4A                     l9445:
 19645                           
 19646                           ; BSR set to: 0
 19647                           ;Types.c: 53: {
 19648                           ;Types.c: 54: pChunk -= pMax;
 19649  012A4A  0100               	movlb	0	; () banked
 19650  012A4C  51B3               	movf	Byte_SetZone@pMax& (0+255),w,b
 19651  012A4E  0100               	movlb	0	; () banked
 19652  012A50  5FB4               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 19653                           
 19654                           ; BSR set to: 0
 19655                           ;Types.c: 55: Offset += 1;
 19656  012A52  0100               	movlb	0	; () banked
 19657  012A54  2BBA               	incf	Byte_SetZone@Offset& (0+255),f,b
 19658  012A56                     l9449:
 19659                           
 19660                           ; BSR set to: 0
 19661  012A56  0100               	movlb	0	; () banked
 19662  012A58  51B3               	movf	Byte_SetZone@pMax& (0+255),w,b
 19663  012A5A  0100               	movlb	0	; () banked
 19664  012A5C  5DB4               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 19665  012A5E  B0D8               	btfsc	status,0,c
 19666  012A60  D7F4               	goto	l9445
 19667                           
 19668                           ; BSR set to: 0
 19669                           ;Types.c: 56: }
 19670                           ;Types.c: 57: pChunk *= pChunkSize;
 19671                           
 19672                           ; BSR set to: 0
 19673  012A62  0100               	movlb	0	; () banked
 19674  012A64  51B5               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19675  012A66  0100               	movlb	0	; () banked
 19676  012A68  03B4               	mulwf	Byte_SetZone@pChunk& (0+255),b
 19677  012A6A  50F3               	movf	prodl,w,c
 19678  012A6C  6FB4               	movwf	Byte_SetZone@pChunk& (0+255),b
 19679                           
 19680                           ; BSR set to: 0
 19681                           ;Types.c: 58: pChunk += Offset;
 19682  012A6E  0100               	movlb	0	; () banked
 19683  012A70  51BA               	movf	Byte_SetZone@Offset& (0+255),w,b
 19684  012A72  0100               	movlb	0	; () banked
 19685  012A74  27B4               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 19686                           
 19687                           ; BSR set to: 0
 19688                           ;Types.c: 60: pValue &= MASK;
 19689  012A76  0100               	movlb	0	; () banked
 19690  012A78  51BB               	movf	Byte_SetZone@MASK& (0+255),w,b
 19691  012A7A  0100               	movlb	0	; () banked
 19692  012A7C  17B6               	andwf	Byte_SetZone@pValue& (0+255),f,b
 19693                           
 19694                           ; BSR set to: 0
 19695                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 19696  012A7E  C0B4  F0B7         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19697  012A82  C0BB  F0B8         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 19698  012A86  0100               	movlb	0	; () banked
 19699  012A88  2BB7               	incf	??_Byte_SetZone& (0+255),f,b
 19700  012A8A  D003               	goto	u6174
 19701  012A8C                     u6175:
 19702  012A8C  0100               	movlb	0	; () banked
 19703  012A8E  90D8               	bcf	status,0,c
 19704  012A90  37B8               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19705  012A92                     u6174:
 19706  012A92  0100               	movlb	0	; () banked
 19707  012A94  2FB7               	decfsz	??_Byte_SetZone& (0+255),f,b
 19708  012A96  D7FA               	goto	u6175
 19709  012A98  0100               	movlb	0	; () banked
 19710  012A9A  51B8               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19711  012A9C  0AFF               	xorlw	255
 19712  012A9E  0100               	movlb	0	; () banked
 19713  012AA0  6FB9               	movwf	(??_Byte_SetZone+2)& (0+255),b
 19714  012AA2  C0B1  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19715  012AA6  C0B2  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19716  012AAA  0100               	movlb	0	; () banked
 19717  012AAC  51B9               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 19718  012AAE  16DF               	andwf	indf2,f,c
 19719                           
 19720                           ; BSR set to: 0
 19721                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 19722  012AB0  C0B4  F0B7         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19723  012AB4  C0B6  F0B8         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 19724  012AB8  0100               	movlb	0	; () banked
 19725  012ABA  2BB7               	incf	??_Byte_SetZone& (0+255),f,b
 19726  012ABC  D003               	goto	u6184
 19727  012ABE                     u6185:
 19728  012ABE  0100               	movlb	0	; () banked
 19729  012AC0  90D8               	bcf	status,0,c
 19730  012AC2  37B8               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19731  012AC4                     u6184:
 19732  012AC4  0100               	movlb	0	; () banked
 19733  012AC6  2FB7               	decfsz	??_Byte_SetZone& (0+255),f,b
 19734  012AC8  D7FA               	goto	u6185
 19735  012ACA  C0B1  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19736  012ACE  C0B2  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19737  012AD2  0100               	movlb	0	; () banked
 19738  012AD4  51B8               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19739  012AD6  12DF               	iorwf	indf2,f,c
 19740                           
 19741                           ; BSR set to: 0
 19742  012AD8  0012               	return		;funcret
 19743  012ADA                     __end_of_Byte_SetZone:
 19744                           	opt stack 0
 19745                           tosu	equ	0xFFF
 19746                           tosh	equ	0xFFE
 19747                           tosl	equ	0xFFD
 19748                           pclath	equ	0xFFA
 19749                           tblptru	equ	0xFF8
 19750                           tblptrh	equ	0xFF7
 19751                           tblptrl	equ	0xFF6
 19752                           tablat	equ	0xFF5
 19753                           prodh	equ	0xFF4
 19754                           prodl	equ	0xFF3
 19755                           intcon	equ	0xFF2
 19756                           indf0	equ	0xFEF
 19757                           postinc0	equ	0xFEE
 19758                           fsr0h	equ	0xFEA
 19759                           fsr0l	equ	0xFE9
 19760                           wreg	equ	0xFE8
 19761                           indf1	equ	0xFE7
 19762                           postdec1	equ	0xFE5
 19763                           plusw1	equ	0xFE3
 19764                           fsr1h	equ	0xFE2
 19765                           fsr1l	equ	0xFE1
 19766                           indf2	equ	0xFDF
 19767                           postinc2	equ	0xFDE
 19768                           postdec2	equ	0xFDD
 19769                           plusw2	equ	0xFDB
 19770                           fsr2h	equ	0xFDA
 19771                           fsr2l	equ	0xFD9
 19772                           status	equ	0xFD8
 19773                           
 19774 ;; *************** function _Console_SetForecolour *****************
 19775 ;; Defined at:
 19776 ;;		line 286 in file "Library/Console.c"
 19777 ;; Parameters:    Size  Location     Type
 19778 ;;  pColour         2    0[BANK0 ] unsigned short 
 19779 ;; Auto vars:     Size  Location     Type
 19780 ;;		None
 19781 ;; Return value:  Size  Location     Type
 19782 ;;                  1    wreg      void 
 19783 ;; Registers used:
 19784 ;;		None
 19785 ;; Tracked objects:
 19786 ;;		On entry : 0/0
 19787 ;;		On exit  : 0/0
 19788 ;;		Unchanged: 0/0
 19789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19790 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19794 ;;Total ram usage:        2 bytes
 19795 ;; Hardware stack levels used:    1
 19796 ;; Hardware stack levels required when called:    7
 19797 ;; This function calls:
 19798 ;;		Nothing
 19799 ;; This function is called by:
 19800 ;;		_main
 19801 ;; This function uses a non-reentrant model
 19802 ;;
 19803                           
 19804                           	psect	text111
 19805  014738                     __ptext111:
 19806                           	opt stack 0
 19807  014738                     _Console_SetForecolour:
 19808                           	opt stack 23
 19809                           
 19810                           ;Console.c: 289: gForecolour = pColour;
 19811                           
 19812                           ; BSR set to: 0
 19813                           ;incstack = 0
 19814  014738  C0B1  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
 19815  01473C  C0B2  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 19816  014740  0012               	return		;funcret
 19817  014742                     __end_of_Console_SetForecolour:
 19818                           	opt stack 0
 19819                           tosu	equ	0xFFF
 19820                           tosh	equ	0xFFE
 19821                           tosl	equ	0xFFD
 19822                           pclath	equ	0xFFA
 19823                           tblptru	equ	0xFF8
 19824                           tblptrh	equ	0xFF7
 19825                           tblptrl	equ	0xFF6
 19826                           tablat	equ	0xFF5
 19827                           prodh	equ	0xFF4
 19828                           prodl	equ	0xFF3
 19829                           intcon	equ	0xFF2
 19830                           indf0	equ	0xFEF
 19831                           postinc0	equ	0xFEE
 19832                           fsr0h	equ	0xFEA
 19833                           fsr0l	equ	0xFE9
 19834                           wreg	equ	0xFE8
 19835                           indf1	equ	0xFE7
 19836                           postdec1	equ	0xFE5
 19837                           plusw1	equ	0xFE3
 19838                           fsr1h	equ	0xFE2
 19839                           fsr1l	equ	0xFE1
 19840                           indf2	equ	0xFDF
 19841                           postinc2	equ	0xFDE
 19842                           postdec2	equ	0xFDD
 19843                           plusw2	equ	0xFDB
 19844                           fsr2h	equ	0xFDA
 19845                           fsr2l	equ	0xFD9
 19846                           status	equ	0xFD8
 19847                           
 19848 ;; *************** function _Console_Render *****************
 19849 ;; Defined at:
 19850 ;;		line 377 in file "Library/Console.c"
 19851 ;; Parameters:    Size  Location     Type
 19852 ;;		None
 19853 ;; Auto vars:     Size  Location     Type
 19854 ;;  lCursor         4   38[BANK0 ] struct Point
 19855 ;;  y               1   43[BANK0 ] unsigned char 
 19856 ;;  x               1   42[BANK0 ] unsigned char 
 19857 ;;  temp            1   37[BANK0 ] unsigned char 
 19858 ;;  Temp            2    0        unsigned short 
 19859 ;; Return value:  Size  Location     Type
 19860 ;;                  1    wreg      void 
 19861 ;; Registers used:
 19862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19863 ;; Tracked objects:
 19864 ;;		On entry : 0/0
 19865 ;;		On exit  : 0/0
 19866 ;;		Unchanged: 0/0
 19867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19869 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19871 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19872 ;;Total ram usage:        9 bytes
 19873 ;; Hardware stack levels used:    1
 19874 ;; Hardware stack levels required when called:   11
 19875 ;; This function calls:
 19876 ;;		_Console_MakeField
 19877 ;;		_LCD_DrawField
 19878 ;;		_LCD_FillRectangle
 19879 ;; This function is called by:
 19880 ;;		_main
 19881 ;; This function uses a non-reentrant model
 19882 ;;
 19883                           
 19884                           	psect	text112
 19885  0110E8                     __ptext112:
 19886                           	opt stack 0
 19887  0110E8                     _Console_Render:
 19888                           	opt stack 19
 19889                           
 19890                           ;Console.c: 379: Colour Temp;
 19891                           ;Console.c: 380: if (change)
 19892                           
 19893                           ;incstack = 0
 19894  0110E8  0100               	movlb	0	; () banked
 19895  0110EA  51FF               	movf	_change& (0+255),w,b
 19896  0110EC  B4D8               	btfsc	status,2,c
 19897  0110EE  0012               	return	
 19898                           
 19899                           ; BSR set to: 0
 19900                           ;Console.c: 381: {
 19901                           ;Console.c: 382: UINT8 x, y, temp;
 19902                           ;Console.c: 383: Point lCursor = {6,6};
 19903  0110F0  C1DA  F0D7         	movff	Console_Render@F6956,Console_Render@lCursor
 19904  0110F4  C1DB  F0D8         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 19905  0110F8  C1DC  F0D9         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 19906  0110FC  C1DD  F0DA         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 19907                           
 19908                           ; BSR set to: 0
 19909                           ;Console.c: 385: if (clearall)
 19910  011100  0100               	movlb	0	; () banked
 19911  011102  5180               	movf	_clearall& (0+255),w,b
 19912  011104  B4D8               	btfsc	status,2,c
 19913  011106  D004               	goto	l1056
 19914                           
 19915                           ; BSR set to: 0
 19916                           ;Console.c: 386: {
 19917                           ;Console.c: 389: temp = lBufferY;
 19918  011108  C036  F0D6         	movff	_lBufferY,Console_Render@temp
 19919                           
 19920                           ; BSR set to: 0
 19921                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 19922  01110C  0E0F               	movlw	15
 19923  01110E  6E36               	movwf	_lBufferY,c
 19924  011110                     l1056:
 19925                           
 19926                           ; BSR set to: 0
 19927                           ;Console.c: 391: }
 19928                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 19929  011110  0E00               	movlw	0
 19930  011112  0100               	movlb	0	; () banked
 19931  011114  6FDC               	movwf	Console_Render@y& (0+255),b
 19932  011116  D0DF               	goto	l11385
 19933  011118                     l11355:
 19934                           
 19935                           ; BSR set to: 0
 19936                           ;Console.c: 394: {
 19937                           ;Console.c: 395: gForecolour = lCBuffer[y];
 19938  011118  0100               	movlb	0	; () banked
 19939  01111A  51DC               	movf	Console_Render@y& (0+255),w,b
 19940  01111C  0D02               	mullw	2
 19941  01111E  0E00               	movlw	low _lCBuffer
 19942  011120  24F3               	addwf	prodl,w,c
 19943  011122  6ED9               	movwf	fsr2l,c
 19944  011124  0E01               	movlw	high _lCBuffer
 19945  011126  20F4               	addwfc	prodh,w,c
 19946  011128  6EDA               	movwf	fsr2h,c
 19947  01112A  CFDE F0FD          	movff	postinc2,_gForecolour
 19948  01112E  CFDD F0FE          	movff	postdec2,_gForecolour+1
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19952  011132  0E00               	movlw	0
 19953  011134  0100               	movlb	0	; () banked
 19954  011136  6FDB               	movwf	Console_Render@x& (0+255),b
 19955  011138                     l11359:
 19956                           
 19957                           ; BSR set to: 0
 19958  011138  0E13               	movlw	19
 19959  01113A  0100               	movlb	0	; () banked
 19960  01113C  65DB               	cpfsgt	Console_Render@x& (0+255),b
 19961  01113E  D001               	goto	l11363
 19962  011140  D0BE               	goto	l11379
 19963  011142                     l11363:
 19964                           
 19965                           ; BSR set to: 0
 19966                           ;Console.c: 397: {
 19967                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 19968  011142  0100               	movlb	0	; () banked
 19969  011144  51DC               	movf	Console_Render@y& (0+255),w,b
 19970  011146  0D14               	mullw	20
 19971  011148  0E46               	movlw	low _lBuffer
 19972  01114A  0100               	movlb	0	; () banked
 19973  01114C  6FD4               	movwf	??_Console_Render& (0+255),b
 19974  01114E  0E02               	movlw	high _lBuffer
 19975  011150  0100               	movlb	0	; () banked
 19976  011152  6FD5               	movwf	(??_Console_Render+1)& (0+255),b
 19977  011154  50F3               	movf	prodl,w,c
 19978  011156  0100               	movlb	0	; () banked
 19979  011158  27D4               	addwf	??_Console_Render& (0+255),f,b
 19980  01115A  50F4               	movf	prodh,w,c
 19981  01115C  0100               	movlb	0	; () banked
 19982  01115E  23D5               	addwfc	(??_Console_Render+1)& (0+255),f,b
 19983  011160  0100               	movlb	0	; () banked
 19984  011162  51DB               	movf	Console_Render@x& (0+255),w,b
 19985  011164  0D01               	mullw	1
 19986  011166  50F3               	movf	prodl,w,c
 19987  011168  0100               	movlb	0	; () banked
 19988  01116A  25D4               	addwf	??_Console_Render& (0+255),w,b
 19989  01116C  6ED9               	movwf	fsr2l,c
 19990  01116E  50F4               	movf	prodh,w,c
 19991  011170  0100               	movlb	0	; () banked
 19992  011172  21D5               	addwfc	(??_Console_Render+1)& (0+255),w,b
 19993  011174  6EDA               	movwf	fsr2h,c
 19994  011176  AEDF               	btfss	indf2,7,c
 19995  011178  D09A               	goto	l11373
 19996                           
 19997                           ; BSR set to: 0
 19998                           ;Console.c: 399: {
 19999                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20000  01117A  0100               	movlb	0	; () banked
 20001  01117C  51DC               	movf	Console_Render@y& (0+255),w,b
 20002  01117E  0D14               	mullw	20
 20003  011180  0E46               	movlw	low _lBuffer
 20004  011182  0100               	movlb	0	; () banked
 20005  011184  6FD4               	movwf	??_Console_Render& (0+255),b
 20006  011186  0E02               	movlw	high _lBuffer
 20007  011188  0100               	movlb	0	; () banked
 20008  01118A  6FD5               	movwf	(??_Console_Render+1)& (0+255),b
 20009  01118C  50F3               	movf	prodl,w,c
 20010  01118E  0100               	movlb	0	; () banked
 20011  011190  27D4               	addwf	??_Console_Render& (0+255),f,b
 20012  011192  50F4               	movf	prodh,w,c
 20013  011194  0100               	movlb	0	; () banked
 20014  011196  23D5               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20015  011198  0100               	movlb	0	; () banked
 20016  01119A  51DB               	movf	Console_Render@x& (0+255),w,b
 20017  01119C  0D01               	mullw	1
 20018  01119E  50F3               	movf	prodl,w,c
 20019  0111A0  0100               	movlb	0	; () banked
 20020  0111A2  25D4               	addwf	??_Console_Render& (0+255),w,b
 20021  0111A4  6ED9               	movwf	fsr2l,c
 20022  0111A6  50F4               	movf	prodh,w,c
 20023  0111A8  0100               	movlb	0	; () banked
 20024  0111AA  21D5               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20025  0111AC  6EDA               	movwf	fsr2h,c
 20026  0111AE  0E7F               	movlw	127
 20027  0111B0  16DF               	andwf	indf2,f,c
 20028                           
 20029                           ;Console.c: 401: if (lBuffer[y][x])
 20030  0111B2  0100               	movlb	0	; () banked
 20031  0111B4  51DC               	movf	Console_Render@y& (0+255),w,b
 20032  0111B6  0D14               	mullw	20
 20033  0111B8  0E46               	movlw	low _lBuffer
 20034  0111BA  0100               	movlb	0	; () banked
 20035  0111BC  6FD4               	movwf	??_Console_Render& (0+255),b
 20036  0111BE  0E02               	movlw	high _lBuffer
 20037  0111C0  0100               	movlb	0	; () banked
 20038  0111C2  6FD5               	movwf	(??_Console_Render+1)& (0+255),b
 20039  0111C4  50F3               	movf	prodl,w,c
 20040  0111C6  0100               	movlb	0	; () banked
 20041  0111C8  27D4               	addwf	??_Console_Render& (0+255),f,b
 20042  0111CA  50F4               	movf	prodh,w,c
 20043  0111CC  0100               	movlb	0	; () banked
 20044  0111CE  23D5               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20045  0111D0  0100               	movlb	0	; () banked
 20046  0111D2  51DB               	movf	Console_Render@x& (0+255),w,b
 20047  0111D4  0D01               	mullw	1
 20048  0111D6  50F3               	movf	prodl,w,c
 20049  0111D8  0100               	movlb	0	; () banked
 20050  0111DA  25D4               	addwf	??_Console_Render& (0+255),w,b
 20051  0111DC  6ED9               	movwf	fsr2l,c
 20052  0111DE  50F4               	movf	prodh,w,c
 20053  0111E0  0100               	movlb	0	; () banked
 20054  0111E2  21D5               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20055  0111E4  6EDA               	movwf	fsr2h,c
 20056  0111E6  50DF               	movf	indf2,w,c
 20057  0111E8  B4D8               	btfsc	status,2,c
 20058  0111EA  D04A               	goto	l11371
 20059                           
 20060                           ; BSR set to: 0
 20061                           ;Console.c: 402: {
 20062                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20063  0111EC  C077  F0BA         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20064  0111F0  C078  F0BB         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20065  0111F4  C0D7  F0BC         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20066  0111F8  C0D8  F0BD         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20067  0111FC  C0D9  F0BE         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20068  011200  C0DA  F0BF         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20069  011204  C0F9  F0C0         	movff	_gCharSize,LCD_FillRectangle@pSize
 20070  011208  C0FA  F0C1         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20071  01120C  C0FB  F0C2         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20072  011210  C0FC  F0C3         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20073  011214  EC5C  F09B         	call	_LCD_FillRectangle	;wreg free
 20074                           
 20075                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20076  011218  0100               	movlb	0	; () banked
 20077  01121A  51DC               	movf	Console_Render@y& (0+255),w,b
 20078  01121C  0D14               	mullw	20
 20079  01121E  0E46               	movlw	low _lBuffer
 20080  011220  0100               	movlb	0	; () banked
 20081  011222  6FD4               	movwf	??_Console_Render& (0+255),b
 20082  011224  0E02               	movlw	high _lBuffer
 20083  011226  0100               	movlb	0	; () banked
 20084  011228  6FD5               	movwf	(??_Console_Render+1)& (0+255),b
 20085  01122A  50F3               	movf	prodl,w,c
 20086  01122C  0100               	movlb	0	; () banked
 20087  01122E  27D4               	addwf	??_Console_Render& (0+255),f,b
 20088  011230  50F4               	movf	prodh,w,c
 20089  011232  0100               	movlb	0	; () banked
 20090  011234  23D5               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20091  011236  0100               	movlb	0	; () banked
 20092  011238  51DB               	movf	Console_Render@x& (0+255),w,b
 20093  01123A  0D01               	mullw	1
 20094  01123C  50F3               	movf	prodl,w,c
 20095  01123E  0100               	movlb	0	; () banked
 20096  011240  25D4               	addwf	??_Console_Render& (0+255),w,b
 20097  011242  6ED9               	movwf	fsr2l,c
 20098  011244  50F4               	movf	prodh,w,c
 20099  011246  0100               	movlb	0	; () banked
 20100  011248  21D5               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20101  01124A  6EDA               	movwf	fsr2h,c
 20102  01124C  50DF               	movf	indf2,w,c
 20103  01124E  EC2A  F093         	call	_Console_MakeField
 20104  011252  C0B6  F0C3         	movff	?_Console_MakeField,LCD_DrawField@pField
 20105  011256  C0B7  F0C4         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20106  01125A  C0D7  F0C5         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20107  01125E  C0D8  F0C6         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20108  011262  C0D9  F0C7         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20109  011266  C0DA  F0C8         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20110  01126A  C0F9  F0C9         	movff	_gCharSize,LCD_DrawField@pSize
 20111  01126E  C0FA  F0CA         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20112  011272  C0FB  F0CB         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20113  011276  C0FC  F0CC         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20114  01127A  EC67  F097         	call	_LCD_DrawField	;wreg free
 20115                           
 20116                           ;Console.c: 405: }
 20117  01127E  D017               	goto	l11373
 20118  011280                     l11371:
 20119                           
 20120                           ;Console.c: 406: else
 20121                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20122  011280  0E00               	movlw	0
 20123  011282  0100               	movlb	0	; () banked
 20124  011284  6FBB               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20125  011286  0E00               	movlw	0
 20126  011288  6FBA               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20127  01128A  C0D7  F0BC         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20128  01128E  C0D8  F0BD         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20129  011292  C0D9  F0BE         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20130  011296  C0DA  F0BF         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20131  01129A  C0F9  F0C0         	movff	_gCharSize,LCD_FillRectangle@pSize
 20132  01129E  C0FA  F0C1         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20133  0112A2  C0FB  F0C2         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20134  0112A6  C0FC  F0C3         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20135  0112AA  EC5C  F09B         	call	_LCD_FillRectangle	;wreg free
 20136  0112AE                     l11373:
 20137                           
 20138                           ;Console.c: 408: }
 20139                           ;Console.c: 409: lCursor.x += (5 + 1);
 20140  0112AE  0E06               	movlw	6
 20141  0112B0  0100               	movlb	0	; () banked
 20142  0112B2  27D7               	addwf	Console_Render@lCursor& (0+255),f,b
 20143  0112B4  0E00               	movlw	0
 20144  0112B6  23D8               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20145                           
 20146                           ; BSR set to: 0
 20147  0112B8  0100               	movlb	0	; () banked
 20148  0112BA  2BDB               	incf	Console_Render@x& (0+255),f,b
 20149  0112BC  D73D               	goto	l11359
 20150  0112BE                     l11379:
 20151                           
 20152                           ; BSR set to: 0
 20153                           ;Console.c: 410: }
 20154                           ;Console.c: 411: lCursor.y += (7 + 1);
 20155  0112BE  0E08               	movlw	8
 20156  0112C0  0100               	movlb	0	; () banked
 20157  0112C2  27D9               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20158  0112C4  0E00               	movlw	0
 20159  0112C6  23DA               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20160                           
 20161                           ; BSR set to: 0
 20162                           ;Console.c: 412: lCursor.x = 6;
 20163  0112C8  0E00               	movlw	0
 20164  0112CA  0100               	movlb	0	; () banked
 20165  0112CC  6FD8               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20166  0112CE  0E06               	movlw	6
 20167  0112D0  6FD7               	movwf	Console_Render@lCursor& (0+255),b
 20168                           
 20169                           ; BSR set to: 0
 20170  0112D2  0100               	movlb	0	; () banked
 20171  0112D4  2BDC               	incf	Console_Render@y& (0+255),f,b
 20172  0112D6                     l11385:
 20173                           
 20174                           ; BSR set to: 0
 20175  0112D6  0100               	movlb	0	; () banked
 20176  0112D8  51DC               	movf	Console_Render@y& (0+255),w,b
 20177  0112DA  5C36               	subwf	_lBufferY,w,c
 20178  0112DC  B0D8               	btfsc	status,0,c
 20179  0112DE  D71C               	goto	l11355
 20180                           
 20181                           ; BSR set to: 0
 20182                           ;Console.c: 413: }
 20183                           ;Console.c: 415: if (clearall)
 20184                           
 20185                           ; BSR set to: 0
 20186  0112E0  0100               	movlb	0	; () banked
 20187  0112E2  5180               	movf	_clearall& (0+255),w,b
 20188  0112E4  B4D8               	btfsc	status,2,c
 20189  0112E6  0012               	return	
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;Console.c: 416: {
 20193                           ;Console.c: 417: clearall = 0;
 20194  0112E8  0E00               	movlw	0
 20195  0112EA  0100               	movlb	0	; () banked
 20196  0112EC  6F80               	movwf	_clearall& (0+255),b
 20197                           
 20198                           ; BSR set to: 0
 20199                           ;Console.c: 418: lBufferY = temp;
 20200  0112EE  C0D6  F036         	movff	Console_Render@temp,_lBufferY
 20201                           
 20202                           ; BSR set to: 0
 20203  0112F2  0012               	return	
 20204  0112F4                     __end_of_Console_Render:
 20205                           	opt stack 0
 20206                           tosu	equ	0xFFF
 20207                           tosh	equ	0xFFE
 20208                           tosl	equ	0xFFD
 20209                           pclath	equ	0xFFA
 20210                           tblptru	equ	0xFF8
 20211                           tblptrh	equ	0xFF7
 20212                           tblptrl	equ	0xFF6
 20213                           tablat	equ	0xFF5
 20214                           prodh	equ	0xFF4
 20215                           prodl	equ	0xFF3
 20216                           intcon	equ	0xFF2
 20217                           indf0	equ	0xFEF
 20218                           postinc0	equ	0xFEE
 20219                           fsr0h	equ	0xFEA
 20220                           fsr0l	equ	0xFE9
 20221                           wreg	equ	0xFE8
 20222                           indf1	equ	0xFE7
 20223                           postdec1	equ	0xFE5
 20224                           plusw1	equ	0xFE3
 20225                           fsr1h	equ	0xFE2
 20226                           fsr1l	equ	0xFE1
 20227                           indf2	equ	0xFDF
 20228                           postinc2	equ	0xFDE
 20229                           postdec2	equ	0xFDD
 20230                           plusw2	equ	0xFDB
 20231                           fsr2h	equ	0xFDA
 20232                           fsr2l	equ	0xFD9
 20233                           status	equ	0xFD8
 20234                           
 20235 ;; *************** function _LCD_FillRectangle *****************
 20236 ;; Defined at:
 20237 ;;		line 318 in file "Library/LCD.c"
 20238 ;; Parameters:    Size  Location     Type
 20239 ;;  pColour         2    9[BANK0 ] unsigned short 
 20240 ;;  pPoint          4   11[BANK0 ] struct Point
 20241 ;;  pSize           4   15[BANK0 ] struct Point
 20242 ;; Auto vars:     Size  Location     Type
 20243 ;;  j               1   22[BANK0 ] unsigned char 
 20244 ;;  i               1   21[BANK0 ] unsigned char 
 20245 ;; Return value:  Size  Location     Type
 20246 ;;                  1    wreg      void 
 20247 ;; Registers used:
 20248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20249 ;; Tracked objects:
 20250 ;;		On entry : 0/0
 20251 ;;		On exit  : 0/0
 20252 ;;		Unchanged: 0/0
 20253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20254 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20257 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20258 ;;Total ram usage:       14 bytes
 20259 ;; Hardware stack levels used:    1
 20260 ;; Hardware stack levels required when called:   10
 20261 ;; This function calls:
 20262 ;;		_LCD_Word_Write
 20263 ;;		_Set_Addr_Window
 20264 ;; This function is called by:
 20265 ;;		_Console_Render
 20266 ;;		_Console_ClearLine
 20267 ;; This function uses a non-reentrant model
 20268 ;;
 20269                           
 20270                           	psect	text113
 20271  0136B8                     __ptext113:
 20272                           	opt stack 0
 20273  0136B8                     _LCD_FillRectangle:
 20274                           	opt stack 19
 20275                           
 20276                           ;LCD.c: 320: UINT8 i = 0x00;
 20277                           
 20278                           ; BSR set to: 0
 20279                           ;incstack = 0
 20280  0136B8  0E00               	movlw	0
 20281  0136BA  0100               	movlb	0	; () banked
 20282  0136BC  6FC6               	movwf	LCD_FillRectangle@i& (0+255),b
 20283                           
 20284                           ;LCD.c: 321: UINT8 j = 0x00;
 20285  0136BE  0E00               	movlw	0
 20286  0136C0  0100               	movlb	0	; () banked
 20287  0136C2  6FC7               	movwf	LCD_FillRectangle@j& (0+255),b
 20288                           
 20289                           ; BSR set to: 0
 20290                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20291  0136C4  C0BE  F0B6         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20292  0136C8  0100               	movlb	0	; () banked
 20293  0136CA  51BC               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20294  0136CC  0100               	movlb	0	; () banked
 20295  0136CE  25C0               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20296  0136D0  0100               	movlb	0	; () banked
 20297  0136D2  6FC4               	movwf	??_LCD_FillRectangle& (0+255),b
 20298  0136D4  0100               	movlb	0	; () banked
 20299  0136D6  05C4               	decf	??_LCD_FillRectangle& (0+255),w,b
 20300  0136D8  0100               	movlb	0	; () banked
 20301  0136DA  6FB7               	movwf	Set_Addr_Window@xe& (0+255),b
 20302  0136DC  0100               	movlb	0	; () banked
 20303  0136DE  51BE               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20304  0136E0  0100               	movlb	0	; () banked
 20305  0136E2  25C2               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20306  0136E4  0100               	movlb	0	; () banked
 20307  0136E6  6FC5               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20308  0136E8  0100               	movlb	0	; () banked
 20309  0136EA  05C5               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20310  0136EC  0100               	movlb	0	; () banked
 20311  0136EE  6FB8               	movwf	Set_Addr_Window@ye& (0+255),b
 20312  0136F0  0100               	movlb	0	; () banked
 20313  0136F2  51BC               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20314  0136F4  ECC4  F095         	call	_Set_Addr_Window
 20315                           
 20316                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20317  0136F8  C0C2  F0C7         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20318  0136FC                     l10931:
 20319  0136FC  0100               	movlb	0	; () banked
 20320  0136FE  51C7               	movf	LCD_FillRectangle@j& (0+255),w,b
 20321  013700  0100               	movlb	0	; () banked
 20322  013702  B4D8               	btfsc	status,2,c
 20323  013704  0012               	return	
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20327                           
 20328                           ; BSR set to: 0
 20329  013706  C0C0  F0C6         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20330  01370A                     l10935:
 20331                           
 20332                           ; BSR set to: 0
 20333  01370A  0100               	movlb	0	; () banked
 20334  01370C  51C6               	movf	LCD_FillRectangle@i& (0+255),w,b
 20335  01370E  0100               	movlb	0	; () banked
 20336  013710  B4D8               	btfsc	status,2,c
 20337  013712  D009               	goto	l10945
 20338                           
 20339                           ; BSR set to: 0
 20340                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20341                           
 20342                           ; BSR set to: 0
 20343                           
 20344                           ; BSR set to: 0
 20345  013714  C0BA  F0B6         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 20346  013718  C0BB  F0B7         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 20347  01371C  EC96  F0A2         	call	_LCD_Word_Write	;wreg free
 20348  013720  0100               	movlb	0	; () banked
 20349  013722  07C6               	decf	LCD_FillRectangle@i& (0+255),f,b
 20350  013724  D7F2               	goto	l10935
 20351  013726                     l10945:
 20352                           
 20353                           ; BSR set to: 0
 20354  013726  0100               	movlb	0	; () banked
 20355  013728  07C7               	decf	LCD_FillRectangle@j& (0+255),f,b
 20356  01372A  D7E8               	goto	l10931
 20357  01372C                     __end_of_LCD_FillRectangle:
 20358                           	opt stack 0
 20359                           tosu	equ	0xFFF
 20360                           tosh	equ	0xFFE
 20361                           tosl	equ	0xFFD
 20362                           pclath	equ	0xFFA
 20363                           tblptru	equ	0xFF8
 20364                           tblptrh	equ	0xFF7
 20365                           tblptrl	equ	0xFF6
 20366                           tablat	equ	0xFF5
 20367                           prodh	equ	0xFF4
 20368                           prodl	equ	0xFF3
 20369                           intcon	equ	0xFF2
 20370                           indf0	equ	0xFEF
 20371                           postinc0	equ	0xFEE
 20372                           fsr0h	equ	0xFEA
 20373                           fsr0l	equ	0xFE9
 20374                           wreg	equ	0xFE8
 20375                           indf1	equ	0xFE7
 20376                           postdec1	equ	0xFE5
 20377                           plusw1	equ	0xFE3
 20378                           fsr1h	equ	0xFE2
 20379                           fsr1l	equ	0xFE1
 20380                           indf2	equ	0xFDF
 20381                           postinc2	equ	0xFDE
 20382                           postdec2	equ	0xFDD
 20383                           plusw2	equ	0xFDB
 20384                           fsr2h	equ	0xFDA
 20385                           fsr2l	equ	0xFD9
 20386                           status	equ	0xFD8
 20387                           
 20388 ;; *************** function _LCD_DrawField *****************
 20389 ;; Defined at:
 20390 ;;		line 393 in file "Library/LCD.c"
 20391 ;; Parameters:    Size  Location     Type
 20392 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 20393 ;;		 -> Console_MakeField@Fill(70), 
 20394 ;;  pPoint          4   20[BANK0 ] struct Point
 20395 ;;  pSize           4   24[BANK0 ] struct Point
 20396 ;; Auto vars:     Size  Location     Type
 20397 ;;  count           2   30[BANK0 ] unsigned short 
 20398 ;;  i               1   34[BANK0 ] unsigned char 
 20399 ;;  ymax            1   33[BANK0 ] unsigned char 
 20400 ;;  xmax            1   32[BANK0 ] unsigned char 
 20401 ;; Return value:  Size  Location     Type
 20402 ;;                  1    wreg      void 
 20403 ;; Registers used:
 20404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20405 ;; Tracked objects:
 20406 ;;		On entry : 0/0
 20407 ;;		On exit  : 0/0
 20408 ;;		Unchanged: 0/0
 20409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20410 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20411 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20413 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20414 ;;Total ram usage:       17 bytes
 20415 ;; Hardware stack levels used:    1
 20416 ;; Hardware stack levels required when called:   10
 20417 ;; This function calls:
 20418 ;;		_LCD_Word_Write
 20419 ;;		_Set_Addr_Window
 20420 ;;		___wmul
 20421 ;; This function is called by:
 20422 ;;		_Console_Render
 20423 ;; This function uses a non-reentrant model
 20424 ;;
 20425                           
 20426                           	psect	text114
 20427  012ECE                     __ptext114:
 20428                           	opt stack 0
 20429  012ECE                     _LCD_DrawField:
 20430                           	opt stack 19
 20431                           
 20432                           ;LCD.c: 396: UINT8 i = 0x00;
 20433                           
 20434                           ; BSR set to: 0
 20435                           ;incstack = 0
 20436  012ECE  0E00               	movlw	0
 20437  012ED0  0100               	movlb	0	; () banked
 20438  012ED2  6FD3               	movwf	LCD_DrawField@i& (0+255),b
 20439                           
 20440                           ; BSR set to: 0
 20441                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 20442  012ED4  0100               	movlb	0	; () banked
 20443  012ED6  51C5               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20444  012ED8  0100               	movlb	0	; () banked
 20445  012EDA  25C9               	addwf	LCD_DrawField@pSize& (0+255),w,b
 20446  012EDC  0100               	movlb	0	; () banked
 20447  012EDE  6FD1               	movwf	LCD_DrawField@xmax& (0+255),b
 20448                           
 20449                           ; BSR set to: 0
 20450                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 20451  012EE0  0100               	movlb	0	; () banked
 20452  012EE2  51C7               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 20453  012EE4  0100               	movlb	0	; () banked
 20454  012EE6  25CB               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 20455  012EE8  0100               	movlb	0	; () banked
 20456  012EEA  6FD2               	movwf	LCD_DrawField@ymax& (0+255),b
 20457                           
 20458                           ; BSR set to: 0
 20459                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 20460  012EEC  C0CB  F0B1         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 20461  012EF0  C0CC  F0B2         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 20462  012EF4  C0C9  F0B3         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 20463  012EF8  C0CA  F0B4         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 20464  012EFC  ECA3  F0A0         	call	___wmul	;wreg free
 20465  012F00  C0B1  F0CF         	movff	?___wmul,LCD_DrawField@count
 20466  012F04  C0B2  F0D0         	movff	?___wmul+1,LCD_DrawField@count+1
 20467                           
 20468                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 20469  012F08  C0C7  F0B6         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 20470  012F0C  0100               	movlb	0	; () banked
 20471  012F0E  05D1               	decf	LCD_DrawField@xmax& (0+255),w,b
 20472  012F10  0100               	movlb	0	; () banked
 20473  012F12  6FB7               	movwf	Set_Addr_Window@xe& (0+255),b
 20474  012F14  0100               	movlb	0	; () banked
 20475  012F16  05D2               	decf	LCD_DrawField@ymax& (0+255),w,b
 20476  012F18  0100               	movlb	0	; () banked
 20477  012F1A  6FB8               	movwf	Set_Addr_Window@ye& (0+255),b
 20478  012F1C  0100               	movlb	0	; () banked
 20479  012F1E  51C5               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20480  012F20  ECC4  F095         	call	_Set_Addr_Window
 20481                           
 20482                           ;LCD.c: 403: for(i = 0; i < count; i++)
 20483  012F24  0E00               	movlw	0
 20484  012F26  0100               	movlb	0	; () banked
 20485  012F28  6FD3               	movwf	LCD_DrawField@i& (0+255),b
 20486  012F2A  D013               	goto	l10967
 20487  012F2C                     l10963:
 20488                           
 20489                           ; BSR set to: 0
 20490                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 20491  012F2C  0100               	movlb	0	; () banked
 20492  012F2E  51D3               	movf	LCD_DrawField@i& (0+255),w,b
 20493  012F30  0D02               	mullw	2
 20494  012F32  50F3               	movf	prodl,w,c
 20495  012F34  0100               	movlb	0	; () banked
 20496  012F36  25C3               	addwf	LCD_DrawField@pField& (0+255),w,b
 20497  012F38  6ED9               	movwf	fsr2l,c
 20498  012F3A  50F4               	movf	prodh,w,c
 20499  012F3C  0100               	movlb	0	; () banked
 20500  012F3E  21C4               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 20501  012F40  6EDA               	movwf	fsr2h,c
 20502  012F42  CFDE F0B6          	movff	postinc2,LCD_Word_Write@value
 20503  012F46  CFDD F0B7          	movff	postdec2,LCD_Word_Write@value+1
 20504  012F4A  EC96  F0A2         	call	_LCD_Word_Write	;wreg free
 20505  012F4E  0100               	movlb	0	; () banked
 20506  012F50  2BD3               	incf	LCD_DrawField@i& (0+255),f,b
 20507  012F52                     l10967:
 20508                           
 20509                           ; BSR set to: 0
 20510  012F52  0100               	movlb	0	; () banked
 20511  012F54  51D3               	movf	LCD_DrawField@i& (0+255),w,b
 20512  012F56  0100               	movlb	0	; () banked
 20513  012F58  6FCD               	movwf	??_LCD_DrawField& (0+255),b
 20514  012F5A  6BCE               	clrf	(??_LCD_DrawField+1)& (0+255),b
 20515  012F5C  0100               	movlb	0	; () banked
 20516  012F5E  51CF               	movf	LCD_DrawField@count& (0+255),w,b
 20517  012F60  0100               	movlb	0	; () banked
 20518  012F62  5DCD               	subwf	??_LCD_DrawField& (0+255),w,b
 20519  012F64  0100               	movlb	0	; () banked
 20520  012F66  51D0               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 20521  012F68  0100               	movlb	0	; () banked
 20522  012F6A  59CE               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 20523  012F6C  B0D8               	btfsc	status,0,c
 20524  012F6E  0012               	return	
 20525  012F70  D7DD               	goto	l10963
 20526  012F72                     __end_of_LCD_DrawField:
 20527                           	opt stack 0
 20528                           tosu	equ	0xFFF
 20529                           tosh	equ	0xFFE
 20530                           tosl	equ	0xFFD
 20531                           pclath	equ	0xFFA
 20532                           tblptru	equ	0xFF8
 20533                           tblptrh	equ	0xFF7
 20534                           tblptrl	equ	0xFF6
 20535                           tablat	equ	0xFF5
 20536                           prodh	equ	0xFF4
 20537                           prodl	equ	0xFF3
 20538                           intcon	equ	0xFF2
 20539                           indf0	equ	0xFEF
 20540                           postinc0	equ	0xFEE
 20541                           fsr0h	equ	0xFEA
 20542                           fsr0l	equ	0xFE9
 20543                           wreg	equ	0xFE8
 20544                           indf1	equ	0xFE7
 20545                           postdec1	equ	0xFE5
 20546                           plusw1	equ	0xFE3
 20547                           fsr1h	equ	0xFE2
 20548                           fsr1l	equ	0xFE1
 20549                           indf2	equ	0xFDF
 20550                           postinc2	equ	0xFDE
 20551                           postdec2	equ	0xFDD
 20552                           plusw2	equ	0xFDB
 20553                           fsr2h	equ	0xFDA
 20554                           fsr2l	equ	0xFD9
 20555                           status	equ	0xFD8
 20556                           
 20557 ;; *************** function ___wmul *****************
 20558 ;; Defined at:
 20559 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 20560 ;; Parameters:    Size  Location     Type
 20561 ;;  multiplier      2    0[BANK0 ] unsigned int 
 20562 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 20563 ;; Auto vars:     Size  Location     Type
 20564 ;;  product         2    4[BANK0 ] unsigned int 
 20565 ;; Return value:  Size  Location     Type
 20566 ;;                  2    0[BANK0 ] unsigned int 
 20567 ;; Registers used:
 20568 ;;		wreg, status,2, status,0, prodl, prodh
 20569 ;; Tracked objects:
 20570 ;;		On entry : 0/0
 20571 ;;		On exit  : 0/0
 20572 ;;		Unchanged: 0/0
 20573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20578 ;;Total ram usage:        6 bytes
 20579 ;; Hardware stack levels used:    1
 20580 ;; Hardware stack levels required when called:    7
 20581 ;; This function calls:
 20582 ;;		Nothing
 20583 ;; This function is called by:
 20584 ;;		_LCD_DrawField
 20585 ;; This function uses a non-reentrant model
 20586 ;;
 20587                           
 20588                           	psect	text115
 20589  014146                     __ptext115:
 20590                           	opt stack 0
 20591  014146                     ___wmul:
 20592                           	opt stack 21
 20593                           
 20594                           ; BSR set to: 0
 20595                           ;incstack = 0
 20596  014146  0100               	movlb	0	; () banked
 20597  014148  51B1               	movf	___wmul@multiplier& (0+255),w,b
 20598  01414A  0100               	movlb	0	; () banked
 20599  01414C  03B3               	mulwf	___wmul@multiplicand& (0+255),b
 20600  01414E  CFF3 F0B5          	movff	prodl,___wmul@product
 20601  014152  CFF4 F0B6          	movff	prodh,___wmul@product+1
 20602  014156  0100               	movlb	0	; () banked
 20603  014158  51B1               	movf	___wmul@multiplier& (0+255),w,b
 20604  01415A  0100               	movlb	0	; () banked
 20605  01415C  03B4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 20606  01415E  50F3               	movf	prodl,w,c
 20607  014160  0100               	movlb	0	; () banked
 20608  014162  27B6               	addwf	(___wmul@product+1)& (0+255),f,b
 20609  014164  0100               	movlb	0	; () banked
 20610  014166  51B2               	movf	(___wmul@multiplier+1)& (0+255),w,b
 20611  014168  0100               	movlb	0	; () banked
 20612  01416A  03B3               	mulwf	___wmul@multiplicand& (0+255),b
 20613  01416C  50F3               	movf	prodl,w,c
 20614  01416E  0100               	movlb	0	; () banked
 20615  014170  27B6               	addwf	(___wmul@product+1)& (0+255),f,b
 20616                           
 20617                           ; BSR set to: 0
 20618  014172  C0B5  F0B1         	movff	___wmul@product,?___wmul
 20619  014176  C0B6  F0B2         	movff	___wmul@product+1,?___wmul+1
 20620  01417A  0012               	return	
 20621  01417C                     __end_of___wmul:
 20622                           	opt stack 0
 20623                           tosu	equ	0xFFF
 20624                           tosh	equ	0xFFE
 20625                           tosl	equ	0xFFD
 20626                           pclath	equ	0xFFA
 20627                           tblptru	equ	0xFF8
 20628                           tblptrh	equ	0xFF7
 20629                           tblptrl	equ	0xFF6
 20630                           tablat	equ	0xFF5
 20631                           prodh	equ	0xFF4
 20632                           prodl	equ	0xFF3
 20633                           intcon	equ	0xFF2
 20634                           indf0	equ	0xFEF
 20635                           postinc0	equ	0xFEE
 20636                           fsr0h	equ	0xFEA
 20637                           fsr0l	equ	0xFE9
 20638                           wreg	equ	0xFE8
 20639                           indf1	equ	0xFE7
 20640                           postdec1	equ	0xFE5
 20641                           plusw1	equ	0xFE3
 20642                           fsr1h	equ	0xFE2
 20643                           fsr1l	equ	0xFE1
 20644                           indf2	equ	0xFDF
 20645                           postinc2	equ	0xFDE
 20646                           postdec2	equ	0xFDD
 20647                           plusw2	equ	0xFDB
 20648                           fsr2h	equ	0xFDA
 20649                           fsr2l	equ	0xFD9
 20650                           status	equ	0xFD8
 20651                           
 20652 ;; *************** function _Set_Addr_Window *****************
 20653 ;; Defined at:
 20654 ;;		line 214 in file "Library/LCD.c"
 20655 ;; Parameters:    Size  Location     Type
 20656 ;;  xs              1    wreg     unsigned char 
 20657 ;;  ys              1    5[BANK0 ] unsigned char 
 20658 ;;  xe              1    6[BANK0 ] unsigned char 
 20659 ;;  ye              1    7[BANK0 ] unsigned char 
 20660 ;; Auto vars:     Size  Location     Type
 20661 ;;  xs              1    8[BANK0 ] unsigned char 
 20662 ;; Return value:  Size  Location     Type
 20663 ;;                  1    wreg      void 
 20664 ;; Registers used:
 20665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20666 ;; Tracked objects:
 20667 ;;		On entry : 0/0
 20668 ;;		On exit  : 0/0
 20669 ;;		Unchanged: 0/0
 20670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20674 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20675 ;;Total ram usage:        4 bytes
 20676 ;; Hardware stack levels used:    1
 20677 ;; Hardware stack levels required when called:    9
 20678 ;; This function calls:
 20679 ;;		_LCD_Write
 20680 ;; This function is called by:
 20681 ;;		_LCD_Fill
 20682 ;;		_LCD_FillRectangle
 20683 ;;		_LCD_DrawField
 20684 ;;		_RAM_Address_Set
 20685 ;;		_LCD_DrawPixel
 20686 ;; This function uses a non-reentrant model
 20687 ;;
 20688                           
 20689                           	psect	text116
 20690  012B88                     __ptext116:
 20691                           	opt stack 0
 20692  012B88                     _Set_Addr_Window:
 20693                           	opt stack 19
 20694                           
 20695                           ; BSR set to: 0
 20696                           ;incstack = 0
 20697                           ;Set_Addr_Window@xs stored from wreg
 20698  012B88  0100               	movlb	0	; () banked
 20699  012B8A  6FB9               	movwf	Set_Addr_Window@xs& (0+255),b
 20700                           
 20701                           ;LCD.c: 216: ys+=2;
 20702  012B8C  0E02               	movlw	2
 20703  012B8E  0100               	movlb	0	; () banked
 20704  012B90  27B6               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20705                           
 20706                           ;LCD.c: 217: ye+=2;
 20707  012B92  0E02               	movlw	2
 20708  012B94  0100               	movlb	0	; () banked
 20709  012B96  27B8               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20710                           
 20711                           ;LCD.c: 218: xs+=3;
 20712  012B98  0E03               	movlw	3
 20713  012B9A  0100               	movlb	0	; () banked
 20714  012B9C  27B9               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20715                           
 20716                           ;LCD.c: 219: xe+=3;
 20717  012B9E  0E03               	movlw	3
 20718  012BA0  0100               	movlb	0	; () banked
 20719  012BA2  27B7               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20720                           
 20721                           ; BSR set to: 0
 20722                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20723  012BA4  0E00               	movlw	0
 20724  012BA6  0100               	movlb	0	; () banked
 20725  012BA8  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20726  012BAA  0E2A               	movlw	42
 20727  012BAC  EC3A  F0A2         	call	_LCD_Write
 20728                           
 20729                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20730  012BB0  0E01               	movlw	1
 20731  012BB2  0100               	movlb	0	; () banked
 20732  012BB4  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20733  012BB6  0E00               	movlw	0
 20734  012BB8  EC3A  F0A2         	call	_LCD_Write
 20735                           
 20736                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20737  012BBC  0E01               	movlw	1
 20738  012BBE  0100               	movlb	0	; () banked
 20739  012BC0  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20740  012BC2  0100               	movlb	0	; () banked
 20741  012BC4  51B9               	movf	Set_Addr_Window@xs& (0+255),w,b
 20742  012BC6  EC3A  F0A2         	call	_LCD_Write
 20743                           
 20744                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20745  012BCA  0E01               	movlw	1
 20746  012BCC  0100               	movlb	0	; () banked
 20747  012BCE  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20748  012BD0  0E00               	movlw	0
 20749  012BD2  EC3A  F0A2         	call	_LCD_Write
 20750                           
 20751                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20752  012BD6  0E01               	movlw	1
 20753  012BD8  0100               	movlb	0	; () banked
 20754  012BDA  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20755  012BDC  0100               	movlb	0	; () banked
 20756  012BDE  51B7               	movf	Set_Addr_Window@xe& (0+255),w,b
 20757  012BE0  EC3A  F0A2         	call	_LCD_Write
 20758                           
 20759                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20760  012BE4  0E00               	movlw	0
 20761  012BE6  0100               	movlb	0	; () banked
 20762  012BE8  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20763  012BEA  0E2B               	movlw	43
 20764  012BEC  EC3A  F0A2         	call	_LCD_Write
 20765                           
 20766                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20767  012BF0  0E01               	movlw	1
 20768  012BF2  0100               	movlb	0	; () banked
 20769  012BF4  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20770  012BF6  0E00               	movlw	0
 20771  012BF8  EC3A  F0A2         	call	_LCD_Write
 20772                           
 20773                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20774  012BFC  0E01               	movlw	1
 20775  012BFE  0100               	movlb	0	; () banked
 20776  012C00  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20777  012C02  0100               	movlb	0	; () banked
 20778  012C04  51B6               	movf	Set_Addr_Window@ys& (0+255),w,b
 20779  012C06  EC3A  F0A2         	call	_LCD_Write
 20780                           
 20781                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20782  012C0A  0E01               	movlw	1
 20783  012C0C  0100               	movlb	0	; () banked
 20784  012C0E  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20785  012C10  0E00               	movlw	0
 20786  012C12  EC3A  F0A2         	call	_LCD_Write
 20787                           
 20788                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20789  012C16  0E01               	movlw	1
 20790  012C18  0100               	movlb	0	; () banked
 20791  012C1A  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20792  012C1C  0100               	movlb	0	; () banked
 20793  012C1E  51B8               	movf	Set_Addr_Window@ye& (0+255),w,b
 20794  012C20  EC3A  F0A2         	call	_LCD_Write
 20795                           
 20796                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20797  012C24  0E00               	movlw	0
 20798  012C26  0100               	movlb	0	; () banked
 20799  012C28  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20800  012C2A  0E2C               	movlw	44
 20801  012C2C  EC3A  F0A2         	call	_LCD_Write
 20802  012C30  0012               	return		;funcret
 20803  012C32                     __end_of_Set_Addr_Window:
 20804                           	opt stack 0
 20805                           tosu	equ	0xFFF
 20806                           tosh	equ	0xFFE
 20807                           tosl	equ	0xFFD
 20808                           pclath	equ	0xFFA
 20809                           tblptru	equ	0xFF8
 20810                           tblptrh	equ	0xFF7
 20811                           tblptrl	equ	0xFF6
 20812                           tablat	equ	0xFF5
 20813                           prodh	equ	0xFF4
 20814                           prodl	equ	0xFF3
 20815                           intcon	equ	0xFF2
 20816                           indf0	equ	0xFEF
 20817                           postinc0	equ	0xFEE
 20818                           fsr0h	equ	0xFEA
 20819                           fsr0l	equ	0xFE9
 20820                           wreg	equ	0xFE8
 20821                           indf1	equ	0xFE7
 20822                           postdec1	equ	0xFE5
 20823                           plusw1	equ	0xFE3
 20824                           fsr1h	equ	0xFE2
 20825                           fsr1l	equ	0xFE1
 20826                           indf2	equ	0xFDF
 20827                           postinc2	equ	0xFDE
 20828                           postdec2	equ	0xFDD
 20829                           plusw2	equ	0xFDB
 20830                           fsr2h	equ	0xFDA
 20831                           fsr2l	equ	0xFD9
 20832                           status	equ	0xFD8
 20833                           
 20834 ;; *************** function _LCD_Word_Write *****************
 20835 ;; Defined at:
 20836 ;;		line 198 in file "Library/LCD.c"
 20837 ;; Parameters:    Size  Location     Type
 20838 ;;  value           2    5[BANK0 ] unsigned short 
 20839 ;; Auto vars:     Size  Location     Type
 20840 ;;		None
 20841 ;; Return value:  Size  Location     Type
 20842 ;;                  1    wreg      void 
 20843 ;; Registers used:
 20844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20845 ;; Tracked objects:
 20846 ;;		On entry : 0/0
 20847 ;;		On exit  : 0/0
 20848 ;;		Unchanged: 0/0
 20849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;Total ram usage:        2 bytes
 20855 ;; Hardware stack levels used:    1
 20856 ;; Hardware stack levels required when called:    9
 20857 ;; This function calls:
 20858 ;;		_LCD_Write
 20859 ;; This function is called by:
 20860 ;;		_LCD_Fill
 20861 ;;		_LCD_FillRectangle
 20862 ;;		_LCD_DrawField
 20863 ;;		_LCD_DrawPixel
 20864 ;; This function uses a non-reentrant model
 20865 ;;
 20866                           
 20867                           	psect	text117
 20868  01452C                     __ptext117:
 20869                           	opt stack 0
 20870  01452C                     _LCD_Word_Write:
 20871                           	opt stack 19
 20872                           
 20873                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20874                           
 20875                           ;incstack = 0
 20876  01452C  0E01               	movlw	1
 20877  01452E  0100               	movlb	0	; () banked
 20878  014530  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20879  014532  0100               	movlb	0	; () banked
 20880  014534  51B7               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20881  014536  EC3A  F0A2         	call	_LCD_Write
 20882                           
 20883                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20884  01453A  0E01               	movlw	1
 20885  01453C  0100               	movlb	0	; () banked
 20886  01453E  6FB4               	movwf	LCD_Write@mode& (0+255),b
 20887  014540  0100               	movlb	0	; () banked
 20888  014542  51B6               	movf	LCD_Word_Write@value& (0+255),w,b
 20889  014544  EC3A  F0A2         	call	_LCD_Write
 20890  014548  0012               	return		;funcret
 20891  01454A                     __end_of_LCD_Word_Write:
 20892                           	opt stack 0
 20893                           tosu	equ	0xFFF
 20894                           tosh	equ	0xFFE
 20895                           tosl	equ	0xFFD
 20896                           pclath	equ	0xFFA
 20897                           tblptru	equ	0xFF8
 20898                           tblptrh	equ	0xFF7
 20899                           tblptrl	equ	0xFF6
 20900                           tablat	equ	0xFF5
 20901                           prodh	equ	0xFF4
 20902                           prodl	equ	0xFF3
 20903                           intcon	equ	0xFF2
 20904                           indf0	equ	0xFEF
 20905                           postinc0	equ	0xFEE
 20906                           fsr0h	equ	0xFEA
 20907                           fsr0l	equ	0xFE9
 20908                           wreg	equ	0xFE8
 20909                           indf1	equ	0xFE7
 20910                           postdec1	equ	0xFE5
 20911                           plusw1	equ	0xFE3
 20912                           fsr1h	equ	0xFE2
 20913                           fsr1l	equ	0xFE1
 20914                           indf2	equ	0xFDF
 20915                           postinc2	equ	0xFDE
 20916                           postdec2	equ	0xFDD
 20917                           plusw2	equ	0xFDB
 20918                           fsr2h	equ	0xFDA
 20919                           fsr2l	equ	0xFD9
 20920                           status	equ	0xFD8
 20921                           
 20922 ;; *************** function _LCD_Write *****************
 20923 ;; Defined at:
 20924 ;;		line 67 in file "Library/LCD.c"
 20925 ;; Parameters:    Size  Location     Type
 20926 ;;  value           1    wreg     unsigned char 
 20927 ;;  mode            1    3[BANK0 ] enum E6761
 20928 ;; Auto vars:     Size  Location     Type
 20929 ;;  value           1    4[BANK0 ] unsigned char 
 20930 ;; Return value:  Size  Location     Type
 20931 ;;                  1    wreg      void 
 20932 ;; Registers used:
 20933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20934 ;; Tracked objects:
 20935 ;;		On entry : 0/0
 20936 ;;		On exit  : 0/0
 20937 ;;		Unchanged: 0/0
 20938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20939 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20942 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20943 ;;Total ram usage:        2 bytes
 20944 ;; Hardware stack levels used:    1
 20945 ;; Hardware stack levels required when called:    8
 20946 ;; This function calls:
 20947 ;;		_Mode_Set
 20948 ;;		_SPI_Send
 20949 ;; This function is called by:
 20950 ;;		_LCD_Init
 20951 ;;		_LCD_Word_Write
 20952 ;;		_Set_Addr_Window
 20953 ;;		_Set_Rotation
 20954 ;;		_LCD_WriteCMD
 20955 ;;		_LCD_WriteData
 20956 ;;		_LCD_Data_Write
 20957 ;;		_LCD_Data_Write_4k
 20958 ;;		_Invert_Display
 20959 ;; This function uses a non-reentrant model
 20960 ;;
 20961                           
 20962                           	psect	text118
 20963  014474                     __ptext118:
 20964                           	opt stack 0
 20965  014474                     _LCD_Write:
 20966                           	opt stack 20
 20967                           
 20968                           ;incstack = 0
 20969                           ;LCD_Write@value stored from wreg
 20970  014474  0100               	movlb	0	; () banked
 20971  014476  6FB5               	movwf	LCD_Write@value& (0+255),b
 20972                           
 20973                           ;LCD.c: 89: Mode_Set(mode);
 20974  014478  0100               	movlb	0	; () banked
 20975  01447A  51B4               	movf	LCD_Write@mode& (0+255),w,b
 20976  01447C  EC56  F0A3         	call	_Mode_Set
 20977                           
 20978                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20979  014480  0E6C               	movlw	low _SPI2
 20980  014482  0100               	movlb	0	; () banked
 20981  014484  6FB1               	movwf	SPI_Send@pInput& (0+255),b
 20982  014486  0E01               	movlw	high _SPI2
 20983  014488  0100               	movlb	0	; () banked
 20984  01448A  6FB2               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20985  01448C  C0B5  F0B3         	movff	LCD_Write@value,SPI_Send@pData
 20986  014490  EC04  F09C         	call	_SPI_Send	;wreg free
 20987  014494  0012               	return		;funcret
 20988  014496                     __end_of_LCD_Write:
 20989                           	opt stack 0
 20990                           tosu	equ	0xFFF
 20991                           tosh	equ	0xFFE
 20992                           tosl	equ	0xFFD
 20993                           pclath	equ	0xFFA
 20994                           tblptru	equ	0xFF8
 20995                           tblptrh	equ	0xFF7
 20996                           tblptrl	equ	0xFF6
 20997                           tablat	equ	0xFF5
 20998                           prodh	equ	0xFF4
 20999                           prodl	equ	0xFF3
 21000                           intcon	equ	0xFF2
 21001                           indf0	equ	0xFEF
 21002                           postinc0	equ	0xFEE
 21003                           fsr0h	equ	0xFEA
 21004                           fsr0l	equ	0xFE9
 21005                           wreg	equ	0xFE8
 21006                           indf1	equ	0xFE7
 21007                           postdec1	equ	0xFE5
 21008                           plusw1	equ	0xFE3
 21009                           fsr1h	equ	0xFE2
 21010                           fsr1l	equ	0xFE1
 21011                           indf2	equ	0xFDF
 21012                           postinc2	equ	0xFDE
 21013                           postdec2	equ	0xFDD
 21014                           plusw2	equ	0xFDB
 21015                           fsr2h	equ	0xFDA
 21016                           fsr2l	equ	0xFD9
 21017                           status	equ	0xFD8
 21018                           
 21019 ;; *************** function _SPI_Send *****************
 21020 ;; Defined at:
 21021 ;;		line 226 in file "Library/SPI.c"
 21022 ;; Parameters:    Size  Location     Type
 21023 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21024 ;;		 -> SPI1(11), SPI2(11), 
 21025 ;;  pData           1    2[BANK0 ] unsigned char 
 21026 ;; Auto vars:     Size  Location     Type
 21027 ;;		None
 21028 ;; Return value:  Size  Location     Type
 21029 ;;                  1    wreg      unsigned char 
 21030 ;; Registers used:
 21031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21032 ;; Tracked objects:
 21033 ;;		On entry : 0/0
 21034 ;;		On exit  : 0/0
 21035 ;;		Unchanged: 0/0
 21036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21037 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21041 ;;Total ram usage:        3 bytes
 21042 ;; Hardware stack levels used:    1
 21043 ;; Hardware stack levels required when called:    7
 21044 ;; This function calls:
 21045 ;;		Nothing
 21046 ;; This function is called by:
 21047 ;;		_LCD_Write
 21048 ;;		_OutSeg
 21049 ;; This function uses a non-reentrant model
 21050 ;;
 21051                           
 21052                           	psect	text119
 21053  013808                     __ptext119:
 21054                           	opt stack 0
 21055  013808                     _SPI_Send:
 21056                           	opt stack 20
 21057                           
 21058                           ;SPI.c: 253: switch (pInput->mChannel)
 21059                           
 21060                           ;incstack = 0
 21061  013808  D026               	goto	l9887
 21062  01380A                     l9869:
 21063                           
 21064                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 21065  01380A  C099  FFD9         	movff	_PortC+4,fsr2l
 21066  01380E  C09A  FFDA         	movff	_PortC+5,fsr2h
 21067  013812  0100               	movlb	0	; () banked
 21068  013814  94DF               	bcf	indf2,2,c
 21069                           
 21070                           ; BSR set to: 0
 21071                           ;SPI.c: 257: SSP1BUF = pData;
 21072  013816  C0B3  FFC9         	movff	SPI_Send@pData,4041	;volatile
 21073  01381A                     l680:
 21074  01381A  A0C7               	btfss	4039,0,c	;volatile
 21075  01381C  D7FE               	goto	l680
 21076                           
 21077                           ;SPI.c: 259: pData = SSP1BUF;
 21078  01381E  CFC9 F0B3          	movff	4041,SPI_Send@pData	;volatile
 21079                           
 21080                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 21081  013822  C099  FFD9         	movff	_PortC+4,fsr2l
 21082  013826  C09A  FFDA         	movff	_PortC+5,fsr2h
 21083  01382A  0100               	movlb	0	; () banked
 21084  01382C  84DF               	bsf	indf2,2,c
 21085                           
 21086                           ; BSR set to: 0
 21087                           ;SPI.c: 261: return pData;
 21088                           ;	Return value of _SPI_Send is never used
 21089  01382E  0012               	return	
 21090  013830                     l9877:
 21091                           
 21092                           ; BSR set to: 0
 21093                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 21094  013830  C08F  FFD9         	movff	_PortD+4,fsr2l
 21095  013834  C090  FFDA         	movff	_PortD+5,fsr2h
 21096  013838  0100               	movlb	0	; () banked
 21097  01383A  9EDF               	bcf	indf2,7,c
 21098                           
 21099                           ; BSR set to: 0
 21100                           ;SPI.c: 264: SSP2BUF = pData;
 21101  01383C  C0B3  FF6F         	movff	SPI_Send@pData,3951	;volatile
 21102  013840                     l685:
 21103  013840  A06D               	btfss	3949,0,c	;volatile
 21104  013842  D7FE               	goto	l685
 21105                           
 21106                           ;SPI.c: 266: pData = SSP2BUF;
 21107  013844  CF6F F0B3          	movff	3951,SPI_Send@pData	;volatile
 21108                           
 21109                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 21110  013848  C08F  FFD9         	movff	_PortD+4,fsr2l
 21111  01384C  C090  FFDA         	movff	_PortD+5,fsr2h
 21112  013850  0100               	movlb	0	; () banked
 21113  013852  8EDF               	bsf	indf2,7,c
 21114                           
 21115                           ; BSR set to: 0
 21116                           ;SPI.c: 269: };
 21117                           
 21118                           ; BSR set to: 0
 21119                           ;SPI.c: 268: return pData;
 21120                           ;	Return value of _SPI_Send is never used
 21121  013854  0012               	return	
 21122  013856                     l9887:
 21123  013856  0100               	movlb	0	; () banked
 21124  013858  EE20 F002          	lfsr	2,2
 21125  01385C  51B1               	movf	SPI_Send@pInput& (0+255),w,b
 21126  01385E  26D9               	addwf	fsr2l,f,c
 21127  013860  51B2               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 21128  013862  22DA               	addwfc	fsr2h,f,c
 21129  013864  50DF               	movf	indf2,w,c
 21130                           
 21131                           ; Switch size 1, requested type "space"
 21132                           ; Number of cases is 2, Range of values is 0 to 1
 21133                           ; switch strategies available:
 21134                           ; Name         Instructions Cycles
 21135                           ; simple_byte            7     4 (average)
 21136                           ;	Chosen strategy is simple_byte
 21137  013866  0A00               	xorlw	0	; case 0
 21138  013868  B4D8               	btfsc	status,2,c
 21139  01386A  D7CF               	goto	l9869
 21140  01386C  0A01               	xorlw	1	; case 1
 21141  01386E  A4D8               	btfss	status,2,c
 21142  013870  0012               	return	
 21143  013872  D7DE               	goto	l9877
 21144  013874                     __end_of_SPI_Send:
 21145                           	opt stack 0
 21146                           tosu	equ	0xFFF
 21147                           tosh	equ	0xFFE
 21148                           tosl	equ	0xFFD
 21149                           pclath	equ	0xFFA
 21150                           tblptru	equ	0xFF8
 21151                           tblptrh	equ	0xFF7
 21152                           tblptrl	equ	0xFF6
 21153                           tablat	equ	0xFF5
 21154                           prodh	equ	0xFF4
 21155                           prodl	equ	0xFF3
 21156                           intcon	equ	0xFF2
 21157                           indf0	equ	0xFEF
 21158                           postinc0	equ	0xFEE
 21159                           fsr0h	equ	0xFEA
 21160                           fsr0l	equ	0xFE9
 21161                           wreg	equ	0xFE8
 21162                           indf1	equ	0xFE7
 21163                           postdec1	equ	0xFE5
 21164                           plusw1	equ	0xFE3
 21165                           fsr1h	equ	0xFE2
 21166                           fsr1l	equ	0xFE1
 21167                           indf2	equ	0xFDF
 21168                           postinc2	equ	0xFDE
 21169                           postdec2	equ	0xFDD
 21170                           plusw2	equ	0xFDB
 21171                           fsr2h	equ	0xFDA
 21172                           fsr2l	equ	0xFD9
 21173                           status	equ	0xFD8
 21174                           
 21175 ;; *************** function _Mode_Set *****************
 21176 ;; Defined at:
 21177 ;;		line 40 in file "Library/LCD.c"
 21178 ;; Parameters:    Size  Location     Type
 21179 ;;  pMode           1    wreg     enum E6761
 21180 ;; Auto vars:     Size  Location     Type
 21181 ;;  pMode           1    0[BANK0 ] enum E6761
 21182 ;; Return value:  Size  Location     Type
 21183 ;;                  1    wreg      void 
 21184 ;; Registers used:
 21185 ;;		wreg
 21186 ;; Tracked objects:
 21187 ;;		On entry : 0/0
 21188 ;;		On exit  : 0/0
 21189 ;;		Unchanged: 0/0
 21190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21195 ;;Total ram usage:        1 bytes
 21196 ;; Hardware stack levels used:    1
 21197 ;; Hardware stack levels required when called:    7
 21198 ;; This function calls:
 21199 ;;		Nothing
 21200 ;; This function is called by:
 21201 ;;		_LCD_Write
 21202 ;; This function uses a non-reentrant model
 21203 ;;
 21204                           
 21205                           	psect	text120
 21206  0146AC                     __ptext120:
 21207                           	opt stack 0
 21208  0146AC                     _Mode_Set:
 21209                           	opt stack 20
 21210                           
 21211                           ; BSR set to: 0
 21212                           ;incstack = 0
 21213                           ;Mode_Set@pMode stored from wreg
 21214  0146AC  0100               	movlb	0	; () banked
 21215  0146AE  6FB1               	movwf	Mode_Set@pMode& (0+255),b
 21216                           
 21217                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21218  0146B0  0100               	movlb	0	; () banked
 21219  0146B2  B1B1               	btfsc	Mode_Set@pMode& (0+255),0,b
 21220  0146B4  D002               	bra	u6345
 21221  0146B6  9E85               	bcf	3973,7,c	;volatile
 21222  0146B8  D001               	bra	u6346
 21223  0146BA                     u6345:
 21224  0146BA  8E85               	bsf	3973,7,c	;volatile
 21225  0146BC                     u6346:
 21226  0146BC  0012               	return		;funcret
 21227  0146BE                     __end_of_Mode_Set:
 21228                           	opt stack 0
 21229                           tosu	equ	0xFFF
 21230                           tosh	equ	0xFFE
 21231                           tosl	equ	0xFFD
 21232                           pclath	equ	0xFFA
 21233                           tblptru	equ	0xFF8
 21234                           tblptrh	equ	0xFF7
 21235                           tblptrl	equ	0xFF6
 21236                           tablat	equ	0xFF5
 21237                           prodh	equ	0xFF4
 21238                           prodl	equ	0xFF3
 21239                           intcon	equ	0xFF2
 21240                           indf0	equ	0xFEF
 21241                           postinc0	equ	0xFEE
 21242                           fsr0h	equ	0xFEA
 21243                           fsr0l	equ	0xFE9
 21244                           wreg	equ	0xFE8
 21245                           indf1	equ	0xFE7
 21246                           postdec1	equ	0xFE5
 21247                           plusw1	equ	0xFE3
 21248                           fsr1h	equ	0xFE2
 21249                           fsr1l	equ	0xFE1
 21250                           indf2	equ	0xFDF
 21251                           postinc2	equ	0xFDE
 21252                           postdec2	equ	0xFDD
 21253                           plusw2	equ	0xFDB
 21254                           fsr2h	equ	0xFDA
 21255                           fsr2l	equ	0xFD9
 21256                           status	equ	0xFD8
 21257                           
 21258 ;; *************** function _Console_MakeField *****************
 21259 ;; Defined at:
 21260 ;;		line 435 in file "Library/Console.c"
 21261 ;; Parameters:    Size  Location     Type
 21262 ;;  pInput          1    wreg     unsigned char 
 21263 ;; Auto vars:     Size  Location     Type
 21264 ;;  pInput          1   11[BANK0 ] unsigned char 
 21265 ;;  y               1   17[BANK0 ] unsigned char 
 21266 ;;  x               1   16[BANK0 ] unsigned char 
 21267 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21268 ;;		 -> Font5x7(480), 
 21269 ;;  Index           2    9[BANK0 ] unsigned short 
 21270 ;; Return value:  Size  Location     Type
 21271 ;;                  2    5[BANK0 ] PTR unsigned short 
 21272 ;; Registers used:
 21273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21274 ;; Tracked objects:
 21275 ;;		On entry : 0/0
 21276 ;;		On exit  : 0/0
 21277 ;;		Unchanged: 0/0
 21278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21279 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21280 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21282 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21283 ;;Total ram usage:       13 bytes
 21284 ;; Hardware stack levels used:    1
 21285 ;; Hardware stack levels required when called:    8
 21286 ;; This function calls:
 21287 ;;		_Byte_GetBit
 21288 ;; This function is called by:
 21289 ;;		_Console_Render
 21290 ;; This function uses a non-reentrant model
 21291 ;;
 21292                           
 21293                           	psect	text121
 21294  012654                     __ptext121:
 21295                           	opt stack 0
 21296  012654                     _Console_MakeField:
 21297                           	opt stack 21
 21298                           
 21299                           ;incstack = 0
 21300                           ;Console_MakeField@pInput stored from wreg
 21301  012654  0100               	movlb	0	; () banked
 21302  012656  6FBC               	movwf	Console_MakeField@pInput& (0+255),b
 21303                           
 21304                           ;Console.c: 437: static Colour Fill[7][5];
 21305                           ;Console.c: 438: pInput -= 32;
 21306  012658  0E20               	movlw	32
 21307  01265A  0100               	movlb	0	; () banked
 21308  01265C  5FBC               	subwf	Console_MakeField@pInput& (0+255),f,b
 21309                           
 21310                           ; BSR set to: 0
 21311                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21312  01265E  0100               	movlb	0	; () banked
 21313  012660  51BC               	movf	Console_MakeField@pInput& (0+255),w,b
 21314  012662  0D05               	mullw	5
 21315  012664  CFF3 F0BA          	movff	prodl,Console_MakeField@Index
 21316  012668  CFF4 F0BB          	movff	prodh,Console_MakeField@Index+1
 21317                           
 21318                           ; BSR set to: 0
 21319                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21320  01266C  0EFB               	movlw	low _Font5x7
 21321  01266E  0100               	movlb	0	; () banked
 21322  012670  25BA               	addwf	Console_MakeField@Index& (0+255),w,b
 21323  012672  0100               	movlb	0	; () banked
 21324  012674  6FBD               	movwf	Console_MakeField@Column& (0+255),b
 21325  012676  0EFD               	movlw	high _Font5x7
 21326  012678  0100               	movlb	0	; () banked
 21327  01267A  21BB               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21328  01267C  0100               	movlb	0	; () banked
 21329  01267E  6FBE               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21330                           
 21331                           ; BSR set to: 0
 21332                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21333  012680  0E00               	movlw	0
 21334  012682  0100               	movlb	0	; () banked
 21335  012684  6FC1               	movwf	Console_MakeField@x& (0+255),b
 21336  012686                     l11027:
 21337                           
 21338                           ; BSR set to: 0
 21339  012686  0E04               	movlw	4
 21340  012688  0100               	movlb	0	; () banked
 21341  01268A  65C1               	cpfsgt	Console_MakeField@x& (0+255),b
 21342  01268C  D001               	goto	l11031
 21343  01268E  D043               	goto	l11051
 21344  012690                     l11031:
 21345                           
 21346                           ; BSR set to: 0
 21347                           ;Console.c: 444: {
 21348                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 21349  012690  0E00               	movlw	0
 21350  012692  0100               	movlb	0	; () banked
 21351  012694  6FC2               	movwf	Console_MakeField@y& (0+255),b
 21352  012696                     l11033:
 21353                           
 21354                           ; BSR set to: 0
 21355  012696  0E06               	movlw	6
 21356  012698  0100               	movlb	0	; () banked
 21357  01269A  65C2               	cpfsgt	Console_MakeField@y& (0+255),b
 21358  01269C  D001               	goto	l11037
 21359  01269E  D035               	goto	l11047
 21360  0126A0                     l11037:
 21361                           
 21362                           ; BSR set to: 0
 21363                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 21364  0126A0  C0BD  F0B1         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 21365  0126A4  C0BE  F0B2         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 21366  0126A8  C0C2  F0B3         	movff	Console_MakeField@y,Byte_GetBit@pBit
 21367  0126AC  ECD9  F0A0         	call	_Byte_GetBit	;wreg free
 21368  0126B0  0900               	iorlw	0
 21369  0126B2  A4D8               	btfss	status,2,c
 21370  0126B4  D005               	goto	l1082
 21371  0126B6  C077  F0BF         	movff	_gBackcolour,_Console_MakeField$10974
 21372  0126BA  C078  F0C0         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 21373  0126BE  D004               	goto	l11041
 21374  0126C0                     l1082:
 21375  0126C0  C0FD  F0BF         	movff	_gForecolour,_Console_MakeField$10974
 21376  0126C4  C0FE  F0C0         	movff	_gForecolour+1,_Console_MakeField$10974+1
 21377  0126C8                     l11041:
 21378  0126C8  0100               	movlb	0	; () banked
 21379  0126CA  51C2               	movf	Console_MakeField@y& (0+255),w,b
 21380  0126CC  0D0A               	mullw	10
 21381  0126CE  0E00               	movlw	low Console_MakeField@Fill
 21382  0126D0  0100               	movlb	0	; () banked
 21383  0126D2  6FB8               	movwf	??_Console_MakeField& (0+255),b
 21384  0126D4  0E02               	movlw	high Console_MakeField@Fill
 21385  0126D6  0100               	movlb	0	; () banked
 21386  0126D8  6FB9               	movwf	(??_Console_MakeField+1)& (0+255),b
 21387  0126DA  50F3               	movf	prodl,w,c
 21388  0126DC  0100               	movlb	0	; () banked
 21389  0126DE  27B8               	addwf	??_Console_MakeField& (0+255),f,b
 21390  0126E0  50F4               	movf	prodh,w,c
 21391  0126E2  0100               	movlb	0	; () banked
 21392  0126E4  23B9               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 21393  0126E6  0100               	movlb	0	; () banked
 21394  0126E8  51C1               	movf	Console_MakeField@x& (0+255),w,b
 21395  0126EA  0D02               	mullw	2
 21396  0126EC  50F3               	movf	prodl,w,c
 21397  0126EE  0100               	movlb	0	; () banked
 21398  0126F0  25B8               	addwf	??_Console_MakeField& (0+255),w,b
 21399  0126F2  6ED9               	movwf	fsr2l,c
 21400  0126F4  50F4               	movf	prodh,w,c
 21401  0126F6  0100               	movlb	0	; () banked
 21402  0126F8  21B9               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 21403  0126FA  6EDA               	movwf	fsr2h,c
 21404  0126FC  C0BF  FFDE         	movff	_Console_MakeField$10974,postinc2
 21405  012700  C0C0  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 21406                           
 21407                           ; BSR set to: 0
 21408  012704  0100               	movlb	0	; () banked
 21409  012706  2BC2               	incf	Console_MakeField@y& (0+255),f,b
 21410  012708  D7C6               	goto	l11033
 21411  01270A                     l11047:
 21412                           
 21413                           ; BSR set to: 0
 21414                           ;Console.c: 447: Column += 1;
 21415  01270A  0100               	movlb	0	; () banked
 21416  01270C  4BBD               	infsnz	Console_MakeField@Column& (0+255),f,b
 21417  01270E  2BBE               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 21418  012710  0100               	movlb	0	; () banked
 21419  012712  2BC1               	incf	Console_MakeField@x& (0+255),f,b
 21420  012714  D7B8               	goto	l11027
 21421  012716                     l11051:
 21422                           
 21423                           ; BSR set to: 0
 21424                           ;Console.c: 448: }
 21425                           ;Console.c: 449: return (ColourPtr)Fill;
 21426  012716  0E00               	movlw	low Console_MakeField@Fill
 21427  012718  0100               	movlb	0	; () banked
 21428  01271A  6FB6               	movwf	?_Console_MakeField& (0+255),b
 21429  01271C  0E02               	movlw	high Console_MakeField@Fill
 21430  01271E  0100               	movlb	0	; () banked
 21431  012720  6FB7               	movwf	(?_Console_MakeField+1)& (0+255),b
 21432  012722  0012               	return	
 21433  012724                     __end_of_Console_MakeField:
 21434                           	opt stack 0
 21435                           tosu	equ	0xFFF
 21436                           tosh	equ	0xFFE
 21437                           tosl	equ	0xFFD
 21438                           pclath	equ	0xFFA
 21439                           tblptru	equ	0xFF8
 21440                           tblptrh	equ	0xFF7
 21441                           tblptrl	equ	0xFF6
 21442                           tablat	equ	0xFF5
 21443                           prodh	equ	0xFF4
 21444                           prodl	equ	0xFF3
 21445                           intcon	equ	0xFF2
 21446                           indf0	equ	0xFEF
 21447                           postinc0	equ	0xFEE
 21448                           fsr0h	equ	0xFEA
 21449                           fsr0l	equ	0xFE9
 21450                           wreg	equ	0xFE8
 21451                           indf1	equ	0xFE7
 21452                           postdec1	equ	0xFE5
 21453                           plusw1	equ	0xFE3
 21454                           fsr1h	equ	0xFE2
 21455                           fsr1l	equ	0xFE1
 21456                           indf2	equ	0xFDF
 21457                           postinc2	equ	0xFDE
 21458                           postdec2	equ	0xFDD
 21459                           plusw2	equ	0xFDB
 21460                           fsr2h	equ	0xFDA
 21461                           fsr2l	equ	0xFD9
 21462                           status	equ	0xFD8
 21463                           
 21464 ;; *************** function _Byte_GetBit *****************
 21465 ;; Defined at:
 21466 ;;		line 38 in file "Library/Types.c"
 21467 ;; Parameters:    Size  Location     Type
 21468 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21469 ;;		 -> Font5x7(480), 
 21470 ;;  pBit            1    2[BANK0 ] unsigned char 
 21471 ;; Auto vars:     Size  Location     Type
 21472 ;;  Output          1    4[BANK0 ] unsigned char 
 21473 ;; Return value:  Size  Location     Type
 21474 ;;                  1    wreg      unsigned char 
 21475 ;; Registers used:
 21476 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 21477 ;; Tracked objects:
 21478 ;;		On entry : 0/0
 21479 ;;		On exit  : 0/0
 21480 ;;		Unchanged: 0/0
 21481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21482 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21485 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21486 ;;Total ram usage:        5 bytes
 21487 ;; Hardware stack levels used:    1
 21488 ;; Hardware stack levels required when called:    7
 21489 ;; This function calls:
 21490 ;;		Nothing
 21491 ;; This function is called by:
 21492 ;;		_Console_MakeField
 21493 ;;		_Word_GetBit
 21494 ;; This function uses a non-reentrant model
 21495 ;;
 21496                           
 21497                           	psect	text122
 21498  0141B2                     __ptext122:
 21499                           	opt stack 0
 21500  0141B2                     _Byte_GetBit:
 21501                           	opt stack 21
 21502                           
 21503                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 21504                           
 21505                           ; BSR set to: 0
 21506                           ;incstack = 0
 21507  0141B2  C0B1  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 21508  0141B6  C0B2  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 21509  0141BA                     	if	0	;tblptru may be non-zero
 21510  0141BA                     	endif
 21511  0141BA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21512  0141BA  0E00               	movlw	low (__mediumconst shr (0+16))
 21513  0141BC  6EF8               	movwf	tblptru,c
 21514  0141BE                     	endif
 21515  0141BE  0008               	tblrd		*
 21516  0141C0  CFF5 F0B5          	movff	tablat,Byte_GetBit@Output
 21517                           
 21518                           ;Types.c: 42: Output >>= pBit;
 21519  0141C4  0100               	movlb	0	; () banked
 21520  0141C6  29B3               	incf	Byte_GetBit@pBit& (0+255),w,b
 21521  0141C8  0100               	movlb	0	; () banked
 21522  0141CA  6FB4               	movwf	??_Byte_GetBit& (0+255),b
 21523  0141CC  D003               	goto	u6970
 21524  0141CE                     u6975:
 21525  0141CE  0100               	movlb	0	; () banked
 21526  0141D0  90D8               	bcf	status,0,c
 21527  0141D2  33B5               	rrcf	Byte_GetBit@Output& (0+255),f,b
 21528  0141D4                     u6970:
 21529  0141D4  0100               	movlb	0	; () banked
 21530  0141D6  2FB4               	decfsz	??_Byte_GetBit& (0+255),f,b
 21531  0141D8  D7FA               	goto	u6975
 21532                           
 21533                           ;Types.c: 43: Output &= 1;
 21534  0141DA  0E01               	movlw	1
 21535  0141DC  0100               	movlb	0	; () banked
 21536  0141DE  17B5               	andwf	Byte_GetBit@Output& (0+255),f,b
 21537                           
 21538                           ; BSR set to: 0
 21539                           ;Types.c: 44: return Output;
 21540  0141E0  0100               	movlb	0	; () banked
 21541  0141E2  51B5               	movf	Byte_GetBit@Output& (0+255),w,b
 21542  0141E4  0012               	return	
 21543  0141E6                     __end_of_Byte_GetBit:
 21544                           	opt stack 0
 21545                           tosu	equ	0xFFF
 21546                           tosh	equ	0xFFE
 21547                           tosl	equ	0xFFD
 21548                           pclath	equ	0xFFA
 21549                           tblptru	equ	0xFF8
 21550                           tblptrh	equ	0xFF7
 21551                           tblptrl	equ	0xFF6
 21552                           tablat	equ	0xFF5
 21553                           prodh	equ	0xFF4
 21554                           prodl	equ	0xFF3
 21555                           intcon	equ	0xFF2
 21556                           indf0	equ	0xFEF
 21557                           postinc0	equ	0xFEE
 21558                           fsr0h	equ	0xFEA
 21559                           fsr0l	equ	0xFE9
 21560                           wreg	equ	0xFE8
 21561                           indf1	equ	0xFE7
 21562                           postdec1	equ	0xFE5
 21563                           plusw1	equ	0xFE3
 21564                           fsr1h	equ	0xFE2
 21565                           fsr1l	equ	0xFE1
 21566                           indf2	equ	0xFDF
 21567                           postinc2	equ	0xFDE
 21568                           postdec2	equ	0xFDD
 21569                           plusw2	equ	0xFDB
 21570                           fsr2h	equ	0xFDA
 21571                           fsr2l	equ	0xFD9
 21572                           status	equ	0xFD8
 21573                           
 21574 ;; *************** function _Console_Init *****************
 21575 ;; Defined at:
 21576 ;;		line 157 in file "Library/Console.c"
 21577 ;; Parameters:    Size  Location     Type
 21578 ;;		None
 21579 ;; Auto vars:     Size  Location     Type
 21580 ;;  y               1    3[BANK0 ] unsigned char 
 21581 ;;  x               1    2[BANK0 ] unsigned char 
 21582 ;; Return value:  Size  Location     Type
 21583 ;;                  1    wreg      void 
 21584 ;; Registers used:
 21585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21586 ;; Tracked objects:
 21587 ;;		On entry : 0/0
 21588 ;;		On exit  : 0/0
 21589 ;;		Unchanged: 0/0
 21590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21594 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21595 ;;Total ram usage:        4 bytes
 21596 ;; Hardware stack levels used:    1
 21597 ;; Hardware stack levels required when called:    7
 21598 ;; This function calls:
 21599 ;;		Nothing
 21600 ;; This function is called by:
 21601 ;;		_main
 21602 ;; This function uses a non-reentrant model
 21603 ;;
 21604                           
 21605                           	psect	text123
 21606  0132EA                     __ptext123:
 21607                           	opt stack 0
 21608  0132EA                     _Console_Init:
 21609                           	opt stack 23
 21610                           
 21611                           ;Console.c: 160: lBufferX = 0;
 21612                           
 21613                           ; BSR set to: 0
 21614                           ;incstack = 0
 21615  0132EA  0E00               	movlw	0
 21616  0132EC  6E37               	movwf	_lBufferX,c
 21617                           
 21618                           ;Console.c: 161: lBufferY = 0;
 21619  0132EE  0E00               	movlw	0
 21620  0132F0  6E36               	movwf	_lBufferY,c
 21621                           
 21622                           ;Console.c: 163: UINT8 x, y;
 21623                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 21624  0132F2  0E00               	movlw	0
 21625  0132F4  0100               	movlb	0	; () banked
 21626  0132F6  6FB3               	movwf	Console_Init@x& (0+255),b
 21627  0132F8                     l11323:
 21628                           
 21629                           ; BSR set to: 0
 21630  0132F8  0E13               	movlw	19
 21631  0132FA  0100               	movlb	0	; () banked
 21632  0132FC  65B3               	cpfsgt	Console_Init@x& (0+255),b
 21633  0132FE  D001               	goto	l11327
 21634  013300  0012               	return	
 21635  013302                     l11327:
 21636                           
 21637                           ; BSR set to: 0
 21638                           ;Console.c: 165: {
 21639                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 21640  013302  0E00               	movlw	0
 21641  013304  0100               	movlb	0	; () banked
 21642  013306  6FB4               	movwf	Console_Init@y& (0+255),b
 21643  013308                     l11329:
 21644                           
 21645                           ; BSR set to: 0
 21646  013308  0E0E               	movlw	14
 21647  01330A  0100               	movlb	0	; () banked
 21648  01330C  65B4               	cpfsgt	Console_Init@y& (0+255),b
 21649  01330E  D001               	goto	l11333
 21650  013310  D02C               	goto	l11339
 21651  013312                     l11333:
 21652                           
 21653                           ; BSR set to: 0
 21654                           ;Console.c: 167: {
 21655                           ;Console.c: 168: lBuffer[y][x] = '\0';
 21656  013312  0100               	movlb	0	; () banked
 21657  013314  51B4               	movf	Console_Init@y& (0+255),w,b
 21658  013316  0D14               	mullw	20
 21659  013318  0E46               	movlw	low _lBuffer
 21660  01331A  0100               	movlb	0	; () banked
 21661  01331C  6FB1               	movwf	??_Console_Init& (0+255),b
 21662  01331E  0E02               	movlw	high _lBuffer
 21663  013320  0100               	movlb	0	; () banked
 21664  013322  6FB2               	movwf	(??_Console_Init+1)& (0+255),b
 21665  013324  50F3               	movf	prodl,w,c
 21666  013326  0100               	movlb	0	; () banked
 21667  013328  27B1               	addwf	??_Console_Init& (0+255),f,b
 21668  01332A  50F4               	movf	prodh,w,c
 21669  01332C  0100               	movlb	0	; () banked
 21670  01332E  23B2               	addwfc	(??_Console_Init+1)& (0+255),f,b
 21671  013330  0100               	movlb	0	; () banked
 21672  013332  51B3               	movf	Console_Init@x& (0+255),w,b
 21673  013334  0D01               	mullw	1
 21674  013336  50F3               	movf	prodl,w,c
 21675  013338  0100               	movlb	0	; () banked
 21676  01333A  25B1               	addwf	??_Console_Init& (0+255),w,b
 21677  01333C  6ED9               	movwf	fsr2l,c
 21678  01333E  50F4               	movf	prodh,w,c
 21679  013340  0100               	movlb	0	; () banked
 21680  013342  21B2               	addwfc	(??_Console_Init+1)& (0+255),w,b
 21681  013344  6EDA               	movwf	fsr2h,c
 21682  013346  0E00               	movlw	0
 21683  013348  6EDF               	movwf	indf2,c
 21684                           
 21685                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 21686  01334A  0100               	movlb	0	; () banked
 21687  01334C  51B4               	movf	Console_Init@y& (0+255),w,b
 21688  01334E  0D02               	mullw	2
 21689  013350  0E00               	movlw	low _lCBuffer
 21690  013352  24F3               	addwf	prodl,w,c
 21691  013354  6ED9               	movwf	fsr2l,c
 21692  013356  0E01               	movlw	high _lCBuffer
 21693  013358  20F4               	addwfc	prodh,w,c
 21694  01335A  6EDA               	movwf	fsr2h,c
 21695  01335C  0EFF               	movlw	255
 21696  01335E  6EDE               	movwf	postinc2,c
 21697  013360  0EFF               	movlw	255
 21698  013362  6EDD               	movwf	postdec2,c
 21699                           
 21700                           ; BSR set to: 0
 21701  013364  0100               	movlb	0	; () banked
 21702  013366  2BB4               	incf	Console_Init@y& (0+255),f,b
 21703  013368  D7CF               	goto	l11329
 21704  01336A                     l11339:
 21705                           
 21706                           ; BSR set to: 0
 21707  01336A  0100               	movlb	0	; () banked
 21708  01336C  2BB3               	incf	Console_Init@x& (0+255),f,b
 21709  01336E  D7C4               	goto	l11323
 21710  013370                     __end_of_Console_Init:
 21711                           	opt stack 0
 21712                           tosu	equ	0xFFF
 21713                           tosh	equ	0xFFE
 21714                           tosl	equ	0xFFD
 21715                           pclath	equ	0xFFA
 21716                           tblptru	equ	0xFF8
 21717                           tblptrh	equ	0xFF7
 21718                           tblptrl	equ	0xFF6
 21719                           tablat	equ	0xFF5
 21720                           prodh	equ	0xFF4
 21721                           prodl	equ	0xFF3
 21722                           intcon	equ	0xFF2
 21723                           indf0	equ	0xFEF
 21724                           postinc0	equ	0xFEE
 21725                           fsr0h	equ	0xFEA
 21726                           fsr0l	equ	0xFE9
 21727                           wreg	equ	0xFE8
 21728                           indf1	equ	0xFE7
 21729                           postdec1	equ	0xFE5
 21730                           plusw1	equ	0xFE3
 21731                           fsr1h	equ	0xFE2
 21732                           fsr1l	equ	0xFE1
 21733                           indf2	equ	0xFDF
 21734                           postinc2	equ	0xFDE
 21735                           postdec2	equ	0xFDD
 21736                           plusw2	equ	0xFDB
 21737                           fsr2h	equ	0xFDA
 21738                           fsr2l	equ	0xFD9
 21739                           status	equ	0xFD8
 21740                           
 21741 ;; *************** function _ISR_Function *****************
 21742 ;; Defined at:
 21743 ;;		line 38 in file "Library/ISR.c"
 21744 ;; Parameters:    Size  Location     Type
 21745 ;;		None
 21746 ;; Auto vars:     Size  Location     Type
 21747 ;;		None
 21748 ;; Return value:  Size  Location     Type
 21749 ;;                  1    wreg      void 
 21750 ;; Registers used:
 21751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21752 ;; Tracked objects:
 21753 ;;		On entry : 0/0
 21754 ;;		On exit  : 0/0
 21755 ;;		Unchanged: 0/0
 21756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21759 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21760 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21761 ;;Total ram usage:       14 bytes
 21762 ;; Hardware stack levels used:    1
 21763 ;; Hardware stack levels required when called:    6
 21764 ;; This function calls:
 21765 ;;		_Timer0_ISR
 21766 ;; This function is called by:
 21767 ;;		Interrupt level 2
 21768 ;; This function uses a non-reentrant model
 21769 ;;
 21770                           
 21771                           	psect	intcode
 21772  001408                     __pintcode:
 21773                           	opt stack 0
 21774  001408                     _ISR_Function:
 21775                           	opt stack 14
 21776                           
 21777                           ; BSR set to: 0
 21778                           ;incstack = 0
 21779  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21780  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 21781  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 21782  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 21783  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 21784  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 21785  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 21786  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 21787  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 21788  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 21789  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 21790  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 21791  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 21792  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 21793  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 21794                           
 21795                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 21796  001442  92F2               	bcf	intcon,1,c	;volatile
 21797                           
 21798                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 21799  001444  B4F2               	btfsc	intcon,2,c	;volatile
 21800  001446  AAF2               	btfss	intcon,5,c	;volatile
 21801  001448  D002               	goto	i2l1599
 21802                           
 21803                           ;ISR.c: 68: Timer0_ISR();
 21804  00144A  EC9B  F0A1         	call	_Timer0_ISR	;wreg free
 21805  00144E                     i2l1599:
 21806  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 21807  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 21808  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 21809  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 21810  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 21811  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 21812  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 21813  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 21814  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 21815  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 21816  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 21817  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 21818  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 21819  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 21820  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21821  001488  0011               	retfie		f
 21822  00148A                     __end_of_ISR_Function:
 21823                           	opt stack 0
 21824                           tosu	equ	0xFFF
 21825                           tosh	equ	0xFFE
 21826                           tosl	equ	0xFFD
 21827                           pclatu	equ	0xFFB
 21828                           pclath	equ	0xFFA
 21829                           tblptru	equ	0xFF8
 21830                           tblptrh	equ	0xFF7
 21831                           tblptrl	equ	0xFF6
 21832                           tablat	equ	0xFF5
 21833                           prodh	equ	0xFF4
 21834                           prodl	equ	0xFF3
 21835                           intcon	equ	0xFF2
 21836                           indf0	equ	0xFEF
 21837                           postinc0	equ	0xFEE
 21838                           fsr0h	equ	0xFEA
 21839                           fsr0l	equ	0xFE9
 21840                           wreg	equ	0xFE8
 21841                           indf1	equ	0xFE7
 21842                           postdec1	equ	0xFE5
 21843                           plusw1	equ	0xFE3
 21844                           fsr1h	equ	0xFE2
 21845                           fsr1l	equ	0xFE1
 21846                           indf2	equ	0xFDF
 21847                           postinc2	equ	0xFDE
 21848                           postdec2	equ	0xFDD
 21849                           plusw2	equ	0xFDB
 21850                           fsr2h	equ	0xFDA
 21851                           fsr2l	equ	0xFD9
 21852                           status	equ	0xFD8
 21853                           
 21854 ;; *************** function _Timer0_ISR *****************
 21855 ;; Defined at:
 21856 ;;		line 94 in file "Library/Timer0.c"
 21857 ;; Parameters:    Size  Location     Type
 21858 ;;		None
 21859 ;; Auto vars:     Size  Location     Type
 21860 ;;		None
 21861 ;; Return value:  Size  Location     Type
 21862 ;;                  1    wreg      void 
 21863 ;; Registers used:
 21864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21865 ;; Tracked objects:
 21866 ;;		On entry : 0/0
 21867 ;;		On exit  : 0/0
 21868 ;;		Unchanged: 0/0
 21869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21874 ;;Total ram usage:        0 bytes
 21875 ;; Hardware stack levels used:    1
 21876 ;; Hardware stack levels required when called:    5
 21877 ;; This function calls:
 21878 ;;		Absolute function
 21879 ;;		i2_Motor_Step
 21880 ;;		i2_Timer0_Stop
 21881 ;; This function is called by:
 21882 ;;		_ISR_Function
 21883 ;; This function uses a non-reentrant model
 21884 ;;
 21885                           
 21886                           	psect	text125
 21887  014336                     __ptext125:
 21888                           	opt stack 0
 21889  014336                     _Timer0_ISR:
 21890                           	opt stack 14
 21891                           
 21892                           ;Timer0.c: 96: Timer0_Stop();
 21893                           
 21894                           ;incstack = 0
 21895  014336  ECAF  F0A3         	call	i2_Timer0_Stop	;wreg free
 21896                           
 21897                           ;Timer0.c: 99: if (gISR != 0)
 21898  01433A  0100               	movlb	0	; () banked
 21899  01433C  5168               	movf	_gISR& (0+255),w,b
 21900  01433E  0100               	movlb	0	; () banked
 21901  014340  1169               	iorwf	(_gISR+1)& (0+255),w,b
 21902  014342  0100               	movlb	0	; () banked
 21903  014344  116A               	iorwf	(_gISR+2)& (0+255),w,b
 21904  014346  B4D8               	btfsc	status,2,c
 21905  014348  0012               	return	
 21906                           
 21907                           ; BSR set to: 0
 21908                           ;Timer0.c: 100: gISR();
 21909  01434A  D801               	call	i2u882_48
 21910  01434C  0012               	return	
 21911  01434E                     i2u882_48:
 21912  01434E  0005               	push	
 21913  014350  6EFA               	movwf	pclath,c
 21914  014352  0100               	movlb	0	; () banked
 21915  014354  5168               	movf	_gISR& (0+255),w,b
 21916  014356  6EFD               	movwf	tosl,c
 21917  014358  5169               	movf	(_gISR+1)& (0+255),w,b
 21918  01435A  6EFE               	movwf	tosh,c
 21919  01435C  516A               	movf	(_gISR+2)& (0+255),w,b
 21920  01435E  6EFF               	movwf	tosu,c
 21921  014360  50FA               	movf	pclath,w,c
 21922  014362  0012               	return		;indir
 21923  014364                     __end_of_Timer0_ISR:
 21924                           	opt stack 0
 21925                           tosu	equ	0xFFF
 21926                           tosh	equ	0xFFE
 21927                           tosl	equ	0xFFD
 21928                           pclatu	equ	0xFFB
 21929                           pclath	equ	0xFFA
 21930                           tblptru	equ	0xFF8
 21931                           tblptrh	equ	0xFF7
 21932                           tblptrl	equ	0xFF6
 21933                           tablat	equ	0xFF5
 21934                           prodh	equ	0xFF4
 21935                           prodl	equ	0xFF3
 21936                           intcon	equ	0xFF2
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           fsr0h	equ	0xFEA
 21940                           fsr0l	equ	0xFE9
 21941                           wreg	equ	0xFE8
 21942                           indf1	equ	0xFE7
 21943                           postdec1	equ	0xFE5
 21944                           plusw1	equ	0xFE3
 21945                           fsr1h	equ	0xFE2
 21946                           fsr1l	equ	0xFE1
 21947                           indf2	equ	0xFDF
 21948                           postinc2	equ	0xFDE
 21949                           postdec2	equ	0xFDD
 21950                           plusw2	equ	0xFDB
 21951                           fsr2h	equ	0xFDA
 21952                           fsr2l	equ	0xFD9
 21953                           status	equ	0xFD8
 21954                           
 21955 ;; *************** function i2_Motor_Step *****************
 21956 ;; Defined at:
 21957 ;;		line 75 in file "Library/Motor.c"
 21958 ;; Parameters:    Size  Location     Type
 21959 ;;		None
 21960 ;; Auto vars:     Size  Location     Type
 21961 ;;		None
 21962 ;; Return value:  Size  Location     Type
 21963 ;;                  1    wreg      void 
 21964 ;; Registers used:
 21965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21966 ;; Tracked objects:
 21967 ;;		On entry : 0/0
 21968 ;;		On exit  : 0/0
 21969 ;;		Unchanged: 0/0
 21970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21973 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21974 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21975 ;;Total ram usage:        2 bytes
 21976 ;; Hardware stack levels used:    1
 21977 ;; Hardware stack levels required when called:    4
 21978 ;; This function calls:
 21979 ;;		i2_MXK_Queue
 21980 ;;		i2_MXK_Release
 21981 ;;		i2_MXK_SwitchTo
 21982 ;;		i2_Port_SetPin
 21983 ;;		i2_Timer0_Restart
 21984 ;;		i2_Timer0_Stop
 21985 ;; This function is called by:
 21986 ;; This function uses a non-reentrant model
 21987 ;;
 21988                           
 21989                           	psect	text126
 21990  0121E8                     __ptext126:
 21991                           	opt stack 0
 21992  0121E8                     i2_Motor_Step:
 21993                           	opt stack 14
 21994                           
 21995                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 21996                           
 21997                           ;incstack = 0
 21998  0121E8  EE20 F004          	lfsr	2,4
 21999  0121EC  502A               	movf	_lMotor,w,c
 22000  0121EE  26D9               	addwf	fsr2l,f,c
 22001  0121F0  502B               	movf	_lMotor+1,w,c
 22002  0121F2  22DA               	addwfc	fsr2h,f,c
 22003  0121F4  50DF               	movf	indf2,w,c
 22004  0121F6  ECBE  F0A0         	call	i2_MXK_SwitchTo
 22005  0121FA  0900               	iorlw	0
 22006  0121FC  B4D8               	btfsc	status,2,c
 22007  0121FE  D06A               	goto	i2l8115
 22008                           
 22009                           ;Motor.c: 78: {
 22010                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 22011  012200  C02A  FFD9         	movff	_lMotor,fsr2l
 22012  012204  C02B  FFDA         	movff	_lMotor+1,fsr2h
 22013  012208  50DE               	movf	postinc2,w,c
 22014  01220A  10DE               	iorwf	postinc2,w,c
 22015  01220C  B4D8               	btfsc	status,2,c
 22016  01220E  D05D               	goto	i2l8109
 22017                           
 22018                           ;Motor.c: 80: {
 22019                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 22020  012210  C02A  FFD9         	movff	_lMotor,fsr2l
 22021  012214  C02B  FFDA         	movff	_lMotor+1,fsr2h
 22022  012218  0E01               	movlw	1
 22023  01221A  BEDB               	btfsc	plusw2,7,c
 22024  01221C  D022               	goto	i2l8093
 22025  01221E  0E01               	movlw	1
 22026  012220  50DB               	movf	plusw2,w,c
 22027  012222  E103               	bnz	i2u477_40
 22028  012224  04DE               	decf	postinc2,w,c
 22029  012226  A0D8               	btfss	status,0,c
 22030  012228  D01C               	goto	i2l8093
 22031  01222A                     i2u477_40:
 22032                           
 22033                           ;Motor.c: 83: {
 22034                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 22035  01222A  C02A  FFD9         	movff	_lMotor,fsr2l
 22036  01222E  C02B  FFDA         	movff	_lMotor+1,fsr2h
 22037  012232  28DE               	incf	postinc2,w,c
 22038  012234  E104               	bnz	i2u478_40
 22039  012236  0E7F               	movlw	127
 22040  012238  18DE               	xorwf	postinc2,w,c
 22041  01223A  B4D8               	btfsc	status,2,c
 22042  01223C  D007               	goto	i2l8091
 22043  01223E                     i2u478_40:
 22044                           
 22045                           ;Motor.c: 85: lMotor->mDelta --;
 22046  01223E  C02A  FFD9         	movff	_lMotor,fsr2l
 22047  012242  C02B  FFDA         	movff	_lMotor+1,fsr2h
 22048  012246  06DE               	decf	postinc2,f,c
 22049  012248  0E00               	movlw	0
 22050  01224A  5ADD               	subwfb	postdec2,f,c
 22051  01224C                     i2l8091:
 22052                           
 22053                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 22054  01224C  0E81               	movlw	low _PortE
 22055  01224E  6E10               	movwf	i2Port_SetPin@pInput,c
 22056  012250  0E00               	movlw	high _PortE
 22057  012252  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22058  012254  0E00               	movlw	0
 22059  012256  6E12               	movwf	i2Port_SetPin@pPin,c
 22060  012258  0E01               	movlw	1
 22061  01225A  6E13               	movwf	i2Port_SetPin@pValue,c
 22062  01225C  EC19  F096         	call	i2_Port_SetPin	;wreg free
 22063                           
 22064                           ;Motor.c: 88: }
 22065  012260  D01B               	goto	i2l8099
 22066  012262                     i2l8093:
 22067                           
 22068                           ;Motor.c: 89: else
 22069                           ;Motor.c: 90: {
 22070                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 22071  012262  C02A  FFD9         	movff	_lMotor,fsr2l
 22072  012266  C02B  FFDA         	movff	_lMotor+1,fsr2h
 22073  01226A  04DE               	decf	postinc2,w,c
 22074  01226C  E104               	bnz	i2u479_40
 22075  01226E  0E80               	movlw	128
 22076  012270  18DE               	xorwf	postinc2,w,c
 22077  012272  B4D8               	btfsc	status,2,c
 22078  012274  D007               	goto	i2l8097
 22079  012276                     i2u479_40:
 22080                           
 22081                           ;Motor.c: 92: lMotor->mDelta ++;
 22082  012276  C02A  FFD9         	movff	_lMotor,fsr2l
 22083  01227A  C02B  FFDA         	movff	_lMotor+1,fsr2h
 22084  01227E  2ADE               	incf	postinc2,f,c
 22085  012280  0E00               	movlw	0
 22086  012282  22DD               	addwfc	postdec2,f,c
 22087  012284                     i2l8097:
 22088                           
 22089                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 22090  012284  0E81               	movlw	low _PortE
 22091  012286  6E10               	movwf	i2Port_SetPin@pInput,c
 22092  012288  0E00               	movlw	high _PortE
 22093  01228A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22094  01228C  0E00               	movlw	0
 22095  01228E  6E12               	movwf	i2Port_SetPin@pPin,c
 22096  012290  0E00               	movlw	0
 22097  012292  6E13               	movwf	i2Port_SetPin@pValue,c
 22098  012294  EC19  F096         	call	i2_Port_SetPin	;wreg free
 22099  012298                     i2l8099:
 22100                           
 22101                           ;Motor.c: 95: }
 22102                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 22103  012298  0E81               	movlw	low _PortE
 22104  01229A  6E10               	movwf	i2Port_SetPin@pInput,c
 22105  01229C  0E00               	movlw	high _PortE
 22106  01229E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22107  0122A0  0E01               	movlw	1
 22108  0122A2  6E12               	movwf	i2Port_SetPin@pPin,c
 22109  0122A4  0E01               	movlw	1
 22110  0122A6  6E13               	movwf	i2Port_SetPin@pValue,c
 22111  0122A8  EC19  F096         	call	i2_Port_SetPin	;wreg free
 22112                           
 22113                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 22114  0122AC  0E81               	movlw	low _PortE
 22115  0122AE  6E10               	movwf	i2Port_SetPin@pInput,c
 22116  0122B0  0E00               	movlw	high _PortE
 22117  0122B2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22118  0122B4  0E01               	movlw	1
 22119  0122B6  6E12               	movwf	i2Port_SetPin@pPin,c
 22120  0122B8  0E00               	movlw	0
 22121  0122BA  6E13               	movwf	i2Port_SetPin@pValue,c
 22122  0122BC  EC19  F096         	call	i2_Port_SetPin	;wreg free
 22123                           
 22124                           ;Motor.c: 101: MXK_Release();
 22125  0122C0  ECB2  F0A3         	call	i2_MXK_Release	;wreg free
 22126                           
 22127                           ;Motor.c: 102: Timer0_Restart();
 22128  0122C4  EC87  F0A3         	call	i2_Timer0_Restart	;wreg free
 22129                           
 22130                           ;Motor.c: 103: return;
 22131  0122C8  0012               	return	
 22132  0122CA                     i2l8109:
 22133                           
 22134                           ;Motor.c: 104: }
 22135                           ;Motor.c: 105: MXK_Release();
 22136  0122CA  ECB2  F0A3         	call	i2_MXK_Release	;wreg free
 22137                           
 22138                           ;Motor.c: 106: Timer0_Stop();
 22139  0122CE  ECAF  F0A3         	call	i2_Timer0_Stop	;wreg free
 22140                           
 22141                           ;Motor.c: 107: return;
 22142  0122D2  0012               	return	
 22143  0122D4                     i2l8115:
 22144                           
 22145                           ;Motor.c: 108: }
 22146                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 22147  0122D4  C06B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 22148  0122D8  C06C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 22149  0122DC  C06D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 22150  0122E0  EC74  F0A3         	call	i2_MXK_Queue	;wreg free
 22151  0122E4  0012               	return		;funcret
 22152  0122E6                     __end_ofi2_Motor_Step:
 22153                           	opt stack 0
 22154                           tosu	equ	0xFFF
 22155                           tosh	equ	0xFFE
 22156                           tosl	equ	0xFFD
 22157                           pclatu	equ	0xFFB
 22158                           pclath	equ	0xFFA
 22159                           tblptru	equ	0xFF8
 22160                           tblptrh	equ	0xFF7
 22161                           tblptrl	equ	0xFF6
 22162                           tablat	equ	0xFF5
 22163                           prodh	equ	0xFF4
 22164                           prodl	equ	0xFF3
 22165                           intcon	equ	0xFF2
 22166                           indf0	equ	0xFEF
 22167                           postinc0	equ	0xFEE
 22168                           fsr0h	equ	0xFEA
 22169                           fsr0l	equ	0xFE9
 22170                           wreg	equ	0xFE8
 22171                           indf1	equ	0xFE7
 22172                           postdec1	equ	0xFE5
 22173                           plusw1	equ	0xFE3
 22174                           fsr1h	equ	0xFE2
 22175                           fsr1l	equ	0xFE1
 22176                           indf2	equ	0xFDF
 22177                           postinc2	equ	0xFDE
 22178                           postdec2	equ	0xFDD
 22179                           plusw2	equ	0xFDB
 22180                           fsr2h	equ	0xFDA
 22181                           fsr2l	equ	0xFD9
 22182                           status	equ	0xFD8
 22183                           
 22184 ;; *************** function i2_Timer0_Stop *****************
 22185 ;; Defined at:
 22186 ;;		line 89 in file "Library/Timer0.c"
 22187 ;; Parameters:    Size  Location     Type
 22188 ;;		None
 22189 ;; Auto vars:     Size  Location     Type
 22190 ;;		None
 22191 ;; Return value:  Size  Location     Type
 22192 ;;                  1    wreg      void 
 22193 ;; Registers used:
 22194 ;;		None
 22195 ;; Tracked objects:
 22196 ;;		On entry : 0/0
 22197 ;;		On exit  : 0/0
 22198 ;;		Unchanged: 0/0
 22199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22204 ;;Total ram usage:        0 bytes
 22205 ;; Hardware stack levels used:    1
 22206 ;; This function calls:
 22207 ;;		Nothing
 22208 ;; This function is called by:
 22209 ;;		_Timer0_ISR
 22210 ;;		i2_Motor_Step
 22211 ;; This function uses a non-reentrant model
 22212 ;;
 22213                           
 22214                           	psect	text127
 22215  01475E                     __ptext127:
 22216                           	opt stack 0
 22217  01475E                     i2_Timer0_Stop:
 22218                           	opt stack 18
 22219                           
 22220                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 22221                           
 22222                           ;incstack = 0
 22223  01475E  9AF2               	bcf	intcon,5,c	;volatile
 22224                           
 22225                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 22226  014760  94F2               	bcf	intcon,2,c	;volatile
 22227  014762  0012               	return		;funcret
 22228  014764                     __end_ofi2_Timer0_Stop:
 22229                           	opt stack 0
 22230                           tosu	equ	0xFFF
 22231                           tosh	equ	0xFFE
 22232                           tosl	equ	0xFFD
 22233                           pclatu	equ	0xFFB
 22234                           pclath	equ	0xFFA
 22235                           tblptru	equ	0xFF8
 22236                           tblptrh	equ	0xFF7
 22237                           tblptrl	equ	0xFF6
 22238                           tablat	equ	0xFF5
 22239                           prodh	equ	0xFF4
 22240                           prodl	equ	0xFF3
 22241                           intcon	equ	0xFF2
 22242                           indf0	equ	0xFEF
 22243                           postinc0	equ	0xFEE
 22244                           fsr0h	equ	0xFEA
 22245                           fsr0l	equ	0xFE9
 22246                           wreg	equ	0xFE8
 22247                           indf1	equ	0xFE7
 22248                           postdec1	equ	0xFE5
 22249                           plusw1	equ	0xFE3
 22250                           fsr1h	equ	0xFE2
 22251                           fsr1l	equ	0xFE1
 22252                           indf2	equ	0xFDF
 22253                           postinc2	equ	0xFDE
 22254                           postdec2	equ	0xFDD
 22255                           plusw2	equ	0xFDB
 22256                           fsr2h	equ	0xFDA
 22257                           fsr2l	equ	0xFD9
 22258                           status	equ	0xFD8
 22259                           
 22260 ;; *************** function i2_Timer0_Restart *****************
 22261 ;; Defined at:
 22262 ;;		line 83 in file "Library/Timer0.c"
 22263 ;; Parameters:    Size  Location     Type
 22264 ;;		None
 22265 ;; Auto vars:     Size  Location     Type
 22266 ;;		None
 22267 ;; Return value:  Size  Location     Type
 22268 ;;                  1    wreg      void 
 22269 ;; Registers used:
 22270 ;;		None
 22271 ;; Tracked objects:
 22272 ;;		On entry : 0/0
 22273 ;;		On exit  : 0/0
 22274 ;;		Unchanged: 0/0
 22275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22280 ;;Total ram usage:        0 bytes
 22281 ;; Hardware stack levels used:    1
 22282 ;; This function calls:
 22283 ;;		Nothing
 22284 ;; This function is called by:
 22285 ;;		i2_Motor_Step
 22286 ;; This function uses a non-reentrant model
 22287 ;;
 22288                           
 22289                           	psect	text128
 22290  01470E                     __ptext128:
 22291                           	opt stack 0
 22292  01470E                     i2_Timer0_Restart:
 22293                           	opt stack 17
 22294                           
 22295                           ;Timer0.c: 85: TMR0 = COUNTER;
 22296                           
 22297                           ;incstack = 0
 22298  01470E  C028  FFD6         	movff	_COUNTER,4054	;volatile
 22299  014712  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 22300                           
 22301                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 22302  014716  8AF2               	bsf	intcon,5,c	;volatile
 22303  014718  0012               	return		;funcret
 22304  01471A                     __end_ofi2_Timer0_Restart:
 22305                           	opt stack 0
 22306                           tosu	equ	0xFFF
 22307                           tosh	equ	0xFFE
 22308                           tosl	equ	0xFFD
 22309                           pclatu	equ	0xFFB
 22310                           pclath	equ	0xFFA
 22311                           tblptru	equ	0xFF8
 22312                           tblptrh	equ	0xFF7
 22313                           tblptrl	equ	0xFF6
 22314                           tablat	equ	0xFF5
 22315                           prodh	equ	0xFF4
 22316                           prodl	equ	0xFF3
 22317                           intcon	equ	0xFF2
 22318                           indf0	equ	0xFEF
 22319                           postinc0	equ	0xFEE
 22320                           fsr0h	equ	0xFEA
 22321                           fsr0l	equ	0xFE9
 22322                           wreg	equ	0xFE8
 22323                           indf1	equ	0xFE7
 22324                           postdec1	equ	0xFE5
 22325                           plusw1	equ	0xFE3
 22326                           fsr1h	equ	0xFE2
 22327                           fsr1l	equ	0xFE1
 22328                           indf2	equ	0xFDF
 22329                           postinc2	equ	0xFDE
 22330                           postdec2	equ	0xFDD
 22331                           plusw2	equ	0xFDB
 22332                           fsr2h	equ	0xFDA
 22333                           fsr2l	equ	0xFD9
 22334                           status	equ	0xFD8
 22335                           
 22336 ;; *************** function i2_Port_SetPin *****************
 22337 ;; Defined at:
 22338 ;;		line 247 in file "Library/Port.c"
 22339 ;; Parameters:    Size  Location     Type
 22340 ;;  pInput          2   15[COMRAM] const PTR struct Port
 22341 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22342 ;;  pPin            1   17[COMRAM] enum E6750
 22343 ;;  pValue          1   18[COMRAM] unsigned char 
 22344 ;; Auto vars:     Size  Location     Type
 22345 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 22346 ;; Return value:  Size  Location     Type
 22347 ;;                  1    wreg      void 
 22348 ;; Registers used:
 22349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22350 ;; Tracked objects:
 22351 ;;		On entry : 0/0
 22352 ;;		On exit  : 0/0
 22353 ;;		Unchanged: 0/0
 22354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22355 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22358 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22359 ;;Total ram usage:        5 bytes
 22360 ;; Hardware stack levels used:    1
 22361 ;; Hardware stack levels required when called:    3
 22362 ;; This function calls:
 22363 ;;		i2_Byte_SetBit
 22364 ;;		i2_Word_GetPair
 22365 ;; This function is called by:
 22366 ;;		i2_Motor_Step
 22367 ;; This function uses a non-reentrant model
 22368 ;;
 22369                           
 22370                           	psect	text129
 22371  012C32                     __ptext129:
 22372                           	opt stack 0
 22373  012C32                     i2_Port_SetPin:
 22374                           	opt stack 14
 22375                           
 22376                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22377                           
 22378                           ;incstack = 0
 22379  012C32  0E08               	movlw	8
 22380  012C34  2410               	addwf	i2Port_SetPin@pInput,w,c
 22381  012C36  6E0D               	movwf	i2Word_GetPair@pInput,c
 22382  012C38  0E00               	movlw	0
 22383  012C3A  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 22384  012C3C  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 22385  012C3E  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 22386  012C42  EC6C  F0A1         	call	i2_Word_GetPair	;wreg free
 22387  012C46  6E14               	movwf	i2Port_SetPin@Type,c
 22388                           
 22389                           ;Port.c: 250: switch (Type)
 22390  012C48  D03B               	goto	i2l7627
 22391  012C4A                     i2l7613:
 22392                           
 22393                           ;Port.c: 256: pValue &= 1;
 22394  012C4A  0E01               	movlw	1
 22395  012C4C  1613               	andwf	i2Port_SetPin@pValue,f,c
 22396                           
 22397                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22398  012C4E  EE20 F002          	lfsr	2,2
 22399  012C52  5010               	movf	i2Port_SetPin@pInput,w,c
 22400  012C54  26D9               	addwf	fsr2l,f,c
 22401  012C56  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22402  012C58  22DA               	addwfc	fsr2h,f,c
 22403  012C5A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22404  012C5E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22405  012C62  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22406  012C66  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22407  012C6A  EC8F  F09E         	call	i2_Byte_SetBit	;wreg free
 22408                           
 22409                           ;Port.c: 258: break;
 22410  012C6E  0012               	return	
 22411  012C70                     i2l7617:
 22412                           
 22413                           ;Port.c: 261: pValue &= 1;
 22414  012C70  0E01               	movlw	1
 22415  012C72  1613               	andwf	i2Port_SetPin@pValue,f,c
 22416                           
 22417                           ;Port.c: 262: pValue ^= 1;
 22418  012C74  0E01               	movlw	1
 22419  012C76  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 22420                           
 22421                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22422  012C78  EE20 F002          	lfsr	2,2
 22423  012C7C  5010               	movf	i2Port_SetPin@pInput,w,c
 22424  012C7E  26D9               	addwf	fsr2l,f,c
 22425  012C80  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22426  012C82  22DA               	addwfc	fsr2h,f,c
 22427  012C84  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22428  012C88  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22429  012C8C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22430  012C90  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22431  012C94  EC8F  F09E         	call	i2_Byte_SetBit	;wreg free
 22432                           
 22433                           ;Port.c: 264: break;
 22434  012C98  0012               	return	
 22435  012C9A                     i2l7621:
 22436                           
 22437                           ;Port.c: 266: pValue &= 1;
 22438  012C9A  0E01               	movlw	1
 22439  012C9C  1613               	andwf	i2Port_SetPin@pValue,f,c
 22440                           
 22441                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22442  012C9E  EE20 F004          	lfsr	2,4
 22443  012CA2  5010               	movf	i2Port_SetPin@pInput,w,c
 22444  012CA4  26D9               	addwf	fsr2l,f,c
 22445  012CA6  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22446  012CA8  22DA               	addwfc	fsr2h,f,c
 22447  012CAA  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22448  012CAE  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22449  012CB2  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22450  012CB6  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22451  012CBA  EC8F  F09E         	call	i2_Byte_SetBit	;wreg free
 22452                           
 22453                           ;Port.c: 269: }
 22454                           
 22455                           ;Port.c: 268: break;
 22456  012CBE  0012               	return	
 22457  012CC0                     i2l7627:
 22458  012CC0  5014               	movf	i2Port_SetPin@Type,w,c
 22459                           
 22460                           ; Switch size 1, requested type "space"
 22461                           ; Number of cases is 4, Range of values is 0 to 3
 22462                           ; switch strategies available:
 22463                           ; Name         Instructions Cycles
 22464                           ; simple_byte           13     7 (average)
 22465                           ;	Chosen strategy is simple_byte
 22466  012CC2  0A00               	xorlw	0	; case 0
 22467  012CC4  B4D8               	btfsc	status,2,c
 22468  012CC6  0012               	return	
 22469  012CC8  0A01               	xorlw	1	; case 1
 22470  012CCA  B4D8               	btfsc	status,2,c
 22471  012CCC  D7BE               	goto	i2l7613
 22472  012CCE  0A03               	xorlw	3	; case 2
 22473  012CD0  B4D8               	btfsc	status,2,c
 22474  012CD2  D7CE               	goto	i2l7617
 22475  012CD4  0A01               	xorlw	1	; case 3
 22476  012CD6  A4D8               	btfss	status,2,c
 22477  012CD8  0012               	return	
 22478  012CDA  D7DF               	goto	i2l7621
 22479  012CDC                     __end_ofi2_Port_SetPin:
 22480                           	opt stack 0
 22481                           tosu	equ	0xFFF
 22482                           tosh	equ	0xFFE
 22483                           tosl	equ	0xFFD
 22484                           pclatu	equ	0xFFB
 22485                           pclath	equ	0xFFA
 22486                           tblptru	equ	0xFF8
 22487                           tblptrh	equ	0xFF7
 22488                           tblptrl	equ	0xFF6
 22489                           tablat	equ	0xFF5
 22490                           prodh	equ	0xFF4
 22491                           prodl	equ	0xFF3
 22492                           intcon	equ	0xFF2
 22493                           indf0	equ	0xFEF
 22494                           postinc0	equ	0xFEE
 22495                           fsr0h	equ	0xFEA
 22496                           fsr0l	equ	0xFE9
 22497                           wreg	equ	0xFE8
 22498                           indf1	equ	0xFE7
 22499                           postdec1	equ	0xFE5
 22500                           plusw1	equ	0xFE3
 22501                           fsr1h	equ	0xFE2
 22502                           fsr1l	equ	0xFE1
 22503                           indf2	equ	0xFDF
 22504                           postinc2	equ	0xFDE
 22505                           postdec2	equ	0xFDD
 22506                           plusw2	equ	0xFDB
 22507                           fsr2h	equ	0xFDA
 22508                           fsr2l	equ	0xFD9
 22509                           status	equ	0xFD8
 22510                           
 22511 ;; *************** function i2_Word_GetPair *****************
 22512 ;; Defined at:
 22513 ;;		line 156 in file "Library/Types.c"
 22514 ;; Parameters:    Size  Location     Type
 22515 ;;  pInput          2   12[COMRAM] PTR struct Word
 22516 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22517 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22518 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22519 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22520 ;;  pPair           1   14[COMRAM] unsigned char 
 22521 ;; Auto vars:     Size  Location     Type
 22522 ;;		None
 22523 ;; Return value:  Size  Location     Type
 22524 ;;                  1    wreg      unsigned char 
 22525 ;; Registers used:
 22526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22527 ;; Tracked objects:
 22528 ;;		On entry : 0/0
 22529 ;;		On exit  : 0/0
 22530 ;;		Unchanged: 0/0
 22531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22532 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22535 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22536 ;;Total ram usage:        3 bytes
 22537 ;; Hardware stack levels used:    1
 22538 ;; Hardware stack levels required when called:    2
 22539 ;; This function calls:
 22540 ;;		i2_Byte_GetPair
 22541 ;; This function is called by:
 22542 ;;		i2_Port_SetPin
 22543 ;; This function uses a non-reentrant model
 22544 ;;
 22545                           
 22546                           	psect	text130
 22547  0142D8                     __ptext130:
 22548                           	opt stack 0
 22549  0142D8                     i2_Word_GetPair:
 22550                           	opt stack 14
 22551                           
 22552                           ;Types.c: 158: if (pPair >= 4)
 22553                           
 22554                           ;incstack = 0
 22555  0142D8  0E03               	movlw	3
 22556  0142DA  640F               	cpfsgt	i2Word_GetPair@pPair,c
 22557  0142DC  D00C               	goto	i2l7081
 22558                           
 22559                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22560  0142DE  0E01               	movlw	1
 22561  0142E0  240D               	addwf	i2Word_GetPair@pInput,w,c
 22562  0142E2  6E0A               	movwf	i2Byte_GetPair@pInput,c
 22563  0142E4  0E00               	movlw	0
 22564  0142E6  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 22565  0142E8  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 22566  0142EA  500F               	movf	i2Word_GetPair@pPair,w,c
 22567  0142EC  0FFC               	addlw	252
 22568  0142EE  6E0C               	movwf	i2Byte_GetPair@pPair,c
 22569  0142F0  ECB2  F0A2         	call	i2_Byte_GetPair	;wreg free
 22570  0142F4  0012               	return	
 22571  0142F6                     i2l7081:
 22572                           
 22573                           ;Types.c: 160: else
 22574                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22575  0142F6  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 22576  0142FA  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 22577  0142FE  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 22578  014302  ECB2  F0A2         	call	i2_Byte_GetPair	;wreg free
 22579  014306  0012               	return	
 22580  014308                     __end_ofi2_Word_GetPair:
 22581                           	opt stack 0
 22582                           tosu	equ	0xFFF
 22583                           tosh	equ	0xFFE
 22584                           tosl	equ	0xFFD
 22585                           pclatu	equ	0xFFB
 22586                           pclath	equ	0xFFA
 22587                           tblptru	equ	0xFF8
 22588                           tblptrh	equ	0xFF7
 22589                           tblptrl	equ	0xFF6
 22590                           tablat	equ	0xFF5
 22591                           prodh	equ	0xFF4
 22592                           prodl	equ	0xFF3
 22593                           intcon	equ	0xFF2
 22594                           indf0	equ	0xFEF
 22595                           postinc0	equ	0xFEE
 22596                           fsr0h	equ	0xFEA
 22597                           fsr0l	equ	0xFE9
 22598                           wreg	equ	0xFE8
 22599                           indf1	equ	0xFE7
 22600                           postdec1	equ	0xFE5
 22601                           plusw1	equ	0xFE3
 22602                           fsr1h	equ	0xFE2
 22603                           fsr1l	equ	0xFE1
 22604                           indf2	equ	0xFDF
 22605                           postinc2	equ	0xFDE
 22606                           postdec2	equ	0xFDD
 22607                           plusw2	equ	0xFDB
 22608                           fsr2h	equ	0xFDA
 22609                           fsr2l	equ	0xFD9
 22610                           status	equ	0xFD8
 22611                           
 22612 ;; *************** function i2_Byte_GetPair *****************
 22613 ;; Defined at:
 22614 ;;		line 87 in file "Library/Types.c"
 22615 ;; Parameters:    Size  Location     Type
 22616 ;;  pInput          2    9[COMRAM] PTR struct Byte
 22617 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22618 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22619 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22620 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22621 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22622 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22623 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22624 ;;		 -> NULL(0), 
 22625 ;;  pPair           1   11[COMRAM] unsigned char 
 22626 ;; Auto vars:     Size  Location     Type
 22627 ;;		None
 22628 ;; Return value:  Size  Location     Type
 22629 ;;                  1    wreg      unsigned char 
 22630 ;; Registers used:
 22631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22632 ;; Tracked objects:
 22633 ;;		On entry : 0/0
 22634 ;;		On exit  : 0/0
 22635 ;;		Unchanged: 0/0
 22636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22637 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22640 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22641 ;;Total ram usage:        3 bytes
 22642 ;; Hardware stack levels used:    1
 22643 ;; Hardware stack levels required when called:    1
 22644 ;; This function calls:
 22645 ;;		i2_Byte_GetZone
 22646 ;; This function is called by:
 22647 ;;		i2_Word_GetPair
 22648 ;; This function uses a non-reentrant model
 22649 ;;
 22650                           
 22651                           	psect	text131
 22652  014564                     __ptext131:
 22653                           	opt stack 0
 22654  014564                     i2_Byte_GetPair:
 22655                           	opt stack 14
 22656                           
 22657                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22658                           
 22659                           ;incstack = 0
 22660  014564  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 22661  014568  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 22662  01456C  0E04               	movlw	4
 22663  01456E  6E03               	movwf	i2Byte_GetZone@pMax,c
 22664  014570  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 22665  014574  0E02               	movlw	2
 22666  014576  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 22667  014578  EC73  F09A         	call	i2_Byte_GetZone	;wreg free
 22668  01457C  0012               	return	
 22669  01457E                     __end_ofi2_Byte_GetPair:
 22670                           	opt stack 0
 22671                           tosu	equ	0xFFF
 22672                           tosh	equ	0xFFE
 22673                           tosl	equ	0xFFD
 22674                           pclatu	equ	0xFFB
 22675                           pclath	equ	0xFFA
 22676                           tblptru	equ	0xFF8
 22677                           tblptrh	equ	0xFF7
 22678                           tblptrl	equ	0xFF6
 22679                           tablat	equ	0xFF5
 22680                           prodh	equ	0xFF4
 22681                           prodl	equ	0xFF3
 22682                           intcon	equ	0xFF2
 22683                           indf0	equ	0xFEF
 22684                           postinc0	equ	0xFEE
 22685                           fsr0h	equ	0xFEA
 22686                           fsr0l	equ	0xFE9
 22687                           wreg	equ	0xFE8
 22688                           indf1	equ	0xFE7
 22689                           postdec1	equ	0xFE5
 22690                           plusw1	equ	0xFE3
 22691                           fsr1h	equ	0xFE2
 22692                           fsr1l	equ	0xFE1
 22693                           indf2	equ	0xFDF
 22694                           postinc2	equ	0xFDE
 22695                           postdec2	equ	0xFDD
 22696                           plusw2	equ	0xFDB
 22697                           fsr2h	equ	0xFDA
 22698                           fsr2l	equ	0xFD9
 22699                           status	equ	0xFD8
 22700                           
 22701 ;; *************** function i2_Byte_GetZone *****************
 22702 ;; Defined at:
 22703 ;;		line 64 in file "Library/Types.c"
 22704 ;; Parameters:    Size  Location     Type
 22705 ;;  pInput          2    0[COMRAM] PTR struct Byte
 22706 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22707 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22708 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22709 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22710 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22711 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22712 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22713 ;;		 -> NULL(0), 
 22714 ;;  pMax            1    2[COMRAM] unsigned char 
 22715 ;;  pChunk          1    3[COMRAM] unsigned char 
 22716 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 22717 ;; Auto vars:     Size  Location     Type
 22718 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 22719 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 22720 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 22721 ;; Return value:  Size  Location     Type
 22722 ;;                  1    wreg      unsigned char 
 22723 ;; Registers used:
 22724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22725 ;; Tracked objects:
 22726 ;;		On entry : 0/0
 22727 ;;		On exit  : 0/0
 22728 ;;		Unchanged: 0/0
 22729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22730 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22731 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22733 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22734 ;;Total ram usage:        9 bytes
 22735 ;; Hardware stack levels used:    1
 22736 ;; This function calls:
 22737 ;;		Nothing
 22738 ;; This function is called by:
 22739 ;;		i2_Byte_GetPair
 22740 ;; This function uses a non-reentrant model
 22741 ;;
 22742                           
 22743                           	psect	text132
 22744  0134E6                     __ptext132:
 22745                           	opt stack 0
 22746  0134E6                     i2_Byte_GetZone:
 22747                           	opt stack 14
 22748                           
 22749                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22750                           
 22751                           ;incstack = 0
 22752  0134E6  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 22753  0134EA  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 22754  0134EE  0E00               	movlw	low (__mediumconst shr (0+16))
 22755  0134F0  6EF8               	movwf	tblptru,c
 22756  0134F2  0E0F               	movlw	(high __ramtop+-1)
 22757  0134F4  64F7               	cpfsgt	tblptrh,c
 22758  0134F6  D003               	bra	i2u335_47
 22759  0134F8  0008               	tblrd		*
 22760  0134FA  50F5               	movf	tablat,w,c
 22761  0134FC  D005               	bra	i2u335_40
 22762  0134FE                     i2u335_47:
 22763  0134FE  CFF6 FFE9          	movff	tblptrl,fsr0l
 22764  013502  CFF7 FFEA          	movff	tblptrh,fsr0h
 22765  013506  50EF               	movf	indf0,w,c
 22766  013508                     i2u335_40:
 22767  013508  6E09               	movwf	i2Byte_GetZone@Output,c
 22768                           
 22769                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22770  01350A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 22771  01350C  0D01               	mullw	1
 22772  01350E  0EEB               	movlw	low _MASKS
 22773  013510  24F3               	addwf	prodl,w,c
 22774  013512  6EF6               	movwf	tblptrl,c
 22775  013514  0EFD               	movlw	high _MASKS
 22776  013516  20F4               	addwfc	prodh,w,c
 22777  013518  6EF7               	movwf	tblptrh,c
 22778  01351A                     	if	1	;There are 3 active tblptr bytes
 22779  01351A  6AF8               	clrf	tblptru,c
 22780  01351C  0E00               	movlw	low (__mediumconst shr (0+16))
 22781  01351E  22F8               	addwfc	tblptru,f,c
 22782  013520                     	endif
 22783  013520  0008               	tblrd		*
 22784  013522  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 22785                           
 22786                           ;Types.c: 68: UINT8 Offset = 0;
 22787  013526  0E00               	movlw	0
 22788  013528  6E08               	movwf	i2Byte_GetZone@Offset,c
 22789                           
 22790                           ;Types.c: 70: while (pChunk >= pMax)
 22791  01352A  D003               	goto	i2l6621
 22792  01352C                     i2l6617:
 22793                           
 22794                           ;Types.c: 71: {
 22795                           ;Types.c: 72: pChunk -= pMax;
 22796  01352C  5003               	movf	i2Byte_GetZone@pMax,w,c
 22797  01352E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 22798                           
 22799                           ;Types.c: 73: Offset += 1;
 22800  013530  2A08               	incf	i2Byte_GetZone@Offset,f,c
 22801  013532                     i2l6621:
 22802  013532  5003               	movf	i2Byte_GetZone@pMax,w,c
 22803  013534  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 22804  013536  B0D8               	btfsc	status,0,c
 22805  013538  D7F9               	goto	i2l6617
 22806                           
 22807                           ;Types.c: 74: }
 22808                           ;Types.c: 75: pChunk *= pChunkSize;
 22809  01353A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 22810  01353C  0204               	mulwf	i2Byte_GetZone@pChunk,c
 22811  01353E  50F3               	movf	prodl,w,c
 22812  013540  6E04               	movwf	i2Byte_GetZone@pChunk,c
 22813                           
 22814                           ;Types.c: 76: pChunk += Offset;
 22815  013542  5008               	movf	i2Byte_GetZone@Offset,w,c
 22816  013544  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 22817                           
 22818                           ;Types.c: 78: Output >>= pChunk;
 22819  013546  2804               	incf	i2Byte_GetZone@pChunk,w,c
 22820  013548  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 22821  01354A  D002               	goto	i2u337_40
 22822  01354C                     i2u337_45:
 22823  01354C  90D8               	bcf	status,0,c
 22824  01354E  3209               	rrcf	i2Byte_GetZone@Output,f,c
 22825  013550                     i2u337_40:
 22826  013550  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 22827  013552  D7FC               	goto	i2u337_45
 22828                           
 22829                           ;Types.c: 79: Output &= MASK;
 22830  013554  5007               	movf	i2Byte_GetZone@MASK,w,c
 22831  013556  1609               	andwf	i2Byte_GetZone@Output,f,c
 22832                           
 22833                           ;Types.c: 80: return Output;
 22834  013558  5009               	movf	i2Byte_GetZone@Output,w,c
 22835  01355A  0012               	return	
 22836  01355C                     __end_ofi2_Byte_GetZone:
 22837                           	opt stack 0
 22838                           tosu	equ	0xFFF
 22839                           tosh	equ	0xFFE
 22840                           tosl	equ	0xFFD
 22841                           pclatu	equ	0xFFB
 22842                           pclath	equ	0xFFA
 22843                           tblptru	equ	0xFF8
 22844                           tblptrh	equ	0xFF7
 22845                           tblptrl	equ	0xFF6
 22846                           tablat	equ	0xFF5
 22847                           prodh	equ	0xFF4
 22848                           prodl	equ	0xFF3
 22849                           intcon	equ	0xFF2
 22850                           indf0	equ	0xFEF
 22851                           postinc0	equ	0xFEE
 22852                           fsr0h	equ	0xFEA
 22853                           fsr0l	equ	0xFE9
 22854                           wreg	equ	0xFE8
 22855                           indf1	equ	0xFE7
 22856                           postdec1	equ	0xFE5
 22857                           plusw1	equ	0xFE3
 22858                           fsr1h	equ	0xFE2
 22859                           fsr1l	equ	0xFE1
 22860                           indf2	equ	0xFDF
 22861                           postinc2	equ	0xFDE
 22862                           postdec2	equ	0xFDD
 22863                           plusw2	equ	0xFDB
 22864                           fsr2h	equ	0xFDA
 22865                           fsr2l	equ	0xFD9
 22866                           status	equ	0xFD8
 22867                           
 22868 ;; *************** function i2_Byte_SetBit *****************
 22869 ;; Defined at:
 22870 ;;		line 32 in file "Library/Types.c"
 22871 ;; Parameters:    Size  Location     Type
 22872 ;;  pInput          2    0[COMRAM] PTR struct Byte
 22873 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 22874 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 22875 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22876 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22877 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22878 ;;		 -> NULL(0), 
 22879 ;;  pBit            1    2[COMRAM] unsigned char 
 22880 ;;  pValue          1    3[COMRAM] unsigned char 
 22881 ;; Auto vars:     Size  Location     Type
 22882 ;;		None
 22883 ;; Return value:  Size  Location     Type
 22884 ;;                  1    wreg      void 
 22885 ;; Registers used:
 22886 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22887 ;; Tracked objects:
 22888 ;;		On entry : 0/0
 22889 ;;		On exit  : 0/0
 22890 ;;		Unchanged: 0/0
 22891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22892 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22894 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22895 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22896 ;;Total ram usage:        7 bytes
 22897 ;; Hardware stack levels used:    1
 22898 ;; This function calls:
 22899 ;;		Nothing
 22900 ;; This function is called by:
 22901 ;;		i2_Port_SetPin
 22902 ;; This function uses a non-reentrant model
 22903 ;;
 22904                           
 22905                           	psect	text133
 22906  013D1E                     __ptext133:
 22907                           	opt stack 0
 22908  013D1E                     i2_Byte_SetBit:
 22909                           	opt stack 16
 22910                           
 22911                           ;Types.c: 34: pValue &= 1;
 22912                           
 22913                           ;incstack = 0
 22914  013D1E  0E01               	movlw	1
 22915  013D20  1604               	andwf	i2Byte_SetBit@pValue,f,c
 22916                           
 22917                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 22918  013D22  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 22919  013D26  0E01               	movlw	1
 22920  013D28  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 22921  013D2A  2A05               	incf	??i2_Byte_SetBit,f,c
 22922  013D2C  D002               	goto	i2u389_44
 22923  013D2E                     i2u389_45:
 22924  013D2E  90D8               	bcf	status,0,c
 22925  013D30  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 22926  013D32                     i2u389_44:
 22927  013D32  2E05               	decfsz	??i2_Byte_SetBit,f,c
 22928  013D34  D7FC               	goto	i2u389_45
 22929  013D36  5006               	movf	??i2_Byte_SetBit+1,w,c
 22930  013D38  0AFF               	xorlw	255
 22931  013D3A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 22932  013D3C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 22933  013D40  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 22934  013D44  5007               	movf	??i2_Byte_SetBit+2,w,c
 22935  013D46  16DF               	andwf	indf2,f,c
 22936                           
 22937                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 22938  013D48  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 22939  013D4C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 22940  013D50  2A05               	incf	??i2_Byte_SetBit,f,c
 22941  013D52  D002               	goto	i2u390_44
 22942  013D54                     i2u390_45:
 22943  013D54  90D8               	bcf	status,0,c
 22944  013D56  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 22945  013D58                     i2u390_44:
 22946  013D58  2E05               	decfsz	??i2_Byte_SetBit,f,c
 22947  013D5A  D7FC               	goto	i2u390_45
 22948  013D5C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 22949  013D60  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 22950  013D64  5006               	movf	??i2_Byte_SetBit+1,w,c
 22951  013D66  12DF               	iorwf	indf2,f,c
 22952  013D68  0012               	return		;funcret
 22953  013D6A                     __end_ofi2_Byte_SetBit:
 22954                           	opt stack 0
 22955                           tosu	equ	0xFFF
 22956                           tosh	equ	0xFFE
 22957                           tosl	equ	0xFFD
 22958                           pclatu	equ	0xFFB
 22959                           pclath	equ	0xFFA
 22960                           tblptru	equ	0xFF8
 22961                           tblptrh	equ	0xFF7
 22962                           tblptrl	equ	0xFF6
 22963                           tablat	equ	0xFF5
 22964                           prodh	equ	0xFF4
 22965                           prodl	equ	0xFF3
 22966                           intcon	equ	0xFF2
 22967                           indf0	equ	0xFEF
 22968                           postinc0	equ	0xFEE
 22969                           fsr0h	equ	0xFEA
 22970                           fsr0l	equ	0xFE9
 22971                           wreg	equ	0xFE8
 22972                           indf1	equ	0xFE7
 22973                           postdec1	equ	0xFE5
 22974                           plusw1	equ	0xFE3
 22975                           fsr1h	equ	0xFE2
 22976                           fsr1l	equ	0xFE1
 22977                           indf2	equ	0xFDF
 22978                           postinc2	equ	0xFDE
 22979                           postdec2	equ	0xFDD
 22980                           plusw2	equ	0xFDB
 22981                           fsr2h	equ	0xFDA
 22982                           fsr2l	equ	0xFD9
 22983                           status	equ	0xFD8
 22984                           
 22985 ;; *************** function i2_MXK_SwitchTo *****************
 22986 ;; Defined at:
 22987 ;;		line 105 in file "Library/MXK.c"
 22988 ;; Parameters:    Size  Location     Type
 22989 ;;  pModule         1    wreg     enum E6925
 22990 ;; Auto vars:     Size  Location     Type
 22991 ;;  pModule         1    7[COMRAM] enum E6925
 22992 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 22993 ;; Return value:  Size  Location     Type
 22994 ;;                  1    wreg      unsigned char 
 22995 ;; Registers used:
 22996 ;;		wreg, status,2, status,0, cstack
 22997 ;; Tracked objects:
 22998 ;;		On entry : 0/0
 22999 ;;		On exit  : 0/0
 23000 ;;		Unchanged: 0/0
 23001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23006 ;;Total ram usage:        2 bytes
 23007 ;; Hardware stack levels used:    1
 23008 ;; Hardware stack levels required when called:    1
 23009 ;; This function calls:
 23010 ;;		i2_delay_us
 23011 ;; This function is called by:
 23012 ;;		i2_Motor_Step
 23013 ;; This function uses a non-reentrant model
 23014 ;;
 23015                           
 23016                           	psect	text134
 23017  01417C                     __ptext134:
 23018                           	opt stack 0
 23019  01417C                     i2_MXK_SwitchTo:
 23020                           	opt stack 16
 23021                           
 23022                           ;incstack = 0
 23023                           ;i2MXK_SwitchTo@pModule stored from wreg
 23024  01417C  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 23025                           
 23026                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 23027  01417E  5086               	movf	3974,w,c	;volatile
 23028  014180  0B0F               	andlw	15
 23029  014182  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 23030                           
 23031                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 23032  014184  5043               	movf	_Bus_State,w,c
 23033  014186  A4D8               	btfss	status,2,c
 23034  014188  D002               	goto	i2l7637
 23035                           
 23036                           ;MXK.c: 110: return 0;
 23037  01418A  0E00               	movlw	0
 23038  01418C  0012               	return	
 23039  01418E                     i2l7637:
 23040                           
 23041                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 23042  01418E  0E00               	movlw	0
 23043  014190  6E43               	movwf	_Bus_State,c
 23044                           
 23045                           ;MXK.c: 114: if (CUR != pModule)
 23046  014192  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23047  014194  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 23048  014196  B4D8               	btfsc	status,2,c
 23049  014198  D00A               	goto	i2l7645
 23050                           
 23051                           ;MXK.c: 115: {
 23052                           ;MXK.c: 116: PORTG &= ~(0xF);
 23053  01419A  0EF0               	movlw	240
 23054  01419C  1686               	andwf	3974,f,c	;volatile
 23055                           
 23056                           ;MXK.c: 117: PORTG |= pModule;
 23057  01419E  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23058  0141A0  1286               	iorwf	3974,f,c	;volatile
 23059                           
 23060                           ;MXK.c: 120: delay_us(10);
 23061  0141A2  0E00               	movlw	0
 23062  0141A4  6E02               	movwf	i2delay_us@us+1,c
 23063  0141A6  0E0A               	movlw	10
 23064  0141A8  6E01               	movwf	i2delay_us@us,c
 23065  0141AA  ECCD  F09F         	call	i2_delay_us	;wreg free
 23066  0141AE                     i2l7645:
 23067                           
 23068                           ;MXK.c: 121: }
 23069                           ;MXK.c: 122: return 1;
 23070  0141AE  0E01               	movlw	1
 23071  0141B0  0012               	return	
 23072  0141B2                     __end_ofi2_MXK_SwitchTo:
 23073                           	opt stack 0
 23074                           tosu	equ	0xFFF
 23075                           tosh	equ	0xFFE
 23076                           tosl	equ	0xFFD
 23077                           pclatu	equ	0xFFB
 23078                           pclath	equ	0xFFA
 23079                           tblptru	equ	0xFF8
 23080                           tblptrh	equ	0xFF7
 23081                           tblptrl	equ	0xFF6
 23082                           tablat	equ	0xFF5
 23083                           prodh	equ	0xFF4
 23084                           prodl	equ	0xFF3
 23085                           intcon	equ	0xFF2
 23086                           indf0	equ	0xFEF
 23087                           postinc0	equ	0xFEE
 23088                           fsr0h	equ	0xFEA
 23089                           fsr0l	equ	0xFE9
 23090                           wreg	equ	0xFE8
 23091                           indf1	equ	0xFE7
 23092                           postdec1	equ	0xFE5
 23093                           plusw1	equ	0xFE3
 23094                           fsr1h	equ	0xFE2
 23095                           fsr1l	equ	0xFE1
 23096                           indf2	equ	0xFDF
 23097                           postinc2	equ	0xFDE
 23098                           postdec2	equ	0xFDD
 23099                           plusw2	equ	0xFDB
 23100                           fsr2h	equ	0xFDA
 23101                           fsr2l	equ	0xFD9
 23102                           status	equ	0xFD8
 23103                           
 23104 ;; *************** function i2_delay_us *****************
 23105 ;; Defined at:
 23106 ;;		line 255 in file "Library/Types.c"
 23107 ;; Parameters:    Size  Location     Type
 23108 ;;  us              2    0[COMRAM] unsigned short 
 23109 ;; Auto vars:     Size  Location     Type
 23110 ;;  delay_us        4    2[COMRAM] unsigned long 
 23111 ;; Return value:  Size  Location     Type
 23112 ;;                  1    wreg      void 
 23113 ;; Registers used:
 23114 ;;		wreg, status,2, status,0
 23115 ;; Tracked objects:
 23116 ;;		On entry : 0/0
 23117 ;;		On exit  : 0/0
 23118 ;;		Unchanged: 0/0
 23119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23120 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23121 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23123 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23124 ;;Total ram usage:        6 bytes
 23125 ;; Hardware stack levels used:    1
 23126 ;; This function calls:
 23127 ;;		Nothing
 23128 ;; This function is called by:
 23129 ;;		i2_MXK_SwitchTo
 23130 ;; This function uses a non-reentrant model
 23131 ;;
 23132                           
 23133                           	psect	text135
 23134  013F9A                     __ptext135:
 23135                           	opt stack 0
 23136  013F9A                     i2_delay_us:
 23137                           	opt stack 16
 23138                           
 23139                           ;Types.c: 256: unsigned long u;
 23140                           ;Types.c: 257: while (us--) {
 23141                           
 23142                           ;incstack = 0
 23143  013F9A  D016               	goto	i2l7095
 23144  013F9C                     i2l7087:
 23145                           
 23146                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 23147  013F9C  0E00               	movlw	0
 23148  013F9E  6E03               	movwf	i2delay_us@u,c
 23149  013FA0  0E00               	movlw	0
 23150  013FA2  6E04               	movwf	i2delay_us@u+1,c
 23151  013FA4  0E00               	movlw	0
 23152  013FA6  6E05               	movwf	i2delay_us@u+2,c
 23153  013FA8  0E00               	movlw	0
 23154  013FAA  6E06               	movwf	i2delay_us@u+3,c
 23155  013FAC                     i2l7089:
 23156  013FAC  5003               	movf	i2delay_us@u,w,c
 23157  013FAE  1004               	iorwf	i2delay_us@u+1,w,c
 23158  013FB0  1005               	iorwf	i2delay_us@u+2,w,c
 23159  013FB2  1006               	iorwf	i2delay_us@u+3,w,c
 23160  013FB4  A4D8               	btfss	status,2,c
 23161  013FB6  D008               	goto	i2l7095
 23162  013FB8  F000               	nop		; ;# 
 23163  013FBA  0E01               	movlw	1
 23164  013FBC  2603               	addwf	i2delay_us@u,f,c
 23165  013FBE  0E00               	movlw	0
 23166  013FC0  2204               	addwfc	i2delay_us@u+1,f,c
 23167  013FC2  2205               	addwfc	i2delay_us@u+2,f,c
 23168  013FC4  2206               	addwfc	i2delay_us@u+3,f,c
 23169  013FC6  D7F2               	goto	i2l7089
 23170  013FC8                     i2l7095:
 23171  013FC8  0601               	decf	i2delay_us@us,f,c
 23172  013FCA  A0D8               	btfss	status,0,c
 23173  013FCC  0602               	decf	i2delay_us@us+1,f,c
 23174  013FCE  2801               	incf	i2delay_us@us,w,c
 23175  013FD0  E1E5               	bnz	i2l7087
 23176  013FD2  2802               	incf	i2delay_us@us+1,w,c
 23177  013FD4  B4D8               	btfsc	status,2,c
 23178  013FD6  0012               	return	
 23179  013FD8  D7E1               	goto	i2l7087
 23180  013FDA                     __end_ofi2_delay_us:
 23181                           	opt stack 0
 23182                           tosu	equ	0xFFF
 23183                           tosh	equ	0xFFE
 23184                           tosl	equ	0xFFD
 23185                           pclatu	equ	0xFFB
 23186                           pclath	equ	0xFFA
 23187                           tblptru	equ	0xFF8
 23188                           tblptrh	equ	0xFF7
 23189                           tblptrl	equ	0xFF6
 23190                           tablat	equ	0xFF5
 23191                           prodh	equ	0xFF4
 23192                           prodl	equ	0xFF3
 23193                           intcon	equ	0xFF2
 23194                           indf0	equ	0xFEF
 23195                           postinc0	equ	0xFEE
 23196                           fsr0h	equ	0xFEA
 23197                           fsr0l	equ	0xFE9
 23198                           wreg	equ	0xFE8
 23199                           indf1	equ	0xFE7
 23200                           postdec1	equ	0xFE5
 23201                           plusw1	equ	0xFE3
 23202                           fsr1h	equ	0xFE2
 23203                           fsr1l	equ	0xFE1
 23204                           indf2	equ	0xFDF
 23205                           postinc2	equ	0xFDE
 23206                           postdec2	equ	0xFDD
 23207                           plusw2	equ	0xFDB
 23208                           fsr2h	equ	0xFDA
 23209                           fsr2l	equ	0xFD9
 23210                           status	equ	0xFD8
 23211                           
 23212 ;; *************** function i2_MXK_Release *****************
 23213 ;; Defined at:
 23214 ;;		line 130 in file "Library/MXK.c"
 23215 ;; Parameters:    Size  Location     Type
 23216 ;;		None
 23217 ;; Auto vars:     Size  Location     Type
 23218 ;;		None
 23219 ;; Return value:  Size  Location     Type
 23220 ;;                  1    wreg      unsigned char 
 23221 ;; Registers used:
 23222 ;;		wreg, status,2, status,0
 23223 ;; Tracked objects:
 23224 ;;		On entry : 0/0
 23225 ;;		On exit  : 0/0
 23226 ;;		Unchanged: 0/0
 23227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23232 ;;Total ram usage:        0 bytes
 23233 ;; Hardware stack levels used:    1
 23234 ;; This function calls:
 23235 ;;		Nothing
 23236 ;; This function is called by:
 23237 ;;		i2_Motor_Step
 23238 ;; This function uses a non-reentrant model
 23239 ;;
 23240                           
 23241                           	psect	text136
 23242  014764                     __ptext136:
 23243                           	opt stack 0
 23244  014764                     i2_MXK_Release:
 23245                           	opt stack 17
 23246                           
 23247                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 23248                           
 23249                           ;incstack = 0
 23250  014764  0E01               	movlw	1
 23251  014766  6E43               	movwf	_Bus_State,c
 23252                           
 23253                           ;MXK.c: 135: return 1;
 23254                           ;	Return value of i2_MXK_Release is never used
 23255  014768  0012               	return	
 23256  01476A                     __end_ofi2_MXK_Release:
 23257                           	opt stack 0
 23258                           tosu	equ	0xFFF
 23259                           tosh	equ	0xFFE
 23260                           tosl	equ	0xFFD
 23261                           pclatu	equ	0xFFB
 23262                           pclath	equ	0xFFA
 23263                           tblptru	equ	0xFF8
 23264                           tblptrh	equ	0xFF7
 23265                           tblptrl	equ	0xFF6
 23266                           tablat	equ	0xFF5
 23267                           prodh	equ	0xFF4
 23268                           prodl	equ	0xFF3
 23269                           intcon	equ	0xFF2
 23270                           indf0	equ	0xFEF
 23271                           postinc0	equ	0xFEE
 23272                           fsr0h	equ	0xFEA
 23273                           fsr0l	equ	0xFE9
 23274                           wreg	equ	0xFE8
 23275                           indf1	equ	0xFE7
 23276                           postdec1	equ	0xFE5
 23277                           plusw1	equ	0xFE3
 23278                           fsr1h	equ	0xFE2
 23279                           fsr1l	equ	0xFE1
 23280                           indf2	equ	0xFDF
 23281                           postinc2	equ	0xFDE
 23282                           postdec2	equ	0xFDD
 23283                           plusw2	equ	0xFDB
 23284                           fsr2h	equ	0xFDA
 23285                           fsr2l	equ	0xFD9
 23286                           status	equ	0xFD8
 23287                           
 23288 ;; *************** function i2_MXK_Queue *****************
 23289 ;; Defined at:
 23290 ;;		line 144 in file "Library/MXK.c"
 23291 ;; Parameters:    Size  Location     Type
 23292 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 23293 ;;		 -> Absolute function(1), Motor_Step(1), 
 23294 ;; Auto vars:     Size  Location     Type
 23295 ;;		None
 23296 ;; Return value:  Size  Location     Type
 23297 ;;                  1    wreg      void 
 23298 ;; Registers used:
 23299 ;;		wreg, status,2, status,0
 23300 ;; Tracked objects:
 23301 ;;		On entry : 0/0
 23302 ;;		On exit  : 0/0
 23303 ;;		Unchanged: 0/0
 23304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23305 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23308 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23309 ;;Total ram usage:        3 bytes
 23310 ;; Hardware stack levels used:    1
 23311 ;; This function calls:
 23312 ;;		Nothing
 23313 ;; This function is called by:
 23314 ;;		i2_Motor_Step
 23315 ;; This function uses a non-reentrant model
 23316 ;;
 23317                           
 23318                           	psect	text137
 23319  0146E8                     __ptext137:
 23320                           	opt stack 0
 23321  0146E8                     i2_MXK_Queue:
 23322                           	opt stack 17
 23323                           
 23324                           ;MXK.c: 146: lQueue = pCallback;
 23325                           
 23326                           ;incstack = 0
 23327  0146E8  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 23328  0146EC  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 23329  0146F0  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 23330  0146F4  0012               	return		;funcret
 23331  0146F6                     __end_ofi2_MXK_Queue:
 23332                           	opt stack 0
 23333                           tosu	equ	0xFFF
 23334                           tosh	equ	0xFFE
 23335                           tosl	equ	0xFFD
 23336                           pclatu	equ	0xFFB
 23337                           pclath	equ	0xFFA
 23338                           tblptru	equ	0xFF8
 23339                           tblptrh	equ	0xFF7
 23340                           tblptrl	equ	0xFF6
 23341                           tablat	equ	0xFF5
 23342                           prodh	equ	0xFF4
 23343                           prodl	equ	0xFF3
 23344                           intcon	equ	0xFF2
 23345                           indf0	equ	0xFEF
 23346                           postinc0	equ	0xFEE
 23347                           fsr0h	equ	0xFEA
 23348                           fsr0l	equ	0xFE9
 23349                           wreg	equ	0xFE8
 23350                           indf1	equ	0xFE7
 23351                           postdec1	equ	0xFE5
 23352                           plusw1	equ	0xFE3
 23353                           fsr1h	equ	0xFE2
 23354                           fsr1l	equ	0xFE1
 23355                           indf2	equ	0xFDF
 23356                           postinc2	equ	0xFDE
 23357                           postdec2	equ	0xFDD
 23358                           plusw2	equ	0xFDB
 23359                           fsr2h	equ	0xFDA
 23360                           fsr2l	equ	0xFD9
 23361                           status	equ	0xFD8
 23362                           tosu	equ	0xFFF
 23363                           tosh	equ	0xFFE
 23364                           tosl	equ	0xFFD
 23365                           pclatu	equ	0xFFB
 23366                           pclath	equ	0xFFA
 23367                           tblptru	equ	0xFF8
 23368                           tblptrh	equ	0xFF7
 23369                           tblptrl	equ	0xFF6
 23370                           tablat	equ	0xFF5
 23371                           prodh	equ	0xFF4
 23372                           prodl	equ	0xFF3
 23373                           intcon	equ	0xFF2
 23374                           indf0	equ	0xFEF
 23375                           postinc0	equ	0xFEE
 23376                           fsr0h	equ	0xFEA
 23377                           fsr0l	equ	0xFE9
 23378                           wreg	equ	0xFE8
 23379                           indf1	equ	0xFE7
 23380                           postdec1	equ	0xFE5
 23381                           plusw1	equ	0xFE3
 23382                           fsr1h	equ	0xFE2
 23383                           fsr1l	equ	0xFE1
 23384                           indf2	equ	0xFDF
 23385                           postinc2	equ	0xFDE
 23386                           postdec2	equ	0xFDD
 23387                           plusw2	equ	0xFDB
 23388                           fsr2h	equ	0xFDA
 23389                           fsr2l	equ	0xFD9
 23390                           status	equ	0xFD8
 23391                           
 23392                           	psect	text138
 23393  000000                     __ptext138:
 23394                           	opt stack 0
 23395                           tosu	equ	0xFFF
 23396                           tosh	equ	0xFFE
 23397                           tosl	equ	0xFFD
 23398                           pclatu	equ	0xFFB
 23399                           pclath	equ	0xFFA
 23400                           tblptru	equ	0xFF8
 23401                           tblptrh	equ	0xFF7
 23402                           tblptrl	equ	0xFF6
 23403                           tablat	equ	0xFF5
 23404                           prodh	equ	0xFF4
 23405                           prodl	equ	0xFF3
 23406                           intcon	equ	0xFF2
 23407                           indf0	equ	0xFEF
 23408                           postinc0	equ	0xFEE
 23409                           fsr0h	equ	0xFEA
 23410                           fsr0l	equ	0xFE9
 23411                           wreg	equ	0xFE8
 23412                           indf1	equ	0xFE7
 23413                           postdec1	equ	0xFE5
 23414                           plusw1	equ	0xFE3
 23415                           fsr1h	equ	0xFE2
 23416                           fsr1l	equ	0xFE1
 23417                           indf2	equ	0xFDF
 23418                           postinc2	equ	0xFDE
 23419                           postdec2	equ	0xFDD
 23420                           plusw2	equ	0xFDB
 23421                           fsr2h	equ	0xFDA
 23422                           fsr2l	equ	0xFD9
 23423                           status	equ	0xFD8
 23424                           
 23425                           	psect	rparam
 23426  0000                     tosu	equ	0xFFF
 23427                           tosh	equ	0xFFE
 23428                           tosl	equ	0xFFD
 23429                           pclatu	equ	0xFFB
 23430                           pclath	equ	0xFFA
 23431                           tblptru	equ	0xFF8
 23432                           tblptrh	equ	0xFF7
 23433                           tblptrl	equ	0xFF6
 23434                           tablat	equ	0xFF5
 23435                           prodh	equ	0xFF4
 23436                           prodl	equ	0xFF3
 23437                           intcon	equ	0xFF2
 23438                           indf0	equ	0xFEF
 23439                           postinc0	equ	0xFEE
 23440                           fsr0h	equ	0xFEA
 23441                           fsr0l	equ	0xFE9
 23442                           wreg	equ	0xFE8
 23443                           indf1	equ	0xFE7
 23444                           postdec1	equ	0xFE5
 23445                           plusw1	equ	0xFE3
 23446                           fsr1h	equ	0xFE2
 23447                           fsr1l	equ	0xFE1
 23448                           indf2	equ	0xFDF
 23449                           postinc2	equ	0xFDE
 23450                           postdec2	equ	0xFDD
 23451                           plusw2	equ	0xFDB
 23452                           fsr2h	equ	0xFDA
 23453                           fsr2l	equ	0xFD9
 23454                           status	equ	0xFD8
 23455                           
 23456                           	psect	temp
 23457  000049                     btemp:
 23458                           	opt stack 0
 23459  000049                     	ds	1
 23460  0000                     int$flags	set	btemp
 23461                           tosu	equ	0xFFF
 23462                           tosh	equ	0xFFE
 23463                           tosl	equ	0xFFD
 23464                           pclatu	equ	0xFFB
 23465                           pclath	equ	0xFFA
 23466                           tblptru	equ	0xFF8
 23467                           tblptrh	equ	0xFF7
 23468                           tblptrl	equ	0xFF6
 23469                           tablat	equ	0xFF5
 23470                           prodh	equ	0xFF4
 23471                           prodl	equ	0xFF3
 23472                           intcon	equ	0xFF2
 23473                           indf0	equ	0xFEF
 23474                           postinc0	equ	0xFEE
 23475                           fsr0h	equ	0xFEA
 23476                           fsr0l	equ	0xFE9
 23477                           wreg	equ	0xFE8
 23478                           indf1	equ	0xFE7
 23479                           postdec1	equ	0xFE5
 23480                           plusw1	equ	0xFE3
 23481                           fsr1h	equ	0xFE2
 23482                           fsr1l	equ	0xFE1
 23483                           indf2	equ	0xFDF
 23484                           postinc2	equ	0xFDE
 23485                           postdec2	equ	0xFDD
 23486                           plusw2	equ	0xFDB
 23487                           fsr2h	equ	0xFDA
 23488                           fsr2l	equ	0xFD9
 23489                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    720
    Data        41
    BSS         679
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160     72     160
    BANK1           256     22     248
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_3(CODE[14]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Continious@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> motor(BANK1[6]), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> motor(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> motor(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> motor(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> motor(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> STR_4(CODE[5]), HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_HMI_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0 1303580
                                              2 BANK1     20    20      0
                       _Console_Init
                     _Console_Render
              _Console_SetForecolour
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                    _HMI_SetSegments
                       _HMI_UpSwitch *
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                   _Motor_Continious
                         _Motor_Init
                         _Motor_Move
                        _Motor_Speed
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4    2632
                                             21 BANK0      8     4      4
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Motor_Speed                                          4     0      4    3535
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Motor_Move                                           6     2      4     611
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (2) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Motor_Continious                                     4     0      4     428
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0  255742
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3  255742
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   36581
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_UpButton                                   1     1      0   36436
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_DownButton                                 1     1      0   36436
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetNumber                                        2     0      2    3486
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (5) _itos                                                10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (6) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _HMI_SetSegments                                      5     3      2     598
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (2) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                              0 BANK1      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (3) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_SetForecolour                                2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       14    14      0    1778
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_DownButton *
         _HMI_SetDown
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_LeftButton *
         _HMI_SetBar
         _HMI_SetLeft
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_RightButton *
         _HMI_SetBar
         _HMI_SetRight
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_HMI_UpButton *
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _HMI_SetUp
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetSegments *
     _ToSegment
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Motor_Continious *
   _Motor_Init *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
   _Motor_Move *
     _Timer0_Start
   _Motor_Speed *
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
   _printf *
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      46       9       27.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      F8       7       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     226      12        0.0%
DATA                 0      0     352       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Aug 14 17:01:47 2017

                   i2_Timer0_Stop 475E                  SPI_Init@pChannel 00E2  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 21E8  
                               _A 0044                                 _a 0045  
                               _i 007E                                 _j 007D  
                               _l 0047                                 _u 007C  
                               _w 0048                      ___awdiv@sign 00B6  
             ___wmul@multiplicand 00B3                     _HMI_DIPSwitch 45AE  
              LCD_DrawField@pSize 00C9                LCD_DrawField@count 00CF  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 470E  
                     ?_LED_Toggle 0001                     ??_Console_Tab 00B9  
                     ?_HMI_GetBar 0001                               l615 039E  
                             l528 07D6                               l617 03A2  
                             l655 43E6                               l680 381A  
                             l657 43EA                               l685 3840  
                             _PR2 000FCB                               _val 0073  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00CA  
                    _Word_GetPair 4056                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 00B8  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 00C1                Console_MakeField@y 00C2  
                    Console_Tab@c 00C0                      Console_Tab@i 00BF  
             LCD_DrawField@pField 00C3                      Console_Tab@t 00BE  
    __end_of_Event_HMI_LeftButton 3BDE                        i2_delay_us 3F9A  
            Port_Set@TypeRequired 00D3                 Console_FormFeed@x 00B3  
               Console_FormFeed@y 00B4               LCD_DrawField@pPoint 00C5  
    __end_of_Event_HMI_DownButton 4218                    ?_LCD_DrawField 00C3  
           Port_SetPinType@Output 00DB                   Port_SetPin@Type 00C4  
                 Port_SetPin@pPin 00C2                     ?_Byte_GetPair 00BA  
                 __end_of_LED_Set 3C80           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 2C32                      _Word_SetPair 3E8A  
                   ?_Byte_GetZone 00B1                              l1215 23D0  
                            l1056 1110                              l1161 14EC  
                            l1082 26C0                              l1166 4054  
                            l2442 34DC                              l2452 3ACA  
                            l2389 2A12                    ??_Console_Init 00B1  
                            l9415 4082                              l9431 346A  
                            l9601 083A                              l9521 07EA  
                            l9513 07E2                              l9445 2A4A  
                            l9701 089E                              l9621 084E  
                            l9613 0846                              l9605 083E  
                            l9541 07FE                              l9533 07F6  
                            l9525 07EE                              l9517 07E6  
                            l9509 07DE                              l9471 27A0  
                            l9463 2746             Port_SetPinType@pInput 00D7  
                            l9449 2A56                              l9385 2FBE  
                            l9721 08B2                              l9713 08AA  
                            l9705 08A2                              l9641 0862  
                            l9633 085A                              l9625 0852  
                            l9617 084A                              l9609 0842  
                            l9561 0812                              l9553 080A  
                            l9545 0802                              l9537 07FA  
                            l9529 07F2                              l9491 3942  
                            l9467 2770                              l9803 326E  
                            l9389 2FCA                              l9477 27CA  
                            l9741 08C6                              l9733 08BE  
                            l9725 08B6                              l9717 08AE  
                            l9709 08A6                              l9661 0876  
                            l9653 086E                              l9645 0866  
                            l9637 085E                              l9629 0856  
                            l9581 0826                              l9573 081E  
                            l9565 0816                              l9557 080E  
                            l9549 0806                              l9821 32CC  
                            l9813 3288                              l9807 3278  
                            l9905 3B28                              l9913 3EBA  
                            l9753 08D2                              l9745 08CA  
                            l9737 08C2                              l9729 08BA  
                            l9681 088A                              l9673 0882  
                            l9665 087A                              l9657 0872  
                            l9649 086A                              l9593 0832  
                            l9585 082A                              l9577 0822  
                            l9569 081A                              l9833 348C  
                            l9809 327E                              l9825 32D2  
                            l9763 08DA                              l9835 3498  
                            l9771 37B6                              l9757 08D6  
                            l9749 08CE                              l9693 0896  
                            l9685 088E                              l9677 0886  
                            l9669 087E                              l9597 0836  
                            l9589 082E                              l9845 34CE  
                            l9837 349E                              l9861 3ABC  
                            l9853 3A86                              l9941 247C  
                            l9855 3A92                              l9943 2490  
                            l9783 3140                              l9791 31B2  
                            STR_1 FFFC                              STR_2 FFFC  
                            l9697 089A                              l9689 0892  
                            l9857 3A98                              l9929 2410  
                            l9937 2460                              STR_3 FFE9  
                            STR_4 FFF7                              l9971 22F2  
                            l9779 37EA                              l9877 3830  
                            l9869 380A                              l9789 31B0  
                            l9965 39A8                              l9957 397A  
                            l9887 3856                              l9993 23BE  
                            l9979 235E                              l9987 237A  
                            l9989 23A4                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F                              u6110 3404  
             __end_of_GetPortPORT 2ECE                              u6200 3E78  
                            u6205 3E72                              u6070 2F94  
                            u6144 39C8                              u6145 39C2  
                            u6090 2FFA                              u6154 39FA  
                            u6155 39F4                              u6420 3976  
                            u6077 2F8A                              u6174 2A92  
                            u6430 39A0                              u6175 2A8C  
                            u6095 2FF4                              u6184 2AC4  
                            u6440 2324                              u6345 46BA  
                            u6185 2ABE                              _PIR1 000F9E  
                            u6346 46BC                              _PIR2 000FA1  
                            _PIR3 000FA4                              u7500 210C  
                            u6470 239C                              u7238 1E06  
                            u7510 2120                              u6447 231A  
                            u7520 2160               __end_of_GetPortTRIS 2D82  
                            u6705 1F96                              u7425 339C  
                            u7178 263E                              u7530 1B66  
                            u7188 1CCA                              u6477 2392  
                            u6805 4690                              u7189 1CDE  
                            u6806 4694                              u6815 467A  
                            u6816 467E                              u6825 4664  
                            u6905 047C                              u6826 4668  
                            u6690 3DA2                              u6835 46A6  
                            u6915 049E                              u6836 46AA  
                            u6844 322C                              u6845 3226  
                            u6925 061E                              u6695 3D9C  
                            u6935 069C                              u6945 06DE  
                            u6970 41D4                              u6955 0720  
                            u6885 044C                              u6975 41CE  
                            u6895 0464                              u7970 3EF0  
                            _SPI1 0161                              _SPI2 016C  
                            u8941 0F9C                              u8951 0FAE  
                            u8848 4226                              _TMR0 000FD6  
                            u8988 1060                              u8989 1074  
                            _gISR 0068                Event_DIPSwitch@Bar 00CB  
                   ??_Byte_GetBit 00B4                SPI_MaxSpeed@pInput 00C0  
                   ?_Byte_SetByte 00B1                     ?_Byte_SetPair 00BC  
                 __end_of_SPI_DCS 42D8                              _main 0EDC  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 00BC  
                            _itos 23D2                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00B1                              btemp 0049  
                            _zero 0046                       main@upState 01F5  
                   ??_Byte_SetBit 00B5                      ?_HMI_SetLeft 0001  
              __size_of_LCD_Reset 0050                      ?_HMI_SetDown 0001  
                            prodh 000FF4                              prodl 000FF3  
                Motor_Move@pDelta 00B6                              start 148A  
              __size_of_LCD_Write 0022                     __CFG_IESO$OFF 000000  
               Timer0_Init@DIVIDE 00C8                   ?_SPI_DisableISR 00B1  
                Motor_Move@pMotor 00B4               HMI_SetButton@pValue 00B7  
                   Console_Init@x 00B3                     Console_Init@y 00B4  
                  ?i2_Timer0_Stop 0001                __size_of_HMI_SetUp 0016  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FFDB              Set_Rotation@rotation 00B7  
          __size_of_HMI_SetButton 0090            __size_of_HMI_SetNumber 002A  
                     ?_ISR_Enable 0001      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 3B86                  __end_of_LCD_Init 1CB8  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 3A72                     ??_Button_Init 00F9  
         GetPortProperties@pInput 00B3                     ??_Button_Poll 00CF  
                           l10011 28DC                             l10021 290C  
                           l10005 28C6                             l10103 3E02  
                           l10105 3E1A                             l10113 3876  
                           l10121 38B4                             l11001 17DE  
                           l10017 28FA                             l10033 294A  
                           l10051 29AC                             l10115 3888  
                           l10131 3DF6                             l11011 182C  
                           l10019 2906                  __end_of_HMI_Init 14EE  
                           l10213 42CA                             l10109 3E32  
                           l11005 17F6                             l10037 295E  
                           l10029 293C                             l11031 2690  
                           l10143 0B1A                             l10071 1506  
                           l10207 43EE                             l10047 2996  
                           l10311 000C                             l11007 1826  
                           l11041 26C8                             l11033 2696  
                           l10137 0A64                             l10153 0BF2  
                           l10073 152C                             l10049 29A6  
                           l10217 3BE0                             l10225 3C18  
                           l10233 3CE2                             l11051 2716  
                           l11027 2686                             l10147 0B86  
                           l10139 0AAE                             l10155 0C0E  
                           l10091 1670                             l10059 2A00  
                           l10315 001A                             l10219 3BF2  
                           l10411 3C6E                             l10243 3D00  
                           l11037 26A0                             l10085 1604  
                           l10093 168C                             l10341 01DA  
                           l10317 002A                             l10309 0002  
                           l11133 216E                             l10405 3C36  
                           l10245 3D18                             l10253 283A  
                           l11047 270A                             l10079 1598  
                           l10343 0228                             l10351 0312  
                           l10327 00EC                             l10319 003E  
                           l11063 3384                             l11135 218A  
                           l11127 212E                             l11151 21D6  
                           l10407 3C52                             l10431 2DC0  
                           l10423 2DA4                             l10415 2D88  
                           l10511 2D28                             l10503 2D0C  
                           l10361 03A6                             l10345 0276  
                           l10353 0330                             l10337 01A0  
                           l11401 14C0                             l11161 1B68  
                           l11129 214C                             l11145 21CC  
                           l10257 2846                             l10601 184C  
                           l11323 32F8                             l10179 1FDE  
                           l10187 1FFA                             l10363 03B8  
                           l10347 02C4                             l10339 01B2  
                           l11075 33DA                             l11067 338C  
                           l11171 1C42                             l10443 2DEA  
                           l10435 2DCE                             l10427 2DB2  
                           l10419 2D96                             l10515 2D36  
                           l10507 2D1A                             l10531 0CDC  
                           l11333 3312                             l10189 2044  
                           l11413 4022                             l11173 1C6C  
                           l10461 2E4A                             l10453 2E2E  
                           l10525 2D52                             l11093 1E8E  
                           l10621 186A                             l10613 185E  
                           l10605 1852                             l12213 0FD6  
                           l11327 3302                             l11167 1BD6  
                           l10439 2DDC                             l10519 2D44  
                           l10535 0D24                             l11087 1E84  
                           l12223 1034                             l11329 3308  
                           l11177 1C7A                             l10481 2E90  
                           l10473 2E74                             l10465 2E58  
                           l10457 2E3C                             l10449 2DF8  
                           l10529 0CBA                             l10545 0DAE  
                           l11097 1E96                             l10617 1864  
                           l10609 1858                             l10641 1996  
                           l12209 0FC0                             l12241 1098  
                           l11339 336A                             l11371 1280  
                           l11363 1142                             l11355 1118  
                           l10491 2CE2                             l10539 0D6C  
                           l10547 0DCA                             l11099 1EE8  
                           l11373 12AE                             l10477 2E82  
                           l10469 2E66                             l10573 0754  
                           l10629 1906                             l11359 1138  
                           l10911 3B64                             l11543 3FE6  
                           l12159 423A                             l10487 2E9E  
                           l10495 2CF0                             l10575 0774  
                           l10583 07B8                             l11385 12D6  
                           l10921 3B80                             l11553 4014  
                           l10681 3F96                             l10673 3F6E  
                           l10931 36FC                             l11379 12BE  
                           l10827 25D2                             l10747 4104  
                           l10763 3BCE                             l10907 3B56  
                           l10499 2CFE                             l10579 0798  
                           l11571 3038                             l12187 0F1C  
                           l12179 0F00                             l10765 3BD6  
                           l10693 4650                             l10597 1846  
                           l11565 301C                             l11581 3084  
                           l12197 0F68                             l10935 370A  
                           l10759 3BBC                             l10775 3F40  
                           l10847 1D20                             l11487 3F02  
                           l11575 3050                             l12199 0F6C  
                           l10945 3726                             l10849 1D36  
                           l10873 30C8                             l11569 3030  
                           l10963 2F2C                             l10779 3F50  
                           l10891 310A                             l10971 3A16  
                           l11579 305A                             l10789 4270  
                           l10885 30F4                             l10973 3A34  
                           l10967 2F52                             l10799 4210  
                           l10879 30DE                             l10991 178C  
                           l10977 3A52                             l10899 3120  
                           l10979 3A62                             l10995 1796  
                           l10997 17AE                             l10999 17C6  
                __end_of_HMI_Poll 3644                             _I2C1T 0038  
                           _I2C2T 01B3                             ?_main 0001  
                 __end_of___awdiv 2968                             ?_itos 00B8  
                 _Event_DIPSwitch 4308                   __end_of___lldiv 2A24  
         __size_of_HMI_LeftSwitch 0018                   ___awdiv@divisor 00B3  
                           _INDEX 0031                   __end_of___lwdiv 34E6  
                           _MASKS FDEB                   __end_of___lwmod 3AD4  
                 ___awdiv@counter 00B5                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 00C7                    __CFG_FCMEN$OFF 000000  
                           _PortA 019F                             _PortB 0195  
                           _PortC 0095                             _PortD 008B  
                           _PortE 0081                             _PortF 01A9  
                           _PortG 018B           __end_of_Port_SetPinType 16AE  
                 _ADC_Initialised 007F                    ??_Byte_GetPair 00BD  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 00C6  
                  ??_Byte_GetZone 00B6                    Button_Poll@Pin 00D4  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 28AA  
                __end_of_MXK_Init 1B46                             _motor 01BA  
            i2Byte_GetPair@pInput 000A                             _putch 46BE  
                           main@i 01F6                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 3874             __end_ofi2_MXK_Release 476A  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 3808                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 00B4                    ??_Byte_SetPair 00C0  
                  ??_Byte_SetQuad 00C0                             plusw1 000FE3  
                           plusw2 000FDB                    ??_Byte_SetZone 00B7  
                   ?_HMI_SetRight 0001                             status 000FD8  
                 _Configure_GPIOs 372C              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 452C  
        __end_of_Motor_Continious 3F14               __size_of_LED_Toggle 0048  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
     __size_of_Port_CheckPairType 006A               __size_of_HMI_SetBar 000A  
                 __initialization 2ADA               __size_of_HMI_Render 003E  
             __end_of_Byte_GetBit 41E6                      __end_of_main 10E8  
                    __end_of_itos 24AA              HMI_SetButton@reindex 00B3  
                    SPI_Send9@dat 0079               __end_of_Byte_SetBit 3A10  
                __end_of_InitList FDCB       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 46BE       __size_of_Port_CheckPortType 0048  
                     HMI_Render@a 00B9                            ??_main 01E4  
                          ??_itos 00BC           _Console_MakeField$10974 00BF  
                   __activetblptr 000003                 Port_SetPin@pInput 00C0  
               __end_of_LCD_Reset 3CD0                 Port_SetPin@pValue 00C3  
                       ??_LED_Set 00C6                 _MXK_InitDIPSwitch 44D2  
               GetPortPORT@pInput 00B3            Port_CheckPairType@Pin1 00DB  
          Port_CheckPairType@Pin2 00DC                 __end_of_LCD_Write 4496  
                     _GetPortPORT 2E28                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 2CDC                   ??_LCD_DrawField 00CD  
      __end_of_PortProperty_Valid 346E                  __end_of_Port_Set 07D8  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0064  
             __end_of_Button_Init 2654               __end_of_Button_Poll 1E1E  
               Word_GetPair@pPair 00BF           LCD_FillRectangle@pPoint 00BC  
               __end_of_HMI_SetUp 466A                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 31D0                         ??_SPI_DCS 00B3  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   _HMI_SetNumber 43BA            Port_SetQuadType@Output 00EB  
                          _ANCON0 000FC1                  ___awdiv@dividend 00B1  
                          ?_putch 0001                  ??_Console_Render 00D4  
                   ToSegment@pCHR 00B1             _Console_SetForecolour 4738  
                _Console_FormFeed 3260            Port_SetQuadType@pInput 00E7  
                  __CFG_WDTEN$OFF 000000                            i2l1599 144E  
             __size_of_ISR_Enable 000A                            i2l7081 42F6  
                          i2l8115 22D4                            i2l6621 3532  
                          i2l8109 22CA                            i2l7087 3F9C  
                          i2l7095 3FC8                            i2l7089 3FAC  
                          i2l6617 352C                            i2l8091 224C  
                          i2l7621 2C9A                            i2l7613 2C4A  
                          i2l8093 2262                    ??_HMI_SetRight 00B1  
                          i2l7617 2C70                            i2l8097 2284  
                          i2l7627 2CC0                            i2l8099 2298  
                          i2l7645 41AE                            i2l7637 418E  
          __end_of_LCD_Word_Write 454A                    _Timer0_Restart 4702  
             ??_MXK_InitDIPSwitch 00EC                    i2_MXK_SwitchTo 417C  
                 Byte_GetBit@pBit 00B3      Console_SetForecolour@pColour 00B1  
                      _Reset_High 44B4                Console_Render@temp 00D6  
                  ??_HMI_UpSwitch 00B7                    OutSeg@pSegment 00B4  
                 ??i2_Timer0_Stop 0001                     main@myColours 01EB  
             Port_TogglePin@Value 00C8                  __end_of_delay_ms 38DE  
                    LED_Init@pLED 00DE                  __end_of_delay_us 3C30  
                   ??_Timer0_Init 00C2                     ??_Timer2_Init 00C2  
                   ??_Timer0_Stop 00B1                        _Timer0_ISR 4336  
        __size_of_Console_NewLine 0092                 Timer2_Init@DIVIDE 00CB  
                  __CFG_XINST$OFF 000000                            _OutSeg 3370  
        __size_of_HMI_InitButtons 0004                        _Motor_Init 24AA  
     __size_of_Event_HMI_UpButton 0030                        _Motor_Move 410C  
                   ??_Motor_Speed 00D0                        _Motor_Step 20C4  
            _Event_HMI_LeftButton 3B86           __end_of_Event_DIPSwitch 4336  
  __size_of_Event_HMI_RightButton 0044                            ___wmul 4146  
                 ??_HMI_DIPSwitch 00B7                         ??___awdiv 00B5  
                  __CFG_STVREN$ON 000000                            _change 00FF  
   __end_of_Event_HMI_RightButton 3F58                            _lMotor 002A  
                       ??___lldiv 00B9                            _lQueue 0025  
                      _TestButton 0181              _Event_HMI_DownButton 41E6  
                       ??___lwdiv 00B5                __size_of_ToSegment 0284  
                       ??___lwmod 00B5          __end_of_Port_SetQuadType 0CB2  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002C  
            __end_of_Console_Init 3370                 GetPortTRIS@pInput 00B3  
              __size_of_Reset_Low 001E                            clear_0 2B42  
                          clear_1 2B54                            clear_2 2B60  
                          clear_3 2B6C                            clear_4 2B78  
                ___awdiv@quotient 00B7                        Port_Init@i 00F6  
               __end_of_MXK_Queue 46E8        __end_ofHMI_SetButton@F7211 FDF8  
                          _printf 300E         __end_of_MXK_InitDIPSwitch 44F0  
                  HMI_SetButton@v 00B8            Motor_Continious@pMotor 00B1  
          HMI_SetSegments@pString 00B2                       _Console_Tab 27E8  
             LCD_Word_Write@value 00B6                      __pdataCOMRAM 003F  
              __size_of_Port_Init 0192                     ??_Port_GetPin 00B4  
        Port_CheckPortType@Output 00EA                   ??i2_Port_SetPin 0014  
                    __mediumconst FD18       __end_ofTimer2_Init@PRESCALE FDFB  
        Port_CheckPortType@pDrive 00E9                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 00E7                     ??_Port_SetPin 00C4  
                       ??_reverse 00B5             Console_MakeField@Fill 0200  
                ?_Port_SetPinType 00D7                            putch@c 00C5  
               Motor_Speed@pMotor 00CC                    ?_HMI_SetNumber 00C2  
                  i2_Word_GetPair 42D8           __end_of_Configure_GPIOs 379C  
                ??_MXK_TestButton 00B7            __end_of_Timer0_Restart 470E  
                   Set_Rotation@m 00B6                      ?_MXK_Release 0001  
    __size_of_Event_HMI_DIPSwitch 002C                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 41B2                      i2delay_us@us 0001  
       Event_HMI_DIPSwitch@pState 00CA                   ?_LCD_Word_Write 00B6  
                      __accesstop 0060           __end_of__initialization 2B7E  
                       ?_LCD_Fill 00BA                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00E3                       _Byte_GetBit 41B2  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 471A  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00B9  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
                     _Byte_SetBit 39AC                     __end_of_MASKS FDF4  
                  _PortA_Property FFE7                         LCD_Fill@i 00BC  
                       LCD_Fill@j 00BD                         LCD_Init@i 00E8  
            __size_of_HMI_SetLeft 0016              __size_of_HMI_SetDown 0016  
           ?_Event_HMI_LeftButton 0001                    __pcstackCOMRAM 0001  
                  _PortB_Property FFE5               __size_ofi2_delay_us 0040  
                    __pidataBANK0 474A                      __pidataBANK1 457E  
           ?_Event_HMI_DownButton 0001               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 452C                   Console_Render@x 00DB  
                 Console_Render@y 00DC               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FDCB  
            __end_of_Byte_GetZone 300E       Event_HMI_RightButton@pState 00CA  
                  _PortC_Property FFE3               __end_of_Timer0_Init 1F72  
                   __end_of_putch 46CC                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 20C4               __end_of_Timer0_Stop 4758  
                       ?_SPI_Init 00DE                         ?_SPI_Send 00B1  
                     _Button_Init 2580                 Port_SetType@pType 00ED  
                     _Button_Poll 1CB8              __end_of_Byte_SetByte 46DA  
            __end_of_Byte_SetPair 4452                    _HMI_LeftSwitch 460E  
                  _PortD_Property FFE1              __end_of_Byte_SetQuad 4474  
                    ??_LED_Toggle 00C9                      ??_HMI_GetBar 00B1  
            __end_of_Byte_SetZone 2ADA               __end_of_Motor_Speed 43BA  
                  _HMI_DownSwitch 45C6                     SPI_Send@pData 00B3  
           __end_of_MXK_DIPSwitch 45AE                      ??_HMI_SetBar 00B1  
                    ??_HMI_Render 00B9                    _PortE_Property FFDF  
        __size_of_HMI_SetSegments 00EC            __end_ofi2_Word_GetPair 4308  
                  _PortF_Property FFDD           Port_CheckQuadType@Pair1 00E4  
         Port_CheckQuadType@Pair2 00E5          MXK_BlockSwitchTo@pModule 00B8  
          ?_Console_SetForecolour 00B1                 _Console_Backspace 3CD0  
                 ?_Timer0_Restart 0001                           ??_putch 00C5  
        __size_of_HMI_RightSwitch 0018               _Console_ClearCursor 4094  
               __end_of_ToSegment 0A5C                    _PortG_Property FFDB  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 3E8A  
         Port_CheckQuadType@pQuad 00E2                   reverse@iterator 00B6  
                ??_SPI_DisableISR 00B3                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 44B4  
       __size_of_Event_TestButton 003C           __size_of_Port_TogglePin 0030  
                      ??_LCD_Fill 00BC                        ??_LCD_Init 00E6  
             __end_of_Port_SetPin 27E8            __end_of_PortA_Property FFE9  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 00B1  
                      ??_LED_Init 00DE                Byte_SetByte@pValue 00B3  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
                   ?_Timer0_Clear 0001                        ??_HMI_Init 00F9  
                      ??_HMI_Poll 00D5                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00DE            __end_of_PortB_Property FFE7  
                   ?_Timer0_Start 00B1                 __end_of_Port_Init 1840  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00D9  
              __end_of_LED_Toggle 3E44                __end_of_HMI_GetBar 475E  
        LCD_FillRectangle@pColour 00BA               ??_Console_Backspace 00B3  
               Set_Addr_Window@xe 00B7                 Set_Addr_Window@ye 00B8  
               Set_Addr_Window@xs 00B9                 Set_Addr_Window@ys 00B6  
                         ?_OutSeg 00B4                       ?_Motor_Init 00DE  
              Byte_SetPair@pInput 00BC                       ?_Motor_Move 00B4  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00BF  
              __end_of_HMI_SetBar 4738            __end_of_PortC_Property FFE5  
              Word_GetPair@pInput 00BD                __end_of_HMI_Render 4056  
                  ??_Set_Rotation 00B6                         ?_Port_Set 00C0  
                         ?___wmul 00B1                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 00B6                      ??_ISR_Enable 00B1  
    __size_of_Console_ResetCursor 001A              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 4626            __end_of_PortD_Property FFE3  
                         _ADC_AN0 00A4                           _ADC_AN1 009F  
                         _ADC_AN2 01C5                           _ADC_AN3 01C0  
      Event_HMI_DownButton@pState 00CA                        ??_MXK_Init 00F7  
               Port_GetPin@pInput 00B1                 _Console_MakeField 2654  
               ??_Console_NewLine 00B1            __end_of_HMI_DownSwitch 45DE  
                      ??_SPI_Init 00E4            Event_TestButton@pState 00CA  
                      ??_SPI_Send 00B4              __end_of_HMI_SetRight 4680  
                         ?_printf 00C6                 ??_HMI_InitButtons 00B1  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FFE1  
             Console_Render@F6956 01DA                ?_Console_MakeField 00B6  
                         _COUNTER 0028                   ??_HMI_SetButton 00B1  
            __end_of_HMI_UpSwitch 45F6                           _LED_Set 3C30  
         _Console_IncrementCursor 3948            __end_of_PortF_Property FFDF  
                     _gBackcolour 0077                   ??_HMI_SetNumber 00C4  
                       _I2C1_Done 006E                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0124                         _I2C1_More 0121  
                       _I2C2_More 011E                         ?_delay_ms 00B1  
       __end_of_Console_Backspace 3D1E                         ?_delay_us 00B1  
      __end_of_MXK_InitTestButton 450E                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
          __end_of_PortG_Property FFDD               ??_Console_MakeField 00B8  
                         _SPI_DCS 42A8              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001              i2Byte_GetZone@Offset 0008  
              __end_of_ISR_Enable 472E                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 00B1  
               Event_TestButton@j 007B                        ??_Mode_Set 00B1  
                  ??_Timer2_Clear 00B1                           _Font5x7 FDFB  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 00B4              SPI_DisableISR@pInput 00B1  
                   ?_Port_GetQuad 00B1                   Byte_SetBit@pBit 00B3  
            Port_TogglePin@pInput 00C5             __end_ofi2_Byte_SetBit 3D6A  
               ?_Motor_Continious 00B1            ??_Event_HMI_LeftButton 00CA  
                         __Hparam 0000                 Port_GetQuad@pQuad 00B3  
                     _Timer0_Init 1E1E                       _Timer2_Init 1F72  
                         __Lparam 0000                       _Timer0_Stop 4752  
           __size_of_Console_Init 0086                           OutSeg@a 0033  
 __end_ofPortProperty_Valid@F6830 FDEB            ??_Event_HMI_DownButton 00CA  
                   LCD_Write@mode 00B4                ??_Motor_Continious 00B5  
                 __size_of_OutSeg 0082                        ??_Port_Set 00C3  
       __end_of_Console_MakeField 2724                 _Console_PrintChar 1840  
                     _Motor_Speed 4390                     ?_Port_SetType 00EB  
                         _gCursor 003F                           ___awdiv 28AA  
           ??_Console_ClearCursor 00B1                           _lBuffer 0246  
                         ___lldiv 2968                   __size_of___wmul 0036  
                         ___lwdiv 346E                           ___lwmod 3A72  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 32EA  
              ?_Console_PrintChar 0001                           __pcinit 2ADA  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                         __ptext0 0EDC                           __ptext1 300E  
                         __ptext2 46BE                           __ptext3 1840  
                         __ptext4 27E8                           __ptext5 28AA  
                         __ptext6 3948                           __ptext7 313E  
                         __ptext8 3260                           __ptext9 454A  
                 __size_of_printf 0098                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                         _T2CONbits 000FCA  
                   LED_Set@pValue 00C5               __size_of_Reset_High 001E  
           Event_DIPSwitch@pState 00CA                      ?_GetPortPORT 00B1  
                    ?_GetPortTRIS 00B1               ??_Console_PrintChar 00C1  
                     _Port_GetPin 3E44                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00AD               LCD_DrawRectangle@p4 00A9  
                    ??i2_delay_us 0003                        ??_delay_ms 00B3  
                      ??_delay_us 00B3                           _reverse 379C  
                       _DIPSwitch 0177               __size_of_Timer0_ISR 002E  
                     _Port_SetPin 2724                    LCD_DrawField@i 00D3  
                       _LCD_Reset 3C80               __size_of_Motor_Init 00D6  
             __size_of_Motor_Move 003A               __size_of_Motor_Step 0124  
                       _LCD_Write 4474              __size_of_MXK_Dequeue 0030  
                      delay_ms@ms 00B1              end_of_initialization 2B7E  
                      delay_us@us 00B1                 ??_HMI_SetSegments 00B4  
         Console_PrintChar@pInput 00C4                         _HMI_SetUp 4654  
                    _Console_Init 32EA                   HMI_SetUp@pValue 00B1  
            __size_of_MXK_Release 0016        __end_of_Port_CheckPairType 3948  
                         itos@Out 00C0                    ??_Port_GetQuad 00B4  
              _PortProperty_Valid 33F2                Byte_SetQuad@pInput 00BC  
              SPI_MinSpeed@pInput 00C0                Byte_SetQuad@pValue 00BF  
           __size_of_Byte_GetPair 001E                   ___lldiv@divisor 00B5  
           __size_of_Byte_GetZone 009C                 ??_HMI_RightSwitch 00B7  
                 ___lldiv@counter 00BD         __end_of_Console_PrintChar 19CC  
                  ??_Port_SetType 00EE        __end_of_Port_CheckQuadType 3B2E  
                         printf@c 00CD                           printf@f 00C6  
                  Port_Init@pPort 00F3                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 00BA  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 00C0             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 3DFC             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 3FDA                Button_Init@pInitIO 00F0  
           Timer0_Init@pFrequency 00BE               _Event_HMI_DIPSwitch 4364  
               ?_Port_SetQuadType 00E7                       _gForecolour 00FD  
       ??_Console_IncrementCursor 00B5            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 00EB  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00B7  
           Console_Render@lCursor 00D7                         _MXK_Queue 46DA  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00B3  
      __size_of_Console_Backspace 004E                   _Set_Addr_Window 2B88  
                  SPI_Init@pClock 00DE                  ??_LCD_Word_Write 00B8  
           __end_of_LCD_DrawField 2F72                    Port_Set@pInput 00C0  
                  SPI_Init@pInput 00E4              ??_PortProperty_Valid 00C4  
                  Port_Set@pValue 00C2                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 313E                        ?_LCD_Write 00B4  
                    _Byte_GetPair 450E                HMI_SetButton@F7211 FDF4  
                    _Byte_GetZone 2F72                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 00D1                 LCD_DrawField@ymax 00D2  
            ?_Event_HMI_DIPSwitch 0001                    _Port_TogglePin 4278  
                      ?_HMI_SetUp 0001                  _Event_TestButton 40D0  
            Port_SetPinType@Props 00DC                      ?_Byte_GetBit 00B1  
         __size_ofi2_Byte_GetPair 001A                      _Byte_SetByte 46CC  
                    _Byte_SetPair 4430                      _Byte_SetQuad 4452  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 2A24  
            Port_SetPinType@pType 00DA                        main@myName 01E5  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00B1  
      __end_of_Event_HMI_UpButton 4278                     ?_SPI_MaxSpeed 00C0  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 00C0  
           __end_ofi2_Timer0_Stop 4764                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0074  
                   ?i2_Motor_Step 0001             __size_of_HMI_SetRight 0016  
      __size_of_Console_MakeField 00D0                    __end_of_OutSeg 33F2  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 417C  
           __end_of_HMI_DIPSwitch 45C6                     __pidataCOMRAM 471A  
           _Event_HMI_RightButton 3F14                      ?_Button_Init 00EC  
                    ?_Button_Poll 00CC                         _Bus_State 0043  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
            __end_of_Timer0_Clear 4702                 __size_of_MXK_Init 017A  
            __end_of_Timer2_Clear 474A                    __end_of_printf 30A6  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 00BD                  ??_Timer0_Restart 00B1  
            __end_of_Timer0_Start 4430           ??_Console_SetForecolour 00B3  
              Port_SetType@Output 00F0               start_initialization 2ADA  
                      ?_MXK_Queue 00B1          PortProperty_Valid@Errors 00C6  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 36B8  
              Port_SetType@pInput 00EB                        HMI_Init@in 01E2  
             HMI_SetNumber@pInput 00C2             __end_ofi2_Port_SetPin 2CDC  
          __end_of_Port_TogglePin 42A8                     ?_Word_SetPair 00C0  
               Byte_SetBit@pInput 00B1                    ??_MXK_SwitchTo 00B7  
               Byte_SetBit@pValue 00B4                ?_LCD_FillRectangle 00BA  
           ??_Event_HMI_DIPSwitch 00CA               _Console_ResetCursor 454A  
     PortProperty_Valid@pPinDrive 00C2              MXK_BlockSwitchTo@CUR 00B7  
        PortProperty_Valid@pInput 00C0                     i2_MXK_Release 4764  
          LCD_FillRectangle@pSize 00C0                    SPI_Send@pInput 00B1  
                    _HMI_SetRight 466A                      ??_Reset_High 00C5  
        __size_of_Port_SetPinType 01C0                     ??_HMI_SetLeft 00B1  
                   ??_HMI_SetDown 00B1                    ??_SPI_MaxSpeed 00C2  
           Port_SetQuadType@pQuad 00E9                         _ToSegment 07D8  
             ??_LCD_FillRectangle 00C4             Port_SetQuadType@pType 00EA  
                 _Console_NewLine 313E                    ??_SPI_MinSpeed 00C2  
                    _HMI_UpSwitch 45DE                         _Reset_Low 4496  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 476A  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 018C  
                       _gCharSize 00F9                  Timer2_Init@INDEX 002F  
                       OutSeg@cur 0035                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 00E2                          ??_OutSeg 00B5  
                       OutSeg@out 00B8           __size_of_Console_Render 020C  
                    ??_Motor_Move 00B8                      ??_Motor_Step 00C5  
              Byte_SetZone@Offset 00BA                          ??___wmul 00B5  
            ?_Console_ResetCursor 0001                         _Port_Init 16AE  
                     __pdataBANK0 00F9                       __pdataBANK1 01CA  
               __size_of_Port_Set 03BA                Byte_SetZone@pChunk 00B4  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 00B1  
              Byte_SetZone@pValue 00B6                     Mode_Set@pMode 00B1  
                        ??_printf 00CA           __end_of_Set_Addr_Window 2C32  
        Port_CheckQuadType@Output 00E6                         _gLineSize 01DE  
        Port_CheckQuadType@pDrive 00E3                    ??_Word_GetPair 00C0  
        Port_CheckQuadType@pInput 00E0              __end_of_Port_GetQuad 3DB4  
       __end_of_LCD_FillRectangle 372C                       __pbssBIGRAM 0246  
                        ?_LED_Set 00C5                       __pbssCOMRAM 0025  
              __end_of_Reset_High 44D2                     __pcstackBANK0 00B1  
                   __pcstackBANK1 01E2                        itos@Length 00BE  
                  ??_Word_SetPair 00C4                __end_of_Timer0_ISR 4364  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 00CA  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 0EDC  
                        ?_SPI_DCS 00B1                   ?_Port_TogglePin 00C5  
                     ??_LCD_Write 00B5                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 2580  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Move 4146  
              __end_of_Motor_Step 21E8             Timer2_Init@pFrequency 00BE  
                  ?i2_MXK_Release 0001                       ??_HMI_SetUp 00B1  
        Port_CheckPairType@Output 00DD                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00DA          Port_CheckPairType@pInput 00D7  
                  reverse@tempVar 00B5                _MXK_InitTestButton 44F0  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00BE  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 00BE  
                ??_HMI_LeftSwitch 00B7                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00B1                     _lStepFunction 006B  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 00BE  
                ??_HMI_DownSwitch 00B7                         __pintcode 1408  
                   __pmediumconst FD18                      ?_Motor_Speed 00CC  
           ??_Console_ResetCursor 00B1                          ?___awdiv 00B1  
                       __ptext100 0A5C                         __ptext101 3E8A  
                       __ptext110 2A24                         __ptext102 4430  
                       __ptext111 4738                         __ptext103 3AD4  
                       __ptext120 46AC                         __ptext112 10E8  
                       __ptext104 38DE                         __ptext121 2654  
                       __ptext113 36B8                         __ptext105 33F2  
                       __ptext130 42D8                         __ptext122 41B2  
                       __ptext114 2ECE                         __ptext106 4056  
                       __ptext131 4564                         __ptext123 32EA  
                       __ptext115 4146                         __ptext107 450E  
                       __ptext132 34E6                         __ptext116 2B88  
                       __ptext108 2F72                         __ptext133 3D1E  
                       __ptext125 4336                         __ptext117 452C  
                       __ptext109 4452                         __ptext134 417C  
                       __ptext126 21E8                         __ptext118 4474  
                       __ptext135 3F9A                         __ptext127 475E  
                       __ptext119 3808                         __ptext136 4764  
                       __ptext128 470E                         __ptext137 46E8  
                       __ptext129 2C32                         __ptext138 0000  
                       _pShiftVal 0071               __end_of_HMI_SetLeft 4696  
             __end_of_HMI_SetDown 46AC                          ?___lldiv 00B1  
                      ?_Port_Init 00F1              Timer0_Init@pCPUClock 00C4  
      Motor_Continious@pDirection 00B3                          ?___lwdiv 00B1  
                        ?___lwmod 00B1            ?_Event_HMI_RightButton 0001  
             ?_MXK_InitTestButton 0001                 ?_Console_FormFeed 0001  
               _GetPortProperties 2D82       __end_ofTimer0_Init@PRESCALE FDDB  
              ??_Console_FormFeed 00B1         __size_of_Motor_Continious 0044  
                 _HMI_SetSegments 22E6                ?_GetPortProperties 00B1  
              HMI_SetRight@pValue 00B1          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                     ??i2_MXK_Queue 0004  
                     ??_MXK_Queue 00B4                      ?_Port_GetPin 00B1  
               HMI_SetLeft@pValue 00B1             __end_of_HMI_SetButton 3260  
            __size_of_Console_Tab 00C2                          ?_reverse 00B1  
                    ?_Port_SetPin 00C0             __end_of_HMI_SetNumber 43E4  
                ___lwdiv@quotient 00B6                   _HMI_RightSwitch 45F6  
               HMI_SetDown@pValue 00B1               ??_GetPortProperties 00B3  
         __end_of_Console_NewLine 31D0              ??_MXK_InitTestButton 00DE  
              Byte_GetPair@pInput 00BA                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 476E                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 4564  
                        _LCD_Fill 3B2E                          _LCD_Init 1B46  
                  ___wmul@product 00B5                          _HMIBoard 0127  
                  i2_Byte_GetZone 34E6                          _LED_Init 3A10  
                       delay_ms@u 00B3                Button_Poll@pButton 00CC  
                       delay_us@u 00B3                          _HMI_Init 12F4  
                        _HMI_Poll 35D0                MXK_Queue@pCallback 00B1  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 40D0          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00BE  
                        i2u335_40 3508                          i2u335_47 34FE  
                        i2u337_40 3550                          _PIR1bits 000F9E  
                        i2u337_45 354C                          _PIR3bits 000FA4  
                        i2u390_44 3D58                          i2u390_45 3D54  
                        i2u477_40 222A                          i2u389_44 3D32  
                        i2u389_45 3D2E                          i2u478_40 223E  
                        i2u479_40 2276              __size_of_Byte_SetBit 0064  
                        i2u882_48 434E                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
   __size_of_Event_HMI_LeftButton 0058                  HMI_SetBar@pValue 00B1  
                       main@F7241 01D4                         main@F7238 01CA  
               Button_Init@pInput 00EC           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00DB  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 0082  
   __size_of_Event_HMI_DownButton 0032             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 2E28  
                        _SSP2STAT 000F6D                      _Set_Rotation 30A6  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 3F9A  
              _Port_CheckPairType 38DE                          _MXK_Init 19CC  
           __size_of_Timer0_Start 0024                   MXK_SwitchTo@CUR 00B7  
                        _SPI_Init 0000          __end_of_Event_TestButton 410C  
                        _SPI_Send 3808                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00B6  
               ___wmul@multiplier 00B1                 Byte_GetBit@Output 00B5  
                      printf@flag 00CA              Timer2_Init@pCPUClock 00C7  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 35D0             Motor_Speed@pFrequency 00CE  
               Byte_GetBit@pInput 00B1               Port_SetPinType@pPin 00D9  
            __size_of_Button_Poll 0166                _Port_CheckQuadType 3AD4  
                   _MXK_DIPSwitch 4596               ?_Port_CheckPairType 00D7  
            __end_of_SPI_MinSpeed 36B8                     ??_MXK_Dequeue 00C7  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 3DB4             Button_Poll@pIncrement 00CE  
         PortProperty_Valid@F6830 FDDB              __end_ofi2_Motor_Step 22E6  
                 ??i2_MXK_Release 0001                         copy_data0 2AEE  
                       copy_data1 2B0E                         copy_data2 2B2E  
                   ??_MXK_Release 00B1            __end_ofi2_Byte_GetPair 457E  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00E0            __end_ofi2_Byte_GetZone 355C  
             __end_ofi2_MXK_Queue 46F6               ?_Port_CheckPortType 00E7  
                 itos@destination 00BA                          _InitList FD19  
            _Motor_Step$intlevel0 20CA                          _Mode_Set 46AC  
              Port_GetQuad@Output 00B6                       ??_ToSegment 00B1  
                    _ISR_Function 1408                      _Timer0_Clear 46F6  
                     _HMI_SetLeft 4680                       _HMI_SetDown 4696  
              Port_GetQuad@pInput 00B1                      _Timer2_Clear 4742  
            __end_of_Word_GetPair 4094                          _lCBuffer 0100  
            ??_Port_CheckPairType 00DB                       ??_Reset_Low 00C5  
                        __Hrparam 0000                      _Timer0_Start 440C  
                    OutSeg@pInput 00B7                    _Console_Render 10E8  
                        __Lrparam 0000                   Timer2_Init@RDIV 00C3  
      Event_HMI_LeftButton@pState 00CA                    LCD_Write@value 00B5  
                        _Port_Set 041E                      OutSeg@segset 0034  
                       rand@screw 0032              __end_of_Word_SetPair 3ED0  
                     ??_Port_Init 00F4           __end_of_HMI_SetSegments 23D2  
            ??_Port_CheckQuadType 00E4             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 3FDA                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 00EA                  __size_of___lwmod 0062  
                        _lBufferX 0037                          _lBufferY 0036  
             Timer2_Init@PRESCALE FDF8                _Event_HMI_UpButton 4248  
                 LCD_Fill@pColour 00BA                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0075  
         __end_of_HMI_RightSwitch 460E            Byte_GetZone@pChunkSize 00B5  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 00B5  
           __size_of_Port_SetType 022A                     reverse@length 00B3  
                       itos@input 00B8             i2MXK_SwitchTo@pModule 0008  
              Motor_Init@pAddress 00E0                          _delay_ms 3874  
                        _delay_us 3BDE                          _clearall 0080  
                 ___lwdiv@divisor 00B3    __size_of_Console_SetForecolour 000A  
             ?_Event_HMI_UpButton 0001                   ___lwdiv@counter 00B5  
   __end_of_Console_SetForecolour 4742                   Port_GetPin@pPin 00B3  
                        __ptext10 3CD0                          __ptext11 4094  
                        __ptext20 16AE                          __ptext12 4390  
                        __ptext21 0CB2                          __ptext13 410C  
                        __ptext30 4218                          __ptext22 3DB4  
                        __ptext14 440C                          __ptext31 20C4  
                        __ptext23 041E                          __ptext15 24AA  
                        __ptext40 30A6                          __ptext32 4752  
                        __ptext24 46CC                          __ptext16 1E1E  
                        __ptext41 3B2E                          __ptext33 4702  
                        __ptext25 2CDC                          __ptext17 46F6  
                        __ptext50 3370                          __ptext42 372C  
                        __ptext34 3F58                          __ptext26 2D82  
                        __ptext18 3ED0                          __ptext51 35D0  
                        __ptext43 355C                          __ptext35 463E  
                        __ptext27 2E28                          __ptext19 19CC  
                        __ptext60 3D6A                          __ptext52 1CB8  
                        __ptext44 3C80                          __ptext36 46DA  
                        __ptext28 3A10                          __ptext61 4308  
                        __ptext53 4596                          __ptext45 3874  
                        __ptext37 3FDA                          __ptext29 3C30  
                        __ptext70 466A                          __ptext62 41E6  
                        __ptext54 45AE                          __ptext46 4496  
                        __ptext38 3BDE                          __ptext71 4680  
                        __ptext63 4248                          __ptext55 45C6  
                        __ptext47 44B4                          __ptext39 1B46  
             ??_MXK_BlockSwitchTo 00B7                          __ptext80 3DFC  
                        __ptext72 43BA                          __ptext64 3F14  
                        __ptext56 45DE                          __ptext48 4724  
                        __ptext81 4278                          __ptext73 23D2  
                        __ptext65 3B86                          __ptext57 45F6  
                        __ptext49 4018                          __ptext90 2968  
                        __ptext82 2724                          __ptext74 379C  
                        __ptext66 4364                          __ptext58 460E  
                        __ptext91 4742                          __ptext83 3E44  
                        __ptext75 3A72                          __ptext67 40D0  
                        __ptext59 4626                          __ptext92 43E4  
                        __ptext84 472E                          __ptext76 346E  
                        __ptext68 31D0                          __ptext93 42A8  
                        __ptext85 4758                          __ptext77 22E6  
                        __ptext69 4654                          __ptext94 2580  
                        __ptext86 12F4                          __ptext78 07D8  
                        __ptext95 44D2                          __ptext87 3644  
                        __ptext79 4696                          __ptext96 476A  
                        __ptext88 0000                          __ptext97 44F0  
                        __ptext89 1F72                          __ptext98 14EE  
                        __ptext99 39AC                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 00CA                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 4248                 HMI_SetSegments@in 00B5  
           Button_Init@pThreshold 00EE                     __size_of_main 020C  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 00BC  
          __end_of_Console_Render 12F4               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 3D6A  
             __end_of_MXK_Release 4654                    _MXK_TestButton 4626  
                   i2_Byte_SetBit 3D1E              ??_Event_HMI_UpButton 00CA  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 4018  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0154  
            __size_of_Timer2_Init 0152                          int$flags 0049  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0CB2  
                    Port_Set@Type 00D7        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 00E6  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 0064                    Timer0_Init@PRE 0030  
                    _SSP2STATbits 000F6D                        _LED_Toggle 3DFC  
                      _HMI_GetBar 4758                  _Motor_Continious 3ED0  
            Button_Init@pGetState 00F3            PortProperty_Valid@Pair 00D6  
                ??_Port_TogglePin 00C8                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2       __end_of_Event_HMI_DIPSwitch 4390  
          PortProperty_Valid@pPin 00C3                        _HMI_SetBar 472E  
                      _HMI_Render 4018                  Byte_SetZone@MASK 00BB  
                     i2_MXK_Queue 46E8                    Timer2_Init@DIV 0060  
                  Timer2_Init@PRE 002E                  Byte_SetZone@pMax 00B3  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 00F6                          itos@Data 00BC  
              LCD_FillRectangle@i 00C6                LCD_FillRectangle@j 00C7  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                    reverse@input 00B1            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 00B1                  ___lldiv@dividend 00B1  
          __end_of_MXK_TestButton 463E                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042           ??_Event_HMI_RightButton 00CA  
                  _SPI_DisableISR 43E4                   Port_Init@pInput 00F1  
                        printf@ap 00CB          Event_HMI_UpButton@pState 00CA  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 4724  
                ?_HMI_SetSegments 00B2           Console_MakeField@Column 00BD  
           __size_of_SPI_MaxSpeed 0074                     SPI_DCS@pInput 00B1  
           __size_of_SPI_MinSpeed 0074                   ??_MXK_DIPSwitch 00B7  
          Event_HMI_DIPSwitch@Bar 00CB             __size_ofi2_Motor_Step 00FE  
         Console_MakeField@pInput 00BC                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 00B9                     ??_GetPortPORT 00B3  
                 ___lwmod@divisor 00B3                     ??_GetPortTRIS 00B3  
           Timer0_Start@pFunction 00B1                Word_SetPair@pInput 00C0  
                 ___lwmod@counter 00B5                Word_SetPair@pValue 00C3  
                Motor_Init@pMotor 00DE                       _MXK_Dequeue 4218  
                  LED_Toggle@pLED 00C9                     _LCD_DrawField 2ECE  
                _Port_SetQuadType 0A5C                       _MXK_Release 463E  
       __size_of_Console_FormFeed 008A                      _MXK_SwitchTo 3F58  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 00B8  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00C2  
                 _Port_SetPinType 14EE           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00B9                Byte_GetZone@pChunk 00B4  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 4564  
              Byte_GetZone@pInput 00B1           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 39AC             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 440C                      _SPI_MaxSpeed 355C  
                    _SPI_MinSpeed 3644                Port_Set@TypeActual 00D5  
