/* 
 * File:   Types.h
 * Author: David Ledger
 *
 * Created on 13 September 2016, 11:57 AM
 */

#ifndef TYPES_H
#define	TYPES_H
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include <xc.h>
#include <stdbool.h>
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#define SETALL(a, v)                {for(int aabb = 0; aabb < ARRAYLEN(a); aabb++){a[aabb]=v;}}   
#define STOP                        0
#define ENDOFTEXT                   (char)35
#define NULLPTR                     (void*)0
#define ifnull(x)                   if(x==NULLPTR)
#define ifnnull(x)                  if(x!=NULLPTR)
#define ifzero(x)                   if(x==0)
#define ifnzero(x)                  if(x!=0)
#define loop()                      for(;;)
////////////////////////////////////////////////////////////////////////////////////
//#define NULL						0
#define OFF                         0
#define ON                          1
#define ERROR                       2

#define MAXUINT8                    255
#define MAXUINT16                   65535
#define MAXUINT32                   4294967295

#define DEFAULT_SPI                 KHZ(100)
#define INPUT						(UINT8)1
#define OUTPUT						(UINT8)0

#define BUTTON_DOWN                 0
#define BUTTON_UP                   1

#define eTypeOutput					eTypeOutputPushPull
#define SevenSegmentMode            eSPI_Mode2
#define LCDSPIMode                  eSPI_Mode1
////////////////////////////////////////////////////////////////////////////////////
#define SPI1_SCK					(ePin)3
#define SPI1_SOMI					(ePin)4
#define SPI1_SIMO					(ePin)5
#define SPI1_CS						(ePin)2
#define SPI2_SCK					(ePin)6
#define SPI2_SOMI					(ePin)5
#define SPI2_SIMO					(ePin)4
#define SPI2_CS						(ePin)7
#define I2C1_SCL					(ePin)3
#define I2C1_SDA					(ePin)4
#define I2C2_SDA					(ePin)5
#define I2C2_SCL					(ePin)6
////////////////////////////////////////////////////////////////////////////////////
#define SSPSTAT_BF					(UINT8)0
#define SSPSTAT_UA					(UINT8)1
#define SSPSTAT_RW					(UINT8)2
#define SSPSTAT_S					(UINT8)3
#define SSPSTAT_P					(UINT8)4
#define SSPSTAT_DA					(UINT8)5
#define SSPSTAT_CKE					(UINT8)6
#define SSPSTAT_CKE_ATI				(UINT8)0
#define SSPSTAT_CKE_ITA				(UINT8)1
#define SSPSTAT_CKE_SMB_EN			(UINT8)1
#define SSPSTAT_CKE_SMB_DIS			(UINT8)0
#define SSPSTAT_SMP					(UINT8)7
#define SSPSTAT_SMP_MID				(UINT8)0
#define SSPSTAT_SMP_END				(UINT8)1
#define SSPSTAT_SMP_HGH_SPEED		(UINT8)0
#define SSPSTAT_SMP_STA_SPEED		(UINT8)1
////////////////////////////////////////////////////////////////////////////////////
#define SSPCON1_WCOL				(UINT8)7
#define SSPCON1_WCOL_NO_COL			(UINT8)0
#define SSPCON1_WCOL_COL			(UINT8)1
#define SSPCON1_SSPOV				(UINT8)6
#define SSPCON1_SSPOV_NO_OVFLW		(UINT8)0
#define SSPCON1_SSPOV_OVFLW			(UINT8)1
#define SSPCON1_SSPEN				(UINT8)5
#define SSPCON1_SSPEN_OFF			(UINT8)0
#define SSPCON1_SSPEN_ON			(UINT8)1
#define SSPCON1_CKP					(UINT8)4
#define SSPCON1_CKP_IDLEH			(UINT8)1
#define SSPCON1_CKP_IDLEL			(UINT8)0
#define SSPCON1_CKP_RELEASE			(UINT8)1
#define SSPCON1_CKP_STRETCH			(UINT8)0
#define SSPCON1_SSPM				(UINT8)0
#define SSPCON1_SSPM_F_4			(UINT8)0
#define SSPCON1_SSPM_F_16			(UINT8)1
#define SSPCON1_SSPM_F_64			(UINT8)2
#define SSPCON1_SSPM_F_TMR2			(UINT8)3
#define SSPCON1_SSPM_S_CSEN			(UINT8)4
#define SSPCON1_SSPM_S_CSDIS		(UINT8)5
#define SSPCON1_SSPM_I2C_S_07B_SSI	(UINT8)0xF
#define SSPCON1_SSPM_I2C_S_10B_SSI	(UINT8)0xE
#define SSPCON1_SSPM_I2C_M_FIRM		(UINT8)0xB
#define SSPCON1_SSPM_I2C_MSK		(UINT8)0x9
#define SSPCON1_SSPM_I2C_M_FOSC4	(UINT8)0xA
#define SSPCON1_SSPM_I2C_S_10B		(UINT8)0x7
#define SSPCON1_SSPM_I2C_S_07B		(UINT8)0x6
////////////////////////////////////////////////////////////////////////////////////
#define SSPCON2_GCEN				(UINT8)7
#define SSPCON2_GCEN_GEN			(UINT8)1
#define SSPCON2_GCEN_GDIS			(UINT8)0
#define SSPCON2_ACKSTAT				(UINT8)6
#define SSPCON2_ACKSTAT_NACK		(UINT8)1
#define SSPCON2_ACKSTAT_ACK			(UINT8)0
#define SSPCON2_ACKDT				(UINT8)5
#define SSPCON2_ACKDT_NACK			(UINT8)1
#define SSPCON2_ACKDT_ACK			(UINT8)0
#define SSPCON2_ACKEN				(UINT8)4
#define SSPCON2_ACKEN_IDLE			(UINT8)0
#define SSPCON2_ACKEN_TRANS			(UINT8)1
#define SSPCON2_RCEN				(UINT8)3
#define SSPCON2_RCEN_RECEIV			(UINT8)1
#define SSPCON2_RCEN_IDLE			(UINT8)0
#define SSPCON2_PEN					(UINT8)2
#define SSPCON2_PEN_S_COND			(UINT8)1
#define SSPCON2_PEN_S_IDLE			(UINT8)0
#define SSPCON2_RSEN				(UINT8)1
#define SSPCON2_RSEN_RSC			(UINT8)1
#define SSPCON2_RSEN_RSCI			(UINT8)0
#define SSPCON2_SEN					(UINT8)0
#define SSPCON2_SEN_SC				(UINT8)1
#define SSPCON2_SEN_SCI				(UINT8)0
////////////////////////////////////////////////////////////////////////////////////
#define TXSTA_CSRC					(UINT8)7
#define TXSTA_CSRC_MASTER			(UINT8)1
#define TXSTA_CSRC_SLAVE			(UINT8)0
#define TXSTA_TX9					(UINT8)6
#define TXSTA_TX9_9BIT				(UINT8)1
#define TXSTA_TX9_8BIT				(UINT8)0
#define TXSTA_TXEN					(UINT8)5
#define TXSTA_TXEN_TXEN				(UINT8)1
#define TXSTA_TXEN_TXDIS			(UINT8)0
#define TXSTA_SYNC					(UINT8)4
#define TXSTA_SYNC_SYNC				(UINT8)1
#define TXSTA_SYNC_ASYN				(UINT8)0
#define TXSTA_SENDB					(UINT8)3
#define TXSTA_SENDB_SEND_SYNCB		(UINT8)1
#define TXSTA_SENDB_COMPL_SYNC		(UINT8)0
#define TXSTA_BRGH					(UINT8)2
#define TXSTA_BRGH_HIGHSP			(UINT8)1
#define TXSTA_BRGH_LOWSP			(UINT8)0
#define TXSTA_TRMT					(UINT8)1
#define TXSTA_TRMT_EMPTY			(UINT8)1
#define TXSTA_TRMT_FULL				(UINT8)0
#define TXSTA_TX9D					(UINT8)0
////////////////////////////////////////////////////////////////////////////////////
#define RCSTA_SPEN					(UINT8)7
#define RCSTA_SPEN_SP_EN			(UINT8)1
#define RCSTA_SPEN_SP_DIS			(UINT8)0
#define RCSTA_RX9					(UINT8)6
#define RCSTA_RX9_9BIT_REC			(UINT8)1
#define RCSTA_RX9_8BIT_REC			(UINT8)0
#define RCSTA_SREN					(UINT8)5
#define RCSTA_SREN_EN_REC			(UINT8)1
#define RCSTA_SREN_DIS_REC			(UINT8)0
#define RCSTA_CREN					(UINT8)4
#define RCSTA_CREN_EN_REC			(UINT8)1
#define RCSTA_CREN_DIS_REC			(UINT8)0
#define RCSTA_ADDEN					(UINT8)3
#define RCSTA_ADDEN_EN_DECT			(UINT8)1
#define RCSTA_ADDEN_DIS_DECT		(UINT8)0
#define RCSTA_FERR					(UINT8)2
#define RCSTA_FERR_FRAME_ERR		(UINT8)1
#define RCSTA_FERR_NO_FRAME			(UINT8)0
#define RCSTA_OERR					(UINT8)1
#define RCSTA_OERR_OVERR_ERR		(UINT8)1
#define RCSTA_OERR_NO_OVERR			(UINT8)0
#define RCSTA_RX9D					(UINT8)0
////////////////////////////////////////////////////////////////////////////////////
#define BAUDCON_ABDOVF				(UINT8)7
#define BAUDCON_ABDOVF_BRG_ROLL		(UINT8)1 
#define BAUDCON_ABDOVF_NBRG_ROLL	(UINT8)0 
#define BAUDCON_RCIDL				(UINT8)6  
#define BAUDCON_RCIDL_RX_OP_IDLE	(UINT8)1
#define BAUDCON_RCIDL_RX_OP_ACTIVE	(UINT8)0
#define BAUDCON_DTRXP				(UINT8)5
#define BAUDCON_DTRXP_RX_INV		(UINT8)1
#define BAUDCON_DTRXP_RX_NONINV		(UINT8)0
#define BAUDCON_SCKP				(UINT8)4
#define BAUDCON_SCKP_TX_I_LOW		(UINT8)1
#define BAUDCON_SCKP_TX_I_HIGH		(UINT8)0
#define BAUDCON_BRG16				(UINT8)3
#define BAUDCON_BRG16_16BIT_BAUD	(UINT8)1
#define BAUDCON_BRG16_8BIT_BAUD		(UINT8)0
#define BAUDCON_UN					(UINT8)2
#define BAUDCON_WUE					(UINT8)1 
#define BAUDCON_WUE_WAKEUP_EN		(UINT8)1
#define BAUDCON_WUE_WAKEUP_DIS		(UINT8)0
#define BAUDCON_ABDEN				(UINT8)0 
#define BAUDCON_ABDEN_EN_AUTOBAUD	(UINT8)1
#define BAUDCON_ABDEN_DIS_AUTOBAUD	(UINT8)0
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
#define AN0             eP0
#define AN1             eP1
#define AN2             eP2
#define AN3             eP3
#define GPIO            eP4_7
#define GPIO0           eP4
#define GPIO1           eP5
#define GPIO2           eP6
#define GPIO3           eP7
#define ISR             eP0_3
#define ISR_GPIO0       eP0
#define ISR_GPIO1       eP1
#define ISR_GPIO2       eP2
#define ISR_GPIO3       eP3
#define TEST_BUTTON     eP4
#define TEST_LED        eP0_1
#define TEST_LED1       eP0
#define TEST_LED2       eP1
#define LED             eP0_1
#define LED1            eP0
#define LED2            eP1
#define IO_CS1          eP2 
#define IO_SCK_SCL1     eP3
#define IO_SOMI_SDA1    eP4
#define IO_SIMO1        eP5
#define UART_TX         eP6
#define UART_RX         eP7
#define DIP             eP0_3
#define DIP1            eP0
#define DIP2            eP1
#define DIP3            eP2
#define DIP4            eP4
#define IO_CS2          eP7
#define IO_SCLK_SCK2    eP6
#define IO_SOMI_SDA2    eP5
#define IO_SIMO2        eP4
#define DIR             eP0
#define STEP            eP1
#define HMI_DIP         eP0_3
#define HMI_UP          eP7
#define HMI_DOWN        eP6
#define HMI_LEFT        eP5
#define HMI_RIGHT       eP4
#define IO_0            eP0
#define IO_1            eP1
#define IO_2            eP2
#define IO_3            eP3
#define IO_4            eP4
#define IO_5            eP5
#define IO_6            eP6 
#define IO_7            eP7
#define IO_ADDR         eP0_3
#define IO_ADDR0        eP0
#define IO_ADDR1        eP1
#define IO_ADDR2        eP2
#define IO_ADDR3        eP3
#define IO_CS           eP4
#define USBDM           eP3
#define USBDP           eP4
#define USB_STATE       eP5
#define IO_READ         eP6
#define IO_NRST         eP6
#define IO_WRITE        eP7
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef unsigned int		bits;
typedef unsigned char		byte;
typedef signed char         INT8;
typedef signed short		INT16;
typedef signed long         INT32;
typedef unsigned char		UINT8;
typedef unsigned short		UINT16;
typedef unsigned long		UINT32;
typedef UINT8	const		CUINT8;
typedef UINT16	const		CUINT16;
typedef UINT32	const		CUINT32;
typedef INT16 * const       INT16Ptr;
typedef UINT8	* 			UINT8Ptr;
typedef UINT16	* 			UINT16Ptr;
typedef UINT32	*			UINT32Ptr;
typedef UINT8	* const		CUINT8Ptr;
typedef UINT16	* const		CUINT16Ptr;
typedef UINT32	* const		CUINT32Ptr;
typedef UINT8 *				PTR;
typedef char *				str;
typedef char * const        cstr;
typedef PTR const			CPTR;
typedef PTR *				PPTR;
typedef void *functPtr();
typedef void (*Function)();
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct Byte         Byte;
typedef Byte *              BytePtr;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct Word         Word;
typedef Word *              WordPtr;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef union PortProperty  PortProperty;
typedef PortProperty *      PortPropertyPtr;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Instructions per millisecond. */
#define INSNS_PER_MS    (CPUCLOCK / 4000UL)
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Delay loop is about 10 cycles per iteration. */
#define LOOPS_PER_MS    (INSNS_PER_MS / 10UL)
#define LOOPS_PER_US    (LOOPS_PER_MS/1000UL)
//////////////////////////////////////////////////////////////////////////////////////////////////////////
#define HZ(f)       (f)
#define KHZ(f)      (f*1000L)
#define MHZ(f)      (f*1000000L)
/* Adjust to your clock frequency (in Hz). */
#define CPUCLOCK    MHZ(48)
#define SPIFREQ     MHZ(3)
#define abs(a)      ((a<0)?-a:a)
#define ARRAYLEN(a) (sizeof(a)/sizeof(a[0]))
#define PORTPROPERTY(T0, T1, T2, T3, T4, T5, T6, T7) {(UINT16)T0 | (T1 << 2) | (T2 << 4) | (T3 << 6) | (T4 << 8) | (T5 << 10) | (T6 << 12) | (T7 << 14)}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

#define EHL	0x0
#define ELow 0x1
#define EHigh 0x2
#define ENone 0x3
typedef enum 
{
	eHL		= EHL,
	eLow	= ELow,
	eHigh	= EHigh,
	eNone	= ENone
}ePinDrive;
typedef enum 
{
	ePinErrorNone,
	ePinErrorCannotDriveHigh,
	ePinErrorCannotDriveLow,
	ePinErrorCannotDrive,
	ePinErrorPinInput,
	ePinErrorState
} ePinError;

typedef enum 
{
ea=95,
eb= 124,
ec=88,
ed=94,
ee=123,
ef=113,
eg=111,
eh=116,
ei=4,
ej=14,
ek=122,
el=6,
em=20,
en=84,
eo=92,
ep=115,
eq=103,
er=80,
es=109,
et=120,
eu=28,
ev=98,
ew=42,
ex=100,
ey=110,
ez=91,
e0 = 0x3F,
e1 = 0x6,
e2 = 0x5B,
e3 = 0x4F,
e4 = 0x66,
e5 = 0x6D,
e6 = 0x7d,
e7 = 0x7,
e8 = 0x7F,
e9 = 0x6F,
eA = 0x77,
eB = 0x7F,
eC = 0x39,
eD = 0x3F,
eE = 0x79,
eF = 0x71,
eG = 0x3D,
eH = 0x76,
eI = 0x06,
eJ = 0x1E,
eK = 0x57,
eL = 0x38,
eM = 0x76,
eN = 0x76,
eO = 0x3F,
eP = 0x73,
eQ = 0x3F,
eR = 0x77,
eS = 0x6D,
eT = 0x31,
eU = 0x3E,
eV = 0x3E,
eW = 0x7E,
eX = 0x76,
eY = 0x66,
eZ = 0x5B,
eDot = 0x80
}SevenSegmentLetters;

struct Byte
{
	union
	{
		UINT8 mBits;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Quad/Nibble
		struct
		{
			bits mBit0_3 : 4;
			bits mBit4_7 : 4;
		};
		struct
		{
			bits : 1;
			bits mBit1_4 : 4;
			bits : 3;
		};
		struct
		{
			bits: 2;
			bits mBit2_5 : 4;
			bits: 2;
		};
		struct
		{
			bits: 3;
			bits mBit3_6 : 4;
			bits: 1;
		};
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Triple
		struct
		{
			bits mBit0_2 : 3;
			bits mBit3_5 : 3;
			bits mBit6_7 : 2;
		};
		struct
		{
		bits: 1;
			bits mBit1_3 : 3;
			bits mBit4_6 : 3;
		bits: 1;
		};
		struct
		{
		bits: 2;
			bits mBit2_4 : 3;
			bits mBit5_7 : 3;
		};
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Pair
		struct
		{
			bits mBit0_1 : 2;
			bits mBit2_3 : 2;
			bits mBit4_5 : 2;
			bits  : 2;
		};
		struct
		{
			bits: 1;
			bits mBit1_2 : 2;
			bits mBit3_4 : 2;
			bits mBit5_6 : 2;
			bits : 1;
		};
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Bits
		struct
		{
			bits mBit0		: 1;
			bits mBit1		: 1;
			bits mBit2		: 1;
			bits mBit3		: 1;
			bits mBit4		: 1;
			bits mBit5		: 1;
			bits mBit6		: 1;
			bits mBit7		: 1;
		};
	};
};
struct Word
{
	union
	{
		UINT16 mBits;	//All the bits
		struct
		{
			Byte LS_Byte;	//Most significant byte.
			Byte MS_Byte;	//Least significant byte.
		};
        struct
		{
			UINT8 L;	//Most significant byte.
			UINT8 H;	//Least significant byte.
		};
	};
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
union PortProperty
{
    UINT16	mWord;
    Word	mType;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            CopyBytes(PTR pSource, PTR pDestination, UINT16 pCount);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
inline void     Byte_SetZone(BytePtr pInput, UINT8 pMax, UINT8 pChunk, UINT8 pChunkSize, UINT8 pValue);
inline UINT8    Byte_GetZone(BytePtr pInput, UINT8 pMax, UINT8 pChunk, UINT8 pChunkSize);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Byte_Init(BytePtr pInput);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Byte_SetBit(BytePtr pInput, UINT8 pBit, UINT8 pValue);
UINT8           Byte_GetBit(BytePtr pInput, UINT8 pBit);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Byte_SetPair(BytePtr pInput, UINT8 pPair, UINT8 pValue);
UINT8           Byte_GetPair(BytePtr pInput, UINT8 pPair);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Byte_SetTriple(BytePtr pInput, UINT8 pTriple, UINT8 pValue);
UINT8           Byte_GetTriple(BytePtr pInput, UINT8 pTriple);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Byte_SetQuad(BytePtr pInput, UINT8 pQuad, UINT8 pValue);
UINT8           Byte_GetQuad(BytePtr pInput, UINT8 pQuad);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Byte_SetByte(BytePtr pInput, UINT8 pValue);
UINT8           Byte_GetByte(BytePtr pInput);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Word_Init   (WordPtr pInput);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Word_SetBit (WordPtr pInput, UINT8 pBit, UINT8 pValue);
UINT8           Word_GetBit (WordPtr pInput, UINT8 pBit);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Word_SetPair(WordPtr pInput, UINT8 pPair, UINT8 pValue);
UINT8           Word_GetPair(WordPtr pInput, UINT8 pPair);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Word_SetQuad(WordPtr pInput, UINT8 pQuad, UINT8 pValue);
UINT8           Word_GetQuad(WordPtr pInput, UINT8 pQuad);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Word_SetByte(WordPtr pInput, UINT8 pByte, UINT8 pValue);
UINT8           Word_GetByte(WordPtr pInput, UINT8 pByte);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            Word_SetWord(WordPtr pInput, UINT16 pValue);
UINT16          Word_GetWord(WordPtr pInput);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            PortProperty_Init(PortPropertyPtr pInput, ePinDrive pPinDrive[]);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
ePinError       PortProperty_Valid(PortPropertyPtr pInput, ePinDrive pPinDrive, UINT8 pPin);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            delay_ms(UINT16 ms);
void            delay_us(UINT16 us);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
char            ToLower(char pCHR);
char            ToUpper(char pCHR);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT8           ToSegment(char pCHR);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT8           IsNumber(char pCHR);
UINT8           IsLetter(char pCHR);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
void            swap(UINT8Ptr pA, UINT8Ptr pB);
void            reverse(char * input , UINT16 length);
void            itos(UINT16 input, char* destination);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif	/* TYPES_H */