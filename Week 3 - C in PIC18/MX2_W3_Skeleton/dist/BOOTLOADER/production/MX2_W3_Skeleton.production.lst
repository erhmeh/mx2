

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Aug  7 06:22:16 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.43
   109                           ; Generated 25/07/2017 GMT
   110                           ; 
   111                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F67J50 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143 ;; Function _HMI_InitButtons is unused but had its address taken
   144  0000                     
   145 ;; Function _HMI_LeftSwitch is unused but had its address taken
   146  0000                     
   147 ;; Function _HMI_RightSwitch is unused but had its address taken
   148  0000                     
   149 ;; Function _HMI_UpSwitch is unused but had its address taken
   150  0000                     
   151 ;; Function _HMI_DownSwitch is unused but had its address taken
   152  0000                     
   153 ;; Function _HMI_DIPSwitch is unused but had its address taken
   154  0000                     
   155 ;; Function _MXK_InitTestButton is unused but had its address taken
   156  0000                     
   157 ;; Function _MXK_TestButton is unused but had its address taken
   158  0000                     
   159 ;; Function _MXK_InitDIPSwitch is unused but had its address taken
   160  0000                     
   161 ;; Function _MXK_DIPSwitch is unused but had its address taken
   162  0000                     
   163 ;; Function _Event_DIPSwitch is unused but had its address taken
   164  0000                     
   165 ;; Function _Event_HMI_DIPSwitch is unused but had its address taken
   166  0000                     
   167 ;; Function _Event_TestButton is unused but had its address taken
   168  0000                     
   169 ;; Function _Event_HMI_LeftButton is unused but had its address taken
   170  0000                     
   171 ;; Function _Event_HMI_RightButton is unused but had its address taken
   172  0000                     
   173 ;; Function _Event_HMI_UpButton is unused but had its address taken
   174  0000                     
   175 ;; Function _Event_HMI_DownButton is unused but had its address taken
   176  0000                     
   177                           	psect	idataCOMRAM
   178  012E3E                     __pidataCOMRAM:
   179                           	opt stack 0
   180                           
   181                           ;initializer for _gCursor
   182  012E3E  0006               	dw	6
   183  012E40  0006               	dw	6
   184                           
   185                           ;initializer for _Bus_State
   186  012E42  01                 	db	1
   187                           
   188                           ;initializer for _change
   189  012E43  01                 	db	1
   190                           
   191                           ;initializer for _A
   192  012E44  41                 	db	65
   193                           
   194                           ;initializer for _a
   195  012E45  61                 	db	97
   196                           
   197                           ;initializer for _zero
   198  012E46  30                 	db	48
   199                           
   200                           ;initializer for _l
   201  012E47  80                 	db	128
   202                           
   203                           ;initializer for _w
   204  012E48  80                 	db	128
   205                           
   206                           	psect	idataBANK0
   207  012E5A                     __pidataBANK0:
   208                           	opt stack 0
   209                           
   210                           ;initializer for _gCharSize
   211  012E5A  0005               	dw	5
   212  012E5C  0007               	dw	7
   213                           
   214                           ;initializer for _gForecolour
   215  012E5E  FFFF               	dw	65535
   216                           
   217                           	psect	idataBANK1
   218  012E49                     __pidataBANK1:
   219                           	opt stack 0
   220                           
   221                           ;initializer for Console_Render@F6956
   222  012E49  0006               	dw	6
   223  012E4B  0006               	dw	6
   224                           
   225                           ;initializer for _gLineSize
   226  012E4D  0080               	dw	128
   227  012E4F  0007               	dw	7
   228                           
   229                           	psect	mediumconst
   230  00FD22                     __pmediumconst:
   231                           	opt stack 0
   232  00FD22  00                 	db	0
   233  00FD23                     _InitList:
   234                           	opt stack 0
   235  00FD23  1100               	dw	4352
   236  00FD25  0080               	dw	128
   237  00FD27  012C               	dw	300
   238  00FD29  B100               	dw	45312
   239  00FD2B  0002               	dw	2
   240  00FD2D  0035               	dw	53
   241  00FD2F  0036               	dw	54
   242  00FD31  B200               	dw	45568
   243  00FD33  0002               	dw	2
   244  00FD35  0035               	dw	53
   245  00FD37  0036               	dw	54
   246  00FD39  B300               	dw	45824
   247  00FD3B  0002               	dw	2
   248  00FD3D  0035               	dw	53
   249  00FD3F  0036               	dw	54
   250  00FD41  0002               	dw	2
   251  00FD43  0035               	dw	53
   252  00FD45  0036               	dw	54
   253  00FD47  B400               	dw	46080
   254  00FD49  0000               	dw	0
   255  00FD4B  C000               	dw	49152
   256  00FD4D  00A2               	dw	162
   257  00FD4F  0002               	dw	2
   258  00FD51  0084               	dw	132
   259  00FD53  C100               	dw	49408
   260  00FD55  00C5               	dw	197
   261  00FD57  C200               	dw	49664
   262  00FD59  000D               	dw	13
   263  00FD5B  0000               	dw	0
   264  00FD5D  C300               	dw	49920
   265  00FD5F  008D               	dw	141
   266  00FD61  002A               	dw	42
   267  00FD63  C400               	dw	50176
   268  00FD65  008D               	dw	141
   269  00FD67  00EE               	dw	238
   270  00FD69  C500               	dw	50432
   271  00FD6B  000A               	dw	10
   272  00FD6D  3600               	dw	13824
   273  00FD6F  00C8               	dw	200
   274  00FD71  E000               	dw	57344
   275  00FD73  0012               	dw	18
   276  00FD75  001C               	dw	28
   277  00FD77  0010               	dw	16
   278  00FD79  0018               	dw	24
   279  00FD7B  0033               	dw	51
   280  00FD7D  002C               	dw	44
   281  00FD7F  0025               	dw	37
   282  00FD81  0028               	dw	40
   283  00FD83  0028               	dw	40
   284  00FD85  0027               	dw	39
   285  00FD87  002F               	dw	47
   286  00FD89  003C               	dw	60
   287  00FD8B  0000               	dw	0
   288  00FD8D  0003               	dw	3
   289  00FD8F  0003               	dw	3
   290  00FD91  0010               	dw	16
   291  00FD93  0080               	dw	128
   292  00FD95  0078               	dw	120
   293  00FD97  E100               	dw	57600
   294  00FD99  0012               	dw	18
   295  00FD9B  001C               	dw	28
   296  00FD9D  0010               	dw	16
   297  00FD9F  0018               	dw	24
   298  00FDA1  002D               	dw	45
   299  00FDA3  0028               	dw	40
   300  00FDA5  0023               	dw	35
   301  00FDA7  0028               	dw	40
   302  00FDA9  0028               	dw	40
   303  00FDAB  0026               	dw	38
   304  00FDAD  002F               	dw	47
   305  00FDAF  003B               	dw	59
   306  00FDB1  0000               	dw	0
   307  00FDB3  0003               	dw	3
   308  00FDB5  0003               	dw	3
   309  00FDB7  0010               	dw	16
   310  00FDB9  3A00               	dw	14848
   311  00FDBB  0005               	dw	5
   312  00FDBD  2A00               	dw	10752
   313  00FDBF  0000               	dw	0
   314  00FDC1  0002               	dw	2
   315  00FDC3  0000               	dw	0
   316  00FDC5  0081               	dw	129
   317  00FDC7  2B00               	dw	11008
   318  00FDC9  0000               	dw	0
   319  00FDCB  0003               	dw	3
   320  00FDCD  0000               	dw	0
   321  00FDCF  00A2               	dw	162
   322  00FDD1  2900               	dw	10496
   323  00FDD3  2C00               	dw	11264
   324  00FDD5                     __end_of_InitList:
   325                           	opt stack 0
   326  00FDD5                     Timer0_Init@PRESCALE:
   327                           	opt stack 0
   328  00FDD5  0002               	dw	2
   329  00FDD7  0004               	dw	4
   330  00FDD9  0008               	dw	8
   331  00FDDB  0010               	dw	16
   332  00FDDD  0020               	dw	32
   333  00FDDF  0040               	dw	64
   334  00FDE1  0080               	dw	128
   335  00FDE3  0100               	dw	256
   336  00FDE5                     __end_ofTimer0_Init@PRESCALE:
   337                           	opt stack 0
   338  00FDE5                     PortProperty_Valid@F6830:
   339                           	opt stack 0
   340  00FDE5  00                 	db	0
   341  00FDE6  01                 	db	1
   342  00FDE7  02                 	db	2
   343  00FDE8  00                 	db	0
   344  00FDE9  01                 	db	1
   345  00FDEA  00                 	db	0
   346  00FDEB  01                 	db	1
   347  00FDEC  00                 	db	0
   348  00FDED  02                 	db	2
   349  00FDEE  02                 	db	2
   350  00FDEF  00                 	db	0
   351  00FDF0  00                 	db	0
   352  00FDF1  03                 	db	3
   353  00FDF2  03                 	db	3
   354  00FDF3  03                 	db	3
   355  00FDF4  00                 	db	0
   356  00FDF5                     __end_ofPortProperty_Valid@F6830:
   357                           	opt stack 0
   358  00FDF5                     _MASKS:
   359                           	opt stack 0
   360  00FDF5  00                 	db	0
   361  00FDF6  01                 	db	1
   362  00FDF7  03                 	db	3
   363  00FDF8  07                 	db	7
   364  00FDF9  0F                 	db	15
   365  00FDFA  1F                 	db	31
   366  00FDFB  3F                 	db	63
   367  00FDFC  7F                 	db	127
   368  00FDFD  FF                 	db	255
   369  00FDFE                     __end_of_MASKS:
   370                           	opt stack 0
   371  00FDFE                     HMI_SetButton@F7211:
   372                           	opt stack 0
   373  00FDFE  00                 	db	0
   374  00FDFF  02                 	db	2
   375  00FE00  01                 	db	1
   376  00FE01  03                 	db	3
   377  00FE02                     __end_ofHMI_SetButton@F7211:
   378                           	opt stack 0
   379  00FE02                     Timer2_Init@PRESCALE:
   380                           	opt stack 0
   381  00FE02  01                 	db	1
   382  00FE03  04                 	db	4
   383  00FE04  10                 	db	16
   384  00FE05                     __end_ofTimer2_Init@PRESCALE:
   385                           	opt stack 0
   386  00FE05                     _Font5x7:
   387                           	opt stack 0
   388  00FE05  00                 	db	0
   389  00FE06  00                 	db	0
   390  00FE07  00                 	db	0
   391  00FE08  00                 	db	0
   392  00FE09  00                 	db	0
   393  00FE0A  00                 	db	0
   394  00FE0B  00                 	db	0
   395  00FE0C  5F                 	db	95
   396  00FE0D  00                 	db	0
   397  00FE0E  00                 	db	0
   398  00FE0F  00                 	db	0
   399  00FE10  07                 	db	7
   400  00FE11  00                 	db	0
   401  00FE12  07                 	db	7
   402  00FE13  00                 	db	0
   403  00FE14  14                 	db	20
   404  00FE15  7F                 	db	127
   405  00FE16  14                 	db	20
   406  00FE17  7F                 	db	127
   407  00FE18  14                 	db	20
   408  00FE19  24                 	db	36
   409  00FE1A  2A                 	db	42
   410  00FE1B  7F                 	db	127
   411  00FE1C  2A                 	db	42
   412  00FE1D  12                 	db	18
   413  00FE1E  23                 	db	35
   414  00FE1F  13                 	db	19
   415  00FE20  08                 	db	8
   416  00FE21  64                 	db	100
   417  00FE22  62                 	db	98
   418  00FE23  36                 	db	54
   419  00FE24  49                 	db	73
   420  00FE25  55                 	db	85
   421  00FE26  22                 	db	34
   422  00FE27  50                 	db	80
   423  00FE28  00                 	db	0
   424  00FE29  05                 	db	5
   425  00FE2A  03                 	db	3
   426  00FE2B  00                 	db	0
   427  00FE2C  00                 	db	0
   428  00FE2D  00                 	db	0
   429  00FE2E  1C                 	db	28
   430  00FE2F  22                 	db	34
   431  00FE30  41                 	db	65
   432  00FE31  00                 	db	0
   433  00FE32  00                 	db	0
   434  00FE33  41                 	db	65
   435  00FE34  22                 	db	34
   436  00FE35  1C                 	db	28
   437  00FE36  00                 	db	0
   438  00FE37  08                 	db	8
   439  00FE38  2A                 	db	42
   440  00FE39  1C                 	db	28
   441  00FE3A  2A                 	db	42
   442  00FE3B  08                 	db	8
   443  00FE3C  08                 	db	8
   444  00FE3D  08                 	db	8
   445  00FE3E  3E                 	db	62
   446  00FE3F  08                 	db	8
   447  00FE40  08                 	db	8
   448  00FE41  00                 	db	0
   449  00FE42  50                 	db	80
   450  00FE43  30                 	db	48
   451  00FE44  00                 	db	0
   452  00FE45  00                 	db	0
   453  00FE46  08                 	db	8
   454  00FE47  08                 	db	8
   455  00FE48  08                 	db	8
   456  00FE49  08                 	db	8
   457  00FE4A  08                 	db	8
   458  00FE4B  00                 	db	0
   459  00FE4C  60                 	db	96
   460  00FE4D  60                 	db	96
   461  00FE4E  00                 	db	0
   462  00FE4F  00                 	db	0
   463  00FE50  20                 	db	32
   464  00FE51  10                 	db	16
   465  00FE52  08                 	db	8
   466  00FE53  04                 	db	4
   467  00FE54  02                 	db	2
   468  00FE55  3E                 	db	62
   469  00FE56  51                 	db	81
   470  00FE57  49                 	db	73
   471  00FE58  45                 	db	69
   472  00FE59  3E                 	db	62
   473  00FE5A  00                 	db	0
   474  00FE5B  42                 	db	66
   475  00FE5C  7F                 	db	127
   476  00FE5D  40                 	db	64
   477  00FE5E  00                 	db	0
   478  00FE5F  42                 	db	66
   479  00FE60  61                 	db	97
   480  00FE61  51                 	db	81
   481  00FE62  49                 	db	73
   482  00FE63  46                 	db	70
   483  00FE64  21                 	db	33
   484  00FE65  41                 	db	65
   485  00FE66  45                 	db	69
   486  00FE67  4B                 	db	75
   487  00FE68  31                 	db	49
   488  00FE69  18                 	db	24
   489  00FE6A  14                 	db	20
   490  00FE6B  12                 	db	18
   491  00FE6C  7F                 	db	127
   492  00FE6D  10                 	db	16
   493  00FE6E  27                 	db	39
   494  00FE6F  45                 	db	69
   495  00FE70  45                 	db	69
   496  00FE71  45                 	db	69
   497  00FE72  39                 	db	57
   498  00FE73  3C                 	db	60
   499  00FE74  4A                 	db	74
   500  00FE75  49                 	db	73
   501  00FE76  49                 	db	73
   502  00FE77  30                 	db	48
   503  00FE78  01                 	db	1
   504  00FE79  71                 	db	113
   505  00FE7A  09                 	db	9
   506  00FE7B  05                 	db	5
   507  00FE7C  03                 	db	3
   508  00FE7D  36                 	db	54
   509  00FE7E  49                 	db	73
   510  00FE7F  49                 	db	73
   511  00FE80  49                 	db	73
   512  00FE81  36                 	db	54
   513  00FE82  06                 	db	6
   514  00FE83  49                 	db	73
   515  00FE84  49                 	db	73
   516  00FE85  29                 	db	41
   517  00FE86  1E                 	db	30
   518  00FE87  00                 	db	0
   519  00FE88  36                 	db	54
   520  00FE89  36                 	db	54
   521  00FE8A  00                 	db	0
   522  00FE8B  00                 	db	0
   523  00FE8C  00                 	db	0
   524  00FE8D  56                 	db	86
   525  00FE8E  36                 	db	54
   526  00FE8F  00                 	db	0
   527  00FE90  00                 	db	0
   528  00FE91  00                 	db	0
   529  00FE92  08                 	db	8
   530  00FE93  14                 	db	20
   531  00FE94  22                 	db	34
   532  00FE95  41                 	db	65
   533  00FE96  14                 	db	20
   534  00FE97  14                 	db	20
   535  00FE98  14                 	db	20
   536  00FE99  14                 	db	20
   537  00FE9A  14                 	db	20
   538  00FE9B  41                 	db	65
   539  00FE9C  22                 	db	34
   540  00FE9D  14                 	db	20
   541  00FE9E  08                 	db	8
   542  00FE9F  00                 	db	0
   543  00FEA0  02                 	db	2
   544  00FEA1  01                 	db	1
   545  00FEA2  51                 	db	81
   546  00FEA3  09                 	db	9
   547  00FEA4  06                 	db	6
   548  00FEA5  32                 	db	50
   549  00FEA6  49                 	db	73
   550  00FEA7  79                 	db	121
   551  00FEA8  41                 	db	65
   552  00FEA9  3E                 	db	62
   553  00FEAA  7E                 	db	126
   554  00FEAB  11                 	db	17
   555  00FEAC  11                 	db	17
   556  00FEAD  11                 	db	17
   557  00FEAE  7E                 	db	126
   558  00FEAF  7F                 	db	127
   559  00FEB0  49                 	db	73
   560  00FEB1  49                 	db	73
   561  00FEB2  49                 	db	73
   562  00FEB3  36                 	db	54
   563  00FEB4  3E                 	db	62
   564  00FEB5  41                 	db	65
   565  00FEB6  41                 	db	65
   566  00FEB7  41                 	db	65
   567  00FEB8  22                 	db	34
   568  00FEB9  7F                 	db	127
   569  00FEBA  41                 	db	65
   570  00FEBB  41                 	db	65
   571  00FEBC  22                 	db	34
   572  00FEBD  1C                 	db	28
   573  00FEBE  7F                 	db	127
   574  00FEBF  49                 	db	73
   575  00FEC0  49                 	db	73
   576  00FEC1  49                 	db	73
   577  00FEC2  41                 	db	65
   578  00FEC3  7F                 	db	127
   579  00FEC4  09                 	db	9
   580  00FEC5  09                 	db	9
   581  00FEC6  01                 	db	1
   582  00FEC7  01                 	db	1
   583  00FEC8  3E                 	db	62
   584  00FEC9  41                 	db	65
   585  00FECA  41                 	db	65
   586  00FECB  51                 	db	81
   587  00FECC  32                 	db	50
   588  00FECD  7F                 	db	127
   589  00FECE  08                 	db	8
   590  00FECF  08                 	db	8
   591  00FED0  08                 	db	8
   592  00FED1  7F                 	db	127
   593  00FED2  00                 	db	0
   594  00FED3  41                 	db	65
   595  00FED4  7F                 	db	127
   596  00FED5  41                 	db	65
   597  00FED6  00                 	db	0
   598  00FED7  20                 	db	32
   599  00FED8  40                 	db	64
   600  00FED9  41                 	db	65
   601  00FEDA  3F                 	db	63
   602  00FEDB  01                 	db	1
   603  00FEDC  7F                 	db	127
   604  00FEDD  08                 	db	8
   605  00FEDE  14                 	db	20
   606  00FEDF  22                 	db	34
   607  00FEE0  41                 	db	65
   608  00FEE1  7F                 	db	127
   609  00FEE2  40                 	db	64
   610  00FEE3  40                 	db	64
   611  00FEE4  40                 	db	64
   612  00FEE5  40                 	db	64
   613  00FEE6  7F                 	db	127
   614  00FEE7  02                 	db	2
   615  00FEE8  04                 	db	4
   616  00FEE9  02                 	db	2
   617  00FEEA  7F                 	db	127
   618  00FEEB  7F                 	db	127
   619  00FEEC  04                 	db	4
   620  00FEED  08                 	db	8
   621  00FEEE  10                 	db	16
   622  00FEEF  7F                 	db	127
   623  00FEF0  3E                 	db	62
   624  00FEF1  41                 	db	65
   625  00FEF2  41                 	db	65
   626  00FEF3  41                 	db	65
   627  00FEF4  3E                 	db	62
   628  00FEF5  7F                 	db	127
   629  00FEF6  09                 	db	9
   630  00FEF7  09                 	db	9
   631  00FEF8  09                 	db	9
   632  00FEF9  06                 	db	6
   633  00FEFA  3E                 	db	62
   634  00FEFB  41                 	db	65
   635  00FEFC  51                 	db	81
   636  00FEFD  21                 	db	33
   637  00FEFE  5E                 	db	94
   638  00FEFF  7F                 	db	127
   639  00FF00  09                 	db	9
   640  00FF01  19                 	db	25
   641  00FF02  29                 	db	41
   642  00FF03  46                 	db	70
   643  00FF04  46                 	db	70
   644  00FF05  49                 	db	73
   645  00FF06  49                 	db	73
   646  00FF07  49                 	db	73
   647  00FF08  31                 	db	49
   648  00FF09  01                 	db	1
   649  00FF0A  01                 	db	1
   650  00FF0B  7F                 	db	127
   651  00FF0C  01                 	db	1
   652  00FF0D  01                 	db	1
   653  00FF0E  3F                 	db	63
   654  00FF0F  40                 	db	64
   655  00FF10  40                 	db	64
   656  00FF11  40                 	db	64
   657  00FF12  3F                 	db	63
   658  00FF13  1F                 	db	31
   659  00FF14  20                 	db	32
   660  00FF15  40                 	db	64
   661  00FF16  20                 	db	32
   662  00FF17  1F                 	db	31
   663  00FF18  7F                 	db	127
   664  00FF19  20                 	db	32
   665  00FF1A  18                 	db	24
   666  00FF1B  20                 	db	32
   667  00FF1C  7F                 	db	127
   668  00FF1D  63                 	db	99
   669  00FF1E  14                 	db	20
   670  00FF1F  08                 	db	8
   671  00FF20  14                 	db	20
   672  00FF21  63                 	db	99
   673  00FF22  03                 	db	3
   674  00FF23  04                 	db	4
   675  00FF24  78                 	db	120
   676  00FF25  04                 	db	4
   677  00FF26  03                 	db	3
   678  00FF27  61                 	db	97
   679  00FF28  51                 	db	81
   680  00FF29  49                 	db	73
   681  00FF2A  45                 	db	69
   682  00FF2B  43                 	db	67
   683  00FF2C  00                 	db	0
   684  00FF2D  00                 	db	0
   685  00FF2E  7F                 	db	127
   686  00FF2F  41                 	db	65
   687  00FF30  41                 	db	65
   688  00FF31  02                 	db	2
   689  00FF32  04                 	db	4
   690  00FF33  08                 	db	8
   691  00FF34  10                 	db	16
   692  00FF35  20                 	db	32
   693  00FF36  41                 	db	65
   694  00FF37  41                 	db	65
   695  00FF38  7F                 	db	127
   696  00FF39  00                 	db	0
   697  00FF3A  00                 	db	0
   698  00FF3B  04                 	db	4
   699  00FF3C  02                 	db	2
   700  00FF3D  01                 	db	1
   701  00FF3E  02                 	db	2
   702  00FF3F  04                 	db	4
   703  00FF40  40                 	db	64
   704  00FF41  40                 	db	64
   705  00FF42  40                 	db	64
   706  00FF43  40                 	db	64
   707  00FF44  40                 	db	64
   708  00FF45  00                 	db	0
   709  00FF46  01                 	db	1
   710  00FF47  02                 	db	2
   711  00FF48  04                 	db	4
   712  00FF49  00                 	db	0
   713  00FF4A  20                 	db	32
   714  00FF4B  54                 	db	84
   715  00FF4C  54                 	db	84
   716  00FF4D  54                 	db	84
   717  00FF4E  78                 	db	120
   718  00FF4F  7F                 	db	127
   719  00FF50  48                 	db	72
   720  00FF51  44                 	db	68
   721  00FF52  44                 	db	68
   722  00FF53  38                 	db	56
   723  00FF54  38                 	db	56
   724  00FF55  44                 	db	68
   725  00FF56  44                 	db	68
   726  00FF57  44                 	db	68
   727  00FF58  20                 	db	32
   728  00FF59  38                 	db	56
   729  00FF5A  44                 	db	68
   730  00FF5B  44                 	db	68
   731  00FF5C  48                 	db	72
   732  00FF5D  7F                 	db	127
   733  00FF5E  38                 	db	56
   734  00FF5F  54                 	db	84
   735  00FF60  54                 	db	84
   736  00FF61  54                 	db	84
   737  00FF62  18                 	db	24
   738  00FF63  08                 	db	8
   739  00FF64  7E                 	db	126
   740  00FF65  09                 	db	9
   741  00FF66  01                 	db	1
   742  00FF67  02                 	db	2
   743  00FF68  08                 	db	8
   744  00FF69  14                 	db	20
   745  00FF6A  54                 	db	84
   746  00FF6B  54                 	db	84
   747  00FF6C  3C                 	db	60
   748  00FF6D  7F                 	db	127
   749  00FF6E  08                 	db	8
   750  00FF6F  04                 	db	4
   751  00FF70  04                 	db	4
   752  00FF71  78                 	db	120
   753  00FF72  00                 	db	0
   754  00FF73  44                 	db	68
   755  00FF74  7D                 	db	125
   756  00FF75  40                 	db	64
   757  00FF76  00                 	db	0
   758  00FF77  20                 	db	32
   759  00FF78  40                 	db	64
   760  00FF79  44                 	db	68
   761  00FF7A  3D                 	db	61
   762  00FF7B  00                 	db	0
   763  00FF7C  00                 	db	0
   764  00FF7D  7F                 	db	127
   765  00FF7E  10                 	db	16
   766  00FF7F  28                 	db	40
   767  00FF80  44                 	db	68
   768  00FF81  00                 	db	0
   769  00FF82  41                 	db	65
   770  00FF83  7F                 	db	127
   771  00FF84  40                 	db	64
   772  00FF85  00                 	db	0
   773  00FF86  7C                 	db	124
   774  00FF87  04                 	db	4
   775  00FF88  18                 	db	24
   776  00FF89  04                 	db	4
   777  00FF8A  78                 	db	120
   778  00FF8B  7C                 	db	124
   779  00FF8C  08                 	db	8
   780  00FF8D  04                 	db	4
   781  00FF8E  04                 	db	4
   782  00FF8F  78                 	db	120
   783  00FF90  38                 	db	56
   784  00FF91  44                 	db	68
   785  00FF92  44                 	db	68
   786  00FF93  44                 	db	68
   787  00FF94  38                 	db	56
   788  00FF95  7C                 	db	124
   789  00FF96  14                 	db	20
   790  00FF97  14                 	db	20
   791  00FF98  14                 	db	20
   792  00FF99  08                 	db	8
   793  00FF9A  08                 	db	8
   794  00FF9B  14                 	db	20
   795  00FF9C  14                 	db	20
   796  00FF9D  18                 	db	24
   797  00FF9E  7C                 	db	124
   798  00FF9F  7C                 	db	124
   799  00FFA0  08                 	db	8
   800  00FFA1  04                 	db	4
   801  00FFA2  04                 	db	4
   802  00FFA3  08                 	db	8
   803  00FFA4  48                 	db	72
   804  00FFA5  54                 	db	84
   805  00FFA6  54                 	db	84
   806  00FFA7  54                 	db	84
   807  00FFA8  20                 	db	32
   808  00FFA9  04                 	db	4
   809  00FFAA  3F                 	db	63
   810  00FFAB  44                 	db	68
   811  00FFAC  40                 	db	64
   812  00FFAD  20                 	db	32
   813  00FFAE  3C                 	db	60
   814  00FFAF  40                 	db	64
   815  00FFB0  40                 	db	64
   816  00FFB1  20                 	db	32
   817  00FFB2  7C                 	db	124
   818  00FFB3  1C                 	db	28
   819  00FFB4  20                 	db	32
   820  00FFB5  40                 	db	64
   821  00FFB6  20                 	db	32
   822  00FFB7  1C                 	db	28
   823  00FFB8  3C                 	db	60
   824  00FFB9  40                 	db	64
   825  00FFBA  30                 	db	48
   826  00FFBB  40                 	db	64
   827  00FFBC  3C                 	db	60
   828  00FFBD  44                 	db	68
   829  00FFBE  28                 	db	40
   830  00FFBF  10                 	db	16
   831  00FFC0  28                 	db	40
   832  00FFC1  44                 	db	68
   833  00FFC2  0C                 	db	12
   834  00FFC3  50                 	db	80
   835  00FFC4  50                 	db	80
   836  00FFC5  50                 	db	80
   837  00FFC6  3C                 	db	60
   838  00FFC7  44                 	db	68
   839  00FFC8  64                 	db	100
   840  00FFC9  54                 	db	84
   841  00FFCA  4C                 	db	76
   842  00FFCB  44                 	db	68
   843  00FFCC  00                 	db	0
   844  00FFCD  08                 	db	8
   845  00FFCE  36                 	db	54
   846  00FFCF  41                 	db	65
   847  00FFD0  00                 	db	0
   848  00FFD1  00                 	db	0
   849  00FFD2  00                 	db	0
   850  00FFD3  7F                 	db	127
   851  00FFD4  00                 	db	0
   852  00FFD5  00                 	db	0
   853  00FFD6  00                 	db	0
   854  00FFD7  41                 	db	65
   855  00FFD8  36                 	db	54
   856  00FFD9  08                 	db	8
   857  00FFDA  00                 	db	0
   858  00FFDB  08                 	db	8
   859  00FFDC  08                 	db	8
   860  00FFDD  2A                 	db	42
   861  00FFDE  1C                 	db	28
   862  00FFDF  08                 	db	8
   863  00FFE0  08                 	db	8
   864  00FFE1  1C                 	db	28
   865  00FFE2  2A                 	db	42
   866  00FFE3  08                 	db	8
   867  00FFE4  08                 	db	8
   868  00FFE5                     __end_of_Font5x7:
   869                           	opt stack 0
   870  00FFE5                     _PortG_Property:
   871                           	opt stack 0
   872  00FFE5  FC00               	dw	64512
   873  00FFE7                     __end_of_PortG_Property:
   874                           	opt stack 0
   875  00FFE7                     _PortF_Property:
   876                           	opt stack 0
   877  00FFE7  0FFF               	dw	4095
   878  00FFE9                     __end_of_PortF_Property:
   879                           	opt stack 0
   880  00FFE9                     _PortE_Property:
   881                           	opt stack 0
   882  00FFE9  0000               	dw	0
   883  00FFEB                     __end_of_PortE_Property:
   884                           	opt stack 0
   885  00FFEB                     _PortD_Property:
   886                           	opt stack 0
   887  00FFEB  FFFF               	dw	65535
   888  00FFED                     __end_of_PortD_Property:
   889                           	opt stack 0
   890  00FFED                     _PortC_Property:
   891                           	opt stack 0
   892  00FFED  FFF0               	dw	65520
   893  00FFEF                     __end_of_PortC_Property:
   894                           	opt stack 0
   895  00FFEF                     _PortB_Property:
   896                           	opt stack 0
   897  00FFEF  FF00               	dw	65280
   898  00FFF1                     __end_of_PortB_Property:
   899                           	opt stack 0
   900  00FFF1                     _PortA_Property:
   901                           	opt stack 0
   902  00FFF1  00FF               	dw	255
   903  00FFF3                     __end_of_PortA_Property:
   904                           	opt stack 0
   905  0000                     _TMR0	set	4054
   906  0000                     _PR2	set	4043
   907  0000                     _T2CONbits	set	4042
   908  0000                     _T0CONbits	set	4053
   909  0000                     _RCONbits	set	4048
   910  0000                     _OSCTUNEbits	set	3995
   911  0000                     _PIR3	set	4004
   912  0000                     _PIR2	set	4001
   913  0000                     _PIR1	set	3998
   914  0000                     _INTCONbits	set	4082
   915  0000                     _SSP2CON2bits	set	3947
   916  0000                     _SSP1CON2bits	set	4037
   917  0000                     _SSP1ADD	set	4040
   918  0000                     _ANCON0	set	4033
   919  0000                     _ADRESL	set	4035
   920  0000                     _ADRESH	set	4036
   921  0000                     _ADCON1bits	set	4033
   922  0000                     _ADCON0bits	set	4034
   923  0000                     _SSP2CON1bits	set	3948
   924  0000                     _SSP1CON1bits	set	4038
   925  0000                     _SSP2STATbits	set	3949
   926  0000                     _SSP1STATbits	set	4039
   927  0000                     _PIE3bits	set	4003
   928  0000                     _PIE1bits	set	3997
   929  0000                     _PIR3bits	set	4004
   930  0000                     _PIR1bits	set	3998
   931  0000                     _IPR3bits	set	4005
   932  0000                     _IPR1bits	set	3999
   933  0000                     _PORTFbits	set	3973
   934  0000                     _SSP2CON2	set	3947
   935  0000                     _SSP1CON2	set	4037
   936  0000                     _SSP2BUF	set	3951
   937  0000                     _SSP2CON1	set	3948
   938  0000                     _SSP2STAT	set	3949
   939  0000                     _SSP1BUF	set	4041
   940  0000                     _SSP1CON1	set	4038
   941  0000                     _SSP1STAT	set	4039
   942  0000                     _LATG	set	3983
   943  0000                     _LATF	set	3982
   944  0000                     _LATE	set	3981
   945  0000                     _LATD	set	3980
   946  0000                     _LATC	set	3979
   947  0000                     _LATB	set	3978
   948  0000                     _LATA	set	3977
   949  0000                     _TRISG	set	3992
   950  0000                     _TRISF	set	3991
   951  0000                     _TRISE	set	3990
   952  0000                     _TRISD	set	3989
   953  0000                     _TRISC	set	3988
   954  0000                     _TRISB	set	3987
   955  0000                     _TRISA	set	3986
   956  0000                     _PORTG	set	3974
   957  0000                     _PORTF	set	3973
   958  0000                     _PORTE	set	3972
   959  0000                     _PORTD	set	3971
   960  0000                     _PORTC	set	3970
   961  0000                     _PORTB	set	3969
   962  0000                     _PORTA	set	3968
   963  00FFF3                     STR_1:
   964  00FFF3  4A                 	db	74	;'J'
   965  00FFF4  61                 	db	97	;'a'
   966  00FFF5  6D                 	db	109	;'m'
   967  00FFF6  69                 	db	105	;'i'
   968  00FFF7  6E                 	db	110	;'n'
   969  00FFF8  20                 	db	32
   970  00FFF9  45                 	db	69	;'E'
   971  00FFFA  61                 	db	97	;'a'
   972  00FFFB  72                 	db	114	;'r'
   973  00FFFC  6C                 	db	108	;'l'
   974  00FFFD  79                 	db	121	;'y'
   975  00FFFE  00                 	db	0
   976                           
   977                           ; #config settings
   978  00FFFF  00                 	db	0	; dummy byte at the end
   979  0000                     
   980                           	psect	cinit
   981  011EB8                     __pcinit:
   982                           	opt stack 0
   983  011EB8                     start_initialization:
   984                           	opt stack 0
   985  011EB8                     __initialization:
   986                           	opt stack 0
   987                           
   988                           ; Initialize objects allocated to BANK1 (8 bytes)
   989                           ; load TBLPTR registers with __pidataBANK1
   990  011EB8  0E49               	movlw	low __pidataBANK1
   991  011EBA  6EF6               	movwf	tblptrl,c
   992  011EBC  0E2E               	movlw	high __pidataBANK1
   993  011EBE  6EF7               	movwf	tblptrh,c
   994  011EC0  0E01               	movlw	low (__pidataBANK1 shr (0+16))
   995  011EC2  6EF8               	movwf	tblptru,c
   996  011EC4  EE01  F0F7         	lfsr	0,__pdataBANK1
   997  011EC8  EE10 F008          	lfsr	1,8
   998  011ECC                     copy_data0:
   999  011ECC  0009               	tblrd		*+
  1000  011ECE  CFF5 FFEE          	movff	tablat,postinc0
  1001  011ED2  50E5               	movf	postdec1,w,c
  1002  011ED4  50E1               	movf	fsr1l,w,c
  1003  011ED6  E1FA               	bnz	copy_data0
  1004                           
  1005                           ; Initialize objects allocated to BANK0 (6 bytes)
  1006                           ; load TBLPTR registers with __pidataBANK0
  1007  011ED8  0E5A               	movlw	low __pidataBANK0
  1008  011EDA  6EF6               	movwf	tblptrl,c
  1009  011EDC  0E2E               	movlw	high __pidataBANK0
  1010  011EDE  6EF7               	movwf	tblptrh,c
  1011  011EE0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1012  011EE2  6EF8               	movwf	tblptru,c
  1013  011EE4  EE00  F0FA         	lfsr	0,__pdataBANK0
  1014  011EE8  EE10 F006          	lfsr	1,6
  1015  011EEC                     copy_data1:
  1016  011EEC  0009               	tblrd		*+
  1017  011EEE  CFF5 FFEE          	movff	tablat,postinc0
  1018  011EF2  50E5               	movf	postdec1,w,c
  1019  011EF4  50E1               	movf	fsr1l,w,c
  1020  011EF6  E1FA               	bnz	copy_data1
  1021                           
  1022                           ; Initialize objects allocated to COMRAM (11 bytes)
  1023                           ; load TBLPTR registers with __pidataCOMRAM
  1024  011EF8  0E3E               	movlw	low __pidataCOMRAM
  1025  011EFA  6EF6               	movwf	tblptrl,c
  1026  011EFC  0E2E               	movlw	high __pidataCOMRAM
  1027  011EFE  6EF7               	movwf	tblptrh,c
  1028  011F00  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1029  011F02  6EF8               	movwf	tblptru,c
  1030  011F04  EE00  F046         	lfsr	0,__pdataCOMRAM
  1031  011F08  EE10 F00B          	lfsr	1,11
  1032  011F0C                     copy_data2:
  1033  011F0C  0009               	tblrd		*+
  1034  011F0E  CFF5 FFEE          	movff	tablat,postinc0
  1035  011F12  50E5               	movf	postdec1,w,c
  1036  011F14  50E1               	movf	fsr1l,w,c
  1037  011F16  E1FA               	bnz	copy_data2
  1038                           
  1039                           ; Clear objects allocated to BIGRAM (300 bytes)
  1040  011F18  EE02  F00C         	lfsr	0,__pbssBIGRAM
  1041  011F1C  EE11 F02C          	lfsr	1,300
  1042  011F20                     clear_0:
  1043  011F20  6AEE               	clrf	postinc0,c
  1044  011F22  50E5               	movf	postdec1,w,c
  1045  011F24  50E1               	movf	fsr1l,w,c
  1046  011F26  E1FC               	bnz	clear_0
  1047  011F28  50E2               	movf	fsr1h,w,c
  1048  011F2A  E1FA               	bnz	clear_0
  1049                           
  1050                           ; Clear objects allocated to BANK1 (247 bytes)
  1051  011F2C  EE01  F000         	lfsr	0,__pbssBANK1
  1052  011F30  0EF7               	movlw	247
  1053  011F32                     clear_1:
  1054  011F32  6AEE               	clrf	postinc0,c
  1055  011F34  06E8               	decf	wreg,f,c
  1056  011F36  E1FD               	bnz	clear_1
  1057                           
  1058                           ; Clear objects allocated to BANK0 (97 bytes)
  1059  011F38  EE00  F060         	lfsr	0,__pbssBANK0
  1060  011F3C  0E61               	movlw	97
  1061  011F3E                     clear_2:
  1062  011F3E  6AEE               	clrf	postinc0,c
  1063  011F40  06E8               	decf	wreg,f,c
  1064  011F42  E1FD               	bnz	clear_2
  1065                           
  1066                           ; Clear objects allocated to COMRAM (29 bytes)
  1067  011F44  EE00  F029         	lfsr	0,__pbssCOMRAM
  1068  011F48  0E1D               	movlw	29
  1069  011F4A                     clear_3:
  1070  011F4A  6AEE               	clrf	postinc0,c
  1071  011F4C  06E8               	decf	wreg,f,c
  1072  011F4E  E1FD               	bnz	clear_3
  1073  011F50                     end_of_initialization:
  1074                           	opt stack 0
  1075  011F50                     __end_of__initialization:
  1076                           	opt stack 0
  1077  011F50  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1078  011F52  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1079  011F54  0100               	movlb	0
  1080  011F56  EF97  F090         	goto	_main	;jump to C main() function
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           postdec1	equ	0xFE5
  1088                           fsr1h	equ	0xFE2
  1089                           fsr1l	equ	0xFE1
  1090                           
  1091                           	psect	bssCOMRAM
  1092  000029                     __pbssCOMRAM:
  1093                           	opt stack 0
  1094  000029                     _gISR:
  1095                           	opt stack 0
  1096  000029                     	ds	3
  1097  00002C                     _COUNTER:
  1098                           	opt stack 0
  1099  00002C                     	ds	2
  1100  00002E                     HMI_GRender@a:
  1101                           	opt stack 0
  1102  00002E                     	ds	2
  1103  000030                     _gBackcolour:
  1104                           	opt stack 0
  1105  000030                     	ds	2
  1106  000032                     SPI_Send9@dat:
  1107                           	opt stack 0
  1108  000032                     	ds	2
  1109  000034                     _u:
  1110                           	opt stack 0
  1111  000034                     	ds	1
  1112  000035                     _j:
  1113                           	opt stack 0
  1114  000035                     	ds	1
  1115  000036                     _i:
  1116                           	opt stack 0
  1117  000036                     	ds	1
  1118  000037                     Timer0_Init@PRE:
  1119                           	opt stack 0
  1120  000037                     	ds	1
  1121  000038                     _INDEX:
  1122                           	opt stack 0
  1123  000038                     	ds	1
  1124  000039                     rand@screw:
  1125                           	opt stack 0
  1126  000039                     	ds	1
  1127  00003A                     _ADC_Initialised:
  1128                           	opt stack 0
  1129  00003A                     	ds	1
  1130  00003B                     OutSeg@a:
  1131                           	opt stack 0
  1132  00003B                     	ds	1
  1133  00003C                     OutSeg@segset:
  1134                           	opt stack 0
  1135  00003C                     	ds	1
  1136  00003D                     OutSeg@cur:
  1137                           	opt stack 0
  1138  00003D                     	ds	1
  1139  00003E                     _clearall:
  1140                           	opt stack 0
  1141  00003E                     	ds	1
  1142  00003F                     _I2C1T:
  1143                           	opt stack 0
  1144  00003F                     	ds	7
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           postdec1	equ	0xFE5
  1152                           fsr1h	equ	0xFE2
  1153                           fsr1l	equ	0xFE1
  1154                           
  1155                           	psect	dataCOMRAM
  1156  000046                     __pdataCOMRAM:
  1157                           	opt stack 0
  1158  000046                     _gCursor:
  1159                           	opt stack 0
  1160  000046                     	ds	4
  1161  00004A                     _Bus_State:
  1162                           	opt stack 0
  1163  00004A                     	ds	1
  1164  00004B                     _change:
  1165                           	opt stack 0
  1166  00004B                     	ds	1
  1167  00004C                     	ds	1
  1168  00004D                     	ds	1
  1169  00004E                     	ds	1
  1170  00004F                     _l:
  1171                           	opt stack 0
  1172  00004F                     	ds	1
  1173  000050                     _w:
  1174                           	opt stack 0
  1175  000050                     	ds	1
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           postdec1	equ	0xFE5
  1183                           fsr1h	equ	0xFE2
  1184                           fsr1l	equ	0xFE1
  1185                           
  1186                           	psect	bssBANK0
  1187  000060                     __pbssBANK0:
  1188                           	opt stack 0
  1189  000060                     Timer2_Init@DIV:
  1190                           	opt stack 0
  1191  000060                     	ds	4
  1192  000064                     Timer0_Init@DIV:
  1193                           	opt stack 0
  1194  000064                     	ds	4
  1195  000068                     _lQueue:
  1196                           	opt stack 0
  1197  000068                     	ds	3
  1198  00006B                     _lStepFunction:
  1199                           	opt stack 0
  1200  00006B                     	ds	3
  1201  00006E                     _pShiftVal:
  1202                           	opt stack 0
  1203  00006E                     	ds	2
  1204  000070                     _val:
  1205                           	opt stack 0
  1206  000070                     	ds	2
  1207  000072                     _lMotor:
  1208                           	opt stack 0
  1209  000072                     	ds	2
  1210  000074                     _lCurrent:
  1211                           	opt stack 0
  1212  000074                     	ds	2
  1213  000076                     Event_TestButton@j:
  1214                           	opt stack 0
  1215  000076                     	ds	1
  1216  000077                     Timer2_Init@PRE:
  1217                           	opt stack 0
  1218  000077                     	ds	1
  1219  000078                     Timer2_Init@INDEX:
  1220                           	opt stack 0
  1221  000078                     	ds	1
  1222  000079                     _lBufferY:
  1223                           	opt stack 0
  1224  000079                     	ds	1
  1225  00007A                     _lBufferX:
  1226                           	opt stack 0
  1227  00007A                     	ds	1
  1228  00007B                     _PortE:
  1229                           	opt stack 0
  1230  00007B                     	ds	10
  1231  000085                     _PortD:
  1232                           	opt stack 0
  1233  000085                     	ds	10
  1234  00008F                     _PortC:
  1235                           	opt stack 0
  1236  00008F                     	ds	10
  1237  000099                     _PortF:
  1238                           	opt stack 0
  1239  000099                     	ds	10
  1240  0000A3                     _I2C2T:
  1241                           	opt stack 0
  1242  0000A3                     	ds	7
  1243  0000AA                     _ADC_AN2:
  1244                           	opt stack 0
  1245  0000AA                     	ds	5
  1246  0000AF                     _ADC_AN1:
  1247                           	opt stack 0
  1248  0000AF                     	ds	5
  1249  0000B4                     _ADC_AN0:
  1250                           	opt stack 0
  1251  0000B4                     	ds	5
  1252  0000B9                     LCD_DrawRectangle@p4:
  1253                           	opt stack 0
  1254  0000B9                     	ds	4
  1255  0000BD                     LCD_DrawRectangle@p2:
  1256                           	opt stack 0
  1257  0000BD                     	ds	4
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1h	equ	0xFE2
  1266                           fsr1l	equ	0xFE1
  1267                           
  1268                           	psect	dataBANK0
  1269  0000FA                     __pdataBANK0:
  1270                           	opt stack 0
  1271  0000FA                     _gCharSize:
  1272                           	opt stack 0
  1273  0000FA                     	ds	4
  1274  0000FE                     _gForecolour:
  1275                           	opt stack 0
  1276  0000FE                     	ds	2
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           postdec1	equ	0xFE5
  1284                           fsr1h	equ	0xFE2
  1285                           fsr1l	equ	0xFE1
  1286                           
  1287                           	psect	bssBANK1
  1288  000100                     __pbssBANK1:
  1289                           	opt stack 0
  1290  000100                     _lCBuffer:
  1291                           	opt stack 0
  1292  000100                     	ds	30
  1293  00011E                     _I2C2_More:
  1294                           	opt stack 0
  1295  00011E                     	ds	3
  1296  000121                     _I2C1_More:
  1297                           	opt stack 0
  1298  000121                     	ds	3
  1299  000124                     _I2C2_Done:
  1300                           	opt stack 0
  1301  000124                     	ds	3
  1302  000127                     _I2C1_Done:
  1303                           	opt stack 0
  1304  000127                     	ds	3
  1305  00012A                     Console_MakeField@Fill:
  1306                           	opt stack 0
  1307  00012A                     	ds	70
  1308  000170                     _HMIBoard:
  1309                           	opt stack 0
  1310  000170                     	ds	58
  1311  0001AA                     _SPI1:
  1312                           	opt stack 0
  1313  0001AA                     	ds	11
  1314  0001B5                     _SPI2:
  1315                           	opt stack 0
  1316  0001B5                     	ds	11
  1317  0001C0                     _DIPSwitch:
  1318                           	opt stack 0
  1319  0001C0                     	ds	10
  1320  0001CA                     _TestButton:
  1321                           	opt stack 0
  1322  0001CA                     	ds	10
  1323  0001D4                     _PortG:
  1324                           	opt stack 0
  1325  0001D4                     	ds	10
  1326  0001DE                     _PortB:
  1327                           	opt stack 0
  1328  0001DE                     	ds	10
  1329  0001E8                     _PortA:
  1330                           	opt stack 0
  1331  0001E8                     	ds	10
  1332  0001F2                     _ADC_AN3:
  1333                           	opt stack 0
  1334  0001F2                     	ds	5
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           postdec1	equ	0xFE5
  1342                           fsr1h	equ	0xFE2
  1343                           fsr1l	equ	0xFE1
  1344                           
  1345                           	psect	dataBANK1
  1346  0001F7                     __pdataBANK1:
  1347                           	opt stack 0
  1348  0001F7                     Console_Render@F6956:
  1349                           	opt stack 0
  1350  0001F7                     	ds	4
  1351  0001FB                     _gLineSize:
  1352                           	opt stack 0
  1353  0001FB                     	ds	4
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1h	equ	0xFE2
  1362                           fsr1l	equ	0xFE1
  1363                           
  1364                           	psect	bssBIGRAM
  1365  00020C                     __pbssBIGRAM:
  1366                           	opt stack 0
  1367  00020C                     _lBuffer:
  1368                           	opt stack 0
  1369  00020C                     	ds	300
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec1	equ	0xFE5
  1377                           fsr1h	equ	0xFE2
  1378                           fsr1l	equ	0xFE1
  1379                           
  1380                           	psect	cstackBANK2
  1381  000200                     __pcstackBANK2:
  1382                           	opt stack 0
  1383  000200                     Port_SetQuadType@pInput:
  1384                           	opt stack 0
  1385  000200                     Port_SetType@pInput:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x0
  1389  000200                     	ds	2
  1390  000202                     Port_SetQuadType@pQuad:
  1391                           	opt stack 0
  1392  000202                     Port_SetType@pType:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x2
  1396  000202                     	ds	1
  1397  000203                     ??_Port_SetType:
  1398  000203                     Port_SetQuadType@pType:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x3
  1402  000203                     	ds	2
  1403  000205                     Port_SetType@Output:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x5
  1407  000205                     	ds	1
  1408  000206                     Port_Init@pInput:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x6
  1412  000206                     	ds	2
  1413  000208                     Port_Init@pPort:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x8
  1417  000208                     	ds	1
  1418  000209                     ??_Port_Init:
  1419                           
  1420                           ; 1 bytes @ 0x9
  1421  000209                     	ds	2
  1422  00020B                     Port_Init@i:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0xB
  1426  00020B                     	ds	1
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1h	equ	0xFE2
  1435                           fsr1l	equ	0xFE1
  1436                           
  1437                           	psect	cstackBANK1
  1438  0001FF                     __pcstackBANK1:
  1439                           	opt stack 0
  1440  0001FF                     Port_CheckPortType@Output:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x0
  1444  0001FF                     	ds	1
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1h	equ	0xFE2
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           	psect	cstackBANK0
  1456  0000C1                     __pcstackBANK0:
  1457                           	opt stack 0
  1458  0000C1                     ??_Console_ClearCursor:
  1459  0000C1                     ??_Console_NewLine:
  1460  0000C1                     ??_Console_FormFeed:
  1461  0000C1                     ?_GetPortProperties:
  1462                           	opt stack 0
  1463  0000C1                     ?_GetPortPORT:
  1464                           	opt stack 0
  1465  0000C1                     ?_GetPortTRIS:
  1466                           	opt stack 0
  1467  0000C1                     ?___awdiv:
  1468                           	opt stack 0
  1469  0000C1                     ?___lldiv:
  1470                           	opt stack 0
  1471  0000C1                     Mode_Set@pMode:
  1472                           	opt stack 0
  1473  0000C1                     Port_GetPin@pInput:
  1474                           	opt stack 0
  1475  0000C1                     SPI_DisableISR@pInput:
  1476                           	opt stack 0
  1477  0000C1                     SPI_DCS@pInput:
  1478                           	opt stack 0
  1479  0000C1                     SPI_Send@pInput:
  1480                           	opt stack 0
  1481  0000C1                     Byte_SetBit@pInput:
  1482                           	opt stack 0
  1483  0000C1                     Byte_SetZone@pInput:
  1484                           	opt stack 0
  1485  0000C1                     Byte_GetZone@pInput:
  1486                           	opt stack 0
  1487  0000C1                     Byte_SetByte@pInput:
  1488                           	opt stack 0
  1489  0000C1                     delay_ms@ms:
  1490                           	opt stack 0
  1491  0000C1                     delay_us@us:
  1492                           	opt stack 0
  1493  0000C1                     ___awdiv@dividend:
  1494                           	opt stack 0
  1495  0000C1                     MXK_Queue@pCallback:
  1496                           	opt stack 0
  1497  0000C1                     ___lldiv@dividend:
  1498                           	opt stack 0
  1499                           
  1500                           ; 4 bytes @ 0x0
  1501  0000C1                     	ds	2
  1502  0000C3                     GetPortProperties@pInput:
  1503                           	opt stack 0
  1504  0000C3                     GetPortPORT@pInput:
  1505                           	opt stack 0
  1506  0000C3                     GetPortTRIS@pInput:
  1507                           	opt stack 0
  1508  0000C3                     Port_GetPin@pPin:
  1509                           	opt stack 0
  1510  0000C3                     SPI_Send@pData:
  1511                           	opt stack 0
  1512  0000C3                     Byte_SetBit@pBit:
  1513                           	opt stack 0
  1514  0000C3                     Byte_SetZone@pMax:
  1515                           	opt stack 0
  1516  0000C3                     Byte_GetZone@pMax:
  1517                           	opt stack 0
  1518  0000C3                     Byte_SetByte@pValue:
  1519                           	opt stack 0
  1520  0000C3                     Console_FormFeed@x:
  1521                           	opt stack 0
  1522  0000C3                     ___awdiv@divisor:
  1523                           	opt stack 0
  1524  0000C3                     delay_ms@u:
  1525                           	opt stack 0
  1526  0000C3                     delay_us@u:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x2
  1530  0000C3                     	ds	1
  1531  0000C4                     ??_Port_GetPin:
  1532  0000C4                     LCD_Write@mode:
  1533                           	opt stack 0
  1534  0000C4                     Byte_SetBit@pValue:
  1535                           	opt stack 0
  1536  0000C4                     Byte_SetZone@pChunk:
  1537                           	opt stack 0
  1538  0000C4                     Byte_GetZone@pChunk:
  1539                           	opt stack 0
  1540  0000C4                     Console_FormFeed@y:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x3
  1544  0000C4                     	ds	1
  1545  0000C5                     ??_Byte_SetBit:
  1546  0000C5                     ??_Console_IncrementCursor:
  1547  0000C5                     LCD_Write@value:
  1548                           	opt stack 0
  1549  0000C5                     Byte_SetZone@pChunkSize:
  1550                           	opt stack 0
  1551  0000C5                     Byte_GetZone@pChunkSize:
  1552                           	opt stack 0
  1553  0000C5                     ___awdiv@counter:
  1554                           	opt stack 0
  1555  0000C5                     ___lldiv@divisor:
  1556                           	opt stack 0
  1557                           
  1558                           ; 4 bytes @ 0x4
  1559  0000C5                     	ds	1
  1560  0000C6                     ??_Byte_GetZone:
  1561  0000C6                     Set_Addr_Window@ys:
  1562                           	opt stack 0
  1563  0000C6                     Set_Rotation@m:
  1564                           	opt stack 0
  1565  0000C6                     Port_GetPin@Output:
  1566                           	opt stack 0
  1567  0000C6                     Byte_SetZone@pValue:
  1568                           	opt stack 0
  1569  0000C6                     ___awdiv@sign:
  1570                           	opt stack 0
  1571  0000C6                     LCD_Word_Write@value:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x5
  1575  0000C6                     	ds	1
  1576  0000C7                     ??_Byte_SetZone:
  1577  0000C7                     Set_Addr_Window@xe:
  1578                           	opt stack 0
  1579  0000C7                     Set_Rotation@rotation:
  1580                           	opt stack 0
  1581  0000C7                     Byte_GetZone@MASK:
  1582                           	opt stack 0
  1583  0000C7                     MXK_BlockSwitchTo@CUR:
  1584                           	opt stack 0
  1585  0000C7                     MXK_SwitchTo@CUR:
  1586                           	opt stack 0
  1587  0000C7                     ___awdiv@quotient:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x6
  1591  0000C7                     	ds	1
  1592  0000C8                     Set_Addr_Window@ye:
  1593                           	opt stack 0
  1594  0000C8                     Byte_GetZone@Offset:
  1595                           	opt stack 0
  1596  0000C8                     MXK_BlockSwitchTo@pModule:
  1597                           	opt stack 0
  1598  0000C8                     MXK_SwitchTo@pModule:
  1599                           	opt stack 0
  1600                           
  1601                           ; 1 bytes @ 0x7
  1602  0000C8                     	ds	1
  1603  0000C9                     ??_Console_Tab:
  1604  0000C9                     Set_Addr_Window@xs:
  1605                           	opt stack 0
  1606  0000C9                     Byte_GetZone@Output:
  1607                           	opt stack 0
  1608  0000C9                     ___lldiv@quotient:
  1609                           	opt stack 0
  1610                           
  1611                           ; 4 bytes @ 0x8
  1612  0000C9                     	ds	1
  1613  0000CA                     Byte_SetZone@Offset:
  1614                           	opt stack 0
  1615  0000CA                     LCD_Fill@pColour:
  1616                           	opt stack 0
  1617  0000CA                     Byte_GetPair@pInput:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x9
  1621  0000CA                     	ds	1
  1622  0000CB                     Byte_SetZone@MASK:
  1623                           	opt stack 0
  1624                           
  1625                           ; 1 bytes @ 0xA
  1626  0000CB                     	ds	1
  1627  0000CC                     LCD_Fill@i:
  1628                           	opt stack 0
  1629  0000CC                     Byte_GetPair@pPair:
  1630                           	opt stack 0
  1631  0000CC                     Byte_SetPair@pInput:
  1632                           	opt stack 0
  1633  0000CC                     Byte_SetQuad@pInput:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0xB
  1637  0000CC                     	ds	1
  1638  0000CD                     LCD_Fill@j:
  1639                           	opt stack 0
  1640  0000CD                     ___lldiv@counter:
  1641                           	opt stack 0
  1642  0000CD                     Word_GetPair@pInput:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0xC
  1646  0000CD                     	ds	1
  1647  0000CE                     Byte_SetPair@pPair:
  1648                           	opt stack 0
  1649  0000CE                     Byte_SetQuad@pQuad:
  1650                           	opt stack 0
  1651  0000CE                     Console_Tab@t:
  1652                           	opt stack 0
  1653  0000CE                     Timer2_Init@pFrequency:
  1654                           	opt stack 0
  1655                           
  1656                           ; 4 bytes @ 0xD
  1657  0000CE                     	ds	1
  1658  0000CF                     Byte_SetPair@pValue:
  1659                           	opt stack 0
  1660  0000CF                     Byte_SetQuad@pValue:
  1661                           	opt stack 0
  1662  0000CF                     Word_GetPair@pPair:
  1663                           	opt stack 0
  1664  0000CF                     Console_Tab@i:
  1665                           	opt stack 0
  1666                           
  1667                           ; 1 bytes @ 0xE
  1668  0000CF                     	ds	1
  1669  0000D0                     Console_Tab@c:
  1670                           	opt stack 0
  1671  0000D0                     Port_SetPin@pInput:
  1672                           	opt stack 0
  1673  0000D0                     Port_Set@pInput:
  1674                           	opt stack 0
  1675  0000D0                     SPI_MaxSpeed@pInput:
  1676                           	opt stack 0
  1677  0000D0                     Word_SetPair@pInput:
  1678                           	opt stack 0
  1679  0000D0                     PortProperty_Valid@pInput:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0xF
  1683  0000D0                     	ds	1
  1684  0000D1                     ??_Console_PrintChar:
  1685                           
  1686                           ; 1 bytes @ 0x10
  1687  0000D1                     	ds	1
  1688  0000D2                     ??_Timer2_Init:
  1689  0000D2                     Port_SetPin@pPin:
  1690                           	opt stack 0
  1691  0000D2                     Port_Set@pValue:
  1692                           	opt stack 0
  1693  0000D2                     Word_SetPair@pPair:
  1694                           	opt stack 0
  1695  0000D2                     PortProperty_Valid@pPinDrive:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0x11
  1699  0000D2                     	ds	1
  1700  0000D3                     ??_Port_Set:
  1701  0000D3                     Port_SetPin@pValue:
  1702                           	opt stack 0
  1703  0000D3                     Word_SetPair@pValue:
  1704                           	opt stack 0
  1705  0000D3                     PortProperty_Valid@pPin:
  1706                           	opt stack 0
  1707  0000D3                     Timer2_Init@RDIV:
  1708                           	opt stack 0
  1709                           
  1710                           ; 4 bytes @ 0x12
  1711  0000D3                     	ds	1
  1712  0000D4                     ??_PortProperty_Valid:
  1713  0000D4                     Port_SetPin@Type:
  1714                           	opt stack 0
  1715  0000D4                     Console_PrintChar@pInput:
  1716                           	opt stack 0
  1717                           
  1718                           ; 1 bytes @ 0x13
  1719  0000D4                     	ds	1
  1720  0000D5                     LED_Set@pValue:
  1721                           	opt stack 0
  1722  0000D5                     Port_TogglePin@pInput:
  1723                           	opt stack 0
  1724  0000D5                     Console_PrintString@pInput:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x14
  1728  0000D5                     	ds	1
  1729  0000D6                     LED_Set@pLED:
  1730                           	opt stack 0
  1731  0000D6                     PortProperty_Valid@Errors:
  1732                           	opt stack 0
  1733                           
  1734                           ; 16 bytes @ 0x15
  1735  0000D6                     	ds	1
  1736  0000D7                     Port_TogglePin@pPin:
  1737                           	opt stack 0
  1738  0000D7                     Timer2_Init@pCPUClock:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x16
  1742  0000D7                     	ds	1
  1743  0000D8                     Port_TogglePin@Value:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x17
  1747  0000D8                     	ds	1
  1748  0000D9                     LED_Toggle@pLED:
  1749                           	opt stack 0
  1750                           
  1751                           ; 1 bytes @ 0x18
  1752  0000D9                     	ds	1
  1753  0000DA                     
  1754                           ; 1 bytes @ 0x19
  1755  0000DA                     	ds	1
  1756  0000DB                     Timer2_Init@DIVIDE:
  1757                           	opt stack 0
  1758                           
  1759                           ; 4 bytes @ 0x1A
  1760  0000DB                     	ds	8
  1761  0000E3                     Port_Set@TypeRequired:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x22
  1765  0000E3                     	ds	2
  1766  0000E5                     Port_Set@TypeActual:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x24
  1770  0000E5                     	ds	1
  1771  0000E6                     PortProperty_Valid@Pair:
  1772                           	opt stack 0
  1773                           
  1774                           ; 1 bytes @ 0x25
  1775  0000E6                     	ds	1
  1776  0000E7                     Port_Set@Type:
  1777                           	opt stack 0
  1778  0000E7                     Port_CheckPairType@pInput:
  1779                           	opt stack 0
  1780  0000E7                     Port_SetPinType@pInput:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x26
  1784  0000E7                     	ds	2
  1785  0000E9                     Port_CheckPairType@pPair:
  1786                           	opt stack 0
  1787  0000E9                     Port_SetPinType@pPin:
  1788                           	opt stack 0
  1789                           
  1790                           ; 1 bytes @ 0x28
  1791  0000E9                     	ds	1
  1792  0000EA                     Port_CheckPairType@pDrive:
  1793                           	opt stack 0
  1794  0000EA                     Port_SetPinType@pType:
  1795                           	opt stack 0
  1796                           
  1797                           ; 1 bytes @ 0x29
  1798  0000EA                     	ds	1
  1799  0000EB                     Port_CheckPairType@Pin1:
  1800                           	opt stack 0
  1801  0000EB                     Port_SetPinType@Output:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x2A
  1805  0000EB                     	ds	1
  1806  0000EC                     Port_CheckPairType@Pin2:
  1807                           	opt stack 0
  1808  0000EC                     Port_SetPinType@Props:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x2B
  1812  0000EC                     	ds	1
  1813  0000ED                     Port_CheckPairType@Output:
  1814                           	opt stack 0
  1815                           
  1816                           ; 1 bytes @ 0x2C
  1817  0000ED                     	ds	1
  1818  0000EE                     LED_Init@pLED:
  1819                           	opt stack 0
  1820  0000EE                     Port_CheckPairType@Props:
  1821                           	opt stack 0
  1822  0000EE                     SPI_Init@pClock:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0x2D
  1826  0000EE                     	ds	2
  1827  0000F0                     Port_CheckQuadType@pInput:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x2F
  1831  0000F0                     	ds	2
  1832  0000F2                     Port_CheckQuadType@pQuad:
  1833                           	opt stack 0
  1834  0000F2                     SPI_Init@pChannel:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x31
  1838  0000F2                     	ds	1
  1839  0000F3                     Port_CheckQuadType@pDrive:
  1840                           	opt stack 0
  1841  0000F3                     SPI_Init@pMode:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x32
  1845  0000F3                     	ds	1
  1846  0000F4                     Port_CheckQuadType@Pair1:
  1847                           	opt stack 0
  1848  0000F4                     SPI_Init@pInput:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x33
  1852  0000F4                     	ds	1
  1853  0000F5                     Port_CheckQuadType@Pair2:
  1854                           	opt stack 0
  1855                           
  1856                           ; 1 bytes @ 0x34
  1857  0000F5                     	ds	1
  1858  0000F6                     ??_LCD_Init:
  1859  0000F6                     Port_CheckQuadType@Output:
  1860                           	opt stack 0
  1861                           
  1862                           ; 1 bytes @ 0x35
  1863  0000F6                     	ds	1
  1864  0000F7                     Port_SetQuadType@Output:
  1865                           	opt stack 0
  1866  0000F7                     Port_CheckPortType@pInput:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x36
  1870  0000F7                     	ds	1
  1871  0000F8                     LCD_Init@i:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x37
  1875  0000F8                     	ds	1
  1876  0000F9                     Port_CheckPortType@pDrive:
  1877                           	opt stack 0
  1878                           
  1879                           ; 1 bytes @ 0x38
  1880  0000F9                     	ds	1
  1881  0000FA                     tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1h	equ	0xFE2
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           ; 1 bytes @ 0x39
  1892                           
  1893                           	psect	cstackCOMRAM
  1894  000001                     __pcstackCOMRAM:
  1895                           	opt stack 0
  1896  000001                     i2Byte_SetBit@pInput:
  1897                           	opt stack 0
  1898  000001                     i2Byte_GetZone@pInput:
  1899                           	opt stack 0
  1900  000001                     i2delay_us@us:
  1901                           	opt stack 0
  1902  000001                     i2MXK_Queue@pCallback:
  1903                           	opt stack 0
  1904                           
  1905                           ; 3 bytes @ 0x0
  1906  000001                     	ds	2
  1907  000003                     i2Byte_SetBit@pBit:
  1908                           	opt stack 0
  1909  000003                     i2Byte_GetZone@pMax:
  1910                           	opt stack 0
  1911  000003                     i2delay_us@u:
  1912                           	opt stack 0
  1913                           
  1914                           ; 4 bytes @ 0x2
  1915  000003                     	ds	1
  1916  000004                     i2Byte_SetBit@pValue:
  1917                           	opt stack 0
  1918  000004                     i2Byte_GetZone@pChunk:
  1919                           	opt stack 0
  1920                           
  1921                           ; 1 bytes @ 0x3
  1922  000004                     	ds	1
  1923  000005                     ??i2_Byte_SetBit:
  1924  000005                     i2Byte_GetZone@pChunkSize:
  1925                           	opt stack 0
  1926                           
  1927                           ; 1 bytes @ 0x4
  1928  000005                     	ds	1
  1929  000006                     ??i2_Byte_GetZone:
  1930                           
  1931                           ; 1 bytes @ 0x5
  1932  000006                     	ds	1
  1933  000007                     i2Byte_GetZone@MASK:
  1934                           	opt stack 0
  1935  000007                     i2MXK_SwitchTo@CUR:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0x6
  1939  000007                     	ds	1
  1940  000008                     i2Byte_GetZone@Offset:
  1941                           	opt stack 0
  1942  000008                     i2MXK_SwitchTo@pModule:
  1943                           	opt stack 0
  1944                           
  1945                           ; 1 bytes @ 0x7
  1946  000008                     	ds	1
  1947  000009                     i2Byte_GetZone@Output:
  1948                           	opt stack 0
  1949                           
  1950                           ; 1 bytes @ 0x8
  1951  000009                     	ds	1
  1952  00000A                     i2Byte_GetPair@pInput:
  1953                           	opt stack 0
  1954                           
  1955                           ; 2 bytes @ 0x9
  1956  00000A                     	ds	2
  1957  00000C                     i2Byte_GetPair@pPair:
  1958                           	opt stack 0
  1959                           
  1960                           ; 1 bytes @ 0xB
  1961  00000C                     	ds	1
  1962  00000D                     i2Word_GetPair@pInput:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0xC
  1966  00000D                     	ds	2
  1967  00000F                     i2Word_GetPair@pPair:
  1968                           	opt stack 0
  1969                           
  1970                           ; 1 bytes @ 0xE
  1971  00000F                     	ds	1
  1972  000010                     i2Port_SetPin@pInput:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0xF
  1976  000010                     	ds	2
  1977  000012                     i2Port_SetPin@pPin:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0x11
  1981  000012                     	ds	1
  1982  000013                     i2Port_SetPin@pValue:
  1983                           	opt stack 0
  1984                           
  1985                           ; 1 bytes @ 0x12
  1986  000013                     	ds	1
  1987  000014                     i2Port_SetPin@Type:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x13
  1991  000014                     	ds	1
  1992  000015                     
  1993                           ; 1 bytes @ 0x14
  1994  000015                     	ds	2
  1995  000017                     ??_ISR_Function:
  1996                           
  1997                           ; 1 bytes @ 0x16
  1998  000017                     	ds	18
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           postdec1	equ	0xFE5
  2006                           fsr1h	equ	0xFE2
  2007                           fsr1l	equ	0xFE1
  2008                           
  2009 ;;
  2010 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2011 ;;
  2012 ;; *************** function _main *****************
  2013 ;; Defined at:
  2014 ;;		line 22 in file "main.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;Total ram usage:        0 bytes
  2033 ;; Hardware stack levels required when called:   17
  2034 ;; This function calls:
  2035 ;;		_Console_PrintString
  2036 ;;		_LCD_Init
  2037 ;;		_MXK_BlockSwitchTo
  2038 ;;		_MXK_Dequeue
  2039 ;;		_MXK_Init
  2040 ;;		_MXK_Release
  2041 ;; This function is called by:
  2042 ;;		Startup code after reset
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text0
  2047  01212E                     __ptext0:
  2048                           	opt stack 0
  2049  01212E                     _main:
  2050                           	opt stack 14
  2051                           
  2052                           ;main.c: 28: MXK_Init();
  2053                           
  2054                           ;incstack = 0
  2055  01212E  ECA2  F088         	call	_MXK_Init	;wreg free
  2056                           
  2057                           ;main.c: 31: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2058  012132  0E01               	movlw	1
  2059  012134  EC5B  F095         	call	_MXK_BlockSwitchTo
  2060  012138  0900               	iorlw	0
  2061  01213A  B4D8               	btfsc	status,2,c
  2062  01213C  D008               	goto	l1975
  2063                           
  2064                           ;main.c: 33: LCD_Init();
  2065  01213E  EC62  F089         	call	_LCD_Init	;wreg free
  2066                           
  2067                           ;main.c: 34: if (MXK_Release())
  2068  012142  ECDA  F096         	call	_MXK_Release	;wreg free
  2069  012146  0900               	iorlw	0
  2070  012148  A4D8               	btfss	status,2,c
  2071                           
  2072                           ;main.c: 35: MXK_Dequeue();
  2073  01214A  EC3C  F095         	call	_MXK_Dequeue	;wreg free
  2074  01214E                     l1975:
  2075                           
  2076                           ;main.c: 36: }
  2077                           ;main.c: 39: if (MXK_BlockSwitchTo(eMXK_HMI))
  2078  01214E  0E01               	movlw	1
  2079  012150  EC5B  F095         	call	_MXK_BlockSwitchTo
  2080  012154  0900               	iorlw	0
  2081  012156  B4D8               	btfsc	status,2,c
  2082  012158  D006               	goto	l1977
  2083                           
  2084                           ;main.c: 40: {
  2085                           ;main.c: 43: if (MXK_Release())
  2086  01215A  ECDA  F096         	call	_MXK_Release	;wreg free
  2087  01215E  0900               	iorlw	0
  2088  012160  A4D8               	btfss	status,2,c
  2089                           
  2090                           ;main.c: 44: MXK_Dequeue();
  2091  012162  EC3C  F095         	call	_MXK_Dequeue	;wreg free
  2092  012166                     l1977:
  2093                           
  2094                           ;main.c: 54: {
  2095                           ;main.c: 55: Console_PrintString("Jamin Early");
  2096                           
  2097                           ;main.c: 45: }
  2098                           ;main.c: 53: for(;;)
  2099  012166  0EF3               	movlw	low STR_1
  2100  012168  0100               	movlb	0	; () banked
  2101  01216A  6FD5               	movwf	Console_PrintString@pInput& (0+255),b
  2102  01216C  0EFF               	movlw	high STR_1
  2103  01216E  0100               	movlb	0	; () banked
  2104  012170  6FD6               	movwf	(Console_PrintString@pInput+1)& (0+255),b
  2105  012172  ECD3  F095         	call	_Console_PrintString	;wreg free
  2106                           
  2107                           ;main.c: 57: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2108  012176  0E01               	movlw	1
  2109  012178  EC5B  F095         	call	_MXK_BlockSwitchTo
  2110  01217C  0900               	iorlw	0
  2111  01217E  B4D8               	btfsc	status,2,c
  2112  012180  D006               	goto	l1980
  2113                           
  2114                           ;main.c: 60: if (MXK_Release())
  2115  012182  ECDA  F096         	call	_MXK_Release	;wreg free
  2116  012186  0900               	iorlw	0
  2117  012188  A4D8               	btfss	status,2,c
  2118                           
  2119                           ;main.c: 61: MXK_Dequeue();
  2120  01218A  EC3C  F095         	call	_MXK_Dequeue	;wreg free
  2121  01218E                     l1980:
  2122                           
  2123                           ;main.c: 62: }
  2124                           ;main.c: 65: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2125  01218E  0E01               	movlw	1
  2126  012190  EC5B  F095         	call	_MXK_BlockSwitchTo
  2127  012194  0900               	iorlw	0
  2128  012196  B4D8               	btfsc	status,2,c
  2129  012198  D006               	goto	l1982
  2130                           
  2131                           ;main.c: 68: if (MXK_Release())
  2132  01219A  ECDA  F096         	call	_MXK_Release	;wreg free
  2133  01219E  0900               	iorlw	0
  2134  0121A0  A4D8               	btfss	status,2,c
  2135                           
  2136                           ;main.c: 69: MXK_Dequeue();
  2137  0121A2  EC3C  F095         	call	_MXK_Dequeue	;wreg free
  2138  0121A6                     l1982:
  2139                           
  2140                           ;main.c: 70: }
  2141                           ;main.c: 73: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2142  0121A6  0E01               	movlw	1
  2143  0121A8  EC5B  F095         	call	_MXK_BlockSwitchTo
  2144  0121AC  0900               	iorlw	0
  2145  0121AE  B4D8               	btfsc	status,2,c
  2146  0121B0  D7DA               	goto	l1977
  2147                           
  2148                           ;main.c: 80: if (MXK_Release())
  2149  0121B2  ECDA  F096         	call	_MXK_Release	;wreg free
  2150  0121B6  0900               	iorlw	0
  2151  0121B8  B4D8               	btfsc	status,2,c
  2152  0121BA  D7D5               	goto	l1977
  2153                           
  2154                           ;main.c: 81: MXK_Dequeue();
  2155  0121BC  EC3C  F095         	call	_MXK_Dequeue	;wreg free
  2156                           
  2157                           ;main.c: 82: }
  2158                           ;main.c: 83: }
  2159  0121C0  D7D2               	goto	l1977
  2160  0121C2                     __end_of_main:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           postdec1	equ	0xFE5
  2169                           fsr1h	equ	0xFE2
  2170                           fsr1l	equ	0xFE1
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _MXK_Init *****************
  2174 ;; Defined at:
  2175 ;;		line 33 in file "Library/MXK.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:   16
  2196 ;; This function calls:
  2197 ;;		_LED_Init
  2198 ;;		_Port_Init
  2199 ;;		_Port_SetPin
  2200 ;;		_Port_SetPinType
  2201 ;;		_Port_SetQuadType
  2202 ;;		_Port_SetType
  2203 ;;		_delay_ms
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text1
  2210  011144                     __ptext1:
  2211                           	opt stack 0
  2212  011144                     _MXK_Init:
  2213                           	opt stack 14
  2214                           
  2215                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  2216                           
  2217                           ;incstack = 0
  2218  011144  0E01               	movlw	1
  2219  011146  6E4A               	movwf	_Bus_State,c
  2220                           
  2221                           ;MXK.c: 36: lQueue = (Function)0;
  2222  011148  0E00               	movlw	0
  2223  01114A  0100               	movlb	0	; () banked
  2224  01114C  6F68               	movwf	_lQueue& (0+255),b	;volatile
  2225  01114E  0E00               	movlw	0
  2226  011150  0100               	movlb	0	; () banked
  2227  011152  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
  2228  011154  0E00               	movlw	0
  2229  011156  0100               	movlb	0	; () banked
  2230  011158  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  2234  01115A  0EE8               	movlw	low _PortA
  2235  01115C  0102               	movlb	2	; () banked
  2236  01115E  6F06               	movwf	Port_Init@pInput& (0+255),b
  2237  011160  0E01               	movlw	high _PortA
  2238  011162  0102               	movlb	2	; () banked
  2239  011164  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2240  011166  0E00               	movlw	0
  2241  011168  0102               	movlb	2	; () banked
  2242  01116A  6F08               	movwf	Port_Init@pPort& (0+255),b
  2243  01116C  ECD9  F087         	call	_Port_Init	;wreg free
  2244                           
  2245                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  2246  011170  0EDE               	movlw	low _PortB
  2247  011172  0102               	movlb	2	; () banked
  2248  011174  6F06               	movwf	Port_Init@pInput& (0+255),b
  2249  011176  0E01               	movlw	high _PortB
  2250  011178  0102               	movlb	2	; () banked
  2251  01117A  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2252  01117C  0E01               	movlw	1
  2253  01117E  0102               	movlb	2	; () banked
  2254  011180  6F08               	movwf	Port_Init@pPort& (0+255),b
  2255  011182  ECD9  F087         	call	_Port_Init	;wreg free
  2256                           
  2257                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  2258  011186  0E8F               	movlw	low _PortC
  2259  011188  0102               	movlb	2	; () banked
  2260  01118A  6F06               	movwf	Port_Init@pInput& (0+255),b
  2261  01118C  0E00               	movlw	high _PortC
  2262  01118E  0102               	movlb	2	; () banked
  2263  011190  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2264  011192  0E02               	movlw	2
  2265  011194  0102               	movlb	2	; () banked
  2266  011196  6F08               	movwf	Port_Init@pPort& (0+255),b
  2267  011198  ECD9  F087         	call	_Port_Init	;wreg free
  2268                           
  2269                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  2270  01119C  0E85               	movlw	low _PortD
  2271  01119E  0102               	movlb	2	; () banked
  2272  0111A0  6F06               	movwf	Port_Init@pInput& (0+255),b
  2273  0111A2  0E00               	movlw	high _PortD
  2274  0111A4  0102               	movlb	2	; () banked
  2275  0111A6  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2276  0111A8  0E03               	movlw	3
  2277  0111AA  0102               	movlb	2	; () banked
  2278  0111AC  6F08               	movwf	Port_Init@pPort& (0+255),b
  2279  0111AE  ECD9  F087         	call	_Port_Init	;wreg free
  2280                           
  2281                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  2282  0111B2  0E7B               	movlw	low _PortE
  2283  0111B4  0102               	movlb	2	; () banked
  2284  0111B6  6F06               	movwf	Port_Init@pInput& (0+255),b
  2285  0111B8  0E00               	movlw	high _PortE
  2286  0111BA  0102               	movlb	2	; () banked
  2287  0111BC  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2288  0111BE  0E04               	movlw	4
  2289  0111C0  0102               	movlb	2	; () banked
  2290  0111C2  6F08               	movwf	Port_Init@pPort& (0+255),b
  2291  0111C4  ECD9  F087         	call	_Port_Init	;wreg free
  2292                           
  2293                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  2294  0111C8  0E99               	movlw	low _PortF
  2295  0111CA  0102               	movlb	2	; () banked
  2296  0111CC  6F06               	movwf	Port_Init@pInput& (0+255),b
  2297  0111CE  0E00               	movlw	high _PortF
  2298  0111D0  0102               	movlb	2	; () banked
  2299  0111D2  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2300  0111D4  0E05               	movlw	5
  2301  0111D6  0102               	movlb	2	; () banked
  2302  0111D8  6F08               	movwf	Port_Init@pPort& (0+255),b
  2303  0111DA  ECD9  F087         	call	_Port_Init	;wreg free
  2304                           
  2305                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  2306  0111DE  0ED4               	movlw	low _PortG
  2307  0111E0  0102               	movlb	2	; () banked
  2308  0111E2  6F06               	movwf	Port_Init@pInput& (0+255),b
  2309  0111E4  0E01               	movlw	high _PortG
  2310  0111E6  0102               	movlb	2	; () banked
  2311  0111E8  6F07               	movwf	(Port_Init@pInput+1)& (0+255),b
  2312  0111EA  0E06               	movlw	6
  2313  0111EC  0102               	movlb	2	; () banked
  2314  0111EE  6F08               	movwf	Port_Init@pPort& (0+255),b
  2315  0111F0  ECD9  F087         	call	_Port_Init	;wreg free
  2316                           
  2317                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  2318  0111F4  0E99               	movlw	low _PortF
  2319  0111F6  0100               	movlb	0	; () banked
  2320  0111F8  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  2321  0111FA  0E00               	movlw	high _PortF
  2322  0111FC  0100               	movlb	0	; () banked
  2323  0111FE  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  2324  011200  0E05               	movlw	5
  2325  011202  0100               	movlb	0	; () banked
  2326  011204  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  2327  011206  0E00               	movlw	0
  2328  011208  0100               	movlb	0	; () banked
  2329  01120A  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  2330  01120C  EC2C  F086         	call	_Port_SetPinType	;wreg free
  2331                           
  2332                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  2333  011210  0EDE               	movlw	low _PortB
  2334  011212  0102               	movlb	2	; () banked
  2335  011214  6F00               	movwf	Port_SetQuadType@pInput& (0+255),b
  2336  011216  0E01               	movlw	high _PortB
  2337  011218  0102               	movlb	2	; () banked
  2338  01121A  6F01               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  2339  01121C  0E00               	movlw	0
  2340  01121E  0102               	movlb	2	; () banked
  2341  011220  6F02               	movwf	Port_SetQuadType@pQuad& (0+255),b
  2342  011222  0E00               	movlw	0
  2343  011224  0102               	movlb	2	; () banked
  2344  011226  6F03               	movwf	Port_SetQuadType@pType& (0+255),b
  2345  011228  ECEC  F083         	call	_Port_SetQuadType	;wreg free
  2346                           
  2347                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  2348  01122C  0E99               	movlw	low _PortF
  2349  01122E  0100               	movlb	0	; () banked
  2350  011230  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  2351  011232  0E00               	movlw	high _PortF
  2352  011234  0100               	movlb	0	; () banked
  2353  011236  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  2354  011238  0E06               	movlw	6
  2355  01123A  0100               	movlb	0	; () banked
  2356  01123C  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  2357  01123E  0E03               	movlw	3
  2358  011240  0100               	movlb	0	; () banked
  2359  011242  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  2360  011244  EC2C  F086         	call	_Port_SetPinType	;wreg free
  2361                           
  2362                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  2363  011248  0ED4               	movlw	low _PortG
  2364  01124A  0102               	movlb	2	; () banked
  2365  01124C  6F00               	movwf	Port_SetType@pInput& (0+255),b
  2366  01124E  0E01               	movlw	high _PortG
  2367  011250  0102               	movlb	2	; () banked
  2368  011252  6F01               	movwf	(Port_SetType@pInput+1)& (0+255),b
  2369  011254  0E03               	movlw	3
  2370  011256  0102               	movlb	2	; () banked
  2371  011258  6F02               	movwf	Port_SetType@pType& (0+255),b
  2372  01125A  EC17  F085         	call	_Port_SetType	;wreg free
  2373                           
  2374                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  2375  01125E  0ED4               	movlw	low _PortG
  2376  011260  0100               	movlb	0	; () banked
  2377  011262  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  2378  011264  0E01               	movlw	high _PortG
  2379  011266  0100               	movlb	0	; () banked
  2380  011268  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  2381  01126A  0E04               	movlw	4
  2382  01126C  0100               	movlb	0	; () banked
  2383  01126E  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  2384  011270  0E00               	movlw	0
  2385  011272  0100               	movlb	0	; () banked
  2386  011274  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
  2387  011276  ECDE  F08B         	call	_Port_SetPin	;wreg free
  2388                           
  2389                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  2390  01127A  0E99               	movlw	low _PortF
  2391  01127C  0100               	movlb	0	; () banked
  2392  01127E  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  2393  011280  0E00               	movlw	high _PortF
  2394  011282  0100               	movlb	0	; () banked
  2395  011284  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  2396  011286  0E06               	movlw	6
  2397  011288  0100               	movlb	0	; () banked
  2398  01128A  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  2399  01128C  0E01               	movlw	1
  2400  01128E  0100               	movlb	0	; () banked
  2401  011290  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
  2402  011292  ECDE  F08B         	call	_Port_SetPin	;wreg free
  2403                           
  2404                           ;MXK.c: 55: LED_Init(eLED1);
  2405  011296  0E00               	movlw	0
  2406  011298  EC16  F093         	call	_LED_Init
  2407                           
  2408                           ;MXK.c: 56: LED_Init(eLED2);
  2409  01129C  0E01               	movlw	1
  2410  01129E  EC16  F093         	call	_LED_Init
  2411                           
  2412                           ;MXK.c: 58: PIR1 = 0;
  2413  0112A2  0E00               	movlw	0
  2414  0112A4  6E9E               	movwf	3998,c	;volatile
  2415                           
  2416                           ;MXK.c: 59: PIR2 = 0;
  2417  0112A6  0E00               	movlw	0
  2418  0112A8  6EA1               	movwf	4001,c	;volatile
  2419                           
  2420                           ;MXK.c: 60: PIR3 = 0;
  2421  0112AA  0E00               	movlw	0
  2422  0112AC  6EA4               	movwf	4004,c	;volatile
  2423                           
  2424                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  2425  0112AE  8E9B               	bsf	3995,7,c	;volatile
  2426                           
  2427                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  2428  0112B0  8C9B               	bsf	3995,6,c	;volatile
  2429                           
  2430                           ;MXK.c: 66: delay_ms(100);
  2431  0112B2  0E00               	movlw	0
  2432  0112B4  0100               	movlb	0	; () banked
  2433  0112B6  6FC2               	movwf	(delay_ms@ms+1)& (0+255),b
  2434  0112B8  0E64               	movlw	100
  2435  0112BA  6FC1               	movwf	delay_ms@ms& (0+255),b
  2436  0112BC  EC7C  F092         	call	_delay_ms	;wreg free
  2437                           
  2438                           ;MXK.c: 68: RCONbits.IPEN = 1;
  2439  0112C0  8ED0               	bsf	4048,7,c	;volatile
  2440  0112C2  0012               	return		;funcret
  2441  0112C4                     __end_of_MXK_Init:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           fsr1h	equ	0xFE2
  2451                           fsr1l	equ	0xFE1
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _Port_SetQuadType *****************
  2455 ;; Defined at:
  2456 ;;		line 399 in file "Library/Port.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  pInput          2    0[BANK2 ] const PTR struct Port
  2459 ;;		 -> PortB(10), PortD(10), 
  2460 ;;  pQuad           1    2[BANK2 ] enum E6776
  2461 ;;  pType           1    3[BANK2 ] enum E6795
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  Output          1   54[BANK0 ] enum E6475
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      enum E6475
  2466 ;; Registers used:
  2467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2473 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Totals:         0       1       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;Total ram usage:        5 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:   13
  2480 ;; This function calls:
  2481 ;;		_Byte_SetQuad
  2482 ;;		_Port_CheckQuadType
  2483 ;;		_Word_SetPair
  2484 ;; This function is called by:
  2485 ;;		_MXK_Init
  2486 ;;		_MXK_InitDIPSwitch
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text2
  2491  0107D8                     __ptext2:
  2492                           	opt stack 0
  2493  0107D8                     _Port_SetQuadType:
  2494                           	opt stack 16
  2495                           
  2496                           ;Port.c: 401: ePinError Output = ePinErrorState;
  2497                           
  2498                           ;incstack = 0
  2499  0107D8  0E05               	movlw	5
  2500  0107DA  0100               	movlb	0	; () banked
  2501  0107DC  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
  2502                           
  2503                           ;Port.c: 403: switch (pType)
  2504  0107DE  D0C7               	goto	l476
  2505  0107E0                     
  2506                           ;Port.c: 407: {
  2507                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
  2508                           
  2509                           ; BSR set to: 0
  2510  0107E0  0102               	movlb	2	; () banked
  2511  0107E2  EE20 F002          	lfsr	2,2
  2512  0107E6  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2513  0107E8  26D9               	addwf	fsr2l,f,c
  2514  0107EA  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2515  0107EC  22DA               	addwfc	fsr2h,f,c
  2516  0107EE  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2517  0107F2  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2518  0107F6  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2519  0107FA  0E0F               	movlw	15
  2520  0107FC  0100               	movlb	0	; () banked
  2521  0107FE  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2522  010800  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2523                           
  2524                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
  2525  010804  0102               	movlb	2	; () banked
  2526  010806  EE20 F004          	lfsr	2,4
  2527  01080A  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2528  01080C  26D9               	addwf	fsr2l,f,c
  2529  01080E  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2530  010810  22DA               	addwfc	fsr2h,f,c
  2531  010812  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2532  010816  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2533  01081A  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2534  01081E  0E00               	movlw	0
  2535  010820  0100               	movlb	0	; () banked
  2536  010822  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2537  010824  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2538                           
  2539                           ;Port.c: 413: }
  2540                           ;Port.c: 415: break;
  2541  010828  D0B0               	goto	l478
  2542  01082A                     
  2543                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
  2544  01082A  C200  F0F0         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
  2545  01082E  C201  F0F1         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
  2546  010832  C202  F0F2         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
  2547  010836  0E03               	movlw	3
  2548  010838  0100               	movlb	0	; () banked
  2549  01083A  6FF3               	movwf	Port_CheckQuadType@pDrive& (0+255),b
  2550  01083C  EC75  F093         	call	_Port_CheckQuadType	;wreg free
  2551  010840  0100               	movlb	0	; () banked
  2552  010842  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
  2553  010844  0100               	movlb	0	; () banked
  2554  010846  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
  2555  010848  A4D8               	btfss	status,2,c
  2556  01084A  0012               	return	
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;Port.c: 418: {
  2560                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
  2561  01084C  0102               	movlb	2	; () banked
  2562  01084E  EE20 F002          	lfsr	2,2
  2563  010852  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2564  010854  26D9               	addwf	fsr2l,f,c
  2565  010856  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2566  010858  22DA               	addwfc	fsr2h,f,c
  2567  01085A  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2568  01085E  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2569  010862  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2570  010866  0E00               	movlw	0
  2571  010868  0100               	movlb	0	; () banked
  2572  01086A  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2573  01086C  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2574                           
  2575                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
  2576  010870  0102               	movlb	2	; () banked
  2577  010872  EE20 F004          	lfsr	2,4
  2578  010876  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2579  010878  26D9               	addwf	fsr2l,f,c
  2580  01087A  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2581  01087C  22DA               	addwfc	fsr2h,f,c
  2582  01087E  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2583  010882  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2584  010886  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2585  01088A  0E00               	movlw	0
  2586  01088C  0100               	movlb	0	; () banked
  2587  01088E  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2588  010890  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2589                           
  2590                           ;Port.c: 424: }
  2591  010894  D07A               	goto	l478
  2592  010896                     
  2593                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
  2594  010896  C200  F0F0         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
  2595  01089A  C201  F0F1         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
  2596  01089E  C202  F0F2         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
  2597  0108A2  0E03               	movlw	3
  2598  0108A4  0100               	movlb	0	; () banked
  2599  0108A6  6FF3               	movwf	Port_CheckQuadType@pDrive& (0+255),b
  2600  0108A8  EC75  F093         	call	_Port_CheckQuadType	;wreg free
  2601  0108AC  0100               	movlb	0	; () banked
  2602  0108AE  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
  2603  0108B0  0100               	movlb	0	; () banked
  2604  0108B2  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
  2605  0108B4  A4D8               	btfss	status,2,c
  2606  0108B6  0012               	return	
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;Port.c: 429: {
  2610                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
  2611  0108B8  0102               	movlb	2	; () banked
  2612  0108BA  EE20 F002          	lfsr	2,2
  2613  0108BE  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2614  0108C0  26D9               	addwf	fsr2l,f,c
  2615  0108C2  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2616  0108C4  22DA               	addwfc	fsr2h,f,c
  2617  0108C6  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2618  0108CA  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2619  0108CE  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2620  0108D2  0E0F               	movlw	15
  2621  0108D4  0100               	movlb	0	; () banked
  2622  0108D6  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2623  0108D8  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2624                           
  2625                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
  2626  0108DC  0102               	movlb	2	; () banked
  2627  0108DE  EE20 F004          	lfsr	2,4
  2628  0108E2  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2629  0108E4  26D9               	addwf	fsr2l,f,c
  2630  0108E6  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2631  0108E8  22DA               	addwfc	fsr2h,f,c
  2632  0108EA  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2633  0108EE  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2634  0108F2  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2635  0108F6  0E0F               	movlw	15
  2636  0108F8  0100               	movlb	0	; () banked
  2637  0108FA  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2638  0108FC  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2639                           
  2640                           ;Port.c: 435: }
  2641  010900  D044               	goto	l478
  2642  010902                     
  2643                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
  2644  010902  C200  F0F0         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
  2645  010906  C201  F0F1         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
  2646  01090A  C202  F0F2         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
  2647  01090E  0E03               	movlw	3
  2648  010910  0100               	movlb	0	; () banked
  2649  010912  6FF3               	movwf	Port_CheckQuadType@pDrive& (0+255),b
  2650  010914  EC75  F093         	call	_Port_CheckQuadType	;wreg free
  2651  010918  0100               	movlb	0	; () banked
  2652  01091A  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
  2653  01091C  0100               	movlb	0	; () banked
  2654  01091E  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
  2655  010920  A4D8               	btfss	status,2,c
  2656  010922  0012               	return	
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;Port.c: 440: {
  2660                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
  2661  010924  0102               	movlb	2	; () banked
  2662  010926  EE20 F002          	lfsr	2,2
  2663  01092A  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2664  01092C  26D9               	addwf	fsr2l,f,c
  2665  01092E  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2666  010930  22DA               	addwfc	fsr2h,f,c
  2667  010932  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2668  010936  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2669  01093A  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2670  01093E  0E00               	movlw	0
  2671  010940  0100               	movlb	0	; () banked
  2672  010942  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2673  010944  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2674                           
  2675                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
  2676  010948  0102               	movlb	2	; () banked
  2677  01094A  EE20 F004          	lfsr	2,4
  2678  01094E  5100               	movf	Port_SetQuadType@pInput& (0+255),w,b
  2679  010950  26D9               	addwf	fsr2l,f,c
  2680  010952  5101               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2681  010954  22DA               	addwfc	fsr2h,f,c
  2682  010956  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  2683  01095A  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  2684  01095E  C202  F0CE         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
  2685  010962  0E00               	movlw	0
  2686  010964  0100               	movlb	0	; () banked
  2687  010966  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  2688  010968  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  2689                           
  2690                           ;Port.c: 446: }
  2691  01096C  D00E               	goto	l478
  2692  01096E                     l476:
  2693  01096E  0102               	movlb	2	; () banked
  2694  010970  5103               	movf	Port_SetQuadType@pType& (0+255),w,b
  2695                           
  2696                           ; Switch size 1, requested type "space"
  2697                           ; Number of cases is 4, Range of values is 0 to 3
  2698                           ; switch strategies available:
  2699                           ; Name         Instructions Cycles
  2700                           ; simple_byte           13     7 (average)
  2701                           ;	Chosen strategy is simple_byte
  2702  010972  0A00               	xorlw	0	; case 0
  2703  010974  B4D8               	btfsc	status,2,c
  2704  010976  D734               	goto	l477
  2705  010978  0A01               	xorlw	1	; case 1
  2706  01097A  B4D8               	btfsc	status,2,c
  2707  01097C  D756               	goto	l479
  2708  01097E  0A03               	xorlw	3	; case 2
  2709  010980  B4D8               	btfsc	status,2,c
  2710  010982  D789               	goto	l483
  2711  010984  0A01               	xorlw	1	; case 3
  2712  010986  B4D8               	btfsc	status,2,c
  2713  010988  D7BC               	goto	l486
  2714  01098A                     l478:
  2715                           
  2716                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
  2717                           
  2718                           ; BSR set to: 2
  2719  01098A  0E08               	movlw	8
  2720  01098C  0102               	movlb	2	; () banked
  2721  01098E  2500               	addwf	Port_SetQuadType@pInput& (0+255),w,b
  2722  010990  0100               	movlb	0	; () banked
  2723  010992  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  2724  010994  0E00               	movlw	0
  2725  010996  0102               	movlb	2	; () banked
  2726  010998  2101               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2727  01099A  0100               	movlb	0	; () banked
  2728  01099C  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  2729  01099E  0102               	movlb	2	; () banked
  2730  0109A0  5102               	movf	Port_SetQuadType@pQuad& (0+255),w,b
  2731  0109A2  0D04               	mullw	4
  2732  0109A4  CFF3 F0D2          	movff	prodl,Word_SetPair@pPair
  2733  0109A8  C203  F0D3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
  2734  0109AC  ECB5  F094         	call	_Word_SetPair	;wreg free
  2735                           
  2736                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
  2737  0109B0  0E08               	movlw	8
  2738  0109B2  0102               	movlb	2	; () banked
  2739  0109B4  2500               	addwf	Port_SetQuadType@pInput& (0+255),w,b
  2740  0109B6  0100               	movlb	0	; () banked
  2741  0109B8  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  2742  0109BA  0E00               	movlw	0
  2743  0109BC  0102               	movlb	2	; () banked
  2744  0109BE  2101               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2745  0109C0  0100               	movlb	0	; () banked
  2746  0109C2  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  2747  0109C4  0102               	movlb	2	; () banked
  2748  0109C6  5102               	movf	Port_SetQuadType@pQuad& (0+255),w,b
  2749  0109C8  0D04               	mullw	4
  2750  0109CA  28F3               	incf	prodl,w,c
  2751  0109CC  0100               	movlb	0	; () banked
  2752  0109CE  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  2753  0109D0  C203  F0D3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
  2754  0109D4  ECB5  F094         	call	_Word_SetPair	;wreg free
  2755                           
  2756                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
  2757  0109D8  0E08               	movlw	8
  2758  0109DA  0102               	movlb	2	; () banked
  2759  0109DC  2500               	addwf	Port_SetQuadType@pInput& (0+255),w,b
  2760  0109DE  0100               	movlb	0	; () banked
  2761  0109E0  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  2762  0109E2  0E00               	movlw	0
  2763  0109E4  0102               	movlb	2	; () banked
  2764  0109E6  2101               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2765  0109E8  0100               	movlb	0	; () banked
  2766  0109EA  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  2767  0109EC  0102               	movlb	2	; () banked
  2768  0109EE  5102               	movf	Port_SetQuadType@pQuad& (0+255),w,b
  2769  0109F0  0D04               	mullw	4
  2770  0109F2  50F3               	movf	prodl,w,c
  2771  0109F4  0F02               	addlw	2
  2772  0109F6  0100               	movlb	0	; () banked
  2773  0109F8  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  2774  0109FA  C203  F0D3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
  2775  0109FE  ECB5  F094         	call	_Word_SetPair	;wreg free
  2776                           
  2777                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
  2778  010A02  0E08               	movlw	8
  2779  010A04  0102               	movlb	2	; () banked
  2780  010A06  2500               	addwf	Port_SetQuadType@pInput& (0+255),w,b
  2781  010A08  0100               	movlb	0	; () banked
  2782  010A0A  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  2783  010A0C  0E00               	movlw	0
  2784  010A0E  0102               	movlb	2	; () banked
  2785  010A10  2101               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
  2786  010A12  0100               	movlb	0	; () banked
  2787  010A14  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  2788  010A16  0102               	movlb	2	; () banked
  2789  010A18  5102               	movf	Port_SetQuadType@pQuad& (0+255),w,b
  2790  010A1A  0D04               	mullw	4
  2791  010A1C  50F3               	movf	prodl,w,c
  2792  010A1E  0F03               	addlw	3
  2793  010A20  0100               	movlb	0	; () banked
  2794  010A22  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  2795  010A24  C203  F0D3         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
  2796  010A28  ECB5  F094         	call	_Word_SetPair	;wreg free
  2797  010A2C  0012               	return	
  2798  010A2E                     __end_of_Port_SetQuadType:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodl	equ	0xFF3
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           postdec1	equ	0xFE5
  2808                           fsr1h	equ	0xFE2
  2809                           fsr1l	equ	0xFE1
  2810                           postinc2	equ	0xFDE
  2811                           postdec2	equ	0xFDD
  2812                           fsr2h	equ	0xFDA
  2813                           fsr2l	equ	0xFD9
  2814                           status	equ	0xFD8
  2815                           
  2816 ;; *************** function _Port_Init *****************
  2817 ;; Defined at:
  2818 ;;		line 150 in file "Library/Port.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  pInput          2    6[BANK2 ] const PTR struct Port
  2821 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  2822 ;;		 -> PortD(10), PortC(10), PortF(10), 
  2823 ;;  pPort           1    8[BANK2 ] enum E6786
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  i               1   11[BANK2 ] unsigned char 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2835 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;Total ram usage:        6 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:   15
  2842 ;; This function calls:
  2843 ;;		_GetPortPORT
  2844 ;;		_GetPortProperties
  2845 ;;		_GetPortTRIS
  2846 ;;		_Port_Set
  2847 ;;		_Port_SetPinType
  2848 ;;		_Port_SetType
  2849 ;;		_Word_GetPair
  2850 ;; This function is called by:
  2851 ;;		_MXK_Init
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text3
  2856  010FB2                     __ptext3:
  2857                           	opt stack 0
  2858  010FB2                     _Port_Init:
  2859                           	opt stack 14
  2860                           
  2861                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  2862                           
  2863                           ;incstack = 0
  2864  010FB2  0102               	movlb	2	; () banked
  2865  010FB4  5108               	movf	Port_Init@pPort& (0+255),w,b
  2866  010FB6  ECB6  F08E         	call	_GetPortProperties
  2867  010FBA  C206  FFD9         	movff	Port_Init@pInput,fsr2l
  2868  010FBE  C207  FFDA         	movff	Port_Init@pInput+1,fsr2h
  2869  010FC2  0100               	movlb	0	; () banked
  2870  010FC4  C0C1  FFDE         	movff	?_GetPortProperties,postinc2
  2871  010FC8  0100               	movlb	0	; () banked
  2872  010FCA  C0C2  FFDD         	movff	?_GetPortProperties+1,postdec2
  2873                           
  2874                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  2875  010FCE  0102               	movlb	2	; () banked
  2876  010FD0  5108               	movf	Port_Init@pPort& (0+255),w,b
  2877  010FD2  EC09  F08F         	call	_GetPortPORT
  2878  010FD6  0102               	movlb	2	; () banked
  2879  010FD8  EE20 F006          	lfsr	2,6
  2880  010FDC  5106               	movf	Port_Init@pInput& (0+255),w,b
  2881  010FDE  26D9               	addwf	fsr2l,f,c
  2882  010FE0  5107               	movf	(Port_Init@pInput+1)& (0+255),w,b
  2883  010FE2  22DA               	addwfc	fsr2h,f,c
  2884  010FE4  0100               	movlb	0	; () banked
  2885  010FE6  C0C1  FFDE         	movff	?_GetPortPORT,postinc2
  2886  010FEA  0100               	movlb	0	; () banked
  2887  010FEC  C0C2  FFDD         	movff	?_GetPortPORT+1,postdec2
  2888                           
  2889                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  2890  010FF0  0102               	movlb	2	; () banked
  2891  010FF2  5108               	movf	Port_Init@pPort& (0+255),w,b
  2892  010FF4  EC09  F08F         	call	_GetPortPORT
  2893  010FF8  0102               	movlb	2	; () banked
  2894  010FFA  EE20 F004          	lfsr	2,4
  2895  010FFE  5106               	movf	Port_Init@pInput& (0+255),w,b
  2896  011000  26D9               	addwf	fsr2l,f,c
  2897  011002  5107               	movf	(Port_Init@pInput+1)& (0+255),w,b
  2898  011004  22DA               	addwfc	fsr2h,f,c
  2899  011006  0100               	movlb	0	; () banked
  2900  011008  C0C1  FFDE         	movff	?_GetPortPORT,postinc2
  2901  01100C  0100               	movlb	0	; () banked
  2902  01100E  C0C2  FFDD         	movff	?_GetPortPORT+1,postdec2
  2903                           
  2904                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  2905  011012  0102               	movlb	2	; () banked
  2906  011014  5108               	movf	Port_Init@pPort& (0+255),w,b
  2907  011016  EC63  F08E         	call	_GetPortTRIS
  2908  01101A  0102               	movlb	2	; () banked
  2909  01101C  EE20 F002          	lfsr	2,2
  2910  011020  5106               	movf	Port_Init@pInput& (0+255),w,b
  2911  011022  26D9               	addwf	fsr2l,f,c
  2912  011024  5107               	movf	(Port_Init@pInput+1)& (0+255),w,b
  2913  011026  22DA               	addwfc	fsr2h,f,c
  2914  011028  0100               	movlb	0	; () banked
  2915  01102A  C0C1  FFDE         	movff	?_GetPortTRIS,postinc2
  2916  01102E  0100               	movlb	0	; () banked
  2917  011030  C0C2  FFDD         	movff	?_GetPortTRIS+1,postdec2
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  2921  011034  0102               	movlb	2	; () banked
  2922  011036  EE20 F004          	lfsr	2,4
  2923  01103A  5106               	movf	Port_Init@pInput& (0+255),w,b
  2924  01103C  26D9               	addwf	fsr2l,f,c
  2925  01103E  5107               	movf	(Port_Init@pInput+1)& (0+255),w,b
  2926  011040  22DA               	addwfc	fsr2h,f,c
  2927  011042  CFDE F209          	movff	postinc2,??_Port_Init
  2928  011046  CFDD F20A          	movff	postdec2,??_Port_Init+1
  2929  01104A  C209  FFD9         	movff	??_Port_Init,fsr2l
  2930  01104E  C20A  FFDA         	movff	??_Port_Init+1,fsr2h
  2931  011052  0E00               	movlw	0
  2932  011054  6EDF               	movwf	indf2,c
  2933                           
  2934                           ; BSR set to: 2
  2935                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  2936  011056  0102               	movlb	2	; () banked
  2937  011058  EE20 F002          	lfsr	2,2
  2938  01105C  5106               	movf	Port_Init@pInput& (0+255),w,b
  2939  01105E  26D9               	addwf	fsr2l,f,c
  2940  011060  5107               	movf	(Port_Init@pInput+1)& (0+255),w,b
  2941  011062  22DA               	addwfc	fsr2h,f,c
  2942  011064  CFDE F209          	movff	postinc2,??_Port_Init
  2943  011068  CFDD F20A          	movff	postdec2,??_Port_Init+1
  2944  01106C  C209  FFD9         	movff	??_Port_Init,fsr2l
  2945  011070  C20A  FFDA         	movff	??_Port_Init+1,fsr2h
  2946  011074  0EFF               	movlw	255
  2947  011076  6EDF               	movwf	indf2,c
  2948                           
  2949                           ; BSR set to: 2
  2950                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  2951  011078  C206  F200         	movff	Port_Init@pInput,Port_SetType@pInput
  2952  01107C  C207  F201         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  2953  011080  0E00               	movlw	0
  2954  011082  0102               	movlb	2	; () banked
  2955  011084  6F02               	movwf	Port_SetType@pType& (0+255),b
  2956  011086  EC17  F085         	call	_Port_SetType	;wreg free
  2957                           
  2958                           ;Port.c: 166: UINT8 i;
  2959                           ;Port.c: 167: for (i=0; i<8; i++)
  2960  01108A  0E00               	movlw	0
  2961  01108C  0102               	movlb	2	; () banked
  2962  01108E  6F0B               	movwf	Port_Init@i& (0+255),b
  2963  011090                     l10100:
  2964                           
  2965                           ; BSR set to: 2
  2966  011090  0E07               	movlw	7
  2967  011092  0102               	movlb	2	; () banked
  2968  011094  650B               	cpfsgt	Port_Init@i& (0+255),b
  2969  011096  D031               	goto	l403
  2970  011098  D04B               	goto	u6660
  2971  01109A                     
  2972                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  2973                           
  2974                           ; BSR set to: 2
  2975  01109A  C206  F0E7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  2976  01109E  C207  F0E8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  2977  0110A2  C20B  F0E9         	movff	Port_Init@i,Port_SetPinType@pPin
  2978  0110A6  0E03               	movlw	3
  2979  0110A8  0100               	movlb	0	; () banked
  2980  0110AA  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  2981  0110AC  EC2C  F086         	call	_Port_SetPinType	;wreg free
  2982                           
  2983                           ;Port.c: 173: break;
  2984  0110B0  D03C               	goto	l405
  2985  0110B2                     
  2986                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  2987  0110B2  C206  F0E7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  2988  0110B6  C207  F0E8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  2989  0110BA  C20B  F0E9         	movff	Port_Init@i,Port_SetPinType@pPin
  2990  0110BE  0E02               	movlw	2
  2991  0110C0  0100               	movlb	0	; () banked
  2992  0110C2  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  2993  0110C4  EC2C  F086         	call	_Port_SetPinType	;wreg free
  2994                           
  2995                           ;Port.c: 176: break;
  2996  0110C8  D030               	goto	l405
  2997  0110CA                     
  2998                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  2999  0110CA  C206  F0E7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3000  0110CE  C207  F0E8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3001  0110D2  C20B  F0E9         	movff	Port_Init@i,Port_SetPinType@pPin
  3002  0110D6  0E01               	movlw	1
  3003  0110D8  0100               	movlb	0	; () banked
  3004  0110DA  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  3005  0110DC  EC2C  F086         	call	_Port_SetPinType	;wreg free
  3006                           
  3007                           ;Port.c: 179: break;
  3008  0110E0  D024               	goto	l405
  3009  0110E2                     
  3010                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  3011  0110E2  C206  F0E7         	movff	Port_Init@pInput,Port_SetPinType@pInput
  3012  0110E6  C207  F0E8         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  3013  0110EA  C20B  F0E9         	movff	Port_Init@i,Port_SetPinType@pPin
  3014  0110EE  0E00               	movlw	0
  3015  0110F0  0100               	movlb	0	; () banked
  3016  0110F2  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  3017  0110F4  EC2C  F086         	call	_Port_SetPinType	;wreg free
  3018                           
  3019                           ;Port.c: 183: }
  3020                           
  3021                           ;Port.c: 182: break;
  3022  0110F8  D018               	goto	l405
  3023  0110FA                     l403:
  3024  0110FA  C206  FFD9         	movff	Port_Init@pInput,fsr2l
  3025  0110FE  C207  FFDA         	movff	Port_Init@pInput+1,fsr2h
  3026  011102  CFDE F0CD          	movff	postinc2,Word_GetPair@pInput
  3027  011106  CFDD F0CE          	movff	postdec2,Word_GetPair@pInput+1
  3028  01110A  C20B  F0CF         	movff	Port_Init@i,Word_GetPair@pPair
  3029  01110E  EC7A  F095         	call	_Word_GetPair	;wreg free
  3030                           
  3031                           ; Switch size 1, requested type "space"
  3032                           ; Number of cases is 4, Range of values is 0 to 3
  3033                           ; switch strategies available:
  3034                           ; Name         Instructions Cycles
  3035                           ; simple_byte           13     7 (average)
  3036                           ;	Chosen strategy is simple_byte
  3037  011112  0A00               	xorlw	0	; case 0
  3038  011114  B4D8               	btfsc	status,2,c
  3039  011116  D7C1               	goto	l404
  3040  011118  0A01               	xorlw	1	; case 1
  3041  01111A  B4D8               	btfsc	status,2,c
  3042  01111C  D7D6               	goto	l407
  3043  01111E  0A03               	xorlw	3	; case 2
  3044  011120  B4D8               	btfsc	status,2,c
  3045  011122  D7C7               	goto	l406
  3046  011124  0A01               	xorlw	1	; case 3
  3047  011126  B4D8               	btfsc	status,2,c
  3048  011128  D7DC               	goto	l408
  3049  01112A                     l405:
  3050  01112A  0102               	movlb	2	; () banked
  3051  01112C  2B0B               	incf	Port_Init@i& (0+255),f,b
  3052  01112E  D7B0               	goto	l10100
  3053  011130                     u6660:
  3054                           
  3055                           ; BSR set to: 2
  3056                           ;Port.c: 184: }
  3057                           ;Port.c: 185: Port_Set(pInput, 0x00);
  3058                           
  3059                           ; BSR set to: 2
  3060  011130  C206  F0D0         	movff	Port_Init@pInput,Port_Set@pInput
  3061  011134  C207  F0D1         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  3062  011138  0E00               	movlw	0
  3063  01113A  0100               	movlb	0	; () banked
  3064  01113C  6FD2               	movwf	Port_Set@pValue& (0+255),b
  3065  01113E  EC0F  F082         	call	_Port_Set	;wreg free
  3066  011142  0012               	return		;funcret
  3067  011144                     __end_of_Port_Init:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           tblptrl	equ	0xFF6
  3072                           tablat	equ	0xFF5
  3073                           prodl	equ	0xFF3
  3074                           postinc0	equ	0xFEE
  3075                           wreg	equ	0xFE8
  3076                           postdec1	equ	0xFE5
  3077                           fsr1h	equ	0xFE2
  3078                           fsr1l	equ	0xFE1
  3079                           indf2	equ	0xFDF
  3080                           postinc2	equ	0xFDE
  3081                           postdec2	equ	0xFDD
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _Port_SetType *****************
  3087 ;; Defined at:
  3088 ;;		line 513 in file "Library/Port.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  pInput          2    0[BANK2 ] const PTR struct Port
  3091 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3092 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3093 ;;  pType           1    2[BANK2 ] enum E6795
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  Output          1    5[BANK2 ] enum E6475
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  1    wreg      enum E6475
  3098 ;; Registers used:
  3099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3105 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;Total ram usage:        6 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:   14
  3112 ;; This function calls:
  3113 ;;		_Port_CheckPortType
  3114 ;;		_Word_SetPair
  3115 ;; This function is called by:
  3116 ;;		_Port_Init
  3117 ;;		_MXK_Init
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text4
  3122  010A2E                     __ptext4:
  3123                           	opt stack 0
  3124  010A2E                     _Port_SetType:
  3125                           	opt stack 15
  3126                           
  3127                           ;Port.c: 515: ePinError Output = ePinErrorState;
  3128                           
  3129                           ;incstack = 0
  3130  010A2E  0E05               	movlw	5
  3131  010A30  0102               	movlb	2	; () banked
  3132  010A32  6F05               	movwf	Port_SetType@Output& (0+255),b
  3133                           
  3134                           ;Port.c: 517: switch (pType)
  3135  010A34  D07A               	goto	l509
  3136  010A36                     
  3137                           ; BSR set to: 2
  3138                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  3139                           
  3140                           ; BSR set to: 2
  3141  010A36  0102               	movlb	2	; () banked
  3142  010A38  EE20 F002          	lfsr	2,2
  3143  010A3C  5100               	movf	Port_SetType@pInput& (0+255),w,b
  3144  010A3E  26D9               	addwf	fsr2l,f,c
  3145  010A40  5101               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3146  010A42  22DA               	addwfc	fsr2h,f,c
  3147  010A44  CFDE F203          	movff	postinc2,??_Port_SetType
  3148  010A48  CFDD F204          	movff	postdec2,??_Port_SetType+1
  3149  010A4C  C203  FFD9         	movff	??_Port_SetType,fsr2l
  3150  010A50  C204  FFDA         	movff	??_Port_SetType+1,fsr2h
  3151  010A54  0EFF               	movlw	255
  3152  010A56  D067               	goto	L3
  3153  010A58                     
  3154                           ; BSR set to: 2
  3155                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  3156                           
  3157                           ; BSR set to: 2
  3158  010A58  C200  F0F7         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3159  010A5C  C201  F0F8         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3160  010A60  0E01               	movlw	1
  3161  010A62  0100               	movlb	0	; () banked
  3162  010A64  6FF9               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3163  010A66  EC6D  F094         	call	_Port_CheckPortType	;wreg free
  3164  010A6A  0102               	movlb	2	; () banked
  3165  010A6C  6F05               	movwf	Port_SetType@Output& (0+255),b
  3166  010A6E  0102               	movlb	2	; () banked
  3167  010A70  5105               	movf	Port_SetType@Output& (0+255),w,b
  3168  010A72  A4D8               	btfss	status,2,c
  3169  010A74  0012               	return	
  3170                           
  3171                           ; BSR set to: 2
  3172                           ;Port.c: 527: {
  3173                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  3174  010A76  0102               	movlb	2	; () banked
  3175  010A78  EE20 F002          	lfsr	2,2
  3176  010A7C  5100               	movf	Port_SetType@pInput& (0+255),w,b
  3177  010A7E  26D9               	addwf	fsr2l,f,c
  3178  010A80  5101               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3179  010A82  22DA               	addwfc	fsr2h,f,c
  3180  010A84  CFDE F203          	movff	postinc2,??_Port_SetType
  3181  010A88  CFDD F204          	movff	postdec2,??_Port_SetType+1
  3182  010A8C  C203  FFD9         	movff	??_Port_SetType,fsr2l
  3183  010A90  C204  FFDA         	movff	??_Port_SetType+1,fsr2h
  3184  010A94  0E00               	movlw	0
  3185  010A96  6EDF               	movwf	indf2,c
  3186                           
  3187                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  3188  010A98  0102               	movlb	2	; () banked
  3189  010A9A  EE20 F004          	lfsr	2,4
  3190  010A9E  D036               	goto	L8
  3191  010AA0                     
  3192                           ; BSR set to: 2
  3193                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  3194                           
  3195                           ; BSR set to: 2
  3196  010AA0  C200  F0F7         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3197  010AA4  C201  F0F8         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3198  010AA8  0E02               	movlw	2
  3199  010AAA  0100               	movlb	0	; () banked
  3200  010AAC  6FF9               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3201  010AAE  EC6D  F094         	call	_Port_CheckPortType	;wreg free
  3202  010AB2  0102               	movlb	2	; () banked
  3203  010AB4  6F05               	movwf	Port_SetType@Output& (0+255),b
  3204  010AB6  0102               	movlb	2	; () banked
  3205  010AB8  5105               	movf	Port_SetType@Output& (0+255),w,b
  3206  010ABA  A4D8               	btfss	status,2,c
  3207  010ABC  0012               	return	
  3208                           
  3209                           ; BSR set to: 2
  3210                           ;Port.c: 538: {
  3211                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  3212  010ABE  0102               	movlb	2	; () banked
  3213  010AC0  EE20 F002          	lfsr	2,2
  3214  010AC4  5100               	movf	Port_SetType@pInput& (0+255),w,b
  3215  010AC6  26D9               	addwf	fsr2l,f,c
  3216  010AC8  5101               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3217  010ACA  22DA               	addwfc	fsr2h,f,c
  3218  010ACC  CFDE F203          	movff	postinc2,??_Port_SetType
  3219  010AD0  CFDD F204          	movff	postdec2,??_Port_SetType+1
  3220  010AD4  C203  FFD9         	movff	??_Port_SetType,fsr2l
  3221  010AD8  C204  FFDA         	movff	??_Port_SetType+1,fsr2h
  3222  010ADC  0EFF               	movlw	255
  3223  010ADE  6EDF               	movwf	indf2,c
  3224                           
  3225                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  3226  010AE0  0102               	movlb	2	; () banked
  3227  010AE2  EE20 F004          	lfsr	2,4
  3228  010AE6  D7AA               	goto	L4
  3229  010AE8                     
  3230                           ; BSR set to: 2
  3231                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  3232                           
  3233                           ; BSR set to: 2
  3234  010AE8  C200  F0F7         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  3235  010AEC  C201  F0F8         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  3236  010AF0  0E00               	movlw	0
  3237  010AF2  0100               	movlb	0	; () banked
  3238  010AF4  6FF9               	movwf	Port_CheckPortType@pDrive& (0+255),b
  3239  010AF6  EC6D  F094         	call	_Port_CheckPortType	;wreg free
  3240  010AFA  0102               	movlb	2	; () banked
  3241  010AFC  6F05               	movwf	Port_SetType@Output& (0+255),b
  3242  010AFE  0102               	movlb	2	; () banked
  3243  010B00  5105               	movf	Port_SetType@Output& (0+255),w,b
  3244  010B02  A4D8               	btfss	status,2,c
  3245  010B04  0012               	return	
  3246                           
  3247                           ; BSR set to: 2
  3248                           ;Port.c: 549: {
  3249                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  3250  010B06  0102               	movlb	2	; () banked
  3251  010B08  EE20 F002          	lfsr	2,2
  3252  010B0C                     L8:
  3253  010B0C  5100               	movf	Port_SetType@pInput& (0+255),w,b
  3254  010B0E  26D9               	addwf	fsr2l,f,c
  3255  010B10  5101               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  3256  010B12  22DA               	addwfc	fsr2h,f,c
  3257  010B14  CFDE F203          	movff	postinc2,??_Port_SetType
  3258  010B18  CFDD F204          	movff	postdec2,??_Port_SetType+1
  3259  010B1C  C203  FFD9         	movff	??_Port_SetType,fsr2l
  3260  010B20  C204  FFDA         	movff	??_Port_SetType+1,fsr2h
  3261  010B24  0E00               	movlw	0
  3262  010B26                     L3:
  3263  010B26  6EDF               	movwf	indf2,c
  3264                           
  3265                           ;Port.c: 552: }
  3266  010B28  D00E               	goto	l511
  3267  010B2A                     l509:
  3268                           
  3269                           ; BSR set to: 2
  3270                           
  3271                           ; BSR set to: 2
  3272  010B2A  0102               	movlb	2	; () banked
  3273  010B2C  5102               	movf	Port_SetType@pType& (0+255),w,b
  3274                           
  3275                           ; Switch size 1, requested type "space"
  3276                           ; Number of cases is 4, Range of values is 0 to 3
  3277                           ; switch strategies available:
  3278                           ; Name         Instructions Cycles
  3279                           ; simple_byte           13     7 (average)
  3280                           ;	Chosen strategy is simple_byte
  3281  010B2E  0A00               	xorlw	0	; case 0
  3282  010B30  B4D8               	btfsc	status,2,c
  3283  010B32  D781               	goto	l510
  3284  010B34  0A01               	xorlw	1	; case 1
  3285  010B36  B4D8               	btfsc	status,2,c
  3286  010B38  D78F               	goto	l512
  3287  010B3A  0A03               	xorlw	3	; case 2
  3288  010B3C  B4D8               	btfsc	status,2,c
  3289  010B3E  D7B0               	goto	l516
  3290  010B40  0A01               	xorlw	1	; case 3
  3291  010B42  B4D8               	btfsc	status,2,c
  3292  010B44  D7D1               	goto	l519
  3293  010B46                     l511:
  3294                           
  3295                           ; BSR set to: 2
  3296                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  3297                           
  3298                           ; BSR set to: 2
  3299  010B46  0E08               	movlw	8
  3300  010B48  0102               	movlb	2	; () banked
  3301  010B4A  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3302  010B4C  0100               	movlb	0	; () banked
  3303  010B4E  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3304  010B50  0E00               	movlw	0
  3305  010B52  0102               	movlb	2	; () banked
  3306  010B54  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3307  010B56  0100               	movlb	0	; () banked
  3308  010B58  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3309  010B5A  0E00               	movlw	0
  3310  010B5C  0100               	movlb	0	; () banked
  3311  010B5E  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3312  010B60  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3313  010B64  ECB5  F094         	call	_Word_SetPair	;wreg free
  3314                           
  3315                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  3316  010B68  0E08               	movlw	8
  3317  010B6A  0102               	movlb	2	; () banked
  3318  010B6C  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3319  010B6E  0100               	movlb	0	; () banked
  3320  010B70  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3321  010B72  0E00               	movlw	0
  3322  010B74  0102               	movlb	2	; () banked
  3323  010B76  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3324  010B78  0100               	movlb	0	; () banked
  3325  010B7A  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3326  010B7C  0E01               	movlw	1
  3327  010B7E  0100               	movlb	0	; () banked
  3328  010B80  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3329  010B82  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3330  010B86  ECB5  F094         	call	_Word_SetPair	;wreg free
  3331                           
  3332                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  3333  010B8A  0E08               	movlw	8
  3334  010B8C  0102               	movlb	2	; () banked
  3335  010B8E  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3336  010B90  0100               	movlb	0	; () banked
  3337  010B92  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3338  010B94  0E00               	movlw	0
  3339  010B96  0102               	movlb	2	; () banked
  3340  010B98  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3341  010B9A  0100               	movlb	0	; () banked
  3342  010B9C  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3343  010B9E  0E02               	movlw	2
  3344  010BA0  0100               	movlb	0	; () banked
  3345  010BA2  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3346  010BA4  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3347  010BA8  ECB5  F094         	call	_Word_SetPair	;wreg free
  3348                           
  3349                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  3350  010BAC  0E08               	movlw	8
  3351  010BAE  0102               	movlb	2	; () banked
  3352  010BB0  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3353  010BB2  0100               	movlb	0	; () banked
  3354  010BB4  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3355  010BB6  0E00               	movlw	0
  3356  010BB8  0102               	movlb	2	; () banked
  3357  010BBA  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3358  010BBC  0100               	movlb	0	; () banked
  3359  010BBE  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3360  010BC0  0E03               	movlw	3
  3361  010BC2  0100               	movlb	0	; () banked
  3362  010BC4  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3363  010BC6  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3364  010BCA  ECB5  F094         	call	_Word_SetPair	;wreg free
  3365                           
  3366                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  3367  010BCE  0E08               	movlw	8
  3368  010BD0  0102               	movlb	2	; () banked
  3369  010BD2  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3370  010BD4  0100               	movlb	0	; () banked
  3371  010BD6  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3372  010BD8  0E00               	movlw	0
  3373  010BDA  0102               	movlb	2	; () banked
  3374  010BDC  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3375  010BDE  0100               	movlb	0	; () banked
  3376  010BE0  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3377  010BE2  0E04               	movlw	4
  3378  010BE4  0100               	movlb	0	; () banked
  3379  010BE6  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3380  010BE8  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3381  010BEC  ECB5  F094         	call	_Word_SetPair	;wreg free
  3382                           
  3383                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  3384  010BF0  0E08               	movlw	8
  3385  010BF2  0102               	movlb	2	; () banked
  3386  010BF4  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3387  010BF6  0100               	movlb	0	; () banked
  3388  010BF8  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3389  010BFA  0E00               	movlw	0
  3390  010BFC  0102               	movlb	2	; () banked
  3391  010BFE  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3392  010C00  0100               	movlb	0	; () banked
  3393  010C02  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3394  010C04  0E05               	movlw	5
  3395  010C06  0100               	movlb	0	; () banked
  3396  010C08  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3397  010C0A  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3398  010C0E  ECB5  F094         	call	_Word_SetPair	;wreg free
  3399                           
  3400                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  3401  010C12  0E08               	movlw	8
  3402  010C14  0102               	movlb	2	; () banked
  3403  010C16  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3404  010C18  0100               	movlb	0	; () banked
  3405  010C1A  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3406  010C1C  0E00               	movlw	0
  3407  010C1E  0102               	movlb	2	; () banked
  3408  010C20  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3409  010C22  0100               	movlb	0	; () banked
  3410  010C24  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3411  010C26  0E06               	movlw	6
  3412  010C28  0100               	movlb	0	; () banked
  3413  010C2A  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3414  010C2C  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3415  010C30  ECB5  F094         	call	_Word_SetPair	;wreg free
  3416                           
  3417                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  3418  010C34  0E08               	movlw	8
  3419  010C36  0102               	movlb	2	; () banked
  3420  010C38  2500               	addwf	Port_SetType@pInput& (0+255),w,b
  3421  010C3A  0100               	movlb	0	; () banked
  3422  010C3C  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  3423  010C3E  0E00               	movlw	0
  3424  010C40  0102               	movlb	2	; () banked
  3425  010C42  2101               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  3426  010C44  0100               	movlb	0	; () banked
  3427  010C46  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  3428  010C48  0E07               	movlw	7
  3429  010C4A  0100               	movlb	0	; () banked
  3430  010C4C  6FD2               	movwf	Word_SetPair@pPair& (0+255),b
  3431  010C4E  C202  F0D3         	movff	Port_SetType@pType,Word_SetPair@pValue
  3432  010C52  ECB5  F094         	call	_Word_SetPair	;wreg free
  3433  010C56  0012               	return	
  3434  010C58                     __end_of_Port_SetType:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodl	equ	0xFF3
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _Port_CheckPortType *****************
  3454 ;; Defined at:
  3455 ;;		line 138 in file "Library/Port.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  3458 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3459 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3460 ;;  pDrive          1   56[BANK0 ] enum E6469
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  Output          1    0[BANK1 ] enum E6475
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  1    wreg      enum E6475
  3465 ;; Registers used:
  3466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3472 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;Total ram usage:        4 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:   13
  3479 ;; This function calls:
  3480 ;;		_Port_CheckQuadType
  3481 ;; This function is called by:
  3482 ;;		_Port_SetType
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text5
  3487  0128DA                     __ptext5:
  3488                           	opt stack 0
  3489  0128DA                     _Port_CheckPortType:
  3490                           	opt stack 15
  3491                           
  3492                           ;Port.c: 140: ePinError Output = ePinErrorState;
  3493                           
  3494                           ;incstack = 0
  3495  0128DA  0E05               	movlw	5
  3496  0128DC  0101               	movlb	1	; () banked
  3497  0128DE  6FFF               	movwf	Port_CheckPortType@Output& (0+255),b
  3498                           
  3499                           ; BSR set to: 1
  3500                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  3501  0128E0  C0F7  F0F0         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  3502  0128E4  C0F8  F0F1         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  3503  0128E8  0E00               	movlw	0
  3504  0128EA  0100               	movlb	0	; () banked
  3505  0128EC  6FF2               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  3506  0128EE  C0F9  F0F3         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  3507  0128F2  EC75  F093         	call	_Port_CheckQuadType	;wreg free
  3508  0128F6  0101               	movlb	1	; () banked
  3509  0128F8  6FFF               	movwf	Port_CheckPortType@Output& (0+255),b
  3510  0128FA  0101               	movlb	1	; () banked
  3511  0128FC  51FF               	movf	Port_CheckPortType@Output& (0+255),w,b
  3512  0128FE  A4D8               	btfss	status,2,c
  3513  012900  D00D               	goto	l397
  3514                           
  3515                           ; BSR set to: 1
  3516                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  3517  012902  C0F7  F0F0         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  3518  012906  C0F8  F0F1         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  3519  01290A  0E01               	movlw	1
  3520  01290C  0100               	movlb	0	; () banked
  3521  01290E  6FF2               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  3522  012910  C0F9  F0F3         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  3523  012914  EC75  F093         	call	_Port_CheckQuadType	;wreg free
  3524  012918  0101               	movlb	1	; () banked
  3525  01291A  6FFF               	movwf	Port_CheckPortType@Output& (0+255),b
  3526  01291C                     l397:
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;Port.c: 146: return Output;
  3530                           
  3531                           ; BSR set to: 1
  3532  01291C  0101               	movlb	1	; () banked
  3533  01291E  51FF               	movf	Port_CheckPortType@Output& (0+255),w,b
  3534  012920  0012               	return	
  3535  012922                     __end_of_Port_CheckPortType:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodl	equ	0xFF3
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _Port_CheckQuadType *****************
  3555 ;; Defined at:
  3556 ;;		line 126 in file "Library/Port.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  pInput          2   47[BANK0 ] const PTR struct Port
  3559 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3560 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3561 ;;  pQuad           1   49[BANK0 ] enum E6776
  3562 ;;  pDrive          1   50[BANK0 ] enum E6469
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  Output          1   53[BANK0 ] enum E6475
  3565 ;;  Pair2           1   52[BANK0 ] enum E6760
  3566 ;;  Pair1           1   51[BANK0 ] enum E6760
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      enum E6475
  3569 ;; Registers used:
  3570 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3576 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;Total ram usage:        7 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:   12
  3583 ;; This function calls:
  3584 ;;		_Port_CheckPairType
  3585 ;; This function is called by:
  3586 ;;		_Port_CheckPortType
  3587 ;;		_Port_SetQuadType
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text6
  3592  0126EA                     __ptext6:
  3593                           	opt stack 0
  3594  0126EA                     _Port_CheckQuadType:
  3595                           	opt stack 15
  3596                           
  3597                           ;Port.c: 128: ePinError Output = ePinErrorState;
  3598                           
  3599                           ; BSR set to: 1
  3600                           ;incstack = 0
  3601  0126EA  0E05               	movlw	5
  3602  0126EC  0100               	movlb	0	; () banked
  3603  0126EE  6FF6               	movwf	Port_CheckQuadType@Output& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
  3607  0126F0  0100               	movlb	0	; () banked
  3608  0126F2  51F2               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
  3609  0126F4  0D02               	mullw	2
  3610  0126F6  CFF3 F0F4          	movff	prodl,Port_CheckQuadType@Pair1
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
  3614  0126FA  0100               	movlb	0	; () banked
  3615  0126FC  51F2               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
  3616  0126FE  0D02               	mullw	2
  3617  012700  28F3               	incf	prodl,w,c
  3618  012702  0100               	movlb	0	; () banked
  3619  012704  6FF5               	movwf	Port_CheckQuadType@Pair2& (0+255),b
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
  3623  012706  C0F0  F0E7         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
  3624  01270A  C0F1  F0E8         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
  3625  01270E  C0F4  F0E9         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
  3626  012712  C0F3  F0EA         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
  3627  012716  EC47  F092         	call	_Port_CheckPairType	;wreg free
  3628  01271A  0100               	movlb	0	; () banked
  3629  01271C  6FF6               	movwf	Port_CheckQuadType@Output& (0+255),b
  3630  01271E  0100               	movlb	0	; () banked
  3631  012720  51F6               	movf	Port_CheckQuadType@Output& (0+255),w,b
  3632  012722  A4D8               	btfss	status,2,c
  3633  012724  D00C               	goto	l393
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
  3637  012726  C0F0  F0E7         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
  3638  01272A  C0F1  F0E8         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
  3639  01272E  C0F5  F0E9         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
  3640  012732  C0F3  F0EA         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
  3641  012736  EC47  F092         	call	_Port_CheckPairType	;wreg free
  3642  01273A  0100               	movlb	0	; () banked
  3643  01273C  6FF6               	movwf	Port_CheckQuadType@Output& (0+255),b
  3644  01273E                     l393:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;Port.c: 136: return Output;
  3648                           
  3649                           ; BSR set to: 0
  3650  01273E  0100               	movlb	0	; () banked
  3651  012740  51F6               	movf	Port_CheckQuadType@Output& (0+255),w,b
  3652  012742  0012               	return	
  3653  012744                     __end_of_Port_CheckQuadType:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodl	equ	0xFF3
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           postdec1	equ	0xFE5
  3663                           fsr1h	equ	0xFE2
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _Port_CheckPairType *****************
  3673 ;; Defined at:
  3674 ;;		line 112 in file "Library/Port.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  pInput          2   38[BANK0 ] const PTR struct Port
  3677 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3678 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3679 ;;  pPair           1   40[BANK0 ] enum E6760
  3680 ;;  pDrive          1   41[BANK0 ] enum E6469
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
  3683 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3684 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
  3685 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
  3686 ;;		 -> PortC(10), PortF(10), NULL(0), 
  3687 ;;  Output          1   44[BANK0 ] enum E6475
  3688 ;;  Pin2            1   43[BANK0 ] enum E6750
  3689 ;;  Pin1            1   42[BANK0 ] enum E6750
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      enum E6475
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;Total ram usage:        9 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:   11
  3706 ;; This function calls:
  3707 ;;		_PortProperty_Valid
  3708 ;; This function is called by:
  3709 ;;		_Port_CheckQuadType
  3710 ;;		_Port_SetPairType
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text7
  3715  01248E                     __ptext7:
  3716                           	opt stack 0
  3717  01248E                     _Port_CheckPairType:
  3718                           	opt stack 15
  3719                           
  3720                           ;Port.c: 114: ePinError Output = ePinErrorState;
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;incstack = 0
  3724  01248E  0E05               	movlw	5
  3725  012490  0100               	movlb	0	; () banked
  3726  012492  6FED               	movwf	Port_CheckPairType@Output& (0+255),b
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
  3730  012494  C0E7  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
  3731  012498  C0E8  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
  3732  01249C  CFDE F0EE          	movff	postinc2,Port_CheckPairType@Props
  3733  0124A0  CFDD F0EF          	movff	postdec2,Port_CheckPairType@Props+1
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
  3737  0124A4  0100               	movlb	0	; () banked
  3738  0124A6  51E9               	movf	Port_CheckPairType@pPair& (0+255),w,b
  3739  0124A8  0D02               	mullw	2
  3740  0124AA  CFF3 F0EB          	movff	prodl,Port_CheckPairType@Pin1
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
  3744  0124AE  0100               	movlb	0	; () banked
  3745  0124B0  51E9               	movf	Port_CheckPairType@pPair& (0+255),w,b
  3746  0124B2  0D02               	mullw	2
  3747  0124B4  28F3               	incf	prodl,w,c
  3748  0124B6  0100               	movlb	0	; () banked
  3749  0124B8  6FEC               	movwf	Port_CheckPairType@Pin2& (0+255),b
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
  3753  0124BA  C0EE  F0D0         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
  3754  0124BE  C0EF  F0D1         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
  3755  0124C2  C0EA  F0D2         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
  3756  0124C6  C0EB  F0D3         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
  3757  0124CA  EC26  F091         	call	_PortProperty_Valid	;wreg free
  3758  0124CE  0100               	movlb	0	; () banked
  3759  0124D0  6FED               	movwf	Port_CheckPairType@Output& (0+255),b
  3760  0124D2  0100               	movlb	0	; () banked
  3761  0124D4  51ED               	movf	Port_CheckPairType@Output& (0+255),w,b
  3762  0124D6  A4D8               	btfss	status,2,c
  3763  0124D8  D00C               	goto	l389
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
  3767  0124DA  C0EE  F0D0         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
  3768  0124DE  C0EF  F0D1         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
  3769  0124E2  C0EA  F0D2         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
  3770  0124E6  C0EC  F0D3         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
  3771  0124EA  EC26  F091         	call	_PortProperty_Valid	;wreg free
  3772  0124EE  0100               	movlb	0	; () banked
  3773  0124F0  6FED               	movwf	Port_CheckPairType@Output& (0+255),b
  3774  0124F2                     l389:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;Port.c: 124: return Output;
  3778                           
  3779                           ; BSR set to: 0
  3780  0124F2  0100               	movlb	0	; () banked
  3781  0124F4  51ED               	movf	Port_CheckPairType@Output& (0+255),w,b
  3782  0124F6  0012               	return	
  3783  0124F8                     __end_of_Port_CheckPairType:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodl	equ	0xFF3
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1h	equ	0xFE2
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _Port_Set *****************
  3803 ;; Defined at:
  3804 ;;		line 570 in file "Library/Port.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  3807 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3808 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3809 ;;  pValue          1   17[BANK0 ] unsigned char 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  3812 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  3813 ;;  Type            1   38[BANK0 ] enum E6795
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3823 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;Total ram usage:       24 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:   10
  3830 ;; This function calls:
  3831 ;;		_Byte_SetByte
  3832 ;;		_Word_GetPair
  3833 ;; This function is called by:
  3834 ;;		_Port_Init
  3835 ;;		_Port_Toggle
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text8
  3840  01041E                     __ptext8:
  3841                           	opt stack 0
  3842  01041E                     _Port_Set:
  3843                           	opt stack 18
  3844                           
  3845                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;incstack = 0
  3849  01041E  0E08               	movlw	8
  3850  010420  0100               	movlb	0	; () banked
  3851  010422  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  3852  010424  0100               	movlb	0	; () banked
  3853  010426  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  3854  010428  0E00               	movlw	0
  3855  01042A  0100               	movlb	0	; () banked
  3856  01042C  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  3857  01042E  0100               	movlb	0	; () banked
  3858  010430  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  3859  010432  0E00               	movlw	0
  3860  010434  0100               	movlb	0	; () banked
  3861  010436  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  3862  010438  EC7A  F095         	call	_Word_GetPair	;wreg free
  3863  01043C  0100               	movlb	0	; () banked
  3864  01043E  6FE7               	movwf	Port_Set@Type& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  3868  010440  0100               	movlb	0	; () banked
  3869  010442  51E7               	movf	Port_Set@Type& (0+255),w,b
  3870  010444  0100               	movlb	0	; () banked
  3871  010446  6FD3               	movwf	??_Port_Set& (0+255),b
  3872  010448  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  3873  01044A  0E0E               	movlw	14
  3874  01044C                     u6325:
  3875  01044C  90D8               	bcf	status,0,c
  3876  01044E  0100               	movlb	0	; () banked
  3877  010450  37D3               	rlcf	??_Port_Set& (0+255),f,b
  3878  010452  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  3879  010454  2EE8               	decfsz	wreg,f,c
  3880  010456  D7FA               	goto	u6325
  3881  010458  0100               	movlb	0	; () banked
  3882  01045A  51E7               	movf	Port_Set@Type& (0+255),w,b
  3883  01045C  0100               	movlb	0	; () banked
  3884  01045E  6FD5               	movwf	(??_Port_Set+2)& (0+255),b
  3885  010460  6BD6               	clrf	(??_Port_Set+3)& (0+255),b
  3886  010462  0E0C               	movlw	12
  3887  010464                     u6335:
  3888  010464  90D8               	bcf	status,0,c
  3889  010466  0100               	movlb	0	; () banked
  3890  010468  37D5               	rlcf	(??_Port_Set+2)& (0+255),f,b
  3891  01046A  37D6               	rlcf	(??_Port_Set+3)& (0+255),f,b
  3892  01046C  2EE8               	decfsz	wreg,f,c
  3893  01046E  D7FA               	goto	u6335
  3894  010470  0100               	movlb	0	; () banked
  3895  010472  51E7               	movf	Port_Set@Type& (0+255),w,b
  3896  010474  0100               	movlb	0	; () banked
  3897  010476  6FD7               	movwf	(??_Port_Set+4)& (0+255),b
  3898  010478  6BD8               	clrf	(??_Port_Set+5)& (0+255),b
  3899  01047A  0E0A               	movlw	10
  3900  01047C                     u6345:
  3901  01047C  90D8               	bcf	status,0,c
  3902  01047E  0100               	movlb	0	; () banked
  3903  010480  37D7               	rlcf	(??_Port_Set+4)& (0+255),f,b
  3904  010482  37D8               	rlcf	(??_Port_Set+5)& (0+255),f,b
  3905  010484  2EE8               	decfsz	wreg,f,c
  3906  010486  D7FA               	goto	u6345
  3907  010488  0100               	movlb	0	; () banked
  3908  01048A  51E7               	movf	Port_Set@Type& (0+255),w,b
  3909  01048C  0100               	movlb	0	; () banked
  3910  01048E  6FDA               	movwf	(??_Port_Set+7)& (0+255),b
  3911  010490  6BD9               	clrf	(??_Port_Set+6)& (0+255),b
  3912  010492  0100               	movlb	0	; () banked
  3913  010494  51E7               	movf	Port_Set@Type& (0+255),w,b
  3914  010496  0100               	movlb	0	; () banked
  3915  010498  6FDB               	movwf	(??_Port_Set+8)& (0+255),b
  3916  01049A  6BDC               	clrf	(??_Port_Set+9)& (0+255),b
  3917  01049C  0E06               	movlw	6
  3918  01049E                     u6355:
  3919  01049E  90D8               	bcf	status,0,c
  3920  0104A0  0100               	movlb	0	; () banked
  3921  0104A2  37DB               	rlcf	(??_Port_Set+8)& (0+255),f,b
  3922  0104A4  37DC               	rlcf	(??_Port_Set+9)& (0+255),f,b
  3923  0104A6  2EE8               	decfsz	wreg,f,c
  3924  0104A8  D7FA               	goto	u6355
  3925  0104AA  0100               	movlb	0	; () banked
  3926  0104AC  51E7               	movf	Port_Set@Type& (0+255),w,b
  3927  0104AE  0100               	movlb	0	; () banked
  3928  0104B0  6FDD               	movwf	(??_Port_Set+10)& (0+255),b
  3929  0104B2  6BDE               	clrf	(??_Port_Set+11)& (0+255),b
  3930  0104B4  0100               	movlb	0	; () banked
  3931  0104B6  3BDD               	swapf	(??_Port_Set+10)& (0+255),f,b
  3932  0104B8  3BDE               	swapf	(??_Port_Set+11)& (0+255),f,b
  3933  0104BA  0EF0               	movlw	240
  3934  0104BC  17DE               	andwf	(??_Port_Set+11)& (0+255),f,b
  3935  0104BE  51DD               	movf	(??_Port_Set+10)& (0+255),w,b
  3936  0104C0  0B0F               	andlw	15
  3937  0104C2  13DE               	iorwf	(??_Port_Set+11)& (0+255),f,b
  3938  0104C4  0EF0               	movlw	240
  3939  0104C6  17DD               	andwf	(??_Port_Set+10)& (0+255),f,b
  3940  0104C8  0100               	movlb	0	; () banked
  3941  0104CA  51E7               	movf	Port_Set@Type& (0+255),w,b
  3942  0104CC  0100               	movlb	0	; () banked
  3943  0104CE  6FDF               	movwf	(??_Port_Set+12)& (0+255),b
  3944  0104D0  6BE0               	clrf	(??_Port_Set+13)& (0+255),b
  3945  0104D2  0100               	movlb	0	; () banked
  3946  0104D4  90D8               	bcf	status,0,c
  3947  0104D6  37DF               	rlcf	(??_Port_Set+12)& (0+255),f,b
  3948  0104D8  37E0               	rlcf	(??_Port_Set+13)& (0+255),f,b
  3949  0104DA  0100               	movlb	0	; () banked
  3950  0104DC  90D8               	bcf	status,0,c
  3951  0104DE  37DF               	rlcf	(??_Port_Set+12)& (0+255),f,b
  3952  0104E0  37E0               	rlcf	(??_Port_Set+13)& (0+255),f,b
  3953  0104E2  0100               	movlb	0	; () banked
  3954  0104E4  51E7               	movf	Port_Set@Type& (0+255),w,b
  3955  0104E6  0100               	movlb	0	; () banked
  3956  0104E8  6FE1               	movwf	(??_Port_Set+14)& (0+255),b
  3957  0104EA  6BE2               	clrf	(??_Port_Set+15)& (0+255),b
  3958  0104EC  0100               	movlb	0	; () banked
  3959  0104EE  51DF               	movf	(??_Port_Set+12)& (0+255),w,b
  3960  0104F0  0100               	movlb	0	; () banked
  3961  0104F2  13E1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  3962  0104F4  0100               	movlb	0	; () banked
  3963  0104F6  51E0               	movf	(??_Port_Set+13)& (0+255),w,b
  3964  0104F8  0100               	movlb	0	; () banked
  3965  0104FA  13E2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  3966  0104FC  0100               	movlb	0	; () banked
  3967  0104FE  51DD               	movf	(??_Port_Set+10)& (0+255),w,b
  3968  010500  0100               	movlb	0	; () banked
  3969  010502  13E1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  3970  010504  0100               	movlb	0	; () banked
  3971  010506  51DE               	movf	(??_Port_Set+11)& (0+255),w,b
  3972  010508  0100               	movlb	0	; () banked
  3973  01050A  13E2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  3974  01050C  0100               	movlb	0	; () banked
  3975  01050E  51DB               	movf	(??_Port_Set+8)& (0+255),w,b
  3976  010510  0100               	movlb	0	; () banked
  3977  010512  13E1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  3978  010514  0100               	movlb	0	; () banked
  3979  010516  51DC               	movf	(??_Port_Set+9)& (0+255),w,b
  3980  010518  0100               	movlb	0	; () banked
  3981  01051A  13E2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  3982  01051C  0100               	movlb	0	; () banked
  3983  01051E  51D9               	movf	(??_Port_Set+6)& (0+255),w,b
  3984  010520  0100               	movlb	0	; () banked
  3985  010522  13E1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  3986  010524  0100               	movlb	0	; () banked
  3987  010526  51DA               	movf	(??_Port_Set+7)& (0+255),w,b
  3988  010528  0100               	movlb	0	; () banked
  3989  01052A  13E2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  3990  01052C  0100               	movlb	0	; () banked
  3991  01052E  51D7               	movf	(??_Port_Set+4)& (0+255),w,b
  3992  010530  0100               	movlb	0	; () banked
  3993  010532  13E1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  3994  010534  0100               	movlb	0	; () banked
  3995  010536  51D8               	movf	(??_Port_Set+5)& (0+255),w,b
  3996  010538  0100               	movlb	0	; () banked
  3997  01053A  13E2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  3998  01053C  0100               	movlb	0	; () banked
  3999  01053E  51D5               	movf	(??_Port_Set+2)& (0+255),w,b
  4000  010540  0100               	movlb	0	; () banked
  4001  010542  13E1               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4002  010544  0100               	movlb	0	; () banked
  4003  010546  51D6               	movf	(??_Port_Set+3)& (0+255),w,b
  4004  010548  0100               	movlb	0	; () banked
  4005  01054A  13E2               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4006  01054C  0100               	movlb	0	; () banked
  4007  01054E  51D3               	movf	??_Port_Set& (0+255),w,b
  4008  010550  0100               	movlb	0	; () banked
  4009  010552  11E1               	iorwf	(??_Port_Set+14)& (0+255),w,b
  4010  010554  0100               	movlb	0	; () banked
  4011  010556  6FE3               	movwf	Port_Set@TypeRequired& (0+255),b
  4012  010558  0100               	movlb	0	; () banked
  4013  01055A  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4014  01055C  0100               	movlb	0	; () banked
  4015  01055E  11E2               	iorwf	(??_Port_Set+15)& (0+255),w,b
  4016  010560  0100               	movlb	0	; () banked
  4017  010562  6FE4               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;Port.c: 574: UINT16 TypeActual = Type;
  4021  010564  C0E7  F0E5         	movff	Port_Set@Type,Port_Set@TypeActual
  4022  010568  0100               	movlb	0	; () banked
  4023  01056A  6BE6               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  4027  01056C  0E08               	movlw	8
  4028  01056E  0100               	movlb	0	; () banked
  4029  010570  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4030  010572  0100               	movlb	0	; () banked
  4031  010574  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4032  010576  0E00               	movlw	0
  4033  010578  0100               	movlb	0	; () banked
  4034  01057A  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4035  01057C  0100               	movlb	0	; () banked
  4036  01057E  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4037  010580  0E01               	movlw	1
  4038  010582  0100               	movlb	0	; () banked
  4039  010584  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4040  010586  EC7A  F095         	call	_Word_GetPair	;wreg free
  4041  01058A  0100               	movlb	0	; () banked
  4042  01058C  6FD3               	movwf	??_Port_Set& (0+255),b
  4043  01058E  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4044  010590  0100               	movlb	0	; () banked
  4045  010592  90D8               	bcf	status,0,c
  4046  010594  37D3               	rlcf	??_Port_Set& (0+255),f,b
  4047  010596  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4048  010598  0100               	movlb	0	; () banked
  4049  01059A  90D8               	bcf	status,0,c
  4050  01059C  37D3               	rlcf	??_Port_Set& (0+255),f,b
  4051  01059E  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4052  0105A0  0100               	movlb	0	; () banked
  4053  0105A2  51D3               	movf	??_Port_Set& (0+255),w,b
  4054  0105A4  0100               	movlb	0	; () banked
  4055  0105A6  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4056  0105A8  0100               	movlb	0	; () banked
  4057  0105AA  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4058  0105AC  0100               	movlb	0	; () banked
  4059  0105AE  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  4063  0105B0  0E08               	movlw	8
  4064  0105B2  0100               	movlb	0	; () banked
  4065  0105B4  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4066  0105B6  0100               	movlb	0	; () banked
  4067  0105B8  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4068  0105BA  0E00               	movlw	0
  4069  0105BC  0100               	movlb	0	; () banked
  4070  0105BE  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4071  0105C0  0100               	movlb	0	; () banked
  4072  0105C2  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4073  0105C4  0E02               	movlw	2
  4074  0105C6  0100               	movlb	0	; () banked
  4075  0105C8  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4076  0105CA  EC7A  F095         	call	_Word_GetPair	;wreg free
  4077  0105CE  0100               	movlb	0	; () banked
  4078  0105D0  6FD3               	movwf	??_Port_Set& (0+255),b
  4079  0105D2  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4080  0105D4  0100               	movlb	0	; () banked
  4081  0105D6  3BD3               	swapf	??_Port_Set& (0+255),f,b
  4082  0105D8  3BD4               	swapf	(??_Port_Set+1)& (0+255),f,b
  4083  0105DA  0EF0               	movlw	240
  4084  0105DC  17D4               	andwf	(??_Port_Set+1)& (0+255),f,b
  4085  0105DE  51D3               	movf	??_Port_Set& (0+255),w,b
  4086  0105E0  0B0F               	andlw	15
  4087  0105E2  13D4               	iorwf	(??_Port_Set+1)& (0+255),f,b
  4088  0105E4  0EF0               	movlw	240
  4089  0105E6  17D3               	andwf	??_Port_Set& (0+255),f,b
  4090  0105E8  0100               	movlb	0	; () banked
  4091  0105EA  51D3               	movf	??_Port_Set& (0+255),w,b
  4092  0105EC  0100               	movlb	0	; () banked
  4093  0105EE  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4094  0105F0  0100               	movlb	0	; () banked
  4095  0105F2  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4096  0105F4  0100               	movlb	0	; () banked
  4097  0105F6  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  4101  0105F8  0E08               	movlw	8
  4102  0105FA  0100               	movlb	0	; () banked
  4103  0105FC  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4104  0105FE  0100               	movlb	0	; () banked
  4105  010600  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4106  010602  0E00               	movlw	0
  4107  010604  0100               	movlb	0	; () banked
  4108  010606  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4109  010608  0100               	movlb	0	; () banked
  4110  01060A  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4111  01060C  0E03               	movlw	3
  4112  01060E  0100               	movlb	0	; () banked
  4113  010610  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4114  010612  EC7A  F095         	call	_Word_GetPair	;wreg free
  4115  010616  0100               	movlb	0	; () banked
  4116  010618  6FD3               	movwf	??_Port_Set& (0+255),b
  4117  01061A  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4118  01061C  0E06               	movlw	6
  4119  01061E                     u6365:
  4120  01061E  90D8               	bcf	status,0,c
  4121  010620  0100               	movlb	0	; () banked
  4122  010622  37D3               	rlcf	??_Port_Set& (0+255),f,b
  4123  010624  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4124  010626  2EE8               	decfsz	wreg,f,c
  4125  010628  D7FA               	goto	u6365
  4126  01062A  0100               	movlb	0	; () banked
  4127  01062C  51D3               	movf	??_Port_Set& (0+255),w,b
  4128  01062E  0100               	movlb	0	; () banked
  4129  010630  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4130  010632  0100               	movlb	0	; () banked
  4131  010634  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4132  010636  0100               	movlb	0	; () banked
  4133  010638  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  4137  01063A  0E08               	movlw	8
  4138  01063C  0100               	movlb	0	; () banked
  4139  01063E  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4140  010640  0100               	movlb	0	; () banked
  4141  010642  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4142  010644  0E00               	movlw	0
  4143  010646  0100               	movlb	0	; () banked
  4144  010648  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4145  01064A  0100               	movlb	0	; () banked
  4146  01064C  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4147  01064E  0E04               	movlw	4
  4148  010650  0100               	movlb	0	; () banked
  4149  010652  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4150  010654  EC7A  F095         	call	_Word_GetPair	;wreg free
  4151  010658  0100               	movlb	0	; () banked
  4152  01065A  6FD3               	movwf	??_Port_Set& (0+255),b
  4153  01065C  0100               	movlb	0	; () banked
  4154  01065E  51D3               	movf	??_Port_Set& (0+255),w,b
  4155  010660  0100               	movlb	0	; () banked
  4156  010662  6FD5               	movwf	(??_Port_Set+2)& (0+255),b
  4157  010664  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4158  010666  0100               	movlb	0	; () banked
  4159  010668  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4160  01066A  0100               	movlb	0	; () banked
  4161  01066C  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4162  01066E  0100               	movlb	0	; () banked
  4163  010670  51D5               	movf	(??_Port_Set+2)& (0+255),w,b
  4164  010672  0100               	movlb	0	; () banked
  4165  010674  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  4169  010676  0E08               	movlw	8
  4170  010678  0100               	movlb	0	; () banked
  4171  01067A  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4172  01067C  0100               	movlb	0	; () banked
  4173  01067E  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4174  010680  0E00               	movlw	0
  4175  010682  0100               	movlb	0	; () banked
  4176  010684  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4177  010686  0100               	movlb	0	; () banked
  4178  010688  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4179  01068A  0E05               	movlw	5
  4180  01068C  0100               	movlb	0	; () banked
  4181  01068E  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4182  010690  EC7A  F095         	call	_Word_GetPair	;wreg free
  4183  010694  0100               	movlb	0	; () banked
  4184  010696  6FD3               	movwf	??_Port_Set& (0+255),b
  4185  010698  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4186  01069A  0E0A               	movlw	10
  4187  01069C                     u6375:
  4188  01069C  90D8               	bcf	status,0,c
  4189  01069E  0100               	movlb	0	; () banked
  4190  0106A0  37D3               	rlcf	??_Port_Set& (0+255),f,b
  4191  0106A2  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4192  0106A4  2EE8               	decfsz	wreg,f,c
  4193  0106A6  D7FA               	goto	u6375
  4194  0106A8  0100               	movlb	0	; () banked
  4195  0106AA  51D3               	movf	??_Port_Set& (0+255),w,b
  4196  0106AC  0100               	movlb	0	; () banked
  4197  0106AE  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4198  0106B0  0100               	movlb	0	; () banked
  4199  0106B2  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4200  0106B4  0100               	movlb	0	; () banked
  4201  0106B6  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  4205  0106B8  0E08               	movlw	8
  4206  0106BA  0100               	movlb	0	; () banked
  4207  0106BC  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4208  0106BE  0100               	movlb	0	; () banked
  4209  0106C0  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4210  0106C2  0E00               	movlw	0
  4211  0106C4  0100               	movlb	0	; () banked
  4212  0106C6  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4213  0106C8  0100               	movlb	0	; () banked
  4214  0106CA  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4215  0106CC  0E06               	movlw	6
  4216  0106CE  0100               	movlb	0	; () banked
  4217  0106D0  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4218  0106D2  EC7A  F095         	call	_Word_GetPair	;wreg free
  4219  0106D6  0100               	movlb	0	; () banked
  4220  0106D8  6FD3               	movwf	??_Port_Set& (0+255),b
  4221  0106DA  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4222  0106DC  0E0C               	movlw	12
  4223  0106DE                     u6385:
  4224  0106DE  90D8               	bcf	status,0,c
  4225  0106E0  0100               	movlb	0	; () banked
  4226  0106E2  37D3               	rlcf	??_Port_Set& (0+255),f,b
  4227  0106E4  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4228  0106E6  2EE8               	decfsz	wreg,f,c
  4229  0106E8  D7FA               	goto	u6385
  4230  0106EA  0100               	movlb	0	; () banked
  4231  0106EC  51D3               	movf	??_Port_Set& (0+255),w,b
  4232  0106EE  0100               	movlb	0	; () banked
  4233  0106F0  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4234  0106F2  0100               	movlb	0	; () banked
  4235  0106F4  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4236  0106F6  0100               	movlb	0	; () banked
  4237  0106F8  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  4241  0106FA  0E08               	movlw	8
  4242  0106FC  0100               	movlb	0	; () banked
  4243  0106FE  25D0               	addwf	Port_Set@pInput& (0+255),w,b
  4244  010700  0100               	movlb	0	; () banked
  4245  010702  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
  4246  010704  0E00               	movlw	0
  4247  010706  0100               	movlb	0	; () banked
  4248  010708  21D1               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4249  01070A  0100               	movlb	0	; () banked
  4250  01070C  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4251  01070E  0E07               	movlw	7
  4252  010710  0100               	movlb	0	; () banked
  4253  010712  6FCF               	movwf	Word_GetPair@pPair& (0+255),b
  4254  010714  EC7A  F095         	call	_Word_GetPair	;wreg free
  4255  010718  0100               	movlb	0	; () banked
  4256  01071A  6FD3               	movwf	??_Port_Set& (0+255),b
  4257  01071C  6BD4               	clrf	(??_Port_Set+1)& (0+255),b
  4258  01071E  0E0E               	movlw	14
  4259  010720                     u6395:
  4260  010720  90D8               	bcf	status,0,c
  4261  010722  0100               	movlb	0	; () banked
  4262  010724  37D3               	rlcf	??_Port_Set& (0+255),f,b
  4263  010726  37D4               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4264  010728  2EE8               	decfsz	wreg,f,c
  4265  01072A  D7FA               	goto	u6395
  4266  01072C  0100               	movlb	0	; () banked
  4267  01072E  51D3               	movf	??_Port_Set& (0+255),w,b
  4268  010730  0100               	movlb	0	; () banked
  4269  010732  13E5               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4270  010734  0100               	movlb	0	; () banked
  4271  010736  51D4               	movf	(??_Port_Set+1)& (0+255),w,b
  4272  010738  0100               	movlb	0	; () banked
  4273  01073A  13E6               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4274                           
  4275                           ;Port.c: 584: if (TypeRequired == TypeActual)
  4276  01073C  0100               	movlb	0	; () banked
  4277  01073E  51E5               	movf	Port_Set@TypeActual& (0+255),w,b
  4278  010740  0100               	movlb	0	; () banked
  4279  010742  19E3               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  4280  010744  E148               	bnz	l528
  4281  010746  0100               	movlb	0	; () banked
  4282  010748  51E6               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  4283  01074A  0100               	movlb	0	; () banked
  4284  01074C  19E4               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  4285  01074E  A4D8               	btfss	status,2,c
  4286  010750  0012               	return	
  4287  010752  D032               	goto	l526
  4288  010754                     
  4289                           ; BSR set to: 0
  4290                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  4291                           
  4292                           ; BSR set to: 0
  4293  010754  0100               	movlb	0	; () banked
  4294  010756  EE20 F002          	lfsr	2,2
  4295  01075A  51D0               	movf	Port_Set@pInput& (0+255),w,b
  4296  01075C  26D9               	addwf	fsr2l,f,c
  4297  01075E  51D1               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4298  010760  22DA               	addwfc	fsr2h,f,c
  4299  010762  CFDE F0C1          	movff	postinc2,Byte_SetByte@pInput
  4300  010766  CFDD F0C2          	movff	postdec2,Byte_SetByte@pInput+1
  4301  01076A  C0D2  F0C3         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4302  01076E  ECFE  F096         	call	_Byte_SetByte	;wreg free
  4303                           
  4304                           ;Port.c: 594: break;
  4305  010772  0012               	return	
  4306  010774                     
  4307                           ;Port.c: 597: pValue = ~pValue;
  4308  010774  0100               	movlb	0	; () banked
  4309  010776  1FD2               	comf	Port_Set@pValue& (0+255),f,b
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  4313  010778  0100               	movlb	0	; () banked
  4314  01077A  EE20 F002          	lfsr	2,2
  4315  01077E  51D0               	movf	Port_Set@pInput& (0+255),w,b
  4316  010780  26D9               	addwf	fsr2l,f,c
  4317  010782  51D1               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4318  010784  22DA               	addwfc	fsr2h,f,c
  4319  010786  CFDE F0C1          	movff	postinc2,Byte_SetByte@pInput
  4320  01078A  CFDD F0C2          	movff	postdec2,Byte_SetByte@pInput+1
  4321  01078E  C0D2  F0C3         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4322  010792  ECFE  F096         	call	_Byte_SetByte	;wreg free
  4323                           
  4324                           ;Port.c: 599: break;
  4325  010796  0012               	return	
  4326  010798                     
  4327                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  4328  010798  0100               	movlb	0	; () banked
  4329  01079A  EE20 F004          	lfsr	2,4
  4330  01079E  51D0               	movf	Port_Set@pInput& (0+255),w,b
  4331  0107A0  26D9               	addwf	fsr2l,f,c
  4332  0107A2  51D1               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4333  0107A4  22DA               	addwfc	fsr2h,f,c
  4334  0107A6  CFDE F0C1          	movff	postinc2,Byte_SetByte@pInput
  4335  0107AA  CFDD F0C2          	movff	postdec2,Byte_SetByte@pInput+1
  4336  0107AE  C0D2  F0C3         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4337  0107B2  ECFE  F096         	call	_Byte_SetByte	;wreg free
  4338                           
  4339                           ;Port.c: 606: }
  4340                           
  4341                           ;Port.c: 605: break;
  4342                           
  4343                           ;Port.c: 604: default:
  4344                           
  4345                           ;Port.c: 603: break;
  4346  0107B6  0012               	return	
  4347  0107B8                     l526:
  4348  0107B8  0100               	movlb	0	; () banked
  4349  0107BA  51E7               	movf	Port_Set@Type& (0+255),w,b
  4350                           
  4351                           ; Switch size 1, requested type "space"
  4352                           ; Number of cases is 4, Range of values is 0 to 3
  4353                           ; switch strategies available:
  4354                           ; Name         Instructions Cycles
  4355                           ; simple_byte           13     7 (average)
  4356                           ;	Chosen strategy is simple_byte
  4357  0107BC  0A00               	xorlw	0	; case 0
  4358  0107BE  B4D8               	btfsc	status,2,c
  4359  0107C0  0012               	return	
  4360  0107C2  0A01               	xorlw	1	; case 1
  4361  0107C4  B4D8               	btfsc	status,2,c
  4362  0107C6  D7C6               	goto	l529
  4363  0107C8  0A03               	xorlw	3	; case 2
  4364  0107CA  B4D8               	btfsc	status,2,c
  4365  0107CC  D7D3               	goto	l531
  4366  0107CE  0A01               	xorlw	1	; case 3
  4367  0107D0  A4D8               	btfss	status,2,c
  4368                           
  4369                           ; BSR set to: 0
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;Port.c: 607: }
  4373  0107D2  0012               	return	
  4374  0107D4  D7E1               	goto	l532
  4375  0107D6                     l528:
  4376  0107D6  0012               	return		;funcret
  4377  0107D8                     __end_of_Port_Set:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodl	equ	0xFF3
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           postdec1	equ	0xFE5
  4387                           fsr1h	equ	0xFE2
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           postdec2	equ	0xFDD
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _Byte_SetByte *****************
  4397 ;; Defined at:
  4398 ;;		line 110 in file "Library/Types.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  4401 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  4402 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  4403 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  4404 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  4405 ;;		 -> NULL(0), 
  4406 ;;  pValue          1    2[BANK0 ] unsigned char 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		fsr2l, fsr2h
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4418 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;Total ram usage:        3 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    7
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_Port_Set
  4429 ;;		_I2C_Init
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text9
  4434  012DFC                     __ptext9:
  4435                           	opt stack 0
  4436  012DFC                     _Byte_SetByte:
  4437                           	opt stack 20
  4438                           
  4439                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  4440                           
  4441                           ;incstack = 0
  4442  012DFC  C0C1  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  4443  012E00  C0C2  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  4444  012E04  C0C3  FFDF         	movff	Byte_SetByte@pValue,indf2
  4445  012E08  0012               	return		;funcret
  4446  012E0A                     __end_of_Byte_SetByte:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodl	equ	0xFF3
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           fsr1h	equ	0xFE2
  4457                           fsr1l	equ	0xFE1
  4458                           indf2	equ	0xFDF
  4459                           postinc2	equ	0xFDE
  4460                           postdec2	equ	0xFDD
  4461                           fsr2h	equ	0xFDA
  4462                           fsr2l	equ	0xFD9
  4463                           status	equ	0xFD8
  4464                           
  4465 ;; *************** function _GetPortTRIS *****************
  4466 ;; Defined at:
  4467 ;;		line 67 in file "Library/Port.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  pInput          1    wreg     enum E6786
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  pInput          1    2[BANK0 ] enum E6786
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  2    0[BANK0 ] PTR struct Byte
  4474 ;; Registers used:
  4475 ;;		wreg, status,2, status,0
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4481 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;Total ram usage:        3 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    7
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_Port_Init
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text10
  4496  011CC6                     __ptext10:
  4497                           	opt stack 0
  4498  011CC6                     _GetPortTRIS:
  4499                           	opt stack 21
  4500                           
  4501                           ;incstack = 0
  4502                           ;GetPortTRIS@pInput stored from wreg
  4503  011CC6  0100               	movlb	0	; () banked
  4504  011CC8  6FC3               	movwf	GetPortTRIS@pInput& (0+255),b
  4505                           
  4506                           ;Port.c: 69: switch (pInput)
  4507  011CCA  D038               	goto	l363
  4508  011CCC                     
  4509                           ;Port.c: 72: return (BytePtr)&TRISA;
  4510  011CCC  0E92               	movlw	146
  4511  011CCE  0100               	movlb	0	; () banked
  4512  011CD0  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4513  011CD2  0E0F               	movlw	15
  4514  011CD4  0100               	movlb	0	; () banked
  4515  011CD6  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4516                           
  4517                           ; BSR set to: 0
  4518  011CD8  0012               	return	
  4519  011CDA                     
  4520                           ; BSR set to: 0
  4521                           ;Port.c: 74: return (BytePtr)&TRISB;
  4522                           
  4523                           ; BSR set to: 0
  4524  011CDA  0E93               	movlw	147
  4525  011CDC  0100               	movlb	0	; () banked
  4526  011CDE  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4527  011CE0  0E0F               	movlw	15
  4528  011CE2  0100               	movlb	0	; () banked
  4529  011CE4  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4530                           
  4531                           ; BSR set to: 0
  4532  011CE6  0012               	return	
  4533  011CE8                     
  4534                           ; BSR set to: 0
  4535                           ;Port.c: 76: return (BytePtr)&TRISC;
  4536                           
  4537                           ; BSR set to: 0
  4538  011CE8  0E94               	movlw	148
  4539  011CEA  0100               	movlb	0	; () banked
  4540  011CEC  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4541  011CEE  0E0F               	movlw	15
  4542  011CF0  0100               	movlb	0	; () banked
  4543  011CF2  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4544                           
  4545                           ; BSR set to: 0
  4546  011CF4  0012               	return	
  4547  011CF6                     
  4548                           ; BSR set to: 0
  4549                           ;Port.c: 78: return (BytePtr)&TRISD;
  4550                           
  4551                           ; BSR set to: 0
  4552  011CF6  0E95               	movlw	149
  4553  011CF8  0100               	movlb	0	; () banked
  4554  011CFA  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4555  011CFC  0E0F               	movlw	15
  4556  011CFE  0100               	movlb	0	; () banked
  4557  011D00  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4558                           
  4559                           ; BSR set to: 0
  4560  011D02  0012               	return	
  4561  011D04                     
  4562                           ; BSR set to: 0
  4563                           ;Port.c: 80: return (BytePtr)&TRISE;
  4564                           
  4565                           ; BSR set to: 0
  4566  011D04  0E96               	movlw	150
  4567  011D06  0100               	movlb	0	; () banked
  4568  011D08  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4569  011D0A  0E0F               	movlw	15
  4570  011D0C  0100               	movlb	0	; () banked
  4571  011D0E  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574  011D10  0012               	return	
  4575  011D12                     
  4576                           ; BSR set to: 0
  4577                           ;Port.c: 82: return (BytePtr)&TRISF;
  4578                           
  4579                           ; BSR set to: 0
  4580  011D12  0E97               	movlw	151
  4581  011D14  0100               	movlb	0	; () banked
  4582  011D16  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4583  011D18  0E0F               	movlw	15
  4584  011D1A  0100               	movlb	0	; () banked
  4585  011D1C  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4586                           
  4587                           ; BSR set to: 0
  4588  011D1E  0012               	return	
  4589  011D20                     
  4590                           ; BSR set to: 0
  4591                           ;Port.c: 84: return (BytePtr)&TRISG;
  4592                           
  4593                           ; BSR set to: 0
  4594  011D20  0E98               	movlw	152
  4595  011D22  0100               	movlb	0	; () banked
  4596  011D24  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4597  011D26  0E0F               	movlw	15
  4598  011D28  0100               	movlb	0	; () banked
  4599  011D2A  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4600                           
  4601                           ; BSR set to: 0
  4602  011D2C  0012               	return	
  4603  011D2E                     
  4604                           ; BSR set to: 0
  4605                           ;Port.c: 86: return (void*)0;
  4606                           
  4607                           ; BSR set to: 0
  4608  011D2E  0E00               	movlw	0
  4609  011D30  0100               	movlb	0	; () banked
  4610  011D32  6FC1               	movwf	?_GetPortTRIS& (0+255),b
  4611  011D34  0E00               	movlw	0
  4612  011D36  0100               	movlb	0	; () banked
  4613  011D38  6FC2               	movwf	(?_GetPortTRIS+1)& (0+255),b
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;Port.c: 87: }
  4617                           
  4618                           ; BSR set to: 0
  4619  011D3A  0012               	return	
  4620  011D3C                     l363:
  4621                           
  4622                           ; BSR set to: 0
  4623  011D3C  0100               	movlb	0	; () banked
  4624  011D3E  51C3               	movf	GetPortTRIS@pInput& (0+255),w,b
  4625                           
  4626                           ; Switch size 1, requested type "space"
  4627                           ; Number of cases is 7, Range of values is 0 to 6
  4628                           ; switch strategies available:
  4629                           ; Name         Instructions Cycles
  4630                           ; simple_byte           22    12 (average)
  4631                           ;	Chosen strategy is simple_byte
  4632  011D40  0A00               	xorlw	0	; case 0
  4633  011D42  B4D8               	btfsc	status,2,c
  4634  011D44  D7C3               	goto	l364
  4635  011D46  0A01               	xorlw	1	; case 1
  4636  011D48  B4D8               	btfsc	status,2,c
  4637  011D4A  D7C7               	goto	l366
  4638  011D4C  0A03               	xorlw	3	; case 2
  4639  011D4E  B4D8               	btfsc	status,2,c
  4640  011D50  D7CB               	goto	l367
  4641  011D52  0A01               	xorlw	1	; case 3
  4642  011D54  B4D8               	btfsc	status,2,c
  4643  011D56  D7CF               	goto	l368
  4644  011D58  0A07               	xorlw	7	; case 4
  4645  011D5A  B4D8               	btfsc	status,2,c
  4646  011D5C  D7D3               	goto	l369
  4647  011D5E  0A01               	xorlw	1	; case 5
  4648  011D60  B4D8               	btfsc	status,2,c
  4649  011D62  D7D7               	goto	l370
  4650  011D64  0A03               	xorlw	3	; case 6
  4651  011D66  B4D8               	btfsc	status,2,c
  4652  011D68  D7DB               	goto	l371
  4653  011D6A  D7E1               	goto	l372
  4654  011D6C                     __end_of_GetPortTRIS:
  4655                           	opt stack 0
  4656                           tblptru	equ	0xFF8
  4657                           tblptrh	equ	0xFF7
  4658                           tblptrl	equ	0xFF6
  4659                           tablat	equ	0xFF5
  4660                           prodl	equ	0xFF3
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _GetPortProperties *****************
  4674 ;; Defined at:
  4675 ;;		line 21 in file "Library/Port.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  pInput          1    wreg     enum E6786
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  pInput          1    2[BANK0 ] enum E6786
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  2    0[BANK0 ] PTR struct PortProperty
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:        3 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    7
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_Port_Init
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text11
  4704  011D6C                     __ptext11:
  4705                           	opt stack 0
  4706  011D6C                     _GetPortProperties:
  4707                           	opt stack 21
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;incstack = 0
  4711                           ;GetPortProperties@pInput stored from wreg
  4712  011D6C  0100               	movlb	0	; () banked
  4713  011D6E  6FC3               	movwf	GetPortProperties@pInput& (0+255),b
  4714                           
  4715                           ;Port.c: 23: switch (pInput)
  4716  011D70  D038               	goto	l337
  4717  011D72                     
  4718                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  4719  011D72  0EF1               	movlw	low _PortA_Property
  4720  011D74  0100               	movlb	0	; () banked
  4721  011D76  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4722  011D78  0EFF               	movlw	high _PortA_Property
  4723  011D7A  0100               	movlb	0	; () banked
  4724  011D7C  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727  011D7E  0012               	return	
  4728  011D80                     
  4729                           ; BSR set to: 0
  4730                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  4731                           
  4732                           ; BSR set to: 0
  4733  011D80  0EEF               	movlw	low _PortB_Property
  4734  011D82  0100               	movlb	0	; () banked
  4735  011D84  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4736  011D86  0EFF               	movlw	high _PortB_Property
  4737  011D88  0100               	movlb	0	; () banked
  4738  011D8A  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741  011D8C  0012               	return	
  4742  011D8E                     
  4743                           ; BSR set to: 0
  4744                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  4745                           
  4746                           ; BSR set to: 0
  4747  011D8E  0EED               	movlw	low _PortC_Property
  4748  011D90  0100               	movlb	0	; () banked
  4749  011D92  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4750  011D94  0EFF               	movlw	high _PortC_Property
  4751  011D96  0100               	movlb	0	; () banked
  4752  011D98  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4753                           
  4754                           ; BSR set to: 0
  4755  011D9A  0012               	return	
  4756  011D9C                     
  4757                           ; BSR set to: 0
  4758                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  4759                           
  4760                           ; BSR set to: 0
  4761  011D9C  0EEB               	movlw	low _PortD_Property
  4762  011D9E  0100               	movlb	0	; () banked
  4763  011DA0  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4764  011DA2  0EFF               	movlw	high _PortD_Property
  4765  011DA4  0100               	movlb	0	; () banked
  4766  011DA6  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4767                           
  4768                           ; BSR set to: 0
  4769  011DA8  0012               	return	
  4770  011DAA                     
  4771                           ; BSR set to: 0
  4772                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  4773                           
  4774                           ; BSR set to: 0
  4775  011DAA  0EE9               	movlw	low _PortE_Property
  4776  011DAC  0100               	movlb	0	; () banked
  4777  011DAE  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4778  011DB0  0EFF               	movlw	high _PortE_Property
  4779  011DB2  0100               	movlb	0	; () banked
  4780  011DB4  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4781                           
  4782                           ; BSR set to: 0
  4783  011DB6  0012               	return	
  4784  011DB8                     
  4785                           ; BSR set to: 0
  4786                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  4787                           
  4788                           ; BSR set to: 0
  4789  011DB8  0EE7               	movlw	low _PortF_Property
  4790  011DBA  0100               	movlb	0	; () banked
  4791  011DBC  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4792  011DBE  0EFF               	movlw	high _PortF_Property
  4793  011DC0  0100               	movlb	0	; () banked
  4794  011DC2  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4795                           
  4796                           ; BSR set to: 0
  4797  011DC4  0012               	return	
  4798  011DC6                     
  4799                           ; BSR set to: 0
  4800                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  4801                           
  4802                           ; BSR set to: 0
  4803  011DC6  0EE5               	movlw	low _PortG_Property
  4804  011DC8  0100               	movlb	0	; () banked
  4805  011DCA  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4806  011DCC  0EFF               	movlw	high _PortG_Property
  4807  011DCE  0100               	movlb	0	; () banked
  4808  011DD0  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811  011DD2  0012               	return	
  4812  011DD4                     
  4813                           ; BSR set to: 0
  4814                           ;Port.c: 40: return (void*)0;
  4815                           
  4816                           ; BSR set to: 0
  4817  011DD4  0E00               	movlw	0
  4818  011DD6  0100               	movlb	0	; () banked
  4819  011DD8  6FC1               	movwf	?_GetPortProperties& (0+255),b
  4820  011DDA  0E00               	movlw	0
  4821  011DDC  0100               	movlb	0	; () banked
  4822  011DDE  6FC2               	movwf	(?_GetPortProperties+1)& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;Port.c: 41: }
  4826                           
  4827                           ; BSR set to: 0
  4828  011DE0  0012               	return	
  4829  011DE2                     l337:
  4830                           
  4831                           ; BSR set to: 0
  4832  011DE2  0100               	movlb	0	; () banked
  4833  011DE4  51C3               	movf	GetPortProperties@pInput& (0+255),w,b
  4834                           
  4835                           ; Switch size 1, requested type "space"
  4836                           ; Number of cases is 7, Range of values is 0 to 6
  4837                           ; switch strategies available:
  4838                           ; Name         Instructions Cycles
  4839                           ; simple_byte           22    12 (average)
  4840                           ;	Chosen strategy is simple_byte
  4841  011DE6  0A00               	xorlw	0	; case 0
  4842  011DE8  B4D8               	btfsc	status,2,c
  4843  011DEA  D7C3               	goto	l338
  4844  011DEC  0A01               	xorlw	1	; case 1
  4845  011DEE  B4D8               	btfsc	status,2,c
  4846  011DF0  D7C7               	goto	l340
  4847  011DF2  0A03               	xorlw	3	; case 2
  4848  011DF4  B4D8               	btfsc	status,2,c
  4849  011DF6  D7CB               	goto	l341
  4850  011DF8  0A01               	xorlw	1	; case 3
  4851  011DFA  B4D8               	btfsc	status,2,c
  4852  011DFC  D7CF               	goto	l342
  4853  011DFE  0A07               	xorlw	7	; case 4
  4854  011E00  B4D8               	btfsc	status,2,c
  4855  011E02  D7D3               	goto	l343
  4856  011E04  0A01               	xorlw	1	; case 5
  4857  011E06  B4D8               	btfsc	status,2,c
  4858  011E08  D7D7               	goto	l344
  4859  011E0A  0A03               	xorlw	3	; case 6
  4860  011E0C  B4D8               	btfsc	status,2,c
  4861  011E0E  D7DB               	goto	l345
  4862  011E10  D7E1               	goto	l346
  4863  011E12                     __end_of_GetPortProperties:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodl	equ	0xFF3
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _GetPortPORT *****************
  4883 ;; Defined at:
  4884 ;;		line 44 in file "Library/Port.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  pInput          1    wreg     enum E6786
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  pInput          1    2[BANK0 ] enum E6786
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  2    0[BANK0 ] PTR struct Byte
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:        3 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		_Port_Init
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text12
  4913  011E12                     __ptext12:
  4914                           	opt stack 0
  4915  011E12                     _GetPortPORT:
  4916                           	opt stack 21
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;incstack = 0
  4920                           ;GetPortPORT@pInput stored from wreg
  4921  011E12  0100               	movlb	0	; () banked
  4922  011E14  6FC3               	movwf	GetPortPORT@pInput& (0+255),b
  4923                           
  4924                           ;Port.c: 46: switch (pInput)
  4925  011E16  D038               	goto	l350
  4926  011E18                     
  4927                           ;Port.c: 49: return (BytePtr)&PORTA;
  4928  011E18  0E80               	movlw	128
  4929  011E1A  0100               	movlb	0	; () banked
  4930  011E1C  6FC1               	movwf	?_GetPortPORT& (0+255),b
  4931  011E1E  0E0F               	movlw	15
  4932  011E20  0100               	movlb	0	; () banked
  4933  011E22  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  4934                           
  4935                           ; BSR set to: 0
  4936  011E24  0012               	return	
  4937  011E26                     
  4938                           ; BSR set to: 0
  4939                           ;Port.c: 51: return (BytePtr)&PORTB;
  4940                           
  4941                           ; BSR set to: 0
  4942  011E26  0E81               	movlw	129
  4943  011E28  0100               	movlb	0	; () banked
  4944  011E2A  6FC1               	movwf	?_GetPortPORT& (0+255),b
  4945  011E2C  0E0F               	movlw	15
  4946  011E2E  0100               	movlb	0	; () banked
  4947  011E30  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  4948                           
  4949                           ; BSR set to: 0
  4950  011E32  0012               	return	
  4951  011E34                     
  4952                           ; BSR set to: 0
  4953                           ;Port.c: 53: return (BytePtr)&PORTC;
  4954                           
  4955                           ; BSR set to: 0
  4956  011E34  0E82               	movlw	130
  4957  011E36  0100               	movlb	0	; () banked
  4958  011E38  6FC1               	movwf	?_GetPortPORT& (0+255),b
  4959  011E3A  0E0F               	movlw	15
  4960  011E3C  0100               	movlb	0	; () banked
  4961  011E3E  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  4962                           
  4963                           ; BSR set to: 0
  4964  011E40  0012               	return	
  4965  011E42                     
  4966                           ; BSR set to: 0
  4967                           ;Port.c: 55: return (BytePtr)&PORTD;
  4968                           
  4969                           ; BSR set to: 0
  4970  011E42  0E83               	movlw	131
  4971  011E44  0100               	movlb	0	; () banked
  4972  011E46  6FC1               	movwf	?_GetPortPORT& (0+255),b
  4973  011E48  0E0F               	movlw	15
  4974  011E4A  0100               	movlb	0	; () banked
  4975  011E4C  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978  011E4E  0012               	return	
  4979  011E50                     
  4980                           ; BSR set to: 0
  4981                           ;Port.c: 57: return (BytePtr)&PORTE;
  4982                           
  4983                           ; BSR set to: 0
  4984  011E50  0E84               	movlw	132
  4985  011E52  0100               	movlb	0	; () banked
  4986  011E54  6FC1               	movwf	?_GetPortPORT& (0+255),b
  4987  011E56  0E0F               	movlw	15
  4988  011E58  0100               	movlb	0	; () banked
  4989  011E5A  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  4990                           
  4991                           ; BSR set to: 0
  4992  011E5C  0012               	return	
  4993  011E5E                     
  4994                           ; BSR set to: 0
  4995                           ;Port.c: 59: return (BytePtr)&PORTF;
  4996                           
  4997                           ; BSR set to: 0
  4998  011E5E  0E85               	movlw	133
  4999  011E60  0100               	movlb	0	; () banked
  5000  011E62  6FC1               	movwf	?_GetPortPORT& (0+255),b
  5001  011E64  0E0F               	movlw	15
  5002  011E66  0100               	movlb	0	; () banked
  5003  011E68  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  5004                           
  5005                           ; BSR set to: 0
  5006  011E6A  0012               	return	
  5007  011E6C                     
  5008                           ; BSR set to: 0
  5009                           ;Port.c: 61: return (BytePtr)&PORTG;
  5010                           
  5011                           ; BSR set to: 0
  5012  011E6C  0E86               	movlw	134
  5013  011E6E  0100               	movlb	0	; () banked
  5014  011E70  6FC1               	movwf	?_GetPortPORT& (0+255),b
  5015  011E72  0E0F               	movlw	15
  5016  011E74  0100               	movlb	0	; () banked
  5017  011E76  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  5018                           
  5019                           ; BSR set to: 0
  5020  011E78  0012               	return	
  5021  011E7A                     
  5022                           ; BSR set to: 0
  5023                           ;Port.c: 63: return (void*)0;
  5024                           
  5025                           ; BSR set to: 0
  5026  011E7A  0E00               	movlw	0
  5027  011E7C  0100               	movlb	0	; () banked
  5028  011E7E  6FC1               	movwf	?_GetPortPORT& (0+255),b
  5029  011E80  0E00               	movlw	0
  5030  011E82  0100               	movlb	0	; () banked
  5031  011E84  6FC2               	movwf	(?_GetPortPORT+1)& (0+255),b
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;Port.c: 64: }
  5035                           
  5036                           ; BSR set to: 0
  5037  011E86  0012               	return	
  5038  011E88                     l350:
  5039                           
  5040                           ; BSR set to: 0
  5041  011E88  0100               	movlb	0	; () banked
  5042  011E8A  51C3               	movf	GetPortPORT@pInput& (0+255),w,b
  5043                           
  5044                           ; Switch size 1, requested type "space"
  5045                           ; Number of cases is 7, Range of values is 0 to 6
  5046                           ; switch strategies available:
  5047                           ; Name         Instructions Cycles
  5048                           ; simple_byte           22    12 (average)
  5049                           ;	Chosen strategy is simple_byte
  5050  011E8C  0A00               	xorlw	0	; case 0
  5051  011E8E  B4D8               	btfsc	status,2,c
  5052  011E90  D7C3               	goto	l351
  5053  011E92  0A01               	xorlw	1	; case 1
  5054  011E94  B4D8               	btfsc	status,2,c
  5055  011E96  D7C7               	goto	l353
  5056  011E98  0A03               	xorlw	3	; case 2
  5057  011E9A  B4D8               	btfsc	status,2,c
  5058  011E9C  D7CB               	goto	l354
  5059  011E9E  0A01               	xorlw	1	; case 3
  5060  011EA0  B4D8               	btfsc	status,2,c
  5061  011EA2  D7CF               	goto	l355
  5062  011EA4  0A07               	xorlw	7	; case 4
  5063  011EA6  B4D8               	btfsc	status,2,c
  5064  011EA8  D7D3               	goto	l356
  5065  011EAA  0A01               	xorlw	1	; case 5
  5066  011EAC  B4D8               	btfsc	status,2,c
  5067  011EAE  D7D7               	goto	l357
  5068  011EB0  0A03               	xorlw	3	; case 6
  5069  011EB2  B4D8               	btfsc	status,2,c
  5070  011EB4  D7DB               	goto	l358
  5071  011EB6  D7E1               	goto	l359
  5072  011EB8                     __end_of_GetPortPORT:
  5073                           	opt stack 0
  5074                           tblptru	equ	0xFF8
  5075                           tblptrh	equ	0xFF7
  5076                           tblptrl	equ	0xFF6
  5077                           tablat	equ	0xFF5
  5078                           prodl	equ	0xFF3
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postdec1	equ	0xFE5
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _LED_Init *****************
  5092 ;; Defined at:
  5093 ;;		line 15 in file "Library/LED.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  pLED            1    wreg     enum E6739
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  pLED            1   45[BANK0 ] enum E6739
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        1 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:   12
  5114 ;; This function calls:
  5115 ;;		_LED_Set
  5116 ;;		_Port_SetPinType
  5117 ;; This function is called by:
  5118 ;;		_MXK_Init
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text13
  5123  01262C                     __ptext13:
  5124                           	opt stack 0
  5125  01262C                     _LED_Init:
  5126                           	opt stack 17
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;incstack = 0
  5130                           ;LED_Init@pLED stored from wreg
  5131  01262C  0100               	movlb	0	; () banked
  5132  01262E  6FEE               	movwf	LED_Init@pLED& (0+255),b
  5133                           
  5134                           ;LED.c: 17: switch (pLED)
  5135  012630  D01E               	goto	l220
  5136  012632                     
  5137                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  5138  012632  0E8F               	movlw	low _PortC
  5139  012634  0100               	movlb	0	; () banked
  5140  012636  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  5141  012638  0E00               	movlw	high _PortC
  5142  01263A  0100               	movlb	0	; () banked
  5143  01263C  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5144  01263E  0E00               	movlw	0
  5145  012640  0100               	movlb	0	; () banked
  5146  012642  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  5147  012644  0E03               	movlw	3
  5148  012646  0100               	movlb	0	; () banked
  5149  012648  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  5150  01264A  EC2C  F086         	call	_Port_SetPinType	;wreg free
  5151                           
  5152                           ;LED.c: 21: break;
  5153  01264E  D017               	goto	l222
  5154  012650                     
  5155                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  5156  012650  0E8F               	movlw	low _PortC
  5157  012652  0100               	movlb	0	; () banked
  5158  012654  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  5159  012656  0E00               	movlw	high _PortC
  5160  012658  0100               	movlb	0	; () banked
  5161  01265A  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5162  01265C  0E01               	movlw	1
  5163  01265E  0100               	movlb	0	; () banked
  5164  012660  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  5165  012662  0E03               	movlw	3
  5166  012664  0100               	movlb	0	; () banked
  5167  012666  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  5168  012668  EC2C  F086         	call	_Port_SetPinType	;wreg free
  5169                           
  5170                           ;LED.c: 25: }
  5171                           
  5172                           ;LED.c: 24: break;
  5173  01266C  D008               	goto	l222
  5174  01266E                     l220:
  5175  01266E  0100               	movlb	0	; () banked
  5176  012670  51EE               	movf	LED_Init@pLED& (0+255),w,b
  5177                           
  5178                           ; Switch size 1, requested type "space"
  5179                           ; Number of cases is 2, Range of values is 0 to 1
  5180                           ; switch strategies available:
  5181                           ; Name         Instructions Cycles
  5182                           ; simple_byte            7     4 (average)
  5183                           ;	Chosen strategy is simple_byte
  5184  012672  0A00               	xorlw	0	; case 0
  5185  012674  B4D8               	btfsc	status,2,c
  5186  012676  D7DD               	goto	l221
  5187  012678  0A01               	xorlw	1	; case 1
  5188  01267A  B4D8               	btfsc	status,2,c
  5189  01267C  D7E9               	goto	l223
  5190  01267E                     l222:
  5191                           
  5192                           ;LED.c: 26: LED_Set(pLED, 0);
  5193                           
  5194                           ; BSR set to: 0
  5195  01267E  0E00               	movlw	0
  5196  012680  0100               	movlb	0	; () banked
  5197  012682  6FD5               	movwf	LED_Set@pValue& (0+255),b
  5198  012684  0100               	movlb	0	; () banked
  5199  012686  51EE               	movf	LED_Init@pLED& (0+255),w,b
  5200  012688  ECF7  F093         	call	_LED_Set
  5201  01268C  0012               	return		;funcret
  5202  01268E                     __end_of_LED_Init:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodl	equ	0xFF3
  5209                           postinc0	equ	0xFEE
  5210                           wreg	equ	0xFE8
  5211                           postdec1	equ	0xFE5
  5212                           fsr1h	equ	0xFE2
  5213                           fsr1l	equ	0xFE1
  5214                           indf2	equ	0xFDF
  5215                           postinc2	equ	0xFDE
  5216                           postdec2	equ	0xFDD
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function _LED_Set *****************
  5222 ;; Defined at:
  5223 ;;		line 33 in file "Library/LED.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  pLED            1    wreg     enum E6739
  5226 ;;  pValue          1   20[BANK0 ] unsigned char 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  pLED            1   21[BANK0 ] enum E6739
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5238 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;Total ram usage:        2 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:   11
  5245 ;; This function calls:
  5246 ;;		_Port_SetPin
  5247 ;; This function is called by:
  5248 ;;		_LED_Init
  5249 ;;		_SYSTEM_Initialize
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text14
  5254  0127EE                     __ptext14:
  5255                           	opt stack 0
  5256  0127EE                     _LED_Set:
  5257                           	opt stack 17
  5258                           
  5259                           ;incstack = 0
  5260                           ;LED_Set@pLED stored from wreg
  5261  0127EE  0100               	movlb	0	; () banked
  5262  0127F0  6FD6               	movwf	LED_Set@pLED& (0+255),b
  5263                           
  5264                           ;LED.c: 35: switch (pLED)
  5265  0127F2  D01C               	goto	l227
  5266  0127F4                     
  5267                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  5268  0127F4  0E8F               	movlw	low _PortC
  5269  0127F6  0100               	movlb	0	; () banked
  5270  0127F8  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  5271  0127FA  0E00               	movlw	high _PortC
  5272  0127FC  0100               	movlb	0	; () banked
  5273  0127FE  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5274  012800  0E00               	movlw	0
  5275  012802  0100               	movlb	0	; () banked
  5276  012804  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  5277  012806  C0D5  F0D3         	movff	LED_Set@pValue,Port_SetPin@pValue
  5278  01280A  ECDE  F08B         	call	_Port_SetPin	;wreg free
  5279                           
  5280                           ;LED.c: 39: break;
  5281  01280E  0012               	return	
  5282  012810                     
  5283                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  5284  012810  0E8F               	movlw	low _PortC
  5285  012812  0100               	movlb	0	; () banked
  5286  012814  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  5287  012816  0E00               	movlw	high _PortC
  5288  012818  0100               	movlb	0	; () banked
  5289  01281A  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5290  01281C  0E01               	movlw	1
  5291  01281E  0100               	movlb	0	; () banked
  5292  012820  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  5293  012822  C0D5  F0D3         	movff	LED_Set@pValue,Port_SetPin@pValue
  5294  012826  ECDE  F08B         	call	_Port_SetPin	;wreg free
  5295                           
  5296                           ;LED.c: 43: }
  5297                           
  5298                           ;LED.c: 42: break;
  5299  01282A  0012               	return	
  5300  01282C                     l227:
  5301  01282C  0100               	movlb	0	; () banked
  5302  01282E  51D6               	movf	LED_Set@pLED& (0+255),w,b
  5303                           
  5304                           ; Switch size 1, requested type "space"
  5305                           ; Number of cases is 2, Range of values is 0 to 1
  5306                           ; switch strategies available:
  5307                           ; Name         Instructions Cycles
  5308                           ; simple_byte            7     4 (average)
  5309                           ;	Chosen strategy is simple_byte
  5310  012830  0A00               	xorlw	0	; case 0
  5311  012832  B4D8               	btfsc	status,2,c
  5312  012834  D7DF               	goto	l228
  5313  012836  0A01               	xorlw	1	; case 1
  5314  012838  A4D8               	btfss	status,2,c
  5315  01283A  0012               	return	
  5316  01283C  D7E9               	goto	l230
  5317  01283E                     __end_of_LED_Set:
  5318                           	opt stack 0
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           prodl	equ	0xFF3
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           fsr1h	equ	0xFE2
  5328                           fsr1l	equ	0xFE1
  5329                           indf2	equ	0xFDF
  5330                           postinc2	equ	0xFDE
  5331                           postdec2	equ	0xFDD
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336 ;; *************** function _MXK_Dequeue *****************
  5337 ;; Defined at:
  5338 ;;		line 153 in file "Library/MXK.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;		None
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:        0 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:   12
  5359 ;; This function calls:
  5360 ;;		Absolute function
  5361 ;;		_Motor_Step
  5362 ;; This function is called by:
  5363 ;;		_main
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	text15
  5368  012A78                     __ptext15:
  5369                           	opt stack 0
  5370  012A78                     _MXK_Dequeue:
  5371                           	opt stack 18
  5372                           
  5373                           ;MXK.c: 155: if (lQueue)
  5374                           
  5375                           ;incstack = 0
  5376  012A78  0100               	movlb	0	; () banked
  5377  012A7A  5168               	movf	_lQueue& (0+255),w,b	;volatile
  5378  012A7C  0100               	movlb	0	; () banked
  5379  012A7E  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  5380  012A80  0100               	movlb	0	; () banked
  5381  012A82  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  5382  012A84  B4D8               	btfsc	status,2,c
  5383  012A86  D00D               	goto	u8039
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;MXK.c: 156: lQueue();
  5387  012A88  D801               	call	u8038
  5388  012A8A  D00B               	goto	u8039
  5389  012A8C                     u8038:
  5390  012A8C  0005               	push	
  5391  012A8E  6EFA               	movwf	pclath,c
  5392  012A90  0100               	movlb	0	; () banked
  5393  012A92  5168               	movf	_lQueue& (0+255),w,b	;volatile
  5394  012A94  6EFD               	movwf	tosl,c
  5395  012A96  5169               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  5396  012A98  6EFE               	movwf	tosh,c
  5397  012A9A  516A               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  5398  012A9C  6EFF               	movwf	tosu,c
  5399  012A9E  50FA               	movf	pclath,w,c
  5400  012AA0  0012               	return		;indir
  5401  012AA2                     u8039:
  5402                           
  5403                           ;MXK.c: 157: lQueue = 0;
  5404  012AA2  0E00               	movlw	0
  5405  012AA4  0100               	movlb	0	; () banked
  5406  012AA6  6F68               	movwf	_lQueue& (0+255),b	;volatile
  5407  012AA8  0E00               	movlw	0
  5408  012AAA  0100               	movlb	0	; () banked
  5409  012AAC  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5410  012AAE  0E00               	movlw	0
  5411  012AB0  0100               	movlb	0	; () banked
  5412  012AB2  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5413                           
  5414                           ; BSR set to: 0
  5415  012AB4  0012               	return		;funcret
  5416  012AB6                     __end_of_MXK_Dequeue:
  5417                           	opt stack 0
  5418                           tosu	equ	0xFFF
  5419                           tosh	equ	0xFFE
  5420                           tosl	equ	0xFFD
  5421                           pclath	equ	0xFFA
  5422                           tblptru	equ	0xFF8
  5423                           tblptrh	equ	0xFF7
  5424                           tblptrl	equ	0xFF6
  5425                           tablat	equ	0xFF5
  5426                           prodl	equ	0xFF3
  5427                           postinc0	equ	0xFEE
  5428                           wreg	equ	0xFE8
  5429                           postdec1	equ	0xFE5
  5430                           fsr1h	equ	0xFE2
  5431                           fsr1l	equ	0xFE1
  5432                           indf2	equ	0xFDF
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _Motor_Step *****************
  5440 ;; Defined at:
  5441 ;;		line 75 in file "Library/Motor.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;		None
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;		None
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  1    wreg      void 
  5448 ;; Registers used:
  5449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;Total ram usage:        2 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:   11
  5462 ;; This function calls:
  5463 ;;		_MXK_Queue
  5464 ;;		_MXK_Release
  5465 ;;		_MXK_SwitchTo
  5466 ;;		_Port_SetPin
  5467 ;;		_Timer0_Restart
  5468 ;;		_Timer0_Stop
  5469 ;; This function is called by:
  5470 ;;		_Motor_Init
  5471 ;;		_Timer0_ISR
  5472 ;;		_MXK_Dequeue
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text16
  5477  011596                     __ptext16:
  5478                           	opt stack 0
  5479  011596                     _Motor_Step:
  5480                           	opt stack 0
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;Skip over the trampoline to the duplicate function for level 2
  5484  011596  B251               	btfsc	btemp,1,c
  5485  011598  EF5E  F08B         	goto	i2_Motor_Step
  5486  01159C                     _Motor_Step$intlevel0:
  5487                           	opt stack 18
  5488                           
  5489                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  5490                           
  5491                           ;incstack = 0
  5492  01159C  0100               	movlb	0	; () banked
  5493  01159E  EE20 F004          	lfsr	2,4
  5494  0115A2  5172               	movf	_lMotor& (0+255),w,b
  5495  0115A4  26D9               	addwf	fsr2l,f,c
  5496  0115A6  5173               	movf	(_lMotor+1)& (0+255),w,b
  5497  0115A8  22DA               	addwfc	fsr2h,f,c
  5498  0115AA  50DF               	movf	indf2,w,c
  5499  0115AC  ECFB  F094         	call	_MXK_SwitchTo
  5500  0115B0  0900               	iorlw	0
  5501  0115B2  B4D8               	btfsc	status,2,c
  5502  0115B4  D07A               	goto	l1635
  5503                           
  5504                           ;Motor.c: 78: {
  5505                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  5506  0115B6  C072  FFD9         	movff	_lMotor,fsr2l
  5507  0115BA  C073  FFDA         	movff	_lMotor+1,fsr2h
  5508  0115BE  50DE               	movf	postinc2,w,c
  5509  0115C0  10DE               	iorwf	postinc2,w,c
  5510  0115C2  B4D8               	btfsc	status,2,c
  5511  0115C4  D06D               	goto	l1636
  5512                           
  5513                           ;Motor.c: 80: {
  5514                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  5515  0115C6  C072  FFD9         	movff	_lMotor,fsr2l
  5516  0115CA  C073  FFDA         	movff	_lMotor+1,fsr2h
  5517  0115CE  0E01               	movlw	1
  5518  0115D0  BEDB               	btfsc	plusw2,7,c
  5519  0115D2  D026               	goto	l1637
  5520  0115D4  0E01               	movlw	1
  5521  0115D6  50DB               	movf	plusw2,w,c
  5522  0115D8  E103               	bnz	u6750
  5523  0115DA  04DE               	decf	postinc2,w,c
  5524  0115DC  A0D8               	btfss	status,0,c
  5525  0115DE  D020               	goto	l1637
  5526  0115E0                     u6750:
  5527                           
  5528                           ;Motor.c: 83: {
  5529                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  5530  0115E0  C072  FFD9         	movff	_lMotor,fsr2l
  5531  0115E4  C073  FFDA         	movff	_lMotor+1,fsr2h
  5532  0115E8  28DE               	incf	postinc2,w,c
  5533  0115EA  E104               	bnz	u6760
  5534  0115EC  0E7F               	movlw	127
  5535  0115EE  18DE               	xorwf	postinc2,w,c
  5536  0115F0  B4D8               	btfsc	status,2,c
  5537  0115F2  D007               	goto	l1638
  5538  0115F4                     u6760:
  5539                           
  5540                           ;Motor.c: 85: lMotor->mDelta --;
  5541  0115F4  C072  FFD9         	movff	_lMotor,fsr2l
  5542  0115F8  C073  FFDA         	movff	_lMotor+1,fsr2h
  5543  0115FC  06DE               	decf	postinc2,f,c
  5544  0115FE  0E00               	movlw	0
  5545  011600  5ADD               	subwfb	postdec2,f,c
  5546  011602                     l1638:
  5547                           
  5548                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  5549  011602  0E7B               	movlw	low _PortE
  5550  011604  0100               	movlb	0	; () banked
  5551  011606  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  5552  011608  0E00               	movlw	high _PortE
  5553  01160A  0100               	movlb	0	; () banked
  5554  01160C  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5555  01160E  0E00               	movlw	0
  5556  011610  0100               	movlb	0	; () banked
  5557  011612  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  5558  011614  0E01               	movlw	1
  5559  011616  0100               	movlb	0	; () banked
  5560  011618  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
  5561  01161A  ECDE  F08B         	call	_Port_SetPin	;wreg free
  5562                           
  5563                           ;Motor.c: 88: }
  5564  01161E  D01F               	goto	l1639
  5565  011620                     l1637:
  5566                           
  5567                           ;Motor.c: 89: else
  5568                           ;Motor.c: 90: {
  5569                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  5570  011620  C072  FFD9         	movff	_lMotor,fsr2l
  5571  011624  C073  FFDA         	movff	_lMotor+1,fsr2h
  5572  011628  04DE               	decf	postinc2,w,c
  5573  01162A  E104               	bnz	u6770
  5574  01162C  0E80               	movlw	128
  5575  01162E  18DE               	xorwf	postinc2,w,c
  5576  011630  B4D8               	btfsc	status,2,c
  5577  011632  D007               	goto	l1640
  5578  011634                     u6770:
  5579                           
  5580                           ;Motor.c: 92: lMotor->mDelta ++;
  5581  011634  C072  FFD9         	movff	_lMotor,fsr2l
  5582  011638  C073  FFDA         	movff	_lMotor+1,fsr2h
  5583  01163C  2ADE               	incf	postinc2,f,c
  5584  01163E  0E00               	movlw	0
  5585  011640  22DD               	addwfc	postdec2,f,c
  5586  011642                     l1640:
  5587                           
  5588                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  5589  011642  0E7B               	movlw	low _PortE
  5590  011644  0100               	movlb	0	; () banked
  5591  011646  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  5592  011648  0E00               	movlw	high _PortE
  5593  01164A  0100               	movlb	0	; () banked
  5594  01164C  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5595  01164E  0E00               	movlw	0
  5596  011650  0100               	movlb	0	; () banked
  5597  011652  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  5598  011654  0E00               	movlw	0
  5599  011656  0100               	movlb	0	; () banked
  5600  011658  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
  5601  01165A  ECDE  F08B         	call	_Port_SetPin	;wreg free
  5602  01165E                     l1639:
  5603                           
  5604                           ;Motor.c: 95: }
  5605                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  5606  01165E  0E7B               	movlw	low _PortE
  5607  011660  0100               	movlb	0	; () banked
  5608  011662  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  5609  011664  0E00               	movlw	high _PortE
  5610  011666  0100               	movlb	0	; () banked
  5611  011668  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5612  01166A  0E01               	movlw	1
  5613  01166C  0100               	movlb	0	; () banked
  5614  01166E  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  5615  011670  0E01               	movlw	1
  5616  011672  0100               	movlb	0	; () banked
  5617  011674  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
  5618  011676  ECDE  F08B         	call	_Port_SetPin	;wreg free
  5619                           
  5620                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  5621  01167A  0E7B               	movlw	low _PortE
  5622  01167C  0100               	movlb	0	; () banked
  5623  01167E  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
  5624  011680  0E00               	movlw	high _PortE
  5625  011682  0100               	movlb	0	; () banked
  5626  011684  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5627  011686  0E01               	movlw	1
  5628  011688  0100               	movlb	0	; () banked
  5629  01168A  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
  5630  01168C  0E00               	movlw	0
  5631  01168E  0100               	movlb	0	; () banked
  5632  011690  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
  5633  011692  ECDE  F08B         	call	_Port_SetPin	;wreg free
  5634                           
  5635                           ;Motor.c: 101: MXK_Release();
  5636  011696  ECDA  F096         	call	_MXK_Release	;wreg free
  5637                           
  5638                           ;Motor.c: 102: Timer0_Restart();
  5639  01169A  EC13  F097         	call	_Timer0_Restart	;wreg free
  5640                           
  5641                           ;Motor.c: 103: return;
  5642  01169E  0012               	return	
  5643  0116A0                     l1636:
  5644                           
  5645                           ;Motor.c: 104: }
  5646                           ;Motor.c: 105: MXK_Release();
  5647  0116A0  ECDA  F096         	call	_MXK_Release	;wreg free
  5648                           
  5649                           ;Motor.c: 106: Timer0_Stop();
  5650  0116A4  EC30  F097         	call	_Timer0_Stop	;wreg free
  5651                           
  5652                           ;Motor.c: 107: return;
  5653  0116A8  0012               	return	
  5654  0116AA                     l1635:
  5655                           
  5656                           ;Motor.c: 108: }
  5657                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  5658  0116AA  C06B  F0C1         	movff	_lStepFunction,MXK_Queue@pCallback
  5659  0116AE  C06C  F0C2         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  5660  0116B2  C06D  F0C3         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  5661  0116B6  EC05  F097         	call	_MXK_Queue	;wreg free
  5662  0116BA  0012               	return		;funcret
  5663  0116BC                     __end_of_Motor_Step:
  5664                           	opt stack 0
  5665                           tosu	equ	0xFFF
  5666                           tosh	equ	0xFFE
  5667                           tosl	equ	0xFFD
  5668                           pclath	equ	0xFFA
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodl	equ	0xFF3
  5674                           postinc0	equ	0xFEE
  5675                           wreg	equ	0xFE8
  5676                           postdec1	equ	0xFE5
  5677                           fsr1h	equ	0xFE2
  5678                           fsr1l	equ	0xFE1
  5679                           indf2	equ	0xFDF
  5680                           postinc2	equ	0xFDE
  5681                           postdec2	equ	0xFDD
  5682                           plusw2	equ	0xFDB
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _Timer0_Stop *****************
  5688 ;; Defined at:
  5689 ;;		line 89 in file "Library/Timer0.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		None
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    7
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_Motor_Step
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text17
  5718  012E60                     __ptext17:
  5719                           	opt stack 0
  5720  012E60                     _Timer0_Stop:
  5721                           	opt stack 21
  5722                           
  5723                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  5724                           
  5725                           ;incstack = 0
  5726  012E60  9AF2               	bcf	intcon,5,c	;volatile
  5727                           
  5728                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  5729  012E62  94F2               	bcf	intcon,2,c	;volatile
  5730  012E64  0012               	return		;funcret
  5731  012E66                     __end_of_Timer0_Stop:
  5732                           	opt stack 0
  5733                           tosu	equ	0xFFF
  5734                           tosh	equ	0xFFE
  5735                           tosl	equ	0xFFD
  5736                           pclath	equ	0xFFA
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodl	equ	0xFF3
  5742                           intcon	equ	0xFF2
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           postdec1	equ	0xFE5
  5746                           fsr1h	equ	0xFE2
  5747                           fsr1l	equ	0xFE1
  5748                           indf2	equ	0xFDF
  5749                           postinc2	equ	0xFDE
  5750                           postdec2	equ	0xFDD
  5751                           plusw2	equ	0xFDB
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _Timer0_Restart *****************
  5757 ;; Defined at:
  5758 ;;		line 83 in file "Library/Timer0.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;		None
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      void 
  5765 ;; Registers used:
  5766 ;;		None
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;Total ram usage:        0 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    7
  5779 ;; This function calls:
  5780 ;;		Nothing
  5781 ;; This function is called by:
  5782 ;;		_Motor_Step
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text18
  5787  012E26                     __ptext18:
  5788                           	opt stack 0
  5789  012E26                     _Timer0_Restart:
  5790                           	opt stack 21
  5791                           
  5792                           ;Timer0.c: 85: TMR0 = COUNTER;
  5793                           
  5794                           ;incstack = 0
  5795  012E26  C02C  FFD6         	movff	_COUNTER,4054	;volatile
  5796  012E2A  C02D  FFD7         	movff	_COUNTER+1,4055	;volatile
  5797                           
  5798                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  5799  012E2E  8AF2               	bsf	intcon,5,c	;volatile
  5800  012E30  0012               	return		;funcret
  5801  012E32                     __end_of_Timer0_Restart:
  5802                           	opt stack 0
  5803                           tosu	equ	0xFFF
  5804                           tosh	equ	0xFFE
  5805                           tosl	equ	0xFFD
  5806                           pclath	equ	0xFFA
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           postdec1	equ	0xFE5
  5816                           fsr1h	equ	0xFE2
  5817                           fsr1l	equ	0xFE1
  5818                           indf2	equ	0xFDF
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           plusw2	equ	0xFDB
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _MXK_SwitchTo *****************
  5827 ;; Defined at:
  5828 ;;		line 105 in file "Library/MXK.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  pModule         1    wreg     enum E6925
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  pModule         1    7[BANK0 ] enum E6925
  5833 ;;  CUR             1    6[BANK0 ] unsigned char 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      unsigned char 
  5836 ;; Registers used:
  5837 ;;		wreg, status,2, status,0, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;Total ram usage:        2 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    8
  5850 ;; This function calls:
  5851 ;;		_delay_us
  5852 ;; This function is called by:
  5853 ;;		_Motor_Step
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text19
  5858  0129F6                     __ptext19:
  5859                           	opt stack 0
  5860  0129F6                     _MXK_SwitchTo:
  5861                           	opt stack 20
  5862                           
  5863                           ;incstack = 0
  5864                           ;MXK_SwitchTo@pModule stored from wreg
  5865  0129F6  0100               	movlb	0	; () banked
  5866  0129F8  6FC8               	movwf	MXK_SwitchTo@pModule& (0+255),b
  5867                           
  5868                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  5869  0129FA  5086               	movf	3974,w,c	;volatile
  5870  0129FC  0B0F               	andlw	15
  5871  0129FE  0100               	movlb	0	; () banked
  5872  012A00  6FC7               	movwf	MXK_SwitchTo@CUR& (0+255),b
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  5876  012A02  504A               	movf	_Bus_State,w,c
  5877  012A04  A4D8               	btfss	status,2,c
  5878  012A06  D002               	goto	l1738
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;MXK.c: 110: return 0;
  5882  012A08  0E00               	movlw	0
  5883                           
  5884                           ; BSR set to: 0
  5885  012A0A  0012               	return	
  5886  012A0C                     l1738:
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  5890                           
  5891                           ; BSR set to: 0
  5892  012A0C  0E00               	movlw	0
  5893  012A0E  6E4A               	movwf	_Bus_State,c
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;MXK.c: 114: if (CUR != pModule)
  5897  012A10  0100               	movlb	0	; () banked
  5898  012A12  51C8               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  5899  012A14  0100               	movlb	0	; () banked
  5900  012A16  19C7               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  5901  012A18  B4D8               	btfsc	status,2,c
  5902  012A1A  D00C               	goto	l1740
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;MXK.c: 115: {
  5906                           ;MXK.c: 116: PORTG &= ~(0xF);
  5907  012A1C  0EF0               	movlw	240
  5908  012A1E  1686               	andwf	3974,f,c	;volatile
  5909                           
  5910                           ;MXK.c: 117: PORTG |= pModule;
  5911  012A20  0100               	movlb	0	; () banked
  5912  012A22  51C8               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  5913  012A24  1286               	iorwf	3974,f,c	;volatile
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;MXK.c: 120: delay_us(10);
  5917  012A26  0E00               	movlw	0
  5918  012A28  0100               	movlb	0	; () banked
  5919  012A2A  6FC2               	movwf	(delay_us@us+1)& (0+255),b
  5920  012A2C  0E0A               	movlw	10
  5921  012A2E  6FC1               	movwf	delay_us@us& (0+255),b
  5922  012A30  ECCE  F093         	call	_delay_us	;wreg free
  5923  012A34                     l1740:
  5924                           
  5925                           ;MXK.c: 121: }
  5926                           ;MXK.c: 122: return 1;
  5927  012A34  0E01               	movlw	1
  5928  012A36  0012               	return	
  5929  012A38                     __end_of_MXK_SwitchTo:
  5930                           	opt stack 0
  5931                           tosu	equ	0xFFF
  5932                           tosh	equ	0xFFE
  5933                           tosl	equ	0xFFD
  5934                           pclath	equ	0xFFA
  5935                           tblptru	equ	0xFF8
  5936                           tblptrh	equ	0xFF7
  5937                           tblptrl	equ	0xFF6
  5938                           tablat	equ	0xFF5
  5939                           prodl	equ	0xFF3
  5940                           intcon	equ	0xFF2
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1h	equ	0xFE2
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           postinc2	equ	0xFDE
  5948                           postdec2	equ	0xFDD
  5949                           plusw2	equ	0xFDB
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954 ;; *************** function _MXK_Release *****************
  5955 ;; Defined at:
  5956 ;;		line 130 in file "Library/MXK.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;		None
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;		None
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      unsigned char 
  5963 ;; Registers used:
  5964 ;;		wreg, status,2, status,0
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;Total ram usage:        0 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    7
  5977 ;; This function calls:
  5978 ;;		Nothing
  5979 ;; This function is called by:
  5980 ;;		_Motor_Step
  5981 ;;		_main
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text20
  5986  012DB4                     __ptext20:
  5987                           	opt stack 0
  5988  012DB4                     _MXK_Release:
  5989                           	opt stack 23
  5990                           
  5991                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  5992                           
  5993                           ;incstack = 0
  5994  012DB4  0E01               	movlw	1
  5995  012DB6  6E4A               	movwf	_Bus_State,c
  5996                           
  5997                           ;MXK.c: 134: if (lQueue != 0)
  5998  012DB8  0100               	movlb	0	; () banked
  5999  012DBA  5168               	movf	_lQueue& (0+255),w,b	;volatile
  6000  012DBC  0100               	movlb	0	; () banked
  6001  012DBE  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  6002  012DC0  0100               	movlb	0	; () banked
  6003  012DC2  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  6004  012DC4  B4D8               	btfsc	status,2,c
  6005  012DC6  D002               	goto	l1743
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;MXK.c: 135: return 1;
  6009  012DC8  0E01               	movlw	1
  6010                           
  6011                           ; BSR set to: 0
  6012  012DCA  0012               	return	
  6013  012DCC                     l1743:
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;MXK.c: 137: return 0;
  6017                           
  6018                           ; BSR set to: 0
  6019  012DCC  0E00               	movlw	0
  6020  012DCE  0012               	return	
  6021  012DD0                     __end_of_MXK_Release:
  6022                           	opt stack 0
  6023                           tosu	equ	0xFFF
  6024                           tosh	equ	0xFFE
  6025                           tosl	equ	0xFFD
  6026                           pclath	equ	0xFFA
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodl	equ	0xFF3
  6032                           intcon	equ	0xFF2
  6033                           postinc0	equ	0xFEE
  6034                           wreg	equ	0xFE8
  6035                           postdec1	equ	0xFE5
  6036                           fsr1h	equ	0xFE2
  6037                           fsr1l	equ	0xFE1
  6038                           indf2	equ	0xFDF
  6039                           postinc2	equ	0xFDE
  6040                           postdec2	equ	0xFDD
  6041                           plusw2	equ	0xFDB
  6042                           fsr2h	equ	0xFDA
  6043                           fsr2l	equ	0xFD9
  6044                           status	equ	0xFD8
  6045                           
  6046 ;; *************** function _MXK_Queue *****************
  6047 ;; Defined at:
  6048 ;;		line 144 in file "Library/MXK.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  6051 ;;		 -> Absolute function(1), Motor_Step(1), 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6063 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;Total ram usage:        3 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    7
  6070 ;; This function calls:
  6071 ;;		Nothing
  6072 ;; This function is called by:
  6073 ;;		_Motor_Step
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text21
  6078  012E0A                     __ptext21:
  6079                           	opt stack 0
  6080  012E0A                     _MXK_Queue:
  6081                           	opt stack 21
  6082                           
  6083                           ;MXK.c: 146: lQueue = pCallback;
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;incstack = 0
  6087  012E0A  C0C1  F068         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  6088  012E0E  C0C2  F069         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  6089  012E12  C0C3  F06A         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  6090  012E16  0012               	return		;funcret
  6091  012E18                     __end_of_MXK_Queue:
  6092                           	opt stack 0
  6093                           tosu	equ	0xFFF
  6094                           tosh	equ	0xFFE
  6095                           tosl	equ	0xFFD
  6096                           pclath	equ	0xFFA
  6097                           tblptru	equ	0xFF8
  6098                           tblptrh	equ	0xFF7
  6099                           tblptrl	equ	0xFF6
  6100                           tablat	equ	0xFF5
  6101                           prodl	equ	0xFF3
  6102                           intcon	equ	0xFF2
  6103                           postinc0	equ	0xFEE
  6104                           wreg	equ	0xFE8
  6105                           postdec1	equ	0xFE5
  6106                           fsr1h	equ	0xFE2
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           plusw2	equ	0xFDB
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116 ;; *************** function _MXK_BlockSwitchTo *****************
  6117 ;; Defined at:
  6118 ;;		line 82 in file "Library/MXK.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  pModule         1    wreg     enum E6925
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  pModule         1    7[BANK0 ] enum E6925
  6123 ;;  CUR             1    6[BANK0 ] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      unsigned char 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;Total ram usage:        2 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    8
  6140 ;; This function calls:
  6141 ;;		_delay_us
  6142 ;; This function is called by:
  6143 ;;		_main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           	psect	text22
  6148  012AB6                     __ptext22:
  6149                           	opt stack 0
  6150  012AB6                     _MXK_BlockSwitchTo:
  6151                           	opt stack 22
  6152                           
  6153                           ;incstack = 0
  6154                           ;MXK_BlockSwitchTo@pModule stored from wreg
  6155  012AB6  0100               	movlb	0	; () banked
  6156  012AB8  6FC8               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  6157                           
  6158                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  6159  012ABA  5086               	movf	3974,w,c	;volatile
  6160  012ABC  0B0F               	andlw	15
  6161  012ABE  0100               	movlb	0	; () banked
  6162  012AC0  6FC7               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  6163  012AC2                     
  6164                           ; BSR set to: 0
  6165                           
  6166                           ; BSR set to: 0
  6167  012AC2  504A               	movf	_Bus_State,w,c
  6168  012AC4  B4D8               	btfsc	status,2,c
  6169  012AC6  D7FD               	goto	l1732
  6170                           
  6171                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  6172  012AC8  0E00               	movlw	0
  6173  012ACA  6E4A               	movwf	_Bus_State,c
  6174                           
  6175                           ;MXK.c: 90: if (CUR != pModule)
  6176  012ACC  0100               	movlb	0	; () banked
  6177  012ACE  51C8               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  6178  012AD0  0100               	movlb	0	; () banked
  6179  012AD2  19C7               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  6180  012AD4  B4D8               	btfsc	status,2,c
  6181  012AD6  D00C               	goto	l1734
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;MXK.c: 91: {
  6185                           ;MXK.c: 92: PORTG &= ~(0xF);
  6186  012AD8  0EF0               	movlw	240
  6187  012ADA  1686               	andwf	3974,f,c	;volatile
  6188                           
  6189                           ;MXK.c: 93: PORTG |= pModule;
  6190  012ADC  0100               	movlb	0	; () banked
  6191  012ADE  51C8               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  6192  012AE0  1286               	iorwf	3974,f,c	;volatile
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;MXK.c: 96: delay_us(10);
  6196  012AE2  0E00               	movlw	0
  6197  012AE4  0100               	movlb	0	; () banked
  6198  012AE6  6FC2               	movwf	(delay_us@us+1)& (0+255),b
  6199  012AE8  0E0A               	movlw	10
  6200  012AEA  6FC1               	movwf	delay_us@us& (0+255),b
  6201  012AEC  ECCE  F093         	call	_delay_us	;wreg free
  6202  012AF0                     l1734:
  6203                           
  6204                           ;MXK.c: 97: }
  6205                           ;MXK.c: 98: return 1;
  6206  012AF0  0E01               	movlw	1
  6207  012AF2  0012               	return	
  6208  012AF4                     __end_of_MXK_BlockSwitchTo:
  6209                           	opt stack 0
  6210                           tosu	equ	0xFFF
  6211                           tosh	equ	0xFFE
  6212                           tosl	equ	0xFFD
  6213                           pclath	equ	0xFFA
  6214                           tblptru	equ	0xFF8
  6215                           tblptrh	equ	0xFF7
  6216                           tblptrl	equ	0xFF6
  6217                           tablat	equ	0xFF5
  6218                           prodl	equ	0xFF3
  6219                           intcon	equ	0xFF2
  6220                           postinc0	equ	0xFEE
  6221                           wreg	equ	0xFE8
  6222                           postdec1	equ	0xFE5
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _delay_us *****************
  6234 ;; Defined at:
  6235 ;;		line 255 in file "Library/Types.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  us              2    0[BANK0 ] unsigned short 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;  u               4    2[BANK0 ] unsigned long 
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, status,2, status,0
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6249 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;Total ram usage:        6 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    7
  6256 ;; This function calls:
  6257 ;;		Nothing
  6258 ;; This function is called by:
  6259 ;;		_MXK_BlockSwitchTo
  6260 ;;		_MXK_SwitchTo
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text23
  6265  01279C                     __ptext23:
  6266                           	opt stack 0
  6267  01279C                     _delay_us:
  6268                           	opt stack 20
  6269                           
  6270                           ;Types.c: 256: unsigned long u;
  6271                           ;Types.c: 257: while (us--) {
  6272                           
  6273                           ;incstack = 0
  6274  01279C  D01C               	goto	u6190
  6275  01279E                     l9444:
  6276                           
  6277                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  6278  01279E  0E00               	movlw	0
  6279  0127A0  0100               	movlb	0	; () banked
  6280  0127A2  6FC3               	movwf	delay_us@u& (0+255),b
  6281  0127A4  0E00               	movlw	0
  6282  0127A6  6FC4               	movwf	(delay_us@u+1)& (0+255),b
  6283  0127A8  0E00               	movlw	0
  6284  0127AA  6FC5               	movwf	(delay_us@u+2)& (0+255),b
  6285  0127AC  0E00               	movlw	0
  6286  0127AE  6FC6               	movwf	(delay_us@u+3)& (0+255),b
  6287  0127B0                     l9446:
  6288                           
  6289                           ; BSR set to: 0
  6290  0127B0  0100               	movlb	0	; () banked
  6291  0127B2  51C3               	movf	delay_us@u& (0+255),w,b
  6292  0127B4  0100               	movlb	0	; () banked
  6293  0127B6  11C4               	iorwf	(delay_us@u+1)& (0+255),w,b
  6294  0127B8  0100               	movlb	0	; () banked
  6295  0127BA  11C5               	iorwf	(delay_us@u+2)& (0+255),w,b
  6296  0127BC  0100               	movlb	0	; () banked
  6297  0127BE  11C6               	iorwf	(delay_us@u+3)& (0+255),w,b
  6298  0127C0  A4D8               	btfss	status,2,c
  6299  0127C2  D009               	goto	u6190
  6300                           
  6301                           ; BSR set to: 0
  6302                           
  6303                           ; BSR set to: 0
  6304  0127C4  F000               	nop		; ;# 
  6305  0127C6  0E01               	movlw	1
  6306  0127C8  0100               	movlb	0	; () banked
  6307  0127CA  27C3               	addwf	delay_us@u& (0+255),f,b
  6308  0127CC  0E00               	movlw	0
  6309  0127CE  23C4               	addwfc	(delay_us@u+1)& (0+255),f,b
  6310  0127D0  23C5               	addwfc	(delay_us@u+2)& (0+255),f,b
  6311  0127D2  23C6               	addwfc	(delay_us@u+3)& (0+255),f,b
  6312  0127D4  D7ED               	goto	l9446
  6313  0127D6                     u6190:
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318  0127D6  0100               	movlb	0	; () banked
  6319  0127D8  07C1               	decf	delay_us@us& (0+255),f,b
  6320  0127DA  A0D8               	btfss	status,0,c
  6321  0127DC  07C2               	decf	(delay_us@us+1)& (0+255),f,b
  6322  0127DE  0100               	movlb	0	; () banked
  6323  0127E0  29C1               	incf	delay_us@us& (0+255),w,b
  6324  0127E2  E1DD               	bnz	l9444
  6325  0127E4  0100               	movlb	0	; () banked
  6326  0127E6  29C2               	incf	(delay_us@us+1)& (0+255),w,b
  6327  0127E8  B4D8               	btfsc	status,2,c
  6328  0127EA  0012               	return	
  6329  0127EC  D7D8               	goto	l832
  6330  0127EE                     __end_of_delay_us:
  6331                           	opt stack 0
  6332                           tosu	equ	0xFFF
  6333                           tosh	equ	0xFFE
  6334                           tosl	equ	0xFFD
  6335                           pclath	equ	0xFFA
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodl	equ	0xFF3
  6341                           intcon	equ	0xFF2
  6342                           postinc0	equ	0xFEE
  6343                           wreg	equ	0xFE8
  6344                           postdec1	equ	0xFE5
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           plusw2	equ	0xFDB
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function _LCD_Init *****************
  6356 ;; Defined at:
  6357 ;;		line 172 in file "Library/LCD.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  i               2   55[BANK0 ] unsigned short 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;Total ram usage:        4 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:   15
  6378 ;; This function calls:
  6379 ;;		_Configure_GPIOs
  6380 ;;		_LCD_Fill
  6381 ;;		_LCD_Write
  6382 ;;		_Set_Rotation
  6383 ;;		_delay_ms
  6384 ;; This function is called by:
  6385 ;;		_main
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text24
  6390  0112C4                     __ptext24:
  6391                           	opt stack 0
  6392  0112C4                     _LCD_Init:
  6393                           	opt stack 15
  6394                           
  6395                           ;LCD.c: 174: UINT16 i;
  6396                           ;LCD.c: 175: Configure_GPIOs();
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;incstack = 0
  6400  0112C4  ECD9  F091         	call	_Configure_GPIOs	;wreg free
  6401                           
  6402                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  6403  0112C8  0E00               	movlw	0
  6404  0112CA  0100               	movlb	0	; () banked
  6405  0112CC  6FF9               	movwf	(LCD_Init@i+1)& (0+255),b
  6406  0112CE  0E00               	movlw	0
  6407  0112D0  6FF8               	movwf	LCD_Init@i& (0+255),b
  6408                           
  6409                           ; BSR set to: 0
  6410  0112D2  0100               	movlb	0	; () banked
  6411  0112D4  51F9               	movf	(LCD_Init@i+1)& (0+255),w,b
  6412  0112D6  E106               	bnz	u6840
  6413  0112D8  0E59               	movlw	89
  6414  0112DA  0100               	movlb	0	; () banked
  6415  0112DC  5DF8               	subwf	LCD_Init@i& (0+255),w,b
  6416  0112DE  B0D8               	btfsc	status,0,c
  6417  0112E0  D08B               	goto	u6880
  6418  0112E2  D001               	goto	l85
  6419  0112E4                     u6840:
  6420                           
  6421                           ; BSR set to: 0
  6422  0112E4  D089               	goto	u6880
  6423  0112E6                     l85:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;LCD.c: 178: {
  6427                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  6428                           
  6429                           ; BSR set to: 0
  6430  0112E6  90D8               	bcf	status,0,c
  6431  0112E8  0100               	movlb	0	; () banked
  6432  0112EA  35F8               	rlcf	LCD_Init@i& (0+255),w,b
  6433  0112EC  6EF6               	movwf	tblptrl,c
  6434  0112EE  0100               	movlb	0	; () banked
  6435  0112F0  35F9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6436  0112F2  6EF7               	movwf	tblptrh,c
  6437  0112F4  0E23               	movlw	low _InitList
  6438  0112F6  26F6               	addwf	tblptrl,f,c
  6439  0112F8  0EFD               	movlw	high _InitList
  6440  0112FA  22F7               	addwfc	tblptrh,f,c
  6441  0112FC                     	if	1	;There are 3 active tblptr bytes
  6442  0112FC  6AF8               	clrf	tblptru,c
  6443  0112FE  0E00               	movlw	low (__mediumconst shr (0+16))
  6444  011300  22F8               	addwfc	tblptru,f,c
  6445  011302                     	endif
  6446  011302  0009               	tblrd		*+
  6447  011304  0E80               	movlw	128
  6448  011306  18F5               	xorwf	tablat,w,c
  6449  011308  0009               	tblrd		*+
  6450  01130A  10F5               	iorwf	tablat,w,c
  6451  01130C  A4D8               	btfss	status,2,c
  6452  01130E  D022               	goto	l87
  6453                           
  6454                           ; BSR set to: 0
  6455  011310  0100               	movlb	0	; () banked
  6456  011312  51F9               	movf	(LCD_Init@i+1)& (0+255),w,b
  6457  011314  E11F               	bnz	l10280
  6458  011316  0E58               	movlw	88
  6459  011318  0100               	movlb	0	; () banked
  6460  01131A  5DF8               	subwf	LCD_Init@i& (0+255),w,b
  6461  01131C  B0D8               	btfsc	status,0,c
  6462  01131E  D01A               	goto	l87
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;LCD.c: 180: delay_ms(InitList[++i]);
  6466  011320  0100               	movlb	0	; () banked
  6467  011322  4BF8               	infsnz	LCD_Init@i& (0+255),f,b
  6468  011324  2BF9               	incf	(LCD_Init@i+1)& (0+255),f,b
  6469  011326  90D8               	bcf	status,0,c
  6470  011328  0100               	movlb	0	; () banked
  6471  01132A  35F8               	rlcf	LCD_Init@i& (0+255),w,b
  6472  01132C  6EF6               	movwf	tblptrl,c
  6473  01132E  0100               	movlb	0	; () banked
  6474  011330  35F9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6475  011332  6EF7               	movwf	tblptrh,c
  6476  011334  0E23               	movlw	low _InitList
  6477  011336  26F6               	addwf	tblptrl,f,c
  6478  011338  0EFD               	movlw	high _InitList
  6479  01133A  22F7               	addwfc	tblptrh,f,c
  6480  01133C                     	if	1	;There are 3 active tblptr bytes
  6481  01133C  6AF8               	clrf	tblptru,c
  6482  01133E  0E00               	movlw	low (__mediumconst shr (0+16))
  6483  011340  22F8               	addwfc	tblptru,f,c
  6484  011342                     	endif
  6485  011342  0009               	tblrd		*+
  6486  011344  CFF5 F0C1          	movff	tablat,delay_ms@ms
  6487  011348  000A               	tblrd		*-
  6488  01134A  CFF5 F0C2          	movff	tablat,delay_ms@ms+1
  6489  01134E  EC7C  F092         	call	_delay_ms	;wreg free
  6490  011352  D04B               	goto	l90
  6491  011354                     l87:
  6492  011354                     l10280:
  6493                           
  6494                           ;LCD.c: 181: else
  6495                           ;LCD.c: 182: {
  6496                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  6497  011354  90D8               	bcf	status,0,c
  6498  011356  0100               	movlb	0	; () banked
  6499  011358  35F8               	rlcf	LCD_Init@i& (0+255),w,b
  6500  01135A  6EF6               	movwf	tblptrl,c
  6501  01135C  0100               	movlb	0	; () banked
  6502  01135E  35F9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6503  011360  6EF7               	movwf	tblptrh,c
  6504  011362  0E23               	movlw	low _InitList
  6505  011364  26F6               	addwf	tblptrl,f,c
  6506  011366  0EFD               	movlw	high _InitList
  6507  011368  22F7               	addwfc	tblptrh,f,c
  6508  01136A                     	if	1	;There are 3 active tblptr bytes
  6509  01136A  6AF8               	clrf	tblptru,c
  6510  01136C  0E00               	movlw	low (__mediumconst shr (0+16))
  6511  01136E  22F8               	addwfc	tblptru,f,c
  6512  011370                     	endif
  6513  011370  0009               	tblrd		*+
  6514  011372  0E00               	movlw	0
  6515  011374  5EF5               	subwf	tablat,f,c
  6516  011376  0009               	tblrd		*+
  6517  011378  0E01               	movlw	1
  6518  01137A  5AF5               	subwfb	tablat,f,c
  6519  01137C  A0D8               	btfss	status,0,c
  6520  01137E  D020               	goto	l89
  6521                           
  6522                           ; BSR set to: 0
  6523  011380  0E00               	movlw	0
  6524  011382  0100               	movlb	0	; () banked
  6525  011384  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6526  011386  90D8               	bcf	status,0,c
  6527  011388  0100               	movlb	0	; () banked
  6528  01138A  35F8               	rlcf	LCD_Init@i& (0+255),w,b
  6529  01138C  6EF6               	movwf	tblptrl,c
  6530  01138E  0100               	movlb	0	; () banked
  6531  011390  35F9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6532  011392  6EF7               	movwf	tblptrh,c
  6533  011394  0E23               	movlw	low _InitList
  6534  011396  26F6               	addwf	tblptrl,f,c
  6535  011398  0EFD               	movlw	high _InitList
  6536  01139A  22F7               	addwfc	tblptrh,f,c
  6537  01139C                     	if	1	;There are 3 active tblptr bytes
  6538  01139C  6AF8               	clrf	tblptru,c
  6539  01139E  0E00               	movlw	low (__mediumconst shr (0+16))
  6540  0113A0  22F8               	addwfc	tblptru,f,c
  6541  0113A2                     	endif
  6542  0113A2  0009               	tblrd		*+
  6543  0113A4  CFF5 F0F6          	movff	tablat,??_LCD_Init
  6544  0113A8  0009               	tblrd		*+
  6545  0113AA  CFF5 F0F7          	movff	tablat,??_LCD_Init+1
  6546  0113AE  C0F7  F0F6         	movff	??_LCD_Init+1,??_LCD_Init
  6547  0113B2  0100               	movlb	0	; () banked
  6548  0113B4  6BF7               	clrf	(??_LCD_Init+1)& (0+255),b
  6549  0113B6  0100               	movlb	0	; () banked
  6550  0113B8  51F6               	movf	??_LCD_Init& (0+255),w,b
  6551  0113BA  EC5C  F096         	call	_LCD_Write
  6552  0113BE  D015               	goto	l90
  6553  0113C0                     l89:
  6554                           
  6555                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  6556  0113C0  0E01               	movlw	1
  6557  0113C2  0100               	movlb	0	; () banked
  6558  0113C4  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6559  0113C6  90D8               	bcf	status,0,c
  6560  0113C8  0100               	movlb	0	; () banked
  6561  0113CA  35F8               	rlcf	LCD_Init@i& (0+255),w,b
  6562  0113CC  6EF6               	movwf	tblptrl,c
  6563  0113CE  0100               	movlb	0	; () banked
  6564  0113D0  35F9               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6565  0113D2  6EF7               	movwf	tblptrh,c
  6566  0113D4  0E23               	movlw	low _InitList
  6567  0113D6  26F6               	addwf	tblptrl,f,c
  6568  0113D8  0EFD               	movlw	high _InitList
  6569  0113DA  22F7               	addwfc	tblptrh,f,c
  6570  0113DC                     	if	1	;There are 3 active tblptr bytes
  6571  0113DC  6AF8               	clrf	tblptru,c
  6572  0113DE  0E00               	movlw	low (__mediumconst shr (0+16))
  6573  0113E0  22F8               	addwfc	tblptru,f,c
  6574  0113E2                     	endif
  6575  0113E2  0008               	tblrd		*
  6576  0113E4  50F5               	movf	tablat,w,c
  6577  0113E6  EC5C  F096         	call	_LCD_Write
  6578  0113EA                     l90:
  6579  0113EA  0100               	movlb	0	; () banked
  6580  0113EC  4BF8               	infsnz	LCD_Init@i& (0+255),f,b
  6581  0113EE  2BF9               	incf	(LCD_Init@i+1)& (0+255),f,b
  6582                           
  6583                           ; BSR set to: 0
  6584  0113F0  0100               	movlb	0	; () banked
  6585  0113F2  51F9               	movf	(LCD_Init@i+1)& (0+255),w,b
  6586  0113F4  E101               	bnz	l10290
  6587  0113F6  D770               	goto	L5
  6588  0113F8                     u6880:
  6589  0113F8                     l10290:
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;LCD.c: 185: }
  6593                           ;LCD.c: 186: }
  6594                           ;LCD.c: 187: delay_ms(100);
  6595  0113F8  0E00               	movlw	0
  6596  0113FA  0100               	movlb	0	; () banked
  6597  0113FC  6FC2               	movwf	(delay_ms@ms+1)& (0+255),b
  6598  0113FE  0E64               	movlw	100
  6599  011400  6FC1               	movwf	delay_ms@ms& (0+255),b
  6600  011402  EC7C  F092         	call	_delay_ms	;wreg free
  6601                           
  6602                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  6603  011406  0E00               	movlw	0
  6604  011408  0100               	movlb	0	; () banked
  6605  01140A  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6606  01140C  0E29               	movlw	41
  6607  01140E  EC5C  F096         	call	_LCD_Write
  6608                           
  6609                           ;LCD.c: 189: Set_Rotation(1);
  6610  011412  0E01               	movlw	1
  6611  011414  EC4B  F090         	call	_Set_Rotation
  6612                           
  6613                           ;LCD.c: 191: delay_ms(100);
  6614  011418  0E00               	movlw	0
  6615  01141A  0100               	movlb	0	; () banked
  6616  01141C  6FC2               	movwf	(delay_ms@ms+1)& (0+255),b
  6617  01141E  0E64               	movlw	100
  6618  011420  6FC1               	movwf	delay_ms@ms& (0+255),b
  6619  011422  EC7C  F092         	call	_delay_ms	;wreg free
  6620                           
  6621                           ;LCD.c: 192: LCD_Fill(0x0000);
  6622  011426  0E00               	movlw	0
  6623  011428  0100               	movlb	0	; () banked
  6624  01142A  6FCB               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  6625  01142C  0E00               	movlw	0
  6626  01142E  6FCA               	movwf	LCD_Fill@pColour& (0+255),b
  6627  011430  ECA2  F093         	call	_LCD_Fill	;wreg free
  6628  011434  0012               	return		;funcret
  6629  011436                     __end_of_LCD_Init:
  6630                           	opt stack 0
  6631                           tosu	equ	0xFFF
  6632                           tosh	equ	0xFFE
  6633                           tosl	equ	0xFFD
  6634                           pclath	equ	0xFFA
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postdec1	equ	0xFE5
  6644                           fsr1h	equ	0xFE2
  6645                           fsr1l	equ	0xFE1
  6646                           indf2	equ	0xFDF
  6647                           postinc2	equ	0xFDE
  6648                           postdec2	equ	0xFDD
  6649                           plusw2	equ	0xFDB
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _Set_Rotation *****************
  6655 ;; Defined at:
  6656 ;;		line 248 in file "Library/LCD.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;  m               1    wreg     unsigned char 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  m               1    5[BANK0 ] unsigned char 
  6661 ;;  rotation        1    6[BANK0 ] unsigned char 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;Total ram usage:        2 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    9
  6678 ;; This function calls:
  6679 ;;		_LCD_Write
  6680 ;; This function is called by:
  6681 ;;		_LCD_Init
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           	psect	text25
  6686  012096                     __ptext25:
  6687                           	opt stack 0
  6688  012096                     _Set_Rotation:
  6689                           	opt stack 20
  6690                           
  6691                           ;incstack = 0
  6692                           ;Set_Rotation@m stored from wreg
  6693  012096  0100               	movlb	0	; () banked
  6694  012098  6FC6               	movwf	Set_Rotation@m& (0+255),b
  6695                           
  6696                           ;LCD.c: 250: UINT8 rotation = 0x00;
  6697  01209A  0E00               	movlw	0
  6698  01209C  0100               	movlb	0	; () banked
  6699  01209E  6FC7               	movwf	Set_Rotation@rotation& (0+255),b
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  6703  0120A0  0E00               	movlw	0
  6704  0120A2  0100               	movlb	0	; () banked
  6705  0120A4  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6706  0120A6  0E36               	movlw	54
  6707  0120A8  EC5C  F096         	call	_LCD_Write
  6708                           
  6709                           ;LCD.c: 253: rotation = (m % 4);
  6710  0120AC  0100               	movlb	0	; () banked
  6711  0120AE  51C6               	movf	Set_Rotation@m& (0+255),w,b
  6712  0120B0  0B03               	andlw	3
  6713  0120B2  0100               	movlb	0	; () banked
  6714  0120B4  6FC7               	movwf	Set_Rotation@rotation& (0+255),b
  6715                           
  6716                           ;LCD.c: 255: switch(rotation)
  6717  0120B6  D02C               	goto	l117
  6718  0120B8                     
  6719                           ; BSR set to: 0
  6720                           ;LCD.c: 258: {
  6721                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  6722                           
  6723                           ; BSR set to: 0
  6724  0120B8  0E01               	movlw	1
  6725  0120BA  0100               	movlb	0	; () banked
  6726  0120BC  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6727  0120BE  0EC8               	movlw	200
  6728  0120C0  EC5C  F096         	call	_LCD_Write
  6729                           
  6730                           ;LCD.c: 260: w = 128;
  6731  0120C4  0E80               	movlw	128
  6732  0120C6  6E50               	movwf	_w,c
  6733                           
  6734                           ;LCD.c: 261: l = 128;
  6735  0120C8  0E80               	movlw	128
  6736  0120CA  6E4F               	movwf	_l,c
  6737                           
  6738                           ;LCD.c: 262: break;
  6739  0120CC  0012               	return	
  6740  0120CE                     
  6741                           ;LCD.c: 265: {
  6742                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  6743  0120CE  0E01               	movlw	1
  6744  0120D0  0100               	movlb	0	; () banked
  6745  0120D2  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6746  0120D4  0EA8               	movlw	168
  6747  0120D6  EC5C  F096         	call	_LCD_Write
  6748                           
  6749                           ;LCD.c: 267: w = 128;
  6750  0120DA  0E80               	movlw	128
  6751  0120DC  6E50               	movwf	_w,c
  6752                           
  6753                           ;LCD.c: 268: l = 128;
  6754  0120DE  0E80               	movlw	128
  6755  0120E0  6E4F               	movwf	_l,c
  6756                           
  6757                           ;LCD.c: 269: break;
  6758  0120E2  0012               	return	
  6759  0120E4                     
  6760                           ;LCD.c: 272: {
  6761                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  6762  0120E4  0E01               	movlw	1
  6763  0120E6  0100               	movlb	0	; () banked
  6764  0120E8  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6765  0120EA  0E08               	movlw	8
  6766  0120EC  EC5C  F096         	call	_LCD_Write
  6767                           
  6768                           ;LCD.c: 274: w = 128;
  6769  0120F0  0E80               	movlw	128
  6770  0120F2  6E50               	movwf	_w,c
  6771                           
  6772                           ;LCD.c: 275: l = 128;
  6773  0120F4  0E80               	movlw	128
  6774  0120F6  6E4F               	movwf	_l,c
  6775                           
  6776                           ;LCD.c: 276: break;
  6777  0120F8  0012               	return	
  6778  0120FA                     
  6779                           ;LCD.c: 279: {
  6780                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  6781  0120FA  0E01               	movlw	1
  6782  0120FC  0100               	movlb	0	; () banked
  6783  0120FE  6FC4               	movwf	LCD_Write@mode& (0+255),b
  6784  012100  0E68               	movlw	104
  6785  012102  EC5C  F096         	call	_LCD_Write
  6786                           
  6787                           ;LCD.c: 281: w = 128;
  6788  012106  0E80               	movlw	128
  6789  012108  6E50               	movwf	_w,c
  6790                           
  6791                           ;LCD.c: 282: l = 128;
  6792  01210A  0E80               	movlw	128
  6793  01210C  6E4F               	movwf	_l,c
  6794                           
  6795                           ;LCD.c: 284: }
  6796                           ;LCD.c: 285: }
  6797                           
  6798                           ;LCD.c: 283: break;
  6799  01210E  0012               	return	
  6800  012110                     l117:
  6801  012110  0100               	movlb	0	; () banked
  6802  012112  51C7               	movf	Set_Rotation@rotation& (0+255),w,b
  6803                           
  6804                           ; Switch size 1, requested type "space"
  6805                           ; Number of cases is 4, Range of values is 0 to 3
  6806                           ; switch strategies available:
  6807                           ; Name         Instructions Cycles
  6808                           ; simple_byte           13     7 (average)
  6809                           ;	Chosen strategy is simple_byte
  6810  012114  0A00               	xorlw	0	; case 0
  6811  012116  B4D8               	btfsc	status,2,c
  6812  012118  D7CF               	goto	l118
  6813  01211A  0A01               	xorlw	1	; case 1
  6814  01211C  B4D8               	btfsc	status,2,c
  6815  01211E  D7D7               	goto	l120
  6816  012120  0A03               	xorlw	3	; case 2
  6817  012122  B4D8               	btfsc	status,2,c
  6818  012124  D7DF               	goto	l121
  6819  012126  0A01               	xorlw	1	; case 3
  6820  012128  A4D8               	btfss	status,2,c
  6821  01212A  0012               	return	
  6822  01212C  D7E6               	goto	l122
  6823  01212E                     __end_of_Set_Rotation:
  6824                           	opt stack 0
  6825                           tosu	equ	0xFFF
  6826                           tosh	equ	0xFFE
  6827                           tosl	equ	0xFFD
  6828                           pclath	equ	0xFFA
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           postdec1	equ	0xFE5
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           plusw2	equ	0xFDB
  6844                           fsr2h	equ	0xFDA
  6845                           fsr2l	equ	0xFD9
  6846                           status	equ	0xFD8
  6847                           
  6848 ;; *************** function _LCD_Fill *****************
  6849 ;; Defined at:
  6850 ;;		line 287 in file "Library/LCD.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  pColour         2    9[BANK0 ] unsigned short 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;  j               1   12[BANK0 ] unsigned char 
  6855 ;;  i               1   11[BANK0 ] unsigned char 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6865 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;Total ram usage:        4 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:   10
  6872 ;; This function calls:
  6873 ;;		_LCD_Word_Write
  6874 ;;		_Set_Addr_Window
  6875 ;; This function is called by:
  6876 ;;		_LCD_Init
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text26
  6881  012744                     __ptext26:
  6882                           	opt stack 0
  6883  012744                     _LCD_Fill:
  6884                           	opt stack 19
  6885                           
  6886                           ;LCD.c: 296: UINT8 i = 0x00;
  6887                           
  6888                           ;incstack = 0
  6889  012744  0E00               	movlw	0
  6890  012746  0100               	movlb	0	; () banked
  6891  012748  6FCC               	movwf	LCD_Fill@i& (0+255),b
  6892                           
  6893                           ;LCD.c: 297: UINT8 j = 0x00;
  6894  01274A  0E00               	movlw	0
  6895  01274C  0100               	movlb	0	; () banked
  6896  01274E  6FCD               	movwf	LCD_Fill@j& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  6900  012750  0E00               	movlw	0
  6901  012752  0100               	movlb	0	; () banked
  6902  012754  6FC6               	movwf	Set_Addr_Window@ys& (0+255),b
  6903  012756  0450               	decf	_w,w,c
  6904  012758  0100               	movlb	0	; () banked
  6905  01275A  6FC7               	movwf	Set_Addr_Window@xe& (0+255),b
  6906  01275C  044F               	decf	_l,w,c
  6907  01275E  0100               	movlb	0	; () banked
  6908  012760  6FC8               	movwf	Set_Addr_Window@ye& (0+255),b
  6909  012762  0E00               	movlw	0
  6910  012764  ECB9  F08D         	call	_Set_Addr_Window
  6911                           
  6912                           ;LCD.c: 299: for (j = l; j > 0; j--)
  6913  012768  C04F  F0CD         	movff	_l,LCD_Fill@j
  6914  01276C                     l10058:
  6915  01276C  0100               	movlb	0	; () banked
  6916  01276E  51CD               	movf	LCD_Fill@j& (0+255),w,b
  6917  012770  0100               	movlb	0	; () banked
  6918  012772  B4D8               	btfsc	status,2,c
  6919  012774  0012               	return	
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;LCD.c: 300: for (i = w; i > 0; i--)
  6923                           
  6924                           ; BSR set to: 0
  6925  012776  C050  F0CC         	movff	_w,LCD_Fill@i
  6926  01277A                     l10062:
  6927                           
  6928                           ; BSR set to: 0
  6929  01277A  0100               	movlb	0	; () banked
  6930  01277C  51CC               	movf	LCD_Fill@i& (0+255),w,b
  6931  01277E  0100               	movlb	0	; () banked
  6932  012780  B4D8               	btfsc	status,2,c
  6933  012782  D009               	goto	u6630
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;LCD.c: 301: LCD_Word_Write(pColour);
  6937                           
  6938                           ; BSR set to: 0
  6939                           
  6940                           ; BSR set to: 0
  6941  012784  C0CA  F0C6         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  6942  012788  C0CB  F0C7         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  6943  01278C  EC8F  F096         	call	_LCD_Word_Write	;wreg free
  6944  012790  0100               	movlb	0	; () banked
  6945  012792  07CC               	decf	LCD_Fill@i& (0+255),f,b
  6946  012794  D7F2               	goto	l10062
  6947  012796                     u6630:
  6948                           
  6949                           ; BSR set to: 0
  6950                           
  6951                           ; BSR set to: 0
  6952  012796  0100               	movlb	0	; () banked
  6953  012798  07CD               	decf	LCD_Fill@j& (0+255),f,b
  6954  01279A  D7E8               	goto	l10058
  6955  01279C                     __end_of_LCD_Fill:
  6956                           	opt stack 0
  6957                           tosu	equ	0xFFF
  6958                           tosh	equ	0xFFE
  6959                           tosl	equ	0xFFD
  6960                           pclath	equ	0xFFA
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodl	equ	0xFF3
  6966                           intcon	equ	0xFF2
  6967                           postinc0	equ	0xFEE
  6968                           wreg	equ	0xFE8
  6969                           postdec1	equ	0xFE5
  6970                           fsr1h	equ	0xFE2
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           plusw2	equ	0xFDB
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980 ;; *************** function _Set_Addr_Window *****************
  6981 ;; Defined at:
  6982 ;;		line 214 in file "Library/LCD.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  xs              1    wreg     unsigned char 
  6985 ;;  ys              1    5[BANK0 ] unsigned char 
  6986 ;;  xe              1    6[BANK0 ] unsigned char 
  6987 ;;  ye              1    7[BANK0 ] unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  xs              1    8[BANK0 ] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6999 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;Total ram usage:        4 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    9
  7006 ;; This function calls:
  7007 ;;		_LCD_Write
  7008 ;; This function is called by:
  7009 ;;		_LCD_Fill
  7010 ;;		_RAM_Address_Set
  7011 ;;		_LCD_FillRectangle
  7012 ;;		_LCD_DrawPixel
  7013 ;;		_LCD_DrawField
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text27
  7018  011B72                     __ptext27:
  7019                           	opt stack 0
  7020  011B72                     _Set_Addr_Window:
  7021                           	opt stack 19
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;incstack = 0
  7025                           ;Set_Addr_Window@xs stored from wreg
  7026  011B72  0100               	movlb	0	; () banked
  7027  011B74  6FC9               	movwf	Set_Addr_Window@xs& (0+255),b
  7028                           
  7029                           ;LCD.c: 216: ys+=2;
  7030  011B76  0E02               	movlw	2
  7031  011B78  0100               	movlb	0	; () banked
  7032  011B7A  27C6               	addwf	Set_Addr_Window@ys& (0+255),f,b
  7033                           
  7034                           ;LCD.c: 217: ye+=2;
  7035  011B7C  0E02               	movlw	2
  7036  011B7E  0100               	movlb	0	; () banked
  7037  011B80  27C8               	addwf	Set_Addr_Window@ye& (0+255),f,b
  7038                           
  7039                           ;LCD.c: 218: xs+=3;
  7040  011B82  0E03               	movlw	3
  7041  011B84  0100               	movlb	0	; () banked
  7042  011B86  27C9               	addwf	Set_Addr_Window@xs& (0+255),f,b
  7043                           
  7044                           ;LCD.c: 219: xe+=3;
  7045  011B88  0E03               	movlw	3
  7046  011B8A  0100               	movlb	0	; () banked
  7047  011B8C  27C7               	addwf	Set_Addr_Window@xe& (0+255),f,b
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
  7051  011B8E  0E00               	movlw	0
  7052  011B90  0100               	movlb	0	; () banked
  7053  011B92  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7054  011B94  0E2A               	movlw	42
  7055  011B96  EC5C  F096         	call	_LCD_Write
  7056                           
  7057                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
  7058  011B9A  0E01               	movlw	1
  7059  011B9C  0100               	movlb	0	; () banked
  7060  011B9E  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7061  011BA0  0E00               	movlw	0
  7062  011BA2  EC5C  F096         	call	_LCD_Write
  7063                           
  7064                           ;LCD.c: 223: LCD_Write(xs, 0x1);
  7065  011BA6  0E01               	movlw	1
  7066  011BA8  0100               	movlb	0	; () banked
  7067  011BAA  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7068  011BAC  0100               	movlb	0	; () banked
  7069  011BAE  51C9               	movf	Set_Addr_Window@xs& (0+255),w,b
  7070  011BB0  EC5C  F096         	call	_LCD_Write
  7071                           
  7072                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
  7073  011BB4  0E01               	movlw	1
  7074  011BB6  0100               	movlb	0	; () banked
  7075  011BB8  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7076  011BBA  0E00               	movlw	0
  7077  011BBC  EC5C  F096         	call	_LCD_Write
  7078                           
  7079                           ;LCD.c: 225: LCD_Write(xe, 0x1);
  7080  011BC0  0E01               	movlw	1
  7081  011BC2  0100               	movlb	0	; () banked
  7082  011BC4  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7083  011BC6  0100               	movlb	0	; () banked
  7084  011BC8  51C7               	movf	Set_Addr_Window@xe& (0+255),w,b
  7085  011BCA  EC5C  F096         	call	_LCD_Write
  7086                           
  7087                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
  7088  011BCE  0E00               	movlw	0
  7089  011BD0  0100               	movlb	0	; () banked
  7090  011BD2  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7091  011BD4  0E2B               	movlw	43
  7092  011BD6  EC5C  F096         	call	_LCD_Write
  7093                           
  7094                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
  7095  011BDA  0E01               	movlw	1
  7096  011BDC  0100               	movlb	0	; () banked
  7097  011BDE  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7098  011BE0  0E00               	movlw	0
  7099  011BE2  EC5C  F096         	call	_LCD_Write
  7100                           
  7101                           ;LCD.c: 228: LCD_Write(ys, 0x1);
  7102  011BE6  0E01               	movlw	1
  7103  011BE8  0100               	movlb	0	; () banked
  7104  011BEA  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7105  011BEC  0100               	movlb	0	; () banked
  7106  011BEE  51C6               	movf	Set_Addr_Window@ys& (0+255),w,b
  7107  011BF0  EC5C  F096         	call	_LCD_Write
  7108                           
  7109                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
  7110  011BF4  0E01               	movlw	1
  7111  011BF6  0100               	movlb	0	; () banked
  7112  011BF8  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7113  011BFA  0E00               	movlw	0
  7114  011BFC  EC5C  F096         	call	_LCD_Write
  7115                           
  7116                           ;LCD.c: 230: LCD_Write(ye, 0x1);
  7117  011C00  0E01               	movlw	1
  7118  011C02  0100               	movlb	0	; () banked
  7119  011C04  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7120  011C06  0100               	movlb	0	; () banked
  7121  011C08  51C8               	movf	Set_Addr_Window@ye& (0+255),w,b
  7122  011C0A  EC5C  F096         	call	_LCD_Write
  7123                           
  7124                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
  7125  011C0E  0E00               	movlw	0
  7126  011C10  0100               	movlb	0	; () banked
  7127  011C12  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7128  011C14  0E2C               	movlw	44
  7129  011C16  EC5C  F096         	call	_LCD_Write
  7130  011C1A  0012               	return		;funcret
  7131  011C1C                     __end_of_Set_Addr_Window:
  7132                           	opt stack 0
  7133                           tosu	equ	0xFFF
  7134                           tosh	equ	0xFFE
  7135                           tosl	equ	0xFFD
  7136                           pclath	equ	0xFFA
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodl	equ	0xFF3
  7142                           intcon	equ	0xFF2
  7143                           postinc0	equ	0xFEE
  7144                           wreg	equ	0xFE8
  7145                           postdec1	equ	0xFE5
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           plusw2	equ	0xFDB
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _LCD_Word_Write *****************
  7157 ;; Defined at:
  7158 ;;		line 198 in file "Library/LCD.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  value           2    5[BANK0 ] unsigned short 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7172 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;Total ram usage:        2 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    9
  7179 ;; This function calls:
  7180 ;;		_LCD_Write
  7181 ;; This function is called by:
  7182 ;;		_LCD_Fill
  7183 ;;		_LCD_FillRectangle
  7184 ;;		_LCD_DrawPixel
  7185 ;;		_LCD_DrawField
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text28
  7190  012D1E                     __ptext28:
  7191                           	opt stack 0
  7192  012D1E                     _LCD_Word_Write:
  7193                           	opt stack 19
  7194                           
  7195                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
  7196                           
  7197                           ;incstack = 0
  7198  012D1E  0E01               	movlw	1
  7199  012D20  0100               	movlb	0	; () banked
  7200  012D22  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7201  012D24  0100               	movlb	0	; () banked
  7202  012D26  51C7               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
  7203  012D28  EC5C  F096         	call	_LCD_Write
  7204                           
  7205                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
  7206  012D2C  0E01               	movlw	1
  7207  012D2E  0100               	movlb	0	; () banked
  7208  012D30  6FC4               	movwf	LCD_Write@mode& (0+255),b
  7209  012D32  0100               	movlb	0	; () banked
  7210  012D34  51C6               	movf	LCD_Word_Write@value& (0+255),w,b
  7211  012D36  EC5C  F096         	call	_LCD_Write
  7212  012D3A  0012               	return		;funcret
  7213  012D3C                     __end_of_LCD_Word_Write:
  7214                           	opt stack 0
  7215                           tosu	equ	0xFFF
  7216                           tosh	equ	0xFFE
  7217                           tosl	equ	0xFFD
  7218                           pclath	equ	0xFFA
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           prodl	equ	0xFF3
  7224                           intcon	equ	0xFF2
  7225                           postinc0	equ	0xFEE
  7226                           wreg	equ	0xFE8
  7227                           postdec1	equ	0xFE5
  7228                           fsr1h	equ	0xFE2
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           plusw2	equ	0xFDB
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           
  7238 ;; *************** function _LCD_Write *****************
  7239 ;; Defined at:
  7240 ;;		line 67 in file "Library/LCD.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;  value           1    wreg     unsigned char 
  7243 ;;  mode            1    3[BANK0 ] enum E6761
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  value           1    4[BANK0 ] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  1    wreg      void 
  7248 ;; Registers used:
  7249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7255 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;Total ram usage:        2 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    8
  7262 ;; This function calls:
  7263 ;;		_Mode_Set
  7264 ;;		_SPI_Send
  7265 ;; This function is called by:
  7266 ;;		_LCD_Init
  7267 ;;		_LCD_Word_Write
  7268 ;;		_Set_Addr_Window
  7269 ;;		_Set_Rotation
  7270 ;;		_LCD_WriteCMD
  7271 ;;		_LCD_WriteData
  7272 ;;		_LCD_Data_Write
  7273 ;;		_LCD_Data_Write_4k
  7274 ;;		_Invert_Display
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text29
  7279  012CB8                     __ptext29:
  7280                           	opt stack 0
  7281  012CB8                     _LCD_Write:
  7282                           	opt stack 20
  7283                           
  7284                           ;incstack = 0
  7285                           ;LCD_Write@value stored from wreg
  7286  012CB8  0100               	movlb	0	; () banked
  7287  012CBA  6FC5               	movwf	LCD_Write@value& (0+255),b
  7288                           
  7289                           ;LCD.c: 89: Mode_Set(mode);
  7290  012CBC  0100               	movlb	0	; () banked
  7291  012CBE  51C4               	movf	LCD_Write@mode& (0+255),w,b
  7292  012CC0  ECF5  F096         	call	_Mode_Set
  7293                           
  7294                           ;LCD.c: 90: SPI_Send(&SPI2, value);
  7295  012CC4  0EB5               	movlw	low _SPI2
  7296  012CC6  0100               	movlb	0	; () banked
  7297  012CC8  6FC1               	movwf	SPI_Send@pInput& (0+255),b
  7298  012CCA  0E01               	movlw	high _SPI2
  7299  012CCC  0100               	movlb	0	; () banked
  7300  012CCE  6FC2               	movwf	(SPI_Send@pInput+1)& (0+255),b
  7301  012CD0  C0C5  F0C3         	movff	LCD_Write@value,SPI_Send@pData
  7302  012CD4  EC11  F092         	call	_SPI_Send	;wreg free
  7303  012CD8  0012               	return		;funcret
  7304  012CDA                     __end_of_LCD_Write:
  7305                           	opt stack 0
  7306                           tosu	equ	0xFFF
  7307                           tosh	equ	0xFFE
  7308                           tosl	equ	0xFFD
  7309                           pclath	equ	0xFFA
  7310                           tblptru	equ	0xFF8
  7311                           tblptrh	equ	0xFF7
  7312                           tblptrl	equ	0xFF6
  7313                           tablat	equ	0xFF5
  7314                           prodl	equ	0xFF3
  7315                           intcon	equ	0xFF2
  7316                           postinc0	equ	0xFEE
  7317                           wreg	equ	0xFE8
  7318                           postdec1	equ	0xFE5
  7319                           fsr1h	equ	0xFE2
  7320                           fsr1l	equ	0xFE1
  7321                           indf2	equ	0xFDF
  7322                           postinc2	equ	0xFDE
  7323                           postdec2	equ	0xFDD
  7324                           plusw2	equ	0xFDB
  7325                           fsr2h	equ	0xFDA
  7326                           fsr2l	equ	0xFD9
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _SPI_Send *****************
  7330 ;; Defined at:
  7331 ;;		line 226 in file "Library/SPI.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;  pInput          2    0[BANK0 ] PTR struct SPI
  7334 ;;		 -> SPI1(11), SPI2(11), 
  7335 ;;  pData           1    2[BANK0 ] unsigned char 
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  1    wreg      unsigned char 
  7340 ;; Registers used:
  7341 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7347 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;Total ram usage:        3 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:    7
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_LCD_Write
  7358 ;;		_OutSeg
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text30
  7363  012422                     __ptext30:
  7364                           	opt stack 0
  7365  012422                     _SPI_Send:
  7366                           	opt stack 20
  7367                           
  7368                           ;SPI.c: 253: switch (pInput->mChannel)
  7369                           
  7370                           ;incstack = 0
  7371  012422  D026               	goto	l678
  7372  012424                     
  7373                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
  7374  012424  C093  FFD9         	movff	_PortC+4,fsr2l
  7375  012428  C094  FFDA         	movff	_PortC+5,fsr2h
  7376  01242C  0100               	movlb	0	; () banked
  7377  01242E  94DF               	bcf	indf2,2,c
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;SPI.c: 257: SSP1BUF = pData;
  7381  012430  C0C3  FFC9         	movff	SPI_Send@pData,4041	;volatile
  7382  012434                     
  7383                           ; BSR set to: 0
  7384  012434  A0C7               	btfss	4039,0,c	;volatile
  7385  012436  D7FE               	goto	l681
  7386                           
  7387                           ;SPI.c: 259: pData = SSP1BUF;
  7388  012438  CFC9 F0C3          	movff	4041,SPI_Send@pData	;volatile
  7389                           
  7390                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
  7391  01243C  C093  FFD9         	movff	_PortC+4,fsr2l
  7392  012440  C094  FFDA         	movff	_PortC+5,fsr2h
  7393  012444  0100               	movlb	0	; () banked
  7394  012446  84DF               	bsf	indf2,2,c
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;SPI.c: 261: return pData;
  7398                           ;	Return value of _SPI_Send is never used
  7399  012448  0012               	return	
  7400  01244A                     
  7401                           ; BSR set to: 0
  7402                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
  7403                           
  7404                           ; BSR set to: 0
  7405  01244A  C089  FFD9         	movff	_PortD+4,fsr2l
  7406  01244E  C08A  FFDA         	movff	_PortD+5,fsr2h
  7407  012452  0100               	movlb	0	; () banked
  7408  012454  9EDF               	bcf	indf2,7,c
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;SPI.c: 264: SSP2BUF = pData;
  7412  012456  C0C3  FF6F         	movff	SPI_Send@pData,3951	;volatile
  7413  01245A                     
  7414                           ; BSR set to: 0
  7415  01245A  A06D               	btfss	3949,0,c	;volatile
  7416  01245C  D7FE               	goto	l686
  7417                           
  7418                           ;SPI.c: 266: pData = SSP2BUF;
  7419  01245E  CF6F F0C3          	movff	3951,SPI_Send@pData	;volatile
  7420                           
  7421                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
  7422  012462  C089  FFD9         	movff	_PortD+4,fsr2l
  7423  012466  C08A  FFDA         	movff	_PortD+5,fsr2h
  7424  01246A  0100               	movlb	0	; () banked
  7425  01246C  8EDF               	bsf	indf2,7,c
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;SPI.c: 269: };
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;SPI.c: 268: return pData;
  7432                           ;	Return value of _SPI_Send is never used
  7433  01246E  0012               	return	
  7434  012470                     l678:
  7435                           
  7436                           ; BSR set to: 0
  7437  012470  0100               	movlb	0	; () banked
  7438  012472  EE20 F002          	lfsr	2,2
  7439  012476  51C1               	movf	SPI_Send@pInput& (0+255),w,b
  7440  012478  26D9               	addwf	fsr2l,f,c
  7441  01247A  51C2               	movf	(SPI_Send@pInput+1)& (0+255),w,b
  7442  01247C  22DA               	addwfc	fsr2h,f,c
  7443  01247E  50DF               	movf	indf2,w,c
  7444                           
  7445                           ; Switch size 1, requested type "space"
  7446                           ; Number of cases is 2, Range of values is 0 to 1
  7447                           ; switch strategies available:
  7448                           ; Name         Instructions Cycles
  7449                           ; simple_byte            7     4 (average)
  7450                           ;	Chosen strategy is simple_byte
  7451  012480  0A00               	xorlw	0	; case 0
  7452  012482  B4D8               	btfsc	status,2,c
  7453  012484  D7CF               	goto	l679
  7454  012486  0A01               	xorlw	1	; case 1
  7455  012488  A4D8               	btfss	status,2,c
  7456  01248A  0012               	return	
  7457  01248C  D7DE               	goto	l684
  7458  01248E                     __end_of_SPI_Send:
  7459                           	opt stack 0
  7460                           tosu	equ	0xFFF
  7461                           tosh	equ	0xFFE
  7462                           tosl	equ	0xFFD
  7463                           pclath	equ	0xFFA
  7464                           tblptru	equ	0xFF8
  7465                           tblptrh	equ	0xFF7
  7466                           tblptrl	equ	0xFF6
  7467                           tablat	equ	0xFF5
  7468                           prodl	equ	0xFF3
  7469                           intcon	equ	0xFF2
  7470                           postinc0	equ	0xFEE
  7471                           wreg	equ	0xFE8
  7472                           postdec1	equ	0xFE5
  7473                           fsr1h	equ	0xFE2
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           plusw2	equ	0xFDB
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _Mode_Set *****************
  7484 ;; Defined at:
  7485 ;;		line 40 in file "Library/LCD.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;  pMode           1    wreg     enum E6761
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  pMode           1    0[BANK0 ] enum E6761
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		wreg
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;Total ram usage:        1 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    7
  7506 ;; This function calls:
  7507 ;;		Nothing
  7508 ;; This function is called by:
  7509 ;;		_LCD_Write
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text31
  7514  012DEA                     __ptext31:
  7515                           	opt stack 0
  7516  012DEA                     _Mode_Set:
  7517                           	opt stack 20
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;incstack = 0
  7521                           ;Mode_Set@pMode stored from wreg
  7522  012DEA  0100               	movlb	0	; () banked
  7523  012DEC  6FC1               	movwf	Mode_Set@pMode& (0+255),b
  7524                           
  7525                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
  7526  012DEE  0100               	movlb	0	; () banked
  7527  012DF0  B1C1               	btfsc	Mode_Set@pMode& (0+255),0,b
  7528  012DF2  D002               	bra	u5935
  7529  012DF4  9E85               	bcf	3973,7,c	;volatile
  7530  012DF6  D001               	bra	u5936
  7531  012DF8                     u5935:
  7532  012DF8  8E85               	bsf	3973,7,c	;volatile
  7533  012DFA                     u5936:
  7534  012DFA  0012               	return		;funcret
  7535  012DFC                     __end_of_Mode_Set:
  7536                           	opt stack 0
  7537                           tosu	equ	0xFFF
  7538                           tosh	equ	0xFFE
  7539                           tosl	equ	0xFFD
  7540                           pclath	equ	0xFFA
  7541                           tblptru	equ	0xFF8
  7542                           tblptrh	equ	0xFF7
  7543                           tblptrl	equ	0xFF6
  7544                           tablat	equ	0xFF5
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           plusw2	equ	0xFDB
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _Configure_GPIOs *****************
  7561 ;; Defined at:
  7562 ;;		line 46 in file "Library/LCD.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  1    wreg      void 
  7569 ;; Registers used:
  7570 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;Total ram usage:        0 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:   14
  7583 ;; This function calls:
  7584 ;;		_LCD_Reset
  7585 ;;		_Port_SetPinType
  7586 ;;		_SPI_Init
  7587 ;;		_SPI_MaxSpeed
  7588 ;; This function is called by:
  7589 ;;		_LCD_Init
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           	psect	text32
  7594  0123B2                     __ptext32:
  7595                           	opt stack 0
  7596  0123B2                     _Configure_GPIOs:
  7597                           	opt stack 15
  7598                           
  7599                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  7600                           
  7601                           ;incstack = 0
  7602  0123B2  0E99               	movlw	low _PortF
  7603  0123B4  0100               	movlb	0	; () banked
  7604  0123B6  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  7605  0123B8  0E00               	movlw	high _PortF
  7606  0123BA  0100               	movlb	0	; () banked
  7607  0123BC  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7608  0123BE  0E07               	movlw	7
  7609  0123C0  0100               	movlb	0	; () banked
  7610  0123C2  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  7611  0123C4  0E03               	movlw	3
  7612  0123C6  0100               	movlb	0	; () banked
  7613  0123C8  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  7614  0123CA  EC2C  F086         	call	_Port_SetPinType	;wreg free
  7615                           
  7616                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  7617  0123CE  0E99               	movlw	low _PortF
  7618  0123D0  0100               	movlb	0	; () banked
  7619  0123D2  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  7620  0123D4  0E00               	movlw	high _PortF
  7621  0123D6  0100               	movlb	0	; () banked
  7622  0123D8  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7623  0123DA  0E06               	movlw	6
  7624  0123DC  0100               	movlb	0	; () banked
  7625  0123DE  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  7626  0123E0  0E03               	movlw	3
  7627  0123E2  0100               	movlb	0	; () banked
  7628  0123E4  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  7629  0123E6  EC2C  F086         	call	_Port_SetPinType	;wreg free
  7630                           
  7631                           ;LCD.c: 55: LCD_Reset();
  7632  0123EA  EC1F  F094         	call	_LCD_Reset	;wreg free
  7633                           
  7634                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  7635  0123EE  0EC0               	movlw	192
  7636  0123F0  0100               	movlb	0	; () banked
  7637  0123F2  6FEE               	movwf	SPI_Init@pClock& (0+255),b
  7638  0123F4  0EC6               	movlw	198
  7639  0123F6  6FEF               	movwf	(SPI_Init@pClock+1)& (0+255),b
  7640  0123F8  0E2D               	movlw	45
  7641  0123FA  6FF0               	movwf	(SPI_Init@pClock+2)& (0+255),b
  7642  0123FC  0E00               	movlw	0
  7643  0123FE  6FF1               	movwf	(SPI_Init@pClock+3)& (0+255),b
  7644  012400  0E01               	movlw	1
  7645  012402  0100               	movlb	0	; () banked
  7646  012404  6FF2               	movwf	SPI_Init@pChannel& (0+255),b
  7647  012406  0E01               	movlw	1
  7648  012408  0100               	movlb	0	; () banked
  7649  01240A  6FF3               	movwf	SPI_Init@pMode& (0+255),b
  7650  01240C  EC00  F080         	call	_SPI_Init	;wreg free
  7651                           
  7652                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  7653  012410  0EB5               	movlw	low _SPI2
  7654  012412  0100               	movlb	0	; () banked
  7655  012414  6FD0               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  7656  012416  0E01               	movlw	high _SPI2
  7657  012418  0100               	movlb	0	; () banked
  7658  01241A  6FD1               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  7659  01241C  EC9F  F091         	call	_SPI_MaxSpeed	;wreg free
  7660  012420  0012               	return		;funcret
  7661  012422                     __end_of_Configure_GPIOs:
  7662                           	opt stack 0
  7663                           tosu	equ	0xFFF
  7664                           tosh	equ	0xFFE
  7665                           tosl	equ	0xFFD
  7666                           pclath	equ	0xFFA
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           postinc0	equ	0xFEE
  7674                           wreg	equ	0xFE8
  7675                           postdec1	equ	0xFE5
  7676                           fsr1h	equ	0xFE2
  7677                           fsr1l	equ	0xFE1
  7678                           indf2	equ	0xFDF
  7679                           postinc2	equ	0xFDE
  7680                           postdec2	equ	0xFDD
  7681                           plusw2	equ	0xFDB
  7682                           fsr2h	equ	0xFDA
  7683                           fsr2l	equ	0xFD9
  7684                           status	equ	0xFD8
  7685                           
  7686 ;; *************** function _SPI_MaxSpeed *****************
  7687 ;; Defined at:
  7688 ;;		line 201 in file "Library/SPI.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  7691 ;;		 -> SPI2(11), 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;		None
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7703 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7707 ;;Total ram usage:        2 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    9
  7710 ;; This function calls:
  7711 ;;		_Byte_SetBit
  7712 ;;		_Byte_SetQuad
  7713 ;; This function is called by:
  7714 ;;		_Configure_GPIOs
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text33
  7719  01233E                     __ptext33:
  7720                           	opt stack 0
  7721  01233E                     _SPI_MaxSpeed:
  7722                           	opt stack 19
  7723                           
  7724                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  7725                           
  7726                           ;incstack = 0
  7727  01233E  0100               	movlb	0	; () banked
  7728  012340  EE20 F006          	lfsr	2,6
  7729  012344  51D0               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7730  012346  26D9               	addwf	fsr2l,f,c
  7731  012348  51D1               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7732  01234A  22DA               	addwfc	fsr2h,f,c
  7733  01234C  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  7734  012350  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  7735  012354  0E05               	movlw	5
  7736  012356  0100               	movlb	0	; () banked
  7737  012358  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  7738  01235A  0E00               	movlw	0
  7739  01235C  0100               	movlb	0	; () banked
  7740  01235E  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  7741  012360  ECE4  F092         	call	_Byte_SetBit	;wreg free
  7742                           
  7743                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  7744  012364  0100               	movlb	0	; () banked
  7745  012366  EE20 F006          	lfsr	2,6
  7746  01236A  51D0               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7747  01236C  26D9               	addwf	fsr2l,f,c
  7748  01236E  51D1               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7749  012370  22DA               	addwfc	fsr2h,f,c
  7750  012372  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  7751  012376  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  7752  01237A  0E00               	movlw	0
  7753  01237C  0100               	movlb	0	; () banked
  7754  01237E  6FCE               	movwf	Byte_SetQuad@pQuad& (0+255),b
  7755  012380  0E00               	movlw	0
  7756  012382  0100               	movlb	0	; () banked
  7757  012384  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  7758  012386  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  7759                           
  7760                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  7761  01238A  0100               	movlb	0	; () banked
  7762  01238C  EE20 F006          	lfsr	2,6
  7763  012390  51D0               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7764  012392  26D9               	addwf	fsr2l,f,c
  7765  012394  51D1               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7766  012396  22DA               	addwfc	fsr2h,f,c
  7767  012398  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  7768  01239C  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  7769  0123A0  0E05               	movlw	5
  7770  0123A2  0100               	movlb	0	; () banked
  7771  0123A4  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  7772  0123A6  0E01               	movlw	1
  7773  0123A8  0100               	movlb	0	; () banked
  7774  0123AA  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  7775  0123AC  ECE4  F092         	call	_Byte_SetBit	;wreg free
  7776  0123B0  0012               	return		;funcret
  7777  0123B2                     __end_of_SPI_MaxSpeed:
  7778                           	opt stack 0
  7779                           tosu	equ	0xFFF
  7780                           tosh	equ	0xFFE
  7781                           tosl	equ	0xFFD
  7782                           pclath	equ	0xFFA
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodl	equ	0xFF3
  7788                           intcon	equ	0xFF2
  7789                           postinc0	equ	0xFEE
  7790                           wreg	equ	0xFE8
  7791                           postdec1	equ	0xFE5
  7792                           fsr1h	equ	0xFE2
  7793                           fsr1l	equ	0xFE1
  7794                           indf2	equ	0xFDF
  7795                           postinc2	equ	0xFDE
  7796                           postdec2	equ	0xFDD
  7797                           plusw2	equ	0xFDB
  7798                           fsr2h	equ	0xFDA
  7799                           fsr2l	equ	0xFD9
  7800                           status	equ	0xFD8
  7801                           
  7802 ;; *************** function _SPI_Init *****************
  7803 ;; Defined at:
  7804 ;;		line 12 in file "Library/SPI.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  pClock          4   45[BANK0 ] unsigned long 
  7807 ;;  pChannel        1   49[BANK0 ] enum E6744
  7808 ;;  pMode           1   50[BANK0 ] enum E6748
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  pInput          2   51[BANK0 ] PTR struct SPI
  7811 ;;		 -> SPI1(11), SPI2(11), 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7821 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;Total ram usage:        8 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:   12
  7828 ;; This function calls:
  7829 ;;		_Byte_SetBit
  7830 ;;		_Byte_SetQuad
  7831 ;;		_Port_SetPinType
  7832 ;;		_SPI_DCS
  7833 ;;		_SPI_DisableISR
  7834 ;;		_Timer2_Init
  7835 ;; This function is called by:
  7836 ;;		_Configure_GPIOs
  7837 ;;		_HMI_Init
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text34
  7842  010000                     __ptext34:
  7843                           	opt stack 0
  7844  010000                     _SPI_Init:
  7845                           	opt stack 16
  7846                           
  7847                           ;SPI.c: 14: SPIPtr pInput;
  7848                           ;SPI.c: 16: switch (pChannel)
  7849                           
  7850                           ;incstack = 0
  7851  010000  D00C               	goto	l597
  7852  010002                     
  7853                           ;SPI.c: 19: pInput = &SPI1;
  7854  010002  0EAA               	movlw	low _SPI1
  7855  010004  0100               	movlb	0	; () banked
  7856  010006  6FF4               	movwf	SPI_Init@pInput& (0+255),b
  7857  010008  0E01               	movlw	high _SPI1
  7858  01000A  D004               	goto	L6
  7859  01000C                     
  7860                           ; BSR set to: 0
  7861                           ;SPI.c: 22: pInput = &SPI2;
  7862                           
  7863                           ; BSR set to: 0
  7864  01000C  0EB5               	movlw	low _SPI2
  7865  01000E  0100               	movlb	0	; () banked
  7866  010010  6FF4               	movwf	SPI_Init@pInput& (0+255),b
  7867  010012  0E01               	movlw	high _SPI2
  7868  010014                     L6:
  7869  010014  0100               	movlb	0	; () banked
  7870  010016  6FF5               	movwf	(SPI_Init@pInput+1)& (0+255),b
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;SPI.c: 24: };
  7874                           
  7875                           ;SPI.c: 23: break;
  7876  010018  D008               	goto	l599
  7877  01001A                     l597:
  7878                           
  7879                           ; BSR set to: 0
  7880  01001A  0100               	movlb	0	; () banked
  7881  01001C  51F2               	movf	SPI_Init@pChannel& (0+255),w,b
  7882                           
  7883                           ; Switch size 1, requested type "space"
  7884                           ; Number of cases is 2, Range of values is 0 to 1
  7885                           ; switch strategies available:
  7886                           ; Name         Instructions Cycles
  7887                           ; simple_byte            7     4 (average)
  7888                           ;	Chosen strategy is simple_byte
  7889  01001E  0A00               	xorlw	0	; case 0
  7890  010020  B4D8               	btfsc	status,2,c
  7891  010022  D7EF               	goto	l598
  7892  010024  0A01               	xorlw	1	; case 1
  7893  010026  B4D8               	btfsc	status,2,c
  7894  010028  D7F1               	goto	l600
  7895  01002A                     l599:
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;SPI.c: 26: pInput->mChannel = pChannel;
  7899                           
  7900                           ; BSR set to: 0
  7901  01002A  0100               	movlb	0	; () banked
  7902  01002C  EE20 F002          	lfsr	2,2
  7903  010030  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  7904  010032  26D9               	addwf	fsr2l,f,c
  7905  010034  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  7906  010036  22DA               	addwfc	fsr2h,f,c
  7907  010038  C0F2  FFDF         	movff	SPI_Init@pChannel,indf2
  7908                           
  7909                           ;SPI.c: 35: switch (pChannel)
  7910  01003C  D0B1               	goto	l601
  7911  01003E                     
  7912                           ; BSR set to: 0
  7913                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
  7914                           
  7915                           ; BSR set to: 0
  7916  01003E  0E8F               	movlw	low _PortC
  7917  010040  0100               	movlb	0	; () banked
  7918  010042  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  7919  010044  0E00               	movlw	high _PortC
  7920  010046  0100               	movlb	0	; () banked
  7921  010048  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7922  01004A  0E02               	movlw	2
  7923  01004C  0100               	movlb	0	; () banked
  7924  01004E  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  7925  010050  0E03               	movlw	3
  7926  010052  0100               	movlb	0	; () banked
  7927  010054  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  7928  010056  EC2C  F086         	call	_Port_SetPinType	;wreg free
  7929                           
  7930                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
  7931  01005A  0E8F               	movlw	low _PortC
  7932  01005C  0100               	movlb	0	; () banked
  7933  01005E  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  7934  010060  0E00               	movlw	high _PortC
  7935  010062  0100               	movlb	0	; () banked
  7936  010064  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7937  010066  0E03               	movlw	3
  7938  010068  0100               	movlb	0	; () banked
  7939  01006A  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  7940  01006C  0E03               	movlw	3
  7941  01006E  0100               	movlb	0	; () banked
  7942  010070  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  7943  010072  EC2C  F086         	call	_Port_SetPinType	;wreg free
  7944                           
  7945                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
  7946  010076  0E8F               	movlw	low _PortC
  7947  010078  0100               	movlb	0	; () banked
  7948  01007A  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  7949  01007C  0E00               	movlw	high _PortC
  7950  01007E  0100               	movlb	0	; () banked
  7951  010080  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7952  010082  0E05               	movlw	5
  7953  010084  0100               	movlb	0	; () banked
  7954  010086  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  7955  010088  0E03               	movlw	3
  7956  01008A  0100               	movlb	0	; () banked
  7957  01008C  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  7958  01008E  EC2C  F086         	call	_Port_SetPinType	;wreg free
  7959                           
  7960                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
  7961  010092  0E8F               	movlw	low _PortC
  7962  010094  0100               	movlb	0	; () banked
  7963  010096  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  7964  010098  0E00               	movlw	high _PortC
  7965  01009A  0100               	movlb	0	; () banked
  7966  01009C  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7967  01009E  0E04               	movlw	4
  7968  0100A0  0100               	movlb	0	; () banked
  7969  0100A2  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  7970  0100A4  0E00               	movlw	0
  7971  0100A6  0100               	movlb	0	; () banked
  7972  0100A8  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  7973  0100AA  EC2C  F086         	call	_Port_SetPinType	;wreg free
  7974                           
  7975                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
  7976  0100AE  0100               	movlb	0	; () banked
  7977  0100B0  EE20 F003          	lfsr	2,3
  7978  0100B4  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  7979  0100B6  26D9               	addwf	fsr2l,f,c
  7980  0100B8  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  7981  0100BA  22DA               	addwfc	fsr2h,f,c
  7982  0100BC  0EC7               	movlw	199
  7983  0100BE  6EDE               	movwf	postinc2,c
  7984  0100C0  0E0F               	movlw	15
  7985  0100C2  6EDD               	movwf	postdec2,c
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
  7989  0100C4  0100               	movlb	0	; () banked
  7990  0100C6  EE20 F006          	lfsr	2,6
  7991  0100CA  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  7992  0100CC  26D9               	addwf	fsr2l,f,c
  7993  0100CE  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  7994  0100D0  22DA               	addwfc	fsr2h,f,c
  7995  0100D2  0EC6               	movlw	198
  7996  0100D4  6EDE               	movwf	postinc2,c
  7997  0100D6  0E0F               	movlw	15
  7998  0100D8  6EDD               	movwf	postdec2,c
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
  8002  0100DA  0100               	movlb	0	; () banked
  8003  0100DC  EE20 F009          	lfsr	2,9
  8004  0100E0  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8005  0100E2  26D9               	addwf	fsr2l,f,c
  8006  0100E4  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8007  0100E6  22DA               	addwfc	fsr2h,f,c
  8008  0100E8  0EC9               	movlw	201
  8009  0100EA  D056               	goto	L7
  8010  0100EC                     
  8011                           ; BSR set to: 0
  8012                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
  8013                           
  8014                           ; BSR set to: 0
  8015  0100EC  0E85               	movlw	low _PortD
  8016  0100EE  0100               	movlb	0	; () banked
  8017  0100F0  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  8018  0100F2  0E00               	movlw	high _PortD
  8019  0100F4  0100               	movlb	0	; () banked
  8020  0100F6  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8021  0100F8  0E07               	movlw	7
  8022  0100FA  0100               	movlb	0	; () banked
  8023  0100FC  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  8024  0100FE  0E03               	movlw	3
  8025  010100  0100               	movlb	0	; () banked
  8026  010102  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  8027  010104  EC2C  F086         	call	_Port_SetPinType	;wreg free
  8028                           
  8029                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
  8030  010108  0E85               	movlw	low _PortD
  8031  01010A  0100               	movlb	0	; () banked
  8032  01010C  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  8033  01010E  0E00               	movlw	high _PortD
  8034  010110  0100               	movlb	0	; () banked
  8035  010112  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8036  010114  0E06               	movlw	6
  8037  010116  0100               	movlb	0	; () banked
  8038  010118  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  8039  01011A  0E03               	movlw	3
  8040  01011C  0100               	movlb	0	; () banked
  8041  01011E  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  8042  010120  EC2C  F086         	call	_Port_SetPinType	;wreg free
  8043                           
  8044                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
  8045  010124  0E85               	movlw	low _PortD
  8046  010126  0100               	movlb	0	; () banked
  8047  010128  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  8048  01012A  0E00               	movlw	high _PortD
  8049  01012C  0100               	movlb	0	; () banked
  8050  01012E  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8051  010130  0E04               	movlw	4
  8052  010132  0100               	movlb	0	; () banked
  8053  010134  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  8054  010136  0E03               	movlw	3
  8055  010138  0100               	movlb	0	; () banked
  8056  01013A  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  8057  01013C  EC2C  F086         	call	_Port_SetPinType	;wreg free
  8058                           
  8059                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
  8060  010140  0E85               	movlw	low _PortD
  8061  010142  0100               	movlb	0	; () banked
  8062  010144  6FE7               	movwf	Port_SetPinType@pInput& (0+255),b
  8063  010146  0E00               	movlw	high _PortD
  8064  010148  0100               	movlb	0	; () banked
  8065  01014A  6FE8               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  8066  01014C  0E05               	movlw	5
  8067  01014E  0100               	movlb	0	; () banked
  8068  010150  6FE9               	movwf	Port_SetPinType@pPin& (0+255),b
  8069  010152  0E00               	movlw	0
  8070  010154  0100               	movlb	0	; () banked
  8071  010156  6FEA               	movwf	Port_SetPinType@pType& (0+255),b
  8072  010158  EC2C  F086         	call	_Port_SetPinType	;wreg free
  8073                           
  8074                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
  8075  01015C  0100               	movlb	0	; () banked
  8076  01015E  EE20 F003          	lfsr	2,3
  8077  010162  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8078  010164  26D9               	addwf	fsr2l,f,c
  8079  010166  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8080  010168  22DA               	addwfc	fsr2h,f,c
  8081  01016A  0E6D               	movlw	109
  8082  01016C  6EDE               	movwf	postinc2,c
  8083  01016E  0E0F               	movlw	15
  8084  010170  6EDD               	movwf	postdec2,c
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
  8088  010172  0100               	movlb	0	; () banked
  8089  010174  EE20 F006          	lfsr	2,6
  8090  010178  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8091  01017A  26D9               	addwf	fsr2l,f,c
  8092  01017C  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8093  01017E  22DA               	addwfc	fsr2h,f,c
  8094  010180  0E6C               	movlw	108
  8095  010182  6EDE               	movwf	postinc2,c
  8096  010184  0E0F               	movlw	15
  8097  010186  6EDD               	movwf	postdec2,c
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
  8101  010188  0100               	movlb	0	; () banked
  8102  01018A  EE20 F009          	lfsr	2,9
  8103  01018E  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8104  010190  26D9               	addwf	fsr2l,f,c
  8105  010192  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8106  010194  22DA               	addwfc	fsr2h,f,c
  8107  010196  0E6F               	movlw	111
  8108  010198                     L7:
  8109  010198  6EDE               	movwf	postinc2,c
  8110  01019A  0E0F               	movlw	15
  8111  01019C  6EDD               	movwf	postdec2,c
  8112                           
  8113                           ;SPI.c: 68: break;
  8114  01019E  D009               	goto	l603
  8115  0101A0                     l601:
  8116                           
  8117                           ; BSR set to: 0
  8118                           
  8119                           ; BSR set to: 0
  8120  0101A0  0100               	movlb	0	; () banked
  8121  0101A2  51F2               	movf	SPI_Init@pChannel& (0+255),w,b
  8122                           
  8123                           ; Switch size 1, requested type "space"
  8124                           ; Number of cases is 2, Range of values is 0 to 1
  8125                           ; switch strategies available:
  8126                           ; Name         Instructions Cycles
  8127                           ; simple_byte            7     4 (average)
  8128                           ;	Chosen strategy is simple_byte
  8129  0101A4  0A00               	xorlw	0	; case 0
  8130  0101A6  B4D8               	btfsc	status,2,c
  8131  0101A8  D74A               	goto	l602
  8132  0101AA  0A01               	xorlw	1	; case 1
  8133  0101AC  A4D8               	btfss	status,2,c
  8134  0101AE  0012               	return	
  8135  0101B0  D79D               	goto	l604
  8136  0101B2                     l603:
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  8140                           
  8141                           ; BSR set to: 0
  8142  0101B2  0100               	movlb	0	; () banked
  8143  0101B4  EE20 F006          	lfsr	2,6
  8144  0101B8  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8145  0101BA  26D9               	addwf	fsr2l,f,c
  8146  0101BC  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8147  0101BE  22DA               	addwfc	fsr2h,f,c
  8148  0101C0  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8149  0101C4  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8150  0101C8  0E05               	movlw	5
  8151  0101CA  0100               	movlb	0	; () banked
  8152  0101CC  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8153  0101CE  0E00               	movlw	0
  8154  0101D0  0100               	movlb	0	; () banked
  8155  0101D2  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8156  0101D4  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8157                           
  8158                           ;SPI.c: 77: switch(pMode)
  8159  0101D8  D09C               	goto	l607
  8160  0101DA                     
  8161                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
  8162  0101DA  0100               	movlb	0	; () banked
  8163  0101DC  EE20 F006          	lfsr	2,6
  8164  0101E0  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8165  0101E2  26D9               	addwf	fsr2l,f,c
  8166  0101E4  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8167  0101E6  22DA               	addwfc	fsr2h,f,c
  8168  0101E8  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8169  0101EC  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8170  0101F0  0E04               	movlw	4
  8171  0101F2  0100               	movlb	0	; () banked
  8172  0101F4  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8173  0101F6  0E00               	movlw	0
  8174  0101F8  0100               	movlb	0	; () banked
  8175  0101FA  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8176  0101FC  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8177                           
  8178                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
  8179  010200  0100               	movlb	0	; () banked
  8180  010202  EE20 F003          	lfsr	2,3
  8181  010206  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8182  010208  26D9               	addwf	fsr2l,f,c
  8183  01020A  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8184  01020C  22DA               	addwfc	fsr2h,f,c
  8185  01020E  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8186  010212  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8187  010216  0E06               	movlw	6
  8188  010218  0100               	movlb	0	; () banked
  8189  01021A  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8190  01021C  0E00               	movlw	0
  8191  01021E  0100               	movlb	0	; () banked
  8192  010220  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8193  010222  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8194                           
  8195                           ;SPI.c: 82: break;
  8196  010226  D084               	goto	l609
  8197  010228                     
  8198                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
  8199  010228  0100               	movlb	0	; () banked
  8200  01022A  EE20 F006          	lfsr	2,6
  8201  01022E  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8202  010230  26D9               	addwf	fsr2l,f,c
  8203  010232  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8204  010234  22DA               	addwfc	fsr2h,f,c
  8205  010236  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8206  01023A  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8207  01023E  0E04               	movlw	4
  8208  010240  0100               	movlb	0	; () banked
  8209  010242  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8210  010244  0E00               	movlw	0
  8211  010246  0100               	movlb	0	; () banked
  8212  010248  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8213  01024A  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8214                           
  8215                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
  8216  01024E  0100               	movlb	0	; () banked
  8217  010250  EE20 F003          	lfsr	2,3
  8218  010254  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8219  010256  26D9               	addwf	fsr2l,f,c
  8220  010258  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8221  01025A  22DA               	addwfc	fsr2h,f,c
  8222  01025C  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8223  010260  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8224  010264  0E06               	movlw	6
  8225  010266  0100               	movlb	0	; () banked
  8226  010268  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8227  01026A  0E01               	movlw	1
  8228  01026C  0100               	movlb	0	; () banked
  8229  01026E  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8230  010270  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8231                           
  8232                           ;SPI.c: 86: break;
  8233  010274  D05D               	goto	l609
  8234  010276                     
  8235                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
  8236  010276  0100               	movlb	0	; () banked
  8237  010278  EE20 F006          	lfsr	2,6
  8238  01027C  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8239  01027E  26D9               	addwf	fsr2l,f,c
  8240  010280  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8241  010282  22DA               	addwfc	fsr2h,f,c
  8242  010284  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8243  010288  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8244  01028C  0E04               	movlw	4
  8245  01028E  0100               	movlb	0	; () banked
  8246  010290  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8247  010292  0E01               	movlw	1
  8248  010294  0100               	movlb	0	; () banked
  8249  010296  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8250  010298  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8251                           
  8252                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
  8253  01029C  0100               	movlb	0	; () banked
  8254  01029E  EE20 F003          	lfsr	2,3
  8255  0102A2  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8256  0102A4  26D9               	addwf	fsr2l,f,c
  8257  0102A6  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8258  0102A8  22DA               	addwfc	fsr2h,f,c
  8259  0102AA  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8260  0102AE  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8261  0102B2  0E06               	movlw	6
  8262  0102B4  0100               	movlb	0	; () banked
  8263  0102B6  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8264  0102B8  0E00               	movlw	0
  8265  0102BA  0100               	movlb	0	; () banked
  8266  0102BC  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8267  0102BE  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8268                           
  8269                           ;SPI.c: 90: break;
  8270  0102C2  D036               	goto	l609
  8271  0102C4                     
  8272                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
  8273  0102C4  0100               	movlb	0	; () banked
  8274  0102C6  EE20 F006          	lfsr	2,6
  8275  0102CA  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8276  0102CC  26D9               	addwf	fsr2l,f,c
  8277  0102CE  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8278  0102D0  22DA               	addwfc	fsr2h,f,c
  8279  0102D2  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8280  0102D6  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8281  0102DA  0E04               	movlw	4
  8282  0102DC  0100               	movlb	0	; () banked
  8283  0102DE  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8284  0102E0  0E01               	movlw	1
  8285  0102E2  0100               	movlb	0	; () banked
  8286  0102E4  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8287  0102E6  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8288                           
  8289                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
  8290  0102EA  0100               	movlb	0	; () banked
  8291  0102EC  EE20 F003          	lfsr	2,3
  8292  0102F0  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8293  0102F2  26D9               	addwf	fsr2l,f,c
  8294  0102F4  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8295  0102F6  22DA               	addwfc	fsr2h,f,c
  8296  0102F8  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8297  0102FC  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8298  010300  0E06               	movlw	6
  8299  010302  0100               	movlb	0	; () banked
  8300  010304  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8301  010306  0E01               	movlw	1
  8302  010308  0100               	movlb	0	; () banked
  8303  01030A  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8304  01030C  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8305                           
  8306                           ;SPI.c: 94: break;
  8307  010310  D00F               	goto	l609
  8308  010312                     l607:
  8309  010312  0100               	movlb	0	; () banked
  8310  010314  51F3               	movf	SPI_Init@pMode& (0+255),w,b
  8311                           
  8312                           ; Switch size 1, requested type "space"
  8313                           ; Number of cases is 4, Range of values is 0 to 3
  8314                           ; switch strategies available:
  8315                           ; Name         Instructions Cycles
  8316                           ; simple_byte           13     7 (average)
  8317                           ;	Chosen strategy is simple_byte
  8318  010316  0A00               	xorlw	0	; case 0
  8319  010318  B4D8               	btfsc	status,2,c
  8320  01031A  D75F               	goto	l608
  8321  01031C  0A01               	xorlw	1	; case 1
  8322  01031E  B4D8               	btfsc	status,2,c
  8323  010320  D783               	goto	l610
  8324  010322  0A03               	xorlw	3	; case 2
  8325  010324  B4D8               	btfsc	status,2,c
  8326  010326  D7A7               	goto	l611
  8327  010328  0A01               	xorlw	1	; case 3
  8328  01032A  A4D8               	btfss	status,2,c
  8329  01032C  0012               	return	
  8330  01032E  D7CA               	goto	l612
  8331  010330                     l609:
  8332                           
  8333                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
  8334                           
  8335                           ; BSR set to: 0
  8336  010330  0100               	movlb	0	; () banked
  8337  010332  EE20 F006          	lfsr	2,6
  8338  010336  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8339  010338  26D9               	addwf	fsr2l,f,c
  8340  01033A  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8341  01033C  22DA               	addwfc	fsr2h,f,c
  8342  01033E  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8343  010342  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8344  010346  0E07               	movlw	7
  8345  010348  0100               	movlb	0	; () banked
  8346  01034A  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8347  01034C  0E00               	movlw	0
  8348  01034E  0100               	movlb	0	; () banked
  8349  010350  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8350  010352  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8351                           
  8352                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
  8353  010356  0100               	movlb	0	; () banked
  8354  010358  EE20 F006          	lfsr	2,6
  8355  01035C  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8356  01035E  26D9               	addwf	fsr2l,f,c
  8357  010360  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8358  010362  22DA               	addwfc	fsr2h,f,c
  8359  010364  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8360  010368  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8361  01036C  0E06               	movlw	6
  8362  01036E  0100               	movlb	0	; () banked
  8363  010370  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8364  010372  0E00               	movlw	0
  8365  010374  0100               	movlb	0	; () banked
  8366  010376  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8367  010378  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8368                           
  8369                           ;SPI.c: 106: Timer2_Init(pClock);
  8370  01037C  C0EE  F0CE         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
  8371  010380  C0EF  F0CF         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
  8372  010384  C0F0  F0D0         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
  8373  010388  C0F1  F0D1         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
  8374  01038C  EC1B  F08A         	call	_Timer2_Init	;wreg free
  8375                           
  8376                           ;SPI.c: 112: SPI_DisableISR(pInput);
  8377  010390  C0F4  F0C1         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
  8378  010394  C0F5  F0C2         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
  8379  010398  EC35  F096         	call	_SPI_DisableISR	;wreg free
  8380                           
  8381                           ;SPI.c: 116: switch (pChannel)
  8382  01039C  D004               	goto	l614
  8383  01039E                     l615:
  8384                           
  8385                           ; BSR set to: 0
  8386  01039E  869F               	bsf	3999,3,c	;volatile
  8387  0103A0  D00B               	goto	l616
  8388  0103A2                     l617:
  8389                           
  8390                           ; BSR set to: 0
  8391  0103A2  8EA5               	bsf	4005,7,c	;volatile
  8392  0103A4  D009               	goto	l616
  8393  0103A6                     l614:
  8394                           
  8395                           ; BSR set to: 0
  8396  0103A6  0100               	movlb	0	; () banked
  8397  0103A8  51F2               	movf	SPI_Init@pChannel& (0+255),w,b
  8398                           
  8399                           ; Switch size 1, requested type "space"
  8400                           ; Number of cases is 2, Range of values is 0 to 1
  8401                           ; switch strategies available:
  8402                           ; Name         Instructions Cycles
  8403                           ; simple_byte            7     4 (average)
  8404                           ;	Chosen strategy is simple_byte
  8405  0103AA  0A00               	xorlw	0	; case 0
  8406  0103AC  B4D8               	btfsc	status,2,c
  8407  0103AE  D7F7               	goto	l615
  8408  0103B0  0A01               	xorlw	1	; case 1
  8409  0103B2  A4D8               	btfss	status,2,c
  8410  0103B4  0012               	return	
  8411  0103B6  D7F5               	goto	l617
  8412  0103B8                     l616:
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;SPI.c: 124: SPI_DCS(pInput);
  8416                           
  8417                           ; BSR set to: 0
  8418  0103B8  C0F4  F0C1         	movff	SPI_Init@pInput,SPI_DCS@pInput
  8419  0103BC  C0F5  F0C2         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
  8420  0103C0  ECED  F095         	call	_SPI_DCS	;wreg free
  8421                           
  8422                           ;SPI.c: 126: pInput->mBusy = 0;
  8423  0103C4  C0F4  FFD9         	movff	SPI_Init@pInput,fsr2l
  8424  0103C8  C0F5  FFDA         	movff	SPI_Init@pInput+1,fsr2h
  8425  0103CC  0E00               	movlw	0
  8426  0103CE  6EDF               	movwf	indf2,c
  8427                           
  8428                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
  8429  0103D0  0100               	movlb	0	; () banked
  8430  0103D2  EE20 F006          	lfsr	2,6
  8431  0103D6  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8432  0103D8  26D9               	addwf	fsr2l,f,c
  8433  0103DA  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8434  0103DC  22DA               	addwfc	fsr2h,f,c
  8435  0103DE  CFDE F0CC          	movff	postinc2,Byte_SetQuad@pInput
  8436  0103E2  CFDD F0CD          	movff	postdec2,Byte_SetQuad@pInput+1
  8437  0103E6  0E00               	movlw	0
  8438  0103E8  0100               	movlb	0	; () banked
  8439  0103EA  6FCE               	movwf	Byte_SetQuad@pQuad& (0+255),b
  8440  0103EC  0E03               	movlw	3
  8441  0103EE  0100               	movlb	0	; () banked
  8442  0103F0  6FCF               	movwf	Byte_SetQuad@pValue& (0+255),b
  8443  0103F2  EC7E  F096         	call	_Byte_SetQuad	;wreg free
  8444                           
  8445                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  8446  0103F6  0100               	movlb	0	; () banked
  8447  0103F8  EE20 F006          	lfsr	2,6
  8448  0103FC  51F4               	movf	SPI_Init@pInput& (0+255),w,b
  8449  0103FE  26D9               	addwf	fsr2l,f,c
  8450  010400  51F5               	movf	(SPI_Init@pInput+1)& (0+255),w,b
  8451  010402  22DA               	addwfc	fsr2h,f,c
  8452  010404  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  8453  010408  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  8454  01040C  0E05               	movlw	5
  8455  01040E  0100               	movlb	0	; () banked
  8456  010410  6FC3               	movwf	Byte_SetBit@pBit& (0+255),b
  8457  010412  0E01               	movlw	1
  8458  010414  0100               	movlb	0	; () banked
  8459  010416  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  8460  010418  ECE4  F092         	call	_Byte_SetBit	;wreg free
  8461  01041C  0012               	return		;funcret
  8462  01041E                     __end_of_SPI_Init:
  8463                           	opt stack 0
  8464                           tosu	equ	0xFFF
  8465                           tosh	equ	0xFFE
  8466                           tosl	equ	0xFFD
  8467                           pclath	equ	0xFFA
  8468                           tblptru	equ	0xFF8
  8469                           tblptrh	equ	0xFF7
  8470                           tblptrl	equ	0xFF6
  8471                           tablat	equ	0xFF5
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           postinc0	equ	0xFEE
  8475                           wreg	equ	0xFE8
  8476                           postdec1	equ	0xFE5
  8477                           fsr1h	equ	0xFE2
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           plusw2	equ	0xFDB
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function _Timer2_Init *****************
  8488 ;; Defined at:
  8489 ;;		line 10 in file "Library/Timer2.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
  8494 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
  8495 ;;  RDIV            4   18[BANK0 ] unsigned long 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      void 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;Total ram usage:       17 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    8
  8512 ;; This function calls:
  8513 ;;		_Timer2_Clear
  8514 ;;		___lldiv
  8515 ;; This function is called by:
  8516 ;;		_SPI_Init
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text35
  8521  011436                     __ptext35:
  8522                           	opt stack 0
  8523  011436                     _Timer2_Init:
  8524                           	opt stack 19
  8525                           
  8526                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
  8527                           ;Timer2.c: 13: static UINT8 INDEX = 0;
  8528                           ;Timer2.c: 14: static UINT8 PRE = 0;
  8529                           ;Timer2.c: 15: static UINT32 DIV = 0;
  8530                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
  8531                           
  8532                           ;incstack = 0
  8533  011436  0E00               	movlw	0
  8534  011438  0100               	movlb	0	; () banked
  8535  01143A  6FD7               	movwf	Timer2_Init@pCPUClock& (0+255),b
  8536  01143C  0E6C               	movlw	108
  8537  01143E  6FD8               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
  8538  011440  0EDC               	movlw	220
  8539  011442  6FD9               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
  8540  011444  0E02               	movlw	2
  8541  011446  6FDA               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
  8545                           ;Timer2.c: 20: pFrequency *= 2;
  8546  011448  0100               	movlb	0	; () banked
  8547  01144A  90D8               	bcf	status,0,c
  8548  01144C  37CE               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
  8549  01144E  37CF               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
  8550  011450  37D0               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
  8551  011452  37D1               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;Timer2.c: 23: pCPUClock /= 4;
  8555  011454  0E02               	movlw	2
  8556  011456  0100               	movlb	0	; () banked
  8557  011458  6FD2               	movwf	??_Timer2_Init& (0+255),b
  8558  01145A                     u6145:
  8559  01145A  90D8               	bcf	status,0,c
  8560  01145C  0100               	movlb	0	; () banked
  8561  01145E  33DA               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
  8562  011460  33D9               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
  8563  011462  33D8               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
  8564  011464  33D7               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
  8565  011466  0100               	movlb	0	; () banked
  8566  011468  2FD2               	decfsz	??_Timer2_Init& (0+255),f,b
  8567  01146A  D7F7               	goto	u6145
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
  8571  01146C  C0D7  F0C1         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
  8572  011470  C0D8  F0C2         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
  8573  011474  C0D9  F0C3         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
  8574  011478  C0DA  F0C4         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
  8575  01147C  C0CE  F0C5         	movff	Timer2_Init@pFrequency,___lldiv@divisor
  8576  011480  C0CF  F0C6         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
  8577  011484  C0D0  F0C7         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
  8578  011488  C0D1  F0C8         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
  8579  01148C  EC00  F08D         	call	___lldiv	;wreg free
  8580  011490  C0C1  F0DB         	movff	?___lldiv,Timer2_Init@DIVIDE
  8581  011494  C0C2  F0DC         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
  8582  011498  C0C3  F0DD         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
  8583  01149C  C0C4  F0DE         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
  8584                           
  8585                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
  8586  0114A0  D010               	goto	l1836
  8587  0114A2                     l9406:
  8588                           
  8589                           ;Timer2.c: 28: {
  8590                           ;Timer2.c: 29: RDIV = 0;
  8591  0114A2  0E00               	movlw	0
  8592  0114A4  0100               	movlb	0	; () banked
  8593  0114A6  6FD3               	movwf	Timer2_Init@RDIV& (0+255),b
  8594  0114A8  0E00               	movlw	0
  8595  0114AA  6FD4               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
  8596  0114AC  0E00               	movlw	0
  8597  0114AE  6FD5               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
  8598  0114B0  0E00               	movlw	0
  8599  0114B2  6FD6               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;Timer2.c: 30: INDEX ++;
  8603  0114B4  0100               	movlb	0	; () banked
  8604  0114B6  2B78               	incf	Timer2_Init@INDEX& (0+255),f,b
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;Timer2.c: 31: if (INDEX >= 3)
  8608  0114B8  0E02               	movlw	2
  8609  0114BA  0100               	movlb	0	; () banked
  8610  0114BC  6578               	cpfsgt	Timer2_Init@INDEX& (0+255),b
  8611  0114BE  D001               	goto	l1836
  8612  0114C0  D026               	goto	u6160
  8613  0114C2                     l1836:
  8614                           
  8615                           ; BSR set to: 0
  8616                           
  8617                           ; BSR set to: 0
  8618  0114C2  C0DB  F0C1         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
  8619  0114C6  C0DC  F0C2         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
  8620  0114CA  C0DD  F0C3         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
  8621  0114CE  C0DE  F0C4         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
  8622  0114D2  0100               	movlb	0	; () banked
  8623  0114D4  5178               	movf	Timer2_Init@INDEX& (0+255),w,b
  8624  0114D6  0D01               	mullw	1
  8625  0114D8  0E02               	movlw	low Timer2_Init@PRESCALE
  8626  0114DA  24F3               	addwf	prodl,w,c
  8627  0114DC  6EF6               	movwf	tblptrl,c
  8628  0114DE  0EFE               	movlw	high Timer2_Init@PRESCALE
  8629  0114E0  20F4               	addwfc	prodh,w,c
  8630  0114E2  6EF7               	movwf	tblptrh,c
  8631  0114E4                     	if	1	;There are 3 active tblptr bytes
  8632  0114E4  6AF8               	clrf	tblptru,c
  8633  0114E6  0E00               	movlw	low (__mediumconst shr (0+16))
  8634  0114E8  22F8               	addwfc	tblptru,f,c
  8635  0114EA                     	endif
  8636  0114EA  0008               	tblrd		*
  8637  0114EC  50F5               	movf	tablat,w,c
  8638  0114EE  0100               	movlb	0	; () banked
  8639  0114F0  6FC5               	movwf	___lldiv@divisor& (0+255),b
  8640  0114F2  6BC6               	clrf	(___lldiv@divisor+1)& (0+255),b
  8641  0114F4  6BC7               	clrf	(___lldiv@divisor+2)& (0+255),b
  8642  0114F6  6BC8               	clrf	(___lldiv@divisor+3)& (0+255),b
  8643  0114F8  EC00  F08D         	call	___lldiv	;wreg free
  8644  0114FC  0100               	movlb	0	; () banked
  8645  0114FE  51C4               	movf	(?___lldiv+3)& (0+255),w,b
  8646  011500  0100               	movlb	0	; () banked
  8647  011502  11C3               	iorwf	(?___lldiv+2)& (0+255),w,b
  8648  011504  E1CE               	bnz	l9406
  8649  011506  0100               	movlb	0	; () banked
  8650  011508  05C2               	decf	(?___lldiv+1)& (0+255),w,b
  8651  01150A  B0D8               	btfsc	status,0,c
  8652  01150C  D7CA               	goto	l1835
  8653  01150E                     u6160:
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;Timer2.c: 33: }
  8657                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
  8658                           
  8659                           ; BSR set to: 0
  8660  01150E  50CA               	movf	4042,w,c	;volatile
  8661  011510  0100               	movlb	0	; () banked
  8662  011512  1978               	xorwf	Timer2_Init@INDEX& (0+255),w,b
  8663  011514  0BFC               	andlw	-4
  8664  011516  1978               	xorwf	Timer2_Init@INDEX& (0+255),w,b
  8665  011518  6ECA               	movwf	4042,c	;volatile
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
  8669  01151A  84CA               	bsf	4042,2,c	;volatile
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;Timer2.c: 44: Timer2_Clear();
  8673  01151C  EC29  F097         	call	_Timer2_Clear	;wreg free
  8674                           
  8675                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
  8676  011520  0100               	movlb	0	; () banked
  8677  011522  5178               	movf	Timer2_Init@INDEX& (0+255),w,b
  8678  011524  0D01               	mullw	1
  8679  011526  0E02               	movlw	low Timer2_Init@PRESCALE
  8680  011528  24F3               	addwf	prodl,w,c
  8681  01152A  6EF6               	movwf	tblptrl,c
  8682  01152C  0EFE               	movlw	high Timer2_Init@PRESCALE
  8683  01152E  20F4               	addwfc	prodh,w,c
  8684  011530  6EF7               	movwf	tblptrh,c
  8685  011532                     	if	1	;There are 3 active tblptr bytes
  8686  011532  6AF8               	clrf	tblptru,c
  8687  011534  0E00               	movlw	low (__mediumconst shr (0+16))
  8688  011536  22F8               	addwfc	tblptru,f,c
  8689  011538                     	endif
  8690  011538  0008               	tblrd		*
  8691  01153A  CFF5 F077          	movff	tablat,Timer2_Init@PRE
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;Timer2.c: 46: DIV = (DIVIDE-1);
  8695  01153E  0EFF               	movlw	255
  8696  011540  0100               	movlb	0	; () banked
  8697  011542  25DB               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
  8698  011544  0100               	movlb	0	; () banked
  8699  011546  6F60               	movwf	Timer2_Init@DIV& (0+255),b
  8700  011548  0EFF               	movlw	255
  8701  01154A  0100               	movlb	0	; () banked
  8702  01154C  21DC               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
  8703  01154E  0100               	movlb	0	; () banked
  8704  011550  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
  8705  011552  0EFF               	movlw	255
  8706  011554  0100               	movlb	0	; () banked
  8707  011556  21DD               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
  8708  011558  0100               	movlb	0	; () banked
  8709  01155A  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
  8710  01155C  0EFF               	movlw	255
  8711  01155E  0100               	movlb	0	; () banked
  8712  011560  21DE               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
  8713  011562  0100               	movlb	0	; () banked
  8714  011564  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;Timer2.c: 48: INDEX = DIV/PRE;
  8718  011566  C060  F0C1         	movff	Timer2_Init@DIV,___lldiv@dividend
  8719  01156A  C061  F0C2         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
  8720  01156E  C062  F0C3         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
  8721  011572  C063  F0C4         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
  8722  011576  0100               	movlb	0	; () banked
  8723  011578  5177               	movf	Timer2_Init@PRE& (0+255),w,b
  8724  01157A  0100               	movlb	0	; () banked
  8725  01157C  6FC5               	movwf	___lldiv@divisor& (0+255),b
  8726  01157E  6BC6               	clrf	(___lldiv@divisor+1)& (0+255),b
  8727  011580  6BC7               	clrf	(___lldiv@divisor+2)& (0+255),b
  8728  011582  6BC8               	clrf	(___lldiv@divisor+3)& (0+255),b
  8729  011584  EC00  F08D         	call	___lldiv	;wreg free
  8730  011588  0100               	movlb	0	; () banked
  8731  01158A  51C1               	movf	?___lldiv& (0+255),w,b
  8732  01158C  0100               	movlb	0	; () banked
  8733  01158E  6F78               	movwf	Timer2_Init@INDEX& (0+255),b
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;Timer2.c: 49: PR2 = INDEX;
  8737  011590  C078  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
  8738                           
  8739                           ; BSR set to: 0
  8740  011594  0012               	return		;funcret
  8741  011596                     __end_of_Timer2_Init:
  8742                           	opt stack 0
  8743                           tosu	equ	0xFFF
  8744                           tosh	equ	0xFFE
  8745                           tosl	equ	0xFFD
  8746                           pclath	equ	0xFFA
  8747                           tblptru	equ	0xFF8
  8748                           tblptrh	equ	0xFF7
  8749                           tblptrl	equ	0xFF6
  8750                           tablat	equ	0xFF5
  8751                           prodh	equ	0xFF4
  8752                           prodl	equ	0xFF3
  8753                           intcon	equ	0xFF2
  8754                           postinc0	equ	0xFEE
  8755                           wreg	equ	0xFE8
  8756                           postdec1	equ	0xFE5
  8757                           fsr1h	equ	0xFE2
  8758                           fsr1l	equ	0xFE1
  8759                           indf2	equ	0xFDF
  8760                           postinc2	equ	0xFDE
  8761                           postdec2	equ	0xFDD
  8762                           plusw2	equ	0xFDB
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function ___lldiv *****************
  8768 ;; Defined at:
  8769 ;;		line 8 in file "/opt/microchip/xc8/v1.43/sources/common/lldiv.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  dividend        4    0[BANK0 ] unsigned long 
  8772 ;;  divisor         4    4[BANK0 ] unsigned long 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  quotient        4    8[BANK0 ] unsigned long 
  8775 ;;  counter         1   12[BANK0 ] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  4    0[BANK0 ] unsigned long 
  8778 ;; Registers used:
  8779 ;;		wreg, status,2, status,0
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8785 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;Total ram usage:       13 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    7
  8792 ;; This function calls:
  8793 ;;		Nothing
  8794 ;; This function is called by:
  8795 ;;		_Timer2_Init
  8796 ;;		_rand_between
  8797 ;;		_I2C_Init
  8798 ;;		_Timer0_Init
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           	psect	text36
  8803  011A00                     __ptext36:
  8804                           	opt stack 0
  8805  011A00                     ___lldiv:
  8806                           	opt stack 19
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;incstack = 0
  8810  011A00  0E00               	movlw	0
  8811  011A02  0100               	movlb	0	; () banked
  8812  011A04  6FC9               	movwf	___lldiv@quotient& (0+255),b
  8813  011A06  0E00               	movlw	0
  8814  011A08  6FCA               	movwf	(___lldiv@quotient+1)& (0+255),b
  8815  011A0A  0E00               	movlw	0
  8816  011A0C  6FCB               	movwf	(___lldiv@quotient+2)& (0+255),b
  8817  011A0E  0E00               	movlw	0
  8818  011A10  6FCC               	movwf	(___lldiv@quotient+3)& (0+255),b
  8819                           
  8820                           ; BSR set to: 0
  8821  011A12  0100               	movlb	0	; () banked
  8822  011A14  51C5               	movf	___lldiv@divisor& (0+255),w,b
  8823  011A16  0100               	movlb	0	; () banked
  8824  011A18  11C6               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8825  011A1A  0100               	movlb	0	; () banked
  8826  011A1C  11C7               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8827  011A1E  0100               	movlb	0	; () banked
  8828  011A20  11C8               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8829  011A22  B4D8               	btfsc	status,2,c
  8830  011A24  D042               	goto	l2342
  8831                           
  8832                           ; BSR set to: 0
  8833  011A26  0E01               	movlw	1
  8834  011A28  0100               	movlb	0	; () banked
  8835  011A2A  6FCD               	movwf	___lldiv@counter& (0+255),b
  8836  011A2C  D008               	goto	l2337
  8837  011A2E                     
  8838                           ; BSR set to: 0
  8839                           
  8840                           ; BSR set to: 0
  8841  011A2E  0100               	movlb	0	; () banked
  8842  011A30  90D8               	bcf	status,0,c
  8843  011A32  37C5               	rlcf	___lldiv@divisor& (0+255),f,b
  8844  011A34  37C6               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8845  011A36  37C7               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8846  011A38  37C8               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8847  011A3A  0100               	movlb	0	; () banked
  8848  011A3C  2BCD               	incf	___lldiv@counter& (0+255),f,b
  8849  011A3E                     l2337:
  8850                           
  8851                           ; BSR set to: 0
  8852                           
  8853                           ; BSR set to: 0
  8854  011A3E  0100               	movlb	0	; () banked
  8855  011A40  AFC8               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8856  011A42  D7F5               	goto	l2338
  8857  011A44                     u6050:
  8858                           
  8859                           ; BSR set to: 0
  8860                           
  8861                           ; BSR set to: 0
  8862                           
  8863                           ; BSR set to: 0
  8864  011A44  0100               	movlb	0	; () banked
  8865  011A46  90D8               	bcf	status,0,c
  8866  011A48  37C9               	rlcf	___lldiv@quotient& (0+255),f,b
  8867  011A4A  37CA               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8868  011A4C  37CB               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8869  011A4E  37CC               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8870                           
  8871                           ; BSR set to: 0
  8872  011A50  0100               	movlb	0	; () banked
  8873  011A52  51C5               	movf	___lldiv@divisor& (0+255),w,b
  8874  011A54  0100               	movlb	0	; () banked
  8875  011A56  5DC1               	subwf	___lldiv@dividend& (0+255),w,b
  8876  011A58  0100               	movlb	0	; () banked
  8877  011A5A  51C6               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8878  011A5C  0100               	movlb	0	; () banked
  8879  011A5E  59C2               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8880  011A60  0100               	movlb	0	; () banked
  8881  011A62  51C7               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8882  011A64  0100               	movlb	0	; () banked
  8883  011A66  59C3               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8884  011A68  0100               	movlb	0	; () banked
  8885  011A6A  51C8               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8886  011A6C  0100               	movlb	0	; () banked
  8887  011A6E  59C4               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8888  011A70  A0D8               	btfss	status,0,c
  8889  011A72  D012               	goto	l2341
  8890                           
  8891                           ; BSR set to: 0
  8892  011A74  0100               	movlb	0	; () banked
  8893  011A76  51C5               	movf	___lldiv@divisor& (0+255),w,b
  8894  011A78  0100               	movlb	0	; () banked
  8895  011A7A  5FC1               	subwf	___lldiv@dividend& (0+255),f,b
  8896  011A7C  0100               	movlb	0	; () banked
  8897  011A7E  51C6               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8898  011A80  0100               	movlb	0	; () banked
  8899  011A82  5BC2               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8900  011A84  0100               	movlb	0	; () banked
  8901  011A86  51C7               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8902  011A88  0100               	movlb	0	; () banked
  8903  011A8A  5BC3               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8904  011A8C  0100               	movlb	0	; () banked
  8905  011A8E  51C8               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8906  011A90  0100               	movlb	0	; () banked
  8907  011A92  5BC4               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8908                           
  8909                           ; BSR set to: 0
  8910  011A94  0100               	movlb	0	; () banked
  8911  011A96  81C9               	bsf	___lldiv@quotient& (0+255),0,b
  8912  011A98                     l2341:
  8913                           
  8914                           ; BSR set to: 0
  8915                           
  8916                           ; BSR set to: 0
  8917  011A98  0100               	movlb	0	; () banked
  8918  011A9A  90D8               	bcf	status,0,c
  8919  011A9C  33C8               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8920  011A9E  33C7               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8921  011AA0  33C6               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8922  011AA2  33C5               	rrcf	___lldiv@divisor& (0+255),f,b
  8923                           
  8924                           ; BSR set to: 0
  8925  011AA4  0100               	movlb	0	; () banked
  8926  011AA6  2FCD               	decfsz	___lldiv@counter& (0+255),f,b
  8927  011AA8  D7CD               	goto	u6050
  8928  011AAA                     l2342:
  8929                           
  8930                           ; BSR set to: 0
  8931                           
  8932                           ; BSR set to: 0
  8933  011AAA  C0C9  F0C1         	movff	___lldiv@quotient,?___lldiv
  8934  011AAE  C0CA  F0C2         	movff	___lldiv@quotient+1,?___lldiv+1
  8935  011AB2  C0CB  F0C3         	movff	___lldiv@quotient+2,?___lldiv+2
  8936  011AB6  C0CC  F0C4         	movff	___lldiv@quotient+3,?___lldiv+3
  8937                           
  8938                           ; BSR set to: 0
  8939  011ABA  0012               	return		;funcret
  8940  011ABC                     __end_of___lldiv:
  8941                           	opt stack 0
  8942                           tosu	equ	0xFFF
  8943                           tosh	equ	0xFFE
  8944                           tosl	equ	0xFFD
  8945                           pclath	equ	0xFFA
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon	equ	0xFF2
  8953                           postinc0	equ	0xFEE
  8954                           wreg	equ	0xFE8
  8955                           postdec1	equ	0xFE5
  8956                           fsr1h	equ	0xFE2
  8957                           fsr1l	equ	0xFE1
  8958                           indf2	equ	0xFDF
  8959                           postinc2	equ	0xFDE
  8960                           postdec2	equ	0xFDD
  8961                           plusw2	equ	0xFDB
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _Timer2_Clear *****************
  8967 ;; Defined at:
  8968 ;;		line 3 in file "Library/Timer2.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		None
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;Total ram usage:        0 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    7
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_Timer2_Init
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           	psect	text37
  8997  012E52                     __ptext37:
  8998                           	opt stack 0
  8999  012E52                     _Timer2_Clear:
  9000                           	opt stack 19
  9001                           
  9002                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;incstack = 0
  9006  012E52  929E               	bcf	3998,1,c	;volatile
  9007                           
  9008                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
  9009  012E54  929D               	bcf	3997,1,c	;volatile
  9010                           
  9011                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
  9012  012E56  929F               	bcf	3999,1,c	;volatile
  9013  012E58  0012               	return		;funcret
  9014  012E5A                     __end_of_Timer2_Clear:
  9015                           	opt stack 0
  9016                           tosu	equ	0xFFF
  9017                           tosh	equ	0xFFE
  9018                           tosl	equ	0xFFD
  9019                           pclath	equ	0xFFA
  9020                           tblptru	equ	0xFF8
  9021                           tblptrh	equ	0xFF7
  9022                           tblptrl	equ	0xFF6
  9023                           tablat	equ	0xFF5
  9024                           prodh	equ	0xFF4
  9025                           prodl	equ	0xFF3
  9026                           intcon	equ	0xFF2
  9027                           postinc0	equ	0xFEE
  9028                           wreg	equ	0xFE8
  9029                           postdec1	equ	0xFE5
  9030                           fsr1h	equ	0xFE2
  9031                           fsr1l	equ	0xFE1
  9032                           indf2	equ	0xFDF
  9033                           postinc2	equ	0xFDE
  9034                           postdec2	equ	0xFDD
  9035                           plusw2	equ	0xFDB
  9036                           fsr2h	equ	0xFDA
  9037                           fsr2l	equ	0xFD9
  9038                           status	equ	0xFD8
  9039                           
  9040 ;; *************** function _SPI_DisableISR *****************
  9041 ;; Defined at:
  9042 ;;		line 181 in file "Library/SPI.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  pInput          2    0[BANK0 ] PTR struct SPI
  9045 ;;		 -> SPI1(11), SPI2(11), 
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  1    wreg      void 
  9050 ;; Registers used:
  9051 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9057 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9061 ;;Total ram usage:        2 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    7
  9064 ;; This function calls:
  9065 ;;		Nothing
  9066 ;; This function is called by:
  9067 ;;		_SPI_Init
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           	psect	text38
  9072  012C6A                     __ptext38:
  9073                           	opt stack 0
  9074  012C6A                     _SPI_DisableISR:
  9075                           	opt stack 20
  9076                           
  9077                           ;SPI.c: 183: switch (pInput->mChannel)
  9078                           
  9079                           ;incstack = 0
  9080  012C6A  D004               	goto	l654
  9081  012C6C                     l655:
  9082                           
  9083                           ; BSR set to: 0
  9084  012C6C  969D               	bcf	3997,3,c	;volatile
  9085  012C6E  0012               	return	
  9086  012C70                     l657:
  9087                           
  9088                           ; BSR set to: 0
  9089  012C70  9EA3               	bcf	4003,7,c	;volatile
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;SPI.c: 188: };
  9093                           
  9094                           ; BSR set to: 0
  9095                           
  9096                           ;SPI.c: 187: default: return;
  9097  012C72  0012               	return	
  9098  012C74                     l654:
  9099                           
  9100                           ; BSR set to: 0
  9101  012C74  0100               	movlb	0	; () banked
  9102  012C76  EE20 F002          	lfsr	2,2
  9103  012C7A  51C1               	movf	SPI_DisableISR@pInput& (0+255),w,b
  9104  012C7C  26D9               	addwf	fsr2l,f,c
  9105  012C7E  51C2               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
  9106  012C80  22DA               	addwfc	fsr2h,f,c
  9107  012C82  50DF               	movf	indf2,w,c
  9108                           
  9109                           ; Switch size 1, requested type "space"
  9110                           ; Number of cases is 2, Range of values is 0 to 1
  9111                           ; switch strategies available:
  9112                           ; Name         Instructions Cycles
  9113                           ; simple_byte            7     4 (average)
  9114                           ;	Chosen strategy is simple_byte
  9115  012C84  0A00               	xorlw	0	; case 0
  9116  012C86  B4D8               	btfsc	status,2,c
  9117  012C88  D7F1               	goto	l655
  9118  012C8A  0A01               	xorlw	1	; case 1
  9119  012C8C  A4D8               	btfss	status,2,c
  9120  012C8E  0012               	return	
  9121  012C90  D7EF               	goto	l657
  9122  012C92                     __end_of_SPI_DisableISR:
  9123                           	opt stack 0
  9124                           tosu	equ	0xFFF
  9125                           tosh	equ	0xFFE
  9126                           tosl	equ	0xFFD
  9127                           pclath	equ	0xFFA
  9128                           tblptru	equ	0xFF8
  9129                           tblptrh	equ	0xFF7
  9130                           tblptrl	equ	0xFF6
  9131                           tablat	equ	0xFF5
  9132                           prodh	equ	0xFF4
  9133                           prodl	equ	0xFF3
  9134                           intcon	equ	0xFF2
  9135                           postinc0	equ	0xFEE
  9136                           wreg	equ	0xFE8
  9137                           postdec1	equ	0xFE5
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           postdec2	equ	0xFDD
  9143                           plusw2	equ	0xFDB
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8
  9147                           
  9148 ;; *************** function _SPI_DCS *****************
  9149 ;; Defined at:
  9150 ;;		line 219 in file "Library/SPI.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;  pInput          2    0[BANK0 ] PTR struct SPI
  9153 ;;		 -> SPI1(11), SPI2(11), 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9165 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;Total ram usage:        2 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    7
  9172 ;; This function calls:
  9173 ;;		Nothing
  9174 ;; This function is called by:
  9175 ;;		_SPI_Init
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           	psect	text39
  9180  012BDA                     __ptext39:
  9181                           	opt stack 0
  9182  012BDA                     _SPI_DCS:
  9183                           	opt stack 20
  9184                           
  9185                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;incstack = 0
  9189  012BDA  0100               	movlb	0	; () banked
  9190  012BDC  EE20 F002          	lfsr	2,2
  9191  012BE0  51C1               	movf	SPI_DCS@pInput& (0+255),w,b
  9192  012BE2  26D9               	addwf	fsr2l,f,c
  9193  012BE4  51C2               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
  9194  012BE6  22DA               	addwfc	fsr2h,f,c
  9195  012BE8  50DF               	movf	indf2,w,c
  9196  012BEA  A4D8               	btfss	status,2,c
  9197  012BEC  D007               	goto	l673
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
  9201  012BEE  C093  FFD9         	movff	_PortC+4,fsr2l
  9202  012BF2  C094  FFDA         	movff	_PortC+5,fsr2h
  9203  012BF6  0100               	movlb	0	; () banked
  9204  012BF8  84DF               	bsf	indf2,2,c
  9205  012BFA  0012               	return	
  9206  012BFC                     l673:
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;SPI.c: 223: else
  9210                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
  9211                           
  9212                           ; BSR set to: 0
  9213  012BFC  C089  FFD9         	movff	_PortD+4,fsr2l
  9214  012C00  C08A  FFDA         	movff	_PortD+5,fsr2h
  9215  012C04  0100               	movlb	0	; () banked
  9216  012C06  8EDF               	bsf	indf2,7,c
  9217  012C08  0012               	return	
  9218  012C0A                     __end_of_SPI_DCS:
  9219                           	opt stack 0
  9220                           tosu	equ	0xFFF
  9221                           tosh	equ	0xFFE
  9222                           tosl	equ	0xFFD
  9223                           pclath	equ	0xFFA
  9224                           tblptru	equ	0xFF8
  9225                           tblptrh	equ	0xFF7
  9226                           tblptrl	equ	0xFF6
  9227                           tablat	equ	0xFF5
  9228                           prodh	equ	0xFF4
  9229                           prodl	equ	0xFF3
  9230                           intcon	equ	0xFF2
  9231                           postinc0	equ	0xFEE
  9232                           wreg	equ	0xFE8
  9233                           postdec1	equ	0xFE5
  9234                           fsr1h	equ	0xFE2
  9235                           fsr1l	equ	0xFE1
  9236                           indf2	equ	0xFDF
  9237                           postinc2	equ	0xFDE
  9238                           postdec2	equ	0xFDD
  9239                           plusw2	equ	0xFDB
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function _Port_SetPinType *****************
  9245 ;; Defined at:
  9246 ;;		line 189 in file "Library/Port.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;  pInput          2   38[BANK0 ] const PTR struct Port
  9249 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  9250 ;;		 -> PortD(10), PortC(10), PortF(10), 
  9251 ;;  pPin            1   40[BANK0 ] enum E6750
  9252 ;;  pType           1   41[BANK0 ] enum E6795
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
  9255 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
  9256 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
  9257 ;;  Output          1   42[BANK0 ] enum E6475
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  1    wreg      enum E6475
  9260 ;; Registers used:
  9261 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;Total ram usage:        7 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:   11
  9274 ;; This function calls:
  9275 ;;		_Byte_SetBit
  9276 ;;		_PortProperty_Valid
  9277 ;;		_Word_SetPair
  9278 ;; This function is called by:
  9279 ;;		_Configure_GPIOs
  9280 ;;		_LED_Init
  9281 ;;		_Port_Init
  9282 ;;		_SPI_Init
  9283 ;;		_MXK_Init
  9284 ;;		_I2C_Init
  9285 ;;		_Motor_Init
  9286 ;;		_MXK_InitTestButton
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text40
  9291  010C58                     __ptext40:
  9292                           	opt stack 0
  9293  010C58                     _Port_SetPinType:
  9294                           	opt stack 18
  9295                           
  9296                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;incstack = 0
  9300  010C58  C0E7  FFD9         	movff	Port_SetPinType@pInput,fsr2l
  9301  010C5C  C0E8  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
  9302  010C60  CFDE F0EC          	movff	postinc2,Port_SetPinType@Props
  9303  010C64  CFDD F0ED          	movff	postdec2,Port_SetPinType@Props+1
  9304                           
  9305                           ;Port.c: 192: ePinError Output = ePinErrorState;
  9306  010C68  0E05               	movlw	5
  9307  010C6A  0100               	movlb	0	; () banked
  9308  010C6C  6FEB               	movwf	Port_SetPinType@Output& (0+255),b
  9309                           
  9310                           ;Port.c: 193: switch (pType)
  9311  010C6E  D0B5               	goto	l412
  9312  010C70                     
  9313                           ; BSR set to: 0
  9314                           ;Port.c: 197: {
  9315                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
  9316                           
  9317                           ; BSR set to: 0
  9318  010C70  0100               	movlb	0	; () banked
  9319  010C72  EE20 F002          	lfsr	2,2
  9320  010C76  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9321  010C78  26D9               	addwf	fsr2l,f,c
  9322  010C7A  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9323  010C7C  22DA               	addwfc	fsr2h,f,c
  9324  010C7E  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9325  010C82  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9326  010C86  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9327  010C8A  0E01               	movlw	1
  9328  010C8C  0100               	movlb	0	; () banked
  9329  010C8E  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9330  010C90  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9331                           
  9332                           ;Port.c: 203: break;
  9333  010C94  D0B0               	goto	l414
  9334  010C96                     
  9335                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
  9336  010C96  C0EC  F0D0         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
  9337  010C9A  C0ED  F0D1         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
  9338  010C9E  0E01               	movlw	1
  9339  010CA0  0100               	movlb	0	; () banked
  9340  010CA2  6FD2               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
  9341  010CA4  C0E9  F0D3         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
  9342  010CA8  EC26  F091         	call	_PortProperty_Valid	;wreg free
  9343  010CAC  0100               	movlb	0	; () banked
  9344  010CAE  6FEB               	movwf	Port_SetPinType@Output& (0+255),b
  9345  010CB0  0100               	movlb	0	; () banked
  9346  010CB2  51EB               	movf	Port_SetPinType@Output& (0+255),w,b
  9347  010CB4  A4D8               	btfss	status,2,c
  9348  010CB6  0012               	return	
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;Port.c: 208: {
  9352                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
  9353  010CB8  0100               	movlb	0	; () banked
  9354  010CBA  EE20 F002          	lfsr	2,2
  9355  010CBE  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9356  010CC0  26D9               	addwf	fsr2l,f,c
  9357  010CC2  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9358  010CC4  22DA               	addwfc	fsr2h,f,c
  9359  010CC6  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9360  010CCA  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9361  010CCE  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9362  010CD2  0E00               	movlw	0
  9363  010CD4  0100               	movlb	0	; () banked
  9364  010CD6  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9365  010CD8  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9366                           
  9367                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
  9368  010CDC  0100               	movlb	0	; () banked
  9369  010CDE  EE20 F004          	lfsr	2,4
  9370  010CE2  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9371  010CE4  26D9               	addwf	fsr2l,f,c
  9372  010CE6  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9373  010CE8  22DA               	addwfc	fsr2h,f,c
  9374  010CEA  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9375  010CEE  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9376  010CF2  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9377  010CF6  0E00               	movlw	0
  9378  010CF8  0100               	movlb	0	; () banked
  9379  010CFA  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9380  010CFC  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9381                           
  9382                           ;Port.c: 214: break;
  9383  010D00  D07A               	goto	l414
  9384  010D02                     
  9385                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
  9386                           
  9387                           ;Port.c: 218: case eTypeOutputOpenSource:
  9388  010D02  C0EC  F0D0         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
  9389  010D06  C0ED  F0D1         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
  9390  010D0A  0E02               	movlw	2
  9391  010D0C  0100               	movlb	0	; () banked
  9392  010D0E  6FD2               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
  9393  010D10  C0E9  F0D3         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
  9394  010D14  EC26  F091         	call	_PortProperty_Valid	;wreg free
  9395  010D18  0100               	movlb	0	; () banked
  9396  010D1A  6FEB               	movwf	Port_SetPinType@Output& (0+255),b
  9397  010D1C  0100               	movlb	0	; () banked
  9398  010D1E  51EB               	movf	Port_SetPinType@Output& (0+255),w,b
  9399  010D20  A4D8               	btfss	status,2,c
  9400  010D22  0012               	return	
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;Port.c: 220: {
  9404                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
  9405  010D24  0100               	movlb	0	; () banked
  9406  010D26  EE20 F002          	lfsr	2,2
  9407  010D2A  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9408  010D2C  26D9               	addwf	fsr2l,f,c
  9409  010D2E  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9410  010D30  22DA               	addwfc	fsr2h,f,c
  9411  010D32  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9412  010D36  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9413  010D3A  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9414  010D3E  0E01               	movlw	1
  9415  010D40  0100               	movlb	0	; () banked
  9416  010D42  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9417  010D44  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9418                           
  9419                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
  9420  010D48  0100               	movlb	0	; () banked
  9421  010D4A  EE20 F004          	lfsr	2,4
  9422  010D4E  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9423  010D50  26D9               	addwf	fsr2l,f,c
  9424  010D52  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9425  010D54  22DA               	addwfc	fsr2h,f,c
  9426  010D56  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9427  010D5A  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9428  010D5E  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9429  010D62  0E01               	movlw	1
  9430  010D64  0100               	movlb	0	; () banked
  9431  010D66  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9432  010D68  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9433                           
  9434                           ;Port.c: 226: break;
  9435  010D6C  D044               	goto	l414
  9436  010D6E                     
  9437                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
  9438                           
  9439                           ;Port.c: 230: case eTypeOutputPushPull:
  9440  010D6E  C0EC  F0D0         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
  9441  010D72  C0ED  F0D1         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
  9442  010D76  0E00               	movlw	0
  9443  010D78  0100               	movlb	0	; () banked
  9444  010D7A  6FD2               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
  9445  010D7C  C0E9  F0D3         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
  9446  010D80  EC26  F091         	call	_PortProperty_Valid	;wreg free
  9447  010D84  0100               	movlb	0	; () banked
  9448  010D86  6FEB               	movwf	Port_SetPinType@Output& (0+255),b
  9449  010D88  0100               	movlb	0	; () banked
  9450  010D8A  51EB               	movf	Port_SetPinType@Output& (0+255),w,b
  9451  010D8C  A4D8               	btfss	status,2,c
  9452  010D8E  0012               	return	
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;Port.c: 232: {
  9456                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
  9457  010D90  0100               	movlb	0	; () banked
  9458  010D92  EE20 F002          	lfsr	2,2
  9459  010D96  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9460  010D98  26D9               	addwf	fsr2l,f,c
  9461  010D9A  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9462  010D9C  22DA               	addwfc	fsr2h,f,c
  9463  010D9E  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9464  010DA2  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9465  010DA6  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9466  010DAA  0E00               	movlw	0
  9467  010DAC  0100               	movlb	0	; () banked
  9468  010DAE  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9469  010DB0  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9470                           
  9471                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
  9472  010DB4  0100               	movlb	0	; () banked
  9473  010DB6  EE20 F004          	lfsr	2,4
  9474  010DBA  51E7               	movf	Port_SetPinType@pInput& (0+255),w,b
  9475  010DBC  26D9               	addwf	fsr2l,f,c
  9476  010DBE  51E8               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
  9477  010DC0  22DA               	addwfc	fsr2h,f,c
  9478  010DC2  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
  9479  010DC6  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
  9480  010DCA  C0E9  F0C3         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
  9481  010DCE  0E00               	movlw	0
  9482  010DD0  0100               	movlb	0	; () banked
  9483  010DD2  6FC4               	movwf	Byte_SetBit@pValue& (0+255),b
  9484  010DD4  ECE4  F092         	call	_Byte_SetBit	;wreg free
  9485                           
  9486                           ;Port.c: 239: }
  9487                           
  9488                           ;Port.c: 238: break;
  9489  010DD8  D00E               	goto	l414
  9490  010DDA                     l412:
  9491  010DDA  0100               	movlb	0	; () banked
  9492  010DDC  51EA               	movf	Port_SetPinType@pType& (0+255),w,b
  9493                           
  9494                           ; Switch size 1, requested type "space"
  9495                           ; Number of cases is 4, Range of values is 0 to 3
  9496                           ; switch strategies available:
  9497                           ; Name         Instructions Cycles
  9498                           ; simple_byte           13     7 (average)
  9499                           ;	Chosen strategy is simple_byte
  9500  010DDE  0A00               	xorlw	0	; case 0
  9501  010DE0  B4D8               	btfsc	status,2,c
  9502  010DE2  D746               	goto	l413
  9503  010DE4  0A01               	xorlw	1	; case 1
  9504  010DE6  B4D8               	btfsc	status,2,c
  9505  010DE8  D756               	goto	l415
  9506  010DEA  0A03               	xorlw	3	; case 2
  9507  010DEC  B4D8               	btfsc	status,2,c
  9508  010DEE  D789               	goto	l417
  9509  010DF0  0A01               	xorlw	1	; case 3
  9510  010DF2  B4D8               	btfsc	status,2,c
  9511  010DF4  D7BC               	goto	l421
  9512  010DF6                     l414:
  9513                           
  9514                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
  9515                           
  9516                           ; BSR set to: 0
  9517  010DF6  0E08               	movlw	8
  9518  010DF8  0100               	movlb	0	; () banked
  9519  010DFA  25E7               	addwf	Port_SetPinType@pInput& (0+255),w,b
  9520  010DFC  0100               	movlb	0	; () banked
  9521  010DFE  6FD0               	movwf	Word_SetPair@pInput& (0+255),b
  9522  010E00  0E00               	movlw	0
  9523  010E02  0100               	movlb	0	; () banked
  9524  010E04  21E8               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
  9525  010E06  0100               	movlb	0	; () banked
  9526  010E08  6FD1               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  9527  010E0A  C0E9  F0D2         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
  9528  010E0E  C0EA  F0D3         	movff	Port_SetPinType@pType,Word_SetPair@pValue
  9529  010E12  ECB5  F094         	call	_Word_SetPair	;wreg free
  9530  010E16  0012               	return	
  9531  010E18                     __end_of_Port_SetPinType:
  9532                           	opt stack 0
  9533                           tosu	equ	0xFFF
  9534                           tosh	equ	0xFFE
  9535                           tosl	equ	0xFFD
  9536                           pclath	equ	0xFFA
  9537                           tblptru	equ	0xFF8
  9538                           tblptrh	equ	0xFF7
  9539                           tblptrl	equ	0xFF6
  9540                           tablat	equ	0xFF5
  9541                           prodh	equ	0xFF4
  9542                           prodl	equ	0xFF3
  9543                           intcon	equ	0xFF2
  9544                           postinc0	equ	0xFEE
  9545                           wreg	equ	0xFE8
  9546                           postdec1	equ	0xFE5
  9547                           fsr1h	equ	0xFE2
  9548                           fsr1l	equ	0xFE1
  9549                           indf2	equ	0xFDF
  9550                           postinc2	equ	0xFDE
  9551                           postdec2	equ	0xFDD
  9552                           plusw2	equ	0xFDB
  9553                           fsr2h	equ	0xFDA
  9554                           fsr2l	equ	0xFD9
  9555                           status	equ	0xFD8
  9556                           
  9557 ;; *************** function _Word_SetPair *****************
  9558 ;; Defined at:
  9559 ;;		line 149 in file "Library/Types.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  pInput          2   15[BANK0 ] PTR struct Word
  9562 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  9563 ;;		 -> PortD(10), PortC(10), PortF(10), 
  9564 ;;  pPair           1   17[BANK0 ] unsigned char 
  9565 ;;  pValue          1   18[BANK0 ] unsigned char 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;		None
  9568 ;; Return value:  Size  Location     Type
  9569 ;;                  1    wreg      void 
  9570 ;; Registers used:
  9571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;Total ram usage:        4 bytes
  9582 ;; Hardware stack levels used:    1
  9583 ;; Hardware stack levels required when called:    9
  9584 ;; This function calls:
  9585 ;;		_Byte_SetPair
  9586 ;; This function is called by:
  9587 ;;		_Port_SetPinType
  9588 ;;		_Port_SetQuadType
  9589 ;;		_Port_SetType
  9590 ;;		_Port_SetPairType
  9591 ;;		_PortProperty_Init
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           	psect	text41
  9596  01296A                     __ptext41:
  9597                           	opt stack 0
  9598  01296A                     _Word_SetPair:
  9599                           	opt stack 19
  9600                           
  9601                           ;Types.c: 151: if (pPair >= 4)
  9602                           
  9603                           ;incstack = 0
  9604  01296A  0E03               	movlw	3
  9605  01296C  0100               	movlb	0	; () banked
  9606  01296E  65D2               	cpfsgt	Word_SetPair@pPair& (0+255),b
  9607  012970  D014               	goto	l776
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
  9611  012972  0E01               	movlw	1
  9612  012974  0100               	movlb	0	; () banked
  9613  012976  25D0               	addwf	Word_SetPair@pInput& (0+255),w,b
  9614  012978  0100               	movlb	0	; () banked
  9615  01297A  6FCC               	movwf	Byte_SetPair@pInput& (0+255),b
  9616  01297C  0E00               	movlw	0
  9617  01297E  0100               	movlb	0	; () banked
  9618  012980  21D1               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
  9619  012982  0100               	movlb	0	; () banked
  9620  012984  6FCD               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
  9621  012986  0100               	movlb	0	; () banked
  9622  012988  51D2               	movf	Word_SetPair@pPair& (0+255),w,b
  9623  01298A  0FFC               	addlw	252
  9624  01298C  0100               	movlb	0	; () banked
  9625  01298E  6FCE               	movwf	Byte_SetPair@pPair& (0+255),b
  9626  012990  C0D3  F0CF         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
  9627  012994  EC6D  F096         	call	_Byte_SetPair	;wreg free
  9628  012998  0012               	return	
  9629  01299A                     l776:
  9630                           
  9631                           ;Types.c: 153: else
  9632                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
  9633  01299A  C0D0  F0CC         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
  9634  01299E  C0D1  F0CD         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
  9635  0129A2  C0D2  F0CE         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
  9636  0129A6  C0D3  F0CF         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
  9637  0129AA  EC6D  F096         	call	_Byte_SetPair	;wreg free
  9638  0129AE  0012               	return	
  9639  0129B0                     __end_of_Word_SetPair:
  9640                           	opt stack 0
  9641                           tosu	equ	0xFFF
  9642                           tosh	equ	0xFFE
  9643                           tosl	equ	0xFFD
  9644                           pclath	equ	0xFFA
  9645                           tblptru	equ	0xFF8
  9646                           tblptrh	equ	0xFF7
  9647                           tblptrl	equ	0xFF6
  9648                           tablat	equ	0xFF5
  9649                           prodh	equ	0xFF4
  9650                           prodl	equ	0xFF3
  9651                           intcon	equ	0xFF2
  9652                           postinc0	equ	0xFEE
  9653                           wreg	equ	0xFE8
  9654                           postdec1	equ	0xFE5
  9655                           fsr1h	equ	0xFE2
  9656                           fsr1l	equ	0xFE1
  9657                           indf2	equ	0xFDF
  9658                           postinc2	equ	0xFDE
  9659                           postdec2	equ	0xFDD
  9660                           plusw2	equ	0xFDB
  9661                           fsr2h	equ	0xFDA
  9662                           fsr2l	equ	0xFD9
  9663                           status	equ	0xFD8
  9664                           
  9665 ;; *************** function _Byte_SetPair *****************
  9666 ;; Defined at:
  9667 ;;		line 83 in file "Library/Types.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;  pInput          2   11[BANK0 ] PTR struct Byte
  9670 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
  9671 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
  9672 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
  9673 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
  9674 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
  9675 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
  9676 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
  9677 ;;		 -> NULL(0), 
  9678 ;;  pPair           1   13[BANK0 ] unsigned char 
  9679 ;;  pValue          1   14[BANK0 ] unsigned char 
  9680 ;; Auto vars:     Size  Location     Type
  9681 ;;		None
  9682 ;; Return value:  Size  Location     Type
  9683 ;;                  1    wreg      void 
  9684 ;; Registers used:
  9685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9686 ;; Tracked objects:
  9687 ;;		On entry : 0/0
  9688 ;;		On exit  : 0/0
  9689 ;;		Unchanged: 0/0
  9690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9691 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;Total ram usage:        4 bytes
  9696 ;; Hardware stack levels used:    1
  9697 ;; Hardware stack levels required when called:    8
  9698 ;; This function calls:
  9699 ;;		_Byte_SetZone
  9700 ;; This function is called by:
  9701 ;;		_Word_SetPair
  9702 ;;		_Port_SetPairType
  9703 ;;		_Port_SetPair
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text42
  9708  012CDA                     __ptext42:
  9709                           	opt stack 0
  9710  012CDA                     _Byte_SetPair:
  9711                           	opt stack 19
  9712                           
  9713                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
  9714                           
  9715                           ;incstack = 0
  9716  012CDA  C0CC  F0C1         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
  9717  012CDE  C0CD  F0C2         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
  9718  012CE2  0E04               	movlw	4
  9719  012CE4  0100               	movlb	0	; () banked
  9720  012CE6  6FC3               	movwf	Byte_SetZone@pMax& (0+255),b
  9721  012CE8  C0CE  F0C4         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
  9722  012CEC  0E02               	movlw	2
  9723  012CEE  0100               	movlb	0	; () banked
  9724  012CF0  6FC5               	movwf	Byte_SetZone@pChunkSize& (0+255),b
  9725  012CF2  C0CF  F0C6         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
  9726  012CF6  EC5E  F08D         	call	_Byte_SetZone	;wreg free
  9727  012CFA  0012               	return		;funcret
  9728  012CFC                     __end_of_Byte_SetPair:
  9729                           	opt stack 0
  9730                           tosu	equ	0xFFF
  9731                           tosh	equ	0xFFE
  9732                           tosl	equ	0xFFD
  9733                           pclath	equ	0xFFA
  9734                           tblptru	equ	0xFF8
  9735                           tblptrh	equ	0xFF7
  9736                           tblptrl	equ	0xFF6
  9737                           tablat	equ	0xFF5
  9738                           prodh	equ	0xFF4
  9739                           prodl	equ	0xFF3
  9740                           intcon	equ	0xFF2
  9741                           postinc0	equ	0xFEE
  9742                           wreg	equ	0xFE8
  9743                           postdec1	equ	0xFE5
  9744                           fsr1h	equ	0xFE2
  9745                           fsr1l	equ	0xFE1
  9746                           indf2	equ	0xFDF
  9747                           postinc2	equ	0xFDE
  9748                           postdec2	equ	0xFDD
  9749                           plusw2	equ	0xFDB
  9750                           fsr2h	equ	0xFDA
  9751                           fsr2l	equ	0xFD9
  9752                           status	equ	0xFD8
  9753                           
  9754 ;; *************** function _PortProperty_Valid *****************
  9755 ;; Defined at:
  9756 ;;		line 220 in file "Library/Types.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
  9759 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  9760 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
  9761 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
  9762 ;;		 -> PortC(10), PortF(10), NULL(0), 
  9763 ;;  pPinDrive       1   17[BANK0 ] enum E6469
  9764 ;;  pPin            1   18[BANK0 ] unsigned char 
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
  9767 ;;  Pair            1   37[BANK0 ] enum E6469
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  1    wreg      enum E6475
  9770 ;; Registers used:
  9771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9777 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;Total ram usage:       23 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:   10
  9784 ;; This function calls:
  9785 ;;		_Word_GetPair
  9786 ;; This function is called by:
  9787 ;;		_Port_CheckPairType
  9788 ;;		_Port_SetPinType
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	text43
  9793  01224C                     __ptext43:
  9794                           	opt stack 0
  9795  01224C                     _PortProperty_Valid:
  9796                           	opt stack 15
  9797                           
  9798                           ;Types.c: 222: ePinDrive Pair;
  9799                           ;Types.c: 223: const ePinError Errors[4][4] =
  9800                           ;Types.c: 224: {
  9801                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
  9802                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
  9803                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
  9804                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
  9805                           ;Types.c: 230: };
  9806                           
  9807                           ;incstack = 0
  9808  01224C  0EE5               	movlw	low PortProperty_Valid@F6830
  9809  01224E  6EF6               	movwf	tblptrl,c
  9810  012250                     	if	1	;There is more than 1 active tblptr byte
  9811  012250  0EFD               	movlw	high PortProperty_Valid@F6830
  9812  012252  6EF7               	movwf	tblptrh,c
  9813  012254                     	endif
  9814  012254                     	if	1	;There are 3 active tblptr bytes
  9815  012254  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
  9816  012256  6EF8               	movwf	tblptru,c
  9817  012258                     	endif
  9818  012258  EE20  F0D6         	lfsr	2,PortProperty_Valid@Errors
  9819  01225C  0E0F               	movlw	15
  9820  01225E                     u5830:
  9821  01225E  0009               	tblrd		*+
  9822  012260  CFF5 FFDE          	movff	tablat,postinc2
  9823  012264  06E8               	decf	wreg,f,c
  9824  012266  E2FB               	bc	u5830
  9825                           
  9826                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
  9827  012268  C0D0  F0CD         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
  9828  01226C  C0D1  F0CE         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
  9829  012270  C0D3  F0CF         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
  9830  012274  EC7A  F095         	call	_Word_GetPair	;wreg free
  9831  012278  0100               	movlb	0	; () banked
  9832  01227A  6FE6               	movwf	PortProperty_Valid@Pair& (0+255),b
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
  9836  01227C  0E04               	movlw	4
  9837  01227E  0100               	movlb	0	; () banked
  9838  012280  61D2               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
  9839  012282  D020               	goto	l819
  9840                           
  9841                           ; BSR set to: 0
  9842  012284  0E04               	movlw	4
  9843  012286  0100               	movlb	0	; () banked
  9844  012288  61E6               	cpfslt	PortProperty_Valid@Pair& (0+255),b
  9845  01228A  D01C               	goto	l819
  9846                           
  9847                           ; BSR set to: 0
  9848                           ;Types.c: 235: return Errors[pPinDrive][Pair];
  9849  01228C  0100               	movlb	0	; () banked
  9850  01228E  51D2               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
  9851  012290  0D04               	mullw	4
  9852  012292  0ED6               	movlw	low PortProperty_Valid@Errors
  9853  012294  0100               	movlb	0	; () banked
  9854  012296  6FD4               	movwf	??_PortProperty_Valid& (0+255),b
  9855  012298  0E00               	movlw	high PortProperty_Valid@Errors
  9856  01229A  0100               	movlb	0	; () banked
  9857  01229C  6FD5               	movwf	(??_PortProperty_Valid+1)& (0+255),b
  9858  01229E  50F3               	movf	prodl,w,c
  9859  0122A0  0100               	movlb	0	; () banked
  9860  0122A2  27D4               	addwf	??_PortProperty_Valid& (0+255),f,b
  9861  0122A4  50F4               	movf	prodh,w,c
  9862  0122A6  0100               	movlb	0	; () banked
  9863  0122A8  23D5               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
  9864  0122AA  0100               	movlb	0	; () banked
  9865  0122AC  51E6               	movf	PortProperty_Valid@Pair& (0+255),w,b
  9866  0122AE  0D01               	mullw	1
  9867  0122B0  50F3               	movf	prodl,w,c
  9868  0122B2  0100               	movlb	0	; () banked
  9869  0122B4  25D4               	addwf	??_PortProperty_Valid& (0+255),w,b
  9870  0122B6  6ED9               	movwf	fsr2l,c
  9871  0122B8  50F4               	movf	prodh,w,c
  9872  0122BA  0100               	movlb	0	; () banked
  9873  0122BC  21D5               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
  9874  0122BE  6EDA               	movwf	fsr2h,c
  9875  0122C0  50DF               	movf	indf2,w,c
  9876                           
  9877                           ; BSR set to: 0
  9878  0122C2  0012               	return	
  9879  0122C4                     l819:
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;Types.c: 237: return ePinErrorState;
  9883                           
  9884                           ; BSR set to: 0
  9885  0122C4  0E05               	movlw	5
  9886  0122C6  0012               	return	
  9887  0122C8                     __end_of_PortProperty_Valid:
  9888                           	opt stack 0
  9889                           tosu	equ	0xFFF
  9890                           tosh	equ	0xFFE
  9891                           tosl	equ	0xFFD
  9892                           pclath	equ	0xFFA
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           intcon	equ	0xFF2
  9900                           postinc0	equ	0xFEE
  9901                           wreg	equ	0xFE8
  9902                           postdec1	equ	0xFE5
  9903                           fsr1h	equ	0xFE2
  9904                           fsr1l	equ	0xFE1
  9905                           indf2	equ	0xFDF
  9906                           postinc2	equ	0xFDE
  9907                           postdec2	equ	0xFDD
  9908                           plusw2	equ	0xFDB
  9909                           fsr2h	equ	0xFDA
  9910                           fsr2l	equ	0xFD9
  9911                           status	equ	0xFD8
  9912                           
  9913 ;; *************** function _Byte_SetQuad *****************
  9914 ;; Defined at:
  9915 ;;		line 101 in file "Library/Types.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;  pInput          2   11[BANK0 ] PTR struct Byte
  9918 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
  9919 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  9920 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  9921 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  9922 ;;		 -> NULL(0), 
  9923 ;;  pQuad           1   13[BANK0 ] unsigned char 
  9924 ;;  pValue          1   14[BANK0 ] unsigned char 
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;                  1    wreg      void 
  9929 ;; Registers used:
  9930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;Total ram usage:        4 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; Hardware stack levels required when called:    8
  9943 ;; This function calls:
  9944 ;;		_Byte_SetZone
  9945 ;; This function is called by:
  9946 ;;		_Port_SetQuadType
  9947 ;;		_SPI_Init
  9948 ;;		_SPI_MaxSpeed
  9949 ;;		_Port_SetQuad
  9950 ;;		_SPI_MinSpeed
  9951 ;;		_Word_SetQuad
  9952 ;;		_I2C_Init
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text44
  9957  012CFC                     __ptext44:
  9958                           	opt stack 0
  9959  012CFC                     _Byte_SetQuad:
  9960                           	opt stack 20
  9961                           
  9962                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;incstack = 0
  9966  012CFC  C0CC  F0C1         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
  9967  012D00  C0CD  F0C2         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
  9968  012D04  0E02               	movlw	2
  9969  012D06  0100               	movlb	0	; () banked
  9970  012D08  6FC3               	movwf	Byte_SetZone@pMax& (0+255),b
  9971  012D0A  C0CE  F0C4         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
  9972  012D0E  0E04               	movlw	4
  9973  012D10  0100               	movlb	0	; () banked
  9974  012D12  6FC5               	movwf	Byte_SetZone@pChunkSize& (0+255),b
  9975  012D14  C0CF  F0C6         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
  9976  012D18  EC5E  F08D         	call	_Byte_SetZone	;wreg free
  9977  012D1C  0012               	return		;funcret
  9978  012D1E                     __end_of_Byte_SetQuad:
  9979                           	opt stack 0
  9980                           tosu	equ	0xFFF
  9981                           tosh	equ	0xFFE
  9982                           tosl	equ	0xFFD
  9983                           pclath	equ	0xFFA
  9984                           tblptru	equ	0xFF8
  9985                           tblptrh	equ	0xFF7
  9986                           tblptrl	equ	0xFF6
  9987                           tablat	equ	0xFF5
  9988                           prodh	equ	0xFF4
  9989                           prodl	equ	0xFF3
  9990                           intcon	equ	0xFF2
  9991                           postinc0	equ	0xFEE
  9992                           wreg	equ	0xFE8
  9993                           postdec1	equ	0xFE5
  9994                           fsr1h	equ	0xFE2
  9995                           fsr1l	equ	0xFE1
  9996                           indf2	equ	0xFDF
  9997                           postinc2	equ	0xFDE
  9998                           postdec2	equ	0xFDD
  9999                           plusw2	equ	0xFDB
 10000                           fsr2h	equ	0xFDA
 10001                           fsr2l	equ	0xFD9
 10002                           status	equ	0xFD8
 10003                           
 10004 ;; *************** function _Byte_SetZone *****************
 10005 ;; Defined at:
 10006 ;;		line 47 in file "Library/Types.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10009 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 10010 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 10011 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 10012 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 10013 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 10014 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 10015 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 10016 ;;		 -> PortC(10), PortF(10), NULL(0), 
 10017 ;;  pMax            1    2[BANK0 ] unsigned char 
 10018 ;;  pChunk          1    3[BANK0 ] unsigned char 
 10019 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 10020 ;;  pValue          1    5[BANK0 ] unsigned char 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  MASK            1   10[BANK0 ] unsigned char 
 10023 ;;  Offset          1    9[BANK0 ] unsigned char 
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  1    wreg      void 
 10026 ;; Registers used:
 10027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10033 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;Total ram usage:       11 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    7
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_Byte_SetPair
 10044 ;;		_Byte_SetQuad
 10045 ;;		_Byte_SetTriple
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text45
 10050  011ABC                     __ptext45:
 10051                           	opt stack 0
 10052  011ABC                     _Byte_SetZone:
 10053                           	opt stack 19
 10054                           
 10055                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 10056                           
 10057                           ;incstack = 0
 10058  011ABC  0100               	movlb	0	; () banked
 10059  011ABE  51C5               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 10060  011AC0  0D01               	mullw	1
 10061  011AC2  0EF5               	movlw	low _MASKS
 10062  011AC4  24F3               	addwf	prodl,w,c
 10063  011AC6  6EF6               	movwf	tblptrl,c
 10064  011AC8  0EFD               	movlw	high _MASKS
 10065  011ACA  20F4               	addwfc	prodh,w,c
 10066  011ACC  6EF7               	movwf	tblptrh,c
 10067  011ACE                     	if	1	;There are 3 active tblptr bytes
 10068  011ACE  6AF8               	clrf	tblptru,c
 10069  011AD0  0E00               	movlw	low (__mediumconst shr (0+16))
 10070  011AD2  22F8               	addwfc	tblptru,f,c
 10071  011AD4                     	endif
 10072  011AD4  0008               	tblrd		*
 10073  011AD6  CFF5 F0CB          	movff	tablat,Byte_SetZone@MASK
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;Types.c: 50: UINT8 Offset = 0;
 10077  011ADA  0E00               	movlw	0
 10078  011ADC  0100               	movlb	0	; () banked
 10079  011ADE  6FCA               	movwf	Byte_SetZone@Offset& (0+255),b
 10080                           
 10081                           ;Types.c: 52: while (pChunk >= pMax)
 10082  011AE0  D006               	goto	l726
 10083  011AE2                     
 10084                           ; BSR set to: 0
 10085                           ;Types.c: 53: {
 10086                           ;Types.c: 54: pChunk -= pMax;
 10087                           
 10088                           ; BSR set to: 0
 10089  011AE2  0100               	movlb	0	; () banked
 10090  011AE4  51C3               	movf	Byte_SetZone@pMax& (0+255),w,b
 10091  011AE6  0100               	movlb	0	; () banked
 10092  011AE8  5FC4               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;Types.c: 55: Offset += 1;
 10096  011AEA  0100               	movlb	0	; () banked
 10097  011AEC  2BCA               	incf	Byte_SetZone@Offset& (0+255),f,b
 10098  011AEE                     l726:
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ; BSR set to: 0
 10103  011AEE  0100               	movlb	0	; () banked
 10104  011AF0  51C3               	movf	Byte_SetZone@pMax& (0+255),w,b
 10105  011AF2  0100               	movlb	0	; () banked
 10106  011AF4  5DC4               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 10107  011AF6  B0D8               	btfsc	status,0,c
 10108  011AF8  D7F4               	goto	l727
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;Types.c: 56: }
 10112                           ;Types.c: 57: pChunk *= pChunkSize;
 10113                           
 10114                           ; BSR set to: 0
 10115  011AFA  0100               	movlb	0	; () banked
 10116  011AFC  51C5               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 10117  011AFE  0100               	movlb	0	; () banked
 10118  011B00  03C4               	mulwf	Byte_SetZone@pChunk& (0+255),b
 10119  011B02  50F3               	movf	prodl,w,c
 10120  011B04  6FC4               	movwf	Byte_SetZone@pChunk& (0+255),b
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;Types.c: 58: pChunk += Offset;
 10124  011B06  0100               	movlb	0	; () banked
 10125  011B08  51CA               	movf	Byte_SetZone@Offset& (0+255),w,b
 10126  011B0A  0100               	movlb	0	; () banked
 10127  011B0C  27C4               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;Types.c: 60: pValue &= MASK;
 10131  011B0E  0100               	movlb	0	; () banked
 10132  011B10  51CB               	movf	Byte_SetZone@MASK& (0+255),w,b
 10133  011B12  0100               	movlb	0	; () banked
 10134  011B14  17C6               	andwf	Byte_SetZone@pValue& (0+255),f,b
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 10138  011B16  C0C4  F0C7         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 10139  011B1A  C0CB  F0C8         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 10140  011B1E  0100               	movlb	0	; () banked
 10141  011B20  2BC7               	incf	??_Byte_SetZone& (0+255),f,b
 10142  011B22  D003               	goto	u5894
 10143  011B24                     u5895:
 10144  011B24  0100               	movlb	0	; () banked
 10145  011B26  90D8               	bcf	status,0,c
 10146  011B28  37C8               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 10147  011B2A                     u5894:
 10148  011B2A  0100               	movlb	0	; () banked
 10149  011B2C  2FC7               	decfsz	??_Byte_SetZone& (0+255),f,b
 10150  011B2E  D7FA               	goto	u5895
 10151  011B30  0100               	movlb	0	; () banked
 10152  011B32  51C8               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 10153  011B34  0AFF               	xorlw	255
 10154  011B36  0100               	movlb	0	; () banked
 10155  011B38  6FC9               	movwf	(??_Byte_SetZone+2)& (0+255),b
 10156  011B3A  C0C1  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 10157  011B3E  C0C2  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 10158  011B42  0100               	movlb	0	; () banked
 10159  011B44  51C9               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 10160  011B46  16DF               	andwf	indf2,f,c
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 10164  011B48  C0C4  F0C7         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 10165  011B4C  C0C6  F0C8         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 10166  011B50  0100               	movlb	0	; () banked
 10167  011B52  2BC7               	incf	??_Byte_SetZone& (0+255),f,b
 10168  011B54  D003               	goto	u5904
 10169  011B56                     u5905:
 10170  011B56  0100               	movlb	0	; () banked
 10171  011B58  90D8               	bcf	status,0,c
 10172  011B5A  37C8               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 10173  011B5C                     u5904:
 10174  011B5C  0100               	movlb	0	; () banked
 10175  011B5E  2FC7               	decfsz	??_Byte_SetZone& (0+255),f,b
 10176  011B60  D7FA               	goto	u5905
 10177  011B62  C0C1  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 10178  011B66  C0C2  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 10179  011B6A  0100               	movlb	0	; () banked
 10180  011B6C  51C8               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 10181  011B6E  12DF               	iorwf	indf2,f,c
 10182                           
 10183                           ; BSR set to: 0
 10184  011B70  0012               	return		;funcret
 10185  011B72                     __end_of_Byte_SetZone:
 10186                           	opt stack 0
 10187                           tosu	equ	0xFFF
 10188                           tosh	equ	0xFFE
 10189                           tosl	equ	0xFFD
 10190                           pclath	equ	0xFFA
 10191                           tblptru	equ	0xFF8
 10192                           tblptrh	equ	0xFF7
 10193                           tblptrl	equ	0xFF6
 10194                           tablat	equ	0xFF5
 10195                           prodh	equ	0xFF4
 10196                           prodl	equ	0xFF3
 10197                           intcon	equ	0xFF2
 10198                           postinc0	equ	0xFEE
 10199                           wreg	equ	0xFE8
 10200                           postdec1	equ	0xFE5
 10201                           fsr1h	equ	0xFE2
 10202                           fsr1l	equ	0xFE1
 10203                           indf2	equ	0xFDF
 10204                           postinc2	equ	0xFDE
 10205                           postdec2	equ	0xFDD
 10206                           plusw2	equ	0xFDB
 10207                           fsr2h	equ	0xFDA
 10208                           fsr2l	equ	0xFD9
 10209                           status	equ	0xFD8
 10210                           
 10211 ;; *************** function _LCD_Reset *****************
 10212 ;; Defined at:
 10213 ;;		line 95 in file "Library/LCD.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;		None
 10216 ;; Auto vars:     Size  Location     Type
 10217 ;;		None
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  1    wreg      void 
 10220 ;; Registers used:
 10221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;Total ram usage:        0 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:   13
 10234 ;; This function calls:
 10235 ;;		_LED_Toggle
 10236 ;;		_Reset_High
 10237 ;;		_Reset_Low
 10238 ;;		_delay_ms
 10239 ;; This function is called by:
 10240 ;;		_Configure_GPIOs
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           	psect	text46
 10245  01283E                     __ptext46:
 10246                           	opt stack 0
 10247  01283E                     _LCD_Reset:
 10248                           	opt stack 15
 10249                           
 10250                           ;LCD.c: 97: Reset_High();
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;incstack = 0
 10254  01283E  ECAD  F096         	call	_Reset_High	;wreg free
 10255                           
 10256                           ;LCD.c: 98: LED_Toggle(eLED2);
 10257  012842  0E01               	movlw	1
 10258  012844  EC91  F094         	call	_LED_Toggle
 10259                           
 10260                           ;LCD.c: 99: delay_ms(0x80);
 10261  012848  0E00               	movlw	0
 10262  01284A  0100               	movlb	0	; () banked
 10263  01284C  6FC2               	movwf	(delay_ms@ms+1)& (0+255),b
 10264  01284E  0E80               	movlw	128
 10265  012850  6FC1               	movwf	delay_ms@ms& (0+255),b
 10266  012852  EC7C  F092         	call	_delay_ms	;wreg free
 10267                           
 10268                           ;LCD.c: 100: LED_Toggle(eLED2);
 10269  012856  0E01               	movlw	1
 10270  012858  EC91  F094         	call	_LED_Toggle
 10271                           
 10272                           ;LCD.c: 101: Reset_Low();
 10273  01285C  EC9E  F096         	call	_Reset_Low	;wreg free
 10274                           
 10275                           ;LCD.c: 102: delay_ms(0x80);
 10276  012860  0E00               	movlw	0
 10277  012862  0100               	movlb	0	; () banked
 10278  012864  6FC2               	movwf	(delay_ms@ms+1)& (0+255),b
 10279  012866  0E80               	movlw	128
 10280  012868  6FC1               	movwf	delay_ms@ms& (0+255),b
 10281  01286A  EC7C  F092         	call	_delay_ms	;wreg free
 10282                           
 10283                           ;LCD.c: 103: LED_Toggle(eLED2);
 10284  01286E  0E01               	movlw	1
 10285  012870  EC91  F094         	call	_LED_Toggle
 10286                           
 10287                           ;LCD.c: 104: Reset_High();
 10288  012874  ECAD  F096         	call	_Reset_High	;wreg free
 10289                           
 10290                           ;LCD.c: 105: delay_ms(0x80);
 10291  012878  0E00               	movlw	0
 10292  01287A  0100               	movlb	0	; () banked
 10293  01287C  6FC2               	movwf	(delay_ms@ms+1)& (0+255),b
 10294  01287E  0E80               	movlw	128
 10295  012880  6FC1               	movwf	delay_ms@ms& (0+255),b
 10296  012882  EC7C  F092         	call	_delay_ms	;wreg free
 10297                           
 10298                           ;LCD.c: 106: LED_Toggle(eLED2);
 10299  012886  0E01               	movlw	1
 10300  012888  EC91  F094         	call	_LED_Toggle
 10301  01288C  0012               	return		;funcret
 10302  01288E                     __end_of_LCD_Reset:
 10303                           	opt stack 0
 10304                           tosu	equ	0xFFF
 10305                           tosh	equ	0xFFE
 10306                           tosl	equ	0xFFD
 10307                           pclath	equ	0xFFA
 10308                           tblptru	equ	0xFF8
 10309                           tblptrh	equ	0xFF7
 10310                           tblptrl	equ	0xFF6
 10311                           tablat	equ	0xFF5
 10312                           prodh	equ	0xFF4
 10313                           prodl	equ	0xFF3
 10314                           intcon	equ	0xFF2
 10315                           postinc0	equ	0xFEE
 10316                           wreg	equ	0xFE8
 10317                           postdec1	equ	0xFE5
 10318                           fsr1h	equ	0xFE2
 10319                           fsr1l	equ	0xFE1
 10320                           indf2	equ	0xFDF
 10321                           postinc2	equ	0xFDE
 10322                           postdec2	equ	0xFDD
 10323                           plusw2	equ	0xFDB
 10324                           fsr2h	equ	0xFDA
 10325                           fsr2l	equ	0xFD9
 10326                           status	equ	0xFD8
 10327                           
 10328 ;; *************** function _delay_ms *****************
 10329 ;; Defined at:
 10330 ;;		line 240 in file "Library/Types.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;  ms              2    0[BANK0 ] unsigned short 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  u               4    2[BANK0 ] volatile unsigned long 
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      void 
 10337 ;; Registers used:
 10338 ;;		wreg, status,2, status,0
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;Total ram usage:        6 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:    7
 10351 ;; This function calls:
 10352 ;;		Nothing
 10353 ;; This function is called by:
 10354 ;;		_LCD_Reset
 10355 ;;		_LCD_Init
 10356 ;;		_MXK_Init
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           	psect	text47
 10361  0124F8                     __ptext47:
 10362                           	opt stack 0
 10363  0124F8                     _delay_ms:
 10364                           	opt stack 22
 10365                           
 10366                           ;Types.c: 242: volatile unsigned long u;
 10367                           ;Types.c: 243: while (ms--)
 10368                           
 10369                           ;incstack = 0
 10370  0124F8  D01F               	goto	u6110
 10371  0124FA                     l9372:
 10372                           
 10373                           ;Types.c: 244: {
 10374                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 10375  0124FA  0E00               	movlw	0
 10376  0124FC  0100               	movlb	0	; () banked
 10377  0124FE  6FC3               	movwf	delay_ms@u& (0+255),b	;volatile
 10378  012500  0E00               	movlw	0
 10379  012502  6FC4               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10380  012504  0E00               	movlw	0
 10381  012506  6FC5               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 10382  012508  0E00               	movlw	0
 10383  01250A  6FC6               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 10384  01250C                     l9374:
 10385                           
 10386                           ; BSR set to: 0
 10387  01250C  0100               	movlb	0	; () banked
 10388  01250E  51C6               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 10389  012510  0100               	movlb	0	; () banked
 10390  012512  11C5               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 10391  012514  E111               	bnz	l9380
 10392  012516  0EB0               	movlw	176
 10393  012518  0100               	movlb	0	; () banked
 10394  01251A  5DC3               	subwf	delay_ms@u& (0+255),w,b	;volatile
 10395  01251C  0E04               	movlw	4
 10396  01251E  0100               	movlb	0	; () banked
 10397  012520  59C4               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 10398  012522  B0D8               	btfsc	status,0,c
 10399  012524  D009               	goto	u6110
 10400                           
 10401                           ; BSR set to: 0
 10402                           
 10403                           ; BSR set to: 0
 10404  012526  F000               	nop		; ;# 
 10405  012528  0E01               	movlw	1
 10406  01252A  0100               	movlb	0	; () banked
 10407  01252C  27C3               	addwf	delay_ms@u& (0+255),f,b	;volatile
 10408  01252E  0E00               	movlw	0
 10409  012530  23C4               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 10410  012532  23C5               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 10411  012534  23C6               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 10412  012536  D7EA               	goto	l9374
 10413  012538                     u6110:
 10414  012538                     l9380:
 10415  012538  0100               	movlb	0	; () banked
 10416  01253A  07C1               	decf	delay_ms@ms& (0+255),f,b
 10417  01253C  A0D8               	btfss	status,0,c
 10418  01253E  07C2               	decf	(delay_ms@ms+1)& (0+255),f,b
 10419  012540  0100               	movlb	0	; () banked
 10420  012542  29C1               	incf	delay_ms@ms& (0+255),w,b
 10421  012544  E1DA               	bnz	l9372
 10422  012546  0100               	movlb	0	; () banked
 10423  012548  29C2               	incf	(delay_ms@ms+1)& (0+255),w,b
 10424  01254A  A4D8               	btfss	status,2,c
 10425  01254C  D7D6               	goto	l824
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;Types.c: 251: }
 10429                           ;Types.c: 252: }
 10430                           ;Types.c: 253: u = 0x8008;
 10431                           
 10432                           ; BSR set to: 0
 10433  01254E  0E08               	movlw	8
 10434  012550  0100               	movlb	0	; () banked
 10435  012552  6FC3               	movwf	delay_ms@u& (0+255),b	;volatile
 10436  012554  0E80               	movlw	128
 10437  012556  6FC4               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 10438  012558  0E00               	movlw	0
 10439  01255A  6FC5               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 10440  01255C  0E00               	movlw	0
 10441  01255E  6FC6               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 10442                           
 10443                           ; BSR set to: 0
 10444  012560  0012               	return		;funcret
 10445  012562                     __end_of_delay_ms:
 10446                           	opt stack 0
 10447                           tosu	equ	0xFFF
 10448                           tosh	equ	0xFFE
 10449                           tosl	equ	0xFFD
 10450                           pclath	equ	0xFFA
 10451                           tblptru	equ	0xFF8
 10452                           tblptrh	equ	0xFF7
 10453                           tblptrl	equ	0xFF6
 10454                           tablat	equ	0xFF5
 10455                           prodh	equ	0xFF4
 10456                           prodl	equ	0xFF3
 10457                           intcon	equ	0xFF2
 10458                           postinc0	equ	0xFEE
 10459                           wreg	equ	0xFE8
 10460                           postdec1	equ	0xFE5
 10461                           fsr1h	equ	0xFE2
 10462                           fsr1l	equ	0xFE1
 10463                           indf2	equ	0xFDF
 10464                           postinc2	equ	0xFDE
 10465                           postdec2	equ	0xFDD
 10466                           plusw2	equ	0xFDB
 10467                           fsr2h	equ	0xFDA
 10468                           fsr2l	equ	0xFD9
 10469                           status	equ	0xFD8
 10470                           
 10471 ;; *************** function _Reset_Low *****************
 10472 ;; Defined at:
 10473 ;;		line 32 in file "Library/LCD.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;		None
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;		None
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  1    wreg      void 
 10480 ;; Registers used:
 10481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;Total ram usage:        0 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:   11
 10494 ;; This function calls:
 10495 ;;		_Port_SetPin
 10496 ;; This function is called by:
 10497 ;;		_LCD_Reset
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           	psect	text48
 10502  012D3C                     __ptext48:
 10503                           	opt stack 0
 10504  012D3C                     _Reset_Low:
 10505                           	opt stack 16
 10506                           
 10507                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;incstack = 0
 10511  012D3C  0E99               	movlw	low _PortF
 10512  012D3E  0100               	movlb	0	; () banked
 10513  012D40  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
 10514  012D42  0E00               	movlw	high _PortF
 10515  012D44  0100               	movlb	0	; () banked
 10516  012D46  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10517  012D48  0E06               	movlw	6
 10518  012D4A  0100               	movlb	0	; () banked
 10519  012D4C  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
 10520  012D4E  0E01               	movlw	1
 10521  012D50  0100               	movlb	0	; () banked
 10522  012D52  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
 10523  012D54  ECDE  F08B         	call	_Port_SetPin	;wreg free
 10524  012D58  0012               	return		;funcret
 10525  012D5A                     __end_of_Reset_Low:
 10526                           	opt stack 0
 10527                           tosu	equ	0xFFF
 10528                           tosh	equ	0xFFE
 10529                           tosl	equ	0xFFD
 10530                           pclath	equ	0xFFA
 10531                           tblptru	equ	0xFF8
 10532                           tblptrh	equ	0xFF7
 10533                           tblptrl	equ	0xFF6
 10534                           tablat	equ	0xFF5
 10535                           prodh	equ	0xFF4
 10536                           prodl	equ	0xFF3
 10537                           intcon	equ	0xFF2
 10538                           postinc0	equ	0xFEE
 10539                           wreg	equ	0xFE8
 10540                           postdec1	equ	0xFE5
 10541                           fsr1h	equ	0xFE2
 10542                           fsr1l	equ	0xFE1
 10543                           indf2	equ	0xFDF
 10544                           postinc2	equ	0xFDE
 10545                           postdec2	equ	0xFDD
 10546                           plusw2	equ	0xFDB
 10547                           fsr2h	equ	0xFDA
 10548                           fsr2l	equ	0xFD9
 10549                           status	equ	0xFD8
 10550                           
 10551 ;; *************** function _Reset_High *****************
 10552 ;; Defined at:
 10553 ;;		line 36 in file "Library/LCD.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;		None
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;		None
 10558 ;; Return value:  Size  Location     Type
 10559 ;;                  1    wreg      void 
 10560 ;; Registers used:
 10561 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10562 ;; Tracked objects:
 10563 ;;		On entry : 0/0
 10564 ;;		On exit  : 0/0
 10565 ;;		Unchanged: 0/0
 10566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;Total ram usage:        0 bytes
 10572 ;; Hardware stack levels used:    1
 10573 ;; Hardware stack levels required when called:   11
 10574 ;; This function calls:
 10575 ;;		_Port_SetPin
 10576 ;; This function is called by:
 10577 ;;		_LCD_Reset
 10578 ;; This function uses a non-reentrant model
 10579 ;;
 10580                           
 10581                           	psect	text49
 10582  012D5A                     __ptext49:
 10583                           	opt stack 0
 10584  012D5A                     _Reset_High:
 10585                           	opt stack 16
 10586                           
 10587                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 10588                           
 10589                           ;incstack = 0
 10590  012D5A  0E99               	movlw	low _PortF
 10591  012D5C  0100               	movlb	0	; () banked
 10592  012D5E  6FD0               	movwf	Port_SetPin@pInput& (0+255),b
 10593  012D60  0E00               	movlw	high _PortF
 10594  012D62  0100               	movlb	0	; () banked
 10595  012D64  6FD1               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10596  012D66  0E06               	movlw	6
 10597  012D68  0100               	movlb	0	; () banked
 10598  012D6A  6FD2               	movwf	Port_SetPin@pPin& (0+255),b
 10599  012D6C  0E00               	movlw	0
 10600  012D6E  0100               	movlb	0	; () banked
 10601  012D70  6FD3               	movwf	Port_SetPin@pValue& (0+255),b
 10602  012D72  ECDE  F08B         	call	_Port_SetPin	;wreg free
 10603  012D76  0012               	return		;funcret
 10604  012D78                     __end_of_Reset_High:
 10605                           	opt stack 0
 10606                           tosu	equ	0xFFF
 10607                           tosh	equ	0xFFE
 10608                           tosl	equ	0xFFD
 10609                           pclath	equ	0xFFA
 10610                           tblptru	equ	0xFF8
 10611                           tblptrh	equ	0xFF7
 10612                           tblptrl	equ	0xFF6
 10613                           tablat	equ	0xFF5
 10614                           prodh	equ	0xFF4
 10615                           prodl	equ	0xFF3
 10616                           intcon	equ	0xFF2
 10617                           postinc0	equ	0xFEE
 10618                           wreg	equ	0xFE8
 10619                           postdec1	equ	0xFE5
 10620                           fsr1h	equ	0xFE2
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           plusw2	equ	0xFDB
 10626                           fsr2h	equ	0xFDA
 10627                           fsr2l	equ	0xFD9
 10628                           status	equ	0xFD8
 10629                           
 10630 ;; *************** function _LED_Toggle *****************
 10631 ;; Defined at:
 10632 ;;		line 50 in file "Library/LED.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;  pLED            1    wreg     enum E6739
 10635 ;; Auto vars:     Size  Location     Type
 10636 ;;  pLED            1   24[BANK0 ] enum E6739
 10637 ;; Return value:  Size  Location     Type
 10638 ;;                  1    wreg      void 
 10639 ;; Registers used:
 10640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10641 ;; Tracked objects:
 10642 ;;		On entry : 0/0
 10643 ;;		On exit  : 0/0
 10644 ;;		Unchanged: 0/0
 10645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;Total ram usage:        1 bytes
 10651 ;; Hardware stack levels used:    1
 10652 ;; Hardware stack levels required when called:   12
 10653 ;; This function calls:
 10654 ;;		_Port_TogglePin
 10655 ;; This function is called by:
 10656 ;;		_LCD_Reset
 10657 ;;		_Event_ADCSequenceComplete
 10658 ;;		_Event_DIPSwitch
 10659 ;;		_Event_HMI_DIPSwitch
 10660 ;;		_Event_TestButton
 10661 ;;		_Event_HMI_LeftButton
 10662 ;;		_Event_HMI_RightButton
 10663 ;;		_Event_HMI_UpButton
 10664 ;;		_Event_HMI_DownButton
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text50
 10669  012922                     __ptext50:
 10670                           	opt stack 0
 10671  012922                     _LED_Toggle:
 10672                           	opt stack 15
 10673                           
 10674                           ;incstack = 0
 10675                           ;LED_Toggle@pLED stored from wreg
 10676  012922  0100               	movlb	0	; () banked
 10677  012924  6FD9               	movwf	LED_Toggle@pLED& (0+255),b
 10678                           
 10679                           ;LED.c: 52: switch (pLED)
 10680  012926  D018               	goto	l234
 10681  012928                     
 10682                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 10683  012928  0E8F               	movlw	low _PortC
 10684  01292A  0100               	movlb	0	; () banked
 10685  01292C  6FD5               	movwf	Port_TogglePin@pInput& (0+255),b
 10686  01292E  0E00               	movlw	high _PortC
 10687  012930  0100               	movlb	0	; () banked
 10688  012932  6FD6               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 10689  012934  0E00               	movlw	0
 10690  012936  0100               	movlb	0	; () banked
 10691  012938  6FD7               	movwf	Port_TogglePin@pPin& (0+255),b
 10692  01293A  EC05  F096         	call	_Port_TogglePin	;wreg free
 10693                           
 10694                           ;LED.c: 56: break;
 10695  01293E  0012               	return	
 10696  012940                     
 10697                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 10698  012940  0E8F               	movlw	low _PortC
 10699  012942  0100               	movlb	0	; () banked
 10700  012944  6FD5               	movwf	Port_TogglePin@pInput& (0+255),b
 10701  012946  0E00               	movlw	high _PortC
 10702  012948  0100               	movlb	0	; () banked
 10703  01294A  6FD6               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 10704  01294C  0E01               	movlw	1
 10705  01294E  0100               	movlb	0	; () banked
 10706  012950  6FD7               	movwf	Port_TogglePin@pPin& (0+255),b
 10707  012952  EC05  F096         	call	_Port_TogglePin	;wreg free
 10708                           
 10709                           ;LED.c: 60: }
 10710                           
 10711                           ;LED.c: 59: break;
 10712  012956  0012               	return	
 10713  012958                     l234:
 10714  012958  0100               	movlb	0	; () banked
 10715  01295A  51D9               	movf	LED_Toggle@pLED& (0+255),w,b
 10716                           
 10717                           ; Switch size 1, requested type "space"
 10718                           ; Number of cases is 2, Range of values is 0 to 1
 10719                           ; switch strategies available:
 10720                           ; Name         Instructions Cycles
 10721                           ; simple_byte            7     4 (average)
 10722                           ;	Chosen strategy is simple_byte
 10723  01295C  0A00               	xorlw	0	; case 0
 10724  01295E  B4D8               	btfsc	status,2,c
 10725  012960  D7E3               	goto	l235
 10726  012962  0A01               	xorlw	1	; case 1
 10727  012964  A4D8               	btfss	status,2,c
 10728  012966  0012               	return	
 10729  012968  D7EB               	goto	l237
 10730  01296A                     __end_of_LED_Toggle:
 10731                           	opt stack 0
 10732                           tosu	equ	0xFFF
 10733                           tosh	equ	0xFFE
 10734                           tosl	equ	0xFFD
 10735                           pclath	equ	0xFFA
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           postinc0	equ	0xFEE
 10744                           wreg	equ	0xFE8
 10745                           postdec1	equ	0xFE5
 10746                           fsr1h	equ	0xFE2
 10747                           fsr1l	equ	0xFE1
 10748                           indf2	equ	0xFDF
 10749                           postinc2	equ	0xFDE
 10750                           postdec2	equ	0xFDD
 10751                           plusw2	equ	0xFDB
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function _Port_TogglePin *****************
 10757 ;; Defined at:
 10758 ;;		line 278 in file "Library/Port.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 10761 ;;		 -> PortC(10), 
 10762 ;;  pPin            1   22[BANK0 ] enum E6750
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  Value           1   23[BANK0 ] unsigned char 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10774 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;Total ram usage:        4 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:   11
 10781 ;; This function calls:
 10782 ;;		_Port_GetPin
 10783 ;;		_Port_SetPin
 10784 ;; This function is called by:
 10785 ;;		_LED_Toggle
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           	psect	text51
 10790  012C0A                     __ptext51:
 10791                           	opt stack 0
 10792  012C0A                     _Port_TogglePin:
 10793                           	opt stack 15
 10794                           
 10795                           ;Port.c: 280: UINT8 Value;
 10796                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 10797                           
 10798                           ;incstack = 0
 10799  012C0A  C0D5  F0C1         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 10800  012C0E  C0D6  F0C2         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 10801  012C12  C0D7  F0C3         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 10802  012C16  ECD8  F094         	call	_Port_GetPin	;wreg free
 10803  012C1A  0100               	movlb	0	; () banked
 10804  012C1C  6FD8               	movwf	Port_TogglePin@Value& (0+255),b
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;Port.c: 282: Value ^= 0x01;
 10808  012C1E  0E01               	movlw	1
 10809  012C20  0100               	movlb	0	; () banked
 10810  012C22  1BD8               	xorwf	Port_TogglePin@Value& (0+255),f,b
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 10814  012C24  C0D5  F0D0         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 10815  012C28  C0D6  F0D1         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 10816  012C2C  C0D7  F0D2         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 10817  012C30  C0D8  F0D3         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 10818  012C34  ECDE  F08B         	call	_Port_SetPin	;wreg free
 10819  012C38  0012               	return		;funcret
 10820  012C3A                     __end_of_Port_TogglePin:
 10821                           	opt stack 0
 10822                           tosu	equ	0xFFF
 10823                           tosh	equ	0xFFE
 10824                           tosl	equ	0xFFD
 10825                           pclath	equ	0xFFA
 10826                           tblptru	equ	0xFF8
 10827                           tblptrh	equ	0xFF7
 10828                           tblptrl	equ	0xFF6
 10829                           tablat	equ	0xFF5
 10830                           prodh	equ	0xFF4
 10831                           prodl	equ	0xFF3
 10832                           intcon	equ	0xFF2
 10833                           postinc0	equ	0xFEE
 10834                           wreg	equ	0xFE8
 10835                           postdec1	equ	0xFE5
 10836                           fsr1h	equ	0xFE2
 10837                           fsr1l	equ	0xFE1
 10838                           indf2	equ	0xFDF
 10839                           postinc2	equ	0xFDE
 10840                           postdec2	equ	0xFDD
 10841                           plusw2	equ	0xFDB
 10842                           fsr2h	equ	0xFDA
 10843                           fsr2l	equ	0xFD9
 10844                           status	equ	0xFD8
 10845                           
 10846 ;; *************** function _Port_SetPin *****************
 10847 ;; Defined at:
 10848 ;;		line 247 in file "Library/Port.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 10851 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 10852 ;;  pPin            1   17[BANK0 ] enum E6750
 10853 ;;  pValue          1   18[BANK0 ] unsigned char 
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;  Type            1   19[BANK0 ] enum E6795
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      void 
 10858 ;; Registers used:
 10859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:        5 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:   10
 10872 ;; This function calls:
 10873 ;;		_Byte_SetBit
 10874 ;;		_Word_GetPair
 10875 ;; This function is called by:
 10876 ;;		_Reset_Low
 10877 ;;		_Reset_High
 10878 ;;		_LED_Set
 10879 ;;		_Port_TogglePin
 10880 ;;		_Motor_Step
 10881 ;;		_MXK_Init
 10882 ;;		_Motor_Init
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           	psect	text52
 10887  0117BC                     __ptext52:
 10888                           	opt stack 0
 10889  0117BC                     _Port_SetPin:
 10890                           	opt stack 19
 10891                           
 10892                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 10893                           
 10894                           ;incstack = 0
 10895  0117BC  0E08               	movlw	8
 10896  0117BE  0100               	movlb	0	; () banked
 10897  0117C0  25D0               	addwf	Port_SetPin@pInput& (0+255),w,b
 10898  0117C2  0100               	movlb	0	; () banked
 10899  0117C4  6FCD               	movwf	Word_GetPair@pInput& (0+255),b
 10900  0117C6  0E00               	movlw	0
 10901  0117C8  0100               	movlb	0	; () banked
 10902  0117CA  21D1               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 10903  0117CC  0100               	movlb	0	; () banked
 10904  0117CE  6FCE               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10905  0117D0  C0D2  F0CF         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 10906  0117D4  EC7A  F095         	call	_Word_GetPair	;wreg free
 10907  0117D8  0100               	movlb	0	; () banked
 10908  0117DA  6FD4               	movwf	Port_SetPin@Type& (0+255),b
 10909                           
 10910                           ;Port.c: 250: switch (Type)
 10911  0117DC  D042               	goto	l427
 10912  0117DE                     
 10913                           ; BSR set to: 0
 10914                           ;Port.c: 256: pValue &= 1;
 10915                           
 10916                           ; BSR set to: 0
 10917  0117DE  0E01               	movlw	1
 10918  0117E0  0100               	movlb	0	; () banked
 10919  0117E2  17D3               	andwf	Port_SetPin@pValue& (0+255),f,b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 10923  0117E4  0100               	movlb	0	; () banked
 10924  0117E6  EE20 F002          	lfsr	2,2
 10925  0117EA  51D0               	movf	Port_SetPin@pInput& (0+255),w,b
 10926  0117EC  26D9               	addwf	fsr2l,f,c
 10927  0117EE  51D1               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 10928  0117F0  22DA               	addwfc	fsr2h,f,c
 10929  0117F2  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
 10930  0117F6  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
 10931  0117FA  C0D2  F0C3         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 10932  0117FE  C0D3  F0C4         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 10933  011802  ECE4  F092         	call	_Byte_SetBit	;wreg free
 10934                           
 10935                           ;Port.c: 258: break;
 10936  011806  0012               	return	
 10937  011808                     
 10938                           ;Port.c: 261: pValue &= 1;
 10939  011808  0E01               	movlw	1
 10940  01180A  0100               	movlb	0	; () banked
 10941  01180C  17D3               	andwf	Port_SetPin@pValue& (0+255),f,b
 10942                           
 10943                           ;Port.c: 262: pValue ^= 1;
 10944  01180E  0E01               	movlw	1
 10945  011810  0100               	movlb	0	; () banked
 10946  011812  1BD3               	xorwf	Port_SetPin@pValue& (0+255),f,b
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 10950  011814  0100               	movlb	0	; () banked
 10951  011816  EE20 F002          	lfsr	2,2
 10952  01181A  51D0               	movf	Port_SetPin@pInput& (0+255),w,b
 10953  01181C  26D9               	addwf	fsr2l,f,c
 10954  01181E  51D1               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 10955  011820  22DA               	addwfc	fsr2h,f,c
 10956  011822  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
 10957  011826  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
 10958  01182A  C0D2  F0C3         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 10959  01182E  C0D3  F0C4         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 10960  011832  ECE4  F092         	call	_Byte_SetBit	;wreg free
 10961                           
 10962                           ;Port.c: 264: break;
 10963  011836  0012               	return	
 10964  011838                     
 10965                           ;Port.c: 266: pValue &= 1;
 10966  011838  0E01               	movlw	1
 10967  01183A  0100               	movlb	0	; () banked
 10968  01183C  17D3               	andwf	Port_SetPin@pValue& (0+255),f,b
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 10972  01183E  0100               	movlb	0	; () banked
 10973  011840  EE20 F004          	lfsr	2,4
 10974  011844  51D0               	movf	Port_SetPin@pInput& (0+255),w,b
 10975  011846  26D9               	addwf	fsr2l,f,c
 10976  011848  51D1               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 10977  01184A  22DA               	addwfc	fsr2h,f,c
 10978  01184C  CFDE F0C1          	movff	postinc2,Byte_SetBit@pInput
 10979  011850  CFDD F0C2          	movff	postdec2,Byte_SetBit@pInput+1
 10980  011854  C0D2  F0C3         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 10981  011858  C0D3  F0C4         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 10982  01185C  ECE4  F092         	call	_Byte_SetBit	;wreg free
 10983                           
 10984                           ;Port.c: 269: }
 10985                           
 10986                           ;Port.c: 268: break;
 10987  011860  0012               	return	
 10988  011862                     l427:
 10989  011862  0100               	movlb	0	; () banked
 10990  011864  51D4               	movf	Port_SetPin@Type& (0+255),w,b
 10991                           
 10992                           ; Switch size 1, requested type "space"
 10993                           ; Number of cases is 4, Range of values is 0 to 3
 10994                           ; switch strategies available:
 10995                           ; Name         Instructions Cycles
 10996                           ; simple_byte           13     7 (average)
 10997                           ;	Chosen strategy is simple_byte
 10998  011866  0A00               	xorlw	0	; case 0
 10999  011868  B4D8               	btfsc	status,2,c
 11000  01186A  0012               	return	
 11001  01186C  0A01               	xorlw	1	; case 1
 11002  01186E  B4D8               	btfsc	status,2,c
 11003  011870  D7B6               	goto	l430
 11004  011872  0A03               	xorlw	3	; case 2
 11005  011874  B4D8               	btfsc	status,2,c
 11006  011876  D7C8               	goto	l432
 11007  011878  0A01               	xorlw	1	; case 3
 11008  01187A  A4D8               	btfss	status,2,c
 11009  01187C  0012               	return	
 11010  01187E  D7DC               	goto	l433
 11011  011880                     __end_of_Port_SetPin:
 11012                           	opt stack 0
 11013                           tosu	equ	0xFFF
 11014                           tosh	equ	0xFFE
 11015                           tosl	equ	0xFFD
 11016                           pclath	equ	0xFFA
 11017                           tblptru	equ	0xFF8
 11018                           tblptrh	equ	0xFF7
 11019                           tblptrl	equ	0xFF6
 11020                           tablat	equ	0xFF5
 11021                           prodh	equ	0xFF4
 11022                           prodl	equ	0xFF3
 11023                           intcon	equ	0xFF2
 11024                           postinc0	equ	0xFEE
 11025                           wreg	equ	0xFE8
 11026                           postdec1	equ	0xFE5
 11027                           fsr1h	equ	0xFE2
 11028                           fsr1l	equ	0xFE1
 11029                           indf2	equ	0xFDF
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           plusw2	equ	0xFDB
 11033                           fsr2h	equ	0xFDA
 11034                           fsr2l	equ	0xFD9
 11035                           status	equ	0xFD8
 11036                           
 11037 ;; *************** function _Word_GetPair *****************
 11038 ;; Defined at:
 11039 ;;		line 156 in file "Library/Types.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;  pInput          2   12[BANK0 ] PTR struct Word
 11042 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11043 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 11044 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 11045 ;;		 -> PortC(10), PortF(10), NULL(0), 
 11046 ;;  pPair           1   14[BANK0 ] unsigned char 
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;		None
 11049 ;; Return value:  Size  Location     Type
 11050 ;;                  1    wreg      unsigned char 
 11051 ;; Registers used:
 11052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11053 ;; Tracked objects:
 11054 ;;		On entry : 0/0
 11055 ;;		On exit  : 0/0
 11056 ;;		Unchanged: 0/0
 11057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11058 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;Total ram usage:        3 bytes
 11063 ;; Hardware stack levels used:    1
 11064 ;; Hardware stack levels required when called:    9
 11065 ;; This function calls:
 11066 ;;		_Byte_GetPair
 11067 ;; This function is called by:
 11068 ;;		_Port_Init
 11069 ;;		_Port_SetPin
 11070 ;;		_Port_Set
 11071 ;;		_PortProperty_Valid
 11072 ;;		_Port_SetPair
 11073 ;;		_Port_SetQuad
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text53
 11078  012AF4                     __ptext53:
 11079                           	opt stack 0
 11080  012AF4                     _Word_GetPair:
 11081                           	opt stack 15
 11082                           
 11083                           ;Types.c: 158: if (pPair >= 4)
 11084                           
 11085                           ;incstack = 0
 11086  012AF4  0E03               	movlw	3
 11087  012AF6  0100               	movlb	0	; () banked
 11088  012AF8  65CF               	cpfsgt	Word_GetPair@pPair& (0+255),b
 11089  012AFA  D012               	goto	l781
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 11093  012AFC  0E01               	movlw	1
 11094  012AFE  0100               	movlb	0	; () banked
 11095  012B00  25CD               	addwf	Word_GetPair@pInput& (0+255),w,b
 11096  012B02  0100               	movlb	0	; () banked
 11097  012B04  6FCA               	movwf	Byte_GetPair@pInput& (0+255),b
 11098  012B06  0E00               	movlw	0
 11099  012B08  0100               	movlb	0	; () banked
 11100  012B0A  21CE               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 11101  012B0C  0100               	movlb	0	; () banked
 11102  012B0E  6FCB               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 11103  012B10  0100               	movlb	0	; () banked
 11104  012B12  51CF               	movf	Word_GetPair@pPair& (0+255),w,b
 11105  012B14  0FFC               	addlw	252
 11106  012B16  0100               	movlb	0	; () banked
 11107  012B18  6FCC               	movwf	Byte_GetPair@pPair& (0+255),b
 11108  012B1A  ECBC  F096         	call	_Byte_GetPair	;wreg free
 11109  012B1E  0012               	return	
 11110  012B20                     l781:
 11111                           
 11112                           ;Types.c: 160: else
 11113                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 11114  012B20  C0CD  F0CA         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 11115  012B24  C0CE  F0CB         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 11116  012B28  C0CF  F0CC         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 11117  012B2C  ECBC  F096         	call	_Byte_GetPair	;wreg free
 11118  012B30  0012               	return	
 11119  012B32                     __end_of_Word_GetPair:
 11120                           	opt stack 0
 11121                           tosu	equ	0xFFF
 11122                           tosh	equ	0xFFE
 11123                           tosl	equ	0xFFD
 11124                           pclath	equ	0xFFA
 11125                           tblptru	equ	0xFF8
 11126                           tblptrh	equ	0xFF7
 11127                           tblptrl	equ	0xFF6
 11128                           tablat	equ	0xFF5
 11129                           prodh	equ	0xFF4
 11130                           prodl	equ	0xFF3
 11131                           intcon	equ	0xFF2
 11132                           postinc0	equ	0xFEE
 11133                           wreg	equ	0xFE8
 11134                           postdec1	equ	0xFE5
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           plusw2	equ	0xFDB
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _Byte_GetPair *****************
 11146 ;; Defined at:
 11147 ;;		line 87 in file "Library/Types.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 11150 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 11151 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 11152 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 11153 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 11154 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 11155 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 11156 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 11157 ;;		 -> NULL(0), 
 11158 ;;  pPair           1   11[BANK0 ] unsigned char 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      unsigned char 
 11163 ;; Registers used:
 11164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:        3 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    8
 11177 ;; This function calls:
 11178 ;;		_Byte_GetZone
 11179 ;; This function is called by:
 11180 ;;		_Word_GetPair
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           	psect	text54
 11185  012D78                     __ptext54:
 11186                           	opt stack 0
 11187  012D78                     _Byte_GetPair:
 11188                           	opt stack 15
 11189                           
 11190                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 11191                           
 11192                           ;incstack = 0
 11193  012D78  C0CA  F0C1         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 11194  012D7C  C0CB  F0C2         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 11195  012D80  0E04               	movlw	4
 11196  012D82  0100               	movlb	0	; () banked
 11197  012D84  6FC3               	movwf	Byte_GetZone@pMax& (0+255),b
 11198  012D86  C0CC  F0C4         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 11199  012D8A  0E02               	movlw	2
 11200  012D8C  0100               	movlb	0	; () banked
 11201  012D8E  6FC5               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 11202  012D90  ECFD  F08F         	call	_Byte_GetZone	;wreg free
 11203  012D94  0012               	return	
 11204  012D96                     __end_of_Byte_GetPair:
 11205                           	opt stack 0
 11206                           tosu	equ	0xFFF
 11207                           tosh	equ	0xFFE
 11208                           tosl	equ	0xFFD
 11209                           pclath	equ	0xFFA
 11210                           tblptru	equ	0xFF8
 11211                           tblptrh	equ	0xFF7
 11212                           tblptrl	equ	0xFF6
 11213                           tablat	equ	0xFF5
 11214                           prodh	equ	0xFF4
 11215                           prodl	equ	0xFF3
 11216                           intcon	equ	0xFF2
 11217                           postinc0	equ	0xFEE
 11218                           wreg	equ	0xFE8
 11219                           postdec1	equ	0xFE5
 11220                           fsr1h	equ	0xFE2
 11221                           fsr1l	equ	0xFE1
 11222                           indf2	equ	0xFDF
 11223                           postinc2	equ	0xFDE
 11224                           postdec2	equ	0xFDD
 11225                           plusw2	equ	0xFDB
 11226                           fsr2h	equ	0xFDA
 11227                           fsr2l	equ	0xFD9
 11228                           status	equ	0xFD8
 11229                           
 11230 ;; *************** function _Byte_GetZone *****************
 11231 ;; Defined at:
 11232 ;;		line 64 in file "Library/Types.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11235 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 11236 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 11237 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 11238 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 11239 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 11240 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 11241 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 11242 ;;		 -> NULL(0), 
 11243 ;;  pMax            1    2[BANK0 ] unsigned char 
 11244 ;;  pChunk          1    3[BANK0 ] unsigned char 
 11245 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;  Output          1    8[BANK0 ] unsigned char 
 11248 ;;  Offset          1    7[BANK0 ] unsigned char 
 11249 ;;  MASK            1    6[BANK0 ] unsigned char 
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      unsigned char 
 11252 ;; Registers used:
 11253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11259 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;Total ram usage:        9 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    7
 11266 ;; This function calls:
 11267 ;;		Nothing
 11268 ;; This function is called by:
 11269 ;;		_Byte_GetPair
 11270 ;;		_Byte_GetTriple
 11271 ;;		_Byte_GetQuad
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           	psect	text55
 11276  011FFA                     __ptext55:
 11277                           	opt stack 0
 11278  011FFA                     _Byte_GetZone:
 11279                           	opt stack 15
 11280                           
 11281                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 11282                           
 11283                           ;incstack = 0
 11284  011FFA  C0C1  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 11285  011FFE  C0C2  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 11286  012002  0E00               	movlw	low (__mediumconst shr (0+16))
 11287  012004  6EF8               	movwf	tblptru,c
 11288  012006  0E0F               	movlw	(high __ramtop+-1)
 11289  012008  64F7               	cpfsgt	tblptrh,c
 11290  01200A  D003               	bra	u5797
 11291  01200C  0008               	tblrd		*
 11292  01200E  50F5               	movf	tablat,w,c
 11293  012010  D005               	bra	u5790
 11294  012012                     u5797:
 11295  012012  CFF6 FFE9          	movff	tblptrl,fsr0l
 11296  012016  CFF7 FFEA          	movff	tblptrh,fsr0h
 11297  01201A  50EF               	movf	indf0,w,c
 11298  01201C                     u5790:
 11299  01201C  0100               	movlb	0	; () banked
 11300  01201E  6FC9               	movwf	Byte_GetZone@Output& (0+255),b
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 11304  012020  0100               	movlb	0	; () banked
 11305  012022  51C5               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 11306  012024  0D01               	mullw	1
 11307  012026  0EF5               	movlw	low _MASKS
 11308  012028  24F3               	addwf	prodl,w,c
 11309  01202A  6EF6               	movwf	tblptrl,c
 11310  01202C  0EFD               	movlw	high _MASKS
 11311  01202E  20F4               	addwfc	prodh,w,c
 11312  012030  6EF7               	movwf	tblptrh,c
 11313  012032                     	if	1	;There are 3 active tblptr bytes
 11314  012032  6AF8               	clrf	tblptru,c
 11315  012034  0E00               	movlw	low (__mediumconst shr (0+16))
 11316  012036  22F8               	addwfc	tblptru,f,c
 11317  012038                     	endif
 11318  012038  0008               	tblrd		*
 11319  01203A  CFF5 F0C7          	movff	tablat,Byte_GetZone@MASK
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;Types.c: 68: UINT8 Offset = 0;
 11323  01203E  0E00               	movlw	0
 11324  012040  0100               	movlb	0	; () banked
 11325  012042  6FC8               	movwf	Byte_GetZone@Offset& (0+255),b
 11326                           
 11327                           ;Types.c: 70: while (pChunk >= pMax)
 11328  012044  D006               	goto	l732
 11329  012046                     
 11330                           ; BSR set to: 0
 11331                           ;Types.c: 71: {
 11332                           ;Types.c: 72: pChunk -= pMax;
 11333                           
 11334                           ; BSR set to: 0
 11335  012046  0100               	movlb	0	; () banked
 11336  012048  51C3               	movf	Byte_GetZone@pMax& (0+255),w,b
 11337  01204A  0100               	movlb	0	; () banked
 11338  01204C  5FC4               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;Types.c: 73: Offset += 1;
 11342  01204E  0100               	movlb	0	; () banked
 11343  012050  2BC8               	incf	Byte_GetZone@Offset& (0+255),f,b
 11344  012052                     l732:
 11345                           
 11346                           ; BSR set to: 0
 11347                           
 11348                           ; BSR set to: 0
 11349  012052  0100               	movlb	0	; () banked
 11350  012054  51C3               	movf	Byte_GetZone@pMax& (0+255),w,b
 11351  012056  0100               	movlb	0	; () banked
 11352  012058  5DC4               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 11353  01205A  B0D8               	btfsc	status,0,c
 11354  01205C  D7F4               	goto	l733
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;Types.c: 74: }
 11358                           ;Types.c: 75: pChunk *= pChunkSize;
 11359                           
 11360                           ; BSR set to: 0
 11361  01205E  0100               	movlb	0	; () banked
 11362  012060  51C5               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 11363  012062  0100               	movlb	0	; () banked
 11364  012064  03C4               	mulwf	Byte_GetZone@pChunk& (0+255),b
 11365  012066  50F3               	movf	prodl,w,c
 11366  012068  6FC4               	movwf	Byte_GetZone@pChunk& (0+255),b
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;Types.c: 76: pChunk += Offset;
 11370  01206A  0100               	movlb	0	; () banked
 11371  01206C  51C8               	movf	Byte_GetZone@Offset& (0+255),w,b
 11372  01206E  0100               	movlb	0	; () banked
 11373  012070  27C4               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;Types.c: 78: Output >>= pChunk;
 11377  012072  0100               	movlb	0	; () banked
 11378  012074  29C4               	incf	Byte_GetZone@pChunk& (0+255),w,b
 11379  012076  0100               	movlb	0	; () banked
 11380  012078  6FC6               	movwf	??_Byte_GetZone& (0+255),b
 11381  01207A  D003               	goto	u5810
 11382  01207C                     u5815:
 11383  01207C  0100               	movlb	0	; () banked
 11384  01207E  90D8               	bcf	status,0,c
 11385  012080  33C9               	rrcf	Byte_GetZone@Output& (0+255),f,b
 11386  012082                     u5810:
 11387  012082  0100               	movlb	0	; () banked
 11388  012084  2FC6               	decfsz	??_Byte_GetZone& (0+255),f,b
 11389  012086  D7FA               	goto	u5815
 11390                           
 11391                           ;Types.c: 79: Output &= MASK;
 11392  012088  0100               	movlb	0	; () banked
 11393  01208A  51C7               	movf	Byte_GetZone@MASK& (0+255),w,b
 11394  01208C  0100               	movlb	0	; () banked
 11395  01208E  17C9               	andwf	Byte_GetZone@Output& (0+255),f,b
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;Types.c: 80: return Output;
 11399  012090  0100               	movlb	0	; () banked
 11400  012092  51C9               	movf	Byte_GetZone@Output& (0+255),w,b
 11401  012094  0012               	return	
 11402  012096                     __end_of_Byte_GetZone:
 11403                           	opt stack 0
 11404                           tosu	equ	0xFFF
 11405                           tosh	equ	0xFFE
 11406                           tosl	equ	0xFFD
 11407                           pclath	equ	0xFFA
 11408                           tblptru	equ	0xFF8
 11409                           tblptrh	equ	0xFF7
 11410                           tblptrl	equ	0xFF6
 11411                           tablat	equ	0xFF5
 11412                           prodh	equ	0xFF4
 11413                           prodl	equ	0xFF3
 11414                           intcon	equ	0xFF2
 11415                           indf0	equ	0xFEF
 11416                           postinc0	equ	0xFEE
 11417                           fsr0h	equ	0xFEA
 11418                           fsr0l	equ	0xFE9
 11419                           wreg	equ	0xFE8
 11420                           postdec1	equ	0xFE5
 11421                           fsr1h	equ	0xFE2
 11422                           fsr1l	equ	0xFE1
 11423                           indf2	equ	0xFDF
 11424                           postinc2	equ	0xFDE
 11425                           postdec2	equ	0xFDD
 11426                           plusw2	equ	0xFDB
 11427                           fsr2h	equ	0xFDA
 11428                           fsr2l	equ	0xFD9
 11429                           status	equ	0xFD8
 11430                           
 11431 ;; *************** function _Byte_SetBit *****************
 11432 ;; Defined at:
 11433 ;;		line 32 in file "Library/Types.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11436 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 11437 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 11438 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 11439 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 11440 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 11441 ;;		 -> NULL(0), 
 11442 ;;  pBit            1    2[BANK0 ] unsigned char 
 11443 ;;  pValue          1    3[BANK0 ] unsigned char 
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;		None
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      void 
 11448 ;; Registers used:
 11449 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11455 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;Total ram usage:        7 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    7
 11462 ;; This function calls:
 11463 ;;		Nothing
 11464 ;; This function is called by:
 11465 ;;		_Port_SetPinType
 11466 ;;		_Port_SetPin
 11467 ;;		_SPI_Init
 11468 ;;		_SPI_MaxSpeed
 11469 ;;		_SPI_MinSpeed
 11470 ;;		_Word_SetBit
 11471 ;;		_I2C_Init
 11472 ;; This function uses a non-reentrant model
 11473 ;;
 11474                           
 11475                           	psect	text56
 11476  0125C8                     __ptext56:
 11477                           	opt stack 0
 11478  0125C8                     _Byte_SetBit:
 11479                           	opt stack 21
 11480                           
 11481                           ;Types.c: 34: pValue &= 1;
 11482                           
 11483                           ; BSR set to: 0
 11484                           ;incstack = 0
 11485  0125C8  0E01               	movlw	1
 11486  0125CA  0100               	movlb	0	; () banked
 11487  0125CC  17C4               	andwf	Byte_SetBit@pValue& (0+255),f,b
 11488                           
 11489                           ; BSR set to: 0
 11490                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 11491  0125CE  C0C3  F0C5         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 11492  0125D2  0E01               	movlw	1
 11493  0125D4  0100               	movlb	0	; () banked
 11494  0125D6  6FC6               	movwf	(??_Byte_SetBit+1)& (0+255),b
 11495  0125D8  0100               	movlb	0	; () banked
 11496  0125DA  2BC5               	incf	??_Byte_SetBit& (0+255),f,b
 11497  0125DC  D003               	goto	u5864
 11498  0125DE                     u5865:
 11499  0125DE  0100               	movlb	0	; () banked
 11500  0125E0  90D8               	bcf	status,0,c
 11501  0125E2  37C6               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 11502  0125E4                     u5864:
 11503  0125E4  0100               	movlb	0	; () banked
 11504  0125E6  2FC5               	decfsz	??_Byte_SetBit& (0+255),f,b
 11505  0125E8  D7FA               	goto	u5865
 11506  0125EA  0100               	movlb	0	; () banked
 11507  0125EC  51C6               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 11508  0125EE  0AFF               	xorlw	255
 11509  0125F0  0100               	movlb	0	; () banked
 11510  0125F2  6FC7               	movwf	(??_Byte_SetBit+2)& (0+255),b
 11511  0125F4  C0C1  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 11512  0125F8  C0C2  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 11513  0125FC  0100               	movlb	0	; () banked
 11514  0125FE  51C7               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 11515  012600  16DF               	andwf	indf2,f,c
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 11519  012602  C0C3  F0C5         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 11520  012606  C0C4  F0C6         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 11521  01260A  0100               	movlb	0	; () banked
 11522  01260C  2BC5               	incf	??_Byte_SetBit& (0+255),f,b
 11523  01260E  D003               	goto	u5874
 11524  012610                     u5875:
 11525  012610  0100               	movlb	0	; () banked
 11526  012612  90D8               	bcf	status,0,c
 11527  012614  37C6               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 11528  012616                     u5874:
 11529  012616  0100               	movlb	0	; () banked
 11530  012618  2FC5               	decfsz	??_Byte_SetBit& (0+255),f,b
 11531  01261A  D7FA               	goto	u5875
 11532  01261C  C0C1  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 11533  012620  C0C2  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 11534  012624  0100               	movlb	0	; () banked
 11535  012626  51C6               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 11536  012628  12DF               	iorwf	indf2,f,c
 11537                           
 11538                           ; BSR set to: 0
 11539  01262A  0012               	return		;funcret
 11540  01262C                     __end_of_Byte_SetBit:
 11541                           	opt stack 0
 11542                           tosu	equ	0xFFF
 11543                           tosh	equ	0xFFE
 11544                           tosl	equ	0xFFD
 11545                           pclath	equ	0xFFA
 11546                           tblptru	equ	0xFF8
 11547                           tblptrh	equ	0xFF7
 11548                           tblptrl	equ	0xFF6
 11549                           tablat	equ	0xFF5
 11550                           prodh	equ	0xFF4
 11551                           prodl	equ	0xFF3
 11552                           intcon	equ	0xFF2
 11553                           indf0	equ	0xFEF
 11554                           postinc0	equ	0xFEE
 11555                           fsr0h	equ	0xFEA
 11556                           fsr0l	equ	0xFE9
 11557                           wreg	equ	0xFE8
 11558                           postdec1	equ	0xFE5
 11559                           fsr1h	equ	0xFE2
 11560                           fsr1l	equ	0xFE1
 11561                           indf2	equ	0xFDF
 11562                           postinc2	equ	0xFDE
 11563                           postdec2	equ	0xFDD
 11564                           plusw2	equ	0xFDB
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8
 11568                           
 11569 ;; *************** function _Port_GetPin *****************
 11570 ;; Defined at:
 11571 ;;		line 271 in file "Library/Port.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11574 ;;		 -> PortB(10), PortE(10), PortC(10), 
 11575 ;;  pPin            1    2[BANK0 ] enum E6750
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;  Output          1    5[BANK0 ] unsigned char 
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      unsigned char 
 11580 ;; Registers used:
 11581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11587 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;Total ram usage:        6 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    7
 11594 ;; This function calls:
 11595 ;;		Nothing
 11596 ;; This function is called by:
 11597 ;;		_Port_TogglePin
 11598 ;;		_HMI_LeftSwitch
 11599 ;;		_HMI_RightSwitch
 11600 ;;		_HMI_UpSwitch
 11601 ;;		_HMI_DownSwitch
 11602 ;;		_MXK_TestButton
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           	psect	text57
 11607  0129B0                     __ptext57:
 11608                           	opt stack 0
 11609  0129B0                     _Port_GetPin:
 11610                           	opt stack 18
 11611                           
 11612                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;incstack = 0
 11616  0129B0  0100               	movlb	0	; () banked
 11617  0129B2  EE20 F006          	lfsr	2,6
 11618  0129B6  51C1               	movf	Port_GetPin@pInput& (0+255),w,b
 11619  0129B8  26D9               	addwf	fsr2l,f,c
 11620  0129BA  51C2               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 11621  0129BC  22DA               	addwfc	fsr2h,f,c
 11622  0129BE  CFDE F0C4          	movff	postinc2,??_Port_GetPin
 11623  0129C2  CFDD F0C5          	movff	postdec2,??_Port_GetPin+1
 11624  0129C6  C0C4  FFD9         	movff	??_Port_GetPin,fsr2l
 11625  0129CA  C0C5  FFDA         	movff	??_Port_GetPin+1,fsr2h
 11626  0129CE  50DF               	movf	indf2,w,c
 11627  0129D0  0100               	movlb	0	; () banked
 11628  0129D2  6FC6               	movwf	Port_GetPin@Output& (0+255),b
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;Port.c: 274: Output >>= (UINT8)pPin;
 11632  0129D4  0100               	movlb	0	; () banked
 11633  0129D6  29C3               	incf	Port_GetPin@pPin& (0+255),w,b
 11634  0129D8  0100               	movlb	0	; () banked
 11635  0129DA  6FC4               	movwf	??_Port_GetPin& (0+255),b
 11636  0129DC  D003               	goto	u5920
 11637  0129DE                     u5925:
 11638  0129DE  0100               	movlb	0	; () banked
 11639  0129E0  90D8               	bcf	status,0,c
 11640  0129E2  33C6               	rrcf	Port_GetPin@Output& (0+255),f,b
 11641  0129E4                     u5920:
 11642  0129E4  0100               	movlb	0	; () banked
 11643  0129E6  2FC4               	decfsz	??_Port_GetPin& (0+255),f,b
 11644  0129E8  D7FA               	goto	u5925
 11645                           
 11646                           ;Port.c: 275: Output &= 1;
 11647  0129EA  0E01               	movlw	1
 11648  0129EC  0100               	movlb	0	; () banked
 11649  0129EE  17C6               	andwf	Port_GetPin@Output& (0+255),f,b
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;Port.c: 276: return Output;
 11653  0129F0  0100               	movlb	0	; () banked
 11654  0129F2  51C6               	movf	Port_GetPin@Output& (0+255),w,b
 11655  0129F4  0012               	return	
 11656  0129F6                     __end_of_Port_GetPin:
 11657                           	opt stack 0
 11658                           tosu	equ	0xFFF
 11659                           tosh	equ	0xFFE
 11660                           tosl	equ	0xFFD
 11661                           pclath	equ	0xFFA
 11662                           tblptru	equ	0xFF8
 11663                           tblptrh	equ	0xFF7
 11664                           tblptrl	equ	0xFF6
 11665                           tablat	equ	0xFF5
 11666                           prodh	equ	0xFF4
 11667                           prodl	equ	0xFF3
 11668                           intcon	equ	0xFF2
 11669                           indf0	equ	0xFEF
 11670                           postinc0	equ	0xFEE
 11671                           fsr0h	equ	0xFEA
 11672                           fsr0l	equ	0xFE9
 11673                           wreg	equ	0xFE8
 11674                           postdec1	equ	0xFE5
 11675                           fsr1h	equ	0xFE2
 11676                           fsr1l	equ	0xFE1
 11677                           indf2	equ	0xFDF
 11678                           postinc2	equ	0xFDE
 11679                           postdec2	equ	0xFDD
 11680                           plusw2	equ	0xFDB
 11681                           fsr2h	equ	0xFDA
 11682                           fsr2l	equ	0xFD9
 11683                           status	equ	0xFD8
 11684                           
 11685 ;; *************** function _Console_PrintString *****************
 11686 ;; Defined at:
 11687 ;;		line 426 in file "Library/Console.c"
 11688 ;; Parameters:    Size  Location     Type
 11689 ;;  pInput          2   20[BANK0 ] PTR unsigned char 
 11690 ;;		 -> STR_1(12), 
 11691 ;; Auto vars:     Size  Location     Type
 11692 ;;		None
 11693 ;; Return value:  Size  Location     Type
 11694 ;;                  1    wreg      void 
 11695 ;; Registers used:
 11696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11697 ;; Tracked objects:
 11698 ;;		On entry : 0/0
 11699 ;;		On exit  : 0/0
 11700 ;;		Unchanged: 0/0
 11701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11702 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;Total ram usage:        2 bytes
 11707 ;; Hardware stack levels used:    1
 11708 ;; Hardware stack levels required when called:   11
 11709 ;; This function calls:
 11710 ;;		_Console_PrintChar
 11711 ;; This function is called by:
 11712 ;;		_main
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           	psect	text58
 11717  012BA6                     __ptext58:
 11718                           	opt stack 0
 11719  012BA6                     _Console_PrintString:
 11720                           	opt stack 19
 11721                           
 11722                           ;Console.c: 428: while (*(pInput))
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;incstack = 0
 11726  012BA6  D00D               	goto	l1069
 11727  012BA8                     
 11728                           ;Console.c: 429: {
 11729                           ;Console.c: 430: Console_PrintChar(*pInput);
 11730  012BA8  C0D5  FFF6         	movff	Console_PrintString@pInput,tblptrl
 11731  012BAC  C0D6  FFF7         	movff	Console_PrintString@pInput+1,tblptrh
 11732  012BB0                     	if	0	;tblptru may be non-zero
 11733  012BB0                     	endif
 11734  012BB0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11735  012BB0  0E00               	movlw	low (__mediumconst shr (0+16))
 11736  012BB2  6EF8               	movwf	tblptru,c
 11737  012BB4                     	endif
 11738  012BB4  0008               	tblrd		*
 11739  012BB6  50F5               	movf	tablat,w,c
 11740  012BB8  EC0C  F087         	call	_Console_PrintChar
 11741                           
 11742                           ;Console.c: 431: pInput++;
 11743  012BBC  0100               	movlb	0	; () banked
 11744  012BBE  4BD5               	infsnz	Console_PrintString@pInput& (0+255),f,b
 11745  012BC0  2BD6               	incf	(Console_PrintString@pInput+1)& (0+255),f,b
 11746  012BC2                     l1069:
 11747                           
 11748                           ; BSR set to: 0
 11749  012BC2  C0D5  FFF6         	movff	Console_PrintString@pInput,tblptrl
 11750  012BC6  C0D6  FFF7         	movff	Console_PrintString@pInput+1,tblptrh
 11751  012BCA                     	if	0	;tblptru may be non-zero
 11752  012BCA                     	endif
 11753  012BCA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11754  012BCA  0E00               	movlw	low (__mediumconst shr (0+16))
 11755  012BCC  6EF8               	movwf	tblptru,c
 11756  012BCE                     	endif
 11757  012BCE  0008               	tblrd		*
 11758  012BD0  50F5               	movf	tablat,w,c
 11759  012BD2  0900               	iorlw	0
 11760  012BD4  B4D8               	btfsc	status,2,c
 11761  012BD6  0012               	return	
 11762  012BD8  D7E7               	goto	l1070
 11763  012BDA                     __end_of_Console_PrintString:
 11764                           	opt stack 0
 11765                           tosu	equ	0xFFF
 11766                           tosh	equ	0xFFE
 11767                           tosl	equ	0xFFD
 11768                           pclath	equ	0xFFA
 11769                           tblptru	equ	0xFF8
 11770                           tblptrh	equ	0xFF7
 11771                           tblptrl	equ	0xFF6
 11772                           tablat	equ	0xFF5
 11773                           prodh	equ	0xFF4
 11774                           prodl	equ	0xFF3
 11775                           intcon	equ	0xFF2
 11776                           indf0	equ	0xFEF
 11777                           postinc0	equ	0xFEE
 11778                           fsr0h	equ	0xFEA
 11779                           fsr0l	equ	0xFE9
 11780                           wreg	equ	0xFE8
 11781                           postdec1	equ	0xFE5
 11782                           fsr1h	equ	0xFE2
 11783                           fsr1l	equ	0xFE1
 11784                           indf2	equ	0xFDF
 11785                           postinc2	equ	0xFDE
 11786                           postdec2	equ	0xFDD
 11787                           plusw2	equ	0xFDB
 11788                           fsr2h	equ	0xFDA
 11789                           fsr2l	equ	0xFD9
 11790                           status	equ	0xFD8
 11791                           
 11792 ;; *************** function _Console_PrintChar *****************
 11793 ;; Defined at:
 11794 ;;		line 322 in file "Library/Console.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;  pInput          1    wreg     unsigned char 
 11797 ;; Auto vars:     Size  Location     Type
 11798 ;;  pInput          1   19[BANK0 ] unsigned char 
 11799 ;; Return value:  Size  Location     Type
 11800 ;;                  1    wreg      void 
 11801 ;; Registers used:
 11802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;Total ram usage:        4 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; Hardware stack levels required when called:   10
 11815 ;; This function calls:
 11816 ;;		_Console_Backspace
 11817 ;;		_Console_FormFeed
 11818 ;;		_Console_IncrementCursor
 11819 ;;		_Console_NewLine
 11820 ;;		_Console_ResetCursor
 11821 ;;		_Console_Tab
 11822 ;; This function is called by:
 11823 ;;		_Console_PrintString
 11824 ;;		_putch
 11825 ;; This function uses a non-reentrant model
 11826 ;;
 11827                           
 11828                           	psect	text59
 11829  010E18                     __ptext59:
 11830                           	opt stack 0
 11831  010E18                     _Console_PrintChar:
 11832                           	opt stack 19
 11833                           
 11834                           ;incstack = 0
 11835                           ;Console_PrintChar@pInput stored from wreg
 11836  010E18  0100               	movlb	0	; () banked
 11837  010E1A  6FD4               	movwf	Console_PrintChar@pInput& (0+255),b
 11838                           
 11839                           ;Console.c: 324: switch(pInput)
 11840  010E1C  D0AF               	goto	l1036
 11841  010E1E                     
 11842                           ;Console.c: 327: case '\n':
 11843                           ;Console.c: 328: Console_NewLine();
 11844  010E1E  ECAD  F08F         	call	_Console_NewLine	;wreg free
 11845                           
 11846                           ;Console.c: 329: return;
 11847  010E22  0012               	return	
 11848  010E24                     
 11849                           ;Console.c: 331: Console_Backspace();
 11850  010E24  EC47  F093         	call	_Console_Backspace	;wreg free
 11851                           
 11852                           ;Console.c: 332: return;
 11853  010E28  0012               	return	
 11854  010E2A                     
 11855                           ;Console.c: 334: Console_FormFeed();
 11856  010E2A  ECE1  F090         	call	_Console_FormFeed	;wreg free
 11857                           
 11858                           ;Console.c: 335: return;
 11859  010E2E  0012               	return	
 11860  010E30                     
 11861                           ;Console.c: 337: Console_Tab();
 11862  010E30  EC40  F08C         	call	_Console_Tab	;wreg free
 11863                           
 11864                           ;Console.c: 338: return;
 11865  010E34  0012               	return	
 11866  010E36                     
 11867                           ;Console.c: 340: Console_IncrementCursor();
 11868  010E36  ECB1  F092         	call	_Console_IncrementCursor	;wreg free
 11869                           
 11870                           ;Console.c: 341: return;
 11871  010E3A  0012               	return	
 11872  010E3C                     
 11873                           ;Console.c: 343: Console_ResetCursor();
 11874  010E3C  ECCB  F096         	call	_Console_ResetCursor	;wreg free
 11875                           
 11876                           ;Console.c: 344: return;
 11877  010E40  0012               	return	
 11878  010E42                     
 11879                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 11880                           
 11881                           ;Console.c: 349: default:
 11882  010E42  C0D4  F0D1         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 11883  010E46  0E7F               	movlw	127
 11884  010E48  0100               	movlb	0	; () banked
 11885  010E4A  17D1               	andwf	??_Console_PrintChar& (0+255),f,b
 11886  010E4C  0100               	movlb	0	; () banked
 11887  010E4E  5179               	movf	_lBufferY& (0+255),w,b
 11888  010E50  0D14               	mullw	20
 11889  010E52  0E0C               	movlw	low _lBuffer
 11890  010E54  0100               	movlb	0	; () banked
 11891  010E56  6FD2               	movwf	(??_Console_PrintChar+1)& (0+255),b
 11892  010E58  0E02               	movlw	high _lBuffer
 11893  010E5A  0100               	movlb	0	; () banked
 11894  010E5C  6FD3               	movwf	(??_Console_PrintChar+2)& (0+255),b
 11895  010E5E  50F3               	movf	prodl,w,c
 11896  010E60  0100               	movlb	0	; () banked
 11897  010E62  27D2               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 11898  010E64  50F4               	movf	prodh,w,c
 11899  010E66  0100               	movlb	0	; () banked
 11900  010E68  23D3               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 11901  010E6A  0100               	movlb	0	; () banked
 11902  010E6C  517A               	movf	_lBufferX& (0+255),w,b
 11903  010E6E  0D01               	mullw	1
 11904  010E70  50F3               	movf	prodl,w,c
 11905  010E72  0100               	movlb	0	; () banked
 11906  010E74  25D2               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 11907  010E76  6ED9               	movwf	fsr2l,c
 11908  010E78  50F4               	movf	prodh,w,c
 11909  010E7A  0100               	movlb	0	; () banked
 11910  010E7C  21D3               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 11911  010E7E  6EDA               	movwf	fsr2h,c
 11912  010E80  50DF               	movf	indf2,w,c
 11913  010E82  0B7F               	andlw	127
 11914  010E84  0100               	movlb	0	; () banked
 11915  010E86  19D1               	xorwf	??_Console_PrintChar& (0+255),w,b
 11916  010E88  B4D8               	btfsc	status,2,c
 11917  010E8A  D02D               	goto	l1047
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;Console.c: 351: {
 11921                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 11922  010E8C  0E01               	movlw	1
 11923  010E8E  6E4B               	movwf	_change,c
 11924                           
 11925                           ; BSR set to: 0
 11926  010E90  0100               	movlb	0	; () banked
 11927  010E92  5179               	movf	_lBufferY& (0+255),w,b
 11928  010E94  0D14               	mullw	20
 11929  010E96  0E0C               	movlw	low _lBuffer
 11930  010E98  0100               	movlb	0	; () banked
 11931  010E9A  6FD1               	movwf	??_Console_PrintChar& (0+255),b
 11932  010E9C  0E02               	movlw	high _lBuffer
 11933  010E9E  0100               	movlb	0	; () banked
 11934  010EA0  6FD2               	movwf	(??_Console_PrintChar+1)& (0+255),b
 11935  010EA2  50F3               	movf	prodl,w,c
 11936  010EA4  0100               	movlb	0	; () banked
 11937  010EA6  27D1               	addwf	??_Console_PrintChar& (0+255),f,b
 11938  010EA8  50F4               	movf	prodh,w,c
 11939  010EAA  0100               	movlb	0	; () banked
 11940  010EAC  23D2               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 11941  010EAE  0100               	movlb	0	; () banked
 11942  010EB0  517A               	movf	_lBufferX& (0+255),w,b
 11943  010EB2  0D01               	mullw	1
 11944  010EB4  50F3               	movf	prodl,w,c
 11945  010EB6  0100               	movlb	0	; () banked
 11946  010EB8  25D1               	addwf	??_Console_PrintChar& (0+255),w,b
 11947  010EBA  6ED9               	movwf	fsr2l,c
 11948  010EBC  50F4               	movf	prodh,w,c
 11949  010EBE  0100               	movlb	0	; () banked
 11950  010EC0  21D2               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 11951  010EC2  6EDA               	movwf	fsr2h,c
 11952  010EC4  0100               	movlb	0	; () banked
 11953  010EC6  51D4               	movf	Console_PrintChar@pInput& (0+255),w,b
 11954  010EC8  0980               	iorlw	128
 11955  010ECA  6EDF               	movwf	indf2,c
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 11959  010ECC  0100               	movlb	0	; () banked
 11960  010ECE  5179               	movf	_lBufferY& (0+255),w,b
 11961  010ED0  0D02               	mullw	2
 11962  010ED2  0E00               	movlw	low _lCBuffer
 11963  010ED4  24F3               	addwf	prodl,w,c
 11964  010ED6  6ED9               	movwf	fsr2l,c
 11965  010ED8  0E01               	movlw	high _lCBuffer
 11966  010EDA  20F4               	addwfc	prodh,w,c
 11967  010EDC  6EDA               	movwf	fsr2h,c
 11968  010EDE  C0FE  FFDE         	movff	_gForecolour,postinc2
 11969  010EE2  C0FF  FFDD         	movff	_gForecolour+1,postdec2
 11970  010EE6                     l1047:
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;Console.c: 354: }
 11974                           ;Console.c: 368: if(Console_IncrementCursor())
 11975                           
 11976                           ; BSR set to: 0
 11977  010EE6  ECB1  F092         	call	_Console_IncrementCursor	;wreg free
 11978  010EEA  0900               	iorlw	0
 11979  010EEC  B4D8               	btfsc	status,2,c
 11980  010EEE  0012               	return	
 11981                           
 11982                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 11983  010EF0  C0D4  F0D1         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 11984  010EF4  0E7F               	movlw	127
 11985  010EF6  0100               	movlb	0	; () banked
 11986  010EF8  17D1               	andwf	??_Console_PrintChar& (0+255),f,b
 11987  010EFA  0100               	movlb	0	; () banked
 11988  010EFC  5179               	movf	_lBufferY& (0+255),w,b
 11989  010EFE  0D14               	mullw	20
 11990  010F00  0E0C               	movlw	low _lBuffer
 11991  010F02  0100               	movlb	0	; () banked
 11992  010F04  6FD2               	movwf	(??_Console_PrintChar+1)& (0+255),b
 11993  010F06  0E02               	movlw	high _lBuffer
 11994  010F08  0100               	movlb	0	; () banked
 11995  010F0A  6FD3               	movwf	(??_Console_PrintChar+2)& (0+255),b
 11996  010F0C  50F3               	movf	prodl,w,c
 11997  010F0E  0100               	movlb	0	; () banked
 11998  010F10  27D2               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 11999  010F12  50F4               	movf	prodh,w,c
 12000  010F14  0100               	movlb	0	; () banked
 12001  010F16  23D3               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 12002  010F18  0100               	movlb	0	; () banked
 12003  010F1A  517A               	movf	_lBufferX& (0+255),w,b
 12004  010F1C  0D01               	mullw	1
 12005  010F1E  50F3               	movf	prodl,w,c
 12006  010F20  0100               	movlb	0	; () banked
 12007  010F22  25D2               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 12008  010F24  6ED9               	movwf	fsr2l,c
 12009  010F26  50F4               	movf	prodh,w,c
 12010  010F28  0100               	movlb	0	; () banked
 12011  010F2A  21D3               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 12012  010F2C  6EDA               	movwf	fsr2h,c
 12013  010F2E  50DF               	movf	indf2,w,c
 12014  010F30  0B7F               	andlw	127
 12015  010F32  0100               	movlb	0	; () banked
 12016  010F34  19D1               	xorwf	??_Console_PrintChar& (0+255),w,b
 12017  010F36  B4D8               	btfsc	status,2,c
 12018  010F38  0012               	return	
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 12022  010F3A  0E01               	movlw	1
 12023  010F3C  6E4B               	movwf	_change,c
 12024                           
 12025                           ; BSR set to: 0
 12026  010F3E  0100               	movlb	0	; () banked
 12027  010F40  5179               	movf	_lBufferY& (0+255),w,b
 12028  010F42  0D14               	mullw	20
 12029  010F44  0E0C               	movlw	low _lBuffer
 12030  010F46  0100               	movlb	0	; () banked
 12031  010F48  6FD1               	movwf	??_Console_PrintChar& (0+255),b
 12032  010F4A  0E02               	movlw	high _lBuffer
 12033  010F4C  0100               	movlb	0	; () banked
 12034  010F4E  6FD2               	movwf	(??_Console_PrintChar+1)& (0+255),b
 12035  010F50  50F3               	movf	prodl,w,c
 12036  010F52  0100               	movlb	0	; () banked
 12037  010F54  27D1               	addwf	??_Console_PrintChar& (0+255),f,b
 12038  010F56  50F4               	movf	prodh,w,c
 12039  010F58  0100               	movlb	0	; () banked
 12040  010F5A  23D2               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 12041  010F5C  0100               	movlb	0	; () banked
 12042  010F5E  517A               	movf	_lBufferX& (0+255),w,b
 12043  010F60  0D01               	mullw	1
 12044  010F62  50F3               	movf	prodl,w,c
 12045  010F64  0100               	movlb	0	; () banked
 12046  010F66  25D1               	addwf	??_Console_PrintChar& (0+255),w,b
 12047  010F68  6ED9               	movwf	fsr2l,c
 12048  010F6A  50F4               	movf	prodh,w,c
 12049  010F6C  0100               	movlb	0	; () banked
 12050  010F6E  21D2               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 12051  010F70  6EDA               	movwf	fsr2h,c
 12052  010F72  0100               	movlb	0	; () banked
 12053  010F74  51D4               	movf	Console_PrintChar@pInput& (0+255),w,b
 12054  010F76  0980               	iorlw	128
 12055  010F78  6EDF               	movwf	indf2,c
 12056                           
 12057                           ; BSR set to: 0
 12058                           ;Console.c: 372: };
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;Console.c: 371: return;
 12062                           
 12063                           ; BSR set to: 0
 12064                           
 12065                           ; BSR set to: 0
 12066  010F7A  0012               	return	
 12067  010F7C                     l1036:
 12068                           
 12069                           ; BSR set to: 0
 12070  010F7C  0100               	movlb	0	; () banked
 12071  010F7E  51D4               	movf	Console_PrintChar@pInput& (0+255),w,b
 12072                           
 12073                           ; Switch size 1, requested type "space"
 12074                           ; Number of cases is 8, Range of values is 7 to 35
 12075                           ; switch strategies available:
 12076                           ; Name         Instructions Cycles
 12077                           ; simple_byte           25    13 (average)
 12078                           ;	Chosen strategy is simple_byte
 12079  010F80  0A07               	xorlw	7	; case 7
 12080  010F82  B4D8               	btfsc	status,2,c
 12081  010F84  D758               	goto	l1043
 12082  010F86  0A0F               	xorlw	15	; case 8
 12083  010F88  B4D8               	btfsc	status,2,c
 12084  010F8A  D74C               	goto	l1040
 12085  010F8C  0A01               	xorlw	1	; case 9
 12086  010F8E  B4D8               	btfsc	status,2,c
 12087  010F90  D74F               	goto	l1042
 12088  010F92  0A03               	xorlw	3	; case 10
 12089  010F94  B4D8               	btfsc	status,2,c
 12090  010F96  D743               	goto	l1037
 12091  010F98  0A06               	xorlw	6	; case 12
 12092  010F9A  B4D8               	btfsc	status,2,c
 12093  010F9C  D746               	goto	l1041
 12094  010F9E  0A01               	xorlw	1	; case 13
 12095  010FA0  B4D8               	btfsc	status,2,c
 12096  010FA2  D73D               	goto	l1037
 12097  010FA4  0A2D               	xorlw	45	; case 32
 12098  010FA6  B4D8               	btfsc	status,2,c
 12099  010FA8  D74C               	goto	l1045
 12100  010FAA  0A03               	xorlw	3	; case 35
 12101  010FAC  B4D8               	btfsc	status,2,c
 12102  010FAE  D746               	goto	l1044
 12103  010FB0  D748               	goto	l1045
 12104  010FB2                     __end_of_Console_PrintChar:
 12105                           	opt stack 0
 12106                           tosu	equ	0xFFF
 12107                           tosh	equ	0xFFE
 12108                           tosl	equ	0xFFD
 12109                           pclath	equ	0xFFA
 12110                           tblptru	equ	0xFF8
 12111                           tblptrh	equ	0xFF7
 12112                           tblptrl	equ	0xFF6
 12113                           tablat	equ	0xFF5
 12114                           prodh	equ	0xFF4
 12115                           prodl	equ	0xFF3
 12116                           intcon	equ	0xFF2
 12117                           indf0	equ	0xFEF
 12118                           postinc0	equ	0xFEE
 12119                           fsr0h	equ	0xFEA
 12120                           fsr0l	equ	0xFE9
 12121                           wreg	equ	0xFE8
 12122                           postdec1	equ	0xFE5
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function _Console_Tab *****************
 12134 ;; Defined at:
 12135 ;;		line 260 in file "Library/Console.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;  c               1   15[BANK0 ] unsigned char 
 12140 ;;  i               1   14[BANK0 ] unsigned char 
 12141 ;;  t               1   13[BANK0 ] unsigned char 
 12142 ;; Return value:  Size  Location     Type
 12143 ;;                  1    wreg      void 
 12144 ;; Registers used:
 12145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12155 ;;Total ram usage:        8 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; Hardware stack levels required when called:    9
 12158 ;; This function calls:
 12159 ;;		_Console_ClearCursor
 12160 ;;		_Console_IncrementCursor
 12161 ;;		___awdiv
 12162 ;; This function is called by:
 12163 ;;		_Console_PrintChar
 12164 ;; This function uses a non-reentrant model
 12165 ;;
 12166                           
 12167                           	psect	text60
 12168  011880                     __ptext60:
 12169                           	opt stack 0
 12170  011880                     _Console_Tab:
 12171                           	opt stack 19
 12172                           
 12173                           ;Console.c: 262: UINT8 i = 0;
 12174                           
 12175                           ;incstack = 0
 12176  011880  0E00               	movlw	0
 12177  011882  0100               	movlb	0	; () banked
 12178  011884  6FCF               	movwf	Console_Tab@i& (0+255),b
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 12182  011886  0EFA               	movlw	250
 12183  011888  2446               	addwf	_gCursor,w,c
 12184  01188A  0100               	movlb	0	; () banked
 12185  01188C  6FC1               	movwf	___awdiv@dividend& (0+255),b
 12186  01188E  0EFF               	movlw	255
 12187  011890  2047               	addwfc	_gCursor+1,w,c
 12188  011892  0100               	movlb	0	; () banked
 12189  011894  6FC2               	movwf	(___awdiv@dividend+1)& (0+255),b
 12190  011896  0E00               	movlw	0
 12191  011898  0100               	movlb	0	; () banked
 12192  01189A  6FC4               	movwf	(___awdiv@divisor+1)& (0+255),b
 12193  01189C  0E06               	movlw	6
 12194  01189E  6FC3               	movwf	___awdiv@divisor& (0+255),b
 12195  0118A0  ECA1  F08C         	call	___awdiv	;wreg free
 12196  0118A4  0100               	movlb	0	; () banked
 12197  0118A6  51C1               	movf	?___awdiv& (0+255),w,b
 12198  0118A8  0100               	movlb	0	; () banked
 12199  0118AA  6FD0               	movwf	Console_Tab@c& (0+255),b
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;Console.c: 264: UINT8 t = c/4;
 12203  0118AC  C0D0  F0C1         	movff	Console_Tab@c,___awdiv@dividend
 12204  0118B0  0100               	movlb	0	; () banked
 12205  0118B2  6BC2               	clrf	(___awdiv@dividend+1)& (0+255),b
 12206  0118B4  0E00               	movlw	0
 12207  0118B6  0100               	movlb	0	; () banked
 12208  0118B8  6FC4               	movwf	(___awdiv@divisor+1)& (0+255),b
 12209  0118BA  0E04               	movlw	4
 12210  0118BC  6FC3               	movwf	___awdiv@divisor& (0+255),b
 12211  0118BE  ECA1  F08C         	call	___awdiv	;wreg free
 12212  0118C2  0100               	movlb	0	; () banked
 12213  0118C4  51C1               	movf	?___awdiv& (0+255),w,b
 12214  0118C6  0100               	movlb	0	; () banked
 12215  0118C8  6FCE               	movwf	Console_Tab@t& (0+255),b
 12216                           
 12217                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 12218  0118CA  0E00               	movlw	0
 12219  0118CC  0100               	movlb	0	; () banked
 12220  0118CE  6FCF               	movwf	Console_Tab@i& (0+255),b
 12221  0118D0  D006               	goto	l1009
 12222  0118D2                     
 12223                           ; BSR set to: 0
 12224                           ;Console.c: 266: {
 12225                           ;Console.c: 267: Console_ClearCursor();
 12226                           
 12227                           ; BSR set to: 0
 12228  0118D2  EC99  F095         	call	_Console_ClearCursor	;wreg free
 12229                           
 12230                           ;Console.c: 268: Console_IncrementCursor();
 12231  0118D6  ECB1  F092         	call	_Console_IncrementCursor	;wreg free
 12232  0118DA  0100               	movlb	0	; () banked
 12233  0118DC  2BCF               	incf	Console_Tab@i& (0+255),f,b
 12234  0118DE                     l1009:
 12235                           
 12236                           ; BSR set to: 0
 12237                           
 12238                           ; BSR set to: 0
 12239  0118DE  0100               	movlb	0	; () banked
 12240  0118E0  51CE               	movf	Console_Tab@t& (0+255),w,b
 12241  0118E2  0D04               	mullw	4
 12242  0118E4  1EF3               	comf	prodl,f,c
 12243  0118E6  1EF4               	comf	prodh,f,c
 12244  0118E8  4AF3               	infsnz	prodl,f,c
 12245  0118EA  2AF4               	incf	prodh,f,c
 12246  0118EC  0100               	movlb	0	; () banked
 12247  0118EE  51D0               	movf	Console_Tab@c& (0+255),w,b
 12248  0118F0  0100               	movlb	0	; () banked
 12249  0118F2  6FC9               	movwf	??_Console_Tab& (0+255),b
 12250  0118F4  6BCA               	clrf	(??_Console_Tab+1)& (0+255),b
 12251  0118F6  50F3               	movf	prodl,w,c
 12252  0118F8  0100               	movlb	0	; () banked
 12253  0118FA  27C9               	addwf	??_Console_Tab& (0+255),f,b
 12254  0118FC  50F4               	movf	prodh,w,c
 12255  0118FE  0100               	movlb	0	; () banked
 12256  011900  23CA               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 12257  011902  0100               	movlb	0	; () banked
 12258  011904  1FC9               	comf	??_Console_Tab& (0+255),f,b
 12259  011906  1FCA               	comf	(??_Console_Tab+1)& (0+255),f,b
 12260  011908  4BC9               	infsnz	??_Console_Tab& (0+255),f,b
 12261  01190A  2BCA               	incf	(??_Console_Tab+1)& (0+255),f,b
 12262  01190C  0E04               	movlw	4
 12263  01190E  0100               	movlb	0	; () banked
 12264  011910  27C9               	addwf	??_Console_Tab& (0+255),f,b
 12265  011912  0E00               	movlw	0
 12266  011914  23CA               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 12267  011916  0100               	movlb	0	; () banked
 12268  011918  51CF               	movf	Console_Tab@i& (0+255),w,b
 12269  01191A  0100               	movlb	0	; () banked
 12270  01191C  6FCB               	movwf	(??_Console_Tab+2)& (0+255),b
 12271  01191E  6BCC               	clrf	(??_Console_Tab+3)& (0+255),b
 12272  011920  0100               	movlb	0	; () banked
 12273  011922  51C9               	movf	??_Console_Tab& (0+255),w,b
 12274  011924  0100               	movlb	0	; () banked
 12275  011926  5DCB               	subwf	(??_Console_Tab+2)& (0+255),w,b
 12276  011928  0100               	movlb	0	; () banked
 12277  01192A  51CC               	movf	(??_Console_Tab+3)& (0+255),w,b
 12278  01192C  0A80               	xorlw	128
 12279  01192E  0100               	movlb	0	; () banked
 12280  011930  6FCD               	movwf	(??_Console_Tab+4)& (0+255),b
 12281  011932  0100               	movlb	0	; () banked
 12282  011934  51CA               	movf	(??_Console_Tab+1)& (0+255),w,b
 12283  011936  0A80               	xorlw	128
 12284  011938  0100               	movlb	0	; () banked
 12285  01193A  59CD               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 12286  01193C  B0D8               	btfsc	status,0,c
 12287  01193E  0012               	return	
 12288  011940  D7C8               	goto	l1010
 12289  011942                     __end_of_Console_Tab:
 12290                           	opt stack 0
 12291                           tosu	equ	0xFFF
 12292                           tosh	equ	0xFFE
 12293                           tosl	equ	0xFFD
 12294                           pclath	equ	0xFFA
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           intcon	equ	0xFF2
 12302                           indf0	equ	0xFEF
 12303                           postinc0	equ	0xFEE
 12304                           fsr0h	equ	0xFEA
 12305                           fsr0l	equ	0xFE9
 12306                           wreg	equ	0xFE8
 12307                           postdec1	equ	0xFE5
 12308                           fsr1h	equ	0xFE2
 12309                           fsr1l	equ	0xFE1
 12310                           indf2	equ	0xFDF
 12311                           postinc2	equ	0xFDE
 12312                           postdec2	equ	0xFDD
 12313                           plusw2	equ	0xFDB
 12314                           fsr2h	equ	0xFDA
 12315                           fsr2l	equ	0xFD9
 12316                           status	equ	0xFD8
 12317                           
 12318 ;; *************** function ___awdiv *****************
 12319 ;; Defined at:
 12320 ;;		line 8 in file "/opt/microchip/xc8/v1.43/sources/common/awdiv.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;  dividend        2    0[BANK0 ] int 
 12323 ;;  divisor         2    2[BANK0 ] int 
 12324 ;; Auto vars:     Size  Location     Type
 12325 ;;  quotient        2    6[BANK0 ] int 
 12326 ;;  sign            1    5[BANK0 ] unsigned char 
 12327 ;;  counter         1    4[BANK0 ] unsigned char 
 12328 ;; Return value:  Size  Location     Type
 12329 ;;                  2    0[BANK0 ] int 
 12330 ;; Registers used:
 12331 ;;		wreg, status,2, status,0
 12332 ;; Tracked objects:
 12333 ;;		On entry : 0/0
 12334 ;;		On exit  : 0/0
 12335 ;;		Unchanged: 0/0
 12336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12337 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12340 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12341 ;;Total ram usage:        8 bytes
 12342 ;; Hardware stack levels used:    1
 12343 ;; Hardware stack levels required when called:    7
 12344 ;; This function calls:
 12345 ;;		Nothing
 12346 ;; This function is called by:
 12347 ;;		_Console_Tab
 12348 ;; This function uses a non-reentrant model
 12349 ;;
 12350                           
 12351                           	psect	text61
 12352  011942                     __ptext61:
 12353                           	opt stack 0
 12354  011942                     ___awdiv:
 12355                           	opt stack 20
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;incstack = 0
 12359  011942  0E00               	movlw	0
 12360  011944  0100               	movlb	0	; () banked
 12361  011946  6FC6               	movwf	___awdiv@sign& (0+255),b
 12362                           
 12363                           ; BSR set to: 0
 12364  011948  0100               	movlb	0	; () banked
 12365  01194A  AFC4               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12366  01194C  D008               	goto	l2154
 12367                           
 12368                           ; BSR set to: 0
 12369  01194E  0100               	movlb	0	; () banked
 12370  011950  6DC3               	negf	___awdiv@divisor& (0+255),b
 12371  011952  1FC4               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12372  011954  B0D8               	btfsc	status,0,c
 12373  011956  2BC4               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12374                           
 12375                           ; BSR set to: 0
 12376  011958  0E01               	movlw	1
 12377  01195A  0100               	movlb	0	; () banked
 12378  01195C  6FC6               	movwf	___awdiv@sign& (0+255),b
 12379  01195E                     l2154:
 12380                           
 12381                           ; BSR set to: 0
 12382                           
 12383                           ; BSR set to: 0
 12384  01195E  0100               	movlb	0	; () banked
 12385  011960  AFC2               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12386  011962  D008               	goto	l2155
 12387                           
 12388                           ; BSR set to: 0
 12389  011964  0100               	movlb	0	; () banked
 12390  011966  6DC1               	negf	___awdiv@dividend& (0+255),b
 12391  011968  1FC2               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12392  01196A  B0D8               	btfsc	status,0,c
 12393  01196C  2BC2               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12394                           
 12395                           ; BSR set to: 0
 12396  01196E  0E01               	movlw	1
 12397  011970  0100               	movlb	0	; () banked
 12398  011972  1BC6               	xorwf	___awdiv@sign& (0+255),f,b
 12399  011974                     l2155:
 12400                           
 12401                           ; BSR set to: 0
 12402                           
 12403                           ; BSR set to: 0
 12404  011974  0E00               	movlw	0
 12405  011976  0100               	movlb	0	; () banked
 12406  011978  6FC8               	movwf	(___awdiv@quotient+1)& (0+255),b
 12407  01197A  0E00               	movlw	0
 12408  01197C  6FC7               	movwf	___awdiv@quotient& (0+255),b
 12409                           
 12410                           ; BSR set to: 0
 12411  01197E  0100               	movlb	0	; () banked
 12412  011980  51C3               	movf	___awdiv@divisor& (0+255),w,b
 12413  011982  0100               	movlb	0	; () banked
 12414  011984  11C4               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12415  011986  B4D8               	btfsc	status,2,c
 12416  011988  D02C               	goto	l2162
 12417                           
 12418                           ; BSR set to: 0
 12419  01198A  0E01               	movlw	1
 12420  01198C  0100               	movlb	0	; () banked
 12421  01198E  6FC5               	movwf	___awdiv@counter& (0+255),b
 12422  011990  D006               	goto	l2157
 12423  011992                     
 12424                           ; BSR set to: 0
 12425                           
 12426                           ; BSR set to: 0
 12427  011992  0100               	movlb	0	; () banked
 12428  011994  90D8               	bcf	status,0,c
 12429  011996  37C3               	rlcf	___awdiv@divisor& (0+255),f,b
 12430  011998  37C4               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12431  01199A  0100               	movlb	0	; () banked
 12432  01199C  2BC5               	incf	___awdiv@counter& (0+255),f,b
 12433  01199E                     l2157:
 12434                           
 12435                           ; BSR set to: 0
 12436                           
 12437                           ; BSR set to: 0
 12438  01199E  0100               	movlb	0	; () banked
 12439  0119A0  AFC4               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12440  0119A2  D7F7               	goto	l2158
 12441  0119A4                     u6260:
 12442                           
 12443                           ; BSR set to: 0
 12444                           
 12445                           ; BSR set to: 0
 12446                           
 12447                           ; BSR set to: 0
 12448  0119A4  0100               	movlb	0	; () banked
 12449  0119A6  90D8               	bcf	status,0,c
 12450  0119A8  37C7               	rlcf	___awdiv@quotient& (0+255),f,b
 12451  0119AA  37C8               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12452                           
 12453                           ; BSR set to: 0
 12454  0119AC  0100               	movlb	0	; () banked
 12455  0119AE  51C3               	movf	___awdiv@divisor& (0+255),w,b
 12456  0119B0  0100               	movlb	0	; () banked
 12457  0119B2  5DC1               	subwf	___awdiv@dividend& (0+255),w,b
 12458  0119B4  0100               	movlb	0	; () banked
 12459  0119B6  51C4               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12460  0119B8  0100               	movlb	0	; () banked
 12461  0119BA  59C2               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12462  0119BC  A0D8               	btfss	status,0,c
 12463  0119BE  D00A               	goto	l2161
 12464                           
 12465                           ; BSR set to: 0
 12466  0119C0  0100               	movlb	0	; () banked
 12467  0119C2  51C3               	movf	___awdiv@divisor& (0+255),w,b
 12468  0119C4  0100               	movlb	0	; () banked
 12469  0119C6  5FC1               	subwf	___awdiv@dividend& (0+255),f,b
 12470  0119C8  0100               	movlb	0	; () banked
 12471  0119CA  51C4               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12472  0119CC  0100               	movlb	0	; () banked
 12473  0119CE  5BC2               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12474                           
 12475                           ; BSR set to: 0
 12476  0119D0  0100               	movlb	0	; () banked
 12477  0119D2  81C7               	bsf	___awdiv@quotient& (0+255),0,b
 12478  0119D4                     l2161:
 12479                           
 12480                           ; BSR set to: 0
 12481                           
 12482                           ; BSR set to: 0
 12483  0119D4  0100               	movlb	0	; () banked
 12484  0119D6  90D8               	bcf	status,0,c
 12485  0119D8  33C4               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12486  0119DA  33C3               	rrcf	___awdiv@divisor& (0+255),f,b
 12487                           
 12488                           ; BSR set to: 0
 12489  0119DC  0100               	movlb	0	; () banked
 12490  0119DE  2FC5               	decfsz	___awdiv@counter& (0+255),f,b
 12491  0119E0  D7E1               	goto	u6260
 12492  0119E2                     l2162:
 12493                           
 12494                           ; BSR set to: 0
 12495                           
 12496                           ; BSR set to: 0
 12497                           
 12498                           ; BSR set to: 0
 12499  0119E2  0100               	movlb	0	; () banked
 12500  0119E4  51C6               	movf	___awdiv@sign& (0+255),w,b
 12501  0119E6  0100               	movlb	0	; () banked
 12502  0119E8  B4D8               	btfsc	status,2,c
 12503  0119EA  D005               	goto	l2163
 12504                           
 12505                           ; BSR set to: 0
 12506  0119EC  0100               	movlb	0	; () banked
 12507  0119EE  6DC7               	negf	___awdiv@quotient& (0+255),b
 12508  0119F0  1FC8               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12509  0119F2  B0D8               	btfsc	status,0,c
 12510  0119F4  2BC8               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12511  0119F6                     l2163:
 12512                           
 12513                           ; BSR set to: 0
 12514                           
 12515                           ; BSR set to: 0
 12516  0119F6  C0C7  F0C1         	movff	___awdiv@quotient,?___awdiv
 12517  0119FA  C0C8  F0C2         	movff	___awdiv@quotient+1,?___awdiv+1
 12518  0119FE  0012               	return	
 12519  011A00                     __end_of___awdiv:
 12520                           	opt stack 0
 12521                           tosu	equ	0xFFF
 12522                           tosh	equ	0xFFE
 12523                           tosl	equ	0xFFD
 12524                           pclath	equ	0xFFA
 12525                           tblptru	equ	0xFF8
 12526                           tblptrh	equ	0xFF7
 12527                           tblptrl	equ	0xFF6
 12528                           tablat	equ	0xFF5
 12529                           prodh	equ	0xFF4
 12530                           prodl	equ	0xFF3
 12531                           intcon	equ	0xFF2
 12532                           indf0	equ	0xFEF
 12533                           postinc0	equ	0xFEE
 12534                           fsr0h	equ	0xFEA
 12535                           fsr0l	equ	0xFE9
 12536                           wreg	equ	0xFE8
 12537                           postdec1	equ	0xFE5
 12538                           fsr1h	equ	0xFE2
 12539                           fsr1l	equ	0xFE1
 12540                           indf2	equ	0xFDF
 12541                           postinc2	equ	0xFDE
 12542                           postdec2	equ	0xFDD
 12543                           plusw2	equ	0xFDB
 12544                           fsr2h	equ	0xFDA
 12545                           fsr2l	equ	0xFD9
 12546                           status	equ	0xFD8
 12547                           
 12548 ;; *************** function _Console_IncrementCursor *****************
 12549 ;; Defined at:
 12550 ;;		line 243 in file "Library/Console.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;		None
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;		None
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  1    wreg      unsigned char 
 12557 ;; Registers used:
 12558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12568 ;;Total ram usage:        2 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    8
 12571 ;; This function calls:
 12572 ;;		_Console_FormFeed
 12573 ;;		_Console_NewLine
 12574 ;; This function is called by:
 12575 ;;		_Console_Tab
 12576 ;;		_Console_PrintChar
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           	psect	text62
 12581  012562                     __ptext62:
 12582                           	opt stack 0
 12583  012562                     _Console_IncrementCursor:
 12584                           	opt stack 19
 12585                           
 12586                           ;Console.c: 246: lBufferX += 1;
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;incstack = 0
 12590  012562  0100               	movlb	0	; () banked
 12591  012564  2B7A               	incf	_lBufferX& (0+255),f,b
 12592                           
 12593                           ; BSR set to: 0
 12594                           ;Console.c: 248: gCursor.x += 6;
 12595  012566  0E06               	movlw	6
 12596  012568  2646               	addwf	_gCursor,f,c
 12597  01256A  0E00               	movlw	0
 12598  01256C  2247               	addwfc	_gCursor+1,f,c
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 12602  01256E  0E06               	movlw	6
 12603  012570  2446               	addwf	_gCursor,w,c
 12604  012572  0100               	movlb	0	; () banked
 12605  012574  6FC5               	movwf	??_Console_IncrementCursor& (0+255),b
 12606  012576  0E00               	movlw	0
 12607  012578  2047               	addwfc	_gCursor+1,w,c
 12608  01257A  0100               	movlb	0	; () banked
 12609  01257C  6FC6               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 12610  01257E  0100               	movlb	0	; () banked
 12611  012580  BFC6               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 12612  012582  D009               	goto	l1004
 12613  012584  0100               	movlb	0	; () banked
 12614  012586  51C6               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 12615  012588  E104               	bnz	u6210
 12616  01258A  0E80               	movlw	128
 12617  01258C  0100               	movlb	0	; () banked
 12618  01258E  5DC5               	subwf	??_Console_IncrementCursor& (0+255),w,b
 12619  012590  B0D8               	btfsc	status,0,c
 12620  012592                     u6210:
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;Console.c: 250: Console_NewLine();
 12624  012592  ECAD  F08F         	call	_Console_NewLine	;wreg free
 12625  012596                     l1004:
 12626                           
 12627                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 12628  012596  0E08               	movlw	8
 12629  012598  2448               	addwf	_gCursor+2,w,c
 12630  01259A  0100               	movlb	0	; () banked
 12631  01259C  6FC5               	movwf	??_Console_IncrementCursor& (0+255),b
 12632  01259E  0E00               	movlw	0
 12633  0125A0  2049               	addwfc	_gCursor+3,w,c
 12634  0125A2  0100               	movlb	0	; () banked
 12635  0125A4  6FC6               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 12636  0125A6  0100               	movlb	0	; () banked
 12637  0125A8  BFC6               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 12638  0125AA  D00C               	goto	l1005
 12639  0125AC  0100               	movlb	0	; () banked
 12640  0125AE  51C6               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 12641  0125B0  E105               	bnz	u6220
 12642  0125B2  0E80               	movlw	128
 12643  0125B4  0100               	movlb	0	; () banked
 12644  0125B6  5DC5               	subwf	??_Console_IncrementCursor& (0+255),w,b
 12645  0125B8  A0D8               	btfss	status,0,c
 12646  0125BA  D004               	goto	l1005
 12647  0125BC                     u6220:
 12648                           
 12649                           ; BSR set to: 0
 12650                           ;Console.c: 252: {
 12651                           ;Console.c: 253: Console_FormFeed();
 12652  0125BC  ECE1  F090         	call	_Console_FormFeed	;wreg free
 12653                           
 12654                           ;Console.c: 254: return 1;
 12655  0125C0  0E01               	movlw	1
 12656  0125C2  0012               	return	
 12657  0125C4                     l1005:
 12658                           
 12659                           ;Console.c: 255: }
 12660                           ;Console.c: 257: return 0;
 12661  0125C4  0E00               	movlw	0
 12662  0125C6  0012               	return	
 12663  0125C8                     __end_of_Console_IncrementCursor:
 12664                           	opt stack 0
 12665                           tosu	equ	0xFFF
 12666                           tosh	equ	0xFFE
 12667                           tosl	equ	0xFFD
 12668                           pclath	equ	0xFFA
 12669                           tblptru	equ	0xFF8
 12670                           tblptrh	equ	0xFF7
 12671                           tblptrl	equ	0xFF6
 12672                           tablat	equ	0xFF5
 12673                           prodh	equ	0xFF4
 12674                           prodl	equ	0xFF3
 12675                           intcon	equ	0xFF2
 12676                           indf0	equ	0xFEF
 12677                           postinc0	equ	0xFEE
 12678                           fsr0h	equ	0xFEA
 12679                           fsr0l	equ	0xFE9
 12680                           wreg	equ	0xFE8
 12681                           postdec1	equ	0xFE5
 12682                           fsr1h	equ	0xFE2
 12683                           fsr1l	equ	0xFE1
 12684                           indf2	equ	0xFDF
 12685                           postinc2	equ	0xFDE
 12686                           postdec2	equ	0xFDD
 12687                           plusw2	equ	0xFDB
 12688                           fsr2h	equ	0xFDA
 12689                           fsr2l	equ	0xFD9
 12690                           status	equ	0xFD8
 12691                           
 12692 ;; *************** function _Console_NewLine *****************
 12693 ;; Defined at:
 12694 ;;		line 175 in file "Library/Console.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;		None
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;		None
 12699 ;; Return value:  Size  Location     Type
 12700 ;;                  1    wreg      void 
 12701 ;; Registers used:
 12702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;Total ram usage:        2 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    7
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		_Console_IncrementCursor
 12719 ;;		_Console_PrintChar
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text63
 12724  011F5A                     __ptext63:
 12725                           	opt stack 0
 12726  011F5A                     _Console_NewLine:
 12727                           	opt stack 19
 12728                           
 12729                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 12730                           
 12731                           ;incstack = 0
 12732  011F5A  D03D               	goto	l983
 12733  011F5C                     
 12734                           ;Console.c: 179: {
 12735                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 12736  011F5C  0100               	movlb	0	; () banked
 12737  011F5E  5179               	movf	_lBufferY& (0+255),w,b
 12738  011F60  0D14               	mullw	20
 12739  011F62  0E0C               	movlw	low _lBuffer
 12740  011F64  0100               	movlb	0	; () banked
 12741  011F66  6FC1               	movwf	??_Console_NewLine& (0+255),b
 12742  011F68  0E02               	movlw	high _lBuffer
 12743  011F6A  0100               	movlb	0	; () banked
 12744  011F6C  6FC2               	movwf	(??_Console_NewLine+1)& (0+255),b
 12745  011F6E  50F3               	movf	prodl,w,c
 12746  011F70  0100               	movlb	0	; () banked
 12747  011F72  27C1               	addwf	??_Console_NewLine& (0+255),f,b
 12748  011F74  50F4               	movf	prodh,w,c
 12749  011F76  0100               	movlb	0	; () banked
 12750  011F78  23C2               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 12751  011F7A  0100               	movlb	0	; () banked
 12752  011F7C  517A               	movf	_lBufferX& (0+255),w,b
 12753  011F7E  0D01               	mullw	1
 12754  011F80  50F3               	movf	prodl,w,c
 12755  011F82  0100               	movlb	0	; () banked
 12756  011F84  25C1               	addwf	??_Console_NewLine& (0+255),w,b
 12757  011F86  6ED9               	movwf	fsr2l,c
 12758  011F88  50F4               	movf	prodh,w,c
 12759  011F8A  0100               	movlb	0	; () banked
 12760  011F8C  21C2               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 12761  011F8E  6EDA               	movwf	fsr2h,c
 12762  011F90  50DF               	movf	indf2,w,c
 12763  011F92  B4D8               	btfsc	status,2,c
 12764  011F94  D01E               	goto	l985
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 12768  011F96  0E01               	movlw	1
 12769  011F98  6E4B               	movwf	_change,c
 12770                           
 12771                           ; BSR set to: 0
 12772  011F9A  0100               	movlb	0	; () banked
 12773  011F9C  5179               	movf	_lBufferY& (0+255),w,b
 12774  011F9E  0D14               	mullw	20
 12775  011FA0  0E0C               	movlw	low _lBuffer
 12776  011FA2  0100               	movlb	0	; () banked
 12777  011FA4  6FC1               	movwf	??_Console_NewLine& (0+255),b
 12778  011FA6  0E02               	movlw	high _lBuffer
 12779  011FA8  0100               	movlb	0	; () banked
 12780  011FAA  6FC2               	movwf	(??_Console_NewLine+1)& (0+255),b
 12781  011FAC  50F3               	movf	prodl,w,c
 12782  011FAE  0100               	movlb	0	; () banked
 12783  011FB0  27C1               	addwf	??_Console_NewLine& (0+255),f,b
 12784  011FB2  50F4               	movf	prodh,w,c
 12785  011FB4  0100               	movlb	0	; () banked
 12786  011FB6  23C2               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 12787  011FB8  0100               	movlb	0	; () banked
 12788  011FBA  517A               	movf	_lBufferX& (0+255),w,b
 12789  011FBC  0D01               	mullw	1
 12790  011FBE  50F3               	movf	prodl,w,c
 12791  011FC0  0100               	movlb	0	; () banked
 12792  011FC2  25C1               	addwf	??_Console_NewLine& (0+255),w,b
 12793  011FC4  6ED9               	movwf	fsr2l,c
 12794  011FC6  50F4               	movf	prodh,w,c
 12795  011FC8  0100               	movlb	0	; () banked
 12796  011FCA  21C2               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 12797  011FCC  6EDA               	movwf	fsr2h,c
 12798  011FCE  0E80               	movlw	128
 12799  011FD0  6EDF               	movwf	indf2,c
 12800  011FD2                     l985:
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;Console.c: 182: lBufferX ++;
 12804                           
 12805                           ; BSR set to: 0
 12806  011FD2  0100               	movlb	0	; () banked
 12807  011FD4  2B7A               	incf	_lBufferX& (0+255),f,b
 12808  011FD6                     l983:
 12809                           
 12810                           ; BSR set to: 0
 12811  011FD6  0E13               	movlw	19
 12812  011FD8  0100               	movlb	0	; () banked
 12813  011FDA  657A               	cpfsgt	_lBufferX& (0+255),b
 12814  011FDC  D7BF               	goto	l984
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;Console.c: 183: }
 12818                           ;Console.c: 185: lBufferX = 0;
 12819                           
 12820                           ; BSR set to: 0
 12821  011FDE  0E00               	movlw	0
 12822  011FE0  0100               	movlb	0	; () banked
 12823  011FE2  6F7A               	movwf	_lBufferX& (0+255),b
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;Console.c: 186: lBufferY ++;
 12827  011FE4  0100               	movlb	0	; () banked
 12828  011FE6  2B79               	incf	_lBufferY& (0+255),f,b
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;Console.c: 188: gCursor.y += 8;
 12832  011FE8  0E08               	movlw	8
 12833  011FEA  2648               	addwf	_gCursor+2,f,c
 12834  011FEC  0E00               	movlw	0
 12835  011FEE  2249               	addwfc	_gCursor+3,f,c
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;Console.c: 189: gCursor.x = 6;
 12839  011FF0  0E00               	movlw	0
 12840  011FF2  6E47               	movwf	_gCursor+1,c
 12841  011FF4  0E06               	movlw	6
 12842  011FF6  6E46               	movwf	_gCursor,c
 12843                           
 12844                           ; BSR set to: 0
 12845  011FF8  0012               	return		;funcret
 12846  011FFA                     __end_of_Console_NewLine:
 12847                           	opt stack 0
 12848                           tosu	equ	0xFFF
 12849                           tosh	equ	0xFFE
 12850                           tosl	equ	0xFFD
 12851                           pclath	equ	0xFFA
 12852                           tblptru	equ	0xFF8
 12853                           tblptrh	equ	0xFF7
 12854                           tblptrl	equ	0xFF6
 12855                           tablat	equ	0xFF5
 12856                           prodh	equ	0xFF4
 12857                           prodl	equ	0xFF3
 12858                           intcon	equ	0xFF2
 12859                           indf0	equ	0xFEF
 12860                           postinc0	equ	0xFEE
 12861                           fsr0h	equ	0xFEA
 12862                           fsr0l	equ	0xFE9
 12863                           wreg	equ	0xFE8
 12864                           postdec1	equ	0xFE5
 12865                           fsr1h	equ	0xFE2
 12866                           fsr1l	equ	0xFE1
 12867                           indf2	equ	0xFDF
 12868                           postinc2	equ	0xFDE
 12869                           postdec2	equ	0xFDD
 12870                           plusw2	equ	0xFDB
 12871                           fsr2h	equ	0xFDA
 12872                           fsr2l	equ	0xFD9
 12873                           status	equ	0xFD8
 12874                           
 12875 ;; *************** function _Console_FormFeed *****************
 12876 ;; Defined at:
 12877 ;;		line 192 in file "Library/Console.c"
 12878 ;; Parameters:    Size  Location     Type
 12879 ;;		None
 12880 ;; Auto vars:     Size  Location     Type
 12881 ;;  y               1    3[BANK0 ] unsigned char 
 12882 ;;  x               1    2[BANK0 ] unsigned char 
 12883 ;; Return value:  Size  Location     Type
 12884 ;;                  1    wreg      void 
 12885 ;; Registers used:
 12886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12887 ;; Tracked objects:
 12888 ;;		On entry : 0/0
 12889 ;;		On exit  : 0/0
 12890 ;;		Unchanged: 0/0
 12891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;Total ram usage:        4 bytes
 12897 ;; Hardware stack levels used:    1
 12898 ;; Hardware stack levels required when called:    7
 12899 ;; This function calls:
 12900 ;;		Nothing
 12901 ;; This function is called by:
 12902 ;;		_Console_IncrementCursor
 12903 ;;		_Console_PrintChar
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           	psect	text64
 12908  0121C2                     __ptext64:
 12909                           	opt stack 0
 12910  0121C2                     _Console_FormFeed:
 12911                           	opt stack 19
 12912                           
 12913                           ;Console.c: 195: lBufferX = 0;
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;incstack = 0
 12917  0121C2  0E00               	movlw	0
 12918  0121C4  0100               	movlb	0	; () banked
 12919  0121C6  6F7A               	movwf	_lBufferX& (0+255),b
 12920                           
 12921                           ;Console.c: 196: lBufferY = 0;
 12922  0121C8  0E00               	movlw	0
 12923  0121CA  0100               	movlb	0	; () banked
 12924  0121CC  6F79               	movwf	_lBufferY& (0+255),b
 12925                           
 12926                           ;Console.c: 197: UINT8 x, y;
 12927                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 12928  0121CE  0E00               	movlw	0
 12929  0121D0  0100               	movlb	0	; () banked
 12930  0121D2  6FC4               	movwf	Console_FormFeed@y& (0+255),b
 12931  0121D4                     l9274:
 12932                           
 12933                           ; BSR set to: 0
 12934  0121D4  0E0E               	movlw	14
 12935  0121D6  0100               	movlb	0	; () banked
 12936  0121D8  65C4               	cpfsgt	Console_FormFeed@y& (0+255),b
 12937  0121DA  D001               	goto	l990
 12938  0121DC  D02C               	goto	u6030
 12939  0121DE                     l990:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 12943                           
 12944                           ; BSR set to: 0
 12945  0121DE  0E00               	movlw	0
 12946  0121E0  0100               	movlb	0	; () banked
 12947  0121E2  6FC3               	movwf	Console_FormFeed@x& (0+255),b
 12948  0121E4                     l9280:
 12949                           
 12950                           ; BSR set to: 0
 12951  0121E4  0E13               	movlw	19
 12952  0121E6  0100               	movlb	0	; () banked
 12953  0121E8  65C3               	cpfsgt	Console_FormFeed@x& (0+255),b
 12954  0121EA  D001               	goto	l992
 12955  0121EC  D021               	goto	u6020
 12956  0121EE                     l992:
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 12960                           
 12961                           ; BSR set to: 0
 12962  0121EE  0E01               	movlw	1
 12963  0121F0  6E4B               	movwf	_change,c
 12964                           
 12965                           ; BSR set to: 0
 12966  0121F2  0100               	movlb	0	; () banked
 12967  0121F4  51C4               	movf	Console_FormFeed@y& (0+255),w,b
 12968  0121F6  0D14               	mullw	20
 12969  0121F8  0E0C               	movlw	low _lBuffer
 12970  0121FA  0100               	movlb	0	; () banked
 12971  0121FC  6FC1               	movwf	??_Console_FormFeed& (0+255),b
 12972  0121FE  0E02               	movlw	high _lBuffer
 12973  012200  0100               	movlb	0	; () banked
 12974  012202  6FC2               	movwf	(??_Console_FormFeed+1)& (0+255),b
 12975  012204  50F3               	movf	prodl,w,c
 12976  012206  0100               	movlb	0	; () banked
 12977  012208  27C1               	addwf	??_Console_FormFeed& (0+255),f,b
 12978  01220A  50F4               	movf	prodh,w,c
 12979  01220C  0100               	movlb	0	; () banked
 12980  01220E  23C2               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 12981  012210  0100               	movlb	0	; () banked
 12982  012212  51C3               	movf	Console_FormFeed@x& (0+255),w,b
 12983  012214  0D01               	mullw	1
 12984  012216  50F3               	movf	prodl,w,c
 12985  012218  0100               	movlb	0	; () banked
 12986  01221A  25C1               	addwf	??_Console_FormFeed& (0+255),w,b
 12987  01221C  6ED9               	movwf	fsr2l,c
 12988  01221E  50F4               	movf	prodh,w,c
 12989  012220  0100               	movlb	0	; () banked
 12990  012222  21C2               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 12991  012224  6EDA               	movwf	fsr2h,c
 12992  012226  0E80               	movlw	128
 12993  012228  6EDF               	movwf	indf2,c
 12994                           
 12995                           ; BSR set to: 0
 12996  01222A  0100               	movlb	0	; () banked
 12997  01222C  2BC3               	incf	Console_FormFeed@x& (0+255),f,b
 12998  01222E  D7DA               	goto	l9280
 12999  012230                     u6020:
 13000                           
 13001                           ; BSR set to: 0
 13002                           
 13003                           ; BSR set to: 0
 13004  012230  0100               	movlb	0	; () banked
 13005  012232  2BC4               	incf	Console_FormFeed@y& (0+255),f,b
 13006  012234  D7CF               	goto	l9274
 13007  012236                     u6030:
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;Console.c: 204: clearall = 1;
 13011                           
 13012                           ; BSR set to: 0
 13013  012236  0E01               	movlw	1
 13014  012238  6E3E               	movwf	_clearall,c
 13015                           
 13016                           ;Console.c: 205: gCursor.x = 6;
 13017  01223A  0E00               	movlw	0
 13018  01223C  6E47               	movwf	_gCursor+1,c
 13019  01223E  0E06               	movlw	6
 13020  012240  6E46               	movwf	_gCursor,c
 13021                           
 13022                           ;Console.c: 206: gCursor.y = 6;
 13023  012242  0E00               	movlw	0
 13024  012244  6E49               	movwf	_gCursor+3,c
 13025  012246  0E06               	movlw	6
 13026  012248  6E48               	movwf	_gCursor+2,c
 13027                           
 13028                           ; BSR set to: 0
 13029  01224A  0012               	return		;funcret
 13030  01224C                     __end_of_Console_FormFeed:
 13031                           	opt stack 0
 13032                           tosu	equ	0xFFF
 13033                           tosh	equ	0xFFE
 13034                           tosl	equ	0xFFD
 13035                           pclath	equ	0xFFA
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           indf0	equ	0xFEF
 13044                           postinc0	equ	0xFEE
 13045                           fsr0h	equ	0xFEA
 13046                           fsr0l	equ	0xFE9
 13047                           wreg	equ	0xFE8
 13048                           postdec1	equ	0xFE5
 13049                           fsr1h	equ	0xFE2
 13050                           fsr1l	equ	0xFE1
 13051                           indf2	equ	0xFDF
 13052                           postinc2	equ	0xFDE
 13053                           postdec2	equ	0xFDD
 13054                           plusw2	equ	0xFDB
 13055                           fsr2h	equ	0xFDA
 13056                           fsr2l	equ	0xFD9
 13057                           status	equ	0xFD8
 13058                           
 13059 ;; *************** function _Console_ResetCursor *****************
 13060 ;; Defined at:
 13061 ;;		line 297 in file "Library/Console.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;		None
 13064 ;; Auto vars:     Size  Location     Type
 13065 ;;		None
 13066 ;; Return value:  Size  Location     Type
 13067 ;;                  1    wreg      void 
 13068 ;; Registers used:
 13069 ;;		wreg, status,2
 13070 ;; Tracked objects:
 13071 ;;		On entry : 0/0
 13072 ;;		On exit  : 0/0
 13073 ;;		Unchanged: 0/0
 13074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;Total ram usage:        0 bytes
 13080 ;; Hardware stack levels used:    1
 13081 ;; Hardware stack levels required when called:    7
 13082 ;; This function calls:
 13083 ;;		Nothing
 13084 ;; This function is called by:
 13085 ;;		_Console_PrintChar
 13086 ;; This function uses a non-reentrant model
 13087 ;;
 13088                           
 13089                           	psect	text65
 13090  012D96                     __ptext65:
 13091                           	opt stack 0
 13092  012D96                     _Console_ResetCursor:
 13093                           	opt stack 21
 13094                           
 13095                           ;Console.c: 299: gCursor.x = 6;
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;incstack = 0
 13099  012D96  0E00               	movlw	0
 13100  012D98  6E47               	movwf	_gCursor+1,c
 13101  012D9A  0E06               	movlw	6
 13102  012D9C  6E46               	movwf	_gCursor,c
 13103                           
 13104                           ;Console.c: 300: gCursor.y = 6;
 13105  012D9E  0E00               	movlw	0
 13106  012DA0  6E49               	movwf	_gCursor+3,c
 13107  012DA2  0E06               	movlw	6
 13108  012DA4  6E48               	movwf	_gCursor+2,c
 13109                           
 13110                           ;Console.c: 303: lBufferX = 0;
 13111  012DA6  0E00               	movlw	0
 13112  012DA8  0100               	movlb	0	; () banked
 13113  012DAA  6F7A               	movwf	_lBufferX& (0+255),b
 13114                           
 13115                           ;Console.c: 304: lBufferY = 0;
 13116  012DAC  0E00               	movlw	0
 13117  012DAE  0100               	movlb	0	; () banked
 13118  012DB0  6F79               	movwf	_lBufferY& (0+255),b
 13119                           
 13120                           ; BSR set to: 0
 13121  012DB2  0012               	return		;funcret
 13122  012DB4                     __end_of_Console_ResetCursor:
 13123                           	opt stack 0
 13124                           tosu	equ	0xFFF
 13125                           tosh	equ	0xFFE
 13126                           tosl	equ	0xFFD
 13127                           pclath	equ	0xFFA
 13128                           tblptru	equ	0xFF8
 13129                           tblptrh	equ	0xFF7
 13130                           tblptrl	equ	0xFF6
 13131                           tablat	equ	0xFF5
 13132                           prodh	equ	0xFF4
 13133                           prodl	equ	0xFF3
 13134                           intcon	equ	0xFF2
 13135                           indf0	equ	0xFEF
 13136                           postinc0	equ	0xFEE
 13137                           fsr0h	equ	0xFEA
 13138                           fsr0l	equ	0xFE9
 13139                           wreg	equ	0xFE8
 13140                           postdec1	equ	0xFE5
 13141                           fsr1h	equ	0xFE2
 13142                           fsr1l	equ	0xFE1
 13143                           indf2	equ	0xFDF
 13144                           postinc2	equ	0xFDE
 13145                           postdec2	equ	0xFDD
 13146                           plusw2	equ	0xFDB
 13147                           fsr2h	equ	0xFDA
 13148                           fsr2l	equ	0xFD9
 13149                           status	equ	0xFD8
 13150                           
 13151 ;; *************** function _Console_Backspace *****************
 13152 ;; Defined at:
 13153 ;;		line 209 in file "Library/Console.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;		None
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;Total ram usage:        0 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:    8
 13174 ;; This function calls:
 13175 ;;		_Console_ClearCursor
 13176 ;; This function is called by:
 13177 ;;		_Console_PrintChar
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           	psect	text66
 13182  01268E                     __ptext66:
 13183                           	opt stack 0
 13184  01268E                     _Console_Backspace:
 13185                           	opt stack 20
 13186                           
 13187                           ;Console.c: 211: if (lBufferX > 0)
 13188                           
 13189                           ; BSR set to: 0
 13190                           ;incstack = 0
 13191  01268E  0100               	movlb	0	; () banked
 13192  012690  517A               	movf	_lBufferX& (0+255),w,b
 13193  012692  B4D8               	btfsc	status,2,c
 13194  012694  D007               	goto	l997
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;Console.c: 212: {
 13198                           ;Console.c: 213: gCursor.x -= 6;
 13199  012696  0EFA               	movlw	250
 13200  012698  2646               	addwf	_gCursor,f,c
 13201  01269A  0EFF               	movlw	255
 13202  01269C  2247               	addwfc	_gCursor+1,f,c
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;Console.c: 216: lBufferX --;
 13206  01269E  0100               	movlb	0	; () banked
 13207  0126A0  077A               	decf	_lBufferX& (0+255),f,b
 13208                           
 13209                           ;Console.c: 218: }
 13210  0126A2  D020               	goto	l1000
 13211  0126A4                     l997:
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;Console.c: 219: else if (lBufferY > 0)
 13215                           
 13216                           ; BSR set to: 0
 13217  0126A4  0100               	movlb	0	; () banked
 13218  0126A6  5179               	movf	_lBufferY& (0+255),w,b
 13219  0126A8  B4D8               	btfsc	status,2,c
 13220  0126AA  D00E               	goto	l999
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;Console.c: 220: {
 13224                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 13225  0126AC  0E00               	movlw	0
 13226  0126AE  6E47               	movwf	_gCursor+1,c
 13227  0126B0  0E72               	movlw	114
 13228  0126B2  6E46               	movwf	_gCursor,c
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;Console.c: 222: gCursor.y -= 8;
 13232  0126B4  0EF8               	movlw	248
 13233  0126B6  2648               	addwf	_gCursor+2,f,c
 13234  0126B8  0EFF               	movlw	255
 13235  0126BA  2249               	addwfc	_gCursor+3,f,c
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 13239  0126BC  0E13               	movlw	19
 13240  0126BE  0100               	movlb	0	; () banked
 13241  0126C0  6F7A               	movwf	_lBufferX& (0+255),b
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;Console.c: 226: lBufferY --;
 13245  0126C2  0100               	movlb	0	; () banked
 13246  0126C4  0779               	decf	_lBufferY& (0+255),f,b
 13247                           
 13248                           ;Console.c: 228: }
 13249  0126C6  D00E               	goto	l1000
 13250  0126C8                     l999:
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;Console.c: 229: else
 13254                           ;Console.c: 230: {
 13255                           ;Console.c: 231: gCursor.x = 6;
 13256                           
 13257                           ; BSR set to: 0
 13258  0126C8  0E00               	movlw	0
 13259  0126CA  6E47               	movwf	_gCursor+1,c
 13260  0126CC  0E06               	movlw	6
 13261  0126CE  6E46               	movwf	_gCursor,c
 13262                           
 13263                           ;Console.c: 232: gCursor.y = 6;
 13264  0126D0  0E00               	movlw	0
 13265  0126D2  6E49               	movwf	_gCursor+3,c
 13266  0126D4  0E06               	movlw	6
 13267  0126D6  6E48               	movwf	_gCursor+2,c
 13268                           
 13269                           ;Console.c: 235: lBufferX = 0;
 13270  0126D8  0E00               	movlw	0
 13271  0126DA  0100               	movlb	0	; () banked
 13272  0126DC  6F7A               	movwf	_lBufferX& (0+255),b
 13273                           
 13274                           ;Console.c: 236: lBufferY = 0;
 13275  0126DE  0E00               	movlw	0
 13276  0126E0  0100               	movlb	0	; () banked
 13277  0126E2  6F79               	movwf	_lBufferY& (0+255),b
 13278  0126E4                     l1000:
 13279                           
 13280                           ; BSR set to: 0
 13281                           ;Console.c: 238: }
 13282                           ;Console.c: 240: Console_ClearCursor();
 13283                           
 13284                           ; BSR set to: 0
 13285                           
 13286                           ; BSR set to: 0
 13287  0126E4  EC99  F095         	call	_Console_ClearCursor	;wreg free
 13288  0126E8  0012               	return		;funcret
 13289  0126EA                     __end_of_Console_Backspace:
 13290                           	opt stack 0
 13291                           tosu	equ	0xFFF
 13292                           tosh	equ	0xFFE
 13293                           tosl	equ	0xFFD
 13294                           pclath	equ	0xFFA
 13295                           tblptru	equ	0xFF8
 13296                           tblptrh	equ	0xFF7
 13297                           tblptrl	equ	0xFF6
 13298                           tablat	equ	0xFF5
 13299                           prodh	equ	0xFF4
 13300                           prodl	equ	0xFF3
 13301                           intcon	equ	0xFF2
 13302                           indf0	equ	0xFEF
 13303                           postinc0	equ	0xFEE
 13304                           fsr0h	equ	0xFEA
 13305                           fsr0l	equ	0xFE9
 13306                           wreg	equ	0xFE8
 13307                           postdec1	equ	0xFE5
 13308                           fsr1h	equ	0xFE2
 13309                           fsr1l	equ	0xFE1
 13310                           indf2	equ	0xFDF
 13311                           postinc2	equ	0xFDE
 13312                           postdec2	equ	0xFDD
 13313                           plusw2	equ	0xFDB
 13314                           fsr2h	equ	0xFDA
 13315                           fsr2l	equ	0xFD9
 13316                           status	equ	0xFD8
 13317                           
 13318 ;; *************** function _Console_ClearCursor *****************
 13319 ;; Defined at:
 13320 ;;		line 308 in file "Library/Console.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;		None
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;		None
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13338 ;;Total ram usage:        2 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    7
 13341 ;; This function calls:
 13342 ;;		Nothing
 13343 ;; This function is called by:
 13344 ;;		_Console_Backspace
 13345 ;;		_Console_Tab
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           	psect	text67
 13350  012B32                     __ptext67:
 13351                           	opt stack 0
 13352  012B32                     _Console_ClearCursor:
 13353                           	opt stack 20
 13354                           
 13355                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 13356                           
 13357                           ;incstack = 0
 13358  012B32  0E01               	movlw	1
 13359  012B34  6E4B               	movwf	_change,c
 13360  012B36  0100               	movlb	0	; () banked
 13361  012B38  5179               	movf	_lBufferY& (0+255),w,b
 13362  012B3A  0D14               	mullw	20
 13363  012B3C  0E0C               	movlw	low _lBuffer
 13364  012B3E  0100               	movlb	0	; () banked
 13365  012B40  6FC1               	movwf	??_Console_ClearCursor& (0+255),b
 13366  012B42  0E02               	movlw	high _lBuffer
 13367  012B44  0100               	movlb	0	; () banked
 13368  012B46  6FC2               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 13369  012B48  50F3               	movf	prodl,w,c
 13370  012B4A  0100               	movlb	0	; () banked
 13371  012B4C  27C1               	addwf	??_Console_ClearCursor& (0+255),f,b
 13372  012B4E  50F4               	movf	prodh,w,c
 13373  012B50  0100               	movlb	0	; () banked
 13374  012B52  23C2               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 13375  012B54  0100               	movlb	0	; () banked
 13376  012B56  517A               	movf	_lBufferX& (0+255),w,b
 13377  012B58  0D01               	mullw	1
 13378  012B5A  50F3               	movf	prodl,w,c
 13379  012B5C  0100               	movlb	0	; () banked
 13380  012B5E  25C1               	addwf	??_Console_ClearCursor& (0+255),w,b
 13381  012B60  6ED9               	movwf	fsr2l,c
 13382  012B62  50F4               	movf	prodh,w,c
 13383  012B64  0100               	movlb	0	; () banked
 13384  012B66  21C2               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 13385  012B68  6EDA               	movwf	fsr2h,c
 13386  012B6A  0E80               	movlw	128
 13387  012B6C  6EDF               	movwf	indf2,c
 13388                           
 13389                           ; BSR set to: 0
 13390  012B6E  0012               	return		;funcret
 13391  012B70                     __end_of_Console_ClearCursor:
 13392                           	opt stack 0
 13393                           tosu	equ	0xFFF
 13394                           tosh	equ	0xFFE
 13395                           tosl	equ	0xFFD
 13396                           pclath	equ	0xFFA
 13397                           tblptru	equ	0xFF8
 13398                           tblptrh	equ	0xFF7
 13399                           tblptrl	equ	0xFF6
 13400                           tablat	equ	0xFF5
 13401                           prodh	equ	0xFF4
 13402                           prodl	equ	0xFF3
 13403                           intcon	equ	0xFF2
 13404                           indf0	equ	0xFEF
 13405                           postinc0	equ	0xFEE
 13406                           fsr0h	equ	0xFEA
 13407                           fsr0l	equ	0xFE9
 13408                           wreg	equ	0xFE8
 13409                           postdec1	equ	0xFE5
 13410                           fsr1h	equ	0xFE2
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           plusw2	equ	0xFDB
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _ISR_Function *****************
 13421 ;; Defined at:
 13422 ;;		line 38 in file "Library/ISR.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;		None
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;		None
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  1    wreg      void 
 13429 ;; Registers used:
 13430 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;Total ram usage:       18 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    6
 13443 ;; This function calls:
 13444 ;;		_Timer0_ISR
 13445 ;; This function is called by:
 13446 ;;		Interrupt level 2
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           	psect	intcode
 13451  001408                     __pintcode:
 13452                           	opt stack 0
 13453  001408                     _ISR_Function:
 13454                           	opt stack 14
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;incstack = 0
 13458  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13459  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 13460  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 13461  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 13462  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 13463  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 13464  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 13465  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 13466  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 13467  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 13468  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 13469  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 13470  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 13471  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 13472  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 13473  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 13474  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 13475  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 13476  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 13477                           
 13478                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 13479  001452  92F2               	bcf	intcon,1,c	;volatile
 13480                           
 13481                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 13482  001454  B4F2               	btfsc	intcon,2,c	;volatile
 13483  001456  AAF2               	btfss	intcon,5,c	;volatile
 13484  001458  D002               	goto	i2l1598
 13485                           
 13486                           ;ISR.c: 68: Timer0_ISR();
 13487  00145A  EC49  F096         	call	_Timer0_ISR	;wreg free
 13488  00145E                     i2l1598:
 13489  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 13490  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 13491  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 13492  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 13493  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 13494  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 13495  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 13496  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 13497  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 13498  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 13499  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 13500  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 13501  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 13502  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 13503  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 13504  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 13505  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 13506  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 13507  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13508  0014A8  0011               	retfie		f
 13509  0014AA                     __end_of_ISR_Function:
 13510                           	opt stack 0
 13511                           tosu	equ	0xFFF
 13512                           tosh	equ	0xFFE
 13513                           tosl	equ	0xFFD
 13514                           pclatu	equ	0xFFB
 13515                           pclath	equ	0xFFA
 13516                           tblptru	equ	0xFF8
 13517                           tblptrh	equ	0xFF7
 13518                           tblptrl	equ	0xFF6
 13519                           tablat	equ	0xFF5
 13520                           prodh	equ	0xFF4
 13521                           prodl	equ	0xFF3
 13522                           intcon	equ	0xFF2
 13523                           indf0	equ	0xFEF
 13524                           postinc0	equ	0xFEE
 13525                           fsr0h	equ	0xFEA
 13526                           fsr0l	equ	0xFE9
 13527                           wreg	equ	0xFE8
 13528                           postdec1	equ	0xFE5
 13529                           fsr1h	equ	0xFE2
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           plusw2	equ	0xFDB
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _Timer0_ISR *****************
 13540 ;; Defined at:
 13541 ;;		line 94 in file "Library/Timer0.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;		None
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;		None
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      void 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13559 ;;Total ram usage:        0 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:    5
 13562 ;; This function calls:
 13563 ;;		Absolute function
 13564 ;;		i2_Motor_Step
 13565 ;;		i2_Timer0_Stop
 13566 ;; This function is called by:
 13567 ;;		_ISR_Function
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           	psect	text69
 13572  012C92                     __ptext69:
 13573                           	opt stack 0
 13574  012C92                     _Timer0_ISR:
 13575                           	opt stack 14
 13576                           
 13577                           ;Timer0.c: 96: Timer0_Stop();
 13578                           
 13579                           ;incstack = 0
 13580  012C92  EC33  F097         	call	i2_Timer0_Stop	;wreg free
 13581                           
 13582                           ;Timer0.c: 99: if (gISR != 0)
 13583  012C96  5029               	movf	_gISR,w,c
 13584  012C98  102A               	iorwf	_gISR+1,w,c
 13585  012C9A  102B               	iorwf	_gISR+2,w,c
 13586  012C9C  B4D8               	btfsc	status,2,c
 13587  012C9E  0012               	return	
 13588                           
 13589                           ;Timer0.c: 100: gISR();
 13590  012CA0  D801               	call	i2u801_48
 13591  012CA2  0012               	return	
 13592  012CA4                     i2u801_48:
 13593  012CA4  0005               	push	
 13594  012CA6  6EFA               	movwf	pclath,c
 13595  012CA8  5029               	movf	_gISR,w,c
 13596  012CAA  6EFD               	movwf	tosl,c
 13597  012CAC  502A               	movf	_gISR+1,w,c
 13598  012CAE  6EFE               	movwf	tosh,c
 13599  012CB0  502B               	movf	_gISR+2,w,c
 13600  012CB2  6EFF               	movwf	tosu,c
 13601  012CB4  50FA               	movf	pclath,w,c
 13602  012CB6  0012               	return		;indir
 13603  012CB8                     __end_of_Timer0_ISR:
 13604                           	opt stack 0
 13605                           tosu	equ	0xFFF
 13606                           tosh	equ	0xFFE
 13607                           tosl	equ	0xFFD
 13608                           pclatu	equ	0xFFB
 13609                           pclath	equ	0xFFA
 13610                           tblptru	equ	0xFF8
 13611                           tblptrh	equ	0xFF7
 13612                           tblptrl	equ	0xFF6
 13613                           tablat	equ	0xFF5
 13614                           prodh	equ	0xFF4
 13615                           prodl	equ	0xFF3
 13616                           intcon	equ	0xFF2
 13617                           indf0	equ	0xFEF
 13618                           postinc0	equ	0xFEE
 13619                           fsr0h	equ	0xFEA
 13620                           fsr0l	equ	0xFE9
 13621                           wreg	equ	0xFE8
 13622                           postdec1	equ	0xFE5
 13623                           fsr1h	equ	0xFE2
 13624                           fsr1l	equ	0xFE1
 13625                           indf2	equ	0xFDF
 13626                           postinc2	equ	0xFDE
 13627                           postdec2	equ	0xFDD
 13628                           plusw2	equ	0xFDB
 13629                           fsr2h	equ	0xFDA
 13630                           fsr2l	equ	0xFD9
 13631                           status	equ	0xFD8
 13632                           
 13633 ;; *************** function i2_Motor_Step *****************
 13634 ;; Defined at:
 13635 ;;		line 75 in file "Library/Motor.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;		None
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;		None
 13640 ;; Return value:  Size  Location     Type
 13641 ;;                  1    wreg      void 
 13642 ;; Registers used:
 13643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13651 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13652 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13653 ;;Total ram usage:        2 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:    4
 13656 ;; This function calls:
 13657 ;;		i2_MXK_Queue
 13658 ;;		i2_MXK_Release
 13659 ;;		i2_MXK_SwitchTo
 13660 ;;		i2_Port_SetPin
 13661 ;;		i2_Timer0_Restart
 13662 ;;		i2_Timer0_Stop
 13663 ;; This function is called by:
 13664 ;; This function uses a non-reentrant model
 13665 ;;
 13666                           
 13667                           	psect	text70
 13668  0116BC                     __ptext70:
 13669                           	opt stack 0
 13670  0116BC                     i2_Motor_Step:
 13671                           	opt stack 14
 13672                           
 13673                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 13674                           
 13675                           ;incstack = 0
 13676  0116BC  0100               	movlb	0	; () banked
 13677  0116BE  EE20 F004          	lfsr	2,4
 13678  0116C2  5172               	movf	_lMotor& (0+255),w,b
 13679  0116C4  26D9               	addwf	fsr2l,f,c
 13680  0116C6  5173               	movf	(_lMotor+1)& (0+255),w,b
 13681  0116C8  22DA               	addwfc	fsr2h,f,c
 13682  0116CA  50DF               	movf	indf2,w,c
 13683  0116CC  ECB8  F095         	call	i2_MXK_SwitchTo
 13684  0116D0  0900               	iorlw	0
 13685  0116D2  B4D8               	btfsc	status,2,c
 13686  0116D4  D06A               	goto	i2l1635
 13687                           
 13688                           ;Motor.c: 78: {
 13689                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 13690  0116D6  C072  FFD9         	movff	_lMotor,fsr2l
 13691  0116DA  C073  FFDA         	movff	_lMotor+1,fsr2h
 13692  0116DE  50DE               	movf	postinc2,w,c
 13693  0116E0  10DE               	iorwf	postinc2,w,c
 13694  0116E2  B4D8               	btfsc	status,2,c
 13695  0116E4  D05D               	goto	i2l1636
 13696                           
 13697                           ;Motor.c: 80: {
 13698                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 13699  0116E6  C072  FFD9         	movff	_lMotor,fsr2l
 13700  0116EA  C073  FFDA         	movff	_lMotor+1,fsr2h
 13701  0116EE  0E01               	movlw	1
 13702  0116F0  BEDB               	btfsc	plusw2,7,c
 13703  0116F2  D022               	goto	i2l1637
 13704  0116F4  0E01               	movlw	1
 13705  0116F6  50DB               	movf	plusw2,w,c
 13706  0116F8  E103               	bnz	i2u427_40
 13707  0116FA  04DE               	decf	postinc2,w,c
 13708  0116FC  A0D8               	btfss	status,0,c
 13709  0116FE  D01C               	goto	i2l1637
 13710  011700                     i2u427_40:
 13711                           
 13712                           ;Motor.c: 83: {
 13713                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 13714  011700  C072  FFD9         	movff	_lMotor,fsr2l
 13715  011704  C073  FFDA         	movff	_lMotor+1,fsr2h
 13716  011708  28DE               	incf	postinc2,w,c
 13717  01170A  E104               	bnz	i2u428_40
 13718  01170C  0E7F               	movlw	127
 13719  01170E  18DE               	xorwf	postinc2,w,c
 13720  011710  B4D8               	btfsc	status,2,c
 13721  011712  D007               	goto	i2l1638
 13722  011714                     i2u428_40:
 13723                           
 13724                           ;Motor.c: 85: lMotor->mDelta --;
 13725  011714  C072  FFD9         	movff	_lMotor,fsr2l
 13726  011718  C073  FFDA         	movff	_lMotor+1,fsr2h
 13727  01171C  06DE               	decf	postinc2,f,c
 13728  01171E  0E00               	movlw	0
 13729  011720  5ADD               	subwfb	postdec2,f,c
 13730  011722                     i2l1638:
 13731                           
 13732                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 13733  011722  0E7B               	movlw	low _PortE
 13734  011724  6E10               	movwf	i2Port_SetPin@pInput,c
 13735  011726  0E00               	movlw	high _PortE
 13736  011728  6E11               	movwf	i2Port_SetPin@pInput+1,c
 13737  01172A  0E00               	movlw	0
 13738  01172C  6E12               	movwf	i2Port_SetPin@pPin,c
 13739  01172E  0E01               	movlw	1
 13740  011730  6E13               	movwf	i2Port_SetPin@pValue,c
 13741  011732  EC0E  F08E         	call	i2_Port_SetPin	;wreg free
 13742                           
 13743                           ;Motor.c: 88: }
 13744  011736  D01B               	goto	i2l1639
 13745  011738                     i2l1637:
 13746                           
 13747                           ;Motor.c: 89: else
 13748                           ;Motor.c: 90: {
 13749                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 13750  011738  C072  FFD9         	movff	_lMotor,fsr2l
 13751  01173C  C073  FFDA         	movff	_lMotor+1,fsr2h
 13752  011740  04DE               	decf	postinc2,w,c
 13753  011742  E104               	bnz	i2u429_40
 13754  011744  0E80               	movlw	128
 13755  011746  18DE               	xorwf	postinc2,w,c
 13756  011748  B4D8               	btfsc	status,2,c
 13757  01174A  D007               	goto	i2l1640
 13758  01174C                     i2u429_40:
 13759                           
 13760                           ;Motor.c: 92: lMotor->mDelta ++;
 13761  01174C  C072  FFD9         	movff	_lMotor,fsr2l
 13762  011750  C073  FFDA         	movff	_lMotor+1,fsr2h
 13763  011754  2ADE               	incf	postinc2,f,c
 13764  011756  0E00               	movlw	0
 13765  011758  22DD               	addwfc	postdec2,f,c
 13766  01175A                     i2l1640:
 13767                           
 13768                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 13769  01175A  0E7B               	movlw	low _PortE
 13770  01175C  6E10               	movwf	i2Port_SetPin@pInput,c
 13771  01175E  0E00               	movlw	high _PortE
 13772  011760  6E11               	movwf	i2Port_SetPin@pInput+1,c
 13773  011762  0E00               	movlw	0
 13774  011764  6E12               	movwf	i2Port_SetPin@pPin,c
 13775  011766  0E00               	movlw	0
 13776  011768  6E13               	movwf	i2Port_SetPin@pValue,c
 13777  01176A  EC0E  F08E         	call	i2_Port_SetPin	;wreg free
 13778  01176E                     i2l1639:
 13779                           
 13780                           ;Motor.c: 95: }
 13781                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 13782  01176E  0E7B               	movlw	low _PortE
 13783  011770  6E10               	movwf	i2Port_SetPin@pInput,c
 13784  011772  0E00               	movlw	high _PortE
 13785  011774  6E11               	movwf	i2Port_SetPin@pInput+1,c
 13786  011776  0E01               	movlw	1
 13787  011778  6E12               	movwf	i2Port_SetPin@pPin,c
 13788  01177A  0E01               	movlw	1
 13789  01177C  6E13               	movwf	i2Port_SetPin@pValue,c
 13790  01177E  EC0E  F08E         	call	i2_Port_SetPin	;wreg free
 13791                           
 13792                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 13793  011782  0E7B               	movlw	low _PortE
 13794  011784  6E10               	movwf	i2Port_SetPin@pInput,c
 13795  011786  0E00               	movlw	high _PortE
 13796  011788  6E11               	movwf	i2Port_SetPin@pInput+1,c
 13797  01178A  0E01               	movlw	1
 13798  01178C  6E12               	movwf	i2Port_SetPin@pPin,c
 13799  01178E  0E00               	movlw	0
 13800  011790  6E13               	movwf	i2Port_SetPin@pValue,c
 13801  011792  EC0E  F08E         	call	i2_Port_SetPin	;wreg free
 13802                           
 13803                           ;Motor.c: 101: MXK_Release();
 13804  011796  EC36  F097         	call	i2_MXK_Release	;wreg free
 13805                           
 13806                           ;Motor.c: 102: Timer0_Restart();
 13807  01179A  EC19  F097         	call	i2_Timer0_Restart	;wreg free
 13808                           
 13809                           ;Motor.c: 103: return;
 13810  01179E  0012               	return	
 13811  0117A0                     i2l1636:
 13812                           
 13813                           ;Motor.c: 104: }
 13814                           ;Motor.c: 105: MXK_Release();
 13815  0117A0  EC36  F097         	call	i2_MXK_Release	;wreg free
 13816                           
 13817                           ;Motor.c: 106: Timer0_Stop();
 13818  0117A4  EC33  F097         	call	i2_Timer0_Stop	;wreg free
 13819                           
 13820                           ;Motor.c: 107: return;
 13821  0117A8  0012               	return	
 13822  0117AA                     i2l1635:
 13823                           
 13824                           ;Motor.c: 108: }
 13825                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 13826  0117AA  C06B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 13827  0117AE  C06C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 13828  0117B2  C06D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 13829  0117B6  EC0C  F097         	call	i2_MXK_Queue	;wreg free
 13830  0117BA  0012               	return		;funcret
 13831  0117BC                     __end_ofi2_Motor_Step:
 13832                           	opt stack 0
 13833                           tosu	equ	0xFFF
 13834                           tosh	equ	0xFFE
 13835                           tosl	equ	0xFFD
 13836                           pclatu	equ	0xFFB
 13837                           pclath	equ	0xFFA
 13838                           tblptru	equ	0xFF8
 13839                           tblptrh	equ	0xFF7
 13840                           tblptrl	equ	0xFF6
 13841                           tablat	equ	0xFF5
 13842                           prodh	equ	0xFF4
 13843                           prodl	equ	0xFF3
 13844                           intcon	equ	0xFF2
 13845                           indf0	equ	0xFEF
 13846                           postinc0	equ	0xFEE
 13847                           fsr0h	equ	0xFEA
 13848                           fsr0l	equ	0xFE9
 13849                           wreg	equ	0xFE8
 13850                           postdec1	equ	0xFE5
 13851                           fsr1h	equ	0xFE2
 13852                           fsr1l	equ	0xFE1
 13853                           indf2	equ	0xFDF
 13854                           postinc2	equ	0xFDE
 13855                           postdec2	equ	0xFDD
 13856                           plusw2	equ	0xFDB
 13857                           fsr2h	equ	0xFDA
 13858                           fsr2l	equ	0xFD9
 13859                           status	equ	0xFD8
 13860                           
 13861 ;; *************** function i2_Timer0_Stop *****************
 13862 ;; Defined at:
 13863 ;;		line 89 in file "Library/Timer0.c"
 13864 ;; Parameters:    Size  Location     Type
 13865 ;;		None
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;		None
 13868 ;; Return value:  Size  Location     Type
 13869 ;;                  1    wreg      void 
 13870 ;; Registers used:
 13871 ;;		None
 13872 ;; Tracked objects:
 13873 ;;		On entry : 0/0
 13874 ;;		On exit  : 0/0
 13875 ;;		Unchanged: 0/0
 13876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13881 ;;Total ram usage:        0 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; This function calls:
 13884 ;;		Nothing
 13885 ;; This function is called by:
 13886 ;;		_Timer0_ISR
 13887 ;;		i2_Motor_Step
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           	psect	text71
 13892  012E66                     __ptext71:
 13893                           	opt stack 0
 13894  012E66                     i2_Timer0_Stop:
 13895                           	opt stack 18
 13896                           
 13897                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 13898                           
 13899                           ;incstack = 0
 13900  012E66  9AF2               	bcf	intcon,5,c	;volatile
 13901                           
 13902                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 13903  012E68  94F2               	bcf	intcon,2,c	;volatile
 13904  012E6A  0012               	return		;funcret
 13905  012E6C                     __end_ofi2_Timer0_Stop:
 13906                           	opt stack 0
 13907                           tosu	equ	0xFFF
 13908                           tosh	equ	0xFFE
 13909                           tosl	equ	0xFFD
 13910                           pclatu	equ	0xFFB
 13911                           pclath	equ	0xFFA
 13912                           tblptru	equ	0xFF8
 13913                           tblptrh	equ	0xFF7
 13914                           tblptrl	equ	0xFF6
 13915                           tablat	equ	0xFF5
 13916                           prodh	equ	0xFF4
 13917                           prodl	equ	0xFF3
 13918                           intcon	equ	0xFF2
 13919                           indf0	equ	0xFEF
 13920                           postinc0	equ	0xFEE
 13921                           fsr0h	equ	0xFEA
 13922                           fsr0l	equ	0xFE9
 13923                           wreg	equ	0xFE8
 13924                           postdec1	equ	0xFE5
 13925                           fsr1h	equ	0xFE2
 13926                           fsr1l	equ	0xFE1
 13927                           indf2	equ	0xFDF
 13928                           postinc2	equ	0xFDE
 13929                           postdec2	equ	0xFDD
 13930                           plusw2	equ	0xFDB
 13931                           fsr2h	equ	0xFDA
 13932                           fsr2l	equ	0xFD9
 13933                           status	equ	0xFD8
 13934                           
 13935 ;; *************** function i2_Timer0_Restart *****************
 13936 ;; Defined at:
 13937 ;;		line 83 in file "Library/Timer0.c"
 13938 ;; Parameters:    Size  Location     Type
 13939 ;;		None
 13940 ;; Auto vars:     Size  Location     Type
 13941 ;;		None
 13942 ;; Return value:  Size  Location     Type
 13943 ;;                  1    wreg      void 
 13944 ;; Registers used:
 13945 ;;		None
 13946 ;; Tracked objects:
 13947 ;;		On entry : 0/0
 13948 ;;		On exit  : 0/0
 13949 ;;		Unchanged: 0/0
 13950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13955 ;;Total ram usage:        0 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; This function calls:
 13958 ;;		Nothing
 13959 ;; This function is called by:
 13960 ;;		i2_Motor_Step
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           	psect	text72
 13965  012E32                     __ptext72:
 13966                           	opt stack 0
 13967  012E32                     i2_Timer0_Restart:
 13968                           	opt stack 17
 13969                           
 13970                           ;Timer0.c: 85: TMR0 = COUNTER;
 13971                           
 13972                           ;incstack = 0
 13973  012E32  C02C  FFD6         	movff	_COUNTER,4054	;volatile
 13974  012E36  C02D  FFD7         	movff	_COUNTER+1,4055	;volatile
 13975                           
 13976                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 13977  012E3A  8AF2               	bsf	intcon,5,c	;volatile
 13978  012E3C  0012               	return		;funcret
 13979  012E3E                     __end_ofi2_Timer0_Restart:
 13980                           	opt stack 0
 13981                           tosu	equ	0xFFF
 13982                           tosh	equ	0xFFE
 13983                           tosl	equ	0xFFD
 13984                           pclatu	equ	0xFFB
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           indf0	equ	0xFEF
 13994                           postinc0	equ	0xFEE
 13995                           fsr0h	equ	0xFEA
 13996                           fsr0l	equ	0xFE9
 13997                           wreg	equ	0xFE8
 13998                           postdec1	equ	0xFE5
 13999                           fsr1h	equ	0xFE2
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           plusw2	equ	0xFDB
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function i2_Port_SetPin *****************
 14010 ;; Defined at:
 14011 ;;		line 247 in file "Library/Port.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  pInput          2   15[COMRAM] const PTR struct Port
 14014 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14015 ;;  pPin            1   17[COMRAM] enum E6750
 14016 ;;  pValue          1   18[COMRAM] unsigned char 
 14017 ;; Auto vars:     Size  Location     Type
 14018 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 14019 ;; Return value:  Size  Location     Type
 14020 ;;                  1    wreg      void 
 14021 ;; Registers used:
 14022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14023 ;; Tracked objects:
 14024 ;;		On entry : 0/0
 14025 ;;		On exit  : 0/0
 14026 ;;		Unchanged: 0/0
 14027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;Total ram usage:        5 bytes
 14033 ;; Hardware stack levels used:    1
 14034 ;; Hardware stack levels required when called:    3
 14035 ;; This function calls:
 14036 ;;		i2_Byte_SetBit
 14037 ;;		i2_Word_GetPair
 14038 ;; This function is called by:
 14039 ;;		i2_Motor_Step
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text73
 14044  011C1C                     __ptext73:
 14045                           	opt stack 0
 14046  011C1C                     i2_Port_SetPin:
 14047                           	opt stack 14
 14048                           
 14049                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 14050                           
 14051                           ;incstack = 0
 14052  011C1C  0E08               	movlw	8
 14053  011C1E  2410               	addwf	i2Port_SetPin@pInput,w,c
 14054  011C20  6E0D               	movwf	i2Word_GetPair@pInput,c
 14055  011C22  0E00               	movlw	0
 14056  011C24  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 14057  011C26  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 14058  011C28  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 14059  011C2C  EC1D  F096         	call	i2_Word_GetPair	;wreg free
 14060  011C30  6E14               	movwf	i2Port_SetPin@Type,c
 14061                           
 14062                           ;Port.c: 250: switch (Type)
 14063  011C32  D03B               	goto	i2l427
 14064  011C34                     
 14065                           ;Port.c: 256: pValue &= 1;
 14066  011C34  0E01               	movlw	1
 14067  011C36  1613               	andwf	i2Port_SetPin@pValue,f,c
 14068                           
 14069                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14070  011C38  EE20 F002          	lfsr	2,2
 14071  011C3C  5010               	movf	i2Port_SetPin@pInput,w,c
 14072  011C3E  26D9               	addwf	fsr2l,f,c
 14073  011C40  5011               	movf	i2Port_SetPin@pInput+1,w,c
 14074  011C42  22DA               	addwfc	fsr2h,f,c
 14075  011C44  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 14076  011C48  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 14077  011C4C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 14078  011C50  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 14079  011C54  EC47  F094         	call	i2_Byte_SetBit	;wreg free
 14080                           
 14081                           ;Port.c: 258: break;
 14082  011C58  0012               	return	
 14083  011C5A                     
 14084                           ;Port.c: 261: pValue &= 1;
 14085  011C5A  0E01               	movlw	1
 14086  011C5C  1613               	andwf	i2Port_SetPin@pValue,f,c
 14087                           
 14088                           ;Port.c: 262: pValue ^= 1;
 14089  011C5E  0E01               	movlw	1
 14090  011C60  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 14091                           
 14092                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14093  011C62  EE20 F002          	lfsr	2,2
 14094  011C66  5010               	movf	i2Port_SetPin@pInput,w,c
 14095  011C68  26D9               	addwf	fsr2l,f,c
 14096  011C6A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 14097  011C6C  22DA               	addwfc	fsr2h,f,c
 14098  011C6E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 14099  011C72  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 14100  011C76  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 14101  011C7A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 14102  011C7E  EC47  F094         	call	i2_Byte_SetBit	;wreg free
 14103                           
 14104                           ;Port.c: 264: break;
 14105  011C82  0012               	return	
 14106  011C84                     
 14107                           ;Port.c: 266: pValue &= 1;
 14108  011C84  0E01               	movlw	1
 14109  011C86  1613               	andwf	i2Port_SetPin@pValue,f,c
 14110                           
 14111                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 14112  011C88  EE20 F004          	lfsr	2,4
 14113  011C8C  5010               	movf	i2Port_SetPin@pInput,w,c
 14114  011C8E  26D9               	addwf	fsr2l,f,c
 14115  011C90  5011               	movf	i2Port_SetPin@pInput+1,w,c
 14116  011C92  22DA               	addwfc	fsr2h,f,c
 14117  011C94  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 14118  011C98  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 14119  011C9C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 14120  011CA0  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 14121  011CA4  EC47  F094         	call	i2_Byte_SetBit	;wreg free
 14122                           
 14123                           ;Port.c: 269: }
 14124                           
 14125                           ;Port.c: 268: break;
 14126  011CA8  0012               	return	
 14127  011CAA                     i2l427:
 14128  011CAA  5014               	movf	i2Port_SetPin@Type,w,c
 14129                           
 14130                           ; Switch size 1, requested type "space"
 14131                           ; Number of cases is 4, Range of values is 0 to 3
 14132                           ; switch strategies available:
 14133                           ; Name         Instructions Cycles
 14134                           ; simple_byte           13     7 (average)
 14135                           ;	Chosen strategy is simple_byte
 14136  011CAC  0A00               	xorlw	0	; case 0
 14137  011CAE  B4D8               	btfsc	status,2,c
 14138  011CB0  0012               	return	
 14139  011CB2  0A01               	xorlw	1	; case 1
 14140  011CB4  B4D8               	btfsc	status,2,c
 14141  011CB6  D7BE               	goto	i2l430
 14142  011CB8  0A03               	xorlw	3	; case 2
 14143  011CBA  B4D8               	btfsc	status,2,c
 14144  011CBC  D7CE               	goto	i2l432
 14145  011CBE  0A01               	xorlw	1	; case 3
 14146  011CC0  A4D8               	btfss	status,2,c
 14147  011CC2  0012               	return	
 14148  011CC4  D7DF               	goto	i2l433
 14149  011CC6                     __end_ofi2_Port_SetPin:
 14150                           	opt stack 0
 14151                           tosu	equ	0xFFF
 14152                           tosh	equ	0xFFE
 14153                           tosl	equ	0xFFD
 14154                           pclatu	equ	0xFFB
 14155                           pclath	equ	0xFFA
 14156                           tblptru	equ	0xFF8
 14157                           tblptrh	equ	0xFF7
 14158                           tblptrl	equ	0xFF6
 14159                           tablat	equ	0xFF5
 14160                           prodh	equ	0xFF4
 14161                           prodl	equ	0xFF3
 14162                           intcon	equ	0xFF2
 14163                           indf0	equ	0xFEF
 14164                           postinc0	equ	0xFEE
 14165                           fsr0h	equ	0xFEA
 14166                           fsr0l	equ	0xFE9
 14167                           wreg	equ	0xFE8
 14168                           postdec1	equ	0xFE5
 14169                           fsr1h	equ	0xFE2
 14170                           fsr1l	equ	0xFE1
 14171                           indf2	equ	0xFDF
 14172                           postinc2	equ	0xFDE
 14173                           postdec2	equ	0xFDD
 14174                           plusw2	equ	0xFDB
 14175                           fsr2h	equ	0xFDA
 14176                           fsr2l	equ	0xFD9
 14177                           status	equ	0xFD8
 14178                           
 14179 ;; *************** function i2_Word_GetPair *****************
 14180 ;; Defined at:
 14181 ;;		line 156 in file "Library/Types.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;  pInput          2   12[COMRAM] PTR struct Word
 14184 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14185 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 14186 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 14187 ;;		 -> PortC(10), PortF(10), NULL(0), 
 14188 ;;  pPair           1   14[COMRAM] unsigned char 
 14189 ;; Auto vars:     Size  Location     Type
 14190 ;;		None
 14191 ;; Return value:  Size  Location     Type
 14192 ;;                  1    wreg      unsigned char 
 14193 ;; Registers used:
 14194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14195 ;; Tracked objects:
 14196 ;;		On entry : 0/0
 14197 ;;		On exit  : 0/0
 14198 ;;		Unchanged: 0/0
 14199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14200 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;Total ram usage:        3 bytes
 14205 ;; Hardware stack levels used:    1
 14206 ;; Hardware stack levels required when called:    2
 14207 ;; This function calls:
 14208 ;;		i2_Byte_GetPair
 14209 ;; This function is called by:
 14210 ;;		i2_Port_SetPin
 14211 ;; This function uses a non-reentrant model
 14212 ;;
 14213                           
 14214                           	psect	text74
 14215  012C3A                     __ptext74:
 14216                           	opt stack 0
 14217  012C3A                     i2_Word_GetPair:
 14218                           	opt stack 14
 14219                           
 14220                           ;Types.c: 158: if (pPair >= 4)
 14221                           
 14222                           ;incstack = 0
 14223  012C3A  0E03               	movlw	3
 14224  012C3C  640F               	cpfsgt	i2Word_GetPair@pPair,c
 14225  012C3E  D00C               	goto	i2l781
 14226                           
 14227                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 14228  012C40  0E01               	movlw	1
 14229  012C42  240D               	addwf	i2Word_GetPair@pInput,w,c
 14230  012C44  6E0A               	movwf	i2Byte_GetPair@pInput,c
 14231  012C46  0E00               	movlw	0
 14232  012C48  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 14233  012C4A  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 14234  012C4C  500F               	movf	i2Word_GetPair@pPair,w,c
 14235  012C4E  0FFC               	addlw	252
 14236  012C50  6E0C               	movwf	i2Byte_GetPair@pPair,c
 14237  012C52  ECE8  F096         	call	i2_Byte_GetPair	;wreg free
 14238  012C56  0012               	return	
 14239  012C58                     i2l781:
 14240                           
 14241                           ;Types.c: 160: else
 14242                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 14243  012C58  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 14244  012C5C  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 14245  012C60  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 14246  012C64  ECE8  F096         	call	i2_Byte_GetPair	;wreg free
 14247  012C68  0012               	return	
 14248  012C6A                     __end_ofi2_Word_GetPair:
 14249                           	opt stack 0
 14250                           tosu	equ	0xFFF
 14251                           tosh	equ	0xFFE
 14252                           tosl	equ	0xFFD
 14253                           pclatu	equ	0xFFB
 14254                           pclath	equ	0xFFA
 14255                           tblptru	equ	0xFF8
 14256                           tblptrh	equ	0xFF7
 14257                           tblptrl	equ	0xFF6
 14258                           tablat	equ	0xFF5
 14259                           prodh	equ	0xFF4
 14260                           prodl	equ	0xFF3
 14261                           intcon	equ	0xFF2
 14262                           indf0	equ	0xFEF
 14263                           postinc0	equ	0xFEE
 14264                           fsr0h	equ	0xFEA
 14265                           fsr0l	equ	0xFE9
 14266                           wreg	equ	0xFE8
 14267                           postdec1	equ	0xFE5
 14268                           fsr1h	equ	0xFE2
 14269                           fsr1l	equ	0xFE1
 14270                           indf2	equ	0xFDF
 14271                           postinc2	equ	0xFDE
 14272                           postdec2	equ	0xFDD
 14273                           plusw2	equ	0xFDB
 14274                           fsr2h	equ	0xFDA
 14275                           fsr2l	equ	0xFD9
 14276                           status	equ	0xFD8
 14277                           
 14278 ;; *************** function i2_Byte_GetPair *****************
 14279 ;; Defined at:
 14280 ;;		line 87 in file "Library/Types.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;  pInput          2    9[COMRAM] PTR struct Byte
 14283 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 14284 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 14285 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 14286 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 14287 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 14288 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 14289 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 14290 ;;		 -> NULL(0), 
 14291 ;;  pPair           1   11[COMRAM] unsigned char 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;		None
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  1    wreg      unsigned char 
 14296 ;; Registers used:
 14297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14303 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;Total ram usage:        3 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; Hardware stack levels required when called:    1
 14310 ;; This function calls:
 14311 ;;		i2_Byte_GetZone
 14312 ;; This function is called by:
 14313 ;;		i2_Word_GetPair
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           	psect	text75
 14318  012DD0                     __ptext75:
 14319                           	opt stack 0
 14320  012DD0                     i2_Byte_GetPair:
 14321                           	opt stack 14
 14322                           
 14323                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 14324                           
 14325                           ;incstack = 0
 14326  012DD0  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 14327  012DD4  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 14328  012DD8  0E04               	movlw	4
 14329  012DDA  6E03               	movwf	i2Byte_GetZone@pMax,c
 14330  012DDC  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 14331  012DE0  0E02               	movlw	2
 14332  012DE2  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 14333  012DE4  EC64  F091         	call	i2_Byte_GetZone	;wreg free
 14334  012DE8  0012               	return	
 14335  012DEA                     __end_ofi2_Byte_GetPair:
 14336                           	opt stack 0
 14337                           tosu	equ	0xFFF
 14338                           tosh	equ	0xFFE
 14339                           tosl	equ	0xFFD
 14340                           pclatu	equ	0xFFB
 14341                           pclath	equ	0xFFA
 14342                           tblptru	equ	0xFF8
 14343                           tblptrh	equ	0xFF7
 14344                           tblptrl	equ	0xFF6
 14345                           tablat	equ	0xFF5
 14346                           prodh	equ	0xFF4
 14347                           prodl	equ	0xFF3
 14348                           intcon	equ	0xFF2
 14349                           indf0	equ	0xFEF
 14350                           postinc0	equ	0xFEE
 14351                           fsr0h	equ	0xFEA
 14352                           fsr0l	equ	0xFE9
 14353                           wreg	equ	0xFE8
 14354                           postdec1	equ	0xFE5
 14355                           fsr1h	equ	0xFE2
 14356                           fsr1l	equ	0xFE1
 14357                           indf2	equ	0xFDF
 14358                           postinc2	equ	0xFDE
 14359                           postdec2	equ	0xFDD
 14360                           plusw2	equ	0xFDB
 14361                           fsr2h	equ	0xFDA
 14362                           fsr2l	equ	0xFD9
 14363                           status	equ	0xFD8
 14364                           
 14365 ;; *************** function i2_Byte_GetZone *****************
 14366 ;; Defined at:
 14367 ;;		line 64 in file "Library/Types.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  pInput          2    0[COMRAM] PTR struct Byte
 14370 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 14371 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 14372 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 14373 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 14374 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 14375 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 14376 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 14377 ;;		 -> NULL(0), 
 14378 ;;  pMax            1    2[COMRAM] unsigned char 
 14379 ;;  pChunk          1    3[COMRAM] unsigned char 
 14380 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 14381 ;; Auto vars:     Size  Location     Type
 14382 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 14383 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 14384 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  1    wreg      unsigned char 
 14387 ;; Registers used:
 14388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14394 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14398 ;;Total ram usage:        9 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; This function calls:
 14401 ;;		Nothing
 14402 ;; This function is called by:
 14403 ;;		i2_Byte_GetPair
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           	psect	text76
 14408  0122C8                     __ptext76:
 14409                           	opt stack 0
 14410  0122C8                     i2_Byte_GetZone:
 14411                           	opt stack 14
 14412                           
 14413                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 14414                           
 14415                           ;incstack = 0
 14416  0122C8  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 14417  0122CC  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 14418  0122D0  0E00               	movlw	low (__mediumconst shr (0+16))
 14419  0122D2  6EF8               	movwf	tblptru,c
 14420  0122D4  0E0F               	movlw	(high __ramtop+-1)
 14421  0122D6  64F7               	cpfsgt	tblptrh,c
 14422  0122D8  D003               	bra	i2u306_47
 14423  0122DA  0008               	tblrd		*
 14424  0122DC  50F5               	movf	tablat,w,c
 14425  0122DE  D005               	bra	i2u306_40
 14426  0122E0                     i2u306_47:
 14427  0122E0  CFF6 FFE9          	movff	tblptrl,fsr0l
 14428  0122E4  CFF7 FFEA          	movff	tblptrh,fsr0h
 14429  0122E8  50EF               	movf	indf0,w,c
 14430  0122EA                     i2u306_40:
 14431  0122EA  6E09               	movwf	i2Byte_GetZone@Output,c
 14432                           
 14433                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 14434  0122EC  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 14435  0122EE  0D01               	mullw	1
 14436  0122F0  0EF5               	movlw	low _MASKS
 14437  0122F2  24F3               	addwf	prodl,w,c
 14438  0122F4  6EF6               	movwf	tblptrl,c
 14439  0122F6  0EFD               	movlw	high _MASKS
 14440  0122F8  20F4               	addwfc	prodh,w,c
 14441  0122FA  6EF7               	movwf	tblptrh,c
 14442  0122FC                     	if	1	;There are 3 active tblptr bytes
 14443  0122FC  6AF8               	clrf	tblptru,c
 14444  0122FE  0E00               	movlw	low (__mediumconst shr (0+16))
 14445  012300  22F8               	addwfc	tblptru,f,c
 14446  012302                     	endif
 14447  012302  0008               	tblrd		*
 14448  012304  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 14449                           
 14450                           ;Types.c: 68: UINT8 Offset = 0;
 14451  012308  0E00               	movlw	0
 14452  01230A  6E08               	movwf	i2Byte_GetZone@Offset,c
 14453                           
 14454                           ;Types.c: 70: while (pChunk >= pMax)
 14455  01230C  D003               	goto	i2l732
 14456  01230E                     
 14457                           ;Types.c: 71: {
 14458                           ;Types.c: 72: pChunk -= pMax;
 14459  01230E  5003               	movf	i2Byte_GetZone@pMax,w,c
 14460  012310  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 14461                           
 14462                           ;Types.c: 73: Offset += 1;
 14463  012312  2A08               	incf	i2Byte_GetZone@Offset,f,c
 14464  012314                     i2l732:
 14465  012314  5003               	movf	i2Byte_GetZone@pMax,w,c
 14466  012316  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 14467  012318  B0D8               	btfsc	status,0,c
 14468  01231A  D7F9               	goto	i2l733
 14469                           
 14470                           ;Types.c: 74: }
 14471                           ;Types.c: 75: pChunk *= pChunkSize;
 14472  01231C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 14473  01231E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 14474  012320  50F3               	movf	prodl,w,c
 14475  012322  6E04               	movwf	i2Byte_GetZone@pChunk,c
 14476                           
 14477                           ;Types.c: 76: pChunk += Offset;
 14478  012324  5008               	movf	i2Byte_GetZone@Offset,w,c
 14479  012326  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 14480                           
 14481                           ;Types.c: 78: Output >>= pChunk;
 14482  012328  2804               	incf	i2Byte_GetZone@pChunk,w,c
 14483  01232A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 14484  01232C  D002               	goto	i2u308_40
 14485  01232E                     i2u308_45:
 14486  01232E  90D8               	bcf	status,0,c
 14487  012330  3209               	rrcf	i2Byte_GetZone@Output,f,c
 14488  012332                     i2u308_40:
 14489  012332  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 14490  012334  D7FC               	goto	i2u308_45
 14491                           
 14492                           ;Types.c: 79: Output &= MASK;
 14493  012336  5007               	movf	i2Byte_GetZone@MASK,w,c
 14494  012338  1609               	andwf	i2Byte_GetZone@Output,f,c
 14495                           
 14496                           ;Types.c: 80: return Output;
 14497  01233A  5009               	movf	i2Byte_GetZone@Output,w,c
 14498  01233C  0012               	return	
 14499  01233E                     __end_ofi2_Byte_GetZone:
 14500                           	opt stack 0
 14501                           tosu	equ	0xFFF
 14502                           tosh	equ	0xFFE
 14503                           tosl	equ	0xFFD
 14504                           pclatu	equ	0xFFB
 14505                           pclath	equ	0xFFA
 14506                           tblptru	equ	0xFF8
 14507                           tblptrh	equ	0xFF7
 14508                           tblptrl	equ	0xFF6
 14509                           tablat	equ	0xFF5
 14510                           prodh	equ	0xFF4
 14511                           prodl	equ	0xFF3
 14512                           intcon	equ	0xFF2
 14513                           indf0	equ	0xFEF
 14514                           postinc0	equ	0xFEE
 14515                           fsr0h	equ	0xFEA
 14516                           fsr0l	equ	0xFE9
 14517                           wreg	equ	0xFE8
 14518                           postdec1	equ	0xFE5
 14519                           fsr1h	equ	0xFE2
 14520                           fsr1l	equ	0xFE1
 14521                           indf2	equ	0xFDF
 14522                           postinc2	equ	0xFDE
 14523                           postdec2	equ	0xFDD
 14524                           plusw2	equ	0xFDB
 14525                           fsr2h	equ	0xFDA
 14526                           fsr2l	equ	0xFD9
 14527                           status	equ	0xFD8
 14528                           
 14529 ;; *************** function i2_Byte_SetBit *****************
 14530 ;; Defined at:
 14531 ;;		line 32 in file "Library/Types.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  pInput          2    0[COMRAM] PTR struct Byte
 14534 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 14535 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 14536 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 14537 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 14538 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 14539 ;;		 -> NULL(0), 
 14540 ;;  pBit            1    2[COMRAM] unsigned char 
 14541 ;;  pValue          1    3[COMRAM] unsigned char 
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;		None
 14544 ;; Return value:  Size  Location     Type
 14545 ;;                  1    wreg      void 
 14546 ;; Registers used:
 14547 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14548 ;; Tracked objects:
 14549 ;;		On entry : 0/0
 14550 ;;		On exit  : 0/0
 14551 ;;		Unchanged: 0/0
 14552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14553 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14555 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14556 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14557 ;;Total ram usage:        7 bytes
 14558 ;; Hardware stack levels used:    1
 14559 ;; This function calls:
 14560 ;;		Nothing
 14561 ;; This function is called by:
 14562 ;;		i2_Port_SetPin
 14563 ;; This function uses a non-reentrant model
 14564 ;;
 14565                           
 14566                           	psect	text77
 14567  01288E                     __ptext77:
 14568                           	opt stack 0
 14569  01288E                     i2_Byte_SetBit:
 14570                           	opt stack 16
 14571                           
 14572                           ;Types.c: 34: pValue &= 1;
 14573                           
 14574                           ;incstack = 0
 14575  01288E  0E01               	movlw	1
 14576  012890  1604               	andwf	i2Byte_SetBit@pValue,f,c
 14577                           
 14578                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 14579  012892  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 14580  012896  0E01               	movlw	1
 14581  012898  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 14582  01289A  2A05               	incf	??i2_Byte_SetBit,f,c
 14583  01289C  D002               	goto	i2u358_44
 14584  01289E                     i2u358_45:
 14585  01289E  90D8               	bcf	status,0,c
 14586  0128A0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 14587  0128A2                     i2u358_44:
 14588  0128A2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 14589  0128A4  D7FC               	goto	i2u358_45
 14590  0128A6  5006               	movf	??i2_Byte_SetBit+1,w,c
 14591  0128A8  0AFF               	xorlw	255
 14592  0128AA  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 14593  0128AC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 14594  0128B0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 14595  0128B4  5007               	movf	??i2_Byte_SetBit+2,w,c
 14596  0128B6  16DF               	andwf	indf2,f,c
 14597                           
 14598                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 14599  0128B8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 14600  0128BC  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 14601  0128C0  2A05               	incf	??i2_Byte_SetBit,f,c
 14602  0128C2  D002               	goto	i2u359_44
 14603  0128C4                     i2u359_45:
 14604  0128C4  90D8               	bcf	status,0,c
 14605  0128C6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 14606  0128C8                     i2u359_44:
 14607  0128C8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 14608  0128CA  D7FC               	goto	i2u359_45
 14609  0128CC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 14610  0128D0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 14611  0128D4  5006               	movf	??i2_Byte_SetBit+1,w,c
 14612  0128D6  12DF               	iorwf	indf2,f,c
 14613  0128D8  0012               	return		;funcret
 14614  0128DA                     __end_ofi2_Byte_SetBit:
 14615                           	opt stack 0
 14616                           tosu	equ	0xFFF
 14617                           tosh	equ	0xFFE
 14618                           tosl	equ	0xFFD
 14619                           pclatu	equ	0xFFB
 14620                           pclath	equ	0xFFA
 14621                           tblptru	equ	0xFF8
 14622                           tblptrh	equ	0xFF7
 14623                           tblptrl	equ	0xFF6
 14624                           tablat	equ	0xFF5
 14625                           prodh	equ	0xFF4
 14626                           prodl	equ	0xFF3
 14627                           intcon	equ	0xFF2
 14628                           indf0	equ	0xFEF
 14629                           postinc0	equ	0xFEE
 14630                           fsr0h	equ	0xFEA
 14631                           fsr0l	equ	0xFE9
 14632                           wreg	equ	0xFE8
 14633                           postdec1	equ	0xFE5
 14634                           fsr1h	equ	0xFE2
 14635                           fsr1l	equ	0xFE1
 14636                           indf2	equ	0xFDF
 14637                           postinc2	equ	0xFDE
 14638                           postdec2	equ	0xFDD
 14639                           plusw2	equ	0xFDB
 14640                           fsr2h	equ	0xFDA
 14641                           fsr2l	equ	0xFD9
 14642                           status	equ	0xFD8
 14643                           
 14644 ;; *************** function i2_MXK_SwitchTo *****************
 14645 ;; Defined at:
 14646 ;;		line 105 in file "Library/MXK.c"
 14647 ;; Parameters:    Size  Location     Type
 14648 ;;  pModule         1    wreg     enum E6925
 14649 ;; Auto vars:     Size  Location     Type
 14650 ;;  pModule         1    7[COMRAM] enum E6925
 14651 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  1    wreg      unsigned char 
 14654 ;; Registers used:
 14655 ;;		wreg, status,2, status,0, cstack
 14656 ;; Tracked objects:
 14657 ;;		On entry : 0/0
 14658 ;;		On exit  : 0/0
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14665 ;;Total ram usage:        2 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    1
 14668 ;; This function calls:
 14669 ;;		i2_delay_us
 14670 ;; This function is called by:
 14671 ;;		i2_Motor_Step
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           	psect	text78
 14676  012B70                     __ptext78:
 14677                           	opt stack 0
 14678  012B70                     i2_MXK_SwitchTo:
 14679                           	opt stack 16
 14680                           
 14681                           ;incstack = 0
 14682                           ;i2MXK_SwitchTo@pModule stored from wreg
 14683  012B70  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 14684                           
 14685                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 14686  012B72  5086               	movf	3974,w,c	;volatile
 14687  012B74  0B0F               	andlw	15
 14688  012B76  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 14689                           
 14690                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 14691  012B78  504A               	movf	_Bus_State,w,c
 14692  012B7A  A4D8               	btfss	status,2,c
 14693  012B7C  D002               	goto	i2l1738
 14694                           
 14695                           ;MXK.c: 110: return 0;
 14696  012B7E  0E00               	movlw	0
 14697  012B80  0012               	return	
 14698  012B82                     i2l1738:
 14699                           
 14700                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 14701  012B82  0E00               	movlw	0
 14702  012B84  6E4A               	movwf	_Bus_State,c
 14703                           
 14704                           ;MXK.c: 114: if (CUR != pModule)
 14705  012B86  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 14706  012B88  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 14707  012B8A  B4D8               	btfsc	status,2,c
 14708  012B8C  D00A               	goto	i2l1740
 14709                           
 14710                           ;MXK.c: 115: {
 14711                           ;MXK.c: 116: PORTG &= ~(0xF);
 14712  012B8E  0EF0               	movlw	240
 14713  012B90  1686               	andwf	3974,f,c	;volatile
 14714                           
 14715                           ;MXK.c: 117: PORTG |= pModule;
 14716  012B92  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 14717  012B94  1286               	iorwf	3974,f,c	;volatile
 14718                           
 14719                           ;MXK.c: 120: delay_us(10);
 14720  012B96  0E00               	movlw	0
 14721  012B98  6E02               	movwf	i2delay_us@us+1,c
 14722  012B9A  0E0A               	movlw	10
 14723  012B9C  6E01               	movwf	i2delay_us@us,c
 14724  012B9E  EC1C  F095         	call	i2_delay_us	;wreg free
 14725  012BA2                     i2l1740:
 14726                           
 14727                           ;MXK.c: 121: }
 14728                           ;MXK.c: 122: return 1;
 14729  012BA2  0E01               	movlw	1
 14730  012BA4  0012               	return	
 14731  012BA6                     __end_ofi2_MXK_SwitchTo:
 14732                           	opt stack 0
 14733                           tosu	equ	0xFFF
 14734                           tosh	equ	0xFFE
 14735                           tosl	equ	0xFFD
 14736                           pclatu	equ	0xFFB
 14737                           pclath	equ	0xFFA
 14738                           tblptru	equ	0xFF8
 14739                           tblptrh	equ	0xFF7
 14740                           tblptrl	equ	0xFF6
 14741                           tablat	equ	0xFF5
 14742                           prodh	equ	0xFF4
 14743                           prodl	equ	0xFF3
 14744                           intcon	equ	0xFF2
 14745                           indf0	equ	0xFEF
 14746                           postinc0	equ	0xFEE
 14747                           fsr0h	equ	0xFEA
 14748                           fsr0l	equ	0xFE9
 14749                           wreg	equ	0xFE8
 14750                           postdec1	equ	0xFE5
 14751                           fsr1h	equ	0xFE2
 14752                           fsr1l	equ	0xFE1
 14753                           indf2	equ	0xFDF
 14754                           postinc2	equ	0xFDE
 14755                           postdec2	equ	0xFDD
 14756                           plusw2	equ	0xFDB
 14757                           fsr2h	equ	0xFDA
 14758                           fsr2l	equ	0xFD9
 14759                           status	equ	0xFD8
 14760                           
 14761 ;; *************** function i2_delay_us *****************
 14762 ;; Defined at:
 14763 ;;		line 255 in file "Library/Types.c"
 14764 ;; Parameters:    Size  Location     Type
 14765 ;;  us              2    0[COMRAM] unsigned short 
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;  delay_us        4    2[COMRAM] unsigned long 
 14768 ;; Return value:  Size  Location     Type
 14769 ;;                  1    wreg      void 
 14770 ;; Registers used:
 14771 ;;		wreg, status,2, status,0
 14772 ;; Tracked objects:
 14773 ;;		On entry : 0/0
 14774 ;;		On exit  : 0/0
 14775 ;;		Unchanged: 0/0
 14776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14777 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;Total ram usage:        6 bytes
 14782 ;; Hardware stack levels used:    1
 14783 ;; This function calls:
 14784 ;;		Nothing
 14785 ;; This function is called by:
 14786 ;;		i2_MXK_SwitchTo
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           	psect	text79
 14791  012A38                     __ptext79:
 14792                           	opt stack 0
 14793  012A38                     i2_delay_us:
 14794                           	opt stack 16
 14795                           
 14796                           ;Types.c: 256: unsigned long u;
 14797                           ;Types.c: 257: while (us--) {
 14798                           
 14799                           ;incstack = 0
 14800  012A38  D016               	goto	i2u362_40
 14801  012A3A                     i2l6794:
 14802                           
 14803                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 14804  012A3A  0E00               	movlw	0
 14805  012A3C  6E03               	movwf	i2delay_us@u,c
 14806  012A3E  0E00               	movlw	0
 14807  012A40  6E04               	movwf	i2delay_us@u+1,c
 14808  012A42  0E00               	movlw	0
 14809  012A44  6E05               	movwf	i2delay_us@u+2,c
 14810  012A46  0E00               	movlw	0
 14811  012A48  6E06               	movwf	i2delay_us@u+3,c
 14812  012A4A                     i2l6796:
 14813  012A4A  5003               	movf	i2delay_us@u,w,c
 14814  012A4C  1004               	iorwf	i2delay_us@u+1,w,c
 14815  012A4E  1005               	iorwf	i2delay_us@u+2,w,c
 14816  012A50  1006               	iorwf	i2delay_us@u+3,w,c
 14817  012A52  A4D8               	btfss	status,2,c
 14818  012A54  D008               	goto	i2u362_40
 14819  012A56  F000               	nop		; ;# 
 14820  012A58  0E01               	movlw	1
 14821  012A5A  2603               	addwf	i2delay_us@u,f,c
 14822  012A5C  0E00               	movlw	0
 14823  012A5E  2204               	addwfc	i2delay_us@u+1,f,c
 14824  012A60  2205               	addwfc	i2delay_us@u+2,f,c
 14825  012A62  2206               	addwfc	i2delay_us@u+3,f,c
 14826  012A64  D7F2               	goto	i2l6796
 14827  012A66                     i2u362_40:
 14828  012A66  0601               	decf	i2delay_us@us,f,c
 14829  012A68  A0D8               	btfss	status,0,c
 14830  012A6A  0602               	decf	i2delay_us@us+1,f,c
 14831  012A6C  2801               	incf	i2delay_us@us,w,c
 14832  012A6E  E1E5               	bnz	i2l6794
 14833  012A70  2802               	incf	i2delay_us@us+1,w,c
 14834  012A72  B4D8               	btfsc	status,2,c
 14835  012A74  0012               	return	
 14836  012A76  D7E1               	goto	i2l832
 14837  012A78                     __end_ofi2_delay_us:
 14838                           	opt stack 0
 14839                           tosu	equ	0xFFF
 14840                           tosh	equ	0xFFE
 14841                           tosl	equ	0xFFD
 14842                           pclatu	equ	0xFFB
 14843                           pclath	equ	0xFFA
 14844                           tblptru	equ	0xFF8
 14845                           tblptrh	equ	0xFF7
 14846                           tblptrl	equ	0xFF6
 14847                           tablat	equ	0xFF5
 14848                           prodh	equ	0xFF4
 14849                           prodl	equ	0xFF3
 14850                           intcon	equ	0xFF2
 14851                           indf0	equ	0xFEF
 14852                           postinc0	equ	0xFEE
 14853                           fsr0h	equ	0xFEA
 14854                           fsr0l	equ	0xFE9
 14855                           wreg	equ	0xFE8
 14856                           postdec1	equ	0xFE5
 14857                           fsr1h	equ	0xFE2
 14858                           fsr1l	equ	0xFE1
 14859                           indf2	equ	0xFDF
 14860                           postinc2	equ	0xFDE
 14861                           postdec2	equ	0xFDD
 14862                           plusw2	equ	0xFDB
 14863                           fsr2h	equ	0xFDA
 14864                           fsr2l	equ	0xFD9
 14865                           status	equ	0xFD8
 14866                           
 14867 ;; *************** function i2_MXK_Release *****************
 14868 ;; Defined at:
 14869 ;;		line 130 in file "Library/MXK.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;		None
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;		None
 14874 ;; Return value:  Size  Location     Type
 14875 ;;                  1    wreg      unsigned char 
 14876 ;; Registers used:
 14877 ;;		wreg, status,2, status,0
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14887 ;;Total ram usage:        0 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; This function calls:
 14890 ;;		Nothing
 14891 ;; This function is called by:
 14892 ;;		i2_Motor_Step
 14893 ;; This function uses a non-reentrant model
 14894 ;;
 14895                           
 14896                           	psect	text80
 14897  012E6C                     __ptext80:
 14898                           	opt stack 0
 14899  012E6C                     i2_MXK_Release:
 14900                           	opt stack 17
 14901                           
 14902                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 14903                           
 14904                           ;incstack = 0
 14905  012E6C  0E01               	movlw	1
 14906  012E6E  6E4A               	movwf	_Bus_State,c
 14907                           
 14908                           ;MXK.c: 135: return 1;
 14909                           ;	Return value of i2_MXK_Release is never used
 14910  012E70  0012               	return	
 14911  012E72                     __end_ofi2_MXK_Release:
 14912                           	opt stack 0
 14913                           tosu	equ	0xFFF
 14914                           tosh	equ	0xFFE
 14915                           tosl	equ	0xFFD
 14916                           pclatu	equ	0xFFB
 14917                           pclath	equ	0xFFA
 14918                           tblptru	equ	0xFF8
 14919                           tblptrh	equ	0xFF7
 14920                           tblptrl	equ	0xFF6
 14921                           tablat	equ	0xFF5
 14922                           prodh	equ	0xFF4
 14923                           prodl	equ	0xFF3
 14924                           intcon	equ	0xFF2
 14925                           indf0	equ	0xFEF
 14926                           postinc0	equ	0xFEE
 14927                           fsr0h	equ	0xFEA
 14928                           fsr0l	equ	0xFE9
 14929                           wreg	equ	0xFE8
 14930                           postdec1	equ	0xFE5
 14931                           fsr1h	equ	0xFE2
 14932                           fsr1l	equ	0xFE1
 14933                           indf2	equ	0xFDF
 14934                           postinc2	equ	0xFDE
 14935                           postdec2	equ	0xFDD
 14936                           plusw2	equ	0xFDB
 14937                           fsr2h	equ	0xFDA
 14938                           fsr2l	equ	0xFD9
 14939                           status	equ	0xFD8
 14940                           
 14941 ;; *************** function i2_MXK_Queue *****************
 14942 ;; Defined at:
 14943 ;;		line 144 in file "Library/MXK.c"
 14944 ;; Parameters:    Size  Location     Type
 14945 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 14946 ;;		 -> Absolute function(1), Motor_Step(1), 
 14947 ;; Auto vars:     Size  Location     Type
 14948 ;;		None
 14949 ;; Return value:  Size  Location     Type
 14950 ;;                  1    wreg      void 
 14951 ;; Registers used:
 14952 ;;		wreg, status,2, status,0
 14953 ;; Tracked objects:
 14954 ;;		On entry : 0/0
 14955 ;;		On exit  : 0/0
 14956 ;;		Unchanged: 0/0
 14957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14958 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14961 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14962 ;;Total ram usage:        3 bytes
 14963 ;; Hardware stack levels used:    1
 14964 ;; This function calls:
 14965 ;;		Nothing
 14966 ;; This function is called by:
 14967 ;;		i2_Motor_Step
 14968 ;; This function uses a non-reentrant model
 14969 ;;
 14970                           
 14971                           	psect	text81
 14972  012E18                     __ptext81:
 14973                           	opt stack 0
 14974  012E18                     i2_MXK_Queue:
 14975                           	opt stack 17
 14976                           
 14977                           ;MXK.c: 146: lQueue = pCallback;
 14978                           
 14979                           ;incstack = 0
 14980  012E18  C001  F068         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 14981  012E1C  C002  F069         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 14982  012E20  C003  F06A         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 14983  012E24  0012               	return		;funcret
 14984  012E26                     __end_ofi2_MXK_Queue:
 14985                           	opt stack 0
 14986                           tosu	equ	0xFFF
 14987                           tosh	equ	0xFFE
 14988                           tosl	equ	0xFFD
 14989                           pclatu	equ	0xFFB
 14990                           pclath	equ	0xFFA
 14991                           tblptru	equ	0xFF8
 14992                           tblptrh	equ	0xFF7
 14993                           tblptrl	equ	0xFF6
 14994                           tablat	equ	0xFF5
 14995                           prodh	equ	0xFF4
 14996                           prodl	equ	0xFF3
 14997                           intcon	equ	0xFF2
 14998                           indf0	equ	0xFEF
 14999                           postinc0	equ	0xFEE
 15000                           fsr0h	equ	0xFEA
 15001                           fsr0l	equ	0xFE9
 15002                           wreg	equ	0xFE8
 15003                           postdec1	equ	0xFE5
 15004                           fsr1h	equ	0xFE2
 15005                           fsr1l	equ	0xFE1
 15006                           indf2	equ	0xFDF
 15007                           postinc2	equ	0xFDE
 15008                           postdec2	equ	0xFDD
 15009                           plusw2	equ	0xFDB
 15010                           fsr2h	equ	0xFDA
 15011                           fsr2l	equ	0xFD9
 15012                           status	equ	0xFD8
 15013                           tosu	equ	0xFFF
 15014                           tosh	equ	0xFFE
 15015                           tosl	equ	0xFFD
 15016                           pclatu	equ	0xFFB
 15017                           pclath	equ	0xFFA
 15018                           tblptru	equ	0xFF8
 15019                           tblptrh	equ	0xFF7
 15020                           tblptrl	equ	0xFF6
 15021                           tablat	equ	0xFF5
 15022                           prodh	equ	0xFF4
 15023                           prodl	equ	0xFF3
 15024                           intcon	equ	0xFF2
 15025                           indf0	equ	0xFEF
 15026                           postinc0	equ	0xFEE
 15027                           fsr0h	equ	0xFEA
 15028                           fsr0l	equ	0xFE9
 15029                           wreg	equ	0xFE8
 15030                           postdec1	equ	0xFE5
 15031                           fsr1h	equ	0xFE2
 15032                           fsr1l	equ	0xFE1
 15033                           indf2	equ	0xFDF
 15034                           postinc2	equ	0xFDE
 15035                           postdec2	equ	0xFDD
 15036                           plusw2	equ	0xFDB
 15037                           fsr2h	equ	0xFDA
 15038                           fsr2l	equ	0xFD9
 15039                           status	equ	0xFD8
 15040                           
 15041                           	psect	text82
 15042  000000                     __ptext82:
 15043                           	opt stack 0
 15044                           tosu	equ	0xFFF
 15045                           tosh	equ	0xFFE
 15046                           tosl	equ	0xFFD
 15047                           pclatu	equ	0xFFB
 15048                           pclath	equ	0xFFA
 15049                           tblptru	equ	0xFF8
 15050                           tblptrh	equ	0xFF7
 15051                           tblptrl	equ	0xFF6
 15052                           tablat	equ	0xFF5
 15053                           prodh	equ	0xFF4
 15054                           prodl	equ	0xFF3
 15055                           intcon	equ	0xFF2
 15056                           indf0	equ	0xFEF
 15057                           postinc0	equ	0xFEE
 15058                           fsr0h	equ	0xFEA
 15059                           fsr0l	equ	0xFE9
 15060                           wreg	equ	0xFE8
 15061                           postdec1	equ	0xFE5
 15062                           fsr1h	equ	0xFE2
 15063                           fsr1l	equ	0xFE1
 15064                           indf2	equ	0xFDF
 15065                           postinc2	equ	0xFDE
 15066                           postdec2	equ	0xFDD
 15067                           plusw2	equ	0xFDB
 15068                           fsr2h	equ	0xFDA
 15069                           fsr2l	equ	0xFD9
 15070                           status	equ	0xFD8
 15071                           
 15072                           	psect	rparam
 15073  0000                     tosu	equ	0xFFF
 15074                           tosh	equ	0xFFE
 15075                           tosl	equ	0xFFD
 15076                           pclatu	equ	0xFFB
 15077                           pclath	equ	0xFFA
 15078                           tblptru	equ	0xFF8
 15079                           tblptrh	equ	0xFF7
 15080                           tblptrl	equ	0xFF6
 15081                           tablat	equ	0xFF5
 15082                           prodh	equ	0xFF4
 15083                           prodl	equ	0xFF3
 15084                           intcon	equ	0xFF2
 15085                           indf0	equ	0xFEF
 15086                           postinc0	equ	0xFEE
 15087                           fsr0h	equ	0xFEA
 15088                           fsr0l	equ	0xFE9
 15089                           wreg	equ	0xFE8
 15090                           postdec1	equ	0xFE5
 15091                           fsr1h	equ	0xFE2
 15092                           fsr1l	equ	0xFE1
 15093                           indf2	equ	0xFDF
 15094                           postinc2	equ	0xFDE
 15095                           postdec2	equ	0xFDD
 15096                           plusw2	equ	0xFDB
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101                           	psect	temp
 15102  000051                     btemp:
 15103                           	opt stack 0
 15104  000051                     	ds	1
 15105  0000                     int$flags	set	btemp
 15106  0000                     wtemp6	set	btemp+1
 15107                           tosu	equ	0xFFF
 15108                           tosh	equ	0xFFE
 15109                           tosl	equ	0xFFD
 15110                           pclatu	equ	0xFFB
 15111                           pclath	equ	0xFFA
 15112                           tblptru	equ	0xFF8
 15113                           tblptrh	equ	0xFF7
 15114                           tblptrl	equ	0xFF6
 15115                           tablat	equ	0xFF5
 15116                           prodh	equ	0xFF4
 15117                           prodl	equ	0xFF3
 15118                           intcon	equ	0xFF2
 15119                           indf0	equ	0xFEF
 15120                           postinc0	equ	0xFEE
 15121                           fsr0h	equ	0xFEA
 15122                           fsr0l	equ	0xFE9
 15123                           wreg	equ	0xFE8
 15124                           postdec1	equ	0xFE5
 15125                           fsr1h	equ	0xFE2
 15126                           fsr1l	equ	0xFE1
 15127                           indf2	equ	0xFDF
 15128                           postinc2	equ	0xFDE
 15129                           postdec2	equ	0xFDD
 15130                           plusw2	equ	0xFDB
 15131                           fsr2h	equ	0xFDA
 15132                           fsr2l	equ	0xFD9
 15133                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    720
    Data        25
    BSS         673
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     57     160
    BANK1           256      1     256
    BANK2           256     12      12
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_PrintString@pInput	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK1[70]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK0[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK0[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_LCD_Init
    _Port_SetQuadType->_Port_CheckQuadType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _Port_SetPinType->_PortProperty_Valid
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Console_PrintString->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _Port_SetType->_Port_CheckPortType

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  686146
                _Console_PrintString
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      1     1      0
                                              0 BANK2      4     0      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                              6 BANK2      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                              0 BANK2      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      3     0      3
                                              0 BANK1      1     1      0
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _Console_PrintString                                  2     0      2    2158
                                             20 BANK0      2     0      2
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (2) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (3) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (5) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (4) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_PrintString
     _Console_PrintChar
       _Console_Backspace
         _Console_ClearCursor
       _Console_FormFeed
       _Console_IncrementCursor
         _Console_FormFeed
         _Console_NewLine
       _Console_NewLine
       _Console_ResetCursor
       _Console_Tab
         _Console_ClearCursor
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         ___awdiv
   _LCD_Init
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      C       C       9        4.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      1     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     39      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1FC      12        0.0%
DATA                 0      0     328       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Aug  7 06:22:16 2017

                   i2_Timer0_Stop 2E66                  SPI_Init@pChannel 00F2  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 16BC  
                               _A 004C                                 _a 004D  
                               _i 0036                                 _j 0035  
                               _l 004F                                 _u 0034  
                               _w 0050                                l90 13EA  
                              l85 12E6                                l87 1354  
                              l89 13C0                      ___awdiv@sign 00C6  
                   _HMI_DIPSwitch 000000                  i2_Timer0_Restart 2E32  
                             l120 20CE                               l121 20E4  
                             l122 20FA                               l220 266E  
                             l117 2110                               l221 2632  
                             l118 20B8                               l230 2810  
                             l222 267E                               l223 2650  
                     ?_LED_Toggle 0001                               l234 2958  
                             l235 2928                               l227 282C  
                             l403 10FA                               l412 0DDA  
                             l228 27F4                               l340 1D80  
                             l404 109A                               l237 2940  
                             l421 0D6E                               l413 0C70  
                             l341 1D8E                               l405 112A  
                   ??_Console_Tab 00C9                               l430 17DE  
                             l414 0DF6                               l350 1E88  
                             l342 1D9C                               l510 0A36  
                             l406 10B2                               l415 0C96  
                             l351 1E18                               l343 1DAA  
                             l511 0B46                               l407 10CA  
                             l432 1808                               l600 000C  
                             l344 1DB8                               l512 0A58  
                             l408 10E2                               l433 1838  
                             l417 0D02                               l601 01A0  
                             l353 1E26                               l337 1DE2  
                             l345 1DC6                               l610 0228  
                             l602 003E                               l354 1E34  
                             l346 1DD4                               l338 1D72  
                             l370 1D12                               l427 1862  
                             l611 0276                               l603 01B2  
                             l355 1E42                               l363 1D3C  
                             l371 1D20                               l531 0774  
                             l612 02C4                               l604 00EC  
                             l356 1E50                               l372 1D2E  
                             l364 1CCC                               l532 0798  
                             l516 0AA0                               l357 1E5E  
                             l509 0B2A                               l614 03A6  
                             l358 1E6C                               l366 1CDA  
                             l526 07B8                               l615 039E  
                             l607 0312                               l359 1E7A  
                             l367 1CE8                               l519 0AE8  
                             l616 03B8                               l608 01DA  
                             l368 1CF6                               l528 07D6  
                             l617 03A2                               l609 0330  
                             l369 1D04                               l529 0754  
                             l393 273E                               l483 0896  
                             l732 2052                               l476 096E  
                             l733 2046                               l389 24F2  
                             l397 291C                               l477 07E0  
                             l726 1AEE                               l654 2C74  
                             l478 098A                               l486 0902  
                             l727 1AE2                               l655 2C6C  
                             l479 082A                               l824 24FA  
                             l832 279E                               l673 2BFC  
                             l657 2C70                               l681 2434  
                             l819 22C4                               l684 244A  
                             l781 2B20                               l597 001A  
                             l598 0002                               l678 2470  
                             l686 245A                               l599 002A  
                             l679 2424                               l776 299A  
                             l990 21DE                               l983 1FD6  
                             l992 21EE                               l984 1F5C  
                             l985 1FD2                               l997 26A4  
                             l999 26C8                               _PR2 000FCB  
                             _val 0070                      _Word_GetPair 2AF4  
                             prod 000FF3               MXK_SwitchTo@pModule 00C8  
                             tosl 000FFD                               wreg 000FE8  
                    Console_Tab@c 00D0                      Console_Tab@i 00CF  
                    Console_Tab@t 00CE                        i2_delay_us 2A38  
            Port_Set@TypeRequired 00E3                 Console_FormFeed@x 00C3  
               Console_FormFeed@y 00C4             Port_SetPinType@Output 00EB  
                 Port_SetPin@Type 00D4                   Port_SetPin@pPin 00D2  
                   ?_Byte_GetPair 00CA                   __end_of_LED_Set 283E  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 1C1C  
                    _Word_SetPair 296A                              l1000 26E4  
                            l1010 18D2                              l1004 2596  
                   ?_Byte_GetZone 00C1                              l1005 25C4  
                            l1040 0E24                              l1009 18DE  
                            l1041 0E2A                              l1042 0E30  
                            l1043 0E36                              l1036 0F7C  
                            l1044 0E3C                              l1045 0E42  
                            l1037 0E1E                              l1070 2BA8  
                            l1047 0EE6                              l1069 2BC2  
                            l2161 19D4                              l2162 19E2  
                            l2154 195E                              l2163 19F6  
                            l2155 1974                              l2157 199E  
                            l2341 1A98                              l2158 1992  
                            l2342 1AAA                              l1640 1642  
                            l2337 1A3E                              l2338 1A2E  
                            l1635 16AA                              l1732 2AC2  
                            l1740 2A34                              l1636 16A0  
                            l1637 1620                              l1734 2AF0  
                            l1638 1602                              l1743 2DCC  
                            l1639 165E                              l1738 2A0C  
                            l1835 14A2                              l1836 14C2  
                            l1980 218E                              l1982 21A6  
                            l1975 214E                              l1977 2166  
                            l9406 14A2                              l9280 21E4  
                            l9274 21D4                              l9372 24FA  
                            l9380 2538                              l9444 279E  
                            l9374 250C                              l9446 27B0  
           Port_SetPinType@pInput 00E7                              STR_1 FFF3  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
                            _LATG 000F8F                              u6020 2230  
                            u6030 2236                              u6110 2538  
             __end_of_GetPortPORT 1EB8                              u6210 2592  
                            u6050 1A44                              u6220 25BC  
                            u6160 150E                              u6145 145A  
                            u6260 19A4                              u6325 044C  
                            u6190 27D6                              u6335 0464  
                            u6345 047C                              _PIR1 000F9E  
                            u5810 2082                              _PIR2 000FA1  
                            u6355 049E                              _PIR3 000FA4  
                            u6365 061E                              u5830 225E  
                            u6630 2796                              u8038 2A8C  
                            u5815 207C                              u8039 2AA2  
                            u6375 069C                              u5920 29E4  
                            u5904 1B5C               __end_of_GetPortTRIS 1D6C  
                            u5905 1B56                              u6385 06DE  
                            u6395 0720                              u6660 1130  
                            u5925 29DE                              u5790 201C  
                            u6750 15E0                              u5935 2DF8  
                            u5864 25E4                              u5936 2DFA  
                            u6840 12E4                              u6760 15F4  
                            u5865 25DE                              u5874 2616  
                            u6770 1634                              u5875 2610  
                            u5797 2012                              u5894 1B2A  
                            u5895 1B24                              u6880 13F8  
                            _SPI1 01AA                              _SPI2 01B5  
                            _TMR0 000FD6                              _gISR 0029  
     __end_of_Console_PrintString 2BDA                SPI_MaxSpeed@pInput 00D0  
                   ?_Byte_SetByte 00C1                     ?_Byte_SetPair 00CC  
                 __end_of_SPI_DCS 2C0A                              _main 212E  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 00CC  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00C1                              btemp 0051  
                            _zero 004E                     ??_Byte_SetBit 00C5  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                              start 14AA  
              __size_of_LCD_Write 0022                     __CFG_IESO$OFF 000000  
                 ?_SPI_DisableISR 00C1                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FFE5              Set_Rotation@rotation 00C7  
    __size_of_Console_ClearCursor 003E                  __end_of_LCD_Fill 279C  
                __end_of_LCD_Init 1436                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 268E           GetPortProperties@pInput 00C3  
                           l10100 1090                             l10062 277A  
                           l10058 276C                             l10280 1354  
                           l10290 13F8                             _I2C1T 003F  
                           _I2C2T 00A3                             ?_main 0001  
                 __end_of___awdiv 1A00                   _Event_DIPSwitch 000000  
                 __end_of___lldiv 1ABC                   ___awdiv@divisor 00C3  
                           _INDEX 0038                             _MASKS FDF5  
                           i2l430 1C34                             i2l432 1C5A  
                           i2l433 1C84                             i2l427 1CAA  
                           i2l732 2314                             i2l733 230E  
                           i2l832 2A3A                             i2l781 2C58  
                 ___awdiv@counter 00C5                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 00D7  
                  __CFG_FCMEN$OFF 000000                             _PortA 01E8  
                           _PortB 01DE                             _PortC 008F  
                           _PortD 0085                             _PortE 007B  
                           _PortF 0099                             _PortG 01D4  
         __end_of_Port_SetPinType 0E18                   _ADC_Initialised 003A  
                  ??_Byte_GetPair 00CD                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00D6                    ??_Byte_GetZone 00C6  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 1942  
                __end_of_MXK_Init 12C4              i2Byte_GetPair@pInput 000A  
                __end_of_SPI_Init 041E                  __end_of_SPI_Send 248E  
           __end_ofi2_MXK_Release 2E72                             pclath 000FFA  
                           tablat 000FF5                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 00C4                    ??_Byte_SetPair 00D0  
                  ??_Byte_SetQuad 00D0                             plusw2 000FDB  
                  ??_Byte_SetZone 00C7                             status 000FD8  
                           wtemp6 0052                   _Configure_GPIOs 23B2  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 2D1E               __size_of_LED_Toggle 0048  
     __size_of_Port_CheckPairType 006A                   __initialization 1EB8  
                    __end_of_main 21C2                      SPI_Send9@dat 0032  
             __end_of_Byte_SetBit 262C                  __end_of_InitList FDD5  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 2DFC  
     __size_of_Port_CheckPortType 0048                            ??_main 00FA  
                   __activetblptr 000003                 Port_SetPin@pInput 00D0  
               __end_of_LCD_Reset 288E                 Port_SetPin@pValue 00D3  
                       ??_LED_Set 00D6                 _MXK_InitDIPSwitch 000000  
               GetPortPORT@pInput 00C3            Port_CheckPairType@Pin1 00EB  
          Port_CheckPairType@Pin2 00EC                 __end_of_LCD_Write 2CDA  
                     _GetPortPORT 1E12                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 1CC6        __end_of_PortProperty_Valid 22C8  
                __end_of_Port_Set 07D8                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0066                 Word_GetPair@pPair 00CF  
                       ??_SPI_DCS 00C3                            _ADRESH 000FC4  
                          _ADRESL 000FC3            Port_SetQuadType@Output 00F7  
                          _ANCON0 000FC1                  ___awdiv@dividend 00C1  
                _Console_FormFeed 21C2            Port_SetQuadType@pInput 0200  
                          i2l1640 175A                            i2l1635 17AA  
                          i2l1740 2BA2                            i2l1636 17A0  
                          i2l1637 1738                            i2l1638 1722  
                  __CFG_WDTEN$OFF 000000                            i2l1639 176E  
                          i2l1738 2B82                            i2l1598 145E  
                          i2l6794 2A3A                            i2l6796 2A4A  
          __end_of_LCD_Word_Write 2D3C                    _Timer0_Restart 2E26  
                  i2_MXK_SwitchTo 2B70                        _Reset_High 2D5A  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00D8  
                __end_of_delay_ms 2562                      LED_Init@pLED 00EE  
                __end_of_delay_us 27EE                     ??_Timer2_Init 00D2  
                   ??_Timer0_Stop 00C1                        _Timer0_ISR 2C92  
        __size_of_Console_NewLine 00A0                 Timer2_Init@DIVIDE 00DB  
                  __CFG_XINST$OFF 000000                        _Motor_Step 1596  
            _Event_HMI_LeftButton 000000                         ??___awdiv 00C5  
                  __CFG_STVREN$ON 000000                            _change 004B  
                          _lMotor 0072                         ??___lldiv 00C9  
                          _lQueue 0068                        _TestButton 01CA  
            _Event_HMI_DownButton 000000          __end_of_Port_SetQuadType 0A2E  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002E  
               GetPortTRIS@pInput 00C3                __size_of_Reset_Low 001E  
                          clear_0 1F20                            clear_1 1F32  
                          clear_2 1F3E                            clear_3 1F4A  
                ___awdiv@quotient 00C7                        Port_Init@i 020B  
               __end_of_MXK_Queue 2E18        __end_ofHMI_SetButton@F7211 FE02  
                     _Console_Tab 1880               LCD_Word_Write@value 00C6  
                    __pdataCOMRAM 0046                __size_of_Port_Init 0192  
                   ??_Port_GetPin 00C4          Port_CheckPortType@Output 01FF  
                 ??i2_Port_SetPin 0014                      __mediumconst FD22  
     __end_ofTimer2_Init@PRESCALE FE05          Port_CheckPortType@pDrive 00F9  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
        Port_CheckPortType@pInput 00F7                     ??_Port_SetPin 00D4  
           Console_MakeField@Fill 012A                  ?_Port_SetPinType 00E7  
                  i2_Word_GetPair 2C3A           __end_of_Configure_GPIOs 2422  
       Console_PrintString@pInput 00D5            __end_of_Timer0_Restart 2E32  
                   Set_Rotation@m 00C6                      ?_MXK_Release 0001  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 2BA6  
                    i2delay_us@us 0001                   ?_LCD_Word_Write 00C6  
                      __accesstop 0060           __end_of__initialization 1F50  
                       ?_LCD_Fill 00CA                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00F3                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 2E3E                 ??_Set_Addr_Window 00C9  
                   ___rparam_used 000001                       _Byte_SetBit 25C8  
                   __end_of_MASKS FDFE                    _PortA_Property FFF1  
                       LCD_Fill@i 00CC                         LCD_Fill@j 00CD  
                       LCD_Init@i 00F8                    __pcstackCOMRAM 0001  
                  _PortB_Property FFEF               __size_ofi2_delay_us 0040  
                    __pidataBANK0 2E5A                      __pidataBANK1 2E49  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 2D96  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FDD5              __end_of_Byte_GetZone 2096  
                  _PortC_Property FFED                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 1596               __end_of_Timer0_Stop 2E66  
                       ?_SPI_Init 00EE                         ?_SPI_Send 00C1  
               Port_SetType@pType 0202              __end_of_Byte_SetByte 2E0A  
            __end_of_Byte_SetPair 2CFC                    _HMI_LeftSwitch 000000  
                  _PortD_Property FFEB              __end_of_Byte_SetQuad 2D1E  
                    ??_LED_Toggle 00D9              __end_of_Byte_SetZone 1B72  
                  _HMI_DownSwitch 000000                     SPI_Send@pData 00C3  
                  _PortE_Property FFE9            __end_ofi2_Word_GetPair 2C6A  
                  _PortF_Property FFE7           Port_CheckQuadType@Pair1 00F4  
         Port_CheckQuadType@Pair2 00F5          MXK_BlockSwitchTo@pModule 00C8  
               _Console_Backspace 268E                   ?_Timer0_Restart 0001  
             _Console_ClearCursor 2B32                    _PortG_Property FFE5  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
             __end_of_Port_GetPin 29F6           Port_CheckQuadType@pQuad 00F2  
                ??_SPI_DisableISR 00C3                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 2D5A  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00CC  
                      ??_LCD_Init 00F6               __end_of_Port_SetPin 1880  
          __end_of_PortA_Property FFF3                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00C1                        ??_LED_Init 00EE  
              Byte_SetByte@pValue 00C3                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00EE            __end_of_PortB_Property FFF1  
               __end_of_Port_Init 1144                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 00E9                __end_of_LED_Toggle 296A  
             ??_Console_Backspace 00C3                 Set_Addr_Window@xe 00C7  
               Set_Addr_Window@ye 00C8                 Set_Addr_Window@xs 00C9  
               Set_Addr_Window@ys 00C6                Byte_SetPair@pInput 00CC  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00CF  
          __end_of_PortC_Property FFEF                Word_GetPair@pInput 00CD  
                  ??_Set_Rotation 00C6                         ?_Port_Set 00D0  
               Port_GetPin@Output 00C6      __size_of_Console_ResetCursor 001E  
            ?_Console_ClearCursor 0001            __end_of_PortD_Property FFED  
                         _ADC_AN0 00B4                           _ADC_AN1 00AF  
                         _ADC_AN2 00AA                           _ADC_AN3 01F2  
                      ??_MXK_Init 00FA                 Port_GetPin@pInput 00C1  
               ??_Console_NewLine 00C1                        ??_SPI_Init 00F4  
                      ??_SPI_Send 00C4            __end_of_PortE_Property FFEB  
             Console_Render@F6956 01F7                           _COUNTER 002C  
                         _LED_Set 27EE           _Console_IncrementCursor 2562  
          __end_of_PortF_Property FFE9                       _gBackcolour 0030  
                       _I2C1_Done 0127                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0124                         _I2C1_More 0121  
                       _I2C2_More 011E                         ?_delay_ms 00C1  
       __end_of_Console_Backspace 26EA                         ?_delay_us 00C1  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FFE7  
                         _SPI_DCS 2BDA              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001              i2Byte_GetZone@Offset 0008  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
               Event_TestButton@j 0076                        ??_Mode_Set 00C1  
                  ??_Timer2_Clear 00C1                           _Font5x7 FE05  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
            SPI_DisableISR@pInput 00C1                   Byte_SetBit@pBit 00C3  
            Port_TogglePin@pInput 00D5             __end_ofi2_Byte_SetBit 28DA  
                         __Hparam 0000                       _Timer2_Init 1436  
                         __Lparam 0000                       _Timer0_Stop 2E60  
                         OutSeg@a 003B   __end_ofPortProperty_Valid@F6830 FDF5  
                   LCD_Write@mode 00C4      __size_of_Console_PrintString 0034  
                      ??_Port_Set 00D3                 _Console_PrintChar 0E18  
                   ?_Port_SetType 0200                           _gCursor 0046  
                         ___awdiv 1942             ??_Console_ClearCursor 00C1  
                         _lBuffer 020C                           ___lldiv 1A00  
        __end_of_Console_FormFeed 224C                ?_Console_PrintChar 0001  
                         __pcinit 1EB8                           __ramtop 1000  
                         __ptext0 212E                           __ptext1 1144  
                         __ptext2 07D8                           __ptext3 0FB2  
                         __ptext4 0A2E                           __ptext5 28DA  
                         __ptext6 26EA                           __ptext7 248E  
                         __ptext8 041E                           __ptext9 2DFC  
                       _T0CONbits 000FD5                 i2MXK_SwitchTo@CUR 0007  
                       _T2CONbits 000FCA                     LED_Set@pValue 00D5  
             __size_of_Reset_High 001E                      ?_GetPortPORT 00C1  
                    ?_GetPortTRIS 00C1               ??_Console_PrintChar 00D1  
                     _Port_GetPin 29B0                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00BD               LCD_DrawRectangle@p4 00B9  
                    ??i2_delay_us 0003                        ??_delay_ms 00C3  
                      ??_delay_us 00C3                         _DIPSwitch 01C0  
             __size_of_Timer0_ISR 0026                       _Port_SetPin 17BC  
                       _LCD_Reset 283E               __size_of_Motor_Step 0126  
                       _LCD_Write 2CB8              __size_of_MXK_Dequeue 003E  
                      delay_ms@ms 00C1              end_of_initialization 1F50  
                      delay_us@us 00C1           Console_PrintChar@pInput 00D4  
            __size_of_MXK_Release 001C        __end_of_Port_CheckPairType 24F8  
              _PortProperty_Valid 224C                Byte_SetQuad@pInput 00CC  
              Byte_SetQuad@pValue 00CF             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 00C5             __size_of_Byte_GetZone 009C  
                 ___lldiv@counter 00CD         __end_of_Console_PrintChar 0FB2  
                  ??_Port_SetType 0203        __end_of_Port_CheckQuadType 2744  
                  Port_Init@pPort 0208                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00D0  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 2922  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 2A78  
             _Event_HMI_DIPSwitch 000000                 ?_Port_SetQuadType 0200  
                     _gForecolour 00FE         ??_Console_IncrementCursor 00C5  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 00F7                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 00C7                         _MXK_Queue 2E0A  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00C3  
      __size_of_Console_Backspace 005C                   _Set_Addr_Window 1B72  
                  SPI_Init@pClock 00EE                  ??_LCD_Word_Write 00C8  
                  Port_Set@pInput 00D0                    SPI_Init@pInput 00F4  
            ??_PortProperty_Valid 00D4                    Port_Set@pValue 00D2  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 212E  
                      ?_LCD_Write 00C4                      _Byte_GetPair 2D78  
              HMI_SetButton@F7211 FDFE                      _Byte_GetZone 1FFA  
                   ?_MXK_SwitchTo 0001                    _Port_TogglePin 2C0A  
                _Event_TestButton 000000              Port_SetPinType@Props 00EC  
         __size_ofi2_Byte_GetPair 001A                      _Byte_SetByte 2DFC  
                    _Byte_SetPair 2CDA                      _Byte_SetQuad 2CFC  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 1ABC  
            Port_SetPinType@pType 00EA                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 00C1                     ?_SPI_MaxSpeed 00D0  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062             __end_ofi2_Timer0_Stop 2E6C  
              ??i2_Timer0_Restart 0001                     ?i2_Motor_Step 0001  
                   __pidataCOMRAM 2E3E             _Event_HMI_RightButton 000000  
                       _Bus_State 004A               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA                 __size_of_MXK_Init 0180  
            __end_of_Timer2_Clear 2E5A                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 00CD  
                ??_Timer0_Restart 00C1                Port_SetType@Output 0205  
             start_initialization 1EB8                        ?_MXK_Queue 00C1  
        PortProperty_Valid@Errors 00D6                  ??i2_MXK_SwitchTo 0007  
              Port_SetType@pInput 0200             __end_ofi2_Port_SetPin 1CC6  
          __end_of_Port_TogglePin 2C3A                     ?_Word_SetPair 00D0  
               Byte_SetBit@pInput 00C1                    ??_MXK_SwitchTo 00C7  
               Byte_SetBit@pValue 00C4               _Console_ResetCursor 2D96  
     PortProperty_Valid@pPinDrive 00D2              MXK_BlockSwitchTo@CUR 00C7  
        PortProperty_Valid@pInput 00D0                     i2_MXK_Release 2E6C  
                  SPI_Send@pInput 00C1                      ??_Reset_High 00D5  
        __size_of_Port_SetPinType 01C0                    ??_SPI_MaxSpeed 00D2  
           Port_SetQuadType@pQuad 0202             Port_SetQuadType@pType 0203  
                 _Console_NewLine 1F5A                      _HMI_UpSwitch 000000  
                       _Reset_Low 2D3C                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 000000                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 019A                         _gCharSize 00FA  
                Timer2_Init@INDEX 0078                         OutSeg@cur 003D  
                  ??i2_Motor_Step 0015                      ??_Motor_Step 00D5  
              Byte_SetZone@Offset 00CA              ?_Console_ResetCursor 0001  
                       _Port_Init 0FB2                       __pdataBANK0 00FA  
                     __pdataBANK1 01F7                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00C4                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00C1                Byte_SetZone@pValue 00C6  
                   Mode_Set@pMode 00C1           __end_of_Set_Addr_Window 1C1C  
        Port_CheckQuadType@Output 00F6                         _gLineSize 01FB  
        Port_CheckQuadType@pDrive 00F3                    ??_Word_GetPair 00D0  
        Port_CheckQuadType@pInput 00F0                       __pbssBIGRAM 020C  
                        ?_LED_Set 00D5                       __pbssCOMRAM 0029  
              __end_of_Reset_High 2D78                     __pcstackBANK0 00C1  
                   __pcstackBANK1 01FF                     __pcstackBANK2 0200  
             _Console_PrintString 2BA6                    ??_Word_SetPair 00D4  
              __end_of_Timer0_ISR 2CB8              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 00DA              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 0C58                          ?_SPI_DCS 00C1  
                 ?_Port_TogglePin 00D5                       ??_LCD_Write 00C5  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Step 16BC  
           Timer2_Init@pFrequency 00CE                    ?i2_MXK_Release 0001  
        Port_CheckPairType@Output 00ED          Port_CheckPairType@pDrive 00EA  
        Port_CheckPairType@pInput 00E7                _MXK_InitTestButton 000000  
                      ?_Reset_Low 0001                      ?_Timer2_Init 00CE  
                    ?_Timer0_Stop 0001                     _lStepFunction 006B  
               Byte_SetPair@pPair 00CE              ?_Console_PrintString 00D5  
                       __pintcode 1408                     __pmediumconst FD22  
           ??_Console_ResetCursor 00C1                          ?___awdiv 00C1  
                       _pShiftVal 006E                          ?___lldiv 00C1  
                      ?_Port_Init 0206                 ?_Console_FormFeed 0001  
               _GetPortProperties 1D6C       __end_ofTimer0_Init@PRESCALE FDE5  
              ??_Console_FormFeed 00C1                ?_GetPortProperties 00C1  
           __size_of_Set_Rotation 0098                     ??i2_MXK_Queue 0004  
                     ??_MXK_Queue 00C4                      ?_Port_GetPin 00C1  
            __size_of_Console_Tab 00C2                      ?_Port_SetPin 00D0  
                 _HMI_RightSwitch 000000               ??_GetPortProperties 00C3  
         __end_of_Console_NewLine 1FFA                Byte_GetPair@pInput 00CA  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 2DD0                          _LCD_Fill 2744  
                        _LCD_Init 12C4                          _HMIBoard 0170  
                  i2_Byte_GetZone 22C8                          _LED_Init 262C  
                       delay_ms@u 00C3                         delay_us@u 00C3  
              MXK_Queue@pCallback 00C1                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 2B70  
        __size_of_Configure_GPIOs 0070                 Byte_SetQuad@pQuad 00CE  
                        i2u306_40 22EA                          i2u306_47 22E0  
                        i2u308_40 2332                          i2u308_45 232E  
           ??_Console_PrintString 00D7                          _PIR1bits 000F9E  
                        i2u362_40 2A66                          i2u427_40 1700  
                        i2u428_40 1714                          i2u429_40 174C  
                        _PIR3bits 000FA4                          i2u358_44 28A2  
                        i2u358_45 289E                          i2u359_44 28C8  
                        i2u359_45 28C4                          i2u801_48 2CA4  
            __size_of_Byte_SetBit 0064                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 00EB                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 1E12                          _SSP2STAT 000F6D  
                    _Set_Rotation 2096             __size_of_Timer2_Clear 0008  
            __end_of_MXK_SwitchTo 2A38                _Port_CheckPairType 248E  
                        _MXK_Init 1144                   MXK_SwitchTo@CUR 00C7  
                        _SPI_Init 0000                          _SPI_Send 2422  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 00C6              Timer2_Init@pCPUClock 00D7  
            __end_of_SPI_MaxSpeed 23B2               Port_SetPinType@pPin 00E9  
              _Port_CheckQuadType 26EA                     _MXK_DIPSwitch 000000  
             ?_Port_CheckPairType 00E7                     ??_MXK_Dequeue 00D7  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 28DA           PortProperty_Valid@F6830 FDE5  
            __end_ofi2_Motor_Step 17BC                   ??i2_MXK_Release 0001  
                       copy_data0 1ECC                         copy_data1 1EEC  
                       copy_data2 1F0C                     ??_MXK_Release 00C1  
          __end_ofi2_Byte_GetPair 2DEA         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 00F0  
          __end_ofi2_Byte_GetZone 233E               __end_ofi2_MXK_Queue 2E26  
             ?_Port_CheckPortType 00F7                          _InitList FD23  
            _Motor_Step$intlevel0 159C                          _Mode_Set 2DEA  
                    _ISR_Function 1408                      _Timer2_Clear 2E52  
            __end_of_Word_GetPair 2B32                          _lCBuffer 0100  
            ??_Port_CheckPairType 00EB                       ??_Reset_Low 00D5  
                        __Hrparam 0000                          __Lrparam 0000  
                 Timer2_Init@RDIV 00D3                    LCD_Write@value 00C5  
                        _Port_Set 041E                      OutSeg@segset 003C  
                       rand@screw 0039              __end_of_Word_SetPair 29B0  
                     ??_Port_Init 0209              ??_Port_CheckQuadType 00F4  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 2AB6              ??_Port_CheckPortType 00FA  
                        _lBufferX 007A                          _lBufferY 0079  
             Timer2_Init@PRESCALE FE02                _Event_HMI_UpButton 000000  
                 LCD_Fill@pColour 00CA                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0074  
          Byte_GetZone@pChunkSize 00C5            Byte_SetZone@pChunkSize 00C5  
           __size_of_Port_SetType 022A             i2MXK_SwitchTo@pModule 0008  
                        _delay_ms 24F8                          _delay_us 279C  
                        _clearall 003E                   Port_GetPin@pPin 00C3  
                        __ptext10 1CC6                          __ptext11 1D6C  
                        __ptext20 2DB4                          __ptext12 1E12  
                        __ptext21 2E0A                          __ptext13 262C  
                        __ptext30 2422                          __ptext22 2AB6  
                        __ptext14 27EE                          __ptext31 2DEA  
                        __ptext23 279C                          __ptext15 2A78  
                        __ptext40 0C58                          __ptext32 23B2  
                        __ptext24 12C4                          __ptext16 1596  
                        __ptext41 296A                          __ptext33 233E  
                        __ptext25 2096                          __ptext17 2E60  
                        __ptext50 2922                          __ptext42 2CDA  
                        __ptext34 0000                          __ptext26 2744  
                        __ptext18 2E26                          __ptext51 2C0A  
                        __ptext43 224C                          __ptext35 1436  
                        __ptext27 1B72                          __ptext19 29F6  
                        __ptext60 1880                          __ptext52 17BC  
                        __ptext44 2CFC                          __ptext36 1A00  
                        __ptext28 2D1E                          __ptext61 1942  
                        __ptext53 2AF4                          __ptext45 1ABC  
                        __ptext37 2E52                          __ptext29 2CB8  
                        __ptext70 16BC                          __ptext62 2562  
                        __ptext54 2D78                          __ptext46 283E  
                        __ptext38 2C6A                          __ptext71 2E66  
                        __ptext63 1F5A                          __ptext55 1FFA  
                        __ptext47 24F8                          __ptext39 2BDA  
             ??_MXK_BlockSwitchTo 00C7                          __ptext80 2E6C  
                        __ptext72 2E32                          __ptext64 21C2  
                        __ptext56 25C8                          __ptext48 2D3C  
                        __ptext81 2E18                          __ptext73 1C1C  
                        __ptext65 2D96                          __ptext57 29B0  
                        __ptext49 2D5A                          __ptext82 0000  
                        __ptext74 2C3A                          __ptext66 268E  
                        __ptext58 2BA6                          __ptext75 2DD0  
                        __ptext67 2B32                          __ptext59 0E18  
                        __ptext76 22C8                          __ptext77 288E  
                        __ptext69 2C92                          __ptext78 2B70  
                        __ptext79 2A38                      _SSP1CON1bits 000FC6  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003               __end_of_MXK_Dequeue 2AB6  
                   __size_of_main 0094                 Byte_GetPair@pPair 00CC  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
             __end_of_MXK_Release 2DD0                    _MXK_TestButton 000000  
                   i2_Byte_SetBit 288E               i2Word_GetPair@pPair 000F  
       __end_of_MXK_BlockSwitchTo 2AF4          ?_Console_IncrementCursor 0001  
            __size_of_Timer2_Init 0160                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0A2E  
                    Port_Set@Type 00E7        __size_of_GetPortProperties 00A6  
               ??_Configure_GPIOs 00F6                      _SSP1STATbits 000FC7  
                  Timer0_Init@DIV 0064                    Timer0_Init@PRE 0037  
                    _SSP2STATbits 000F6D                        _LED_Toggle 2922  
          PortProperty_Valid@Pair 00E6                  ??_Port_TogglePin 00D8  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 00D3                  Byte_SetZone@MASK 00CB  
                     i2_MXK_Queue 2E18                    Timer2_Init@DIV 0060  
                  Timer2_Init@PRE 0077                  Byte_SetZone@pMax 00C3  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                ___lldiv@dividend 00C1           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
                  _SPI_DisableISR 2C6A                   Port_Init@pInput 0206  
          __size_ofi2_Port_SetPin 00AA             __size_of_SPI_MaxSpeed 0074  
                   SPI_DCS@pInput 00C1             __size_ofi2_Motor_Step 0100  
                ___lldiv@quotient 00C9                     ??_GetPortPORT 00C3  
                   ??_GetPortTRIS 00C3                Word_SetPair@pInput 00D0  
              Word_SetPair@pValue 00D3                       _MXK_Dequeue 2A78  
                  LED_Toggle@pLED 00D9                  _Port_SetQuadType 07D8  
                     _MXK_Release 2DB4         __size_of_Console_FormFeed 008A  
                    _MXK_SwitchTo 29F6             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 00C8                 Word_SetPair@pPair 00D2  
                 _Port_SetPinType 0C58           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00C9                Byte_GetZone@pChunk 00C4  
     __end_of_Console_ResetCursor 2DB4                Byte_GetZone@pInput 00C1  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 25C8  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 2C92  
                    _SPI_MaxSpeed 233E                Port_Set@TypeActual 00E5  
