

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Aug 24 09:31:16 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1,inline
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1
   151                           	psect	text129,global,reloc=2,class=CODE,delta=1,inline
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   170                           	psect	text148,global,reloc=2,class=CODE,delta=1
   171                           	psect	text149,global,reloc=2,class=CODE,delta=1
   172                           	psect	text150,global,reloc=2,class=CODE,delta=1
   173                           	psect	text151,global,reloc=2,class=CODE,delta=1
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	text153,global,reloc=2,class=CODE,delta=1
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1
   177                           	psect	text155,global,reloc=2,class=CODE,delta=1,inline
   178                           	psect	text156,global,reloc=2,class=CODE,delta=1
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	text158,global,reloc=2,class=CODE,delta=1
   181                           	psect	text159,global,reloc=2,class=CODE,delta=1
   182                           	psect	text160,global,reloc=2,class=CODE,delta=1
   183                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   186                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   187  0000                     
   188                           ; Version 1.42
   189                           ; Generated 13/04/2017 GMT
   190                           ; 
   191                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   192                           ; All rights reserved.
   193                           ; 
   194                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   195                           ; 
   196                           ; Redistribution and use in source and binary forms, with or without modification, are
   197                           ; permitted provided that the following conditions are met:
   198                           ; 
   199                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   200                           ;        conditions and the following disclaimer.
   201                           ; 
   202                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   203                           ;        of conditions and the following disclaimer in the documentation and/or other
   204                           ;        materials provided with the distribution.
   205                           ; 
   206                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   207                           ;        software without specific prior written permission.
   208                           ; 
   209                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   210                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   211                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   212                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   213                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   214                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   215                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   216                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   217                           ; 
   218                           ; 
   219                           ; Code-generator required, PIC18F67J50 Definitions
   220                           ; 
   221                           ; SFR Addresses
   222  0000                     
   223                           	psect	idataCOMRAM
   224  0169B4                     __pidataCOMRAM:
   225                           	opt stack 0
   226                           
   227                           ;initializer for _gCursor
   228  0169B4  0006               	dw	6
   229  0169B6  0006               	dw	6
   230                           
   231                           ;initializer for _Bus_State
   232  0169B8  01                 	db	1
   233                           
   234                           ;initializer for _A
   235  0169B9  41                 	db	65
   236                           
   237                           ;initializer for _a
   238  0169BA  61                 	db	97
   239                           
   240                           ;initializer for _zero
   241  0169BB  30                 	db	48
   242                           
   243                           ;initializer for _l
   244  0169BC  80                 	db	128
   245                           
   246                           ;initializer for _w
   247  0169BD  80                 	db	128
   248                           
   249                           	psect	idataBANK0
   250  0169EC                     __pidataBANK0:
   251                           	opt stack 0
   252                           
   253                           ;initializer for _Direction
   254  0169EC  00C8               	dw	200
   255                           
   256                           ;initializer for _gForecolour
   257  0169EE  FFFF               	dw	65535
   258                           
   259                           ;initializer for _lockedMode
   260  0169F0  01                 	db	1
   261                           
   262                           ;initializer for _change
   263  0169F1  01                 	db	1
   264                           
   265                           	psect	idataBANK1
   266  016984                     __pidataBANK1:
   267                           	opt stack 0
   268                           
   269                           ;initializer for Console_Render@F6956
   270  016984  0006               	dw	6
   271  016986  0006               	dw	6
   272                           
   273                           ;initializer for _gLineSize
   274  016988  0080               	dw	128
   275  01698A  0007               	dw	7
   276                           
   277                           ;initializer for _gCharSize
   278  01698C  0005               	dw	5
   279  01698E  0007               	dw	7
   280                           
   281                           	psect	mediumconst
   282  00FC56                     __pmediumconst:
   283                           	opt stack 0
   284  00FC56  00                 	db	0
   285  00FC57                     _InitList:
   286                           	opt stack 0
   287  00FC57  1100               	dw	4352
   288  00FC59  0080               	dw	128
   289  00FC5B  012C               	dw	300
   290  00FC5D  B100               	dw	45312
   291  00FC5F  0002               	dw	2
   292  00FC61  0035               	dw	53
   293  00FC63  0036               	dw	54
   294  00FC65  B200               	dw	45568
   295  00FC67  0002               	dw	2
   296  00FC69  0035               	dw	53
   297  00FC6B  0036               	dw	54
   298  00FC6D  B300               	dw	45824
   299  00FC6F  0002               	dw	2
   300  00FC71  0035               	dw	53
   301  00FC73  0036               	dw	54
   302  00FC75  0002               	dw	2
   303  00FC77  0035               	dw	53
   304  00FC79  0036               	dw	54
   305  00FC7B  B400               	dw	46080
   306  00FC7D  0000               	dw	0
   307  00FC7F  C000               	dw	49152
   308  00FC81  00A2               	dw	162
   309  00FC83  0002               	dw	2
   310  00FC85  0084               	dw	132
   311  00FC87  C100               	dw	49408
   312  00FC89  00C5               	dw	197
   313  00FC8B  C200               	dw	49664
   314  00FC8D  000D               	dw	13
   315  00FC8F  0000               	dw	0
   316  00FC91  C300               	dw	49920
   317  00FC93  008D               	dw	141
   318  00FC95  002A               	dw	42
   319  00FC97  C400               	dw	50176
   320  00FC99  008D               	dw	141
   321  00FC9B  00EE               	dw	238
   322  00FC9D  C500               	dw	50432
   323  00FC9F  000A               	dw	10
   324  00FCA1  3600               	dw	13824
   325  00FCA3  00C8               	dw	200
   326  00FCA5  E000               	dw	57344
   327  00FCA7  0012               	dw	18
   328  00FCA9  001C               	dw	28
   329  00FCAB  0010               	dw	16
   330  00FCAD  0018               	dw	24
   331  00FCAF  0033               	dw	51
   332  00FCB1  002C               	dw	44
   333  00FCB3  0025               	dw	37
   334  00FCB5  0028               	dw	40
   335  00FCB7  0028               	dw	40
   336  00FCB9  0027               	dw	39
   337  00FCBB  002F               	dw	47
   338  00FCBD  003C               	dw	60
   339  00FCBF  0000               	dw	0
   340  00FCC1  0003               	dw	3
   341  00FCC3  0003               	dw	3
   342  00FCC5  0010               	dw	16
   343  00FCC7  0080               	dw	128
   344  00FCC9  0078               	dw	120
   345  00FCCB  E100               	dw	57600
   346  00FCCD  0012               	dw	18
   347  00FCCF  001C               	dw	28
   348  00FCD1  0010               	dw	16
   349  00FCD3  0018               	dw	24
   350  00FCD5  002D               	dw	45
   351  00FCD7  0028               	dw	40
   352  00FCD9  0023               	dw	35
   353  00FCDB  0028               	dw	40
   354  00FCDD  0028               	dw	40
   355  00FCDF  0026               	dw	38
   356  00FCE1  002F               	dw	47
   357  00FCE3  003B               	dw	59
   358  00FCE5  0000               	dw	0
   359  00FCE7  0003               	dw	3
   360  00FCE9  0003               	dw	3
   361  00FCEB  0010               	dw	16
   362  00FCED  3A00               	dw	14848
   363  00FCEF  0005               	dw	5
   364  00FCF1  2A00               	dw	10752
   365  00FCF3  0000               	dw	0
   366  00FCF5  0002               	dw	2
   367  00FCF7  0000               	dw	0
   368  00FCF9  0081               	dw	129
   369  00FCFB  2B00               	dw	11008
   370  00FCFD  0000               	dw	0
   371  00FCFF  0003               	dw	3
   372  00FD01  0000               	dw	0
   373  00FD03  00A2               	dw	162
   374  00FD05  2900               	dw	10496
   375  00FD07  2C00               	dw	11264
   376  00FD09                     __end_of_InitList:
   377                           	opt stack 0
   378  00FD09                     Timer0_Init@PRESCALE:
   379                           	opt stack 0
   380  00FD09  0002               	dw	2
   381  00FD0B  0004               	dw	4
   382  00FD0D  0008               	dw	8
   383  00FD0F  0010               	dw	16
   384  00FD11  0020               	dw	32
   385  00FD13  0040               	dw	64
   386  00FD15  0080               	dw	128
   387  00FD17  0100               	dw	256
   388  00FD19                     __end_ofTimer0_Init@PRESCALE:
   389                           	opt stack 0
   390  00FD19                     PortProperty_Valid@F6830:
   391                           	opt stack 0
   392  00FD19  00                 	db	0
   393  00FD1A  01                 	db	1
   394  00FD1B  02                 	db	2
   395  00FD1C  00                 	db	0
   396  00FD1D  01                 	db	1
   397  00FD1E  00                 	db	0
   398  00FD1F  01                 	db	1
   399  00FD20  00                 	db	0
   400  00FD21  02                 	db	2
   401  00FD22  02                 	db	2
   402  00FD23  00                 	db	0
   403  00FD24  00                 	db	0
   404  00FD25  03                 	db	3
   405  00FD26  03                 	db	3
   406  00FD27  03                 	db	3
   407  00FD28  00                 	db	0
   408  00FD29                     __end_ofPortProperty_Valid@F6830:
   409                           	opt stack 0
   410  00FD29                     _dpowers:
   411                           	opt stack 0
   412  00FD29  0001               	dw	1
   413  00FD2B  000A               	dw	10
   414  00FD2D  0064               	dw	100
   415  00FD2F  03E8               	dw	1000
   416  00FD31  2710               	dw	10000
   417  00FD33                     __end_of_dpowers:
   418                           	opt stack 0
   419  00FD33                     _MASKS:
   420                           	opt stack 0
   421  00FD33  00                 	db	0
   422  00FD34  01                 	db	1
   423  00FD35  03                 	db	3
   424  00FD36  07                 	db	7
   425  00FD37  0F                 	db	15
   426  00FD38  1F                 	db	31
   427  00FD39  3F                 	db	63
   428  00FD3A  7F                 	db	127
   429  00FD3B  FF                 	db	255
   430  00FD3C                     __end_of_MASKS:
   431                           	opt stack 0
   432  00FD3C                     HMI_SetButton@F7213:
   433                           	opt stack 0
   434  00FD3C  00                 	db	0
   435  00FD3D  02                 	db	2
   436  00FD3E  01                 	db	1
   437  00FD3F  03                 	db	3
   438  00FD40                     __end_ofHMI_SetButton@F7213:
   439                           	opt stack 0
   440  00FD40                     Timer2_Init@PRESCALE:
   441                           	opt stack 0
   442  00FD40  01                 	db	1
   443  00FD41  04                 	db	4
   444  00FD42  10                 	db	16
   445  00FD43                     __end_ofTimer2_Init@PRESCALE:
   446                           	opt stack 0
   447  00FD43                     _Font5x7:
   448                           	opt stack 0
   449  00FD43  00                 	db	0
   450  00FD44  00                 	db	0
   451  00FD45  00                 	db	0
   452  00FD46  00                 	db	0
   453  00FD47  00                 	db	0
   454  00FD48  00                 	db	0
   455  00FD49  00                 	db	0
   456  00FD4A  5F                 	db	95
   457  00FD4B  00                 	db	0
   458  00FD4C  00                 	db	0
   459  00FD4D  00                 	db	0
   460  00FD4E  07                 	db	7
   461  00FD4F  00                 	db	0
   462  00FD50  07                 	db	7
   463  00FD51  00                 	db	0
   464  00FD52  14                 	db	20
   465  00FD53  7F                 	db	127
   466  00FD54  14                 	db	20
   467  00FD55  7F                 	db	127
   468  00FD56  14                 	db	20
   469  00FD57  24                 	db	36
   470  00FD58  2A                 	db	42
   471  00FD59  7F                 	db	127
   472  00FD5A  2A                 	db	42
   473  00FD5B  12                 	db	18
   474  00FD5C  23                 	db	35
   475  00FD5D  13                 	db	19
   476  00FD5E  08                 	db	8
   477  00FD5F  64                 	db	100
   478  00FD60  62                 	db	98
   479  00FD61  36                 	db	54
   480  00FD62  49                 	db	73
   481  00FD63  55                 	db	85
   482  00FD64  22                 	db	34
   483  00FD65  50                 	db	80
   484  00FD66  00                 	db	0
   485  00FD67  05                 	db	5
   486  00FD68  03                 	db	3
   487  00FD69  00                 	db	0
   488  00FD6A  00                 	db	0
   489  00FD6B  00                 	db	0
   490  00FD6C  1C                 	db	28
   491  00FD6D  22                 	db	34
   492  00FD6E  41                 	db	65
   493  00FD6F  00                 	db	0
   494  00FD70  00                 	db	0
   495  00FD71  41                 	db	65
   496  00FD72  22                 	db	34
   497  00FD73  1C                 	db	28
   498  00FD74  00                 	db	0
   499  00FD75  08                 	db	8
   500  00FD76  2A                 	db	42
   501  00FD77  1C                 	db	28
   502  00FD78  2A                 	db	42
   503  00FD79  08                 	db	8
   504  00FD7A  08                 	db	8
   505  00FD7B  08                 	db	8
   506  00FD7C  3E                 	db	62
   507  00FD7D  08                 	db	8
   508  00FD7E  08                 	db	8
   509  00FD7F  00                 	db	0
   510  00FD80  50                 	db	80
   511  00FD81  30                 	db	48
   512  00FD82  00                 	db	0
   513  00FD83  00                 	db	0
   514  00FD84  08                 	db	8
   515  00FD85  08                 	db	8
   516  00FD86  08                 	db	8
   517  00FD87  08                 	db	8
   518  00FD88  08                 	db	8
   519  00FD89  00                 	db	0
   520  00FD8A  60                 	db	96
   521  00FD8B  60                 	db	96
   522  00FD8C  00                 	db	0
   523  00FD8D  00                 	db	0
   524  00FD8E  20                 	db	32
   525  00FD8F  10                 	db	16
   526  00FD90  08                 	db	8
   527  00FD91  04                 	db	4
   528  00FD92  02                 	db	2
   529  00FD93  3E                 	db	62
   530  00FD94  51                 	db	81
   531  00FD95  49                 	db	73
   532  00FD96  45                 	db	69
   533  00FD97  3E                 	db	62
   534  00FD98  00                 	db	0
   535  00FD99  42                 	db	66
   536  00FD9A  7F                 	db	127
   537  00FD9B  40                 	db	64
   538  00FD9C  00                 	db	0
   539  00FD9D  42                 	db	66
   540  00FD9E  61                 	db	97
   541  00FD9F  51                 	db	81
   542  00FDA0  49                 	db	73
   543  00FDA1  46                 	db	70
   544  00FDA2  21                 	db	33
   545  00FDA3  41                 	db	65
   546  00FDA4  45                 	db	69
   547  00FDA5  4B                 	db	75
   548  00FDA6  31                 	db	49
   549  00FDA7  18                 	db	24
   550  00FDA8  14                 	db	20
   551  00FDA9  12                 	db	18
   552  00FDAA  7F                 	db	127
   553  00FDAB  10                 	db	16
   554  00FDAC  27                 	db	39
   555  00FDAD  45                 	db	69
   556  00FDAE  45                 	db	69
   557  00FDAF  45                 	db	69
   558  00FDB0  39                 	db	57
   559  00FDB1  3C                 	db	60
   560  00FDB2  4A                 	db	74
   561  00FDB3  49                 	db	73
   562  00FDB4  49                 	db	73
   563  00FDB5  30                 	db	48
   564  00FDB6  01                 	db	1
   565  00FDB7  71                 	db	113
   566  00FDB8  09                 	db	9
   567  00FDB9  05                 	db	5
   568  00FDBA  03                 	db	3
   569  00FDBB  36                 	db	54
   570  00FDBC  49                 	db	73
   571  00FDBD  49                 	db	73
   572  00FDBE  49                 	db	73
   573  00FDBF  36                 	db	54
   574  00FDC0  06                 	db	6
   575  00FDC1  49                 	db	73
   576  00FDC2  49                 	db	73
   577  00FDC3  29                 	db	41
   578  00FDC4  1E                 	db	30
   579  00FDC5  00                 	db	0
   580  00FDC6  36                 	db	54
   581  00FDC7  36                 	db	54
   582  00FDC8  00                 	db	0
   583  00FDC9  00                 	db	0
   584  00FDCA  00                 	db	0
   585  00FDCB  56                 	db	86
   586  00FDCC  36                 	db	54
   587  00FDCD  00                 	db	0
   588  00FDCE  00                 	db	0
   589  00FDCF  00                 	db	0
   590  00FDD0  08                 	db	8
   591  00FDD1  14                 	db	20
   592  00FDD2  22                 	db	34
   593  00FDD3  41                 	db	65
   594  00FDD4  14                 	db	20
   595  00FDD5  14                 	db	20
   596  00FDD6  14                 	db	20
   597  00FDD7  14                 	db	20
   598  00FDD8  14                 	db	20
   599  00FDD9  41                 	db	65
   600  00FDDA  22                 	db	34
   601  00FDDB  14                 	db	20
   602  00FDDC  08                 	db	8
   603  00FDDD  00                 	db	0
   604  00FDDE  02                 	db	2
   605  00FDDF  01                 	db	1
   606  00FDE0  51                 	db	81
   607  00FDE1  09                 	db	9
   608  00FDE2  06                 	db	6
   609  00FDE3  32                 	db	50
   610  00FDE4  49                 	db	73
   611  00FDE5  79                 	db	121
   612  00FDE6  41                 	db	65
   613  00FDE7  3E                 	db	62
   614  00FDE8  7E                 	db	126
   615  00FDE9  11                 	db	17
   616  00FDEA  11                 	db	17
   617  00FDEB  11                 	db	17
   618  00FDEC  7E                 	db	126
   619  00FDED  7F                 	db	127
   620  00FDEE  49                 	db	73
   621  00FDEF  49                 	db	73
   622  00FDF0  49                 	db	73
   623  00FDF1  36                 	db	54
   624  00FDF2  3E                 	db	62
   625  00FDF3  41                 	db	65
   626  00FDF4  41                 	db	65
   627  00FDF5  41                 	db	65
   628  00FDF6  22                 	db	34
   629  00FDF7  7F                 	db	127
   630  00FDF8  41                 	db	65
   631  00FDF9  41                 	db	65
   632  00FDFA  22                 	db	34
   633  00FDFB  1C                 	db	28
   634  00FDFC  7F                 	db	127
   635  00FDFD  49                 	db	73
   636  00FDFE  49                 	db	73
   637  00FDFF  49                 	db	73
   638  00FE00  41                 	db	65
   639  00FE01  7F                 	db	127
   640  00FE02  09                 	db	9
   641  00FE03  09                 	db	9
   642  00FE04  01                 	db	1
   643  00FE05  01                 	db	1
   644  00FE06  3E                 	db	62
   645  00FE07  41                 	db	65
   646  00FE08  41                 	db	65
   647  00FE09  51                 	db	81
   648  00FE0A  32                 	db	50
   649  00FE0B  7F                 	db	127
   650  00FE0C  08                 	db	8
   651  00FE0D  08                 	db	8
   652  00FE0E  08                 	db	8
   653  00FE0F  7F                 	db	127
   654  00FE10  00                 	db	0
   655  00FE11  41                 	db	65
   656  00FE12  7F                 	db	127
   657  00FE13  41                 	db	65
   658  00FE14  00                 	db	0
   659  00FE15  20                 	db	32
   660  00FE16  40                 	db	64
   661  00FE17  41                 	db	65
   662  00FE18  3F                 	db	63
   663  00FE19  01                 	db	1
   664  00FE1A  7F                 	db	127
   665  00FE1B  08                 	db	8
   666  00FE1C  14                 	db	20
   667  00FE1D  22                 	db	34
   668  00FE1E  41                 	db	65
   669  00FE1F  7F                 	db	127
   670  00FE20  40                 	db	64
   671  00FE21  40                 	db	64
   672  00FE22  40                 	db	64
   673  00FE23  40                 	db	64
   674  00FE24  7F                 	db	127
   675  00FE25  02                 	db	2
   676  00FE26  04                 	db	4
   677  00FE27  02                 	db	2
   678  00FE28  7F                 	db	127
   679  00FE29  7F                 	db	127
   680  00FE2A  04                 	db	4
   681  00FE2B  08                 	db	8
   682  00FE2C  10                 	db	16
   683  00FE2D  7F                 	db	127
   684  00FE2E  3E                 	db	62
   685  00FE2F  41                 	db	65
   686  00FE30  41                 	db	65
   687  00FE31  41                 	db	65
   688  00FE32  3E                 	db	62
   689  00FE33  7F                 	db	127
   690  00FE34  09                 	db	9
   691  00FE35  09                 	db	9
   692  00FE36  09                 	db	9
   693  00FE37  06                 	db	6
   694  00FE38  3E                 	db	62
   695  00FE39  41                 	db	65
   696  00FE3A  51                 	db	81
   697  00FE3B  21                 	db	33
   698  00FE3C  5E                 	db	94
   699  00FE3D  7F                 	db	127
   700  00FE3E  09                 	db	9
   701  00FE3F  19                 	db	25
   702  00FE40  29                 	db	41
   703  00FE41  46                 	db	70
   704  00FE42  46                 	db	70
   705  00FE43  49                 	db	73
   706  00FE44  49                 	db	73
   707  00FE45  49                 	db	73
   708  00FE46  31                 	db	49
   709  00FE47  01                 	db	1
   710  00FE48  01                 	db	1
   711  00FE49  7F                 	db	127
   712  00FE4A  01                 	db	1
   713  00FE4B  01                 	db	1
   714  00FE4C  3F                 	db	63
   715  00FE4D  40                 	db	64
   716  00FE4E  40                 	db	64
   717  00FE4F  40                 	db	64
   718  00FE50  3F                 	db	63
   719  00FE51  1F                 	db	31
   720  00FE52  20                 	db	32
   721  00FE53  40                 	db	64
   722  00FE54  20                 	db	32
   723  00FE55  1F                 	db	31
   724  00FE56  7F                 	db	127
   725  00FE57  20                 	db	32
   726  00FE58  18                 	db	24
   727  00FE59  20                 	db	32
   728  00FE5A  7F                 	db	127
   729  00FE5B  63                 	db	99
   730  00FE5C  14                 	db	20
   731  00FE5D  08                 	db	8
   732  00FE5E  14                 	db	20
   733  00FE5F  63                 	db	99
   734  00FE60  03                 	db	3
   735  00FE61  04                 	db	4
   736  00FE62  78                 	db	120
   737  00FE63  04                 	db	4
   738  00FE64  03                 	db	3
   739  00FE65  61                 	db	97
   740  00FE66  51                 	db	81
   741  00FE67  49                 	db	73
   742  00FE68  45                 	db	69
   743  00FE69  43                 	db	67
   744  00FE6A  00                 	db	0
   745  00FE6B  00                 	db	0
   746  00FE6C  7F                 	db	127
   747  00FE6D  41                 	db	65
   748  00FE6E  41                 	db	65
   749  00FE6F  02                 	db	2
   750  00FE70  04                 	db	4
   751  00FE71  08                 	db	8
   752  00FE72  10                 	db	16
   753  00FE73  20                 	db	32
   754  00FE74  41                 	db	65
   755  00FE75  41                 	db	65
   756  00FE76  7F                 	db	127
   757  00FE77  00                 	db	0
   758  00FE78  00                 	db	0
   759  00FE79  04                 	db	4
   760  00FE7A  02                 	db	2
   761  00FE7B  01                 	db	1
   762  00FE7C  02                 	db	2
   763  00FE7D  04                 	db	4
   764  00FE7E  40                 	db	64
   765  00FE7F  40                 	db	64
   766  00FE80  40                 	db	64
   767  00FE81  40                 	db	64
   768  00FE82  40                 	db	64
   769  00FE83  00                 	db	0
   770  00FE84  01                 	db	1
   771  00FE85  02                 	db	2
   772  00FE86  04                 	db	4
   773  00FE87  00                 	db	0
   774  00FE88  20                 	db	32
   775  00FE89  54                 	db	84
   776  00FE8A  54                 	db	84
   777  00FE8B  54                 	db	84
   778  00FE8C  78                 	db	120
   779  00FE8D  7F                 	db	127
   780  00FE8E  48                 	db	72
   781  00FE8F  44                 	db	68
   782  00FE90  44                 	db	68
   783  00FE91  38                 	db	56
   784  00FE92  38                 	db	56
   785  00FE93  44                 	db	68
   786  00FE94  44                 	db	68
   787  00FE95  44                 	db	68
   788  00FE96  20                 	db	32
   789  00FE97  38                 	db	56
   790  00FE98  44                 	db	68
   791  00FE99  44                 	db	68
   792  00FE9A  48                 	db	72
   793  00FE9B  7F                 	db	127
   794  00FE9C  38                 	db	56
   795  00FE9D  54                 	db	84
   796  00FE9E  54                 	db	84
   797  00FE9F  54                 	db	84
   798  00FEA0  18                 	db	24
   799  00FEA1  08                 	db	8
   800  00FEA2  7E                 	db	126
   801  00FEA3  09                 	db	9
   802  00FEA4  01                 	db	1
   803  00FEA5  02                 	db	2
   804  00FEA6  08                 	db	8
   805  00FEA7  14                 	db	20
   806  00FEA8  54                 	db	84
   807  00FEA9  54                 	db	84
   808  00FEAA  3C                 	db	60
   809  00FEAB  7F                 	db	127
   810  00FEAC  08                 	db	8
   811  00FEAD  04                 	db	4
   812  00FEAE  04                 	db	4
   813  00FEAF  78                 	db	120
   814  00FEB0  00                 	db	0
   815  00FEB1  44                 	db	68
   816  00FEB2  7D                 	db	125
   817  00FEB3  40                 	db	64
   818  00FEB4  00                 	db	0
   819  00FEB5  20                 	db	32
   820  00FEB6  40                 	db	64
   821  00FEB7  44                 	db	68
   822  00FEB8  3D                 	db	61
   823  00FEB9  00                 	db	0
   824  00FEBA  00                 	db	0
   825  00FEBB  7F                 	db	127
   826  00FEBC  10                 	db	16
   827  00FEBD  28                 	db	40
   828  00FEBE  44                 	db	68
   829  00FEBF  00                 	db	0
   830  00FEC0  41                 	db	65
   831  00FEC1  7F                 	db	127
   832  00FEC2  40                 	db	64
   833  00FEC3  00                 	db	0
   834  00FEC4  7C                 	db	124
   835  00FEC5  04                 	db	4
   836  00FEC6  18                 	db	24
   837  00FEC7  04                 	db	4
   838  00FEC8  78                 	db	120
   839  00FEC9  7C                 	db	124
   840  00FECA  08                 	db	8
   841  00FECB  04                 	db	4
   842  00FECC  04                 	db	4
   843  00FECD  78                 	db	120
   844  00FECE  38                 	db	56
   845  00FECF  44                 	db	68
   846  00FED0  44                 	db	68
   847  00FED1  44                 	db	68
   848  00FED2  38                 	db	56
   849  00FED3  7C                 	db	124
   850  00FED4  14                 	db	20
   851  00FED5  14                 	db	20
   852  00FED6  14                 	db	20
   853  00FED7  08                 	db	8
   854  00FED8  08                 	db	8
   855  00FED9  14                 	db	20
   856  00FEDA  14                 	db	20
   857  00FEDB  18                 	db	24
   858  00FEDC  7C                 	db	124
   859  00FEDD  7C                 	db	124
   860  00FEDE  08                 	db	8
   861  00FEDF  04                 	db	4
   862  00FEE0  04                 	db	4
   863  00FEE1  08                 	db	8
   864  00FEE2  48                 	db	72
   865  00FEE3  54                 	db	84
   866  00FEE4  54                 	db	84
   867  00FEE5  54                 	db	84
   868  00FEE6  20                 	db	32
   869  00FEE7  04                 	db	4
   870  00FEE8  3F                 	db	63
   871  00FEE9  44                 	db	68
   872  00FEEA  40                 	db	64
   873  00FEEB  20                 	db	32
   874  00FEEC  3C                 	db	60
   875  00FEED  40                 	db	64
   876  00FEEE  40                 	db	64
   877  00FEEF  20                 	db	32
   878  00FEF0  7C                 	db	124
   879  00FEF1  1C                 	db	28
   880  00FEF2  20                 	db	32
   881  00FEF3  40                 	db	64
   882  00FEF4  20                 	db	32
   883  00FEF5  1C                 	db	28
   884  00FEF6  3C                 	db	60
   885  00FEF7  40                 	db	64
   886  00FEF8  30                 	db	48
   887  00FEF9  40                 	db	64
   888  00FEFA  3C                 	db	60
   889  00FEFB  44                 	db	68
   890  00FEFC  28                 	db	40
   891  00FEFD  10                 	db	16
   892  00FEFE  28                 	db	40
   893  00FEFF  44                 	db	68
   894  00FF00  0C                 	db	12
   895  00FF01  50                 	db	80
   896  00FF02  50                 	db	80
   897  00FF03  50                 	db	80
   898  00FF04  3C                 	db	60
   899  00FF05  44                 	db	68
   900  00FF06  64                 	db	100
   901  00FF07  54                 	db	84
   902  00FF08  4C                 	db	76
   903  00FF09  44                 	db	68
   904  00FF0A  00                 	db	0
   905  00FF0B  08                 	db	8
   906  00FF0C  36                 	db	54
   907  00FF0D  41                 	db	65
   908  00FF0E  00                 	db	0
   909  00FF0F  00                 	db	0
   910  00FF10  00                 	db	0
   911  00FF11  7F                 	db	127
   912  00FF12  00                 	db	0
   913  00FF13  00                 	db	0
   914  00FF14  00                 	db	0
   915  00FF15  41                 	db	65
   916  00FF16  36                 	db	54
   917  00FF17  08                 	db	8
   918  00FF18  00                 	db	0
   919  00FF19  08                 	db	8
   920  00FF1A  08                 	db	8
   921  00FF1B  2A                 	db	42
   922  00FF1C  1C                 	db	28
   923  00FF1D  08                 	db	8
   924  00FF1E  08                 	db	8
   925  00FF1F  1C                 	db	28
   926  00FF20  2A                 	db	42
   927  00FF21  08                 	db	8
   928  00FF22  08                 	db	8
   929  00FF23                     __end_of_Font5x7:
   930                           	opt stack 0
   931  00FF23                     exp@coeff:
   932                           	opt stack 0
   933  00FF23  0000               	dw	0
   934  00FF25  3F80               	dw	16256
   935  00FF27  7218               	dw	29208
   936  00FF29  3F31               	dw	16177
   937  00FF2B  FDF0               	dw	65008
   938  00FF2D  3E75               	dw	15989
   939  00FF2F  5847               	dw	22599
   940  00FF31  3D63               	dw	15715
   941  00FF33  9558               	dw	38232
   942  00FF35  3C1D               	dw	15389
   943  00FF37  C482               	dw	50306
   944  00FF39  3AAE               	dw	15022
   945  00FF3B  78A8               	dw	30888
   946  00FF3D  3921               	dw	14625
   947  00FF3F  93EF               	dw	37871
   948  00FF41  3780               	dw	14208
   949  00FF43  92A0               	dw	37536
   950  00FF45  35A7               	dw	13735
   951  00FF47  5646               	dw	22086
   952  00FF49  3415               	dw	13333
   953  00FF4B                     __end_ofexp@coeff:
   954                           	opt stack 0
   955  00FF4B                     log@coeff:
   956                           	opt stack 0
   957  00FF4B  0000               	dw	0
   958  00FF4D  0000               	dw	0
   959  00FF4F  FFC4               	dw	65476
   960  00FF51  3F7F               	dw	16255
   961  00FF53  EF80               	dw	61312
   962  00FF55  BEFF               	dw	48895
   963  00FF57  E190               	dw	57744
   964  00FF59  3EA9               	dw	16041
   965  00FF5B  82EC               	dw	33516
   966  00FF5D  BE76               	dw	48758
   967  00FF5F  AD82               	dw	44418
   968  00FF61  3E2B               	dw	15915
   969  00FF63  3C0E               	dw	15374
   970  00FF65  BDC3               	dw	48579
   971  00FF67  D187               	dw	53639
   972  00FF69  3D13               	dw	15635
   973  00FF6B  7841               	dw	30785
   974  00FF6D  BBD3               	dw	48083
   975  00FF6F                     __end_oflog@coeff:
   976                           	opt stack 0
   977  00FF6F                     _PortG_Property:
   978                           	opt stack 0
   979  00FF6F  FC00               	dw	64512
   980  00FF71                     __end_of_PortG_Property:
   981                           	opt stack 0
   982  00FF71                     _PortF_Property:
   983                           	opt stack 0
   984  00FF71  0FFF               	dw	4095
   985  00FF73                     __end_of_PortF_Property:
   986                           	opt stack 0
   987  00FF73                     _PortE_Property:
   988                           	opt stack 0
   989  00FF73  0000               	dw	0
   990  00FF75                     __end_of_PortE_Property:
   991                           	opt stack 0
   992  00FF75                     _PortD_Property:
   993                           	opt stack 0
   994  00FF75  FFFF               	dw	65535
   995  00FF77                     __end_of_PortD_Property:
   996                           	opt stack 0
   997  00FF77                     _PortC_Property:
   998                           	opt stack 0
   999  00FF77  FFF0               	dw	65520
  1000  00FF79                     __end_of_PortC_Property:
  1001                           	opt stack 0
  1002  00FF79                     _PortB_Property:
  1003                           	opt stack 0
  1004  00FF79  FF00               	dw	65280
  1005  00FF7B                     __end_of_PortB_Property:
  1006                           	opt stack 0
  1007  00FF7B                     _PortA_Property:
  1008                           	opt stack 0
  1009  00FF7B  00FF               	dw	255
  1010  00FF7D                     __end_of_PortA_Property:
  1011                           	opt stack 0
  1012  0000                     _TMR0	set	4054
  1013  0000                     _PR2	set	4043
  1014  0000                     _T2CONbits	set	4042
  1015  0000                     _T0CONbits	set	4053
  1016  0000                     _RCONbits	set	4048
  1017  0000                     _OSCTUNEbits	set	3995
  1018  0000                     _PIR3	set	4004
  1019  0000                     _PIR2	set	4001
  1020  0000                     _PIR1	set	3998
  1021  0000                     _INTCONbits	set	4082
  1022  0000                     _SSP2CON2bits	set	3947
  1023  0000                     _SSP1CON2bits	set	4037
  1024  0000                     _SSP1ADD	set	4040
  1025  0000                     _ANCON0	set	4033
  1026  0000                     _ADRESL	set	4035
  1027  0000                     _ADRESH	set	4036
  1028  0000                     _ADCON1bits	set	4033
  1029  0000                     _ADCON0bits	set	4034
  1030  0000                     _SSP2CON1bits	set	3948
  1031  0000                     _SSP1CON1bits	set	4038
  1032  0000                     _SSP2STATbits	set	3949
  1033  0000                     _SSP1STATbits	set	4039
  1034  0000                     _PIE3bits	set	4003
  1035  0000                     _PIE1bits	set	3997
  1036  0000                     _PIR3bits	set	4004
  1037  0000                     _PIR1bits	set	3998
  1038  0000                     _IPR3bits	set	4005
  1039  0000                     _IPR1bits	set	3999
  1040  0000                     _PORTFbits	set	3973
  1041  0000                     _SSP2CON2	set	3947
  1042  0000                     _SSP1CON2	set	4037
  1043  0000                     _SSP2BUF	set	3951
  1044  0000                     _SSP2CON1	set	3948
  1045  0000                     _SSP2STAT	set	3949
  1046  0000                     _SSP1BUF	set	4041
  1047  0000                     _SSP1CON1	set	4038
  1048  0000                     _SSP1STAT	set	4039
  1049  0000                     _LATG	set	3983
  1050  0000                     _LATF	set	3982
  1051  0000                     _LATE	set	3981
  1052  0000                     _LATD	set	3980
  1053  0000                     _LATC	set	3979
  1054  0000                     _LATB	set	3978
  1055  0000                     _LATA	set	3977
  1056  0000                     _TRISG	set	3992
  1057  0000                     _TRISF	set	3991
  1058  0000                     _TRISE	set	3990
  1059  0000                     _TRISD	set	3989
  1060  0000                     _TRISC	set	3988
  1061  0000                     _TRISB	set	3987
  1062  0000                     _TRISA	set	3986
  1063  0000                     _PORTG	set	3974
  1064  0000                     _PORTF	set	3973
  1065  0000                     _PORTE	set	3972
  1066  0000                     _PORTD	set	3971
  1067  0000                     _PORTC	set	3970
  1068  0000                     _PORTB	set	3969
  1069  0000                     _PORTA	set	3968
  1070  00FF7D                     STR_2:
  1071  00FF7D  4A                 	db	74	;'J'
  1072  00FF7E  61                 	db	97	;'a'
  1073  00FF7F  6D                 	db	109	;'m'
  1074  00FF80  69                 	db	105	;'i'
  1075  00FF81  6E                 	db	110	;'n'
  1076  00FF82  20                 	db	32
  1077  00FF83  45                 	db	69	;'E'
  1078  00FF84  61                 	db	97	;'a'
  1079  00FF85  72                 	db	114	;'r'
  1080  00FF86  6C                 	db	108	;'l'
  1081  00FF87  79                 	db	121	;'y'
  1082  00FF88  20                 	db	32
  1083  00FF89  39                 	db	57	;'9'
  1084  00FF8A  39                 	db	57	;'9'
  1085  00FF8B  31                 	db	49	;'1'
  1086  00FF8C  33                 	db	51	;'3'
  1087  00FF8D  33                 	db	51	;'3'
  1088  00FF8E  33                 	db	51	;'3'
  1089  00FF8F  39                 	db	57	;'9'
  1090  00FF90  31                 	db	49	;'1'
  1091  00FF91  0A                 	db	10
  1092  00FF92  0A                 	db	10
  1093  00FF93  00                 	db	0
  1094  00FF94                     STR_3:
  1095  00FF94  43                 	db	67	;'C'
  1096  00FF95  6F                 	db	111	;'o'
  1097  00FF96  6E                 	db	110	;'n'
  1098  00FF97  74                 	db	116	;'t'
  1099  00FF98  69                 	db	105	;'i'
  1100  00FF99  6E                 	db	110	;'n'
  1101  00FF9A  75                 	db	117	;'u'
  1102  00FF9B  6F                 	db	111	;'o'
  1103  00FF9C  75                 	db	117	;'u'
  1104  00FF9D  73                 	db	115	;'s'
  1105  00FF9E  20                 	db	32
  1106  00FF9F  4D                 	db	77	;'M'
  1107  00FFA0  6F                 	db	111	;'o'
  1108  00FFA1  64                 	db	100	;'d'
  1109  00FFA2  65                 	db	101	;'e'
  1110  00FFA3  3A                 	db	58	;':'
  1111  00FFA4  0A                 	db	10
  1112  00FFA5  00                 	db	0
  1113  00FFA6                     STR_11:
  1114  00FFA6  55                 	db	85	;'U'
  1115  00FFA7  6E                 	db	110	;'n'
  1116  00FFA8  64                 	db	100	;'d'
  1117  00FFA9  65                 	db	101	;'e'
  1118  00FFAA  66                 	db	102	;'f'
  1119  00FFAB  69                 	db	105	;'i'
  1120  00FFAC  6E                 	db	110	;'n'
  1121  00FFAD  65                 	db	101	;'e'
  1122  00FFAE  64                 	db	100	;'d'
  1123  00FFAF  0A                 	db	10
  1124  00FFB0  0A                 	db	10
  1125  00FFB1  0A                 	db	10
  1126  00FFB2  0A                 	db	10
  1127  00FFB3  0A                 	db	10
  1128  00FFB4  0A                 	db	10
  1129  00FFB5  00                 	db	0
  1130  00FFB6                     STR_10:
  1131  00FFB6  50                 	db	80	;'P'
  1132  00FFB7  6F                 	db	111	;'o'
  1133  00FFB8  73                 	db	115	;'s'
  1134  00FFB9  69                 	db	105	;'i'
  1135  00FFBA  74                 	db	116	;'t'
  1136  00FFBB  69                 	db	105	;'i'
  1137  00FFBC  6F                 	db	111	;'o'
  1138  00FFBD  6E                 	db	110	;'n'
  1139  00FFBE  20                 	db	32
  1140  00FFBF  4D                 	db	77	;'M'
  1141  00FFC0  6F                 	db	111	;'o'
  1142  00FFC1  64                 	db	100	;'d'
  1143  00FFC2  65                 	db	101	;'e'
  1144  00FFC3  0A                 	db	10
  1145  00FFC4  00                 	db	0
  1146  00FFC5                     STR_7:
  1147  00FFC5  53                 	db	83	;'S'
  1148  00FFC6  70                 	db	112	;'p'
  1149  00FFC7  65                 	db	101	;'e'
  1150  00FFC8  65                 	db	101	;'e'
  1151  00FFC9  64                 	db	100	;'d'
  1152  00FFCA  3A                 	db	58	;':'
  1153  00FFCB  20                 	db	32
  1154  00FFCC  25                 	db	37
  1155  00FFCD  64                 	db	100	;'d'
  1156  00FFCE  48                 	db	72	;'H'
  1157  00FFCF  7A                 	db	122	;'z'
  1158  00FFD0  0A                 	db	10
  1159  00FFD1  00                 	db	0
  1160  00FFD2                     STR_9:
  1161  00FFD2  53                 	db	83	;'S'
  1162  00FFD3  74                 	db	116	;'t'
  1163  00FFD4  65                 	db	101	;'e'
  1164  00FFD5  70                 	db	112	;'p'
  1165  00FFD6  73                 	db	115	;'s'
  1166  00FFD7  3A                 	db	58	;':'
  1167  00FFD8  20                 	db	32
  1168  00FFD9  25                 	db	37
  1169  00FFDA  64                 	db	100	;'d'
  1170  00FFDB  0A                 	db	10
  1171  00FFDC  0A                 	db	10
  1172  00FFDD  00                 	db	0
  1173  00FFDE                     STR_8:
  1174  00FFDE  53                 	db	83	;'S'
  1175  00FFDF  74                 	db	116	;'t'
  1176  00FFE0  65                 	db	101	;'e'
  1177  00FFE1  70                 	db	112	;'p'
  1178  00FFE2  20                 	db	32
  1179  00FFE3  4D                 	db	77	;'M'
  1180  00FFE4  6F                 	db	111	;'o'
  1181  00FFE5  64                 	db	100	;'d'
  1182  00FFE6  65                 	db	101	;'e'
  1183  00FFE7  3A                 	db	58	;':'
  1184  00FFE8  0A                 	db	10
  1185  00FFE9  00                 	db	0
  1186  00FFEA                     STR_4:
  1187  00FFEA  44                 	db	68	;'D'
  1188  00FFEB  69                 	db	105	;'i'
  1189  00FFEC  72                 	db	114	;'r'
  1190  00FFED  65                 	db	101	;'e'
  1191  00FFEE  63                 	db	99	;'c'
  1192  00FFEF  74                 	db	116	;'t'
  1193  00FFF0  69                 	db	105	;'i'
  1194  00FFF1  6F                 	db	111	;'o'
  1195  00FFF2  6E                 	db	110	;'n'
  1196  00FFF3  3A                 	db	58	;':'
  1197  00FFF4  20                 	db	32
  1198  00FFF5  00                 	db	0
  1199  00FFF6                     STR_5:
  1200  00FFF6  43                 	db	67	;'C'
  1201  00FFF7  43                 	db	67	;'C'
  1202  00FFF8  57                 	db	87	;'W'
  1203  00FFF9  0A                 	db	10
  1204  00FFFA  00                 	db	0
  1205  00FFFB                     STR_1:
  1206  00FFFB  25                 	db	37
  1207  00FFFC  63                 	db	99	;'c'
  1208  00FFFD  00                 	db	0
  1209  0000                     
  1210                           ; #config settings
  1211  00FFFE  00                 	db	0	; dummy byte at the end
  1212  0000                     
  1213                           	psect	cinit
  1214  014B1A                     __pcinit:
  1215                           	opt stack 0
  1216  014B1A                     start_initialization:
  1217                           	opt stack 0
  1218  014B1A                     __initialization:
  1219                           	opt stack 0
  1220                           
  1221                           ; Initialize objects allocated to BANK1 (12 bytes)
  1222                           ; load TBLPTR registers with __pidataBANK1
  1223  014B1A  0E84               	movlw	low __pidataBANK1
  1224  014B1C  6EF6               	movwf	tblptrl,c
  1225  014B1E  0E69               	movlw	high __pidataBANK1
  1226  014B20  6EF7               	movwf	tblptrh,c
  1227  014B22  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1228  014B24  6EF8               	movwf	tblptru,c
  1229  014B26  EE01  F0EC         	lfsr	0,__pdataBANK1
  1230  014B2A  EE10 F00C          	lfsr	1,12
  1231  014B2E                     copy_data0:
  1232  014B2E  0009               	tblrd		*+
  1233  014B30  CFF5 FFEE          	movff	tablat,postinc0
  1234  014B34  50E5               	movf	postdec1,w,c
  1235  014B36  50E1               	movf	fsr1l,w,c
  1236  014B38  E1FA               	bnz	copy_data0
  1237                           
  1238                           ; Initialize objects allocated to BANK0 (6 bytes)
  1239                           ; load TBLPTR registers with __pidataBANK0
  1240  014B3A  0EEC               	movlw	low __pidataBANK0
  1241  014B3C  6EF6               	movwf	tblptrl,c
  1242  014B3E  0E69               	movlw	high __pidataBANK0
  1243  014B40  6EF7               	movwf	tblptrh,c
  1244  014B42  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1245  014B44  6EF8               	movwf	tblptru,c
  1246  014B46  EE00  F0F8         	lfsr	0,__pdataBANK0
  1247  014B4A  EE10 F006          	lfsr	1,6
  1248  014B4E                     copy_data1:
  1249  014B4E  0009               	tblrd		*+
  1250  014B50  CFF5 FFEE          	movff	tablat,postinc0
  1251  014B54  50E5               	movf	postdec1,w,c
  1252  014B56  50E1               	movf	fsr1l,w,c
  1253  014B58  E1FA               	bnz	copy_data1
  1254                           
  1255                           ; Initialize objects allocated to COMRAM (10 bytes)
  1256                           ; load TBLPTR registers with __pidataCOMRAM
  1257  014B5A  0EB4               	movlw	low __pidataCOMRAM
  1258  014B5C  6EF6               	movwf	tblptrl,c
  1259  014B5E  0E69               	movlw	high __pidataCOMRAM
  1260  014B60  6EF7               	movwf	tblptrh,c
  1261  014B62  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1262  014B64  6EF8               	movwf	tblptru,c
  1263  014B66  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1264  014B6A  EE10 F00A          	lfsr	1,10
  1265  014B6E                     copy_data2:
  1266  014B6E  0009               	tblrd		*+
  1267  014B70  CFF5 FFEE          	movff	tablat,postinc0
  1268  014B74  50E5               	movf	postdec1,w,c
  1269  014B76  50E1               	movf	fsr1l,w,c
  1270  014B78  E1FA               	bnz	copy_data2
  1271                           
  1272                           ; Clear objects allocated to BIGRAM (300 bytes)
  1273  014B7A  EE02  F06E         	lfsr	0,__pbssBIGRAM
  1274  014B7E  EE11 F02C          	lfsr	1,300
  1275  014B82                     clear_0:
  1276  014B82  6AEE               	clrf	postinc0,c
  1277  014B84  50E5               	movf	postdec1,w,c
  1278  014B86  50E1               	movf	fsr1l,w,c
  1279  014B88  E1FC               	bnz	clear_0
  1280  014B8A  50E2               	movf	fsr1h,w,c
  1281  014B8C  E1FA               	bnz	clear_0
  1282                           
  1283                           ; Clear objects allocated to BANK2 (100 bytes)
  1284  014B8E  EE02  F000         	lfsr	0,__pbssBANK2
  1285  014B92  0E64               	movlw	100
  1286  014B94                     clear_1:
  1287  014B94  6AEE               	clrf	postinc0,c
  1288  014B96  06E8               	decf	wreg,f,c
  1289  014B98  E1FD               	bnz	clear_1
  1290                           
  1291                           ; Clear objects allocated to BANK1 (223 bytes)
  1292  014B9A  EE01  F000         	lfsr	0,__pbssBANK1
  1293  014B9E  0EDF               	movlw	223
  1294  014BA0                     clear_2:
  1295  014BA0  6AEE               	clrf	postinc0,c
  1296  014BA2  06E8               	decf	wreg,f,c
  1297  014BA4  E1FD               	bnz	clear_2
  1298                           
  1299                           ; Clear objects allocated to BANK0 (42 bytes)
  1300  014BA6  EE00  F0CE         	lfsr	0,__pbssBANK0
  1301  014BAA  0E2A               	movlw	42
  1302  014BAC                     clear_3:
  1303  014BAC  6AEE               	clrf	postinc0,c
  1304  014BAE  06E8               	decf	wreg,f,c
  1305  014BB0  E1FD               	bnz	clear_3
  1306                           
  1307                           ; Clear objects allocated to COMRAM (26 bytes)
  1308  014BB2  EE00  F025         	lfsr	0,__pbssCOMRAM
  1309  014BB6  0E1A               	movlw	26
  1310  014BB8                     clear_4:
  1311  014BB8  6AEE               	clrf	postinc0,c
  1312  014BBA  06E8               	decf	wreg,f,c
  1313  014BBC  E1FD               	bnz	clear_4
  1314  014BBE                     end_of_initialization:
  1315                           	opt stack 0
  1316  014BBE                     __end_of__initialization:
  1317                           	opt stack 0
  1318  014BBE  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1319  014BC0  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1320  014BC2  0100               	movlb	0
  1321  014BC4  EFA9  F09C         	goto	_main	;jump to C main() function
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           postinc0	equ	0xFEE
  1327                           wreg	equ	0xFE8
  1328                           postdec1	equ	0xFE5
  1329                           fsr1h	equ	0xFE2
  1330                           fsr1l	equ	0xFE1
  1331                           
  1332                           	psect	bssCOMRAM
  1333  000025                     __pbssCOMRAM:
  1334                           	opt stack 0
  1335  000025                     _lQueue:
  1336                           	opt stack 0
  1337  000025                     	ds	3
  1338  000028                     _COUNTER:
  1339                           	opt stack 0
  1340  000028                     	ds	2
  1341  00002A                     _lMotor:
  1342                           	opt stack 0
  1343  00002A                     	ds	2
  1344  00002C                     HMI_GRender@a:
  1345                           	opt stack 0
  1346  00002C                     	ds	2
  1347  00002E                     Timer2_Init@PRE:
  1348                           	opt stack 0
  1349  00002E                     	ds	1
  1350  00002F                     Timer2_Init@INDEX:
  1351                           	opt stack 0
  1352  00002F                     	ds	1
  1353  000030                     Timer0_Init@PRE:
  1354                           	opt stack 0
  1355  000030                     	ds	1
  1356  000031                     _INDEX:
  1357                           	opt stack 0
  1358  000031                     	ds	1
  1359  000032                     rand@screw:
  1360                           	opt stack 0
  1361  000032                     	ds	1
  1362  000033                     OutSeg@a:
  1363                           	opt stack 0
  1364  000033                     	ds	1
  1365  000034                     OutSeg@segset:
  1366                           	opt stack 0
  1367  000034                     	ds	1
  1368  000035                     OutSeg@cur:
  1369                           	opt stack 0
  1370  000035                     	ds	1
  1371  000036                     _lBufferY:
  1372                           	opt stack 0
  1373  000036                     	ds	1
  1374  000037                     _lBufferX:
  1375                           	opt stack 0
  1376  000037                     	ds	1
  1377  000038                     _I2C1T:
  1378                           	opt stack 0
  1379  000038                     	ds	7
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           postdec1	equ	0xFE5
  1387                           fsr1h	equ	0xFE2
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           	psect	dataCOMRAM
  1391  00003F                     __pdataCOMRAM:
  1392                           	opt stack 0
  1393  00003F                     _gCursor:
  1394                           	opt stack 0
  1395  00003F                     	ds	4
  1396  000043                     _Bus_State:
  1397                           	opt stack 0
  1398  000043                     	ds	1
  1399  000044                     	ds	1
  1400  000045                     	ds	1
  1401  000046                     	ds	1
  1402  000047                     _l:
  1403                           	opt stack 0
  1404  000047                     	ds	1
  1405  000048                     _w:
  1406                           	opt stack 0
  1407  000048                     	ds	1
  1408                           tblptru	equ	0xFF8
  1409                           tblptrh	equ	0xFF7
  1410                           tblptrl	equ	0xFF6
  1411                           tablat	equ	0xFF5
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           postdec1	equ	0xFE5
  1415                           fsr1h	equ	0xFE2
  1416                           fsr1l	equ	0xFE1
  1417                           
  1418                           	psect	bssBANK0
  1419  0000CE                     __pbssBANK0:
  1420                           	opt stack 0
  1421  0000CE                     _gISR:
  1422                           	opt stack 0
  1423  0000CE                     	ds	3
  1424  0000D1                     _lStepFunction:
  1425                           	opt stack 0
  1426  0000D1                     	ds	3
  1427  0000D4                     _dipMode:
  1428                           	opt stack 0
  1429  0000D4                     	ds	2
  1430  0000D6                     _Steps:
  1431                           	opt stack 0
  1432  0000D6                     	ds	2
  1433  0000D8                     _pShiftVal:
  1434                           	opt stack 0
  1435  0000D8                     	ds	2
  1436  0000DA                     _val:
  1437                           	opt stack 0
  1438  0000DA                     	ds	2
  1439  0000DC                     _lCurrent:
  1440                           	opt stack 0
  1441  0000DC                     	ds	2
  1442  0000DE                     _gBackcolour:
  1443                           	opt stack 0
  1444  0000DE                     	ds	2
  1445  0000E0                     SPI_Send9@dat:
  1446                           	opt stack 0
  1447  0000E0                     	ds	2
  1448  0000E2                     _rightState:
  1449                           	opt stack 0
  1450  0000E2                     	ds	1
  1451  0000E3                     _leftState:
  1452                           	opt stack 0
  1453  0000E3                     	ds	1
  1454  0000E4                     _downState:
  1455                           	opt stack 0
  1456  0000E4                     	ds	1
  1457  0000E5                     _upState:
  1458                           	opt stack 0
  1459  0000E5                     	ds	1
  1460  0000E6                     Event_TestButton@j:
  1461                           	opt stack 0
  1462  0000E6                     	ds	1
  1463  0000E7                     _u:
  1464                           	opt stack 0
  1465  0000E7                     	ds	1
  1466  0000E8                     _j:
  1467                           	opt stack 0
  1468  0000E8                     	ds	1
  1469  0000E9                     _i:
  1470                           	opt stack 0
  1471  0000E9                     	ds	1
  1472  0000EA                     _ADC_Initialised:
  1473                           	opt stack 0
  1474  0000EA                     	ds	1
  1475  0000EB                     _clearall:
  1476                           	opt stack 0
  1477  0000EB                     	ds	1
  1478  0000EC                     _PortC:
  1479                           	opt stack 0
  1480  0000EC                     	ds	10
  1481  0000F6                     _Speed:
  1482                           	opt stack 0
  1483  0000F6                     	ds	2
  1484                           tblptru	equ	0xFF8
  1485                           tblptrh	equ	0xFF7
  1486                           tblptrl	equ	0xFF6
  1487                           tablat	equ	0xFF5
  1488                           postinc0	equ	0xFEE
  1489                           wreg	equ	0xFE8
  1490                           postdec1	equ	0xFE5
  1491                           fsr1h	equ	0xFE2
  1492                           fsr1l	equ	0xFE1
  1493                           
  1494                           	psect	dataBANK0
  1495  0000F8                     __pdataBANK0:
  1496                           	opt stack 0
  1497  0000F8                     _Direction:
  1498                           	opt stack 0
  1499  0000F8                     	ds	2
  1500  0000FA                     _gForecolour:
  1501                           	opt stack 0
  1502  0000FA                     	ds	2
  1503  0000FC                     _lockedMode:
  1504                           	opt stack 0
  1505  0000FC                     	ds	1
  1506  0000FD                     _change:
  1507                           	opt stack 0
  1508  0000FD                     	ds	1
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK1
  1520  000100                     __pbssBANK1:
  1521                           	opt stack 0
  1522  000100                     Timer2_Init@DIV:
  1523                           	opt stack 0
  1524  000100                     	ds	4
  1525  000104                     Timer0_Init@DIV:
  1526                           	opt stack 0
  1527  000104                     	ds	4
  1528  000108                     _I2C2_More:
  1529                           	opt stack 0
  1530  000108                     	ds	3
  1531  00010B                     _I2C1_More:
  1532                           	opt stack 0
  1533  00010B                     	ds	3
  1534  00010E                     _I2C2_Done:
  1535                           	opt stack 0
  1536  00010E                     	ds	3
  1537  000111                     _I2C1_Done:
  1538                           	opt stack 0
  1539  000111                     	ds	3
  1540  000114                     _errno:
  1541                           	opt stack 0
  1542  000114                     	ds	2
  1543  000116                     _HMIBoard:
  1544                           	opt stack 0
  1545  000116                     	ds	58
  1546  000150                     _SPI1:
  1547                           	opt stack 0
  1548  000150                     	ds	11
  1549  00015B                     _SPI2:
  1550                           	opt stack 0
  1551  00015B                     	ds	11
  1552  000166                     _DIPSwitch:
  1553                           	opt stack 0
  1554  000166                     	ds	10
  1555  000170                     _TestButton:
  1556                           	opt stack 0
  1557  000170                     	ds	10
  1558  00017A                     _PortG:
  1559                           	opt stack 0
  1560  00017A                     	ds	10
  1561  000184                     _PortE:
  1562                           	opt stack 0
  1563  000184                     	ds	10
  1564  00018E                     _PortD:
  1565                           	opt stack 0
  1566  00018E                     	ds	10
  1567  000198                     _PortB:
  1568                           	opt stack 0
  1569  000198                     	ds	10
  1570  0001A2                     _PortA:
  1571                           	opt stack 0
  1572  0001A2                     	ds	10
  1573  0001AC                     _PortF:
  1574                           	opt stack 0
  1575  0001AC                     	ds	10
  1576  0001B6                     _I2C2T:
  1577                           	opt stack 0
  1578  0001B6                     	ds	7
  1579  0001BD                     _Stepper:
  1580                           	opt stack 0
  1581  0001BD                     	ds	6
  1582  0001C3                     _ADC_AN3:
  1583                           	opt stack 0
  1584  0001C3                     	ds	5
  1585  0001C8                     _ADC_AN2:
  1586                           	opt stack 0
  1587  0001C8                     	ds	5
  1588  0001CD                     _ADC_AN1:
  1589                           	opt stack 0
  1590  0001CD                     	ds	5
  1591  0001D2                     _ADC_AN0:
  1592                           	opt stack 0
  1593  0001D2                     	ds	5
  1594  0001D7                     LCD_DrawRectangle@p4:
  1595                           	opt stack 0
  1596  0001D7                     	ds	4
  1597  0001DB                     LCD_DrawRectangle@p2:
  1598                           	opt stack 0
  1599  0001DB                     	ds	4
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           postinc0	equ	0xFEE
  1605                           wreg	equ	0xFE8
  1606                           postdec1	equ	0xFE5
  1607                           fsr1h	equ	0xFE2
  1608                           fsr1l	equ	0xFE1
  1609                           
  1610                           	psect	dataBANK1
  1611  0001EC                     __pdataBANK1:
  1612                           	opt stack 0
  1613  0001EC                     Console_Render@F6956:
  1614                           	opt stack 0
  1615  0001EC                     	ds	4
  1616  0001F0                     _gLineSize:
  1617                           	opt stack 0
  1618  0001F0                     	ds	4
  1619  0001F4                     _gCharSize:
  1620                           	opt stack 0
  1621  0001F4                     	ds	4
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1h	equ	0xFE2
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	bssBANK2
  1633  000200                     __pbssBANK2:
  1634                           	opt stack 0
  1635  000200                     _lCBuffer:
  1636                           	opt stack 0
  1637  000200                     	ds	30
  1638  00021E                     Console_MakeField@Fill:
  1639                           	opt stack 0
  1640  00021E                     	ds	70
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           fsr1h	equ	0xFE2
  1649                           fsr1l	equ	0xFE1
  1650                           
  1651                           	psect	bssBIGRAM
  1652  00026E                     __pbssBIGRAM:
  1653                           	opt stack 0
  1654  00026E                     _lBuffer:
  1655                           	opt stack 0
  1656  00026E                     	ds	300
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1h	equ	0xFE2
  1665                           fsr1l	equ	0xFE1
  1666                           
  1667                           	psect	cstackBANK2
  1668  000264                     __pcstackBANK2:
  1669                           	opt stack 0
  1670  000264                     printToScreen@ADCVoltage:
  1671                           	opt stack 0
  1672                           
  1673                           ; 4 bytes @ 0x0
  1674  000264                     	ds	4
  1675  000268                     _printToScreen$15175:
  1676                           	opt stack 0
  1677                           
  1678                           ; 4 bytes @ 0x4
  1679  000268                     	ds	4
  1680  00026C                     printToScreen@IRDistance:
  1681                           	opt stack 0
  1682                           
  1683                           ; 2 bytes @ 0x8
  1684  00026C                     	ds	2
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1h	equ	0xFE2
  1693                           fsr1l	equ	0xFE1
  1694                           
  1695                           	psect	cstackBANK1
  1696  0001DF                     __pcstackBANK1:
  1697                           	opt stack 0
  1698  0001DF                     _pow$15176:
  1699                           	opt stack 0
  1700                           
  1701                           ; 4 bytes @ 0x0
  1702  0001DF                     	ds	4
  1703  0001E3                     _pow$15177:
  1704                           	opt stack 0
  1705                           
  1706                           ; 4 bytes @ 0x4
  1707  0001E3                     	ds	4
  1708  0001E7                     pow@sign:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x8
  1712  0001E7                     	ds	1
  1713  0001E8                     pow@yi:
  1714                           	opt stack 0
  1715                           
  1716                           ; 4 bytes @ 0x9
  1717  0001E8                     	ds	4
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1h	equ	0xFE2
  1726                           fsr1l	equ	0xFE1
  1727                           
  1728                           	psect	cstackBANK0
  1729  000060                     __pcstackBANK0:
  1730                           	opt stack 0
  1731  000060                     ??_Console_ClearCursor:
  1732  000060                     ??_ADC_SetChannel:
  1733  000060                     ??_ADC_ConversionTime:
  1734  000060                     ??_ADC_SetupIO:
  1735  000060                     ??_Console_Init:
  1736  000060                     ??_Console_NewLine:
  1737  000060                     ??_Console_FormFeed:
  1738  000060                     ??_HMI_SetButton:
  1739  000060                     ?_GetPortProperties:
  1740                           	opt stack 0
  1741  000060                     ?_GetPortPORT:
  1742                           	opt stack 0
  1743  000060                     ?_GetPortTRIS:
  1744                           	opt stack 0
  1745  000060                     ?___wmul:
  1746                           	opt stack 0
  1747  000060                     ?___awdiv:
  1748                           	opt stack 0
  1749  000060                     ?___lwdiv:
  1750                           	opt stack 0
  1751  000060                     ?___fldiv:
  1752                           	opt stack 0
  1753  000060                     ?_frexp:
  1754                           	opt stack 0
  1755  000060                     ?___flneg:
  1756                           	opt stack 0
  1757  000060                     ?___lldiv:
  1758                           	opt stack 0
  1759  000060                     ?___xxtofl:
  1760                           	opt stack 0
  1761  000060                     Mode_Set@pMode:
  1762                           	opt stack 0
  1763  000060                     ToSegment@pCHR:
  1764                           	opt stack 0
  1765  000060                     HMI_SetBar@pValue:
  1766                           	opt stack 0
  1767  000060                     ADC_ClockDivision@pDivide:
  1768                           	opt stack 0
  1769  000060                     Port_GetPin@pInput:
  1770                           	opt stack 0
  1771  000060                     Port_GetQuad@pInput:
  1772                           	opt stack 0
  1773  000060                     SPI_DisableISR@pInput:
  1774                           	opt stack 0
  1775  000060                     SPI_DCS@pInput:
  1776                           	opt stack 0
  1777  000060                     SPI_Send@pInput:
  1778                           	opt stack 0
  1779  000060                     Byte_SetBit@pInput:
  1780                           	opt stack 0
  1781  000060                     Byte_GetBit@pInput:
  1782                           	opt stack 0
  1783  000060                     Byte_SetZone@pInput:
  1784                           	opt stack 0
  1785  000060                     Byte_GetZone@pInput:
  1786                           	opt stack 0
  1787  000060                     Byte_SetByte@pInput:
  1788                           	opt stack 0
  1789  000060                     delay_ms@ms:
  1790                           	opt stack 0
  1791  000060                     delay_us@us:
  1792                           	opt stack 0
  1793  000060                     reverse@input:
  1794                           	opt stack 0
  1795  000060                     Console_SetForecolour@pColour:
  1796                           	opt stack 0
  1797  000060                     ADC_Sequence@pItemA:
  1798                           	opt stack 0
  1799  000060                     ___wmul@multiplier:
  1800                           	opt stack 0
  1801  000060                     ___awdiv@dividend:
  1802                           	opt stack 0
  1803  000060                     ___lwdiv@dividend:
  1804                           	opt stack 0
  1805  000060                     MXK_Queue@pCallback:
  1806                           	opt stack 0
  1807  000060                     Timer0_Start@pFunction:
  1808                           	opt stack 0
  1809  000060                     ___flge@ff1:
  1810                           	opt stack 0
  1811  000060                     ___flneg@f1:
  1812                           	opt stack 0
  1813  000060                     ___lldiv@dividend:
  1814                           	opt stack 0
  1815  000060                     ___fldiv@b:
  1816                           	opt stack 0
  1817  000060                     ___xxtofl@val:
  1818                           	opt stack 0
  1819  000060                     frexp@value:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x0
  1823  000060                     	ds	1
  1824  000061                     ADC_SetChannel@pChannel:
  1825                           	opt stack 0
  1826  000061                     ADC_ClockDivision@reg:
  1827                           	opt stack 0
  1828  000061                     ADC_ConversionTime@pCount:
  1829                           	opt stack 0
  1830  000061                     HMI_SetSegments@pString:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x1
  1834  000061                     	ds	1
  1835  000062                     GetPortProperties@pInput:
  1836                           	opt stack 0
  1837  000062                     GetPortPORT@pInput:
  1838                           	opt stack 0
  1839  000062                     GetPortTRIS@pInput:
  1840                           	opt stack 0
  1841  000062                     Port_GetPin@pPin:
  1842                           	opt stack 0
  1843  000062                     Port_GetQuad@pQuad:
  1844                           	opt stack 0
  1845  000062                     SPI_Send@pData:
  1846                           	opt stack 0
  1847  000062                     Byte_SetBit@pBit:
  1848                           	opt stack 0
  1849  000062                     Byte_GetBit@pBit:
  1850                           	opt stack 0
  1851  000062                     Byte_SetZone@pMax:
  1852                           	opt stack 0
  1853  000062                     Byte_GetZone@pMax:
  1854                           	opt stack 0
  1855  000062                     Byte_SetByte@pValue:
  1856                           	opt stack 0
  1857  000062                     Console_Init@x:
  1858                           	opt stack 0
  1859  000062                     Console_FormFeed@x:
  1860                           	opt stack 0
  1861  000062                     ADC_SetupIO@pChannel:
  1862                           	opt stack 0
  1863  000062                     ADC_ClockDivision@unfound:
  1864                           	opt stack 0
  1865  000062                     reverse@length:
  1866                           	opt stack 0
  1867  000062                     ADC_Sequence@pItemB:
  1868                           	opt stack 0
  1869  000062                     ADC_Start@pInput:
  1870                           	opt stack 0
  1871  000062                     ___wmul@multiplicand:
  1872                           	opt stack 0
  1873  000062                     ___awdiv@divisor:
  1874                           	opt stack 0
  1875  000062                     ___lwdiv@divisor:
  1876                           	opt stack 0
  1877  000062                     delay_ms@u:
  1878                           	opt stack 0
  1879  000062                     delay_us@u:
  1880                           	opt stack 0
  1881  000062                     HMI_SetButton@reindex:
  1882                           	opt stack 0
  1883                           
  1884                           ; 4 bytes @ 0x2
  1885  000062                     	ds	1
  1886  000063                     ??_Port_GetPin:
  1887  000063                     ??_Port_GetQuad:
  1888  000063                     ??_Byte_GetBit:
  1889  000063                     LCD_Write@mode:
  1890                           	opt stack 0
  1891  000063                     Byte_SetBit@pValue:
  1892                           	opt stack 0
  1893  000063                     Byte_SetZone@pChunk:
  1894                           	opt stack 0
  1895  000063                     Byte_GetZone@pChunk:
  1896                           	opt stack 0
  1897  000063                     Console_Init@y:
  1898                           	opt stack 0
  1899  000063                     Console_FormFeed@y:
  1900                           	opt stack 0
  1901  000063                     OutSeg@pSegment:
  1902                           	opt stack 0
  1903  000063                     ADC_SetupIO@MASK:
  1904                           	opt stack 0
  1905  000063                     Motor_Move@pMotor:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x3
  1909  000063                     	ds	1
  1910  000064                     ??_Byte_SetBit:
  1911  000064                     ??_Console_IncrementCursor:
  1912  000064                     ??_OutSeg:
  1913  000064                     ??_ADC_Start:
  1914  000064                     ??___xxtofl:
  1915  000064                     LCD_Write@value:
  1916                           	opt stack 0
  1917  000064                     Byte_GetBit@Output:
  1918                           	opt stack 0
  1919  000064                     Byte_SetZone@pChunkSize:
  1920                           	opt stack 0
  1921  000064                     Byte_GetZone@pChunkSize:
  1922                           	opt stack 0
  1923  000064                     reverse@tempVar:
  1924                           	opt stack 0
  1925  000064                     ___awdiv@counter:
  1926                           	opt stack 0
  1927  000064                     ___lwdiv@counter:
  1928                           	opt stack 0
  1929  000064                     HMI_SetSegments@in:
  1930                           	opt stack 0
  1931  000064                     ADC_Init@pInput:
  1932                           	opt stack 0
  1933  000064                     ___wmul@product:
  1934                           	opt stack 0
  1935  000064                     frexp@eptr:
  1936                           	opt stack 0
  1937  000064                     ___flge@ff2:
  1938                           	opt stack 0
  1939  000064                     ___lldiv@divisor:
  1940                           	opt stack 0
  1941  000064                     ___fldiv@a:
  1942                           	opt stack 0
  1943                           
  1944                           ; 4 bytes @ 0x4
  1945  000064                     	ds	1
  1946  000065                     ??_Byte_GetZone:
  1947  000065                     ?_Console_MakeField:
  1948                           	opt stack 0
  1949  000065                     Set_Addr_Window@ys:
  1950                           	opt stack 0
  1951  000065                     Set_Rotation@m:
  1952                           	opt stack 0
  1953  000065                     Port_GetPin@Output:
  1954                           	opt stack 0
  1955  000065                     Port_GetQuad@Output:
  1956                           	opt stack 0
  1957  000065                     Byte_SetZone@pValue:
  1958                           	opt stack 0
  1959  000065                     ___awdiv@sign:
  1960                           	opt stack 0
  1961  000065                     LCD_Word_Write@value:
  1962                           	opt stack 0
  1963  000065                     reverse@iterator:
  1964                           	opt stack 0
  1965  000065                     Motor_Move@pDelta:
  1966                           	opt stack 0
  1967  000065                     ___lwdiv@quotient:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x5
  1971  000065                     	ds	1
  1972  000066                     ??_frexp:
  1973  000066                     ??_Byte_SetZone:
  1974  000066                     Set_Addr_Window@xe:
  1975                           	opt stack 0
  1976  000066                     Set_Rotation@rotation:
  1977                           	opt stack 0
  1978  000066                     Byte_GetZone@MASK:
  1979                           	opt stack 0
  1980  000066                     OutSeg@pInput:
  1981                           	opt stack 0
  1982  000066                     HMI_SetButton@pValue:
  1983                           	opt stack 0
  1984  000066                     ADC_Init@pChannel:
  1985                           	opt stack 0
  1986  000066                     MXK_BlockSwitchTo@CUR:
  1987                           	opt stack 0
  1988  000066                     MXK_SwitchTo@CUR:
  1989                           	opt stack 0
  1990  000066                     ___awdiv@quotient:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x6
  1994  000066                     	ds	1
  1995  000067                     ??_Console_MakeField:
  1996  000067                     ?___lwmod:
  1997                           	opt stack 0
  1998  000067                     Set_Addr_Window@ye:
  1999                           	opt stack 0
  2000  000067                     Byte_GetZone@Offset:
  2001                           	opt stack 0
  2002  000067                     OutSeg@out:
  2003                           	opt stack 0
  2004  000067                     HMI_SetButton@v:
  2005                           	opt stack 0
  2006  000067                     MXK_BlockSwitchTo@pModule:
  2007                           	opt stack 0
  2008  000067                     MXK_SwitchTo@pModule:
  2009                           	opt stack 0
  2010  000067                     ___lwmod@dividend:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x7
  2014  000067                     	ds	1
  2015  000068                     ??___fldiv:
  2016  000068                     ??_Console_Tab:
  2017  000068                     ??___flge:
  2018  000068                     Set_Addr_Window@xs:
  2019                           	opt stack 0
  2020  000068                     Byte_GetZone@Output:
  2021                           	opt stack 0
  2022  000068                     ___xxtofl@sign:
  2023                           	opt stack 0
  2024  000068                     HMI_Render@a:
  2025                           	opt stack 0
  2026  000068                     ___lldiv@quotient:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x8
  2030  000068                     	ds	1
  2031  000069                     Byte_SetZone@Offset:
  2032                           	opt stack 0
  2033  000069                     ___xxtofl@exp:
  2034                           	opt stack 0
  2035  000069                     LCD_Fill@pColour:
  2036                           	opt stack 0
  2037  000069                     LCD_FillRectangle@pColour:
  2038                           	opt stack 0
  2039  000069                     Byte_GetPair@pInput:
  2040                           	opt stack 0
  2041  000069                     Console_MakeField@Index:
  2042                           	opt stack 0
  2043  000069                     ___lwmod@divisor:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x9
  2047  000069                     	ds	1
  2048  00006A                     Byte_SetZone@MASK:
  2049                           	opt stack 0
  2050  00006A                     ___xxtofl@arg:
  2051                           	opt stack 0
  2052                           
  2053                           ; 4 bytes @ 0xA
  2054  00006A                     	ds	1
  2055  00006B                     LCD_Fill@i:
  2056                           	opt stack 0
  2057  00006B                     Byte_GetPair@pPair:
  2058                           	opt stack 0
  2059  00006B                     Console_MakeField@pInput:
  2060                           	opt stack 0
  2061  00006B                     ___lwmod@counter:
  2062                           	opt stack 0
  2063  00006B                     Byte_SetPair@pInput:
  2064                           	opt stack 0
  2065  00006B                     Byte_SetQuad@pInput:
  2066                           	opt stack 0
  2067  00006B                     LCD_FillRectangle@pPoint:
  2068                           	opt stack 0
  2069                           
  2070                           ; 4 bytes @ 0xB
  2071  00006B                     	ds	1
  2072  00006C                     LCD_Fill@j:
  2073                           	opt stack 0
  2074  00006C                     ___lldiv@counter:
  2075                           	opt stack 0
  2076  00006C                     ___fldiv@sign:
  2077                           	opt stack 0
  2078  00006C                     Word_GetPair@pInput:
  2079                           	opt stack 0
  2080  00006C                     itos@input:
  2081                           	opt stack 0
  2082  00006C                     Console_MakeField@Column:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0xC
  2086  00006C                     	ds	1
  2087  00006D                     Byte_SetPair@pPair:
  2088                           	opt stack 0
  2089  00006D                     Byte_SetQuad@pQuad:
  2090                           	opt stack 0
  2091  00006D                     Console_Tab@t:
  2092                           	opt stack 0
  2093  00006D                     Timer0_Init@pFrequency:
  2094                           	opt stack 0
  2095  00006D                     Timer2_Init@pFrequency:
  2096                           	opt stack 0
  2097  00006D                     ___fldiv@rem:
  2098                           	opt stack 0
  2099                           
  2100                           ; 4 bytes @ 0xD
  2101  00006D                     	ds	1
  2102  00006E                     ?___flmul:
  2103                           	opt stack 0
  2104  00006E                     Byte_SetPair@pValue:
  2105                           	opt stack 0
  2106  00006E                     Byte_SetQuad@pValue:
  2107                           	opt stack 0
  2108  00006E                     Word_GetPair@pPair:
  2109                           	opt stack 0
  2110  00006E                     Console_Tab@i:
  2111                           	opt stack 0
  2112  00006E                     itos@destination:
  2113                           	opt stack 0
  2114  00006E                     _Console_MakeField$10974:
  2115                           	opt stack 0
  2116  00006E                     ___flmul@b:
  2117                           	opt stack 0
  2118                           
  2119                           ; 4 bytes @ 0xE
  2120  00006E                     	ds	1
  2121  00006F                     Console_Tab@c:
  2122                           	opt stack 0
  2123  00006F                     Port_SetPin@pInput:
  2124                           	opt stack 0
  2125  00006F                     Port_Set@pInput:
  2126                           	opt stack 0
  2127  00006F                     SPI_MinSpeed@pInput:
  2128                           	opt stack 0
  2129  00006F                     SPI_MaxSpeed@pInput:
  2130                           	opt stack 0
  2131  00006F                     Word_SetPair@pInput:
  2132                           	opt stack 0
  2133  00006F                     PortProperty_Valid@pInput:
  2134                           	opt stack 0
  2135  00006F                     LCD_FillRectangle@pSize:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0xF
  2139  00006F                     	ds	1
  2140  000070                     ??_Console_PrintChar:
  2141  000070                     Console_MakeField@x:
  2142                           	opt stack 0
  2143  000070                     itos@Data:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x10
  2147  000070                     	ds	1
  2148  000071                     ??_Timer2_Init:
  2149  000071                     ??_Timer0_Init:
  2150  000071                     Port_SetPin@pPin:
  2151                           	opt stack 0
  2152  000071                     Port_Set@pValue:
  2153                           	opt stack 0
  2154  000071                     Word_SetPair@pPair:
  2155                           	opt stack 0
  2156  000071                     PortProperty_Valid@pPinDrive:
  2157                           	opt stack 0
  2158  000071                     Console_MakeField@y:
  2159                           	opt stack 0
  2160  000071                     ___fldiv@new_exp:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x11
  2164  000071                     	ds	1
  2165  000072                     ??_Port_Set:
  2166  000072                     Port_SetPin@pValue:
  2167                           	opt stack 0
  2168  000072                     Word_SetPair@pValue:
  2169                           	opt stack 0
  2170  000072                     PortProperty_Valid@pPin:
  2171                           	opt stack 0
  2172  000072                     LCD_DrawField@pField:
  2173                           	opt stack 0
  2174  000072                     itos@Length:
  2175                           	opt stack 0
  2176  000072                     Timer2_Init@RDIV:
  2177                           	opt stack 0
  2178  000072                     ___flmul@a:
  2179                           	opt stack 0
  2180                           
  2181                           ; 4 bytes @ 0x12
  2182  000072                     	ds	1
  2183  000073                     ??_PortProperty_Valid:
  2184  000073                     ??_LCD_FillRectangle:
  2185  000073                     Port_SetPin@Type:
  2186                           	opt stack 0
  2187  000073                     Console_PrintChar@pInput:
  2188                           	opt stack 0
  2189  000073                     Timer0_Init@pCPUClock:
  2190                           	opt stack 0
  2191  000073                     ___fldiv@grs:
  2192                           	opt stack 0
  2193                           
  2194                           ; 4 bytes @ 0x13
  2195  000073                     	ds	1
  2196  000074                     LED_Set@pValue:
  2197                           	opt stack 0
  2198  000074                     putch@c:
  2199                           	opt stack 0
  2200  000074                     Port_TogglePin@pInput:
  2201                           	opt stack 0
  2202  000074                     itos@Out:
  2203                           	opt stack 0
  2204  000074                     LCD_DrawField@pPoint:
  2205                           	opt stack 0
  2206                           
  2207                           ; 4 bytes @ 0x14
  2208  000074                     	ds	1
  2209  000075                     ?_printf:
  2210                           	opt stack 0
  2211  000075                     LCD_FillRectangle@i:
  2212                           	opt stack 0
  2213  000075                     LED_Set@pLED:
  2214                           	opt stack 0
  2215  000075                     printf@f:
  2216                           	opt stack 0
  2217  000075                     PortProperty_Valid@Errors:
  2218                           	opt stack 0
  2219                           
  2220                           ; 16 bytes @ 0x15
  2221  000075                     	ds	1
  2222  000076                     ??___flmul:
  2223  000076                     LCD_FillRectangle@j:
  2224                           	opt stack 0
  2225  000076                     Port_TogglePin@pPin:
  2226                           	opt stack 0
  2227  000076                     HMI_SetNumber@pInput:
  2228                           	opt stack 0
  2229  000076                     Timer2_Init@pCPUClock:
  2230                           	opt stack 0
  2231                           
  2232                           ; 4 bytes @ 0x16
  2233  000076                     	ds	1
  2234  000077                     Port_TogglePin@Value:
  2235                           	opt stack 0
  2236  000077                     ___fldiv@bexp:
  2237                           	opt stack 0
  2238  000077                     Timer0_Init@DIVIDE:
  2239                           	opt stack 0
  2240                           
  2241                           ; 4 bytes @ 0x17
  2242  000077                     	ds	1
  2243  000078                     LED_Toggle@pLED:
  2244                           	opt stack 0
  2245  000078                     ___fldiv@aexp:
  2246                           	opt stack 0
  2247  000078                     LCD_DrawField@pSize:
  2248                           	opt stack 0
  2249                           
  2250                           ; 4 bytes @ 0x18
  2251  000078                     	ds	1
  2252  000079                     ??_printf:
  2253  000079                     Event_DIPSwitch@pState:
  2254                           	opt stack 0
  2255  000079                     Event_TestButton@pState:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x19
  2259  000079                     	ds	1
  2260  00007A                     Event_DIPSwitch@Bar:
  2261                           	opt stack 0
  2262  00007A                     printf@flag:
  2263                           	opt stack 0
  2264  00007A                     ___flmul@sign:
  2265                           	opt stack 0
  2266  00007A                     Timer2_Init@DIVIDE:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x1A
  2270  00007A                     	ds	1
  2271  00007B                     printf@prec:
  2272                           	opt stack 0
  2273  00007B                     ___flmul@aexp:
  2274                           	opt stack 0
  2275  00007B                     Button_Poll@pButton:
  2276                           	opt stack 0
  2277  00007B                     Motor_Speed@pMotor:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x1B
  2281  00007B                     	ds	1
  2282  00007C                     ??_LCD_DrawField:
  2283  00007C                     printf@ap:
  2284                           	opt stack 0
  2285  00007C                     ___flmul@grs:
  2286                           	opt stack 0
  2287                           
  2288                           ; 4 bytes @ 0x1C
  2289  00007C                     	ds	1
  2290  00007D                     Button_Poll@pIncrement:
  2291                           	opt stack 0
  2292  00007D                     Motor_Speed@pFrequency:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x1D
  2296  00007D                     	ds	1
  2297  00007E                     ??_Button_Poll:
  2298  00007E                     LCD_DrawField@count:
  2299                           	opt stack 0
  2300  00007E                     printf@val:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x1E
  2304  00007E                     	ds	1
  2305  00007F                     
  2306                           ; 1 bytes @ 0x1F
  2307  00007F                     	ds	1
  2308  000080                     LCD_DrawField@xmax:
  2309                           	opt stack 0
  2310  000080                     printf@c:
  2311                           	opt stack 0
  2312  000080                     ___flmul@bexp:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x20
  2316  000080                     	ds	1
  2317  000081                     LCD_DrawField@ymax:
  2318                           	opt stack 0
  2319  000081                     ___flmul@prod:
  2320                           	opt stack 0
  2321                           
  2322                           ; 4 bytes @ 0x21
  2323  000081                     	ds	1
  2324  000082                     LCD_DrawField@i:
  2325                           	opt stack 0
  2326  000082                     Port_Set@TypeRequired:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x22
  2330  000082                     	ds	1
  2331  000083                     ??_Console_Render:
  2332  000083                     Button_Poll@Pin:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x23
  2336  000083                     	ds	1
  2337  000084                     ??_inputVar:
  2338  000084                     Port_Set@TypeActual:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x24
  2342  000084                     	ds	1
  2343  000085                     PortProperty_Valid@Pair:
  2344                           	opt stack 0
  2345  000085                     Console_Render@temp:
  2346                           	opt stack 0
  2347  000085                     ___flmul@temp:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x25
  2351  000085                     	ds	1
  2352  000086                     Port_Set@Type:
  2353                           	opt stack 0
  2354  000086                     Port_CheckPairType@pInput:
  2355                           	opt stack 0
  2356  000086                     Port_SetPinType@pInput:
  2357                           	opt stack 0
  2358  000086                     Console_Render@lCursor:
  2359                           	opt stack 0
  2360                           
  2361                           ; 4 bytes @ 0x26
  2362  000086                     	ds	1
  2363  000087                     ?___fladd:
  2364                           	opt stack 0
  2365  000087                     ?_ADC_Voltage:
  2366                           	opt stack 0
  2367  000087                     ?___fltol:
  2368                           	opt stack 0
  2369  000087                     ADC_Voltage@pInput:
  2370                           	opt stack 0
  2371  000087                     ___fltol@f1:
  2372                           	opt stack 0
  2373  000087                     ___fladd@b:
  2374                           	opt stack 0
  2375                           
  2376                           ; 4 bytes @ 0x27
  2377  000087                     	ds	1
  2378  000088                     Port_CheckPairType@pPair:
  2379                           	opt stack 0
  2380  000088                     Port_SetPinType@pPin:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x28
  2384  000088                     	ds	1
  2385  000089                     Port_CheckPairType@pDrive:
  2386                           	opt stack 0
  2387  000089                     Port_SetPinType@pType:
  2388                           	opt stack 0
  2389                           
  2390                           ; 1 bytes @ 0x29
  2391  000089                     	ds	1
  2392  00008A                     Port_CheckPairType@Pin1:
  2393                           	opt stack 0
  2394  00008A                     Port_SetPinType@Output:
  2395                           	opt stack 0
  2396  00008A                     Console_Render@x:
  2397                           	opt stack 0
  2398                           
  2399                           ; 1 bytes @ 0x2A
  2400  00008A                     	ds	1
  2401  00008B                     ??_ADC_Voltage:
  2402  00008B                     ??___fltol:
  2403  00008B                     Port_CheckPairType@Pin2:
  2404                           	opt stack 0
  2405  00008B                     Console_Render@y:
  2406                           	opt stack 0
  2407  00008B                     Port_SetPinType@Props:
  2408                           	opt stack 0
  2409  00008B                     ___fladd@a:
  2410                           	opt stack 0
  2411                           
  2412                           ; 4 bytes @ 0x2B
  2413  00008B                     	ds	1
  2414  00008C                     Port_CheckPairType@Output:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x2C
  2418  00008C                     	ds	1
  2419  00008D                     LED_Init@pLED:
  2420                           	opt stack 0
  2421  00008D                     Port_CheckPairType@Props:
  2422                           	opt stack 0
  2423  00008D                     Motor_Init@pMotor:
  2424                           	opt stack 0
  2425  00008D                     SPI_Init@pClock:
  2426                           	opt stack 0
  2427  00008D                     ADC_Voltage@max:
  2428                           	opt stack 0
  2429                           
  2430                           ; 4 bytes @ 0x2D
  2431  00008D                     	ds	2
  2432  00008F                     ??___fladd:
  2433  00008F                     ___fltol@sign1:
  2434                           	opt stack 0
  2435  00008F                     Port_CheckQuadType@pInput:
  2436                           	opt stack 0
  2437  00008F                     Motor_Init@pAddress:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x2F
  2441  00008F                     	ds	1
  2442  000090                     ___fltol@exp1:
  2443                           	opt stack 0
  2444                           
  2445                           ; 1 bytes @ 0x30
  2446  000090                     	ds	1
  2447  000091                     Port_CheckQuadType@pQuad:
  2448                           	opt stack 0
  2449  000091                     SPI_Init@pChannel:
  2450                           	opt stack 0
  2451  000091                     ADC_Voltage@ref:
  2452                           	opt stack 0
  2453                           
  2454                           ; 4 bytes @ 0x31
  2455  000091                     	ds	1
  2456  000092                     Port_CheckQuadType@pDrive:
  2457                           	opt stack 0
  2458  000092                     SPI_Init@pMode:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0x32
  2462  000092                     	ds	1
  2463  000093                     Port_CheckQuadType@Pair1:
  2464                           	opt stack 0
  2465  000093                     SPI_Init@pInput:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x33
  2469  000093                     	ds	1
  2470  000094                     Port_CheckQuadType@Pair2:
  2471                           	opt stack 0
  2472                           
  2473                           ; 1 bytes @ 0x34
  2474  000094                     	ds	1
  2475  000095                     ??_LCD_Init:
  2476  000095                     Port_CheckQuadType@Output:
  2477                           	opt stack 0
  2478  000095                     ADC_Voltage@output:
  2479                           	opt stack 0
  2480                           
  2481                           ; 4 bytes @ 0x35
  2482  000095                     	ds	1
  2483  000096                     Port_CheckPortType@pInput:
  2484                           	opt stack 0
  2485  000096                     Port_SetQuadType@pInput:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x36
  2489  000096                     	ds	1
  2490  000097                     ___fladd@signs:
  2491                           	opt stack 0
  2492  000097                     LCD_Init@i:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x37
  2496  000097                     	ds	1
  2497  000098                     Port_CheckPortType@pDrive:
  2498                           	opt stack 0
  2499  000098                     Port_SetQuadType@pQuad:
  2500                           	opt stack 0
  2501  000098                     ___fladd@aexp:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x38
  2505  000098                     	ds	1
  2506  000099                     Port_CheckPortType@Output:
  2507                           	opt stack 0
  2508  000099                     Port_SetQuadType@pType:
  2509                           	opt stack 0
  2510  000099                     ___fladd@bexp:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x39
  2514  000099                     	ds	1
  2515  00009A                     Port_SetQuadType@Output:
  2516                           	opt stack 0
  2517  00009A                     ___fladd@grs:
  2518                           	opt stack 0
  2519  00009A                     Port_SetType@pInput:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x3A
  2523  00009A                     	ds	1
  2524  00009B                     ?___flsub:
  2525                           	opt stack 0
  2526  00009B                     ?_floor:
  2527                           	opt stack 0
  2528  00009B                     ?_eval_poly:
  2529                           	opt stack 0
  2530  00009B                     Button_Init@pInput:
  2531                           	opt stack 0
  2532  00009B                     ___flsub@b:
  2533                           	opt stack 0
  2534  00009B                     floor@x:
  2535                           	opt stack 0
  2536  00009B                     eval_poly@x:
  2537                           	opt stack 0
  2538                           
  2539                           ; 4 bytes @ 0x3B
  2540  00009B                     	ds	1
  2541  00009C                     Port_SetType@pType:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x3C
  2545  00009C                     	ds	1
  2546  00009D                     ??_Port_SetType:
  2547  00009D                     Button_Init@pThreshold:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x3D
  2551  00009D                     	ds	2
  2552  00009F                     Port_SetType@Output:
  2553                           	opt stack 0
  2554  00009F                     eval_poly@d:
  2555                           	opt stack 0
  2556  00009F                     Button_Init@pInitIO:
  2557                           	opt stack 0
  2558  00009F                     ___flsub@a:
  2559                           	opt stack 0
  2560  00009F                     floor@i:
  2561                           	opt stack 0
  2562                           
  2563                           ; 4 bytes @ 0x3F
  2564  00009F                     	ds	1
  2565  0000A0                     Port_Init@pInput:
  2566                           	opt stack 0
  2567                           
  2568                           ; 2 bytes @ 0x40
  2569  0000A0                     	ds	1
  2570  0000A1                     eval_poly@n:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x41
  2574  0000A1                     	ds	1
  2575  0000A2                     Port_Init@pPort:
  2576                           	opt stack 0
  2577  0000A2                     Button_Init@pGetState:
  2578                           	opt stack 0
  2579                           
  2580                           ; 3 bytes @ 0x42
  2581  0000A2                     	ds	1
  2582  0000A3                     ??_eval_poly:
  2583  0000A3                     ??_Port_Init:
  2584  0000A3                     floor@expon:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x43
  2588  0000A3                     	ds	2
  2589  0000A5                     Port_Init@i:
  2590                           	opt stack 0
  2591  0000A5                     Button_Init@pFunction:
  2592                           	opt stack 0
  2593                           
  2594                           ; 3 bytes @ 0x45
  2595  0000A5                     	ds	1
  2596  0000A6                     
  2597                           ; 1 bytes @ 0x46
  2598  0000A6                     	ds	1
  2599  0000A7                     eval_poly@res:
  2600                           	opt stack 0
  2601                           
  2602                           ; 4 bytes @ 0x47
  2603  0000A7                     	ds	1
  2604  0000A8                     HMI_Init@in:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x48
  2608  0000A8                     	ds	2
  2609  0000AA                     
  2610                           ; 1 bytes @ 0x4A
  2611  0000AA                     	ds	1
  2612  0000AB                     ?_log:
  2613                           	opt stack 0
  2614  0000AB                     ?_ldexp:
  2615                           	opt stack 0
  2616  0000AB                     ldexp@value:
  2617                           	opt stack 0
  2618  0000AB                     log@x:
  2619                           	opt stack 0
  2620                           
  2621                           ; 4 bytes @ 0x4B
  2622  0000AB                     	ds	4
  2623  0000AF                     ldexp@newexp:
  2624                           	opt stack 0
  2625  0000AF                     log@exponent:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x4F
  2629  0000AF                     	ds	2
  2630  0000B1                     ??_ldexp:
  2631                           
  2632                           ; 1 bytes @ 0x51
  2633  0000B1                     	ds	2
  2634  0000B3                     ?_exp:
  2635                           	opt stack 0
  2636  0000B3                     exp@x:
  2637                           	opt stack 0
  2638                           
  2639                           ; 4 bytes @ 0x53
  2640  0000B3                     	ds	4
  2641  0000B7                     _exp$15178:
  2642                           	opt stack 0
  2643                           
  2644                           ; 4 bytes @ 0x57
  2645  0000B7                     	ds	4
  2646  0000BB                     exp@exponent:
  2647                           	opt stack 0
  2648                           
  2649                           ; 2 bytes @ 0x5B
  2650  0000BB                     	ds	2
  2651  0000BD                     exp@sign:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x5D
  2655  0000BD                     	ds	1
  2656  0000BE                     ?_pow:
  2657                           	opt stack 0
  2658  0000BE                     pow@x:
  2659                           	opt stack 0
  2660                           
  2661                           ; 4 bytes @ 0x5E
  2662  0000BE                     	ds	4
  2663  0000C2                     pow@y:
  2664                           	opt stack 0
  2665                           
  2666                           ; 4 bytes @ 0x62
  2667  0000C2                     	ds	4
  2668  0000C6                     ??_printToScreen:
  2669                           
  2670                           ; 1 bytes @ 0x66
  2671  0000C6                     	ds	2
  2672  0000C8                     ??_main:
  2673                           
  2674                           ; 1 bytes @ 0x68
  2675  0000C8                     	ds	2
  2676  0000CA                     main@rotation:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x6A
  2680  0000CA                     	ds	2
  2681  0000CC                     main@movetoPos:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x6C
  2685  0000CC                     	ds	2
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           postinc0	equ	0xFEE
  2691                           wreg	equ	0xFE8
  2692                           postdec1	equ	0xFE5
  2693                           fsr1h	equ	0xFE2
  2694                           fsr1l	equ	0xFE1
  2695                           
  2696                           	psect	cstackCOMRAM
  2697  000001                     __pcstackCOMRAM:
  2698                           	opt stack 0
  2699  000001                     i2Byte_SetBit@pInput:
  2700                           	opt stack 0
  2701  000001                     i2Byte_GetZone@pInput:
  2702                           	opt stack 0
  2703  000001                     i2delay_us@us:
  2704                           	opt stack 0
  2705  000001                     i2MXK_Queue@pCallback:
  2706                           	opt stack 0
  2707                           
  2708                           ; 3 bytes @ 0x0
  2709  000001                     	ds	2
  2710  000003                     i2Byte_SetBit@pBit:
  2711                           	opt stack 0
  2712  000003                     i2Byte_GetZone@pMax:
  2713                           	opt stack 0
  2714  000003                     i2delay_us@u:
  2715                           	opt stack 0
  2716                           
  2717                           ; 4 bytes @ 0x2
  2718  000003                     	ds	1
  2719  000004                     i2Byte_SetBit@pValue:
  2720                           	opt stack 0
  2721  000004                     i2Byte_GetZone@pChunk:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0x3
  2725  000004                     	ds	1
  2726  000005                     ??i2_Byte_SetBit:
  2727  000005                     i2Byte_GetZone@pChunkSize:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x4
  2731  000005                     	ds	1
  2732  000006                     ??i2_Byte_GetZone:
  2733                           
  2734                           ; 1 bytes @ 0x5
  2735  000006                     	ds	1
  2736  000007                     i2Byte_GetZone@MASK:
  2737                           	opt stack 0
  2738  000007                     i2MXK_SwitchTo@CUR:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x6
  2742  000007                     	ds	1
  2743  000008                     i2Byte_GetZone@Offset:
  2744                           	opt stack 0
  2745  000008                     i2MXK_SwitchTo@pModule:
  2746                           	opt stack 0
  2747                           
  2748                           ; 1 bytes @ 0x7
  2749  000008                     	ds	1
  2750  000009                     i2Byte_GetZone@Output:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x8
  2754  000009                     	ds	1
  2755  00000A                     i2Byte_GetPair@pInput:
  2756                           	opt stack 0
  2757                           
  2758                           ; 2 bytes @ 0x9
  2759  00000A                     	ds	2
  2760  00000C                     i2Byte_GetPair@pPair:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0xB
  2764  00000C                     	ds	1
  2765  00000D                     i2Word_GetPair@pInput:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0xC
  2769  00000D                     	ds	2
  2770  00000F                     i2Word_GetPair@pPair:
  2771                           	opt stack 0
  2772                           
  2773                           ; 1 bytes @ 0xE
  2774  00000F                     	ds	1
  2775  000010                     i2Port_SetPin@pInput:
  2776                           	opt stack 0
  2777                           
  2778                           ; 2 bytes @ 0xF
  2779  000010                     	ds	2
  2780  000012                     i2Port_SetPin@pPin:
  2781                           	opt stack 0
  2782                           
  2783                           ; 1 bytes @ 0x11
  2784  000012                     	ds	1
  2785  000013                     i2Port_SetPin@pValue:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x12
  2789  000013                     	ds	1
  2790  000014                     i2Port_SetPin@Type:
  2791                           	opt stack 0
  2792                           
  2793                           ; 1 bytes @ 0x13
  2794  000014                     	ds	1
  2795  000015                     
  2796                           ; 1 bytes @ 0x14
  2797  000015                     	ds	2
  2798  000017                     ??_ISR_Function:
  2799                           
  2800                           ; 1 bytes @ 0x16
  2801  000017                     	ds	14
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1h	equ	0xFE2
  2810                           fsr1l	equ	0xFE1
  2811                           
  2812 ;;
  2813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2814 ;;
  2815 ;; *************** function _main *****************
  2816 ;; Defined at:
  2817 ;;		line 136 in file "main.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  movetoPos       2  108[BANK0 ] int 
  2822 ;;  rotation        2  106[BANK0 ] int 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;Total ram usage:        6 bytes
  2837 ;; Hardware stack levels required when called:   18
  2838 ;; This function calls:
  2839 ;;		_MXK_BlockSwitchTo
  2840 ;;		_MXK_Dequeue
  2841 ;;		_MXK_Release
  2842 ;;		_Motor_Move
  2843 ;;		_Motor_Speed
  2844 ;;		___wmul
  2845 ;;		_init
  2846 ;;		_inputVar
  2847 ;;		_printToScreen
  2848 ;; This function is called by:
  2849 ;;		Startup code after reset
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text0
  2854  013952                     __ptext0:
  2855                           	opt stack 0
  2856  013952                     _main:
  2857                           	opt stack 13
  2858                           
  2859                           ;main.c: 137: init();
  2860                           
  2861                           ;incstack = 0
  2862  013952  ECE5  F0AD         	call	_init	;wreg free
  2863  013956                     l15383:
  2864                           
  2865                           ;main.c: 140: inputVar();
  2866  013956  EC33  F0A5         	call	_inputVar	;wreg free
  2867                           
  2868                           ;main.c: 143: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2869  01395A  0E01               	movlw	1
  2870  01395C  EC7C  F0B1         	call	_MXK_BlockSwitchTo
  2871  013960  0900               	iorlw	0
  2872  013962  B4D8               	btfsc	status,2,c
  2873  013964  D008               	goto	l15393
  2874                           
  2875                           ;main.c: 144: printToScreen();
  2876  013966  EC02  F08D         	call	_printToScreen	;wreg free
  2877                           
  2878                           ;main.c: 145: if (MXK_Release())
  2879  01396A  EC7F  F0B4         	call	_MXK_Release	;wreg free
  2880  01396E  0900               	iorlw	0
  2881  013970  A4D8               	btfss	status,2,c
  2882                           
  2883                           ;main.c: 146: MXK_Dequeue();
  2884  013972  EC98  F0B2         	call	_MXK_Dequeue	;wreg free
  2885  013976                     l15393:
  2886                           
  2887                           ;main.c: 147: }
  2888                           ;main.c: 150: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2889  013976  0E08               	movlw	8
  2890  013978  EC7C  F0B1         	call	_MXK_BlockSwitchTo
  2891  01397C  0900               	iorlw	0
  2892  01397E  A4D8               	btfss	status,2,c
  2893  013980  D067               	goto	l15417
  2894  013982  D7E9               	goto	l15383
  2895  013984                     l15397:
  2896                           
  2897                           ;main.c: 153: Motor_Speed(&Stepper, (Speed*1000L));
  2898  013984  0EBD               	movlw	low _Stepper
  2899  013986  0100               	movlb	0	; () banked
  2900  013988  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  2901  01398A  0E01               	movlw	high _Stepper
  2902  01398C  0100               	movlb	0	; () banked
  2903  01398E  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  2904  013990  C0F6  F060         	movff	_Speed,___wmul@multiplier
  2905  013994  C0F7  F061         	movff	_Speed+1,___wmul@multiplier+1
  2906  013998  0E03               	movlw	3
  2907  01399A  0100               	movlb	0	; () banked
  2908  01399C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2909  01399E  0EE8               	movlw	232
  2910  0139A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2911  0139A2  EC2F  F0B2         	call	___wmul	;wreg free
  2912  0139A6  C060  F07D         	movff	?___wmul,Motor_Speed@pFrequency
  2913  0139AA  C061  F07E         	movff	?___wmul+1,Motor_Speed@pFrequency+1
  2914  0139AE  EC3B  F0B3         	call	_Motor_Speed	;wreg free
  2915                           
  2916                           ;main.c: 154: Motor_Move(&Stepper, Direction);
  2917  0139B2  0EBD               	movlw	low _Stepper
  2918  0139B4  0100               	movlb	0	; () banked
  2919  0139B6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  2920  0139B8  0E01               	movlw	high _Stepper
  2921  0139BA  0100               	movlb	0	; () banked
  2922  0139BC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  2923  0139BE  C0F8  F065         	movff	_Direction,Motor_Move@pDelta
  2924  0139C2  C0F9  F066         	movff	_Direction+1,Motor_Move@pDelta+1
  2925  0139C6  ECF6  F0B1         	call	_Motor_Move	;wreg free
  2926                           
  2927                           ;main.c: 155: break;
  2928  0139CA  D056               	goto	l15419
  2929  0139CC                     l15401:
  2930                           
  2931                           ;main.c: 157: if (lockedMode) {
  2932  0139CC  0100               	movlb	0	; () banked
  2933  0139CE  51FC               	movf	_lockedMode& (0+255),w,b
  2934  0139D0  B4D8               	btfsc	status,2,c
  2935  0139D2  D008               	goto	l2070
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 158: lockedMode = 0;
  2939  0139D4  0E00               	movlw	0
  2940  0139D6  0100               	movlb	0	; () banked
  2941  0139D8  6FFC               	movwf	_lockedMode& (0+255),b
  2942                           
  2943                           ;main.c: 159: Stepper.mDelta = 0;
  2944  0139DA  0E00               	movlw	0
  2945  0139DC  0101               	movlb	1	; () banked
  2946  0139DE  6FBE               	movwf	(_Stepper+1)& (0+255),b
  2947  0139E0  0E00               	movlw	0
  2948  0139E2  6FBD               	movwf	_Stepper& (0+255),b
  2949  0139E4                     l2070:
  2950                           
  2951                           ;main.c: 160: }
  2952                           ;main.c: 161: if (downState && Stepper.mDelta == 0) {
  2953  0139E4  0100               	movlb	0	; () banked
  2954  0139E6  51E4               	movf	_downState& (0+255),w,b
  2955  0139E8  B4D8               	btfsc	status,2,c
  2956  0139EA  D046               	goto	l15419
  2957                           
  2958                           ; BSR set to: 0
  2959  0139EC  0101               	movlb	1	; () banked
  2960  0139EE  51BD               	movf	_Stepper& (0+255),w,b
  2961  0139F0  0101               	movlb	1	; () banked
  2962  0139F2  11BE               	iorwf	(_Stepper+1)& (0+255),w,b
  2963  0139F4  A4D8               	btfss	status,2,c
  2964  0139F6  D040               	goto	l15419
  2965                           
  2966                           ; BSR set to: 1
  2967                           ;main.c: 162: Motor_Speed(&Stepper, (1*1000L));
  2968  0139F8  0EBD               	movlw	low _Stepper
  2969  0139FA  0100               	movlb	0	; () banked
  2970  0139FC  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  2971  0139FE  0E01               	movlw	high _Stepper
  2972  013A00  0100               	movlb	0	; () banked
  2973  013A02  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  2974  013A04  0E03               	movlw	3
  2975  013A06  0100               	movlb	0	; () banked
  2976  013A08  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  2977  013A0A  0EE8               	movlw	232
  2978  013A0C  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  2979  013A0E  EC3B  F0B3         	call	_Motor_Speed	;wreg free
  2980                           
  2981                           ;main.c: 163: Motor_Move(&Stepper, Steps);
  2982  013A12  0EBD               	movlw	low _Stepper
  2983  013A14  0100               	movlb	0	; () banked
  2984  013A16  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  2985  013A18  0E01               	movlw	high _Stepper
  2986  013A1A  0100               	movlb	0	; () banked
  2987  013A1C  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  2988  013A1E  C0D6  F065         	movff	_Steps,Motor_Move@pDelta
  2989  013A22  C0D7  F066         	movff	_Steps+1,Motor_Move@pDelta+1
  2990  013A26  ECF6  F0B1         	call	_Motor_Move	;wreg free
  2991                           
  2992                           ;main.c: 164: }
  2993                           ;main.c: 165: break;
  2994  013A2A  D026               	goto	l15419
  2995  013A2C                     l15411:
  2996                           
  2997                           ;main.c: 167: if (lockedMode) {
  2998  013A2C  0100               	movlb	0	; () banked
  2999  013A2E  51FC               	movf	_lockedMode& (0+255),w,b
  3000  013A30  B4D8               	btfsc	status,2,c
  3001  013A32  D022               	goto	l15419
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 168: int rotation = 0;
  3005  013A34  0E00               	movlw	0
  3006  013A36  0100               	movlb	0	; () banked
  3007  013A38  6FCB               	movwf	(main@rotation+1)& (0+255),b
  3008  013A3A  0E00               	movlw	0
  3009  013A3C  6FCA               	movwf	main@rotation& (0+255),b
  3010                           
  3011                           ;main.c: 169: lockedMode = 0;
  3012  013A3E  0E00               	movlw	0
  3013  013A40  0100               	movlb	0	; () banked
  3014  013A42  6FFC               	movwf	_lockedMode& (0+255),b
  3015                           
  3016                           ;main.c: 170: int movetoPos = 0;
  3017  013A44  0E00               	movlw	0
  3018  013A46  0100               	movlb	0	; () banked
  3019  013A48  6FCD               	movwf	(main@movetoPos+1)& (0+255),b
  3020  013A4A  0E00               	movlw	0
  3021  013A4C  6FCC               	movwf	main@movetoPos& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 177: }
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;main.c: 176: break;
  3028                           
  3029                           ;main.c: 175: default:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;main.c: 171: }
  3033                           ;main.c: 174: break;
  3034  013A4E  D014               	goto	l15419
  3035  013A50                     l15417:
  3036  013A50  C0D4  F0C8         	movff	_dipMode,??_main
  3037  013A54  C0D5  F0C9         	movff	_dipMode+1,??_main+1
  3038                           
  3039                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3040                           ; Switch size 1, requested type "space"
  3041                           ; Number of cases is 1, Range of values is 0 to 0
  3042                           ; switch strategies available:
  3043                           ; Name         Instructions Cycles
  3044                           ; simple_byte            4     3 (average)
  3045                           ;	Chosen strategy is simple_byte
  3046  013A58  0100               	movlb	0	; () banked
  3047  013A5A  51C9               	movf	(??_main+1)& (0+255),w,b
  3048  013A5C  0A00               	xorlw	0	; case 0
  3049  013A5E  A4D8               	btfss	status,2,c
  3050  013A60  D00B               	goto	l15419
  3051                           
  3052                           ; BSR set to: 0
  3053                           ; Switch size 1, requested type "space"
  3054                           ; Number of cases is 3, Range of values is 1 to 4
  3055                           ; switch strategies available:
  3056                           ; Name         Instructions Cycles
  3057                           ; simple_byte           10     6 (average)
  3058                           ;	Chosen strategy is simple_byte
  3059  013A62  0100               	movlb	0	; () banked
  3060  013A64  51C8               	movf	??_main& (0+255),w,b
  3061  013A66  0A01               	xorlw	1	; case 1
  3062  013A68  B4D8               	btfsc	status,2,c
  3063  013A6A  D78C               	goto	l15397
  3064  013A6C  0A03               	xorlw	3	; case 2
  3065  013A6E  B4D8               	btfsc	status,2,c
  3066  013A70  D7AD               	goto	l15401
  3067  013A72  0A06               	xorlw	6	; case 4
  3068  013A74  B4D8               	btfsc	status,2,c
  3069  013A76  D7DA               	goto	l15411
  3070  013A78                     l15419:
  3071                           
  3072                           ;main.c: 178: if (MXK_Release())
  3073  013A78  EC7F  F0B4         	call	_MXK_Release	;wreg free
  3074  013A7C  0900               	iorlw	0
  3075  013A7E  B4D8               	btfsc	status,2,c
  3076  013A80  D76A               	goto	l15383
  3077                           
  3078                           ;main.c: 179: MXK_Dequeue();
  3079  013A82  EC98  F0B2         	call	_MXK_Dequeue	;wreg free
  3080                           
  3081                           ;main.c: 180: }
  3082                           ;main.c: 181: }
  3083  013A86  D767               	goto	l15383
  3084  013A88                     __end_of_main:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           fsr1h	equ	0xFE2
  3094                           fsr1l	equ	0xFE1
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _printToScreen *****************
  3098 ;; Defined at:
  3099 ;;		line 81 in file "main.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  ADCVoltage      4    0[BANK2 ] float 
  3104 ;;  IRDistance      2    8[BANK2 ] int 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Totals:         0       2       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;Total ram usage:       12 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:   13
  3121 ;; This function calls:
  3122 ;;		_ADC_Voltage
  3123 ;;		_Console_Render
  3124 ;;		_Console_SetForecolour
  3125 ;;		_HMI_Render
  3126 ;;		_HMI_SetNumber
  3127 ;;		___flmul
  3128 ;;		___fltol
  3129 ;;		_pow
  3130 ;;		_printf
  3131 ;; This function is called by:
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text1
  3137  011A04                     __ptext1:
  3138                           	opt stack 0
  3139  011A04                     _printToScreen:
  3140                           	opt stack 17
  3141                           
  3142                           ;main.c: 82: printf("%c", (char)35);
  3143                           
  3144                           ;incstack = 0
  3145  011A04  0EFB               	movlw	low STR_1
  3146  011A06  0100               	movlb	0	; () banked
  3147  011A08  6F75               	movwf	printf@f& (0+255),b
  3148  011A0A  0EFF               	movlw	high STR_1
  3149  011A0C  0100               	movlb	0	; () banked
  3150  011A0E  6F76               	movwf	(printf@f+1)& (0+255),b
  3151  011A10  0E00               	movlw	0
  3152  011A12  0100               	movlb	0	; () banked
  3153  011A14  6F78               	movwf	(?_printf+3)& (0+255),b
  3154  011A16  0E23               	movlw	35
  3155  011A18  6F77               	movwf	(?_printf+2)& (0+255),b
  3156  011A1A  EC48  F095         	call	_printf	;wreg free
  3157                           
  3158                           ;main.c: 83: Console_SetForecolour(0x07E0);
  3159  011A1E  0E07               	movlw	7
  3160  011A20  0100               	movlb	0	; () banked
  3161  011A22  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3162  011A24  0EE0               	movlw	224
  3163  011A26  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
  3164  011A28  ECDF  F0B4         	call	_Console_SetForecolour	;wreg free
  3165                           
  3166                           ;main.c: 84: printf("Jamin Early 99133391\n\n");
  3167  011A2C  0E7D               	movlw	low STR_2
  3168  011A2E  0100               	movlb	0	; () banked
  3169  011A30  6F75               	movwf	printf@f& (0+255),b
  3170  011A32  0EFF               	movlw	high STR_2
  3171  011A34  0100               	movlb	0	; () banked
  3172  011A36  6F76               	movwf	(printf@f+1)& (0+255),b
  3173  011A38  EC48  F095         	call	_printf	;wreg free
  3174                           
  3175                           ;main.c: 85: switch (dipMode) {
  3176  011A3C  D0B3               	goto	l14629
  3177  011A3E                     l14579:
  3178                           
  3179                           ;main.c: 87: printf("Continuous Mode:\n");
  3180  011A3E  0E94               	movlw	low STR_3
  3181  011A40  0100               	movlb	0	; () banked
  3182  011A42  6F75               	movwf	printf@f& (0+255),b
  3183  011A44  0EFF               	movlw	high STR_3
  3184  011A46  0100               	movlb	0	; () banked
  3185  011A48  6F76               	movwf	(printf@f+1)& (0+255),b
  3186  011A4A  EC48  F095         	call	_printf	;wreg free
  3187                           
  3188                           ;main.c: 88: printf("Direction: ");
  3189  011A4E  0EEA               	movlw	low STR_4
  3190  011A50  0100               	movlb	0	; () banked
  3191  011A52  6F75               	movwf	printf@f& (0+255),b
  3192  011A54  0EFF               	movlw	high STR_4
  3193  011A56  0100               	movlb	0	; () banked
  3194  011A58  6F76               	movwf	(printf@f+1)& (0+255),b
  3195  011A5A  EC48  F095         	call	_printf	;wreg free
  3196                           
  3197                           ;main.c: 89: if (Direction > 0) {
  3198  011A5E  0100               	movlb	0	; () banked
  3199  011A60  BFF9               	btfsc	(_Direction+1)& (0+255),7,b
  3200  011A62  D010               	goto	l14585
  3201  011A64  0100               	movlb	0	; () banked
  3202  011A66  51F9               	movf	(_Direction+1)& (0+255),w,b
  3203  011A68  E104               	bnz	u12440
  3204  011A6A  0100               	movlb	0	; () banked
  3205  011A6C  05F8               	decf	_Direction& (0+255),w,b
  3206  011A6E  A0D8               	btfss	status,0,c
  3207  011A70  D009               	goto	l14585
  3208  011A72                     u12440:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;main.c: 90: printf("CCW\n");
  3212  011A72  0EF6               	movlw	low STR_5
  3213  011A74  0100               	movlb	0	; () banked
  3214  011A76  6F75               	movwf	printf@f& (0+255),b
  3215  011A78  0EFF               	movlw	high STR_5
  3216  011A7A  0100               	movlb	0	; () banked
  3217  011A7C  6F76               	movwf	(printf@f+1)& (0+255),b
  3218  011A7E  EC48  F095         	call	_printf	;wreg free
  3219                           
  3220                           ;main.c: 91: } else {
  3221  011A82  D008               	goto	l2038
  3222  011A84                     l14585:
  3223                           
  3224                           ;main.c: 92: printf("CW\n");
  3225  011A84  0EF7               	movlw	low (STR_5+1)
  3226  011A86  0100               	movlb	0	; () banked
  3227  011A88  6F75               	movwf	printf@f& (0+255),b
  3228  011A8A  0EFF               	movlw	high (STR_5+1)
  3229  011A8C  0100               	movlb	0	; () banked
  3230  011A8E  6F76               	movwf	(printf@f+1)& (0+255),b
  3231  011A90  EC48  F095         	call	_printf	;wreg free
  3232  011A94                     l2038:
  3233                           
  3234                           ;main.c: 93: }
  3235                           ;main.c: 94: printf("Speed: %dHz\n", Speed);
  3236  011A94  0EC5               	movlw	low STR_7
  3237  011A96  0100               	movlb	0	; () banked
  3238  011A98  6F75               	movwf	printf@f& (0+255),b
  3239  011A9A  0EFF               	movlw	high STR_7
  3240  011A9C  0100               	movlb	0	; () banked
  3241  011A9E  6F76               	movwf	(printf@f+1)& (0+255),b
  3242  011AA0  C0F6  F077         	movff	_Speed,?_printf+2
  3243  011AA4  C0F7  F078         	movff	_Speed+1,?_printf+3
  3244  011AA8  EC48  F095         	call	_printf	;wreg free
  3245                           
  3246                           ;main.c: 95: if (leftState) {
  3247  011AAC  0100               	movlb	0	; () banked
  3248  011AAE  51E3               	movf	_leftState& (0+255),w,b
  3249  011AB0  B4D8               	btfsc	status,2,c
  3250  011AB2  D005               	goto	l14591
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 96: Direction = -200;
  3254  011AB4  0EFF               	movlw	255
  3255  011AB6  0100               	movlb	0	; () banked
  3256  011AB8  6FF9               	movwf	(_Direction+1)& (0+255),b
  3257  011ABA  0E38               	movlw	56
  3258  011ABC  D008               	goto	L1
  3259  011ABE                     l14591:
  3260                           
  3261                           ; BSR set to: 0
  3262  011ABE  0100               	movlb	0	; () banked
  3263  011AC0  51E2               	movf	_rightState& (0+255),w,b
  3264  011AC2  B4D8               	btfsc	status,2,c
  3265  011AC4  D006               	goto	l14595
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;main.c: 98: Direction = 200;
  3269  011AC6  0E00               	movlw	0
  3270  011AC8  0100               	movlb	0	; () banked
  3271  011ACA  6FF9               	movwf	(_Direction+1)& (0+255),b
  3272  011ACC  0EC8               	movlw	200
  3273  011ACE                     L1:
  3274  011ACE  6FF8               	movwf	_Direction& (0+255),b
  3275                           
  3276                           ;main.c: 99: } else if (upState) {
  3277  011AD0  D07E               	goto	l14631
  3278  011AD2                     l14595:
  3279                           
  3280                           ; BSR set to: 0
  3281  011AD2  0100               	movlb	0	; () banked
  3282  011AD4  51E5               	movf	_upState& (0+255),w,b
  3283  011AD6  B4D8               	btfsc	status,2,c
  3284  011AD8  D004               	goto	l14599
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 100: Speed++;
  3288  011ADA  0100               	movlb	0	; () banked
  3289  011ADC  4BF6               	infsnz	_Speed& (0+255),f,b
  3290  011ADE  2BF7               	incf	(_Speed+1)& (0+255),f,b
  3291                           
  3292                           ;main.c: 101: } else if (downState && Speed > 0) {
  3293  011AE0  D076               	goto	l14631
  3294  011AE2                     l14599:
  3295                           
  3296                           ; BSR set to: 0
  3297  011AE2  0100               	movlb	0	; () banked
  3298  011AE4  51E4               	movf	_downState& (0+255),w,b
  3299  011AE6  B4D8               	btfsc	status,2,c
  3300  011AE8  D072               	goto	l14631
  3301                           
  3302                           ; BSR set to: 0
  3303  011AEA  0100               	movlb	0	; () banked
  3304  011AEC  BFF7               	btfsc	(_Speed+1)& (0+255),7,b
  3305  011AEE  D06F               	goto	l14631
  3306  011AF0  0100               	movlb	0	; () banked
  3307  011AF2  51F7               	movf	(_Speed+1)& (0+255),w,b
  3308  011AF4  E104               	bnz	u12490
  3309  011AF6  0100               	movlb	0	; () banked
  3310  011AF8  05F6               	decf	_Speed& (0+255),w,b
  3311  011AFA  A0D8               	btfss	status,0,c
  3312  011AFC  D068               	goto	l14631
  3313  011AFE                     u12490:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 102: Speed--;
  3317  011AFE  0100               	movlb	0	; () banked
  3318  011B00  07F6               	decf	_Speed& (0+255),f,b
  3319  011B02  A0D8               	btfss	status,0,c
  3320  011B04  07F7               	decf	(_Speed+1)& (0+255),f,b
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 103: }
  3324                           ;main.c: 104: break;
  3325                           
  3326                           ; BSR set to: 0
  3327                           
  3328                           ; BSR set to: 0
  3329                           
  3330                           ; BSR set to: 0
  3331  011B06  D063               	goto	l14631
  3332  011B08                     l14605:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;main.c: 106: printf("Step Mode:\n");
  3336  011B08  0EDE               	movlw	low STR_8
  3337  011B0A  0100               	movlb	0	; () banked
  3338  011B0C  6F75               	movwf	printf@f& (0+255),b
  3339  011B0E  0EFF               	movlw	high STR_8
  3340  011B10  0100               	movlb	0	; () banked
  3341  011B12  6F76               	movwf	(printf@f+1)& (0+255),b
  3342  011B14  EC48  F095         	call	_printf	;wreg free
  3343                           
  3344                           ;main.c: 107: printf("Steps: %d\n\n", Steps);
  3345  011B18  0ED2               	movlw	low STR_9
  3346  011B1A  0100               	movlb	0	; () banked
  3347  011B1C  6F75               	movwf	printf@f& (0+255),b
  3348  011B1E  0EFF               	movlw	high STR_9
  3349  011B20  0100               	movlb	0	; () banked
  3350  011B22  6F76               	movwf	(printf@f+1)& (0+255),b
  3351  011B24  C0D6  F077         	movff	_Steps,?_printf+2
  3352  011B28  C0D7  F078         	movff	_Steps+1,?_printf+3
  3353  011B2C  EC48  F095         	call	_printf	;wreg free
  3354                           
  3355                           ;main.c: 108: if (leftState == 1 && Steps > 0) {
  3356  011B30  0100               	movlb	0	; () banked
  3357  011B32  05E3               	decf	_leftState& (0+255),w,b
  3358  011B34  A4D8               	btfss	status,2,c
  3359  011B36  D00F               	goto	l14613
  3360                           
  3361                           ; BSR set to: 0
  3362  011B38  0100               	movlb	0	; () banked
  3363  011B3A  BFD7               	btfsc	(_Steps+1)& (0+255),7,b
  3364  011B3C  D00C               	goto	l14613
  3365  011B3E  0100               	movlb	0	; () banked
  3366  011B40  51D7               	movf	(_Steps+1)& (0+255),w,b
  3367  011B42  E104               	bnz	u12510
  3368  011B44  0100               	movlb	0	; () banked
  3369  011B46  05D6               	decf	_Steps& (0+255),w,b
  3370  011B48  A0D8               	btfss	status,0,c
  3371  011B4A  D005               	goto	l14613
  3372  011B4C                     u12510:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 109: Steps--;
  3376  011B4C  0100               	movlb	0	; () banked
  3377  011B4E  07D6               	decf	_Steps& (0+255),f,b
  3378  011B50  A0D8               	btfss	status,0,c
  3379  011B52  07D7               	decf	(_Steps+1)& (0+255),f,b
  3380                           
  3381                           ;main.c: 110: } else if (rightState) {
  3382  011B54  D03C               	goto	l14631
  3383  011B56                     l14613:
  3384                           
  3385                           ; BSR set to: 0
  3386  011B56  0100               	movlb	0	; () banked
  3387  011B58  51E2               	movf	_rightState& (0+255),w,b
  3388  011B5A  B4D8               	btfsc	status,2,c
  3389  011B5C  D004               	goto	l14617
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;main.c: 111: Steps++;
  3393  011B5E  0100               	movlb	0	; () banked
  3394  011B60  4BD6               	infsnz	_Steps& (0+255),f,b
  3395  011B62  2BD7               	incf	(_Steps+1)& (0+255),f,b
  3396                           
  3397                           ;main.c: 112: } else if (upState) {
  3398  011B64  D034               	goto	l14631
  3399  011B66                     l14617:
  3400                           
  3401                           ; BSR set to: 0
  3402  011B66  0100               	movlb	0	; () banked
  3403  011B68  51E5               	movf	_upState& (0+255),w,b
  3404  011B6A  B4D8               	btfsc	status,2,c
  3405  011B6C  D030               	goto	l14631
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 113: Steps = 0;
  3409  011B6E  0E00               	movlw	0
  3410  011B70  0100               	movlb	0	; () banked
  3411  011B72  6FD7               	movwf	(_Steps+1)& (0+255),b
  3412  011B74  0E00               	movlw	0
  3413  011B76  6FD6               	movwf	_Steps& (0+255),b
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 116: }
  3417                           ;main.c: 117: break;
  3418                           
  3419                           ; BSR set to: 0
  3420                           
  3421                           ; BSR set to: 0
  3422                           
  3423                           ; BSR set to: 0
  3424                           
  3425                           ; BSR set to: 0
  3426                           
  3427                           ; BSR set to: 0
  3428                           
  3429                           ;main.c: 114: } else if (downState) {
  3430  011B78  D02A               	goto	l14631
  3431  011B7A                     l14623:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;main.c: 119: printf("Position Mode\n");
  3435  011B7A  0EB6               	movlw	low STR_10
  3436  011B7C  0100               	movlb	0	; () banked
  3437  011B7E  6F75               	movwf	printf@f& (0+255),b
  3438  011B80  0EFF               	movlw	high STR_10
  3439  011B82  0100               	movlb	0	; () banked
  3440  011B84  6F76               	movwf	(printf@f+1)& (0+255),b
  3441  011B86  EC48  F095         	call	_printf	;wreg free
  3442                           
  3443                           ;main.c: 121: break;
  3444  011B8A  D021               	goto	l14631
  3445  011B8C                     l14625:
  3446                           
  3447                           ;main.c: 123: lockedMode = 1;
  3448  011B8C  0E01               	movlw	1
  3449  011B8E  0100               	movlb	0	; () banked
  3450  011B90  6FFC               	movwf	_lockedMode& (0+255),b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 124: printf("Undefined\n\n\n\n\n\n");
  3454  011B92  0EA6               	movlw	low STR_11
  3455  011B94  0100               	movlb	0	; () banked
  3456  011B96  6F75               	movwf	printf@f& (0+255),b
  3457  011B98  0EFF               	movlw	high STR_11
  3458  011B9A  0100               	movlb	0	; () banked
  3459  011B9C  6F76               	movwf	(printf@f+1)& (0+255),b
  3460  011B9E  EC48  F095         	call	_printf	;wreg free
  3461                           
  3462                           ;main.c: 126: }
  3463  011BA2  D015               	goto	l14631
  3464  011BA4                     l14629:
  3465  011BA4  C0D4  F0C6         	movff	_dipMode,??_printToScreen
  3466  011BA8  C0D5  F0C7         	movff	_dipMode+1,??_printToScreen+1
  3467                           
  3468                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3469                           ; Switch size 1, requested type "space"
  3470                           ; Number of cases is 1, Range of values is 0 to 0
  3471                           ; switch strategies available:
  3472                           ; Name         Instructions Cycles
  3473                           ; simple_byte            4     3 (average)
  3474                           ;	Chosen strategy is simple_byte
  3475  011BAC  0100               	movlb	0	; () banked
  3476  011BAE  51C7               	movf	(??_printToScreen+1)& (0+255),w,b
  3477  011BB0  0A00               	xorlw	0	; case 0
  3478  011BB2  A4D8               	btfss	status,2,c
  3479  011BB4  D7EB               	goto	l14625
  3480                           
  3481                           ; BSR set to: 0
  3482                           ; Switch size 1, requested type "space"
  3483                           ; Number of cases is 3, Range of values is 1 to 4
  3484                           ; switch strategies available:
  3485                           ; Name         Instructions Cycles
  3486                           ; simple_byte           10     6 (average)
  3487                           ;	Chosen strategy is simple_byte
  3488  011BB6  0100               	movlb	0	; () banked
  3489  011BB8  51C6               	movf	??_printToScreen& (0+255),w,b
  3490  011BBA  0A01               	xorlw	1	; case 1
  3491  011BBC  B4D8               	btfsc	status,2,c
  3492  011BBE  D73F               	goto	l14579
  3493  011BC0  0A03               	xorlw	3	; case 2
  3494  011BC2  B4D8               	btfsc	status,2,c
  3495  011BC4  D7A1               	goto	l14605
  3496  011BC6  0A06               	xorlw	6	; case 4
  3497  011BC8  B4D8               	btfsc	status,2,c
  3498  011BCA  D7D7               	goto	l14623
  3499  011BCC  D7DF               	goto	l14625
  3500  011BCE                     l14631:
  3501                           
  3502                           ;main.c: 127: Console_Render();
  3503  011BCE  EC7E  F090         	call	_Console_Render	;wreg free
  3504                           
  3505                           ;main.c: 128: float ADCVoltage = ADC_Voltage(&ADC_AN0);
  3506  011BD2  0ED2               	movlw	low _ADC_AN0
  3507  011BD4  0100               	movlb	0	; () banked
  3508  011BD6  6F87               	movwf	ADC_Voltage@pInput& (0+255),b
  3509  011BD8  0E01               	movlw	high _ADC_AN0
  3510  011BDA  0100               	movlb	0	; () banked
  3511  011BDC  6F88               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3512  011BDE  EC8B  F0A0         	call	_ADC_Voltage	;wreg free
  3513  011BE2  C087  F264         	movff	?_ADC_Voltage,printToScreen@ADCVoltage
  3514  011BE6  C088  F265         	movff	?_ADC_Voltage+1,printToScreen@ADCVoltage+1
  3515  011BEA  C089  F266         	movff	?_ADC_Voltage+2,printToScreen@ADCVoltage+2
  3516  011BEE  C08A  F267         	movff	?_ADC_Voltage+3,printToScreen@ADCVoltage+3
  3517                           
  3518                           ;main.c: 130: int IRDistance = 65 * pow(ADCVoltage, -1.10);
  3519  011BF2  0ECD               	movlw	205
  3520  011BF4  0100               	movlb	0	; () banked
  3521  011BF6  6FC2               	movwf	pow@y& (0+255),b
  3522  011BF8  0ECC               	movlw	204
  3523  011BFA  6FC3               	movwf	(pow@y+1)& (0+255),b
  3524  011BFC  0E8C               	movlw	140
  3525  011BFE  6FC4               	movwf	(pow@y+2)& (0+255),b
  3526  011C00  0EBF               	movlw	191
  3527  011C02  6FC5               	movwf	(pow@y+3)& (0+255),b
  3528  011C04  C264  F0BE         	movff	printToScreen@ADCVoltage,pow@x
  3529  011C08  C265  F0BF         	movff	printToScreen@ADCVoltage+1,pow@x+1
  3530  011C0C  C266  F0C0         	movff	printToScreen@ADCVoltage+2,pow@x+2
  3531  011C10  C267  F0C1         	movff	printToScreen@ADCVoltage+3,pow@x+3
  3532  011C14  EC84  F091         	call	_pow	;wreg free
  3533  011C18  C0BE  F268         	movff	?_pow,_printToScreen$15175
  3534  011C1C  C0BF  F269         	movff	?_pow+1,_printToScreen$15175+1
  3535  011C20  C0C0  F26A         	movff	?_pow+2,_printToScreen$15175+2
  3536  011C24  C0C1  F26B         	movff	?_pow+3,_printToScreen$15175+3
  3537                           
  3538                           ;main.c: 130: int IRDistance = 65 * pow(ADCVoltage, -1.10);
  3539  011C28  0E00               	movlw	0
  3540  011C2A  0100               	movlb	0	; () banked
  3541  011C2C  6F72               	movwf	___flmul@a& (0+255),b
  3542  011C2E  0E00               	movlw	0
  3543  011C30  6F73               	movwf	(___flmul@a+1)& (0+255),b
  3544  011C32  0E82               	movlw	130
  3545  011C34  6F74               	movwf	(___flmul@a+2)& (0+255),b
  3546  011C36  0E42               	movlw	66
  3547  011C38  6F75               	movwf	(___flmul@a+3)& (0+255),b
  3548  011C3A  C268  F06E         	movff	_printToScreen$15175,___flmul@b
  3549  011C3E  C269  F06F         	movff	_printToScreen$15175+1,___flmul@b+1
  3550  011C42  C26A  F070         	movff	_printToScreen$15175+2,___flmul@b+2
  3551  011C46  C26B  F071         	movff	_printToScreen$15175+3,___flmul@b+3
  3552  011C4A  EC54  F082         	call	___flmul	;wreg free
  3553  011C4E  C06E  F087         	movff	?___flmul,___fltol@f1
  3554  011C52  C06F  F088         	movff	?___flmul+1,___fltol@f1+1
  3555  011C56  C070  F089         	movff	?___flmul+2,___fltol@f1+2
  3556  011C5A  C071  F08A         	movff	?___flmul+3,___fltol@f1+3
  3557  011C5E  EC86  F09F         	call	___fltol	;wreg free
  3558  011C62  C087  F26C         	movff	?___fltol,printToScreen@IRDistance
  3559  011C66  C088  F26D         	movff	?___fltol+1,printToScreen@IRDistance+1
  3560                           
  3561                           ;main.c: 132: HMI_SetNumber(IRDistance);
  3562  011C6A  C26C  F076         	movff	printToScreen@IRDistance,HMI_SetNumber@pInput
  3563  011C6E  C26D  F077         	movff	printToScreen@IRDistance+1,HMI_SetNumber@pInput+1
  3564  011C72  EC26  F0B3         	call	_HMI_SetNumber	;wreg free
  3565                           
  3566                           ;main.c: 133: HMI_Render();
  3567  011C76  EC5D  F0B1         	call	_HMI_Render	;wreg free
  3568  011C7A  0012               	return		;funcret
  3569  011C7C                     __end_of_printToScreen:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           postinc0	equ	0xFEE
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           fsr1h	equ	0xFE2
  3579                           fsr1l	equ	0xFE1
  3580                           status	equ	0xFD8
  3581                           
  3582 ;; *************** function _printf *****************
  3583 ;; Defined at:
  3584 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3587 ;;		 -> STR_11(16), STR_10(15), STR_9(12), STR_8(12), 
  3588 ;;		 -> STR_7(13), STR_6(4), STR_5(5), STR_4(12), 
  3589 ;;		 -> STR_3(18), STR_2(23), STR_1(3), 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  tmpval          4    0        struct .
  3592 ;;  cp              3    0        PTR const unsigned char 
  3593 ;;  val             2   30[BANK0 ] unsigned int 
  3594 ;;  ap              2   28[BANK0 ] PTR void [1]
  3595 ;;		 -> ?_printf(2), 
  3596 ;;  len             2    0        unsigned int 
  3597 ;;  c               1   32[BANK0 ] char 
  3598 ;;  prec            1   27[BANK0 ] char 
  3599 ;;  flag            1   26[BANK0 ] unsigned char 
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  2   21[BANK0 ] int 
  3602 ;; Registers used:
  3603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3609 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;Total ram usage:       12 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:   12
  3616 ;; This function calls:
  3617 ;;		___lwdiv
  3618 ;;		___lwmod
  3619 ;;		_putch
  3620 ;; This function is called by:
  3621 ;;		_printToScreen
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text2
  3626  012A90                     __ptext2:
  3627                           	opt stack 0
  3628  012A90                     _printf:
  3629                           	opt stack 17
  3630                           
  3631                           ;doprnt.c: 466: va_list ap;
  3632                           ;doprnt.c: 499: signed char c;
  3633                           ;doprnt.c: 506: signed char prec;
  3634                           ;doprnt.c: 508: unsigned char flag;
  3635                           ;doprnt.c: 523: union {
  3636                           ;doprnt.c: 524: unsigned long vd;
  3637                           ;doprnt.c: 525: double integ;
  3638                           ;doprnt.c: 526: } tmpval;
  3639                           ;doprnt.c: 528: unsigned int val;
  3640                           ;doprnt.c: 529: unsigned len;
  3641                           ;doprnt.c: 530: const char * cp;
  3642                           ;doprnt.c: 533: *ap = __va_start();
  3643                           
  3644                           ;incstack = 0
  3645  012A90  0E77               	movlw	low (?_printf+2)
  3646  012A92  0100               	movlb	0	; () banked
  3647  012A94  6F7C               	movwf	printf@ap& (0+255),b
  3648  012A96  0E00               	movlw	high (?_printf+2)
  3649  012A98  0100               	movlb	0	; () banked
  3650  012A9A  6F7D               	movwf	(printf@ap+1)& (0+255),b
  3651                           
  3652                           ;doprnt.c: 536: while(c = *f++) {
  3653  012A9C  D0B1               	goto	l14307
  3654  012A9E                     l14255:
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;doprnt.c: 538: if(c != '%')
  3658  012A9E  0E25               	movlw	37
  3659  012AA0  0100               	movlb	0	; () banked
  3660  012AA2  1980               	xorwf	printf@c& (0+255),w,b
  3661  012AA4  B4D8               	btfsc	status,2,c
  3662  012AA6  D005               	goto	l14259
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;doprnt.c: 540: {
  3666                           ;doprnt.c: 541: (putch(c) );
  3667  012AA8  0100               	movlb	0	; () banked
  3668  012AAA  5180               	movf	printf@c& (0+255),w,b
  3669  012AAC  ECA6  F0B4         	call	_putch
  3670                           
  3671                           ;doprnt.c: 542: continue;
  3672  012AB0  D0A7               	goto	l14307
  3673  012AB2                     l14259:
  3674                           
  3675                           ;doprnt.c: 543: }
  3676                           ;doprnt.c: 548: flag = 0;
  3677  012AB2  0E00               	movlw	0
  3678  012AB4  0100               	movlb	0	; () banked
  3679  012AB6  6F7A               	movwf	printf@flag& (0+255),b
  3680                           
  3681                           ;doprnt.c: 635: switch(c = *f++) {
  3682  012AB8  D011               	goto	l14269
  3683  012ABA                     l14261:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3687  012ABA  C07C  FFD9         	movff	printf@ap,fsr2l
  3688  012ABE  C07D  FFDA         	movff	printf@ap+1,fsr2h
  3689  012AC2  50DF               	movf	indf2,w,c
  3690  012AC4  0100               	movlb	0	; () banked
  3691  012AC6  6F80               	movwf	printf@c& (0+255),b
  3692                           
  3693                           ; BSR set to: 0
  3694  012AC8  0E02               	movlw	2
  3695  012ACA  0100               	movlb	0	; () banked
  3696  012ACC  277C               	addwf	printf@ap& (0+255),f,b
  3697  012ACE  0E00               	movlw	0
  3698  012AD0  237D               	addwfc	(printf@ap+1)& (0+255),f,b
  3699  012AD2                     l14265:
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 809: (putch(c) );
  3703  012AD2  0100               	movlb	0	; () banked
  3704  012AD4  5180               	movf	printf@c& (0+255),w,b
  3705  012AD6  ECA6  F0B4         	call	_putch
  3706                           
  3707                           ;doprnt.c: 810: continue;
  3708  012ADA  D092               	goto	l14307
  3709  012ADC                     l14269:
  3710  012ADC  C075  FFF6         	movff	printf@f,tblptrl
  3711  012AE0  C076  FFF7         	movff	printf@f+1,tblptrh
  3712  012AE4  0100               	movlb	0	; () banked
  3713  012AE6  4B75               	infsnz	printf@f& (0+255),f,b
  3714  012AE8  2B76               	incf	(printf@f+1)& (0+255),f,b
  3715  012AEA                     	if	0	;tblptru may be non-zero
  3716  012AEA                     	endif
  3717  012AEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3718  012AEA  0E00               	movlw	low (__mediumconst shr (0+16))
  3719  012AEC  6EF8               	movwf	tblptru,c
  3720  012AEE                     	endif
  3721  012AEE  0008               	tblrd		*
  3722  012AF0  CFF5 F080          	movff	tablat,printf@c
  3723  012AF4  0100               	movlb	0	; () banked
  3724  012AF6  5180               	movf	printf@c& (0+255),w,b
  3725                           
  3726                           ; Switch size 1, requested type "space"
  3727                           ; Number of cases is 4, Range of values is 0 to 105
  3728                           ; switch strategies available:
  3729                           ; Name         Instructions Cycles
  3730                           ; simple_byte           13     7 (average)
  3731                           ;	Chosen strategy is simple_byte
  3732  012AF8  0A00               	xorlw	0	; case 0
  3733  012AFA  B4D8               	btfsc	status,2,c
  3734  012AFC  0012               	return	
  3735  012AFE  0A63               	xorlw	99	; case 99
  3736  012B00  B4D8               	btfsc	status,2,c
  3737  012B02  D7DB               	goto	l14261
  3738  012B04  0A07               	xorlw	7	; case 100
  3739  012B06  B4D8               	btfsc	status,2,c
  3740  012B08  D003               	goto	l14271
  3741  012B0A  0A0D               	xorlw	13	; case 105
  3742  012B0C  A4D8               	btfss	status,2,c
  3743  012B0E  D7E1               	goto	l14265
  3744  012B10                     l14271:
  3745                           
  3746                           ;doprnt.c: 1253: {
  3747                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3748  012B10  C07C  FFD9         	movff	printf@ap,fsr2l
  3749  012B14  C07D  FFDA         	movff	printf@ap+1,fsr2h
  3750  012B18  CFDE F07E          	movff	postinc2,printf@val
  3751  012B1C  CFDD F07F          	movff	postdec2,printf@val+1
  3752  012B20  0E02               	movlw	2
  3753  012B22  0100               	movlb	0	; () banked
  3754  012B24  277C               	addwf	printf@ap& (0+255),f,b
  3755  012B26  0E00               	movlw	0
  3756  012B28  237D               	addwfc	(printf@ap+1)& (0+255),f,b
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;doprnt.c: 1261: if((int)val < 0) {
  3760  012B2A  0100               	movlb	0	; () banked
  3761  012B2C  AF7F               	btfss	(printf@val+1)& (0+255),7,b
  3762  012B2E  D008               	goto	l14281
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;doprnt.c: 1262: flag |= 0x03;
  3766  012B30  0E03               	movlw	3
  3767  012B32  0100               	movlb	0	; () banked
  3768  012B34  137A               	iorwf	printf@flag& (0+255),f,b
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;doprnt.c: 1263: val = -val;
  3772  012B36  0100               	movlb	0	; () banked
  3773  012B38  6D7E               	negf	printf@val& (0+255),b
  3774  012B3A  1F7F               	comf	(printf@val+1)& (0+255),f,b
  3775  012B3C  B0D8               	btfsc	status,0,c
  3776  012B3E  2B7F               	incf	(printf@val+1)& (0+255),f,b
  3777  012B40                     l14281:
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 1264: }
  3781                           ;doprnt.c: 1266: }
  3782                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3783  012B40  0E01               	movlw	1
  3784  012B42  0100               	movlb	0	; () banked
  3785  012B44  6F80               	movwf	printf@c& (0+255),b
  3786  012B46                     l14283:
  3787                           
  3788                           ; BSR set to: 0
  3789  012B46  0E05               	movlw	5
  3790  012B48  0100               	movlb	0	; () banked
  3791  012B4A  1980               	xorwf	printf@c& (0+255),w,b
  3792  012B4C  B4D8               	btfsc	status,2,c
  3793  012B4E  D019               	goto	l14295
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1306: if(val < dpowers[c])
  3797                           
  3798                           ; BSR set to: 0
  3799                           
  3800                           ; BSR set to: 0
  3801  012B50  0100               	movlb	0	; () banked
  3802  012B52  5180               	movf	printf@c& (0+255),w,b
  3803  012B54  0D02               	mullw	2
  3804  012B56  0E29               	movlw	low _dpowers
  3805  012B58  24F3               	addwf	prodl,w,c
  3806  012B5A  6EF6               	movwf	tblptrl,c
  3807  012B5C  0EFD               	movlw	high _dpowers
  3808  012B5E  20F4               	addwfc	prodh,w,c
  3809  012B60  6EF7               	movwf	tblptrh,c
  3810  012B62                     	if	1	;There are 3 active tblptr bytes
  3811  012B62  6AF8               	clrf	tblptru,c
  3812  012B64  0E00               	movlw	low (__mediumconst shr (0+16))
  3813  012B66  22F8               	addwfc	tblptru,f,c
  3814  012B68                     	endif
  3815  012B68  0009               	tblrd		*+
  3816  012B6A  50F5               	movf	tablat,w,c
  3817  012B6C  0100               	movlb	0	; () banked
  3818  012B6E  5D7E               	subwf	printf@val& (0+255),w,b
  3819  012B70  0009               	tblrd		*+
  3820  012B72  50F5               	movf	tablat,w,c
  3821  012B74  0100               	movlb	0	; () banked
  3822  012B76  597F               	subwfb	(printf@val+1)& (0+255),w,b
  3823  012B78  A0D8               	btfss	status,0,c
  3824  012B7A  D003               	goto	l14295
  3825                           
  3826                           ; BSR set to: 0
  3827                           
  3828                           ; BSR set to: 0
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;doprnt.c: 1307: break;
  3832  012B7C  0100               	movlb	0	; () banked
  3833  012B7E  2B80               	incf	printf@c& (0+255),f,b
  3834  012B80  D7E2               	goto	l14283
  3835  012B82                     l14295:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1422: {
  3839                           ;doprnt.c: 1438: if(flag & 0x03)
  3840  012B82  C07A  F079         	movff	printf@flag,??_printf
  3841  012B86  0E03               	movlw	3
  3842  012B88  0100               	movlb	0	; () banked
  3843  012B8A  1779               	andwf	??_printf& (0+255),f,b
  3844  012B8C  B4D8               	btfsc	status,2,c
  3845  012B8E  D003               	goto	l14299
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;doprnt.c: 1439: (putch('-') );
  3849  012B90  0E2D               	movlw	45
  3850  012B92  ECA6  F0B4         	call	_putch
  3851  012B96                     l14299:
  3852                           
  3853                           ;doprnt.c: 1469: }
  3854                           ;doprnt.c: 1472: prec = c;
  3855  012B96  C080  F07B         	movff	printf@c,printf@prec
  3856                           
  3857                           ;doprnt.c: 1474: while(prec--) {
  3858  012B9A  D02C               	goto	l14305
  3859  012B9C                     l14301:
  3860                           
  3861                           ;doprnt.c: 1478: {
  3862                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3863  012B9C  0100               	movlb	0	; () banked
  3864  012B9E  517B               	movf	printf@prec& (0+255),w,b
  3865  012BA0  0D02               	mullw	2
  3866  012BA2  0E29               	movlw	low _dpowers
  3867  012BA4  24F3               	addwf	prodl,w,c
  3868  012BA6  6EF6               	movwf	tblptrl,c
  3869  012BA8  0EFD               	movlw	high _dpowers
  3870  012BAA  20F4               	addwfc	prodh,w,c
  3871  012BAC  6EF7               	movwf	tblptrh,c
  3872  012BAE                     	if	1	;There are 3 active tblptr bytes
  3873  012BAE  6AF8               	clrf	tblptru,c
  3874  012BB0  0E00               	movlw	low (__mediumconst shr (0+16))
  3875  012BB2  22F8               	addwfc	tblptru,f,c
  3876  012BB4                     	endif
  3877  012BB4  0009               	tblrd		*+
  3878  012BB6  CFF5 F062          	movff	tablat,___lwdiv@divisor
  3879  012BBA  000A               	tblrd		*-
  3880  012BBC  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  3881  012BC0  C07E  F060         	movff	printf@val,___lwdiv@dividend
  3882  012BC4  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
  3883  012BC8  EC78  F0AB         	call	___lwdiv	;wreg free
  3884  012BCC  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  3885  012BD0  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  3886  012BD4  0E00               	movlw	0
  3887  012BD6  0100               	movlb	0	; () banked
  3888  012BD8  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3889  012BDA  0E0A               	movlw	10
  3890  012BDC  6F69               	movwf	___lwmod@divisor& (0+255),b
  3891  012BDE  EC7D  F0AE         	call	___lwmod	;wreg free
  3892  012BE2  0100               	movlb	0	; () banked
  3893  012BE4  5167               	movf	?___lwmod& (0+255),w,b
  3894  012BE6  0F30               	addlw	48
  3895  012BE8  0100               	movlb	0	; () banked
  3896  012BEA  6F80               	movwf	printf@c& (0+255),b
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 1523: }
  3900                           ;doprnt.c: 1524: (putch(c) );
  3901  012BEC  0100               	movlb	0	; () banked
  3902  012BEE  5180               	movf	printf@c& (0+255),w,b
  3903  012BF0  ECA6  F0B4         	call	_putch
  3904  012BF4                     l14305:
  3905  012BF4  0100               	movlb	0	; () banked
  3906  012BF6  077B               	decf	printf@prec& (0+255),f,b
  3907  012BF8  0100               	movlb	0	; () banked
  3908  012BFA  297B               	incf	printf@prec& (0+255),w,b
  3909  012BFC  A4D8               	btfss	status,2,c
  3910  012BFE  D7CE               	goto	l14301
  3911  012C00                     l14307:
  3912  012C00  C075  FFF6         	movff	printf@f,tblptrl
  3913  012C04  C076  FFF7         	movff	printf@f+1,tblptrh
  3914  012C08  0100               	movlb	0	; () banked
  3915  012C0A  4B75               	infsnz	printf@f& (0+255),f,b
  3916  012C0C  2B76               	incf	(printf@f+1)& (0+255),f,b
  3917  012C0E                     	if	0	;tblptru may be non-zero
  3918  012C0E                     	endif
  3919  012C0E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3920  012C0E  0E00               	movlw	low (__mediumconst shr (0+16))
  3921  012C10  6EF8               	movwf	tblptru,c
  3922  012C12                     	endif
  3923  012C12  0008               	tblrd		*
  3924  012C14  CFF5 F080          	movff	tablat,printf@c
  3925  012C18  0100               	movlb	0	; () banked
  3926  012C1A  5180               	movf	printf@c& (0+255),w,b
  3927  012C1C  B4D8               	btfsc	status,2,c
  3928  012C1E  0012               	return	
  3929  012C20  D73E               	goto	l14255
  3930  012C22                     __end_of_printf:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           prodh	equ	0xFF4
  3937                           prodl	equ	0xFF3
  3938                           postinc0	equ	0xFEE
  3939                           wreg	equ	0xFE8
  3940                           postdec1	equ	0xFE5
  3941                           fsr1h	equ	0xFE2
  3942                           fsr1l	equ	0xFE1
  3943                           indf2	equ	0xFDF
  3944                           postinc2	equ	0xFDE
  3945                           postdec2	equ	0xFDD
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _putch *****************
  3951 ;; Defined at:
  3952 ;;		line 454 in file "Library/Console.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  c               1    wreg     unsigned char 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  c               1   20[BANK0 ] unsigned char 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;Total ram usage:        1 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:   11
  3973 ;; This function calls:
  3974 ;;		_Console_PrintChar
  3975 ;; This function is called by:
  3976 ;;		_printf
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text3
  3981  01694C                     __ptext3:
  3982                           	opt stack 0
  3983  01694C                     _putch:
  3984                           	opt stack 17
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;incstack = 0
  3988                           ;putch@c stored from wreg
  3989  01694C  0100               	movlb	0	; () banked
  3990  01694E  6F74               	movwf	putch@c& (0+255),b
  3991                           
  3992                           ;Console.c: 456: Console_PrintChar(c);
  3993  016950  0100               	movlb	0	; () banked
  3994  016952  5174               	movf	putch@c& (0+255),w,b
  3995  016954  ECA2  F097         	call	_Console_PrintChar
  3996  016958  0012               	return		;funcret
  3997  01695A                     __end_of_putch:
  3998                           	opt stack 0
  3999                           tblptru	equ	0xFF8
  4000                           tblptrh	equ	0xFF7
  4001                           tblptrl	equ	0xFF6
  4002                           tablat	equ	0xFF5
  4003                           prodh	equ	0xFF4
  4004                           prodl	equ	0xFF3
  4005                           postinc0	equ	0xFEE
  4006                           wreg	equ	0xFE8
  4007                           postdec1	equ	0xFE5
  4008                           fsr1h	equ	0xFE2
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _Console_PrintChar *****************
  4018 ;; Defined at:
  4019 ;;		line 322 in file "Library/Console.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  pInput          1    wreg     unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  pInput          1   19[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;Total ram usage:        4 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:   10
  4040 ;; This function calls:
  4041 ;;		_Console_Backspace
  4042 ;;		_Console_FormFeed
  4043 ;;		_Console_IncrementCursor
  4044 ;;		_Console_NewLine
  4045 ;;		_Console_ResetCursor
  4046 ;;		_Console_Tab
  4047 ;; This function is called by:
  4048 ;;		_putch
  4049 ;;		_Console_PrintString
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text4
  4054  012F44                     __ptext4:
  4055                           	opt stack 0
  4056  012F44                     _Console_PrintChar:
  4057                           	opt stack 17
  4058                           
  4059                           ;incstack = 0
  4060                           ;Console_PrintChar@pInput stored from wreg
  4061  012F44  0100               	movlb	0	; () banked
  4062  012F46  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  4063                           
  4064                           ;Console.c: 324: switch(pInput)
  4065  012F48  D0A8               	goto	l13145
  4066  012F4A                     l13101:
  4067                           
  4068                           ;Console.c: 327: case '\n':
  4069                           ;Console.c: 328: Console_NewLine();
  4070  012F4A  EC1B  F0A9         	call	_Console_NewLine	;wreg free
  4071                           
  4072                           ;Console.c: 329: return;
  4073  012F4E  0012               	return	
  4074  012F50                     l13105:
  4075                           
  4076                           ;Console.c: 331: Console_Backspace();
  4077  012F50  ECB1  F0AF         	call	_Console_Backspace	;wreg free
  4078                           
  4079                           ;Console.c: 332: return;
  4080  012F54  0012               	return	
  4081  012F56                     l13109:
  4082                           
  4083                           ;Console.c: 334: Console_FormFeed();
  4084  012F56  ECAC  F0A9         	call	_Console_FormFeed	;wreg free
  4085                           
  4086                           ;Console.c: 335: return;
  4087  012F5A  0012               	return	
  4088  012F5C                     l13113:
  4089                           
  4090                           ;Console.c: 337: Console_Tab();
  4091  012F5C  EC02  F0A3         	call	_Console_Tab	;wreg free
  4092                           
  4093                           ;Console.c: 338: return;
  4094  012F60  0012               	return	
  4095  012F62                     l13117:
  4096                           
  4097                           ;Console.c: 340: Console_IncrementCursor();
  4098  012F62  EC19  F0AE         	call	_Console_IncrementCursor	;wreg free
  4099                           
  4100                           ;Console.c: 341: return;
  4101  012F66  0012               	return	
  4102  012F68                     l13121:
  4103                           
  4104                           ;Console.c: 343: Console_ResetCursor();
  4105  012F68  EC11  F0B4         	call	_Console_ResetCursor	;wreg free
  4106                           
  4107                           ;Console.c: 344: return;
  4108  012F6C  0012               	return	
  4109  012F6E                     l13125:
  4110                           
  4111                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4112  012F6E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4113  012F72  0E7F               	movlw	127
  4114  012F74  0100               	movlb	0	; () banked
  4115  012F76  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  4116  012F78  5036               	movf	_lBufferY,w,c
  4117  012F7A  0D14               	mullw	20
  4118  012F7C  0E6E               	movlw	low _lBuffer
  4119  012F7E  0100               	movlb	0	; () banked
  4120  012F80  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4121  012F82  0E02               	movlw	high _lBuffer
  4122  012F84  0100               	movlb	0	; () banked
  4123  012F86  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4124  012F88  50F3               	movf	prodl,w,c
  4125  012F8A  0100               	movlb	0	; () banked
  4126  012F8C  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4127  012F8E  50F4               	movf	prodh,w,c
  4128  012F90  0100               	movlb	0	; () banked
  4129  012F92  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4130  012F94  5037               	movf	_lBufferX,w,c
  4131  012F96  0D01               	mullw	1
  4132  012F98  50F3               	movf	prodl,w,c
  4133  012F9A  0100               	movlb	0	; () banked
  4134  012F9C  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4135  012F9E  6ED9               	movwf	fsr2l,c
  4136  012FA0  50F4               	movf	prodh,w,c
  4137  012FA2  0100               	movlb	0	; () banked
  4138  012FA4  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4139  012FA6  6EDA               	movwf	fsr2h,c
  4140  012FA8  50DF               	movf	indf2,w,c
  4141  012FAA  0B7F               	andlw	127
  4142  012FAC  0100               	movlb	0	; () banked
  4143  012FAE  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  4144  012FB0  B4D8               	btfsc	status,2,c
  4145  012FB2  D02B               	goto	l13133
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;Console.c: 351: {
  4149                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4150  012FB4  0E01               	movlw	1
  4151  012FB6  0100               	movlb	0	; () banked
  4152  012FB8  6FFD               	movwf	_change& (0+255),b
  4153                           
  4154                           ; BSR set to: 0
  4155  012FBA  5036               	movf	_lBufferY,w,c
  4156  012FBC  0D14               	mullw	20
  4157  012FBE  0E6E               	movlw	low _lBuffer
  4158  012FC0  0100               	movlb	0	; () banked
  4159  012FC2  6F70               	movwf	??_Console_PrintChar& (0+255),b
  4160  012FC4  0E02               	movlw	high _lBuffer
  4161  012FC6  0100               	movlb	0	; () banked
  4162  012FC8  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4163  012FCA  50F3               	movf	prodl,w,c
  4164  012FCC  0100               	movlb	0	; () banked
  4165  012FCE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  4166  012FD0  50F4               	movf	prodh,w,c
  4167  012FD2  0100               	movlb	0	; () banked
  4168  012FD4  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4169  012FD6  5037               	movf	_lBufferX,w,c
  4170  012FD8  0D01               	mullw	1
  4171  012FDA  50F3               	movf	prodl,w,c
  4172  012FDC  0100               	movlb	0	; () banked
  4173  012FDE  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  4174  012FE0  6ED9               	movwf	fsr2l,c
  4175  012FE2  50F4               	movf	prodh,w,c
  4176  012FE4  0100               	movlb	0	; () banked
  4177  012FE6  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4178  012FE8  6EDA               	movwf	fsr2h,c
  4179  012FEA  0100               	movlb	0	; () banked
  4180  012FEC  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4181  012FEE  0980               	iorlw	128
  4182  012FF0  6EDF               	movwf	indf2,c
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4186  012FF2  5036               	movf	_lBufferY,w,c
  4187  012FF4  0D02               	mullw	2
  4188  012FF6  0E00               	movlw	low _lCBuffer
  4189  012FF8  24F3               	addwf	prodl,w,c
  4190  012FFA  6ED9               	movwf	fsr2l,c
  4191  012FFC  0E02               	movlw	high _lCBuffer
  4192  012FFE  20F4               	addwfc	prodh,w,c
  4193  013000  6EDA               	movwf	fsr2h,c
  4194  013002  C0FA  FFDE         	movff	_gForecolour,postinc2
  4195  013006  C0FB  FFDD         	movff	_gForecolour+1,postdec2
  4196  01300A                     l13133:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;Console.c: 354: }
  4200                           ;Console.c: 368: if(Console_IncrementCursor())
  4201  01300A  EC19  F0AE         	call	_Console_IncrementCursor	;wreg free
  4202  01300E  0900               	iorlw	0
  4203  013010  B4D8               	btfsc	status,2,c
  4204  013012  0012               	return	
  4205                           
  4206                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4207  013014  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4208  013018  0E7F               	movlw	127
  4209  01301A  0100               	movlb	0	; () banked
  4210  01301C  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  4211  01301E  5036               	movf	_lBufferY,w,c
  4212  013020  0D14               	mullw	20
  4213  013022  0E6E               	movlw	low _lBuffer
  4214  013024  0100               	movlb	0	; () banked
  4215  013026  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4216  013028  0E02               	movlw	high _lBuffer
  4217  01302A  0100               	movlb	0	; () banked
  4218  01302C  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4219  01302E  50F3               	movf	prodl,w,c
  4220  013030  0100               	movlb	0	; () banked
  4221  013032  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4222  013034  50F4               	movf	prodh,w,c
  4223  013036  0100               	movlb	0	; () banked
  4224  013038  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4225  01303A  5037               	movf	_lBufferX,w,c
  4226  01303C  0D01               	mullw	1
  4227  01303E  50F3               	movf	prodl,w,c
  4228  013040  0100               	movlb	0	; () banked
  4229  013042  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4230  013044  6ED9               	movwf	fsr2l,c
  4231  013046  50F4               	movf	prodh,w,c
  4232  013048  0100               	movlb	0	; () banked
  4233  01304A  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4234  01304C  6EDA               	movwf	fsr2h,c
  4235  01304E  50DF               	movf	indf2,w,c
  4236  013050  0B7F               	andlw	127
  4237  013052  0100               	movlb	0	; () banked
  4238  013054  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  4239  013056  B4D8               	btfsc	status,2,c
  4240  013058  0012               	return	
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4244  01305A  0E01               	movlw	1
  4245  01305C  0100               	movlb	0	; () banked
  4246  01305E  6FFD               	movwf	_change& (0+255),b
  4247                           
  4248                           ; BSR set to: 0
  4249  013060  5036               	movf	_lBufferY,w,c
  4250  013062  0D14               	mullw	20
  4251  013064  0E6E               	movlw	low _lBuffer
  4252  013066  0100               	movlb	0	; () banked
  4253  013068  6F70               	movwf	??_Console_PrintChar& (0+255),b
  4254  01306A  0E02               	movlw	high _lBuffer
  4255  01306C  0100               	movlb	0	; () banked
  4256  01306E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4257  013070  50F3               	movf	prodl,w,c
  4258  013072  0100               	movlb	0	; () banked
  4259  013074  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  4260  013076  50F4               	movf	prodh,w,c
  4261  013078  0100               	movlb	0	; () banked
  4262  01307A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4263  01307C  5037               	movf	_lBufferX,w,c
  4264  01307E  0D01               	mullw	1
  4265  013080  50F3               	movf	prodl,w,c
  4266  013082  0100               	movlb	0	; () banked
  4267  013084  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  4268  013086  6ED9               	movwf	fsr2l,c
  4269  013088  50F4               	movf	prodh,w,c
  4270  01308A  0100               	movlb	0	; () banked
  4271  01308C  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4272  01308E  6EDA               	movwf	fsr2h,c
  4273  013090  0100               	movlb	0	; () banked
  4274  013092  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4275  013094  0980               	iorlw	128
  4276  013096  6EDF               	movwf	indf2,c
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;Console.c: 372: };
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;Console.c: 371: return;
  4283                           
  4284                           ; BSR set to: 0
  4285                           
  4286                           ; BSR set to: 0
  4287  013098  0012               	return	
  4288  01309A                     l13145:
  4289  01309A  0100               	movlb	0	; () banked
  4290  01309C  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4291                           
  4292                           ; Switch size 1, requested type "space"
  4293                           ; Number of cases is 8, Range of values is 7 to 35
  4294                           ; switch strategies available:
  4295                           ; Name         Instructions Cycles
  4296                           ; simple_byte           25    13 (average)
  4297                           ;	Chosen strategy is simple_byte
  4298  01309E  0A07               	xorlw	7	; case 7
  4299  0130A0  B4D8               	btfsc	status,2,c
  4300  0130A2  D75F               	goto	l13117
  4301  0130A4  0A0F               	xorlw	15	; case 8
  4302  0130A6  B4D8               	btfsc	status,2,c
  4303  0130A8  D753               	goto	l13105
  4304  0130AA  0A01               	xorlw	1	; case 9
  4305  0130AC  B4D8               	btfsc	status,2,c
  4306  0130AE  D756               	goto	l13113
  4307  0130B0  0A03               	xorlw	3	; case 10
  4308  0130B2  B4D8               	btfsc	status,2,c
  4309  0130B4  D74A               	goto	l13101
  4310  0130B6  0A06               	xorlw	6	; case 12
  4311  0130B8  B4D8               	btfsc	status,2,c
  4312  0130BA  D74D               	goto	l13109
  4313  0130BC  0A01               	xorlw	1	; case 13
  4314  0130BE  B4D8               	btfsc	status,2,c
  4315  0130C0  D744               	goto	l13101
  4316  0130C2  0A2D               	xorlw	45	; case 32
  4317  0130C4  B4D8               	btfsc	status,2,c
  4318  0130C6  D753               	goto	l13125
  4319  0130C8  0A03               	xorlw	3	; case 35
  4320  0130CA  B4D8               	btfsc	status,2,c
  4321  0130CC  D74D               	goto	l13121
  4322  0130CE  D74F               	goto	l13125
  4323  0130D0                     __end_of_Console_PrintChar:
  4324                           	opt stack 0
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           postinc0	equ	0xFEE
  4332                           wreg	equ	0xFE8
  4333                           postdec1	equ	0xFE5
  4334                           fsr1h	equ	0xFE2
  4335                           fsr1l	equ	0xFE1
  4336                           indf2	equ	0xFDF
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function _Console_Tab *****************
  4344 ;; Defined at:
  4345 ;;		line 260 in file "Library/Console.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;		None
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  c               1   15[BANK0 ] unsigned char 
  4350 ;;  i               1   14[BANK0 ] unsigned char 
  4351 ;;  t               1   13[BANK0 ] unsigned char 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  1    wreg      void 
  4354 ;; Registers used:
  4355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;Total ram usage:        8 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    9
  4368 ;; This function calls:
  4369 ;;		_Console_ClearCursor
  4370 ;;		_Console_IncrementCursor
  4371 ;;		___awdiv
  4372 ;; This function is called by:
  4373 ;;		_Console_PrintChar
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text5
  4378  014604                     __ptext5:
  4379                           	opt stack 0
  4380  014604                     _Console_Tab:
  4381                           	opt stack 17
  4382                           
  4383                           ;Console.c: 262: UINT8 i = 0;
  4384                           
  4385                           ;incstack = 0
  4386  014604  0E00               	movlw	0
  4387  014606  0100               	movlb	0	; () banked
  4388  014608  6F6E               	movwf	Console_Tab@i& (0+255),b
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4392  01460A  0EFA               	movlw	250
  4393  01460C  243F               	addwf	_gCursor,w,c
  4394  01460E  0100               	movlb	0	; () banked
  4395  014610  6F60               	movwf	___awdiv@dividend& (0+255),b
  4396  014612  0EFF               	movlw	255
  4397  014614  2040               	addwfc	_gCursor+1,w,c
  4398  014616  0100               	movlb	0	; () banked
  4399  014618  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  4400  01461A  0E00               	movlw	0
  4401  01461C  0100               	movlb	0	; () banked
  4402  01461E  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4403  014620  0E06               	movlw	6
  4404  014622  6F62               	movwf	___awdiv@divisor& (0+255),b
  4405  014624  EC63  F0A3         	call	___awdiv	;wreg free
  4406  014628  0100               	movlb	0	; () banked
  4407  01462A  5160               	movf	?___awdiv& (0+255),w,b
  4408  01462C  0100               	movlb	0	; () banked
  4409  01462E  6F6F               	movwf	Console_Tab@c& (0+255),b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;Console.c: 264: UINT8 t = c/4;
  4413  014630  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  4414  014634  0100               	movlb	0	; () banked
  4415  014636  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  4416  014638  0E00               	movlw	0
  4417  01463A  0100               	movlb	0	; () banked
  4418  01463C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4419  01463E  0E04               	movlw	4
  4420  014640  6F62               	movwf	___awdiv@divisor& (0+255),b
  4421  014642  EC63  F0A3         	call	___awdiv	;wreg free
  4422  014646  0100               	movlb	0	; () banked
  4423  014648  5160               	movf	?___awdiv& (0+255),w,b
  4424  01464A  0100               	movlb	0	; () banked
  4425  01464C  6F6D               	movwf	Console_Tab@t& (0+255),b
  4426                           
  4427                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4428  01464E  0E00               	movlw	0
  4429  014650  0100               	movlb	0	; () banked
  4430  014652  6F6E               	movwf	Console_Tab@i& (0+255),b
  4431  014654  D006               	goto	l12307
  4432  014656                     l12303:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;Console.c: 266: {
  4436                           ;Console.c: 267: Console_ClearCursor();
  4437  014656  ECBA  F0B1         	call	_Console_ClearCursor	;wreg free
  4438                           
  4439                           ;Console.c: 268: Console_IncrementCursor();
  4440  01465A  EC19  F0AE         	call	_Console_IncrementCursor	;wreg free
  4441  01465E  0100               	movlb	0	; () banked
  4442  014660  2B6E               	incf	Console_Tab@i& (0+255),f,b
  4443  014662                     l12307:
  4444                           
  4445                           ; BSR set to: 0
  4446  014662  0100               	movlb	0	; () banked
  4447  014664  516D               	movf	Console_Tab@t& (0+255),w,b
  4448  014666  0D04               	mullw	4
  4449  014668  1EF3               	comf	prodl,f,c
  4450  01466A  1EF4               	comf	prodh,f,c
  4451  01466C  4AF3               	infsnz	prodl,f,c
  4452  01466E  2AF4               	incf	prodh,f,c
  4453  014670  0100               	movlb	0	; () banked
  4454  014672  516F               	movf	Console_Tab@c& (0+255),w,b
  4455  014674  0100               	movlb	0	; () banked
  4456  014676  6F68               	movwf	??_Console_Tab& (0+255),b
  4457  014678  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  4458  01467A  50F3               	movf	prodl,w,c
  4459  01467C  0100               	movlb	0	; () banked
  4460  01467E  2768               	addwf	??_Console_Tab& (0+255),f,b
  4461  014680  50F4               	movf	prodh,w,c
  4462  014682  0100               	movlb	0	; () banked
  4463  014684  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4464  014686  0100               	movlb	0	; () banked
  4465  014688  1F68               	comf	??_Console_Tab& (0+255),f,b
  4466  01468A  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  4467  01468C  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  4468  01468E  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  4469  014690  0E04               	movlw	4
  4470  014692  0100               	movlb	0	; () banked
  4471  014694  2768               	addwf	??_Console_Tab& (0+255),f,b
  4472  014696  0E00               	movlw	0
  4473  014698  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4474  01469A  0100               	movlb	0	; () banked
  4475  01469C  516E               	movf	Console_Tab@i& (0+255),w,b
  4476  01469E  0100               	movlb	0	; () banked
  4477  0146A0  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  4478  0146A2  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  4479  0146A4  0100               	movlb	0	; () banked
  4480  0146A6  5168               	movf	??_Console_Tab& (0+255),w,b
  4481  0146A8  0100               	movlb	0	; () banked
  4482  0146AA  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4483  0146AC  0100               	movlb	0	; () banked
  4484  0146AE  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  4485  0146B0  0A80               	xorlw	128
  4486  0146B2  0100               	movlb	0	; () banked
  4487  0146B4  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  4488  0146B6  0100               	movlb	0	; () banked
  4489  0146B8  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  4490  0146BA  0A80               	xorlw	128
  4491  0146BC  0100               	movlb	0	; () banked
  4492  0146BE  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4493  0146C0  B0D8               	btfsc	status,0,c
  4494  0146C2  0012               	return	
  4495  0146C4  D7C8               	goto	l12303
  4496  0146C6                     __end_of_Console_Tab:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           prodh	equ	0xFF4
  4503                           prodl	equ	0xFF3
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           postdec1	equ	0xFE5
  4507                           fsr1h	equ	0xFE2
  4508                           fsr1l	equ	0xFE1
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function ___awdiv *****************
  4517 ;; Defined at:
  4518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  dividend        2    0[BANK0 ] int 
  4521 ;;  divisor         2    2[BANK0 ] int 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  quotient        2    6[BANK0 ] int 
  4524 ;;  sign            1    5[BANK0 ] unsigned char 
  4525 ;;  counter         1    4[BANK0 ] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  2    0[BANK0 ] int 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4535 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;Total ram usage:        8 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    7
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_Console_Tab
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           	psect	text6
  4550  0146C6                     __ptext6:
  4551                           	opt stack 0
  4552  0146C6                     ___awdiv:
  4553                           	opt stack 18
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;incstack = 0
  4557  0146C6  0E00               	movlw	0
  4558  0146C8  0100               	movlb	0	; () banked
  4559  0146CA  6F65               	movwf	___awdiv@sign& (0+255),b
  4560                           
  4561                           ; BSR set to: 0
  4562  0146CC  0100               	movlb	0	; () banked
  4563  0146CE  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4564  0146D0  D008               	goto	l12055
  4565                           
  4566                           ; BSR set to: 0
  4567  0146D2  0100               	movlb	0	; () banked
  4568  0146D4  6D62               	negf	___awdiv@divisor& (0+255),b
  4569  0146D6  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4570  0146D8  B0D8               	btfsc	status,0,c
  4571  0146DA  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4572                           
  4573                           ; BSR set to: 0
  4574  0146DC  0E01               	movlw	1
  4575  0146DE  0100               	movlb	0	; () banked
  4576  0146E0  6F65               	movwf	___awdiv@sign& (0+255),b
  4577  0146E2                     l12055:
  4578                           
  4579                           ; BSR set to: 0
  4580  0146E2  0100               	movlb	0	; () banked
  4581  0146E4  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4582  0146E6  D008               	goto	l12061
  4583                           
  4584                           ; BSR set to: 0
  4585  0146E8  0100               	movlb	0	; () banked
  4586  0146EA  6D60               	negf	___awdiv@dividend& (0+255),b
  4587  0146EC  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4588  0146EE  B0D8               	btfsc	status,0,c
  4589  0146F0  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592  0146F2  0E01               	movlw	1
  4593  0146F4  0100               	movlb	0	; () banked
  4594  0146F6  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4595  0146F8                     l12061:
  4596                           
  4597                           ; BSR set to: 0
  4598  0146F8  0E00               	movlw	0
  4599  0146FA  0100               	movlb	0	; () banked
  4600  0146FC  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4601  0146FE  0E00               	movlw	0
  4602  014700  6F66               	movwf	___awdiv@quotient& (0+255),b
  4603                           
  4604                           ; BSR set to: 0
  4605  014702  0100               	movlb	0	; () banked
  4606  014704  5162               	movf	___awdiv@divisor& (0+255),w,b
  4607  014706  0100               	movlb	0	; () banked
  4608  014708  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4609  01470A  B4D8               	btfsc	status,2,c
  4610  01470C  D02C               	goto	l12083
  4611                           
  4612                           ; BSR set to: 0
  4613  01470E  0E01               	movlw	1
  4614  014710  0100               	movlb	0	; () banked
  4615  014712  6F64               	movwf	___awdiv@counter& (0+255),b
  4616  014714  D006               	goto	l12069
  4617  014716                     l12067:
  4618                           
  4619                           ; BSR set to: 0
  4620  014716  0100               	movlb	0	; () banked
  4621  014718  90D8               	bcf	status,0,c
  4622  01471A  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4623  01471C  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4624  01471E  0100               	movlb	0	; () banked
  4625  014720  2B64               	incf	___awdiv@counter& (0+255),f,b
  4626  014722                     l12069:
  4627                           
  4628                           ; BSR set to: 0
  4629  014722  0100               	movlb	0	; () banked
  4630  014724  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4631  014726  D7F7               	goto	l12067
  4632  014728                     l12071:
  4633                           
  4634                           ; BSR set to: 0
  4635  014728  0100               	movlb	0	; () banked
  4636  01472A  90D8               	bcf	status,0,c
  4637  01472C  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4638  01472E  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4639                           
  4640                           ; BSR set to: 0
  4641  014730  0100               	movlb	0	; () banked
  4642  014732  5162               	movf	___awdiv@divisor& (0+255),w,b
  4643  014734  0100               	movlb	0	; () banked
  4644  014736  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4645  014738  0100               	movlb	0	; () banked
  4646  01473A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4647  01473C  0100               	movlb	0	; () banked
  4648  01473E  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4649  014740  A0D8               	btfss	status,0,c
  4650  014742  D00A               	goto	l12079
  4651                           
  4652                           ; BSR set to: 0
  4653  014744  0100               	movlb	0	; () banked
  4654  014746  5162               	movf	___awdiv@divisor& (0+255),w,b
  4655  014748  0100               	movlb	0	; () banked
  4656  01474A  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4657  01474C  0100               	movlb	0	; () banked
  4658  01474E  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4659  014750  0100               	movlb	0	; () banked
  4660  014752  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4661                           
  4662                           ; BSR set to: 0
  4663  014754  0100               	movlb	0	; () banked
  4664  014756  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4665  014758                     l12079:
  4666                           
  4667                           ; BSR set to: 0
  4668  014758  0100               	movlb	0	; () banked
  4669  01475A  90D8               	bcf	status,0,c
  4670  01475C  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4671  01475E  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4672                           
  4673                           ; BSR set to: 0
  4674  014760  0100               	movlb	0	; () banked
  4675  014762  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4676  014764  D7E1               	goto	l12071
  4677  014766                     l12083:
  4678                           
  4679                           ; BSR set to: 0
  4680  014766  0100               	movlb	0	; () banked
  4681  014768  5165               	movf	___awdiv@sign& (0+255),w,b
  4682  01476A  0100               	movlb	0	; () banked
  4683  01476C  B4D8               	btfsc	status,2,c
  4684  01476E  D005               	goto	l12087
  4685                           
  4686                           ; BSR set to: 0
  4687  014770  0100               	movlb	0	; () banked
  4688  014772  6D66               	negf	___awdiv@quotient& (0+255),b
  4689  014774  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4690  014776  B0D8               	btfsc	status,0,c
  4691  014778  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4692  01477A                     l12087:
  4693                           
  4694                           ; BSR set to: 0
  4695  01477A  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4696  01477E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4697  014782  0012               	return	
  4698  014784                     __end_of___awdiv:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           postinc0	equ	0xFEE
  4707                           wreg	equ	0xFE8
  4708                           postdec1	equ	0xFE5
  4709                           fsr1h	equ	0xFE2
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _Console_IncrementCursor *****************
  4719 ;; Defined at:
  4720 ;;		line 243 in file "Library/Console.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      unsigned char 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;Total ram usage:        2 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    8
  4741 ;; This function calls:
  4742 ;;		_Console_FormFeed
  4743 ;;		_Console_NewLine
  4744 ;; This function is called by:
  4745 ;;		_Console_Tab
  4746 ;;		_Console_PrintChar
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text7
  4751  015C32                     __ptext7:
  4752                           	opt stack 0
  4753  015C32                     _Console_IncrementCursor:
  4754                           	opt stack 17
  4755                           
  4756                           ;Console.c: 246: lBufferX += 1;
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;incstack = 0
  4760  015C32  2A37               	incf	_lBufferX,f,c
  4761                           
  4762                           ;Console.c: 248: gCursor.x += 6;
  4763  015C34  0E06               	movlw	6
  4764  015C36  263F               	addwf	_gCursor,f,c
  4765  015C38  0E00               	movlw	0
  4766  015C3A  2240               	addwfc	_gCursor+1,f,c
  4767                           
  4768                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  4769  015C3C  0E06               	movlw	6
  4770  015C3E  243F               	addwf	_gCursor,w,c
  4771  015C40  0100               	movlb	0	; () banked
  4772  015C42  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  4773  015C44  0E00               	movlw	0
  4774  015C46  2040               	addwfc	_gCursor+1,w,c
  4775  015C48  0100               	movlb	0	; () banked
  4776  015C4A  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4777  015C4C  0100               	movlb	0	; () banked
  4778  015C4E  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4779  015C50  D009               	goto	l12007
  4780  015C52  0100               	movlb	0	; () banked
  4781  015C54  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4782  015C56  E104               	bnz	u9340
  4783  015C58  0E80               	movlw	128
  4784  015C5A  0100               	movlb	0	; () banked
  4785  015C5C  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4786  015C5E  B0D8               	btfsc	status,0,c
  4787  015C60                     u9340:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;Console.c: 250: Console_NewLine();
  4791  015C60  EC1B  F0A9         	call	_Console_NewLine	;wreg free
  4792  015C64                     l12007:
  4793                           
  4794                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  4795  015C64  0E08               	movlw	8
  4796  015C66  2441               	addwf	_gCursor+2,w,c
  4797  015C68  0100               	movlb	0	; () banked
  4798  015C6A  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  4799  015C6C  0E00               	movlw	0
  4800  015C6E  2042               	addwfc	_gCursor+3,w,c
  4801  015C70  0100               	movlb	0	; () banked
  4802  015C72  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4803  015C74  0100               	movlb	0	; () banked
  4804  015C76  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4805  015C78  D00C               	goto	l12015
  4806  015C7A  0100               	movlb	0	; () banked
  4807  015C7C  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4808  015C7E  E105               	bnz	u9350
  4809  015C80  0E80               	movlw	128
  4810  015C82  0100               	movlb	0	; () banked
  4811  015C84  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4812  015C86  A0D8               	btfss	status,0,c
  4813  015C88  D004               	goto	l12015
  4814  015C8A                     u9350:
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;Console.c: 252: {
  4818                           ;Console.c: 253: Console_FormFeed();
  4819  015C8A  ECAC  F0A9         	call	_Console_FormFeed	;wreg free
  4820                           
  4821                           ;Console.c: 254: return 1;
  4822  015C8E  0E01               	movlw	1
  4823  015C90  0012               	return	
  4824  015C92                     l12015:
  4825                           
  4826                           ;Console.c: 255: }
  4827                           ;Console.c: 257: return 0;
  4828  015C92  0E00               	movlw	0
  4829  015C94  0012               	return	
  4830  015C96                     __end_of_Console_IncrementCursor:
  4831                           	opt stack 0
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           postinc0	equ	0xFEE
  4839                           wreg	equ	0xFE8
  4840                           postdec1	equ	0xFE5
  4841                           fsr1h	equ	0xFE2
  4842                           fsr1l	equ	0xFE1
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _Console_NewLine *****************
  4851 ;; Defined at:
  4852 ;;		line 175 in file "Library/Console.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;Total ram usage:        2 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    7
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_Console_IncrementCursor
  4877 ;;		_Console_PrintChar
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text8
  4882  015236                     __ptext8:
  4883                           	opt stack 0
  4884  015236                     _Console_NewLine:
  4885                           	opt stack 17
  4886                           
  4887                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  4888                           
  4889                           ;incstack = 0
  4890  015236  D039               	goto	l11841
  4891  015238                     l11833:
  4892                           
  4893                           ;Console.c: 179: {
  4894                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  4895  015238  5036               	movf	_lBufferY,w,c
  4896  01523A  0D14               	mullw	20
  4897  01523C  0E6E               	movlw	low _lBuffer
  4898  01523E  0100               	movlb	0	; () banked
  4899  015240  6F60               	movwf	??_Console_NewLine& (0+255),b
  4900  015242  0E02               	movlw	high _lBuffer
  4901  015244  0100               	movlb	0	; () banked
  4902  015246  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  4903  015248  50F3               	movf	prodl,w,c
  4904  01524A  0100               	movlb	0	; () banked
  4905  01524C  2760               	addwf	??_Console_NewLine& (0+255),f,b
  4906  01524E  50F4               	movf	prodh,w,c
  4907  015250  0100               	movlb	0	; () banked
  4908  015252  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4909  015254  5037               	movf	_lBufferX,w,c
  4910  015256  0D01               	mullw	1
  4911  015258  50F3               	movf	prodl,w,c
  4912  01525A  0100               	movlb	0	; () banked
  4913  01525C  2560               	addwf	??_Console_NewLine& (0+255),w,b
  4914  01525E  6ED9               	movwf	fsr2l,c
  4915  015260  50F4               	movf	prodh,w,c
  4916  015262  0100               	movlb	0	; () banked
  4917  015264  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4918  015266  6EDA               	movwf	fsr2h,c
  4919  015268  50DF               	movf	indf2,w,c
  4920  01526A  B4D8               	btfsc	status,2,c
  4921  01526C  D01D               	goto	l11839
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  4925  01526E  0E01               	movlw	1
  4926  015270  0100               	movlb	0	; () banked
  4927  015272  6FFD               	movwf	_change& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930  015274  5036               	movf	_lBufferY,w,c
  4931  015276  0D14               	mullw	20
  4932  015278  0E6E               	movlw	low _lBuffer
  4933  01527A  0100               	movlb	0	; () banked
  4934  01527C  6F60               	movwf	??_Console_NewLine& (0+255),b
  4935  01527E  0E02               	movlw	high _lBuffer
  4936  015280  0100               	movlb	0	; () banked
  4937  015282  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  4938  015284  50F3               	movf	prodl,w,c
  4939  015286  0100               	movlb	0	; () banked
  4940  015288  2760               	addwf	??_Console_NewLine& (0+255),f,b
  4941  01528A  50F4               	movf	prodh,w,c
  4942  01528C  0100               	movlb	0	; () banked
  4943  01528E  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4944  015290  5037               	movf	_lBufferX,w,c
  4945  015292  0D01               	mullw	1
  4946  015294  50F3               	movf	prodl,w,c
  4947  015296  0100               	movlb	0	; () banked
  4948  015298  2560               	addwf	??_Console_NewLine& (0+255),w,b
  4949  01529A  6ED9               	movwf	fsr2l,c
  4950  01529C  50F4               	movf	prodh,w,c
  4951  01529E  0100               	movlb	0	; () banked
  4952  0152A0  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4953  0152A2  6EDA               	movwf	fsr2h,c
  4954  0152A4  0E80               	movlw	128
  4955  0152A6  6EDF               	movwf	indf2,c
  4956  0152A8                     l11839:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;Console.c: 182: lBufferX ++;
  4960  0152A8  2A37               	incf	_lBufferX,f,c
  4961  0152AA                     l11841:
  4962  0152AA  0E13               	movlw	19
  4963  0152AC  6437               	cpfsgt	_lBufferX,c
  4964  0152AE  D7C4               	goto	l11833
  4965                           
  4966                           ;Console.c: 183: }
  4967                           ;Console.c: 185: lBufferX = 0;
  4968  0152B0  0E00               	movlw	0
  4969  0152B2  6E37               	movwf	_lBufferX,c
  4970                           
  4971                           ;Console.c: 186: lBufferY ++;
  4972  0152B4  2A36               	incf	_lBufferY,f,c
  4973                           
  4974                           ;Console.c: 188: gCursor.y += 8;
  4975  0152B6  0E08               	movlw	8
  4976  0152B8  2641               	addwf	_gCursor+2,f,c
  4977  0152BA  0E00               	movlw	0
  4978  0152BC  2242               	addwfc	_gCursor+3,f,c
  4979                           
  4980                           ;Console.c: 189: gCursor.x = 6;
  4981  0152BE  0E00               	movlw	0
  4982  0152C0  6E40               	movwf	_gCursor+1,c
  4983  0152C2  0E06               	movlw	6
  4984  0152C4  6E3F               	movwf	_gCursor,c
  4985  0152C6  0012               	return		;funcret
  4986  0152C8                     __end_of_Console_NewLine:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           postdec1	equ	0xFE5
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function _Console_FormFeed *****************
  5007 ;; Defined at:
  5008 ;;		line 192 in file "Library/Console.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  y               1    3[BANK0 ] unsigned char 
  5013 ;;  x               1    2[BANK0 ] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;Total ram usage:        4 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    7
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_Console_IncrementCursor
  5034 ;;		_Console_PrintChar
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text9
  5039  015358                     __ptext9:
  5040                           	opt stack 0
  5041  015358                     _Console_FormFeed:
  5042                           	opt stack 17
  5043                           
  5044                           ;Console.c: 195: lBufferX = 0;
  5045                           
  5046                           ;incstack = 0
  5047  015358  0E00               	movlw	0
  5048  01535A  6E37               	movwf	_lBufferX,c
  5049                           
  5050                           ;Console.c: 196: lBufferY = 0;
  5051  01535C  0E00               	movlw	0
  5052  01535E  6E36               	movwf	_lBufferY,c
  5053                           
  5054                           ;Console.c: 197: UINT8 x, y;
  5055                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5056  015360  0E00               	movlw	0
  5057  015362  0100               	movlb	0	; () banked
  5058  015364  6F63               	movwf	Console_FormFeed@y& (0+255),b
  5059  015366                     l11853:
  5060                           
  5061                           ; BSR set to: 0
  5062  015366  0E0E               	movlw	14
  5063  015368  0100               	movlb	0	; () banked
  5064  01536A  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  5065  01536C  D001               	goto	l11857
  5066  01536E  D02D               	goto	l11875
  5067  015370                     l11857:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5071  015370  0E00               	movlw	0
  5072  015372  0100               	movlb	0	; () banked
  5073  015374  6F62               	movwf	Console_FormFeed@x& (0+255),b
  5074  015376                     l11859:
  5075                           
  5076                           ; BSR set to: 0
  5077  015376  0E13               	movlw	19
  5078  015378  0100               	movlb	0	; () banked
  5079  01537A  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  5080  01537C  D001               	goto	l11863
  5081  01537E  D022               	goto	l11871
  5082  015380                     l11863:
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5086  015380  0E01               	movlw	1
  5087  015382  0100               	movlb	0	; () banked
  5088  015384  6FFD               	movwf	_change& (0+255),b
  5089                           
  5090                           ; BSR set to: 0
  5091  015386  0100               	movlb	0	; () banked
  5092  015388  5163               	movf	Console_FormFeed@y& (0+255),w,b
  5093  01538A  0D14               	mullw	20
  5094  01538C  0E6E               	movlw	low _lBuffer
  5095  01538E  0100               	movlb	0	; () banked
  5096  015390  6F60               	movwf	??_Console_FormFeed& (0+255),b
  5097  015392  0E02               	movlw	high _lBuffer
  5098  015394  0100               	movlb	0	; () banked
  5099  015396  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5100  015398  50F3               	movf	prodl,w,c
  5101  01539A  0100               	movlb	0	; () banked
  5102  01539C  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  5103  01539E  50F4               	movf	prodh,w,c
  5104  0153A0  0100               	movlb	0	; () banked
  5105  0153A2  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5106  0153A4  0100               	movlb	0	; () banked
  5107  0153A6  5162               	movf	Console_FormFeed@x& (0+255),w,b
  5108  0153A8  0D01               	mullw	1
  5109  0153AA  50F3               	movf	prodl,w,c
  5110  0153AC  0100               	movlb	0	; () banked
  5111  0153AE  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  5112  0153B0  6ED9               	movwf	fsr2l,c
  5113  0153B2  50F4               	movf	prodh,w,c
  5114  0153B4  0100               	movlb	0	; () banked
  5115  0153B6  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5116  0153B8  6EDA               	movwf	fsr2h,c
  5117  0153BA  0E80               	movlw	128
  5118  0153BC  6EDF               	movwf	indf2,c
  5119                           
  5120                           ; BSR set to: 0
  5121  0153BE  0100               	movlb	0	; () banked
  5122  0153C0  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  5123  0153C2  D7D9               	goto	l11859
  5124  0153C4                     l11871:
  5125                           
  5126                           ; BSR set to: 0
  5127  0153C4  0100               	movlb	0	; () banked
  5128  0153C6  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  5129  0153C8  D7CE               	goto	l11853
  5130  0153CA                     l11875:
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;Console.c: 204: clearall = 1;
  5134  0153CA  0E01               	movlw	1
  5135  0153CC  0100               	movlb	0	; () banked
  5136  0153CE  6FEB               	movwf	_clearall& (0+255),b
  5137                           
  5138                           ;Console.c: 205: gCursor.x = 6;
  5139  0153D0  0E00               	movlw	0
  5140  0153D2  6E40               	movwf	_gCursor+1,c
  5141  0153D4  0E06               	movlw	6
  5142  0153D6  6E3F               	movwf	_gCursor,c
  5143                           
  5144                           ;Console.c: 206: gCursor.y = 6;
  5145  0153D8  0E00               	movlw	0
  5146  0153DA  6E42               	movwf	_gCursor+3,c
  5147  0153DC  0E06               	movlw	6
  5148  0153DE  6E41               	movwf	_gCursor+2,c
  5149                           
  5150                           ; BSR set to: 0
  5151  0153E0  0012               	return		;funcret
  5152  0153E2                     __end_of_Console_FormFeed:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           postinc0	equ	0xFEE
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           fsr1h	equ	0xFE2
  5164                           fsr1l	equ	0xFE1
  5165                           indf2	equ	0xFDF
  5166                           postinc2	equ	0xFDE
  5167                           postdec2	equ	0xFDD
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _Console_ResetCursor *****************
  5173 ;; Defined at:
  5174 ;;		line 297 in file "Library/Console.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;		None
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:        0 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    7
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_Console_PrintChar
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text10
  5203  016822                     __ptext10:
  5204                           	opt stack 0
  5205  016822                     _Console_ResetCursor:
  5206                           	opt stack 19
  5207                           
  5208                           ;Console.c: 299: gCursor.x = 6;
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;incstack = 0
  5212  016822  0E00               	movlw	0
  5213  016824  6E40               	movwf	_gCursor+1,c
  5214  016826  0E06               	movlw	6
  5215  016828  6E3F               	movwf	_gCursor,c
  5216                           
  5217                           ;Console.c: 300: gCursor.y = 6;
  5218  01682A  0E00               	movlw	0
  5219  01682C  6E42               	movwf	_gCursor+3,c
  5220  01682E  0E06               	movlw	6
  5221  016830  6E41               	movwf	_gCursor+2,c
  5222                           
  5223                           ;Console.c: 303: lBufferX = 0;
  5224  016832  0E00               	movlw	0
  5225  016834  6E37               	movwf	_lBufferX,c
  5226                           
  5227                           ;Console.c: 304: lBufferY = 0;
  5228  016836  0E00               	movlw	0
  5229  016838  6E36               	movwf	_lBufferY,c
  5230  01683A  0012               	return		;funcret
  5231  01683C                     __end_of_Console_ResetCursor:
  5232                           	opt stack 0
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           postdec1	equ	0xFE5
  5242                           fsr1h	equ	0xFE2
  5243                           fsr1l	equ	0xFE1
  5244                           indf2	equ	0xFDF
  5245                           postinc2	equ	0xFDE
  5246                           postdec2	equ	0xFDD
  5247                           fsr2h	equ	0xFDA
  5248                           fsr2l	equ	0xFD9
  5249                           status	equ	0xFD8
  5250                           
  5251 ;; *************** function _Console_Backspace *****************
  5252 ;; Defined at:
  5253 ;;		line 209 in file "Library/Console.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;		None
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;		None
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  1    wreg      void 
  5260 ;; Registers used:
  5261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;Total ram usage:        0 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    8
  5274 ;; This function calls:
  5275 ;;		_Console_ClearCursor
  5276 ;; This function is called by:
  5277 ;;		_Console_PrintChar
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text11
  5282  015F62                     __ptext11:
  5283                           	opt stack 0
  5284  015F62                     _Console_Backspace:
  5285                           	opt stack 18
  5286                           
  5287                           ;Console.c: 211: if (lBufferX > 0)
  5288                           
  5289                           ;incstack = 0
  5290  015F62  5037               	movf	_lBufferX,w,c
  5291  015F64  B4D8               	btfsc	status,2,c
  5292  015F66  D006               	goto	l12283
  5293                           
  5294                           ;Console.c: 212: {
  5295                           ;Console.c: 213: gCursor.x -= 6;
  5296  015F68  0EFA               	movlw	250
  5297  015F6A  263F               	addwf	_gCursor,f,c
  5298  015F6C  0EFF               	movlw	255
  5299  015F6E  2240               	addwfc	_gCursor+1,f,c
  5300                           
  5301                           ;Console.c: 216: lBufferX --;
  5302  015F70  0637               	decf	_lBufferX,f,c
  5303                           
  5304                           ;Console.c: 218: }
  5305  015F72  D01B               	goto	l12295
  5306  015F74                     l12283:
  5307                           
  5308                           ;Console.c: 219: else if (lBufferY > 0)
  5309  015F74  5036               	movf	_lBufferY,w,c
  5310  015F76  B4D8               	btfsc	status,2,c
  5311  015F78  D00C               	goto	l12293
  5312                           
  5313                           ;Console.c: 220: {
  5314                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5315  015F7A  0E00               	movlw	0
  5316  015F7C  6E40               	movwf	_gCursor+1,c
  5317  015F7E  0E72               	movlw	114
  5318  015F80  6E3F               	movwf	_gCursor,c
  5319                           
  5320                           ;Console.c: 222: gCursor.y -= 8;
  5321  015F82  0EF8               	movlw	248
  5322  015F84  2641               	addwf	_gCursor+2,f,c
  5323  015F86  0EFF               	movlw	255
  5324  015F88  2242               	addwfc	_gCursor+3,f,c
  5325                           
  5326                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5327  015F8A  0E13               	movlw	19
  5328  015F8C  6E37               	movwf	_lBufferX,c
  5329                           
  5330                           ;Console.c: 226: lBufferY --;
  5331  015F8E  0636               	decf	_lBufferY,f,c
  5332                           
  5333                           ;Console.c: 228: }
  5334  015F90  D00C               	goto	l12295
  5335  015F92                     l12293:
  5336                           
  5337                           ;Console.c: 229: else
  5338                           ;Console.c: 230: {
  5339                           ;Console.c: 231: gCursor.x = 6;
  5340  015F92  0E00               	movlw	0
  5341  015F94  6E40               	movwf	_gCursor+1,c
  5342  015F96  0E06               	movlw	6
  5343  015F98  6E3F               	movwf	_gCursor,c
  5344                           
  5345                           ;Console.c: 232: gCursor.y = 6;
  5346  015F9A  0E00               	movlw	0
  5347  015F9C  6E42               	movwf	_gCursor+3,c
  5348  015F9E  0E06               	movlw	6
  5349  015FA0  6E41               	movwf	_gCursor+2,c
  5350                           
  5351                           ;Console.c: 235: lBufferX = 0;
  5352  015FA2  0E00               	movlw	0
  5353  015FA4  6E37               	movwf	_lBufferX,c
  5354                           
  5355                           ;Console.c: 236: lBufferY = 0;
  5356  015FA6  0E00               	movlw	0
  5357  015FA8  6E36               	movwf	_lBufferY,c
  5358  015FAA                     l12295:
  5359                           
  5360                           ;Console.c: 238: }
  5361                           ;Console.c: 240: Console_ClearCursor();
  5362  015FAA  ECBA  F0B1         	call	_Console_ClearCursor	;wreg free
  5363  015FAE  0012               	return		;funcret
  5364  015FB0                     __end_of_Console_Backspace:
  5365                           	opt stack 0
  5366                           tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           postdec1	equ	0xFE5
  5375                           fsr1h	equ	0xFE2
  5376                           fsr1l	equ	0xFE1
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _Console_ClearCursor *****************
  5385 ;; Defined at:
  5386 ;;		line 308 in file "Library/Console.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;Total ram usage:        2 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    7
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_Console_Backspace
  5411 ;;		_Console_Tab
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text12
  5416  016374                     __ptext12:
  5417                           	opt stack 0
  5418  016374                     _Console_ClearCursor:
  5419                           	opt stack 18
  5420                           
  5421                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5422                           
  5423                           ;incstack = 0
  5424  016374  0E01               	movlw	1
  5425  016376  0100               	movlb	0	; () banked
  5426  016378  6FFD               	movwf	_change& (0+255),b
  5427                           
  5428                           ; BSR set to: 0
  5429  01637A  5036               	movf	_lBufferY,w,c
  5430  01637C  0D14               	mullw	20
  5431  01637E  0E6E               	movlw	low _lBuffer
  5432  016380  0100               	movlb	0	; () banked
  5433  016382  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  5434  016384  0E02               	movlw	high _lBuffer
  5435  016386  0100               	movlb	0	; () banked
  5436  016388  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5437  01638A  50F3               	movf	prodl,w,c
  5438  01638C  0100               	movlb	0	; () banked
  5439  01638E  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  5440  016390  50F4               	movf	prodh,w,c
  5441  016392  0100               	movlb	0	; () banked
  5442  016394  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5443  016396  5037               	movf	_lBufferX,w,c
  5444  016398  0D01               	mullw	1
  5445  01639A  50F3               	movf	prodl,w,c
  5446  01639C  0100               	movlb	0	; () banked
  5447  01639E  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  5448  0163A0  6ED9               	movwf	fsr2l,c
  5449  0163A2  50F4               	movf	prodh,w,c
  5450  0163A4  0100               	movlb	0	; () banked
  5451  0163A6  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5452  0163A8  6EDA               	movwf	fsr2h,c
  5453  0163AA  0E80               	movlw	128
  5454  0163AC  6EDF               	movwf	indf2,c
  5455                           
  5456                           ; BSR set to: 0
  5457  0163AE  0012               	return		;funcret
  5458  0163B0                     __end_of_Console_ClearCursor:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           postinc0	equ	0xFEE
  5467                           wreg	equ	0xFE8
  5468                           postdec1	equ	0xFE5
  5469                           fsr1h	equ	0xFE2
  5470                           fsr1l	equ	0xFE1
  5471                           indf2	equ	0xFDF
  5472                           postinc2	equ	0xFDE
  5473                           postdec2	equ	0xFDD
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function _pow *****************
  5479 ;; Defined at:
  5480 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\pow.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  x               4   94[BANK0 ] void 
  5483 ;;  y               4   98[BANK0 ] void 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  yi              4    9[BANK1 ] unsigned long 
  5486 ;;  sign            1    8[BANK1 ] unsigned char 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  4   94[BANK0 ] unsigned char 
  5489 ;; Registers used:
  5490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5496 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Totals:         0       8      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;Total ram usage:       21 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:   10
  5503 ;; This function calls:
  5504 ;;		___flge
  5505 ;;		___flmul
  5506 ;;		___flneg
  5507 ;;		___fltol
  5508 ;;		___xxtofl
  5509 ;;		_exp
  5510 ;;		_log
  5511 ;; This function is called by:
  5512 ;;		_printToScreen
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text13
  5517  012308                     __ptext13:
  5518                           	opt stack 0
  5519  012308                     _pow:
  5520                           	opt stack 19
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;incstack = 0
  5524  012308  0E00               	movlw	0
  5525  01230A  0101               	movlb	1	; () banked
  5526  01230C  6FE7               	movwf	pow@sign& (0+255),b
  5527                           
  5528                           ; BSR set to: 1
  5529  01230E  0100               	movlb	0	; () banked
  5530  012310  51BE               	movf	pow@x& (0+255),w,b
  5531  012312  0100               	movlb	0	; () banked
  5532  012314  11BF               	iorwf	(pow@x+1)& (0+255),w,b
  5533  012316  0100               	movlb	0	; () banked
  5534  012318  11C0               	iorwf	(pow@x+2)& (0+255),w,b
  5535  01231A  0100               	movlb	0	; () banked
  5536  01231C  11C1               	iorwf	(pow@x+3)& (0+255),w,b
  5537  01231E  A4D8               	btfss	status,2,c
  5538  012320  D025               	goto	l14319
  5539                           
  5540                           ; BSR set to: 0
  5541  012322  0E00               	movlw	0
  5542  012324  0100               	movlb	0	; () banked
  5543  012326  6F60               	movwf	___flge@ff1& (0+255),b
  5544  012328  0E00               	movlw	0
  5545  01232A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  5546  01232C  0E00               	movlw	0
  5547  01232E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  5548  012330  0E00               	movlw	0
  5549  012332  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  5550  012334  C0C2  F064         	movff	pow@y,___flge@ff2
  5551  012338  C0C3  F065         	movff	pow@y+1,___flge@ff2+1
  5552  01233C  C0C4  F066         	movff	pow@y+2,___flge@ff2+2
  5553  012340  C0C5  F067         	movff	pow@y+3,___flge@ff2+3
  5554  012344  ECDA  F096         	call	___flge	;wreg free
  5555  012348  0100               	movlb	0	; () banked
  5556  01234A  A0D8               	btfss	status,0,c
  5557  01234C  D005               	goto	l2543
  5558                           
  5559                           ; BSR set to: 0
  5560  01234E  0E00               	movlw	0
  5561  012350  0101               	movlb	1	; () banked
  5562  012352  6F15               	movwf	(_errno+1)& (0+255),b
  5563  012354  0E21               	movlw	33
  5564  012356  6F14               	movwf	_errno& (0+255),b
  5565  012358                     l2543:
  5566  012358  0E00               	movlw	0
  5567  01235A  0100               	movlb	0	; () banked
  5568  01235C  6FBE               	movwf	?_pow& (0+255),b
  5569  01235E  0E00               	movlw	0
  5570  012360  6FBF               	movwf	(?_pow+1)& (0+255),b
  5571  012362  0E00               	movlw	0
  5572  012364  6FC0               	movwf	(?_pow+2)& (0+255),b
  5573  012366  0E00               	movlw	0
  5574  012368  6FC1               	movwf	(?_pow+3)& (0+255),b
  5575                           
  5576                           ; BSR set to: 0
  5577  01236A  0012               	return	
  5578  01236C                     l14319:
  5579                           
  5580                           ; BSR set to: 0
  5581  01236C  0100               	movlb	0	; () banked
  5582  01236E  51C2               	movf	pow@y& (0+255),w,b
  5583  012370  0100               	movlb	0	; () banked
  5584  012372  11C3               	iorwf	(pow@y+1)& (0+255),w,b
  5585  012374  0100               	movlb	0	; () banked
  5586  012376  11C4               	iorwf	(pow@y+2)& (0+255),w,b
  5587  012378  0100               	movlb	0	; () banked
  5588  01237A  11C5               	iorwf	(pow@y+3)& (0+255),w,b
  5589  01237C  A4D8               	btfss	status,2,c
  5590  01237E  D00A               	goto	l14325
  5591                           
  5592                           ; BSR set to: 0
  5593  012380  0E00               	movlw	0
  5594  012382  0100               	movlb	0	; () banked
  5595  012384  6FBE               	movwf	?_pow& (0+255),b
  5596  012386  0E00               	movlw	0
  5597  012388  6FBF               	movwf	(?_pow+1)& (0+255),b
  5598  01238A  0E80               	movlw	128
  5599  01238C  6FC0               	movwf	(?_pow+2)& (0+255),b
  5600  01238E  0E3F               	movlw	63
  5601  012390  6FC1               	movwf	(?_pow+3)& (0+255),b
  5602                           
  5603                           ; BSR set to: 0
  5604  012392  0012               	return	
  5605  012394                     l14325:
  5606                           
  5607                           ; BSR set to: 0
  5608  012394  0100               	movlb	0	; () banked
  5609  012396  AFC1               	btfss	(pow@x+3)& (0+255),7,b
  5610  012398  D058               	goto	l14337
  5611                           
  5612                           ; BSR set to: 0
  5613  01239A  C0C2  F087         	movff	pow@y,___fltol@f1
  5614  01239E  C0C3  F088         	movff	pow@y+1,___fltol@f1+1
  5615  0123A2  C0C4  F089         	movff	pow@y+2,___fltol@f1+2
  5616  0123A6  C0C5  F08A         	movff	pow@y+3,___fltol@f1+3
  5617  0123AA  EC86  F09F         	call	___fltol	;wreg free
  5618  0123AE  C087  F1E8         	movff	?___fltol,pow@yi
  5619  0123B2  C088  F1E9         	movff	?___fltol+1,pow@yi+1
  5620  0123B6  C089  F1EA         	movff	?___fltol+2,pow@yi+2
  5621  0123BA  C08A  F1EB         	movff	?___fltol+3,pow@yi+3
  5622  0123BE  C1E8  F060         	movff	pow@yi,___xxtofl@val
  5623  0123C2  C1E9  F061         	movff	pow@yi+1,___xxtofl@val+1
  5624  0123C6  C1EA  F062         	movff	pow@yi+2,___xxtofl@val+2
  5625  0123CA  C1EB  F063         	movff	pow@yi+3,___xxtofl@val+3
  5626  0123CE  0E00               	movlw	0
  5627  0123D0  EC81  F093         	call	___xxtofl
  5628  0123D4  0100               	movlb	0	; () banked
  5629  0123D6  51C2               	movf	pow@y& (0+255),w,b
  5630  0123D8  0100               	movlb	0	; () banked
  5631  0123DA  1960               	xorwf	?___xxtofl& (0+255),w,b
  5632  0123DC  E110               	bnz	u12090
  5633  0123DE  0100               	movlb	0	; () banked
  5634  0123E0  51C3               	movf	(pow@y+1)& (0+255),w,b
  5635  0123E2  0100               	movlb	0	; () banked
  5636  0123E4  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
  5637  0123E6  E10B               	bnz	u12090
  5638  0123E8  0100               	movlb	0	; () banked
  5639  0123EA  51C4               	movf	(pow@y+2)& (0+255),w,b
  5640  0123EC  0100               	movlb	0	; () banked
  5641  0123EE  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
  5642  0123F0  E106               	bnz	u12090
  5643  0123F2  0100               	movlb	0	; () banked
  5644  0123F4  51C5               	movf	(pow@y+3)& (0+255),w,b
  5645  0123F6  0100               	movlb	0	; () banked
  5646  0123F8  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
  5647  0123FA  B4D8               	btfsc	status,2,c
  5648  0123FC  D00F               	goto	l14333
  5649  0123FE                     u12090:
  5650                           
  5651                           ; BSR set to: 0
  5652  0123FE  0E00               	movlw	0
  5653  012400  0101               	movlb	1	; () banked
  5654  012402  6F15               	movwf	(_errno+1)& (0+255),b
  5655  012404  0E21               	movlw	33
  5656  012406  6F14               	movwf	_errno& (0+255),b
  5657  012408  0E00               	movlw	0
  5658  01240A  0100               	movlb	0	; () banked
  5659  01240C  6FBE               	movwf	?_pow& (0+255),b
  5660  01240E  0E00               	movlw	0
  5661  012410  6FBF               	movwf	(?_pow+1)& (0+255),b
  5662  012412  0E00               	movlw	0
  5663  012414  6FC0               	movwf	(?_pow+2)& (0+255),b
  5664  012416  0E00               	movlw	0
  5665  012418  6FC1               	movwf	(?_pow+3)& (0+255),b
  5666                           
  5667                           ; BSR set to: 0
  5668  01241A  0012               	return	
  5669  01241C                     l14333:
  5670                           
  5671                           ; BSR set to: 0
  5672  01241C  0101               	movlb	1	; () banked
  5673  01241E  51E8               	movf	pow@yi& (0+255),w,b
  5674  012420  0B01               	andlw	1
  5675  012422  0101               	movlb	1	; () banked
  5676  012424  6FE7               	movwf	pow@sign& (0+255),b
  5677                           
  5678                           ; BSR set to: 1
  5679  012426  C0BE  F060         	movff	pow@x,___flneg@f1
  5680  01242A  C0BF  F061         	movff	pow@x+1,___flneg@f1+1
  5681  01242E  C0C0  F062         	movff	pow@x+2,___flneg@f1+2
  5682  012432  C0C1  F063         	movff	pow@x+3,___flneg@f1+3
  5683  012436  EC13  F0B2         	call	___flneg	;wreg free
  5684  01243A  C060  F0BE         	movff	?___flneg,pow@x
  5685  01243E  C061  F0BF         	movff	?___flneg+1,pow@x+1
  5686  012442  C062  F0C0         	movff	?___flneg+2,pow@x+2
  5687  012446  C063  F0C1         	movff	?___flneg+3,pow@x+3
  5688  01244A                     l14337:
  5689  01244A  C0BE  F0AB         	movff	pow@x,log@x
  5690  01244E  C0BF  F0AC         	movff	pow@x+1,log@x+1
  5691  012452  C0C0  F0AD         	movff	pow@x+2,log@x+2
  5692  012456  C0C1  F0AE         	movff	pow@x+3,log@x+3
  5693  01245A  EC68  F098         	call	_log	;wreg free
  5694  01245E  C0AB  F1DF         	movff	?_log,_pow$15176
  5695  012462  C0AC  F1E0         	movff	?_log+1,_pow$15176+1
  5696  012466  C0AD  F1E1         	movff	?_log+2,_pow$15176+2
  5697  01246A  C0AE  F1E2         	movff	?_log+3,_pow$15176+3
  5698  01246E  C1DF  F06E         	movff	_pow$15176,___flmul@b
  5699  012472  C1E0  F06F         	movff	_pow$15176+1,___flmul@b+1
  5700  012476  C1E1  F070         	movff	_pow$15176+2,___flmul@b+2
  5701  01247A  C1E2  F071         	movff	_pow$15176+3,___flmul@b+3
  5702  01247E  C0C2  F072         	movff	pow@y,___flmul@a
  5703  012482  C0C3  F073         	movff	pow@y+1,___flmul@a+1
  5704  012486  C0C4  F074         	movff	pow@y+2,___flmul@a+2
  5705  01248A  C0C5  F075         	movff	pow@y+3,___flmul@a+3
  5706  01248E  EC54  F082         	call	___flmul	;wreg free
  5707  012492  C06E  F1E3         	movff	?___flmul,_pow$15177
  5708  012496  C06F  F1E4         	movff	?___flmul+1,_pow$15177+1
  5709  01249A  C070  F1E5         	movff	?___flmul+2,_pow$15177+2
  5710  01249E  C071  F1E6         	movff	?___flmul+3,_pow$15177+3
  5711  0124A2  C1E3  F0B3         	movff	_pow$15177,exp@x
  5712  0124A6  C1E4  F0B4         	movff	_pow$15177+1,exp@x+1
  5713  0124AA  C1E5  F0B5         	movff	_pow$15177+2,exp@x+2
  5714  0124AE  C1E6  F0B6         	movff	_pow$15177+3,exp@x+3
  5715  0124B2  EC73  F08A         	call	_exp	;wreg free
  5716  0124B6  C0B3  F0BE         	movff	?_exp,pow@x
  5717  0124BA  C0B4  F0BF         	movff	?_exp+1,pow@x+1
  5718  0124BE  C0B5  F0C0         	movff	?_exp+2,pow@x+2
  5719  0124C2  C0B6  F0C1         	movff	?_exp+3,pow@x+3
  5720  0124C6  0101               	movlb	1	; () banked
  5721  0124C8  51E7               	movf	pow@sign& (0+255),w,b
  5722  0124CA  0101               	movlb	1	; () banked
  5723  0124CC  B4D8               	btfsc	status,2,c
  5724  0124CE  D013               	goto	l2548
  5725                           
  5726                           ; BSR set to: 1
  5727  0124D0  C0BE  F060         	movff	pow@x,___flneg@f1
  5728  0124D4  C0BF  F061         	movff	pow@x+1,___flneg@f1+1
  5729  0124D8  C0C0  F062         	movff	pow@x+2,___flneg@f1+2
  5730  0124DC  C0C1  F063         	movff	pow@x+3,___flneg@f1+3
  5731  0124E0  EC13  F0B2         	call	___flneg	;wreg free
  5732  0124E4  C060  F0BE         	movff	?___flneg,?_pow
  5733  0124E8  C061  F0BF         	movff	?___flneg+1,?_pow+1
  5734  0124EC  C062  F0C0         	movff	?___flneg+2,?_pow+2
  5735  0124F0  C063  F0C1         	movff	?___flneg+3,?_pow+3
  5736  0124F4  0012               	return	
  5737  0124F6                     l2548:
  5738                           
  5739                           ; BSR set to: 1
  5740  0124F6  C0BE  F0BE         	movff	pow@x,?_pow
  5741  0124FA  C0BF  F0BF         	movff	pow@x+1,?_pow+1
  5742  0124FE  C0C0  F0C0         	movff	pow@x+2,?_pow+2
  5743  012502  C0C1  F0C1         	movff	pow@x+3,?_pow+3
  5744  012506  0012               	return		;funcret
  5745  012508                     __end_of_pow:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           postinc0	equ	0xFEE
  5754                           wreg	equ	0xFE8
  5755                           postdec1	equ	0xFE5
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _log *****************
  5766 ;; Defined at:
  5767 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\log.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  x               4   75[BANK0 ] unsigned char 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  exponent        2   79[BANK0 ] int 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  4   75[BANK0 ] int 
  5774 ;; Registers used:
  5775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;Total ram usage:        6 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    9
  5788 ;; This function calls:
  5789 ;;		___fladd
  5790 ;;		___flmul
  5791 ;;		___xxtofl
  5792 ;;		_eval_poly
  5793 ;;		_frexp
  5794 ;; This function is called by:
  5795 ;;		_pow
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text14
  5800  0130D0                     __ptext14:
  5801                           	opt stack 0
  5802  0130D0                     _log:
  5803                           	opt stack 19
  5804                           
  5805                           ;incstack = 0
  5806  0130D0  0100               	movlb	0	; () banked
  5807  0130D2  AFAE               	btfss	(log@x+3)& (0+255),7,b
  5808  0130D4  D00F               	goto	l13915
  5809                           
  5810                           ; BSR set to: 0
  5811  0130D6  0E00               	movlw	0
  5812  0130D8  0101               	movlb	1	; () banked
  5813  0130DA  6F15               	movwf	(_errno+1)& (0+255),b
  5814  0130DC  0E21               	movlw	33
  5815  0130DE  6F14               	movwf	_errno& (0+255),b
  5816  0130E0  0E00               	movlw	0
  5817  0130E2  0100               	movlb	0	; () banked
  5818  0130E4  6FAB               	movwf	?_log& (0+255),b
  5819  0130E6  0E00               	movlw	0
  5820  0130E8  6FAC               	movwf	(?_log+1)& (0+255),b
  5821  0130EA  0E00               	movlw	0
  5822  0130EC  6FAD               	movwf	(?_log+2)& (0+255),b
  5823  0130EE  0E00               	movlw	0
  5824  0130F0  6FAE               	movwf	(?_log+3)& (0+255),b
  5825                           
  5826                           ; BSR set to: 0
  5827  0130F2  0012               	return	
  5828  0130F4                     l13915:
  5829                           
  5830                           ; BSR set to: 0
  5831  0130F4  0100               	movlb	0	; () banked
  5832  0130F6  51AB               	movf	log@x& (0+255),w,b
  5833  0130F8  0100               	movlb	0	; () banked
  5834  0130FA  11AC               	iorwf	(log@x+1)& (0+255),w,b
  5835  0130FC  0100               	movlb	0	; () banked
  5836  0130FE  11AD               	iorwf	(log@x+2)& (0+255),w,b
  5837  013100  0100               	movlb	0	; () banked
  5838  013102  11AE               	iorwf	(log@x+3)& (0+255),w,b
  5839  013104  A4D8               	btfss	status,2,c
  5840  013106  D00F               	goto	l13921
  5841                           
  5842                           ; BSR set to: 0
  5843  013108  0E00               	movlw	0
  5844  01310A  0101               	movlb	1	; () banked
  5845  01310C  6F15               	movwf	(_errno+1)& (0+255),b
  5846  01310E  0E22               	movlw	34
  5847  013110  6F14               	movwf	_errno& (0+255),b
  5848  013112  0E00               	movlw	0
  5849  013114  0100               	movlb	0	; () banked
  5850  013116  6FAB               	movwf	?_log& (0+255),b
  5851  013118  0E00               	movlw	0
  5852  01311A  6FAC               	movwf	(?_log+1)& (0+255),b
  5853  01311C  0E00               	movlw	0
  5854  01311E  6FAD               	movwf	(?_log+2)& (0+255),b
  5855  013120  0E00               	movlw	0
  5856  013122  6FAE               	movwf	(?_log+3)& (0+255),b
  5857                           
  5858                           ; BSR set to: 0
  5859  013124  0012               	return	
  5860  013126                     l13921:
  5861                           
  5862                           ; BSR set to: 0
  5863  013126  0E00               	movlw	0
  5864  013128  0100               	movlb	0	; () banked
  5865  01312A  6F72               	movwf	___flmul@a& (0+255),b
  5866  01312C  0E00               	movlw	0
  5867  01312E  6F73               	movwf	(___flmul@a+1)& (0+255),b
  5868  013130  0E00               	movlw	0
  5869  013132  6F74               	movwf	(___flmul@a+2)& (0+255),b
  5870  013134  0E40               	movlw	64
  5871  013136  6F75               	movwf	(___flmul@a+3)& (0+255),b
  5872  013138  0EAF               	movlw	low log@exponent
  5873  01313A  0100               	movlb	0	; () banked
  5874  01313C  6F64               	movwf	frexp@eptr& (0+255),b
  5875  01313E  0E00               	movlw	high log@exponent
  5876  013140  0100               	movlb	0	; () banked
  5877  013142  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  5878  013144  C0AB  F060         	movff	log@x,frexp@value
  5879  013148  C0AC  F061         	movff	log@x+1,frexp@value+1
  5880  01314C  C0AD  F062         	movff	log@x+2,frexp@value+2
  5881  013150  C0AE  F063         	movff	log@x+3,frexp@value+3
  5882  013154  EC7D  F0A4         	call	_frexp	;wreg free
  5883  013158  C060  F06E         	movff	?_frexp,___flmul@b
  5884  01315C  C061  F06F         	movff	?_frexp+1,___flmul@b+1
  5885  013160  C062  F070         	movff	?_frexp+2,___flmul@b+2
  5886  013164  C063  F071         	movff	?_frexp+3,___flmul@b+3
  5887  013168  EC54  F082         	call	___flmul	;wreg free
  5888  01316C  C06E  F087         	movff	?___flmul,___fladd@b
  5889  013170  C06F  F088         	movff	?___flmul+1,___fladd@b+1
  5890  013174  C070  F089         	movff	?___flmul+2,___fladd@b+2
  5891  013178  C071  F08A         	movff	?___flmul+3,___fladd@b+3
  5892  01317C  0E00               	movlw	0
  5893  01317E  0100               	movlb	0	; () banked
  5894  013180  6F8B               	movwf	___fladd@a& (0+255),b
  5895  013182  0E00               	movlw	0
  5896  013184  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  5897  013186  0E80               	movlw	128
  5898  013188  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  5899  01318A  0EBF               	movlw	191
  5900  01318C  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  5901  01318E  EC00  F080         	call	___fladd	;wreg free
  5902  013192  C087  F0AB         	movff	?___fladd,log@x
  5903  013196  C088  F0AC         	movff	?___fladd+1,log@x+1
  5904  01319A  C089  F0AD         	movff	?___fladd+2,log@x+2
  5905  01319E  C08A  F0AE         	movff	?___fladd+3,log@x+3
  5906  0131A2  0100               	movlb	0	; () banked
  5907  0131A4  07AF               	decf	log@exponent& (0+255),f,b
  5908  0131A6  A0D8               	btfss	status,0,c
  5909  0131A8  07B0               	decf	(log@exponent+1)& (0+255),f,b
  5910                           
  5911                           ; BSR set to: 0
  5912  0131AA  C0AB  F09B         	movff	log@x,eval_poly@x
  5913  0131AE  C0AC  F09C         	movff	log@x+1,eval_poly@x+1
  5914  0131B2  C0AD  F09D         	movff	log@x+2,eval_poly@x+2
  5915  0131B6  C0AE  F09E         	movff	log@x+3,eval_poly@x+3
  5916  0131BA  0E4B               	movlw	low log@coeff
  5917  0131BC  0100               	movlb	0	; () banked
  5918  0131BE  6F9F               	movwf	eval_poly@d& (0+255),b
  5919  0131C0  0EFF               	movlw	high log@coeff
  5920  0131C2  0100               	movlb	0	; () banked
  5921  0131C4  6FA0               	movwf	(eval_poly@d+1)& (0+255),b
  5922  0131C6  0E00               	movlw	0
  5923  0131C8  0100               	movlb	0	; () banked
  5924  0131CA  6FA2               	movwf	(eval_poly@n+1)& (0+255),b
  5925  0131CC  0E08               	movlw	8
  5926  0131CE  6FA1               	movwf	eval_poly@n& (0+255),b
  5927  0131D0  ECFA  F09E         	call	_eval_poly	;wreg free
  5928  0131D4  C09B  F0AB         	movff	?_eval_poly,log@x
  5929  0131D8  C09C  F0AC         	movff	?_eval_poly+1,log@x+1
  5930  0131DC  C09D  F0AD         	movff	?_eval_poly+2,log@x+2
  5931  0131E0  C09E  F0AE         	movff	?_eval_poly+3,log@x+3
  5932  0131E4  0E18               	movlw	24
  5933  0131E6  0100               	movlb	0	; () banked
  5934  0131E8  6F72               	movwf	___flmul@a& (0+255),b
  5935  0131EA  0E72               	movlw	114
  5936  0131EC  6F73               	movwf	(___flmul@a+1)& (0+255),b
  5937  0131EE  0E31               	movlw	49
  5938  0131F0  6F74               	movwf	(___flmul@a+2)& (0+255),b
  5939  0131F2  0E3F               	movlw	63
  5940  0131F4  6F75               	movwf	(___flmul@a+3)& (0+255),b
  5941  0131F6  C0AF  F060         	movff	log@exponent,___xxtofl@val
  5942  0131FA  C0B0  F061         	movff	log@exponent+1,___xxtofl@val+1
  5943  0131FE  0100               	movlb	0	; () banked
  5944  013200  0E00               	movlw	0
  5945  013202  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  5946  013204  0EFF               	movlw	-1
  5947  013206  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  5948  013208  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  5949  01320A  0E01               	movlw	1
  5950  01320C  EC81  F093         	call	___xxtofl
  5951  013210  C060  F06E         	movff	?___xxtofl,___flmul@b
  5952  013214  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  5953  013218  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  5954  01321C  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  5955  013220  EC54  F082         	call	___flmul	;wreg free
  5956  013224  C06E  F087         	movff	?___flmul,___fladd@b
  5957  013228  C06F  F088         	movff	?___flmul+1,___fladd@b+1
  5958  01322C  C070  F089         	movff	?___flmul+2,___fladd@b+2
  5959  013230  C071  F08A         	movff	?___flmul+3,___fladd@b+3
  5960  013234  C0AB  F08B         	movff	log@x,___fladd@a
  5961  013238  C0AC  F08C         	movff	log@x+1,___fladd@a+1
  5962  01323C  C0AD  F08D         	movff	log@x+2,___fladd@a+2
  5963  013240  C0AE  F08E         	movff	log@x+3,___fladd@a+3
  5964  013244  EC00  F080         	call	___fladd	;wreg free
  5965  013248  C087  F0AB         	movff	?___fladd,?_log
  5966  01324C  C088  F0AC         	movff	?___fladd+1,?_log+1
  5967  013250  C089  F0AD         	movff	?___fladd+2,?_log+2
  5968  013254  C08A  F0AE         	movff	?___fladd+3,?_log+3
  5969  013258  0012               	return	
  5970  01325A                     __end_of_log:
  5971                           	opt stack 0
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           postinc0	equ	0xFEE
  5979                           wreg	equ	0xFE8
  5980                           postdec1	equ	0xFE5
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _exp *****************
  5991 ;; Defined at:
  5992 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\exp.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  x               4   83[BANK0 ] int 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  exponent        2   91[BANK0 ] int 
  5997 ;;  sign            1   93[BANK0 ] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  4   83[BANK0 ] unsigned char 
  6000 ;; Registers used:
  6001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:       11 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    9
  6014 ;; This function calls:
  6015 ;;		___fldiv
  6016 ;;		___flge
  6017 ;;		___flmul
  6018 ;;		___flneg
  6019 ;;		___flsub
  6020 ;;		___fltol
  6021 ;;		___xxtofl
  6022 ;;		_eval_poly
  6023 ;;		_floor
  6024 ;;		_ldexp
  6025 ;; This function is called by:
  6026 ;;		_pow
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text15
  6031  0114E6                     __ptext15:
  6032                           	opt stack 0
  6033  0114E6                     _exp:
  6034                           	opt stack 19
  6035                           
  6036                           ;incstack = 0
  6037  0114E6  0100               	movlb	0	; () banked
  6038  0114E8  51B3               	movf	exp@x& (0+255),w,b
  6039  0114EA  0100               	movlb	0	; () banked
  6040  0114EC  11B4               	iorwf	(exp@x+1)& (0+255),w,b
  6041  0114EE  0100               	movlb	0	; () banked
  6042  0114F0  11B5               	iorwf	(exp@x+2)& (0+255),w,b
  6043  0114F2  0100               	movlb	0	; () banked
  6044  0114F4  11B6               	iorwf	(exp@x+3)& (0+255),w,b
  6045  0114F6  A4D8               	btfss	status,2,c
  6046  0114F8  D00A               	goto	l13937
  6047                           
  6048                           ; BSR set to: 0
  6049  0114FA  0E00               	movlw	0
  6050  0114FC  0100               	movlb	0	; () banked
  6051  0114FE  6FB3               	movwf	?_exp& (0+255),b
  6052  011500  0E00               	movlw	0
  6053  011502  6FB4               	movwf	(?_exp+1)& (0+255),b
  6054  011504  0E80               	movlw	128
  6055  011506  6FB5               	movwf	(?_exp+2)& (0+255),b
  6056  011508  0E3F               	movlw	63
  6057  01150A  6FB6               	movwf	(?_exp+3)& (0+255),b
  6058                           
  6059                           ; BSR set to: 0
  6060  01150C  0012               	return	
  6061  01150E                     l13937:
  6062                           
  6063                           ; BSR set to: 0
  6064  01150E  0E18               	movlw	24
  6065  011510  0100               	movlb	0	; () banked
  6066  011512  6F60               	movwf	___flge@ff1& (0+255),b
  6067  011514  0E72               	movlw	114
  6068  011516  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  6069  011518  0E31               	movlw	49
  6070  01151A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  6071  01151C  0E44               	movlw	68
  6072  01151E  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  6073  011520  C0B3  F064         	movff	exp@x,___flge@ff2
  6074  011524  C0B4  F065         	movff	exp@x+1,___flge@ff2+1
  6075  011528  C0B5  F066         	movff	exp@x+2,___flge@ff2+2
  6076  01152C  C0B6  F067         	movff	exp@x+3,___flge@ff2+3
  6077  011530  ECDA  F096         	call	___flge	;wreg free
  6078  011534  0100               	movlb	0	; () banked
  6079  011536  B0D8               	btfsc	status,0,c
  6080  011538  D00F               	goto	l13943
  6081                           
  6082                           ; BSR set to: 0
  6083  01153A  0E00               	movlw	0
  6084  01153C  0101               	movlb	1	; () banked
  6085  01153E  6F15               	movwf	(_errno+1)& (0+255),b
  6086  011540  0E22               	movlw	34
  6087  011542  6F14               	movwf	_errno& (0+255),b
  6088  011544  0EFF               	movlw	255
  6089  011546  0100               	movlb	0	; () banked
  6090  011548  6FB3               	movwf	?_exp& (0+255),b
  6091  01154A  0EFF               	movlw	255
  6092  01154C  6FB4               	movwf	(?_exp+1)& (0+255),b
  6093  01154E  0E7F               	movlw	127
  6094  011550  6FB5               	movwf	(?_exp+2)& (0+255),b
  6095  011552  0E7F               	movlw	127
  6096  011554  6FB6               	movwf	(?_exp+3)& (0+255),b
  6097                           
  6098                           ; BSR set to: 0
  6099  011556  0012               	return	
  6100  011558                     l13943:
  6101                           
  6102                           ; BSR set to: 0
  6103  011558  C0B3  F060         	movff	exp@x,___flge@ff1
  6104  01155C  C0B4  F061         	movff	exp@x+1,___flge@ff1+1
  6105  011560  C0B5  F062         	movff	exp@x+2,___flge@ff1+2
  6106  011564  C0B6  F063         	movff	exp@x+3,___flge@ff1+3
  6107  011568  0E87               	movlw	135
  6108  01156A  0100               	movlb	0	; () banked
  6109  01156C  6F64               	movwf	___flge@ff2& (0+255),b
  6110  01156E  0E48               	movlw	72
  6111  011570  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  6112  011572  0E3A               	movlw	58
  6113  011574  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  6114  011576  0EC4               	movlw	196
  6115  011578  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  6116  01157A  ECDA  F096         	call	___flge	;wreg free
  6117  01157E  0100               	movlb	0	; () banked
  6118  011580  B0D8               	btfsc	status,0,c
  6119  011582  D00F               	goto	l13949
  6120                           
  6121                           ; BSR set to: 0
  6122  011584  0E00               	movlw	0
  6123  011586  0101               	movlb	1	; () banked
  6124  011588  6F15               	movwf	(_errno+1)& (0+255),b
  6125  01158A  0E22               	movlw	34
  6126  01158C  6F14               	movwf	_errno& (0+255),b
  6127  01158E  0E00               	movlw	0
  6128  011590  0100               	movlb	0	; () banked
  6129  011592  6FB3               	movwf	?_exp& (0+255),b
  6130  011594  0E00               	movlw	0
  6131  011596  6FB4               	movwf	(?_exp+1)& (0+255),b
  6132  011598  0E00               	movlw	0
  6133  01159A  6FB5               	movwf	(?_exp+2)& (0+255),b
  6134  01159C  0E00               	movlw	0
  6135  01159E  6FB6               	movwf	(?_exp+3)& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138  0115A0  0012               	return	
  6139  0115A2                     l13949:
  6140                           
  6141                           ; BSR set to: 0
  6142  0115A2  0100               	movlb	0	; () banked
  6143  0115A4  AFB6               	btfss	(exp@x+3)& (0+255),7,b
  6144  0115A6  D002               	goto	u11660
  6145  0115A8  0E01               	movlw	1
  6146  0115AA  D001               	goto	u11670
  6147  0115AC                     u11660:
  6148  0115AC  0E00               	movlw	0
  6149  0115AE                     u11670:
  6150  0115AE  0100               	movlb	0	; () banked
  6151  0115B0  6FBD               	movwf	exp@sign& (0+255),b
  6152                           
  6153                           ; BSR set to: 0
  6154  0115B2  0100               	movlb	0	; () banked
  6155  0115B4  51BD               	movf	exp@sign& (0+255),w,b
  6156  0115B6  0100               	movlb	0	; () banked
  6157  0115B8  B4D8               	btfsc	status,2,c
  6158  0115BA  D012               	goto	l13955
  6159                           
  6160                           ; BSR set to: 0
  6161  0115BC  C0B3  F060         	movff	exp@x,___flneg@f1
  6162  0115C0  C0B4  F061         	movff	exp@x+1,___flneg@f1+1
  6163  0115C4  C0B5  F062         	movff	exp@x+2,___flneg@f1+2
  6164  0115C8  C0B6  F063         	movff	exp@x+3,___flneg@f1+3
  6165  0115CC  EC13  F0B2         	call	___flneg	;wreg free
  6166  0115D0  C060  F0B3         	movff	?___flneg,exp@x
  6167  0115D4  C061  F0B4         	movff	?___flneg+1,exp@x+1
  6168  0115D8  C062  F0B5         	movff	?___flneg+2,exp@x+2
  6169  0115DC  C063  F0B6         	movff	?___flneg+3,exp@x+3
  6170  0115E0                     l13955:
  6171  0115E0  C0B3  F06E         	movff	exp@x,___flmul@b
  6172  0115E4  C0B4  F06F         	movff	exp@x+1,___flmul@b+1
  6173  0115E8  C0B5  F070         	movff	exp@x+2,___flmul@b+2
  6174  0115EC  C0B6  F071         	movff	exp@x+3,___flmul@b+3
  6175  0115F0  0E3B               	movlw	59
  6176  0115F2  0100               	movlb	0	; () banked
  6177  0115F4  6F72               	movwf	___flmul@a& (0+255),b
  6178  0115F6  0EAA               	movlw	170
  6179  0115F8  6F73               	movwf	(___flmul@a+1)& (0+255),b
  6180  0115FA  0EB8               	movlw	184
  6181  0115FC  6F74               	movwf	(___flmul@a+2)& (0+255),b
  6182  0115FE  0E3F               	movlw	63
  6183  011600  6F75               	movwf	(___flmul@a+3)& (0+255),b
  6184  011602  EC54  F082         	call	___flmul	;wreg free
  6185  011606  C06E  F0B3         	movff	?___flmul,exp@x
  6186  01160A  C06F  F0B4         	movff	?___flmul+1,exp@x+1
  6187  01160E  C070  F0B5         	movff	?___flmul+2,exp@x+2
  6188  011612  C071  F0B6         	movff	?___flmul+3,exp@x+3
  6189  011616  C0B3  F09B         	movff	exp@x,floor@x
  6190  01161A  C0B4  F09C         	movff	exp@x+1,floor@x+1
  6191  01161E  C0B5  F09D         	movff	exp@x+2,floor@x+2
  6192  011622  C0B6  F09E         	movff	exp@x+3,floor@x+3
  6193  011626  ECD6  F09D         	call	_floor	;wreg free
  6194  01162A  C09B  F0B7         	movff	?_floor,_exp$15178
  6195  01162E  C09C  F0B8         	movff	?_floor+1,_exp$15178+1
  6196  011632  C09D  F0B9         	movff	?_floor+2,_exp$15178+2
  6197  011636  C09E  F0BA         	movff	?_floor+3,_exp$15178+3
  6198  01163A  C0B7  F087         	movff	_exp$15178,___fltol@f1
  6199  01163E  C0B8  F088         	movff	_exp$15178+1,___fltol@f1+1
  6200  011642  C0B9  F089         	movff	_exp$15178+2,___fltol@f1+2
  6201  011646  C0BA  F08A         	movff	_exp$15178+3,___fltol@f1+3
  6202  01164A  EC86  F09F         	call	___fltol	;wreg free
  6203  01164E  C087  F0BB         	movff	?___fltol,exp@exponent
  6204  011652  C088  F0BC         	movff	?___fltol+1,exp@exponent+1
  6205  011656  C0B3  F09B         	movff	exp@x,___flsub@b
  6206  01165A  C0B4  F09C         	movff	exp@x+1,___flsub@b+1
  6207  01165E  C0B5  F09D         	movff	exp@x+2,___flsub@b+2
  6208  011662  C0B6  F09E         	movff	exp@x+3,___flsub@b+3
  6209  011666  C0BB  F060         	movff	exp@exponent,___xxtofl@val
  6210  01166A  C0BC  F061         	movff	exp@exponent+1,___xxtofl@val+1
  6211  01166E  0100               	movlb	0	; () banked
  6212  011670  0E00               	movlw	0
  6213  011672  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  6214  011674  0EFF               	movlw	-1
  6215  011676  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  6216  011678  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  6217  01167A  0E01               	movlw	1
  6218  01167C  EC81  F093         	call	___xxtofl
  6219  011680  C060  F09F         	movff	?___xxtofl,___flsub@a
  6220  011684  C061  F0A0         	movff	?___xxtofl+1,___flsub@a+1
  6221  011688  C062  F0A1         	movff	?___xxtofl+2,___flsub@a+2
  6222  01168C  C063  F0A2         	movff	?___xxtofl+3,___flsub@a+3
  6223  011690  EC23  F0B0         	call	___flsub	;wreg free
  6224  011694  C09B  F0B3         	movff	?___flsub,exp@x
  6225  011698  C09C  F0B4         	movff	?___flsub+1,exp@x+1
  6226  01169C  C09D  F0B5         	movff	?___flsub+2,exp@x+2
  6227  0116A0  C09E  F0B6         	movff	?___flsub+3,exp@x+3
  6228  0116A4  C0B3  F09B         	movff	exp@x,eval_poly@x
  6229  0116A8  C0B4  F09C         	movff	exp@x+1,eval_poly@x+1
  6230  0116AC  C0B5  F09D         	movff	exp@x+2,eval_poly@x+2
  6231  0116B0  C0B6  F09E         	movff	exp@x+3,eval_poly@x+3
  6232  0116B4  0E23               	movlw	low exp@coeff
  6233  0116B6  0100               	movlb	0	; () banked
  6234  0116B8  6F9F               	movwf	eval_poly@d& (0+255),b
  6235  0116BA  0EFF               	movlw	high exp@coeff
  6236  0116BC  0100               	movlb	0	; () banked
  6237  0116BE  6FA0               	movwf	(eval_poly@d+1)& (0+255),b
  6238  0116C0  0E00               	movlw	0
  6239  0116C2  0100               	movlb	0	; () banked
  6240  0116C4  6FA2               	movwf	(eval_poly@n+1)& (0+255),b
  6241  0116C6  0E09               	movlw	9
  6242  0116C8  6FA1               	movwf	eval_poly@n& (0+255),b
  6243  0116CA  ECFA  F09E         	call	_eval_poly	;wreg free
  6244  0116CE  C09B  F0AB         	movff	?_eval_poly,ldexp@value
  6245  0116D2  C09C  F0AC         	movff	?_eval_poly+1,ldexp@value+1
  6246  0116D6  C09D  F0AD         	movff	?_eval_poly+2,ldexp@value+2
  6247  0116DA  C09E  F0AE         	movff	?_eval_poly+3,ldexp@value+3
  6248  0116DE  C0BB  F0AF         	movff	exp@exponent,ldexp@newexp
  6249  0116E2  C0BC  F0B0         	movff	exp@exponent+1,ldexp@newexp+1
  6250  0116E6  EC44  F09D         	call	_ldexp	;wreg free
  6251  0116EA  C0AB  F0B3         	movff	?_ldexp,exp@x
  6252  0116EE  C0AC  F0B4         	movff	?_ldexp+1,exp@x+1
  6253  0116F2  C0AD  F0B5         	movff	?_ldexp+2,exp@x+2
  6254  0116F6  C0AE  F0B6         	movff	?_ldexp+3,exp@x+3
  6255  0116FA  0100               	movlb	0	; () banked
  6256  0116FC  51BD               	movf	exp@sign& (0+255),w,b
  6257  0116FE  0100               	movlb	0	; () banked
  6258  011700  B4D8               	btfsc	status,2,c
  6259  011702  D035               	goto	l2707
  6260                           
  6261                           ; BSR set to: 0
  6262  011704  0100               	movlb	0	; () banked
  6263  011706  29B3               	incf	exp@x& (0+255),w,b
  6264  011708  E116               	bnz	l13973
  6265  01170A  0100               	movlb	0	; () banked
  6266  01170C  29B4               	incf	(exp@x+1)& (0+255),w,b
  6267  01170E  E113               	bnz	l13973
  6268  011710  0E7F               	movlw	127
  6269  011712  0100               	movlb	0	; () banked
  6270  011714  19B5               	xorwf	(exp@x+2)& (0+255),w,b
  6271  011716  E10F               	bnz	l13973
  6272  011718  0E7F               	movlw	127
  6273  01171A  0100               	movlb	0	; () banked
  6274  01171C  19B6               	xorwf	(exp@x+3)& (0+255),w,b
  6275  01171E  A4D8               	btfss	status,2,c
  6276  011720  D00A               	goto	l13973
  6277                           
  6278                           ; BSR set to: 0
  6279  011722  0E00               	movlw	0
  6280  011724  0100               	movlb	0	; () banked
  6281  011726  6FB3               	movwf	?_exp& (0+255),b
  6282  011728  0E00               	movlw	0
  6283  01172A  6FB4               	movwf	(?_exp+1)& (0+255),b
  6284  01172C  0E00               	movlw	0
  6285  01172E  6FB5               	movwf	(?_exp+2)& (0+255),b
  6286  011730  0E00               	movlw	0
  6287  011732  6FB6               	movwf	(?_exp+3)& (0+255),b
  6288                           
  6289                           ; BSR set to: 0
  6290  011734  0012               	return	
  6291  011736                     l13973:
  6292                           
  6293                           ; BSR set to: 0
  6294  011736  0E00               	movlw	0
  6295  011738  0100               	movlb	0	; () banked
  6296  01173A  6F60               	movwf	___fldiv@b& (0+255),b
  6297  01173C  0E00               	movlw	0
  6298  01173E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  6299  011740  0E80               	movlw	128
  6300  011742  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  6301  011744  0E3F               	movlw	63
  6302  011746  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  6303  011748  C0B3  F064         	movff	exp@x,___fldiv@a
  6304  01174C  C0B4  F065         	movff	exp@x+1,___fldiv@a+1
  6305  011750  C0B5  F066         	movff	exp@x+2,___fldiv@a+2
  6306  011754  C0B6  F067         	movff	exp@x+3,___fldiv@a+3
  6307  011758  ECB6  F086         	call	___fldiv	;wreg free
  6308  01175C  C060  F0B3         	movff	?___fldiv,?_exp
  6309  011760  C061  F0B4         	movff	?___fldiv+1,?_exp+1
  6310  011764  C062  F0B5         	movff	?___fldiv+2,?_exp+2
  6311  011768  C063  F0B6         	movff	?___fldiv+3,?_exp+3
  6312  01176C  0012               	return	
  6313  01176E                     l2707:
  6314                           
  6315                           ; BSR set to: 0
  6316  01176E  C0B3  F0B3         	movff	exp@x,?_exp
  6317  011772  C0B4  F0B4         	movff	exp@x+1,?_exp+1
  6318  011776  C0B5  F0B5         	movff	exp@x+2,?_exp+2
  6319  01177A  C0B6  F0B6         	movff	exp@x+3,?_exp+3
  6320  01177E  0012               	return		;funcret
  6321  011780                     __end_of_exp:
  6322                           	opt stack 0
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           postinc0	equ	0xFEE
  6330                           wreg	equ	0xFE8
  6331                           postdec1	equ	0xFE5
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           
  6341 ;; *************** function _ldexp *****************
  6342 ;; Defined at:
  6343 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\frexp.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  value           4   75[BANK0 ] unsigned char 
  6346 ;;  newexp          2   79[BANK0 ] int 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;		None
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  4   75[BANK0 ] int 
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6358 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;Total ram usage:        8 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    7
  6365 ;; This function calls:
  6366 ;;		Nothing
  6367 ;; This function is called by:
  6368 ;;		_exp
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text16
  6373  013A88                     __ptext16:
  6374                           	opt stack 0
  6375  013A88                     _ldexp:
  6376                           	opt stack 20
  6377                           
  6378                           ;incstack = 0
  6379  013A88  0100               	movlb	0	; () banked
  6380  013A8A  51AB               	movf	ldexp@value& (0+255),w,b
  6381  013A8C  0100               	movlb	0	; () banked
  6382  013A8E  11AC               	iorwf	(ldexp@value+1)& (0+255),w,b
  6383  013A90  0100               	movlb	0	; () banked
  6384  013A92  11AD               	iorwf	(ldexp@value+2)& (0+255),w,b
  6385  013A94  0100               	movlb	0	; () banked
  6386  013A96  11AE               	iorwf	(ldexp@value+3)& (0+255),w,b
  6387  013A98  A4D8               	btfss	status,2,c
  6388  013A9A  D00A               	goto	l13485
  6389                           
  6390                           ; BSR set to: 0
  6391  013A9C  0E00               	movlw	0
  6392  013A9E  0100               	movlb	0	; () banked
  6393  013AA0  6FAB               	movwf	?_ldexp& (0+255),b
  6394  013AA2  0E00               	movlw	0
  6395  013AA4  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6396  013AA6  0E00               	movlw	0
  6397  013AA8  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6398  013AAA  0E00               	movlw	0
  6399  013AAC  6FAE               	movwf	(?_ldexp+3)& (0+255),b
  6400                           
  6401                           ; BSR set to: 0
  6402  013AAE  0012               	return	
  6403  013AB0                     l13485:
  6404                           
  6405                           ; BSR set to: 0
  6406  013AB0  0100               	movlb	0	; () banked
  6407  013AB2  51AE               	movf	(ldexp@value+3)& (0+255),w,b
  6408  013AB4  0B7F               	andlw	127
  6409  013AB6  0100               	movlb	0	; () banked
  6410  013AB8  6FB1               	movwf	??_ldexp& (0+255),b
  6411  013ABA  6BB2               	clrf	(??_ldexp+1)& (0+255),b
  6412  013ABC  90D8               	bcf	status,0,c
  6413  013ABE  0100               	movlb	0	; () banked
  6414  013AC0  37B1               	rlcf	??_ldexp& (0+255),f,b
  6415  013AC2  37B2               	rlcf	(??_ldexp+1)& (0+255),f,b
  6416  013AC4  0100               	movlb	0	; () banked
  6417  013AC6  51B1               	movf	??_ldexp& (0+255),w,b
  6418  013AC8  0100               	movlb	0	; () banked
  6419  013ACA  27AF               	addwf	ldexp@newexp& (0+255),f,b
  6420  013ACC  0100               	movlb	0	; () banked
  6421  013ACE  51B2               	movf	(??_ldexp+1)& (0+255),w,b
  6422  013AD0  0100               	movlb	0	; () banked
  6423  013AD2  23B0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6424  013AD4  0100               	movlb	0	; () banked
  6425  013AD6  AFAD               	btfss	(ldexp@value+2)& (0+255),7,b
  6426  013AD8  D004               	goto	u11100
  6427  013ADA  0100               	movlb	0	; () banked
  6428  013ADC  6BB1               	clrf	??_ldexp& (0+255),b
  6429  013ADE  2BB1               	incf	??_ldexp& (0+255),f,b
  6430  013AE0  D002               	goto	u11108
  6431  013AE2                     u11100:
  6432  013AE2  0100               	movlb	0	; () banked
  6433  013AE4  6BB1               	clrf	??_ldexp& (0+255),b
  6434  013AE6                     u11108:
  6435  013AE6  0100               	movlb	0	; () banked
  6436  013AE8  51B1               	movf	??_ldexp& (0+255),w,b
  6437  013AEA  0100               	movlb	0	; () banked
  6438  013AEC  27AF               	addwf	ldexp@newexp& (0+255),f,b
  6439  013AEE  0E00               	movlw	0
  6440  013AF0  23B0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6441  013AF2  0100               	movlb	0	; () banked
  6442  013AF4  AFB0               	btfss	(ldexp@newexp+1)& (0+255),7,b
  6443  013AF6  D00F               	goto	l13493
  6444                           
  6445                           ; BSR set to: 0
  6446  013AF8  0E00               	movlw	0
  6447  013AFA  0101               	movlb	1	; () banked
  6448  013AFC  6F15               	movwf	(_errno+1)& (0+255),b
  6449  013AFE  0E22               	movlw	34
  6450  013B00  6F14               	movwf	_errno& (0+255),b
  6451  013B02  0E00               	movlw	0
  6452  013B04  0100               	movlb	0	; () banked
  6453  013B06  6FAB               	movwf	?_ldexp& (0+255),b
  6454  013B08  0E00               	movlw	0
  6455  013B0A  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6456  013B0C  0E00               	movlw	0
  6457  013B0E  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6458  013B10  0E00               	movlw	0
  6459  013B12                     L2:
  6460  013B12  6FAE               	movwf	(?_ldexp+3)& (0+255),b
  6461                           
  6462                           ; BSR set to: 0
  6463  013B14  0012               	return	
  6464  013B16                     l13493:
  6465                           
  6466                           ; BSR set to: 0
  6467  013B16  0100               	movlb	0	; () banked
  6468  013B18  BFB0               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  6469  013B1A  D01E               	goto	l13509
  6470  013B1C  0100               	movlb	0	; () banked
  6471  013B1E  05B0               	decf	(ldexp@newexp+1)& (0+255),w,b
  6472  013B20  A0D8               	btfss	status,0,c
  6473  013B22  D01A               	goto	l13509
  6474                           
  6475                           ; BSR set to: 0
  6476  013B24  0E00               	movlw	0
  6477  013B26  0101               	movlb	1	; () banked
  6478  013B28  6F15               	movwf	(_errno+1)& (0+255),b
  6479  013B2A  0E22               	movlw	34
  6480  013B2C  6F14               	movwf	_errno& (0+255),b
  6481                           
  6482                           ; BSR set to: 1
  6483  013B2E  0100               	movlb	0	; () banked
  6484  013B30  AFAE               	btfss	(ldexp@value+3)& (0+255),7,b
  6485  013B32  D009               	goto	l13505
  6486                           
  6487                           ; BSR set to: 0
  6488  013B34  0EFF               	movlw	255
  6489  013B36  0100               	movlb	0	; () banked
  6490  013B38  6FAB               	movwf	?_ldexp& (0+255),b
  6491  013B3A  0EFF               	movlw	255
  6492  013B3C  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6493  013B3E  0E7F               	movlw	127
  6494  013B40  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6495  013B42  0EFF               	movlw	255
  6496  013B44  D7E6               	goto	L2
  6497  013B46                     l13505:
  6498                           
  6499                           ; BSR set to: 0
  6500  013B46  0EFF               	movlw	255
  6501  013B48  0100               	movlb	0	; () banked
  6502  013B4A  6FAB               	movwf	?_ldexp& (0+255),b
  6503  013B4C  0EFF               	movlw	255
  6504  013B4E  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6505  013B50  0E7F               	movlw	127
  6506  013B52  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6507  013B54  0E7F               	movlw	127
  6508  013B56  D7DD               	goto	L2
  6509  013B58                     l13509:
  6510                           
  6511                           ; BSR set to: 0
  6512  013B58  0100               	movlb	0	; () banked
  6513  013B5A  35B0               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  6514  013B5C  31B0               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  6515  013B5E  0100               	movlb	0	; () banked
  6516  013B60  6FB2               	movwf	(??_ldexp+1)& (0+255),b
  6517  013B62  0100               	movlb	0	; () banked
  6518  013B64  31AF               	rrcf	ldexp@newexp& (0+255),w,b
  6519  013B66  0100               	movlb	0	; () banked
  6520  013B68  6FB1               	movwf	??_ldexp& (0+255),b
  6521  013B6A  0100               	movlb	0	; () banked
  6522  013B6C  51AE               	movf	(ldexp@value+3)& (0+255),w,b
  6523  013B6E  0100               	movlb	0	; () banked
  6524  013B70  19B1               	xorwf	??_ldexp& (0+255),w,b
  6525  013B72  0B80               	andlw	-128
  6526  013B74  19B1               	xorwf	??_ldexp& (0+255),w,b
  6527  013B76  0100               	movlb	0	; () banked
  6528  013B78  6FAE               	movwf	(ldexp@value+3)& (0+255),b
  6529  013B7A  C0AF  F0B1         	movff	ldexp@newexp,??_ldexp
  6530  013B7E  0E01               	movlw	1
  6531  013B80  0100               	movlb	0	; () banked
  6532  013B82  17B1               	andwf	??_ldexp& (0+255),f,b
  6533  013B84  0100               	movlb	0	; () banked
  6534  013B86  33B1               	rrcf	??_ldexp& (0+255),f,b
  6535  013B88  33B1               	rrcf	??_ldexp& (0+255),f,b
  6536  013B8A  0100               	movlb	0	; () banked
  6537  013B8C  51AD               	movf	(ldexp@value+2)& (0+255),w,b
  6538  013B8E  0100               	movlb	0	; () banked
  6539  013B90  19B1               	xorwf	??_ldexp& (0+255),w,b
  6540  013B92  0B7F               	andlw	-129
  6541  013B94  19B1               	xorwf	??_ldexp& (0+255),w,b
  6542  013B96  0100               	movlb	0	; () banked
  6543  013B98  6FAD               	movwf	(ldexp@value+2)& (0+255),b
  6544                           
  6545                           ; BSR set to: 0
  6546                           
  6547                           ; BSR set to: 0
  6548                           
  6549                           ; BSR set to: 0
  6550  013B9A  C0AB  F0AB         	movff	ldexp@value,?_ldexp
  6551  013B9E  C0AC  F0AC         	movff	ldexp@value+1,?_ldexp+1
  6552  013BA2  C0AD  F0AD         	movff	ldexp@value+2,?_ldexp+2
  6553  013BA6  C0AE  F0AE         	movff	ldexp@value+3,?_ldexp+3
  6554  013BAA  0012               	return	
  6555  013BAC                     __end_of_ldexp:
  6556                           	opt stack 0
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           postdec1	equ	0xFE5
  6566                           fsr1h	equ	0xFE2
  6567                           fsr1l	equ	0xFE1
  6568                           indf2	equ	0xFDF
  6569                           postinc2	equ	0xFDE
  6570                           postdec2	equ	0xFDD
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function _floor *****************
  6576 ;; Defined at:
  6577 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\floor.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  x               4   59[BANK0 ] int 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  i               4   63[BANK0 ] int 
  6582 ;;  expon           2   67[BANK0 ] int 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  4   59[BANK0 ] int 
  6585 ;; Registers used:
  6586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6592 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;Total ram usage:       10 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    8
  6599 ;; This function calls:
  6600 ;;		___fladd
  6601 ;;		___flge
  6602 ;;		___fltol
  6603 ;;		___xxtofl
  6604 ;;		_frexp
  6605 ;; This function is called by:
  6606 ;;		_exp
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text17
  6611  013BAC                     __ptext17:
  6612                           	opt stack 0
  6613  013BAC                     _floor:
  6614                           	opt stack 19
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;incstack = 0
  6618  013BAC  C09B  F060         	movff	floor@x,frexp@value
  6619  013BB0  C09C  F061         	movff	floor@x+1,frexp@value+1
  6620  013BB4  C09D  F062         	movff	floor@x+2,frexp@value+2
  6621  013BB8  C09E  F063         	movff	floor@x+3,frexp@value+3
  6622  013BBC  0EA3               	movlw	low floor@expon
  6623  013BBE  0100               	movlb	0	; () banked
  6624  013BC0  6F64               	movwf	frexp@eptr& (0+255),b
  6625  013BC2  0E00               	movlw	high floor@expon
  6626  013BC4  0100               	movlb	0	; () banked
  6627  013BC6  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  6628  013BC8  EC7D  F0A4         	call	_frexp	;wreg free
  6629  013BCC  0100               	movlb	0	; () banked
  6630  013BCE  AFA4               	btfss	(floor@expon+1)& (0+255),7,b
  6631  013BD0  D017               	goto	l13463
  6632                           
  6633                           ; BSR set to: 0
  6634  013BD2  0100               	movlb	0	; () banked
  6635  013BD4  AF9E               	btfss	(floor@x+3)& (0+255),7,b
  6636  013BD6  D00A               	goto	l13459
  6637                           
  6638                           ; BSR set to: 0
  6639  013BD8  0E00               	movlw	0
  6640  013BDA  0100               	movlb	0	; () banked
  6641  013BDC  6F9B               	movwf	?_floor& (0+255),b
  6642  013BDE  0E00               	movlw	0
  6643  013BE0  6F9C               	movwf	(?_floor+1)& (0+255),b
  6644  013BE2  0E80               	movlw	128
  6645  013BE4  6F9D               	movwf	(?_floor+2)& (0+255),b
  6646  013BE6  0EBF               	movlw	191
  6647  013BE8  6F9E               	movwf	(?_floor+3)& (0+255),b
  6648                           
  6649                           ; BSR set to: 0
  6650  013BEA  0012               	return	
  6651  013BEC                     l13459:
  6652                           
  6653                           ; BSR set to: 0
  6654  013BEC  0E00               	movlw	0
  6655  013BEE  0100               	movlb	0	; () banked
  6656  013BF0  6F9B               	movwf	?_floor& (0+255),b
  6657  013BF2  0E00               	movlw	0
  6658  013BF4  6F9C               	movwf	(?_floor+1)& (0+255),b
  6659  013BF6  0E00               	movlw	0
  6660  013BF8  6F9D               	movwf	(?_floor+2)& (0+255),b
  6661  013BFA  0E00               	movlw	0
  6662  013BFC  6F9E               	movwf	(?_floor+3)& (0+255),b
  6663                           
  6664                           ; BSR set to: 0
  6665  013BFE  0012               	return	
  6666  013C00                     l13463:
  6667                           
  6668                           ; BSR set to: 0
  6669  013C00  0100               	movlb	0	; () banked
  6670  013C02  51A4               	movf	(floor@expon+1)& (0+255),w,b
  6671  013C04  E105               	bnz	u11060
  6672  013C06  0E1D               	movlw	29
  6673  013C08  0100               	movlb	0	; () banked
  6674  013C0A  5DA3               	subwf	floor@expon& (0+255),w,b
  6675  013C0C  A0D8               	btfss	status,0,c
  6676  013C0E  D009               	goto	l13467
  6677  013C10                     u11060:
  6678                           
  6679                           ; BSR set to: 0
  6680  013C10  C09B  F09B         	movff	floor@x,?_floor
  6681  013C14  C09C  F09C         	movff	floor@x+1,?_floor+1
  6682  013C18  C09D  F09D         	movff	floor@x+2,?_floor+2
  6683  013C1C  C09E  F09E         	movff	floor@x+3,?_floor+3
  6684  013C20  0012               	return	
  6685  013C22                     l13467:
  6686                           
  6687                           ; BSR set to: 0
  6688  013C22  C09B  F087         	movff	floor@x,___fltol@f1
  6689  013C26  C09C  F088         	movff	floor@x+1,___fltol@f1+1
  6690  013C2A  C09D  F089         	movff	floor@x+2,___fltol@f1+2
  6691  013C2E  C09E  F08A         	movff	floor@x+3,___fltol@f1+3
  6692  013C32  EC86  F09F         	call	___fltol	;wreg free
  6693  013C36  C087  F060         	movff	?___fltol,___xxtofl@val
  6694  013C3A  C088  F061         	movff	?___fltol+1,___xxtofl@val+1
  6695  013C3E  C089  F062         	movff	?___fltol+2,___xxtofl@val+2
  6696  013C42  C08A  F063         	movff	?___fltol+3,___xxtofl@val+3
  6697  013C46  0E01               	movlw	1
  6698  013C48  EC81  F093         	call	___xxtofl
  6699  013C4C  C060  F09F         	movff	?___xxtofl,floor@i
  6700  013C50  C061  F0A0         	movff	?___xxtofl+1,floor@i+1
  6701  013C54  C062  F0A1         	movff	?___xxtofl+2,floor@i+2
  6702  013C58  C063  F0A2         	movff	?___xxtofl+3,floor@i+3
  6703  013C5C  C09B  F060         	movff	floor@x,___flge@ff1
  6704  013C60  C09C  F061         	movff	floor@x+1,___flge@ff1+1
  6705  013C64  C09D  F062         	movff	floor@x+2,___flge@ff1+2
  6706  013C68  C09E  F063         	movff	floor@x+3,___flge@ff1+3
  6707  013C6C  C09F  F064         	movff	floor@i,___flge@ff2
  6708  013C70  C0A0  F065         	movff	floor@i+1,___flge@ff2+1
  6709  013C74  C0A1  F066         	movff	floor@i+2,___flge@ff2+2
  6710  013C78  C0A2  F067         	movff	floor@i+3,___flge@ff2+3
  6711  013C7C  ECDA  F096         	call	___flge	;wreg free
  6712  013C80  0100               	movlb	0	; () banked
  6713  013C82  B0D8               	btfsc	status,0,c
  6714  013C84  D01C               	goto	l2717
  6715                           
  6716                           ; BSR set to: 0
  6717  013C86  C09F  F087         	movff	floor@i,___fladd@b
  6718  013C8A  C0A0  F088         	movff	floor@i+1,___fladd@b+1
  6719  013C8E  C0A1  F089         	movff	floor@i+2,___fladd@b+2
  6720  013C92  C0A2  F08A         	movff	floor@i+3,___fladd@b+3
  6721  013C96  0E00               	movlw	0
  6722  013C98  0100               	movlb	0	; () banked
  6723  013C9A  6F8B               	movwf	___fladd@a& (0+255),b
  6724  013C9C  0E00               	movlw	0
  6725  013C9E  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  6726  013CA0  0E80               	movlw	128
  6727  013CA2  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  6728  013CA4  0EBF               	movlw	191
  6729  013CA6  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  6730  013CA8  EC00  F080         	call	___fladd	;wreg free
  6731  013CAC  C087  F09B         	movff	?___fladd,?_floor
  6732  013CB0  C088  F09C         	movff	?___fladd+1,?_floor+1
  6733  013CB4  C089  F09D         	movff	?___fladd+2,?_floor+2
  6734  013CB8  C08A  F09E         	movff	?___fladd+3,?_floor+3
  6735  013CBC  0012               	return	
  6736  013CBE                     l2717:
  6737                           
  6738                           ; BSR set to: 0
  6739  013CBE  C09F  F09B         	movff	floor@i,?_floor
  6740  013CC2  C0A0  F09C         	movff	floor@i+1,?_floor+1
  6741  013CC6  C0A1  F09D         	movff	floor@i+2,?_floor+2
  6742  013CCA  C0A2  F09E         	movff	floor@i+3,?_floor+3
  6743  013CCE  0012               	return		;funcret
  6744  013CD0                     __end_of_floor:
  6745                           	opt stack 0
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           postinc0	equ	0xFEE
  6753                           wreg	equ	0xFE8
  6754                           postdec1	equ	0xFE5
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function _frexp *****************
  6765 ;; Defined at:
  6766 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\frexp.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  value           4    0[BANK0 ] int 
  6769 ;;  eptr            2    4[BANK0 ] PTR int 
  6770 ;;		 -> log@exponent(2), floor@expon(2), 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  4    0[BANK0 ] PTR int 
  6775 ;; Registers used:
  6776 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6782 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;Total ram usage:        8 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    7
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_floor
  6793 ;;		_log
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text18
  6798  0148FA                     __ptext18:
  6799                           	opt stack 0
  6800  0148FA                     _frexp:
  6801                           	opt stack 20
  6802                           
  6803                           ;incstack = 0
  6804  0148FA  0100               	movlb	0	; () banked
  6805  0148FC  5160               	movf	frexp@value& (0+255),w,b
  6806  0148FE  0100               	movlb	0	; () banked
  6807  014900  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  6808  014902  0100               	movlb	0	; () banked
  6809  014904  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  6810  014906  0100               	movlb	0	; () banked
  6811  014908  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  6812  01490A  A4D8               	btfss	status,2,c
  6813  01490C  D012               	goto	l12785
  6814                           
  6815                           ; BSR set to: 0
  6816  01490E  C064  FFD9         	movff	frexp@eptr,fsr2l
  6817  014912  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  6818  014916  0E00               	movlw	0
  6819  014918  6EDE               	movwf	postinc2,c
  6820  01491A  0E00               	movlw	0
  6821  01491C  6EDD               	movwf	postdec2,c
  6822                           
  6823                           ; BSR set to: 0
  6824  01491E  0E00               	movlw	0
  6825  014920  0100               	movlb	0	; () banked
  6826  014922  6F60               	movwf	?_frexp& (0+255),b
  6827  014924  0E00               	movlw	0
  6828  014926  6F61               	movwf	(?_frexp+1)& (0+255),b
  6829  014928  0E00               	movlw	0
  6830  01492A  6F62               	movwf	(?_frexp+2)& (0+255),b
  6831  01492C  0E00               	movlw	0
  6832  01492E  6F63               	movwf	(?_frexp+3)& (0+255),b
  6833                           
  6834                           ; BSR set to: 0
  6835  014930  0012               	return	
  6836  014932                     l12785:
  6837                           
  6838                           ; BSR set to: 0
  6839  014932  0100               	movlb	0	; () banked
  6840  014934  5163               	movf	(frexp@value+3)& (0+255),w,b
  6841  014936  0B7F               	andlw	127
  6842  014938  0100               	movlb	0	; () banked
  6843  01493A  6F66               	movwf	??_frexp& (0+255),b
  6844  01493C  6B67               	clrf	(??_frexp+1)& (0+255),b
  6845  01493E  90D8               	bcf	status,0,c
  6846  014940  0100               	movlb	0	; () banked
  6847  014942  3766               	rlcf	??_frexp& (0+255),f,b
  6848  014944  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  6849  014946  C064  FFD9         	movff	frexp@eptr,fsr2l
  6850  01494A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  6851  01494E  C066  FFDE         	movff	??_frexp,postinc2
  6852  014952  C067  FFDD         	movff	??_frexp+1,postdec2
  6853  014956  0100               	movlb	0	; () banked
  6854  014958  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  6855  01495A  D004               	goto	u10520
  6856  01495C  0100               	movlb	0	; () banked
  6857  01495E  6B66               	clrf	??_frexp& (0+255),b
  6858  014960  2B66               	incf	??_frexp& (0+255),f,b
  6859  014962  D002               	goto	u10528
  6860  014964                     u10520:
  6861  014964  0100               	movlb	0	; () banked
  6862  014966  6B66               	clrf	??_frexp& (0+255),b
  6863  014968                     u10528:
  6864  014968  0100               	movlb	0	; () banked
  6865  01496A  5166               	movf	??_frexp& (0+255),w,b
  6866  01496C  C064  FFD9         	movff	frexp@eptr,fsr2l
  6867  014970  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  6868  014974  12DE               	iorwf	postinc2,f,c
  6869  014976  0E00               	movlw	0
  6870  014978  12DD               	iorwf	postdec2,f,c
  6871                           
  6872                           ; BSR set to: 0
  6873  01497A  C064  FFD9         	movff	frexp@eptr,fsr2l
  6874  01497E  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  6875  014982  0E82               	movlw	130
  6876  014984  26DE               	addwf	postinc2,f,c
  6877  014986  0EFF               	movlw	255
  6878  014988  22DD               	addwfc	postdec2,f,c
  6879                           
  6880                           ; BSR set to: 0
  6881  01498A  0100               	movlb	0	; () banked
  6882  01498C  8163               	bsf	(frexp@value+3)& (0+255),0,b
  6883  01498E  8363               	bsf	(frexp@value+3)& (0+255),1,b
  6884  014990  8563               	bsf	(frexp@value+3)& (0+255),2,b
  6885  014992  8763               	bsf	(frexp@value+3)& (0+255),3,b
  6886  014994  8963               	bsf	(frexp@value+3)& (0+255),4,b
  6887  014996  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  6888  014998  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  6889                           
  6890                           ; BSR set to: 0
  6891  01499A  0100               	movlb	0	; () banked
  6892  01499C  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  6893                           
  6894                           ; BSR set to: 0
  6895  01499E  C060  F060         	movff	frexp@value,?_frexp
  6896  0149A2  C061  F061         	movff	frexp@value+1,?_frexp+1
  6897  0149A6  C062  F062         	movff	frexp@value+2,?_frexp+2
  6898  0149AA  C063  F063         	movff	frexp@value+3,?_frexp+3
  6899  0149AE  0012               	return	
  6900  0149B0                     __end_of_frexp:
  6901                           	opt stack 0
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           postdec1	equ	0xFE5
  6911                           fsr1h	equ	0xFE2
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function ___fltol *****************
  6921 ;; Defined at:
  6922 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fltol.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;  f1              4   39[BANK0 ] PTR int 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  exp1            1   48[BANK0 ] unsigned char 
  6927 ;;  sign1           1   47[BANK0 ] unsigned char 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  4   39[BANK0 ] long 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2, status,0
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6937 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;Total ram usage:       10 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    7
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_printToScreen
  6948 ;;		_pow
  6949 ;;		_exp
  6950 ;;		_floor
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text19
  6955  013F0C                     __ptext19:
  6956                           	opt stack 0
  6957  013F0C                     ___fltol:
  6958                           	opt stack 19
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;incstack = 0
  6962  013F0C  0100               	movlb	0	; () banked
  6963  013F0E  3589               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6964  013F10  358A               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6965  013F12  0100               	movlb	0	; () banked
  6966  013F14  6F90               	movwf	___fltol@exp1& (0+255),b
  6967  013F16  0100               	movlb	0	; () banked
  6968  013F18  5190               	movf	___fltol@exp1& (0+255),w,b
  6969  013F1A  A4D8               	btfss	status,2,c
  6970  013F1C  D00A               	goto	l12697
  6971                           
  6972                           ; BSR set to: 0
  6973  013F1E  0E00               	movlw	0
  6974  013F20  0100               	movlb	0	; () banked
  6975  013F22  6F87               	movwf	?___fltol& (0+255),b
  6976  013F24  0E00               	movlw	0
  6977  013F26  6F88               	movwf	(?___fltol+1)& (0+255),b
  6978  013F28  0E00               	movlw	0
  6979  013F2A  6F89               	movwf	(?___fltol+2)& (0+255),b
  6980  013F2C  0E00               	movlw	0
  6981  013F2E  6F8A               	movwf	(?___fltol+3)& (0+255),b
  6982                           
  6983                           ; BSR set to: 0
  6984  013F30  0012               	return	
  6985  013F32                     l12697:
  6986                           
  6987                           ; BSR set to: 0
  6988  013F32  C087  F08B         	movff	___fltol@f1,??___fltol
  6989  013F36  C088  F08C         	movff	___fltol@f1+1,??___fltol+1
  6990  013F3A  C089  F08D         	movff	___fltol@f1+2,??___fltol+2
  6991  013F3E  C08A  F08E         	movff	___fltol@f1+3,??___fltol+3
  6992  013F42  0E20               	movlw	32
  6993  013F44  D006               	goto	u10350
  6994  013F46                     u10355:
  6995  013F46  0100               	movlb	0	; () banked
  6996  013F48  90D8               	bcf	status,0,c
  6997  013F4A  338E               	rrcf	(??___fltol+3)& (0+255),f,b
  6998  013F4C  338D               	rrcf	(??___fltol+2)& (0+255),f,b
  6999  013F4E  338C               	rrcf	(??___fltol+1)& (0+255),f,b
  7000  013F50  338B               	rrcf	??___fltol& (0+255),f,b
  7001  013F52                     u10350:
  7002  013F52  2EE8               	decfsz	wreg,f,c
  7003  013F54  D7F8               	goto	u10355
  7004  013F56  0100               	movlb	0	; () banked
  7005  013F58  518B               	movf	??___fltol& (0+255),w,b
  7006  013F5A  0100               	movlb	0	; () banked
  7007  013F5C  6F8F               	movwf	___fltol@sign1& (0+255),b
  7008                           
  7009                           ; BSR set to: 0
  7010  013F5E  0100               	movlb	0	; () banked
  7011  013F60  8F89               	bsf	(___fltol@f1+2)& (0+255),7,b
  7012                           
  7013                           ; BSR set to: 0
  7014  013F62  0EFF               	movlw	255
  7015  013F64  0100               	movlb	0	; () banked
  7016  013F66  1787               	andwf	___fltol@f1& (0+255),f,b
  7017  013F68  0EFF               	movlw	255
  7018  013F6A  1788               	andwf	(___fltol@f1+1)& (0+255),f,b
  7019  013F6C  0EFF               	movlw	255
  7020  013F6E  1789               	andwf	(___fltol@f1+2)& (0+255),f,b
  7021  013F70  0E00               	movlw	0
  7022  013F72  178A               	andwf	(___fltol@f1+3)& (0+255),f,b
  7023                           
  7024                           ; BSR set to: 0
  7025  013F74  0E96               	movlw	150
  7026  013F76  0100               	movlb	0	; () banked
  7027  013F78  5F90               	subwf	___fltol@exp1& (0+255),f,b
  7028                           
  7029                           ; BSR set to: 0
  7030  013F7A  0100               	movlb	0	; () banked
  7031  013F7C  AF90               	btfss	___fltol@exp1& (0+255),7,b
  7032  013F7E  D01A               	goto	l12717
  7033                           
  7034                           ; BSR set to: 0
  7035  013F80  0100               	movlb	0	; () banked
  7036  013F82  5190               	movf	___fltol@exp1& (0+255),w,b
  7037  013F84  0A80               	xorlw	128
  7038  013F86  0F97               	addlw	151
  7039  013F88  B0D8               	btfsc	status,0,c
  7040  013F8A  D00A               	goto	l12713
  7041                           
  7042                           ; BSR set to: 0
  7043  013F8C  0E00               	movlw	0
  7044  013F8E  0100               	movlb	0	; () banked
  7045  013F90  6F87               	movwf	?___fltol& (0+255),b
  7046  013F92  0E00               	movlw	0
  7047  013F94  6F88               	movwf	(?___fltol+1)& (0+255),b
  7048  013F96  0E00               	movlw	0
  7049  013F98  6F89               	movwf	(?___fltol+2)& (0+255),b
  7050  013F9A  0E00               	movlw	0
  7051  013F9C  6F8A               	movwf	(?___fltol+3)& (0+255),b
  7052                           
  7053                           ; BSR set to: 0
  7054  013F9E  0012               	return	
  7055  013FA0                     l12713:
  7056                           
  7057                           ; BSR set to: 0
  7058  013FA0  0100               	movlb	0	; () banked
  7059  013FA2  90D8               	bcf	status,0,c
  7060  013FA4  338A               	rrcf	(___fltol@f1+3)& (0+255),f,b
  7061  013FA6  3389               	rrcf	(___fltol@f1+2)& (0+255),f,b
  7062  013FA8  3388               	rrcf	(___fltol@f1+1)& (0+255),f,b
  7063  013FAA  3387               	rrcf	___fltol@f1& (0+255),f,b
  7064                           
  7065                           ; BSR set to: 0
  7066  013FAC  0100               	movlb	0	; () banked
  7067  013FAE  3F90               	incfsz	___fltol@exp1& (0+255),f,b
  7068  013FB0  D7F7               	goto	l12713
  7069                           
  7070                           ; BSR set to: 0
  7071  013FB2  D01B               	goto	l12727
  7072  013FB4                     l12717:
  7073                           
  7074                           ; BSR set to: 0
  7075  013FB4  0E1F               	movlw	31
  7076  013FB6  0100               	movlb	0	; () banked
  7077  013FB8  6590               	cpfsgt	___fltol@exp1& (0+255),b
  7078  013FBA  D012               	goto	l12725
  7079                           
  7080                           ; BSR set to: 0
  7081  013FBC  0E00               	movlw	0
  7082  013FBE  0100               	movlb	0	; () banked
  7083  013FC0  6F87               	movwf	?___fltol& (0+255),b
  7084  013FC2  0E00               	movlw	0
  7085  013FC4  6F88               	movwf	(?___fltol+1)& (0+255),b
  7086  013FC6  0E00               	movlw	0
  7087  013FC8  6F89               	movwf	(?___fltol+2)& (0+255),b
  7088  013FCA  0E00               	movlw	0
  7089  013FCC  6F8A               	movwf	(?___fltol+3)& (0+255),b
  7090                           
  7091                           ; BSR set to: 0
  7092  013FCE  0012               	return	
  7093  013FD0                     l12723:
  7094                           
  7095                           ; BSR set to: 0
  7096  013FD0  0100               	movlb	0	; () banked
  7097  013FD2  90D8               	bcf	status,0,c
  7098  013FD4  3787               	rlcf	___fltol@f1& (0+255),f,b
  7099  013FD6  3788               	rlcf	(___fltol@f1+1)& (0+255),f,b
  7100  013FD8  3789               	rlcf	(___fltol@f1+2)& (0+255),f,b
  7101  013FDA  378A               	rlcf	(___fltol@f1+3)& (0+255),f,b
  7102  013FDC  0100               	movlb	0	; () banked
  7103  013FDE  0790               	decf	___fltol@exp1& (0+255),f,b
  7104  013FE0                     l12725:
  7105                           
  7106                           ; BSR set to: 0
  7107  013FE0  0100               	movlb	0	; () banked
  7108  013FE2  5190               	movf	___fltol@exp1& (0+255),w,b
  7109  013FE4  0100               	movlb	0	; () banked
  7110  013FE6  A4D8               	btfss	status,2,c
  7111  013FE8  D7F3               	goto	l12723
  7112  013FEA                     l12727:
  7113                           
  7114                           ; BSR set to: 0
  7115  013FEA  0100               	movlb	0	; () banked
  7116  013FEC  518F               	movf	___fltol@sign1& (0+255),w,b
  7117  013FEE  0100               	movlb	0	; () banked
  7118  013FF0  B4D8               	btfsc	status,2,c
  7119  013FF2  D009               	goto	l12731
  7120                           
  7121                           ; BSR set to: 0
  7122  013FF4  0100               	movlb	0	; () banked
  7123  013FF6  1F8A               	comf	(___fltol@f1+3)& (0+255),f,b
  7124  013FF8  1F89               	comf	(___fltol@f1+2)& (0+255),f,b
  7125  013FFA  1F88               	comf	(___fltol@f1+1)& (0+255),f,b
  7126  013FFC  6D87               	negf	___fltol@f1& (0+255),b
  7127  013FFE  0E00               	movlw	0
  7128  014000  2388               	addwfc	(___fltol@f1+1)& (0+255),f,b
  7129  014002  2389               	addwfc	(___fltol@f1+2)& (0+255),f,b
  7130  014004  238A               	addwfc	(___fltol@f1+3)& (0+255),f,b
  7131  014006                     l12731:
  7132                           
  7133                           ; BSR set to: 0
  7134  014006  C087  F087         	movff	___fltol@f1,?___fltol
  7135  01400A  C088  F088         	movff	___fltol@f1+1,?___fltol+1
  7136  01400E  C089  F089         	movff	___fltol@f1+2,?___fltol+2
  7137  014012  C08A  F08A         	movff	___fltol@f1+3,?___fltol+3
  7138  014016  0012               	return	
  7139  014018                     __end_of___fltol:
  7140                           	opt stack 0
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           postinc0	equ	0xFEE
  7148                           wreg	equ	0xFE8
  7149                           postdec1	equ	0xFE5
  7150                           fsr1h	equ	0xFE2
  7151                           fsr1l	equ	0xFE1
  7152                           indf2	equ	0xFDF
  7153                           postinc2	equ	0xFDE
  7154                           postdec2	equ	0xFDD
  7155                           fsr2h	equ	0xFDA
  7156                           fsr2l	equ	0xFD9
  7157                           status	equ	0xFD8
  7158                           
  7159 ;; *************** function ___flge *****************
  7160 ;; Defined at:
  7161 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\flge.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  ff1             4    0[BANK0 ] long 
  7164 ;;  ff2             4    4[BANK0 ] long 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;		None
  7167 ;; Return value:  Size  Location     Type
  7168 ;;		None               void
  7169 ;; Registers used:
  7170 ;;		wreg, status,2, status,0
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7176 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;Total ram usage:       12 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    7
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		_pow
  7187 ;;		_exp
  7188 ;;		_floor
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text20
  7193  012DB4                     __ptext20:
  7194                           	opt stack 0
  7195  012DB4                     ___flge:
  7196                           	opt stack 19
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;incstack = 0
  7200  012DB4  0E00               	movlw	0
  7201  012DB6  0100               	movlb	0	; () banked
  7202  012DB8  1560               	andwf	___flge@ff1& (0+255),w,b
  7203  012DBA  0100               	movlb	0	; () banked
  7204  012DBC  6F68               	movwf	??___flge& (0+255),b
  7205  012DBE  0E00               	movlw	0
  7206  012DC0  0100               	movlb	0	; () banked
  7207  012DC2  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
  7208  012DC4  0100               	movlb	0	; () banked
  7209  012DC6  6F69               	movwf	(??___flge+1)& (0+255),b
  7210  012DC8  0E80               	movlw	128
  7211  012DCA  0100               	movlb	0	; () banked
  7212  012DCC  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
  7213  012DCE  0100               	movlb	0	; () banked
  7214  012DD0  6F6A               	movwf	(??___flge+2)& (0+255),b
  7215  012DD2  0E7F               	movlw	127
  7216  012DD4  0100               	movlb	0	; () banked
  7217  012DD6  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
  7218  012DD8  0100               	movlb	0	; () banked
  7219  012DDA  6F6B               	movwf	(??___flge+3)& (0+255),b
  7220  012DDC  0100               	movlb	0	; () banked
  7221  012DDE  5168               	movf	??___flge& (0+255),w,b
  7222  012DE0  0100               	movlb	0	; () banked
  7223  012DE2  1169               	iorwf	(??___flge+1)& (0+255),w,b
  7224  012DE4  0100               	movlb	0	; () banked
  7225  012DE6  116A               	iorwf	(??___flge+2)& (0+255),w,b
  7226  012DE8  0100               	movlb	0	; () banked
  7227  012DEA  116B               	iorwf	(??___flge+3)& (0+255),w,b
  7228  012DEC  A4D8               	btfss	status,2,c
  7229  012DEE  D009               	goto	l12673
  7230                           
  7231                           ; BSR set to: 0
  7232  012DF0  0E00               	movlw	0
  7233  012DF2  0100               	movlb	0	; () banked
  7234  012DF4  6F60               	movwf	___flge@ff1& (0+255),b
  7235  012DF6  0E00               	movlw	0
  7236  012DF8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  7237  012DFA  0E00               	movlw	0
  7238  012DFC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  7239  012DFE  0E00               	movlw	0
  7240  012E00  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  7241  012E02                     l12673:
  7242                           
  7243                           ; BSR set to: 0
  7244  012E02  0E00               	movlw	0
  7245  012E04  0100               	movlb	0	; () banked
  7246  012E06  1564               	andwf	___flge@ff2& (0+255),w,b
  7247  012E08  0100               	movlb	0	; () banked
  7248  012E0A  6F68               	movwf	??___flge& (0+255),b
  7249  012E0C  0E00               	movlw	0
  7250  012E0E  0100               	movlb	0	; () banked
  7251  012E10  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
  7252  012E12  0100               	movlb	0	; () banked
  7253  012E14  6F69               	movwf	(??___flge+1)& (0+255),b
  7254  012E16  0E80               	movlw	128
  7255  012E18  0100               	movlb	0	; () banked
  7256  012E1A  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
  7257  012E1C  0100               	movlb	0	; () banked
  7258  012E1E  6F6A               	movwf	(??___flge+2)& (0+255),b
  7259  012E20  0E7F               	movlw	127
  7260  012E22  0100               	movlb	0	; () banked
  7261  012E24  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
  7262  012E26  0100               	movlb	0	; () banked
  7263  012E28  6F6B               	movwf	(??___flge+3)& (0+255),b
  7264  012E2A  0100               	movlb	0	; () banked
  7265  012E2C  5168               	movf	??___flge& (0+255),w,b
  7266  012E2E  0100               	movlb	0	; () banked
  7267  012E30  1169               	iorwf	(??___flge+1)& (0+255),w,b
  7268  012E32  0100               	movlb	0	; () banked
  7269  012E34  116A               	iorwf	(??___flge+2)& (0+255),w,b
  7270  012E36  0100               	movlb	0	; () banked
  7271  012E38  116B               	iorwf	(??___flge+3)& (0+255),w,b
  7272  012E3A  A4D8               	btfss	status,2,c
  7273  012E3C  D009               	goto	l12677
  7274                           
  7275                           ; BSR set to: 0
  7276  012E3E  0E00               	movlw	0
  7277  012E40  0100               	movlb	0	; () banked
  7278  012E42  6F64               	movwf	___flge@ff2& (0+255),b
  7279  012E44  0E00               	movlw	0
  7280  012E46  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  7281  012E48  0E00               	movlw	0
  7282  012E4A  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  7283  012E4C  0E00               	movlw	0
  7284  012E4E  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  7285  012E50                     l12677:
  7286                           
  7287                           ; BSR set to: 0
  7288  012E50  0100               	movlb	0	; () banked
  7289  012E52  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
  7290  012E54  D026               	goto	l12681
  7291                           
  7292                           ; BSR set to: 0
  7293  012E56  C060  F068         	movff	___flge@ff1,??___flge
  7294  012E5A  C061  F069         	movff	___flge@ff1+1,??___flge+1
  7295  012E5E  C062  F06A         	movff	___flge@ff1+2,??___flge+2
  7296  012E62  C063  F06B         	movff	___flge@ff1+3,??___flge+3
  7297  012E66  0100               	movlb	0	; () banked
  7298  012E68  1F68               	comf	??___flge& (0+255),f,b
  7299  012E6A  1F69               	comf	(??___flge+1)& (0+255),f,b
  7300  012E6C  1F6A               	comf	(??___flge+2)& (0+255),f,b
  7301  012E6E  1F6B               	comf	(??___flge+3)& (0+255),f,b
  7302  012E70  2B68               	incf	??___flge& (0+255),f,b
  7303  012E72  0E00               	movlw	0
  7304  012E74  2369               	addwfc	(??___flge+1)& (0+255),f,b
  7305  012E76  236A               	addwfc	(??___flge+2)& (0+255),f,b
  7306  012E78  236B               	addwfc	(??___flge+3)& (0+255),f,b
  7307  012E7A  0E00               	movlw	0
  7308  012E7C  0100               	movlb	0	; () banked
  7309  012E7E  2568               	addwf	??___flge& (0+255),w,b
  7310  012E80  0100               	movlb	0	; () banked
  7311  012E82  6F60               	movwf	___flge@ff1& (0+255),b
  7312  012E84  0E00               	movlw	0
  7313  012E86  0100               	movlb	0	; () banked
  7314  012E88  2169               	addwfc	(??___flge+1)& (0+255),w,b
  7315  012E8A  0100               	movlb	0	; () banked
  7316  012E8C  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  7317  012E8E  0E00               	movlw	0
  7318  012E90  0100               	movlb	0	; () banked
  7319  012E92  216A               	addwfc	(??___flge+2)& (0+255),w,b
  7320  012E94  0100               	movlb	0	; () banked
  7321  012E96  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  7322  012E98  0E80               	movlw	128
  7323  012E9A  0100               	movlb	0	; () banked
  7324  012E9C  216B               	addwfc	(??___flge+3)& (0+255),w,b
  7325  012E9E  0100               	movlb	0	; () banked
  7326  012EA0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  7327  012EA2                     l12681:
  7328                           
  7329                           ; BSR set to: 0
  7330  012EA2  0100               	movlb	0	; () banked
  7331  012EA4  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
  7332  012EA6  D026               	goto	l2311
  7333                           
  7334                           ; BSR set to: 0
  7335  012EA8  C064  F068         	movff	___flge@ff2,??___flge
  7336  012EAC  C065  F069         	movff	___flge@ff2+1,??___flge+1
  7337  012EB0  C066  F06A         	movff	___flge@ff2+2,??___flge+2
  7338  012EB4  C067  F06B         	movff	___flge@ff2+3,??___flge+3
  7339  012EB8  0100               	movlb	0	; () banked
  7340  012EBA  1F68               	comf	??___flge& (0+255),f,b
  7341  012EBC  1F69               	comf	(??___flge+1)& (0+255),f,b
  7342  012EBE  1F6A               	comf	(??___flge+2)& (0+255),f,b
  7343  012EC0  1F6B               	comf	(??___flge+3)& (0+255),f,b
  7344  012EC2  2B68               	incf	??___flge& (0+255),f,b
  7345  012EC4  0E00               	movlw	0
  7346  012EC6  2369               	addwfc	(??___flge+1)& (0+255),f,b
  7347  012EC8  236A               	addwfc	(??___flge+2)& (0+255),f,b
  7348  012ECA  236B               	addwfc	(??___flge+3)& (0+255),f,b
  7349  012ECC  0E00               	movlw	0
  7350  012ECE  0100               	movlb	0	; () banked
  7351  012ED0  2568               	addwf	??___flge& (0+255),w,b
  7352  012ED2  0100               	movlb	0	; () banked
  7353  012ED4  6F64               	movwf	___flge@ff2& (0+255),b
  7354  012ED6  0E00               	movlw	0
  7355  012ED8  0100               	movlb	0	; () banked
  7356  012EDA  2169               	addwfc	(??___flge+1)& (0+255),w,b
  7357  012EDC  0100               	movlb	0	; () banked
  7358  012EDE  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  7359  012EE0  0E00               	movlw	0
  7360  012EE2  0100               	movlb	0	; () banked
  7361  012EE4  216A               	addwfc	(??___flge+2)& (0+255),w,b
  7362  012EE6  0100               	movlb	0	; () banked
  7363  012EE8  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  7364  012EEA  0E80               	movlw	128
  7365  012EEC  0100               	movlb	0	; () banked
  7366  012EEE  216B               	addwfc	(??___flge+3)& (0+255),w,b
  7367  012EF0  0100               	movlb	0	; () banked
  7368  012EF2  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  7369  012EF4                     l2311:
  7370                           
  7371                           ; BSR set to: 0
  7372  012EF4  0E00               	movlw	0
  7373  012EF6  0100               	movlb	0	; () banked
  7374  012EF8  1B60               	xorwf	___flge@ff1& (0+255),f,b
  7375  012EFA  0E00               	movlw	0
  7376  012EFC  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
  7377  012EFE  0E00               	movlw	0
  7378  012F00  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
  7379  012F02  0E80               	movlw	128
  7380  012F04  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
  7381  012F06  0E00               	movlw	0
  7382  012F08  0100               	movlb	0	; () banked
  7383  012F0A  1B64               	xorwf	___flge@ff2& (0+255),f,b
  7384  012F0C  0E00               	movlw	0
  7385  012F0E  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
  7386  012F10  0E00               	movlw	0
  7387  012F12  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
  7388  012F14  0E80               	movlw	128
  7389  012F16  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
  7390  012F18  0100               	movlb	0	; () banked
  7391  012F1A  5164               	movf	___flge@ff2& (0+255),w,b
  7392  012F1C  0100               	movlb	0	; () banked
  7393  012F1E  5D60               	subwf	___flge@ff1& (0+255),w,b
  7394  012F20  0100               	movlb	0	; () banked
  7395  012F22  5165               	movf	(___flge@ff2+1)& (0+255),w,b
  7396  012F24  0100               	movlb	0	; () banked
  7397  012F26  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
  7398  012F28  0100               	movlb	0	; () banked
  7399  012F2A  5166               	movf	(___flge@ff2+2)& (0+255),w,b
  7400  012F2C  0100               	movlb	0	; () banked
  7401  012F2E  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
  7402  012F30  0100               	movlb	0	; () banked
  7403  012F32  5167               	movf	(___flge@ff2+3)& (0+255),w,b
  7404  012F34  0100               	movlb	0	; () banked
  7405  012F36  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
  7406  012F38  B0D8               	btfsc	status,0,c
  7407  012F3A  D002               	goto	l12687
  7408                           
  7409                           ; BSR set to: 0
  7410  012F3C  90D8               	bcf	status,0,c
  7411  012F3E  0012               	return	
  7412  012F40                     l12687:
  7413                           
  7414                           ; BSR set to: 0
  7415  012F40  80D8               	bsf	status,0,c
  7416                           
  7417                           ; BSR set to: 0
  7418  012F42  0012               	return	
  7419  012F44                     __end_of___flge:
  7420                           	opt stack 0
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           postinc0	equ	0xFEE
  7428                           wreg	equ	0xFE8
  7429                           postdec1	equ	0xFE5
  7430                           fsr1h	equ	0xFE2
  7431                           fsr1l	equ	0xFE1
  7432                           indf2	equ	0xFDF
  7433                           postinc2	equ	0xFDE
  7434                           postdec2	equ	0xFDD
  7435                           fsr2h	equ	0xFDA
  7436                           fsr2l	equ	0xFD9
  7437                           status	equ	0xFD8
  7438                           
  7439 ;; *************** function _eval_poly *****************
  7440 ;; Defined at:
  7441 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\evalpoly.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  x               4   59[BANK0 ] long 
  7444 ;;  d               2   63[BANK0 ] PTR const 
  7445 ;;		 -> log@coeff(36), exp@coeff(40), 
  7446 ;;  n               2   65[BANK0 ] int 
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;  res             4   71[BANK0 ] int 
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  4   59[BANK0 ] int 
  7451 ;; Registers used:
  7452 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7458 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;Total ram usage:       16 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; Hardware stack levels required when called:    8
  7465 ;; This function calls:
  7466 ;;		___fladd
  7467 ;;		___flmul
  7468 ;; This function is called by:
  7469 ;;		_exp
  7470 ;;		_log
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           	psect	text21
  7475  013DF4                     __ptext21:
  7476                           	opt stack 0
  7477  013DF4                     _eval_poly:
  7478                           	opt stack 19
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;incstack = 0
  7482  013DF4  C0A1  F0A3         	movff	eval_poly@n,??_eval_poly
  7483  013DF8  C0A2  F0A4         	movff	eval_poly@n+1,??_eval_poly+1
  7484  013DFC  0100               	movlb	0	; () banked
  7485  013DFE  90D8               	bcf	status,0,c
  7486  013E00  37A3               	rlcf	??_eval_poly& (0+255),f,b
  7487  013E02  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7488  013E04  0100               	movlb	0	; () banked
  7489  013E06  90D8               	bcf	status,0,c
  7490  013E08  37A3               	rlcf	??_eval_poly& (0+255),f,b
  7491  013E0A  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7492  013E0C  C09F  F0A5         	movff	eval_poly@d,??_eval_poly+2
  7493  013E10  C0A0  F0A6         	movff	eval_poly@d+1,??_eval_poly+3
  7494  013E14  0100               	movlb	0	; () banked
  7495  013E16  51A3               	movf	??_eval_poly& (0+255),w,b
  7496  013E18  0100               	movlb	0	; () banked
  7497  013E1A  27A5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7498  013E1C  0100               	movlb	0	; () banked
  7499  013E1E  51A4               	movf	(??_eval_poly+1)& (0+255),w,b
  7500  013E20  0100               	movlb	0	; () banked
  7501  013E22  23A6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7502  013E24  C0A5  FFF6         	movff	??_eval_poly+2,tblptrl
  7503  013E28  C0A6  FFF7         	movff	??_eval_poly+3,tblptrh
  7504  013E2C                     	if	0	;tblptru may be non-zero
  7505  013E2C                     	endif
  7506  013E2C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7507  013E2C  0E00               	movlw	low (__mediumconst shr (0+16))
  7508  013E2E  6EF8               	movwf	tblptru,c
  7509  013E30                     	endif
  7510  013E30  0009               	tblrd		*+
  7511  013E32  CFF5 F0A7          	movff	tablat,eval_poly@res
  7512  013E36  0009               	tblrd		*+
  7513  013E38  CFF5 F0A8          	movff	tablat,eval_poly@res+1
  7514  013E3C  0009               	tblrd		*+
  7515  013E3E  CFF5 F0A9          	movff	tablat,eval_poly@res+2
  7516  013E42  000A               	tblrd		*-
  7517  013E44  CFF5 F0AA          	movff	tablat,eval_poly@res+3
  7518  013E48  D052               	goto	l13477
  7519  013E4A                     l13475:
  7520                           
  7521                           ; BSR set to: 0
  7522  013E4A  C0A7  F072         	movff	eval_poly@res,___flmul@a
  7523  013E4E  C0A8  F073         	movff	eval_poly@res+1,___flmul@a+1
  7524  013E52  C0A9  F074         	movff	eval_poly@res+2,___flmul@a+2
  7525  013E56  C0AA  F075         	movff	eval_poly@res+3,___flmul@a+3
  7526  013E5A  C09B  F06E         	movff	eval_poly@x,___flmul@b
  7527  013E5E  C09C  F06F         	movff	eval_poly@x+1,___flmul@b+1
  7528  013E62  C09D  F070         	movff	eval_poly@x+2,___flmul@b+2
  7529  013E66  C09E  F071         	movff	eval_poly@x+3,___flmul@b+3
  7530  013E6A  EC54  F082         	call	___flmul	;wreg free
  7531  013E6E  C06E  F087         	movff	?___flmul,___fladd@b
  7532  013E72  C06F  F088         	movff	?___flmul+1,___fladd@b+1
  7533  013E76  C070  F089         	movff	?___flmul+2,___fladd@b+2
  7534  013E7A  C071  F08A         	movff	?___flmul+3,___fladd@b+3
  7535  013E7E  0100               	movlb	0	; () banked
  7536  013E80  07A1               	decf	eval_poly@n& (0+255),f,b
  7537  013E82  A0D8               	btfss	status,0,c
  7538  013E84  07A2               	decf	(eval_poly@n+1)& (0+255),f,b
  7539  013E86  C0A1  F0A3         	movff	eval_poly@n,??_eval_poly
  7540  013E8A  C0A2  F0A4         	movff	eval_poly@n+1,??_eval_poly+1
  7541  013E8E  0100               	movlb	0	; () banked
  7542  013E90  90D8               	bcf	status,0,c
  7543  013E92  37A3               	rlcf	??_eval_poly& (0+255),f,b
  7544  013E94  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7545  013E96  0100               	movlb	0	; () banked
  7546  013E98  90D8               	bcf	status,0,c
  7547  013E9A  37A3               	rlcf	??_eval_poly& (0+255),f,b
  7548  013E9C  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7549  013E9E  C09F  F0A5         	movff	eval_poly@d,??_eval_poly+2
  7550  013EA2  C0A0  F0A6         	movff	eval_poly@d+1,??_eval_poly+3
  7551  013EA6  0100               	movlb	0	; () banked
  7552  013EA8  51A3               	movf	??_eval_poly& (0+255),w,b
  7553  013EAA  0100               	movlb	0	; () banked
  7554  013EAC  27A5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7555  013EAE  0100               	movlb	0	; () banked
  7556  013EB0  51A4               	movf	(??_eval_poly+1)& (0+255),w,b
  7557  013EB2  0100               	movlb	0	; () banked
  7558  013EB4  23A6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7559  013EB6  C0A5  FFF6         	movff	??_eval_poly+2,tblptrl
  7560  013EBA  C0A6  FFF7         	movff	??_eval_poly+3,tblptrh
  7561  013EBE                     	if	0	;tblptru may be non-zero
  7562  013EBE                     	endif
  7563  013EBE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7564  013EBE  0E00               	movlw	low (__mediumconst shr (0+16))
  7565  013EC0  6EF8               	movwf	tblptru,c
  7566  013EC2                     	endif
  7567  013EC2  0009               	tblrd		*+
  7568  013EC4  CFF5 F08B          	movff	tablat,___fladd@a
  7569  013EC8  0009               	tblrd		*+
  7570  013ECA  CFF5 F08C          	movff	tablat,___fladd@a+1
  7571  013ECE  0009               	tblrd		*+
  7572  013ED0  CFF5 F08D          	movff	tablat,___fladd@a+2
  7573  013ED4  000A               	tblrd		*-
  7574  013ED6  CFF5 F08E          	movff	tablat,___fladd@a+3
  7575  013EDA  EC00  F080         	call	___fladd	;wreg free
  7576  013EDE  C087  F0A7         	movff	?___fladd,eval_poly@res
  7577  013EE2  C088  F0A8         	movff	?___fladd+1,eval_poly@res+1
  7578  013EE6  C089  F0A9         	movff	?___fladd+2,eval_poly@res+2
  7579  013EEA  C08A  F0AA         	movff	?___fladd+3,eval_poly@res+3
  7580  013EEE                     l13477:
  7581  013EEE  0100               	movlb	0	; () banked
  7582  013EF0  51A1               	movf	eval_poly@n& (0+255),w,b
  7583  013EF2  0100               	movlb	0	; () banked
  7584  013EF4  11A2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7585  013EF6  A4D8               	btfss	status,2,c
  7586  013EF8  D7A8               	goto	l13475
  7587                           
  7588                           ; BSR set to: 0
  7589  013EFA  C0A7  F09B         	movff	eval_poly@res,?_eval_poly
  7590  013EFE  C0A8  F09C         	movff	eval_poly@res+1,?_eval_poly+1
  7591  013F02  C0A9  F09D         	movff	eval_poly@res+2,?_eval_poly+2
  7592  013F06  C0AA  F09E         	movff	eval_poly@res+3,?_eval_poly+3
  7593                           
  7594                           ; BSR set to: 0
  7595  013F0A  0012               	return		;funcret
  7596  013F0C                     __end_of_eval_poly:
  7597                           	opt stack 0
  7598                           tblptru	equ	0xFF8
  7599                           tblptrh	equ	0xFF7
  7600                           tblptrl	equ	0xFF6
  7601                           tablat	equ	0xFF5
  7602                           prodh	equ	0xFF4
  7603                           prodl	equ	0xFF3
  7604                           postinc0	equ	0xFEE
  7605                           wreg	equ	0xFE8
  7606                           postdec1	equ	0xFE5
  7607                           fsr1h	equ	0xFE2
  7608                           fsr1l	equ	0xFE1
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           fsr2h	equ	0xFDA
  7613                           fsr2l	equ	0xFD9
  7614                           status	equ	0xFD8
  7615                           
  7616 ;; *************** function ___flsub *****************
  7617 ;; Defined at:
  7618 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcadd.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  b               4   59[BANK0 ] int 
  7621 ;;  a               4   63[BANK0 ] int 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  4   59[BANK0 ] int 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2, status,0, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7633 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;Total ram usage:        8 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    8
  7640 ;; This function calls:
  7641 ;;		___fladd
  7642 ;; This function is called by:
  7643 ;;		_exp
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           	psect	text22
  7648  016046                     __ptext22:
  7649                           	opt stack 0
  7650  016046                     ___flsub:
  7651                           	opt stack 19
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;incstack = 0
  7655  016046  0E00               	movlw	0
  7656  016048  0100               	movlb	0	; () banked
  7657  01604A  1B9F               	xorwf	___flsub@a& (0+255),f,b
  7658  01604C  0E00               	movlw	0
  7659  01604E  1BA0               	xorwf	(___flsub@a+1)& (0+255),f,b
  7660  016050  0E00               	movlw	0
  7661  016052  1BA1               	xorwf	(___flsub@a+2)& (0+255),f,b
  7662  016054  0E80               	movlw	128
  7663  016056  1BA2               	xorwf	(___flsub@a+3)& (0+255),f,b
  7664                           
  7665                           ; BSR set to: 0
  7666  016058  C09B  F087         	movff	___flsub@b,___fladd@b
  7667  01605C  C09C  F088         	movff	___flsub@b+1,___fladd@b+1
  7668  016060  C09D  F089         	movff	___flsub@b+2,___fladd@b+2
  7669  016064  C09E  F08A         	movff	___flsub@b+3,___fladd@b+3
  7670  016068  C09F  F08B         	movff	___flsub@a,___fladd@a
  7671  01606C  C0A0  F08C         	movff	___flsub@a+1,___fladd@a+1
  7672  016070  C0A1  F08D         	movff	___flsub@a+2,___fladd@a+2
  7673  016074  C0A2  F08E         	movff	___flsub@a+3,___fladd@a+3
  7674  016078  EC00  F080         	call	___fladd	;wreg free
  7675  01607C  C087  F09B         	movff	?___fladd,?___flsub
  7676  016080  C088  F09C         	movff	?___fladd+1,?___flsub+1
  7677  016084  C089  F09D         	movff	?___fladd+2,?___flsub+2
  7678  016088  C08A  F09E         	movff	?___fladd+3,?___flsub+3
  7679  01608C  0012               	return	
  7680  01608E                     __end_of___flsub:
  7681                           	opt stack 0
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           postinc0	equ	0xFEE
  7689                           wreg	equ	0xFE8
  7690                           postdec1	equ	0xFE5
  7691                           fsr1h	equ	0xFE2
  7692                           fsr1l	equ	0xFE1
  7693                           indf2	equ	0xFDF
  7694                           postinc2	equ	0xFDE
  7695                           postdec2	equ	0xFDD
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function ___fladd *****************
  7701 ;; Defined at:
  7702 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcadd.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;  b               4   39[BANK0 ] int 
  7705 ;;  a               4   43[BANK0 ] int 
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;  grs             1   58[BANK0 ] unsigned char 
  7708 ;;  bexp            1   57[BANK0 ] unsigned char 
  7709 ;;  aexp            1   56[BANK0 ] unsigned char 
  7710 ;;  signs           1   55[BANK0 ] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  4   39[BANK0 ] unsigned char 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7720 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;Total ram usage:       20 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    7
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		___flsub
  7731 ;;		_floor
  7732 ;;		_log
  7733 ;;		_eval_poly
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text23
  7738  010000                     __ptext23:
  7739                           	opt stack 0
  7740  010000                     ___fladd:
  7741                           	opt stack 19
  7742                           
  7743                           ;incstack = 0
  7744  010000  0100               	movlb	0	; () banked
  7745  010002  518A               	movf	(___fladd@b+3)& (0+255),w,b
  7746  010004  0B80               	andlw	128
  7747  010006  0100               	movlb	0	; () banked
  7748  010008  6F97               	movwf	___fladd@signs& (0+255),b
  7749  01000A  0100               	movlb	0	; () banked
  7750  01000C  518A               	movf	(___fladd@b+3)& (0+255),w,b
  7751  01000E  258A               	addwf	(___fladd@b+3)& (0+255),w,b
  7752  010010  0100               	movlb	0	; () banked
  7753  010012  6F99               	movwf	___fladd@bexp& (0+255),b
  7754                           
  7755                           ; BSR set to: 0
  7756  010014  0100               	movlb	0	; () banked
  7757  010016  AF89               	btfss	(___fladd@b+2)& (0+255),7,b
  7758  010018  D002               	goto	l12343
  7759                           
  7760                           ; BSR set to: 0
  7761  01001A  0100               	movlb	0	; () banked
  7762  01001C  8199               	bsf	___fladd@bexp& (0+255),0,b
  7763  01001E                     l12343:
  7764                           
  7765                           ; BSR set to: 0
  7766  01001E  0100               	movlb	0	; () banked
  7767  010020  5199               	movf	___fladd@bexp& (0+255),w,b
  7768  010022  0100               	movlb	0	; () banked
  7769  010024  B4D8               	btfsc	status,2,c
  7770  010026  D012               	goto	l12353
  7771                           
  7772                           ; BSR set to: 0
  7773  010028  0100               	movlb	0	; () banked
  7774  01002A  2999               	incf	___fladd@bexp& (0+255),w,b
  7775  01002C  A4D8               	btfss	status,2,c
  7776  01002E  D009               	goto	l12349
  7777                           
  7778                           ; BSR set to: 0
  7779  010030  0E00               	movlw	0
  7780  010032  0100               	movlb	0	; () banked
  7781  010034  6F87               	movwf	___fladd@b& (0+255),b
  7782  010036  0E00               	movlw	0
  7783  010038  6F88               	movwf	(___fladd@b+1)& (0+255),b
  7784  01003A  0E00               	movlw	0
  7785  01003C  6F89               	movwf	(___fladd@b+2)& (0+255),b
  7786  01003E  0E00               	movlw	0
  7787  010040  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  7788  010042                     l12349:
  7789                           
  7790                           ; BSR set to: 0
  7791  010042  0100               	movlb	0	; () banked
  7792  010044  8F89               	bsf	(___fladd@b+2)& (0+255),7,b
  7793                           
  7794                           ; BSR set to: 0
  7795  010046  0E00               	movlw	0
  7796  010048  0100               	movlb	0	; () banked
  7797  01004A  D008               	goto	L3
  7798  01004C                     l12353:
  7799                           
  7800                           ; BSR set to: 0
  7801  01004C  0E00               	movlw	0
  7802  01004E  0100               	movlb	0	; () banked
  7803  010050  6F87               	movwf	___fladd@b& (0+255),b
  7804  010052  0E00               	movlw	0
  7805  010054  6F88               	movwf	(___fladd@b+1)& (0+255),b
  7806  010056  0E00               	movlw	0
  7807  010058  6F89               	movwf	(___fladd@b+2)& (0+255),b
  7808  01005A  0E00               	movlw	0
  7809  01005C                     L3:
  7810  01005C  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  7811                           
  7812                           ; BSR set to: 0
  7813                           
  7814                           ; BSR set to: 0
  7815  01005E  0100               	movlb	0	; () banked
  7816  010060  518E               	movf	(___fladd@a+3)& (0+255),w,b
  7817  010062  0B80               	andlw	128
  7818  010064  0100               	movlb	0	; () banked
  7819  010066  6F98               	movwf	___fladd@aexp& (0+255),b
  7820                           
  7821                           ; BSR set to: 0
  7822  010068  0100               	movlb	0	; () banked
  7823  01006A  5197               	movf	___fladd@signs& (0+255),w,b
  7824  01006C  0100               	movlb	0	; () banked
  7825  01006E  1998               	xorwf	___fladd@aexp& (0+255),w,b
  7826  010070  B4D8               	btfsc	status,2,c
  7827  010072  D002               	goto	l12361
  7828                           
  7829                           ; BSR set to: 0
  7830  010074  0100               	movlb	0	; () banked
  7831  010076  8D97               	bsf	___fladd@signs& (0+255),6,b
  7832  010078                     l12361:
  7833                           
  7834                           ; BSR set to: 0
  7835  010078  0100               	movlb	0	; () banked
  7836  01007A  518E               	movf	(___fladd@a+3)& (0+255),w,b
  7837  01007C  258E               	addwf	(___fladd@a+3)& (0+255),w,b
  7838  01007E  0100               	movlb	0	; () banked
  7839  010080  6F98               	movwf	___fladd@aexp& (0+255),b
  7840                           
  7841                           ; BSR set to: 0
  7842  010082  0100               	movlb	0	; () banked
  7843  010084  AF8D               	btfss	(___fladd@a+2)& (0+255),7,b
  7844  010086  D002               	goto	l12367
  7845                           
  7846                           ; BSR set to: 0
  7847  010088  0100               	movlb	0	; () banked
  7848  01008A  8198               	bsf	___fladd@aexp& (0+255),0,b
  7849  01008C                     l12367:
  7850                           
  7851                           ; BSR set to: 0
  7852  01008C  0100               	movlb	0	; () banked
  7853  01008E  5198               	movf	___fladd@aexp& (0+255),w,b
  7854  010090  0100               	movlb	0	; () banked
  7855  010092  B4D8               	btfsc	status,2,c
  7856  010094  D012               	goto	l12377
  7857                           
  7858                           ; BSR set to: 0
  7859  010096  0100               	movlb	0	; () banked
  7860  010098  2998               	incf	___fladd@aexp& (0+255),w,b
  7861  01009A  A4D8               	btfss	status,2,c
  7862  01009C  D009               	goto	l12373
  7863                           
  7864                           ; BSR set to: 0
  7865  01009E  0E00               	movlw	0
  7866  0100A0  0100               	movlb	0	; () banked
  7867  0100A2  6F8B               	movwf	___fladd@a& (0+255),b
  7868  0100A4  0E00               	movlw	0
  7869  0100A6  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  7870  0100A8  0E00               	movlw	0
  7871  0100AA  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  7872  0100AC  0E00               	movlw	0
  7873  0100AE  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  7874  0100B0                     l12373:
  7875                           
  7876                           ; BSR set to: 0
  7877  0100B0  0100               	movlb	0	; () banked
  7878  0100B2  8F8D               	bsf	(___fladd@a+2)& (0+255),7,b
  7879                           
  7880                           ; BSR set to: 0
  7881  0100B4  0E00               	movlw	0
  7882  0100B6  0100               	movlb	0	; () banked
  7883  0100B8  D008               	goto	L4
  7884  0100BA                     l12377:
  7885                           
  7886                           ; BSR set to: 0
  7887  0100BA  0E00               	movlw	0
  7888  0100BC  0100               	movlb	0	; () banked
  7889  0100BE  6F8B               	movwf	___fladd@a& (0+255),b
  7890  0100C0  0E00               	movlw	0
  7891  0100C2  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  7892  0100C4  0E00               	movlw	0
  7893  0100C6  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  7894  0100C8  0E00               	movlw	0
  7895  0100CA                     L4:
  7896  0100CA  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  7897                           
  7898                           ; BSR set to: 0
  7899                           
  7900                           ; BSR set to: 0
  7901  0100CC  0100               	movlb	0	; () banked
  7902  0100CE  5199               	movf	___fladd@bexp& (0+255),w,b
  7903  0100D0  0100               	movlb	0	; () banked
  7904  0100D2  5D98               	subwf	___fladd@aexp& (0+255),w,b
  7905  0100D4  B0D8               	btfsc	status,0,c
  7906  0100D6  D024               	goto	l12415
  7907                           
  7908                           ; BSR set to: 0
  7909  0100D8  0100               	movlb	0	; () banked
  7910  0100DA  AD97               	btfss	___fladd@signs& (0+255),6,b
  7911  0100DC  D003               	goto	l12385
  7912                           
  7913                           ; BSR set to: 0
  7914  0100DE  0E80               	movlw	128
  7915  0100E0  0100               	movlb	0	; () banked
  7916  0100E2  1B97               	xorwf	___fladd@signs& (0+255),f,b
  7917  0100E4                     l12385:
  7918                           
  7919                           ; BSR set to: 0
  7920  0100E4  C099  F09A         	movff	___fladd@bexp,___fladd@grs
  7921                           
  7922                           ; BSR set to: 0
  7923  0100E8  C098  F099         	movff	___fladd@aexp,___fladd@bexp
  7924                           
  7925                           ; BSR set to: 0
  7926  0100EC  C09A  F098         	movff	___fladd@grs,___fladd@aexp
  7927                           
  7928                           ; BSR set to: 0
  7929  0100F0  C087  F09A         	movff	___fladd@b,___fladd@grs
  7930                           
  7931                           ; BSR set to: 0
  7932  0100F4  C08B  F087         	movff	___fladd@a,___fladd@b
  7933                           
  7934                           ; BSR set to: 0
  7935  0100F8  C09A  F08B         	movff	___fladd@grs,___fladd@a
  7936                           
  7937                           ; BSR set to: 0
  7938  0100FC  C088  F09A         	movff	___fladd@b+1,___fladd@grs
  7939                           
  7940                           ; BSR set to: 0
  7941  010100  C08C  F088         	movff	___fladd@a+1,___fladd@b+1
  7942                           
  7943                           ; BSR set to: 0
  7944  010104  C09A  F08C         	movff	___fladd@grs,___fladd@a+1
  7945                           
  7946                           ; BSR set to: 0
  7947  010108  C089  F09A         	movff	___fladd@b+2,___fladd@grs
  7948                           
  7949                           ; BSR set to: 0
  7950  01010C  C08D  F089         	movff	___fladd@a+2,___fladd@b+2
  7951                           
  7952                           ; BSR set to: 0
  7953  010110  C09A  F08D         	movff	___fladd@grs,___fladd@a+2
  7954                           
  7955                           ; BSR set to: 0
  7956  010114  C08A  F09A         	movff	___fladd@b+3,___fladd@grs
  7957                           
  7958                           ; BSR set to: 0
  7959  010118  C08E  F08A         	movff	___fladd@a+3,___fladd@b+3
  7960                           
  7961                           ; BSR set to: 0
  7962  01011C  C09A  F08E         	movff	___fladd@grs,___fladd@a+3
  7963  010120                     l12415:
  7964                           
  7965                           ; BSR set to: 0
  7966  010120  0E00               	movlw	0
  7967  010122  0100               	movlb	0	; () banked
  7968  010124  6F9A               	movwf	___fladd@grs& (0+255),b
  7969                           
  7970                           ; BSR set to: 0
  7971  010126  0100               	movlb	0	; () banked
  7972  010128  5199               	movf	___fladd@bexp& (0+255),w,b
  7973  01012A  0100               	movlb	0	; () banked
  7974  01012C  6F8F               	movwf	??___fladd& (0+255),b
  7975  01012E  6B90               	clrf	(??___fladd+1)& (0+255),b
  7976  010130  0100               	movlb	0	; () banked
  7977  010132  1F8F               	comf	??___fladd& (0+255),f,b
  7978  010134  1F90               	comf	(??___fladd+1)& (0+255),f,b
  7979  010136  4B8F               	infsnz	??___fladd& (0+255),f,b
  7980  010138  2B90               	incf	(??___fladd+1)& (0+255),f,b
  7981  01013A  0100               	movlb	0	; () banked
  7982  01013C  5198               	movf	___fladd@aexp& (0+255),w,b
  7983  01013E  0100               	movlb	0	; () banked
  7984  010140  6F91               	movwf	(??___fladd+2)& (0+255),b
  7985  010142  6B92               	clrf	(??___fladd+3)& (0+255),b
  7986  010144  0100               	movlb	0	; () banked
  7987  010146  518F               	movf	??___fladd& (0+255),w,b
  7988  010148  0100               	movlb	0	; () banked
  7989  01014A  2791               	addwf	(??___fladd+2)& (0+255),f,b
  7990  01014C  0100               	movlb	0	; () banked
  7991  01014E  5190               	movf	(??___fladd+1)& (0+255),w,b
  7992  010150  0100               	movlb	0	; () banked
  7993  010152  2392               	addwfc	(??___fladd+3)& (0+255),f,b
  7994  010154  0100               	movlb	0	; () banked
  7995  010156  BF92               	btfsc	(??___fladd+3)& (0+255),7,b
  7996  010158  D03D               	goto	l2564
  7997  01015A  0100               	movlb	0	; () banked
  7998  01015C  5192               	movf	(??___fladd+3)& (0+255),w,b
  7999  01015E  E105               	bnz	u9800
  8000  010160  0E1A               	movlw	26
  8001  010162  0100               	movlb	0	; () banked
  8002  010164  5D91               	subwf	(??___fladd+2)& (0+255),w,b
  8003  010166  A0D8               	btfss	status,0,c
  8004  010168  D035               	goto	l2564
  8005  01016A                     u9800:
  8006                           
  8007                           ; BSR set to: 0
  8008  01016A  0100               	movlb	0	; () banked
  8009  01016C  5187               	movf	___fladd@b& (0+255),w,b
  8010  01016E  0100               	movlb	0	; () banked
  8011  010170  1188               	iorwf	(___fladd@b+1)& (0+255),w,b
  8012  010172  0100               	movlb	0	; () banked
  8013  010174  1189               	iorwf	(___fladd@b+2)& (0+255),w,b
  8014  010176  0100               	movlb	0	; () banked
  8015  010178  118A               	iorwf	(___fladd@b+3)& (0+255),w,b
  8016  01017A  B4D8               	btfsc	status,2,c
  8017  01017C  D002               	goto	u9810
  8018  01017E  0E01               	movlw	1
  8019  010180  D001               	goto	u9820
  8020  010182                     u9810:
  8021  010182  0E00               	movlw	0
  8022  010184                     u9820:
  8023  010184  0100               	movlb	0	; () banked
  8024  010186  6F9A               	movwf	___fladd@grs& (0+255),b
  8025                           
  8026                           ; BSR set to: 0
  8027  010188  0E00               	movlw	0
  8028  01018A  0100               	movlb	0	; () banked
  8029  01018C  6F87               	movwf	___fladd@b& (0+255),b
  8030  01018E  0E00               	movlw	0
  8031  010190  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8032  010192  0E00               	movlw	0
  8033  010194  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8034  010196  0E00               	movlw	0
  8035  010198  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8036                           
  8037                           ; BSR set to: 0
  8038  01019A  C098  F099         	movff	___fladd@aexp,___fladd@bexp
  8039  01019E  D020               	goto	l2563
  8040  0101A0                     l2565:
  8041                           
  8042                           ; BSR set to: 0
  8043  0101A0  0100               	movlb	0	; () banked
  8044  0101A2  A19A               	btfss	___fladd@grs& (0+255),0,b
  8045  0101A4  D007               	goto	l12427
  8046                           
  8047                           ; BSR set to: 0
  8048  0101A6  0100               	movlb	0	; () banked
  8049  0101A8  90D8               	bcf	status,0,c
  8050  0101AA  319A               	rrcf	___fladd@grs& (0+255),w,b
  8051  0101AC  0901               	iorlw	1
  8052  0101AE  0100               	movlb	0	; () banked
  8053  0101B0  6F9A               	movwf	___fladd@grs& (0+255),b
  8054  0101B2  D003               	goto	l12429
  8055  0101B4                     l12427:
  8056                           
  8057                           ; BSR set to: 0
  8058  0101B4  0100               	movlb	0	; () banked
  8059  0101B6  90D8               	bcf	status,0,c
  8060  0101B8  339A               	rrcf	___fladd@grs& (0+255),f,b
  8061  0101BA                     l12429:
  8062                           
  8063                           ; BSR set to: 0
  8064  0101BA  0100               	movlb	0	; () banked
  8065  0101BC  A187               	btfss	___fladd@b& (0+255),0,b
  8066  0101BE  D002               	goto	l12433
  8067                           
  8068                           ; BSR set to: 0
  8069  0101C0  0100               	movlb	0	; () banked
  8070  0101C2  8F9A               	bsf	___fladd@grs& (0+255),7,b
  8071  0101C4                     l12433:
  8072                           
  8073                           ; BSR set to: 0
  8074  0101C4  0100               	movlb	0	; () banked
  8075  0101C6  358A               	rlcf	(___fladd@b+3)& (0+255),w,b
  8076  0101C8  338A               	rrcf	(___fladd@b+3)& (0+255),f,b
  8077  0101CA  3389               	rrcf	(___fladd@b+2)& (0+255),f,b
  8078  0101CC  3388               	rrcf	(___fladd@b+1)& (0+255),f,b
  8079  0101CE  3387               	rrcf	___fladd@b& (0+255),f,b
  8080                           
  8081                           ; BSR set to: 0
  8082  0101D0  0100               	movlb	0	; () banked
  8083  0101D2  2B99               	incf	___fladd@bexp& (0+255),f,b
  8084  0101D4                     l2564:
  8085                           
  8086                           ; BSR set to: 0
  8087  0101D4  0100               	movlb	0	; () banked
  8088  0101D6  5198               	movf	___fladd@aexp& (0+255),w,b
  8089  0101D8  0100               	movlb	0	; () banked
  8090  0101DA  5D99               	subwf	___fladd@bexp& (0+255),w,b
  8091  0101DC  A0D8               	btfss	status,0,c
  8092  0101DE  D7E0               	goto	l2565
  8093  0101E0                     l2563:
  8094                           
  8095                           ; BSR set to: 0
  8096  0101E0  0100               	movlb	0	; () banked
  8097  0101E2  BD97               	btfsc	___fladd@signs& (0+255),6,b
  8098  0101E4  D03F               	goto	l12461
  8099                           
  8100                           ; BSR set to: 0
  8101  0101E6  0100               	movlb	0	; () banked
  8102  0101E8  5199               	movf	___fladd@bexp& (0+255),w,b
  8103  0101EA  0100               	movlb	0	; () banked
  8104  0101EC  A4D8               	btfss	status,2,c
  8105  0101EE  D00A               	goto	l12443
  8106                           
  8107                           ; BSR set to: 0
  8108  0101F0  0E00               	movlw	0
  8109  0101F2  0100               	movlb	0	; () banked
  8110  0101F4  6F87               	movwf	?___fladd& (0+255),b
  8111  0101F6  0E00               	movlw	0
  8112  0101F8  6F88               	movwf	(?___fladd+1)& (0+255),b
  8113  0101FA  0E00               	movlw	0
  8114  0101FC  6F89               	movwf	(?___fladd+2)& (0+255),b
  8115  0101FE  0E00               	movlw	0
  8116  010200  6F8A               	movwf	(?___fladd+3)& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119  010202  0012               	return	
  8120  010204                     l12443:
  8121                           
  8122                           ; BSR set to: 0
  8123  010204  0100               	movlb	0	; () banked
  8124  010206  518B               	movf	___fladd@a& (0+255),w,b
  8125  010208  0100               	movlb	0	; () banked
  8126  01020A  2787               	addwf	___fladd@b& (0+255),f,b
  8127  01020C  0100               	movlb	0	; () banked
  8128  01020E  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8129  010210  0100               	movlb	0	; () banked
  8130  010212  2388               	addwfc	(___fladd@b+1)& (0+255),f,b
  8131  010214  0100               	movlb	0	; () banked
  8132  010216  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8133  010218  0100               	movlb	0	; () banked
  8134  01021A  2389               	addwfc	(___fladd@b+2)& (0+255),f,b
  8135  01021C  0100               	movlb	0	; () banked
  8136  01021E  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8137  010220  0100               	movlb	0	; () banked
  8138  010222  238A               	addwfc	(___fladd@b+3)& (0+255),f,b
  8139                           
  8140                           ; BSR set to: 0
  8141  010224  0100               	movlb	0	; () banked
  8142  010226  A18A               	btfss	(___fladd@b+3)& (0+255),0,b
  8143  010228  D0CC               	goto	l12497
  8144                           
  8145                           ; BSR set to: 0
  8146  01022A  0100               	movlb	0	; () banked
  8147  01022C  A19A               	btfss	___fladd@grs& (0+255),0,b
  8148  01022E  D009               	goto	l12451
  8149                           
  8150                           ; BSR set to: 0
  8151  010230  0100               	movlb	0	; () banked
  8152  010232  90D8               	bcf	status,0,c
  8153  010234  339A               	rrcf	___fladd@grs& (0+255),f,b
  8154  010236  0100               	movlb	0	; () banked
  8155  010238  519A               	movf	___fladd@grs& (0+255),w,b
  8156  01023A  0901               	iorlw	1
  8157  01023C  0100               	movlb	0	; () banked
  8158  01023E  6F9A               	movwf	___fladd@grs& (0+255),b
  8159  010240  D003               	goto	l12453
  8160  010242                     l12451:
  8161                           
  8162                           ; BSR set to: 0
  8163  010242  0100               	movlb	0	; () banked
  8164  010244  90D8               	bcf	status,0,c
  8165  010246  339A               	rrcf	___fladd@grs& (0+255),f,b
  8166  010248                     l12453:
  8167                           
  8168                           ; BSR set to: 0
  8169  010248  0100               	movlb	0	; () banked
  8170  01024A  A187               	btfss	___fladd@b& (0+255),0,b
  8171  01024C  D002               	goto	l12457
  8172                           
  8173                           ; BSR set to: 0
  8174  01024E  0100               	movlb	0	; () banked
  8175  010250  8F9A               	bsf	___fladd@grs& (0+255),7,b
  8176  010252                     l12457:
  8177                           
  8178                           ; BSR set to: 0
  8179  010252  0100               	movlb	0	; () banked
  8180  010254  358A               	rlcf	(___fladd@b+3)& (0+255),w,b
  8181  010256  338A               	rrcf	(___fladd@b+3)& (0+255),f,b
  8182  010258  3389               	rrcf	(___fladd@b+2)& (0+255),f,b
  8183  01025A  3388               	rrcf	(___fladd@b+1)& (0+255),f,b
  8184  01025C  3387               	rrcf	___fladd@b& (0+255),f,b
  8185                           
  8186                           ; BSR set to: 0
  8187  01025E  0100               	movlb	0	; () banked
  8188  010260  2B99               	incf	___fladd@bexp& (0+255),f,b
  8189                           
  8190                           ; BSR set to: 0
  8191  010262  D0AF               	goto	l12497
  8192  010264                     l12461:
  8193                           
  8194                           ; BSR set to: 0
  8195  010264  0100               	movlb	0	; () banked
  8196  010266  518B               	movf	___fladd@a& (0+255),w,b
  8197  010268  0100               	movlb	0	; () banked
  8198  01026A  5D87               	subwf	___fladd@b& (0+255),w,b
  8199  01026C  0100               	movlb	0	; () banked
  8200  01026E  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8201  010270  0100               	movlb	0	; () banked
  8202  010272  5988               	subwfb	(___fladd@b+1)& (0+255),w,b
  8203  010274  0100               	movlb	0	; () banked
  8204  010276  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8205  010278  0100               	movlb	0	; () banked
  8206  01027A  5989               	subwfb	(___fladd@b+2)& (0+255),w,b
  8207  01027C  0100               	movlb	0	; () banked
  8208  01027E  518A               	movf	(___fladd@b+3)& (0+255),w,b
  8209  010280  0A80               	xorlw	128
  8210  010282  0100               	movlb	0	; () banked
  8211  010284  6F8F               	movwf	??___fladd& (0+255),b
  8212  010286  0100               	movlb	0	; () banked
  8213  010288  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8214  01028A  0A80               	xorlw	128
  8215  01028C  0100               	movlb	0	; () banked
  8216  01028E  598F               	subwfb	??___fladd& (0+255),w,b
  8217  010290  B0D8               	btfsc	status,0,c
  8218  010292  D050               	goto	l12471
  8219                           
  8220                           ; BSR set to: 0
  8221  010294  C087  F08F         	movff	___fladd@b,??___fladd
  8222  010298  C088  F090         	movff	___fladd@b+1,??___fladd+1
  8223  01029C  C089  F091         	movff	___fladd@b+2,??___fladd+2
  8224  0102A0  C08A  F092         	movff	___fladd@b+3,??___fladd+3
  8225  0102A4  0100               	movlb	0	; () banked
  8226  0102A6  1F8F               	comf	??___fladd& (0+255),f,b
  8227  0102A8  1F90               	comf	(??___fladd+1)& (0+255),f,b
  8228  0102AA  1F91               	comf	(??___fladd+2)& (0+255),f,b
  8229  0102AC  1F92               	comf	(??___fladd+3)& (0+255),f,b
  8230  0102AE  2B8F               	incf	??___fladd& (0+255),f,b
  8231  0102B0  0E00               	movlw	0
  8232  0102B2  2390               	addwfc	(??___fladd+1)& (0+255),f,b
  8233  0102B4  2391               	addwfc	(??___fladd+2)& (0+255),f,b
  8234  0102B6  2392               	addwfc	(??___fladd+3)& (0+255),f,b
  8235  0102B8  0100               	movlb	0	; () banked
  8236  0102BA  518B               	movf	___fladd@a& (0+255),w,b
  8237  0102BC  0100               	movlb	0	; () banked
  8238  0102BE  258F               	addwf	??___fladd& (0+255),w,b
  8239  0102C0  0100               	movlb	0	; () banked
  8240  0102C2  6F93               	movwf	(??___fladd+4)& (0+255),b
  8241  0102C4  0100               	movlb	0	; () banked
  8242  0102C6  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8243  0102C8  0100               	movlb	0	; () banked
  8244  0102CA  2190               	addwfc	(??___fladd+1)& (0+255),w,b
  8245  0102CC  0100               	movlb	0	; () banked
  8246  0102CE  6F94               	movwf	(??___fladd+5)& (0+255),b
  8247  0102D0  0100               	movlb	0	; () banked
  8248  0102D2  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8249  0102D4  0100               	movlb	0	; () banked
  8250  0102D6  2191               	addwfc	(??___fladd+2)& (0+255),w,b
  8251  0102D8  0100               	movlb	0	; () banked
  8252  0102DA  6F95               	movwf	(??___fladd+6)& (0+255),b
  8253  0102DC  0100               	movlb	0	; () banked
  8254  0102DE  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8255  0102E0  0100               	movlb	0	; () banked
  8256  0102E2  2192               	addwfc	(??___fladd+3)& (0+255),w,b
  8257  0102E4  0100               	movlb	0	; () banked
  8258  0102E6  6F96               	movwf	(??___fladd+7)& (0+255),b
  8259  0102E8  0EFF               	movlw	255
  8260  0102EA  0100               	movlb	0	; () banked
  8261  0102EC  2593               	addwf	(??___fladd+4)& (0+255),w,b
  8262  0102EE  0100               	movlb	0	; () banked
  8263  0102F0  6F87               	movwf	___fladd@b& (0+255),b
  8264  0102F2  0EFF               	movlw	255
  8265  0102F4  0100               	movlb	0	; () banked
  8266  0102F6  2194               	addwfc	(??___fladd+5)& (0+255),w,b
  8267  0102F8  0100               	movlb	0	; () banked
  8268  0102FA  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8269  0102FC  0EFF               	movlw	255
  8270  0102FE  0100               	movlb	0	; () banked
  8271  010300  2195               	addwfc	(??___fladd+6)& (0+255),w,b
  8272  010302  0100               	movlb	0	; () banked
  8273  010304  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8274  010306  0EFF               	movlw	255
  8275  010308  0100               	movlb	0	; () banked
  8276  01030A  2196               	addwfc	(??___fladd+7)& (0+255),w,b
  8277  01030C  0100               	movlb	0	; () banked
  8278  01030E  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8279  010310  0E80               	movlw	128
  8280  010312  0100               	movlb	0	; () banked
  8281  010314  1B97               	xorwf	___fladd@signs& (0+255),f,b
  8282                           
  8283                           ; BSR set to: 0
  8284  010316  0100               	movlb	0	; () banked
  8285  010318  6D9A               	negf	___fladd@grs& (0+255),b
  8286                           
  8287                           ; BSR set to: 0
  8288  01031A  0100               	movlb	0	; () banked
  8289  01031C  519A               	movf	___fladd@grs& (0+255),w,b
  8290  01031E  0100               	movlb	0	; () banked
  8291  010320  A4D8               	btfss	status,2,c
  8292  010322  D018               	goto	l2580
  8293                           
  8294                           ; BSR set to: 0
  8295  010324  0E01               	movlw	1
  8296  010326  0100               	movlb	0	; () banked
  8297  010328  2787               	addwf	___fladd@b& (0+255),f,b
  8298  01032A  0E00               	movlw	0
  8299  01032C  2388               	addwfc	(___fladd@b+1)& (0+255),f,b
  8300  01032E  2389               	addwfc	(___fladd@b+2)& (0+255),f,b
  8301  010330  238A               	addwfc	(___fladd@b+3)& (0+255),f,b
  8302                           
  8303                           ; BSR set to: 0
  8304  010332  D010               	goto	l2580
  8305  010334                     l12471:
  8306                           
  8307                           ; BSR set to: 0
  8308  010334  0100               	movlb	0	; () banked
  8309  010336  518B               	movf	___fladd@a& (0+255),w,b
  8310  010338  0100               	movlb	0	; () banked
  8311  01033A  5F87               	subwf	___fladd@b& (0+255),f,b
  8312  01033C  0100               	movlb	0	; () banked
  8313  01033E  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8314  010340  0100               	movlb	0	; () banked
  8315  010342  5B88               	subwfb	(___fladd@b+1)& (0+255),f,b
  8316  010344  0100               	movlb	0	; () banked
  8317  010346  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8318  010348  0100               	movlb	0	; () banked
  8319  01034A  5B89               	subwfb	(___fladd@b+2)& (0+255),f,b
  8320  01034C  0100               	movlb	0	; () banked
  8321  01034E  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8322  010350  0100               	movlb	0	; () banked
  8323  010352  5B8A               	subwfb	(___fladd@b+3)& (0+255),f,b
  8324  010354                     l2580:
  8325                           
  8326                           ; BSR set to: 0
  8327  010354  0100               	movlb	0	; () banked
  8328  010356  5187               	movf	___fladd@b& (0+255),w,b
  8329  010358  0100               	movlb	0	; () banked
  8330  01035A  1188               	iorwf	(___fladd@b+1)& (0+255),w,b
  8331  01035C  0100               	movlb	0	; () banked
  8332  01035E  1189               	iorwf	(___fladd@b+2)& (0+255),w,b
  8333  010360  0100               	movlb	0	; () banked
  8334  010362  118A               	iorwf	(___fladd@b+3)& (0+255),w,b
  8335  010364  A4D8               	btfss	status,2,c
  8336  010366  D02A               	goto	l12495
  8337                           
  8338                           ; BSR set to: 0
  8339  010368  0100               	movlb	0	; () banked
  8340  01036A  519A               	movf	___fladd@grs& (0+255),w,b
  8341  01036C  0100               	movlb	0	; () banked
  8342  01036E  A4D8               	btfss	status,2,c
  8343  010370  D025               	goto	l12495
  8344                           
  8345                           ; BSR set to: 0
  8346  010372  0E00               	movlw	0
  8347  010374  0100               	movlb	0	; () banked
  8348  010376  6F87               	movwf	?___fladd& (0+255),b
  8349  010378  0E00               	movlw	0
  8350  01037A  6F88               	movwf	(?___fladd+1)& (0+255),b
  8351  01037C  0E00               	movlw	0
  8352  01037E  6F89               	movwf	(?___fladd+2)& (0+255),b
  8353  010380  0E00               	movlw	0
  8354  010382  6F8A               	movwf	(?___fladd+3)& (0+255),b
  8355                           
  8356                           ; BSR set to: 0
  8357  010384  0012               	return	
  8358  010386                     l12479:
  8359                           
  8360                           ; BSR set to: 0
  8361  010386  0100               	movlb	0	; () banked
  8362  010388  90D8               	bcf	status,0,c
  8363  01038A  3787               	rlcf	___fladd@b& (0+255),f,b
  8364  01038C  3788               	rlcf	(___fladd@b+1)& (0+255),f,b
  8365  01038E  3789               	rlcf	(___fladd@b+2)& (0+255),f,b
  8366  010390  378A               	rlcf	(___fladd@b+3)& (0+255),f,b
  8367                           
  8368                           ; BSR set to: 0
  8369  010392  0100               	movlb	0	; () banked
  8370  010394  AF9A               	btfss	___fladd@grs& (0+255),7,b
  8371  010396  D002               	goto	l12485
  8372                           
  8373                           ; BSR set to: 0
  8374  010398  0100               	movlb	0	; () banked
  8375  01039A  8187               	bsf	___fladd@b& (0+255),0,b
  8376  01039C                     l12485:
  8377                           
  8378                           ; BSR set to: 0
  8379  01039C  0100               	movlb	0	; () banked
  8380  01039E  A19A               	btfss	___fladd@grs& (0+255),0,b
  8381  0103A0  D003               	goto	l12489
  8382                           
  8383                           ; BSR set to: 0
  8384  0103A2  80D8               	bsf	status,0,c
  8385  0103A4  0100               	movlb	0	; () banked
  8386  0103A6  D002               	goto	L5
  8387  0103A8                     l12489:
  8388                           
  8389                           ; BSR set to: 0
  8390  0103A8  0100               	movlb	0	; () banked
  8391  0103AA  90D8               	bcf	status,0,c
  8392  0103AC                     L5:
  8393  0103AC  379A               	rlcf	___fladd@grs& (0+255),f,b
  8394                           
  8395                           ; BSR set to: 0
  8396                           
  8397                           ; BSR set to: 0
  8398  0103AE  0100               	movlb	0	; () banked
  8399  0103B0  5199               	movf	___fladd@bexp& (0+255),w,b
  8400  0103B2  0100               	movlb	0	; () banked
  8401  0103B4  B4D8               	btfsc	status,2,c
  8402  0103B6  D002               	goto	l12495
  8403                           
  8404                           ; BSR set to: 0
  8405  0103B8  0100               	movlb	0	; () banked
  8406  0103BA  0799               	decf	___fladd@bexp& (0+255),f,b
  8407  0103BC                     l12495:
  8408                           
  8409                           ; BSR set to: 0
  8410  0103BC  0100               	movlb	0	; () banked
  8411  0103BE  AF89               	btfss	(___fladd@b+2)& (0+255),7,b
  8412  0103C0  D7E2               	goto	l12479
  8413  0103C2                     l12497:
  8414                           
  8415                           ; BSR set to: 0
  8416  0103C2  0E00               	movlw	0
  8417  0103C4  0100               	movlb	0	; () banked
  8418  0103C6  6F98               	movwf	___fladd@aexp& (0+255),b
  8419                           
  8420                           ; BSR set to: 0
  8421  0103C8  0100               	movlb	0	; () banked
  8422  0103CA  AF9A               	btfss	___fladd@grs& (0+255),7,b
  8423  0103CC  D00D               	goto	l2589
  8424                           
  8425                           ; BSR set to: 0
  8426  0103CE  C09A  F08F         	movff	___fladd@grs,??___fladd
  8427  0103D2  0E7F               	movlw	127
  8428  0103D4  0100               	movlb	0	; () banked
  8429  0103D6  178F               	andwf	??___fladd& (0+255),f,b
  8430  0103D8  A4D8               	btfss	status,2,c
  8431  0103DA  D003               	goto	l12505
  8432                           
  8433                           ; BSR set to: 0
  8434                           
  8435                           ; BSR set to: 0
  8436  0103DC  0100               	movlb	0	; () banked
  8437  0103DE  A187               	btfss	___fladd@b& (0+255),0,b
  8438  0103E0  D003               	goto	l2589
  8439  0103E2                     l12505:
  8440                           
  8441                           ; BSR set to: 0
  8442  0103E2  0E01               	movlw	1
  8443  0103E4  0100               	movlb	0	; () banked
  8444  0103E6  6F98               	movwf	___fladd@aexp& (0+255),b
  8445  0103E8                     l2589:
  8446                           
  8447                           ; BSR set to: 0
  8448  0103E8  0100               	movlb	0	; () banked
  8449  0103EA  5198               	movf	___fladd@aexp& (0+255),w,b
  8450  0103EC  0100               	movlb	0	; () banked
  8451  0103EE  B4D8               	btfsc	status,2,c
  8452  0103F0  D026               	goto	l12515
  8453                           
  8454                           ; BSR set to: 0
  8455  0103F2  0E01               	movlw	1
  8456  0103F4  0100               	movlb	0	; () banked
  8457  0103F6  2787               	addwf	___fladd@b& (0+255),f,b
  8458  0103F8  0E00               	movlw	0
  8459  0103FA  2388               	addwfc	(___fladd@b+1)& (0+255),f,b
  8460  0103FC  2389               	addwfc	(___fladd@b+2)& (0+255),f,b
  8461  0103FE  238A               	addwfc	(___fladd@b+3)& (0+255),f,b
  8462                           
  8463                           ; BSR set to: 0
  8464  010400  0100               	movlb	0	; () banked
  8465  010402  A18A               	btfss	(___fladd@b+3)& (0+255),0,b
  8466  010404  D01C               	goto	l12515
  8467                           
  8468                           ; BSR set to: 0
  8469  010406  C087  F08F         	movff	___fladd@b,??___fladd
  8470  01040A  C088  F090         	movff	___fladd@b+1,??___fladd+1
  8471  01040E  C089  F091         	movff	___fladd@b+2,??___fladd+2
  8472  010412  C08A  F092         	movff	___fladd@b+3,??___fladd+3
  8473  010416  0100               	movlb	0	; () banked
  8474  010418  3592               	rlcf	(??___fladd+3)& (0+255),w,b
  8475  01041A  3392               	rrcf	(??___fladd+3)& (0+255),f,b
  8476  01041C  3391               	rrcf	(??___fladd+2)& (0+255),f,b
  8477  01041E  3390               	rrcf	(??___fladd+1)& (0+255),f,b
  8478  010420  338F               	rrcf	??___fladd& (0+255),f,b
  8479  010422  C08F  F087         	movff	??___fladd,___fladd@b
  8480  010426  C090  F088         	movff	??___fladd+1,___fladd@b+1
  8481  01042A  C091  F089         	movff	??___fladd+2,___fladd@b+2
  8482  01042E  C092  F08A         	movff	??___fladd+3,___fladd@b+3
  8483  010432  0100               	movlb	0	; () banked
  8484  010434  2999               	incf	___fladd@bexp& (0+255),w,b
  8485  010436  B4D8               	btfsc	status,2,c
  8486  010438  D002               	goto	l12515
  8487                           
  8488                           ; BSR set to: 0
  8489  01043A  0100               	movlb	0	; () banked
  8490  01043C  2B99               	incf	___fladd@bexp& (0+255),f,b
  8491  01043E                     l12515:
  8492                           
  8493                           ; BSR set to: 0
  8494  01043E  0100               	movlb	0	; () banked
  8495  010440  2999               	incf	___fladd@bexp& (0+255),w,b
  8496  010442  B4D8               	btfsc	status,2,c
  8497  010444  D005               	goto	l12519
  8498                           
  8499                           ; BSR set to: 0
  8500  010446  0100               	movlb	0	; () banked
  8501  010448  5199               	movf	___fladd@bexp& (0+255),w,b
  8502  01044A  0100               	movlb	0	; () banked
  8503  01044C  A4D8               	btfss	status,2,c
  8504  01044E  D011               	goto	l12523
  8505  010450                     l12519:
  8506                           
  8507                           ; BSR set to: 0
  8508  010450  0E00               	movlw	0
  8509  010452  0100               	movlb	0	; () banked
  8510  010454  6F87               	movwf	___fladd@b& (0+255),b
  8511  010456  0E00               	movlw	0
  8512  010458  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8513  01045A  0E00               	movlw	0
  8514  01045C  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8515  01045E  0E00               	movlw	0
  8516  010460  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8517  010462  0100               	movlb	0	; () banked
  8518  010464  5199               	movf	___fladd@bexp& (0+255),w,b
  8519  010466  0100               	movlb	0	; () banked
  8520  010468  A4D8               	btfss	status,2,c
  8521  01046A  D003               	goto	l12523
  8522                           
  8523                           ; BSR set to: 0
  8524  01046C  0E00               	movlw	0
  8525  01046E  0100               	movlb	0	; () banked
  8526  010470  6F97               	movwf	___fladd@signs& (0+255),b
  8527  010472                     l12523:
  8528                           
  8529                           ; BSR set to: 0
  8530  010472  0100               	movlb	0	; () banked
  8531  010474  A199               	btfss	___fladd@bexp& (0+255),0,b
  8532  010476  D003               	goto	l12527
  8533                           
  8534                           ; BSR set to: 0
  8535  010478  0100               	movlb	0	; () banked
  8536  01047A  8F89               	bsf	(___fladd@b+2)& (0+255),7,b
  8537  01047C  D002               	goto	l12529
  8538  01047E                     l12527:
  8539                           
  8540                           ; BSR set to: 0
  8541  01047E  0100               	movlb	0	; () banked
  8542  010480  9F89               	bcf	(___fladd@b+2)& (0+255),7,b
  8543  010482                     l12529:
  8544                           
  8545                           ; BSR set to: 0
  8546  010482  0100               	movlb	0	; () banked
  8547  010484  90D8               	bcf	status,0,c
  8548  010486  3199               	rrcf	___fladd@bexp& (0+255),w,b
  8549  010488  0100               	movlb	0	; () banked
  8550  01048A  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553  01048C  0100               	movlb	0	; () banked
  8554  01048E  AF97               	btfss	___fladd@signs& (0+255),7,b
  8555  010490  D002               	goto	l12535
  8556                           
  8557                           ; BSR set to: 0
  8558  010492  0100               	movlb	0	; () banked
  8559  010494  8F8A               	bsf	(___fladd@b+3)& (0+255),7,b
  8560  010496                     l12535:
  8561                           
  8562                           ; BSR set to: 0
  8563  010496  C087  F087         	movff	___fladd@b,?___fladd
  8564  01049A  C088  F088         	movff	___fladd@b+1,?___fladd+1
  8565  01049E  C089  F089         	movff	___fladd@b+2,?___fladd+2
  8566  0104A2  C08A  F08A         	movff	___fladd@b+3,?___fladd+3
  8567  0104A6  0012               	return	
  8568  0104A8                     __end_of___fladd:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           postinc0	equ	0xFEE
  8577                           wreg	equ	0xFE8
  8578                           postdec1	equ	0xFE5
  8579                           fsr1h	equ	0xFE2
  8580                           fsr1l	equ	0xFE1
  8581                           indf2	equ	0xFDF
  8582                           postinc2	equ	0xFDE
  8583                           postdec2	equ	0xFDD
  8584                           fsr2h	equ	0xFDA
  8585                           fsr2l	equ	0xFD9
  8586                           status	equ	0xFD8
  8587                           
  8588 ;; *************** function ___flneg *****************
  8589 ;; Defined at:
  8590 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\flneg.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  f1              4    0[BANK0 ] unsigned char 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  4    0[BANK0 ] unsigned char 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;Total ram usage:        4 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    7
  8611 ;; This function calls:
  8612 ;;		Nothing
  8613 ;; This function is called by:
  8614 ;;		_pow
  8615 ;;		_exp
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           	psect	text24
  8620  016426                     __ptext24:
  8621                           	opt stack 0
  8622  016426                     ___flneg:
  8623                           	opt stack 20
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;incstack = 0
  8627  016426  0100               	movlb	0	; () banked
  8628  016428  5160               	movf	___flneg@f1& (0+255),w,b
  8629  01642A  0100               	movlb	0	; () banked
  8630  01642C  1161               	iorwf	(___flneg@f1+1)& (0+255),w,b
  8631  01642E  0100               	movlb	0	; () banked
  8632  016430  1162               	iorwf	(___flneg@f1+2)& (0+255),w,b
  8633  016432  0100               	movlb	0	; () banked
  8634  016434  1163               	iorwf	(___flneg@f1+3)& (0+255),w,b
  8635  016436  B4D8               	btfsc	status,2,c
  8636  016438  D009               	goto	l13445
  8637                           
  8638                           ; BSR set to: 0
  8639  01643A  0E00               	movlw	0
  8640  01643C  0100               	movlb	0	; () banked
  8641  01643E  1B60               	xorwf	___flneg@f1& (0+255),f,b
  8642  016440  0E00               	movlw	0
  8643  016442  1B61               	xorwf	(___flneg@f1+1)& (0+255),f,b
  8644  016444  0E00               	movlw	0
  8645  016446  1B62               	xorwf	(___flneg@f1+2)& (0+255),f,b
  8646  016448  0E80               	movlw	128
  8647  01644A  1B63               	xorwf	(___flneg@f1+3)& (0+255),f,b
  8648  01644C                     l13445:
  8649                           
  8650                           ; BSR set to: 0
  8651  01644C  C060  F060         	movff	___flneg@f1,?___flneg
  8652  016450  C061  F061         	movff	___flneg@f1+1,?___flneg+1
  8653  016454  C062  F062         	movff	___flneg@f1+2,?___flneg+2
  8654  016458  C063  F063         	movff	___flneg@f1+3,?___flneg+3
  8655  01645C  0012               	return	
  8656  01645E                     __end_of___flneg:
  8657                           	opt stack 0
  8658                           tblptru	equ	0xFF8
  8659                           tblptrh	equ	0xFF7
  8660                           tblptrl	equ	0xFF6
  8661                           tablat	equ	0xFF5
  8662                           prodh	equ	0xFF4
  8663                           prodl	equ	0xFF3
  8664                           postinc0	equ	0xFEE
  8665                           wreg	equ	0xFE8
  8666                           postdec1	equ	0xFE5
  8667                           fsr1h	equ	0xFE2
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           postdec2	equ	0xFDD
  8672                           fsr2h	equ	0xFDA
  8673                           fsr2l	equ	0xFD9
  8674                           status	equ	0xFD8
  8675                           
  8676 ;; *************** function _HMI_Render *****************
  8677 ;; Defined at:
  8678 ;;		line 138 in file "HMI.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  a               2    8[BANK0 ] unsigned short 
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      void 
  8685 ;; Registers used:
  8686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;Total ram usage:        2 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    9
  8699 ;; This function calls:
  8700 ;;		_OutSeg
  8701 ;; This function is called by:
  8702 ;;		_printToScreen
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           	psect	text25
  8707  0162BA                     __ptext25:
  8708                           	opt stack 0
  8709  0162BA                     _HMI_Render:
  8710                           	opt stack 20
  8711                           
  8712                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;incstack = 0
  8716  0162BA  0E00               	movlw	0
  8717  0162BC  0100               	movlb	0	; () banked
  8718  0162BE  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  8719  0162C0  0E00               	movlw	0
  8720  0162C2  6F68               	movwf	HMI_Render@a& (0+255),b
  8721  0162C4                     l14103:
  8722                           
  8723                           ; BSR set to: 0
  8724  0162C4  0100               	movlb	0	; () banked
  8725  0162C6  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  8726  0162C8  E116               	bnz	l1158
  8727  0162CA  0E08               	movlw	8
  8728  0162CC  0100               	movlb	0	; () banked
  8729  0162CE  5D68               	subwf	HMI_Render@a& (0+255),w,b
  8730  0162D0  B0D8               	btfsc	status,0,c
  8731  0162D2  0012               	return	
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  8735                           
  8736                           ; BSR set to: 0
  8737                           
  8738                           ; BSR set to: 0
  8739  0162D4  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  8740  0162D8  0E16               	movlw	low _HMIBoard
  8741  0162DA  0100               	movlb	0	; () banked
  8742  0162DC  2568               	addwf	HMI_Render@a& (0+255),w,b
  8743  0162DE  6ED9               	movwf	fsr2l,c
  8744  0162E0  0E01               	movlw	high _HMIBoard
  8745  0162E2  0100               	movlb	0	; () banked
  8746  0162E4  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  8747  0162E6  6EDA               	movwf	fsr2h,c
  8748  0162E8  50DF               	movf	indf2,w,c
  8749  0162EA  ECBB  F0AA         	call	_OutSeg
  8750  0162EE  0100               	movlb	0	; () banked
  8751  0162F0  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  8752  0162F2  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  8753  0162F4  D7E7               	goto	l14103
  8754  0162F6                     l1158:
  8755                           
  8756                           ; BSR set to: 0
  8757  0162F6  0012               	return		;funcret
  8758  0162F8                     __end_of_HMI_Render:
  8759                           	opt stack 0
  8760                           tblptru	equ	0xFF8
  8761                           tblptrh	equ	0xFF7
  8762                           tblptrl	equ	0xFF6
  8763                           tablat	equ	0xFF5
  8764                           prodh	equ	0xFF4
  8765                           prodl	equ	0xFF3
  8766                           postinc0	equ	0xFEE
  8767                           wreg	equ	0xFE8
  8768                           postdec1	equ	0xFE5
  8769                           fsr1h	equ	0xFE2
  8770                           fsr1l	equ	0xFE1
  8771                           indf2	equ	0xFDF
  8772                           postinc2	equ	0xFDE
  8773                           postdec2	equ	0xFDD
  8774                           fsr2h	equ	0xFDA
  8775                           fsr2l	equ	0xFD9
  8776                           status	equ	0xFD8
  8777                           
  8778 ;; *************** function _OutSeg *****************
  8779 ;; Defined at:
  8780 ;;		line 54 in file "HMI.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;  pInput          1    wreg     unsigned char 
  8783 ;;  pSegment        1    3[BANK0 ] unsigned char 
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;  pInput          1    6[BANK0 ] unsigned char 
  8786 ;;  out             1    7[BANK0 ] volatile unsigned char 
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  1    wreg      void 
  8789 ;; Registers used:
  8790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8796 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;Total ram usage:        5 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    8
  8803 ;; This function calls:
  8804 ;;		_SPI_Send
  8805 ;; This function is called by:
  8806 ;;		_HMI_Render
  8807 ;;		_HMI_GRender
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text26
  8812  015576                     __ptext26:
  8813                           	opt stack 0
  8814  015576                     _OutSeg:
  8815                           	opt stack 20
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;incstack = 0
  8819                           ;OutSeg@pInput stored from wreg
  8820  015576  0100               	movlb	0	; () banked
  8821  015578  6F66               	movwf	OutSeg@pInput& (0+255),b
  8822                           
  8823                           ;HMI.c: 58: static UINT8 cur;
  8824                           ;HMI.c: 59: volatile UINT8 out;
  8825                           ;HMI.c: 60: static UINT8 segset;
  8826                           ;HMI.c: 61: static UINT8 a;
  8827                           ;HMI.c: 83: if (pSegment <= 8)
  8828  01557A  0E09               	movlw	9
  8829  01557C  0100               	movlb	0	; () banked
  8830  01557E  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  8831  015580  0012               	return	
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;HMI.c: 84: {
  8835                           ;HMI.c: 85: cur = pInput;
  8836  015582  C066  F035         	movff	OutSeg@pInput,OutSeg@cur
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  8840  015586  0E00               	movlw	0
  8841  015588  6E33               	movwf	OutSeg@a,c
  8842  01558A                     l13769:
  8843                           
  8844                           ; BSR set to: 0
  8845  01558A  0E07               	movlw	7
  8846  01558C  6433               	cpfsgt	OutSeg@a,c
  8847  01558E  D001               	goto	l13773
  8848  015590  D027               	goto	l13781
  8849  015592                     l13773:
  8850                           
  8851                           ;HMI.c: 87: {
  8852                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  8853  015592  C035  F064         	movff	OutSeg@cur,??_OutSeg
  8854  015596  0E01               	movlw	1
  8855  015598  0100               	movlb	0	; () banked
  8856  01559A  1764               	andwf	??_OutSeg& (0+255),f,b
  8857  01559C  0E06               	movlw	6
  8858  01559E  0100               	movlb	0	; () banked
  8859  0155A0  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  8860  0155A2                     u11445:
  8861  0155A2  0100               	movlb	0	; () banked
  8862  0155A4  90D8               	bcf	status,0,c
  8863  0155A6  3764               	rlcf	??_OutSeg& (0+255),f,b
  8864  0155A8  0100               	movlb	0	; () banked
  8865  0155AA  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  8866  0155AC  D7FA               	goto	u11445
  8867  0155AE  0100               	movlb	0	; () banked
  8868  0155B0  5164               	movf	??_OutSeg& (0+255),w,b
  8869  0155B2  6E34               	movwf	OutSeg@segset,c
  8870                           
  8871                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  8872  0155B4  0100               	movlb	0	; () banked
  8873  0155B6  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  8874  0155B8  42E8               	rrncf	wreg,f,c
  8875  0155BA  0BF8               	andlw	248
  8876  0155BC  1033               	iorwf	OutSeg@a,w,c
  8877  0155BE  1034               	iorwf	OutSeg@segset,w,c
  8878  0155C0  0100               	movlb	0	; () banked
  8879  0155C2  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  8880                           
  8881                           ;HMI.c: 90: cur >>= 1;
  8882  0155C4  90D8               	bcf	status,0,c
  8883  0155C6  3235               	rrcf	OutSeg@cur,f,c
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  8887  0155C8  0E50               	movlw	low _SPI1
  8888  0155CA  0100               	movlb	0	; () banked
  8889  0155CC  6F60               	movwf	SPI_Send@pInput& (0+255),b
  8890  0155CE  0E01               	movlw	high _SPI1
  8891  0155D0  0100               	movlb	0	; () banked
  8892  0155D2  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  8893  0155D4  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  8894  0155D8  EC45  F0AD         	call	_SPI_Send	;wreg free
  8895  0155DC  2A33               	incf	OutSeg@a,f,c
  8896  0155DE  D7D5               	goto	l13769
  8897  0155E0                     l13781:
  8898                           
  8899                           ;HMI.c: 96: }
  8900                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  8901  0155E0  0E50               	movlw	low _SPI1
  8902  0155E2  0100               	movlb	0	; () banked
  8903  0155E4  6F60               	movwf	SPI_Send@pInput& (0+255),b
  8904  0155E6  0E01               	movlw	high _SPI1
  8905  0155E8  0100               	movlb	0	; () banked
  8906  0155EA  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  8907  0155EC  0E00               	movlw	0
  8908  0155EE  0100               	movlb	0	; () banked
  8909  0155F0  6F62               	movwf	SPI_Send@pData& (0+255),b
  8910  0155F2  EC45  F0AD         	call	_SPI_Send	;wreg free
  8911  0155F6  0012               	return	
  8912  0155F8                     __end_of_OutSeg:
  8913                           	opt stack 0
  8914                           tblptru	equ	0xFF8
  8915                           tblptrh	equ	0xFF7
  8916                           tblptrl	equ	0xFF6
  8917                           tablat	equ	0xFF5
  8918                           prodh	equ	0xFF4
  8919                           prodl	equ	0xFF3
  8920                           postinc0	equ	0xFEE
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           fsr1h	equ	0xFE2
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           postdec2	equ	0xFDD
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function _Console_SetForecolour *****************
  8933 ;; Defined at:
  8934 ;;		line 286 in file "Library/Console.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  pColour         2    0[BANK0 ] unsigned short 
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;		None
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      void 
  8941 ;; Registers used:
  8942 ;;		None
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;Total ram usage:        2 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    7
  8955 ;; This function calls:
  8956 ;;		Nothing
  8957 ;; This function is called by:
  8958 ;;		_printToScreen
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text27
  8963  0169BE                     __ptext27:
  8964                           	opt stack 0
  8965  0169BE                     _Console_SetForecolour:
  8966                           	opt stack 22
  8967                           
  8968                           ;Console.c: 289: gForecolour = pColour;
  8969                           
  8970                           ;incstack = 0
  8971  0169BE  C060  F0FA         	movff	Console_SetForecolour@pColour,_gForecolour
  8972  0169C2  C061  F0FB         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
  8973  0169C6  0012               	return		;funcret
  8974  0169C8                     __end_of_Console_SetForecolour:
  8975                           	opt stack 0
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           postinc0	equ	0xFEE
  8983                           wreg	equ	0xFE8
  8984                           postdec1	equ	0xFE5
  8985                           fsr1h	equ	0xFE2
  8986                           fsr1l	equ	0xFE1
  8987                           indf2	equ	0xFDF
  8988                           postinc2	equ	0xFDE
  8989                           postdec2	equ	0xFDD
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _Console_Render *****************
  8995 ;; Defined at:
  8996 ;;		line 377 in file "Library/Console.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;		None
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;  lCursor         4   38[BANK0 ] struct Point
  9001 ;;  y               1   43[BANK0 ] unsigned char 
  9002 ;;  x               1   42[BANK0 ] unsigned char 
  9003 ;;  temp            1   37[BANK0 ] unsigned char 
  9004 ;;  Temp            2    0        unsigned short 
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9015 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;Total ram usage:        9 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:   11
  9021 ;; This function calls:
  9022 ;;		_Console_MakeField
  9023 ;;		_LCD_DrawField
  9024 ;;		_LCD_FillRectangle
  9025 ;; This function is called by:
  9026 ;;		_printToScreen
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text28
  9031  0120FC                     __ptext28:
  9032                           	opt stack 0
  9033  0120FC                     _Console_Render:
  9034                           	opt stack 18
  9035                           
  9036                           ;Console.c: 379: Colour Temp;
  9037                           ;Console.c: 380: if (change)
  9038                           
  9039                           ;incstack = 0
  9040  0120FC  0100               	movlb	0	; () banked
  9041  0120FE  51FD               	movf	_change& (0+255),w,b
  9042  012100  B4D8               	btfsc	status,2,c
  9043  012102  0012               	return	
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;Console.c: 381: {
  9047                           ;Console.c: 382: UINT8 x, y, temp;
  9048                           ;Console.c: 383: Point lCursor = {6,6};
  9049  012104  C1EC  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  9050  012108  C1ED  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9051  01210C  C1EE  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9052  012110  C1EF  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;Console.c: 385: if (clearall)
  9056  012114  0100               	movlb	0	; () banked
  9057  012116  51EB               	movf	_clearall& (0+255),w,b
  9058  012118  B4D8               	btfsc	status,2,c
  9059  01211A  D004               	goto	l1056
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;Console.c: 386: {
  9063                           ;Console.c: 389: temp = lBufferY;
  9064  01211C  C036  F085         	movff	_lBufferY,Console_Render@temp
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9068  012120  0E0F               	movlw	15
  9069  012122  6E36               	movwf	_lBufferY,c
  9070  012124                     l1056:
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;Console.c: 391: }
  9074                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9075  012124  0E00               	movlw	0
  9076  012126  0100               	movlb	0	; () banked
  9077  012128  6F8B               	movwf	Console_Render@y& (0+255),b
  9078  01212A  D0DF               	goto	l14075
  9079  01212C                     l14045:
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;Console.c: 394: {
  9083                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9084  01212C  0100               	movlb	0	; () banked
  9085  01212E  518B               	movf	Console_Render@y& (0+255),w,b
  9086  012130  0D02               	mullw	2
  9087  012132  0E00               	movlw	low _lCBuffer
  9088  012134  24F3               	addwf	prodl,w,c
  9089  012136  6ED9               	movwf	fsr2l,c
  9090  012138  0E02               	movlw	high _lCBuffer
  9091  01213A  20F4               	addwfc	prodh,w,c
  9092  01213C  6EDA               	movwf	fsr2h,c
  9093  01213E  CFDE F0FA          	movff	postinc2,_gForecolour
  9094  012142  CFDD F0FB          	movff	postdec2,_gForecolour+1
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9098  012146  0E00               	movlw	0
  9099  012148  0100               	movlb	0	; () banked
  9100  01214A  6F8A               	movwf	Console_Render@x& (0+255),b
  9101  01214C                     l14049:
  9102                           
  9103                           ; BSR set to: 0
  9104  01214C  0E13               	movlw	19
  9105  01214E  0100               	movlb	0	; () banked
  9106  012150  658A               	cpfsgt	Console_Render@x& (0+255),b
  9107  012152  D001               	goto	l14053
  9108  012154  D0BE               	goto	l14069
  9109  012156                     l14053:
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;Console.c: 397: {
  9113                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9114  012156  0100               	movlb	0	; () banked
  9115  012158  518B               	movf	Console_Render@y& (0+255),w,b
  9116  01215A  0D14               	mullw	20
  9117  01215C  0E6E               	movlw	low _lBuffer
  9118  01215E  0100               	movlb	0	; () banked
  9119  012160  6F83               	movwf	??_Console_Render& (0+255),b
  9120  012162  0E02               	movlw	high _lBuffer
  9121  012164  0100               	movlb	0	; () banked
  9122  012166  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9123  012168  50F3               	movf	prodl,w,c
  9124  01216A  0100               	movlb	0	; () banked
  9125  01216C  2783               	addwf	??_Console_Render& (0+255),f,b
  9126  01216E  50F4               	movf	prodh,w,c
  9127  012170  0100               	movlb	0	; () banked
  9128  012172  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9129  012174  0100               	movlb	0	; () banked
  9130  012176  518A               	movf	Console_Render@x& (0+255),w,b
  9131  012178  0D01               	mullw	1
  9132  01217A  50F3               	movf	prodl,w,c
  9133  01217C  0100               	movlb	0	; () banked
  9134  01217E  2583               	addwf	??_Console_Render& (0+255),w,b
  9135  012180  6ED9               	movwf	fsr2l,c
  9136  012182  50F4               	movf	prodh,w,c
  9137  012184  0100               	movlb	0	; () banked
  9138  012186  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9139  012188  6EDA               	movwf	fsr2h,c
  9140  01218A  AEDF               	btfss	indf2,7,c
  9141  01218C  D09A               	goto	l14063
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;Console.c: 399: {
  9145                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9146  01218E  0100               	movlb	0	; () banked
  9147  012190  518B               	movf	Console_Render@y& (0+255),w,b
  9148  012192  0D14               	mullw	20
  9149  012194  0E6E               	movlw	low _lBuffer
  9150  012196  0100               	movlb	0	; () banked
  9151  012198  6F83               	movwf	??_Console_Render& (0+255),b
  9152  01219A  0E02               	movlw	high _lBuffer
  9153  01219C  0100               	movlb	0	; () banked
  9154  01219E  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9155  0121A0  50F3               	movf	prodl,w,c
  9156  0121A2  0100               	movlb	0	; () banked
  9157  0121A4  2783               	addwf	??_Console_Render& (0+255),f,b
  9158  0121A6  50F4               	movf	prodh,w,c
  9159  0121A8  0100               	movlb	0	; () banked
  9160  0121AA  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9161  0121AC  0100               	movlb	0	; () banked
  9162  0121AE  518A               	movf	Console_Render@x& (0+255),w,b
  9163  0121B0  0D01               	mullw	1
  9164  0121B2  50F3               	movf	prodl,w,c
  9165  0121B4  0100               	movlb	0	; () banked
  9166  0121B6  2583               	addwf	??_Console_Render& (0+255),w,b
  9167  0121B8  6ED9               	movwf	fsr2l,c
  9168  0121BA  50F4               	movf	prodh,w,c
  9169  0121BC  0100               	movlb	0	; () banked
  9170  0121BE  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9171  0121C0  6EDA               	movwf	fsr2h,c
  9172  0121C2  0E7F               	movlw	127
  9173  0121C4  16DF               	andwf	indf2,f,c
  9174                           
  9175                           ;Console.c: 401: if (lBuffer[y][x])
  9176  0121C6  0100               	movlb	0	; () banked
  9177  0121C8  518B               	movf	Console_Render@y& (0+255),w,b
  9178  0121CA  0D14               	mullw	20
  9179  0121CC  0E6E               	movlw	low _lBuffer
  9180  0121CE  0100               	movlb	0	; () banked
  9181  0121D0  6F83               	movwf	??_Console_Render& (0+255),b
  9182  0121D2  0E02               	movlw	high _lBuffer
  9183  0121D4  0100               	movlb	0	; () banked
  9184  0121D6  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9185  0121D8  50F3               	movf	prodl,w,c
  9186  0121DA  0100               	movlb	0	; () banked
  9187  0121DC  2783               	addwf	??_Console_Render& (0+255),f,b
  9188  0121DE  50F4               	movf	prodh,w,c
  9189  0121E0  0100               	movlb	0	; () banked
  9190  0121E2  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9191  0121E4  0100               	movlb	0	; () banked
  9192  0121E6  518A               	movf	Console_Render@x& (0+255),w,b
  9193  0121E8  0D01               	mullw	1
  9194  0121EA  50F3               	movf	prodl,w,c
  9195  0121EC  0100               	movlb	0	; () banked
  9196  0121EE  2583               	addwf	??_Console_Render& (0+255),w,b
  9197  0121F0  6ED9               	movwf	fsr2l,c
  9198  0121F2  50F4               	movf	prodh,w,c
  9199  0121F4  0100               	movlb	0	; () banked
  9200  0121F6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9201  0121F8  6EDA               	movwf	fsr2h,c
  9202  0121FA  50DF               	movf	indf2,w,c
  9203  0121FC  B4D8               	btfsc	status,2,c
  9204  0121FE  D04A               	goto	l14061
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;Console.c: 402: {
  9208                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9209  012200  C0DE  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9210  012204  C0DF  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9211  012208  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9212  01220C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9213  012210  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9214  012214  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9215  012218  C1F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9216  01221C  C1F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9217  012220  C1F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9218  012224  C1F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9219  012228  ECEF  F0AB         	call	_LCD_FillRectangle	;wreg free
  9220                           
  9221                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9222  01222C  0100               	movlb	0	; () banked
  9223  01222E  518B               	movf	Console_Render@y& (0+255),w,b
  9224  012230  0D14               	mullw	20
  9225  012232  0E6E               	movlw	low _lBuffer
  9226  012234  0100               	movlb	0	; () banked
  9227  012236  6F83               	movwf	??_Console_Render& (0+255),b
  9228  012238  0E02               	movlw	high _lBuffer
  9229  01223A  0100               	movlb	0	; () banked
  9230  01223C  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9231  01223E  50F3               	movf	prodl,w,c
  9232  012240  0100               	movlb	0	; () banked
  9233  012242  2783               	addwf	??_Console_Render& (0+255),f,b
  9234  012244  50F4               	movf	prodh,w,c
  9235  012246  0100               	movlb	0	; () banked
  9236  012248  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9237  01224A  0100               	movlb	0	; () banked
  9238  01224C  518A               	movf	Console_Render@x& (0+255),w,b
  9239  01224E  0D01               	mullw	1
  9240  012250  50F3               	movf	prodl,w,c
  9241  012252  0100               	movlb	0	; () banked
  9242  012254  2583               	addwf	??_Console_Render& (0+255),w,b
  9243  012256  6ED9               	movwf	fsr2l,c
  9244  012258  50F4               	movf	prodh,w,c
  9245  01225A  0100               	movlb	0	; () banked
  9246  01225C  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9247  01225E  6EDA               	movwf	fsr2h,c
  9248  012260  50DF               	movf	indf2,w,c
  9249  012262  EC38  F0A2         	call	_Console_MakeField
  9250  012266  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  9251  01226A  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9252  01226E  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9253  012272  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9254  012276  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9255  01227A  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9256  01227E  C1F4  F078         	movff	_gCharSize,LCD_DrawField@pSize
  9257  012282  C1F5  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9258  012286  C1F6  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9259  01228A  C1F7  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9260  01228E  ECDE  F0A7         	call	_LCD_DrawField	;wreg free
  9261                           
  9262                           ;Console.c: 405: }
  9263  012292  D017               	goto	l14063
  9264  012294                     l14061:
  9265                           
  9266                           ;Console.c: 406: else
  9267                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9268  012294  0E00               	movlw	0
  9269  012296  0100               	movlb	0	; () banked
  9270  012298  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9271  01229A  0E00               	movlw	0
  9272  01229C  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9273  01229E  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9274  0122A2  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9275  0122A6  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9276  0122AA  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9277  0122AE  C1F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9278  0122B2  C1F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9279  0122B6  C1F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9280  0122BA  C1F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9281  0122BE  ECEF  F0AB         	call	_LCD_FillRectangle	;wreg free
  9282  0122C2                     l14063:
  9283                           
  9284                           ;Console.c: 408: }
  9285                           ;Console.c: 409: lCursor.x += (5 + 1);
  9286  0122C2  0E06               	movlw	6
  9287  0122C4  0100               	movlb	0	; () banked
  9288  0122C6  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  9289  0122C8  0E00               	movlw	0
  9290  0122CA  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9291                           
  9292                           ; BSR set to: 0
  9293  0122CC  0100               	movlb	0	; () banked
  9294  0122CE  2B8A               	incf	Console_Render@x& (0+255),f,b
  9295  0122D0  D73D               	goto	l14049
  9296  0122D2                     l14069:
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;Console.c: 410: }
  9300                           ;Console.c: 411: lCursor.y += (7 + 1);
  9301  0122D2  0E08               	movlw	8
  9302  0122D4  0100               	movlb	0	; () banked
  9303  0122D6  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9304  0122D8  0E00               	movlw	0
  9305  0122DA  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;Console.c: 412: lCursor.x = 6;
  9309  0122DC  0E00               	movlw	0
  9310  0122DE  0100               	movlb	0	; () banked
  9311  0122E0  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9312  0122E2  0E06               	movlw	6
  9313  0122E4  6F86               	movwf	Console_Render@lCursor& (0+255),b
  9314                           
  9315                           ; BSR set to: 0
  9316  0122E6  0100               	movlb	0	; () banked
  9317  0122E8  2B8B               	incf	Console_Render@y& (0+255),f,b
  9318  0122EA                     l14075:
  9319                           
  9320                           ; BSR set to: 0
  9321  0122EA  0100               	movlb	0	; () banked
  9322  0122EC  518B               	movf	Console_Render@y& (0+255),w,b
  9323  0122EE  5C36               	subwf	_lBufferY,w,c
  9324  0122F0  B0D8               	btfsc	status,0,c
  9325  0122F2  D71C               	goto	l14045
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;Console.c: 413: }
  9329                           ;Console.c: 415: if (clearall)
  9330                           
  9331                           ; BSR set to: 0
  9332  0122F4  0100               	movlb	0	; () banked
  9333  0122F6  51EB               	movf	_clearall& (0+255),w,b
  9334  0122F8  B4D8               	btfsc	status,2,c
  9335  0122FA  0012               	return	
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;Console.c: 416: {
  9339                           ;Console.c: 417: clearall = 0;
  9340  0122FC  0E00               	movlw	0
  9341  0122FE  0100               	movlb	0	; () banked
  9342  012300  6FEB               	movwf	_clearall& (0+255),b
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;Console.c: 418: lBufferY = temp;
  9346  012302  C085  F036         	movff	Console_Render@temp,_lBufferY
  9347                           
  9348                           ; BSR set to: 0
  9349  012306  0012               	return	
  9350  012308                     __end_of_Console_Render:
  9351                           	opt stack 0
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           postinc0	equ	0xFEE
  9359                           wreg	equ	0xFE8
  9360                           postdec1	equ	0xFE5
  9361                           fsr1h	equ	0xFE2
  9362                           fsr1l	equ	0xFE1
  9363                           indf2	equ	0xFDF
  9364                           postinc2	equ	0xFDE
  9365                           postdec2	equ	0xFDD
  9366                           fsr2h	equ	0xFDA
  9367                           fsr2l	equ	0xFD9
  9368                           status	equ	0xFD8
  9369                           
  9370 ;; *************** function _LCD_FillRectangle *****************
  9371 ;; Defined at:
  9372 ;;		line 318 in file "Library/LCD.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;  pColour         2    9[BANK0 ] unsigned short 
  9375 ;;  pPoint          4   11[BANK0 ] struct Point
  9376 ;;  pSize           4   15[BANK0 ] struct Point
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;  j               1   22[BANK0 ] unsigned char 
  9379 ;;  i               1   21[BANK0 ] unsigned char 
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      void 
  9382 ;; Registers used:
  9383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9389 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;Total ram usage:       14 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:   10
  9396 ;; This function calls:
  9397 ;;		_LCD_Word_Write
  9398 ;;		_Set_Addr_Window
  9399 ;; This function is called by:
  9400 ;;		_Console_Render
  9401 ;;		_Console_ClearLine
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text29
  9406  0157DE                     __ptext29:
  9407                           	opt stack 0
  9408  0157DE                     _LCD_FillRectangle:
  9409                           	opt stack 18
  9410                           
  9411                           ;LCD.c: 320: UINT8 i = 0x00;
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;incstack = 0
  9415  0157DE  0E00               	movlw	0
  9416  0157E0  0100               	movlb	0	; () banked
  9417  0157E2  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  9418                           
  9419                           ;LCD.c: 321: UINT8 j = 0x00;
  9420  0157E4  0E00               	movlw	0
  9421  0157E6  0100               	movlb	0	; () banked
  9422  0157E8  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9426  0157EA  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9427  0157EE  0100               	movlb	0	; () banked
  9428  0157F0  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9429  0157F2  0100               	movlb	0	; () banked
  9430  0157F4  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  9431  0157F6  0100               	movlb	0	; () banked
  9432  0157F8  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  9433  0157FA  0100               	movlb	0	; () banked
  9434  0157FC  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  9435  0157FE  0100               	movlb	0	; () banked
  9436  015800  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9437  015802  0100               	movlb	0	; () banked
  9438  015804  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  9439  015806  0100               	movlb	0	; () banked
  9440  015808  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  9441  01580A  0100               	movlb	0	; () banked
  9442  01580C  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  9443  01580E  0100               	movlb	0	; () banked
  9444  015810  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  9445  015812  0100               	movlb	0	; () banked
  9446  015814  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9447  015816  0100               	movlb	0	; () banked
  9448  015818  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9449  01581A  EC3B  F0A6         	call	_Set_Addr_Window
  9450                           
  9451                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  9452  01581E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  9453  015822                     l13639:
  9454  015822  0100               	movlb	0	; () banked
  9455  015824  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  9456  015826  0100               	movlb	0	; () banked
  9457  015828  B4D8               	btfsc	status,2,c
  9458  01582A  0012               	return	
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  9462                           
  9463                           ; BSR set to: 0
  9464  01582C  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  9465  015830                     l13643:
  9466                           
  9467                           ; BSR set to: 0
  9468  015830  0100               	movlb	0	; () banked
  9469  015832  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
  9470  015834  0100               	movlb	0	; () banked
  9471  015836  B4D8               	btfsc	status,2,c
  9472  015838  D009               	goto	l13653
  9473                           
  9474                           ; BSR set to: 0
  9475                           ;LCD.c: 333: LCD_Word_Write(pColour);
  9476                           
  9477                           ; BSR set to: 0
  9478                           
  9479                           ; BSR set to: 0
  9480  01583A  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  9481  01583E  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  9482  015842  ECA9  F0B3         	call	_LCD_Word_Write	;wreg free
  9483  015846  0100               	movlb	0	; () banked
  9484  015848  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
  9485  01584A  D7F2               	goto	l13643
  9486  01584C                     l13653:
  9487                           
  9488                           ; BSR set to: 0
  9489  01584C  0100               	movlb	0	; () banked
  9490  01584E  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
  9491  015850  D7E8               	goto	l13639
  9492  015852                     __end_of_LCD_FillRectangle:
  9493                           	opt stack 0
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           postinc0	equ	0xFEE
  9501                           wreg	equ	0xFE8
  9502                           postdec1	equ	0xFE5
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function _LCD_DrawField *****************
  9513 ;; Defined at:
  9514 ;;		line 393 in file "Library/LCD.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  9517 ;;		 -> Console_MakeField@Fill(70), 
  9518 ;;  pPoint          4   20[BANK0 ] struct Point
  9519 ;;  pSize           4   24[BANK0 ] struct Point
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  count           2   30[BANK0 ] unsigned short 
  9522 ;;  i               1   34[BANK0 ] unsigned char 
  9523 ;;  ymax            1   33[BANK0 ] unsigned char 
  9524 ;;  xmax            1   32[BANK0 ] unsigned char 
  9525 ;; Return value:  Size  Location     Type
  9526 ;;                  1    wreg      void 
  9527 ;; Registers used:
  9528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9529 ;; Tracked objects:
  9530 ;;		On entry : 0/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9534 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9535 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9536 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;Total ram usage:       17 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; Hardware stack levels required when called:   10
  9541 ;; This function calls:
  9542 ;;		_LCD_Word_Write
  9543 ;;		_Set_Addr_Window
  9544 ;;		___wmul
  9545 ;; This function is called by:
  9546 ;;		_Console_Render
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           	psect	text30
  9551  014FBC                     __ptext30:
  9552                           	opt stack 0
  9553  014FBC                     _LCD_DrawField:
  9554                           	opt stack 18
  9555                           
  9556                           ;LCD.c: 396: UINT8 i = 0x00;
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;incstack = 0
  9560  014FBC  0E00               	movlw	0
  9561  014FBE  0100               	movlb	0	; () banked
  9562  014FC0  6F82               	movwf	LCD_DrawField@i& (0+255),b
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
  9566  014FC2  0100               	movlb	0	; () banked
  9567  014FC4  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  9568  014FC6  0100               	movlb	0	; () banked
  9569  014FC8  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
  9570  014FCA  0100               	movlb	0	; () banked
  9571  014FCC  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
  9575  014FCE  0100               	movlb	0	; () banked
  9576  014FD0  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
  9577  014FD2  0100               	movlb	0	; () banked
  9578  014FD4  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
  9579  014FD6  0100               	movlb	0	; () banked
  9580  014FD8  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
  9581                           
  9582                           ; BSR set to: 0
  9583                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
  9584  014FDA  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
  9585  014FDE  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
  9586  014FE2  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
  9587  014FE6  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
  9588  014FEA  EC2F  F0B2         	call	___wmul	;wreg free
  9589  014FEE  C060  F07E         	movff	?___wmul,LCD_DrawField@count
  9590  014FF2  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
  9591                           
  9592                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
  9593  014FF6  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
  9594  014FFA  0100               	movlb	0	; () banked
  9595  014FFC  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
  9596  014FFE  0100               	movlb	0	; () banked
  9597  015000  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9598  015002  0100               	movlb	0	; () banked
  9599  015004  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
  9600  015006  0100               	movlb	0	; () banked
  9601  015008  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9602  01500A  0100               	movlb	0	; () banked
  9603  01500C  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  9604  01500E  EC3B  F0A6         	call	_Set_Addr_Window
  9605                           
  9606                           ;LCD.c: 403: for(i = 0; i < count; i++)
  9607  015012  0E00               	movlw	0
  9608  015014  0100               	movlb	0	; () banked
  9609  015016  6F82               	movwf	LCD_DrawField@i& (0+255),b
  9610  015018  D013               	goto	l13673
  9611  01501A                     l13669:
  9612                           
  9613                           ; BSR set to: 0
  9614                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
  9615  01501A  0100               	movlb	0	; () banked
  9616  01501C  5182               	movf	LCD_DrawField@i& (0+255),w,b
  9617  01501E  0D02               	mullw	2
  9618  015020  50F3               	movf	prodl,w,c
  9619  015022  0100               	movlb	0	; () banked
  9620  015024  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
  9621  015026  6ED9               	movwf	fsr2l,c
  9622  015028  50F4               	movf	prodh,w,c
  9623  01502A  0100               	movlb	0	; () banked
  9624  01502C  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
  9625  01502E  6EDA               	movwf	fsr2h,c
  9626  015030  CFDE F065          	movff	postinc2,LCD_Word_Write@value
  9627  015034  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
  9628  015038  ECA9  F0B3         	call	_LCD_Word_Write	;wreg free
  9629  01503C  0100               	movlb	0	; () banked
  9630  01503E  2B82               	incf	LCD_DrawField@i& (0+255),f,b
  9631  015040                     l13673:
  9632                           
  9633                           ; BSR set to: 0
  9634  015040  0100               	movlb	0	; () banked
  9635  015042  5182               	movf	LCD_DrawField@i& (0+255),w,b
  9636  015044  0100               	movlb	0	; () banked
  9637  015046  6F7C               	movwf	??_LCD_DrawField& (0+255),b
  9638  015048  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
  9639  01504A  0100               	movlb	0	; () banked
  9640  01504C  517E               	movf	LCD_DrawField@count& (0+255),w,b
  9641  01504E  0100               	movlb	0	; () banked
  9642  015050  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
  9643  015052  0100               	movlb	0	; () banked
  9644  015054  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
  9645  015056  0100               	movlb	0	; () banked
  9646  015058  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
  9647  01505A  B0D8               	btfsc	status,0,c
  9648  01505C  0012               	return	
  9649  01505E  D7DD               	goto	l13669
  9650  015060                     __end_of_LCD_DrawField:
  9651                           	opt stack 0
  9652                           tblptru	equ	0xFF8
  9653                           tblptrh	equ	0xFF7
  9654                           tblptrl	equ	0xFF6
  9655                           tablat	equ	0xFF5
  9656                           prodh	equ	0xFF4
  9657                           prodl	equ	0xFF3
  9658                           postinc0	equ	0xFEE
  9659                           wreg	equ	0xFE8
  9660                           postdec1	equ	0xFE5
  9661                           fsr1h	equ	0xFE2
  9662                           fsr1l	equ	0xFE1
  9663                           indf2	equ	0xFDF
  9664                           postinc2	equ	0xFDE
  9665                           postdec2	equ	0xFDD
  9666                           fsr2h	equ	0xFDA
  9667                           fsr2l	equ	0xFD9
  9668                           status	equ	0xFD8
  9669                           
  9670 ;; *************** function ___wmul *****************
  9671 ;; Defined at:
  9672 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9675 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;  product         2    4[BANK0 ] unsigned int 
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  2    0[BANK0 ] unsigned int 
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0, prodl, prodh
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;Total ram usage:        6 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    7
  9694 ;; This function calls:
  9695 ;;		Nothing
  9696 ;; This function is called by:
  9697 ;;		_LCD_DrawField
  9698 ;;		_main
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           	psect	text31
  9703  01645E                     __ptext31:
  9704                           	opt stack 0
  9705  01645E                     ___wmul:
  9706                           	opt stack 20
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;incstack = 0
  9710  01645E  0100               	movlb	0	; () banked
  9711  016460  5160               	movf	___wmul@multiplier& (0+255),w,b
  9712  016462  0100               	movlb	0	; () banked
  9713  016464  0362               	mulwf	___wmul@multiplicand& (0+255),b
  9714  016466  CFF3 F064          	movff	prodl,___wmul@product
  9715  01646A  CFF4 F065          	movff	prodh,___wmul@product+1
  9716  01646E  0100               	movlb	0	; () banked
  9717  016470  5160               	movf	___wmul@multiplier& (0+255),w,b
  9718  016472  0100               	movlb	0	; () banked
  9719  016474  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9720  016476  50F3               	movf	prodl,w,c
  9721  016478  0100               	movlb	0	; () banked
  9722  01647A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  9723  01647C  0100               	movlb	0	; () banked
  9724  01647E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9725  016480  0100               	movlb	0	; () banked
  9726  016482  0362               	mulwf	___wmul@multiplicand& (0+255),b
  9727  016484  50F3               	movf	prodl,w,c
  9728  016486  0100               	movlb	0	; () banked
  9729  016488  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  9730                           
  9731                           ; BSR set to: 0
  9732  01648A  C064  F060         	movff	___wmul@product,?___wmul
  9733  01648E  C065  F061         	movff	___wmul@product+1,?___wmul+1
  9734  016492  0012               	return	
  9735  016494                     __end_of___wmul:
  9736                           	opt stack 0
  9737                           tblptru	equ	0xFF8
  9738                           tblptrh	equ	0xFF7
  9739                           tblptrl	equ	0xFF6
  9740                           tablat	equ	0xFF5
  9741                           prodh	equ	0xFF4
  9742                           prodl	equ	0xFF3
  9743                           postinc0	equ	0xFEE
  9744                           wreg	equ	0xFE8
  9745                           postdec1	equ	0xFE5
  9746                           fsr1h	equ	0xFE2
  9747                           fsr1l	equ	0xFE1
  9748                           indf2	equ	0xFDF
  9749                           postinc2	equ	0xFDE
  9750                           postdec2	equ	0xFDD
  9751                           fsr2h	equ	0xFDA
  9752                           fsr2l	equ	0xFD9
  9753                           status	equ	0xFD8
  9754                           
  9755 ;; *************** function _Console_MakeField *****************
  9756 ;; Defined at:
  9757 ;;		line 435 in file "Library/Console.c"
  9758 ;; Parameters:    Size  Location     Type
  9759 ;;  pInput          1    wreg     unsigned char 
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;  pInput          1   11[BANK0 ] unsigned char 
  9762 ;;  y               1   17[BANK0 ] unsigned char 
  9763 ;;  x               1   16[BANK0 ] unsigned char 
  9764 ;;  Column          2   12[BANK0 ] PTR struct Byte
  9765 ;;		 -> Font5x7(480), 
  9766 ;;  Index           2    9[BANK0 ] unsigned short 
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  2    5[BANK0 ] PTR unsigned short 
  9769 ;; Registers used:
  9770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;Total ram usage:       13 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    8
  9783 ;; This function calls:
  9784 ;;		_Byte_GetBit
  9785 ;; This function is called by:
  9786 ;;		_Console_Render
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           	psect	text32
  9791  014470                     __ptext32:
  9792                           	opt stack 0
  9793  014470                     _Console_MakeField:
  9794                           	opt stack 20
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;incstack = 0
  9798                           ;Console_MakeField@pInput stored from wreg
  9799  014470  0100               	movlb	0	; () banked
  9800  014472  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
  9801                           
  9802                           ;Console.c: 437: static Colour Fill[7][5];
  9803                           ;Console.c: 438: pInput -= 32;
  9804  014474  0E20               	movlw	32
  9805  014476  0100               	movlb	0	; () banked
  9806  014478  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
  9810  01447A  0100               	movlb	0	; () banked
  9811  01447C  516B               	movf	Console_MakeField@pInput& (0+255),w,b
  9812  01447E  0D05               	mullw	5
  9813  014480  CFF3 F069          	movff	prodl,Console_MakeField@Index
  9814  014484  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
  9818  014488  0E43               	movlw	low _Font5x7
  9819  01448A  0100               	movlb	0	; () banked
  9820  01448C  2569               	addwf	Console_MakeField@Index& (0+255),w,b
  9821  01448E  0100               	movlb	0	; () banked
  9822  014490  6F6C               	movwf	Console_MakeField@Column& (0+255),b
  9823  014492  0EFD               	movlw	high _Font5x7
  9824  014494  0100               	movlb	0	; () banked
  9825  014496  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
  9826  014498  0100               	movlb	0	; () banked
  9827  01449A  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
  9828                           
  9829                           ; BSR set to: 0
  9830                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
  9831  01449C  0E00               	movlw	0
  9832  01449E  0100               	movlb	0	; () banked
  9833  0144A0  6F70               	movwf	Console_MakeField@x& (0+255),b
  9834  0144A2                     l13733:
  9835                           
  9836                           ; BSR set to: 0
  9837  0144A2  0E04               	movlw	4
  9838  0144A4  0100               	movlb	0	; () banked
  9839  0144A6  6570               	cpfsgt	Console_MakeField@x& (0+255),b
  9840  0144A8  D001               	goto	l13737
  9841  0144AA  D043               	goto	l13757
  9842  0144AC                     l13737:
  9843                           
  9844                           ; BSR set to: 0
  9845                           ;Console.c: 444: {
  9846                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
  9847  0144AC  0E00               	movlw	0
  9848  0144AE  0100               	movlb	0	; () banked
  9849  0144B0  6F71               	movwf	Console_MakeField@y& (0+255),b
  9850  0144B2                     l13739:
  9851                           
  9852                           ; BSR set to: 0
  9853  0144B2  0E06               	movlw	6
  9854  0144B4  0100               	movlb	0	; () banked
  9855  0144B6  6571               	cpfsgt	Console_MakeField@y& (0+255),b
  9856  0144B8  D001               	goto	l13743
  9857  0144BA  D035               	goto	l13753
  9858  0144BC                     l13743:
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
  9862  0144BC  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
  9863  0144C0  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
  9864  0144C4  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
  9865  0144C8  EC65  F0B2         	call	_Byte_GetBit	;wreg free
  9866  0144CC  0900               	iorlw	0
  9867  0144CE  A4D8               	btfss	status,2,c
  9868  0144D0  D005               	goto	l1082
  9869  0144D2  C0DE  F06E         	movff	_gBackcolour,_Console_MakeField$10974
  9870  0144D6  C0DF  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
  9871  0144DA  D004               	goto	l13747
  9872  0144DC                     l1082:
  9873  0144DC  C0FA  F06E         	movff	_gForecolour,_Console_MakeField$10974
  9874  0144E0  C0FB  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
  9875  0144E4                     l13747:
  9876  0144E4  0100               	movlb	0	; () banked
  9877  0144E6  5171               	movf	Console_MakeField@y& (0+255),w,b
  9878  0144E8  0D0A               	mullw	10
  9879  0144EA  0E1E               	movlw	low Console_MakeField@Fill
  9880  0144EC  0100               	movlb	0	; () banked
  9881  0144EE  6F67               	movwf	??_Console_MakeField& (0+255),b
  9882  0144F0  0E02               	movlw	high Console_MakeField@Fill
  9883  0144F2  0100               	movlb	0	; () banked
  9884  0144F4  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
  9885  0144F6  50F3               	movf	prodl,w,c
  9886  0144F8  0100               	movlb	0	; () banked
  9887  0144FA  2767               	addwf	??_Console_MakeField& (0+255),f,b
  9888  0144FC  50F4               	movf	prodh,w,c
  9889  0144FE  0100               	movlb	0	; () banked
  9890  014500  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
  9891  014502  0100               	movlb	0	; () banked
  9892  014504  5170               	movf	Console_MakeField@x& (0+255),w,b
  9893  014506  0D02               	mullw	2
  9894  014508  50F3               	movf	prodl,w,c
  9895  01450A  0100               	movlb	0	; () banked
  9896  01450C  2567               	addwf	??_Console_MakeField& (0+255),w,b
  9897  01450E  6ED9               	movwf	fsr2l,c
  9898  014510  50F4               	movf	prodh,w,c
  9899  014512  0100               	movlb	0	; () banked
  9900  014514  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
  9901  014516  6EDA               	movwf	fsr2h,c
  9902  014518  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
  9903  01451C  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
  9904                           
  9905                           ; BSR set to: 0
  9906  014520  0100               	movlb	0	; () banked
  9907  014522  2B71               	incf	Console_MakeField@y& (0+255),f,b
  9908  014524  D7C6               	goto	l13739
  9909  014526                     l13753:
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;Console.c: 447: Column += 1;
  9913  014526  0100               	movlb	0	; () banked
  9914  014528  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
  9915  01452A  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
  9916  01452C  0100               	movlb	0	; () banked
  9917  01452E  2B70               	incf	Console_MakeField@x& (0+255),f,b
  9918  014530  D7B8               	goto	l13733
  9919  014532                     l13757:
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;Console.c: 448: }
  9923                           ;Console.c: 449: return (ColourPtr)Fill;
  9924  014532  0E1E               	movlw	low Console_MakeField@Fill
  9925  014534  0100               	movlb	0	; () banked
  9926  014536  6F65               	movwf	?_Console_MakeField& (0+255),b
  9927  014538  0E02               	movlw	high Console_MakeField@Fill
  9928  01453A  0100               	movlb	0	; () banked
  9929  01453C  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
  9930  01453E  0012               	return	
  9931  014540                     __end_of_Console_MakeField:
  9932                           	opt stack 0
  9933                           tblptru	equ	0xFF8
  9934                           tblptrh	equ	0xFF7
  9935                           tblptrl	equ	0xFF6
  9936                           tablat	equ	0xFF5
  9937                           prodh	equ	0xFF4
  9938                           prodl	equ	0xFF3
  9939                           postinc0	equ	0xFEE
  9940                           wreg	equ	0xFE8
  9941                           postdec1	equ	0xFE5
  9942                           fsr1h	equ	0xFE2
  9943                           fsr1l	equ	0xFE1
  9944                           indf2	equ	0xFDF
  9945                           postinc2	equ	0xFDE
  9946                           postdec2	equ	0xFDD
  9947                           fsr2h	equ	0xFDA
  9948                           fsr2l	equ	0xFD9
  9949                           status	equ	0xFD8
  9950                           
  9951 ;; *************** function _Byte_GetBit *****************
  9952 ;; Defined at:
  9953 ;;		line 38 in file "Library/Types.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  9956 ;;		 -> Font5x7(480), 
  9957 ;;  pBit            1    2[BANK0 ] unsigned char 
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  Output          1    4[BANK0 ] unsigned char 
  9960 ;; Return value:  Size  Location     Type
  9961 ;;                  1    wreg      unsigned char 
  9962 ;; Registers used:
  9963 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  9964 ;; Tracked objects:
  9965 ;;		On entry : 0/0
  9966 ;;		On exit  : 0/0
  9967 ;;		Unchanged: 0/0
  9968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9969 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9973 ;;Total ram usage:        5 bytes
  9974 ;; Hardware stack levels used:    1
  9975 ;; Hardware stack levels required when called:    7
  9976 ;; This function calls:
  9977 ;;		Nothing
  9978 ;; This function is called by:
  9979 ;;		_Console_MakeField
  9980 ;;		_Word_GetBit
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text33
  9985  0164CA                     __ptext33:
  9986                           	opt stack 0
  9987  0164CA                     _Byte_GetBit:
  9988                           	opt stack 20
  9989                           
  9990                           ;Types.c: 40: UINT8 Output = pInput->mBits;
  9991                           
  9992                           ; BSR set to: 0
  9993                           ;incstack = 0
  9994  0164CA  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
  9995  0164CE  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
  9996  0164D2                     	if	0	;tblptru may be non-zero
  9997  0164D2                     	endif
  9998  0164D2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9999  0164D2  0E00               	movlw	low (__mediumconst shr (0+16))
 10000  0164D4  6EF8               	movwf	tblptru,c
 10001  0164D6                     	endif
 10002  0164D6  0008               	tblrd		*
 10003  0164D8  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 10004                           
 10005                           ;Types.c: 42: Output >>= pBit;
 10006  0164DC  0100               	movlb	0	; () banked
 10007  0164DE  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 10008  0164E0  0100               	movlb	0	; () banked
 10009  0164E2  6F63               	movwf	??_Byte_GetBit& (0+255),b
 10010  0164E4  D003               	goto	u10650
 10011  0164E6                     u10655:
 10012  0164E6  0100               	movlb	0	; () banked
 10013  0164E8  90D8               	bcf	status,0,c
 10014  0164EA  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10015  0164EC                     u10650:
 10016  0164EC  0100               	movlb	0	; () banked
 10017  0164EE  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 10018  0164F0  D7FA               	goto	u10655
 10019                           
 10020                           ;Types.c: 43: Output &= 1;
 10021  0164F2  0E01               	movlw	1
 10022  0164F4  0100               	movlb	0	; () banked
 10023  0164F6  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;Types.c: 44: return Output;
 10027  0164F8  0100               	movlb	0	; () banked
 10028  0164FA  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 10029  0164FC  0012               	return	
 10030  0164FE                     __end_of_Byte_GetBit:
 10031                           	opt stack 0
 10032                           tblptru	equ	0xFF8
 10033                           tblptrh	equ	0xFF7
 10034                           tblptrl	equ	0xFF6
 10035                           tablat	equ	0xFF5
 10036                           prodh	equ	0xFF4
 10037                           prodl	equ	0xFF3
 10038                           postinc0	equ	0xFEE
 10039                           wreg	equ	0xFE8
 10040                           postdec1	equ	0xFE5
 10041                           fsr1h	equ	0xFE2
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           postdec2	equ	0xFDD
 10046                           fsr2h	equ	0xFDA
 10047                           fsr2l	equ	0xFD9
 10048                           status	equ	0xFD8
 10049                           
 10050 ;; *************** function _ADC_Voltage *****************
 10051 ;; Defined at:
 10052 ;;		line 259 in file "Library/ADC.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10055 ;;		 -> ADC_AN0(5), 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  output          4   53[BANK0 ] float 
 10058 ;;  ref             4   49[BANK0 ] const float 
 10059 ;;  max             4   45[BANK0 ] const float 
 10060 ;; Return value:  Size  Location     Type
 10061 ;;                  4   39[BANK0 ] float 
 10062 ;; Registers used:
 10063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10064 ;; Tracked objects:
 10065 ;;		On entry : 0/0
 10066 ;;		On exit  : 0/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10070 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10071 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10072 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10073 ;;Total ram usage:       18 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    8
 10076 ;; This function calls:
 10077 ;;		___fldiv
 10078 ;;		___flmul
 10079 ;;		___xxtofl
 10080 ;; This function is called by:
 10081 ;;		_printToScreen
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085                           	psect	text34
 10086  014116                     __ptext34:
 10087                           	opt stack 0
 10088  014116                     _ADC_Voltage:
 10089                           	opt stack 21
 10090                           
 10091                           ;ADC.c: 261: const float max = 1024;
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;incstack = 0
 10095  014116  0E00               	movlw	0
 10096  014118  0100               	movlb	0	; () banked
 10097  01411A  6F8D               	movwf	ADC_Voltage@max& (0+255),b
 10098  01411C  0E00               	movlw	0
 10099  01411E  6F8E               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10100  014120  0E80               	movlw	128
 10101  014122  6F8F               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10102  014124  0E44               	movlw	68
 10103  014126  6F90               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10104                           
 10105                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10106  014128  0E33               	movlw	51
 10107  01412A  0100               	movlb	0	; () banked
 10108  01412C  6F91               	movwf	ADC_Voltage@ref& (0+255),b
 10109  01412E  0E33               	movlw	51
 10110  014130  6F92               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10111  014132  0E53               	movlw	83
 10112  014134  6F93               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10113  014136  0E40               	movlw	64
 10114  014138  6F94               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;ADC.c: 263: float output = pInput->mValue;
 10118  01413A  0100               	movlb	0	; () banked
 10119  01413C  EE20 F001          	lfsr	2,1
 10120  014140  5187               	movf	ADC_Voltage@pInput& (0+255),w,b
 10121  014142  26D9               	addwf	fsr2l,f,c
 10122  014144  5188               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10123  014146  22DA               	addwfc	fsr2h,f,c
 10124  014148  CFDE F08B          	movff	postinc2,??_ADC_Voltage
 10125  01414C  CFDD F08C          	movff	postdec2,??_ADC_Voltage+1
 10126  014150  C08B  F060         	movff	??_ADC_Voltage,___xxtofl@val
 10127  014154  C08C  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10128  014158  0100               	movlb	0	; () banked
 10129  01415A  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 10130  01415C  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 10131  01415E  0E00               	movlw	0
 10132  014160  EC81  F093         	call	___xxtofl
 10133  014164  C060  F095         	movff	?___xxtofl,ADC_Voltage@output
 10134  014168  C061  F096         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10135  01416C  C062  F097         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10136  014170  C063  F098         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10137                           
 10138                           ;ADC.c: 265: output /= max;
 10139  014174  C095  F060         	movff	ADC_Voltage@output,___fldiv@b
 10140  014178  C096  F061         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10141  01417C  C097  F062         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10142  014180  C098  F063         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10143  014184  C08D  F064         	movff	ADC_Voltage@max,___fldiv@a
 10144  014188  C08E  F065         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10145  01418C  C08F  F066         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10146  014190  C090  F067         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10147  014194  ECB6  F086         	call	___fldiv	;wreg free
 10148  014198  C060  F095         	movff	?___fldiv,ADC_Voltage@output
 10149  01419C  C061  F096         	movff	?___fldiv+1,ADC_Voltage@output+1
 10150  0141A0  C062  F097         	movff	?___fldiv+2,ADC_Voltage@output+2
 10151  0141A4  C063  F098         	movff	?___fldiv+3,ADC_Voltage@output+3
 10152                           
 10153                           ;ADC.c: 266: output *= ref;
 10154  0141A8  C095  F06E         	movff	ADC_Voltage@output,___flmul@b
 10155  0141AC  C096  F06F         	movff	ADC_Voltage@output+1,___flmul@b+1
 10156  0141B0  C097  F070         	movff	ADC_Voltage@output+2,___flmul@b+2
 10157  0141B4  C098  F071         	movff	ADC_Voltage@output+3,___flmul@b+3
 10158  0141B8  C091  F072         	movff	ADC_Voltage@ref,___flmul@a
 10159  0141BC  C092  F073         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10160  0141C0  C093  F074         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10161  0141C4  C094  F075         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10162  0141C8  EC54  F082         	call	___flmul	;wreg free
 10163  0141CC  C06E  F095         	movff	?___flmul,ADC_Voltage@output
 10164  0141D0  C06F  F096         	movff	?___flmul+1,ADC_Voltage@output+1
 10165  0141D4  C070  F097         	movff	?___flmul+2,ADC_Voltage@output+2
 10166  0141D8  C071  F098         	movff	?___flmul+3,ADC_Voltage@output+3
 10167                           
 10168                           ;ADC.c: 268: return output + (float)0.000;
 10169  0141DC  C095  F087         	movff	ADC_Voltage@output,?_ADC_Voltage
 10170  0141E0  C096  F088         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10171  0141E4  C097  F089         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10172  0141E8  C098  F08A         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10173  0141EC  0012               	return	
 10174  0141EE                     __end_of_ADC_Voltage:
 10175                           	opt stack 0
 10176                           tblptru	equ	0xFF8
 10177                           tblptrh	equ	0xFF7
 10178                           tblptrl	equ	0xFF6
 10179                           tablat	equ	0xFF5
 10180                           prodh	equ	0xFF4
 10181                           prodl	equ	0xFF3
 10182                           postinc0	equ	0xFEE
 10183                           wreg	equ	0xFE8
 10184                           postdec1	equ	0xFE5
 10185                           fsr1h	equ	0xFE2
 10186                           fsr1l	equ	0xFE1
 10187                           indf2	equ	0xFDF
 10188                           postinc2	equ	0xFDE
 10189                           postdec2	equ	0xFDD
 10190                           fsr2h	equ	0xFDA
 10191                           fsr2l	equ	0xFD9
 10192                           status	equ	0xFD8
 10193                           
 10194 ;; *************** function ___xxtofl *****************
 10195 ;; Defined at:
 10196 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\xxtofl.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  sign            1    wreg     unsigned char 
 10199 ;;  val             4    0[BANK0 ] long 
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;  sign            1    8[BANK0 ] unsigned char 
 10202 ;;  arg             4   10[BANK0 ] unsigned long 
 10203 ;;  exp             1    9[BANK0 ] unsigned char 
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  4    0[BANK0 ] unsigned char 
 10206 ;; Registers used:
 10207 ;;		wreg, status,2, status,0
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10213 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10216 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10217 ;;Total ram usage:       14 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    7
 10220 ;; This function calls:
 10221 ;;		Nothing
 10222 ;; This function is called by:
 10223 ;;		_ADC_Voltage
 10224 ;;		_pow
 10225 ;;		_exp
 10226 ;;		_floor
 10227 ;;		_log
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text35
 10232  012702                     __ptext35:
 10233                           	opt stack 0
 10234  012702                     ___xxtofl:
 10235                           	opt stack 20
 10236                           
 10237                           ;incstack = 0
 10238                           ;___xxtofl@sign stored from wreg
 10239  012702  0100               	movlb	0	; () banked
 10240  012704  6F68               	movwf	___xxtofl@sign& (0+255),b
 10241  012706  0100               	movlb	0	; () banked
 10242  012708  5168               	movf	___xxtofl@sign& (0+255),w,b
 10243  01270A  0100               	movlb	0	; () banked
 10244  01270C  B4D8               	btfsc	status,2,c
 10245  01270E  D01E               	goto	l2671
 10246                           
 10247                           ; BSR set to: 0
 10248  012710  0100               	movlb	0	; () banked
 10249  012712  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10250  012714  D01B               	goto	l2671
 10251                           
 10252                           ; BSR set to: 0
 10253  012716  C060  F064         	movff	___xxtofl@val,??___xxtofl
 10254  01271A  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 10255  01271E  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 10256  012722  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 10257  012726  0100               	movlb	0	; () banked
 10258  012728  1F64               	comf	??___xxtofl& (0+255),f,b
 10259  01272A  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 10260  01272C  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 10261  01272E  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 10262  012730  2B64               	incf	??___xxtofl& (0+255),f,b
 10263  012732  0E00               	movlw	0
 10264  012734  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10265  012736  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10266  012738  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10267  01273A  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 10268  01273E  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 10269  012742  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 10270  012746  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 10271  01274A  D008               	goto	l12741
 10272  01274C                     l2671:
 10273                           
 10274                           ; BSR set to: 0
 10275  01274C  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 10276  012750  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10277  012754  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10278  012758  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10279  01275C                     l12741:
 10280                           
 10281                           ; BSR set to: 0
 10282  01275C  0100               	movlb	0	; () banked
 10283  01275E  5160               	movf	___xxtofl@val& (0+255),w,b
 10284  012760  0100               	movlb	0	; () banked
 10285  012762  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10286  012764  0100               	movlb	0	; () banked
 10287  012766  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10288  012768  0100               	movlb	0	; () banked
 10289  01276A  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10290  01276C  A4D8               	btfss	status,2,c
 10291  01276E  D00A               	goto	l12747
 10292                           
 10293                           ; BSR set to: 0
 10294  012770  0E00               	movlw	0
 10295  012772  0100               	movlb	0	; () banked
 10296  012774  6F60               	movwf	?___xxtofl& (0+255),b
 10297  012776  0E00               	movlw	0
 10298  012778  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 10299  01277A  0E00               	movlw	0
 10300  01277C  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 10301  01277E  0E00               	movlw	0
 10302  012780  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 10303                           
 10304                           ; BSR set to: 0
 10305  012782  0012               	return	
 10306  012784                     l12747:
 10307                           
 10308                           ; BSR set to: 0
 10309  012784  0E96               	movlw	150
 10310  012786  0100               	movlb	0	; () banked
 10311  012788  6F69               	movwf	___xxtofl@exp& (0+255),b
 10312  01278A  D008               	goto	l12751
 10313  01278C                     l12749:
 10314                           
 10315                           ; BSR set to: 0
 10316  01278C  0100               	movlb	0	; () banked
 10317  01278E  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10318  012790  0100               	movlb	0	; () banked
 10319  012792  90D8               	bcf	status,0,c
 10320  012794  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10321  012796  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10322  012798  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10323  01279A  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10324  01279C                     l12751:
 10325                           
 10326                           ; BSR set to: 0
 10327  01279C  0E00               	movlw	0
 10328  01279E  0100               	movlb	0	; () banked
 10329  0127A0  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10330  0127A2  0100               	movlb	0	; () banked
 10331  0127A4  6F64               	movwf	??___xxtofl& (0+255),b
 10332  0127A6  0E00               	movlw	0
 10333  0127A8  0100               	movlb	0	; () banked
 10334  0127AA  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10335  0127AC  0100               	movlb	0	; () banked
 10336  0127AE  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10337  0127B0  0E00               	movlw	0
 10338  0127B2  0100               	movlb	0	; () banked
 10339  0127B4  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10340  0127B6  0100               	movlb	0	; () banked
 10341  0127B8  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10342  0127BA  0EFE               	movlw	254
 10343  0127BC  0100               	movlb	0	; () banked
 10344  0127BE  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10345  0127C0  0100               	movlb	0	; () banked
 10346  0127C2  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10347  0127C4  0100               	movlb	0	; () banked
 10348  0127C6  5164               	movf	??___xxtofl& (0+255),w,b
 10349  0127C8  0100               	movlb	0	; () banked
 10350  0127CA  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10351  0127CC  0100               	movlb	0	; () banked
 10352  0127CE  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10353  0127D0  0100               	movlb	0	; () banked
 10354  0127D2  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10355  0127D4  B4D8               	btfsc	status,2,c
 10356  0127D6  D010               	goto	l2678
 10357  0127D8  D7D9               	goto	l12749
 10358  0127DA                     l12753:
 10359                           
 10360                           ; BSR set to: 0
 10361  0127DA  0100               	movlb	0	; () banked
 10362  0127DC  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10363                           
 10364                           ; BSR set to: 0
 10365  0127DE  0E01               	movlw	1
 10366  0127E0  0100               	movlb	0	; () banked
 10367  0127E2  276A               	addwf	___xxtofl@arg& (0+255),f,b
 10368  0127E4  0E00               	movlw	0
 10369  0127E6  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 10370  0127E8  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 10371  0127EA  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 10372                           
 10373                           ; BSR set to: 0
 10374  0127EC  0100               	movlb	0	; () banked
 10375  0127EE  90D8               	bcf	status,0,c
 10376  0127F0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10377  0127F2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10378  0127F4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10379  0127F6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10380  0127F8                     l2678:
 10381                           
 10382                           ; BSR set to: 0
 10383  0127F8  0E00               	movlw	0
 10384  0127FA  0100               	movlb	0	; () banked
 10385  0127FC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10386  0127FE  0100               	movlb	0	; () banked
 10387  012800  6F64               	movwf	??___xxtofl& (0+255),b
 10388  012802  0E00               	movlw	0
 10389  012804  0100               	movlb	0	; () banked
 10390  012806  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10391  012808  0100               	movlb	0	; () banked
 10392  01280A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10393  01280C  0E00               	movlw	0
 10394  01280E  0100               	movlb	0	; () banked
 10395  012810  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10396  012812  0100               	movlb	0	; () banked
 10397  012814  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10398  012816  0EFF               	movlw	255
 10399  012818  0100               	movlb	0	; () banked
 10400  01281A  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10401  01281C  0100               	movlb	0	; () banked
 10402  01281E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10403  012820  0100               	movlb	0	; () banked
 10404  012822  5164               	movf	??___xxtofl& (0+255),w,b
 10405  012824  0100               	movlb	0	; () banked
 10406  012826  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10407  012828  0100               	movlb	0	; () banked
 10408  01282A  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10409  01282C  0100               	movlb	0	; () banked
 10410  01282E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10411  012830  B4D8               	btfsc	status,2,c
 10412  012832  D009               	goto	l12761
 10413  012834  D7D2               	goto	l12753
 10414  012836                     l12759:
 10415                           
 10416                           ; BSR set to: 0
 10417  012836  0100               	movlb	0	; () banked
 10418  012838  0769               	decf	___xxtofl@exp& (0+255),f,b
 10419  01283A  0100               	movlb	0	; () banked
 10420  01283C  90D8               	bcf	status,0,c
 10421  01283E  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 10422  012840  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 10423  012842  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 10424  012844  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 10425  012846                     l12761:
 10426                           
 10427                           ; BSR set to: 0
 10428  012846  0100               	movlb	0	; () banked
 10429  012848  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 10430  01284A  D004               	goto	l2685
 10431                           
 10432                           ; BSR set to: 0
 10433  01284C  0E02               	movlw	2
 10434  01284E  0100               	movlb	0	; () banked
 10435  012850  6169               	cpfslt	___xxtofl@exp& (0+255),b
 10436  012852  D7F1               	goto	l12759
 10437  012854                     l2685:
 10438                           
 10439                           ; BSR set to: 0
 10440  012854  0100               	movlb	0	; () banked
 10441  012856  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 10442  012858  D009               	goto	l2686
 10443                           
 10444                           ; BSR set to: 0
 10445  01285A  0EFF               	movlw	255
 10446  01285C  0100               	movlb	0	; () banked
 10447  01285E  176A               	andwf	___xxtofl@arg& (0+255),f,b
 10448  012860  0EFF               	movlw	255
 10449  012862  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 10450  012864  0E7F               	movlw	127
 10451  012866  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 10452  012868  0EFF               	movlw	255
 10453  01286A  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 10454  01286C                     l2686:
 10455                           
 10456                           ; BSR set to: 0
 10457  01286C  0100               	movlb	0	; () banked
 10458  01286E  90D8               	bcf	status,0,c
 10459  012870  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 10460  012872  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 10461  012876  0100               	movlb	0	; () banked
 10462  012878  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 10463  01287A  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 10464  01287C  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 10465  01287E  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 10466  012882  0100               	movlb	0	; () banked
 10467  012884  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 10468  012886  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 10469  012888  6B64               	clrf	??___xxtofl& (0+255),b
 10470  01288A  0100               	movlb	0	; () banked
 10471  01288C  5164               	movf	??___xxtofl& (0+255),w,b
 10472  01288E  0100               	movlb	0	; () banked
 10473  012890  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 10474  012892  0100               	movlb	0	; () banked
 10475  012894  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 10476  012896  0100               	movlb	0	; () banked
 10477  012898  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 10478  01289A  0100               	movlb	0	; () banked
 10479  01289C  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 10480  01289E  0100               	movlb	0	; () banked
 10481  0128A0  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 10482  0128A2  0100               	movlb	0	; () banked
 10483  0128A4  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 10484  0128A6  0100               	movlb	0	; () banked
 10485  0128A8  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 10486                           
 10487                           ; BSR set to: 0
 10488  0128AA  0100               	movlb	0	; () banked
 10489  0128AC  5168               	movf	___xxtofl@sign& (0+255),w,b
 10490  0128AE  0100               	movlb	0	; () banked
 10491  0128B0  B4D8               	btfsc	status,2,c
 10492  0128B2  D005               	goto	l12773
 10493                           
 10494                           ; BSR set to: 0
 10495  0128B4  0100               	movlb	0	; () banked
 10496  0128B6  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10497  0128B8  D002               	goto	l12773
 10498                           
 10499                           ; BSR set to: 0
 10500  0128BA  0100               	movlb	0	; () banked
 10501  0128BC  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 10502  0128BE                     l12773:
 10503                           
 10504                           ; BSR set to: 0
 10505  0128BE  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 10506  0128C2  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 10507  0128C6  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 10508  0128CA  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 10509  0128CE  0012               	return	
 10510  0128D0                     __end_of___xxtofl:
 10511                           	opt stack 0
 10512                           tblptru	equ	0xFF8
 10513                           tblptrh	equ	0xFF7
 10514                           tblptrl	equ	0xFF6
 10515                           tablat	equ	0xFF5
 10516                           prodh	equ	0xFF4
 10517                           prodl	equ	0xFF3
 10518                           postinc0	equ	0xFEE
 10519                           wreg	equ	0xFE8
 10520                           postdec1	equ	0xFE5
 10521                           fsr1h	equ	0xFE2
 10522                           fsr1l	equ	0xFE1
 10523                           indf2	equ	0xFDF
 10524                           postinc2	equ	0xFDE
 10525                           postdec2	equ	0xFDD
 10526                           fsr2h	equ	0xFDA
 10527                           fsr2l	equ	0xFD9
 10528                           status	equ	0xFD8
 10529                           
 10530 ;; *************** function ___flmul *****************
 10531 ;; Defined at:
 10532 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcmul.c"
 10533 ;; Parameters:    Size  Location     Type
 10534 ;;  b               4   14[BANK0 ] unsigned char 
 10535 ;;  a               4   18[BANK0 ] unsigned char 
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;  prod            4   33[BANK0 ] struct .
 10538 ;;  grs             4   28[BANK0 ] unsigned long 
 10539 ;;  temp            2   37[BANK0 ] struct .
 10540 ;;  bexp            1   32[BANK0 ] unsigned char 
 10541 ;;  aexp            1   27[BANK0 ] unsigned char 
 10542 ;;  sign            1   26[BANK0 ] unsigned char 
 10543 ;; Return value:  Size  Location     Type
 10544 ;;                  4   14[BANK0 ] unsigned char 
 10545 ;; Registers used:
 10546 ;;		wreg, status,2, status,0, prodl, prodh
 10547 ;; Tracked objects:
 10548 ;;		On entry : 0/0
 10549 ;;		On exit  : 0/0
 10550 ;;		Unchanged: 0/0
 10551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10552 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10553 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10555 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10556 ;;Total ram usage:       25 bytes
 10557 ;; Hardware stack levels used:    1
 10558 ;; Hardware stack levels required when called:    7
 10559 ;; This function calls:
 10560 ;;		Nothing
 10561 ;; This function is called by:
 10562 ;;		_ADC_Voltage
 10563 ;;		_printToScreen
 10564 ;;		_pow
 10565 ;;		_exp
 10566 ;;		_log
 10567 ;;		_eval_poly
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           	psect	text36
 10572  0104A8                     __ptext36:
 10573                           	opt stack 0
 10574  0104A8                     ___flmul:
 10575                           	opt stack 19
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;incstack = 0
 10579  0104A8  0100               	movlb	0	; () banked
 10580  0104AA  5171               	movf	(___flmul@b+3)& (0+255),w,b
 10581  0104AC  0B80               	andlw	128
 10582  0104AE  0100               	movlb	0	; () banked
 10583  0104B0  6F7A               	movwf	___flmul@sign& (0+255),b
 10584  0104B2  0100               	movlb	0	; () banked
 10585  0104B4  5171               	movf	(___flmul@b+3)& (0+255),w,b
 10586  0104B6  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 10587  0104B8  0100               	movlb	0	; () banked
 10588  0104BA  6F80               	movwf	___flmul@bexp& (0+255),b
 10589                           
 10590                           ; BSR set to: 0
 10591  0104BC  0100               	movlb	0	; () banked
 10592  0104BE  AF70               	btfss	(___flmul@b+2)& (0+255),7,b
 10593  0104C0  D002               	goto	l12545
 10594                           
 10595                           ; BSR set to: 0
 10596  0104C2  0100               	movlb	0	; () banked
 10597  0104C4  8180               	bsf	___flmul@bexp& (0+255),0,b
 10598  0104C6                     l12545:
 10599                           
 10600                           ; BSR set to: 0
 10601  0104C6  0100               	movlb	0	; () banked
 10602  0104C8  5180               	movf	___flmul@bexp& (0+255),w,b
 10603  0104CA  0100               	movlb	0	; () banked
 10604  0104CC  B4D8               	btfsc	status,2,c
 10605  0104CE  D010               	goto	l12553
 10606                           
 10607                           ; BSR set to: 0
 10608  0104D0  0100               	movlb	0	; () banked
 10609  0104D2  2980               	incf	___flmul@bexp& (0+255),w,b
 10610  0104D4  A4D8               	btfss	status,2,c
 10611  0104D6  D009               	goto	l12551
 10612                           
 10613                           ; BSR set to: 0
 10614  0104D8  0E00               	movlw	0
 10615  0104DA  0100               	movlb	0	; () banked
 10616  0104DC  6F6E               	movwf	___flmul@b& (0+255),b
 10617  0104DE  0E00               	movlw	0
 10618  0104E0  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 10619  0104E2  0E00               	movlw	0
 10620  0104E4  6F70               	movwf	(___flmul@b+2)& (0+255),b
 10621  0104E6  0E00               	movlw	0
 10622  0104E8  6F71               	movwf	(___flmul@b+3)& (0+255),b
 10623  0104EA                     l12551:
 10624                           
 10625                           ; BSR set to: 0
 10626  0104EA  0100               	movlb	0	; () banked
 10627  0104EC  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 10628  0104EE  D009               	goto	l12555
 10629  0104F0                     l12553:
 10630                           
 10631                           ; BSR set to: 0
 10632  0104F0  0E00               	movlw	0
 10633  0104F2  0100               	movlb	0	; () banked
 10634  0104F4  6F6E               	movwf	___flmul@b& (0+255),b
 10635  0104F6  0E00               	movlw	0
 10636  0104F8  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 10637  0104FA  0E00               	movlw	0
 10638  0104FC  6F70               	movwf	(___flmul@b+2)& (0+255),b
 10639  0104FE  0E00               	movlw	0
 10640  010500  6F71               	movwf	(___flmul@b+3)& (0+255),b
 10641  010502                     l12555:
 10642                           
 10643                           ; BSR set to: 0
 10644  010502  0100               	movlb	0	; () banked
 10645  010504  5175               	movf	(___flmul@a+3)& (0+255),w,b
 10646  010506  0B80               	andlw	128
 10647  010508  0100               	movlb	0	; () banked
 10648  01050A  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 10649                           
 10650                           ; BSR set to: 0
 10651  01050C  0100               	movlb	0	; () banked
 10652  01050E  5175               	movf	(___flmul@a+3)& (0+255),w,b
 10653  010510  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 10654  010512  0100               	movlb	0	; () banked
 10655  010514  6F7B               	movwf	___flmul@aexp& (0+255),b
 10656                           
 10657                           ; BSR set to: 0
 10658  010516  0100               	movlb	0	; () banked
 10659  010518  AF74               	btfss	(___flmul@a+2)& (0+255),7,b
 10660  01051A  D002               	goto	l12563
 10661                           
 10662                           ; BSR set to: 0
 10663  01051C  0100               	movlb	0	; () banked
 10664  01051E  817B               	bsf	___flmul@aexp& (0+255),0,b
 10665  010520                     l12563:
 10666                           
 10667                           ; BSR set to: 0
 10668  010520  0100               	movlb	0	; () banked
 10669  010522  517B               	movf	___flmul@aexp& (0+255),w,b
 10670  010524  0100               	movlb	0	; () banked
 10671  010526  B4D8               	btfsc	status,2,c
 10672  010528  D010               	goto	l12571
 10673                           
 10674                           ; BSR set to: 0
 10675  01052A  0100               	movlb	0	; () banked
 10676  01052C  297B               	incf	___flmul@aexp& (0+255),w,b
 10677  01052E  A4D8               	btfss	status,2,c
 10678  010530  D009               	goto	l12569
 10679                           
 10680                           ; BSR set to: 0
 10681  010532  0E00               	movlw	0
 10682  010534  0100               	movlb	0	; () banked
 10683  010536  6F72               	movwf	___flmul@a& (0+255),b
 10684  010538  0E00               	movlw	0
 10685  01053A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 10686  01053C  0E00               	movlw	0
 10687  01053E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 10688  010540  0E00               	movlw	0
 10689  010542  6F75               	movwf	(___flmul@a+3)& (0+255),b
 10690  010544                     l12569:
 10691                           
 10692                           ; BSR set to: 0
 10693  010544  0100               	movlb	0	; () banked
 10694  010546  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 10695  010548  D009               	goto	l2649
 10696  01054A                     l12571:
 10697                           
 10698                           ; BSR set to: 0
 10699  01054A  0E00               	movlw	0
 10700  01054C  0100               	movlb	0	; () banked
 10701  01054E  6F72               	movwf	___flmul@a& (0+255),b
 10702  010550  0E00               	movlw	0
 10703  010552  6F73               	movwf	(___flmul@a+1)& (0+255),b
 10704  010554  0E00               	movlw	0
 10705  010556  6F74               	movwf	(___flmul@a+2)& (0+255),b
 10706  010558  0E00               	movlw	0
 10707  01055A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 10708  01055C                     l2649:
 10709                           
 10710                           ; BSR set to: 0
 10711  01055C  0100               	movlb	0	; () banked
 10712  01055E  517B               	movf	___flmul@aexp& (0+255),w,b
 10713  010560  0100               	movlb	0	; () banked
 10714  010562  B4D8               	btfsc	status,2,c
 10715  010564  D005               	goto	l12575
 10716                           
 10717                           ; BSR set to: 0
 10718  010566  0100               	movlb	0	; () banked
 10719  010568  5180               	movf	___flmul@bexp& (0+255),w,b
 10720  01056A  0100               	movlb	0	; () banked
 10721  01056C  A4D8               	btfss	status,2,c
 10722  01056E  D00A               	goto	l12579
 10723  010570                     l12575:
 10724                           
 10725                           ; BSR set to: 0
 10726  010570  0E00               	movlw	0
 10727  010572  0100               	movlb	0	; () banked
 10728  010574  6F6E               	movwf	?___flmul& (0+255),b
 10729  010576  0E00               	movlw	0
 10730  010578  6F6F               	movwf	(?___flmul+1)& (0+255),b
 10731  01057A  0E00               	movlw	0
 10732  01057C  6F70               	movwf	(?___flmul+2)& (0+255),b
 10733  01057E  0E00               	movlw	0
 10734  010580  6F71               	movwf	(?___flmul+3)& (0+255),b
 10735                           
 10736                           ; BSR set to: 0
 10737  010582  0012               	return	
 10738  010584                     l12579:
 10739                           
 10740                           ; BSR set to: 0
 10741  010584  0100               	movlb	0	; () banked
 10742  010586  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10743  010588  0100               	movlb	0	; () banked
 10744  01058A  036E               	mulwf	___flmul@b& (0+255),b
 10745  01058C  CFF3 F085          	movff	prodl,___flmul@temp
 10746  010590  CFF4 F086          	movff	prodh,___flmul@temp+1
 10747                           
 10748                           ; BSR set to: 0
 10749  010594  0100               	movlb	0	; () banked
 10750  010596  5185               	movf	___flmul@temp& (0+255),w,b
 10751  010598  0100               	movlb	0	; () banked
 10752  01059A  6F7C               	movwf	___flmul@grs& (0+255),b
 10753  01059C  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 10754  01059E  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 10755  0105A0  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 10756                           
 10757                           ; BSR set to: 0
 10758  0105A2  0100               	movlb	0	; () banked
 10759  0105A4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10760  0105A6  0100               	movlb	0	; () banked
 10761  0105A8  6F81               	movwf	___flmul@prod& (0+255),b
 10762  0105AA  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 10763  0105AC  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 10764  0105AE  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 10765  0105B0  0100               	movlb	0	; () banked
 10766  0105B2  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10767  0105B4  0100               	movlb	0	; () banked
 10768  0105B6  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10769  0105B8  CFF3 F085          	movff	prodl,___flmul@temp
 10770  0105BC  CFF4 F086          	movff	prodh,___flmul@temp+1
 10771                           
 10772                           ; BSR set to: 0
 10773  0105C0  0100               	movlb	0	; () banked
 10774  0105C2  5185               	movf	___flmul@temp& (0+255),w,b
 10775  0105C4  0100               	movlb	0	; () banked
 10776  0105C6  277C               	addwf	___flmul@grs& (0+255),f,b
 10777  0105C8  0E00               	movlw	0
 10778  0105CA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10779  0105CC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10780  0105CE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10781                           
 10782                           ; BSR set to: 0
 10783  0105D0  0100               	movlb	0	; () banked
 10784  0105D2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10785  0105D4  0100               	movlb	0	; () banked
 10786  0105D6  2781               	addwf	___flmul@prod& (0+255),f,b
 10787  0105D8  0E00               	movlw	0
 10788  0105DA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10789  0105DC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10790  0105DE  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10791  0105E0  0100               	movlb	0	; () banked
 10792  0105E2  5172               	movf	___flmul@a& (0+255),w,b
 10793  0105E4  0100               	movlb	0	; () banked
 10794  0105E6  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10795  0105E8  CFF3 F085          	movff	prodl,___flmul@temp
 10796  0105EC  CFF4 F086          	movff	prodh,___flmul@temp+1
 10797                           
 10798                           ; BSR set to: 0
 10799  0105F0  0100               	movlb	0	; () banked
 10800  0105F2  5185               	movf	___flmul@temp& (0+255),w,b
 10801  0105F4  0100               	movlb	0	; () banked
 10802  0105F6  277C               	addwf	___flmul@grs& (0+255),f,b
 10803  0105F8  0E00               	movlw	0
 10804  0105FA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10805  0105FC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10806  0105FE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10807                           
 10808                           ; BSR set to: 0
 10809  010600  0100               	movlb	0	; () banked
 10810  010602  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10811  010604  0100               	movlb	0	; () banked
 10812  010606  2781               	addwf	___flmul@prod& (0+255),f,b
 10813  010608  0E00               	movlw	0
 10814  01060A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10815  01060C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10816  01060E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10817                           
 10818                           ; BSR set to: 0
 10819  010610  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10820  010614  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10821  010618  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10822  01061C  0100               	movlb	0	; () banked
 10823  01061E  6B7C               	clrf	___flmul@grs& (0+255),b
 10824                           
 10825                           ; BSR set to: 0
 10826  010620  0100               	movlb	0	; () banked
 10827  010622  5172               	movf	___flmul@a& (0+255),w,b
 10828  010624  0100               	movlb	0	; () banked
 10829  010626  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10830  010628  CFF3 F085          	movff	prodl,___flmul@temp
 10831  01062C  CFF4 F086          	movff	prodh,___flmul@temp+1
 10832                           
 10833                           ; BSR set to: 0
 10834  010630  0100               	movlb	0	; () banked
 10835  010632  5185               	movf	___flmul@temp& (0+255),w,b
 10836  010634  0100               	movlb	0	; () banked
 10837  010636  277C               	addwf	___flmul@grs& (0+255),f,b
 10838  010638  0100               	movlb	0	; () banked
 10839  01063A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10840  01063C  0100               	movlb	0	; () banked
 10841  01063E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10842  010640  0E00               	movlw	0
 10843  010642  0100               	movlb	0	; () banked
 10844  010644  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10845  010646  0E00               	movlw	0
 10846  010648  0100               	movlb	0	; () banked
 10847  01064A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10848                           
 10849                           ; BSR set to: 0
 10850  01064C  0100               	movlb	0	; () banked
 10851  01064E  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10852  010650  0100               	movlb	0	; () banked
 10853  010652  036E               	mulwf	___flmul@b& (0+255),b
 10854  010654  CFF3 F085          	movff	prodl,___flmul@temp
 10855  010658  CFF4 F086          	movff	prodh,___flmul@temp+1
 10856                           
 10857                           ; BSR set to: 0
 10858  01065C  0100               	movlb	0	; () banked
 10859  01065E  5185               	movf	___flmul@temp& (0+255),w,b
 10860  010660  0100               	movlb	0	; () banked
 10861  010662  277C               	addwf	___flmul@grs& (0+255),f,b
 10862  010664  0100               	movlb	0	; () banked
 10863  010666  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10864  010668  0100               	movlb	0	; () banked
 10865  01066A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10866  01066C  0E00               	movlw	0
 10867  01066E  0100               	movlb	0	; () banked
 10868  010670  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10869  010672  0E00               	movlw	0
 10870  010674  0100               	movlb	0	; () banked
 10871  010676  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10872                           
 10873                           ; BSR set to: 0
 10874  010678  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10875  01067C  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10876  010680  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10877  010684  0100               	movlb	0	; () banked
 10878  010686  6B7C               	clrf	___flmul@grs& (0+255),b
 10879  010688  0100               	movlb	0	; () banked
 10880  01068A  5172               	movf	___flmul@a& (0+255),w,b
 10881  01068C  0100               	movlb	0	; () banked
 10882  01068E  036E               	mulwf	___flmul@b& (0+255),b
 10883  010690  CFF3 F085          	movff	prodl,___flmul@temp
 10884  010694  CFF4 F086          	movff	prodh,___flmul@temp+1
 10885                           
 10886                           ; BSR set to: 0
 10887  010698  0100               	movlb	0	; () banked
 10888  01069A  5185               	movf	___flmul@temp& (0+255),w,b
 10889  01069C  0100               	movlb	0	; () banked
 10890  01069E  277C               	addwf	___flmul@grs& (0+255),f,b
 10891  0106A0  0100               	movlb	0	; () banked
 10892  0106A2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10893  0106A4  0100               	movlb	0	; () banked
 10894  0106A6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10895  0106A8  0E00               	movlw	0
 10896  0106AA  0100               	movlb	0	; () banked
 10897  0106AC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10898  0106AE  0E00               	movlw	0
 10899  0106B0  0100               	movlb	0	; () banked
 10900  0106B2  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10901                           
 10902                           ; BSR set to: 0
 10903  0106B4  0100               	movlb	0	; () banked
 10904  0106B6  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10905  0106B8  0100               	movlb	0	; () banked
 10906  0106BA  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10907  0106BC  CFF3 F085          	movff	prodl,___flmul@temp
 10908  0106C0  CFF4 F086          	movff	prodh,___flmul@temp+1
 10909  0106C4  0100               	movlb	0	; () banked
 10910  0106C6  5185               	movf	___flmul@temp& (0+255),w,b
 10911  0106C8  0100               	movlb	0	; () banked
 10912  0106CA  2781               	addwf	___flmul@prod& (0+255),f,b
 10913  0106CC  0100               	movlb	0	; () banked
 10914  0106CE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10915  0106D0  0100               	movlb	0	; () banked
 10916  0106D2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10917  0106D4  0E00               	movlw	0
 10918  0106D6  0100               	movlb	0	; () banked
 10919  0106D8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10920  0106DA  0E00               	movlw	0
 10921  0106DC  0100               	movlb	0	; () banked
 10922  0106DE  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10923                           
 10924                           ; BSR set to: 0
 10925  0106E0  0100               	movlb	0	; () banked
 10926  0106E2  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10927  0106E4  0100               	movlb	0	; () banked
 10928  0106E6  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10929  0106E8  CFF3 F085          	movff	prodl,___flmul@temp
 10930  0106EC  CFF4 F086          	movff	prodh,___flmul@temp+1
 10931                           
 10932                           ; BSR set to: 0
 10933  0106F0  0100               	movlb	0	; () banked
 10934  0106F2  5185               	movf	___flmul@temp& (0+255),w,b
 10935  0106F4  0100               	movlb	0	; () banked
 10936  0106F6  2781               	addwf	___flmul@prod& (0+255),f,b
 10937  0106F8  0100               	movlb	0	; () banked
 10938  0106FA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10939  0106FC  0100               	movlb	0	; () banked
 10940  0106FE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10941  010700  0E00               	movlw	0
 10942  010702  0100               	movlb	0	; () banked
 10943  010704  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10944  010706  0E00               	movlw	0
 10945  010708  0100               	movlb	0	; () banked
 10946  01070A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10947  01070C  0100               	movlb	0	; () banked
 10948  01070E  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10949  010710  0100               	movlb	0	; () banked
 10950  010712  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10951  010714  CFF3 F085          	movff	prodl,___flmul@temp
 10952  010718  CFF4 F086          	movff	prodh,___flmul@temp+1
 10953                           
 10954                           ; BSR set to: 0
 10955  01071C  0100               	movlb	0	; () banked
 10956  01071E  5185               	movf	___flmul@temp& (0+255),w,b
 10957  010720  0100               	movlb	0	; () banked
 10958  010722  6F76               	movwf	??___flmul& (0+255),b
 10959  010724  0100               	movlb	0	; () banked
 10960  010726  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10961  010728  0100               	movlb	0	; () banked
 10962  01072A  6F77               	movwf	(??___flmul+1)& (0+255),b
 10963  01072C  0100               	movlb	0	; () banked
 10964  01072E  6B78               	clrf	(??___flmul+2)& (0+255),b
 10965  010730  0100               	movlb	0	; () banked
 10966  010732  6B79               	clrf	(??___flmul+3)& (0+255),b
 10967  010734  C078  F079         	movff	??___flmul+2,??___flmul+3
 10968  010738  C077  F078         	movff	??___flmul+1,??___flmul+2
 10969  01073C  C076  F077         	movff	??___flmul,??___flmul+1
 10970  010740  0100               	movlb	0	; () banked
 10971  010742  6B76               	clrf	??___flmul& (0+255),b
 10972  010744  0100               	movlb	0	; () banked
 10973  010746  5176               	movf	??___flmul& (0+255),w,b
 10974  010748  0100               	movlb	0	; () banked
 10975  01074A  2781               	addwf	___flmul@prod& (0+255),f,b
 10976  01074C  0100               	movlb	0	; () banked
 10977  01074E  5177               	movf	(??___flmul+1)& (0+255),w,b
 10978  010750  0100               	movlb	0	; () banked
 10979  010752  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10980  010754  0100               	movlb	0	; () banked
 10981  010756  5178               	movf	(??___flmul+2)& (0+255),w,b
 10982  010758  0100               	movlb	0	; () banked
 10983  01075A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10984  01075C  0100               	movlb	0	; () banked
 10985  01075E  5179               	movf	(??___flmul+3)& (0+255),w,b
 10986  010760  0100               	movlb	0	; () banked
 10987  010762  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10988                           
 10989                           ; BSR set to: 0
 10990  010764  C07C  F076         	movff	___flmul@grs,??___flmul
 10991  010768  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 10992  01076C  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 10993  010770  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 10994  010774  0E19               	movlw	25
 10995  010776  D006               	goto	u10180
 10996  010778                     u10185:
 10997  010778  0100               	movlb	0	; () banked
 10998  01077A  90D8               	bcf	status,0,c
 10999  01077C  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 11000  01077E  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 11001  010780  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 11002  010782  3376               	rrcf	??___flmul& (0+255),f,b
 11003  010784                     u10180:
 11004  010784  2EE8               	decfsz	wreg,f,c
 11005  010786  D7F8               	goto	u10185
 11006  010788  0100               	movlb	0	; () banked
 11007  01078A  5176               	movf	??___flmul& (0+255),w,b
 11008  01078C  0100               	movlb	0	; () banked
 11009  01078E  2781               	addwf	___flmul@prod& (0+255),f,b
 11010  010790  0100               	movlb	0	; () banked
 11011  010792  5177               	movf	(??___flmul+1)& (0+255),w,b
 11012  010794  0100               	movlb	0	; () banked
 11013  010796  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11014  010798  0100               	movlb	0	; () banked
 11015  01079A  5178               	movf	(??___flmul+2)& (0+255),w,b
 11016  01079C  0100               	movlb	0	; () banked
 11017  01079E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11018  0107A0  0100               	movlb	0	; () banked
 11019  0107A2  5179               	movf	(??___flmul+3)& (0+255),w,b
 11020  0107A4  0100               	movlb	0	; () banked
 11021  0107A6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11022                           
 11023                           ; BSR set to: 0
 11024  0107A8  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 11025  0107AC  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 11026  0107B0  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 11027  0107B4  0100               	movlb	0	; () banked
 11028  0107B6  6B7C               	clrf	___flmul@grs& (0+255),b
 11029                           
 11030                           ; BSR set to: 0
 11031  0107B8  0100               	movlb	0	; () banked
 11032  0107BA  517B               	movf	___flmul@aexp& (0+255),w,b
 11033  0107BC  C080  F076         	movff	___flmul@bexp,??___flmul
 11034  0107C0  0100               	movlb	0	; () banked
 11035  0107C2  6B77               	clrf	(??___flmul+1)& (0+255),b
 11036  0107C4  0100               	movlb	0	; () banked
 11037  0107C6  2776               	addwf	??___flmul& (0+255),f,b
 11038  0107C8  0E00               	movlw	0
 11039  0107CA  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 11040  0107CC  0E82               	movlw	130
 11041  0107CE  0100               	movlb	0	; () banked
 11042  0107D0  2576               	addwf	??___flmul& (0+255),w,b
 11043  0107D2  0100               	movlb	0	; () banked
 11044  0107D4  6F85               	movwf	___flmul@temp& (0+255),b
 11045  0107D6  0EFF               	movlw	255
 11046  0107D8  0100               	movlb	0	; () banked
 11047  0107DA  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 11048  0107DC  0100               	movlb	0	; () banked
 11049  0107DE  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 11050  0107E0  D015               	goto	l12627
 11051  0107E2                     l12621:
 11052                           
 11053                           ; BSR set to: 0
 11054  0107E2  0100               	movlb	0	; () banked
 11055  0107E4  90D8               	bcf	status,0,c
 11056  0107E6  3781               	rlcf	___flmul@prod& (0+255),f,b
 11057  0107E8  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11058  0107EA  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11059  0107EC  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11060                           
 11061                           ; BSR set to: 0
 11062  0107EE  0100               	movlb	0	; () banked
 11063  0107F0  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 11064  0107F2  D002               	goto	l2656
 11065                           
 11066                           ; BSR set to: 0
 11067  0107F4  0100               	movlb	0	; () banked
 11068  0107F6  8181               	bsf	___flmul@prod& (0+255),0,b
 11069  0107F8                     l2656:
 11070                           
 11071                           ; BSR set to: 0
 11072  0107F8  0100               	movlb	0	; () banked
 11073  0107FA  90D8               	bcf	status,0,c
 11074  0107FC  377C               	rlcf	___flmul@grs& (0+255),f,b
 11075  0107FE  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11076  010800  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11077  010802  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11078  010804  0100               	movlb	0	; () banked
 11079  010806  0785               	decf	___flmul@temp& (0+255),f,b
 11080  010808  A0D8               	btfss	status,0,c
 11081  01080A  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 11082  01080C                     l12627:
 11083                           
 11084                           ; BSR set to: 0
 11085  01080C  0100               	movlb	0	; () banked
 11086  01080E  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 11087  010810  D7E8               	goto	l12621
 11088                           
 11089                           ; BSR set to: 0
 11090                           
 11091                           ; BSR set to: 0
 11092  010812  0E00               	movlw	0
 11093  010814  0100               	movlb	0	; () banked
 11094  010816  6F7B               	movwf	___flmul@aexp& (0+255),b
 11095                           
 11096                           ; BSR set to: 0
 11097  010818  0100               	movlb	0	; () banked
 11098  01081A  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 11099  01081C  D024               	goto	l2658
 11100                           
 11101                           ; BSR set to: 0
 11102  01081E  0EFF               	movlw	255
 11103  010820  0100               	movlb	0	; () banked
 11104  010822  157C               	andwf	___flmul@grs& (0+255),w,b
 11105  010824  0100               	movlb	0	; () banked
 11106  010826  6F76               	movwf	??___flmul& (0+255),b
 11107  010828  0EFF               	movlw	255
 11108  01082A  0100               	movlb	0	; () banked
 11109  01082C  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 11110  01082E  0100               	movlb	0	; () banked
 11111  010830  6F77               	movwf	(??___flmul+1)& (0+255),b
 11112  010832  0EFF               	movlw	255
 11113  010834  0100               	movlb	0	; () banked
 11114  010836  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 11115  010838  0100               	movlb	0	; () banked
 11116  01083A  6F78               	movwf	(??___flmul+2)& (0+255),b
 11117  01083C  0E7F               	movlw	127
 11118  01083E  0100               	movlb	0	; () banked
 11119  010840  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 11120  010842  0100               	movlb	0	; () banked
 11121  010844  6F79               	movwf	(??___flmul+3)& (0+255),b
 11122  010846  0100               	movlb	0	; () banked
 11123  010848  5176               	movf	??___flmul& (0+255),w,b
 11124  01084A  0100               	movlb	0	; () banked
 11125  01084C  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 11126  01084E  0100               	movlb	0	; () banked
 11127  010850  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 11128  010852  0100               	movlb	0	; () banked
 11129  010854  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 11130  010856  A4D8               	btfss	status,2,c
 11131  010858  D003               	goto	l12637
 11132                           
 11133                           ; BSR set to: 0
 11134                           
 11135                           ; BSR set to: 0
 11136  01085A  0100               	movlb	0	; () banked
 11137  01085C  A181               	btfss	___flmul@prod& (0+255),0,b
 11138  01085E  D003               	goto	l2658
 11139  010860                     l12637:
 11140                           
 11141                           ; BSR set to: 0
 11142  010860  0E01               	movlw	1
 11143  010862  0100               	movlb	0	; () banked
 11144  010864  6F7B               	movwf	___flmul@aexp& (0+255),b
 11145  010866                     l2658:
 11146                           
 11147                           ; BSR set to: 0
 11148  010866  0100               	movlb	0	; () banked
 11149  010868  517B               	movf	___flmul@aexp& (0+255),w,b
 11150  01086A  0100               	movlb	0	; () banked
 11151  01086C  B4D8               	btfsc	status,2,c
 11152  01086E  D023               	goto	l12647
 11153                           
 11154                           ; BSR set to: 0
 11155  010870  0E01               	movlw	1
 11156  010872  0100               	movlb	0	; () banked
 11157  010874  2781               	addwf	___flmul@prod& (0+255),f,b
 11158  010876  0E00               	movlw	0
 11159  010878  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11160  01087A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11161  01087C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11162                           
 11163                           ; BSR set to: 0
 11164  01087E  0100               	movlb	0	; () banked
 11165  010880  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 11166  010882  D019               	goto	l12647
 11167                           
 11168                           ; BSR set to: 0
 11169  010884  C081  F076         	movff	___flmul@prod,??___flmul
 11170  010888  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 11171  01088C  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 11172  010890  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 11173  010894  0100               	movlb	0	; () banked
 11174  010896  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 11175  010898  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 11176  01089A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 11177  01089C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 11178  01089E  3376               	rrcf	??___flmul& (0+255),f,b
 11179  0108A0  C076  F081         	movff	??___flmul,___flmul@prod
 11180  0108A4  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 11181  0108A8  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 11182  0108AC  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 11183                           
 11184                           ; BSR set to: 0
 11185  0108B0  0100               	movlb	0	; () banked
 11186  0108B2  4B85               	infsnz	___flmul@temp& (0+255),f,b
 11187  0108B4  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 11188  0108B6                     l12647:
 11189                           
 11190                           ; BSR set to: 0
 11191  0108B6  0100               	movlb	0	; () banked
 11192  0108B8  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11193  0108BA  D010               	goto	l12651
 11194  0108BC  0100               	movlb	0	; () banked
 11195  0108BE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 11196  0108C0  E104               	bnz	u10260
 11197  0108C2  0100               	movlb	0	; () banked
 11198  0108C4  2985               	incf	___flmul@temp& (0+255),w,b
 11199  0108C6  A0D8               	btfss	status,0,c
 11200  0108C8  D009               	goto	l12651
 11201  0108CA                     u10260:
 11202                           
 11203                           ; BSR set to: 0
 11204  0108CA  0E00               	movlw	0
 11205  0108CC  0100               	movlb	0	; () banked
 11206  0108CE  6F81               	movwf	___flmul@prod& (0+255),b
 11207  0108D0  0E00               	movlw	0
 11208  0108D2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 11209  0108D4  0E80               	movlw	128
 11210  0108D6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 11211  0108D8  0E7F               	movlw	127
 11212  0108DA  D02B               	goto	L6
 11213  0108DC                     l12651:
 11214                           
 11215                           ; BSR set to: 0
 11216  0108DC  0100               	movlb	0	; () banked
 11217  0108DE  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11218  0108E0  D007               	goto	l12653
 11219  0108E2  0100               	movlb	0	; () banked
 11220  0108E4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 11221  0108E6  E111               	bnz	l2666
 11222  0108E8  0100               	movlb	0	; () banked
 11223  0108EA  0585               	decf	___flmul@temp& (0+255),w,b
 11224  0108EC  B0D8               	btfsc	status,0,c
 11225  0108EE  D00D               	goto	l2666
 11226  0108F0                     l12653:
 11227                           
 11228                           ; BSR set to: 0
 11229  0108F0  0E00               	movlw	0
 11230  0108F2  0100               	movlb	0	; () banked
 11231  0108F4  6F81               	movwf	___flmul@prod& (0+255),b
 11232  0108F6  0E00               	movlw	0
 11233  0108F8  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 11234  0108FA  0E00               	movlw	0
 11235  0108FC  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 11236  0108FE  0E00               	movlw	0
 11237  010900  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 11238  010902  0E00               	movlw	0
 11239  010904  0100               	movlb	0	; () banked
 11240  010906  6F7A               	movwf	___flmul@sign& (0+255),b
 11241  010908  D015               	goto	l12663
 11242  01090A                     l2666:
 11243                           
 11244                           ; BSR set to: 0
 11245  01090A  C085  F080         	movff	___flmul@temp,___flmul@bexp
 11246                           
 11247                           ; BSR set to: 0
 11248  01090E  0EFF               	movlw	255
 11249  010910  0100               	movlb	0	; () banked
 11250  010912  1781               	andwf	___flmul@prod& (0+255),f,b
 11251  010914  0EFF               	movlw	255
 11252  010916  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 11253  010918  0E7F               	movlw	127
 11254  01091A  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 11255  01091C  0E00               	movlw	0
 11256  01091E  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 11257                           
 11258                           ; BSR set to: 0
 11259  010920  0100               	movlb	0	; () banked
 11260  010922  A180               	btfss	___flmul@bexp& (0+255),0,b
 11261  010924  D002               	goto	l12661
 11262                           
 11263                           ; BSR set to: 0
 11264  010926  0100               	movlb	0	; () banked
 11265  010928  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 11266  01092A                     l12661:
 11267                           
 11268                           ; BSR set to: 0
 11269  01092A  0100               	movlb	0	; () banked
 11270  01092C  90D8               	bcf	status,0,c
 11271  01092E  3180               	rrcf	___flmul@bexp& (0+255),w,b
 11272  010930  0100               	movlb	0	; () banked
 11273  010932                     L6:
 11274  010932  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 11275  010934                     l12663:
 11276                           
 11277                           ; BSR set to: 0
 11278  010934  0100               	movlb	0	; () banked
 11279  010936  517A               	movf	___flmul@sign& (0+255),w,b
 11280  010938  0100               	movlb	0	; () banked
 11281  01093A  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11282                           
 11283                           ; BSR set to: 0
 11284  01093C  C081  F06E         	movff	___flmul@prod,?___flmul
 11285  010940  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 11286  010944  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 11287  010948  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 11288  01094C  0012               	return	
 11289  01094E                     __end_of___flmul:
 11290                           	opt stack 0
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           postinc0	equ	0xFEE
 11298                           wreg	equ	0xFE8
 11299                           postdec1	equ	0xFE5
 11300                           fsr1h	equ	0xFE2
 11301                           fsr1l	equ	0xFE1
 11302                           indf2	equ	0xFDF
 11303                           postinc2	equ	0xFDE
 11304                           postdec2	equ	0xFDD
 11305                           fsr2h	equ	0xFDA
 11306                           fsr2l	equ	0xFD9
 11307                           status	equ	0xFD8
 11308                           
 11309 ;; *************** function ___fldiv *****************
 11310 ;; Defined at:
 11311 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcdiv.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;  b               4    0[BANK0 ] unsigned char 
 11314 ;;  a               4    4[BANK0 ] unsigned char 
 11315 ;; Auto vars:     Size  Location     Type
 11316 ;;  grs             4   19[BANK0 ] unsigned long 
 11317 ;;  rem             4   13[BANK0 ] unsigned long 
 11318 ;;  new_exp         2   17[BANK0 ] int 
 11319 ;;  aexp            1   24[BANK0 ] unsigned char 
 11320 ;;  bexp            1   23[BANK0 ] unsigned char 
 11321 ;;  sign            1   12[BANK0 ] unsigned char 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  4    0[BANK0 ] unsigned char 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11331 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11332 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11333 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;Total ram usage:       25 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    7
 11338 ;; This function calls:
 11339 ;;		Nothing
 11340 ;; This function is called by:
 11341 ;;		_ADC_Voltage
 11342 ;;		_exp
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           	psect	text37
 11347  010D6C                     __ptext37:
 11348                           	opt stack 0
 11349  010D6C                     ___fldiv:
 11350                           	opt stack 20
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;incstack = 0
 11354  010D6C  0100               	movlb	0	; () banked
 11355  010D6E  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 11356  010D70  0B80               	andlw	128
 11357  010D72  0100               	movlb	0	; () banked
 11358  010D74  6F6C               	movwf	___fldiv@sign& (0+255),b
 11359  010D76  0100               	movlb	0	; () banked
 11360  010D78  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 11361  010D7A  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 11362  010D7C  0100               	movlb	0	; () banked
 11363  010D7E  6F77               	movwf	___fldiv@bexp& (0+255),b
 11364                           
 11365                           ; BSR set to: 0
 11366  010D80  0100               	movlb	0	; () banked
 11367  010D82  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 11368  010D84  D002               	goto	l13305
 11369                           
 11370                           ; BSR set to: 0
 11371  010D86  0100               	movlb	0	; () banked
 11372  010D88  8177               	bsf	___fldiv@bexp& (0+255),0,b
 11373  010D8A                     l13305:
 11374                           
 11375                           ; BSR set to: 0
 11376  010D8A  0100               	movlb	0	; () banked
 11377  010D8C  5177               	movf	___fldiv@bexp& (0+255),w,b
 11378  010D8E  0100               	movlb	0	; () banked
 11379  010D90  B4D8               	btfsc	status,2,c
 11380  010D92  D012               	goto	l13315
 11381                           
 11382                           ; BSR set to: 0
 11383  010D94  0100               	movlb	0	; () banked
 11384  010D96  2977               	incf	___fldiv@bexp& (0+255),w,b
 11385  010D98  A4D8               	btfss	status,2,c
 11386  010D9A  D009               	goto	l13311
 11387                           
 11388                           ; BSR set to: 0
 11389  010D9C  0E00               	movlw	0
 11390  010D9E  0100               	movlb	0	; () banked
 11391  010DA0  6F60               	movwf	___fldiv@b& (0+255),b
 11392  010DA2  0E00               	movlw	0
 11393  010DA4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11394  010DA6  0E00               	movlw	0
 11395  010DA8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11396  010DAA  0E00               	movlw	0
 11397  010DAC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11398  010DAE                     l13311:
 11399                           
 11400                           ; BSR set to: 0
 11401  010DAE  0100               	movlb	0	; () banked
 11402  010DB0  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 11403                           
 11404                           ; BSR set to: 0
 11405  010DB2  0E00               	movlw	0
 11406  010DB4  0100               	movlb	0	; () banked
 11407  010DB6  D008               	goto	L7
 11408  010DB8                     l13315:
 11409                           
 11410                           ; BSR set to: 0
 11411  010DB8  0E00               	movlw	0
 11412  010DBA  0100               	movlb	0	; () banked
 11413  010DBC  6F60               	movwf	___fldiv@b& (0+255),b
 11414  010DBE  0E00               	movlw	0
 11415  010DC0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11416  010DC2  0E00               	movlw	0
 11417  010DC4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11418  010DC6  0E00               	movlw	0
 11419  010DC8                     L7:
 11420  010DC8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11421                           
 11422                           ; BSR set to: 0
 11423                           
 11424                           ; BSR set to: 0
 11425  010DCA  0100               	movlb	0	; () banked
 11426  010DCC  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 11427  010DCE  0B80               	andlw	128
 11428  010DD0  0100               	movlb	0	; () banked
 11429  010DD2  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 11430                           
 11431                           ; BSR set to: 0
 11432  010DD4  0100               	movlb	0	; () banked
 11433  010DD6  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 11434  010DD8  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 11435  010DDA  0100               	movlb	0	; () banked
 11436  010DDC  6F78               	movwf	___fldiv@aexp& (0+255),b
 11437                           
 11438                           ; BSR set to: 0
 11439  010DDE  0100               	movlb	0	; () banked
 11440  010DE0  AF66               	btfss	(___fldiv@a+2)& (0+255),7,b
 11441  010DE2  D002               	goto	l13325
 11442                           
 11443                           ; BSR set to: 0
 11444  010DE4  0100               	movlb	0	; () banked
 11445  010DE6  8178               	bsf	___fldiv@aexp& (0+255),0,b
 11446  010DE8                     l13325:
 11447                           
 11448                           ; BSR set to: 0
 11449  010DE8  0100               	movlb	0	; () banked
 11450  010DEA  5178               	movf	___fldiv@aexp& (0+255),w,b
 11451  010DEC  0100               	movlb	0	; () banked
 11452  010DEE  B4D8               	btfsc	status,2,c
 11453  010DF0  D012               	goto	l13335
 11454                           
 11455                           ; BSR set to: 0
 11456  010DF2  0100               	movlb	0	; () banked
 11457  010DF4  2978               	incf	___fldiv@aexp& (0+255),w,b
 11458  010DF6  A4D8               	btfss	status,2,c
 11459  010DF8  D009               	goto	l13331
 11460                           
 11461                           ; BSR set to: 0
 11462  010DFA  0E00               	movlw	0
 11463  010DFC  0100               	movlb	0	; () banked
 11464  010DFE  6F64               	movwf	___fldiv@a& (0+255),b
 11465  010E00  0E00               	movlw	0
 11466  010E02  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 11467  010E04  0E00               	movlw	0
 11468  010E06  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 11469  010E08  0E00               	movlw	0
 11470  010E0A  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 11471  010E0C                     l13331:
 11472                           
 11473                           ; BSR set to: 0
 11474  010E0C  0100               	movlb	0	; () banked
 11475  010E0E  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 11476                           
 11477                           ; BSR set to: 0
 11478  010E10  0E00               	movlw	0
 11479  010E12  0100               	movlb	0	; () banked
 11480  010E14  D008               	goto	L8
 11481  010E16                     l13335:
 11482                           
 11483                           ; BSR set to: 0
 11484  010E16  0E00               	movlw	0
 11485  010E18  0100               	movlb	0	; () banked
 11486  010E1A  6F64               	movwf	___fldiv@a& (0+255),b
 11487  010E1C  0E00               	movlw	0
 11488  010E1E  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 11489  010E20  0E00               	movlw	0
 11490  010E22  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 11491  010E24  0E00               	movlw	0
 11492  010E26                     L8:
 11493  010E26  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496                           
 11497                           ; BSR set to: 0
 11498  010E28  0100               	movlb	0	; () banked
 11499  010E2A  5164               	movf	___fldiv@a& (0+255),w,b
 11500  010E2C  0100               	movlb	0	; () banked
 11501  010E2E  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 11502  010E30  0100               	movlb	0	; () banked
 11503  010E32  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 11504  010E34  0100               	movlb	0	; () banked
 11505  010E36  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 11506  010E38  A4D8               	btfss	status,2,c
 11507  010E3A  D017               	goto	l13347
 11508                           
 11509                           ; BSR set to: 0
 11510  010E3C  0E00               	movlw	0
 11511  010E3E  0100               	movlb	0	; () banked
 11512  010E40  6F60               	movwf	___fldiv@b& (0+255),b
 11513  010E42  0E00               	movlw	0
 11514  010E44  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11515  010E46  0E00               	movlw	0
 11516  010E48  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11517  010E4A  0E00               	movlw	0
 11518  010E4C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11519                           
 11520                           ; BSR set to: 0
 11521  010E4E  0100               	movlb	0	; () banked
 11522  010E50  0E80               	movlw	128
 11523  010E52  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 11524  010E54  0E7F               	movlw	127
 11525  010E56  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11526                           
 11527                           ; BSR set to: 0
 11528  010E58  C060  F060         	movff	___fldiv@b,?___fldiv
 11529  010E5C  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 11530  010E60  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 11531  010E64  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 11532                           
 11533                           ; BSR set to: 0
 11534  010E68  0012               	return	
 11535  010E6A                     l13347:
 11536                           
 11537                           ; BSR set to: 0
 11538  010E6A  0100               	movlb	0	; () banked
 11539  010E6C  5177               	movf	___fldiv@bexp& (0+255),w,b
 11540  010E6E  0100               	movlb	0	; () banked
 11541  010E70  A4D8               	btfss	status,2,c
 11542  010E72  D012               	goto	l13355
 11543                           
 11544                           ; BSR set to: 0
 11545  010E74  0E00               	movlw	0
 11546  010E76  0100               	movlb	0	; () banked
 11547  010E78  6F60               	movwf	___fldiv@b& (0+255),b
 11548  010E7A  0E00               	movlw	0
 11549  010E7C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11550  010E7E  0E00               	movlw	0
 11551  010E80  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11552  010E82  0E00               	movlw	0
 11553  010E84  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11554                           
 11555                           ; BSR set to: 0
 11556  010E86  C060  F060         	movff	___fldiv@b,?___fldiv
 11557  010E8A  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 11558  010E8E  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 11559  010E92  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 11560                           
 11561                           ; BSR set to: 0
 11562  010E96  0012               	return	
 11563  010E98                     l13355:
 11564                           
 11565                           ; BSR set to: 0
 11566  010E98  0100               	movlb	0	; () banked
 11567  010E9A  5178               	movf	___fldiv@aexp& (0+255),w,b
 11568  010E9C  0100               	movlb	0	; () banked
 11569  010E9E  6F68               	movwf	??___fldiv& (0+255),b
 11570  010EA0  6B69               	clrf	(??___fldiv+1)& (0+255),b
 11571  010EA2  0100               	movlb	0	; () banked
 11572  010EA4  1F68               	comf	??___fldiv& (0+255),f,b
 11573  010EA6  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 11574  010EA8  4B68               	infsnz	??___fldiv& (0+255),f,b
 11575  010EAA  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 11576  010EAC  0100               	movlb	0	; () banked
 11577  010EAE  5177               	movf	___fldiv@bexp& (0+255),w,b
 11578  010EB0  0100               	movlb	0	; () banked
 11579  010EB2  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 11580  010EB4  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 11581  010EB6  0100               	movlb	0	; () banked
 11582  010EB8  5168               	movf	??___fldiv& (0+255),w,b
 11583  010EBA  0100               	movlb	0	; () banked
 11584  010EBC  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 11585  010EBE  0100               	movlb	0	; () banked
 11586  010EC0  5169               	movf	(??___fldiv+1)& (0+255),w,b
 11587  010EC2  0100               	movlb	0	; () banked
 11588  010EC4  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 11589  010EC6  0E7F               	movlw	127
 11590  010EC8  0100               	movlb	0	; () banked
 11591  010ECA  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 11592  010ECC  0100               	movlb	0	; () banked
 11593  010ECE  6F71               	movwf	___fldiv@new_exp& (0+255),b
 11594  010ED0  0E00               	movlw	0
 11595  010ED2  0100               	movlb	0	; () banked
 11596  010ED4  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 11597  010ED6  0100               	movlb	0	; () banked
 11598  010ED8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11599                           
 11600                           ; BSR set to: 0
 11601  010EDA  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 11602  010EDE  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 11603  010EE2  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 11604  010EE6  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 11605                           
 11606                           ; BSR set to: 0
 11607  010EEA  0E00               	movlw	0
 11608  010EEC  0100               	movlb	0	; () banked
 11609  010EEE  6F60               	movwf	___fldiv@b& (0+255),b
 11610  010EF0  0E00               	movlw	0
 11611  010EF2  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11612  010EF4  0E00               	movlw	0
 11613  010EF6  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11614  010EF8  0E00               	movlw	0
 11615  010EFA  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11616                           
 11617                           ; BSR set to: 0
 11618  010EFC  0E00               	movlw	0
 11619  010EFE  0100               	movlb	0	; () banked
 11620  010F00  6F73               	movwf	___fldiv@grs& (0+255),b
 11621  010F02  0E00               	movlw	0
 11622  010F04  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 11623  010F06  0E00               	movlw	0
 11624  010F08  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 11625  010F0A  0E00               	movlw	0
 11626  010F0C  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 11627                           
 11628                           ; BSR set to: 0
 11629  010F0E  0E00               	movlw	0
 11630  010F10  0100               	movlb	0	; () banked
 11631  010F12  6F78               	movwf	___fldiv@aexp& (0+255),b
 11632  010F14  D042               	goto	l2619
 11633  010F16                     l13365:
 11634                           
 11635                           ; BSR set to: 0
 11636  010F16  0100               	movlb	0	; () banked
 11637  010F18  5178               	movf	___fldiv@aexp& (0+255),w,b
 11638  010F1A  0100               	movlb	0	; () banked
 11639  010F1C  B4D8               	btfsc	status,2,c
 11640  010F1E  D017               	goto	l13373
 11641                           
 11642                           ; BSR set to: 0
 11643  010F20  0100               	movlb	0	; () banked
 11644  010F22  90D8               	bcf	status,0,c
 11645  010F24  376D               	rlcf	___fldiv@rem& (0+255),f,b
 11646  010F26  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 11647  010F28  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 11648  010F2A  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 11649  010F2C  0100               	movlb	0	; () banked
 11650  010F2E  90D8               	bcf	status,0,c
 11651  010F30  3760               	rlcf	___fldiv@b& (0+255),f,b
 11652  010F32  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 11653  010F34  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 11654  010F36  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 11655                           
 11656                           ; BSR set to: 0
 11657  010F38  0100               	movlb	0	; () banked
 11658  010F3A  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 11659  010F3C  D002               	goto	l2622
 11660                           
 11661                           ; BSR set to: 0
 11662  010F3E  0100               	movlb	0	; () banked
 11663  010F40  8160               	bsf	___fldiv@b& (0+255),0,b
 11664  010F42                     l2622:
 11665                           
 11666                           ; BSR set to: 0
 11667  010F42  0100               	movlb	0	; () banked
 11668  010F44  90D8               	bcf	status,0,c
 11669  010F46  3773               	rlcf	___fldiv@grs& (0+255),f,b
 11670  010F48  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 11671  010F4A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 11672  010F4C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 11673  010F4E                     l13373:
 11674                           
 11675                           ; BSR set to: 0
 11676  010F4E  0100               	movlb	0	; () banked
 11677  010F50  5164               	movf	___fldiv@a& (0+255),w,b
 11678  010F52  0100               	movlb	0	; () banked
 11679  010F54  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 11680  010F56  0100               	movlb	0	; () banked
 11681  010F58  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 11682  010F5A  0100               	movlb	0	; () banked
 11683  010F5C  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 11684  010F5E  0100               	movlb	0	; () banked
 11685  010F60  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 11686  010F62  0100               	movlb	0	; () banked
 11687  010F64  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 11688  010F66  0100               	movlb	0	; () banked
 11689  010F68  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 11690  010F6A  0100               	movlb	0	; () banked
 11691  010F6C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 11692  010F6E  A0D8               	btfss	status,0,c
 11693  010F70  D012               	goto	l13379
 11694                           
 11695                           ; BSR set to: 0
 11696  010F72  0100               	movlb	0	; () banked
 11697  010F74  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 11698                           
 11699                           ; BSR set to: 0
 11700  010F76  0100               	movlb	0	; () banked
 11701  010F78  5164               	movf	___fldiv@a& (0+255),w,b
 11702  010F7A  0100               	movlb	0	; () banked
 11703  010F7C  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 11704  010F7E  0100               	movlb	0	; () banked
 11705  010F80  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 11706  010F82  0100               	movlb	0	; () banked
 11707  010F84  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 11708  010F86  0100               	movlb	0	; () banked
 11709  010F88  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 11710  010F8A  0100               	movlb	0	; () banked
 11711  010F8C  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 11712  010F8E  0100               	movlb	0	; () banked
 11713  010F90  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 11714  010F92  0100               	movlb	0	; () banked
 11715  010F94  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 11716  010F96                     l13379:
 11717                           
 11718                           ; BSR set to: 0
 11719  010F96  0100               	movlb	0	; () banked
 11720  010F98  2B78               	incf	___fldiv@aexp& (0+255),f,b
 11721  010F9A                     l2619:
 11722                           
 11723                           ; BSR set to: 0
 11724  010F9A  0E19               	movlw	25
 11725  010F9C  0100               	movlb	0	; () banked
 11726  010F9E  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 11727  010FA0  D7BA               	goto	l13365
 11728                           
 11729                           ; BSR set to: 0
 11730                           
 11731                           ; BSR set to: 0
 11732  010FA2  0100               	movlb	0	; () banked
 11733  010FA4  516D               	movf	___fldiv@rem& (0+255),w,b
 11734  010FA6  0100               	movlb	0	; () banked
 11735  010FA8  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 11736  010FAA  0100               	movlb	0	; () banked
 11737  010FAC  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 11738  010FAE  0100               	movlb	0	; () banked
 11739  010FB0  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 11740  010FB2  B4D8               	btfsc	status,2,c
 11741  010FB4  D018               	goto	l13391
 11742                           
 11743                           ; BSR set to: 0
 11744  010FB6  0100               	movlb	0	; () banked
 11745  010FB8  8173               	bsf	___fldiv@grs& (0+255),0,b
 11746                           
 11747                           ; BSR set to: 0
 11748  010FBA  D015               	goto	l13391
 11749  010FBC                     l13385:
 11750                           
 11751                           ; BSR set to: 0
 11752  010FBC  0100               	movlb	0	; () banked
 11753  010FBE  90D8               	bcf	status,0,c
 11754  010FC0  3760               	rlcf	___fldiv@b& (0+255),f,b
 11755  010FC2  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 11756  010FC4  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 11757  010FC6  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 11758                           
 11759                           ; BSR set to: 0
 11760  010FC8  0100               	movlb	0	; () banked
 11761  010FCA  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 11762  010FCC  D002               	goto	l2628
 11763                           
 11764                           ; BSR set to: 0
 11765  010FCE  0100               	movlb	0	; () banked
 11766  010FD0  8160               	bsf	___fldiv@b& (0+255),0,b
 11767  010FD2                     l2628:
 11768                           
 11769                           ; BSR set to: 0
 11770  010FD2  0100               	movlb	0	; () banked
 11771  010FD4  90D8               	bcf	status,0,c
 11772  010FD6  3773               	rlcf	___fldiv@grs& (0+255),f,b
 11773  010FD8  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 11774  010FDA  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 11775  010FDC  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 11776  010FDE  0100               	movlb	0	; () banked
 11777  010FE0  0771               	decf	___fldiv@new_exp& (0+255),f,b
 11778  010FE2  A0D8               	btfss	status,0,c
 11779  010FE4  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 11780  010FE6                     l13391:
 11781                           
 11782                           ; BSR set to: 0
 11783  010FE6  0100               	movlb	0	; () banked
 11784  010FE8  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 11785  010FEA  D7E8               	goto	l13385
 11786                           
 11787                           ; BSR set to: 0
 11788                           
 11789                           ; BSR set to: 0
 11790  010FEC  0E00               	movlw	0
 11791  010FEE  0100               	movlb	0	; () banked
 11792  010FF0  6F78               	movwf	___fldiv@aexp& (0+255),b
 11793                           
 11794                           ; BSR set to: 0
 11795  010FF2  0100               	movlb	0	; () banked
 11796  010FF4  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 11797  010FF6  D024               	goto	l2630
 11798                           
 11799                           ; BSR set to: 0
 11800  010FF8  0EFF               	movlw	255
 11801  010FFA  0100               	movlb	0	; () banked
 11802  010FFC  1573               	andwf	___fldiv@grs& (0+255),w,b
 11803  010FFE  0100               	movlb	0	; () banked
 11804  011000  6F68               	movwf	??___fldiv& (0+255),b
 11805  011002  0EFF               	movlw	255
 11806  011004  0100               	movlb	0	; () banked
 11807  011006  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 11808  011008  0100               	movlb	0	; () banked
 11809  01100A  6F69               	movwf	(??___fldiv+1)& (0+255),b
 11810  01100C  0EFF               	movlw	255
 11811  01100E  0100               	movlb	0	; () banked
 11812  011010  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 11813  011012  0100               	movlb	0	; () banked
 11814  011014  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 11815  011016  0E7F               	movlw	127
 11816  011018  0100               	movlb	0	; () banked
 11817  01101A  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 11818  01101C  0100               	movlb	0	; () banked
 11819  01101E  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 11820  011020  0100               	movlb	0	; () banked
 11821  011022  5168               	movf	??___fldiv& (0+255),w,b
 11822  011024  0100               	movlb	0	; () banked
 11823  011026  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 11824  011028  0100               	movlb	0	; () banked
 11825  01102A  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 11826  01102C  0100               	movlb	0	; () banked
 11827  01102E  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 11828  011030  A4D8               	btfss	status,2,c
 11829  011032  D003               	goto	l13401
 11830                           
 11831                           ; BSR set to: 0
 11832                           
 11833                           ; BSR set to: 0
 11834  011034  0100               	movlb	0	; () banked
 11835  011036  A160               	btfss	___fldiv@b& (0+255),0,b
 11836  011038  D003               	goto	l2630
 11837  01103A                     l13401:
 11838                           
 11839                           ; BSR set to: 0
 11840  01103A  0E01               	movlw	1
 11841  01103C  0100               	movlb	0	; () banked
 11842  01103E  6F78               	movwf	___fldiv@aexp& (0+255),b
 11843  011040                     l2630:
 11844                           
 11845                           ; BSR set to: 0
 11846  011040  0100               	movlb	0	; () banked
 11847  011042  5178               	movf	___fldiv@aexp& (0+255),w,b
 11848  011044  0100               	movlb	0	; () banked
 11849  011046  B4D8               	btfsc	status,2,c
 11850  011048  D023               	goto	l13411
 11851                           
 11852                           ; BSR set to: 0
 11853  01104A  0E01               	movlw	1
 11854  01104C  0100               	movlb	0	; () banked
 11855  01104E  2760               	addwf	___fldiv@b& (0+255),f,b
 11856  011050  0E00               	movlw	0
 11857  011052  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 11858  011054  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 11859  011056  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 11860                           
 11861                           ; BSR set to: 0
 11862  011058  0100               	movlb	0	; () banked
 11863  01105A  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 11864  01105C  D019               	goto	l13411
 11865                           
 11866                           ; BSR set to: 0
 11867  01105E  C060  F068         	movff	___fldiv@b,??___fldiv
 11868  011062  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 11869  011066  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 11870  01106A  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 11871  01106E  0100               	movlb	0	; () banked
 11872  011070  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 11873  011072  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 11874  011074  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 11875  011076  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 11876  011078  3368               	rrcf	??___fldiv& (0+255),f,b
 11877  01107A  C068  F060         	movff	??___fldiv,___fldiv@b
 11878  01107E  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 11879  011082  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 11880  011086  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 11881                           
 11882                           ; BSR set to: 0
 11883  01108A  0100               	movlb	0	; () banked
 11884  01108C  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 11885  01108E  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 11886  011090                     l13411:
 11887                           
 11888                           ; BSR set to: 0
 11889  011090  0100               	movlb	0	; () banked
 11890  011092  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11891  011094  D014               	goto	l13415
 11892  011096  0100               	movlb	0	; () banked
 11893  011098  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11894  01109A  E104               	bnz	u11000
 11895  01109C  0100               	movlb	0	; () banked
 11896  01109E  2971               	incf	___fldiv@new_exp& (0+255),w,b
 11897  0110A0  A0D8               	btfss	status,0,c
 11898  0110A2  D00D               	goto	l13415
 11899  0110A4                     u11000:
 11900                           
 11901                           ; BSR set to: 0
 11902  0110A4  0E00               	movlw	0
 11903  0110A6  0100               	movlb	0	; () banked
 11904  0110A8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11905  0110AA  6971               	setf	___fldiv@new_exp& (0+255),b
 11906  0110AC  0E00               	movlw	0
 11907  0110AE  0100               	movlb	0	; () banked
 11908  0110B0  6F60               	movwf	___fldiv@b& (0+255),b
 11909  0110B2  0E00               	movlw	0
 11910  0110B4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11911  0110B6  0E00               	movlw	0
 11912  0110B8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11913  0110BA  0E00               	movlw	0
 11914  0110BC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11915  0110BE                     l13415:
 11916                           
 11917                           ; BSR set to: 0
 11918  0110BE  0100               	movlb	0	; () banked
 11919  0110C0  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 11920  0110C2  D007               	goto	l13417
 11921  0110C4  0100               	movlb	0	; () banked
 11922  0110C6  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 11923  0110C8  E115               	bnz	l13419
 11924  0110CA  0100               	movlb	0	; () banked
 11925  0110CC  0571               	decf	___fldiv@new_exp& (0+255),w,b
 11926  0110CE  B0D8               	btfsc	status,0,c
 11927  0110D0  D011               	goto	l13419
 11928  0110D2                     l13417:
 11929                           
 11930                           ; BSR set to: 0
 11931  0110D2  0E00               	movlw	0
 11932  0110D4  0100               	movlb	0	; () banked
 11933  0110D6  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 11934  0110D8  0E00               	movlw	0
 11935  0110DA  6F71               	movwf	___fldiv@new_exp& (0+255),b
 11936  0110DC  0E00               	movlw	0
 11937  0110DE  0100               	movlb	0	; () banked
 11938  0110E0  6F60               	movwf	___fldiv@b& (0+255),b
 11939  0110E2  0E00               	movlw	0
 11940  0110E4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 11941  0110E6  0E00               	movlw	0
 11942  0110E8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 11943  0110EA  0E00               	movlw	0
 11944  0110EC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11945  0110EE  0E00               	movlw	0
 11946  0110F0  0100               	movlb	0	; () banked
 11947  0110F2  6F6C               	movwf	___fldiv@sign& (0+255),b
 11948  0110F4                     l13419:
 11949                           
 11950                           ; BSR set to: 0
 11951  0110F4  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 11952                           
 11953                           ; BSR set to: 0
 11954  0110F8  0100               	movlb	0	; () banked
 11955  0110FA  A177               	btfss	___fldiv@bexp& (0+255),0,b
 11956  0110FC  D003               	goto	l13425
 11957                           
 11958                           ; BSR set to: 0
 11959  0110FE  0100               	movlb	0	; () banked
 11960  011100  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 11961  011102  D002               	goto	l13427
 11962  011104                     l13425:
 11963                           
 11964                           ; BSR set to: 0
 11965  011104  0100               	movlb	0	; () banked
 11966  011106  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 11967  011108                     l13427:
 11968                           
 11969                           ; BSR set to: 0
 11970  011108  0100               	movlb	0	; () banked
 11971  01110A  90D8               	bcf	status,0,c
 11972  01110C  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 11973  01110E  0100               	movlb	0	; () banked
 11974  011110  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 11975                           
 11976                           ; BSR set to: 0
 11977  011112  0100               	movlb	0	; () banked
 11978  011114  516C               	movf	___fldiv@sign& (0+255),w,b
 11979  011116  0100               	movlb	0	; () banked
 11980  011118  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 11981                           
 11982                           ; BSR set to: 0
 11983  01111A  C060  F060         	movff	___fldiv@b,?___fldiv
 11984  01111E  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 11985  011122  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 11986  011126  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 11987  01112A  0012               	return	
 11988  01112C                     __end_of___fldiv:
 11989                           	opt stack 0
 11990                           tblptru	equ	0xFF8
 11991                           tblptrh	equ	0xFF7
 11992                           tblptrl	equ	0xFF6
 11993                           tablat	equ	0xFF5
 11994                           prodh	equ	0xFF4
 11995                           prodl	equ	0xFF3
 11996                           postinc0	equ	0xFEE
 11997                           wreg	equ	0xFE8
 11998                           postdec1	equ	0xFE5
 11999                           fsr1h	equ	0xFE2
 12000                           fsr1l	equ	0xFE1
 12001                           indf2	equ	0xFDF
 12002                           postinc2	equ	0xFDE
 12003                           postdec2	equ	0xFDD
 12004                           fsr2h	equ	0xFDA
 12005                           fsr2l	equ	0xFD9
 12006                           status	equ	0xFD8
 12007                           
 12008 ;; *************** function _inputVar *****************
 12009 ;; Defined at:
 12010 ;;		line 71 in file "main.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;		None
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;		None
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  1    wreg      void 
 12017 ;; Registers used:
 12018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12028 ;;Total ram usage:        1 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:   16
 12031 ;; This function calls:
 12032 ;;		_FunctADC
 12033 ;;		_HMI_DIPSwitch
 12034 ;;		_HMI_DownSwitch
 12035 ;;		_HMI_LeftSwitch
 12036 ;;		_HMI_Poll
 12037 ;;		_HMI_RightSwitch
 12038 ;;		_HMI_UpSwitch
 12039 ;;		_MXK_DIPSwitch
 12040 ;;		_MXK_TestButton
 12041 ;; This function is called by:
 12042 ;;		_main
 12043 ;; This function uses a non-reentrant model
 12044 ;;
 12045                           
 12046                           	psect	text38
 12047  014A66                     __ptext38:
 12048                           	opt stack 0
 12049  014A66                     _inputVar:
 12050                           	opt stack 14
 12051                           
 12052                           ;main.c: 72: FunctADC();
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;incstack = 0
 12056  014A66  EC94  F0B4         	call	_FunctADC	;wreg free
 12057                           
 12058                           ;main.c: 73: HMI_Poll();
 12059  014A6A  EC29  F0AC         	call	_HMI_Poll	;wreg free
 12060                           
 12061                           ;main.c: 74: dipMode = DIPSwitch.mGetState();
 12062  014A6E  EE21  F06D         	lfsr	2,_DIPSwitch+7
 12063  014A72  D801               	call	u12398
 12064  014A74  D00A               	goto	u12399
 12065  014A76                     u12398:
 12066  014A76  0005               	push	
 12067  014A78  6EFA               	movwf	pclath,c
 12068  014A7A  50DE               	movf	postinc2,w,c
 12069  014A7C  6EFD               	movwf	tosl,c
 12070  014A7E  50DE               	movf	postinc2,w,c
 12071  014A80  6EFE               	movwf	tosh,c
 12072  014A82  50DE               	movf	postinc2,w,c
 12073  014A84  6EFF               	movwf	tosu,c
 12074  014A86  50FA               	movf	pclath,w,c
 12075  014A88  0012               	return		;indir
 12076  014A8A                     u12399:
 12077  014A8A  0100               	movlb	0	; () banked
 12078  014A8C  6F84               	movwf	??_inputVar& (0+255),b
 12079  014A8E  0100               	movlb	0	; () banked
 12080  014A90  5184               	movf	??_inputVar& (0+255),w,b
 12081  014A92  0100               	movlb	0	; () banked
 12082  014A94  6FD4               	movwf	_dipMode& (0+255),b
 12083  014A96  6BD5               	clrf	(_dipMode+1)& (0+255),b
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;main.c: 75: upState = HMIBoard.mUp.mGetState();
 12087  014A98  EE21  F039         	lfsr	2,_HMIBoard+35
 12088  014A9C  D801               	call	u12408
 12089  014A9E  D00A               	goto	u12409
 12090  014AA0                     u12408:
 12091  014AA0  0005               	push	
 12092  014AA2  6EFA               	movwf	pclath,c
 12093  014AA4  50DE               	movf	postinc2,w,c
 12094  014AA6  6EFD               	movwf	tosl,c
 12095  014AA8  50DE               	movf	postinc2,w,c
 12096  014AAA  6EFE               	movwf	tosh,c
 12097  014AAC  50DE               	movf	postinc2,w,c
 12098  014AAE  6EFF               	movwf	tosu,c
 12099  014AB0  50FA               	movf	pclath,w,c
 12100  014AB2  0012               	return		;indir
 12101  014AB4                     u12409:
 12102  014AB4  0100               	movlb	0	; () banked
 12103  014AB6  6FE5               	movwf	_upState& (0+255),b
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;main.c: 76: downState = HMIBoard.mDown.mGetState();
 12107  014AB8  EE21  F043         	lfsr	2,_HMIBoard+45
 12108  014ABC  D801               	call	u12418
 12109  014ABE  D00A               	goto	u12419
 12110  014AC0                     u12418:
 12111  014AC0  0005               	push	
 12112  014AC2  6EFA               	movwf	pclath,c
 12113  014AC4  50DE               	movf	postinc2,w,c
 12114  014AC6  6EFD               	movwf	tosl,c
 12115  014AC8  50DE               	movf	postinc2,w,c
 12116  014ACA  6EFE               	movwf	tosh,c
 12117  014ACC  50DE               	movf	postinc2,w,c
 12118  014ACE  6EFF               	movwf	tosu,c
 12119  014AD0  50FA               	movf	pclath,w,c
 12120  014AD2  0012               	return		;indir
 12121  014AD4                     u12419:
 12122  014AD4  0100               	movlb	0	; () banked
 12123  014AD6  6FE4               	movwf	_downState& (0+255),b
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;main.c: 77: leftState = HMIBoard.mLeft.mGetState();
 12127  014AD8  EE21  F02F         	lfsr	2,_HMIBoard+25
 12128  014ADC  D801               	call	u12428
 12129  014ADE  D00A               	goto	u12429
 12130  014AE0                     u12428:
 12131  014AE0  0005               	push	
 12132  014AE2  6EFA               	movwf	pclath,c
 12133  014AE4  50DE               	movf	postinc2,w,c
 12134  014AE6  6EFD               	movwf	tosl,c
 12135  014AE8  50DE               	movf	postinc2,w,c
 12136  014AEA  6EFE               	movwf	tosh,c
 12137  014AEC  50DE               	movf	postinc2,w,c
 12138  014AEE  6EFF               	movwf	tosu,c
 12139  014AF0  50FA               	movf	pclath,w,c
 12140  014AF2  0012               	return		;indir
 12141  014AF4                     u12429:
 12142  014AF4  0100               	movlb	0	; () banked
 12143  014AF6  6FE3               	movwf	_leftState& (0+255),b
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;main.c: 78: rightState = HMIBoard.mRight.mGetState();
 12147  014AF8  EE21  F025         	lfsr	2,_HMIBoard+15
 12148  014AFC  D801               	call	u12438
 12149  014AFE  D00A               	goto	u12439
 12150  014B00                     u12438:
 12151  014B00  0005               	push	
 12152  014B02  6EFA               	movwf	pclath,c
 12153  014B04  50DE               	movf	postinc2,w,c
 12154  014B06  6EFD               	movwf	tosl,c
 12155  014B08  50DE               	movf	postinc2,w,c
 12156  014B0A  6EFE               	movwf	tosh,c
 12157  014B0C  50DE               	movf	postinc2,w,c
 12158  014B0E  6EFF               	movwf	tosu,c
 12159  014B10  50FA               	movf	pclath,w,c
 12160  014B12  0012               	return		;indir
 12161  014B14                     u12439:
 12162  014B14  0100               	movlb	0	; () banked
 12163  014B16  6FE2               	movwf	_rightState& (0+255),b
 12164                           
 12165                           ; BSR set to: 0
 12166  014B18  0012               	return		;funcret
 12167  014B1A                     __end_of_inputVar:
 12168                           	opt stack 0
 12169                           tosu	equ	0xFFF
 12170                           tosh	equ	0xFFE
 12171                           tosl	equ	0xFFD
 12172                           pclath	equ	0xFFA
 12173                           tblptru	equ	0xFF8
 12174                           tblptrh	equ	0xFF7
 12175                           tblptrl	equ	0xFF6
 12176                           tablat	equ	0xFF5
 12177                           prodh	equ	0xFF4
 12178                           prodl	equ	0xFF3
 12179                           postinc0	equ	0xFEE
 12180                           wreg	equ	0xFE8
 12181                           postdec1	equ	0xFE5
 12182                           fsr1h	equ	0xFE2
 12183                           fsr1l	equ	0xFE1
 12184                           indf2	equ	0xFDF
 12185                           postinc2	equ	0xFDE
 12186                           postdec2	equ	0xFDD
 12187                           fsr2h	equ	0xFDA
 12188                           fsr2l	equ	0xFD9
 12189                           status	equ	0xFD8
 12190                           
 12191 ;; *************** function _HMI_Poll *****************
 12192 ;; Defined at:
 12193 ;;		line 252 in file "HMI.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;		None
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      void 
 12200 ;; Registers used:
 12201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12211 ;;Total ram usage:        0 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:   15
 12214 ;; This function calls:
 12215 ;;		_Button_Poll
 12216 ;; This function is called by:
 12217 ;;		_inputVar
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           	psect	text39
 12222  015852                     __ptext39:
 12223                           	opt stack 0
 12224  015852                     _HMI_Poll:
 12225                           	opt stack 14
 12226                           
 12227                           ;HMI.c: 254: TRISE = 0xFC;
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;incstack = 0
 12231  015852  0EFC               	movlw	252
 12232  015854  6E96               	movwf	3990,c	;volatile
 12233                           
 12234                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 12235  015856  0E46               	movlw	low (_HMIBoard+48)
 12236  015858  0100               	movlb	0	; () banked
 12237  01585A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12238  01585C  0E01               	movlw	high (_HMIBoard+48)
 12239  01585E  0100               	movlb	0	; () banked
 12240  015860  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12241  015862  0E01               	movlw	1
 12242  015864  0100               	movlb	0	; () banked
 12243  015866  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12244  015868  ECA3  F09A         	call	_Button_Poll	;wreg free
 12245                           
 12246                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 12247  01586C  0E28               	movlw	low (_HMIBoard+18)
 12248  01586E  0100               	movlb	0	; () banked
 12249  015870  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12250  015872  0E01               	movlw	high (_HMIBoard+18)
 12251  015874  0100               	movlb	0	; () banked
 12252  015876  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12253  015878  0E01               	movlw	1
 12254  01587A  0100               	movlb	0	; () banked
 12255  01587C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12256  01587E  ECA3  F09A         	call	_Button_Poll	;wreg free
 12257                           
 12258                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 12259  015882  0E1E               	movlw	low (_HMIBoard+8)
 12260  015884  0100               	movlb	0	; () banked
 12261  015886  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12262  015888  0E01               	movlw	high (_HMIBoard+8)
 12263  01588A  0100               	movlb	0	; () banked
 12264  01588C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12265  01588E  0E01               	movlw	1
 12266  015890  0100               	movlb	0	; () banked
 12267  015892  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12268  015894  ECA3  F09A         	call	_Button_Poll	;wreg free
 12269                           
 12270                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 12271  015898  0E32               	movlw	low (_HMIBoard+28)
 12272  01589A  0100               	movlb	0	; () banked
 12273  01589C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12274  01589E  0E01               	movlw	high (_HMIBoard+28)
 12275  0158A0  0100               	movlb	0	; () banked
 12276  0158A2  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12277  0158A4  0E01               	movlw	1
 12278  0158A6  0100               	movlb	0	; () banked
 12279  0158A8  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12280  0158AA  ECA3  F09A         	call	_Button_Poll	;wreg free
 12281                           
 12282                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 12283  0158AE  0E3C               	movlw	low (_HMIBoard+38)
 12284  0158B0  0100               	movlb	0	; () banked
 12285  0158B2  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12286  0158B4  0E01               	movlw	high (_HMIBoard+38)
 12287  0158B6  0100               	movlb	0	; () banked
 12288  0158B8  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12289  0158BA  0E01               	movlw	1
 12290  0158BC  0100               	movlb	0	; () banked
 12291  0158BE  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12292  0158C0  ECA3  F09A         	call	_Button_Poll	;wreg free
 12293  0158C4  0012               	return		;funcret
 12294  0158C6                     __end_of_HMI_Poll:
 12295                           	opt stack 0
 12296                           tosu	equ	0xFFF
 12297                           tosh	equ	0xFFE
 12298                           tosl	equ	0xFFD
 12299                           pclath	equ	0xFFA
 12300                           tblptru	equ	0xFF8
 12301                           tblptrh	equ	0xFF7
 12302                           tblptrl	equ	0xFF6
 12303                           tablat	equ	0xFF5
 12304                           prodh	equ	0xFF4
 12305                           prodl	equ	0xFF3
 12306                           postinc0	equ	0xFEE
 12307                           wreg	equ	0xFE8
 12308                           postdec1	equ	0xFE5
 12309                           fsr1h	equ	0xFE2
 12310                           fsr1l	equ	0xFE1
 12311                           indf2	equ	0xFDF
 12312                           postinc2	equ	0xFDE
 12313                           postdec2	equ	0xFDD
 12314                           fsr2h	equ	0xFDA
 12315                           fsr2l	equ	0xFD9
 12316                           status	equ	0xFD8
 12317                           
 12318 ;; *************** function _Button_Poll *****************
 12319 ;; Defined at:
 12320 ;;		line 57 in file "Library/Button.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 12323 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 12324 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 12325 ;; Auto vars:     Size  Location     Type
 12326 ;;  Pin             1   35[BANK0 ] unsigned char 
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  1    wreg      unsigned char 
 12329 ;; Registers used:
 12330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12331 ;; Tracked objects:
 12332 ;;		On entry : 0/0
 12333 ;;		On exit  : 0/0
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12336 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12339 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12340 ;;Total ram usage:        9 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; Hardware stack levels required when called:   14
 12343 ;; This function calls:
 12344 ;;		_Event_DIPSwitch
 12345 ;;		_Event_NULL
 12346 ;;		_Event_TestButton
 12347 ;;		_HMI_DIPSwitch
 12348 ;;		_HMI_DownSwitch
 12349 ;;		_HMI_LeftSwitch
 12350 ;;		_HMI_RightSwitch
 12351 ;;		_HMI_UpSwitch
 12352 ;;		_MXK_DIPSwitch
 12353 ;;		_MXK_TestButton
 12354 ;; This function is called by:
 12355 ;;		_HMI_Poll
 12356 ;;		_MXK_Poll
 12357 ;; This function uses a non-reentrant model
 12358 ;;
 12359                           
 12360                           	psect	text40
 12361  013546                     __ptext40:
 12362                           	opt stack 0
 12363  013546                     _Button_Poll:
 12364                           	opt stack 14
 12365                           
 12366                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 12367                           
 12368                           ;incstack = 0
 12369  013546  0100               	movlb	0	; () banked
 12370  013548  EE20 F007          	lfsr	2,7
 12371  01354C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12372  01354E  26D9               	addwf	fsr2l,f,c
 12373  013550  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12374  013552  22DA               	addwfc	fsr2h,f,c
 12375  013554  D801               	call	u11208
 12376  013556  D00A               	goto	u11209
 12377  013558                     u11208:
 12378  013558  0005               	push	
 12379  01355A  6EFA               	movwf	pclath,c
 12380  01355C  50DE               	movf	postinc2,w,c
 12381  01355E  6EFD               	movwf	tosl,c
 12382  013560  50DE               	movf	postinc2,w,c
 12383  013562  6EFE               	movwf	tosh,c
 12384  013564  50DE               	movf	postinc2,w,c
 12385  013566  6EFF               	movwf	tosu,c
 12386  013568  50FA               	movf	pclath,w,c
 12387  01356A  0012               	return		;indir
 12388  01356C                     u11209:
 12389  01356C  0100               	movlb	0	; () banked
 12390  01356E  6F83               	movwf	Button_Poll@Pin& (0+255),b
 12391                           
 12392                           ; BSR set to: 0
 12393                           ;Button.c: 61: if (pButton->mState == Pin)
 12394  013570  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 12395  013574  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12396  013578  0100               	movlb	0	; () banked
 12397  01357A  5183               	movf	Button_Poll@Pin& (0+255),w,b
 12398  01357C  18DE               	xorwf	postinc2,w,c
 12399  01357E  A4D8               	btfss	status,2,c
 12400  013580  D021               	goto	l13557
 12401                           
 12402                           ; BSR set to: 0
 12403                           ;Button.c: 62: {
 12404                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 12405  013582  0100               	movlb	0	; () banked
 12406  013584  EE20 F001          	lfsr	2,1
 12407  013588  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12408  01358A  26D9               	addwf	fsr2l,f,c
 12409  01358C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12410  01358E  22DA               	addwfc	fsr2h,f,c
 12411  013590  0100               	movlb	0	; () banked
 12412  013592  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12413  013594  5CDE               	subwf	postinc2,w,c
 12414  013596  B0D8               	btfsc	status,0,c
 12415  013598  D00A               	goto	l13555
 12416                           
 12417                           ; BSR set to: 0
 12418                           ;Button.c: 66: pButton->mCount = 0;
 12419  01359A  0100               	movlb	0	; () banked
 12420  01359C  EE20 F001          	lfsr	2,1
 12421  0135A0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12422  0135A2  26D9               	addwf	fsr2l,f,c
 12423  0135A4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12424  0135A6  22DA               	addwfc	fsr2h,f,c
 12425  0135A8  0E00               	movlw	0
 12426  0135AA  6EDF               	movwf	indf2,c
 12427  0135AC  0012               	return	
 12428  0135AE                     l13555:
 12429                           
 12430                           ; BSR set to: 0
 12431                           ;Button.c: 67: else
 12432                           ;Button.c: 68: pButton->mCount -= pIncrement;
 12433  0135AE  0100               	movlb	0	; () banked
 12434  0135B0  EE20 F001          	lfsr	2,1
 12435  0135B4  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12436  0135B6  26D9               	addwf	fsr2l,f,c
 12437  0135B8  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12438  0135BA  22DA               	addwfc	fsr2h,f,c
 12439  0135BC  0100               	movlb	0	; () banked
 12440  0135BE  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12441  0135C0  5EDF               	subwf	indf2,f,c
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;Button.c: 69: }
 12445  0135C2  0012               	return	
 12446  0135C4                     l13557:
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 12450  0135C4  0100               	movlb	0	; () banked
 12451  0135C6  EE20 F001          	lfsr	2,1
 12452  0135CA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12453  0135CC  26D9               	addwf	fsr2l,f,c
 12454  0135CE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12455  0135D0  22DA               	addwfc	fsr2h,f,c
 12456  0135D2  50DF               	movf	indf2,w,c
 12457  0135D4  0100               	movlb	0	; () banked
 12458  0135D6  6F7E               	movwf	??_Button_Poll& (0+255),b
 12459  0135D8  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 12460  0135DA  0100               	movlb	0	; () banked
 12461  0135DC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12462  0135DE  0100               	movlb	0	; () banked
 12463  0135E0  277E               	addwf	??_Button_Poll& (0+255),f,b
 12464  0135E2  0E00               	movlw	0
 12465  0135E4  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 12466  0135E6  0100               	movlb	0	; () banked
 12467  0135E8  EE20 F001          	lfsr	2,1
 12468  0135EC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12469  0135EE  26D9               	addwf	fsr2l,f,c
 12470  0135F0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12471  0135F2  22DA               	addwfc	fsr2h,f,c
 12472  0135F4  50DF               	movf	indf2,w,c
 12473  0135F6  0100               	movlb	0	; () banked
 12474  0135F8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 12475  0135FA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 12476  0135FC  0100               	movlb	0	; () banked
 12477  0135FE  517E               	movf	??_Button_Poll& (0+255),w,b
 12478  013600  0100               	movlb	0	; () banked
 12479  013602  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12480  013604  0100               	movlb	0	; () banked
 12481  013606  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 12482  013608  0A80               	xorlw	128
 12483  01360A  0100               	movlb	0	; () banked
 12484  01360C  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 12485  01360E  0100               	movlb	0	; () banked
 12486  013610  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 12487  013612  0A80               	xorlw	128
 12488  013614  0100               	movlb	0	; () banked
 12489  013616  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 12490  013618  B0D8               	btfsc	status,0,c
 12491  01361A  0012               	return	
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;Button.c: 73: {
 12495                           ;Button.c: 75: pButton->mCount += pIncrement;
 12496  01361C  0100               	movlb	0	; () banked
 12497  01361E  EE20 F001          	lfsr	2,1
 12498  013622  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12499  013624  26D9               	addwf	fsr2l,f,c
 12500  013626  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12501  013628  22DA               	addwfc	fsr2h,f,c
 12502  01362A  0100               	movlb	0	; () banked
 12503  01362C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12504  01362E  26DF               	addwf	indf2,f,c
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 12508  013630  0100               	movlb	0	; () banked
 12509  013632  EE20 F002          	lfsr	2,2
 12510  013636  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12511  013638  26D9               	addwf	fsr2l,f,c
 12512  01363A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12513  01363C  22DA               	addwfc	fsr2h,f,c
 12514  01363E  0100               	movlb	0	; () banked
 12515  013640  EE10 F001          	lfsr	1,1
 12516  013644  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12517  013646  26E1               	addwf	fsr1l,f,c
 12518  013648  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12519  01364A  22E2               	addwfc	fsr1h,f,c
 12520  01364C  50E7               	movf	indf1,w,c
 12521  01364E  0100               	movlb	0	; () banked
 12522  013650  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 12523  013652  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 12524  013654  50DE               	movf	postinc2,w,c
 12525  013656  0100               	movlb	0	; () banked
 12526  013658  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12527  01365A  50DE               	movf	postinc2,w,c
 12528  01365C  0100               	movlb	0	; () banked
 12529  01365E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 12530  013660  A0D8               	btfss	status,0,c
 12531  013662  0012               	return	
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;Button.c: 77: {
 12535                           ;Button.c: 79: pButton->mState = Pin;
 12536  013664  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 12537  013668  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12538  01366C  C083  FFDF         	movff	Button_Poll@Pin,indf2
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;Button.c: 80: pButton->mCount = 0;
 12542  013670  0100               	movlb	0	; () banked
 12543  013672  EE20 F001          	lfsr	2,1
 12544  013676  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12545  013678  26D9               	addwf	fsr2l,f,c
 12546  01367A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12547  01367C  22DA               	addwfc	fsr2h,f,c
 12548  01367E  0E00               	movlw	0
 12549  013680  6EDF               	movwf	indf2,c
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;Button.c: 83: pButton->mFunction(Pin);
 12553  013682  0100               	movlb	0	; () banked
 12554  013684  EE20 F004          	lfsr	2,4
 12555  013688  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12556  01368A  26D9               	addwf	fsr2l,f,c
 12557  01368C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12558  01368E  22DA               	addwfc	fsr2h,f,c
 12559  013690  D801               	call	u11258
 12560  013692  0012               	return	
 12561  013694                     u11258:
 12562  013694  0005               	push	
 12563  013696  6EFA               	movwf	pclath,c
 12564  013698  50DE               	movf	postinc2,w,c
 12565  01369A  6EFD               	movwf	tosl,c
 12566  01369C  50DE               	movf	postinc2,w,c
 12567  01369E  6EFE               	movwf	tosh,c
 12568  0136A0  50DE               	movf	postinc2,w,c
 12569  0136A2  6EFF               	movwf	tosu,c
 12570  0136A4  50FA               	movf	pclath,w,c
 12571  0136A6  0100               	movlb	0	; () banked
 12572  0136A8  5183               	movf	Button_Poll@Pin& (0+255),w,b
 12573  0136AA  0012               	return		;indir
 12574  0136AC                     __end_of_Button_Poll:
 12575                           	opt stack 0
 12576                           tosu	equ	0xFFF
 12577                           tosh	equ	0xFFE
 12578                           tosl	equ	0xFFD
 12579                           pclath	equ	0xFFA
 12580                           tblptru	equ	0xFF8
 12581                           tblptrh	equ	0xFF7
 12582                           tblptrl	equ	0xFF6
 12583                           tablat	equ	0xFF5
 12584                           prodh	equ	0xFF4
 12585                           prodl	equ	0xFF3
 12586                           postinc0	equ	0xFEE
 12587                           wreg	equ	0xFE8
 12588                           indf1	equ	0xFE7
 12589                           postdec1	equ	0xFE5
 12590                           fsr1h	equ	0xFE2
 12591                           fsr1l	equ	0xFE1
 12592                           indf2	equ	0xFDF
 12593                           postinc2	equ	0xFDE
 12594                           postdec2	equ	0xFDD
 12595                           fsr2h	equ	0xFDA
 12596                           fsr2l	equ	0xFD9
 12597                           status	equ	0xFD8
 12598                           
 12599 ;; *************** function _MXK_DIPSwitch *****************
 12600 ;; Defined at:
 12601 ;;		line 24 in file "Library/MXK.c"
 12602 ;; Parameters:    Size  Location     Type
 12603 ;;		None
 12604 ;; Auto vars:     Size  Location     Type
 12605 ;;		None
 12606 ;; Return value:  Size  Location     Type
 12607 ;;                  1    wreg      unsigned char 
 12608 ;; Registers used:
 12609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12610 ;; Tracked objects:
 12611 ;;		On entry : 0/0
 12612 ;;		On exit  : 0/0
 12613 ;;		Unchanged: 0/0
 12614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;Total ram usage:        0 bytes
 12620 ;; Hardware stack levels used:    1
 12621 ;; Hardware stack levels required when called:    8
 12622 ;; This function calls:
 12623 ;;		_Port_GetQuad
 12624 ;; This function is called by:
 12625 ;;		_FunctInitButton
 12626 ;;		_Button_Poll
 12627 ;;		_inputVar
 12628 ;; This function uses a non-reentrant model
 12629 ;;
 12630                           
 12631                           	psect	text41
 12632  016856                     __ptext41:
 12633                           	opt stack 0
 12634  016856                     _MXK_DIPSwitch:
 12635                           	opt stack 21
 12636                           
 12637                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 12638                           
 12639                           ;incstack = 0
 12640  016856  0E8E               	movlw	low _PortD
 12641  016858  0100               	movlb	0	; () banked
 12642  01685A  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 12643  01685C  0E01               	movlw	high _PortD
 12644  01685E  0100               	movlb	0	; () banked
 12645  016860  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12646  016862  0E00               	movlw	0
 12647  016864  0100               	movlb	0	; () banked
 12648  016866  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 12649  016868  ECFE  F0AF         	call	_Port_GetQuad
 12650  01686C  0012               	return	
 12651  01686E                     __end_of_MXK_DIPSwitch:
 12652                           	opt stack 0
 12653                           tosu	equ	0xFFF
 12654                           tosh	equ	0xFFE
 12655                           tosl	equ	0xFFD
 12656                           pclath	equ	0xFFA
 12657                           tblptru	equ	0xFF8
 12658                           tblptrh	equ	0xFF7
 12659                           tblptrl	equ	0xFF6
 12660                           tablat	equ	0xFF5
 12661                           prodh	equ	0xFF4
 12662                           prodl	equ	0xFF3
 12663                           postinc0	equ	0xFEE
 12664                           wreg	equ	0xFE8
 12665                           indf1	equ	0xFE7
 12666                           postdec1	equ	0xFE5
 12667                           fsr1h	equ	0xFE2
 12668                           fsr1l	equ	0xFE1
 12669                           indf2	equ	0xFDF
 12670                           postinc2	equ	0xFDE
 12671                           postdec2	equ	0xFDD
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676 ;; *************** function _HMI_DIPSwitch *****************
 12677 ;; Defined at:
 12678 ;;		line 47 in file "HMI.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;		None
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      unsigned char 
 12685 ;; Registers used:
 12686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;Total ram usage:        0 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:    8
 12699 ;; This function calls:
 12700 ;;		_Port_GetQuad
 12701 ;; This function is called by:
 12702 ;;		_HMI_Init
 12703 ;;		_Button_Poll
 12704 ;;		_inputVar
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           	psect	text42
 12709  01686E                     __ptext42:
 12710                           	opt stack 0
 12711  01686E                     _HMI_DIPSwitch:
 12712                           	opt stack 19
 12713                           
 12714                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 12715                           
 12716                           ;incstack = 0
 12717  01686E  0E84               	movlw	low _PortE
 12718  016870  0100               	movlb	0	; () banked
 12719  016872  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 12720  016874  0E01               	movlw	high _PortE
 12721  016876  0100               	movlb	0	; () banked
 12722  016878  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12723  01687A  0E00               	movlw	0
 12724  01687C  0100               	movlb	0	; () banked
 12725  01687E  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 12726  016880  ECFE  F0AF         	call	_Port_GetQuad	;wreg free
 12727  016884  0012               	return	
 12728  016886                     __end_of_HMI_DIPSwitch:
 12729                           	opt stack 0
 12730                           tosu	equ	0xFFF
 12731                           tosh	equ	0xFFE
 12732                           tosl	equ	0xFFD
 12733                           pclath	equ	0xFFA
 12734                           tblptru	equ	0xFF8
 12735                           tblptrh	equ	0xFF7
 12736                           tblptrl	equ	0xFF6
 12737                           tablat	equ	0xFF5
 12738                           prodh	equ	0xFF4
 12739                           prodl	equ	0xFF3
 12740                           postinc0	equ	0xFEE
 12741                           wreg	equ	0xFE8
 12742                           indf1	equ	0xFE7
 12743                           postdec1	equ	0xFE5
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           fsr2h	equ	0xFDA
 12750                           fsr2l	equ	0xFD9
 12751                           status	equ	0xFD8
 12752                           
 12753 ;; *************** function _HMI_DownSwitch *****************
 12754 ;; Defined at:
 12755 ;;		line 42 in file "HMI.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;		None
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      unsigned char 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;Total ram usage:        0 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    8
 12776 ;; This function calls:
 12777 ;;		_Port_GetPin
 12778 ;; This function is called by:
 12779 ;;		_HMI_Init
 12780 ;;		_Button_Poll
 12781 ;;		_inputVar
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           	psect	text43
 12786  016886                     __ptext43:
 12787                           	opt stack 0
 12788  016886                     _HMI_DownSwitch:
 12789                           	opt stack 19
 12790                           
 12791                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 12792                           
 12793                           ;incstack = 0
 12794  016886  0E84               	movlw	low _PortE
 12795  016888  0100               	movlb	0	; () banked
 12796  01688A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12797  01688C  0E01               	movlw	high _PortE
 12798  01688E  0100               	movlb	0	; () banked
 12799  016890  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12800  016892  0E06               	movlw	6
 12801  016894  0100               	movlb	0	; () banked
 12802  016896  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12803  016898  ECB3  F0B0         	call	_Port_GetPin	;wreg free
 12804  01689C  0012               	return	
 12805  01689E                     __end_of_HMI_DownSwitch:
 12806                           	opt stack 0
 12807                           tosu	equ	0xFFF
 12808                           tosh	equ	0xFFE
 12809                           tosl	equ	0xFFD
 12810                           pclath	equ	0xFFA
 12811                           tblptru	equ	0xFF8
 12812                           tblptrh	equ	0xFF7
 12813                           tblptrl	equ	0xFF6
 12814                           tablat	equ	0xFF5
 12815                           prodh	equ	0xFF4
 12816                           prodl	equ	0xFF3
 12817                           postinc0	equ	0xFEE
 12818                           wreg	equ	0xFE8
 12819                           indf1	equ	0xFE7
 12820                           postdec1	equ	0xFE5
 12821                           fsr1h	equ	0xFE2
 12822                           fsr1l	equ	0xFE1
 12823                           indf2	equ	0xFDF
 12824                           postinc2	equ	0xFDE
 12825                           postdec2	equ	0xFDD
 12826                           fsr2h	equ	0xFDA
 12827                           fsr2l	equ	0xFD9
 12828                           status	equ	0xFD8
 12829                           
 12830 ;; *************** function _HMI_UpSwitch *****************
 12831 ;; Defined at:
 12832 ;;		line 37 in file "HMI.c"
 12833 ;; Parameters:    Size  Location     Type
 12834 ;;		None
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;		None
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  1    wreg      unsigned char 
 12839 ;; Registers used:
 12840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;Total ram usage:        0 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    8
 12853 ;; This function calls:
 12854 ;;		_Port_GetPin
 12855 ;; This function is called by:
 12856 ;;		_HMI_Init
 12857 ;;		_Button_Poll
 12858 ;;		_inputVar
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text44
 12863  01689E                     __ptext44:
 12864                           	opt stack 0
 12865  01689E                     _HMI_UpSwitch:
 12866                           	opt stack 21
 12867                           
 12868                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 12869                           
 12870                           ;incstack = 0
 12871  01689E  0E84               	movlw	low _PortE
 12872  0168A0  0100               	movlb	0	; () banked
 12873  0168A2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12874  0168A4  0E01               	movlw	high _PortE
 12875  0168A6  0100               	movlb	0	; () banked
 12876  0168A8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12877  0168AA  0E07               	movlw	7
 12878  0168AC  0100               	movlb	0	; () banked
 12879  0168AE  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12880  0168B0  ECB3  F0B0         	call	_Port_GetPin	;wreg free
 12881  0168B4  0012               	return	
 12882  0168B6                     __end_of_HMI_UpSwitch:
 12883                           	opt stack 0
 12884                           tosu	equ	0xFFF
 12885                           tosh	equ	0xFFE
 12886                           tosl	equ	0xFFD
 12887                           pclath	equ	0xFFA
 12888                           tblptru	equ	0xFF8
 12889                           tblptrh	equ	0xFF7
 12890                           tblptrl	equ	0xFF6
 12891                           tablat	equ	0xFF5
 12892                           prodh	equ	0xFF4
 12893                           prodl	equ	0xFF3
 12894                           postinc0	equ	0xFEE
 12895                           wreg	equ	0xFE8
 12896                           indf1	equ	0xFE7
 12897                           postdec1	equ	0xFE5
 12898                           fsr1h	equ	0xFE2
 12899                           fsr1l	equ	0xFE1
 12900                           indf2	equ	0xFDF
 12901                           postinc2	equ	0xFDE
 12902                           postdec2	equ	0xFDD
 12903                           fsr2h	equ	0xFDA
 12904                           fsr2l	equ	0xFD9
 12905                           status	equ	0xFD8
 12906                           
 12907 ;; *************** function _HMI_RightSwitch *****************
 12908 ;; Defined at:
 12909 ;;		line 32 in file "HMI.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;		None
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;		None
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      unsigned char 
 12916 ;; Registers used:
 12917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12927 ;;Total ram usage:        0 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    8
 12930 ;; This function calls:
 12931 ;;		_Port_GetPin
 12932 ;; This function is called by:
 12933 ;;		_HMI_Init
 12934 ;;		_Button_Poll
 12935 ;;		_inputVar
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           	psect	text45
 12940  0168B6                     __ptext45:
 12941                           	opt stack 0
 12942  0168B6                     _HMI_RightSwitch:
 12943                           	opt stack 21
 12944                           
 12945                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 12946                           
 12947                           ;incstack = 0
 12948  0168B6  0E84               	movlw	low _PortE
 12949  0168B8  0100               	movlb	0	; () banked
 12950  0168BA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12951  0168BC  0E01               	movlw	high _PortE
 12952  0168BE  0100               	movlb	0	; () banked
 12953  0168C0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12954  0168C2  0E04               	movlw	4
 12955  0168C4  0100               	movlb	0	; () banked
 12956  0168C6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12957  0168C8  ECB3  F0B0         	call	_Port_GetPin	;wreg free
 12958  0168CC  0012               	return	
 12959  0168CE                     __end_of_HMI_RightSwitch:
 12960                           	opt stack 0
 12961                           tosu	equ	0xFFF
 12962                           tosh	equ	0xFFE
 12963                           tosl	equ	0xFFD
 12964                           pclath	equ	0xFFA
 12965                           tblptru	equ	0xFF8
 12966                           tblptrh	equ	0xFF7
 12967                           tblptrl	equ	0xFF6
 12968                           tablat	equ	0xFF5
 12969                           prodh	equ	0xFF4
 12970                           prodl	equ	0xFF3
 12971                           postinc0	equ	0xFEE
 12972                           wreg	equ	0xFE8
 12973                           indf1	equ	0xFE7
 12974                           postdec1	equ	0xFE5
 12975                           fsr1h	equ	0xFE2
 12976                           fsr1l	equ	0xFE1
 12977                           indf2	equ	0xFDF
 12978                           postinc2	equ	0xFDE
 12979                           postdec2	equ	0xFDD
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function _HMI_LeftSwitch *****************
 12985 ;; Defined at:
 12986 ;;		line 27 in file "HMI.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;		None
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;		None
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      unsigned char 
 12993 ;; Registers used:
 12994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;Total ram usage:        0 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    8
 13007 ;; This function calls:
 13008 ;;		_Port_GetPin
 13009 ;; This function is called by:
 13010 ;;		_HMI_Init
 13011 ;;		_Button_Poll
 13012 ;;		_inputVar
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           	psect	text46
 13017  0168CE                     __ptext46:
 13018                           	opt stack 0
 13019  0168CE                     _HMI_LeftSwitch:
 13020                           	opt stack 19
 13021                           
 13022                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 13023                           
 13024                           ;incstack = 0
 13025  0168CE  0E84               	movlw	low _PortE
 13026  0168D0  0100               	movlb	0	; () banked
 13027  0168D2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13028  0168D4  0E01               	movlw	high _PortE
 13029  0168D6  0100               	movlb	0	; () banked
 13030  0168D8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13031  0168DA  0E05               	movlw	5
 13032  0168DC  0100               	movlb	0	; () banked
 13033  0168DE  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13034  0168E0  ECB3  F0B0         	call	_Port_GetPin	;wreg free
 13035  0168E4  0012               	return	
 13036  0168E6                     __end_of_HMI_LeftSwitch:
 13037                           	opt stack 0
 13038                           tosu	equ	0xFFF
 13039                           tosh	equ	0xFFE
 13040                           tosl	equ	0xFFD
 13041                           pclath	equ	0xFFA
 13042                           tblptru	equ	0xFF8
 13043                           tblptrh	equ	0xFF7
 13044                           tblptrl	equ	0xFF6
 13045                           tablat	equ	0xFF5
 13046                           prodh	equ	0xFF4
 13047                           prodl	equ	0xFF3
 13048                           postinc0	equ	0xFEE
 13049                           wreg	equ	0xFE8
 13050                           indf1	equ	0xFE7
 13051                           postdec1	equ	0xFE5
 13052                           fsr1h	equ	0xFE2
 13053                           fsr1l	equ	0xFE1
 13054                           indf2	equ	0xFDF
 13055                           postinc2	equ	0xFDE
 13056                           postdec2	equ	0xFDD
 13057                           fsr2h	equ	0xFDA
 13058                           fsr2l	equ	0xFD9
 13059                           status	equ	0xFD8
 13060                           
 13061 ;; *************** function _MXK_TestButton *****************
 13062 ;; Defined at:
 13063 ;;		line 14 in file "Library/MXK.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;		None
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;		None
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  1    wreg      unsigned char 
 13070 ;; Registers used:
 13071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13081 ;;Total ram usage:        0 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:    8
 13084 ;; This function calls:
 13085 ;;		_Port_GetPin
 13086 ;; This function is called by:
 13087 ;;		_FunctInitButton
 13088 ;;		_Button_Poll
 13089 ;;		_inputVar
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           	psect	text47
 13094  0168E6                     __ptext47:
 13095                           	opt stack 0
 13096  0168E6                     _MXK_TestButton:
 13097                           	opt stack 21
 13098                           
 13099                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 13100                           
 13101                           ;incstack = 0
 13102  0168E6  0E98               	movlw	low _PortB
 13103  0168E8  0100               	movlb	0	; () banked
 13104  0168EA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13105  0168EC  0E01               	movlw	high _PortB
 13106  0168EE  0100               	movlb	0	; () banked
 13107  0168F0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13108  0168F2  0E04               	movlw	4
 13109  0168F4  0100               	movlb	0	; () banked
 13110  0168F6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13111  0168F8  ECB3  F0B0         	call	_Port_GetPin	;wreg free
 13112  0168FC  0012               	return	
 13113  0168FE                     __end_of_MXK_TestButton:
 13114                           	opt stack 0
 13115                           tosu	equ	0xFFF
 13116                           tosh	equ	0xFFE
 13117                           tosl	equ	0xFFD
 13118                           pclath	equ	0xFFA
 13119                           tblptru	equ	0xFF8
 13120                           tblptrh	equ	0xFF7
 13121                           tblptrl	equ	0xFF6
 13122                           tablat	equ	0xFF5
 13123                           prodh	equ	0xFF4
 13124                           prodl	equ	0xFF3
 13125                           postinc0	equ	0xFEE
 13126                           wreg	equ	0xFE8
 13127                           indf1	equ	0xFE7
 13128                           postdec1	equ	0xFE5
 13129                           fsr1h	equ	0xFE2
 13130                           fsr1l	equ	0xFE1
 13131                           indf2	equ	0xFDF
 13132                           postinc2	equ	0xFDE
 13133                           postdec2	equ	0xFDD
 13134                           fsr2h	equ	0xFDA
 13135                           fsr2l	equ	0xFD9
 13136                           status	equ	0xFD8
 13137                           
 13138 ;; *************** function _Port_GetQuad *****************
 13139 ;; Defined at:
 13140 ;;		line 498 in file "Library/Port.c"
 13141 ;; Parameters:    Size  Location     Type
 13142 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13143 ;;		 -> PortE(10), PortD(10), 
 13144 ;;  pQuad           1    2[BANK0 ] enum E6776
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;  Output          1    5[BANK0 ] unsigned char 
 13147 ;; Return value:  Size  Location     Type
 13148 ;;                  1    wreg      unsigned char 
 13149 ;; Registers used:
 13150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13151 ;; Tracked objects:
 13152 ;;		On entry : 0/0
 13153 ;;		On exit  : 0/0
 13154 ;;		Unchanged: 0/0
 13155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13156 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13159 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13160 ;;Total ram usage:        6 bytes
 13161 ;; Hardware stack levels used:    1
 13162 ;; Hardware stack levels required when called:    7
 13163 ;; This function calls:
 13164 ;;		Nothing
 13165 ;; This function is called by:
 13166 ;;		_HMI_DIPSwitch
 13167 ;;		_MXK_DIPSwitch
 13168 ;;		_Port_ToggleQuad
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           	psect	text48
 13173  015FFC                     __ptext48:
 13174                           	opt stack 0
 13175  015FFC                     _Port_GetQuad:
 13176                           	opt stack 21
 13177                           
 13178                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 13179                           
 13180                           ;incstack = 0
 13181  015FFC  0100               	movlb	0	; () banked
 13182  015FFE  EE20 F006          	lfsr	2,6
 13183  016002  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 13184  016004  26D9               	addwf	fsr2l,f,c
 13185  016006  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 13186  016008  22DA               	addwfc	fsr2h,f,c
 13187  01600A  CFDE F063          	movff	postinc2,??_Port_GetQuad
 13188  01600E  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 13189  016012  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 13190  016016  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 13191  01601A  50DF               	movf	indf2,w,c
 13192  01601C  0100               	movlb	0	; () banked
 13193  01601E  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 13197  016020  0100               	movlb	0	; () banked
 13198  016022  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 13199  016024  0D04               	mullw	4
 13200  016026  28F3               	incf	prodl,w,c
 13201  016028  0100               	movlb	0	; () banked
 13202  01602A  6F63               	movwf	??_Port_GetQuad& (0+255),b
 13203  01602C  D003               	goto	u9590
 13204  01602E                     u9595:
 13205  01602E  0100               	movlb	0	; () banked
 13206  016030  90D8               	bcf	status,0,c
 13207  016032  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 13208  016034                     u9590:
 13209  016034  0100               	movlb	0	; () banked
 13210  016036  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 13211  016038  D7FA               	goto	u9595
 13212                           
 13213                           ;Port.c: 502: Output &= 0xF;
 13214  01603A  0E0F               	movlw	15
 13215  01603C  0100               	movlb	0	; () banked
 13216  01603E  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 13217                           
 13218                           ; BSR set to: 0
 13219                           ;Port.c: 503: return Output;
 13220  016040  0100               	movlb	0	; () banked
 13221  016042  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 13222  016044  0012               	return	
 13223  016046                     __end_of_Port_GetQuad:
 13224                           	opt stack 0
 13225                           tosu	equ	0xFFF
 13226                           tosh	equ	0xFFE
 13227                           tosl	equ	0xFFD
 13228                           pclath	equ	0xFFA
 13229                           tblptru	equ	0xFF8
 13230                           tblptrh	equ	0xFF7
 13231                           tblptrl	equ	0xFF6
 13232                           tablat	equ	0xFF5
 13233                           prodh	equ	0xFF4
 13234                           prodl	equ	0xFF3
 13235                           postinc0	equ	0xFEE
 13236                           wreg	equ	0xFE8
 13237                           indf1	equ	0xFE7
 13238                           postdec1	equ	0xFE5
 13239                           fsr1h	equ	0xFE2
 13240                           fsr1l	equ	0xFE1
 13241                           indf2	equ	0xFDF
 13242                           postinc2	equ	0xFDE
 13243                           postdec2	equ	0xFDD
 13244                           fsr2h	equ	0xFDA
 13245                           fsr2l	equ	0xFD9
 13246                           status	equ	0xFD8
 13247                           
 13248 ;; *************** function _Event_DIPSwitch *****************
 13249 ;; Defined at:
 13250 ;;		line 22 in file "Events.c"
 13251 ;; Parameters:    Size  Location     Type
 13252 ;;  pState          1    wreg     unsigned char 
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;  pState          1   25[BANK0 ] unsigned char 
 13255 ;;  Bar             1   26[BANK0 ] unsigned char 
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  1    wreg      void 
 13258 ;; Registers used:
 13259 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;Total ram usage:        2 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:   13
 13272 ;; This function calls:
 13273 ;;		_HMI_GetBar
 13274 ;;		_HMI_SetBar
 13275 ;;		_LED_Toggle
 13276 ;; This function is called by:
 13277 ;;		_FunctInitButton
 13278 ;;		_Button_Poll
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           	psect	text49
 13283  0165F0                     __ptext49:
 13284                           	opt stack 0
 13285  0165F0                     _Event_DIPSwitch:
 13286                           	opt stack 14
 13287                           
 13288                           ; BSR set to: 0
 13289                           ;incstack = 0
 13290                           ;Event_DIPSwitch@pState stored from wreg
 13291  0165F0  0100               	movlb	0	; () banked
 13292  0165F2  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 13293                           
 13294                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 13295  0165F4  ECF9  F0B4         	call	_HMI_GetBar	;wreg free
 13296  0165F8  0100               	movlb	0	; () banked
 13297  0165FA  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;Events.c: 25: Bar &= 0x0F;
 13301  0165FC  0E0F               	movlw	15
 13302  0165FE  0100               	movlb	0	; () banked
 13303  016600  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 13304                           
 13305                           ; BSR set to: 0
 13306                           ;Events.c: 26: pState <<= 4;
 13307  016602  0100               	movlb	0	; () banked
 13308  016604  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 13309  016606  0EF0               	movlw	240
 13310  016608  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 13311                           
 13312                           ; BSR set to: 0
 13313                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 13314  01660A  0100               	movlb	0	; () banked
 13315  01660C  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 13316  01660E  0100               	movlb	0	; () banked
 13317  016610  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 13318  016612  ECE4  F0B4         	call	_HMI_SetBar
 13319                           
 13320                           ;Events.c: 32: LED_Toggle(eLED1);
 13321  016616  0E00               	movlw	0
 13322  016618  EC6B  F0B0         	call	_LED_Toggle
 13323  01661C  0012               	return		;funcret
 13324  01661E                     __end_of_Event_DIPSwitch:
 13325                           	opt stack 0
 13326                           tosu	equ	0xFFF
 13327                           tosh	equ	0xFFE
 13328                           tosl	equ	0xFFD
 13329                           pclath	equ	0xFFA
 13330                           tblptru	equ	0xFF8
 13331                           tblptrh	equ	0xFF7
 13332                           tblptrl	equ	0xFF6
 13333                           tablat	equ	0xFF5
 13334                           prodh	equ	0xFF4
 13335                           prodl	equ	0xFF3
 13336                           postinc0	equ	0xFEE
 13337                           wreg	equ	0xFE8
 13338                           indf1	equ	0xFE7
 13339                           postdec1	equ	0xFE5
 13340                           fsr1h	equ	0xFE2
 13341                           fsr1l	equ	0xFE1
 13342                           indf2	equ	0xFDF
 13343                           postinc2	equ	0xFDE
 13344                           postdec2	equ	0xFDD
 13345                           fsr2h	equ	0xFDA
 13346                           fsr2l	equ	0xFD9
 13347                           status	equ	0xFD8
 13348                           
 13349 ;; *************** function _Event_NULL *****************
 13350 ;; Defined at:
 13351 ;;		line 9 in file "Events.c"
 13352 ;; Parameters:    Size  Location     Type
 13353 ;;  pState          1    wreg     unsigned char 
 13354 ;; Auto vars:     Size  Location     Type
 13355 ;;  pState          1    0[COMRAM] unsigned char 
 13356 ;; Return value:  Size  Location     Type
 13357 ;;                  1    wreg      void 
 13358 ;; Registers used:
 13359 ;;		wreg
 13360 ;; Tracked objects:
 13361 ;;		On entry : 0/0
 13362 ;;		On exit  : 0/0
 13363 ;;		Unchanged: 0/0
 13364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13369 ;;Total ram usage:        0 bytes
 13370 ;; Hardware stack levels used:    1
 13371 ;; Hardware stack levels required when called:    7
 13372 ;; This function calls:
 13373 ;;		Nothing
 13374 ;; This function is called by:
 13375 ;;		_HMI_Init
 13376 ;;		_Button_Poll
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           	psect	text50
 13381  001404                     __ptext50:
 13382                           	opt stack 0
 13383  001404                     _Event_NULL:
 13384                           	opt stack 20
 13385                           
 13386                           ;incstack = 0
 13387  001404  0012               	return		;funcret
 13388  001406                     __end_of_Event_NULL:
 13389                           	opt stack 0
 13390                           tosu	equ	0xFFF
 13391                           tosh	equ	0xFFE
 13392                           tosl	equ	0xFFD
 13393                           pclath	equ	0xFFA
 13394                           tblptru	equ	0xFF8
 13395                           tblptrh	equ	0xFF7
 13396                           tblptrl	equ	0xFF6
 13397                           tablat	equ	0xFF5
 13398                           prodh	equ	0xFF4
 13399                           prodl	equ	0xFF3
 13400                           postinc0	equ	0xFEE
 13401                           wreg	equ	0xFE8
 13402                           indf1	equ	0xFE7
 13403                           postdec1	equ	0xFE5
 13404                           fsr1h	equ	0xFE2
 13405                           fsr1l	equ	0xFE1
 13406                           indf2	equ	0xFDF
 13407                           postinc2	equ	0xFDE
 13408                           postdec2	equ	0xFDD
 13409                           fsr2h	equ	0xFDA
 13410                           fsr2l	equ	0xFD9
 13411                           status	equ	0xFD8
 13412                           
 13413 ;; *************** function _Event_TestButton *****************
 13414 ;; Defined at:
 13415 ;;		line 52 in file "Events.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;  pState          1    wreg     unsigned char 
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;  pState          1   25[BANK0 ] unsigned char 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      void 
 13422 ;; Registers used:
 13423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;Total ram usage:        1 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:   13
 13436 ;; This function calls:
 13437 ;;		_HMI_SetButton
 13438 ;;		_HMI_SetNumber
 13439 ;;		_LED_Toggle
 13440 ;; This function is called by:
 13441 ;;		_FunctInitButton
 13442 ;;		_Button_Poll
 13443 ;; This function uses a non-reentrant model
 13444 ;;
 13445                           
 13446                           	psect	text51
 13447  0163B0                     __ptext51:
 13448                           	opt stack 0
 13449  0163B0                     _Event_TestButton:
 13450                           	opt stack 14
 13451                           
 13452                           ;incstack = 0
 13453                           ;Event_TestButton@pState stored from wreg
 13454  0163B0  0100               	movlb	0	; () banked
 13455  0163B2  6F79               	movwf	Event_TestButton@pState& (0+255),b
 13456                           
 13457                           ;Events.c: 56: static UINT8 j = 0;
 13458                           ;Events.c: 60: if (pState == 0)
 13459  0163B4  0100               	movlb	0	; () banked
 13460  0163B6  5179               	movf	Event_TestButton@pState& (0+255),w,b
 13461  0163B8  0100               	movlb	0	; () banked
 13462  0163BA  A4D8               	btfss	status,2,c
 13463  0163BC  D013               	goto	l13291
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;Events.c: 61: {
 13467                           ;Events.c: 62: j++;
 13468  0163BE  0100               	movlb	0	; () banked
 13469  0163C0  2BE6               	incf	Event_TestButton@j& (0+255),f,b
 13470                           
 13471                           ; BSR set to: 0
 13472                           ;Events.c: 63: val += j;
 13473  0163C2  0100               	movlb	0	; () banked
 13474  0163C4  51E6               	movf	Event_TestButton@j& (0+255),w,b
 13475  0163C6  0100               	movlb	0	; () banked
 13476  0163C8  27DA               	addwf	_val& (0+255),f,b
 13477  0163CA  0E00               	movlw	0
 13478  0163CC  23DB               	addwfc	(_val+1)& (0+255),f,b
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;Events.c: 64: HMI_SetNumber( val );
 13482  0163CE  C0DA  F076         	movff	_val,HMI_SetNumber@pInput
 13483  0163D2  C0DB  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 13484  0163D6  EC26  F0B3         	call	_HMI_SetNumber	;wreg free
 13485                           
 13486                           ;Events.c: 67: HMI_SetButton( j & 3 );
 13487  0163DA  0100               	movlb	0	; () banked
 13488  0163DC  51E6               	movf	Event_TestButton@j& (0+255),w,b
 13489  0163DE  0B03               	andlw	3
 13490  0163E0  EC64  F0A9         	call	_HMI_SetButton
 13491  0163E4                     l13291:
 13492                           
 13493                           ;Events.c: 68: }
 13494                           ;Events.c: 72: LED_Toggle(eLED1);
 13495  0163E4  0E00               	movlw	0
 13496  0163E6  EC6B  F0B0         	call	_LED_Toggle
 13497  0163EA  0012               	return		;funcret
 13498  0163EC                     __end_of_Event_TestButton:
 13499                           	opt stack 0
 13500                           tosu	equ	0xFFF
 13501                           tosh	equ	0xFFE
 13502                           tosl	equ	0xFFD
 13503                           pclath	equ	0xFFA
 13504                           tblptru	equ	0xFF8
 13505                           tblptrh	equ	0xFF7
 13506                           tblptrl	equ	0xFF6
 13507                           tablat	equ	0xFF5
 13508                           prodh	equ	0xFF4
 13509                           prodl	equ	0xFF3
 13510                           postinc0	equ	0xFEE
 13511                           wreg	equ	0xFE8
 13512                           indf1	equ	0xFE7
 13513                           postdec1	equ	0xFE5
 13514                           fsr1h	equ	0xFE2
 13515                           fsr1l	equ	0xFE1
 13516                           indf2	equ	0xFDF
 13517                           postinc2	equ	0xFDE
 13518                           postdec2	equ	0xFDD
 13519                           fsr2h	equ	0xFDA
 13520                           fsr2l	equ	0xFD9
 13521                           status	equ	0xFD8
 13522                           
 13523 ;; *************** function _HMI_SetNumber *****************
 13524 ;; Defined at:
 13525 ;;		line 221 in file "HMI.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;  pInput          2   22[BANK0 ] int 
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;		None
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;Total ram usage:        2 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    9
 13546 ;; This function calls:
 13547 ;;		_HMI_SetSegments
 13548 ;;		_itos
 13549 ;; This function is called by:
 13550 ;;		_Event_TestButton
 13551 ;;		_printToScreen
 13552 ;;		_Event_HMI_UpButton
 13553 ;;		_Event_HMI_DownButton
 13554 ;; This function uses a non-reentrant model
 13555 ;;
 13556                           
 13557                           	psect	text52
 13558  01664C                     __ptext52:
 13559                           	opt stack 0
 13560  01664C                     _HMI_SetNumber:
 13561                           	opt stack 20
 13562                           
 13563                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 13564                           
 13565                           ;incstack = 0
 13566  01664C  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 13567  016650  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 13568  016654  0E16               	movlw	low _HMIBoard
 13569  016656  0100               	movlb	0	; () banked
 13570  016658  6F6E               	movwf	itos@destination& (0+255),b
 13571  01665A  0E01               	movlw	high _HMIBoard
 13572  01665C  0100               	movlb	0	; () banked
 13573  01665E  6F6F               	movwf	(itos@destination+1)& (0+255),b
 13574  016660  ECF7  F0A0         	call	_itos	;wreg free
 13575                           
 13576                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 13577  016664  0E16               	movlw	low _HMIBoard
 13578  016666  0100               	movlb	0	; () banked
 13579  016668  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 13580  01666A  0E01               	movlw	high _HMIBoard
 13581  01666C  0100               	movlb	0	; () banked
 13582  01666E  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 13583  016670  EC20  F0A4         	call	_HMI_SetSegments	;wreg free
 13584  016674  0012               	return		;funcret
 13585  016676                     __end_of_HMI_SetNumber:
 13586                           	opt stack 0
 13587                           tosu	equ	0xFFF
 13588                           tosh	equ	0xFFE
 13589                           tosl	equ	0xFFD
 13590                           pclath	equ	0xFFA
 13591                           tblptru	equ	0xFF8
 13592                           tblptrh	equ	0xFF7
 13593                           tblptrl	equ	0xFF6
 13594                           tablat	equ	0xFF5
 13595                           prodh	equ	0xFF4
 13596                           prodl	equ	0xFF3
 13597                           postinc0	equ	0xFEE
 13598                           wreg	equ	0xFE8
 13599                           indf1	equ	0xFE7
 13600                           postdec1	equ	0xFE5
 13601                           fsr1h	equ	0xFE2
 13602                           fsr1l	equ	0xFE1
 13603                           indf2	equ	0xFDF
 13604                           postinc2	equ	0xFDE
 13605                           postdec2	equ	0xFDD
 13606                           fsr2h	equ	0xFDA
 13607                           fsr2l	equ	0xFD9
 13608                           status	equ	0xFD8
 13609                           
 13610 ;; *************** function _itos *****************
 13611 ;; Defined at:
 13612 ;;		line 369 in file "Library/Types.c"
 13613 ;; Parameters:    Size  Location     Type
 13614 ;;  input           2   12[BANK0 ] unsigned short 
 13615 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 13616 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  Out             2   20[BANK0 ] unsigned short 
 13619 ;;  Length          2   18[BANK0 ] unsigned short 
 13620 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 13621 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13622 ;; Return value:  Size  Location     Type
 13623 ;;                  1    wreg      void 
 13624 ;; Registers used:
 13625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13626 ;; Tracked objects:
 13627 ;;		On entry : 0/0
 13628 ;;		On exit  : 0/0
 13629 ;;		Unchanged: 0/0
 13630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;Total ram usage:       10 bytes
 13636 ;; Hardware stack levels used:    1
 13637 ;; Hardware stack levels required when called:    8
 13638 ;; This function calls:
 13639 ;;		___lwdiv
 13640 ;;		___lwmod
 13641 ;;		_reverse
 13642 ;; This function is called by:
 13643 ;;		_HMI_SetNumber
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           	psect	text53
 13648  0141EE                     __ptext53:
 13649                           	opt stack 0
 13650  0141EE                     _itos:
 13651                           	opt stack 20
 13652                           
 13653                           ;Types.c: 371: UINT16 Out = input;
 13654                           
 13655                           ;incstack = 0
 13656  0141EE  C06C  F074         	movff	itos@input,itos@Out
 13657  0141F2  C06D  F075         	movff	itos@input+1,itos@Out+1
 13658                           
 13659                           ;Types.c: 372: UINT16 Length = 0;
 13660  0141F6  0E00               	movlw	0
 13661  0141F8  0100               	movlb	0	; () banked
 13662  0141FA  6F73               	movwf	(itos@Length+1)& (0+255),b
 13663  0141FC  0E00               	movlw	0
 13664  0141FE  6F72               	movwf	itos@Length& (0+255),b
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;Types.c: 373: char *Data = destination;
 13668  014200  C06E  F070         	movff	itos@destination,itos@Data
 13669  014204  C06F  F071         	movff	itos@destination+1,itos@Data+1
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;Types.c: 374: if(Out == 0)
 13673  014208  0100               	movlb	0	; () banked
 13674  01420A  5174               	movf	itos@Out& (0+255),w,b
 13675  01420C  0100               	movlb	0	; () banked
 13676  01420E  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 13677  014210  A4D8               	btfss	status,2,c
 13678  014212  D034               	goto	l11987
 13679                           
 13680                           ; BSR set to: 0
 13681                           ;Types.c: 375: {
 13682                           ;Types.c: 376: Data[0] = (UINT16)'0';
 13683  014214  C070  FFD9         	movff	itos@Data,fsr2l
 13684  014218  C071  FFDA         	movff	itos@Data+1,fsr2h
 13685  01421C  0E30               	movlw	48
 13686  01421E  6EDF               	movwf	indf2,c
 13687                           
 13688                           ; BSR set to: 0
 13689                           ;Types.c: 377: Length = 1;
 13690  014220  0E00               	movlw	0
 13691  014222  0100               	movlb	0	; () banked
 13692  014224  6F73               	movwf	(itos@Length+1)& (0+255),b
 13693  014226  0E01               	movlw	1
 13694  014228  6F72               	movwf	itos@Length& (0+255),b
 13695                           
 13696                           ;Types.c: 378: }
 13697  01422A  D040               	goto	l11993
 13698  01422C                     l11979:
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;Types.c: 382: {
 13702                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 13703  01422C  C074  F067         	movff	itos@Out,___lwmod@dividend
 13704  014230  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 13705  014234  0E00               	movlw	0
 13706  014236  0100               	movlb	0	; () banked
 13707  014238  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13708  01423A  0E0A               	movlw	10
 13709  01423C  6F69               	movwf	___lwmod@divisor& (0+255),b
 13710  01423E  EC7D  F0AE         	call	___lwmod	;wreg free
 13711  014242  0100               	movlb	0	; () banked
 13712  014244  5167               	movf	?___lwmod& (0+255),w,b
 13713  014246  0F30               	addlw	48
 13714  014248  C070  FFD9         	movff	itos@Data,fsr2l
 13715  01424C  C071  FFDA         	movff	itos@Data+1,fsr2h
 13716  014250  6EDF               	movwf	indf2,c
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;Types.c: 384: Out /= 10;
 13720  014252  C074  F060         	movff	itos@Out,___lwdiv@dividend
 13721  014256  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 13722  01425A  0E00               	movlw	0
 13723  01425C  0100               	movlb	0	; () banked
 13724  01425E  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 13725  014260  0E0A               	movlw	10
 13726  014262  6F62               	movwf	___lwdiv@divisor& (0+255),b
 13727  014264  EC78  F0AB         	call	___lwdiv	;wreg free
 13728  014268  C060  F074         	movff	?___lwdiv,itos@Out
 13729  01426C  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 13730                           
 13731                           ;Types.c: 385: Length ++;
 13732  014270  0100               	movlb	0	; () banked
 13733  014272  4B72               	infsnz	itos@Length& (0+255),f,b
 13734  014274  2B73               	incf	(itos@Length+1)& (0+255),f,b
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;Types.c: 386: Data++;
 13738  014276  0100               	movlb	0	; () banked
 13739  014278  4B70               	infsnz	itos@Data& (0+255),f,b
 13740  01427A  2B71               	incf	(itos@Data+1)& (0+255),f,b
 13741  01427C                     l11987:
 13742                           
 13743                           ; BSR set to: 0
 13744  01427C  0100               	movlb	0	; () banked
 13745  01427E  5174               	movf	itos@Out& (0+255),w,b
 13746  014280  0100               	movlb	0	; () banked
 13747  014282  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 13748  014284  B4D8               	btfsc	status,2,c
 13749  014286  D008               	goto	l11991
 13750                           
 13751                           ; BSR set to: 0
 13752  014288  0100               	movlb	0	; () banked
 13753  01428A  5173               	movf	(itos@Length+1)& (0+255),w,b
 13754  01428C  E105               	bnz	l11991
 13755  01428E  0E06               	movlw	6
 13756  014290  0100               	movlb	0	; () banked
 13757  014292  5D72               	subwf	itos@Length& (0+255),w,b
 13758  014294  A0D8               	btfss	status,0,c
 13759  014296  D7CA               	goto	l11979
 13760  014298                     l11991:
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;Types.c: 387: }
 13764                           ;Types.c: 388: reverse(destination, Length);
 13765  014298  C06E  F060         	movff	itos@destination,reverse@input
 13766  01429C  C06F  F061         	movff	itos@destination+1,reverse@input+1
 13767  0142A0  C072  F062         	movff	itos@Length,reverse@length
 13768  0142A4  C073  F063         	movff	itos@Length+1,reverse@length+1
 13769  0142A8  EC0F  F0AD         	call	_reverse	;wreg free
 13770  0142AC                     l11993:
 13771                           
 13772                           ;Types.c: 389: }
 13773                           ;Types.c: 390: destination[Length] = '\0';
 13774  0142AC  0100               	movlb	0	; () banked
 13775  0142AE  5172               	movf	itos@Length& (0+255),w,b
 13776  0142B0  0100               	movlb	0	; () banked
 13777  0142B2  256E               	addwf	itos@destination& (0+255),w,b
 13778  0142B4  6ED9               	movwf	fsr2l,c
 13779  0142B6  0100               	movlb	0	; () banked
 13780  0142B8  5173               	movf	(itos@Length+1)& (0+255),w,b
 13781  0142BA  0100               	movlb	0	; () banked
 13782  0142BC  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 13783  0142BE  6EDA               	movwf	fsr2h,c
 13784  0142C0  0E00               	movlw	0
 13785  0142C2  6EDF               	movwf	indf2,c
 13786                           
 13787                           ; BSR set to: 0
 13788  0142C4  0012               	return		;funcret
 13789  0142C6                     __end_of_itos:
 13790                           	opt stack 0
 13791                           tosu	equ	0xFFF
 13792                           tosh	equ	0xFFE
 13793                           tosl	equ	0xFFD
 13794                           pclath	equ	0xFFA
 13795                           tblptru	equ	0xFF8
 13796                           tblptrh	equ	0xFF7
 13797                           tblptrl	equ	0xFF6
 13798                           tablat	equ	0xFF5
 13799                           prodh	equ	0xFF4
 13800                           prodl	equ	0xFF3
 13801                           postinc0	equ	0xFEE
 13802                           wreg	equ	0xFE8
 13803                           indf1	equ	0xFE7
 13804                           postdec1	equ	0xFE5
 13805                           fsr1h	equ	0xFE2
 13806                           fsr1l	equ	0xFE1
 13807                           indf2	equ	0xFDF
 13808                           postinc2	equ	0xFDE
 13809                           postdec2	equ	0xFDD
 13810                           fsr2h	equ	0xFDA
 13811                           fsr2l	equ	0xFD9
 13812                           status	equ	0xFD8
 13813                           
 13814 ;; *************** function _reverse *****************
 13815 ;; Defined at:
 13816 ;;		line 357 in file "Library/Types.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;  input           2    0[BANK0 ] PTR unsigned char 
 13819 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13820 ;;  length          2    2[BANK0 ] unsigned short 
 13821 ;; Auto vars:     Size  Location     Type
 13822 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 13823 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13824 ;;  tempVar         1    4[BANK0 ] unsigned char 
 13825 ;; Return value:  Size  Location     Type
 13826 ;;                  1    wreg      void 
 13827 ;; Registers used:
 13828 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13829 ;; Tracked objects:
 13830 ;;		On entry : 0/0
 13831 ;;		On exit  : 0/0
 13832 ;;		Unchanged: 0/0
 13833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13834 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;Total ram usage:        7 bytes
 13839 ;; Hardware stack levels used:    1
 13840 ;; Hardware stack levels required when called:    7
 13841 ;; This function calls:
 13842 ;;		Nothing
 13843 ;; This function is called by:
 13844 ;;		_itos
 13845 ;; This function uses a non-reentrant model
 13846 ;;
 13847                           
 13848                           	psect	text54
 13849  015A1E                     __ptext54:
 13850                           	opt stack 0
 13851  015A1E                     _reverse:
 13852                           	opt stack 20
 13853                           
 13854                           ;Types.c: 359: char tempVar,
 13855                           ;Types.c: 360: *iterator = input + length;
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;incstack = 0
 13859  015A1E  0100               	movlb	0	; () banked
 13860  015A20  5162               	movf	reverse@length& (0+255),w,b
 13861  015A22  0100               	movlb	0	; () banked
 13862  015A24  2560               	addwf	reverse@input& (0+255),w,b
 13863  015A26  0100               	movlb	0	; () banked
 13864  015A28  6F65               	movwf	reverse@iterator& (0+255),b
 13865  015A2A  0100               	movlb	0	; () banked
 13866  015A2C  5163               	movf	(reverse@length+1)& (0+255),w,b
 13867  015A2E  0100               	movlb	0	; () banked
 13868  015A30  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 13869  015A32  0100               	movlb	0	; () banked
 13870  015A34  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 13871                           
 13872                           ;Types.c: 362: while ( --iterator > input )
 13873  015A36  D01A               	goto	l11829
 13874  015A38                     l11821:
 13875                           
 13876                           ; BSR set to: 0
 13877                           ;Types.c: 363: {
 13878                           ;Types.c: 364: tempVar = *input;
 13879  015A38  C060  FFD9         	movff	reverse@input,fsr2l
 13880  015A3C  C061  FFDA         	movff	reverse@input+1,fsr2h
 13881  015A40  50DF               	movf	indf2,w,c
 13882  015A42  0100               	movlb	0	; () banked
 13883  015A44  6F64               	movwf	reverse@tempVar& (0+255),b
 13884                           
 13885                           ; BSR set to: 0
 13886                           ;Types.c: 365: *input++=*iterator;
 13887  015A46  C065  FFD9         	movff	reverse@iterator,fsr2l
 13888  015A4A  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 13889  015A4E  C060  FFE1         	movff	reverse@input,fsr1l
 13890  015A52  C061  FFE2         	movff	reverse@input+1,fsr1h
 13891  015A56  CFDF FFE7          	movff	indf2,indf1
 13892                           
 13893                           ; BSR set to: 0
 13894  015A5A  0100               	movlb	0	; () banked
 13895  015A5C  4B60               	infsnz	reverse@input& (0+255),f,b
 13896  015A5E  2B61               	incf	(reverse@input+1)& (0+255),f,b
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;Types.c: 366: *iterator=tempVar;
 13900  015A60  C065  FFD9         	movff	reverse@iterator,fsr2l
 13901  015A64  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 13902  015A68  C064  FFDF         	movff	reverse@tempVar,indf2
 13903  015A6C                     l11829:
 13904                           
 13905                           ; BSR set to: 0
 13906  015A6C  0100               	movlb	0	; () banked
 13907  015A6E  0765               	decf	reverse@iterator& (0+255),f,b
 13908  015A70  A0D8               	btfss	status,0,c
 13909  015A72  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 13910  015A74  0100               	movlb	0	; () banked
 13911  015A76  5165               	movf	reverse@iterator& (0+255),w,b
 13912  015A78  0100               	movlb	0	; () banked
 13913  015A7A  5D60               	subwf	reverse@input& (0+255),w,b
 13914  015A7C  0100               	movlb	0	; () banked
 13915  015A7E  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 13916  015A80  0100               	movlb	0	; () banked
 13917  015A82  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 13918  015A84  B0D8               	btfsc	status,0,c
 13919  015A86  0012               	return	
 13920  015A88  D7D7               	goto	l11821
 13921  015A8A                     __end_of_reverse:
 13922                           	opt stack 0
 13923                           tosu	equ	0xFFF
 13924                           tosh	equ	0xFFE
 13925                           tosl	equ	0xFFD
 13926                           pclath	equ	0xFFA
 13927                           tblptru	equ	0xFF8
 13928                           tblptrh	equ	0xFF7
 13929                           tblptrl	equ	0xFF6
 13930                           tablat	equ	0xFF5
 13931                           prodh	equ	0xFF4
 13932                           prodl	equ	0xFF3
 13933                           postinc0	equ	0xFEE
 13934                           wreg	equ	0xFE8
 13935                           indf1	equ	0xFE7
 13936                           postdec1	equ	0xFE5
 13937                           fsr1h	equ	0xFE2
 13938                           fsr1l	equ	0xFE1
 13939                           indf2	equ	0xFDF
 13940                           postinc2	equ	0xFDE
 13941                           postdec2	equ	0xFDD
 13942                           fsr2h	equ	0xFDA
 13943                           fsr2l	equ	0xFD9
 13944                           status	equ	0xFD8
 13945                           
 13946 ;; *************** function ___lwmod *****************
 13947 ;; Defined at:
 13948 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 13949 ;; Parameters:    Size  Location     Type
 13950 ;;  dividend        2    7[BANK0 ] unsigned int 
 13951 ;;  divisor         2    9[BANK0 ] unsigned int 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  counter         1   11[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;                  2    7[BANK0 ] unsigned int 
 13956 ;; Registers used:
 13957 ;;		wreg, status,2, status,0
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13963 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13966 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13967 ;;Total ram usage:        5 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:    7
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		_itos
 13974 ;;		_printf
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           	psect	text55
 13979  015CFA                     __ptext55:
 13980                           	opt stack 0
 13981  015CFA                     ___lwmod:
 13982                           	opt stack 21
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;incstack = 0
 13986  015CFA  0100               	movlb	0	; () banked
 13987  015CFC  5169               	movf	___lwmod@divisor& (0+255),w,b
 13988  015CFE  0100               	movlb	0	; () banked
 13989  015D00  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13990  015D02  B4D8               	btfsc	status,2,c
 13991  015D04  D026               	goto	l2521
 13992                           
 13993                           ; BSR set to: 0
 13994  015D06  0E01               	movlw	1
 13995  015D08  0100               	movlb	0	; () banked
 13996  015D0A  6F6B               	movwf	___lwmod@counter& (0+255),b
 13997  015D0C  D006               	goto	l11905
 13998  015D0E                     l11903:
 13999                           
 14000                           ; BSR set to: 0
 14001  015D0E  0100               	movlb	0	; () banked
 14002  015D10  90D8               	bcf	status,0,c
 14003  015D12  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 14004  015D14  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14005  015D16  0100               	movlb	0	; () banked
 14006  015D18  2B6B               	incf	___lwmod@counter& (0+255),f,b
 14007  015D1A                     l11905:
 14008                           
 14009                           ; BSR set to: 0
 14010  015D1A  0100               	movlb	0	; () banked
 14011  015D1C  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14012  015D1E  D7F7               	goto	l11903
 14013  015D20                     l11907:
 14014                           
 14015                           ; BSR set to: 0
 14016  015D20  0100               	movlb	0	; () banked
 14017  015D22  5169               	movf	___lwmod@divisor& (0+255),w,b
 14018  015D24  0100               	movlb	0	; () banked
 14019  015D26  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 14020  015D28  0100               	movlb	0	; () banked
 14021  015D2A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14022  015D2C  0100               	movlb	0	; () banked
 14023  015D2E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14024  015D30  A0D8               	btfss	status,0,c
 14025  015D32  D008               	goto	l11911
 14026                           
 14027                           ; BSR set to: 0
 14028  015D34  0100               	movlb	0	; () banked
 14029  015D36  5169               	movf	___lwmod@divisor& (0+255),w,b
 14030  015D38  0100               	movlb	0	; () banked
 14031  015D3A  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 14032  015D3C  0100               	movlb	0	; () banked
 14033  015D3E  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14034  015D40  0100               	movlb	0	; () banked
 14035  015D42  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14036  015D44                     l11911:
 14037                           
 14038                           ; BSR set to: 0
 14039  015D44  0100               	movlb	0	; () banked
 14040  015D46  90D8               	bcf	status,0,c
 14041  015D48  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14042  015D4A  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 14043                           
 14044                           ; BSR set to: 0
 14045  015D4C  0100               	movlb	0	; () banked
 14046  015D4E  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 14047  015D50  D7E7               	goto	l11907
 14048  015D52                     l2521:
 14049                           
 14050                           ; BSR set to: 0
 14051  015D52  C067  F067         	movff	___lwmod@dividend,?___lwmod
 14052  015D56  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 14053                           
 14054                           ; BSR set to: 0
 14055  015D5A  0012               	return		;funcret
 14056  015D5C                     __end_of___lwmod:
 14057                           	opt stack 0
 14058                           tosu	equ	0xFFF
 14059                           tosh	equ	0xFFE
 14060                           tosl	equ	0xFFD
 14061                           pclath	equ	0xFFA
 14062                           tblptru	equ	0xFF8
 14063                           tblptrh	equ	0xFF7
 14064                           tblptrl	equ	0xFF6
 14065                           tablat	equ	0xFF5
 14066                           prodh	equ	0xFF4
 14067                           prodl	equ	0xFF3
 14068                           postinc0	equ	0xFEE
 14069                           wreg	equ	0xFE8
 14070                           indf1	equ	0xFE7
 14071                           postdec1	equ	0xFE5
 14072                           fsr1h	equ	0xFE2
 14073                           fsr1l	equ	0xFE1
 14074                           indf2	equ	0xFDF
 14075                           postinc2	equ	0xFDE
 14076                           postdec2	equ	0xFDD
 14077                           fsr2h	equ	0xFDA
 14078                           fsr2l	equ	0xFD9
 14079                           status	equ	0xFD8
 14080                           
 14081 ;; *************** function ___lwdiv *****************
 14082 ;; Defined at:
 14083 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 14084 ;; Parameters:    Size  Location     Type
 14085 ;;  dividend        2    0[BANK0 ] unsigned int 
 14086 ;;  divisor         2    2[BANK0 ] unsigned int 
 14087 ;; Auto vars:     Size  Location     Type
 14088 ;;  quotient        2    5[BANK0 ] unsigned int 
 14089 ;;  counter         1    4[BANK0 ] unsigned char 
 14090 ;; Return value:  Size  Location     Type
 14091 ;;                  2    0[BANK0 ] unsigned int 
 14092 ;; Registers used:
 14093 ;;		wreg, status,2, status,0
 14094 ;; Tracked objects:
 14095 ;;		On entry : 0/0
 14096 ;;		On exit  : 0/0
 14097 ;;		Unchanged: 0/0
 14098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14099 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14100 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14102 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;Total ram usage:        7 bytes
 14104 ;; Hardware stack levels used:    1
 14105 ;; Hardware stack levels required when called:    7
 14106 ;; This function calls:
 14107 ;;		Nothing
 14108 ;; This function is called by:
 14109 ;;		_itos
 14110 ;;		_printf
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           	psect	text56
 14115  0156F0                     __ptext56:
 14116                           	opt stack 0
 14117  0156F0                     ___lwdiv:
 14118                           	opt stack 21
 14119                           
 14120                           ; BSR set to: 0
 14121                           ;incstack = 0
 14122  0156F0  0E00               	movlw	0
 14123  0156F2  0100               	movlb	0	; () banked
 14124  0156F4  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14125  0156F6  0E00               	movlw	0
 14126  0156F8  6F65               	movwf	___lwdiv@quotient& (0+255),b
 14127                           
 14128                           ; BSR set to: 0
 14129  0156FA  0100               	movlb	0	; () banked
 14130  0156FC  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14131  0156FE  0100               	movlb	0	; () banked
 14132  015700  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14133  015702  B4D8               	btfsc	status,2,c
 14134  015704  D02C               	goto	l2511
 14135                           
 14136                           ; BSR set to: 0
 14137  015706  0E01               	movlw	1
 14138  015708  0100               	movlb	0	; () banked
 14139  01570A  6F64               	movwf	___lwdiv@counter& (0+255),b
 14140  01570C  D006               	goto	l11885
 14141  01570E                     l11883:
 14142                           
 14143                           ; BSR set to: 0
 14144  01570E  0100               	movlb	0	; () banked
 14145  015710  90D8               	bcf	status,0,c
 14146  015712  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 14147  015714  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14148  015716  0100               	movlb	0	; () banked
 14149  015718  2B64               	incf	___lwdiv@counter& (0+255),f,b
 14150  01571A                     l11885:
 14151                           
 14152                           ; BSR set to: 0
 14153  01571A  0100               	movlb	0	; () banked
 14154  01571C  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14155  01571E  D7F7               	goto	l11883
 14156  015720                     l11887:
 14157                           
 14158                           ; BSR set to: 0
 14159  015720  0100               	movlb	0	; () banked
 14160  015722  90D8               	bcf	status,0,c
 14161  015724  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 14162  015726  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14163                           
 14164                           ; BSR set to: 0
 14165  015728  0100               	movlb	0	; () banked
 14166  01572A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14167  01572C  0100               	movlb	0	; () banked
 14168  01572E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 14169  015730  0100               	movlb	0	; () banked
 14170  015732  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14171  015734  0100               	movlb	0	; () banked
 14172  015736  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14173  015738  A0D8               	btfss	status,0,c
 14174  01573A  D00A               	goto	l11895
 14175                           
 14176                           ; BSR set to: 0
 14177  01573C  0100               	movlb	0	; () banked
 14178  01573E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14179  015740  0100               	movlb	0	; () banked
 14180  015742  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 14181  015744  0100               	movlb	0	; () banked
 14182  015746  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14183  015748  0100               	movlb	0	; () banked
 14184  01574A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14185                           
 14186                           ; BSR set to: 0
 14187  01574C  0100               	movlb	0	; () banked
 14188  01574E  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 14189  015750                     l11895:
 14190                           
 14191                           ; BSR set to: 0
 14192  015750  0100               	movlb	0	; () banked
 14193  015752  90D8               	bcf	status,0,c
 14194  015754  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14195  015756  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 14196                           
 14197                           ; BSR set to: 0
 14198  015758  0100               	movlb	0	; () banked
 14199  01575A  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 14200  01575C  D7E1               	goto	l11887
 14201  01575E                     l2511:
 14202                           
 14203                           ; BSR set to: 0
 14204  01575E  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 14205  015762  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14206                           
 14207                           ; BSR set to: 0
 14208  015766  0012               	return		;funcret
 14209  015768                     __end_of___lwdiv:
 14210                           	opt stack 0
 14211                           tosu	equ	0xFFF
 14212                           tosh	equ	0xFFE
 14213                           tosl	equ	0xFFD
 14214                           pclath	equ	0xFFA
 14215                           tblptru	equ	0xFF8
 14216                           tblptrh	equ	0xFF7
 14217                           tblptrl	equ	0xFF6
 14218                           tablat	equ	0xFF5
 14219                           prodh	equ	0xFF4
 14220                           prodl	equ	0xFF3
 14221                           postinc0	equ	0xFEE
 14222                           wreg	equ	0xFE8
 14223                           indf1	equ	0xFE7
 14224                           postdec1	equ	0xFE5
 14225                           fsr1h	equ	0xFE2
 14226                           fsr1l	equ	0xFE1
 14227                           indf2	equ	0xFDF
 14228                           postinc2	equ	0xFDE
 14229                           postdec2	equ	0xFDD
 14230                           fsr2h	equ	0xFDA
 14231                           fsr2l	equ	0xFD9
 14232                           status	equ	0xFD8
 14233                           
 14234 ;; *************** function _HMI_SetSegments *****************
 14235 ;; Defined at:
 14236 ;;		line 226 in file "HMI.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 14239 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;  in              2    4[BANK0 ] unsigned short 
 14242 ;; Return value:  Size  Location     Type
 14243 ;;                  1    wreg      void 
 14244 ;; Registers used:
 14245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14251 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14254 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14255 ;;Total ram usage:        5 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; Hardware stack levels required when called:    8
 14258 ;; This function calls:
 14259 ;;		_ToSegment
 14260 ;; This function is called by:
 14261 ;;		_HMI_SetNumber
 14262 ;; This function uses a non-reentrant model
 14263 ;;
 14264                           
 14265                           	psect	text57
 14266  014840                     __ptext57:
 14267                           	opt stack 0
 14268  014840                     _HMI_SetSegments:
 14269                           	opt stack 20
 14270                           
 14271                           ;HMI.c: 228: UINT16 in=0;
 14272                           
 14273                           ; BSR set to: 0
 14274                           ;incstack = 0
 14275  014840  0E00               	movlw	0
 14276  014842  0100               	movlb	0	; () banked
 14277  014844  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 14278  014846  0E00               	movlw	0
 14279  014848  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 14280                           
 14281                           ;HMI.c: 229: while(*pString)
 14282  01484A  D038               	goto	l12037
 14283  01484C                     l12021:
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;HMI.c: 230: {
 14287                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 14288  01484C  0E16               	movlw	low _HMIBoard
 14289  01484E  0100               	movlb	0	; () banked
 14290  014850  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 14291  014852  6ED9               	movwf	fsr2l,c
 14292  014854  0E01               	movlw	high _HMIBoard
 14293  014856  0100               	movlb	0	; () banked
 14294  014858  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14295  01485A  6EDA               	movwf	fsr2h,c
 14296  01485C  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 14297  014860  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 14298  014864  50E7               	movf	indf1,w,c
 14299  014866  ECC0  F08B         	call	_ToSegment
 14300  01486A  6EDF               	movwf	indf2,c
 14301                           
 14302                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 14303  01486C  0E16               	movlw	low _HMIBoard
 14304  01486E  0100               	movlb	0	; () banked
 14305  014870  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 14306  014872  6ED9               	movwf	fsr2l,c
 14307  014874  0E01               	movlw	high _HMIBoard
 14308  014876  0100               	movlb	0	; () banked
 14309  014878  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14310  01487A  6EDA               	movwf	fsr2h,c
 14311  01487C  0E80               	movlw	128
 14312  01487E  18DE               	xorwf	postinc2,w,c
 14313  014880  A4D8               	btfss	status,2,c
 14314  014882  D00E               	goto	l12029
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;HMI.c: 234: {
 14318                           ;HMI.c: 235: in--;
 14319  014884  0100               	movlb	0	; () banked
 14320  014886  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 14321  014888  A0D8               	btfss	status,0,c
 14322  01488A  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 14323                           
 14324                           ; BSR set to: 0
 14325                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 14326  01488C  0E16               	movlw	low _HMIBoard
 14327  01488E  0100               	movlb	0	; () banked
 14328  014890  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 14329  014892  6ED9               	movwf	fsr2l,c
 14330  014894  0E01               	movlw	high _HMIBoard
 14331  014896  0100               	movlb	0	; () banked
 14332  014898  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14333  01489A  6EDA               	movwf	fsr2h,c
 14334  01489C  0E00               	movlw	0
 14335  01489E  8EDB               	bsf	plusw2,7,c
 14336  0148A0                     l12029:
 14337                           
 14338                           ; BSR set to: 0
 14339                           ;HMI.c: 237: }
 14340                           ;HMI.c: 239: pString++;
 14341  0148A0  0100               	movlb	0	; () banked
 14342  0148A2  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 14343  0148A4  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 14344                           
 14345                           ; BSR set to: 0
 14346                           ;HMI.c: 240: in++;
 14347  0148A6  0100               	movlb	0	; () banked
 14348  0148A8  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 14349  0148AA  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 14350                           
 14351                           ; BSR set to: 0
 14352                           ;HMI.c: 241: if (in>=6)
 14353  0148AC  0100               	movlb	0	; () banked
 14354  0148AE  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 14355  0148B0  E11A               	bnz	l12043
 14356  0148B2  0E06               	movlw	6
 14357  0148B4  0100               	movlb	0	; () banked
 14358  0148B6  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 14359  0148B8  B0D8               	btfsc	status,0,c
 14360  0148BA  D015               	goto	l12043
 14361  0148BC                     l12037:
 14362                           
 14363                           ; BSR set to: 0
 14364  0148BC  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 14365  0148C0  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 14366  0148C4  50DF               	movf	indf2,w,c
 14367  0148C6  B4D8               	btfsc	status,2,c
 14368  0148C8  D00E               	goto	l12043
 14369  0148CA  D7C0               	goto	l12021
 14370  0148CC                     l12039:
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;HMI.c: 245: {
 14374                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 14375  0148CC  0E16               	movlw	low _HMIBoard
 14376  0148CE  0100               	movlb	0	; () banked
 14377  0148D0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 14378  0148D2  6ED9               	movwf	fsr2l,c
 14379  0148D4  0E01               	movlw	high _HMIBoard
 14380  0148D6  0100               	movlb	0	; () banked
 14381  0148D8  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14382  0148DA  6EDA               	movwf	fsr2h,c
 14383  0148DC  0E00               	movlw	0
 14384  0148DE  6EDF               	movwf	indf2,c
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;HMI.c: 247: in++;
 14388  0148E0  0100               	movlb	0	; () banked
 14389  0148E2  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 14390  0148E4  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 14391  0148E6                     l12043:
 14392                           
 14393                           ; BSR set to: 0
 14394  0148E6  0100               	movlb	0	; () banked
 14395  0148E8  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 14396  0148EA  E106               	bnz	l1207
 14397  0148EC  0E06               	movlw	6
 14398  0148EE  0100               	movlb	0	; () banked
 14399  0148F0  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 14400  0148F2  B0D8               	btfsc	status,0,c
 14401  0148F4  0012               	return	
 14402  0148F6  D7EA               	goto	l12039
 14403  0148F8                     l1207:
 14404                           
 14405                           ; BSR set to: 0
 14406  0148F8  0012               	return		;funcret
 14407  0148FA                     __end_of_HMI_SetSegments:
 14408                           	opt stack 0
 14409                           tosu	equ	0xFFF
 14410                           tosh	equ	0xFFE
 14411                           tosl	equ	0xFFD
 14412                           pclath	equ	0xFFA
 14413                           tblptru	equ	0xFF8
 14414                           tblptrh	equ	0xFF7
 14415                           tblptrl	equ	0xFF6
 14416                           tablat	equ	0xFF5
 14417                           prodh	equ	0xFF4
 14418                           prodl	equ	0xFF3
 14419                           postinc0	equ	0xFEE
 14420                           wreg	equ	0xFE8
 14421                           indf1	equ	0xFE7
 14422                           postdec1	equ	0xFE5
 14423                           fsr1h	equ	0xFE2
 14424                           fsr1l	equ	0xFE1
 14425                           indf2	equ	0xFDF
 14426                           postinc2	equ	0xFDE
 14427                           postdec2	equ	0xFDD
 14428                           plusw2	equ	0xFDB
 14429                           fsr2h	equ	0xFDA
 14430                           fsr2l	equ	0xFD9
 14431                           status	equ	0xFD8
 14432                           
 14433 ;; *************** function _ToSegment *****************
 14434 ;; Defined at:
 14435 ;;		line 284 in file "Library/Types.c"
 14436 ;; Parameters:    Size  Location     Type
 14437 ;;  pCHR            1    wreg     unsigned char 
 14438 ;; Auto vars:     Size  Location     Type
 14439 ;;  pCHR            1    0[BANK0 ] unsigned char 
 14440 ;; Return value:  Size  Location     Type
 14441 ;;                  1    wreg      unsigned char 
 14442 ;; Registers used:
 14443 ;;		wreg, status,2, status,0
 14444 ;; Tracked objects:
 14445 ;;		On entry : 0/0
 14446 ;;		On exit  : 0/0
 14447 ;;		Unchanged: 0/0
 14448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14453 ;;Total ram usage:        1 bytes
 14454 ;; Hardware stack levels used:    1
 14455 ;; Hardware stack levels required when called:    7
 14456 ;; This function calls:
 14457 ;;		Nothing
 14458 ;; This function is called by:
 14459 ;;		_HMI_SetSegments
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           	psect	text58
 14464  011780                     __ptext58:
 14465                           	opt stack 0
 14466  011780                     _ToSegment:
 14467                           	opt stack 20
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;incstack = 0
 14471                           ;ToSegment@pCHR stored from wreg
 14472  011780  0100               	movlb	0	; () banked
 14473  011782  6F60               	movwf	ToSegment@pCHR& (0+255),b
 14474                           
 14475                           ;Types.c: 286: switch(pCHR)
 14476  011784  D07E               	goto	l11813
 14477  011786                     l11559:
 14478  011786  0E3F               	movlw	63
 14479  011788  0012               	return	
 14480  01178A                     l11563:
 14481  01178A  0E06               	movlw	6
 14482  01178C  0012               	return	
 14483  01178E                     l11567:
 14484  01178E  0E5B               	movlw	91
 14485  011790  0012               	return	
 14486  011792                     l11571:
 14487  011792  0E4F               	movlw	79
 14488  011794  0012               	return	
 14489  011796                     l11575:
 14490  011796  0E66               	movlw	102
 14491  011798  0012               	return	
 14492  01179A                     l11579:
 14493  01179A  0E6D               	movlw	109
 14494  01179C  0012               	return	
 14495  01179E                     l11583:
 14496  01179E  0E7D               	movlw	125
 14497  0117A0  0012               	return	
 14498  0117A2                     l11587:
 14499  0117A2  0E07               	movlw	7
 14500  0117A4  0012               	return	
 14501  0117A6                     l11591:
 14502  0117A6  0E7F               	movlw	127
 14503  0117A8  0012               	return	
 14504  0117AA                     l11595:
 14505  0117AA  0E6F               	movlw	111
 14506  0117AC  0012               	return	
 14507  0117AE                     l11599:
 14508  0117AE  0E5F               	movlw	95
 14509  0117B0  0012               	return	
 14510  0117B2                     l11603:
 14511  0117B2  0E7C               	movlw	124
 14512  0117B4  0012               	return	
 14513  0117B6                     l11607:
 14514  0117B6  0E58               	movlw	88
 14515  0117B8  0012               	return	
 14516  0117BA                     l11611:
 14517  0117BA  0E5E               	movlw	94
 14518  0117BC  0012               	return	
 14519  0117BE                     l11615:
 14520  0117BE  0E7B               	movlw	123
 14521  0117C0  0012               	return	
 14522  0117C2                     l11619:
 14523  0117C2  0E71               	movlw	113
 14524  0117C4  0012               	return	
 14525  0117C6                     l11623:
 14526  0117C6  0E6F               	movlw	111
 14527  0117C8  0012               	return	
 14528  0117CA                     l11627:
 14529  0117CA  0E74               	movlw	116
 14530  0117CC  0012               	return	
 14531  0117CE                     l11631:
 14532  0117CE  0E04               	movlw	4
 14533  0117D0  0012               	return	
 14534  0117D2                     l11635:
 14535  0117D2  0E0E               	movlw	14
 14536  0117D4  0012               	return	
 14537  0117D6                     l11639:
 14538  0117D6  0E7A               	movlw	122
 14539  0117D8  0012               	return	
 14540  0117DA                     l11643:
 14541  0117DA  0E06               	movlw	6
 14542  0117DC  0012               	return	
 14543  0117DE                     l11647:
 14544  0117DE  0E14               	movlw	20
 14545  0117E0  0012               	return	
 14546  0117E2                     l11651:
 14547  0117E2  0E54               	movlw	84
 14548  0117E4  0012               	return	
 14549  0117E6                     l11655:
 14550  0117E6  0E5C               	movlw	92
 14551  0117E8  0012               	return	
 14552  0117EA                     l11659:
 14553  0117EA  0E73               	movlw	115
 14554  0117EC  0012               	return	
 14555  0117EE                     l11663:
 14556  0117EE  0E67               	movlw	103
 14557  0117F0  0012               	return	
 14558  0117F2                     l11667:
 14559  0117F2  0E50               	movlw	80
 14560  0117F4  0012               	return	
 14561  0117F6                     l11671:
 14562  0117F6  0E6D               	movlw	109
 14563  0117F8  0012               	return	
 14564  0117FA                     l11675:
 14565  0117FA  0E78               	movlw	120
 14566  0117FC  0012               	return	
 14567  0117FE                     l11679:
 14568  0117FE  0E1C               	movlw	28
 14569  011800  0012               	return	
 14570  011802                     l11683:
 14571  011802  0E62               	movlw	98
 14572  011804  0012               	return	
 14573  011806                     l11687:
 14574  011806  0E2A               	movlw	42
 14575  011808  0012               	return	
 14576  01180A                     l11691:
 14577  01180A  0E64               	movlw	100
 14578  01180C  0012               	return	
 14579  01180E                     l11695:
 14580  01180E  0E6E               	movlw	110
 14581  011810  0012               	return	
 14582  011812                     l11699:
 14583  011812  0E5B               	movlw	91
 14584  011814  0012               	return	
 14585  011816                     l11703:
 14586  011816  0E77               	movlw	119
 14587  011818  0012               	return	
 14588  01181A                     l11707:
 14589  01181A  0E7F               	movlw	127
 14590  01181C  0012               	return	
 14591  01181E                     l11711:
 14592  01181E  0E39               	movlw	57
 14593  011820  0012               	return	
 14594  011822                     l11715:
 14595  011822  0E3F               	movlw	63
 14596  011824  0012               	return	
 14597  011826                     l11719:
 14598  011826  0E79               	movlw	121
 14599  011828  0012               	return	
 14600  01182A                     l11723:
 14601  01182A  0E71               	movlw	113
 14602  01182C  0012               	return	
 14603  01182E                     l11727:
 14604  01182E  0E3D               	movlw	61
 14605  011830  0012               	return	
 14606  011832                     l11731:
 14607  011832  0E76               	movlw	118
 14608  011834  0012               	return	
 14609  011836                     l11735:
 14610  011836  0E06               	movlw	6
 14611  011838  0012               	return	
 14612  01183A                     l11739:
 14613  01183A  0E1E               	movlw	30
 14614  01183C  0012               	return	
 14615  01183E                     l11743:
 14616  01183E  0E57               	movlw	87
 14617  011840  0012               	return	
 14618  011842                     l11747:
 14619  011842  0E38               	movlw	56
 14620  011844  0012               	return	
 14621  011846                     l11751:
 14622  011846  0E76               	movlw	118
 14623  011848  0012               	return	
 14624  01184A                     l11755:
 14625  01184A  0E76               	movlw	118
 14626  01184C  0012               	return	
 14627  01184E                     l11759:
 14628  01184E  0E3F               	movlw	63
 14629  011850  0012               	return	
 14630  011852                     l11763:
 14631  011852  0E73               	movlw	115
 14632  011854  0012               	return	
 14633  011856                     l11767:
 14634  011856  0E3F               	movlw	63
 14635  011858  0012               	return	
 14636  01185A                     l11771:
 14637  01185A  0E77               	movlw	119
 14638  01185C  0012               	return	
 14639  01185E                     l11775:
 14640  01185E  0E6D               	movlw	109
 14641  011860  0012               	return	
 14642  011862                     l11779:
 14643  011862  0E31               	movlw	49
 14644  011864  0012               	return	
 14645  011866                     l11783:
 14646  011866  0E3E               	movlw	62
 14647  011868  0012               	return	
 14648  01186A                     l11787:
 14649  01186A  0E3E               	movlw	62
 14650  01186C  0012               	return	
 14651  01186E                     l11791:
 14652  01186E  0E7E               	movlw	126
 14653  011870  0012               	return	
 14654  011872                     l11795:
 14655  011872  0E76               	movlw	118
 14656  011874  0012               	return	
 14657  011876                     l11799:
 14658  011876  0E66               	movlw	102
 14659  011878  0012               	return	
 14660  01187A                     l11803:
 14661  01187A  0E5B               	movlw	91
 14662  01187C  0012               	return	
 14663  01187E                     l11807:
 14664  01187E  0E80               	movlw	128
 14665  011880  0012               	return	
 14666  011882                     l11813:
 14667  011882  0100               	movlb	0	; () banked
 14668  011884  5160               	movf	ToSegment@pCHR& (0+255),w,b
 14669                           
 14670                           ; Switch size 1, requested type "space"
 14671                           ; Number of cases is 63, Range of values is 46 to 122
 14672                           ; switch strategies available:
 14673                           ; Name         Instructions Cycles
 14674                           ; simple_byte          190    96 (average)
 14675                           ;	Chosen strategy is simple_byte
 14676  011886  0A2E               	xorlw	46	; case 46
 14677  011888  B4D8               	btfsc	status,2,c
 14678  01188A  D7F9               	goto	l11807
 14679  01188C  0A1E               	xorlw	30	; case 48
 14680  01188E  B4D8               	btfsc	status,2,c
 14681  011890  D77A               	goto	l11559
 14682  011892  0A01               	xorlw	1	; case 49
 14683  011894  B4D8               	btfsc	status,2,c
 14684  011896  D779               	goto	l11563
 14685  011898  0A03               	xorlw	3	; case 50
 14686  01189A  B4D8               	btfsc	status,2,c
 14687  01189C  D778               	goto	l11567
 14688  01189E  0A01               	xorlw	1	; case 51
 14689  0118A0  B4D8               	btfsc	status,2,c
 14690  0118A2  D777               	goto	l11571
 14691  0118A4  0A07               	xorlw	7	; case 52
 14692  0118A6  B4D8               	btfsc	status,2,c
 14693  0118A8  D776               	goto	l11575
 14694  0118AA  0A01               	xorlw	1	; case 53
 14695  0118AC  B4D8               	btfsc	status,2,c
 14696  0118AE  D775               	goto	l11579
 14697  0118B0  0A03               	xorlw	3	; case 54
 14698  0118B2  B4D8               	btfsc	status,2,c
 14699  0118B4  D774               	goto	l11583
 14700  0118B6  0A01               	xorlw	1	; case 55
 14701  0118B8  B4D8               	btfsc	status,2,c
 14702  0118BA  D773               	goto	l11587
 14703  0118BC  0A0F               	xorlw	15	; case 56
 14704  0118BE  B4D8               	btfsc	status,2,c
 14705  0118C0  D772               	goto	l11591
 14706  0118C2  0A01               	xorlw	1	; case 57
 14707  0118C4  B4D8               	btfsc	status,2,c
 14708  0118C6  D771               	goto	l11595
 14709  0118C8  0A78               	xorlw	120	; case 65
 14710  0118CA  B4D8               	btfsc	status,2,c
 14711  0118CC  D7A4               	goto	l11703
 14712  0118CE  0A03               	xorlw	3	; case 66
 14713  0118D0  B4D8               	btfsc	status,2,c
 14714  0118D2  D7A3               	goto	l11707
 14715  0118D4  0A01               	xorlw	1	; case 67
 14716  0118D6  B4D8               	btfsc	status,2,c
 14717  0118D8  D7A2               	goto	l11711
 14718  0118DA  0A07               	xorlw	7	; case 68
 14719  0118DC  B4D8               	btfsc	status,2,c
 14720  0118DE  D7A1               	goto	l11715
 14721  0118E0  0A01               	xorlw	1	; case 69
 14722  0118E2  B4D8               	btfsc	status,2,c
 14723  0118E4  D7A0               	goto	l11719
 14724  0118E6  0A03               	xorlw	3	; case 70
 14725  0118E8  B4D8               	btfsc	status,2,c
 14726  0118EA  D79F               	goto	l11723
 14727  0118EC  0A01               	xorlw	1	; case 71
 14728  0118EE  B4D8               	btfsc	status,2,c
 14729  0118F0  D79E               	goto	l11727
 14730  0118F2  0A0F               	xorlw	15	; case 72
 14731  0118F4  B4D8               	btfsc	status,2,c
 14732  0118F6  D79D               	goto	l11731
 14733  0118F8  0A01               	xorlw	1	; case 73
 14734  0118FA  B4D8               	btfsc	status,2,c
 14735  0118FC  D79C               	goto	l11735
 14736  0118FE  0A03               	xorlw	3	; case 74
 14737  011900  B4D8               	btfsc	status,2,c
 14738  011902  D79B               	goto	l11739
 14739  011904  0A01               	xorlw	1	; case 75
 14740  011906  B4D8               	btfsc	status,2,c
 14741  011908  D79A               	goto	l11743
 14742  01190A  0A07               	xorlw	7	; case 76
 14743  01190C  B4D8               	btfsc	status,2,c
 14744  01190E  D799               	goto	l11747
 14745  011910  0A01               	xorlw	1	; case 77
 14746  011912  B4D8               	btfsc	status,2,c
 14747  011914  D798               	goto	l11751
 14748  011916  0A03               	xorlw	3	; case 78
 14749  011918  B4D8               	btfsc	status,2,c
 14750  01191A  D797               	goto	l11755
 14751  01191C  0A01               	xorlw	1	; case 79
 14752  01191E  B4D8               	btfsc	status,2,c
 14753  011920  D796               	goto	l11759
 14754  011922  0A1F               	xorlw	31	; case 80
 14755  011924  B4D8               	btfsc	status,2,c
 14756  011926  D795               	goto	l11763
 14757  011928  0A01               	xorlw	1	; case 81
 14758  01192A  B4D8               	btfsc	status,2,c
 14759  01192C  D794               	goto	l11767
 14760  01192E  0A03               	xorlw	3	; case 82
 14761  011930  B4D8               	btfsc	status,2,c
 14762  011932  D793               	goto	l11771
 14763  011934  0A01               	xorlw	1	; case 83
 14764  011936  B4D8               	btfsc	status,2,c
 14765  011938  D792               	goto	l11775
 14766  01193A  0A07               	xorlw	7	; case 84
 14767  01193C  B4D8               	btfsc	status,2,c
 14768  01193E  D791               	goto	l11779
 14769  011940  0A01               	xorlw	1	; case 85
 14770  011942  B4D8               	btfsc	status,2,c
 14771  011944  D790               	goto	l11783
 14772  011946  0A03               	xorlw	3	; case 86
 14773  011948  B4D8               	btfsc	status,2,c
 14774  01194A  D78F               	goto	l11787
 14775  01194C  0A01               	xorlw	1	; case 87
 14776  01194E  B4D8               	btfsc	status,2,c
 14777  011950  D78E               	goto	l11791
 14778  011952  0A0F               	xorlw	15	; case 88
 14779  011954  B4D8               	btfsc	status,2,c
 14780  011956  D78D               	goto	l11795
 14781  011958  0A01               	xorlw	1	; case 89
 14782  01195A  B4D8               	btfsc	status,2,c
 14783  01195C  D78C               	goto	l11799
 14784  01195E  0A03               	xorlw	3	; case 90
 14785  011960  B4D8               	btfsc	status,2,c
 14786  011962  D78B               	goto	l11803
 14787  011964  0A3B               	xorlw	59	; case 97
 14788  011966  B4D8               	btfsc	status,2,c
 14789  011968  D722               	goto	l11599
 14790  01196A  0A03               	xorlw	3	; case 98
 14791  01196C  B4D8               	btfsc	status,2,c
 14792  01196E  D721               	goto	l11603
 14793  011970  0A01               	xorlw	1	; case 99
 14794  011972  B4D8               	btfsc	status,2,c
 14795  011974  D720               	goto	l11607
 14796  011976  0A07               	xorlw	7	; case 100
 14797  011978  B4D8               	btfsc	status,2,c
 14798  01197A  D71F               	goto	l11611
 14799  01197C  0A01               	xorlw	1	; case 101
 14800  01197E  B4D8               	btfsc	status,2,c
 14801  011980  D71E               	goto	l11615
 14802  011982  0A03               	xorlw	3	; case 102
 14803  011984  B4D8               	btfsc	status,2,c
 14804  011986  D71D               	goto	l11619
 14805  011988  0A01               	xorlw	1	; case 103
 14806  01198A  B4D8               	btfsc	status,2,c
 14807  01198C  D71C               	goto	l11623
 14808  01198E  0A0F               	xorlw	15	; case 104
 14809  011990  B4D8               	btfsc	status,2,c
 14810  011992  D71B               	goto	l11627
 14811  011994  0A01               	xorlw	1	; case 105
 14812  011996  B4D8               	btfsc	status,2,c
 14813  011998  D71A               	goto	l11631
 14814  01199A  0A03               	xorlw	3	; case 106
 14815  01199C  B4D8               	btfsc	status,2,c
 14816  01199E  D719               	goto	l11635
 14817  0119A0  0A01               	xorlw	1	; case 107
 14818  0119A2  B4D8               	btfsc	status,2,c
 14819  0119A4  D718               	goto	l11639
 14820  0119A6  0A07               	xorlw	7	; case 108
 14821  0119A8  B4D8               	btfsc	status,2,c
 14822  0119AA  D717               	goto	l11643
 14823  0119AC  0A01               	xorlw	1	; case 109
 14824  0119AE  B4D8               	btfsc	status,2,c
 14825  0119B0  D716               	goto	l11647
 14826  0119B2  0A03               	xorlw	3	; case 110
 14827  0119B4  B4D8               	btfsc	status,2,c
 14828  0119B6  D715               	goto	l11651
 14829  0119B8  0A01               	xorlw	1	; case 111
 14830  0119BA  B4D8               	btfsc	status,2,c
 14831  0119BC  D714               	goto	l11655
 14832  0119BE  0A1F               	xorlw	31	; case 112
 14833  0119C0  B4D8               	btfsc	status,2,c
 14834  0119C2  D713               	goto	l11659
 14835  0119C4  0A01               	xorlw	1	; case 113
 14836  0119C6  B4D8               	btfsc	status,2,c
 14837  0119C8  D712               	goto	l11663
 14838  0119CA  0A03               	xorlw	3	; case 114
 14839  0119CC  B4D8               	btfsc	status,2,c
 14840  0119CE  D711               	goto	l11667
 14841  0119D0  0A01               	xorlw	1	; case 115
 14842  0119D2  B4D8               	btfsc	status,2,c
 14843  0119D4  D710               	goto	l11671
 14844  0119D6  0A07               	xorlw	7	; case 116
 14845  0119D8  B4D8               	btfsc	status,2,c
 14846  0119DA  D70F               	goto	l11675
 14847  0119DC  0A01               	xorlw	1	; case 117
 14848  0119DE  B4D8               	btfsc	status,2,c
 14849  0119E0  D70E               	goto	l11679
 14850  0119E2  0A03               	xorlw	3	; case 118
 14851  0119E4  B4D8               	btfsc	status,2,c
 14852  0119E6  D70D               	goto	l11683
 14853  0119E8  0A01               	xorlw	1	; case 119
 14854  0119EA  B4D8               	btfsc	status,2,c
 14855  0119EC  D70C               	goto	l11687
 14856  0119EE  0A0F               	xorlw	15	; case 120
 14857  0119F0  B4D8               	btfsc	status,2,c
 14858  0119F2  D70B               	goto	l11691
 14859  0119F4  0A01               	xorlw	1	; case 121
 14860  0119F6  B4D8               	btfsc	status,2,c
 14861  0119F8  D70A               	goto	l11695
 14862  0119FA  0A03               	xorlw	3	; case 122
 14863  0119FC  B4D8               	btfsc	status,2,c
 14864  0119FE  D709               	goto	l11699
 14865                           
 14866                           ;Types.c: 354: return 0;
 14867                           
 14868                           ; BSR set to: 0
 14869  011A00  0E00               	movlw	0
 14870  011A02  0012               	return	
 14871  011A04                     __end_of_ToSegment:
 14872                           	opt stack 0
 14873                           tosu	equ	0xFFF
 14874                           tosh	equ	0xFFE
 14875                           tosl	equ	0xFFD
 14876                           pclath	equ	0xFFA
 14877                           tblptru	equ	0xFF8
 14878                           tblptrh	equ	0xFF7
 14879                           tblptrl	equ	0xFF6
 14880                           tablat	equ	0xFF5
 14881                           prodh	equ	0xFF4
 14882                           prodl	equ	0xFF3
 14883                           postinc0	equ	0xFEE
 14884                           wreg	equ	0xFE8
 14885                           indf1	equ	0xFE7
 14886                           postdec1	equ	0xFE5
 14887                           fsr1h	equ	0xFE2
 14888                           fsr1l	equ	0xFE1
 14889                           indf2	equ	0xFDF
 14890                           postinc2	equ	0xFDE
 14891                           postdec2	equ	0xFDD
 14892                           plusw2	equ	0xFDB
 14893                           fsr2h	equ	0xFDA
 14894                           fsr2l	equ	0xFD9
 14895                           status	equ	0xFD8
 14896                           
 14897 ;; *************** function _HMI_SetButton *****************
 14898 ;; Defined at:
 14899 ;;		line 186 in file "HMI.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;  pValue          1    wreg     unsigned char 
 14902 ;; Auto vars:     Size  Location     Type
 14903 ;;  pValue          1    6[BANK0 ] unsigned char 
 14904 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 14905 ;;  v               1    7[BANK0 ] unsigned char 
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  1    wreg      void 
 14908 ;; Registers used:
 14909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14916 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;Total ram usage:        8 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:    7
 14922 ;; This function calls:
 14923 ;;		Nothing
 14924 ;; This function is called by:
 14925 ;;		_Event_TestButton
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text59
 14930  0152C8                     __ptext59:
 14931                           	opt stack 0
 14932  0152C8                     _HMI_SetButton:
 14933                           	opt stack 19
 14934                           
 14935                           ;incstack = 0
 14936                           ;HMI_SetButton@pValue stored from wreg
 14937  0152C8  0100               	movlb	0	; () banked
 14938  0152CA  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 14939                           
 14940                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 14941  0152CC  0E3C               	movlw	low HMI_SetButton@F7213
 14942  0152CE  6EF6               	movwf	tblptrl,c
 14943  0152D0                     	if	1	;There is more than 1 active tblptr byte
 14944  0152D0  0EFD               	movlw	high HMI_SetButton@F7213
 14945  0152D2  6EF7               	movwf	tblptrh,c
 14946  0152D4                     	endif
 14947  0152D4                     	if	1	;There are 3 active tblptr bytes
 14948  0152D4  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 14949  0152D6  6EF8               	movwf	tblptru,c
 14950  0152D8                     	endif
 14951  0152D8  0009               	tblrd		*+
 14952  0152DA  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 14953  0152DE  0009               	tblrd		*+
 14954  0152E0  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 14955  0152E4  0009               	tblrd		*+
 14956  0152E6  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 14957  0152EA  000A               	tblrd		*-
 14958  0152EC  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 14959                           
 14960                           ;HMI.c: 189: UINT8 v = 0b00010001;
 14961  0152F0  0E11               	movlw	17
 14962  0152F2  0100               	movlb	0	; () banked
 14963  0152F4  6F67               	movwf	HMI_SetButton@v& (0+255),b
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;HMI.c: 190: pValue &= 3;
 14967  0152F6  0E03               	movlw	3
 14968  0152F8  0100               	movlb	0	; () banked
 14969  0152FA  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 14970                           
 14971                           ; BSR set to: 0
 14972                           ;HMI.c: 191: v = v << reindex[pValue];
 14973  0152FC  0100               	movlb	0	; () banked
 14974  0152FE  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 14975  015300  0D01               	mullw	1
 14976  015302  0E62               	movlw	low HMI_SetButton@reindex
 14977  015304  24F3               	addwf	prodl,w,c
 14978  015306  6ED9               	movwf	fsr2l,c
 14979  015308  0E00               	movlw	high HMI_SetButton@reindex
 14980  01530A  20F4               	addwfc	prodh,w,c
 14981  01530C  6EDA               	movwf	fsr2h,c
 14982  01530E  50DF               	movf	indf2,w,c
 14983  015310  0100               	movlb	0	; () banked
 14984  015312  6F60               	movwf	??_HMI_SetButton& (0+255),b
 14985  015314  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 14986  015318  0100               	movlb	0	; () banked
 14987  01531A  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 14988  01531C  D003               	goto	u9704
 14989  01531E                     u9705:
 14990  01531E  0100               	movlb	0	; () banked
 14991  015320  90D8               	bcf	status,0,c
 14992  015322  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 14993  015324                     u9704:
 14994  015324  0100               	movlb	0	; () banked
 14995  015326  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 14996  015328  D7FA               	goto	u9705
 14997  01532A  0100               	movlb	0	; () banked
 14998  01532C  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 14999  01532E  0100               	movlb	0	; () banked
 15000  015330  6F67               	movwf	HMI_SetButton@v& (0+255),b
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;HMI.c: 192: v = v >> 4;
 15004  015332  0100               	movlb	0	; () banked
 15005  015334  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 15006  015336  0B0F               	andlw	15
 15007  015338  0100               	movlb	0	; () banked
 15008  01533A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;HMI.c: 193: v = v & 0x0F;
 15012  01533C  0100               	movlb	0	; () banked
 15013  01533E  5167               	movf	HMI_SetButton@v& (0+255),w,b
 15014  015340  0B0F               	andlw	15
 15015  015342  0100               	movlb	0	; () banked
 15016  015344  6F67               	movwf	HMI_SetButton@v& (0+255),b
 15017                           
 15018                           ; BSR set to: 0
 15019                           ;HMI.c: 194: HMIBoard.pButton = v;
 15020  015346  0101               	movlb	1	; () banked
 15021  015348  511C               	movf	(_HMIBoard+6)& (0+255),w,b
 15022  01534A  0100               	movlb	0	; () banked
 15023  01534C  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 15024  01534E  0BF0               	andlw	-16
 15025  015350  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 15026  015352  0101               	movlb	1	; () banked
 15027  015354  6F1C               	movwf	(_HMIBoard+6)& (0+255),b
 15028                           
 15029                           ; BSR set to: 1
 15030  015356  0012               	return		;funcret
 15031  015358                     __end_of_HMI_SetButton:
 15032                           	opt stack 0
 15033                           tosu	equ	0xFFF
 15034                           tosh	equ	0xFFE
 15035                           tosl	equ	0xFFD
 15036                           pclath	equ	0xFFA
 15037                           tblptru	equ	0xFF8
 15038                           tblptrh	equ	0xFF7
 15039                           tblptrl	equ	0xFF6
 15040                           tablat	equ	0xFF5
 15041                           prodh	equ	0xFF4
 15042                           prodl	equ	0xFF3
 15043                           postinc0	equ	0xFEE
 15044                           wreg	equ	0xFE8
 15045                           indf1	equ	0xFE7
 15046                           postdec1	equ	0xFE5
 15047                           fsr1h	equ	0xFE2
 15048                           fsr1l	equ	0xFE1
 15049                           indf2	equ	0xFDF
 15050                           postinc2	equ	0xFDE
 15051                           postdec2	equ	0xFDD
 15052                           plusw2	equ	0xFDB
 15053                           fsr2h	equ	0xFDA
 15054                           fsr2l	equ	0xFD9
 15055                           status	equ	0xFD8
 15056                           
 15057 ;; *************** function _HMI_SetBar *****************
 15058 ;; Defined at:
 15059 ;;		line 205 in file "HMI.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;  pValue          1    wreg     unsigned char 
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;  pValue          1    0[BANK0 ] unsigned char 
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      void 
 15066 ;; Registers used:
 15067 ;;		wreg
 15068 ;; Tracked objects:
 15069 ;;		On entry : 0/0
 15070 ;;		On exit  : 0/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;Total ram usage:        1 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; Hardware stack levels required when called:    7
 15080 ;; This function calls:
 15081 ;;		Nothing
 15082 ;; This function is called by:
 15083 ;;		_Event_DIPSwitch
 15084 ;;		_Event_HMI_DIPSwitch
 15085 ;;		_Event_HMI_LeftButton
 15086 ;;		_Event_HMI_RightButton
 15087 ;; This function uses a non-reentrant model
 15088 ;;
 15089                           
 15090                           	psect	text60
 15091  0169C8                     __ptext60:
 15092                           	opt stack 0
 15093  0169C8                     _HMI_SetBar:
 15094                           	opt stack 19
 15095                           
 15096                           ; BSR set to: 1
 15097                           ;incstack = 0
 15098                           ;HMI_SetBar@pValue stored from wreg
 15099  0169C8  0100               	movlb	0	; () banked
 15100  0169CA  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 15101                           
 15102                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 15103  0169CC  C060  F11D         	movff	HMI_SetBar@pValue,_HMIBoard+7
 15104  0169D0  0012               	return		;funcret
 15105  0169D2                     __end_of_HMI_SetBar:
 15106                           	opt stack 0
 15107                           tosu	equ	0xFFF
 15108                           tosh	equ	0xFFE
 15109                           tosl	equ	0xFFD
 15110                           pclath	equ	0xFFA
 15111                           tblptru	equ	0xFF8
 15112                           tblptrh	equ	0xFF7
 15113                           tblptrl	equ	0xFF6
 15114                           tablat	equ	0xFF5
 15115                           prodh	equ	0xFF4
 15116                           prodl	equ	0xFF3
 15117                           postinc0	equ	0xFEE
 15118                           wreg	equ	0xFE8
 15119                           indf1	equ	0xFE7
 15120                           postdec1	equ	0xFE5
 15121                           fsr1h	equ	0xFE2
 15122                           fsr1l	equ	0xFE1
 15123                           indf2	equ	0xFDF
 15124                           postinc2	equ	0xFDE
 15125                           postdec2	equ	0xFDD
 15126                           plusw2	equ	0xFDB
 15127                           fsr2h	equ	0xFDA
 15128                           fsr2l	equ	0xFD9
 15129                           status	equ	0xFD8
 15130                           
 15131 ;; *************** function _HMI_GetBar *****************
 15132 ;; Defined at:
 15133 ;;		line 209 in file "HMI.c"
 15134 ;; Parameters:    Size  Location     Type
 15135 ;;		None
 15136 ;; Auto vars:     Size  Location     Type
 15137 ;;		None
 15138 ;; Return value:  Size  Location     Type
 15139 ;;                  1    wreg      unsigned char 
 15140 ;; Registers used:
 15141 ;;		wreg, status,2
 15142 ;; Tracked objects:
 15143 ;;		On entry : 0/0
 15144 ;;		On exit  : 0/0
 15145 ;;		Unchanged: 0/0
 15146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15151 ;;Total ram usage:        0 bytes
 15152 ;; Hardware stack levels used:    1
 15153 ;; Hardware stack levels required when called:    7
 15154 ;; This function calls:
 15155 ;;		Nothing
 15156 ;; This function is called by:
 15157 ;;		_Event_DIPSwitch
 15158 ;;		_Event_HMI_DIPSwitch
 15159 ;; This function uses a non-reentrant model
 15160 ;;
 15161                           
 15162                           	psect	text61
 15163  0169F2                     __ptext61:
 15164                           	opt stack 0
 15165  0169F2                     _HMI_GetBar:
 15166                           	opt stack 19
 15167                           
 15168                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 15169                           
 15170                           ;incstack = 0
 15171  0169F2  0101               	movlb	1	; () banked
 15172  0169F4  511D               	movf	(_HMIBoard+7)& (0+255),w,b
 15173  0169F6  0012               	return	
 15174  0169F8                     __end_of_HMI_GetBar:
 15175                           	opt stack 0
 15176                           tosu	equ	0xFFF
 15177                           tosh	equ	0xFFE
 15178                           tosl	equ	0xFFD
 15179                           pclath	equ	0xFFA
 15180                           tblptru	equ	0xFF8
 15181                           tblptrh	equ	0xFF7
 15182                           tblptrl	equ	0xFF6
 15183                           tablat	equ	0xFF5
 15184                           prodh	equ	0xFF4
 15185                           prodl	equ	0xFF3
 15186                           postinc0	equ	0xFEE
 15187                           wreg	equ	0xFE8
 15188                           indf1	equ	0xFE7
 15189                           postdec1	equ	0xFE5
 15190                           fsr1h	equ	0xFE2
 15191                           fsr1l	equ	0xFE1
 15192                           indf2	equ	0xFDF
 15193                           postinc2	equ	0xFDE
 15194                           postdec2	equ	0xFDD
 15195                           plusw2	equ	0xFDB
 15196                           fsr2h	equ	0xFDA
 15197                           fsr2l	equ	0xFD9
 15198                           status	equ	0xFD8
 15199                           
 15200 ;; *************** function _FunctADC *****************
 15201 ;; Defined at:
 15202 ;;		line 57 in file "Functions.c"
 15203 ;; Parameters:    Size  Location     Type
 15204 ;;		None
 15205 ;; Auto vars:     Size  Location     Type
 15206 ;;		None
 15207 ;; Return value:  Size  Location     Type
 15208 ;;                  1    wreg      void 
 15209 ;; Registers used:
 15210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15211 ;; Tracked objects:
 15212 ;;		On entry : 0/0
 15213 ;;		On exit  : 0/0
 15214 ;;		Unchanged: 0/0
 15215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15220 ;;Total ram usage:        0 bytes
 15221 ;; Hardware stack levels used:    1
 15222 ;; Hardware stack levels required when called:    9
 15223 ;; This function calls:
 15224 ;;		_ADC_Start
 15225 ;; This function is called by:
 15226 ;;		_inputVar
 15227 ;; This function uses a non-reentrant model
 15228 ;;
 15229                           
 15230                           	psect	text62
 15231  016928                     __ptext62:
 15232                           	opt stack 0
 15233  016928                     _FunctADC:
 15234                           	opt stack 20
 15235                           
 15236                           ;Functions.c: 58: ADC_Start(&ADC_AN0);
 15237                           
 15238                           ; BSR set to: 1
 15239                           ;incstack = 0
 15240  016928  0ED2               	movlw	low _ADC_AN0
 15241  01692A  0100               	movlb	0	; () banked
 15242  01692C  6F62               	movwf	ADC_Start@pInput& (0+255),b
 15243  01692E  0E01               	movlw	high _ADC_AN0
 15244  016930  0100               	movlb	0	; () banked
 15245  016932  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 15246  016934  EC79  F0AA         	call	_ADC_Start	;wreg free
 15247  016938  0012               	return		;funcret
 15248  01693A                     __end_of_FunctADC:
 15249                           	opt stack 0
 15250                           tosu	equ	0xFFF
 15251                           tosh	equ	0xFFE
 15252                           tosl	equ	0xFFD
 15253                           pclath	equ	0xFFA
 15254                           tblptru	equ	0xFF8
 15255                           tblptrh	equ	0xFF7
 15256                           tblptrl	equ	0xFF6
 15257                           tablat	equ	0xFF5
 15258                           prodh	equ	0xFF4
 15259                           prodl	equ	0xFF3
 15260                           postinc0	equ	0xFEE
 15261                           wreg	equ	0xFE8
 15262                           indf1	equ	0xFE7
 15263                           postdec1	equ	0xFE5
 15264                           fsr1h	equ	0xFE2
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           plusw2	equ	0xFDB
 15270                           fsr2h	equ	0xFDA
 15271                           fsr2l	equ	0xFD9
 15272                           status	equ	0xFD8
 15273                           
 15274 ;; *************** function _ADC_Start *****************
 15275 ;; Defined at:
 15276 ;;		line 114 in file "Library/ADC.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 15279 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 15280 ;;		 -> NULL(0), 
 15281 ;; Auto vars:     Size  Location     Type
 15282 ;;		None
 15283 ;; Return value:  Size  Location     Type
 15284 ;;                  1    wreg      void 
 15285 ;; Registers used:
 15286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15287 ;; Tracked objects:
 15288 ;;		On entry : 0/0
 15289 ;;		On exit  : 0/0
 15290 ;;		Unchanged: 0/0
 15291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15292 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15295 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15296 ;;Total ram usage:        4 bytes
 15297 ;; Hardware stack levels used:    1
 15298 ;; Hardware stack levels required when called:    8
 15299 ;; This function calls:
 15300 ;;		_ADC_Off
 15301 ;;		_ADC_On
 15302 ;;		_ADC_SetChannel
 15303 ;; This function is called by:
 15304 ;;		_FunctADC
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           	psect	text63
 15309  0154F2                     __ptext63:
 15310                           	opt stack 0
 15311  0154F2                     _ADC_Start:
 15312                           	opt stack 20
 15313                           
 15314                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 15315                           
 15316                           ;incstack = 0
 15317  0154F2  B2C2               	btfsc	4034,1,c	;volatile
 15318  0154F4  0012               	return	
 15319  0154F6                     l13825:
 15320                           
 15321                           ;ADC.c: 128: {
 15322                           ;ADC.c: 129: ADC_Off();
 15323  0154F6  ECF2  F0B4         	call	_ADC_Off	;wreg free
 15324                           
 15325                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 15326  0154FA  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 15327  0154FE  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 15328  015502  50DF               	movf	indf2,w,c
 15329  015504  EC03  F0B4         	call	_ADC_SetChannel
 15330                           
 15331                           ;ADC.c: 131: ADC_On();
 15332  015508  EC02  F0B5         	call	_ADC_On	;wreg free
 15333                           
 15334                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 15335  01550C  82C2               	bsf	4034,1,c	;volatile
 15336  01550E                     l1279:
 15337  01550E  B2C2               	btfsc	4034,1,c	;volatile
 15338  015510  D7FE               	goto	l1279
 15339                           
 15340                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 15341  015512  50C3               	movf	4035,w,c	;volatile
 15342  015514  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 15343  015518  0100               	movlb	0	; () banked
 15344  01551A  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 15345  01551C  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 15346  015520  0100               	movlb	0	; () banked
 15347  015522  6B64               	clrf	??_ADC_Start& (0+255),b
 15348  015524  0100               	movlb	0	; () banked
 15349  015526  1364               	iorwf	??_ADC_Start& (0+255),f,b
 15350  015528  0E00               	movlw	0
 15351  01552A  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 15352  01552C  0100               	movlb	0	; () banked
 15353  01552E  EE20 F001          	lfsr	2,1
 15354  015532  5162               	movf	ADC_Start@pInput& (0+255),w,b
 15355  015534  26D9               	addwf	fsr2l,f,c
 15356  015536  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 15357  015538  22DA               	addwfc	fsr2h,f,c
 15358  01553A  C064  FFDE         	movff	??_ADC_Start,postinc2
 15359  01553E  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 15360                           
 15361                           ;ADC.c: 141: if (pInput->mNext == 0)
 15362  015542  0100               	movlb	0	; () banked
 15363  015544  EE20 F003          	lfsr	2,3
 15364  015548  5162               	movf	ADC_Start@pInput& (0+255),w,b
 15365  01554A  26D9               	addwf	fsr2l,f,c
 15366  01554C  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 15367  01554E  22DA               	addwfc	fsr2h,f,c
 15368  015550  50DE               	movf	postinc2,w,c
 15369  015552  10DE               	iorwf	postinc2,w,c
 15370  015554  B4D8               	btfsc	status,2,c
 15371  015556  D00C               	goto	l13839
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;ADC.c: 145: pInput = pInput->mNext;
 15375                           
 15376                           ; BSR set to: 0
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;ADC.c: 142: break;
 15380  015558  0100               	movlb	0	; () banked
 15381  01555A  EE20 F003          	lfsr	2,3
 15382  01555E  5162               	movf	ADC_Start@pInput& (0+255),w,b
 15383  015560  26D9               	addwf	fsr2l,f,c
 15384  015562  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 15385  015564  22DA               	addwfc	fsr2h,f,c
 15386  015566  CFDE F062          	movff	postinc2,ADC_Start@pInput
 15387  01556A  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 15388                           
 15389                           ;ADC.c: 146: }
 15390  01556E  D7C3               	goto	l13825
 15391  015570                     l13839:
 15392                           
 15393                           ; BSR set to: 0
 15394                           ;ADC.c: 147: ADC_Off();
 15395  015570  ECF2  F0B4         	call	_ADC_Off	;wreg free
 15396  015574  0012               	return		;funcret
 15397  015576                     __end_of_ADC_Start:
 15398                           	opt stack 0
 15399                           tosu	equ	0xFFF
 15400                           tosh	equ	0xFFE
 15401                           tosl	equ	0xFFD
 15402                           pclath	equ	0xFFA
 15403                           tblptru	equ	0xFF8
 15404                           tblptrh	equ	0xFF7
 15405                           tblptrl	equ	0xFF6
 15406                           tablat	equ	0xFF5
 15407                           prodh	equ	0xFF4
 15408                           prodl	equ	0xFF3
 15409                           postinc0	equ	0xFEE
 15410                           wreg	equ	0xFE8
 15411                           indf1	equ	0xFE7
 15412                           postdec1	equ	0xFE5
 15413                           fsr1h	equ	0xFE2
 15414                           fsr1l	equ	0xFE1
 15415                           indf2	equ	0xFDF
 15416                           postinc2	equ	0xFDE
 15417                           postdec2	equ	0xFDD
 15418                           plusw2	equ	0xFDB
 15419                           fsr2h	equ	0xFDA
 15420                           fsr2l	equ	0xFD9
 15421                           status	equ	0xFD8
 15422                           
 15423 ;; *************** function _init *****************
 15424 ;; Defined at:
 15425 ;;		line 41 in file "main.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;		None
 15428 ;; Auto vars:     Size  Location     Type
 15429 ;;		None
 15430 ;; Return value:  Size  Location     Type
 15431 ;;                  1    wreg      void 
 15432 ;; Registers used:
 15433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15434 ;; Tracked objects:
 15435 ;;		On entry : 0/0
 15436 ;;		On exit  : 0/0
 15437 ;;		Unchanged: 0/0
 15438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15443 ;;Total ram usage:        0 bytes
 15444 ;; Hardware stack levels used:    1
 15445 ;; Hardware stack levels required when called:   17
 15446 ;; This function calls:
 15447 ;;		_Console_Init
 15448 ;;		_FunctInitADC
 15449 ;;		_FunctInitButton
 15450 ;;		_HMI_Init
 15451 ;;		_ISR_Enable
 15452 ;;		_LCD_Init
 15453 ;;		_MXK_BlockSwitchTo
 15454 ;;		_MXK_Dequeue
 15455 ;;		_MXK_Init
 15456 ;;		_MXK_Release
 15457 ;;		_Motor_Init
 15458 ;; This function is called by:
 15459 ;;		_main
 15460 ;; This function uses a non-reentrant model
 15461 ;;
 15462                           
 15463                           	psect	text64
 15464  015BCA                     __ptext64:
 15465                           	opt stack 0
 15466  015BCA                     _init:
 15467                           	opt stack 13
 15468                           
 15469                           ;main.c: 43: MXK_Init();
 15470                           
 15471                           ;incstack = 0
 15472  015BCA  EC2D  F099         	call	_MXK_Init	;wreg free
 15473                           
 15474                           ;main.c: 46: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 15475  015BCE  0E01               	movlw	1
 15476  015BD0  EC7C  F0B1         	call	_MXK_BlockSwitchTo
 15477  015BD4  0900               	iorlw	0
 15478  015BD6  B4D8               	btfsc	status,2,c
 15479  015BD8  D00C               	goto	l15361
 15480                           
 15481                           ;main.c: 47: HMI_Init();
 15482  015BDA  EC84  F092         	call	_HMI_Init	;wreg free
 15483                           
 15484                           ;main.c: 48: LCD_Init();
 15485  015BDE  ECEA  F099         	call	_LCD_Init	;wreg free
 15486                           
 15487                           ;main.c: 49: Console_Init();
 15488  015BE2  EC36  F0AA         	call	_Console_Init	;wreg free
 15489                           
 15490                           ;main.c: 50: if (MXK_Release())
 15491  015BE6  EC7F  F0B4         	call	_MXK_Release	;wreg free
 15492  015BEA  0900               	iorlw	0
 15493  015BEC  A4D8               	btfss	status,2,c
 15494                           
 15495                           ;main.c: 51: MXK_Dequeue();
 15496  015BEE  EC98  F0B2         	call	_MXK_Dequeue	;wreg free
 15497  015BF2                     l15361:
 15498                           
 15499                           ;main.c: 52: }
 15500                           ;main.c: 56: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 15501  015BF2  0E08               	movlw	8
 15502  015BF4  EC7C  F0B1         	call	_MXK_BlockSwitchTo
 15503  015BF8  0900               	iorlw	0
 15504  015BFA  B4D8               	btfsc	status,2,c
 15505  015BFC  D013               	goto	l15369
 15506                           
 15507                           ;main.c: 57: Motor_Init(&Stepper, 0b1000);
 15508  015BFE  0EBD               	movlw	low _Stepper
 15509  015C00  0100               	movlb	0	; () banked
 15510  015C02  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 15511  015C04  0E01               	movlw	high _Stepper
 15512  015C06  0100               	movlb	0	; () banked
 15513  015C08  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 15514  015C0A  0E00               	movlw	0
 15515  015C0C  0100               	movlb	0	; () banked
 15516  015C0E  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 15517  015C10  0E08               	movlw	8
 15518  015C12  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 15519  015C14  EC63  F0A1         	call	_Motor_Init	;wreg free
 15520                           
 15521                           ;main.c: 58: if (MXK_Release())
 15522  015C18  EC7F  F0B4         	call	_MXK_Release	;wreg free
 15523  015C1C  0900               	iorlw	0
 15524  015C1E  A4D8               	btfss	status,2,c
 15525                           
 15526                           ;main.c: 59: MXK_Dequeue();
 15527  015C20  EC98  F0B2         	call	_MXK_Dequeue	;wreg free
 15528  015C24                     l15369:
 15529                           
 15530                           ;main.c: 60: }
 15531                           ;main.c: 65: ISR_Enable();
 15532  015C24  ECE9  F0B4         	call	_ISR_Enable	;wreg free
 15533                           
 15534                           ;main.c: 67: FunctInitADC();
 15535  015C28  ECE4  F0A5         	call	_FunctInitADC	;wreg free
 15536                           
 15537                           ;main.c: 68: FunctInitButton();
 15538  015C2C  EC30  F0A8         	call	_FunctInitButton	;wreg free
 15539  015C30  0012               	return		;funcret
 15540  015C32                     __end_of_init:
 15541                           	opt stack 0
 15542                           tosu	equ	0xFFF
 15543                           tosh	equ	0xFFE
 15544                           tosl	equ	0xFFD
 15545                           pclath	equ	0xFFA
 15546                           tblptru	equ	0xFF8
 15547                           tblptrh	equ	0xFF7
 15548                           tblptrl	equ	0xFF6
 15549                           tablat	equ	0xFF5
 15550                           prodh	equ	0xFF4
 15551                           prodl	equ	0xFF3
 15552                           postinc0	equ	0xFEE
 15553                           wreg	equ	0xFE8
 15554                           indf1	equ	0xFE7
 15555                           postdec1	equ	0xFE5
 15556                           fsr1h	equ	0xFE2
 15557                           fsr1l	equ	0xFE1
 15558                           indf2	equ	0xFDF
 15559                           postinc2	equ	0xFDE
 15560                           postdec2	equ	0xFDD
 15561                           plusw2	equ	0xFDB
 15562                           fsr2h	equ	0xFDA
 15563                           fsr2l	equ	0xFD9
 15564                           status	equ	0xFD8
 15565                           
 15566 ;; *************** function _Motor_Init *****************
 15567 ;; Defined at:
 15568 ;;		line 26 in file "Library/Motor.c"
 15569 ;; Parameters:    Size  Location     Type
 15570 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 15571 ;;		 -> Stepper(6), 
 15572 ;;  pAddress        2   47[BANK0 ] unsigned short 
 15573 ;; Auto vars:     Size  Location     Type
 15574 ;;		None
 15575 ;; Return value:  Size  Location     Type
 15576 ;;                  1    wreg      void 
 15577 ;; Registers used:
 15578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15579 ;; Tracked objects:
 15580 ;;		On entry : 0/0
 15581 ;;		On exit  : 0/0
 15582 ;;		Unchanged: 0/0
 15583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15587 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15588 ;;Total ram usage:        4 bytes
 15589 ;; Hardware stack levels used:    1
 15590 ;; Hardware stack levels required when called:   12
 15591 ;; This function calls:
 15592 ;;		_Port_SetPin
 15593 ;;		_Port_SetPinType
 15594 ;;		_Timer0_Init
 15595 ;; This function is called by:
 15596 ;;		_init
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           	psect	text65
 15601  0142C6                     __ptext65:
 15602                           	opt stack 0
 15603  0142C6                     _Motor_Init:
 15604                           	opt stack 17
 15605                           
 15606                           ;Motor.c: 28: pMotor->mDelta = 0;
 15607                           
 15608                           ;incstack = 0
 15609  0142C6  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 15610  0142CA  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 15611  0142CE  0E00               	movlw	0
 15612  0142D0  6EDE               	movwf	postinc2,c
 15613  0142D2  0E00               	movlw	0
 15614  0142D4  6EDD               	movwf	postdec2,c
 15615                           
 15616                           ;Motor.c: 29: pMotor->mFrequency = 0;
 15617  0142D6  0100               	movlb	0	; () banked
 15618  0142D8  EE20 F002          	lfsr	2,2
 15619  0142DC  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15620  0142DE  26D9               	addwf	fsr2l,f,c
 15621  0142E0  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15622  0142E2  22DA               	addwfc	fsr2h,f,c
 15623  0142E4  0E00               	movlw	0
 15624  0142E6  6EDE               	movwf	postinc2,c
 15625  0142E8  0E00               	movlw	0
 15626  0142EA  6EDD               	movwf	postdec2,c
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 15630  0142EC  0100               	movlb	0	; () banked
 15631  0142EE  EE20 F004          	lfsr	2,4
 15632  0142F2  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15633  0142F4  26D9               	addwf	fsr2l,f,c
 15634  0142F6  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15635  0142F8  22DA               	addwfc	fsr2h,f,c
 15636  0142FA  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 15637  0142FE  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 15638                           
 15639                           ; BSR set to: 0
 15640                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 15641  014302  0E84               	movlw	low _PortE
 15642  014304  0100               	movlb	0	; () banked
 15643  014306  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15644  014308  0E01               	movlw	high _PortE
 15645  01430A  0100               	movlb	0	; () banked
 15646  01430C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15647  01430E  0E00               	movlw	0
 15648  014310  0100               	movlb	0	; () banked
 15649  014312  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15650  014314  0E03               	movlw	3
 15651  014316  0100               	movlb	0	; () banked
 15652  014318  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15653  01431A  EC68  F094         	call	_Port_SetPinType	;wreg free
 15654                           
 15655                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 15656  01431E  0E84               	movlw	low _PortE
 15657  014320  0100               	movlb	0	; () banked
 15658  014322  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15659  014324  0E01               	movlw	high _PortE
 15660  014326  0100               	movlb	0	; () banked
 15661  014328  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15662  01432A  0E01               	movlw	1
 15663  01432C  0100               	movlb	0	; () banked
 15664  01432E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15665  014330  0E03               	movlw	3
 15666  014332  0100               	movlb	0	; () banked
 15667  014334  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15668  014336  EC68  F094         	call	_Port_SetPinType	;wreg free
 15669                           
 15670                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 15671  01433A  0E84               	movlw	low _PortE
 15672  01433C  0100               	movlb	0	; () banked
 15673  01433E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15674  014340  0E01               	movlw	high _PortE
 15675  014342  0100               	movlb	0	; () banked
 15676  014344  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15677  014346  0E00               	movlw	0
 15678  014348  0100               	movlb	0	; () banked
 15679  01434A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15680  01434C  0E00               	movlw	0
 15681  01434E  0100               	movlb	0	; () banked
 15682  014350  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15683  014352  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 15684                           
 15685                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 15686  014356  0E84               	movlw	low _PortE
 15687  014358  0100               	movlb	0	; () banked
 15688  01435A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15689  01435C  0E01               	movlw	high _PortE
 15690  01435E  0100               	movlb	0	; () banked
 15691  014360  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15692  014362  0E01               	movlw	1
 15693  014364  0100               	movlb	0	; () banked
 15694  014366  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15695  014368  0E00               	movlw	0
 15696  01436A  0100               	movlb	0	; () banked
 15697  01436C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15698  01436E  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 15699                           
 15700                           ;Motor.c: 38: lStepFunction = Motor_Step;
 15701  014372  0ED0               	movlw	low _Motor_Step
 15702  014374  0100               	movlb	0	; () banked
 15703  014376  6FD1               	movwf	_lStepFunction& (0+255),b
 15704  014378  0E3C               	movlw	high _Motor_Step
 15705  01437A  0100               	movlb	0	; () banked
 15706  01437C  6FD2               	movwf	(_lStepFunction+1)& (0+255),b
 15707  01437E  0E01               	movlw	low (_Motor_Step shr (0+16))
 15708  014380  0100               	movlb	0	; () banked
 15709  014382  6FD3               	movwf	(_lStepFunction+2)& (0+255),b
 15710                           
 15711                           ; BSR set to: 0
 15712                           ;Motor.c: 39: Timer0_Init(1000);
 15713  014384  0EE8               	movlw	232
 15714  014386  0100               	movlb	0	; () banked
 15715  014388  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 15716  01438A  0E03               	movlw	3
 15717  01438C  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 15718  01438E  0E00               	movlw	0
 15719  014390  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 15720  014392  0E00               	movlw	0
 15721  014394  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 15722  014396  EC56  F09B         	call	_Timer0_Init	;wreg free
 15723  01439A  0012               	return		;funcret
 15724  01439C                     __end_of_Motor_Init:
 15725                           	opt stack 0
 15726                           tosu	equ	0xFFF
 15727                           tosh	equ	0xFFE
 15728                           tosl	equ	0xFFD
 15729                           pclath	equ	0xFFA
 15730                           tblptru	equ	0xFF8
 15731                           tblptrh	equ	0xFF7
 15732                           tblptrl	equ	0xFF6
 15733                           tablat	equ	0xFF5
 15734                           prodh	equ	0xFF4
 15735                           prodl	equ	0xFF3
 15736                           postinc0	equ	0xFEE
 15737                           wreg	equ	0xFE8
 15738                           indf1	equ	0xFE7
 15739                           postdec1	equ	0xFE5
 15740                           fsr1h	equ	0xFE2
 15741                           fsr1l	equ	0xFE1
 15742                           indf2	equ	0xFDF
 15743                           postinc2	equ	0xFDE
 15744                           postdec2	equ	0xFDD
 15745                           plusw2	equ	0xFDB
 15746                           fsr2h	equ	0xFDA
 15747                           fsr2l	equ	0xFD9
 15748                           status	equ	0xFD8
 15749                           
 15750 ;; *************** function _MXK_Init *****************
 15751 ;; Defined at:
 15752 ;;		line 33 in file "Library/MXK.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;		None
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;		None
 15757 ;; Return value:  Size  Location     Type
 15758 ;;                  1    wreg      void 
 15759 ;; Registers used:
 15760 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15770 ;;Total ram usage:        0 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:   16
 15773 ;; This function calls:
 15774 ;;		_LED_Init
 15775 ;;		_Port_Init
 15776 ;;		_Port_SetPin
 15777 ;;		_Port_SetPinType
 15778 ;;		_Port_SetQuadType
 15779 ;;		_Port_SetType
 15780 ;;		_delay_ms
 15781 ;; This function is called by:
 15782 ;;		_init
 15783 ;; This function uses a non-reentrant model
 15784 ;;
 15785                           
 15786                           	psect	text66
 15787  01325A                     __ptext66:
 15788                           	opt stack 0
 15789  01325A                     _MXK_Init:
 15790                           	opt stack 13
 15791                           
 15792                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 15793                           
 15794                           ;incstack = 0
 15795  01325A  0E01               	movlw	1
 15796  01325C  6E43               	movwf	_Bus_State,c
 15797                           
 15798                           ;MXK.c: 36: lQueue = (Function)0;
 15799  01325E  0E00               	movlw	0
 15800  013260  6E25               	movwf	_lQueue,c	;volatile
 15801  013262  0E00               	movlw	0
 15802  013264  6E26               	movwf	_lQueue+1,c	;volatile
 15803  013266  0E00               	movlw	0
 15804  013268  6E27               	movwf	_lQueue+2,c	;volatile
 15805                           
 15806                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 15807  01326A  0EA2               	movlw	low _PortA
 15808  01326C  0100               	movlb	0	; () banked
 15809  01326E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15810  013270  0E01               	movlw	high _PortA
 15811  013272  0100               	movlb	0	; () banked
 15812  013274  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15813  013276  0E00               	movlw	0
 15814  013278  0100               	movlb	0	; () banked
 15815  01327A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15816  01327C  EC11  F096         	call	_Port_Init	;wreg free
 15817                           
 15818                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 15819  013280  0E98               	movlw	low _PortB
 15820  013282  0100               	movlb	0	; () banked
 15821  013284  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15822  013286  0E01               	movlw	high _PortB
 15823  013288  0100               	movlb	0	; () banked
 15824  01328A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15825  01328C  0E01               	movlw	1
 15826  01328E  0100               	movlb	0	; () banked
 15827  013290  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15828  013292  EC11  F096         	call	_Port_Init	;wreg free
 15829                           
 15830                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 15831  013296  0EEC               	movlw	low _PortC
 15832  013298  0100               	movlb	0	; () banked
 15833  01329A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15834  01329C  0E00               	movlw	high _PortC
 15835  01329E  0100               	movlb	0	; () banked
 15836  0132A0  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15837  0132A2  0E02               	movlw	2
 15838  0132A4  0100               	movlb	0	; () banked
 15839  0132A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15840  0132A8  EC11  F096         	call	_Port_Init	;wreg free
 15841                           
 15842                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 15843  0132AC  0E8E               	movlw	low _PortD
 15844  0132AE  0100               	movlb	0	; () banked
 15845  0132B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15846  0132B2  0E01               	movlw	high _PortD
 15847  0132B4  0100               	movlb	0	; () banked
 15848  0132B6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15849  0132B8  0E03               	movlw	3
 15850  0132BA  0100               	movlb	0	; () banked
 15851  0132BC  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15852  0132BE  EC11  F096         	call	_Port_Init	;wreg free
 15853                           
 15854                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 15855  0132C2  0E84               	movlw	low _PortE
 15856  0132C4  0100               	movlb	0	; () banked
 15857  0132C6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15858  0132C8  0E01               	movlw	high _PortE
 15859  0132CA  0100               	movlb	0	; () banked
 15860  0132CC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15861  0132CE  0E04               	movlw	4
 15862  0132D0  0100               	movlb	0	; () banked
 15863  0132D2  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15864  0132D4  EC11  F096         	call	_Port_Init	;wreg free
 15865                           
 15866                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 15867  0132D8  0EAC               	movlw	low _PortF
 15868  0132DA  0100               	movlb	0	; () banked
 15869  0132DC  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15870  0132DE  0E01               	movlw	high _PortF
 15871  0132E0  0100               	movlb	0	; () banked
 15872  0132E2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15873  0132E4  0E05               	movlw	5
 15874  0132E6  0100               	movlb	0	; () banked
 15875  0132E8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15876  0132EA  EC11  F096         	call	_Port_Init	;wreg free
 15877                           
 15878                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 15879  0132EE  0E7A               	movlw	low _PortG
 15880  0132F0  0100               	movlb	0	; () banked
 15881  0132F2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 15882  0132F4  0E01               	movlw	high _PortG
 15883  0132F6  0100               	movlb	0	; () banked
 15884  0132F8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 15885  0132FA  0E06               	movlw	6
 15886  0132FC  0100               	movlb	0	; () banked
 15887  0132FE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 15888  013300  EC11  F096         	call	_Port_Init	;wreg free
 15889                           
 15890                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 15891  013304  0EAC               	movlw	low _PortF
 15892  013306  0100               	movlb	0	; () banked
 15893  013308  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15894  01330A  0E01               	movlw	high _PortF
 15895  01330C  0100               	movlb	0	; () banked
 15896  01330E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15897  013310  0E05               	movlw	5
 15898  013312  0100               	movlb	0	; () banked
 15899  013314  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15900  013316  0E00               	movlw	0
 15901  013318  0100               	movlb	0	; () banked
 15902  01331A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15903  01331C  EC68  F094         	call	_Port_SetPinType	;wreg free
 15904                           
 15905                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 15906  013320  0E98               	movlw	low _PortB
 15907  013322  0100               	movlb	0	; () banked
 15908  013324  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 15909  013326  0E01               	movlw	high _PortB
 15910  013328  0100               	movlb	0	; () banked
 15911  01332A  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 15912  01332C  0E00               	movlw	0
 15913  01332E  0100               	movlb	0	; () banked
 15914  013330  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 15915  013332  0E00               	movlw	0
 15916  013334  0100               	movlb	0	; () banked
 15917  013336  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 15918  013338  EC3E  F08E         	call	_Port_SetQuadType	;wreg free
 15919                           
 15920                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 15921  01333C  0EAC               	movlw	low _PortF
 15922  01333E  0100               	movlb	0	; () banked
 15923  013340  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15924  013342  0E01               	movlw	high _PortF
 15925  013344  0100               	movlb	0	; () banked
 15926  013346  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15927  013348  0E06               	movlw	6
 15928  01334A  0100               	movlb	0	; () banked
 15929  01334C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15930  01334E  0E03               	movlw	3
 15931  013350  0100               	movlb	0	; () banked
 15932  013352  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15933  013354  EC68  F094         	call	_Port_SetPinType	;wreg free
 15934                           
 15935                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 15936  013358  0E7A               	movlw	low _PortG
 15937  01335A  0100               	movlb	0	; () banked
 15938  01335C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 15939  01335E  0E01               	movlw	high _PortG
 15940  013360  0100               	movlb	0	; () banked
 15941  013362  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 15942  013364  0E03               	movlw	3
 15943  013366  0100               	movlb	0	; () banked
 15944  013368  6F9C               	movwf	Port_SetType@pType& (0+255),b
 15945  01336A  EC69  F08F         	call	_Port_SetType	;wreg free
 15946                           
 15947                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 15948  01336E  0E7A               	movlw	low _PortG
 15949  013370  0100               	movlb	0	; () banked
 15950  013372  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15951  013374  0E01               	movlw	high _PortG
 15952  013376  0100               	movlb	0	; () banked
 15953  013378  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15954  01337A  0E04               	movlw	4
 15955  01337C  0100               	movlb	0	; () banked
 15956  01337E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15957  013380  0E00               	movlw	0
 15958  013382  0100               	movlb	0	; () banked
 15959  013384  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15960  013386  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 15961                           
 15962                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 15963  01338A  0EAC               	movlw	low _PortF
 15964  01338C  0100               	movlb	0	; () banked
 15965  01338E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15966  013390  0E01               	movlw	high _PortF
 15967  013392  0100               	movlb	0	; () banked
 15968  013394  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15969  013396  0E06               	movlw	6
 15970  013398  0100               	movlb	0	; () banked
 15971  01339A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15972  01339C  0E01               	movlw	1
 15973  01339E  0100               	movlb	0	; () banked
 15974  0133A0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15975  0133A2  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 15976                           
 15977                           ;MXK.c: 55: LED_Init(eLED1);
 15978  0133A6  0E00               	movlw	0
 15979  0133A8  ECAE  F0AE         	call	_LED_Init
 15980                           
 15981                           ;MXK.c: 56: LED_Init(eLED2);
 15982  0133AC  0E01               	movlw	1
 15983  0133AE  ECAE  F0AE         	call	_LED_Init
 15984                           
 15985                           ;MXK.c: 58: PIR1 = 0;
 15986  0133B2  0E00               	movlw	0
 15987  0133B4  6E9E               	movwf	3998,c	;volatile
 15988                           
 15989                           ;MXK.c: 59: PIR2 = 0;
 15990  0133B6  0E00               	movlw	0
 15991  0133B8  6EA1               	movwf	4001,c	;volatile
 15992                           
 15993                           ;MXK.c: 60: PIR3 = 0;
 15994  0133BA  0E00               	movlw	0
 15995  0133BC  6EA4               	movwf	4004,c	;volatile
 15996                           
 15997                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 15998  0133BE  8E9B               	bsf	3995,7,c	;volatile
 15999                           
 16000                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 16001  0133C0  8C9B               	bsf	3995,6,c	;volatile
 16002                           
 16003                           ;MXK.c: 66: delay_ms(100);
 16004  0133C2  0E00               	movlw	0
 16005  0133C4  0100               	movlb	0	; () banked
 16006  0133C6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16007  0133C8  0E64               	movlw	100
 16008  0133CA  6F60               	movwf	delay_ms@ms& (0+255),b
 16009  0133CC  EC7B  F0AD         	call	_delay_ms	;wreg free
 16010                           
 16011                           ;MXK.c: 68: RCONbits.IPEN = 1;
 16012  0133D0  8ED0               	bsf	4048,7,c	;volatile
 16013  0133D2  0012               	return		;funcret
 16014  0133D4                     __end_of_MXK_Init:
 16015                           	opt stack 0
 16016                           tosu	equ	0xFFF
 16017                           tosh	equ	0xFFE
 16018                           tosl	equ	0xFFD
 16019                           pclath	equ	0xFFA
 16020                           tblptru	equ	0xFF8
 16021                           tblptrh	equ	0xFF7
 16022                           tblptrl	equ	0xFF6
 16023                           tablat	equ	0xFF5
 16024                           prodh	equ	0xFF4
 16025                           prodl	equ	0xFF3
 16026                           postinc0	equ	0xFEE
 16027                           wreg	equ	0xFE8
 16028                           indf1	equ	0xFE7
 16029                           postdec1	equ	0xFE5
 16030                           fsr1h	equ	0xFE2
 16031                           fsr1l	equ	0xFE1
 16032                           indf2	equ	0xFDF
 16033                           postinc2	equ	0xFDE
 16034                           postdec2	equ	0xFDD
 16035                           plusw2	equ	0xFDB
 16036                           fsr2h	equ	0xFDA
 16037                           fsr2l	equ	0xFD9
 16038                           status	equ	0xFD8
 16039                           
 16040 ;; *************** function _Port_Init *****************
 16041 ;; Defined at:
 16042 ;;		line 150 in file "Library/Port.c"
 16043 ;; Parameters:    Size  Location     Type
 16044 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 16045 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16046 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16047 ;;  pPort           1   66[BANK0 ] enum E6786
 16048 ;; Auto vars:     Size  Location     Type
 16049 ;;  i               1   69[BANK0 ] unsigned char 
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  1    wreg      void 
 16052 ;; Registers used:
 16053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16054 ;; Tracked objects:
 16055 ;;		On entry : 0/0
 16056 ;;		On exit  : 0/0
 16057 ;;		Unchanged: 0/0
 16058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16059 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16061 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16062 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16063 ;;Total ram usage:        6 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; Hardware stack levels required when called:   15
 16066 ;; This function calls:
 16067 ;;		_GetPortPORT
 16068 ;;		_GetPortProperties
 16069 ;;		_GetPortTRIS
 16070 ;;		_Port_Set
 16071 ;;		_Port_SetPinType
 16072 ;;		_Port_SetType
 16073 ;;		_Word_GetPair
 16074 ;; This function is called by:
 16075 ;;		_MXK_Init
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           	psect	text67
 16080  012C22                     __ptext67:
 16081                           	opt stack 0
 16082  012C22                     _Port_Init:
 16083                           	opt stack 13
 16084                           
 16085                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 16086                           
 16087                           ;incstack = 0
 16088  012C22  0100               	movlb	0	; () banked
 16089  012C24  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16090  012C26  EC38  F0A7         	call	_GetPortProperties
 16091  012C2A  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16092  012C2E  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16093  012C32  0100               	movlb	0	; () banked
 16094  012C34  C060  FFDE         	movff	?_GetPortProperties,postinc2
 16095  012C38  0100               	movlb	0	; () banked
 16096  012C3A  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 16097                           
 16098                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 16099  012C3E  0100               	movlb	0	; () banked
 16100  012C40  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16101  012C42  EC8B  F0A7         	call	_GetPortPORT
 16102  012C46  0100               	movlb	0	; () banked
 16103  012C48  EE20 F006          	lfsr	2,6
 16104  012C4C  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16105  012C4E  26D9               	addwf	fsr2l,f,c
 16106  012C50  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16107  012C52  22DA               	addwfc	fsr2h,f,c
 16108  012C54  0100               	movlb	0	; () banked
 16109  012C56  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16110  012C5A  0100               	movlb	0	; () banked
 16111  012C5C  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16112                           
 16113                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 16114  012C60  0100               	movlb	0	; () banked
 16115  012C62  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16116  012C64  EC8B  F0A7         	call	_GetPortPORT
 16117  012C68  0100               	movlb	0	; () banked
 16118  012C6A  EE20 F004          	lfsr	2,4
 16119  012C6E  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16120  012C70  26D9               	addwf	fsr2l,f,c
 16121  012C72  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16122  012C74  22DA               	addwfc	fsr2h,f,c
 16123  012C76  0100               	movlb	0	; () banked
 16124  012C78  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16125  012C7C  0100               	movlb	0	; () banked
 16126  012C7E  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16127                           
 16128                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 16129  012C82  0100               	movlb	0	; () banked
 16130  012C84  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16131  012C86  ECE5  F0A6         	call	_GetPortTRIS
 16132  012C8A  0100               	movlb	0	; () banked
 16133  012C8C  EE20 F002          	lfsr	2,2
 16134  012C90  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16135  012C92  26D9               	addwf	fsr2l,f,c
 16136  012C94  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16137  012C96  22DA               	addwfc	fsr2h,f,c
 16138  012C98  0100               	movlb	0	; () banked
 16139  012C9A  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 16140  012C9E  0100               	movlb	0	; () banked
 16141  012CA0  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 16145  012CA4  0100               	movlb	0	; () banked
 16146  012CA6  EE20 F004          	lfsr	2,4
 16147  012CAA  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16148  012CAC  26D9               	addwf	fsr2l,f,c
 16149  012CAE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16150  012CB0  22DA               	addwfc	fsr2h,f,c
 16151  012CB2  CFDE F0A3          	movff	postinc2,??_Port_Init
 16152  012CB6  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16153  012CBA  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16154  012CBE  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16155  012CC2  0E00               	movlw	0
 16156  012CC4  6EDF               	movwf	indf2,c
 16157                           
 16158                           ; BSR set to: 0
 16159                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 16160  012CC6  0100               	movlb	0	; () banked
 16161  012CC8  EE20 F002          	lfsr	2,2
 16162  012CCC  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16163  012CCE  26D9               	addwf	fsr2l,f,c
 16164  012CD0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16165  012CD2  22DA               	addwfc	fsr2h,f,c
 16166  012CD4  CFDE F0A3          	movff	postinc2,??_Port_Init
 16167  012CD8  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16168  012CDC  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16169  012CE0  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16170  012CE4  0EFF               	movlw	255
 16171  012CE6  6EDF               	movwf	indf2,c
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 16175  012CE8  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 16176  012CEC  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 16177  012CF0  0E00               	movlw	0
 16178  012CF2  0100               	movlb	0	; () banked
 16179  012CF4  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16180  012CF6  EC69  F08F         	call	_Port_SetType	;wreg free
 16181                           
 16182                           ;Port.c: 166: UINT8 i;
 16183                           ;Port.c: 167: for (i=0; i<8; i++)
 16184  012CFA  0E00               	movlw	0
 16185  012CFC  0100               	movlb	0	; () banked
 16186  012CFE  6FA5               	movwf	Port_Init@i& (0+255),b
 16187  012D00                     l13697:
 16188                           
 16189                           ; BSR set to: 0
 16190  012D00  0E07               	movlw	7
 16191  012D02  0100               	movlb	0	; () banked
 16192  012D04  65A5               	cpfsgt	Port_Init@i& (0+255),b
 16193  012D06  D031               	goto	l13711
 16194  012D08  D04B               	goto	l13717
 16195  012D0A                     l13701:
 16196                           
 16197                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 16198  012D0A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16199  012D0E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16200  012D12  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16201  012D16  0E03               	movlw	3
 16202  012D18  0100               	movlb	0	; () banked
 16203  012D1A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16204  012D1C  EC68  F094         	call	_Port_SetPinType	;wreg free
 16205                           
 16206                           ;Port.c: 173: break;
 16207  012D20  D03C               	goto	l13713
 16208  012D22                     l13703:
 16209                           
 16210                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 16211  012D22  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16212  012D26  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16213  012D2A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16214  012D2E  0E02               	movlw	2
 16215  012D30  0100               	movlb	0	; () banked
 16216  012D32  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16217  012D34  EC68  F094         	call	_Port_SetPinType	;wreg free
 16218                           
 16219                           ;Port.c: 176: break;
 16220  012D38  D030               	goto	l13713
 16221  012D3A                     l13705:
 16222                           
 16223                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 16224  012D3A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16225  012D3E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16226  012D42  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16227  012D46  0E01               	movlw	1
 16228  012D48  0100               	movlb	0	; () banked
 16229  012D4A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16230  012D4C  EC68  F094         	call	_Port_SetPinType	;wreg free
 16231                           
 16232                           ;Port.c: 179: break;
 16233  012D50  D024               	goto	l13713
 16234  012D52                     l13707:
 16235                           
 16236                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 16237  012D52  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16238  012D56  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16239  012D5A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16240  012D5E  0E00               	movlw	0
 16241  012D60  0100               	movlb	0	; () banked
 16242  012D62  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16243  012D64  EC68  F094         	call	_Port_SetPinType	;wreg free
 16244                           
 16245                           ;Port.c: 183: }
 16246                           
 16247                           ;Port.c: 182: break;
 16248  012D68  D018               	goto	l13713
 16249  012D6A                     l13711:
 16250  012D6A  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16251  012D6E  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16252  012D72  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 16253  012D76  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 16254  012D7A  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 16255  012D7E  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 16256                           
 16257                           ; Switch size 1, requested type "space"
 16258                           ; Number of cases is 4, Range of values is 0 to 3
 16259                           ; switch strategies available:
 16260                           ; Name         Instructions Cycles
 16261                           ; simple_byte           13     7 (average)
 16262                           ;	Chosen strategy is simple_byte
 16263  012D82  0A00               	xorlw	0	; case 0
 16264  012D84  B4D8               	btfsc	status,2,c
 16265  012D86  D7C1               	goto	l13701
 16266  012D88  0A01               	xorlw	1	; case 1
 16267  012D8A  B4D8               	btfsc	status,2,c
 16268  012D8C  D7D6               	goto	l13705
 16269  012D8E  0A03               	xorlw	3	; case 2
 16270  012D90  B4D8               	btfsc	status,2,c
 16271  012D92  D7C7               	goto	l13703
 16272  012D94  0A01               	xorlw	1	; case 3
 16273  012D96  B4D8               	btfsc	status,2,c
 16274  012D98  D7DC               	goto	l13707
 16275  012D9A                     l13713:
 16276  012D9A  0100               	movlb	0	; () banked
 16277  012D9C  2BA5               	incf	Port_Init@i& (0+255),f,b
 16278  012D9E  D7B0               	goto	l13697
 16279  012DA0                     l13717:
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;Port.c: 184: }
 16283                           ;Port.c: 185: Port_Set(pInput, 0x00);
 16284  012DA0  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 16285  012DA4  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 16286  012DA8  0E00               	movlw	0
 16287  012DAA  0100               	movlb	0	; () banked
 16288  012DAC  6F71               	movwf	Port_Set@pValue& (0+255),b
 16289  012DAE  EC96  F088         	call	_Port_Set	;wreg free
 16290  012DB2  0012               	return		;funcret
 16291  012DB4                     __end_of_Port_Init:
 16292                           	opt stack 0
 16293                           tosu	equ	0xFFF
 16294                           tosh	equ	0xFFE
 16295                           tosl	equ	0xFFD
 16296                           pclath	equ	0xFFA
 16297                           tblptru	equ	0xFF8
 16298                           tblptrh	equ	0xFF7
 16299                           tblptrl	equ	0xFF6
 16300                           tablat	equ	0xFF5
 16301                           prodh	equ	0xFF4
 16302                           prodl	equ	0xFF3
 16303                           postinc0	equ	0xFEE
 16304                           wreg	equ	0xFE8
 16305                           indf1	equ	0xFE7
 16306                           postdec1	equ	0xFE5
 16307                           fsr1h	equ	0xFE2
 16308                           fsr1l	equ	0xFE1
 16309                           indf2	equ	0xFDF
 16310                           postinc2	equ	0xFDE
 16311                           postdec2	equ	0xFDD
 16312                           plusw2	equ	0xFDB
 16313                           fsr2h	equ	0xFDA
 16314                           fsr2l	equ	0xFD9
 16315                           status	equ	0xFD8
 16316                           
 16317 ;; *************** function _Port_SetType *****************
 16318 ;; Defined at:
 16319 ;;		line 513 in file "Library/Port.c"
 16320 ;; Parameters:    Size  Location     Type
 16321 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 16322 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16323 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16324 ;;  pType           1   60[BANK0 ] enum E6795
 16325 ;; Auto vars:     Size  Location     Type
 16326 ;;  Output          1   63[BANK0 ] enum E6475
 16327 ;; Return value:  Size  Location     Type
 16328 ;;                  1    wreg      enum E6475
 16329 ;; Registers used:
 16330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16331 ;; Tracked objects:
 16332 ;;		On entry : 0/0
 16333 ;;		On exit  : 0/0
 16334 ;;		Unchanged: 0/0
 16335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16336 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16339 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16340 ;;Total ram usage:        6 bytes
 16341 ;; Hardware stack levels used:    1
 16342 ;; Hardware stack levels required when called:   14
 16343 ;; This function calls:
 16344 ;;		_Port_CheckPortType
 16345 ;;		_Word_SetPair
 16346 ;; This function is called by:
 16347 ;;		_Port_Init
 16348 ;;		_MXK_Init
 16349 ;; This function uses a non-reentrant model
 16350 ;;
 16351                           
 16352                           	psect	text68
 16353  011ED2                     __ptext68:
 16354                           	opt stack 0
 16355  011ED2                     _Port_SetType:
 16356                           	opt stack 14
 16357                           
 16358                           ;Port.c: 515: ePinError Output = ePinErrorState;
 16359                           
 16360                           ;incstack = 0
 16361  011ED2  0E05               	movlw	5
 16362  011ED4  0100               	movlb	0	; () banked
 16363  011ED6  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16364                           
 16365                           ;Port.c: 517: switch (pType)
 16366  011ED8  D07A               	goto	l13049
 16367  011EDA                     l13033:
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 16371  011EDA  0100               	movlb	0	; () banked
 16372  011EDC  EE20 F002          	lfsr	2,2
 16373  011EE0  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16374  011EE2  26D9               	addwf	fsr2l,f,c
 16375  011EE4  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16376  011EE6  22DA               	addwfc	fsr2h,f,c
 16377  011EE8  CFDE F09D          	movff	postinc2,??_Port_SetType
 16378  011EEC  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16379  011EF0  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16380  011EF4  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16381  011EF8  0EFF               	movlw	255
 16382  011EFA  D067               	goto	L11
 16383  011EFC                     l13035:
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 16387  011EFC  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16388  011F00  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16389  011F04  0E01               	movlw	1
 16390  011F06  0100               	movlb	0	; () banked
 16391  011F08  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16392  011F0A  EC47  F0B0         	call	_Port_CheckPortType	;wreg free
 16393  011F0E  0100               	movlb	0	; () banked
 16394  011F10  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16395  011F12  0100               	movlb	0	; () banked
 16396  011F14  519F               	movf	Port_SetType@Output& (0+255),w,b
 16397  011F16  A4D8               	btfss	status,2,c
 16398  011F18  0012               	return	
 16399                           
 16400                           ; BSR set to: 0
 16401                           ;Port.c: 527: {
 16402                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 16403  011F1A  0100               	movlb	0	; () banked
 16404  011F1C  EE20 F002          	lfsr	2,2
 16405  011F20  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16406  011F22  26D9               	addwf	fsr2l,f,c
 16407  011F24  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16408  011F26  22DA               	addwfc	fsr2h,f,c
 16409  011F28  CFDE F09D          	movff	postinc2,??_Port_SetType
 16410  011F2C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16411  011F30  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16412  011F34  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16413  011F38  0E00               	movlw	0
 16414  011F3A  6EDF               	movwf	indf2,c
 16415                           
 16416                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 16417  011F3C  0100               	movlb	0	; () banked
 16418  011F3E  EE20 F004          	lfsr	2,4
 16419  011F42  D036               	goto	L22
 16420  011F44                     l13039:
 16421                           
 16422                           ; BSR set to: 0
 16423                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 16424  011F44  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16425  011F48  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16426  011F4C  0E02               	movlw	2
 16427  011F4E  0100               	movlb	0	; () banked
 16428  011F50  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16429  011F52  EC47  F0B0         	call	_Port_CheckPortType	;wreg free
 16430  011F56  0100               	movlb	0	; () banked
 16431  011F58  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16432  011F5A  0100               	movlb	0	; () banked
 16433  011F5C  519F               	movf	Port_SetType@Output& (0+255),w,b
 16434  011F5E  A4D8               	btfss	status,2,c
 16435  011F60  0012               	return	
 16436                           
 16437                           ; BSR set to: 0
 16438                           ;Port.c: 538: {
 16439                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 16440  011F62  0100               	movlb	0	; () banked
 16441  011F64  EE20 F002          	lfsr	2,2
 16442  011F68  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16443  011F6A  26D9               	addwf	fsr2l,f,c
 16444  011F6C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16445  011F6E  22DA               	addwfc	fsr2h,f,c
 16446  011F70  CFDE F09D          	movff	postinc2,??_Port_SetType
 16447  011F74  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16448  011F78  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16449  011F7C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16450  011F80  0EFF               	movlw	255
 16451  011F82  6EDF               	movwf	indf2,c
 16452                           
 16453                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16454  011F84  0100               	movlb	0	; () banked
 16455  011F86  EE20 F004          	lfsr	2,4
 16456  011F8A  D7AA               	goto	L12
 16457  011F8C                     l13043:
 16458                           
 16459                           ; BSR set to: 0
 16460                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16461  011F8C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16462  011F90  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16463  011F94  0E00               	movlw	0
 16464  011F96  0100               	movlb	0	; () banked
 16465  011F98  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16466  011F9A  EC47  F0B0         	call	_Port_CheckPortType	;wreg free
 16467  011F9E  0100               	movlb	0	; () banked
 16468  011FA0  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16469  011FA2  0100               	movlb	0	; () banked
 16470  011FA4  519F               	movf	Port_SetType@Output& (0+255),w,b
 16471  011FA6  A4D8               	btfss	status,2,c
 16472  011FA8  0012               	return	
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;Port.c: 549: {
 16476                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16477  011FAA  0100               	movlb	0	; () banked
 16478  011FAC  EE20 F002          	lfsr	2,2
 16479  011FB0                     L22:
 16480  011FB0  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16481  011FB2  26D9               	addwf	fsr2l,f,c
 16482  011FB4  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16483  011FB6  22DA               	addwfc	fsr2h,f,c
 16484  011FB8  CFDE F09D          	movff	postinc2,??_Port_SetType
 16485  011FBC  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16486  011FC0  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16487  011FC4  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16488  011FC8  0E00               	movlw	0
 16489  011FCA                     L11:
 16490  011FCA  6EDF               	movwf	indf2,c
 16491                           
 16492                           ;Port.c: 552: }
 16493  011FCC  D00E               	goto	l13051
 16494  011FCE                     l13049:
 16495                           
 16496                           ; BSR set to: 0
 16497  011FCE  0100               	movlb	0	; () banked
 16498  011FD0  519C               	movf	Port_SetType@pType& (0+255),w,b
 16499                           
 16500                           ; Switch size 1, requested type "space"
 16501                           ; Number of cases is 4, Range of values is 0 to 3
 16502                           ; switch strategies available:
 16503                           ; Name         Instructions Cycles
 16504                           ; simple_byte           13     7 (average)
 16505                           ;	Chosen strategy is simple_byte
 16506  011FD2  0A00               	xorlw	0	; case 0
 16507  011FD4  B4D8               	btfsc	status,2,c
 16508  011FD6  D781               	goto	l13033
 16509  011FD8  0A01               	xorlw	1	; case 1
 16510  011FDA  B4D8               	btfsc	status,2,c
 16511  011FDC  D78F               	goto	l13035
 16512  011FDE  0A03               	xorlw	3	; case 2
 16513  011FE0  B4D8               	btfsc	status,2,c
 16514  011FE2  D7B0               	goto	l13039
 16515  011FE4  0A01               	xorlw	1	; case 3
 16516  011FE6  B4D8               	btfsc	status,2,c
 16517  011FE8  D7D1               	goto	l13043
 16518  011FEA                     l13051:
 16519                           
 16520                           ; BSR set to: 0
 16521                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 16522  011FEA  0E08               	movlw	8
 16523  011FEC  0100               	movlb	0	; () banked
 16524  011FEE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16525  011FF0  0100               	movlb	0	; () banked
 16526  011FF2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16527  011FF4  0E00               	movlw	0
 16528  011FF6  0100               	movlb	0	; () banked
 16529  011FF8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16530  011FFA  0100               	movlb	0	; () banked
 16531  011FFC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16532  011FFE  0E00               	movlw	0
 16533  012000  0100               	movlb	0	; () banked
 16534  012002  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16535  012004  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16536  012008  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16537                           
 16538                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 16539  01200C  0E08               	movlw	8
 16540  01200E  0100               	movlb	0	; () banked
 16541  012010  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16542  012012  0100               	movlb	0	; () banked
 16543  012014  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16544  012016  0E00               	movlw	0
 16545  012018  0100               	movlb	0	; () banked
 16546  01201A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16547  01201C  0100               	movlb	0	; () banked
 16548  01201E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16549  012020  0E01               	movlw	1
 16550  012022  0100               	movlb	0	; () banked
 16551  012024  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16552  012026  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16553  01202A  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16554                           
 16555                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 16556  01202E  0E08               	movlw	8
 16557  012030  0100               	movlb	0	; () banked
 16558  012032  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16559  012034  0100               	movlb	0	; () banked
 16560  012036  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16561  012038  0E00               	movlw	0
 16562  01203A  0100               	movlb	0	; () banked
 16563  01203C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16564  01203E  0100               	movlb	0	; () banked
 16565  012040  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16566  012042  0E02               	movlw	2
 16567  012044  0100               	movlb	0	; () banked
 16568  012046  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16569  012048  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16570  01204C  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16571                           
 16572                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 16573  012050  0E08               	movlw	8
 16574  012052  0100               	movlb	0	; () banked
 16575  012054  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16576  012056  0100               	movlb	0	; () banked
 16577  012058  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16578  01205A  0E00               	movlw	0
 16579  01205C  0100               	movlb	0	; () banked
 16580  01205E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16581  012060  0100               	movlb	0	; () banked
 16582  012062  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16583  012064  0E03               	movlw	3
 16584  012066  0100               	movlb	0	; () banked
 16585  012068  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16586  01206A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16587  01206E  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16588                           
 16589                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 16590  012072  0E08               	movlw	8
 16591  012074  0100               	movlb	0	; () banked
 16592  012076  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16593  012078  0100               	movlb	0	; () banked
 16594  01207A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16595  01207C  0E00               	movlw	0
 16596  01207E  0100               	movlb	0	; () banked
 16597  012080  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16598  012082  0100               	movlb	0	; () banked
 16599  012084  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16600  012086  0E04               	movlw	4
 16601  012088  0100               	movlb	0	; () banked
 16602  01208A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16603  01208C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16604  012090  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16605                           
 16606                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 16607  012094  0E08               	movlw	8
 16608  012096  0100               	movlb	0	; () banked
 16609  012098  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16610  01209A  0100               	movlb	0	; () banked
 16611  01209C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16612  01209E  0E00               	movlw	0
 16613  0120A0  0100               	movlb	0	; () banked
 16614  0120A2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16615  0120A4  0100               	movlb	0	; () banked
 16616  0120A6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16617  0120A8  0E05               	movlw	5
 16618  0120AA  0100               	movlb	0	; () banked
 16619  0120AC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16620  0120AE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16621  0120B2  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16622                           
 16623                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 16624  0120B6  0E08               	movlw	8
 16625  0120B8  0100               	movlb	0	; () banked
 16626  0120BA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16627  0120BC  0100               	movlb	0	; () banked
 16628  0120BE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16629  0120C0  0E00               	movlw	0
 16630  0120C2  0100               	movlb	0	; () banked
 16631  0120C4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16632  0120C6  0100               	movlb	0	; () banked
 16633  0120C8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16634  0120CA  0E06               	movlw	6
 16635  0120CC  0100               	movlb	0	; () banked
 16636  0120CE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16637  0120D0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16638  0120D4  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16639                           
 16640                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 16641  0120D8  0E08               	movlw	8
 16642  0120DA  0100               	movlb	0	; () banked
 16643  0120DC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16644  0120DE  0100               	movlb	0	; () banked
 16645  0120E0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16646  0120E2  0E00               	movlw	0
 16647  0120E4  0100               	movlb	0	; () banked
 16648  0120E6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16649  0120E8  0100               	movlb	0	; () banked
 16650  0120EA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16651  0120EC  0E07               	movlw	7
 16652  0120EE  0100               	movlb	0	; () banked
 16653  0120F0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16654  0120F2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16655  0120F6  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 16656  0120FA  0012               	return	
 16657  0120FC                     __end_of_Port_SetType:
 16658                           	opt stack 0
 16659                           tosu	equ	0xFFF
 16660                           tosh	equ	0xFFE
 16661                           tosl	equ	0xFFD
 16662                           pclath	equ	0xFFA
 16663                           tblptru	equ	0xFF8
 16664                           tblptrh	equ	0xFF7
 16665                           tblptrl	equ	0xFF6
 16666                           tablat	equ	0xFF5
 16667                           prodh	equ	0xFF4
 16668                           prodl	equ	0xFF3
 16669                           postinc0	equ	0xFEE
 16670                           wreg	equ	0xFE8
 16671                           indf1	equ	0xFE7
 16672                           postdec1	equ	0xFE5
 16673                           fsr1h	equ	0xFE2
 16674                           fsr1l	equ	0xFE1
 16675                           indf2	equ	0xFDF
 16676                           postinc2	equ	0xFDE
 16677                           postdec2	equ	0xFDD
 16678                           plusw2	equ	0xFDB
 16679                           fsr2h	equ	0xFDA
 16680                           fsr2l	equ	0xFD9
 16681                           status	equ	0xFD8
 16682                           
 16683 ;; *************** function _Port_CheckPortType *****************
 16684 ;; Defined at:
 16685 ;;		line 138 in file "Library/Port.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16688 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16689 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16690 ;;  pDrive          1   56[BANK0 ] enum E6469
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;  Output          1   57[BANK0 ] enum E6475
 16693 ;; Return value:  Size  Location     Type
 16694 ;;                  1    wreg      enum E6475
 16695 ;; Registers used:
 16696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16702 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;Total ram usage:        4 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:   13
 16709 ;; This function calls:
 16710 ;;		_Port_CheckQuadType
 16711 ;; This function is called by:
 16712 ;;		_Port_SetType
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text69
 16717  01608E                     __ptext69:
 16718                           	opt stack 0
 16719  01608E                     _Port_CheckPortType:
 16720                           	opt stack 14
 16721                           
 16722                           ;Port.c: 140: ePinError Output = ePinErrorState;
 16723                           
 16724                           ;incstack = 0
 16725  01608E  0E05               	movlw	5
 16726  016090  0100               	movlb	0	; () banked
 16727  016092  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 16731  016094  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16732  016098  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16733  01609C  0E00               	movlw	0
 16734  01609E  0100               	movlb	0	; () banked
 16735  0160A0  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16736  0160A2  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16737  0160A6  ECDF  F0AE         	call	_Port_CheckQuadType	;wreg free
 16738  0160AA  0100               	movlb	0	; () banked
 16739  0160AC  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 16740  0160AE  0100               	movlb	0	; () banked
 16741  0160B0  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 16742  0160B2  A4D8               	btfss	status,2,c
 16743  0160B4  D00D               	goto	l12181
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 16747  0160B6  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16748  0160BA  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16749  0160BE  0E01               	movlw	1
 16750  0160C0  0100               	movlb	0	; () banked
 16751  0160C2  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16752  0160C4  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16753  0160C8  ECDF  F0AE         	call	_Port_CheckQuadType	;wreg free
 16754  0160CC  0100               	movlb	0	; () banked
 16755  0160CE  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 16756  0160D0                     l12181:
 16757                           
 16758                           ; BSR set to: 0
 16759                           ;Port.c: 146: return Output;
 16760  0160D0  0100               	movlb	0	; () banked
 16761  0160D2  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 16762  0160D4  0012               	return	
 16763  0160D6                     __end_of_Port_CheckPortType:
 16764                           	opt stack 0
 16765                           tosu	equ	0xFFF
 16766                           tosh	equ	0xFFE
 16767                           tosl	equ	0xFFD
 16768                           pclath	equ	0xFFA
 16769                           tblptru	equ	0xFF8
 16770                           tblptrh	equ	0xFF7
 16771                           tblptrl	equ	0xFF6
 16772                           tablat	equ	0xFF5
 16773                           prodh	equ	0xFF4
 16774                           prodl	equ	0xFF3
 16775                           postinc0	equ	0xFEE
 16776                           wreg	equ	0xFE8
 16777                           indf1	equ	0xFE7
 16778                           postdec1	equ	0xFE5
 16779                           fsr1h	equ	0xFE2
 16780                           fsr1l	equ	0xFE1
 16781                           indf2	equ	0xFDF
 16782                           postinc2	equ	0xFDE
 16783                           postdec2	equ	0xFDD
 16784                           plusw2	equ	0xFDB
 16785                           fsr2h	equ	0xFDA
 16786                           fsr2l	equ	0xFD9
 16787                           status	equ	0xFD8
 16788                           
 16789 ;; *************** function _Port_Set *****************
 16790 ;; Defined at:
 16791 ;;		line 570 in file "Library/Port.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16794 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16795 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16796 ;;  pValue          1   17[BANK0 ] unsigned char 
 16797 ;; Auto vars:     Size  Location     Type
 16798 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 16799 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 16800 ;;  Type            1   38[BANK0 ] enum E6795
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  1    wreg      void 
 16803 ;; Registers used:
 16804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;Total ram usage:       24 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:   10
 16817 ;; This function calls:
 16818 ;;		_Byte_SetByte
 16819 ;;		_Word_GetPair
 16820 ;; This function is called by:
 16821 ;;		_Port_Init
 16822 ;;		_Port_Toggle
 16823 ;; This function uses a non-reentrant model
 16824 ;;
 16825                           
 16826                           	psect	text70
 16827  01112C                     __ptext70:
 16828                           	opt stack 0
 16829  01112C                     _Port_Set:
 16830                           	opt stack 17
 16831                           
 16832                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 16833                           
 16834                           ; BSR set to: 0
 16835                           ;incstack = 0
 16836  01112C  0E08               	movlw	8
 16837  01112E  0100               	movlb	0	; () banked
 16838  011130  256F               	addwf	Port_Set@pInput& (0+255),w,b
 16839  011132  0100               	movlb	0	; () banked
 16840  011134  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 16841  011136  0E00               	movlw	0
 16842  011138  0100               	movlb	0	; () banked
 16843  01113A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16844  01113C  0100               	movlb	0	; () banked
 16845  01113E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16846  011140  0E00               	movlw	0
 16847  011142  0100               	movlb	0	; () banked
 16848  011144  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 16849  011146  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 16850  01114A  0100               	movlb	0	; () banked
 16851  01114C  6F86               	movwf	Port_Set@Type& (0+255),b
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 16855  01114E  0100               	movlb	0	; () banked
 16856  011150  5186               	movf	Port_Set@Type& (0+255),w,b
 16857  011152  0100               	movlb	0	; () banked
 16858  011154  6F72               	movwf	??_Port_Set& (0+255),b
 16859  011156  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 16860  011158  0E0E               	movlw	14
 16861  01115A                     u10565:
 16862  01115A  90D8               	bcf	status,0,c
 16863  01115C  0100               	movlb	0	; () banked
 16864  01115E  3772               	rlcf	??_Port_Set& (0+255),f,b
 16865  011160  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16866  011162  2EE8               	decfsz	wreg,f,c
 16867  011164  D7FA               	goto	u10565
 16868  011166  0100               	movlb	0	; () banked
 16869  011168  5186               	movf	Port_Set@Type& (0+255),w,b
 16870  01116A  0100               	movlb	0	; () banked
 16871  01116C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 16872  01116E  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 16873  011170  0E0C               	movlw	12
 16874  011172                     u10575:
 16875  011172  90D8               	bcf	status,0,c
 16876  011174  0100               	movlb	0	; () banked
 16877  011176  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 16878  011178  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 16879  01117A  2EE8               	decfsz	wreg,f,c
 16880  01117C  D7FA               	goto	u10575
 16881  01117E  0100               	movlb	0	; () banked
 16882  011180  5186               	movf	Port_Set@Type& (0+255),w,b
 16883  011182  0100               	movlb	0	; () banked
 16884  011184  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 16885  011186  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 16886  011188  0E0A               	movlw	10
 16887  01118A                     u10585:
 16888  01118A  90D8               	bcf	status,0,c
 16889  01118C  0100               	movlb	0	; () banked
 16890  01118E  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 16891  011190  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 16892  011192  2EE8               	decfsz	wreg,f,c
 16893  011194  D7FA               	goto	u10585
 16894  011196  0100               	movlb	0	; () banked
 16895  011198  5186               	movf	Port_Set@Type& (0+255),w,b
 16896  01119A  0100               	movlb	0	; () banked
 16897  01119C  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 16898  01119E  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 16899  0111A0  0100               	movlb	0	; () banked
 16900  0111A2  5186               	movf	Port_Set@Type& (0+255),w,b
 16901  0111A4  0100               	movlb	0	; () banked
 16902  0111A6  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 16903  0111A8  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 16904  0111AA  0E06               	movlw	6
 16905  0111AC                     u10595:
 16906  0111AC  90D8               	bcf	status,0,c
 16907  0111AE  0100               	movlb	0	; () banked
 16908  0111B0  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 16909  0111B2  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 16910  0111B4  2EE8               	decfsz	wreg,f,c
 16911  0111B6  D7FA               	goto	u10595
 16912  0111B8  0100               	movlb	0	; () banked
 16913  0111BA  5186               	movf	Port_Set@Type& (0+255),w,b
 16914  0111BC  0100               	movlb	0	; () banked
 16915  0111BE  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 16916  0111C0  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 16917  0111C2  0100               	movlb	0	; () banked
 16918  0111C4  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 16919  0111C6  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 16920  0111C8  0EF0               	movlw	240
 16921  0111CA  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 16922  0111CC  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 16923  0111CE  0B0F               	andlw	15
 16924  0111D0  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 16925  0111D2  0EF0               	movlw	240
 16926  0111D4  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 16927  0111D6  0100               	movlb	0	; () banked
 16928  0111D8  5186               	movf	Port_Set@Type& (0+255),w,b
 16929  0111DA  0100               	movlb	0	; () banked
 16930  0111DC  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 16931  0111DE  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 16932  0111E0  0100               	movlb	0	; () banked
 16933  0111E2  90D8               	bcf	status,0,c
 16934  0111E4  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16935  0111E6  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16936  0111E8  0100               	movlb	0	; () banked
 16937  0111EA  90D8               	bcf	status,0,c
 16938  0111EC  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16939  0111EE  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16940  0111F0  0100               	movlb	0	; () banked
 16941  0111F2  5186               	movf	Port_Set@Type& (0+255),w,b
 16942  0111F4  0100               	movlb	0	; () banked
 16943  0111F6  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 16944  0111F8  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 16945  0111FA  0100               	movlb	0	; () banked
 16946  0111FC  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 16947  0111FE  0100               	movlb	0	; () banked
 16948  011200  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16949  011202  0100               	movlb	0	; () banked
 16950  011204  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 16951  011206  0100               	movlb	0	; () banked
 16952  011208  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16953  01120A  0100               	movlb	0	; () banked
 16954  01120C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 16955  01120E  0100               	movlb	0	; () banked
 16956  011210  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16957  011212  0100               	movlb	0	; () banked
 16958  011214  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 16959  011216  0100               	movlb	0	; () banked
 16960  011218  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16961  01121A  0100               	movlb	0	; () banked
 16962  01121C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 16963  01121E  0100               	movlb	0	; () banked
 16964  011220  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16965  011222  0100               	movlb	0	; () banked
 16966  011224  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 16967  011226  0100               	movlb	0	; () banked
 16968  011228  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16969  01122A  0100               	movlb	0	; () banked
 16970  01122C  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 16971  01122E  0100               	movlb	0	; () banked
 16972  011230  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16973  011232  0100               	movlb	0	; () banked
 16974  011234  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 16975  011236  0100               	movlb	0	; () banked
 16976  011238  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16977  01123A  0100               	movlb	0	; () banked
 16978  01123C  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 16979  01123E  0100               	movlb	0	; () banked
 16980  011240  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16981  011242  0100               	movlb	0	; () banked
 16982  011244  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 16983  011246  0100               	movlb	0	; () banked
 16984  011248  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16985  01124A  0100               	movlb	0	; () banked
 16986  01124C  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 16987  01124E  0100               	movlb	0	; () banked
 16988  011250  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16989  011252  0100               	movlb	0	; () banked
 16990  011254  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 16991  011256  0100               	movlb	0	; () banked
 16992  011258  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16993  01125A  0100               	movlb	0	; () banked
 16994  01125C  5172               	movf	??_Port_Set& (0+255),w,b
 16995  01125E  0100               	movlb	0	; () banked
 16996  011260  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 16997  011262  0100               	movlb	0	; () banked
 16998  011264  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 16999  011266  0100               	movlb	0	; () banked
 17000  011268  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17001  01126A  0100               	movlb	0	; () banked
 17002  01126C  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 17003  01126E  0100               	movlb	0	; () banked
 17004  011270  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 17005                           
 17006                           ; BSR set to: 0
 17007                           ;Port.c: 574: UINT16 TypeActual = Type;
 17008  011272  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 17009  011276  0100               	movlb	0	; () banked
 17010  011278  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 17014  01127A  0E08               	movlw	8
 17015  01127C  0100               	movlb	0	; () banked
 17016  01127E  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17017  011280  0100               	movlb	0	; () banked
 17018  011282  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17019  011284  0E00               	movlw	0
 17020  011286  0100               	movlb	0	; () banked
 17021  011288  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17022  01128A  0100               	movlb	0	; () banked
 17023  01128C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17024  01128E  0E01               	movlw	1
 17025  011290  0100               	movlb	0	; () banked
 17026  011292  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17027  011294  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17028  011298  0100               	movlb	0	; () banked
 17029  01129A  6F72               	movwf	??_Port_Set& (0+255),b
 17030  01129C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17031  01129E  0100               	movlb	0	; () banked
 17032  0112A0  90D8               	bcf	status,0,c
 17033  0112A2  3772               	rlcf	??_Port_Set& (0+255),f,b
 17034  0112A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17035  0112A6  0100               	movlb	0	; () banked
 17036  0112A8  90D8               	bcf	status,0,c
 17037  0112AA  3772               	rlcf	??_Port_Set& (0+255),f,b
 17038  0112AC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17039  0112AE  0100               	movlb	0	; () banked
 17040  0112B0  5172               	movf	??_Port_Set& (0+255),w,b
 17041  0112B2  0100               	movlb	0	; () banked
 17042  0112B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17043  0112B6  0100               	movlb	0	; () banked
 17044  0112B8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17045  0112BA  0100               	movlb	0	; () banked
 17046  0112BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17047                           
 17048                           ; BSR set to: 0
 17049                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 17050  0112BE  0E08               	movlw	8
 17051  0112C0  0100               	movlb	0	; () banked
 17052  0112C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17053  0112C4  0100               	movlb	0	; () banked
 17054  0112C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17055  0112C8  0E00               	movlw	0
 17056  0112CA  0100               	movlb	0	; () banked
 17057  0112CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17058  0112CE  0100               	movlb	0	; () banked
 17059  0112D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17060  0112D2  0E02               	movlw	2
 17061  0112D4  0100               	movlb	0	; () banked
 17062  0112D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17063  0112D8  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17064  0112DC  0100               	movlb	0	; () banked
 17065  0112DE  6F72               	movwf	??_Port_Set& (0+255),b
 17066  0112E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17067  0112E2  0100               	movlb	0	; () banked
 17068  0112E4  3B72               	swapf	??_Port_Set& (0+255),f,b
 17069  0112E6  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 17070  0112E8  0EF0               	movlw	240
 17071  0112EA  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 17072  0112EC  5172               	movf	??_Port_Set& (0+255),w,b
 17073  0112EE  0B0F               	andlw	15
 17074  0112F0  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 17075  0112F2  0EF0               	movlw	240
 17076  0112F4  1772               	andwf	??_Port_Set& (0+255),f,b
 17077  0112F6  0100               	movlb	0	; () banked
 17078  0112F8  5172               	movf	??_Port_Set& (0+255),w,b
 17079  0112FA  0100               	movlb	0	; () banked
 17080  0112FC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17081  0112FE  0100               	movlb	0	; () banked
 17082  011300  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17083  011302  0100               	movlb	0	; () banked
 17084  011304  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17085                           
 17086                           ; BSR set to: 0
 17087                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 17088  011306  0E08               	movlw	8
 17089  011308  0100               	movlb	0	; () banked
 17090  01130A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17091  01130C  0100               	movlb	0	; () banked
 17092  01130E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17093  011310  0E00               	movlw	0
 17094  011312  0100               	movlb	0	; () banked
 17095  011314  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17096  011316  0100               	movlb	0	; () banked
 17097  011318  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17098  01131A  0E03               	movlw	3
 17099  01131C  0100               	movlb	0	; () banked
 17100  01131E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17101  011320  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17102  011324  0100               	movlb	0	; () banked
 17103  011326  6F72               	movwf	??_Port_Set& (0+255),b
 17104  011328  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17105  01132A  0E06               	movlw	6
 17106  01132C                     u10605:
 17107  01132C  90D8               	bcf	status,0,c
 17108  01132E  0100               	movlb	0	; () banked
 17109  011330  3772               	rlcf	??_Port_Set& (0+255),f,b
 17110  011332  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17111  011334  2EE8               	decfsz	wreg,f,c
 17112  011336  D7FA               	goto	u10605
 17113  011338  0100               	movlb	0	; () banked
 17114  01133A  5172               	movf	??_Port_Set& (0+255),w,b
 17115  01133C  0100               	movlb	0	; () banked
 17116  01133E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17117  011340  0100               	movlb	0	; () banked
 17118  011342  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17119  011344  0100               	movlb	0	; () banked
 17120  011346  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17121                           
 17122                           ; BSR set to: 0
 17123                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 17124  011348  0E08               	movlw	8
 17125  01134A  0100               	movlb	0	; () banked
 17126  01134C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17127  01134E  0100               	movlb	0	; () banked
 17128  011350  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17129  011352  0E00               	movlw	0
 17130  011354  0100               	movlb	0	; () banked
 17131  011356  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17132  011358  0100               	movlb	0	; () banked
 17133  01135A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17134  01135C  0E04               	movlw	4
 17135  01135E  0100               	movlb	0	; () banked
 17136  011360  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17137  011362  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17138  011366  0100               	movlb	0	; () banked
 17139  011368  6F72               	movwf	??_Port_Set& (0+255),b
 17140  01136A  0100               	movlb	0	; () banked
 17141  01136C  5172               	movf	??_Port_Set& (0+255),w,b
 17142  01136E  0100               	movlb	0	; () banked
 17143  011370  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17144  011372  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17145  011374  0100               	movlb	0	; () banked
 17146  011376  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17147  011378  0100               	movlb	0	; () banked
 17148  01137A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17149  01137C  0100               	movlb	0	; () banked
 17150  01137E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17151  011380  0100               	movlb	0	; () banked
 17152  011382  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17153                           
 17154                           ; BSR set to: 0
 17155                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 17156  011384  0E08               	movlw	8
 17157  011386  0100               	movlb	0	; () banked
 17158  011388  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17159  01138A  0100               	movlb	0	; () banked
 17160  01138C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17161  01138E  0E00               	movlw	0
 17162  011390  0100               	movlb	0	; () banked
 17163  011392  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17164  011394  0100               	movlb	0	; () banked
 17165  011396  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17166  011398  0E05               	movlw	5
 17167  01139A  0100               	movlb	0	; () banked
 17168  01139C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17169  01139E  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17170  0113A2  0100               	movlb	0	; () banked
 17171  0113A4  6F72               	movwf	??_Port_Set& (0+255),b
 17172  0113A6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17173  0113A8  0E0A               	movlw	10
 17174  0113AA                     u10615:
 17175  0113AA  90D8               	bcf	status,0,c
 17176  0113AC  0100               	movlb	0	; () banked
 17177  0113AE  3772               	rlcf	??_Port_Set& (0+255),f,b
 17178  0113B0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17179  0113B2  2EE8               	decfsz	wreg,f,c
 17180  0113B4  D7FA               	goto	u10615
 17181  0113B6  0100               	movlb	0	; () banked
 17182  0113B8  5172               	movf	??_Port_Set& (0+255),w,b
 17183  0113BA  0100               	movlb	0	; () banked
 17184  0113BC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17185  0113BE  0100               	movlb	0	; () banked
 17186  0113C0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17187  0113C2  0100               	movlb	0	; () banked
 17188  0113C4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 17192  0113C6  0E08               	movlw	8
 17193  0113C8  0100               	movlb	0	; () banked
 17194  0113CA  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17195  0113CC  0100               	movlb	0	; () banked
 17196  0113CE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17197  0113D0  0E00               	movlw	0
 17198  0113D2  0100               	movlb	0	; () banked
 17199  0113D4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17200  0113D6  0100               	movlb	0	; () banked
 17201  0113D8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17202  0113DA  0E06               	movlw	6
 17203  0113DC  0100               	movlb	0	; () banked
 17204  0113DE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17205  0113E0  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17206  0113E4  0100               	movlb	0	; () banked
 17207  0113E6  6F72               	movwf	??_Port_Set& (0+255),b
 17208  0113E8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17209  0113EA  0E0C               	movlw	12
 17210  0113EC                     u10625:
 17211  0113EC  90D8               	bcf	status,0,c
 17212  0113EE  0100               	movlb	0	; () banked
 17213  0113F0  3772               	rlcf	??_Port_Set& (0+255),f,b
 17214  0113F2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17215  0113F4  2EE8               	decfsz	wreg,f,c
 17216  0113F6  D7FA               	goto	u10625
 17217  0113F8  0100               	movlb	0	; () banked
 17218  0113FA  5172               	movf	??_Port_Set& (0+255),w,b
 17219  0113FC  0100               	movlb	0	; () banked
 17220  0113FE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17221  011400  0100               	movlb	0	; () banked
 17222  011402  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17223  011404  0100               	movlb	0	; () banked
 17224  011406  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17225                           
 17226                           ; BSR set to: 0
 17227                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 17228  011408  0E08               	movlw	8
 17229  01140A  0100               	movlb	0	; () banked
 17230  01140C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17231  01140E  0100               	movlb	0	; () banked
 17232  011410  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17233  011412  0E00               	movlw	0
 17234  011414  0100               	movlb	0	; () banked
 17235  011416  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17236  011418  0100               	movlb	0	; () banked
 17237  01141A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17238  01141C  0E07               	movlw	7
 17239  01141E  0100               	movlb	0	; () banked
 17240  011420  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17241  011422  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 17242  011426  0100               	movlb	0	; () banked
 17243  011428  6F72               	movwf	??_Port_Set& (0+255),b
 17244  01142A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17245  01142C  0E0E               	movlw	14
 17246  01142E                     u10635:
 17247  01142E  90D8               	bcf	status,0,c
 17248  011430  0100               	movlb	0	; () banked
 17249  011432  3772               	rlcf	??_Port_Set& (0+255),f,b
 17250  011434  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17251  011436  2EE8               	decfsz	wreg,f,c
 17252  011438  D7FA               	goto	u10635
 17253  01143A  0100               	movlb	0	; () banked
 17254  01143C  5172               	movf	??_Port_Set& (0+255),w,b
 17255  01143E  0100               	movlb	0	; () banked
 17256  011440  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17257  011442  0100               	movlb	0	; () banked
 17258  011444  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17259  011446  0100               	movlb	0	; () banked
 17260  011448  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17261                           
 17262                           ;Port.c: 584: if (TypeRequired == TypeActual)
 17263  01144A  0100               	movlb	0	; () banked
 17264  01144C  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 17265  01144E  0100               	movlb	0	; () banked
 17266  011450  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 17267  011452  E148               	bnz	l528
 17268  011454  0100               	movlb	0	; () banked
 17269  011456  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 17270  011458  0100               	movlb	0	; () banked
 17271  01145A  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 17272  01145C  A4D8               	btfss	status,2,c
 17273  01145E  0012               	return	
 17274  011460  D032               	goto	l13087
 17275  011462                     l13077:
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 17279  011462  0100               	movlb	0	; () banked
 17280  011464  EE20 F002          	lfsr	2,2
 17281  011468  516F               	movf	Port_Set@pInput& (0+255),w,b
 17282  01146A  26D9               	addwf	fsr2l,f,c
 17283  01146C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17284  01146E  22DA               	addwfc	fsr2h,f,c
 17285  011470  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17286  011474  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17287  011478  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17288  01147C  ECAD  F0B4         	call	_Byte_SetByte	;wreg free
 17289                           
 17290                           ;Port.c: 594: break;
 17291  011480  0012               	return	
 17292  011482                     l13079:
 17293                           
 17294                           ;Port.c: 597: pValue = ~pValue;
 17295  011482  0100               	movlb	0	; () banked
 17296  011484  1F71               	comf	Port_Set@pValue& (0+255),f,b
 17297                           
 17298                           ; BSR set to: 0
 17299                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 17300  011486  0100               	movlb	0	; () banked
 17301  011488  EE20 F002          	lfsr	2,2
 17302  01148C  516F               	movf	Port_Set@pInput& (0+255),w,b
 17303  01148E  26D9               	addwf	fsr2l,f,c
 17304  011490  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17305  011492  22DA               	addwfc	fsr2h,f,c
 17306  011494  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17307  011498  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17308  01149C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17309  0114A0  ECAD  F0B4         	call	_Byte_SetByte	;wreg free
 17310                           
 17311                           ;Port.c: 599: break;
 17312  0114A4  0012               	return	
 17313  0114A6                     l13083:
 17314                           
 17315                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 17316  0114A6  0100               	movlb	0	; () banked
 17317  0114A8  EE20 F004          	lfsr	2,4
 17318  0114AC  516F               	movf	Port_Set@pInput& (0+255),w,b
 17319  0114AE  26D9               	addwf	fsr2l,f,c
 17320  0114B0  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17321  0114B2  22DA               	addwfc	fsr2h,f,c
 17322  0114B4  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17323  0114B8  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17324  0114BC  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17325  0114C0  ECAD  F0B4         	call	_Byte_SetByte	;wreg free
 17326                           
 17327                           ;Port.c: 606: }
 17328                           
 17329                           ;Port.c: 605: break;
 17330                           
 17331                           ;Port.c: 604: default:
 17332                           
 17333                           ;Port.c: 603: break;
 17334  0114C4  0012               	return	
 17335  0114C6                     l13087:
 17336  0114C6  0100               	movlb	0	; () banked
 17337  0114C8  5186               	movf	Port_Set@Type& (0+255),w,b
 17338                           
 17339                           ; Switch size 1, requested type "space"
 17340                           ; Number of cases is 4, Range of values is 0 to 3
 17341                           ; switch strategies available:
 17342                           ; Name         Instructions Cycles
 17343                           ; simple_byte           13     7 (average)
 17344                           ;	Chosen strategy is simple_byte
 17345  0114CA  0A00               	xorlw	0	; case 0
 17346  0114CC  B4D8               	btfsc	status,2,c
 17347  0114CE  0012               	return	
 17348  0114D0  0A01               	xorlw	1	; case 1
 17349  0114D2  B4D8               	btfsc	status,2,c
 17350  0114D4  D7C6               	goto	l13077
 17351  0114D6  0A03               	xorlw	3	; case 2
 17352  0114D8  B4D8               	btfsc	status,2,c
 17353  0114DA  D7D3               	goto	l13079
 17354  0114DC  0A01               	xorlw	1	; case 3
 17355  0114DE  A4D8               	btfss	status,2,c
 17356                           
 17357                           ; BSR set to: 0
 17358                           
 17359                           ; BSR set to: 0
 17360                           ;Port.c: 607: }
 17361  0114E0  0012               	return	
 17362  0114E2  D7E1               	goto	l13083
 17363  0114E4                     l528:
 17364  0114E4  0012               	return		;funcret
 17365  0114E6                     __end_of_Port_Set:
 17366                           	opt stack 0
 17367                           tosu	equ	0xFFF
 17368                           tosh	equ	0xFFE
 17369                           tosl	equ	0xFFD
 17370                           pclath	equ	0xFFA
 17371                           tblptru	equ	0xFF8
 17372                           tblptrh	equ	0xFF7
 17373                           tblptrl	equ	0xFF6
 17374                           tablat	equ	0xFF5
 17375                           prodh	equ	0xFF4
 17376                           prodl	equ	0xFF3
 17377                           postinc0	equ	0xFEE
 17378                           wreg	equ	0xFE8
 17379                           indf1	equ	0xFE7
 17380                           postdec1	equ	0xFE5
 17381                           fsr1h	equ	0xFE2
 17382                           fsr1l	equ	0xFE1
 17383                           indf2	equ	0xFDF
 17384                           postinc2	equ	0xFDE
 17385                           postdec2	equ	0xFDD
 17386                           plusw2	equ	0xFDB
 17387                           fsr2h	equ	0xFDA
 17388                           fsr2l	equ	0xFD9
 17389                           status	equ	0xFD8
 17390                           
 17391 ;; *************** function _Byte_SetByte *****************
 17392 ;; Defined at:
 17393 ;;		line 110 in file "Library/Types.c"
 17394 ;; Parameters:    Size  Location     Type
 17395 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17396 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 17397 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17398 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17399 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17400 ;;		 -> NULL(0), 
 17401 ;;  pValue          1    2[BANK0 ] unsigned char 
 17402 ;; Auto vars:     Size  Location     Type
 17403 ;;		None
 17404 ;; Return value:  Size  Location     Type
 17405 ;;                  1    wreg      void 
 17406 ;; Registers used:
 17407 ;;		fsr2l, fsr2h
 17408 ;; Tracked objects:
 17409 ;;		On entry : 0/0
 17410 ;;		On exit  : 0/0
 17411 ;;		Unchanged: 0/0
 17412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17413 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17416 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17417 ;;Total ram usage:        3 bytes
 17418 ;; Hardware stack levels used:    1
 17419 ;; Hardware stack levels required when called:    7
 17420 ;; This function calls:
 17421 ;;		Nothing
 17422 ;; This function is called by:
 17423 ;;		_Port_Set
 17424 ;;		_I2C_Init
 17425 ;; This function uses a non-reentrant model
 17426 ;;
 17427                           
 17428                           	psect	text71
 17429  01695A                     __ptext71:
 17430                           	opt stack 0
 17431  01695A                     _Byte_SetByte:
 17432                           	opt stack 19
 17433                           
 17434                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 17435                           
 17436                           ;incstack = 0
 17437  01695A  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 17438  01695E  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 17439  016962  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 17440  016966  0012               	return		;funcret
 17441  016968                     __end_of_Byte_SetByte:
 17442                           	opt stack 0
 17443                           tosu	equ	0xFFF
 17444                           tosh	equ	0xFFE
 17445                           tosl	equ	0xFFD
 17446                           pclath	equ	0xFFA
 17447                           tblptru	equ	0xFF8
 17448                           tblptrh	equ	0xFF7
 17449                           tblptrl	equ	0xFF6
 17450                           tablat	equ	0xFF5
 17451                           prodh	equ	0xFF4
 17452                           prodl	equ	0xFF3
 17453                           postinc0	equ	0xFEE
 17454                           wreg	equ	0xFE8
 17455                           indf1	equ	0xFE7
 17456                           postdec1	equ	0xFE5
 17457                           fsr1h	equ	0xFE2
 17458                           fsr1l	equ	0xFE1
 17459                           indf2	equ	0xFDF
 17460                           postinc2	equ	0xFDE
 17461                           postdec2	equ	0xFDD
 17462                           plusw2	equ	0xFDB
 17463                           fsr2h	equ	0xFDA
 17464                           fsr2l	equ	0xFD9
 17465                           status	equ	0xFD8
 17466                           
 17467 ;; *************** function _GetPortTRIS *****************
 17468 ;; Defined at:
 17469 ;;		line 67 in file "Library/Port.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;  pInput          1    wreg     enum E6786
 17472 ;; Auto vars:     Size  Location     Type
 17473 ;;  pInput          1    2[BANK0 ] enum E6786
 17474 ;; Return value:  Size  Location     Type
 17475 ;;                  2    0[BANK0 ] PTR struct Byte
 17476 ;; Registers used:
 17477 ;;		wreg, status,2, status,0
 17478 ;; Tracked objects:
 17479 ;;		On entry : 0/0
 17480 ;;		On exit  : 0/0
 17481 ;;		Unchanged: 0/0
 17482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17483 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17487 ;;Total ram usage:        3 bytes
 17488 ;; Hardware stack levels used:    1
 17489 ;; Hardware stack levels required when called:    7
 17490 ;; This function calls:
 17491 ;;		Nothing
 17492 ;; This function is called by:
 17493 ;;		_Port_Init
 17494 ;; This function uses a non-reentrant model
 17495 ;;
 17496                           
 17497                           	psect	text72
 17498  014DCA                     __ptext72:
 17499                           	opt stack 0
 17500  014DCA                     _GetPortTRIS:
 17501                           	opt stack 20
 17502                           
 17503                           ;incstack = 0
 17504                           ;GetPortTRIS@pInput stored from wreg
 17505  014DCA  0100               	movlb	0	; () banked
 17506  014DCC  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 17507                           
 17508                           ;Port.c: 69: switch (pInput)
 17509  014DCE  D038               	goto	l13029
 17510  014DD0                     l12995:
 17511                           
 17512                           ;Port.c: 72: return (BytePtr)&TRISA;
 17513  014DD0  0E92               	movlw	146
 17514  014DD2  0100               	movlb	0	; () banked
 17515  014DD4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17516  014DD6  0E0F               	movlw	15
 17517  014DD8  0100               	movlb	0	; () banked
 17518  014DDA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17519                           
 17520                           ; BSR set to: 0
 17521  014DDC  0012               	return	
 17522  014DDE                     l12999:
 17523                           
 17524                           ; BSR set to: 0
 17525                           ;Port.c: 74: return (BytePtr)&TRISB;
 17526  014DDE  0E93               	movlw	147
 17527  014DE0  0100               	movlb	0	; () banked
 17528  014DE2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17529  014DE4  0E0F               	movlw	15
 17530  014DE6  0100               	movlb	0	; () banked
 17531  014DE8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17532                           
 17533                           ; BSR set to: 0
 17534  014DEA  0012               	return	
 17535  014DEC                     l13003:
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;Port.c: 76: return (BytePtr)&TRISC;
 17539  014DEC  0E94               	movlw	148
 17540  014DEE  0100               	movlb	0	; () banked
 17541  014DF0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17542  014DF2  0E0F               	movlw	15
 17543  014DF4  0100               	movlb	0	; () banked
 17544  014DF6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17545                           
 17546                           ; BSR set to: 0
 17547  014DF8  0012               	return	
 17548  014DFA                     l13007:
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;Port.c: 78: return (BytePtr)&TRISD;
 17552  014DFA  0E95               	movlw	149
 17553  014DFC  0100               	movlb	0	; () banked
 17554  014DFE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17555  014E00  0E0F               	movlw	15
 17556  014E02  0100               	movlb	0	; () banked
 17557  014E04  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17558                           
 17559                           ; BSR set to: 0
 17560  014E06  0012               	return	
 17561  014E08                     l13011:
 17562                           
 17563                           ; BSR set to: 0
 17564                           ;Port.c: 80: return (BytePtr)&TRISE;
 17565  014E08  0E96               	movlw	150
 17566  014E0A  0100               	movlb	0	; () banked
 17567  014E0C  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17568  014E0E  0E0F               	movlw	15
 17569  014E10  0100               	movlb	0	; () banked
 17570  014E12  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17571                           
 17572                           ; BSR set to: 0
 17573  014E14  0012               	return	
 17574  014E16                     l13015:
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;Port.c: 82: return (BytePtr)&TRISF;
 17578  014E16  0E97               	movlw	151
 17579  014E18  0100               	movlb	0	; () banked
 17580  014E1A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17581  014E1C  0E0F               	movlw	15
 17582  014E1E  0100               	movlb	0	; () banked
 17583  014E20  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17584                           
 17585                           ; BSR set to: 0
 17586  014E22  0012               	return	
 17587  014E24                     l13019:
 17588                           
 17589                           ; BSR set to: 0
 17590                           ;Port.c: 84: return (BytePtr)&TRISG;
 17591  014E24  0E98               	movlw	152
 17592  014E26  0100               	movlb	0	; () banked
 17593  014E28  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17594  014E2A  0E0F               	movlw	15
 17595  014E2C  0100               	movlb	0	; () banked
 17596  014E2E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17597                           
 17598                           ; BSR set to: 0
 17599  014E30  0012               	return	
 17600  014E32                     l13023:
 17601                           
 17602                           ; BSR set to: 0
 17603                           ;Port.c: 86: return (void*)0;
 17604  014E32  0E00               	movlw	0
 17605  014E34  0100               	movlb	0	; () banked
 17606  014E36  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17607  014E38  0E00               	movlw	0
 17608  014E3A  0100               	movlb	0	; () banked
 17609  014E3C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;Port.c: 87: }
 17613                           
 17614                           ; BSR set to: 0
 17615  014E3E  0012               	return	
 17616  014E40                     l13029:
 17617  014E40  0100               	movlb	0	; () banked
 17618  014E42  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 17619                           
 17620                           ; Switch size 1, requested type "space"
 17621                           ; Number of cases is 7, Range of values is 0 to 6
 17622                           ; switch strategies available:
 17623                           ; Name         Instructions Cycles
 17624                           ; simple_byte           22    12 (average)
 17625                           ;	Chosen strategy is simple_byte
 17626  014E44  0A00               	xorlw	0	; case 0
 17627  014E46  B4D8               	btfsc	status,2,c
 17628  014E48  D7C3               	goto	l12995
 17629  014E4A  0A01               	xorlw	1	; case 1
 17630  014E4C  B4D8               	btfsc	status,2,c
 17631  014E4E  D7C7               	goto	l12999
 17632  014E50  0A03               	xorlw	3	; case 2
 17633  014E52  B4D8               	btfsc	status,2,c
 17634  014E54  D7CB               	goto	l13003
 17635  014E56  0A01               	xorlw	1	; case 3
 17636  014E58  B4D8               	btfsc	status,2,c
 17637  014E5A  D7CF               	goto	l13007
 17638  014E5C  0A07               	xorlw	7	; case 4
 17639  014E5E  B4D8               	btfsc	status,2,c
 17640  014E60  D7D3               	goto	l13011
 17641  014E62  0A01               	xorlw	1	; case 5
 17642  014E64  B4D8               	btfsc	status,2,c
 17643  014E66  D7D7               	goto	l13015
 17644  014E68  0A03               	xorlw	3	; case 6
 17645  014E6A  B4D8               	btfsc	status,2,c
 17646  014E6C  D7DB               	goto	l13019
 17647  014E6E  D7E1               	goto	l13023
 17648  014E70                     __end_of_GetPortTRIS:
 17649                           	opt stack 0
 17650                           tosu	equ	0xFFF
 17651                           tosh	equ	0xFFE
 17652                           tosl	equ	0xFFD
 17653                           pclath	equ	0xFFA
 17654                           tblptru	equ	0xFF8
 17655                           tblptrh	equ	0xFF7
 17656                           tblptrl	equ	0xFF6
 17657                           tablat	equ	0xFF5
 17658                           prodh	equ	0xFF4
 17659                           prodl	equ	0xFF3
 17660                           postinc0	equ	0xFEE
 17661                           wreg	equ	0xFE8
 17662                           indf1	equ	0xFE7
 17663                           postdec1	equ	0xFE5
 17664                           fsr1h	equ	0xFE2
 17665                           fsr1l	equ	0xFE1
 17666                           indf2	equ	0xFDF
 17667                           postinc2	equ	0xFDE
 17668                           postdec2	equ	0xFDD
 17669                           plusw2	equ	0xFDB
 17670                           fsr2h	equ	0xFDA
 17671                           fsr2l	equ	0xFD9
 17672                           status	equ	0xFD8
 17673                           
 17674 ;; *************** function _GetPortProperties *****************
 17675 ;; Defined at:
 17676 ;;		line 21 in file "Library/Port.c"
 17677 ;; Parameters:    Size  Location     Type
 17678 ;;  pInput          1    wreg     enum E6786
 17679 ;; Auto vars:     Size  Location     Type
 17680 ;;  pInput          1    2[BANK0 ] enum E6786
 17681 ;; Return value:  Size  Location     Type
 17682 ;;                  2    0[BANK0 ] PTR struct PortProperty
 17683 ;; Registers used:
 17684 ;;		wreg, status,2, status,0
 17685 ;; Tracked objects:
 17686 ;;		On entry : 0/0
 17687 ;;		On exit  : 0/0
 17688 ;;		Unchanged: 0/0
 17689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17690 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17693 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17694 ;;Total ram usage:        3 bytes
 17695 ;; Hardware stack levels used:    1
 17696 ;; Hardware stack levels required when called:    7
 17697 ;; This function calls:
 17698 ;;		Nothing
 17699 ;; This function is called by:
 17700 ;;		_Port_Init
 17701 ;; This function uses a non-reentrant model
 17702 ;;
 17703                           
 17704                           	psect	text73
 17705  014E70                     __ptext73:
 17706                           	opt stack 0
 17707  014E70                     _GetPortProperties:
 17708                           	opt stack 20
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;incstack = 0
 17712                           ;GetPortProperties@pInput stored from wreg
 17713  014E70  0100               	movlb	0	; () banked
 17714  014E72  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 17715                           
 17716                           ;Port.c: 23: switch (pInput)
 17717  014E74  D038               	goto	l12953
 17718  014E76                     l12919:
 17719                           
 17720                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 17721  014E76  0E7B               	movlw	low _PortA_Property
 17722  014E78  0100               	movlb	0	; () banked
 17723  014E7A  6F60               	movwf	?_GetPortProperties& (0+255),b
 17724  014E7C  0EFF               	movlw	high _PortA_Property
 17725  014E7E  0100               	movlb	0	; () banked
 17726  014E80  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17727                           
 17728                           ; BSR set to: 0
 17729  014E82  0012               	return	
 17730  014E84                     l12923:
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 17734  014E84  0E79               	movlw	low _PortB_Property
 17735  014E86  0100               	movlb	0	; () banked
 17736  014E88  6F60               	movwf	?_GetPortProperties& (0+255),b
 17737  014E8A  0EFF               	movlw	high _PortB_Property
 17738  014E8C  0100               	movlb	0	; () banked
 17739  014E8E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17740                           
 17741                           ; BSR set to: 0
 17742  014E90  0012               	return	
 17743  014E92                     l12927:
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 17747  014E92  0E77               	movlw	low _PortC_Property
 17748  014E94  0100               	movlb	0	; () banked
 17749  014E96  6F60               	movwf	?_GetPortProperties& (0+255),b
 17750  014E98  0EFF               	movlw	high _PortC_Property
 17751  014E9A  0100               	movlb	0	; () banked
 17752  014E9C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17753                           
 17754                           ; BSR set to: 0
 17755  014E9E  0012               	return	
 17756  014EA0                     l12931:
 17757                           
 17758                           ; BSR set to: 0
 17759                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 17760  014EA0  0E75               	movlw	low _PortD_Property
 17761  014EA2  0100               	movlb	0	; () banked
 17762  014EA4  6F60               	movwf	?_GetPortProperties& (0+255),b
 17763  014EA6  0EFF               	movlw	high _PortD_Property
 17764  014EA8  0100               	movlb	0	; () banked
 17765  014EAA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17766                           
 17767                           ; BSR set to: 0
 17768  014EAC  0012               	return	
 17769  014EAE                     l12935:
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 17773  014EAE  0E73               	movlw	low _PortE_Property
 17774  014EB0  0100               	movlb	0	; () banked
 17775  014EB2  6F60               	movwf	?_GetPortProperties& (0+255),b
 17776  014EB4  0EFF               	movlw	high _PortE_Property
 17777  014EB6  0100               	movlb	0	; () banked
 17778  014EB8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17779                           
 17780                           ; BSR set to: 0
 17781  014EBA  0012               	return	
 17782  014EBC                     l12939:
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 17786  014EBC  0E71               	movlw	low _PortF_Property
 17787  014EBE  0100               	movlb	0	; () banked
 17788  014EC0  6F60               	movwf	?_GetPortProperties& (0+255),b
 17789  014EC2  0EFF               	movlw	high _PortF_Property
 17790  014EC4  0100               	movlb	0	; () banked
 17791  014EC6  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17792                           
 17793                           ; BSR set to: 0
 17794  014EC8  0012               	return	
 17795  014ECA                     l12943:
 17796                           
 17797                           ; BSR set to: 0
 17798                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 17799  014ECA  0E6F               	movlw	low _PortG_Property
 17800  014ECC  0100               	movlb	0	; () banked
 17801  014ECE  6F60               	movwf	?_GetPortProperties& (0+255),b
 17802  014ED0  0EFF               	movlw	high _PortG_Property
 17803  014ED2  0100               	movlb	0	; () banked
 17804  014ED4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17805                           
 17806                           ; BSR set to: 0
 17807  014ED6  0012               	return	
 17808  014ED8                     l12947:
 17809                           
 17810                           ; BSR set to: 0
 17811                           ;Port.c: 40: return (void*)0;
 17812  014ED8  0E00               	movlw	0
 17813  014EDA  0100               	movlb	0	; () banked
 17814  014EDC  6F60               	movwf	?_GetPortProperties& (0+255),b
 17815  014EDE  0E00               	movlw	0
 17816  014EE0  0100               	movlb	0	; () banked
 17817  014EE2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 17818                           
 17819                           ; BSR set to: 0
 17820                           ;Port.c: 41: }
 17821                           
 17822                           ; BSR set to: 0
 17823  014EE4  0012               	return	
 17824  014EE6                     l12953:
 17825  014EE6  0100               	movlb	0	; () banked
 17826  014EE8  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 17827                           
 17828                           ; Switch size 1, requested type "space"
 17829                           ; Number of cases is 7, Range of values is 0 to 6
 17830                           ; switch strategies available:
 17831                           ; Name         Instructions Cycles
 17832                           ; simple_byte           22    12 (average)
 17833                           ;	Chosen strategy is simple_byte
 17834  014EEA  0A00               	xorlw	0	; case 0
 17835  014EEC  B4D8               	btfsc	status,2,c
 17836  014EEE  D7C3               	goto	l12919
 17837  014EF0  0A01               	xorlw	1	; case 1
 17838  014EF2  B4D8               	btfsc	status,2,c
 17839  014EF4  D7C7               	goto	l12923
 17840  014EF6  0A03               	xorlw	3	; case 2
 17841  014EF8  B4D8               	btfsc	status,2,c
 17842  014EFA  D7CB               	goto	l12927
 17843  014EFC  0A01               	xorlw	1	; case 3
 17844  014EFE  B4D8               	btfsc	status,2,c
 17845  014F00  D7CF               	goto	l12931
 17846  014F02  0A07               	xorlw	7	; case 4
 17847  014F04  B4D8               	btfsc	status,2,c
 17848  014F06  D7D3               	goto	l12935
 17849  014F08  0A01               	xorlw	1	; case 5
 17850  014F0A  B4D8               	btfsc	status,2,c
 17851  014F0C  D7D7               	goto	l12939
 17852  014F0E  0A03               	xorlw	3	; case 6
 17853  014F10  B4D8               	btfsc	status,2,c
 17854  014F12  D7DB               	goto	l12943
 17855  014F14  D7E1               	goto	l12947
 17856  014F16                     __end_of_GetPortProperties:
 17857                           	opt stack 0
 17858                           tosu	equ	0xFFF
 17859                           tosh	equ	0xFFE
 17860                           tosl	equ	0xFFD
 17861                           pclath	equ	0xFFA
 17862                           tblptru	equ	0xFF8
 17863                           tblptrh	equ	0xFF7
 17864                           tblptrl	equ	0xFF6
 17865                           tablat	equ	0xFF5
 17866                           prodh	equ	0xFF4
 17867                           prodl	equ	0xFF3
 17868                           postinc0	equ	0xFEE
 17869                           wreg	equ	0xFE8
 17870                           indf1	equ	0xFE7
 17871                           postdec1	equ	0xFE5
 17872                           fsr1h	equ	0xFE2
 17873                           fsr1l	equ	0xFE1
 17874                           indf2	equ	0xFDF
 17875                           postinc2	equ	0xFDE
 17876                           postdec2	equ	0xFDD
 17877                           plusw2	equ	0xFDB
 17878                           fsr2h	equ	0xFDA
 17879                           fsr2l	equ	0xFD9
 17880                           status	equ	0xFD8
 17881                           
 17882 ;; *************** function _GetPortPORT *****************
 17883 ;; Defined at:
 17884 ;;		line 44 in file "Library/Port.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;  pInput          1    wreg     enum E6786
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;  pInput          1    2[BANK0 ] enum E6786
 17889 ;; Return value:  Size  Location     Type
 17890 ;;                  2    0[BANK0 ] PTR struct Byte
 17891 ;; Registers used:
 17892 ;;		wreg, status,2, status,0
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17898 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;Total ram usage:        3 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    7
 17905 ;; This function calls:
 17906 ;;		Nothing
 17907 ;; This function is called by:
 17908 ;;		_Port_Init
 17909 ;; This function uses a non-reentrant model
 17910 ;;
 17911                           
 17912                           	psect	text74
 17913  014F16                     __ptext74:
 17914                           	opt stack 0
 17915  014F16                     _GetPortPORT:
 17916                           	opt stack 20
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;incstack = 0
 17920                           ;GetPortPORT@pInput stored from wreg
 17921  014F16  0100               	movlb	0	; () banked
 17922  014F18  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 17923                           
 17924                           ;Port.c: 46: switch (pInput)
 17925  014F1A  D038               	goto	l12991
 17926  014F1C                     l12957:
 17927                           
 17928                           ;Port.c: 49: return (BytePtr)&PORTA;
 17929  014F1C  0E80               	movlw	128
 17930  014F1E  0100               	movlb	0	; () banked
 17931  014F20  6F60               	movwf	?_GetPortPORT& (0+255),b
 17932  014F22  0E0F               	movlw	15
 17933  014F24  0100               	movlb	0	; () banked
 17934  014F26  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 17935                           
 17936                           ; BSR set to: 0
 17937  014F28  0012               	return	
 17938  014F2A                     l12961:
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;Port.c: 51: return (BytePtr)&PORTB;
 17942  014F2A  0E81               	movlw	129
 17943  014F2C  0100               	movlb	0	; () banked
 17944  014F2E  6F60               	movwf	?_GetPortPORT& (0+255),b
 17945  014F30  0E0F               	movlw	15
 17946  014F32  0100               	movlb	0	; () banked
 17947  014F34  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 17948                           
 17949                           ; BSR set to: 0
 17950  014F36  0012               	return	
 17951  014F38                     l12965:
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;Port.c: 53: return (BytePtr)&PORTC;
 17955  014F38  0E82               	movlw	130
 17956  014F3A  0100               	movlb	0	; () banked
 17957  014F3C  6F60               	movwf	?_GetPortPORT& (0+255),b
 17958  014F3E  0E0F               	movlw	15
 17959  014F40  0100               	movlb	0	; () banked
 17960  014F42  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 17961                           
 17962                           ; BSR set to: 0
 17963  014F44  0012               	return	
 17964  014F46                     l12969:
 17965                           
 17966                           ; BSR set to: 0
 17967                           ;Port.c: 55: return (BytePtr)&PORTD;
 17968  014F46  0E83               	movlw	131
 17969  014F48  0100               	movlb	0	; () banked
 17970  014F4A  6F60               	movwf	?_GetPortPORT& (0+255),b
 17971  014F4C  0E0F               	movlw	15
 17972  014F4E  0100               	movlb	0	; () banked
 17973  014F50  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 17974                           
 17975                           ; BSR set to: 0
 17976  014F52  0012               	return	
 17977  014F54                     l12973:
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;Port.c: 57: return (BytePtr)&PORTE;
 17981  014F54  0E84               	movlw	132
 17982  014F56  0100               	movlb	0	; () banked
 17983  014F58  6F60               	movwf	?_GetPortPORT& (0+255),b
 17984  014F5A  0E0F               	movlw	15
 17985  014F5C  0100               	movlb	0	; () banked
 17986  014F5E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 17987                           
 17988                           ; BSR set to: 0
 17989  014F60  0012               	return	
 17990  014F62                     l12977:
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;Port.c: 59: return (BytePtr)&PORTF;
 17994  014F62  0E85               	movlw	133
 17995  014F64  0100               	movlb	0	; () banked
 17996  014F66  6F60               	movwf	?_GetPortPORT& (0+255),b
 17997  014F68  0E0F               	movlw	15
 17998  014F6A  0100               	movlb	0	; () banked
 17999  014F6C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18000                           
 18001                           ; BSR set to: 0
 18002  014F6E  0012               	return	
 18003  014F70                     l12981:
 18004                           
 18005                           ; BSR set to: 0
 18006                           ;Port.c: 61: return (BytePtr)&PORTG;
 18007  014F70  0E86               	movlw	134
 18008  014F72  0100               	movlb	0	; () banked
 18009  014F74  6F60               	movwf	?_GetPortPORT& (0+255),b
 18010  014F76  0E0F               	movlw	15
 18011  014F78  0100               	movlb	0	; () banked
 18012  014F7A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18013                           
 18014                           ; BSR set to: 0
 18015  014F7C  0012               	return	
 18016  014F7E                     l12985:
 18017                           
 18018                           ; BSR set to: 0
 18019                           ;Port.c: 63: return (void*)0;
 18020  014F7E  0E00               	movlw	0
 18021  014F80  0100               	movlb	0	; () banked
 18022  014F82  6F60               	movwf	?_GetPortPORT& (0+255),b
 18023  014F84  0E00               	movlw	0
 18024  014F86  0100               	movlb	0	; () banked
 18025  014F88  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18026                           
 18027                           ; BSR set to: 0
 18028                           ;Port.c: 64: }
 18029                           
 18030                           ; BSR set to: 0
 18031  014F8A  0012               	return	
 18032  014F8C                     l12991:
 18033  014F8C  0100               	movlb	0	; () banked
 18034  014F8E  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 18035                           
 18036                           ; Switch size 1, requested type "space"
 18037                           ; Number of cases is 7, Range of values is 0 to 6
 18038                           ; switch strategies available:
 18039                           ; Name         Instructions Cycles
 18040                           ; simple_byte           22    12 (average)
 18041                           ;	Chosen strategy is simple_byte
 18042  014F90  0A00               	xorlw	0	; case 0
 18043  014F92  B4D8               	btfsc	status,2,c
 18044  014F94  D7C3               	goto	l12957
 18045  014F96  0A01               	xorlw	1	; case 1
 18046  014F98  B4D8               	btfsc	status,2,c
 18047  014F9A  D7C7               	goto	l12961
 18048  014F9C  0A03               	xorlw	3	; case 2
 18049  014F9E  B4D8               	btfsc	status,2,c
 18050  014FA0  D7CB               	goto	l12965
 18051  014FA2  0A01               	xorlw	1	; case 3
 18052  014FA4  B4D8               	btfsc	status,2,c
 18053  014FA6  D7CF               	goto	l12969
 18054  014FA8  0A07               	xorlw	7	; case 4
 18055  014FAA  B4D8               	btfsc	status,2,c
 18056  014FAC  D7D3               	goto	l12973
 18057  014FAE  0A01               	xorlw	1	; case 5
 18058  014FB0  B4D8               	btfsc	status,2,c
 18059  014FB2  D7D7               	goto	l12977
 18060  014FB4  0A03               	xorlw	3	; case 6
 18061  014FB6  B4D8               	btfsc	status,2,c
 18062  014FB8  D7DB               	goto	l12981
 18063  014FBA  D7E1               	goto	l12985
 18064  014FBC                     __end_of_GetPortPORT:
 18065                           	opt stack 0
 18066                           tosu	equ	0xFFF
 18067                           tosh	equ	0xFFE
 18068                           tosl	equ	0xFFD
 18069                           pclath	equ	0xFFA
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           postinc0	equ	0xFEE
 18077                           wreg	equ	0xFE8
 18078                           indf1	equ	0xFE7
 18079                           postdec1	equ	0xFE5
 18080                           fsr1h	equ	0xFE2
 18081                           fsr1l	equ	0xFE1
 18082                           indf2	equ	0xFDF
 18083                           postinc2	equ	0xFDE
 18084                           postdec2	equ	0xFDD
 18085                           plusw2	equ	0xFDB
 18086                           fsr2h	equ	0xFDA
 18087                           fsr2l	equ	0xFD9
 18088                           status	equ	0xFD8
 18089                           
 18090 ;; *************** function _LED_Init *****************
 18091 ;; Defined at:
 18092 ;;		line 15 in file "Library/LED.c"
 18093 ;; Parameters:    Size  Location     Type
 18094 ;;  pLED            1    wreg     enum E6739
 18095 ;; Auto vars:     Size  Location     Type
 18096 ;;  pLED            1   45[BANK0 ] enum E6739
 18097 ;; Return value:  Size  Location     Type
 18098 ;;                  1    wreg      void 
 18099 ;; Registers used:
 18100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18101 ;; Tracked objects:
 18102 ;;		On entry : 0/0
 18103 ;;		On exit  : 0/0
 18104 ;;		Unchanged: 0/0
 18105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;Total ram usage:        1 bytes
 18111 ;; Hardware stack levels used:    1
 18112 ;; Hardware stack levels required when called:   12
 18113 ;; This function calls:
 18114 ;;		_LED_Set
 18115 ;;		_Port_SetPinType
 18116 ;; This function is called by:
 18117 ;;		_MXK_Init
 18118 ;; This function uses a non-reentrant model
 18119 ;;
 18120                           
 18121                           	psect	text75
 18122  015D5C                     __ptext75:
 18123                           	opt stack 0
 18124  015D5C                     _LED_Init:
 18125                           	opt stack 16
 18126                           
 18127                           ; BSR set to: 0
 18128                           ;incstack = 0
 18129                           ;LED_Init@pLED stored from wreg
 18130  015D5C  0100               	movlb	0	; () banked
 18131  015D5E  6F8D               	movwf	LED_Init@pLED& (0+255),b
 18132                           
 18133                           ;LED.c: 17: switch (pLED)
 18134  015D60  D01E               	goto	l13683
 18135  015D62                     l13677:
 18136                           
 18137                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 18138  015D62  0EEC               	movlw	low _PortC
 18139  015D64  0100               	movlb	0	; () banked
 18140  015D66  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18141  015D68  0E00               	movlw	high _PortC
 18142  015D6A  0100               	movlb	0	; () banked
 18143  015D6C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18144  015D6E  0E00               	movlw	0
 18145  015D70  0100               	movlb	0	; () banked
 18146  015D72  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18147  015D74  0E03               	movlw	3
 18148  015D76  0100               	movlb	0	; () banked
 18149  015D78  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18150  015D7A  EC68  F094         	call	_Port_SetPinType	;wreg free
 18151                           
 18152                           ;LED.c: 21: break;
 18153  015D7E  D017               	goto	l13685
 18154  015D80                     l13679:
 18155                           
 18156                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 18157  015D80  0EEC               	movlw	low _PortC
 18158  015D82  0100               	movlb	0	; () banked
 18159  015D84  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18160  015D86  0E00               	movlw	high _PortC
 18161  015D88  0100               	movlb	0	; () banked
 18162  015D8A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18163  015D8C  0E01               	movlw	1
 18164  015D8E  0100               	movlb	0	; () banked
 18165  015D90  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18166  015D92  0E03               	movlw	3
 18167  015D94  0100               	movlb	0	; () banked
 18168  015D96  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18169  015D98  EC68  F094         	call	_Port_SetPinType	;wreg free
 18170                           
 18171                           ;LED.c: 25: }
 18172                           
 18173                           ;LED.c: 24: break;
 18174  015D9C  D008               	goto	l13685
 18175  015D9E                     l13683:
 18176  015D9E  0100               	movlb	0	; () banked
 18177  015DA0  518D               	movf	LED_Init@pLED& (0+255),w,b
 18178                           
 18179                           ; Switch size 1, requested type "space"
 18180                           ; Number of cases is 2, Range of values is 0 to 1
 18181                           ; switch strategies available:
 18182                           ; Name         Instructions Cycles
 18183                           ; simple_byte            7     4 (average)
 18184                           ;	Chosen strategy is simple_byte
 18185  015DA2  0A00               	xorlw	0	; case 0
 18186  015DA4  B4D8               	btfsc	status,2,c
 18187  015DA6  D7DD               	goto	l13677
 18188  015DA8  0A01               	xorlw	1	; case 1
 18189  015DAA  B4D8               	btfsc	status,2,c
 18190  015DAC  D7E9               	goto	l13679
 18191  015DAE                     l13685:
 18192                           
 18193                           ;LED.c: 26: LED_Set(pLED, 0);
 18194  015DAE  0E00               	movlw	0
 18195  015DB0  0100               	movlb	0	; () banked
 18196  015DB2  6F74               	movwf	LED_Set@pValue& (0+255),b
 18197  015DB4  0100               	movlb	0	; () banked
 18198  015DB6  518D               	movf	LED_Init@pLED& (0+255),w,b
 18199  015DB8  EC61  F0AF         	call	_LED_Set
 18200  015DBC  0012               	return		;funcret
 18201  015DBE                     __end_of_LED_Init:
 18202                           	opt stack 0
 18203                           tosu	equ	0xFFF
 18204                           tosh	equ	0xFFE
 18205                           tosl	equ	0xFFD
 18206                           pclath	equ	0xFFA
 18207                           tblptru	equ	0xFF8
 18208                           tblptrh	equ	0xFF7
 18209                           tblptrl	equ	0xFF6
 18210                           tablat	equ	0xFF5
 18211                           prodh	equ	0xFF4
 18212                           prodl	equ	0xFF3
 18213                           postinc0	equ	0xFEE
 18214                           wreg	equ	0xFE8
 18215                           indf1	equ	0xFE7
 18216                           postdec1	equ	0xFE5
 18217                           fsr1h	equ	0xFE2
 18218                           fsr1l	equ	0xFE1
 18219                           indf2	equ	0xFDF
 18220                           postinc2	equ	0xFDE
 18221                           postdec2	equ	0xFDD
 18222                           plusw2	equ	0xFDB
 18223                           fsr2h	equ	0xFDA
 18224                           fsr2l	equ	0xFD9
 18225                           status	equ	0xFD8
 18226                           
 18227 ;; *************** function _LED_Set *****************
 18228 ;; Defined at:
 18229 ;;		line 33 in file "Library/LED.c"
 18230 ;; Parameters:    Size  Location     Type
 18231 ;;  pLED            1    wreg     enum E6739
 18232 ;;  pValue          1   20[BANK0 ] unsigned char 
 18233 ;; Auto vars:     Size  Location     Type
 18234 ;;  pLED            1   21[BANK0 ] enum E6739
 18235 ;; Return value:  Size  Location     Type
 18236 ;;                  1    wreg      void 
 18237 ;; Registers used:
 18238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18239 ;; Tracked objects:
 18240 ;;		On entry : 0/0
 18241 ;;		On exit  : 0/0
 18242 ;;		Unchanged: 0/0
 18243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18244 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18248 ;;Total ram usage:        2 bytes
 18249 ;; Hardware stack levels used:    1
 18250 ;; Hardware stack levels required when called:   11
 18251 ;; This function calls:
 18252 ;;		_Port_SetPin
 18253 ;; This function is called by:
 18254 ;;		_LED_Init
 18255 ;;		_SYSTEM_Initialize
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259                           	psect	text76
 18260  015EC2                     __ptext76:
 18261                           	opt stack 0
 18262  015EC2                     _LED_Set:
 18263                           	opt stack 16
 18264                           
 18265                           ;incstack = 0
 18266                           ;LED_Set@pLED stored from wreg
 18267  015EC2  0100               	movlb	0	; () banked
 18268  015EC4  6F75               	movwf	LED_Set@pLED& (0+255),b
 18269                           
 18270                           ;LED.c: 35: switch (pLED)
 18271  015EC6  D01C               	goto	l12915
 18272  015EC8                     l12909:
 18273                           
 18274                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 18275  015EC8  0EEC               	movlw	low _PortC
 18276  015ECA  0100               	movlb	0	; () banked
 18277  015ECC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18278  015ECE  0E00               	movlw	high _PortC
 18279  015ED0  0100               	movlb	0	; () banked
 18280  015ED2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18281  015ED4  0E00               	movlw	0
 18282  015ED6  0100               	movlb	0	; () banked
 18283  015ED8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18284  015EDA  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18285  015EDE  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 18286                           
 18287                           ;LED.c: 39: break;
 18288  015EE2  0012               	return	
 18289  015EE4                     l12911:
 18290                           
 18291                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 18292  015EE4  0EEC               	movlw	low _PortC
 18293  015EE6  0100               	movlb	0	; () banked
 18294  015EE8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18295  015EEA  0E00               	movlw	high _PortC
 18296  015EEC  0100               	movlb	0	; () banked
 18297  015EEE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18298  015EF0  0E01               	movlw	1
 18299  015EF2  0100               	movlb	0	; () banked
 18300  015EF4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18301  015EF6  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18302  015EFA  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 18303                           
 18304                           ;LED.c: 43: }
 18305                           
 18306                           ;LED.c: 42: break;
 18307  015EFE  0012               	return	
 18308  015F00                     l12915:
 18309  015F00  0100               	movlb	0	; () banked
 18310  015F02  5175               	movf	LED_Set@pLED& (0+255),w,b
 18311                           
 18312                           ; Switch size 1, requested type "space"
 18313                           ; Number of cases is 2, Range of values is 0 to 1
 18314                           ; switch strategies available:
 18315                           ; Name         Instructions Cycles
 18316                           ; simple_byte            7     4 (average)
 18317                           ;	Chosen strategy is simple_byte
 18318  015F04  0A00               	xorlw	0	; case 0
 18319  015F06  B4D8               	btfsc	status,2,c
 18320  015F08  D7DF               	goto	l12909
 18321  015F0A  0A01               	xorlw	1	; case 1
 18322  015F0C  A4D8               	btfss	status,2,c
 18323  015F0E  0012               	return	
 18324  015F10  D7E9               	goto	l12911
 18325  015F12                     __end_of_LED_Set:
 18326                           	opt stack 0
 18327                           tosu	equ	0xFFF
 18328                           tosh	equ	0xFFE
 18329                           tosl	equ	0xFFD
 18330                           pclath	equ	0xFFA
 18331                           tblptru	equ	0xFF8
 18332                           tblptrh	equ	0xFF7
 18333                           tblptrl	equ	0xFF6
 18334                           tablat	equ	0xFF5
 18335                           prodh	equ	0xFF4
 18336                           prodl	equ	0xFF3
 18337                           postinc0	equ	0xFEE
 18338                           wreg	equ	0xFE8
 18339                           indf1	equ	0xFE7
 18340                           postdec1	equ	0xFE5
 18341                           fsr1h	equ	0xFE2
 18342                           fsr1l	equ	0xFE1
 18343                           indf2	equ	0xFDF
 18344                           postinc2	equ	0xFDE
 18345                           postdec2	equ	0xFDD
 18346                           plusw2	equ	0xFDB
 18347                           fsr2h	equ	0xFDA
 18348                           fsr2l	equ	0xFD9
 18349                           status	equ	0xFD8
 18350                           
 18351 ;; *************** function _MXK_Dequeue *****************
 18352 ;; Defined at:
 18353 ;;		line 153 in file "Library/MXK.c"
 18354 ;; Parameters:    Size  Location     Type
 18355 ;;		None
 18356 ;; Auto vars:     Size  Location     Type
 18357 ;;		None
 18358 ;; Return value:  Size  Location     Type
 18359 ;;                  1    wreg      void 
 18360 ;; Registers used:
 18361 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18362 ;; Tracked objects:
 18363 ;;		On entry : 0/0
 18364 ;;		On exit  : 0/0
 18365 ;;		Unchanged: 0/0
 18366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18371 ;;Total ram usage:        0 bytes
 18372 ;; Hardware stack levels used:    1
 18373 ;; Hardware stack levels required when called:   12
 18374 ;; This function calls:
 18375 ;;		Absolute function
 18376 ;;		_Motor_Step
 18377 ;; This function is called by:
 18378 ;;		_init
 18379 ;;		_main
 18380 ;; This function uses a non-reentrant model
 18381 ;;
 18382                           
 18383                           	psect	text77
 18384  016530                     __ptext77:
 18385                           	opt stack 0
 18386  016530                     _MXK_Dequeue:
 18387                           	opt stack 17
 18388                           
 18389                           ;MXK.c: 155: if (lQueue)
 18390                           
 18391                           ;incstack = 0
 18392  016530  5025               	movf	_lQueue,w,c	;volatile
 18393  016532  1026               	iorwf	_lQueue+1,w,c	;volatile
 18394  016534  1027               	iorwf	_lQueue+2,w,c	;volatile
 18395  016536  B4D8               	btfsc	status,2,c
 18396  016538  D00C               	goto	l15339
 18397                           
 18398                           ;MXK.c: 156: lQueue();
 18399  01653A  D801               	call	u13268
 18400  01653C  D00A               	goto	l15339
 18401  01653E                     u13268:
 18402  01653E  0005               	push	
 18403  016540  6EFA               	movwf	pclath,c
 18404  016542  5025               	movf	_lQueue,w,c	;volatile
 18405  016544  6EFD               	movwf	tosl,c
 18406  016546  5026               	movf	_lQueue+1,w,c	;volatile
 18407  016548  6EFE               	movwf	tosh,c
 18408  01654A  5027               	movf	_lQueue+2,w,c	;volatile
 18409  01654C  6EFF               	movwf	tosu,c
 18410  01654E  50FA               	movf	pclath,w,c
 18411  016550  0012               	return		;indir
 18412  016552                     l15339:
 18413                           
 18414                           ;MXK.c: 157: lQueue = 0;
 18415  016552  0E00               	movlw	0
 18416  016554  6E25               	movwf	_lQueue,c	;volatile
 18417  016556  0E00               	movlw	0
 18418  016558  6E26               	movwf	_lQueue+1,c	;volatile
 18419  01655A  0E00               	movlw	0
 18420  01655C  6E27               	movwf	_lQueue+2,c	;volatile
 18421  01655E  0012               	return		;funcret
 18422  016560                     __end_of_MXK_Dequeue:
 18423                           	opt stack 0
 18424                           tosu	equ	0xFFF
 18425                           tosh	equ	0xFFE
 18426                           tosl	equ	0xFFD
 18427                           pclath	equ	0xFFA
 18428                           tblptru	equ	0xFF8
 18429                           tblptrh	equ	0xFF7
 18430                           tblptrl	equ	0xFF6
 18431                           tablat	equ	0xFF5
 18432                           prodh	equ	0xFF4
 18433                           prodl	equ	0xFF3
 18434                           postinc0	equ	0xFEE
 18435                           wreg	equ	0xFE8
 18436                           indf1	equ	0xFE7
 18437                           postdec1	equ	0xFE5
 18438                           fsr1h	equ	0xFE2
 18439                           fsr1l	equ	0xFE1
 18440                           indf2	equ	0xFDF
 18441                           postinc2	equ	0xFDE
 18442                           postdec2	equ	0xFDD
 18443                           plusw2	equ	0xFDB
 18444                           fsr2h	equ	0xFDA
 18445                           fsr2l	equ	0xFD9
 18446                           status	equ	0xFD8
 18447                           
 18448 ;; *************** function _Motor_Step *****************
 18449 ;; Defined at:
 18450 ;;		line 75 in file "Library/Motor.c"
 18451 ;; Parameters:    Size  Location     Type
 18452 ;;		None
 18453 ;; Auto vars:     Size  Location     Type
 18454 ;;		None
 18455 ;; Return value:  Size  Location     Type
 18456 ;;                  1    wreg      void 
 18457 ;; Registers used:
 18458 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18459 ;; Tracked objects:
 18460 ;;		On entry : 0/0
 18461 ;;		On exit  : 0/0
 18462 ;;		Unchanged: 0/0
 18463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18466 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18468 ;;Total ram usage:        2 bytes
 18469 ;; Hardware stack levels used:    1
 18470 ;; Hardware stack levels required when called:   11
 18471 ;; This function calls:
 18472 ;;		_MXK_Queue
 18473 ;;		_MXK_Release
 18474 ;;		_MXK_SwitchTo
 18475 ;;		_Port_SetPin
 18476 ;;		_Timer0_Restart
 18477 ;;		_Timer0_Stop
 18478 ;; This function is called by:
 18479 ;;		_Motor_Init
 18480 ;;		_MXK_Dequeue
 18481 ;;		_Timer0_ISR
 18482 ;; This function uses a non-reentrant model
 18483 ;;
 18484                           
 18485                           	psect	text78
 18486  013CD0                     __ptext78:
 18487                           	opt stack 0
 18488  013CD0                     _Motor_Step:
 18489                           	opt stack 0
 18490                           
 18491                           ;Skip over the trampoline to the duplicate function for level 2
 18492  013CD0  B249               	btfsc	btemp,1,c
 18493  013CD2  EF0C  F0A0         	goto	i2_Motor_Step
 18494  013CD6                     _Motor_Step$intlevel0:
 18495                           	opt stack 17
 18496                           
 18497                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 18498                           
 18499                           ;incstack = 0
 18500  013CD6  EE20 F004          	lfsr	2,4
 18501  013CDA  502A               	movf	_lMotor,w,c
 18502  013CDC  26D9               	addwf	fsr2l,f,c
 18503  013CDE  502B               	movf	_lMotor+1,w,c
 18504  013CE0  22DA               	addwfc	fsr2h,f,c
 18505  013CE2  50DF               	movf	indf2,w,c
 18506  013CE4  EC1C  F0B1         	call	_MXK_SwitchTo
 18507  013CE8  0900               	iorlw	0
 18508  013CEA  B4D8               	btfsc	status,2,c
 18509  013CEC  D07A               	goto	l13907
 18510                           
 18511                           ;Motor.c: 78: {
 18512                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 18513  013CEE  C02A  FFD9         	movff	_lMotor,fsr2l
 18514  013CF2  C02B  FFDA         	movff	_lMotor+1,fsr2h
 18515  013CF6  50DE               	movf	postinc2,w,c
 18516  013CF8  10DE               	iorwf	postinc2,w,c
 18517  013CFA  B4D8               	btfsc	status,2,c
 18518  013CFC  D06D               	goto	l13901
 18519                           
 18520                           ;Motor.c: 80: {
 18521                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 18522  013CFE  C02A  FFD9         	movff	_lMotor,fsr2l
 18523  013D02  C02B  FFDA         	movff	_lMotor+1,fsr2h
 18524  013D06  0E01               	movlw	1
 18525  013D08  BEDB               	btfsc	plusw2,7,c
 18526  013D0A  D026               	goto	l13885
 18527  013D0C  0E01               	movlw	1
 18528  013D0E  50DB               	movf	plusw2,w,c
 18529  013D10  E103               	bnz	u11580
 18530  013D12  04DE               	decf	postinc2,w,c
 18531  013D14  A0D8               	btfss	status,0,c
 18532  013D16  D020               	goto	l13885
 18533  013D18                     u11580:
 18534                           
 18535                           ;Motor.c: 83: {
 18536                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 18537  013D18  C02A  FFD9         	movff	_lMotor,fsr2l
 18538  013D1C  C02B  FFDA         	movff	_lMotor+1,fsr2h
 18539  013D20  28DE               	incf	postinc2,w,c
 18540  013D22  E104               	bnz	u11590
 18541  013D24  0E7F               	movlw	127
 18542  013D26  18DE               	xorwf	postinc2,w,c
 18543  013D28  B4D8               	btfsc	status,2,c
 18544  013D2A  D007               	goto	l13883
 18545  013D2C                     u11590:
 18546                           
 18547                           ;Motor.c: 85: lMotor->mDelta --;
 18548  013D2C  C02A  FFD9         	movff	_lMotor,fsr2l
 18549  013D30  C02B  FFDA         	movff	_lMotor+1,fsr2h
 18550  013D34  06DE               	decf	postinc2,f,c
 18551  013D36  0E00               	movlw	0
 18552  013D38  5ADD               	subwfb	postdec2,f,c
 18553  013D3A                     l13883:
 18554                           
 18555                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18556  013D3A  0E84               	movlw	low _PortE
 18557  013D3C  0100               	movlb	0	; () banked
 18558  013D3E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18559  013D40  0E01               	movlw	high _PortE
 18560  013D42  0100               	movlb	0	; () banked
 18561  013D44  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18562  013D46  0E00               	movlw	0
 18563  013D48  0100               	movlb	0	; () banked
 18564  013D4A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18565  013D4C  0E01               	movlw	1
 18566  013D4E  0100               	movlb	0	; () banked
 18567  013D50  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18568  013D52  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 18569                           
 18570                           ;Motor.c: 88: }
 18571  013D56  D01F               	goto	l13891
 18572  013D58                     l13885:
 18573                           
 18574                           ;Motor.c: 89: else
 18575                           ;Motor.c: 90: {
 18576                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18577  013D58  C02A  FFD9         	movff	_lMotor,fsr2l
 18578  013D5C  C02B  FFDA         	movff	_lMotor+1,fsr2h
 18579  013D60  04DE               	decf	postinc2,w,c
 18580  013D62  E104               	bnz	u11600
 18581  013D64  0E80               	movlw	128
 18582  013D66  18DE               	xorwf	postinc2,w,c
 18583  013D68  B4D8               	btfsc	status,2,c
 18584  013D6A  D007               	goto	l13889
 18585  013D6C                     u11600:
 18586                           
 18587                           ;Motor.c: 92: lMotor->mDelta ++;
 18588  013D6C  C02A  FFD9         	movff	_lMotor,fsr2l
 18589  013D70  C02B  FFDA         	movff	_lMotor+1,fsr2h
 18590  013D74  2ADE               	incf	postinc2,f,c
 18591  013D76  0E00               	movlw	0
 18592  013D78  22DD               	addwfc	postdec2,f,c
 18593  013D7A                     l13889:
 18594                           
 18595                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 18596  013D7A  0E84               	movlw	low _PortE
 18597  013D7C  0100               	movlb	0	; () banked
 18598  013D7E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18599  013D80  0E01               	movlw	high _PortE
 18600  013D82  0100               	movlb	0	; () banked
 18601  013D84  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18602  013D86  0E00               	movlw	0
 18603  013D88  0100               	movlb	0	; () banked
 18604  013D8A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18605  013D8C  0E00               	movlw	0
 18606  013D8E  0100               	movlb	0	; () banked
 18607  013D90  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18608  013D92  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 18609  013D96                     l13891:
 18610                           
 18611                           ;Motor.c: 95: }
 18612                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 18613  013D96  0E84               	movlw	low _PortE
 18614  013D98  0100               	movlb	0	; () banked
 18615  013D9A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18616  013D9C  0E01               	movlw	high _PortE
 18617  013D9E  0100               	movlb	0	; () banked
 18618  013DA0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18619  013DA2  0E01               	movlw	1
 18620  013DA4  0100               	movlb	0	; () banked
 18621  013DA6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18622  013DA8  0E01               	movlw	1
 18623  013DAA  0100               	movlb	0	; () banked
 18624  013DAC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18625  013DAE  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 18626                           
 18627                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 18628  013DB2  0E84               	movlw	low _PortE
 18629  013DB4  0100               	movlb	0	; () banked
 18630  013DB6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18631  013DB8  0E01               	movlw	high _PortE
 18632  013DBA  0100               	movlb	0	; () banked
 18633  013DBC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18634  013DBE  0E01               	movlw	1
 18635  013DC0  0100               	movlb	0	; () banked
 18636  013DC2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18637  013DC4  0E00               	movlw	0
 18638  013DC6  0100               	movlb	0	; () banked
 18639  013DC8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18640  013DCA  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 18641                           
 18642                           ;Motor.c: 101: MXK_Release();
 18643  013DCE  EC7F  F0B4         	call	_MXK_Release	;wreg free
 18644                           
 18645                           ;Motor.c: 102: Timer0_Restart();
 18646  013DD2  ECC8  F0B4         	call	_Timer0_Restart	;wreg free
 18647                           
 18648                           ;Motor.c: 103: return;
 18649  013DD6  0012               	return	
 18650  013DD8                     l13901:
 18651                           
 18652                           ;Motor.c: 104: }
 18653                           ;Motor.c: 105: MXK_Release();
 18654  013DD8  EC7F  F0B4         	call	_MXK_Release	;wreg free
 18655                           
 18656                           ;Motor.c: 106: Timer0_Stop();
 18657  013DDC  ECFC  F0B4         	call	_Timer0_Stop	;wreg free
 18658                           
 18659                           ;Motor.c: 107: return;
 18660  013DE0  0012               	return	
 18661  013DE2                     l13907:
 18662                           
 18663                           ;Motor.c: 108: }
 18664                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 18665  013DE2  C0D1  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 18666  013DE6  C0D2  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 18667  013DEA  C0D3  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 18668  013DEE  ECB4  F0B4         	call	_MXK_Queue	;wreg free
 18669  013DF2  0012               	return		;funcret
 18670  013DF4                     __end_of_Motor_Step:
 18671                           	opt stack 0
 18672                           tosu	equ	0xFFF
 18673                           tosh	equ	0xFFE
 18674                           tosl	equ	0xFFD
 18675                           pclath	equ	0xFFA
 18676                           tblptru	equ	0xFF8
 18677                           tblptrh	equ	0xFF7
 18678                           tblptrl	equ	0xFF6
 18679                           tablat	equ	0xFF5
 18680                           prodh	equ	0xFF4
 18681                           prodl	equ	0xFF3
 18682                           postinc0	equ	0xFEE
 18683                           wreg	equ	0xFE8
 18684                           indf1	equ	0xFE7
 18685                           postdec1	equ	0xFE5
 18686                           fsr1h	equ	0xFE2
 18687                           fsr1l	equ	0xFE1
 18688                           indf2	equ	0xFDF
 18689                           postinc2	equ	0xFDE
 18690                           postdec2	equ	0xFDD
 18691                           plusw2	equ	0xFDB
 18692                           fsr2h	equ	0xFDA
 18693                           fsr2l	equ	0xFD9
 18694                           status	equ	0xFD8
 18695                           
 18696 ;; *************** function _Timer0_Stop *****************
 18697 ;; Defined at:
 18698 ;;		line 89 in file "Library/Timer0.c"
 18699 ;; Parameters:    Size  Location     Type
 18700 ;;		None
 18701 ;; Auto vars:     Size  Location     Type
 18702 ;;		None
 18703 ;; Return value:  Size  Location     Type
 18704 ;;                  1    wreg      void 
 18705 ;; Registers used:
 18706 ;;		None
 18707 ;; Tracked objects:
 18708 ;;		On entry : 0/0
 18709 ;;		On exit  : 0/0
 18710 ;;		Unchanged: 0/0
 18711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18716 ;;Total ram usage:        0 bytes
 18717 ;; Hardware stack levels used:    1
 18718 ;; Hardware stack levels required when called:    7
 18719 ;; This function calls:
 18720 ;;		Nothing
 18721 ;; This function is called by:
 18722 ;;		_Motor_Step
 18723 ;; This function uses a non-reentrant model
 18724 ;;
 18725                           
 18726                           	psect	text79
 18727  0169F8                     __ptext79:
 18728                           	opt stack 0
 18729  0169F8                     _Timer0_Stop:
 18730                           	opt stack 20
 18731                           
 18732                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 18733                           
 18734                           ;incstack = 0
 18735  0169F8  9AF2               	bcf	intcon,5,c	;volatile
 18736                           
 18737                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 18738  0169FA  94F2               	bcf	intcon,2,c	;volatile
 18739  0169FC  0012               	return		;funcret
 18740  0169FE                     __end_of_Timer0_Stop:
 18741                           	opt stack 0
 18742                           tosu	equ	0xFFF
 18743                           tosh	equ	0xFFE
 18744                           tosl	equ	0xFFD
 18745                           pclath	equ	0xFFA
 18746                           tblptru	equ	0xFF8
 18747                           tblptrh	equ	0xFF7
 18748                           tblptrl	equ	0xFF6
 18749                           tablat	equ	0xFF5
 18750                           prodh	equ	0xFF4
 18751                           prodl	equ	0xFF3
 18752                           intcon	equ	0xFF2
 18753                           postinc0	equ	0xFEE
 18754                           wreg	equ	0xFE8
 18755                           indf1	equ	0xFE7
 18756                           postdec1	equ	0xFE5
 18757                           fsr1h	equ	0xFE2
 18758                           fsr1l	equ	0xFE1
 18759                           indf2	equ	0xFDF
 18760                           postinc2	equ	0xFDE
 18761                           postdec2	equ	0xFDD
 18762                           plusw2	equ	0xFDB
 18763                           fsr2h	equ	0xFDA
 18764                           fsr2l	equ	0xFD9
 18765                           status	equ	0xFD8
 18766                           
 18767 ;; *************** function _Timer0_Restart *****************
 18768 ;; Defined at:
 18769 ;;		line 83 in file "Library/Timer0.c"
 18770 ;; Parameters:    Size  Location     Type
 18771 ;;		None
 18772 ;; Auto vars:     Size  Location     Type
 18773 ;;		None
 18774 ;; Return value:  Size  Location     Type
 18775 ;;                  1    wreg      void 
 18776 ;; Registers used:
 18777 ;;		None
 18778 ;; Tracked objects:
 18779 ;;		On entry : 0/0
 18780 ;;		On exit  : 0/0
 18781 ;;		Unchanged: 0/0
 18782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18787 ;;Total ram usage:        0 bytes
 18788 ;; Hardware stack levels used:    1
 18789 ;; Hardware stack levels required when called:    7
 18790 ;; This function calls:
 18791 ;;		Nothing
 18792 ;; This function is called by:
 18793 ;;		_Motor_Step
 18794 ;; This function uses a non-reentrant model
 18795 ;;
 18796                           
 18797                           	psect	text80
 18798  016990                     __ptext80:
 18799                           	opt stack 0
 18800  016990                     _Timer0_Restart:
 18801                           	opt stack 20
 18802                           
 18803                           ;Timer0.c: 85: TMR0 = COUNTER;
 18804                           
 18805                           ;incstack = 0
 18806  016990  C028  FFD6         	movff	_COUNTER,4054	;volatile
 18807  016994  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 18808                           
 18809                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 18810  016998  8AF2               	bsf	intcon,5,c	;volatile
 18811  01699A  0012               	return		;funcret
 18812  01699C                     __end_of_Timer0_Restart:
 18813                           	opt stack 0
 18814                           tosu	equ	0xFFF
 18815                           tosh	equ	0xFFE
 18816                           tosl	equ	0xFFD
 18817                           pclath	equ	0xFFA
 18818                           tblptru	equ	0xFF8
 18819                           tblptrh	equ	0xFF7
 18820                           tblptrl	equ	0xFF6
 18821                           tablat	equ	0xFF5
 18822                           prodh	equ	0xFF4
 18823                           prodl	equ	0xFF3
 18824                           intcon	equ	0xFF2
 18825                           postinc0	equ	0xFEE
 18826                           wreg	equ	0xFE8
 18827                           indf1	equ	0xFE7
 18828                           postdec1	equ	0xFE5
 18829                           fsr1h	equ	0xFE2
 18830                           fsr1l	equ	0xFE1
 18831                           indf2	equ	0xFDF
 18832                           postinc2	equ	0xFDE
 18833                           postdec2	equ	0xFDD
 18834                           plusw2	equ	0xFDB
 18835                           fsr2h	equ	0xFDA
 18836                           fsr2l	equ	0xFD9
 18837                           status	equ	0xFD8
 18838                           
 18839 ;; *************** function _MXK_SwitchTo *****************
 18840 ;; Defined at:
 18841 ;;		line 105 in file "Library/MXK.c"
 18842 ;; Parameters:    Size  Location     Type
 18843 ;;  pModule         1    wreg     enum E6927
 18844 ;; Auto vars:     Size  Location     Type
 18845 ;;  pModule         1    7[BANK0 ] enum E6927
 18846 ;;  CUR             1    6[BANK0 ] unsigned char 
 18847 ;; Return value:  Size  Location     Type
 18848 ;;                  1    wreg      unsigned char 
 18849 ;; Registers used:
 18850 ;;		wreg, status,2, status,0, cstack
 18851 ;; Tracked objects:
 18852 ;;		On entry : 0/0
 18853 ;;		On exit  : 0/0
 18854 ;;		Unchanged: 0/0
 18855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18857 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18860 ;;Total ram usage:        2 bytes
 18861 ;; Hardware stack levels used:    1
 18862 ;; Hardware stack levels required when called:    8
 18863 ;; This function calls:
 18864 ;;		_delay_us
 18865 ;; This function is called by:
 18866 ;;		_Motor_Step
 18867 ;; This function uses a non-reentrant model
 18868 ;;
 18869                           
 18870                           	psect	text81
 18871  016238                     __ptext81:
 18872                           	opt stack 0
 18873  016238                     _MXK_SwitchTo:
 18874                           	opt stack 19
 18875                           
 18876                           ;incstack = 0
 18877                           ;MXK_SwitchTo@pModule stored from wreg
 18878  016238  0100               	movlb	0	; () banked
 18879  01623A  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 18880                           
 18881                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 18882  01623C  5086               	movf	3974,w,c	;volatile
 18883  01623E  0B0F               	andlw	15
 18884  016240  0100               	movlb	0	; () banked
 18885  016242  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 18886                           
 18887                           ; BSR set to: 0
 18888                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 18889  016244  5043               	movf	_Bus_State,w,c
 18890  016246  A4D8               	btfss	status,2,c
 18891  016248  D002               	goto	l13227
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;MXK.c: 110: return 0;
 18895  01624A  0E00               	movlw	0
 18896                           
 18897                           ; BSR set to: 0
 18898  01624C  0012               	return	
 18899  01624E                     l13227:
 18900                           
 18901                           ; BSR set to: 0
 18902                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 18903  01624E  0E00               	movlw	0
 18904  016250  6E43               	movwf	_Bus_State,c
 18905                           
 18906                           ; BSR set to: 0
 18907                           ;MXK.c: 114: if (CUR != pModule)
 18908  016252  0100               	movlb	0	; () banked
 18909  016254  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18910  016256  0100               	movlb	0	; () banked
 18911  016258  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 18912  01625A  B4D8               	btfsc	status,2,c
 18913  01625C  D00C               	goto	l13235
 18914                           
 18915                           ; BSR set to: 0
 18916                           ;MXK.c: 115: {
 18917                           ;MXK.c: 116: PORTG &= ~(0xF);
 18918  01625E  0EF0               	movlw	240
 18919  016260  1686               	andwf	3974,f,c	;volatile
 18920                           
 18921                           ;MXK.c: 117: PORTG |= pModule;
 18922  016262  0100               	movlb	0	; () banked
 18923  016264  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18924  016266  1286               	iorwf	3974,f,c	;volatile
 18925                           
 18926                           ; BSR set to: 0
 18927                           ;MXK.c: 120: delay_us(10);
 18928  016268  0E00               	movlw	0
 18929  01626A  0100               	movlb	0	; () banked
 18930  01626C  6F61               	movwf	(delay_us@us+1)& (0+255),b
 18931  01626E  0E0A               	movlw	10
 18932  016270  6F60               	movwf	delay_us@us& (0+255),b
 18933  016272  EC38  F0AF         	call	_delay_us	;wreg free
 18934  016276                     l13235:
 18935                           
 18936                           ;MXK.c: 121: }
 18937                           ;MXK.c: 122: return 1;
 18938  016276  0E01               	movlw	1
 18939  016278  0012               	return	
 18940  01627A                     __end_of_MXK_SwitchTo:
 18941                           	opt stack 0
 18942                           tosu	equ	0xFFF
 18943                           tosh	equ	0xFFE
 18944                           tosl	equ	0xFFD
 18945                           pclath	equ	0xFFA
 18946                           tblptru	equ	0xFF8
 18947                           tblptrh	equ	0xFF7
 18948                           tblptrl	equ	0xFF6
 18949                           tablat	equ	0xFF5
 18950                           prodh	equ	0xFF4
 18951                           prodl	equ	0xFF3
 18952                           intcon	equ	0xFF2
 18953                           postinc0	equ	0xFEE
 18954                           wreg	equ	0xFE8
 18955                           indf1	equ	0xFE7
 18956                           postdec1	equ	0xFE5
 18957                           fsr1h	equ	0xFE2
 18958                           fsr1l	equ	0xFE1
 18959                           indf2	equ	0xFDF
 18960                           postinc2	equ	0xFDE
 18961                           postdec2	equ	0xFDD
 18962                           plusw2	equ	0xFDB
 18963                           fsr2h	equ	0xFDA
 18964                           fsr2l	equ	0xFD9
 18965                           status	equ	0xFD8
 18966                           
 18967 ;; *************** function _MXK_Release *****************
 18968 ;; Defined at:
 18969 ;;		line 130 in file "Library/MXK.c"
 18970 ;; Parameters:    Size  Location     Type
 18971 ;;		None
 18972 ;; Auto vars:     Size  Location     Type
 18973 ;;		None
 18974 ;; Return value:  Size  Location     Type
 18975 ;;                  1    wreg      unsigned char 
 18976 ;; Registers used:
 18977 ;;		wreg, status,2, status,0
 18978 ;; Tracked objects:
 18979 ;;		On entry : 0/0
 18980 ;;		On exit  : 0/0
 18981 ;;		Unchanged: 0/0
 18982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18987 ;;Total ram usage:        0 bytes
 18988 ;; Hardware stack levels used:    1
 18989 ;; Hardware stack levels required when called:    7
 18990 ;; This function calls:
 18991 ;;		Nothing
 18992 ;; This function is called by:
 18993 ;;		_Motor_Step
 18994 ;;		_init
 18995 ;;		_main
 18996 ;; This function uses a non-reentrant model
 18997 ;;
 18998                           
 18999                           	psect	text82
 19000  0168FE                     __ptext82:
 19001                           	opt stack 0
 19002  0168FE                     _MXK_Release:
 19003                           	opt stack 22
 19004                           
 19005                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 19006                           
 19007                           ;incstack = 0
 19008  0168FE  0E01               	movlw	1
 19009  016900  6E43               	movwf	_Bus_State,c
 19010                           
 19011                           ;MXK.c: 134: if (lQueue != 0)
 19012  016902  5025               	movf	_lQueue,w,c	;volatile
 19013  016904  1026               	iorwf	_lQueue+1,w,c	;volatile
 19014  016906  1027               	iorwf	_lQueue+2,w,c	;volatile
 19015  016908  B4D8               	btfsc	status,2,c
 19016  01690A  D002               	goto	l13247
 19017                           
 19018                           ;MXK.c: 135: return 1;
 19019  01690C  0E01               	movlw	1
 19020  01690E  0012               	return	
 19021  016910                     l13247:
 19022                           
 19023                           ;MXK.c: 137: return 0;
 19024  016910  0E00               	movlw	0
 19025  016912  0012               	return	
 19026  016914                     __end_of_MXK_Release:
 19027                           	opt stack 0
 19028                           tosu	equ	0xFFF
 19029                           tosh	equ	0xFFE
 19030                           tosl	equ	0xFFD
 19031                           pclath	equ	0xFFA
 19032                           tblptru	equ	0xFF8
 19033                           tblptrh	equ	0xFF7
 19034                           tblptrl	equ	0xFF6
 19035                           tablat	equ	0xFF5
 19036                           prodh	equ	0xFF4
 19037                           prodl	equ	0xFF3
 19038                           intcon	equ	0xFF2
 19039                           postinc0	equ	0xFEE
 19040                           wreg	equ	0xFE8
 19041                           indf1	equ	0xFE7
 19042                           postdec1	equ	0xFE5
 19043                           fsr1h	equ	0xFE2
 19044                           fsr1l	equ	0xFE1
 19045                           indf2	equ	0xFDF
 19046                           postinc2	equ	0xFDE
 19047                           postdec2	equ	0xFDD
 19048                           plusw2	equ	0xFDB
 19049                           fsr2h	equ	0xFDA
 19050                           fsr2l	equ	0xFD9
 19051                           status	equ	0xFD8
 19052                           
 19053 ;; *************** function _MXK_Queue *****************
 19054 ;; Defined at:
 19055 ;;		line 144 in file "Library/MXK.c"
 19056 ;; Parameters:    Size  Location     Type
 19057 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 19058 ;;		 -> Absolute function(1), Motor_Step(1), 
 19059 ;; Auto vars:     Size  Location     Type
 19060 ;;		None
 19061 ;; Return value:  Size  Location     Type
 19062 ;;                  1    wreg      void 
 19063 ;; Registers used:
 19064 ;;		wreg, status,2, status,0
 19065 ;; Tracked objects:
 19066 ;;		On entry : 0/0
 19067 ;;		On exit  : 0/0
 19068 ;;		Unchanged: 0/0
 19069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19070 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19074 ;;Total ram usage:        3 bytes
 19075 ;; Hardware stack levels used:    1
 19076 ;; Hardware stack levels required when called:    7
 19077 ;; This function calls:
 19078 ;;		Nothing
 19079 ;; This function is called by:
 19080 ;;		_Motor_Step
 19081 ;; This function uses a non-reentrant model
 19082 ;;
 19083                           
 19084                           	psect	text83
 19085  016968                     __ptext83:
 19086                           	opt stack 0
 19087  016968                     _MXK_Queue:
 19088                           	opt stack 20
 19089                           
 19090                           ;MXK.c: 146: lQueue = pCallback;
 19091                           
 19092                           ;incstack = 0
 19093  016968  C060  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 19094  01696C  C061  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 19095  016970  C062  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 19096  016974  0012               	return		;funcret
 19097  016976                     __end_of_MXK_Queue:
 19098                           	opt stack 0
 19099                           tosu	equ	0xFFF
 19100                           tosh	equ	0xFFE
 19101                           tosl	equ	0xFFD
 19102                           pclath	equ	0xFFA
 19103                           tblptru	equ	0xFF8
 19104                           tblptrh	equ	0xFF7
 19105                           tblptrl	equ	0xFF6
 19106                           tablat	equ	0xFF5
 19107                           prodh	equ	0xFF4
 19108                           prodl	equ	0xFF3
 19109                           intcon	equ	0xFF2
 19110                           postinc0	equ	0xFEE
 19111                           wreg	equ	0xFE8
 19112                           indf1	equ	0xFE7
 19113                           postdec1	equ	0xFE5
 19114                           fsr1h	equ	0xFE2
 19115                           fsr1l	equ	0xFE1
 19116                           indf2	equ	0xFDF
 19117                           postinc2	equ	0xFDE
 19118                           postdec2	equ	0xFDD
 19119                           plusw2	equ	0xFDB
 19120                           fsr2h	equ	0xFDA
 19121                           fsr2l	equ	0xFD9
 19122                           status	equ	0xFD8
 19123                           
 19124 ;; *************** function _MXK_BlockSwitchTo *****************
 19125 ;; Defined at:
 19126 ;;		line 82 in file "Library/MXK.c"
 19127 ;; Parameters:    Size  Location     Type
 19128 ;;  pModule         1    wreg     enum E6927
 19129 ;; Auto vars:     Size  Location     Type
 19130 ;;  pModule         1    7[BANK0 ] enum E6927
 19131 ;;  CUR             1    6[BANK0 ] unsigned char 
 19132 ;; Return value:  Size  Location     Type
 19133 ;;                  1    wreg      unsigned char 
 19134 ;; Registers used:
 19135 ;;		wreg, status,2, status,0, cstack
 19136 ;; Tracked objects:
 19137 ;;		On entry : 0/0
 19138 ;;		On exit  : 0/0
 19139 ;;		Unchanged: 0/0
 19140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19142 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19145 ;;Total ram usage:        2 bytes
 19146 ;; Hardware stack levels used:    1
 19147 ;; Hardware stack levels required when called:    8
 19148 ;; This function calls:
 19149 ;;		_delay_us
 19150 ;; This function is called by:
 19151 ;;		_init
 19152 ;;		_main
 19153 ;; This function uses a non-reentrant model
 19154 ;;
 19155                           
 19156                           	psect	text84
 19157  0162F8                     __ptext84:
 19158                           	opt stack 0
 19159  0162F8                     _MXK_BlockSwitchTo:
 19160                           	opt stack 21
 19161                           
 19162                           ;incstack = 0
 19163                           ;MXK_BlockSwitchTo@pModule stored from wreg
 19164  0162F8  0100               	movlb	0	; () banked
 19165  0162FA  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 19166                           
 19167                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 19168  0162FC  5086               	movf	3974,w,c	;volatile
 19169  0162FE  0B0F               	andlw	15
 19170  016300  0100               	movlb	0	; () banked
 19171  016302  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 19172  016304                     l14227:
 19173  016304  5043               	movf	_Bus_State,w,c
 19174  016306  B4D8               	btfsc	status,2,c
 19175  016308  D7FD               	goto	l14227
 19176                           
 19177                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 19178  01630A  0E00               	movlw	0
 19179  01630C  6E43               	movwf	_Bus_State,c
 19180                           
 19181                           ;MXK.c: 90: if (CUR != pModule)
 19182  01630E  0100               	movlb	0	; () banked
 19183  016310  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19184  016312  0100               	movlb	0	; () banked
 19185  016314  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 19186  016316  B4D8               	btfsc	status,2,c
 19187  016318  D00C               	goto	l14237
 19188                           
 19189                           ; BSR set to: 0
 19190                           ;MXK.c: 91: {
 19191                           ;MXK.c: 92: PORTG &= ~(0xF);
 19192  01631A  0EF0               	movlw	240
 19193  01631C  1686               	andwf	3974,f,c	;volatile
 19194                           
 19195                           ;MXK.c: 93: PORTG |= pModule;
 19196  01631E  0100               	movlb	0	; () banked
 19197  016320  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19198  016322  1286               	iorwf	3974,f,c	;volatile
 19199                           
 19200                           ; BSR set to: 0
 19201                           ;MXK.c: 96: delay_us(10);
 19202  016324  0E00               	movlw	0
 19203  016326  0100               	movlb	0	; () banked
 19204  016328  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19205  01632A  0E0A               	movlw	10
 19206  01632C  6F60               	movwf	delay_us@us& (0+255),b
 19207  01632E  EC38  F0AF         	call	_delay_us	;wreg free
 19208  016332                     l14237:
 19209                           
 19210                           ;MXK.c: 97: }
 19211                           ;MXK.c: 98: return 1;
 19212  016332  0E01               	movlw	1
 19213  016334  0012               	return	
 19214  016336                     __end_of_MXK_BlockSwitchTo:
 19215                           	opt stack 0
 19216                           tosu	equ	0xFFF
 19217                           tosh	equ	0xFFE
 19218                           tosl	equ	0xFFD
 19219                           pclath	equ	0xFFA
 19220                           tblptru	equ	0xFF8
 19221                           tblptrh	equ	0xFF7
 19222                           tblptrl	equ	0xFF6
 19223                           tablat	equ	0xFF5
 19224                           prodh	equ	0xFF4
 19225                           prodl	equ	0xFF3
 19226                           intcon	equ	0xFF2
 19227                           postinc0	equ	0xFEE
 19228                           wreg	equ	0xFE8
 19229                           indf1	equ	0xFE7
 19230                           postdec1	equ	0xFE5
 19231                           fsr1h	equ	0xFE2
 19232                           fsr1l	equ	0xFE1
 19233                           indf2	equ	0xFDF
 19234                           postinc2	equ	0xFDE
 19235                           postdec2	equ	0xFDD
 19236                           plusw2	equ	0xFDB
 19237                           fsr2h	equ	0xFDA
 19238                           fsr2l	equ	0xFD9
 19239                           status	equ	0xFD8
 19240                           
 19241 ;; *************** function _delay_us *****************
 19242 ;; Defined at:
 19243 ;;		line 255 in file "Library/Types.c"
 19244 ;; Parameters:    Size  Location     Type
 19245 ;;  us              2    0[BANK0 ] unsigned short 
 19246 ;; Auto vars:     Size  Location     Type
 19247 ;;  u               4    2[BANK0 ] unsigned long 
 19248 ;; Return value:  Size  Location     Type
 19249 ;;                  1    wreg      void 
 19250 ;; Registers used:
 19251 ;;		wreg, status,2, status,0
 19252 ;; Tracked objects:
 19253 ;;		On entry : 0/0
 19254 ;;		On exit  : 0/0
 19255 ;;		Unchanged: 0/0
 19256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19257 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19258 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19260 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19261 ;;Total ram usage:        6 bytes
 19262 ;; Hardware stack levels used:    1
 19263 ;; Hardware stack levels required when called:    7
 19264 ;; This function calls:
 19265 ;;		Nothing
 19266 ;; This function is called by:
 19267 ;;		_MXK_BlockSwitchTo
 19268 ;;		_MXK_SwitchTo
 19269 ;; This function uses a non-reentrant model
 19270 ;;
 19271                           
 19272                           	psect	text85
 19273  015E70                     __ptext85:
 19274                           	opt stack 0
 19275  015E70                     _delay_us:
 19276                           	opt stack 19
 19277                           
 19278                           ;Types.c: 256: unsigned long u;
 19279                           ;Types.c: 257: while (us--) {
 19280                           
 19281                           ;incstack = 0
 19282  015E70  D01C               	goto	l12275
 19283  015E72                     l12267:
 19284                           
 19285                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19286  015E72  0E00               	movlw	0
 19287  015E74  0100               	movlb	0	; () banked
 19288  015E76  6F62               	movwf	delay_us@u& (0+255),b
 19289  015E78  0E00               	movlw	0
 19290  015E7A  6F63               	movwf	(delay_us@u+1)& (0+255),b
 19291  015E7C  0E00               	movlw	0
 19292  015E7E  6F64               	movwf	(delay_us@u+2)& (0+255),b
 19293  015E80  0E00               	movlw	0
 19294  015E82  6F65               	movwf	(delay_us@u+3)& (0+255),b
 19295  015E84                     l12269:
 19296                           
 19297                           ; BSR set to: 0
 19298  015E84  0100               	movlb	0	; () banked
 19299  015E86  5162               	movf	delay_us@u& (0+255),w,b
 19300  015E88  0100               	movlb	0	; () banked
 19301  015E8A  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 19302  015E8C  0100               	movlb	0	; () banked
 19303  015E8E  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 19304  015E90  0100               	movlb	0	; () banked
 19305  015E92  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 19306  015E94  A4D8               	btfss	status,2,c
 19307  015E96  D009               	goto	l12275
 19308                           
 19309                           ; BSR set to: 0
 19310                           
 19311                           ; BSR set to: 0
 19312  015E98  F000               	nop		; ;# 
 19313  015E9A  0E01               	movlw	1
 19314  015E9C  0100               	movlb	0	; () banked
 19315  015E9E  2762               	addwf	delay_us@u& (0+255),f,b
 19316  015EA0  0E00               	movlw	0
 19317  015EA2  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 19318  015EA4  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 19319  015EA6  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 19320  015EA8  D7ED               	goto	l12269
 19321  015EAA                     l12275:
 19322  015EAA  0100               	movlb	0	; () banked
 19323  015EAC  0760               	decf	delay_us@us& (0+255),f,b
 19324  015EAE  A0D8               	btfss	status,0,c
 19325  015EB0  0761               	decf	(delay_us@us+1)& (0+255),f,b
 19326  015EB2  0100               	movlb	0	; () banked
 19327  015EB4  2960               	incf	delay_us@us& (0+255),w,b
 19328  015EB6  E1DD               	bnz	l12267
 19329  015EB8  0100               	movlb	0	; () banked
 19330  015EBA  2961               	incf	(delay_us@us+1)& (0+255),w,b
 19331  015EBC  B4D8               	btfsc	status,2,c
 19332  015EBE  0012               	return	
 19333  015EC0  D7D8               	goto	l12267
 19334  015EC2                     __end_of_delay_us:
 19335                           	opt stack 0
 19336                           tosu	equ	0xFFF
 19337                           tosh	equ	0xFFE
 19338                           tosl	equ	0xFFD
 19339                           pclath	equ	0xFFA
 19340                           tblptru	equ	0xFF8
 19341                           tblptrh	equ	0xFF7
 19342                           tblptrl	equ	0xFF6
 19343                           tablat	equ	0xFF5
 19344                           prodh	equ	0xFF4
 19345                           prodl	equ	0xFF3
 19346                           intcon	equ	0xFF2
 19347                           postinc0	equ	0xFEE
 19348                           wreg	equ	0xFE8
 19349                           indf1	equ	0xFE7
 19350                           postdec1	equ	0xFE5
 19351                           fsr1h	equ	0xFE2
 19352                           fsr1l	equ	0xFE1
 19353                           indf2	equ	0xFDF
 19354                           postinc2	equ	0xFDE
 19355                           postdec2	equ	0xFDD
 19356                           plusw2	equ	0xFDB
 19357                           fsr2h	equ	0xFDA
 19358                           fsr2l	equ	0xFD9
 19359                           status	equ	0xFD8
 19360                           
 19361 ;; *************** function _LCD_Init *****************
 19362 ;; Defined at:
 19363 ;;		line 172 in file "Library/LCD.c"
 19364 ;; Parameters:    Size  Location     Type
 19365 ;;		None
 19366 ;; Auto vars:     Size  Location     Type
 19367 ;;  i               2   55[BANK0 ] unsigned short 
 19368 ;; Return value:  Size  Location     Type
 19369 ;;                  1    wreg      void 
 19370 ;; Registers used:
 19371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19372 ;; Tracked objects:
 19373 ;;		On entry : 0/0
 19374 ;;		On exit  : 0/0
 19375 ;;		Unchanged: 0/0
 19376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19380 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19381 ;;Total ram usage:        4 bytes
 19382 ;; Hardware stack levels used:    1
 19383 ;; Hardware stack levels required when called:   15
 19384 ;; This function calls:
 19385 ;;		_Configure_GPIOs
 19386 ;;		_LCD_Fill
 19387 ;;		_LCD_Write
 19388 ;;		_Set_Rotation
 19389 ;;		_delay_ms
 19390 ;; This function is called by:
 19391 ;;		_init
 19392 ;; This function uses a non-reentrant model
 19393 ;;
 19394                           
 19395                           	psect	text86
 19396  0133D4                     __ptext86:
 19397                           	opt stack 0
 19398  0133D4                     _LCD_Init:
 19399                           	opt stack 14
 19400                           
 19401                           ;LCD.c: 174: UINT16 i;
 19402                           ;LCD.c: 175: Configure_GPIOs();
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;incstack = 0
 19406  0133D4  ECD7  F0AC         	call	_Configure_GPIOs	;wreg free
 19407                           
 19408                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 19409  0133D8  0E00               	movlw	0
 19410  0133DA  0100               	movlb	0	; () banked
 19411  0133DC  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 19412  0133DE  0E00               	movlw	0
 19413  0133E0  6F97               	movwf	LCD_Init@i& (0+255),b
 19414                           
 19415                           ; BSR set to: 0
 19416  0133E2  0100               	movlb	0	; () banked
 19417  0133E4  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19418  0133E6  E106               	bnz	u11710
 19419  0133E8  0E59               	movlw	89
 19420  0133EA  0100               	movlb	0	; () banked
 19421  0133EC  5D97               	subwf	LCD_Init@i& (0+255),w,b
 19422  0133EE  B0D8               	btfsc	status,0,c
 19423  0133F0  D08B               	goto	l14001
 19424  0133F2  D001               	goto	l13985
 19425  0133F4                     u11710:
 19426                           
 19427                           ; BSR set to: 0
 19428  0133F4  D089               	goto	l14001
 19429  0133F6                     l13985:
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;LCD.c: 178: {
 19433                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19434  0133F6  90D8               	bcf	status,0,c
 19435  0133F8  0100               	movlb	0	; () banked
 19436  0133FA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19437  0133FC  6EF6               	movwf	tblptrl,c
 19438  0133FE  0100               	movlb	0	; () banked
 19439  013400  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19440  013402  6EF7               	movwf	tblptrh,c
 19441  013404  0E57               	movlw	low _InitList
 19442  013406  26F6               	addwf	tblptrl,f,c
 19443  013408  0EFC               	movlw	high _InitList
 19444  01340A  22F7               	addwfc	tblptrh,f,c
 19445  01340C                     	if	1	;There are 3 active tblptr bytes
 19446  01340C  6AF8               	clrf	tblptru,c
 19447  01340E  0E00               	movlw	low (__mediumconst shr (0+16))
 19448  013410  22F8               	addwfc	tblptru,f,c
 19449  013412                     	endif
 19450  013412  0009               	tblrd		*+
 19451  013414  0E80               	movlw	128
 19452  013416  18F5               	xorwf	tablat,w,c
 19453  013418  0009               	tblrd		*+
 19454  01341A  10F5               	iorwf	tablat,w,c
 19455  01341C  A4D8               	btfss	status,2,c
 19456  01341E  D022               	goto	l13991
 19457                           
 19458                           ; BSR set to: 0
 19459  013420  0100               	movlb	0	; () banked
 19460  013422  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19461  013424  E11F               	bnz	l13991
 19462  013426  0E58               	movlw	88
 19463  013428  0100               	movlb	0	; () banked
 19464  01342A  5D97               	subwf	LCD_Init@i& (0+255),w,b
 19465  01342C  B0D8               	btfsc	status,0,c
 19466  01342E  D01A               	goto	l13991
 19467                           
 19468                           ; BSR set to: 0
 19469                           ;LCD.c: 180: delay_ms(InitList[++i]);
 19470  013430  0100               	movlb	0	; () banked
 19471  013432  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 19472  013434  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 19473  013436  90D8               	bcf	status,0,c
 19474  013438  0100               	movlb	0	; () banked
 19475  01343A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19476  01343C  6EF6               	movwf	tblptrl,c
 19477  01343E  0100               	movlb	0	; () banked
 19478  013440  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19479  013442  6EF7               	movwf	tblptrh,c
 19480  013444  0E57               	movlw	low _InitList
 19481  013446  26F6               	addwf	tblptrl,f,c
 19482  013448  0EFC               	movlw	high _InitList
 19483  01344A  22F7               	addwfc	tblptrh,f,c
 19484  01344C                     	if	1	;There are 3 active tblptr bytes
 19485  01344C  6AF8               	clrf	tblptru,c
 19486  01344E  0E00               	movlw	low (__mediumconst shr (0+16))
 19487  013450  22F8               	addwfc	tblptru,f,c
 19488  013452                     	endif
 19489  013452  0009               	tblrd		*+
 19490  013454  CFF5 F060          	movff	tablat,delay_ms@ms
 19491  013458  000A               	tblrd		*-
 19492  01345A  CFF5 F061          	movff	tablat,delay_ms@ms+1
 19493  01345E  EC7B  F0AD         	call	_delay_ms	;wreg free
 19494  013462  D04B               	goto	l13997
 19495  013464                     l13991:
 19496                           
 19497                           ;LCD.c: 181: else
 19498                           ;LCD.c: 182: {
 19499                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 19500  013464  90D8               	bcf	status,0,c
 19501  013466  0100               	movlb	0	; () banked
 19502  013468  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19503  01346A  6EF6               	movwf	tblptrl,c
 19504  01346C  0100               	movlb	0	; () banked
 19505  01346E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19506  013470  6EF7               	movwf	tblptrh,c
 19507  013472  0E57               	movlw	low _InitList
 19508  013474  26F6               	addwf	tblptrl,f,c
 19509  013476  0EFC               	movlw	high _InitList
 19510  013478  22F7               	addwfc	tblptrh,f,c
 19511  01347A                     	if	1	;There are 3 active tblptr bytes
 19512  01347A  6AF8               	clrf	tblptru,c
 19513  01347C  0E00               	movlw	low (__mediumconst shr (0+16))
 19514  01347E  22F8               	addwfc	tblptru,f,c
 19515  013480                     	endif
 19516  013480  0009               	tblrd		*+
 19517  013482  0E00               	movlw	0
 19518  013484  5EF5               	subwf	tablat,f,c
 19519  013486  0009               	tblrd		*+
 19520  013488  0E01               	movlw	1
 19521  01348A  5AF5               	subwfb	tablat,f,c
 19522  01348C  A0D8               	btfss	status,0,c
 19523  01348E  D020               	goto	l13995
 19524                           
 19525                           ; BSR set to: 0
 19526  013490  0E00               	movlw	0
 19527  013492  0100               	movlb	0	; () banked
 19528  013494  6F63               	movwf	LCD_Write@mode& (0+255),b
 19529  013496  90D8               	bcf	status,0,c
 19530  013498  0100               	movlb	0	; () banked
 19531  01349A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19532  01349C  6EF6               	movwf	tblptrl,c
 19533  01349E  0100               	movlb	0	; () banked
 19534  0134A0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19535  0134A2  6EF7               	movwf	tblptrh,c
 19536  0134A4  0E57               	movlw	low _InitList
 19537  0134A6  26F6               	addwf	tblptrl,f,c
 19538  0134A8  0EFC               	movlw	high _InitList
 19539  0134AA  22F7               	addwfc	tblptrh,f,c
 19540  0134AC                     	if	1	;There are 3 active tblptr bytes
 19541  0134AC  6AF8               	clrf	tblptru,c
 19542  0134AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19543  0134B0  22F8               	addwfc	tblptru,f,c
 19544  0134B2                     	endif
 19545  0134B2  0009               	tblrd		*+
 19546  0134B4  CFF5 F095          	movff	tablat,??_LCD_Init
 19547  0134B8  0009               	tblrd		*+
 19548  0134BA  CFF5 F096          	movff	tablat,??_LCD_Init+1
 19549  0134BE  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 19550  0134C2  0100               	movlb	0	; () banked
 19551  0134C4  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 19552  0134C6  0100               	movlb	0	; () banked
 19553  0134C8  5195               	movf	??_LCD_Init& (0+255),w,b
 19554  0134CA  EC76  F0B3         	call	_LCD_Write
 19555  0134CE  D015               	goto	l13997
 19556  0134D0                     l13995:
 19557                           
 19558                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 19559  0134D0  0E01               	movlw	1
 19560  0134D2  0100               	movlb	0	; () banked
 19561  0134D4  6F63               	movwf	LCD_Write@mode& (0+255),b
 19562  0134D6  90D8               	bcf	status,0,c
 19563  0134D8  0100               	movlb	0	; () banked
 19564  0134DA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19565  0134DC  6EF6               	movwf	tblptrl,c
 19566  0134DE  0100               	movlb	0	; () banked
 19567  0134E0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19568  0134E2  6EF7               	movwf	tblptrh,c
 19569  0134E4  0E57               	movlw	low _InitList
 19570  0134E6  26F6               	addwf	tblptrl,f,c
 19571  0134E8  0EFC               	movlw	high _InitList
 19572  0134EA  22F7               	addwfc	tblptrh,f,c
 19573  0134EC                     	if	1	;There are 3 active tblptr bytes
 19574  0134EC  6AF8               	clrf	tblptru,c
 19575  0134EE  0E00               	movlw	low (__mediumconst shr (0+16))
 19576  0134F0  22F8               	addwfc	tblptru,f,c
 19577  0134F2                     	endif
 19578  0134F2  0008               	tblrd		*
 19579  0134F4  50F5               	movf	tablat,w,c
 19580  0134F6  EC76  F0B3         	call	_LCD_Write
 19581  0134FA                     l13997:
 19582  0134FA  0100               	movlb	0	; () banked
 19583  0134FC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 19584  0134FE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 19585                           
 19586                           ; BSR set to: 0
 19587  013500  0100               	movlb	0	; () banked
 19588  013502  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19589  013504  E101               	bnz	l14001
 19590  013506  D770               	goto	L13
 19591  013508                     l14001:
 19592                           
 19593                           ; BSR set to: 0
 19594                           ;LCD.c: 185: }
 19595                           ;LCD.c: 186: }
 19596                           ;LCD.c: 187: delay_ms(100);
 19597  013508  0E00               	movlw	0
 19598  01350A  0100               	movlb	0	; () banked
 19599  01350C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19600  01350E  0E64               	movlw	100
 19601  013510  6F60               	movwf	delay_ms@ms& (0+255),b
 19602  013512  EC7B  F0AD         	call	_delay_ms	;wreg free
 19603                           
 19604                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 19605  013516  0E00               	movlw	0
 19606  013518  0100               	movlb	0	; () banked
 19607  01351A  6F63               	movwf	LCD_Write@mode& (0+255),b
 19608  01351C  0E29               	movlw	41
 19609  01351E  EC76  F0B3         	call	_LCD_Write
 19610                           
 19611                           ;LCD.c: 189: Set_Rotation(1);
 19612  013522  0E01               	movlw	1
 19613  013524  ECCF  F0A8         	call	_Set_Rotation
 19614                           
 19615                           ;LCD.c: 191: delay_ms(100);
 19616  013528  0E00               	movlw	0
 19617  01352A  0100               	movlb	0	; () banked
 19618  01352C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19619  01352E  0E64               	movlw	100
 19620  013530  6F60               	movwf	delay_ms@ms& (0+255),b
 19621  013532  EC7B  F0AD         	call	_delay_ms	;wreg free
 19622                           
 19623                           ;LCD.c: 192: LCD_Fill(0x0000);
 19624  013536  0E00               	movlw	0
 19625  013538  0100               	movlb	0	; () banked
 19626  01353A  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 19627  01353C  0E00               	movlw	0
 19628  01353E  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 19629  013540  EC0C  F0AF         	call	_LCD_Fill	;wreg free
 19630  013544  0012               	return		;funcret
 19631  013546                     __end_of_LCD_Init:
 19632                           	opt stack 0
 19633                           tosu	equ	0xFFF
 19634                           tosh	equ	0xFFE
 19635                           tosl	equ	0xFFD
 19636                           pclath	equ	0xFFA
 19637                           tblptru	equ	0xFF8
 19638                           tblptrh	equ	0xFF7
 19639                           tblptrl	equ	0xFF6
 19640                           tablat	equ	0xFF5
 19641                           prodh	equ	0xFF4
 19642                           prodl	equ	0xFF3
 19643                           intcon	equ	0xFF2
 19644                           postinc0	equ	0xFEE
 19645                           wreg	equ	0xFE8
 19646                           indf1	equ	0xFE7
 19647                           postdec1	equ	0xFE5
 19648                           fsr1h	equ	0xFE2
 19649                           fsr1l	equ	0xFE1
 19650                           indf2	equ	0xFDF
 19651                           postinc2	equ	0xFDE
 19652                           postdec2	equ	0xFDD
 19653                           plusw2	equ	0xFDB
 19654                           fsr2h	equ	0xFDA
 19655                           fsr2l	equ	0xFD9
 19656                           status	equ	0xFD8
 19657                           
 19658 ;; *************** function _Set_Rotation *****************
 19659 ;; Defined at:
 19660 ;;		line 248 in file "Library/LCD.c"
 19661 ;; Parameters:    Size  Location     Type
 19662 ;;  m               1    wreg     unsigned char 
 19663 ;; Auto vars:     Size  Location     Type
 19664 ;;  m               1    5[BANK0 ] unsigned char 
 19665 ;;  rotation        1    6[BANK0 ] unsigned char 
 19666 ;; Return value:  Size  Location     Type
 19667 ;;                  1    wreg      void 
 19668 ;; Registers used:
 19669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19670 ;; Tracked objects:
 19671 ;;		On entry : 0/0
 19672 ;;		On exit  : 0/0
 19673 ;;		Unchanged: 0/0
 19674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19678 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19679 ;;Total ram usage:        2 bytes
 19680 ;; Hardware stack levels used:    1
 19681 ;; Hardware stack levels required when called:    9
 19682 ;; This function calls:
 19683 ;;		_LCD_Write
 19684 ;; This function is called by:
 19685 ;;		_LCD_Init
 19686 ;; This function uses a non-reentrant model
 19687 ;;
 19688                           
 19689                           	psect	text87
 19690  01519E                     __ptext87:
 19691                           	opt stack 0
 19692  01519E                     _Set_Rotation:
 19693                           	opt stack 19
 19694                           
 19695                           ;incstack = 0
 19696                           ;Set_Rotation@m stored from wreg
 19697  01519E  0100               	movlb	0	; () banked
 19698  0151A0  6F65               	movwf	Set_Rotation@m& (0+255),b
 19699                           
 19700                           ;LCD.c: 250: UINT8 rotation = 0x00;
 19701  0151A2  0E00               	movlw	0
 19702  0151A4  0100               	movlb	0	; () banked
 19703  0151A6  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 19704                           
 19705                           ; BSR set to: 0
 19706                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 19707  0151A8  0E00               	movlw	0
 19708  0151AA  0100               	movlb	0	; () banked
 19709  0151AC  6F63               	movwf	LCD_Write@mode& (0+255),b
 19710  0151AE  0E36               	movlw	54
 19711  0151B0  EC76  F0B3         	call	_LCD_Write
 19712                           
 19713                           ;LCD.c: 253: rotation = (m % 4);
 19714  0151B4  0100               	movlb	0	; () banked
 19715  0151B6  5165               	movf	Set_Rotation@m& (0+255),w,b
 19716  0151B8  0B03               	andlw	3
 19717  0151BA  0100               	movlb	0	; () banked
 19718  0151BC  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 19719                           
 19720                           ;LCD.c: 255: switch(rotation)
 19721  0151BE  D02C               	goto	l13607
 19722  0151C0                     l13581:
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;LCD.c: 258: {
 19726                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 19727  0151C0  0E01               	movlw	1
 19728  0151C2  0100               	movlb	0	; () banked
 19729  0151C4  6F63               	movwf	LCD_Write@mode& (0+255),b
 19730  0151C6  0EC8               	movlw	200
 19731  0151C8  EC76  F0B3         	call	_LCD_Write
 19732                           
 19733                           ;LCD.c: 260: w = 128;
 19734  0151CC  0E80               	movlw	128
 19735  0151CE  6E48               	movwf	_w,c
 19736                           
 19737                           ;LCD.c: 261: l = 128;
 19738  0151D0  0E80               	movlw	128
 19739  0151D2  6E47               	movwf	_l,c
 19740                           
 19741                           ;LCD.c: 262: break;
 19742  0151D4  0012               	return	
 19743  0151D6                     l13587:
 19744                           
 19745                           ;LCD.c: 265: {
 19746                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 19747  0151D6  0E01               	movlw	1
 19748  0151D8  0100               	movlb	0	; () banked
 19749  0151DA  6F63               	movwf	LCD_Write@mode& (0+255),b
 19750  0151DC  0EA8               	movlw	168
 19751  0151DE  EC76  F0B3         	call	_LCD_Write
 19752                           
 19753                           ;LCD.c: 267: w = 128;
 19754  0151E2  0E80               	movlw	128
 19755  0151E4  6E48               	movwf	_w,c
 19756                           
 19757                           ;LCD.c: 268: l = 128;
 19758  0151E6  0E80               	movlw	128
 19759  0151E8  6E47               	movwf	_l,c
 19760                           
 19761                           ;LCD.c: 269: break;
 19762  0151EA  0012               	return	
 19763  0151EC                     l13593:
 19764                           
 19765                           ;LCD.c: 272: {
 19766                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 19767  0151EC  0E01               	movlw	1
 19768  0151EE  0100               	movlb	0	; () banked
 19769  0151F0  6F63               	movwf	LCD_Write@mode& (0+255),b
 19770  0151F2  0E08               	movlw	8
 19771  0151F4  EC76  F0B3         	call	_LCD_Write
 19772                           
 19773                           ;LCD.c: 274: w = 128;
 19774  0151F8  0E80               	movlw	128
 19775  0151FA  6E48               	movwf	_w,c
 19776                           
 19777                           ;LCD.c: 275: l = 128;
 19778  0151FC  0E80               	movlw	128
 19779  0151FE  6E47               	movwf	_l,c
 19780                           
 19781                           ;LCD.c: 276: break;
 19782  015200  0012               	return	
 19783  015202                     l13599:
 19784                           
 19785                           ;LCD.c: 279: {
 19786                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 19787  015202  0E01               	movlw	1
 19788  015204  0100               	movlb	0	; () banked
 19789  015206  6F63               	movwf	LCD_Write@mode& (0+255),b
 19790  015208  0E68               	movlw	104
 19791  01520A  EC76  F0B3         	call	_LCD_Write
 19792                           
 19793                           ;LCD.c: 281: w = 128;
 19794  01520E  0E80               	movlw	128
 19795  015210  6E48               	movwf	_w,c
 19796                           
 19797                           ;LCD.c: 282: l = 128;
 19798  015212  0E80               	movlw	128
 19799  015214  6E47               	movwf	_l,c
 19800                           
 19801                           ;LCD.c: 284: }
 19802                           ;LCD.c: 285: }
 19803                           
 19804                           ;LCD.c: 283: break;
 19805  015216  0012               	return	
 19806  015218                     l13607:
 19807  015218  0100               	movlb	0	; () banked
 19808  01521A  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 19809                           
 19810                           ; Switch size 1, requested type "space"
 19811                           ; Number of cases is 4, Range of values is 0 to 3
 19812                           ; switch strategies available:
 19813                           ; Name         Instructions Cycles
 19814                           ; simple_byte           13     7 (average)
 19815                           ;	Chosen strategy is simple_byte
 19816  01521C  0A00               	xorlw	0	; case 0
 19817  01521E  B4D8               	btfsc	status,2,c
 19818  015220  D7CF               	goto	l13581
 19819  015222  0A01               	xorlw	1	; case 1
 19820  015224  B4D8               	btfsc	status,2,c
 19821  015226  D7D7               	goto	l13587
 19822  015228  0A03               	xorlw	3	; case 2
 19823  01522A  B4D8               	btfsc	status,2,c
 19824  01522C  D7DF               	goto	l13593
 19825  01522E  0A01               	xorlw	1	; case 3
 19826  015230  A4D8               	btfss	status,2,c
 19827  015232  0012               	return	
 19828  015234  D7E6               	goto	l13599
 19829  015236                     __end_of_Set_Rotation:
 19830                           	opt stack 0
 19831                           tosu	equ	0xFFF
 19832                           tosh	equ	0xFFE
 19833                           tosl	equ	0xFFD
 19834                           pclath	equ	0xFFA
 19835                           tblptru	equ	0xFF8
 19836                           tblptrh	equ	0xFF7
 19837                           tblptrl	equ	0xFF6
 19838                           tablat	equ	0xFF5
 19839                           prodh	equ	0xFF4
 19840                           prodl	equ	0xFF3
 19841                           intcon	equ	0xFF2
 19842                           postinc0	equ	0xFEE
 19843                           wreg	equ	0xFE8
 19844                           indf1	equ	0xFE7
 19845                           postdec1	equ	0xFE5
 19846                           fsr1h	equ	0xFE2
 19847                           fsr1l	equ	0xFE1
 19848                           indf2	equ	0xFDF
 19849                           postinc2	equ	0xFDE
 19850                           postdec2	equ	0xFDD
 19851                           plusw2	equ	0xFDB
 19852                           fsr2h	equ	0xFDA
 19853                           fsr2l	equ	0xFD9
 19854                           status	equ	0xFD8
 19855                           
 19856 ;; *************** function _LCD_Fill *****************
 19857 ;; Defined at:
 19858 ;;		line 287 in file "Library/LCD.c"
 19859 ;; Parameters:    Size  Location     Type
 19860 ;;  pColour         2    9[BANK0 ] unsigned short 
 19861 ;; Auto vars:     Size  Location     Type
 19862 ;;  j               1   12[BANK0 ] unsigned char 
 19863 ;;  i               1   11[BANK0 ] unsigned char 
 19864 ;; Return value:  Size  Location     Type
 19865 ;;                  1    wreg      void 
 19866 ;; Registers used:
 19867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19868 ;; Tracked objects:
 19869 ;;		On entry : 0/0
 19870 ;;		On exit  : 0/0
 19871 ;;		Unchanged: 0/0
 19872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19877 ;;Total ram usage:        4 bytes
 19878 ;; Hardware stack levels used:    1
 19879 ;; Hardware stack levels required when called:   10
 19880 ;; This function calls:
 19881 ;;		_LCD_Word_Write
 19882 ;;		_Set_Addr_Window
 19883 ;; This function is called by:
 19884 ;;		_LCD_Init
 19885 ;; This function uses a non-reentrant model
 19886 ;;
 19887                           
 19888                           	psect	text88
 19889  015E18                     __ptext88:
 19890                           	opt stack 0
 19891  015E18                     _LCD_Fill:
 19892                           	opt stack 18
 19893                           
 19894                           ;LCD.c: 296: UINT8 i = 0x00;
 19895                           
 19896                           ;incstack = 0
 19897  015E18  0E00               	movlw	0
 19898  015E1A  0100               	movlb	0	; () banked
 19899  015E1C  6F6B               	movwf	LCD_Fill@i& (0+255),b
 19900                           
 19901                           ;LCD.c: 297: UINT8 j = 0x00;
 19902  015E1E  0E00               	movlw	0
 19903  015E20  0100               	movlb	0	; () banked
 19904  015E22  6F6C               	movwf	LCD_Fill@j& (0+255),b
 19905                           
 19906                           ; BSR set to: 0
 19907                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 19908  015E24  0E00               	movlw	0
 19909  015E26  0100               	movlb	0	; () banked
 19910  015E28  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 19911  015E2A  0448               	decf	_w,w,c
 19912  015E2C  0100               	movlb	0	; () banked
 19913  015E2E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 19914  015E30  0447               	decf	_l,w,c
 19915  015E32  0100               	movlb	0	; () banked
 19916  015E34  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 19917  015E36  0E00               	movlw	0
 19918  015E38  EC3B  F0A6         	call	_Set_Addr_Window
 19919                           
 19920                           ;LCD.c: 299: for (j = l; j > 0; j--)
 19921  015E3C  C047  F06C         	movff	_l,LCD_Fill@j
 19922  015E40                     l13615:
 19923  015E40  0100               	movlb	0	; () banked
 19924  015E42  516C               	movf	LCD_Fill@j& (0+255),w,b
 19925  015E44  0100               	movlb	0	; () banked
 19926  015E46  B4D8               	btfsc	status,2,c
 19927  015E48  0012               	return	
 19928                           
 19929                           ; BSR set to: 0
 19930                           ;LCD.c: 300: for (i = w; i > 0; i--)
 19931                           
 19932                           ; BSR set to: 0
 19933  015E4A  C048  F06B         	movff	_w,LCD_Fill@i
 19934  015E4E                     l13619:
 19935                           
 19936                           ; BSR set to: 0
 19937  015E4E  0100               	movlb	0	; () banked
 19938  015E50  516B               	movf	LCD_Fill@i& (0+255),w,b
 19939  015E52  0100               	movlb	0	; () banked
 19940  015E54  B4D8               	btfsc	status,2,c
 19941  015E56  D009               	goto	l13629
 19942                           
 19943                           ; BSR set to: 0
 19944                           ;LCD.c: 301: LCD_Word_Write(pColour);
 19945                           
 19946                           ; BSR set to: 0
 19947                           
 19948                           ; BSR set to: 0
 19949  015E58  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 19950  015E5C  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 19951  015E60  ECA9  F0B3         	call	_LCD_Word_Write	;wreg free
 19952  015E64  0100               	movlb	0	; () banked
 19953  015E66  076B               	decf	LCD_Fill@i& (0+255),f,b
 19954  015E68  D7F2               	goto	l13619
 19955  015E6A                     l13629:
 19956                           
 19957                           ; BSR set to: 0
 19958  015E6A  0100               	movlb	0	; () banked
 19959  015E6C  076C               	decf	LCD_Fill@j& (0+255),f,b
 19960  015E6E  D7E8               	goto	l13615
 19961  015E70                     __end_of_LCD_Fill:
 19962                           	opt stack 0
 19963                           tosu	equ	0xFFF
 19964                           tosh	equ	0xFFE
 19965                           tosl	equ	0xFFD
 19966                           pclath	equ	0xFFA
 19967                           tblptru	equ	0xFF8
 19968                           tblptrh	equ	0xFF7
 19969                           tblptrl	equ	0xFF6
 19970                           tablat	equ	0xFF5
 19971                           prodh	equ	0xFF4
 19972                           prodl	equ	0xFF3
 19973                           intcon	equ	0xFF2
 19974                           postinc0	equ	0xFEE
 19975                           wreg	equ	0xFE8
 19976                           indf1	equ	0xFE7
 19977                           postdec1	equ	0xFE5
 19978                           fsr1h	equ	0xFE2
 19979                           fsr1l	equ	0xFE1
 19980                           indf2	equ	0xFDF
 19981                           postinc2	equ	0xFDE
 19982                           postdec2	equ	0xFDD
 19983                           plusw2	equ	0xFDB
 19984                           fsr2h	equ	0xFDA
 19985                           fsr2l	equ	0xFD9
 19986                           status	equ	0xFD8
 19987                           
 19988 ;; *************** function _Set_Addr_Window *****************
 19989 ;; Defined at:
 19990 ;;		line 214 in file "Library/LCD.c"
 19991 ;; Parameters:    Size  Location     Type
 19992 ;;  xs              1    wreg     unsigned char 
 19993 ;;  ys              1    5[BANK0 ] unsigned char 
 19994 ;;  xe              1    6[BANK0 ] unsigned char 
 19995 ;;  ye              1    7[BANK0 ] unsigned char 
 19996 ;; Auto vars:     Size  Location     Type
 19997 ;;  xs              1    8[BANK0 ] unsigned char 
 19998 ;; Return value:  Size  Location     Type
 19999 ;;                  1    wreg      void 
 20000 ;; Registers used:
 20001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20002 ;; Tracked objects:
 20003 ;;		On entry : 0/0
 20004 ;;		On exit  : 0/0
 20005 ;;		Unchanged: 0/0
 20006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20007 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;Total ram usage:        4 bytes
 20012 ;; Hardware stack levels used:    1
 20013 ;; Hardware stack levels required when called:    9
 20014 ;; This function calls:
 20015 ;;		_LCD_Write
 20016 ;; This function is called by:
 20017 ;;		_LCD_Fill
 20018 ;;		_LCD_FillRectangle
 20019 ;;		_LCD_DrawField
 20020 ;;		_RAM_Address_Set
 20021 ;;		_LCD_DrawPixel
 20022 ;; This function uses a non-reentrant model
 20023 ;;
 20024                           
 20025                           	psect	text89
 20026  014C76                     __ptext89:
 20027                           	opt stack 0
 20028  014C76                     _Set_Addr_Window:
 20029                           	opt stack 18
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;incstack = 0
 20033                           ;Set_Addr_Window@xs stored from wreg
 20034  014C76  0100               	movlb	0	; () banked
 20035  014C78  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20036                           
 20037                           ;LCD.c: 216: ys+=2;
 20038  014C7A  0E02               	movlw	2
 20039  014C7C  0100               	movlb	0	; () banked
 20040  014C7E  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20041                           
 20042                           ;LCD.c: 217: ye+=2;
 20043  014C80  0E02               	movlw	2
 20044  014C82  0100               	movlb	0	; () banked
 20045  014C84  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20046                           
 20047                           ;LCD.c: 218: xs+=3;
 20048  014C86  0E03               	movlw	3
 20049  014C88  0100               	movlb	0	; () banked
 20050  014C8A  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20051                           
 20052                           ;LCD.c: 219: xe+=3;
 20053  014C8C  0E03               	movlw	3
 20054  014C8E  0100               	movlb	0	; () banked
 20055  014C90  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20059  014C92  0E00               	movlw	0
 20060  014C94  0100               	movlb	0	; () banked
 20061  014C96  6F63               	movwf	LCD_Write@mode& (0+255),b
 20062  014C98  0E2A               	movlw	42
 20063  014C9A  EC76  F0B3         	call	_LCD_Write
 20064                           
 20065                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20066  014C9E  0E01               	movlw	1
 20067  014CA0  0100               	movlb	0	; () banked
 20068  014CA2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20069  014CA4  0E00               	movlw	0
 20070  014CA6  EC76  F0B3         	call	_LCD_Write
 20071                           
 20072                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20073  014CAA  0E01               	movlw	1
 20074  014CAC  0100               	movlb	0	; () banked
 20075  014CAE  6F63               	movwf	LCD_Write@mode& (0+255),b
 20076  014CB0  0100               	movlb	0	; () banked
 20077  014CB2  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20078  014CB4  EC76  F0B3         	call	_LCD_Write
 20079                           
 20080                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20081  014CB8  0E01               	movlw	1
 20082  014CBA  0100               	movlb	0	; () banked
 20083  014CBC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20084  014CBE  0E00               	movlw	0
 20085  014CC0  EC76  F0B3         	call	_LCD_Write
 20086                           
 20087                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20088  014CC4  0E01               	movlw	1
 20089  014CC6  0100               	movlb	0	; () banked
 20090  014CC8  6F63               	movwf	LCD_Write@mode& (0+255),b
 20091  014CCA  0100               	movlb	0	; () banked
 20092  014CCC  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20093  014CCE  EC76  F0B3         	call	_LCD_Write
 20094                           
 20095                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20096  014CD2  0E00               	movlw	0
 20097  014CD4  0100               	movlb	0	; () banked
 20098  014CD6  6F63               	movwf	LCD_Write@mode& (0+255),b
 20099  014CD8  0E2B               	movlw	43
 20100  014CDA  EC76  F0B3         	call	_LCD_Write
 20101                           
 20102                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20103  014CDE  0E01               	movlw	1
 20104  014CE0  0100               	movlb	0	; () banked
 20105  014CE2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20106  014CE4  0E00               	movlw	0
 20107  014CE6  EC76  F0B3         	call	_LCD_Write
 20108                           
 20109                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20110  014CEA  0E01               	movlw	1
 20111  014CEC  0100               	movlb	0	; () banked
 20112  014CEE  6F63               	movwf	LCD_Write@mode& (0+255),b
 20113  014CF0  0100               	movlb	0	; () banked
 20114  014CF2  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20115  014CF4  EC76  F0B3         	call	_LCD_Write
 20116                           
 20117                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20118  014CF8  0E01               	movlw	1
 20119  014CFA  0100               	movlb	0	; () banked
 20120  014CFC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20121  014CFE  0E00               	movlw	0
 20122  014D00  EC76  F0B3         	call	_LCD_Write
 20123                           
 20124                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20125  014D04  0E01               	movlw	1
 20126  014D06  0100               	movlb	0	; () banked
 20127  014D08  6F63               	movwf	LCD_Write@mode& (0+255),b
 20128  014D0A  0100               	movlb	0	; () banked
 20129  014D0C  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20130  014D0E  EC76  F0B3         	call	_LCD_Write
 20131                           
 20132                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20133  014D12  0E00               	movlw	0
 20134  014D14  0100               	movlb	0	; () banked
 20135  014D16  6F63               	movwf	LCD_Write@mode& (0+255),b
 20136  014D18  0E2C               	movlw	44
 20137  014D1A  EC76  F0B3         	call	_LCD_Write
 20138  014D1E  0012               	return		;funcret
 20139  014D20                     __end_of_Set_Addr_Window:
 20140                           	opt stack 0
 20141                           tosu	equ	0xFFF
 20142                           tosh	equ	0xFFE
 20143                           tosl	equ	0xFFD
 20144                           pclath	equ	0xFFA
 20145                           tblptru	equ	0xFF8
 20146                           tblptrh	equ	0xFF7
 20147                           tblptrl	equ	0xFF6
 20148                           tablat	equ	0xFF5
 20149                           prodh	equ	0xFF4
 20150                           prodl	equ	0xFF3
 20151                           intcon	equ	0xFF2
 20152                           postinc0	equ	0xFEE
 20153                           wreg	equ	0xFE8
 20154                           indf1	equ	0xFE7
 20155                           postdec1	equ	0xFE5
 20156                           fsr1h	equ	0xFE2
 20157                           fsr1l	equ	0xFE1
 20158                           indf2	equ	0xFDF
 20159                           postinc2	equ	0xFDE
 20160                           postdec2	equ	0xFDD
 20161                           plusw2	equ	0xFDB
 20162                           fsr2h	equ	0xFDA
 20163                           fsr2l	equ	0xFD9
 20164                           status	equ	0xFD8
 20165                           
 20166 ;; *************** function _LCD_Word_Write *****************
 20167 ;; Defined at:
 20168 ;;		line 198 in file "Library/LCD.c"
 20169 ;; Parameters:    Size  Location     Type
 20170 ;;  value           2    5[BANK0 ] unsigned short 
 20171 ;; Auto vars:     Size  Location     Type
 20172 ;;		None
 20173 ;; Return value:  Size  Location     Type
 20174 ;;                  1    wreg      void 
 20175 ;; Registers used:
 20176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20177 ;; Tracked objects:
 20178 ;;		On entry : 0/0
 20179 ;;		On exit  : 0/0
 20180 ;;		Unchanged: 0/0
 20181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20182 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20186 ;;Total ram usage:        2 bytes
 20187 ;; Hardware stack levels used:    1
 20188 ;; Hardware stack levels required when called:    9
 20189 ;; This function calls:
 20190 ;;		_LCD_Write
 20191 ;; This function is called by:
 20192 ;;		_LCD_Fill
 20193 ;;		_LCD_FillRectangle
 20194 ;;		_LCD_DrawField
 20195 ;;		_LCD_DrawPixel
 20196 ;; This function uses a non-reentrant model
 20197 ;;
 20198                           
 20199                           	psect	text90
 20200  016752                     __ptext90:
 20201                           	opt stack 0
 20202  016752                     _LCD_Word_Write:
 20203                           	opt stack 18
 20204                           
 20205                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20206                           
 20207                           ;incstack = 0
 20208  016752  0E01               	movlw	1
 20209  016754  0100               	movlb	0	; () banked
 20210  016756  6F63               	movwf	LCD_Write@mode& (0+255),b
 20211  016758  0100               	movlb	0	; () banked
 20212  01675A  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20213  01675C  EC76  F0B3         	call	_LCD_Write
 20214                           
 20215                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20216  016760  0E01               	movlw	1
 20217  016762  0100               	movlb	0	; () banked
 20218  016764  6F63               	movwf	LCD_Write@mode& (0+255),b
 20219  016766  0100               	movlb	0	; () banked
 20220  016768  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 20221  01676A  EC76  F0B3         	call	_LCD_Write
 20222  01676E  0012               	return		;funcret
 20223  016770                     __end_of_LCD_Word_Write:
 20224                           	opt stack 0
 20225                           tosu	equ	0xFFF
 20226                           tosh	equ	0xFFE
 20227                           tosl	equ	0xFFD
 20228                           pclath	equ	0xFFA
 20229                           tblptru	equ	0xFF8
 20230                           tblptrh	equ	0xFF7
 20231                           tblptrl	equ	0xFF6
 20232                           tablat	equ	0xFF5
 20233                           prodh	equ	0xFF4
 20234                           prodl	equ	0xFF3
 20235                           intcon	equ	0xFF2
 20236                           postinc0	equ	0xFEE
 20237                           wreg	equ	0xFE8
 20238                           indf1	equ	0xFE7
 20239                           postdec1	equ	0xFE5
 20240                           fsr1h	equ	0xFE2
 20241                           fsr1l	equ	0xFE1
 20242                           indf2	equ	0xFDF
 20243                           postinc2	equ	0xFDE
 20244                           postdec2	equ	0xFDD
 20245                           plusw2	equ	0xFDB
 20246                           fsr2h	equ	0xFDA
 20247                           fsr2l	equ	0xFD9
 20248                           status	equ	0xFD8
 20249                           
 20250 ;; *************** function _LCD_Write *****************
 20251 ;; Defined at:
 20252 ;;		line 67 in file "Library/LCD.c"
 20253 ;; Parameters:    Size  Location     Type
 20254 ;;  value           1    wreg     unsigned char 
 20255 ;;  mode            1    3[BANK0 ] enum E6761
 20256 ;; Auto vars:     Size  Location     Type
 20257 ;;  value           1    4[BANK0 ] unsigned char 
 20258 ;; Return value:  Size  Location     Type
 20259 ;;                  1    wreg      void 
 20260 ;; Registers used:
 20261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20262 ;; Tracked objects:
 20263 ;;		On entry : 0/0
 20264 ;;		On exit  : 0/0
 20265 ;;		Unchanged: 0/0
 20266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20267 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20271 ;;Total ram usage:        2 bytes
 20272 ;; Hardware stack levels used:    1
 20273 ;; Hardware stack levels required when called:    8
 20274 ;; This function calls:
 20275 ;;		_Mode_Set
 20276 ;;		_SPI_Send
 20277 ;; This function is called by:
 20278 ;;		_LCD_Init
 20279 ;;		_LCD_Word_Write
 20280 ;;		_Set_Addr_Window
 20281 ;;		_Set_Rotation
 20282 ;;		_LCD_WriteCMD
 20283 ;;		_LCD_WriteData
 20284 ;;		_LCD_Data_Write
 20285 ;;		_LCD_Data_Write_4k
 20286 ;;		_Invert_Display
 20287 ;; This function uses a non-reentrant model
 20288 ;;
 20289                           
 20290                           	psect	text91
 20291  0166EC                     __ptext91:
 20292                           	opt stack 0
 20293  0166EC                     _LCD_Write:
 20294                           	opt stack 18
 20295                           
 20296                           ;incstack = 0
 20297                           ;LCD_Write@value stored from wreg
 20298  0166EC  0100               	movlb	0	; () banked
 20299  0166EE  6F64               	movwf	LCD_Write@value& (0+255),b
 20300                           
 20301                           ;LCD.c: 89: Mode_Set(mode);
 20302  0166F0  0100               	movlb	0	; () banked
 20303  0166F2  5163               	movf	LCD_Write@mode& (0+255),w,b
 20304  0166F4  EC9D  F0B4         	call	_Mode_Set
 20305                           
 20306                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20307  0166F8  0E5B               	movlw	low _SPI2
 20308  0166FA  0100               	movlb	0	; () banked
 20309  0166FC  6F60               	movwf	SPI_Send@pInput& (0+255),b
 20310  0166FE  0E01               	movlw	high _SPI2
 20311  016700  0100               	movlb	0	; () banked
 20312  016702  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20313  016704  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 20314  016708  EC45  F0AD         	call	_SPI_Send	;wreg free
 20315  01670C  0012               	return		;funcret
 20316  01670E                     __end_of_LCD_Write:
 20317                           	opt stack 0
 20318                           tosu	equ	0xFFF
 20319                           tosh	equ	0xFFE
 20320                           tosl	equ	0xFFD
 20321                           pclath	equ	0xFFA
 20322                           tblptru	equ	0xFF8
 20323                           tblptrh	equ	0xFF7
 20324                           tblptrl	equ	0xFF6
 20325                           tablat	equ	0xFF5
 20326                           prodh	equ	0xFF4
 20327                           prodl	equ	0xFF3
 20328                           intcon	equ	0xFF2
 20329                           postinc0	equ	0xFEE
 20330                           wreg	equ	0xFE8
 20331                           indf1	equ	0xFE7
 20332                           postdec1	equ	0xFE5
 20333                           fsr1h	equ	0xFE2
 20334                           fsr1l	equ	0xFE1
 20335                           indf2	equ	0xFDF
 20336                           postinc2	equ	0xFDE
 20337                           postdec2	equ	0xFDD
 20338                           plusw2	equ	0xFDB
 20339                           fsr2h	equ	0xFDA
 20340                           fsr2l	equ	0xFD9
 20341                           status	equ	0xFD8
 20342                           
 20343 ;; *************** function _SPI_Send *****************
 20344 ;; Defined at:
 20345 ;;		line 226 in file "Library/SPI.c"
 20346 ;; Parameters:    Size  Location     Type
 20347 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20348 ;;		 -> SPI1(11), SPI2(11), 
 20349 ;;  pData           1    2[BANK0 ] unsigned char 
 20350 ;; Auto vars:     Size  Location     Type
 20351 ;;		None
 20352 ;; Return value:  Size  Location     Type
 20353 ;;                  1    wreg      unsigned char 
 20354 ;; Registers used:
 20355 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20356 ;; Tracked objects:
 20357 ;;		On entry : 0/0
 20358 ;;		On exit  : 0/0
 20359 ;;		Unchanged: 0/0
 20360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20361 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20364 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20365 ;;Total ram usage:        3 bytes
 20366 ;; Hardware stack levels used:    1
 20367 ;; Hardware stack levels required when called:    7
 20368 ;; This function calls:
 20369 ;;		Nothing
 20370 ;; This function is called by:
 20371 ;;		_LCD_Write
 20372 ;;		_OutSeg
 20373 ;; This function uses a non-reentrant model
 20374 ;;
 20375                           
 20376                           	psect	text92
 20377  015A8A                     __ptext92:
 20378                           	opt stack 0
 20379  015A8A                     _SPI_Send:
 20380                           	opt stack 20
 20381                           
 20382                           ;SPI.c: 253: switch (pInput->mChannel)
 20383                           
 20384                           ;incstack = 0
 20385  015A8A  D026               	goto	l11937
 20386  015A8C                     l11919:
 20387                           
 20388                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 20389  015A8C  C0F0  FFD9         	movff	_PortC+4,fsr2l
 20390  015A90  C0F1  FFDA         	movff	_PortC+5,fsr2h
 20391  015A94  0100               	movlb	0	; () banked
 20392  015A96  94DF               	bcf	indf2,2,c
 20393                           
 20394                           ; BSR set to: 0
 20395                           ;SPI.c: 257: SSP1BUF = pData;
 20396  015A98  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 20397  015A9C                     l680:
 20398  015A9C  A0C7               	btfss	4039,0,c	;volatile
 20399  015A9E  D7FE               	goto	l680
 20400                           
 20401                           ;SPI.c: 259: pData = SSP1BUF;
 20402  015AA0  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 20403                           
 20404                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 20405  015AA4  C0F0  FFD9         	movff	_PortC+4,fsr2l
 20406  015AA8  C0F1  FFDA         	movff	_PortC+5,fsr2h
 20407  015AAC  0100               	movlb	0	; () banked
 20408  015AAE  84DF               	bsf	indf2,2,c
 20409                           
 20410                           ; BSR set to: 0
 20411                           ;SPI.c: 261: return pData;
 20412                           ;	Return value of _SPI_Send is never used
 20413  015AB0  0012               	return	
 20414  015AB2                     l11927:
 20415                           
 20416                           ; BSR set to: 0
 20417                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20418  015AB2  C192  FFD9         	movff	_PortD+4,fsr2l
 20419  015AB6  C193  FFDA         	movff	_PortD+5,fsr2h
 20420  015ABA  0101               	movlb	1	; () banked
 20421  015ABC  9EDF               	bcf	indf2,7,c
 20422                           
 20423                           ; BSR set to: 1
 20424                           ;SPI.c: 264: SSP2BUF = pData;
 20425  015ABE  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20426  015AC2                     l685:
 20427  015AC2  A06D               	btfss	3949,0,c	;volatile
 20428  015AC4  D7FE               	goto	l685
 20429                           
 20430                           ;SPI.c: 266: pData = SSP2BUF;
 20431  015AC6  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 20432                           
 20433                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20434  015ACA  C192  FFD9         	movff	_PortD+4,fsr2l
 20435  015ACE  C193  FFDA         	movff	_PortD+5,fsr2h
 20436  015AD2  0101               	movlb	1	; () banked
 20437  015AD4  8EDF               	bsf	indf2,7,c
 20438                           
 20439                           ; BSR set to: 1
 20440                           ;SPI.c: 269: };
 20441                           
 20442                           ; BSR set to: 1
 20443                           ;SPI.c: 268: return pData;
 20444                           ;	Return value of _SPI_Send is never used
 20445  015AD6  0012               	return	
 20446  015AD8                     l11937:
 20447  015AD8  0100               	movlb	0	; () banked
 20448  015ADA  EE20 F002          	lfsr	2,2
 20449  015ADE  5160               	movf	SPI_Send@pInput& (0+255),w,b
 20450  015AE0  26D9               	addwf	fsr2l,f,c
 20451  015AE2  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 20452  015AE4  22DA               	addwfc	fsr2h,f,c
 20453  015AE6  50DF               	movf	indf2,w,c
 20454                           
 20455                           ; Switch size 1, requested type "space"
 20456                           ; Number of cases is 2, Range of values is 0 to 1
 20457                           ; switch strategies available:
 20458                           ; Name         Instructions Cycles
 20459                           ; simple_byte            7     4 (average)
 20460                           ;	Chosen strategy is simple_byte
 20461  015AE8  0A00               	xorlw	0	; case 0
 20462  015AEA  B4D8               	btfsc	status,2,c
 20463  015AEC  D7CF               	goto	l11919
 20464  015AEE  0A01               	xorlw	1	; case 1
 20465  015AF0  A4D8               	btfss	status,2,c
 20466  015AF2  0012               	return	
 20467  015AF4  D7DE               	goto	l11927
 20468  015AF6                     __end_of_SPI_Send:
 20469                           	opt stack 0
 20470                           tosu	equ	0xFFF
 20471                           tosh	equ	0xFFE
 20472                           tosl	equ	0xFFD
 20473                           pclath	equ	0xFFA
 20474                           tblptru	equ	0xFF8
 20475                           tblptrh	equ	0xFF7
 20476                           tblptrl	equ	0xFF6
 20477                           tablat	equ	0xFF5
 20478                           prodh	equ	0xFF4
 20479                           prodl	equ	0xFF3
 20480                           intcon	equ	0xFF2
 20481                           postinc0	equ	0xFEE
 20482                           wreg	equ	0xFE8
 20483                           indf1	equ	0xFE7
 20484                           postdec1	equ	0xFE5
 20485                           fsr1h	equ	0xFE2
 20486                           fsr1l	equ	0xFE1
 20487                           indf2	equ	0xFDF
 20488                           postinc2	equ	0xFDE
 20489                           postdec2	equ	0xFDD
 20490                           plusw2	equ	0xFDB
 20491                           fsr2h	equ	0xFDA
 20492                           fsr2l	equ	0xFD9
 20493                           status	equ	0xFD8
 20494                           
 20495 ;; *************** function _Mode_Set *****************
 20496 ;; Defined at:
 20497 ;;		line 40 in file "Library/LCD.c"
 20498 ;; Parameters:    Size  Location     Type
 20499 ;;  pMode           1    wreg     enum E6761
 20500 ;; Auto vars:     Size  Location     Type
 20501 ;;  pMode           1    0[BANK0 ] enum E6761
 20502 ;; Return value:  Size  Location     Type
 20503 ;;                  1    wreg      void 
 20504 ;; Registers used:
 20505 ;;		wreg
 20506 ;; Tracked objects:
 20507 ;;		On entry : 0/0
 20508 ;;		On exit  : 0/0
 20509 ;;		Unchanged: 0/0
 20510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20515 ;;Total ram usage:        1 bytes
 20516 ;; Hardware stack levels used:    1
 20517 ;; Hardware stack levels required when called:    7
 20518 ;; This function calls:
 20519 ;;		Nothing
 20520 ;; This function is called by:
 20521 ;;		_LCD_Write
 20522 ;; This function uses a non-reentrant model
 20523 ;;
 20524                           
 20525                           	psect	text93
 20526  01693A                     __ptext93:
 20527                           	opt stack 0
 20528  01693A                     _Mode_Set:
 20529                           	opt stack 18
 20530                           
 20531                           ;incstack = 0
 20532                           ;Mode_Set@pMode stored from wreg
 20533  01693A  0100               	movlb	0	; () banked
 20534  01693C  6F60               	movwf	Mode_Set@pMode& (0+255),b
 20535                           
 20536                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 20537  01693E  0100               	movlb	0	; () banked
 20538  016940  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 20539  016942  D002               	bra	u9265
 20540  016944  9E85               	bcf	3973,7,c	;volatile
 20541  016946  D001               	bra	u9266
 20542  016948                     u9265:
 20543  016948  8E85               	bsf	3973,7,c	;volatile
 20544  01694A                     u9266:
 20545  01694A  0012               	return		;funcret
 20546  01694C                     __end_of_Mode_Set:
 20547                           	opt stack 0
 20548                           tosu	equ	0xFFF
 20549                           tosh	equ	0xFFE
 20550                           tosl	equ	0xFFD
 20551                           pclath	equ	0xFFA
 20552                           tblptru	equ	0xFF8
 20553                           tblptrh	equ	0xFF7
 20554                           tblptrl	equ	0xFF6
 20555                           tablat	equ	0xFF5
 20556                           prodh	equ	0xFF4
 20557                           prodl	equ	0xFF3
 20558                           intcon	equ	0xFF2
 20559                           postinc0	equ	0xFEE
 20560                           wreg	equ	0xFE8
 20561                           indf1	equ	0xFE7
 20562                           postdec1	equ	0xFE5
 20563                           fsr1h	equ	0xFE2
 20564                           fsr1l	equ	0xFE1
 20565                           indf2	equ	0xFDF
 20566                           postinc2	equ	0xFDE
 20567                           postdec2	equ	0xFDD
 20568                           plusw2	equ	0xFDB
 20569                           fsr2h	equ	0xFDA
 20570                           fsr2l	equ	0xFD9
 20571                           status	equ	0xFD8
 20572                           
 20573 ;; *************** function _Configure_GPIOs *****************
 20574 ;; Defined at:
 20575 ;;		line 46 in file "Library/LCD.c"
 20576 ;; Parameters:    Size  Location     Type
 20577 ;;		None
 20578 ;; Auto vars:     Size  Location     Type
 20579 ;;		None
 20580 ;; Return value:  Size  Location     Type
 20581 ;;                  1    wreg      void 
 20582 ;; Registers used:
 20583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20584 ;; Tracked objects:
 20585 ;;		On entry : 0/0
 20586 ;;		On exit  : 0/0
 20587 ;;		Unchanged: 0/0
 20588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20593 ;;Total ram usage:        0 bytes
 20594 ;; Hardware stack levels used:    1
 20595 ;; Hardware stack levels required when called:   14
 20596 ;; This function calls:
 20597 ;;		_LCD_Reset
 20598 ;;		_Port_SetPinType
 20599 ;;		_SPI_Init
 20600 ;;		_SPI_MaxSpeed
 20601 ;; This function is called by:
 20602 ;;		_LCD_Init
 20603 ;; This function uses a non-reentrant model
 20604 ;;
 20605                           
 20606                           	psect	text94
 20607  0159AE                     __ptext94:
 20608                           	opt stack 0
 20609  0159AE                     _Configure_GPIOs:
 20610                           	opt stack 14
 20611                           
 20612                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 20613                           
 20614                           ;incstack = 0
 20615  0159AE  0EAC               	movlw	low _PortF
 20616  0159B0  0100               	movlb	0	; () banked
 20617  0159B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20618  0159B4  0E01               	movlw	high _PortF
 20619  0159B6  0100               	movlb	0	; () banked
 20620  0159B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20621  0159BA  0E07               	movlw	7
 20622  0159BC  0100               	movlb	0	; () banked
 20623  0159BE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20624  0159C0  0E03               	movlw	3
 20625  0159C2  0100               	movlb	0	; () banked
 20626  0159C4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20627  0159C6  EC68  F094         	call	_Port_SetPinType	;wreg free
 20628                           
 20629                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 20630  0159CA  0EAC               	movlw	low _PortF
 20631  0159CC  0100               	movlb	0	; () banked
 20632  0159CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20633  0159D0  0E01               	movlw	high _PortF
 20634  0159D2  0100               	movlb	0	; () banked
 20635  0159D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20636  0159D6  0E06               	movlw	6
 20637  0159D8  0100               	movlb	0	; () banked
 20638  0159DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20639  0159DC  0E03               	movlw	3
 20640  0159DE  0100               	movlb	0	; () banked
 20641  0159E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20642  0159E2  EC68  F094         	call	_Port_SetPinType	;wreg free
 20643                           
 20644                           ;LCD.c: 55: LCD_Reset();
 20645  0159E6  EC89  F0AF         	call	_LCD_Reset	;wreg free
 20646                           
 20647                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 20648  0159EA  0EC0               	movlw	192
 20649  0159EC  0100               	movlb	0	; () banked
 20650  0159EE  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 20651  0159F0  0EC6               	movlw	198
 20652  0159F2  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20653  0159F4  0E2D               	movlw	45
 20654  0159F6  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20655  0159F8  0E00               	movlw	0
 20656  0159FA  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20657  0159FC  0E01               	movlw	1
 20658  0159FE  0100               	movlb	0	; () banked
 20659  015A00  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 20660  015A02  0E01               	movlw	1
 20661  015A04  0100               	movlb	0	; () banked
 20662  015A06  6F92               	movwf	SPI_Init@pMode& (0+255),b
 20663  015A08  ECA7  F084         	call	_SPI_Init	;wreg free
 20664                           
 20665                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 20666  015A0C  0E5B               	movlw	low _SPI2
 20667  015A0E  0100               	movlb	0	; () banked
 20668  015A10  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 20669  015A12  0E01               	movlw	high _SPI2
 20670  015A14  0100               	movlb	0	; () banked
 20671  015A16  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 20672  015A18  EC63  F0AC         	call	_SPI_MaxSpeed	;wreg free
 20673  015A1C  0012               	return		;funcret
 20674  015A1E                     __end_of_Configure_GPIOs:
 20675                           	opt stack 0
 20676                           tosu	equ	0xFFF
 20677                           tosh	equ	0xFFE
 20678                           tosl	equ	0xFFD
 20679                           pclath	equ	0xFFA
 20680                           tblptru	equ	0xFF8
 20681                           tblptrh	equ	0xFF7
 20682                           tblptrl	equ	0xFF6
 20683                           tablat	equ	0xFF5
 20684                           prodh	equ	0xFF4
 20685                           prodl	equ	0xFF3
 20686                           intcon	equ	0xFF2
 20687                           postinc0	equ	0xFEE
 20688                           wreg	equ	0xFE8
 20689                           indf1	equ	0xFE7
 20690                           postdec1	equ	0xFE5
 20691                           fsr1h	equ	0xFE2
 20692                           fsr1l	equ	0xFE1
 20693                           indf2	equ	0xFDF
 20694                           postinc2	equ	0xFDE
 20695                           postdec2	equ	0xFDD
 20696                           plusw2	equ	0xFDB
 20697                           fsr2h	equ	0xFDA
 20698                           fsr2l	equ	0xFD9
 20699                           status	equ	0xFD8
 20700                           
 20701 ;; *************** function _SPI_MaxSpeed *****************
 20702 ;; Defined at:
 20703 ;;		line 201 in file "Library/SPI.c"
 20704 ;; Parameters:    Size  Location     Type
 20705 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20706 ;;		 -> SPI2(11), 
 20707 ;; Auto vars:     Size  Location     Type
 20708 ;;		None
 20709 ;; Return value:  Size  Location     Type
 20710 ;;                  1    wreg      void 
 20711 ;; Registers used:
 20712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20713 ;; Tracked objects:
 20714 ;;		On entry : 0/0
 20715 ;;		On exit  : 0/0
 20716 ;;		Unchanged: 0/0
 20717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20718 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;Total ram usage:        2 bytes
 20723 ;; Hardware stack levels used:    1
 20724 ;; Hardware stack levels required when called:    9
 20725 ;; This function calls:
 20726 ;;		_Byte_SetBit
 20727 ;;		_Byte_SetQuad
 20728 ;; This function is called by:
 20729 ;;		_Configure_GPIOs
 20730 ;; This function uses a non-reentrant model
 20731 ;;
 20732                           
 20733                           	psect	text95
 20734  0158C6                     __ptext95:
 20735                           	opt stack 0
 20736  0158C6                     _SPI_MaxSpeed:
 20737                           	opt stack 18
 20738                           
 20739                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20740                           
 20741                           ;incstack = 0
 20742  0158C6  0100               	movlb	0	; () banked
 20743  0158C8  EE20 F006          	lfsr	2,6
 20744  0158CC  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20745  0158CE  26D9               	addwf	fsr2l,f,c
 20746  0158D0  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20747  0158D2  22DA               	addwfc	fsr2h,f,c
 20748  0158D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20749  0158D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20750  0158DC  0E05               	movlw	5
 20751  0158DE  0100               	movlb	0	; () banked
 20752  0158E0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20753  0158E2  0E00               	movlw	0
 20754  0158E4  0100               	movlb	0	; () banked
 20755  0158E6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20756  0158E8  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 20757                           
 20758                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 20759  0158EC  0100               	movlb	0	; () banked
 20760  0158EE  EE20 F006          	lfsr	2,6
 20761  0158F2  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20762  0158F4  26D9               	addwf	fsr2l,f,c
 20763  0158F6  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20764  0158F8  22DA               	addwfc	fsr2h,f,c
 20765  0158FA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 20766  0158FE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 20767  015902  0E00               	movlw	0
 20768  015904  0100               	movlb	0	; () banked
 20769  015906  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20770  015908  0E00               	movlw	0
 20771  01590A  0100               	movlb	0	; () banked
 20772  01590C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 20773  01590E  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 20774                           
 20775                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20776  015912  0100               	movlb	0	; () banked
 20777  015914  EE20 F006          	lfsr	2,6
 20778  015918  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20779  01591A  26D9               	addwf	fsr2l,f,c
 20780  01591C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20781  01591E  22DA               	addwfc	fsr2h,f,c
 20782  015920  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20783  015924  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20784  015928  0E05               	movlw	5
 20785  01592A  0100               	movlb	0	; () banked
 20786  01592C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20787  01592E  0E01               	movlw	1
 20788  015930  0100               	movlb	0	; () banked
 20789  015932  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20790  015934  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 20791  015938  0012               	return		;funcret
 20792  01593A                     __end_of_SPI_MaxSpeed:
 20793                           	opt stack 0
 20794                           tosu	equ	0xFFF
 20795                           tosh	equ	0xFFE
 20796                           tosl	equ	0xFFD
 20797                           pclath	equ	0xFFA
 20798                           tblptru	equ	0xFF8
 20799                           tblptrh	equ	0xFF7
 20800                           tblptrl	equ	0xFF6
 20801                           tablat	equ	0xFF5
 20802                           prodh	equ	0xFF4
 20803                           prodl	equ	0xFF3
 20804                           intcon	equ	0xFF2
 20805                           postinc0	equ	0xFEE
 20806                           wreg	equ	0xFE8
 20807                           indf1	equ	0xFE7
 20808                           postdec1	equ	0xFE5
 20809                           fsr1h	equ	0xFE2
 20810                           fsr1l	equ	0xFE1
 20811                           indf2	equ	0xFDF
 20812                           postinc2	equ	0xFDE
 20813                           postdec2	equ	0xFDD
 20814                           plusw2	equ	0xFDB
 20815                           fsr2h	equ	0xFDA
 20816                           fsr2l	equ	0xFD9
 20817                           status	equ	0xFD8
 20818                           
 20819 ;; *************** function _LCD_Reset *****************
 20820 ;; Defined at:
 20821 ;;		line 95 in file "Library/LCD.c"
 20822 ;; Parameters:    Size  Location     Type
 20823 ;;		None
 20824 ;; Auto vars:     Size  Location     Type
 20825 ;;		None
 20826 ;; Return value:  Size  Location     Type
 20827 ;;                  1    wreg      void 
 20828 ;; Registers used:
 20829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20830 ;; Tracked objects:
 20831 ;;		On entry : 0/0
 20832 ;;		On exit  : 0/0
 20833 ;;		Unchanged: 0/0
 20834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;Total ram usage:        0 bytes
 20840 ;; Hardware stack levels used:    1
 20841 ;; Hardware stack levels required when called:   13
 20842 ;; This function calls:
 20843 ;;		_LED_Toggle
 20844 ;;		_Reset_High
 20845 ;;		_Reset_Low
 20846 ;;		_delay_ms
 20847 ;; This function is called by:
 20848 ;;		_Configure_GPIOs
 20849 ;; This function uses a non-reentrant model
 20850 ;;
 20851                           
 20852                           	psect	text96
 20853  015F12                     __ptext96:
 20854                           	opt stack 0
 20855  015F12                     _LCD_Reset:
 20856                           	opt stack 14
 20857                           
 20858                           ;LCD.c: 97: Reset_High();
 20859                           
 20860                           ;incstack = 0
 20861  015F12  ECC7  F0B3         	call	_Reset_High	;wreg free
 20862                           
 20863                           ;LCD.c: 98: LED_Toggle(eLED2);
 20864  015F16  0E01               	movlw	1
 20865  015F18  EC6B  F0B0         	call	_LED_Toggle
 20866                           
 20867                           ;LCD.c: 99: delay_ms(0x80);
 20868  015F1C  0E00               	movlw	0
 20869  015F1E  0100               	movlb	0	; () banked
 20870  015F20  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20871  015F22  0E80               	movlw	128
 20872  015F24  6F60               	movwf	delay_ms@ms& (0+255),b
 20873  015F26  EC7B  F0AD         	call	_delay_ms	;wreg free
 20874                           
 20875                           ;LCD.c: 100: LED_Toggle(eLED2);
 20876  015F2A  0E01               	movlw	1
 20877  015F2C  EC6B  F0B0         	call	_LED_Toggle
 20878                           
 20879                           ;LCD.c: 101: Reset_Low();
 20880  015F30  ECB8  F0B3         	call	_Reset_Low	;wreg free
 20881                           
 20882                           ;LCD.c: 102: delay_ms(0x80);
 20883  015F34  0E00               	movlw	0
 20884  015F36  0100               	movlb	0	; () banked
 20885  015F38  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20886  015F3A  0E80               	movlw	128
 20887  015F3C  6F60               	movwf	delay_ms@ms& (0+255),b
 20888  015F3E  EC7B  F0AD         	call	_delay_ms	;wreg free
 20889                           
 20890                           ;LCD.c: 103: LED_Toggle(eLED2);
 20891  015F42  0E01               	movlw	1
 20892  015F44  EC6B  F0B0         	call	_LED_Toggle
 20893                           
 20894                           ;LCD.c: 104: Reset_High();
 20895  015F48  ECC7  F0B3         	call	_Reset_High	;wreg free
 20896                           
 20897                           ;LCD.c: 105: delay_ms(0x80);
 20898  015F4C  0E00               	movlw	0
 20899  015F4E  0100               	movlb	0	; () banked
 20900  015F50  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20901  015F52  0E80               	movlw	128
 20902  015F54  6F60               	movwf	delay_ms@ms& (0+255),b
 20903  015F56  EC7B  F0AD         	call	_delay_ms	;wreg free
 20904                           
 20905                           ;LCD.c: 106: LED_Toggle(eLED2);
 20906  015F5A  0E01               	movlw	1
 20907  015F5C  EC6B  F0B0         	call	_LED_Toggle
 20908  015F60  0012               	return		;funcret
 20909  015F62                     __end_of_LCD_Reset:
 20910                           	opt stack 0
 20911                           tosu	equ	0xFFF
 20912                           tosh	equ	0xFFE
 20913                           tosl	equ	0xFFD
 20914                           pclath	equ	0xFFA
 20915                           tblptru	equ	0xFF8
 20916                           tblptrh	equ	0xFF7
 20917                           tblptrl	equ	0xFF6
 20918                           tablat	equ	0xFF5
 20919                           prodh	equ	0xFF4
 20920                           prodl	equ	0xFF3
 20921                           intcon	equ	0xFF2
 20922                           postinc0	equ	0xFEE
 20923                           wreg	equ	0xFE8
 20924                           indf1	equ	0xFE7
 20925                           postdec1	equ	0xFE5
 20926                           fsr1h	equ	0xFE2
 20927                           fsr1l	equ	0xFE1
 20928                           indf2	equ	0xFDF
 20929                           postinc2	equ	0xFDE
 20930                           postdec2	equ	0xFDD
 20931                           plusw2	equ	0xFDB
 20932                           fsr2h	equ	0xFDA
 20933                           fsr2l	equ	0xFD9
 20934                           status	equ	0xFD8
 20935                           
 20936 ;; *************** function _delay_ms *****************
 20937 ;; Defined at:
 20938 ;;		line 240 in file "Library/Types.c"
 20939 ;; Parameters:    Size  Location     Type
 20940 ;;  ms              2    0[BANK0 ] unsigned short 
 20941 ;; Auto vars:     Size  Location     Type
 20942 ;;  u               4    2[BANK0 ] volatile unsigned long 
 20943 ;; Return value:  Size  Location     Type
 20944 ;;                  1    wreg      void 
 20945 ;; Registers used:
 20946 ;;		wreg, status,2, status,0
 20947 ;; Tracked objects:
 20948 ;;		On entry : 0/0
 20949 ;;		On exit  : 0/0
 20950 ;;		Unchanged: 0/0
 20951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20952 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20953 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20955 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20956 ;;Total ram usage:        6 bytes
 20957 ;; Hardware stack levels used:    1
 20958 ;; Hardware stack levels required when called:    7
 20959 ;; This function calls:
 20960 ;;		Nothing
 20961 ;; This function is called by:
 20962 ;;		_LCD_Reset
 20963 ;;		_LCD_Init
 20964 ;;		_MXK_Init
 20965 ;; This function uses a non-reentrant model
 20966 ;;
 20967                           
 20968                           	psect	text97
 20969  015AF6                     __ptext97:
 20970                           	opt stack 0
 20971  015AF6                     _delay_ms:
 20972                           	opt stack 21
 20973                           
 20974                           ;Types.c: 242: volatile unsigned long u;
 20975                           ;Types.c: 243: while (ms--)
 20976                           
 20977                           ;incstack = 0
 20978  015AF6  D01F               	goto	l12171
 20979  015AF8                     l12163:
 20980                           
 20981                           ;Types.c: 244: {
 20982                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 20983  015AF8  0E00               	movlw	0
 20984  015AFA  0100               	movlb	0	; () banked
 20985  015AFC  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 20986  015AFE  0E00               	movlw	0
 20987  015B00  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20988  015B02  0E00               	movlw	0
 20989  015B04  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20990  015B06  0E00               	movlw	0
 20991  015B08  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20992  015B0A                     l12165:
 20993                           
 20994                           ; BSR set to: 0
 20995  015B0A  0100               	movlb	0	; () banked
 20996  015B0C  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 20997  015B0E  0100               	movlb	0	; () banked
 20998  015B10  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 20999  015B12  E111               	bnz	l12171
 21000  015B14  0EB0               	movlw	176
 21001  015B16  0100               	movlb	0	; () banked
 21002  015B18  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 21003  015B1A  0E04               	movlw	4
 21004  015B1C  0100               	movlb	0	; () banked
 21005  015B1E  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 21006  015B20  B0D8               	btfsc	status,0,c
 21007  015B22  D009               	goto	l12171
 21008                           
 21009                           ; BSR set to: 0
 21010                           
 21011                           ; BSR set to: 0
 21012  015B24  F000               	nop		; ;# 
 21013  015B26  0E01               	movlw	1
 21014  015B28  0100               	movlb	0	; () banked
 21015  015B2A  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 21016  015B2C  0E00               	movlw	0
 21017  015B2E  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 21018  015B30  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 21019  015B32  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 21020  015B34  D7EA               	goto	l12165
 21021  015B36                     l12171:
 21022  015B36  0100               	movlb	0	; () banked
 21023  015B38  0760               	decf	delay_ms@ms& (0+255),f,b
 21024  015B3A  A0D8               	btfss	status,0,c
 21025  015B3C  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 21026  015B3E  0100               	movlb	0	; () banked
 21027  015B40  2960               	incf	delay_ms@ms& (0+255),w,b
 21028  015B42  E1DA               	bnz	l12163
 21029  015B44  0100               	movlb	0	; () banked
 21030  015B46  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 21031  015B48  A4D8               	btfss	status,2,c
 21032  015B4A  D7D6               	goto	l12163
 21033                           
 21034                           ; BSR set to: 0
 21035                           ;Types.c: 251: }
 21036                           ;Types.c: 252: }
 21037                           ;Types.c: 253: u = 0x8008;
 21038                           
 21039                           ; BSR set to: 0
 21040  015B4C  0E08               	movlw	8
 21041  015B4E  0100               	movlb	0	; () banked
 21042  015B50  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21043  015B52  0E80               	movlw	128
 21044  015B54  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21045  015B56  0E00               	movlw	0
 21046  015B58  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21047  015B5A  0E00               	movlw	0
 21048  015B5C  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21049                           
 21050                           ; BSR set to: 0
 21051  015B5E  0012               	return		;funcret
 21052  015B60                     __end_of_delay_ms:
 21053                           	opt stack 0
 21054                           tosu	equ	0xFFF
 21055                           tosh	equ	0xFFE
 21056                           tosl	equ	0xFFD
 21057                           pclath	equ	0xFFA
 21058                           tblptru	equ	0xFF8
 21059                           tblptrh	equ	0xFF7
 21060                           tblptrl	equ	0xFF6
 21061                           tablat	equ	0xFF5
 21062                           prodh	equ	0xFF4
 21063                           prodl	equ	0xFF3
 21064                           intcon	equ	0xFF2
 21065                           postinc0	equ	0xFEE
 21066                           wreg	equ	0xFE8
 21067                           indf1	equ	0xFE7
 21068                           postdec1	equ	0xFE5
 21069                           fsr1h	equ	0xFE2
 21070                           fsr1l	equ	0xFE1
 21071                           indf2	equ	0xFDF
 21072                           postinc2	equ	0xFDE
 21073                           postdec2	equ	0xFDD
 21074                           plusw2	equ	0xFDB
 21075                           fsr2h	equ	0xFDA
 21076                           fsr2l	equ	0xFD9
 21077                           status	equ	0xFD8
 21078                           
 21079 ;; *************** function _Reset_Low *****************
 21080 ;; Defined at:
 21081 ;;		line 32 in file "Library/LCD.c"
 21082 ;; Parameters:    Size  Location     Type
 21083 ;;		None
 21084 ;; Auto vars:     Size  Location     Type
 21085 ;;		None
 21086 ;; Return value:  Size  Location     Type
 21087 ;;                  1    wreg      void 
 21088 ;; Registers used:
 21089 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21090 ;; Tracked objects:
 21091 ;;		On entry : 0/0
 21092 ;;		On exit  : 0/0
 21093 ;;		Unchanged: 0/0
 21094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21099 ;;Total ram usage:        0 bytes
 21100 ;; Hardware stack levels used:    1
 21101 ;; Hardware stack levels required when called:   11
 21102 ;; This function calls:
 21103 ;;		_Port_SetPin
 21104 ;; This function is called by:
 21105 ;;		_LCD_Reset
 21106 ;; This function uses a non-reentrant model
 21107 ;;
 21108                           
 21109                           	psect	text98
 21110  016770                     __ptext98:
 21111                           	opt stack 0
 21112  016770                     _Reset_Low:
 21113                           	opt stack 15
 21114                           
 21115                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 21116                           
 21117                           ; BSR set to: 0
 21118                           ;incstack = 0
 21119  016770  0EAC               	movlw	low _PortF
 21120  016772  0100               	movlb	0	; () banked
 21121  016774  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21122  016776  0E01               	movlw	high _PortF
 21123  016778  0100               	movlb	0	; () banked
 21124  01677A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21125  01677C  0E06               	movlw	6
 21126  01677E  0100               	movlb	0	; () banked
 21127  016780  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21128  016782  0E01               	movlw	1
 21129  016784  0100               	movlb	0	; () banked
 21130  016786  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21131  016788  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 21132  01678C  0012               	return		;funcret
 21133  01678E                     __end_of_Reset_Low:
 21134                           	opt stack 0
 21135                           tosu	equ	0xFFF
 21136                           tosh	equ	0xFFE
 21137                           tosl	equ	0xFFD
 21138                           pclath	equ	0xFFA
 21139                           tblptru	equ	0xFF8
 21140                           tblptrh	equ	0xFF7
 21141                           tblptrl	equ	0xFF6
 21142                           tablat	equ	0xFF5
 21143                           prodh	equ	0xFF4
 21144                           prodl	equ	0xFF3
 21145                           intcon	equ	0xFF2
 21146                           postinc0	equ	0xFEE
 21147                           wreg	equ	0xFE8
 21148                           indf1	equ	0xFE7
 21149                           postdec1	equ	0xFE5
 21150                           fsr1h	equ	0xFE2
 21151                           fsr1l	equ	0xFE1
 21152                           indf2	equ	0xFDF
 21153                           postinc2	equ	0xFDE
 21154                           postdec2	equ	0xFDD
 21155                           plusw2	equ	0xFDB
 21156                           fsr2h	equ	0xFDA
 21157                           fsr2l	equ	0xFD9
 21158                           status	equ	0xFD8
 21159                           
 21160 ;; *************** function _Reset_High *****************
 21161 ;; Defined at:
 21162 ;;		line 36 in file "Library/LCD.c"
 21163 ;; Parameters:    Size  Location     Type
 21164 ;;		None
 21165 ;; Auto vars:     Size  Location     Type
 21166 ;;		None
 21167 ;; Return value:  Size  Location     Type
 21168 ;;                  1    wreg      void 
 21169 ;; Registers used:
 21170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21171 ;; Tracked objects:
 21172 ;;		On entry : 0/0
 21173 ;;		On exit  : 0/0
 21174 ;;		Unchanged: 0/0
 21175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21180 ;;Total ram usage:        0 bytes
 21181 ;; Hardware stack levels used:    1
 21182 ;; Hardware stack levels required when called:   11
 21183 ;; This function calls:
 21184 ;;		_Port_SetPin
 21185 ;; This function is called by:
 21186 ;;		_LCD_Reset
 21187 ;; This function uses a non-reentrant model
 21188 ;;
 21189                           
 21190                           	psect	text99
 21191  01678E                     __ptext99:
 21192                           	opt stack 0
 21193  01678E                     _Reset_High:
 21194                           	opt stack 15
 21195                           
 21196                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 21197                           
 21198                           ;incstack = 0
 21199  01678E  0EAC               	movlw	low _PortF
 21200  016790  0100               	movlb	0	; () banked
 21201  016792  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21202  016794  0E01               	movlw	high _PortF
 21203  016796  0100               	movlb	0	; () banked
 21204  016798  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21205  01679A  0E06               	movlw	6
 21206  01679C  0100               	movlb	0	; () banked
 21207  01679E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21208  0167A0  0E00               	movlw	0
 21209  0167A2  0100               	movlb	0	; () banked
 21210  0167A4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21211  0167A6  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 21212  0167AA  0012               	return		;funcret
 21213  0167AC                     __end_of_Reset_High:
 21214                           	opt stack 0
 21215                           tosu	equ	0xFFF
 21216                           tosh	equ	0xFFE
 21217                           tosl	equ	0xFFD
 21218                           pclath	equ	0xFFA
 21219                           tblptru	equ	0xFF8
 21220                           tblptrh	equ	0xFF7
 21221                           tblptrl	equ	0xFF6
 21222                           tablat	equ	0xFF5
 21223                           prodh	equ	0xFF4
 21224                           prodl	equ	0xFF3
 21225                           intcon	equ	0xFF2
 21226                           postinc0	equ	0xFEE
 21227                           wreg	equ	0xFE8
 21228                           indf1	equ	0xFE7
 21229                           postdec1	equ	0xFE5
 21230                           fsr1h	equ	0xFE2
 21231                           fsr1l	equ	0xFE1
 21232                           indf2	equ	0xFDF
 21233                           postinc2	equ	0xFDE
 21234                           postdec2	equ	0xFDD
 21235                           plusw2	equ	0xFDB
 21236                           fsr2h	equ	0xFDA
 21237                           fsr2l	equ	0xFD9
 21238                           status	equ	0xFD8
 21239                           
 21240 ;; *************** function _LED_Toggle *****************
 21241 ;; Defined at:
 21242 ;;		line 50 in file "Library/LED.c"
 21243 ;; Parameters:    Size  Location     Type
 21244 ;;  pLED            1    wreg     enum E6739
 21245 ;; Auto vars:     Size  Location     Type
 21246 ;;  pLED            1   24[BANK0 ] enum E6739
 21247 ;; Return value:  Size  Location     Type
 21248 ;;                  1    wreg      void 
 21249 ;; Registers used:
 21250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21251 ;; Tracked objects:
 21252 ;;		On entry : 0/0
 21253 ;;		On exit  : 0/0
 21254 ;;		Unchanged: 0/0
 21255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21260 ;;Total ram usage:        1 bytes
 21261 ;; Hardware stack levels used:    1
 21262 ;; Hardware stack levels required when called:   12
 21263 ;; This function calls:
 21264 ;;		_Port_TogglePin
 21265 ;; This function is called by:
 21266 ;;		_LCD_Reset
 21267 ;;		_Event_DIPSwitch
 21268 ;;		_Event_TestButton
 21269 ;;		_Event_ADCSequenceComplete
 21270 ;;		_Event_HMI_DIPSwitch
 21271 ;;		_Event_HMI_LeftButton
 21272 ;;		_Event_HMI_RightButton
 21273 ;;		_Event_HMI_UpButton
 21274 ;;		_Event_HMI_DownButton
 21275 ;; This function uses a non-reentrant model
 21276 ;;
 21277                           
 21278                           	psect	text100
 21279  0160D6                     __ptext100:
 21280                           	opt stack 0
 21281  0160D6                     _LED_Toggle:
 21282                           	opt stack 14
 21283                           
 21284                           ;incstack = 0
 21285                           ;LED_Toggle@pLED stored from wreg
 21286  0160D6  0100               	movlb	0	; () banked
 21287  0160D8  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 21288                           
 21289                           ;LED.c: 52: switch (pLED)
 21290  0160DA  D018               	goto	l12159
 21291  0160DC                     l12153:
 21292                           
 21293                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21294  0160DC  0EEC               	movlw	low _PortC
 21295  0160DE  0100               	movlb	0	; () banked
 21296  0160E0  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21297  0160E2  0E00               	movlw	high _PortC
 21298  0160E4  0100               	movlb	0	; () banked
 21299  0160E6  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21300  0160E8  0E00               	movlw	0
 21301  0160EA  0100               	movlb	0	; () banked
 21302  0160EC  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21303  0160EE  ECB0  F0B2         	call	_Port_TogglePin	;wreg free
 21304                           
 21305                           ;LED.c: 56: break;
 21306  0160F2  0012               	return	
 21307  0160F4                     l12155:
 21308                           
 21309                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21310  0160F4  0EEC               	movlw	low _PortC
 21311  0160F6  0100               	movlb	0	; () banked
 21312  0160F8  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21313  0160FA  0E00               	movlw	high _PortC
 21314  0160FC  0100               	movlb	0	; () banked
 21315  0160FE  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21316  016100  0E01               	movlw	1
 21317  016102  0100               	movlb	0	; () banked
 21318  016104  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21319  016106  ECB0  F0B2         	call	_Port_TogglePin	;wreg free
 21320                           
 21321                           ;LED.c: 60: }
 21322                           
 21323                           ;LED.c: 59: break;
 21324  01610A  0012               	return	
 21325  01610C                     l12159:
 21326  01610C  0100               	movlb	0	; () banked
 21327  01610E  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 21328                           
 21329                           ; Switch size 1, requested type "space"
 21330                           ; Number of cases is 2, Range of values is 0 to 1
 21331                           ; switch strategies available:
 21332                           ; Name         Instructions Cycles
 21333                           ; simple_byte            7     4 (average)
 21334                           ;	Chosen strategy is simple_byte
 21335  016110  0A00               	xorlw	0	; case 0
 21336  016112  B4D8               	btfsc	status,2,c
 21337  016114  D7E3               	goto	l12153
 21338  016116  0A01               	xorlw	1	; case 1
 21339  016118  A4D8               	btfss	status,2,c
 21340  01611A  0012               	return	
 21341  01611C  D7EB               	goto	l12155
 21342  01611E                     __end_of_LED_Toggle:
 21343                           	opt stack 0
 21344                           tosu	equ	0xFFF
 21345                           tosh	equ	0xFFE
 21346                           tosl	equ	0xFFD
 21347                           pclath	equ	0xFFA
 21348                           tblptru	equ	0xFF8
 21349                           tblptrh	equ	0xFF7
 21350                           tblptrl	equ	0xFF6
 21351                           tablat	equ	0xFF5
 21352                           prodh	equ	0xFF4
 21353                           prodl	equ	0xFF3
 21354                           intcon	equ	0xFF2
 21355                           postinc0	equ	0xFEE
 21356                           wreg	equ	0xFE8
 21357                           indf1	equ	0xFE7
 21358                           postdec1	equ	0xFE5
 21359                           fsr1h	equ	0xFE2
 21360                           fsr1l	equ	0xFE1
 21361                           indf2	equ	0xFDF
 21362                           postinc2	equ	0xFDE
 21363                           postdec2	equ	0xFDD
 21364                           plusw2	equ	0xFDB
 21365                           fsr2h	equ	0xFDA
 21366                           fsr2l	equ	0xFD9
 21367                           status	equ	0xFD8
 21368                           
 21369 ;; *************** function _Port_TogglePin *****************
 21370 ;; Defined at:
 21371 ;;		line 278 in file "Library/Port.c"
 21372 ;; Parameters:    Size  Location     Type
 21373 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21374 ;;		 -> PortC(10), 
 21375 ;;  pPin            1   22[BANK0 ] enum E6750
 21376 ;; Auto vars:     Size  Location     Type
 21377 ;;  Value           1   23[BANK0 ] unsigned char 
 21378 ;; Return value:  Size  Location     Type
 21379 ;;                  1    wreg      void 
 21380 ;; Registers used:
 21381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21382 ;; Tracked objects:
 21383 ;;		On entry : 0/0
 21384 ;;		On exit  : 0/0
 21385 ;;		Unchanged: 0/0
 21386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21387 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;Total ram usage:        4 bytes
 21392 ;; Hardware stack levels used:    1
 21393 ;; Hardware stack levels required when called:   11
 21394 ;; This function calls:
 21395 ;;		_Port_GetPin
 21396 ;;		_Port_SetPin
 21397 ;; This function is called by:
 21398 ;;		_LED_Toggle
 21399 ;; This function uses a non-reentrant model
 21400 ;;
 21401                           
 21402                           	psect	text101
 21403  016560                     __ptext101:
 21404                           	opt stack 0
 21405  016560                     _Port_TogglePin:
 21406                           	opt stack 14
 21407                           
 21408                           ;Port.c: 280: UINT8 Value;
 21409                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 21410                           
 21411                           ;incstack = 0
 21412  016560  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 21413  016564  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 21414  016568  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 21415  01656C  ECB3  F0B0         	call	_Port_GetPin	;wreg free
 21416  016570  0100               	movlb	0	; () banked
 21417  016572  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 21418                           
 21419                           ; BSR set to: 0
 21420                           ;Port.c: 282: Value ^= 0x01;
 21421  016574  0E01               	movlw	1
 21422  016576  0100               	movlb	0	; () banked
 21423  016578  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 21424                           
 21425                           ; BSR set to: 0
 21426                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 21427  01657A  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 21428  01657E  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 21429  016582  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 21430  016586  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 21431  01658A  ECA0  F0A2         	call	_Port_SetPin	;wreg free
 21432  01658E  0012               	return		;funcret
 21433  016590                     __end_of_Port_TogglePin:
 21434                           	opt stack 0
 21435                           tosu	equ	0xFFF
 21436                           tosh	equ	0xFFE
 21437                           tosl	equ	0xFFD
 21438                           pclath	equ	0xFFA
 21439                           tblptru	equ	0xFF8
 21440                           tblptrh	equ	0xFF7
 21441                           tblptrl	equ	0xFF6
 21442                           tablat	equ	0xFF5
 21443                           prodh	equ	0xFF4
 21444                           prodl	equ	0xFF3
 21445                           intcon	equ	0xFF2
 21446                           postinc0	equ	0xFEE
 21447                           wreg	equ	0xFE8
 21448                           indf1	equ	0xFE7
 21449                           postdec1	equ	0xFE5
 21450                           fsr1h	equ	0xFE2
 21451                           fsr1l	equ	0xFE1
 21452                           indf2	equ	0xFDF
 21453                           postinc2	equ	0xFDE
 21454                           postdec2	equ	0xFDD
 21455                           plusw2	equ	0xFDB
 21456                           fsr2h	equ	0xFDA
 21457                           fsr2l	equ	0xFD9
 21458                           status	equ	0xFD8
 21459                           
 21460 ;; *************** function _Port_SetPin *****************
 21461 ;; Defined at:
 21462 ;;		line 247 in file "Library/Port.c"
 21463 ;; Parameters:    Size  Location     Type
 21464 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 21465 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 21466 ;;  pPin            1   17[BANK0 ] enum E6750
 21467 ;;  pValue          1   18[BANK0 ] unsigned char 
 21468 ;; Auto vars:     Size  Location     Type
 21469 ;;  Type            1   19[BANK0 ] enum E6795
 21470 ;; Return value:  Size  Location     Type
 21471 ;;                  1    wreg      void 
 21472 ;; Registers used:
 21473 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21474 ;; Tracked objects:
 21475 ;;		On entry : 0/0
 21476 ;;		On exit  : 0/0
 21477 ;;		Unchanged: 0/0
 21478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;Total ram usage:        5 bytes
 21484 ;; Hardware stack levels used:    1
 21485 ;; Hardware stack levels required when called:   10
 21486 ;; This function calls:
 21487 ;;		_Byte_SetBit
 21488 ;;		_Word_GetPair
 21489 ;; This function is called by:
 21490 ;;		_Reset_Low
 21491 ;;		_Reset_High
 21492 ;;		_LED_Set
 21493 ;;		_Port_TogglePin
 21494 ;;		_Motor_Init
 21495 ;;		_Motor_Step
 21496 ;;		_MXK_Init
 21497 ;; This function uses a non-reentrant model
 21498 ;;
 21499                           
 21500                           	psect	text102
 21501  014540                     __ptext102:
 21502                           	opt stack 0
 21503  014540                     _Port_SetPin:
 21504                           	opt stack 14
 21505                           
 21506                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 21507                           
 21508                           ;incstack = 0
 21509  014540  0E08               	movlw	8
 21510  014542  0100               	movlb	0	; () banked
 21511  014544  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 21512  014546  0100               	movlb	0	; () banked
 21513  014548  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 21514  01454A  0E00               	movlw	0
 21515  01454C  0100               	movlb	0	; () banked
 21516  01454E  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 21517  014550  0100               	movlb	0	; () banked
 21518  014552  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 21519  014554  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 21520  014558  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 21521  01455C  0100               	movlb	0	; () banked
 21522  01455E  6F73               	movwf	Port_SetPin@Type& (0+255),b
 21523                           
 21524                           ;Port.c: 250: switch (Type)
 21525  014560  D042               	goto	l11527
 21526  014562                     l11513:
 21527                           
 21528                           ; BSR set to: 0
 21529                           ;Port.c: 256: pValue &= 1;
 21530  014562  0E01               	movlw	1
 21531  014564  0100               	movlb	0	; () banked
 21532  014566  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 21533                           
 21534                           ; BSR set to: 0
 21535                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 21536  014568  0100               	movlb	0	; () banked
 21537  01456A  EE20 F002          	lfsr	2,2
 21538  01456E  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 21539  014570  26D9               	addwf	fsr2l,f,c
 21540  014572  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21541  014574  22DA               	addwfc	fsr2h,f,c
 21542  014576  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21543  01457A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21544  01457E  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21545  014582  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21546  014586  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 21547                           
 21548                           ;Port.c: 258: break;
 21549  01458A  0012               	return	
 21550  01458C                     l11517:
 21551                           
 21552                           ;Port.c: 261: pValue &= 1;
 21553  01458C  0E01               	movlw	1
 21554  01458E  0100               	movlb	0	; () banked
 21555  014590  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 21556                           
 21557                           ;Port.c: 262: pValue ^= 1;
 21558  014592  0E01               	movlw	1
 21559  014594  0100               	movlb	0	; () banked
 21560  014596  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 21561                           
 21562                           ; BSR set to: 0
 21563                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 21564  014598  0100               	movlb	0	; () banked
 21565  01459A  EE20 F002          	lfsr	2,2
 21566  01459E  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 21567  0145A0  26D9               	addwf	fsr2l,f,c
 21568  0145A2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21569  0145A4  22DA               	addwfc	fsr2h,f,c
 21570  0145A6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21571  0145AA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21572  0145AE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21573  0145B2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21574  0145B6  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 21575                           
 21576                           ;Port.c: 264: break;
 21577  0145BA  0012               	return	
 21578  0145BC                     l11521:
 21579                           
 21580                           ;Port.c: 266: pValue &= 1;
 21581  0145BC  0E01               	movlw	1
 21582  0145BE  0100               	movlb	0	; () banked
 21583  0145C0  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 21584                           
 21585                           ; BSR set to: 0
 21586                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 21587  0145C2  0100               	movlb	0	; () banked
 21588  0145C4  EE20 F004          	lfsr	2,4
 21589  0145C8  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 21590  0145CA  26D9               	addwf	fsr2l,f,c
 21591  0145CC  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21592  0145CE  22DA               	addwfc	fsr2h,f,c
 21593  0145D0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21594  0145D4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21595  0145D8  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21596  0145DC  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21597  0145E0  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 21598                           
 21599                           ;Port.c: 269: }
 21600                           
 21601                           ;Port.c: 268: break;
 21602  0145E4  0012               	return	
 21603  0145E6                     l11527:
 21604  0145E6  0100               	movlb	0	; () banked
 21605  0145E8  5173               	movf	Port_SetPin@Type& (0+255),w,b
 21606                           
 21607                           ; Switch size 1, requested type "space"
 21608                           ; Number of cases is 4, Range of values is 0 to 3
 21609                           ; switch strategies available:
 21610                           ; Name         Instructions Cycles
 21611                           ; simple_byte           13     7 (average)
 21612                           ;	Chosen strategy is simple_byte
 21613  0145EA  0A00               	xorlw	0	; case 0
 21614  0145EC  B4D8               	btfsc	status,2,c
 21615  0145EE  0012               	return	
 21616  0145F0  0A01               	xorlw	1	; case 1
 21617  0145F2  B4D8               	btfsc	status,2,c
 21618  0145F4  D7B6               	goto	l11513
 21619  0145F6  0A03               	xorlw	3	; case 2
 21620  0145F8  B4D8               	btfsc	status,2,c
 21621  0145FA  D7C8               	goto	l11517
 21622  0145FC  0A01               	xorlw	1	; case 3
 21623  0145FE  A4D8               	btfss	status,2,c
 21624  014600  0012               	return	
 21625  014602  D7DC               	goto	l11521
 21626  014604                     __end_of_Port_SetPin:
 21627                           	opt stack 0
 21628                           tosu	equ	0xFFF
 21629                           tosh	equ	0xFFE
 21630                           tosl	equ	0xFFD
 21631                           pclath	equ	0xFFA
 21632                           tblptru	equ	0xFF8
 21633                           tblptrh	equ	0xFF7
 21634                           tblptrl	equ	0xFF6
 21635                           tablat	equ	0xFF5
 21636                           prodh	equ	0xFF4
 21637                           prodl	equ	0xFF3
 21638                           intcon	equ	0xFF2
 21639                           postinc0	equ	0xFEE
 21640                           wreg	equ	0xFE8
 21641                           indf1	equ	0xFE7
 21642                           postdec1	equ	0xFE5
 21643                           fsr1h	equ	0xFE2
 21644                           fsr1l	equ	0xFE1
 21645                           indf2	equ	0xFDF
 21646                           postinc2	equ	0xFDE
 21647                           postdec2	equ	0xFDD
 21648                           plusw2	equ	0xFDB
 21649                           fsr2h	equ	0xFDA
 21650                           fsr2l	equ	0xFD9
 21651                           status	equ	0xFD8
 21652                           
 21653 ;; *************** function _Port_GetPin *****************
 21654 ;; Defined at:
 21655 ;;		line 271 in file "Library/Port.c"
 21656 ;; Parameters:    Size  Location     Type
 21657 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 21658 ;;		 -> PortB(10), PortE(10), PortC(10), 
 21659 ;;  pPin            1    2[BANK0 ] enum E6750
 21660 ;; Auto vars:     Size  Location     Type
 21661 ;;  Output          1    5[BANK0 ] unsigned char 
 21662 ;; Return value:  Size  Location     Type
 21663 ;;                  1    wreg      unsigned char 
 21664 ;; Registers used:
 21665 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21666 ;; Tracked objects:
 21667 ;;		On entry : 0/0
 21668 ;;		On exit  : 0/0
 21669 ;;		Unchanged: 0/0
 21670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21673 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21674 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21675 ;;Total ram usage:        6 bytes
 21676 ;; Hardware stack levels used:    1
 21677 ;; Hardware stack levels required when called:    7
 21678 ;; This function calls:
 21679 ;;		Nothing
 21680 ;; This function is called by:
 21681 ;;		_Port_TogglePin
 21682 ;;		_HMI_LeftSwitch
 21683 ;;		_HMI_RightSwitch
 21684 ;;		_HMI_UpSwitch
 21685 ;;		_HMI_DownSwitch
 21686 ;;		_MXK_TestButton
 21687 ;; This function uses a non-reentrant model
 21688 ;;
 21689                           
 21690                           	psect	text103
 21691  016166                     __ptext103:
 21692                           	opt stack 0
 21693  016166                     _Port_GetPin:
 21694                           	opt stack 21
 21695                           
 21696                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 21697                           
 21698                           ;incstack = 0
 21699  016166  0100               	movlb	0	; () banked
 21700  016168  EE20 F006          	lfsr	2,6
 21701  01616C  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 21702  01616E  26D9               	addwf	fsr2l,f,c
 21703  016170  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 21704  016172  22DA               	addwfc	fsr2h,f,c
 21705  016174  CFDE F063          	movff	postinc2,??_Port_GetPin
 21706  016178  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 21707  01617C  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 21708  016180  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 21709  016184  50DF               	movf	indf2,w,c
 21710  016186  0100               	movlb	0	; () banked
 21711  016188  6F65               	movwf	Port_GetPin@Output& (0+255),b
 21712                           
 21713                           ; BSR set to: 0
 21714                           ;Port.c: 274: Output >>= (UINT8)pPin;
 21715  01618A  0100               	movlb	0	; () banked
 21716  01618C  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 21717  01618E  0100               	movlb	0	; () banked
 21718  016190  6F63               	movwf	??_Port_GetPin& (0+255),b
 21719  016192  D003               	goto	u9120
 21720  016194                     u9125:
 21721  016194  0100               	movlb	0	; () banked
 21722  016196  90D8               	bcf	status,0,c
 21723  016198  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 21724  01619A                     u9120:
 21725  01619A  0100               	movlb	0	; () banked
 21726  01619C  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 21727  01619E  D7FA               	goto	u9125
 21728                           
 21729                           ;Port.c: 275: Output &= 1;
 21730  0161A0  0E01               	movlw	1
 21731  0161A2  0100               	movlb	0	; () banked
 21732  0161A4  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;Port.c: 276: return Output;
 21736  0161A6  0100               	movlb	0	; () banked
 21737  0161A8  5165               	movf	Port_GetPin@Output& (0+255),w,b
 21738  0161AA  0012               	return	
 21739  0161AC                     __end_of_Port_GetPin:
 21740                           	opt stack 0
 21741                           tosu	equ	0xFFF
 21742                           tosh	equ	0xFFE
 21743                           tosl	equ	0xFFD
 21744                           pclath	equ	0xFFA
 21745                           tblptru	equ	0xFF8
 21746                           tblptrh	equ	0xFF7
 21747                           tblptrl	equ	0xFF6
 21748                           tablat	equ	0xFF5
 21749                           prodh	equ	0xFF4
 21750                           prodl	equ	0xFF3
 21751                           intcon	equ	0xFF2
 21752                           postinc0	equ	0xFEE
 21753                           wreg	equ	0xFE8
 21754                           indf1	equ	0xFE7
 21755                           postdec1	equ	0xFE5
 21756                           fsr1h	equ	0xFE2
 21757                           fsr1l	equ	0xFE1
 21758                           indf2	equ	0xFDF
 21759                           postinc2	equ	0xFDE
 21760                           postdec2	equ	0xFDD
 21761                           plusw2	equ	0xFDB
 21762                           fsr2h	equ	0xFDA
 21763                           fsr2l	equ	0xFD9
 21764                           status	equ	0xFD8
 21765                           
 21766 ;; *************** function _ISR_Enable *****************
 21767 ;; Defined at:
 21768 ;;		line 27 in file "Library/ISR.c"
 21769 ;; Parameters:    Size  Location     Type
 21770 ;;		None
 21771 ;; Auto vars:     Size  Location     Type
 21772 ;;		None
 21773 ;; Return value:  Size  Location     Type
 21774 ;;                  1    wreg      void 
 21775 ;; Registers used:
 21776 ;;		None
 21777 ;; Tracked objects:
 21778 ;;		On entry : 0/0
 21779 ;;		On exit  : 0/0
 21780 ;;		Unchanged: 0/0
 21781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21786 ;;Total ram usage:        0 bytes
 21787 ;; Hardware stack levels used:    1
 21788 ;; Hardware stack levels required when called:    7
 21789 ;; This function calls:
 21790 ;;		Nothing
 21791 ;; This function is called by:
 21792 ;;		_init
 21793 ;; This function uses a non-reentrant model
 21794 ;;
 21795                           
 21796                           	psect	text104
 21797  0169D2                     __ptext104:
 21798                           	opt stack 0
 21799  0169D2                     _ISR_Enable:
 21800                           	opt stack 22
 21801                           
 21802                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 21803                           
 21804                           ; BSR set to: 0
 21805                           ;incstack = 0
 21806  0169D2  8CF2               	bsf	intcon,6,c	;volatile
 21807                           
 21808                           ;ISR.c: 30: INTCONbits.GIE = 1;
 21809  0169D4  8EF2               	bsf	intcon,7,c	;volatile
 21810                           
 21811                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 21812  0169D6  88F2               	bsf	intcon,4,c	;volatile
 21813                           
 21814                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 21815  0169D8  92F2               	bcf	intcon,1,c	;volatile
 21816  0169DA  0012               	return		;funcret
 21817  0169DC                     __end_of_ISR_Enable:
 21818                           	opt stack 0
 21819                           tosu	equ	0xFFF
 21820                           tosh	equ	0xFFE
 21821                           tosl	equ	0xFFD
 21822                           pclath	equ	0xFFA
 21823                           tblptru	equ	0xFF8
 21824                           tblptrh	equ	0xFF7
 21825                           tblptrl	equ	0xFF6
 21826                           tablat	equ	0xFF5
 21827                           prodh	equ	0xFF4
 21828                           prodl	equ	0xFF3
 21829                           intcon	equ	0xFF2
 21830                           postinc0	equ	0xFEE
 21831                           wreg	equ	0xFE8
 21832                           indf1	equ	0xFE7
 21833                           postdec1	equ	0xFE5
 21834                           fsr1h	equ	0xFE2
 21835                           fsr1l	equ	0xFE1
 21836                           indf2	equ	0xFDF
 21837                           postinc2	equ	0xFDE
 21838                           postdec2	equ	0xFDD
 21839                           plusw2	equ	0xFDB
 21840                           fsr2h	equ	0xFDA
 21841                           fsr2l	equ	0xFD9
 21842                           status	equ	0xFD8
 21843                           
 21844 ;; *************** function _HMI_Init *****************
 21845 ;; Defined at:
 21846 ;;		line 104 in file "HMI.c"
 21847 ;; Parameters:    Size  Location     Type
 21848 ;;		None
 21849 ;; Auto vars:     Size  Location     Type
 21850 ;;  in              2   72[BANK0 ] unsigned short 
 21851 ;; Return value:  Size  Location     Type
 21852 ;;                  1    wreg      void 
 21853 ;; Registers used:
 21854 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21855 ;; Tracked objects:
 21856 ;;		On entry : 0/0
 21857 ;;		On exit  : 0/0
 21858 ;;		Unchanged: 0/0
 21859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21864 ;;Total ram usage:        2 bytes
 21865 ;; Hardware stack levels used:    1
 21866 ;; Hardware stack levels required when called:   16
 21867 ;; This function calls:
 21868 ;;		_Button_Init
 21869 ;;		_SPI_Init
 21870 ;;		_SPI_MinSpeed
 21871 ;; This function is called by:
 21872 ;;		_init
 21873 ;; This function uses a non-reentrant model
 21874 ;;
 21875                           
 21876                           	psect	text105
 21877  012508                     __ptext105:
 21878                           	opt stack 0
 21879  012508                     _HMI_Init:
 21880                           	opt stack 13
 21881                           
 21882                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 21883                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 21884                           
 21885                           ;incstack = 0
 21886  012508  0E46               	movlw	low (_HMIBoard+48)
 21887  01250A  0100               	movlb	0	; () banked
 21888  01250C  6F9B               	movwf	Button_Init@pInput& (0+255),b
 21889  01250E  0E01               	movlw	high (_HMIBoard+48)
 21890  012510  0100               	movlb	0	; () banked
 21891  012512  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 21892  012514  0E00               	movlw	0
 21893  012516  0100               	movlb	0	; () banked
 21894  012518  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21895  01251A  0E02               	movlw	2
 21896  01251C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21897  01251E  0EFE               	movlw	low _HMI_InitButtons
 21898  012520  0100               	movlb	0	; () banked
 21899  012522  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 21900  012524  0E69               	movlw	high _HMI_InitButtons
 21901  012526  0100               	movlb	0	; () banked
 21902  012528  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21903  01252A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21904  01252C  0100               	movlb	0	; () banked
 21905  01252E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21906  012530  0E6E               	movlw	low _HMI_DIPSwitch
 21907  012532  0100               	movlb	0	; () banked
 21908  012534  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 21909  012536  0E68               	movlw	high _HMI_DIPSwitch
 21910  012538  0100               	movlb	0	; () banked
 21911  01253A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21912  01253C  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 21913  01253E  0100               	movlb	0	; () banked
 21914  012540  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21915  012542  0E04               	movlw	low _Event_NULL
 21916  012544  0100               	movlb	0	; () banked
 21917  012546  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 21918  012548  0E14               	movlw	high _Event_NULL
 21919  01254A  0100               	movlb	0	; () banked
 21920  01254C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21921  01254E  0E00               	movlw	low (_Event_NULL shr (0+16))
 21922  012550  0100               	movlb	0	; () banked
 21923  012552  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21924  012554  ECCE  F0A1         	call	_Button_Init	;wreg free
 21925                           
 21926                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 21927                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 21928  012558  0E28               	movlw	low (_HMIBoard+18)
 21929  01255A  0100               	movlb	0	; () banked
 21930  01255C  6F9B               	movwf	Button_Init@pInput& (0+255),b
 21931  01255E  0E01               	movlw	high (_HMIBoard+18)
 21932  012560  0100               	movlb	0	; () banked
 21933  012562  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 21934  012564  0E00               	movlw	0
 21935  012566  0100               	movlb	0	; () banked
 21936  012568  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21937  01256A  0E02               	movlw	2
 21938  01256C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21939  01256E  0EFE               	movlw	low _HMI_InitButtons
 21940  012570  0100               	movlb	0	; () banked
 21941  012572  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 21942  012574  0E69               	movlw	high _HMI_InitButtons
 21943  012576  0100               	movlb	0	; () banked
 21944  012578  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21945  01257A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21946  01257C  0100               	movlb	0	; () banked
 21947  01257E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21948  012580  0ECE               	movlw	low _HMI_LeftSwitch
 21949  012582  0100               	movlb	0	; () banked
 21950  012584  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 21951  012586  0E68               	movlw	high _HMI_LeftSwitch
 21952  012588  0100               	movlb	0	; () banked
 21953  01258A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21954  01258C  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 21955  01258E  0100               	movlb	0	; () banked
 21956  012590  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21957  012592  0E04               	movlw	low _Event_NULL
 21958  012594  0100               	movlb	0	; () banked
 21959  012596  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 21960  012598  0E14               	movlw	high _Event_NULL
 21961  01259A  0100               	movlb	0	; () banked
 21962  01259C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21963  01259E  0E00               	movlw	low (_Event_NULL shr (0+16))
 21964  0125A0  0100               	movlb	0	; () banked
 21965  0125A2  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21966  0125A4  ECCE  F0A1         	call	_Button_Init	;wreg free
 21967                           
 21968                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 21969                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 21970  0125A8  0E1E               	movlw	low (_HMIBoard+8)
 21971  0125AA  0100               	movlb	0	; () banked
 21972  0125AC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 21973  0125AE  0E01               	movlw	high (_HMIBoard+8)
 21974  0125B0  0100               	movlb	0	; () banked
 21975  0125B2  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 21976  0125B4  0E00               	movlw	0
 21977  0125B6  0100               	movlb	0	; () banked
 21978  0125B8  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21979  0125BA  0E02               	movlw	2
 21980  0125BC  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21981  0125BE  0EFE               	movlw	low _HMI_InitButtons
 21982  0125C0  0100               	movlb	0	; () banked
 21983  0125C2  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 21984  0125C4  0E69               	movlw	high _HMI_InitButtons
 21985  0125C6  0100               	movlb	0	; () banked
 21986  0125C8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21987  0125CA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21988  0125CC  0100               	movlb	0	; () banked
 21989  0125CE  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21990  0125D0  0EB6               	movlw	low _HMI_RightSwitch
 21991  0125D2  0100               	movlb	0	; () banked
 21992  0125D4  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 21993  0125D6  0E68               	movlw	high _HMI_RightSwitch
 21994  0125D8  0100               	movlb	0	; () banked
 21995  0125DA  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21996  0125DC  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 21997  0125DE  0100               	movlb	0	; () banked
 21998  0125E0  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21999  0125E2  0E04               	movlw	low _Event_NULL
 22000  0125E4  0100               	movlb	0	; () banked
 22001  0125E6  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22002  0125E8  0E14               	movlw	high _Event_NULL
 22003  0125EA  0100               	movlb	0	; () banked
 22004  0125EC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22005  0125EE  0E00               	movlw	low (_Event_NULL shr (0+16))
 22006  0125F0  0100               	movlb	0	; () banked
 22007  0125F2  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22008  0125F4  ECCE  F0A1         	call	_Button_Init	;wreg free
 22009                           
 22010                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 22011                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 22012  0125F8  0E32               	movlw	low (_HMIBoard+28)
 22013  0125FA  0100               	movlb	0	; () banked
 22014  0125FC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22015  0125FE  0E01               	movlw	high (_HMIBoard+28)
 22016  012600  0100               	movlb	0	; () banked
 22017  012602  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22018  012604  0E00               	movlw	0
 22019  012606  0100               	movlb	0	; () banked
 22020  012608  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22021  01260A  0E02               	movlw	2
 22022  01260C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22023  01260E  0EFE               	movlw	low _HMI_InitButtons
 22024  012610  0100               	movlb	0	; () banked
 22025  012612  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22026  012614  0E69               	movlw	high _HMI_InitButtons
 22027  012616  0100               	movlb	0	; () banked
 22028  012618  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22029  01261A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22030  01261C  0100               	movlb	0	; () banked
 22031  01261E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22032  012620  0E9E               	movlw	low _HMI_UpSwitch
 22033  012622  0100               	movlb	0	; () banked
 22034  012624  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22035  012626  0E68               	movlw	high _HMI_UpSwitch
 22036  012628  0100               	movlb	0	; () banked
 22037  01262A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22038  01262C  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 22039  01262E  0100               	movlb	0	; () banked
 22040  012630  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22041  012632  0E04               	movlw	low _Event_NULL
 22042  012634  0100               	movlb	0	; () banked
 22043  012636  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22044  012638  0E14               	movlw	high _Event_NULL
 22045  01263A  0100               	movlb	0	; () banked
 22046  01263C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22047  01263E  0E00               	movlw	low (_Event_NULL shr (0+16))
 22048  012640  0100               	movlb	0	; () banked
 22049  012642  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22050  012644  ECCE  F0A1         	call	_Button_Init	;wreg free
 22051                           
 22052                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 22053                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 22054  012648  0E3C               	movlw	low (_HMIBoard+38)
 22055  01264A  0100               	movlb	0	; () banked
 22056  01264C  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22057  01264E  0E01               	movlw	high (_HMIBoard+38)
 22058  012650  0100               	movlb	0	; () banked
 22059  012652  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22060  012654  0E00               	movlw	0
 22061  012656  0100               	movlb	0	; () banked
 22062  012658  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22063  01265A  0E02               	movlw	2
 22064  01265C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22065  01265E  0EFE               	movlw	low _HMI_InitButtons
 22066  012660  0100               	movlb	0	; () banked
 22067  012662  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22068  012664  0E69               	movlw	high _HMI_InitButtons
 22069  012666  0100               	movlb	0	; () banked
 22070  012668  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22071  01266A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22072  01266C  0100               	movlb	0	; () banked
 22073  01266E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22074  012670  0E86               	movlw	low _HMI_DownSwitch
 22075  012672  0100               	movlb	0	; () banked
 22076  012674  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22077  012676  0E68               	movlw	high _HMI_DownSwitch
 22078  012678  0100               	movlb	0	; () banked
 22079  01267A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22080  01267C  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 22081  01267E  0100               	movlb	0	; () banked
 22082  012680  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22083  012682  0E04               	movlw	low _Event_NULL
 22084  012684  0100               	movlb	0	; () banked
 22085  012686  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22086  012688  0E14               	movlw	high _Event_NULL
 22087  01268A  0100               	movlb	0	; () banked
 22088  01268C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22089  01268E  0E00               	movlw	low (_Event_NULL shr (0+16))
 22090  012690  0100               	movlb	0	; () banked
 22091  012692  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22092  012694  ECCE  F0A1         	call	_Button_Init	;wreg free
 22093                           
 22094                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 22095  012698  0EA0               	movlw	160
 22096  01269A  0100               	movlb	0	; () banked
 22097  01269C  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 22098  01269E  0E86               	movlw	134
 22099  0126A0  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 22100  0126A2  0E01               	movlw	1
 22101  0126A4  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 22102  0126A6  0E00               	movlw	0
 22103  0126A8  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 22104  0126AA  0E00               	movlw	0
 22105  0126AC  0100               	movlb	0	; () banked
 22106  0126AE  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 22107  0126B0  0E02               	movlw	2
 22108  0126B2  0100               	movlb	0	; () banked
 22109  0126B4  6F92               	movwf	SPI_Init@pMode& (0+255),b
 22110  0126B6  ECA7  F084         	call	_SPI_Init	;wreg free
 22111                           
 22112                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 22113  0126BA  0E50               	movlw	low _SPI1
 22114  0126BC  0100               	movlb	0	; () banked
 22115  0126BE  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 22116  0126C0  0E01               	movlw	high _SPI1
 22117  0126C2  0100               	movlb	0	; () banked
 22118  0126C4  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 22119  0126C6  EC9D  F0AC         	call	_SPI_MinSpeed	;wreg free
 22120                           
 22121                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 22122  0126CA  0E00               	movlw	0
 22123  0126CC  0100               	movlb	0	; () banked
 22124  0126CE  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 22125  0126D0  0E00               	movlw	0
 22126  0126D2  6FA8               	movwf	HMI_Init@in& (0+255),b
 22127  0126D4                     l14091:
 22128                           
 22129                           ; BSR set to: 0
 22130  0126D4  0100               	movlb	0	; () banked
 22131  0126D6  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 22132  0126D8  E113               	bnz	l1153
 22133  0126DA  0E08               	movlw	8
 22134  0126DC  0100               	movlb	0	; () banked
 22135  0126DE  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 22136  0126E0  B0D8               	btfsc	status,0,c
 22137  0126E2  0012               	return	
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 22141                           
 22142                           ; BSR set to: 0
 22143                           
 22144                           ; BSR set to: 0
 22145  0126E4  0E16               	movlw	low _HMIBoard
 22146  0126E6  0100               	movlb	0	; () banked
 22147  0126E8  25A8               	addwf	HMI_Init@in& (0+255),w,b
 22148  0126EA  6ED9               	movwf	fsr2l,c
 22149  0126EC  0E01               	movlw	high _HMIBoard
 22150  0126EE  0100               	movlb	0	; () banked
 22151  0126F0  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 22152  0126F2  6EDA               	movwf	fsr2h,c
 22153  0126F4  0E00               	movlw	0
 22154  0126F6  6EDF               	movwf	indf2,c
 22155                           
 22156                           ; BSR set to: 0
 22157  0126F8  0100               	movlb	0	; () banked
 22158  0126FA  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 22159  0126FC  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 22160  0126FE  D7EA               	goto	l14091
 22161  012700                     l1153:
 22162                           
 22163                           ; BSR set to: 0
 22164  012700  0012               	return		;funcret
 22165  012702                     __end_of_HMI_Init:
 22166                           	opt stack 0
 22167                           tosu	equ	0xFFF
 22168                           tosh	equ	0xFFE
 22169                           tosl	equ	0xFFD
 22170                           pclath	equ	0xFFA
 22171                           tblptru	equ	0xFF8
 22172                           tblptrh	equ	0xFF7
 22173                           tblptrl	equ	0xFF6
 22174                           tablat	equ	0xFF5
 22175                           prodh	equ	0xFF4
 22176                           prodl	equ	0xFF3
 22177                           intcon	equ	0xFF2
 22178                           postinc0	equ	0xFEE
 22179                           wreg	equ	0xFE8
 22180                           indf1	equ	0xFE7
 22181                           postdec1	equ	0xFE5
 22182                           fsr1h	equ	0xFE2
 22183                           fsr1l	equ	0xFE1
 22184                           indf2	equ	0xFDF
 22185                           postinc2	equ	0xFDE
 22186                           postdec2	equ	0xFDD
 22187                           plusw2	equ	0xFDB
 22188                           fsr2h	equ	0xFDA
 22189                           fsr2l	equ	0xFD9
 22190                           status	equ	0xFD8
 22191                           
 22192 ;; *************** function _SPI_MinSpeed *****************
 22193 ;; Defined at:
 22194 ;;		line 190 in file "Library/SPI.c"
 22195 ;; Parameters:    Size  Location     Type
 22196 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 22197 ;;		 -> SPI1(11), 
 22198 ;; Auto vars:     Size  Location     Type
 22199 ;;		None
 22200 ;; Return value:  Size  Location     Type
 22201 ;;                  1    wreg      void 
 22202 ;; Registers used:
 22203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22204 ;; Tracked objects:
 22205 ;;		On entry : 0/0
 22206 ;;		On exit  : 0/0
 22207 ;;		Unchanged: 0/0
 22208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22209 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22213 ;;Total ram usage:        2 bytes
 22214 ;; Hardware stack levels used:    1
 22215 ;; Hardware stack levels required when called:    9
 22216 ;; This function calls:
 22217 ;;		_Byte_SetBit
 22218 ;;		_Byte_SetQuad
 22219 ;; This function is called by:
 22220 ;;		_HMI_Init
 22221 ;; This function uses a non-reentrant model
 22222 ;;
 22223                           
 22224                           	psect	text106
 22225  01593A                     __ptext106:
 22226                           	opt stack 0
 22227  01593A                     _SPI_MinSpeed:
 22228                           	opt stack 19
 22229                           
 22230                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22231                           
 22232                           ; BSR set to: 0
 22233                           ;incstack = 0
 22234  01593A  0100               	movlb	0	; () banked
 22235  01593C  EE20 F006          	lfsr	2,6
 22236  015940  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22237  015942  26D9               	addwf	fsr2l,f,c
 22238  015944  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22239  015946  22DA               	addwfc	fsr2h,f,c
 22240  015948  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22241  01594C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22242  015950  0E05               	movlw	5
 22243  015952  0100               	movlb	0	; () banked
 22244  015954  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22245  015956  0E00               	movlw	0
 22246  015958  0100               	movlb	0	; () banked
 22247  01595A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22248  01595C  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22249                           
 22250                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 22251  015960  0100               	movlb	0	; () banked
 22252  015962  EE20 F006          	lfsr	2,6
 22253  015966  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22254  015968  26D9               	addwf	fsr2l,f,c
 22255  01596A  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22256  01596C  22DA               	addwfc	fsr2h,f,c
 22257  01596E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22258  015972  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22259  015976  0E00               	movlw	0
 22260  015978  0100               	movlb	0	; () banked
 22261  01597A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22262  01597C  0E02               	movlw	2
 22263  01597E  0100               	movlb	0	; () banked
 22264  015980  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22265  015982  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 22266                           
 22267                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22268  015986  0100               	movlb	0	; () banked
 22269  015988  EE20 F006          	lfsr	2,6
 22270  01598C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22271  01598E  26D9               	addwf	fsr2l,f,c
 22272  015990  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22273  015992  22DA               	addwfc	fsr2h,f,c
 22274  015994  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22275  015998  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22276  01599C  0E05               	movlw	5
 22277  01599E  0100               	movlb	0	; () banked
 22278  0159A0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22279  0159A2  0E01               	movlw	1
 22280  0159A4  0100               	movlb	0	; () banked
 22281  0159A6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22282  0159A8  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22283  0159AC  0012               	return		;funcret
 22284  0159AE                     __end_of_SPI_MinSpeed:
 22285                           	opt stack 0
 22286                           tosu	equ	0xFFF
 22287                           tosh	equ	0xFFE
 22288                           tosl	equ	0xFFD
 22289                           pclath	equ	0xFFA
 22290                           tblptru	equ	0xFF8
 22291                           tblptrh	equ	0xFF7
 22292                           tblptrl	equ	0xFF6
 22293                           tablat	equ	0xFF5
 22294                           prodh	equ	0xFF4
 22295                           prodl	equ	0xFF3
 22296                           intcon	equ	0xFF2
 22297                           postinc0	equ	0xFEE
 22298                           wreg	equ	0xFE8
 22299                           indf1	equ	0xFE7
 22300                           postdec1	equ	0xFE5
 22301                           fsr1h	equ	0xFE2
 22302                           fsr1l	equ	0xFE1
 22303                           indf2	equ	0xFDF
 22304                           postinc2	equ	0xFDE
 22305                           postdec2	equ	0xFDD
 22306                           plusw2	equ	0xFDB
 22307                           fsr2h	equ	0xFDA
 22308                           fsr2l	equ	0xFD9
 22309                           status	equ	0xFD8
 22310                           
 22311 ;; *************** function _SPI_Init *****************
 22312 ;; Defined at:
 22313 ;;		line 12 in file "Library/SPI.c"
 22314 ;; Parameters:    Size  Location     Type
 22315 ;;  pClock          4   45[BANK0 ] unsigned long 
 22316 ;;  pChannel        1   49[BANK0 ] enum E6744
 22317 ;;  pMode           1   50[BANK0 ] enum E6748
 22318 ;; Auto vars:     Size  Location     Type
 22319 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22320 ;;		 -> SPI1(11), SPI2(11), 
 22321 ;; Return value:  Size  Location     Type
 22322 ;;                  1    wreg      void 
 22323 ;; Registers used:
 22324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22325 ;; Tracked objects:
 22326 ;;		On entry : 0/0
 22327 ;;		On exit  : 0/0
 22328 ;;		Unchanged: 0/0
 22329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22330 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22333 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22334 ;;Total ram usage:        8 bytes
 22335 ;; Hardware stack levels used:    1
 22336 ;; Hardware stack levels required when called:   12
 22337 ;; This function calls:
 22338 ;;		_Byte_SetBit
 22339 ;;		_Byte_SetQuad
 22340 ;;		_Port_SetPinType
 22341 ;;		_SPI_DCS
 22342 ;;		_SPI_DisableISR
 22343 ;;		_Timer2_Init
 22344 ;; This function is called by:
 22345 ;;		_Configure_GPIOs
 22346 ;;		_HMI_Init
 22347 ;; This function uses a non-reentrant model
 22348 ;;
 22349                           
 22350                           	psect	text107
 22351  01094E                     __ptext107:
 22352                           	opt stack 0
 22353  01094E                     _SPI_Init:
 22354                           	opt stack 15
 22355                           
 22356                           ;SPI.c: 14: SPIPtr pInput;
 22357                           ;SPI.c: 16: switch (pChannel)
 22358                           
 22359                           ;incstack = 0
 22360  01094E  D00C               	goto	l12819
 22361  010950                     l12813:
 22362                           
 22363                           ;SPI.c: 19: pInput = &SPI1;
 22364  010950  0E50               	movlw	low _SPI1
 22365  010952  0100               	movlb	0	; () banked
 22366  010954  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22367  010956  0E01               	movlw	high _SPI1
 22368  010958  D004               	goto	L14
 22369  01095A                     l12815:
 22370                           
 22371                           ; BSR set to: 0
 22372                           ;SPI.c: 22: pInput = &SPI2;
 22373  01095A  0E5B               	movlw	low _SPI2
 22374  01095C  0100               	movlb	0	; () banked
 22375  01095E  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22376  010960  0E01               	movlw	high _SPI2
 22377  010962                     L14:
 22378  010962  0100               	movlb	0	; () banked
 22379  010964  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22380                           
 22381                           ; BSR set to: 0
 22382                           ;SPI.c: 24: };
 22383                           
 22384                           ;SPI.c: 23: break;
 22385  010966  D008               	goto	l12821
 22386  010968                     l12819:
 22387  010968  0100               	movlb	0	; () banked
 22388  01096A  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22389                           
 22390                           ; Switch size 1, requested type "space"
 22391                           ; Number of cases is 2, Range of values is 0 to 1
 22392                           ; switch strategies available:
 22393                           ; Name         Instructions Cycles
 22394                           ; simple_byte            7     4 (average)
 22395                           ;	Chosen strategy is simple_byte
 22396  01096C  0A00               	xorlw	0	; case 0
 22397  01096E  B4D8               	btfsc	status,2,c
 22398  010970  D7EF               	goto	l12813
 22399  010972  0A01               	xorlw	1	; case 1
 22400  010974  B4D8               	btfsc	status,2,c
 22401  010976  D7F1               	goto	l12815
 22402  010978                     l12821:
 22403                           
 22404                           ; BSR set to: 0
 22405                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22406  010978  0100               	movlb	0	; () banked
 22407  01097A  EE20 F002          	lfsr	2,2
 22408  01097E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22409  010980  26D9               	addwf	fsr2l,f,c
 22410  010982  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22411  010984  22DA               	addwfc	fsr2h,f,c
 22412  010986  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 22413                           
 22414                           ;SPI.c: 35: switch (pChannel)
 22415  01098A  D0B1               	goto	l12841
 22416  01098C                     l12823:
 22417                           
 22418                           ; BSR set to: 0
 22419                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22420  01098C  0EEC               	movlw	low _PortC
 22421  01098E  0100               	movlb	0	; () banked
 22422  010990  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22423  010992  0E00               	movlw	high _PortC
 22424  010994  0100               	movlb	0	; () banked
 22425  010996  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22426  010998  0E02               	movlw	2
 22427  01099A  0100               	movlb	0	; () banked
 22428  01099C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22429  01099E  0E03               	movlw	3
 22430  0109A0  0100               	movlb	0	; () banked
 22431  0109A2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22432  0109A4  EC68  F094         	call	_Port_SetPinType	;wreg free
 22433                           
 22434                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 22435  0109A8  0EEC               	movlw	low _PortC
 22436  0109AA  0100               	movlb	0	; () banked
 22437  0109AC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22438  0109AE  0E00               	movlw	high _PortC
 22439  0109B0  0100               	movlb	0	; () banked
 22440  0109B2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22441  0109B4  0E03               	movlw	3
 22442  0109B6  0100               	movlb	0	; () banked
 22443  0109B8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22444  0109BA  0E03               	movlw	3
 22445  0109BC  0100               	movlb	0	; () banked
 22446  0109BE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22447  0109C0  EC68  F094         	call	_Port_SetPinType	;wreg free
 22448                           
 22449                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 22450  0109C4  0EEC               	movlw	low _PortC
 22451  0109C6  0100               	movlb	0	; () banked
 22452  0109C8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22453  0109CA  0E00               	movlw	high _PortC
 22454  0109CC  0100               	movlb	0	; () banked
 22455  0109CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22456  0109D0  0E05               	movlw	5
 22457  0109D2  0100               	movlb	0	; () banked
 22458  0109D4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22459  0109D6  0E03               	movlw	3
 22460  0109D8  0100               	movlb	0	; () banked
 22461  0109DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22462  0109DC  EC68  F094         	call	_Port_SetPinType	;wreg free
 22463                           
 22464                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 22465  0109E0  0EEC               	movlw	low _PortC
 22466  0109E2  0100               	movlb	0	; () banked
 22467  0109E4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22468  0109E6  0E00               	movlw	high _PortC
 22469  0109E8  0100               	movlb	0	; () banked
 22470  0109EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22471  0109EC  0E04               	movlw	4
 22472  0109EE  0100               	movlb	0	; () banked
 22473  0109F0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22474  0109F2  0E00               	movlw	0
 22475  0109F4  0100               	movlb	0	; () banked
 22476  0109F6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22477  0109F8  EC68  F094         	call	_Port_SetPinType	;wreg free
 22478                           
 22479                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 22480  0109FC  0100               	movlb	0	; () banked
 22481  0109FE  EE20 F003          	lfsr	2,3
 22482  010A02  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22483  010A04  26D9               	addwf	fsr2l,f,c
 22484  010A06  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22485  010A08  22DA               	addwfc	fsr2h,f,c
 22486  010A0A  0EC7               	movlw	199
 22487  010A0C  6EDE               	movwf	postinc2,c
 22488  010A0E  0E0F               	movlw	15
 22489  010A10  6EDD               	movwf	postdec2,c
 22490                           
 22491                           ; BSR set to: 0
 22492                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 22493  010A12  0100               	movlb	0	; () banked
 22494  010A14  EE20 F006          	lfsr	2,6
 22495  010A18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22496  010A1A  26D9               	addwf	fsr2l,f,c
 22497  010A1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22498  010A1E  22DA               	addwfc	fsr2h,f,c
 22499  010A20  0EC6               	movlw	198
 22500  010A22  6EDE               	movwf	postinc2,c
 22501  010A24  0E0F               	movlw	15
 22502  010A26  6EDD               	movwf	postdec2,c
 22503                           
 22504                           ; BSR set to: 0
 22505                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 22506  010A28  0100               	movlb	0	; () banked
 22507  010A2A  EE20 F009          	lfsr	2,9
 22508  010A2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22509  010A30  26D9               	addwf	fsr2l,f,c
 22510  010A32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22511  010A34  22DA               	addwfc	fsr2h,f,c
 22512  010A36  0EC9               	movlw	201
 22513  010A38  D056               	goto	L15
 22514  010A3A                     l12831:
 22515                           
 22516                           ; BSR set to: 0
 22517                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 22518  010A3A  0E8E               	movlw	low _PortD
 22519  010A3C  0100               	movlb	0	; () banked
 22520  010A3E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22521  010A40  0E01               	movlw	high _PortD
 22522  010A42  0100               	movlb	0	; () banked
 22523  010A44  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22524  010A46  0E07               	movlw	7
 22525  010A48  0100               	movlb	0	; () banked
 22526  010A4A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22527  010A4C  0E03               	movlw	3
 22528  010A4E  0100               	movlb	0	; () banked
 22529  010A50  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22530  010A52  EC68  F094         	call	_Port_SetPinType	;wreg free
 22531                           
 22532                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 22533  010A56  0E8E               	movlw	low _PortD
 22534  010A58  0100               	movlb	0	; () banked
 22535  010A5A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22536  010A5C  0E01               	movlw	high _PortD
 22537  010A5E  0100               	movlb	0	; () banked
 22538  010A60  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22539  010A62  0E06               	movlw	6
 22540  010A64  0100               	movlb	0	; () banked
 22541  010A66  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22542  010A68  0E03               	movlw	3
 22543  010A6A  0100               	movlb	0	; () banked
 22544  010A6C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22545  010A6E  EC68  F094         	call	_Port_SetPinType	;wreg free
 22546                           
 22547                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 22548  010A72  0E8E               	movlw	low _PortD
 22549  010A74  0100               	movlb	0	; () banked
 22550  010A76  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22551  010A78  0E01               	movlw	high _PortD
 22552  010A7A  0100               	movlb	0	; () banked
 22553  010A7C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22554  010A7E  0E04               	movlw	4
 22555  010A80  0100               	movlb	0	; () banked
 22556  010A82  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22557  010A84  0E03               	movlw	3
 22558  010A86  0100               	movlb	0	; () banked
 22559  010A88  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22560  010A8A  EC68  F094         	call	_Port_SetPinType	;wreg free
 22561                           
 22562                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 22563  010A8E  0E8E               	movlw	low _PortD
 22564  010A90  0100               	movlb	0	; () banked
 22565  010A92  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22566  010A94  0E01               	movlw	high _PortD
 22567  010A96  0100               	movlb	0	; () banked
 22568  010A98  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22569  010A9A  0E05               	movlw	5
 22570  010A9C  0100               	movlb	0	; () banked
 22571  010A9E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22572  010AA0  0E00               	movlw	0
 22573  010AA2  0100               	movlb	0	; () banked
 22574  010AA4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22575  010AA6  EC68  F094         	call	_Port_SetPinType	;wreg free
 22576                           
 22577                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 22578  010AAA  0100               	movlb	0	; () banked
 22579  010AAC  EE20 F003          	lfsr	2,3
 22580  010AB0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22581  010AB2  26D9               	addwf	fsr2l,f,c
 22582  010AB4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22583  010AB6  22DA               	addwfc	fsr2h,f,c
 22584  010AB8  0E6D               	movlw	109
 22585  010ABA  6EDE               	movwf	postinc2,c
 22586  010ABC  0E0F               	movlw	15
 22587  010ABE  6EDD               	movwf	postdec2,c
 22588                           
 22589                           ; BSR set to: 0
 22590                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 22591  010AC0  0100               	movlb	0	; () banked
 22592  010AC2  EE20 F006          	lfsr	2,6
 22593  010AC6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22594  010AC8  26D9               	addwf	fsr2l,f,c
 22595  010ACA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22596  010ACC  22DA               	addwfc	fsr2h,f,c
 22597  010ACE  0E6C               	movlw	108
 22598  010AD0  6EDE               	movwf	postinc2,c
 22599  010AD2  0E0F               	movlw	15
 22600  010AD4  6EDD               	movwf	postdec2,c
 22601                           
 22602                           ; BSR set to: 0
 22603                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 22604  010AD6  0100               	movlb	0	; () banked
 22605  010AD8  EE20 F009          	lfsr	2,9
 22606  010ADC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22607  010ADE  26D9               	addwf	fsr2l,f,c
 22608  010AE0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22609  010AE2  22DA               	addwfc	fsr2h,f,c
 22610  010AE4  0E6F               	movlw	111
 22611  010AE6                     L15:
 22612  010AE6  6EDE               	movwf	postinc2,c
 22613  010AE8  0E0F               	movlw	15
 22614  010AEA  6EDD               	movwf	postdec2,c
 22615                           
 22616                           ;SPI.c: 68: break;
 22617  010AEC  D009               	goto	l12843
 22618  010AEE                     l12841:
 22619                           
 22620                           ; BSR set to: 0
 22621  010AEE  0100               	movlb	0	; () banked
 22622  010AF0  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22623                           
 22624                           ; Switch size 1, requested type "space"
 22625                           ; Number of cases is 2, Range of values is 0 to 1
 22626                           ; switch strategies available:
 22627                           ; Name         Instructions Cycles
 22628                           ; simple_byte            7     4 (average)
 22629                           ;	Chosen strategy is simple_byte
 22630  010AF2  0A00               	xorlw	0	; case 0
 22631  010AF4  B4D8               	btfsc	status,2,c
 22632  010AF6  D74A               	goto	l12823
 22633  010AF8  0A01               	xorlw	1	; case 1
 22634  010AFA  A4D8               	btfss	status,2,c
 22635  010AFC  0012               	return	
 22636  010AFE  D79D               	goto	l12831
 22637  010B00                     l12843:
 22638                           
 22639                           ; BSR set to: 0
 22640                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22641  010B00  0100               	movlb	0	; () banked
 22642  010B02  EE20 F006          	lfsr	2,6
 22643  010B06  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22644  010B08  26D9               	addwf	fsr2l,f,c
 22645  010B0A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22646  010B0C  22DA               	addwfc	fsr2h,f,c
 22647  010B0E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22648  010B12  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22649  010B16  0E05               	movlw	5
 22650  010B18  0100               	movlb	0	; () banked
 22651  010B1A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22652  010B1C  0E00               	movlw	0
 22653  010B1E  0100               	movlb	0	; () banked
 22654  010B20  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22655  010B22  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22656                           
 22657                           ;SPI.c: 77: switch(pMode)
 22658  010B26  D09C               	goto	l12855
 22659  010B28                     l12845:
 22660                           
 22661                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 22662  010B28  0100               	movlb	0	; () banked
 22663  010B2A  EE20 F006          	lfsr	2,6
 22664  010B2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22665  010B30  26D9               	addwf	fsr2l,f,c
 22666  010B32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22667  010B34  22DA               	addwfc	fsr2h,f,c
 22668  010B36  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22669  010B3A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22670  010B3E  0E04               	movlw	4
 22671  010B40  0100               	movlb	0	; () banked
 22672  010B42  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22673  010B44  0E00               	movlw	0
 22674  010B46  0100               	movlb	0	; () banked
 22675  010B48  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22676  010B4A  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22677                           
 22678                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 22679  010B4E  0100               	movlb	0	; () banked
 22680  010B50  EE20 F003          	lfsr	2,3
 22681  010B54  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22682  010B56  26D9               	addwf	fsr2l,f,c
 22683  010B58  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22684  010B5A  22DA               	addwfc	fsr2h,f,c
 22685  010B5C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22686  010B60  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22687  010B64  0E06               	movlw	6
 22688  010B66  0100               	movlb	0	; () banked
 22689  010B68  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22690  010B6A  0E00               	movlw	0
 22691  010B6C  0100               	movlb	0	; () banked
 22692  010B6E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22693  010B70  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22694                           
 22695                           ;SPI.c: 82: break;
 22696  010B74  D084               	goto	l12857
 22697  010B76                     l12847:
 22698                           
 22699                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 22700  010B76  0100               	movlb	0	; () banked
 22701  010B78  EE20 F006          	lfsr	2,6
 22702  010B7C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22703  010B7E  26D9               	addwf	fsr2l,f,c
 22704  010B80  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22705  010B82  22DA               	addwfc	fsr2h,f,c
 22706  010B84  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22707  010B88  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22708  010B8C  0E04               	movlw	4
 22709  010B8E  0100               	movlb	0	; () banked
 22710  010B90  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22711  010B92  0E00               	movlw	0
 22712  010B94  0100               	movlb	0	; () banked
 22713  010B96  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22714  010B98  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22715                           
 22716                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 22717  010B9C  0100               	movlb	0	; () banked
 22718  010B9E  EE20 F003          	lfsr	2,3
 22719  010BA2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22720  010BA4  26D9               	addwf	fsr2l,f,c
 22721  010BA6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22722  010BA8  22DA               	addwfc	fsr2h,f,c
 22723  010BAA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22724  010BAE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22725  010BB2  0E06               	movlw	6
 22726  010BB4  0100               	movlb	0	; () banked
 22727  010BB6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22728  010BB8  0E01               	movlw	1
 22729  010BBA  0100               	movlb	0	; () banked
 22730  010BBC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22731  010BBE  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22732                           
 22733                           ;SPI.c: 86: break;
 22734  010BC2  D05D               	goto	l12857
 22735  010BC4                     l12849:
 22736                           
 22737                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 22738  010BC4  0100               	movlb	0	; () banked
 22739  010BC6  EE20 F006          	lfsr	2,6
 22740  010BCA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22741  010BCC  26D9               	addwf	fsr2l,f,c
 22742  010BCE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22743  010BD0  22DA               	addwfc	fsr2h,f,c
 22744  010BD2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22745  010BD6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22746  010BDA  0E04               	movlw	4
 22747  010BDC  0100               	movlb	0	; () banked
 22748  010BDE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22749  010BE0  0E01               	movlw	1
 22750  010BE2  0100               	movlb	0	; () banked
 22751  010BE4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22752  010BE6  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22753                           
 22754                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 22755  010BEA  0100               	movlb	0	; () banked
 22756  010BEC  EE20 F003          	lfsr	2,3
 22757  010BF0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22758  010BF2  26D9               	addwf	fsr2l,f,c
 22759  010BF4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22760  010BF6  22DA               	addwfc	fsr2h,f,c
 22761  010BF8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22762  010BFC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22763  010C00  0E06               	movlw	6
 22764  010C02  0100               	movlb	0	; () banked
 22765  010C04  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22766  010C06  0E00               	movlw	0
 22767  010C08  0100               	movlb	0	; () banked
 22768  010C0A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22769  010C0C  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22770                           
 22771                           ;SPI.c: 90: break;
 22772  010C10  D036               	goto	l12857
 22773  010C12                     l12851:
 22774                           
 22775                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 22776  010C12  0100               	movlb	0	; () banked
 22777  010C14  EE20 F006          	lfsr	2,6
 22778  010C18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22779  010C1A  26D9               	addwf	fsr2l,f,c
 22780  010C1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22781  010C1E  22DA               	addwfc	fsr2h,f,c
 22782  010C20  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22783  010C24  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22784  010C28  0E04               	movlw	4
 22785  010C2A  0100               	movlb	0	; () banked
 22786  010C2C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22787  010C2E  0E01               	movlw	1
 22788  010C30  0100               	movlb	0	; () banked
 22789  010C32  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22790  010C34  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22791                           
 22792                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 22793  010C38  0100               	movlb	0	; () banked
 22794  010C3A  EE20 F003          	lfsr	2,3
 22795  010C3E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22796  010C40  26D9               	addwf	fsr2l,f,c
 22797  010C42  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22798  010C44  22DA               	addwfc	fsr2h,f,c
 22799  010C46  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22800  010C4A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22801  010C4E  0E06               	movlw	6
 22802  010C50  0100               	movlb	0	; () banked
 22803  010C52  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22804  010C54  0E01               	movlw	1
 22805  010C56  0100               	movlb	0	; () banked
 22806  010C58  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22807  010C5A  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22808                           
 22809                           ;SPI.c: 94: break;
 22810  010C5E  D00F               	goto	l12857
 22811  010C60                     l12855:
 22812  010C60  0100               	movlb	0	; () banked
 22813  010C62  5192               	movf	SPI_Init@pMode& (0+255),w,b
 22814                           
 22815                           ; Switch size 1, requested type "space"
 22816                           ; Number of cases is 4, Range of values is 0 to 3
 22817                           ; switch strategies available:
 22818                           ; Name         Instructions Cycles
 22819                           ; simple_byte           13     7 (average)
 22820                           ;	Chosen strategy is simple_byte
 22821  010C64  0A00               	xorlw	0	; case 0
 22822  010C66  B4D8               	btfsc	status,2,c
 22823  010C68  D75F               	goto	l12845
 22824  010C6A  0A01               	xorlw	1	; case 1
 22825  010C6C  B4D8               	btfsc	status,2,c
 22826  010C6E  D783               	goto	l12847
 22827  010C70  0A03               	xorlw	3	; case 2
 22828  010C72  B4D8               	btfsc	status,2,c
 22829  010C74  D7A7               	goto	l12849
 22830  010C76  0A01               	xorlw	1	; case 3
 22831  010C78  A4D8               	btfss	status,2,c
 22832  010C7A  0012               	return	
 22833  010C7C  D7CA               	goto	l12851
 22834  010C7E                     l12857:
 22835                           
 22836                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 22837  010C7E  0100               	movlb	0	; () banked
 22838  010C80  EE20 F006          	lfsr	2,6
 22839  010C84  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22840  010C86  26D9               	addwf	fsr2l,f,c
 22841  010C88  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22842  010C8A  22DA               	addwfc	fsr2h,f,c
 22843  010C8C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22844  010C90  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22845  010C94  0E07               	movlw	7
 22846  010C96  0100               	movlb	0	; () banked
 22847  010C98  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22848  010C9A  0E00               	movlw	0
 22849  010C9C  0100               	movlb	0	; () banked
 22850  010C9E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22851  010CA0  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22852                           
 22853                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 22854  010CA4  0100               	movlb	0	; () banked
 22855  010CA6  EE20 F006          	lfsr	2,6
 22856  010CAA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22857  010CAC  26D9               	addwf	fsr2l,f,c
 22858  010CAE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22859  010CB0  22DA               	addwfc	fsr2h,f,c
 22860  010CB2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22861  010CB6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22862  010CBA  0E06               	movlw	6
 22863  010CBC  0100               	movlb	0	; () banked
 22864  010CBE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22865  010CC0  0E00               	movlw	0
 22866  010CC2  0100               	movlb	0	; () banked
 22867  010CC4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22868  010CC6  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22869                           
 22870                           ;SPI.c: 106: Timer2_Init(pClock);
 22871  010CCA  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 22872  010CCE  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 22873  010CD2  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 22874  010CD6  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 22875  010CDA  EC00  F09C         	call	_Timer2_Init	;wreg free
 22876                           
 22877                           ;SPI.c: 112: SPI_DisableISR(pInput);
 22878  010CDE  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 22879  010CE2  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 22880  010CE6  EC50  F0B3         	call	_SPI_DisableISR	;wreg free
 22881                           
 22882                           ;SPI.c: 116: switch (pChannel)
 22883  010CEA  D004               	goto	l12865
 22884  010CEC                     l615:
 22885                           
 22886                           ; BSR set to: 0
 22887  010CEC  869F               	bsf	3999,3,c	;volatile
 22888  010CEE  D00B               	goto	l12867
 22889  010CF0                     l617:
 22890                           
 22891                           ; BSR set to: 0
 22892  010CF0  8EA5               	bsf	4005,7,c	;volatile
 22893  010CF2  D009               	goto	l12867
 22894  010CF4                     l12865:
 22895  010CF4  0100               	movlb	0	; () banked
 22896  010CF6  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22897                           
 22898                           ; Switch size 1, requested type "space"
 22899                           ; Number of cases is 2, Range of values is 0 to 1
 22900                           ; switch strategies available:
 22901                           ; Name         Instructions Cycles
 22902                           ; simple_byte            7     4 (average)
 22903                           ;	Chosen strategy is simple_byte
 22904  010CF8  0A00               	xorlw	0	; case 0
 22905  010CFA  B4D8               	btfsc	status,2,c
 22906  010CFC  D7F7               	goto	l615
 22907  010CFE  0A01               	xorlw	1	; case 1
 22908  010D00  A4D8               	btfss	status,2,c
 22909  010D02  0012               	return	
 22910  010D04  D7F5               	goto	l617
 22911  010D06                     l12867:
 22912                           
 22913                           ; BSR set to: 0
 22914                           ;SPI.c: 124: SPI_DCS(pInput);
 22915  010D06  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 22916  010D0A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 22917  010D0E  ECC8  F0B2         	call	_SPI_DCS	;wreg free
 22918                           
 22919                           ;SPI.c: 126: pInput->mBusy = 0;
 22920  010D12  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 22921  010D16  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 22922  010D1A  0E00               	movlw	0
 22923  010D1C  6EDF               	movwf	indf2,c
 22924                           
 22925                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 22926  010D1E  0100               	movlb	0	; () banked
 22927  010D20  EE20 F006          	lfsr	2,6
 22928  010D24  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22929  010D26  26D9               	addwf	fsr2l,f,c
 22930  010D28  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22931  010D2A  22DA               	addwfc	fsr2h,f,c
 22932  010D2C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22933  010D30  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22934  010D34  0E00               	movlw	0
 22935  010D36  0100               	movlb	0	; () banked
 22936  010D38  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22937  010D3A  0E03               	movlw	3
 22938  010D3C  0100               	movlb	0	; () banked
 22939  010D3E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22940  010D40  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 22941                           
 22942                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22943  010D44  0100               	movlb	0	; () banked
 22944  010D46  EE20 F006          	lfsr	2,6
 22945  010D4A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22946  010D4C  26D9               	addwf	fsr2l,f,c
 22947  010D4E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22948  010D50  22DA               	addwfc	fsr2h,f,c
 22949  010D52  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22950  010D56  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22951  010D5A  0E05               	movlw	5
 22952  010D5C  0100               	movlb	0	; () banked
 22953  010D5E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22954  010D60  0E01               	movlw	1
 22955  010D62  0100               	movlb	0	; () banked
 22956  010D64  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22957  010D66  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 22958  010D6A  0012               	return		;funcret
 22959  010D6C                     __end_of_SPI_Init:
 22960                           	opt stack 0
 22961                           tosu	equ	0xFFF
 22962                           tosh	equ	0xFFE
 22963                           tosl	equ	0xFFD
 22964                           pclath	equ	0xFFA
 22965                           tblptru	equ	0xFF8
 22966                           tblptrh	equ	0xFF7
 22967                           tblptrl	equ	0xFF6
 22968                           tablat	equ	0xFF5
 22969                           prodh	equ	0xFF4
 22970                           prodl	equ	0xFF3
 22971                           intcon	equ	0xFF2
 22972                           postinc0	equ	0xFEE
 22973                           wreg	equ	0xFE8
 22974                           indf1	equ	0xFE7
 22975                           postdec1	equ	0xFE5
 22976                           fsr1h	equ	0xFE2
 22977                           fsr1l	equ	0xFE1
 22978                           indf2	equ	0xFDF
 22979                           postinc2	equ	0xFDE
 22980                           postdec2	equ	0xFDD
 22981                           plusw2	equ	0xFDB
 22982                           fsr2h	equ	0xFDA
 22983                           fsr2l	equ	0xFD9
 22984                           status	equ	0xFD8
 22985                           
 22986 ;; *************** function _Timer2_Init *****************
 22987 ;; Defined at:
 22988 ;;		line 10 in file "Library/Timer2.c"
 22989 ;; Parameters:    Size  Location     Type
 22990 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 22991 ;; Auto vars:     Size  Location     Type
 22992 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 22993 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 22994 ;;  RDIV            4   18[BANK0 ] unsigned long 
 22995 ;; Return value:  Size  Location     Type
 22996 ;;                  1    wreg      void 
 22997 ;; Registers used:
 22998 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22999 ;; Tracked objects:
 23000 ;;		On entry : 0/0
 23001 ;;		On exit  : 0/0
 23002 ;;		Unchanged: 0/0
 23003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23004 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23005 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23007 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23008 ;;Total ram usage:       17 bytes
 23009 ;; Hardware stack levels used:    1
 23010 ;; Hardware stack levels required when called:    8
 23011 ;; This function calls:
 23012 ;;		_Timer2_Clear
 23013 ;;		___lldiv
 23014 ;; This function is called by:
 23015 ;;		_SPI_Init
 23016 ;; This function uses a non-reentrant model
 23017 ;;
 23018                           
 23019                           	psect	text108
 23020  013800                     __ptext108:
 23021                           	opt stack 0
 23022  013800                     _Timer2_Init:
 23023                           	opt stack 18
 23024                           
 23025                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 23026                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 23027                           ;Timer2.c: 14: static UINT8 PRE = 0;
 23028                           ;Timer2.c: 15: static UINT32 DIV = 0;
 23029                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 23030                           
 23031                           ;incstack = 0
 23032  013800  0E00               	movlw	0
 23033  013802  0100               	movlb	0	; () banked
 23034  013804  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 23035  013806  0E6C               	movlw	108
 23036  013808  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 23037  01380A  0EDC               	movlw	220
 23038  01380C  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 23039  01380E  0E02               	movlw	2
 23040  013810  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 23041                           
 23042                           ; BSR set to: 0
 23043                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 23044                           ;Timer2.c: 20: pFrequency *= 2;
 23045  013812  0100               	movlb	0	; () banked
 23046  013814  90D8               	bcf	status,0,c
 23047  013816  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 23048  013818  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 23049  01381A  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 23050  01381C  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 23051                           
 23052                           ; BSR set to: 0
 23053                           ;Timer2.c: 23: pCPUClock /= 4;
 23054  01381E  0E02               	movlw	2
 23055  013820  0100               	movlb	0	; () banked
 23056  013822  6F71               	movwf	??_Timer2_Init& (0+255),b
 23057  013824                     u9605:
 23058  013824  90D8               	bcf	status,0,c
 23059  013826  0100               	movlb	0	; () banked
 23060  013828  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 23061  01382A  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 23062  01382C  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 23063  01382E  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 23064  013830  0100               	movlb	0	; () banked
 23065  013832  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 23066  013834  D7F7               	goto	u9605
 23067                           
 23068                           ; BSR set to: 0
 23069                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 23070  013836  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 23071  01383A  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 23072  01383E  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 23073  013842  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 23074  013846  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 23075  01384A  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 23076  01384E  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 23077  013852  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 23078  013856  ECC2  F0A3         	call	___lldiv	;wreg free
 23079  01385A  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 23080  01385E  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 23081  013862  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 23082  013866  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 23083                           
 23084                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 23085  01386A  D00E               	goto	l12237
 23086  01386C                     l12229:
 23087                           
 23088                           ;Timer2.c: 28: {
 23089                           ;Timer2.c: 29: RDIV = 0;
 23090  01386C  0E00               	movlw	0
 23091  01386E  0100               	movlb	0	; () banked
 23092  013870  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 23093  013872  0E00               	movlw	0
 23094  013874  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 23095  013876  0E00               	movlw	0
 23096  013878  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 23097  01387A  0E00               	movlw	0
 23098  01387C  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 23099                           
 23100                           ; BSR set to: 0
 23101                           ;Timer2.c: 30: INDEX ++;
 23102  01387E  2A2F               	incf	Timer2_Init@INDEX,f,c
 23103                           
 23104                           ; BSR set to: 0
 23105                           ;Timer2.c: 31: if (INDEX >= 3)
 23106  013880  0E02               	movlw	2
 23107  013882  642F               	cpfsgt	Timer2_Init@INDEX,c
 23108  013884  D001               	goto	l12237
 23109  013886  D025               	goto	l12239
 23110  013888                     l12237:
 23111  013888  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 23112  01388C  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 23113  013890  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 23114  013894  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 23115  013898  502F               	movf	Timer2_Init@INDEX,w,c
 23116  01389A  0D01               	mullw	1
 23117  01389C  0E40               	movlw	low Timer2_Init@PRESCALE
 23118  01389E  24F3               	addwf	prodl,w,c
 23119  0138A0  6EF6               	movwf	tblptrl,c
 23120  0138A2  0EFD               	movlw	high Timer2_Init@PRESCALE
 23121  0138A4  20F4               	addwfc	prodh,w,c
 23122  0138A6  6EF7               	movwf	tblptrh,c
 23123  0138A8                     	if	1	;There are 3 active tblptr bytes
 23124  0138A8  6AF8               	clrf	tblptru,c
 23125  0138AA  0E00               	movlw	low (__mediumconst shr (0+16))
 23126  0138AC  22F8               	addwfc	tblptru,f,c
 23127  0138AE                     	endif
 23128  0138AE  0008               	tblrd		*
 23129  0138B0  50F5               	movf	tablat,w,c
 23130  0138B2  0100               	movlb	0	; () banked
 23131  0138B4  6F64               	movwf	___lldiv@divisor& (0+255),b
 23132  0138B6  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23133  0138B8  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23134  0138BA  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23135  0138BC  ECC2  F0A3         	call	___lldiv	;wreg free
 23136  0138C0  0100               	movlb	0	; () banked
 23137  0138C2  5163               	movf	(?___lldiv+3)& (0+255),w,b
 23138  0138C4  0100               	movlb	0	; () banked
 23139  0138C6  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 23140  0138C8  E1D1               	bnz	l12229
 23141  0138CA  0100               	movlb	0	; () banked
 23142  0138CC  0561               	decf	(?___lldiv+1)& (0+255),w,b
 23143  0138CE  B0D8               	btfsc	status,0,c
 23144  0138D0  D7CD               	goto	l12229
 23145  0138D2                     l12239:
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;Timer2.c: 33: }
 23149                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 23150  0138D2  50CA               	movf	4042,w,c	;volatile
 23151  0138D4  182F               	xorwf	Timer2_Init@INDEX,w,c
 23152  0138D6  0BFC               	andlw	-4
 23153  0138D8  182F               	xorwf	Timer2_Init@INDEX,w,c
 23154  0138DA  6ECA               	movwf	4042,c	;volatile
 23155                           
 23156                           ; BSR set to: 0
 23157                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 23158  0138DC  84CA               	bsf	4042,2,c	;volatile
 23159                           
 23160                           ; BSR set to: 0
 23161                           ;Timer2.c: 44: Timer2_Clear();
 23162  0138DE  ECEE  F0B4         	call	_Timer2_Clear	;wreg free
 23163                           
 23164                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 23165  0138E2  502F               	movf	Timer2_Init@INDEX,w,c
 23166  0138E4  0D01               	mullw	1
 23167  0138E6  0E40               	movlw	low Timer2_Init@PRESCALE
 23168  0138E8  24F3               	addwf	prodl,w,c
 23169  0138EA  6EF6               	movwf	tblptrl,c
 23170  0138EC  0EFD               	movlw	high Timer2_Init@PRESCALE
 23171  0138EE  20F4               	addwfc	prodh,w,c
 23172  0138F0  6EF7               	movwf	tblptrh,c
 23173  0138F2                     	if	1	;There are 3 active tblptr bytes
 23174  0138F2  6AF8               	clrf	tblptru,c
 23175  0138F4  0E00               	movlw	low (__mediumconst shr (0+16))
 23176  0138F6  22F8               	addwfc	tblptru,f,c
 23177  0138F8                     	endif
 23178  0138F8  0008               	tblrd		*
 23179  0138FA  CFF5 F02E          	movff	tablat,Timer2_Init@PRE
 23180                           
 23181                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 23182  0138FE  0EFF               	movlw	255
 23183  013900  0100               	movlb	0	; () banked
 23184  013902  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 23185  013904  0101               	movlb	1	; () banked
 23186  013906  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 23187  013908  0EFF               	movlw	255
 23188  01390A  0100               	movlb	0	; () banked
 23189  01390C  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 23190  01390E  0101               	movlb	1	; () banked
 23191  013910  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 23192  013912  0EFF               	movlw	255
 23193  013914  0100               	movlb	0	; () banked
 23194  013916  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 23195  013918  0101               	movlb	1	; () banked
 23196  01391A  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 23197  01391C  0EFF               	movlw	255
 23198  01391E  0100               	movlb	0	; () banked
 23199  013920  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 23200  013922  0101               	movlb	1	; () banked
 23201  013924  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 23202                           
 23203                           ; BSR set to: 1
 23204                           ;Timer2.c: 48: INDEX = DIV/PRE;
 23205  013926  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 23206  01392A  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 23207  01392E  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 23208  013932  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 23209  013936  502E               	movf	Timer2_Init@PRE,w,c
 23210  013938  0100               	movlb	0	; () banked
 23211  01393A  6F64               	movwf	___lldiv@divisor& (0+255),b
 23212  01393C  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23213  01393E  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23214  013940  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23215  013942  ECC2  F0A3         	call	___lldiv	;wreg free
 23216  013946  0100               	movlb	0	; () banked
 23217  013948  5160               	movf	?___lldiv& (0+255),w,b
 23218  01394A  6E2F               	movwf	Timer2_Init@INDEX,c
 23219                           
 23220                           ; BSR set to: 0
 23221                           ;Timer2.c: 49: PR2 = INDEX;
 23222  01394C  C02F  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 23223                           
 23224                           ; BSR set to: 0
 23225  013950  0012               	return		;funcret
 23226  013952                     __end_of_Timer2_Init:
 23227                           	opt stack 0
 23228                           tosu	equ	0xFFF
 23229                           tosh	equ	0xFFE
 23230                           tosl	equ	0xFFD
 23231                           pclath	equ	0xFFA
 23232                           tblptru	equ	0xFF8
 23233                           tblptrh	equ	0xFF7
 23234                           tblptrl	equ	0xFF6
 23235                           tablat	equ	0xFF5
 23236                           prodh	equ	0xFF4
 23237                           prodl	equ	0xFF3
 23238                           intcon	equ	0xFF2
 23239                           postinc0	equ	0xFEE
 23240                           wreg	equ	0xFE8
 23241                           indf1	equ	0xFE7
 23242                           postdec1	equ	0xFE5
 23243                           fsr1h	equ	0xFE2
 23244                           fsr1l	equ	0xFE1
 23245                           indf2	equ	0xFDF
 23246                           postinc2	equ	0xFDE
 23247                           postdec2	equ	0xFDD
 23248                           plusw2	equ	0xFDB
 23249                           fsr2h	equ	0xFDA
 23250                           fsr2l	equ	0xFD9
 23251                           status	equ	0xFD8
 23252                           
 23253 ;; *************** function _Timer2_Clear *****************
 23254 ;; Defined at:
 23255 ;;		line 3 in file "Library/Timer2.c"
 23256 ;; Parameters:    Size  Location     Type
 23257 ;;		None
 23258 ;; Auto vars:     Size  Location     Type
 23259 ;;		None
 23260 ;; Return value:  Size  Location     Type
 23261 ;;                  1    wreg      void 
 23262 ;; Registers used:
 23263 ;;		None
 23264 ;; Tracked objects:
 23265 ;;		On entry : 0/0
 23266 ;;		On exit  : 0/0
 23267 ;;		Unchanged: 0/0
 23268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23273 ;;Total ram usage:        0 bytes
 23274 ;; Hardware stack levels used:    1
 23275 ;; Hardware stack levels required when called:    7
 23276 ;; This function calls:
 23277 ;;		Nothing
 23278 ;; This function is called by:
 23279 ;;		_Timer2_Init
 23280 ;; This function uses a non-reentrant model
 23281 ;;
 23282                           
 23283                           	psect	text109
 23284  0169DC                     __ptext109:
 23285                           	opt stack 0
 23286  0169DC                     _Timer2_Clear:
 23287                           	opt stack 18
 23288                           
 23289                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23290                           
 23291                           ; BSR set to: 0
 23292                           ;incstack = 0
 23293  0169DC  929E               	bcf	3998,1,c	;volatile
 23294                           
 23295                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23296  0169DE  929D               	bcf	3997,1,c	;volatile
 23297                           
 23298                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 23299  0169E0  929F               	bcf	3999,1,c	;volatile
 23300  0169E2  0012               	return		;funcret
 23301  0169E4                     __end_of_Timer2_Clear:
 23302                           	opt stack 0
 23303                           tosu	equ	0xFFF
 23304                           tosh	equ	0xFFE
 23305                           tosl	equ	0xFFD
 23306                           pclath	equ	0xFFA
 23307                           tblptru	equ	0xFF8
 23308                           tblptrh	equ	0xFF7
 23309                           tblptrl	equ	0xFF6
 23310                           tablat	equ	0xFF5
 23311                           prodh	equ	0xFF4
 23312                           prodl	equ	0xFF3
 23313                           intcon	equ	0xFF2
 23314                           postinc0	equ	0xFEE
 23315                           wreg	equ	0xFE8
 23316                           indf1	equ	0xFE7
 23317                           postdec1	equ	0xFE5
 23318                           fsr1h	equ	0xFE2
 23319                           fsr1l	equ	0xFE1
 23320                           indf2	equ	0xFDF
 23321                           postinc2	equ	0xFDE
 23322                           postdec2	equ	0xFDD
 23323                           plusw2	equ	0xFDB
 23324                           fsr2h	equ	0xFDA
 23325                           fsr2l	equ	0xFD9
 23326                           status	equ	0xFD8
 23327                           
 23328 ;; *************** function _SPI_DisableISR *****************
 23329 ;; Defined at:
 23330 ;;		line 181 in file "Library/SPI.c"
 23331 ;; Parameters:    Size  Location     Type
 23332 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23333 ;;		 -> SPI1(11), SPI2(11), 
 23334 ;; Auto vars:     Size  Location     Type
 23335 ;;		None
 23336 ;; Return value:  Size  Location     Type
 23337 ;;                  1    wreg      void 
 23338 ;; Registers used:
 23339 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23340 ;; Tracked objects:
 23341 ;;		On entry : 0/0
 23342 ;;		On exit  : 0/0
 23343 ;;		Unchanged: 0/0
 23344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23345 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;Total ram usage:        2 bytes
 23350 ;; Hardware stack levels used:    1
 23351 ;; Hardware stack levels required when called:    7
 23352 ;; This function calls:
 23353 ;;		Nothing
 23354 ;; This function is called by:
 23355 ;;		_SPI_Init
 23356 ;; This function uses a non-reentrant model
 23357 ;;
 23358                           
 23359                           	psect	text110
 23360  0166A0                     __ptext110:
 23361                           	opt stack 0
 23362  0166A0                     _SPI_DisableISR:
 23363                           	opt stack 19
 23364                           
 23365                           ;SPI.c: 183: switch (pInput->mChannel)
 23366                           
 23367                           ;incstack = 0
 23368  0166A0  D004               	goto	l12257
 23369  0166A2                     l655:
 23370                           
 23371                           ; BSR set to: 0
 23372  0166A2  969D               	bcf	3997,3,c	;volatile
 23373  0166A4  0012               	return	
 23374  0166A6                     l657:
 23375                           
 23376                           ; BSR set to: 0
 23377  0166A6  9EA3               	bcf	4003,7,c	;volatile
 23378                           
 23379                           ; BSR set to: 0
 23380                           ;SPI.c: 188: };
 23381                           
 23382                           ; BSR set to: 0
 23383                           
 23384                           ;SPI.c: 187: default: return;
 23385  0166A8  0012               	return	
 23386  0166AA                     l12257:
 23387  0166AA  0100               	movlb	0	; () banked
 23388  0166AC  EE20 F002          	lfsr	2,2
 23389  0166B0  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 23390  0166B2  26D9               	addwf	fsr2l,f,c
 23391  0166B4  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 23392  0166B6  22DA               	addwfc	fsr2h,f,c
 23393  0166B8  50DF               	movf	indf2,w,c
 23394                           
 23395                           ; Switch size 1, requested type "space"
 23396                           ; Number of cases is 2, Range of values is 0 to 1
 23397                           ; switch strategies available:
 23398                           ; Name         Instructions Cycles
 23399                           ; simple_byte            7     4 (average)
 23400                           ;	Chosen strategy is simple_byte
 23401  0166BA  0A00               	xorlw	0	; case 0
 23402  0166BC  B4D8               	btfsc	status,2,c
 23403  0166BE  D7F1               	goto	l655
 23404  0166C0  0A01               	xorlw	1	; case 1
 23405  0166C2  A4D8               	btfss	status,2,c
 23406  0166C4  0012               	return	
 23407  0166C6  D7EF               	goto	l657
 23408  0166C8                     __end_of_SPI_DisableISR:
 23409                           	opt stack 0
 23410                           tosu	equ	0xFFF
 23411                           tosh	equ	0xFFE
 23412                           tosl	equ	0xFFD
 23413                           pclath	equ	0xFFA
 23414                           tblptru	equ	0xFF8
 23415                           tblptrh	equ	0xFF7
 23416                           tblptrl	equ	0xFF6
 23417                           tablat	equ	0xFF5
 23418                           prodh	equ	0xFF4
 23419                           prodl	equ	0xFF3
 23420                           intcon	equ	0xFF2
 23421                           postinc0	equ	0xFEE
 23422                           wreg	equ	0xFE8
 23423                           indf1	equ	0xFE7
 23424                           postdec1	equ	0xFE5
 23425                           fsr1h	equ	0xFE2
 23426                           fsr1l	equ	0xFE1
 23427                           indf2	equ	0xFDF
 23428                           postinc2	equ	0xFDE
 23429                           postdec2	equ	0xFDD
 23430                           plusw2	equ	0xFDB
 23431                           fsr2h	equ	0xFDA
 23432                           fsr2l	equ	0xFD9
 23433                           status	equ	0xFD8
 23434                           
 23435 ;; *************** function _SPI_DCS *****************
 23436 ;; Defined at:
 23437 ;;		line 219 in file "Library/SPI.c"
 23438 ;; Parameters:    Size  Location     Type
 23439 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23440 ;;		 -> SPI1(11), SPI2(11), 
 23441 ;; Auto vars:     Size  Location     Type
 23442 ;;		None
 23443 ;; Return value:  Size  Location     Type
 23444 ;;                  1    wreg      void 
 23445 ;; Registers used:
 23446 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23447 ;; Tracked objects:
 23448 ;;		On entry : 0/0
 23449 ;;		On exit  : 0/0
 23450 ;;		Unchanged: 0/0
 23451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23455 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23456 ;;Total ram usage:        2 bytes
 23457 ;; Hardware stack levels used:    1
 23458 ;; Hardware stack levels required when called:    7
 23459 ;; This function calls:
 23460 ;;		Nothing
 23461 ;; This function is called by:
 23462 ;;		_SPI_Init
 23463 ;; This function uses a non-reentrant model
 23464 ;;
 23465                           
 23466                           	psect	text111
 23467  016590                     __ptext111:
 23468                           	opt stack 0
 23469  016590                     _SPI_DCS:
 23470                           	opt stack 19
 23471                           
 23472                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 23473                           
 23474                           ; BSR set to: 0
 23475                           ;incstack = 0
 23476  016590  0100               	movlb	0	; () banked
 23477  016592  EE20 F002          	lfsr	2,2
 23478  016596  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 23479  016598  26D9               	addwf	fsr2l,f,c
 23480  01659A  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 23481  01659C  22DA               	addwfc	fsr2h,f,c
 23482  01659E  50DF               	movf	indf2,w,c
 23483  0165A0  A4D8               	btfss	status,2,c
 23484  0165A2  D007               	goto	l12263
 23485                           
 23486                           ; BSR set to: 0
 23487                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 23488  0165A4  C0F0  FFD9         	movff	_PortC+4,fsr2l
 23489  0165A8  C0F1  FFDA         	movff	_PortC+5,fsr2h
 23490  0165AC  0100               	movlb	0	; () banked
 23491  0165AE  84DF               	bsf	indf2,2,c
 23492  0165B0  0012               	return	
 23493  0165B2                     l12263:
 23494                           
 23495                           ; BSR set to: 0
 23496                           ;SPI.c: 223: else
 23497                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 23498  0165B2  C192  FFD9         	movff	_PortD+4,fsr2l
 23499  0165B6  C193  FFDA         	movff	_PortD+5,fsr2h
 23500  0165BA  0101               	movlb	1	; () banked
 23501  0165BC  8EDF               	bsf	indf2,7,c
 23502  0165BE  0012               	return	
 23503  0165C0                     __end_of_SPI_DCS:
 23504                           	opt stack 0
 23505                           tosu	equ	0xFFF
 23506                           tosh	equ	0xFFE
 23507                           tosl	equ	0xFFD
 23508                           pclath	equ	0xFFA
 23509                           tblptru	equ	0xFF8
 23510                           tblptrh	equ	0xFF7
 23511                           tblptrl	equ	0xFF6
 23512                           tablat	equ	0xFF5
 23513                           prodh	equ	0xFF4
 23514                           prodl	equ	0xFF3
 23515                           intcon	equ	0xFF2
 23516                           postinc0	equ	0xFEE
 23517                           wreg	equ	0xFE8
 23518                           indf1	equ	0xFE7
 23519                           postdec1	equ	0xFE5
 23520                           fsr1h	equ	0xFE2
 23521                           fsr1l	equ	0xFE1
 23522                           indf2	equ	0xFDF
 23523                           postinc2	equ	0xFDE
 23524                           postdec2	equ	0xFDD
 23525                           plusw2	equ	0xFDB
 23526                           fsr2h	equ	0xFDA
 23527                           fsr2l	equ	0xFD9
 23528                           status	equ	0xFD8
 23529                           
 23530 ;; *************** function _FunctInitButton *****************
 23531 ;; Defined at:
 23532 ;;		line 16 in file "Functions.c"
 23533 ;; Parameters:    Size  Location     Type
 23534 ;;		None
 23535 ;; Auto vars:     Size  Location     Type
 23536 ;;		None
 23537 ;; Return value:  Size  Location     Type
 23538 ;;                  1    wreg      void 
 23539 ;; Registers used:
 23540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23541 ;; Tracked objects:
 23542 ;;		On entry : 0/0
 23543 ;;		On exit  : 0/0
 23544 ;;		Unchanged: 0/0
 23545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23550 ;;Total ram usage:        0 bytes
 23551 ;; Hardware stack levels used:    1
 23552 ;; Hardware stack levels required when called:   16
 23553 ;; This function calls:
 23554 ;;		_Button_Init
 23555 ;; This function is called by:
 23556 ;;		_init
 23557 ;; This function uses a non-reentrant model
 23558 ;;
 23559                           
 23560                           	psect	text112
 23561  015060                     __ptext112:
 23562                           	opt stack 0
 23563  015060                     _FunctInitButton:
 23564                           	opt stack 13
 23565                           
 23566                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 23567                           
 23568                           ;incstack = 0
 23569  015060  0E70               	movlw	low _TestButton
 23570  015062  0100               	movlb	0	; () banked
 23571  015064  6F9B               	movwf	Button_Init@pInput& (0+255),b
 23572  015066  0E01               	movlw	high _TestButton
 23573  015068  0100               	movlb	0	; () banked
 23574  01506A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 23575  01506C  0E00               	movlw	0
 23576  01506E  0100               	movlb	0	; () banked
 23577  015070  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 23578  015072  0E02               	movlw	2
 23579  015074  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 23580  015076  0ECA               	movlw	low _MXK_InitTestButton
 23581  015078  0100               	movlb	0	; () banked
 23582  01507A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 23583  01507C  0E67               	movlw	high _MXK_InitTestButton
 23584  01507E  0100               	movlb	0	; () banked
 23585  015080  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 23586  015082  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 23587  015084  0100               	movlb	0	; () banked
 23588  015086  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 23589  015088  0EE6               	movlw	low _MXK_TestButton
 23590  01508A  0100               	movlb	0	; () banked
 23591  01508C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 23592  01508E  0E68               	movlw	high _MXK_TestButton
 23593  015090  0100               	movlb	0	; () banked
 23594  015092  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 23595  015094  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 23596  015096  0100               	movlb	0	; () banked
 23597  015098  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 23598  01509A  0EB0               	movlw	low _Event_TestButton
 23599  01509C  0100               	movlb	0	; () banked
 23600  01509E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 23601  0150A0  0E63               	movlw	high _Event_TestButton
 23602  0150A2  0100               	movlb	0	; () banked
 23603  0150A4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 23604  0150A6  0E01               	movlw	low (_Event_TestButton shr (0+16))
 23605  0150A8  0100               	movlb	0	; () banked
 23606  0150AA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 23607  0150AC  ECCE  F0A1         	call	_Button_Init	;wreg free
 23608                           
 23609                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 23610  0150B0  0E66               	movlw	low _DIPSwitch
 23611  0150B2  0100               	movlb	0	; () banked
 23612  0150B4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 23613  0150B6  0E01               	movlw	high _DIPSwitch
 23614  0150B8  0100               	movlb	0	; () banked
 23615  0150BA  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 23616  0150BC  0E00               	movlw	0
 23617  0150BE  0100               	movlb	0	; () banked
 23618  0150C0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 23619  0150C2  0E02               	movlw	2
 23620  0150C4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 23621  0150C6  0EAC               	movlw	low _MXK_InitDIPSwitch
 23622  0150C8  0100               	movlb	0	; () banked
 23623  0150CA  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 23624  0150CC  0E67               	movlw	high _MXK_InitDIPSwitch
 23625  0150CE  0100               	movlb	0	; () banked
 23626  0150D0  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 23627  0150D2  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 23628  0150D4  0100               	movlb	0	; () banked
 23629  0150D6  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 23630  0150D8  0E56               	movlw	low _MXK_DIPSwitch
 23631  0150DA  0100               	movlb	0	; () banked
 23632  0150DC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 23633  0150DE  0E68               	movlw	high _MXK_DIPSwitch
 23634  0150E0  0100               	movlb	0	; () banked
 23635  0150E2  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 23636  0150E4  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 23637  0150E6  0100               	movlb	0	; () banked
 23638  0150E8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 23639  0150EA  0EF0               	movlw	low _Event_DIPSwitch
 23640  0150EC  0100               	movlb	0	; () banked
 23641  0150EE  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 23642  0150F0  0E65               	movlw	high _Event_DIPSwitch
 23643  0150F2  0100               	movlb	0	; () banked
 23644  0150F4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 23645  0150F6  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 23646  0150F8  0100               	movlb	0	; () banked
 23647  0150FA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 23648  0150FC  ECCE  F0A1         	call	_Button_Init	;wreg free
 23649  015100  0012               	return		;funcret
 23650  015102                     __end_of_FunctInitButton:
 23651                           	opt stack 0
 23652                           tosu	equ	0xFFF
 23653                           tosh	equ	0xFFE
 23654                           tosl	equ	0xFFD
 23655                           pclath	equ	0xFFA
 23656                           tblptru	equ	0xFF8
 23657                           tblptrh	equ	0xFF7
 23658                           tblptrl	equ	0xFF6
 23659                           tablat	equ	0xFF5
 23660                           prodh	equ	0xFF4
 23661                           prodl	equ	0xFF3
 23662                           intcon	equ	0xFF2
 23663                           postinc0	equ	0xFEE
 23664                           wreg	equ	0xFE8
 23665                           indf1	equ	0xFE7
 23666                           postdec1	equ	0xFE5
 23667                           fsr1h	equ	0xFE2
 23668                           fsr1l	equ	0xFE1
 23669                           indf2	equ	0xFDF
 23670                           postinc2	equ	0xFDE
 23671                           postdec2	equ	0xFDD
 23672                           plusw2	equ	0xFDB
 23673                           fsr2h	equ	0xFDA
 23674                           fsr2l	equ	0xFD9
 23675                           status	equ	0xFD8
 23676                           
 23677 ;; *************** function _Button_Init *****************
 23678 ;; Defined at:
 23679 ;;		line 18 in file "Library/Button.c"
 23680 ;; Parameters:    Size  Location     Type
 23681 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 23682 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 23683 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 23684 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 23685 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 23686 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 23687 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 23688 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 23689 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 23690 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 23691 ;; Auto vars:     Size  Location     Type
 23692 ;;		None
 23693 ;; Return value:  Size  Location     Type
 23694 ;;                  1    wreg      void 
 23695 ;; Registers used:
 23696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23697 ;; Tracked objects:
 23698 ;;		On entry : 0/0
 23699 ;;		On exit  : 0/0
 23700 ;;		Unchanged: 0/0
 23701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23702 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23705 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23706 ;;Total ram usage:       13 bytes
 23707 ;; Hardware stack levels used:    1
 23708 ;; Hardware stack levels required when called:   15
 23709 ;; This function calls:
 23710 ;;		_HMI_InitButtons
 23711 ;;		_MXK_InitDIPSwitch
 23712 ;;		_MXK_InitTestButton
 23713 ;; This function is called by:
 23714 ;;		_HMI_Init
 23715 ;;		_FunctInitButton
 23716 ;; This function uses a non-reentrant model
 23717 ;;
 23718                           
 23719                           	psect	text113
 23720  01439C                     __ptext113:
 23721                           	opt stack 0
 23722  01439C                     _Button_Init:
 23723                           	opt stack 13
 23724                           
 23725                           ;Button.c: 21: if(pInput==(void*)0)
 23726                           
 23727                           ;incstack = 0
 23728  01439C  0100               	movlb	0	; () banked
 23729  01439E  519B               	movf	Button_Init@pInput& (0+255),w,b
 23730  0143A0  0100               	movlb	0	; () banked
 23731  0143A2  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 23732  0143A4  B4D8               	btfsc	status,2,c
 23733  0143A6  0012               	return	
 23734                           
 23735                           ; BSR set to: 0
 23736                           ;Button.c: 23: if(pInitIO==(void*)0)
 23737                           
 23738                           ; BSR set to: 0
 23739                           
 23740                           ; BSR set to: 0
 23741                           ;Button.c: 22: return;
 23742  0143A8  0100               	movlb	0	; () banked
 23743  0143AA  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 23744  0143AC  0100               	movlb	0	; () banked
 23745  0143AE  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 23746  0143B0  0100               	movlb	0	; () banked
 23747  0143B2  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 23748  0143B4  B4D8               	btfsc	status,2,c
 23749  0143B6  0012               	return	
 23750                           
 23751                           ; BSR set to: 0
 23752                           ;Button.c: 25: if(pGetState==(void*)0)
 23753                           
 23754                           ; BSR set to: 0
 23755                           
 23756                           ; BSR set to: 0
 23757                           ;Button.c: 24: return;
 23758  0143B8  0100               	movlb	0	; () banked
 23759  0143BA  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 23760  0143BC  0100               	movlb	0	; () banked
 23761  0143BE  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 23762  0143C0  0100               	movlb	0	; () banked
 23763  0143C2  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 23764  0143C4  B4D8               	btfsc	status,2,c
 23765  0143C6  0012               	return	
 23766                           
 23767                           ; BSR set to: 0
 23768                           ;Button.c: 27: if(pFunction==(void*)0)
 23769                           
 23770                           ; BSR set to: 0
 23771                           
 23772                           ; BSR set to: 0
 23773                           ;Button.c: 26: return;
 23774  0143C8  0100               	movlb	0	; () banked
 23775  0143CA  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 23776  0143CC  0100               	movlb	0	; () banked
 23777  0143CE  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 23778  0143D0  0100               	movlb	0	; () banked
 23779  0143D2  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 23780  0143D4  B4D8               	btfsc	status,2,c
 23781  0143D6  0012               	return	
 23782                           
 23783                           ; BSR set to: 0
 23784                           ;Button.c: 30: if(pThreshold == 0)
 23785                           
 23786                           ; BSR set to: 0
 23787                           
 23788                           ; BSR set to: 0
 23789                           ;Button.c: 28: return;
 23790  0143D8  0100               	movlb	0	; () banked
 23791  0143DA  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 23792  0143DC  0100               	movlb	0	; () banked
 23793  0143DE  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 23794  0143E0  A4D8               	btfss	status,2,c
 23795  0143E2  D005               	goto	l13535
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;Button.c: 31: pThreshold = 1;
 23799  0143E4  0E00               	movlw	0
 23800  0143E6  0100               	movlb	0	; () banked
 23801  0143E8  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 23802  0143EA  0E01               	movlw	1
 23803  0143EC  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 23804  0143EE                     l13535:
 23805                           
 23806                           ; BSR set to: 0
 23807                           ;Button.c: 34: pInput->mState = 0;
 23808  0143EE  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 23809  0143F2  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 23810  0143F6  0E00               	movlw	0
 23811  0143F8  6EDF               	movwf	indf2,c
 23812                           
 23813                           ; BSR set to: 0
 23814                           ;Button.c: 35: pInput->mCount = 0;
 23815  0143FA  0100               	movlb	0	; () banked
 23816  0143FC  EE20 F001          	lfsr	2,1
 23817  014400  519B               	movf	Button_Init@pInput& (0+255),w,b
 23818  014402  26D9               	addwf	fsr2l,f,c
 23819  014404  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23820  014406  22DA               	addwfc	fsr2h,f,c
 23821  014408  0E00               	movlw	0
 23822  01440A  6EDF               	movwf	indf2,c
 23823                           
 23824                           ; BSR set to: 0
 23825                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 23826  01440C  0100               	movlb	0	; () banked
 23827  01440E  EE20 F002          	lfsr	2,2
 23828  014412  519B               	movf	Button_Init@pInput& (0+255),w,b
 23829  014414  26D9               	addwf	fsr2l,f,c
 23830  014416  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23831  014418  22DA               	addwfc	fsr2h,f,c
 23832  01441A  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 23833  01441E  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 23834                           
 23835                           ; BSR set to: 0
 23836                           ;Button.c: 37: pInput->mFunction = pFunction;
 23837  014422  0100               	movlb	0	; () banked
 23838  014424  EE20 F004          	lfsr	2,4
 23839  014428  519B               	movf	Button_Init@pInput& (0+255),w,b
 23840  01442A  26D9               	addwf	fsr2l,f,c
 23841  01442C  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23842  01442E  22DA               	addwfc	fsr2h,f,c
 23843  014430  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 23844  014434  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 23845  014438  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;Button.c: 38: pInput->mGetState = pGetState;
 23849  01443C  0100               	movlb	0	; () banked
 23850  01443E  EE20 F007          	lfsr	2,7
 23851  014442  519B               	movf	Button_Init@pInput& (0+255),w,b
 23852  014444  26D9               	addwf	fsr2l,f,c
 23853  014446  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23854  014448  22DA               	addwfc	fsr2h,f,c
 23855  01444A  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 23856  01444E  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 23857  014452  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 23858                           
 23859                           ; BSR set to: 0
 23860                           ;Button.c: 41: pInitIO();
 23861  014456  D801               	call	u11198
 23862  014458  0012               	return	
 23863  01445A                     u11198:
 23864  01445A  0005               	push	
 23865  01445C  6EFA               	movwf	pclath,c
 23866  01445E  0100               	movlb	0	; () banked
 23867  014460  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 23868  014462  6EFD               	movwf	tosl,c
 23869  014464  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 23870  014466  6EFE               	movwf	tosh,c
 23871  014468  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 23872  01446A  6EFF               	movwf	tosu,c
 23873  01446C  50FA               	movf	pclath,w,c
 23874  01446E  0012               	return		;indir
 23875  014470                     __end_of_Button_Init:
 23876                           	opt stack 0
 23877                           tosu	equ	0xFFF
 23878                           tosh	equ	0xFFE
 23879                           tosl	equ	0xFFD
 23880                           pclath	equ	0xFFA
 23881                           tblptru	equ	0xFF8
 23882                           tblptrh	equ	0xFF7
 23883                           tblptrl	equ	0xFF6
 23884                           tablat	equ	0xFF5
 23885                           prodh	equ	0xFF4
 23886                           prodl	equ	0xFF3
 23887                           intcon	equ	0xFF2
 23888                           postinc0	equ	0xFEE
 23889                           wreg	equ	0xFE8
 23890                           indf1	equ	0xFE7
 23891                           postdec1	equ	0xFE5
 23892                           fsr1h	equ	0xFE2
 23893                           fsr1l	equ	0xFE1
 23894                           indf2	equ	0xFDF
 23895                           postinc2	equ	0xFDE
 23896                           postdec2	equ	0xFDD
 23897                           plusw2	equ	0xFDB
 23898                           fsr2h	equ	0xFDA
 23899                           fsr2l	equ	0xFD9
 23900                           status	equ	0xFD8
 23901                           
 23902 ;; *************** function _MXK_InitDIPSwitch *****************
 23903 ;; Defined at:
 23904 ;;		line 20 in file "Library/MXK.c"
 23905 ;; Parameters:    Size  Location     Type
 23906 ;;		None
 23907 ;; Auto vars:     Size  Location     Type
 23908 ;;		None
 23909 ;; Return value:  Size  Location     Type
 23910 ;;                  1    wreg      void 
 23911 ;; Registers used:
 23912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23913 ;; Tracked objects:
 23914 ;;		On entry : 0/0
 23915 ;;		On exit  : 0/0
 23916 ;;		Unchanged: 0/0
 23917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23922 ;;Total ram usage:        0 bytes
 23923 ;; Hardware stack levels used:    1
 23924 ;; Hardware stack levels required when called:   14
 23925 ;; This function calls:
 23926 ;;		_Port_SetQuadType
 23927 ;; This function is called by:
 23928 ;;		_FunctInitButton
 23929 ;;		_Button_Init
 23930 ;; This function uses a non-reentrant model
 23931 ;;
 23932                           
 23933                           	psect	text114
 23934  0167AC                     __ptext114:
 23935                           	opt stack 0
 23936  0167AC                     _MXK_InitDIPSwitch:
 23937                           	opt stack 13
 23938                           
 23939                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 23940                           
 23941                           ;incstack = 0
 23942  0167AC  0E8E               	movlw	low _PortD
 23943  0167AE  0100               	movlb	0	; () banked
 23944  0167B0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 23945  0167B2  0E01               	movlw	high _PortD
 23946  0167B4  0100               	movlb	0	; () banked
 23947  0167B6  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 23948  0167B8  0E00               	movlw	0
 23949  0167BA  0100               	movlb	0	; () banked
 23950  0167BC  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 23951  0167BE  0E00               	movlw	0
 23952  0167C0  0100               	movlb	0	; () banked
 23953  0167C2  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 23954  0167C4  EC3E  F08E         	call	_Port_SetQuadType	;wreg free
 23955  0167C8  0012               	return		;funcret
 23956  0167CA                     __end_of_MXK_InitDIPSwitch:
 23957                           	opt stack 0
 23958                           tosu	equ	0xFFF
 23959                           tosh	equ	0xFFE
 23960                           tosl	equ	0xFFD
 23961                           pclath	equ	0xFFA
 23962                           tblptru	equ	0xFF8
 23963                           tblptrh	equ	0xFF7
 23964                           tblptrl	equ	0xFF6
 23965                           tablat	equ	0xFF5
 23966                           prodh	equ	0xFF4
 23967                           prodl	equ	0xFF3
 23968                           intcon	equ	0xFF2
 23969                           postinc0	equ	0xFEE
 23970                           wreg	equ	0xFE8
 23971                           indf1	equ	0xFE7
 23972                           postdec1	equ	0xFE5
 23973                           fsr1h	equ	0xFE2
 23974                           fsr1l	equ	0xFE1
 23975                           indf2	equ	0xFDF
 23976                           postinc2	equ	0xFDE
 23977                           postdec2	equ	0xFDD
 23978                           plusw2	equ	0xFDB
 23979                           fsr2h	equ	0xFDA
 23980                           fsr2l	equ	0xFD9
 23981                           status	equ	0xFD8
 23982                           
 23983 ;; *************** function _HMI_InitButtons *****************
 23984 ;; Defined at:
 23985 ;;		line 21 in file "HMI.c"
 23986 ;; Parameters:    Size  Location     Type
 23987 ;;		None
 23988 ;; Auto vars:     Size  Location     Type
 23989 ;;		None
 23990 ;; Return value:  Size  Location     Type
 23991 ;;                  1    wreg      void 
 23992 ;; Registers used:
 23993 ;;		wreg, status,2
 23994 ;; Tracked objects:
 23995 ;;		On entry : 0/0
 23996 ;;		On exit  : 0/0
 23997 ;;		Unchanged: 0/0
 23998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24003 ;;Total ram usage:        0 bytes
 24004 ;; Hardware stack levels used:    1
 24005 ;; Hardware stack levels required when called:    7
 24006 ;; This function calls:
 24007 ;;		Nothing
 24008 ;; This function is called by:
 24009 ;;		_HMI_Init
 24010 ;;		_Button_Init
 24011 ;; This function uses a non-reentrant model
 24012 ;;
 24013                           
 24014                           	psect	text115
 24015  0169FE                     __ptext115:
 24016                           	opt stack 0
 24017  0169FE                     _HMI_InitButtons:
 24018                           	opt stack 20
 24019                           
 24020                           ;HMI.c: 23: TRISE = 0xFC;
 24021                           
 24022                           ;incstack = 0
 24023  0169FE  0EFC               	movlw	252
 24024  016A00  6E96               	movwf	3990,c	;volatile
 24025  016A02  0012               	return		;funcret
 24026  016A04                     __end_of_HMI_InitButtons:
 24027                           	opt stack 0
 24028                           tosu	equ	0xFFF
 24029                           tosh	equ	0xFFE
 24030                           tosl	equ	0xFFD
 24031                           pclath	equ	0xFFA
 24032                           tblptru	equ	0xFF8
 24033                           tblptrh	equ	0xFF7
 24034                           tblptrl	equ	0xFF6
 24035                           tablat	equ	0xFF5
 24036                           prodh	equ	0xFF4
 24037                           prodl	equ	0xFF3
 24038                           intcon	equ	0xFF2
 24039                           postinc0	equ	0xFEE
 24040                           wreg	equ	0xFE8
 24041                           indf1	equ	0xFE7
 24042                           postdec1	equ	0xFE5
 24043                           fsr1h	equ	0xFE2
 24044                           fsr1l	equ	0xFE1
 24045                           indf2	equ	0xFDF
 24046                           postinc2	equ	0xFDE
 24047                           postdec2	equ	0xFDD
 24048                           plusw2	equ	0xFDB
 24049                           fsr2h	equ	0xFDA
 24050                           fsr2l	equ	0xFD9
 24051                           status	equ	0xFD8
 24052                           
 24053 ;; *************** function _MXK_InitTestButton *****************
 24054 ;; Defined at:
 24055 ;;		line 10 in file "Library/MXK.c"
 24056 ;; Parameters:    Size  Location     Type
 24057 ;;		None
 24058 ;; Auto vars:     Size  Location     Type
 24059 ;;		None
 24060 ;; Return value:  Size  Location     Type
 24061 ;;                  1    wreg      void 
 24062 ;; Registers used:
 24063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24064 ;; Tracked objects:
 24065 ;;		On entry : 0/0
 24066 ;;		On exit  : 0/0
 24067 ;;		Unchanged: 0/0
 24068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24073 ;;Total ram usage:        0 bytes
 24074 ;; Hardware stack levels used:    1
 24075 ;; Hardware stack levels required when called:   12
 24076 ;; This function calls:
 24077 ;;		_Port_SetPinType
 24078 ;; This function is called by:
 24079 ;;		_FunctInitButton
 24080 ;;		_Button_Init
 24081 ;; This function uses a non-reentrant model
 24082 ;;
 24083                           
 24084                           	psect	text116
 24085  0167CA                     __ptext116:
 24086                           	opt stack 0
 24087  0167CA                     _MXK_InitTestButton:
 24088                           	opt stack 15
 24089                           
 24090                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 24091                           
 24092                           ;incstack = 0
 24093  0167CA  0E98               	movlw	low _PortB
 24094  0167CC  0100               	movlb	0	; () banked
 24095  0167CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24096  0167D0  0E01               	movlw	high _PortB
 24097  0167D2  0100               	movlb	0	; () banked
 24098  0167D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24099  0167D6  0E04               	movlw	4
 24100  0167D8  0100               	movlb	0	; () banked
 24101  0167DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24102  0167DC  0E00               	movlw	0
 24103  0167DE  0100               	movlb	0	; () banked
 24104  0167E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24105  0167E2  EC68  F094         	call	_Port_SetPinType	;wreg free
 24106  0167E6  0012               	return		;funcret
 24107  0167E8                     __end_of_MXK_InitTestButton:
 24108                           	opt stack 0
 24109                           tosu	equ	0xFFF
 24110                           tosh	equ	0xFFE
 24111                           tosl	equ	0xFFD
 24112                           pclath	equ	0xFFA
 24113                           tblptru	equ	0xFF8
 24114                           tblptrh	equ	0xFF7
 24115                           tblptrl	equ	0xFF6
 24116                           tablat	equ	0xFF5
 24117                           prodh	equ	0xFF4
 24118                           prodl	equ	0xFF3
 24119                           intcon	equ	0xFF2
 24120                           postinc0	equ	0xFEE
 24121                           wreg	equ	0xFE8
 24122                           indf1	equ	0xFE7
 24123                           postdec1	equ	0xFE5
 24124                           fsr1h	equ	0xFE2
 24125                           fsr1l	equ	0xFE1
 24126                           indf2	equ	0xFDF
 24127                           postinc2	equ	0xFDE
 24128                           postdec2	equ	0xFDD
 24129                           plusw2	equ	0xFDB
 24130                           fsr2h	equ	0xFDA
 24131                           fsr2l	equ	0xFD9
 24132                           status	equ	0xFD8
 24133                           
 24134 ;; *************** function _Port_SetPinType *****************
 24135 ;; Defined at:
 24136 ;;		line 189 in file "Library/Port.c"
 24137 ;; Parameters:    Size  Location     Type
 24138 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24139 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24140 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24141 ;;  pPin            1   40[BANK0 ] enum E6750
 24142 ;;  pType           1   41[BANK0 ] enum E6795
 24143 ;; Auto vars:     Size  Location     Type
 24144 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 24145 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 24146 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 24147 ;;  Output          1   42[BANK0 ] enum E6475
 24148 ;; Return value:  Size  Location     Type
 24149 ;;                  1    wreg      enum E6475
 24150 ;; Registers used:
 24151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24152 ;; Tracked objects:
 24153 ;;		On entry : 0/0
 24154 ;;		On exit  : 0/0
 24155 ;;		Unchanged: 0/0
 24156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24157 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24158 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24160 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24161 ;;Total ram usage:        7 bytes
 24162 ;; Hardware stack levels used:    1
 24163 ;; Hardware stack levels required when called:   11
 24164 ;; This function calls:
 24165 ;;		_Byte_SetBit
 24166 ;;		_PortProperty_Valid
 24167 ;;		_Word_SetPair
 24168 ;; This function is called by:
 24169 ;;		_Configure_GPIOs
 24170 ;;		_LED_Init
 24171 ;;		_Port_Init
 24172 ;;		_SPI_Init
 24173 ;;		_Motor_Init
 24174 ;;		_MXK_InitTestButton
 24175 ;;		_MXK_Init
 24176 ;;		_I2C_Init
 24177 ;; This function uses a non-reentrant model
 24178 ;;
 24179                           
 24180                           	psect	text117
 24181  0128D0                     __ptext117:
 24182                           	opt stack 0
 24183  0128D0                     _Port_SetPinType:
 24184                           	opt stack 17
 24185                           
 24186                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 24187                           
 24188                           ;incstack = 0
 24189  0128D0  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 24190  0128D4  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 24191  0128D8  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 24192  0128DC  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 24193                           
 24194                           ;Port.c: 192: ePinError Output = ePinErrorState;
 24195  0128E0  0E05               	movlw	5
 24196  0128E2  0100               	movlb	0	; () banked
 24197  0128E4  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24198                           
 24199                           ;Port.c: 193: switch (pType)
 24200  0128E6  D0B5               	goto	l12141
 24201  0128E8                     l12121:
 24202                           
 24203                           ; BSR set to: 0
 24204                           ;Port.c: 197: {
 24205                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24206  0128E8  0100               	movlb	0	; () banked
 24207  0128EA  EE20 F002          	lfsr	2,2
 24208  0128EE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24209  0128F0  26D9               	addwf	fsr2l,f,c
 24210  0128F2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24211  0128F4  22DA               	addwfc	fsr2h,f,c
 24212  0128F6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24213  0128FA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24214  0128FE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24215  012902  0E01               	movlw	1
 24216  012904  0100               	movlb	0	; () banked
 24217  012906  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24218  012908  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24219                           
 24220                           ;Port.c: 203: break;
 24221  01290C  D0B0               	goto	l12143
 24222  01290E                     l12123:
 24223                           
 24224                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24225  01290E  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24226  012912  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24227  012916  0E01               	movlw	1
 24228  012918  0100               	movlb	0	; () banked
 24229  01291A  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24230  01291C  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24231  012920  ECFC  F0AA         	call	_PortProperty_Valid	;wreg free
 24232  012924  0100               	movlb	0	; () banked
 24233  012926  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24234  012928  0100               	movlb	0	; () banked
 24235  01292A  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24236  01292C  A4D8               	btfss	status,2,c
 24237  01292E  0012               	return	
 24238                           
 24239                           ; BSR set to: 0
 24240                           ;Port.c: 208: {
 24241                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24242  012930  0100               	movlb	0	; () banked
 24243  012932  EE20 F002          	lfsr	2,2
 24244  012936  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24245  012938  26D9               	addwf	fsr2l,f,c
 24246  01293A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24247  01293C  22DA               	addwfc	fsr2h,f,c
 24248  01293E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24249  012942  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24250  012946  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24251  01294A  0E00               	movlw	0
 24252  01294C  0100               	movlb	0	; () banked
 24253  01294E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24254  012950  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24255                           
 24256                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24257  012954  0100               	movlb	0	; () banked
 24258  012956  EE20 F004          	lfsr	2,4
 24259  01295A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24260  01295C  26D9               	addwf	fsr2l,f,c
 24261  01295E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24262  012960  22DA               	addwfc	fsr2h,f,c
 24263  012962  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24264  012966  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24265  01296A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24266  01296E  0E00               	movlw	0
 24267  012970  0100               	movlb	0	; () banked
 24268  012972  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24269  012974  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24270                           
 24271                           ;Port.c: 214: break;
 24272  012978  D07A               	goto	l12143
 24273  01297A                     l12129:
 24274                           
 24275                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24276  01297A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24277  01297E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24278  012982  0E02               	movlw	2
 24279  012984  0100               	movlb	0	; () banked
 24280  012986  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24281  012988  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24282  01298C  ECFC  F0AA         	call	_PortProperty_Valid	;wreg free
 24283  012990  0100               	movlb	0	; () banked
 24284  012992  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24285  012994  0100               	movlb	0	; () banked
 24286  012996  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24287  012998  A4D8               	btfss	status,2,c
 24288  01299A  0012               	return	
 24289                           
 24290                           ; BSR set to: 0
 24291                           ;Port.c: 220: {
 24292                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24293  01299C  0100               	movlb	0	; () banked
 24294  01299E  EE20 F002          	lfsr	2,2
 24295  0129A2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24296  0129A4  26D9               	addwf	fsr2l,f,c
 24297  0129A6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24298  0129A8  22DA               	addwfc	fsr2h,f,c
 24299  0129AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24300  0129AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24301  0129B2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24302  0129B6  0E01               	movlw	1
 24303  0129B8  0100               	movlb	0	; () banked
 24304  0129BA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24305  0129BC  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24306                           
 24307                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24308  0129C0  0100               	movlb	0	; () banked
 24309  0129C2  EE20 F004          	lfsr	2,4
 24310  0129C6  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24311  0129C8  26D9               	addwf	fsr2l,f,c
 24312  0129CA  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24313  0129CC  22DA               	addwfc	fsr2h,f,c
 24314  0129CE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24315  0129D2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24316  0129D6  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24317  0129DA  0E01               	movlw	1
 24318  0129DC  0100               	movlb	0	; () banked
 24319  0129DE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24320  0129E0  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24321                           
 24322                           ;Port.c: 226: break;
 24323  0129E4  D044               	goto	l12143
 24324  0129E6                     l12135:
 24325                           
 24326                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24327  0129E6  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24328  0129EA  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24329  0129EE  0E00               	movlw	0
 24330  0129F0  0100               	movlb	0	; () banked
 24331  0129F2  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24332  0129F4  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24333  0129F8  ECFC  F0AA         	call	_PortProperty_Valid	;wreg free
 24334  0129FC  0100               	movlb	0	; () banked
 24335  0129FE  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24336  012A00  0100               	movlb	0	; () banked
 24337  012A02  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24338  012A04  A4D8               	btfss	status,2,c
 24339  012A06  0012               	return	
 24340                           
 24341                           ; BSR set to: 0
 24342                           ;Port.c: 232: {
 24343                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24344  012A08  0100               	movlb	0	; () banked
 24345  012A0A  EE20 F002          	lfsr	2,2
 24346  012A0E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24347  012A10  26D9               	addwf	fsr2l,f,c
 24348  012A12  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24349  012A14  22DA               	addwfc	fsr2h,f,c
 24350  012A16  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24351  012A1A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24352  012A1E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24353  012A22  0E00               	movlw	0
 24354  012A24  0100               	movlb	0	; () banked
 24355  012A26  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24356  012A28  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24357                           
 24358                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24359  012A2C  0100               	movlb	0	; () banked
 24360  012A2E  EE20 F004          	lfsr	2,4
 24361  012A32  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24362  012A34  26D9               	addwf	fsr2l,f,c
 24363  012A36  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24364  012A38  22DA               	addwfc	fsr2h,f,c
 24365  012A3A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24366  012A3E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24367  012A42  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24368  012A46  0E00               	movlw	0
 24369  012A48  0100               	movlb	0	; () banked
 24370  012A4A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24371  012A4C  EC4B  F0AE         	call	_Byte_SetBit	;wreg free
 24372                           
 24373                           ;Port.c: 239: }
 24374                           
 24375                           ;Port.c: 238: break;
 24376  012A50  D00E               	goto	l12143
 24377  012A52                     l12141:
 24378  012A52  0100               	movlb	0	; () banked
 24379  012A54  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 24380                           
 24381                           ; Switch size 1, requested type "space"
 24382                           ; Number of cases is 4, Range of values is 0 to 3
 24383                           ; switch strategies available:
 24384                           ; Name         Instructions Cycles
 24385                           ; simple_byte           13     7 (average)
 24386                           ;	Chosen strategy is simple_byte
 24387  012A56  0A00               	xorlw	0	; case 0
 24388  012A58  B4D8               	btfsc	status,2,c
 24389  012A5A  D746               	goto	l12121
 24390  012A5C  0A01               	xorlw	1	; case 1
 24391  012A5E  B4D8               	btfsc	status,2,c
 24392  012A60  D756               	goto	l12123
 24393  012A62  0A03               	xorlw	3	; case 2
 24394  012A64  B4D8               	btfsc	status,2,c
 24395  012A66  D789               	goto	l12129
 24396  012A68  0A01               	xorlw	1	; case 3
 24397  012A6A  B4D8               	btfsc	status,2,c
 24398  012A6C  D7BC               	goto	l12135
 24399  012A6E                     l12143:
 24400                           
 24401                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 24402  012A6E  0E08               	movlw	8
 24403  012A70  0100               	movlb	0	; () banked
 24404  012A72  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 24405  012A74  0100               	movlb	0	; () banked
 24406  012A76  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24407  012A78  0E00               	movlw	0
 24408  012A7A  0100               	movlb	0	; () banked
 24409  012A7C  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 24410  012A7E  0100               	movlb	0	; () banked
 24411  012A80  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24412  012A82  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 24413  012A86  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 24414  012A8A  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 24415  012A8E  0012               	return	
 24416  012A90                     __end_of_Port_SetPinType:
 24417                           	opt stack 0
 24418                           tosu	equ	0xFFF
 24419                           tosh	equ	0xFFE
 24420                           tosl	equ	0xFFD
 24421                           pclath	equ	0xFFA
 24422                           tblptru	equ	0xFF8
 24423                           tblptrh	equ	0xFF7
 24424                           tblptrl	equ	0xFF6
 24425                           tablat	equ	0xFF5
 24426                           prodh	equ	0xFF4
 24427                           prodl	equ	0xFF3
 24428                           intcon	equ	0xFF2
 24429                           postinc0	equ	0xFEE
 24430                           wreg	equ	0xFE8
 24431                           indf1	equ	0xFE7
 24432                           postdec1	equ	0xFE5
 24433                           fsr1h	equ	0xFE2
 24434                           fsr1l	equ	0xFE1
 24435                           indf2	equ	0xFDF
 24436                           postinc2	equ	0xFDE
 24437                           postdec2	equ	0xFDD
 24438                           plusw2	equ	0xFDB
 24439                           fsr2h	equ	0xFDA
 24440                           fsr2l	equ	0xFD9
 24441                           status	equ	0xFD8
 24442                           
 24443 ;; *************** function _Byte_SetBit *****************
 24444 ;; Defined at:
 24445 ;;		line 32 in file "Library/Types.c"
 24446 ;; Parameters:    Size  Location     Type
 24447 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24448 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24449 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24450 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24451 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24452 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24453 ;;		 -> NULL(0), 
 24454 ;;  pBit            1    2[BANK0 ] unsigned char 
 24455 ;;  pValue          1    3[BANK0 ] unsigned char 
 24456 ;; Auto vars:     Size  Location     Type
 24457 ;;		None
 24458 ;; Return value:  Size  Location     Type
 24459 ;;                  1    wreg      void 
 24460 ;; Registers used:
 24461 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24462 ;; Tracked objects:
 24463 ;;		On entry : 0/0
 24464 ;;		On exit  : 0/0
 24465 ;;		Unchanged: 0/0
 24466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24467 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24469 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24470 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24471 ;;Total ram usage:        7 bytes
 24472 ;; Hardware stack levels used:    1
 24473 ;; Hardware stack levels required when called:    7
 24474 ;; This function calls:
 24475 ;;		Nothing
 24476 ;; This function is called by:
 24477 ;;		_Port_SetPinType
 24478 ;;		_Port_SetPin
 24479 ;;		_SPI_Init
 24480 ;;		_SPI_MinSpeed
 24481 ;;		_SPI_MaxSpeed
 24482 ;;		_Word_SetBit
 24483 ;;		_I2C_Init
 24484 ;; This function uses a non-reentrant model
 24485 ;;
 24486                           
 24487                           	psect	text118
 24488  015C96                     __ptext118:
 24489                           	opt stack 0
 24490  015C96                     _Byte_SetBit:
 24491                           	opt stack 16
 24492                           
 24493                           ;Types.c: 34: pValue &= 1;
 24494                           
 24495                           ;incstack = 0
 24496  015C96  0E01               	movlw	1
 24497  015C98  0100               	movlb	0	; () banked
 24498  015C9A  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 24499                           
 24500                           ; BSR set to: 0
 24501                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 24502  015C9C  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 24503  015CA0  0E01               	movlw	1
 24504  015CA2  0100               	movlb	0	; () banked
 24505  015CA4  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 24506  015CA6  0100               	movlb	0	; () banked
 24507  015CA8  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 24508  015CAA  D003               	goto	u9064
 24509  015CAC                     u9065:
 24510  015CAC  0100               	movlb	0	; () banked
 24511  015CAE  90D8               	bcf	status,0,c
 24512  015CB0  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 24513  015CB2                     u9064:
 24514  015CB2  0100               	movlb	0	; () banked
 24515  015CB4  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 24516  015CB6  D7FA               	goto	u9065
 24517  015CB8  0100               	movlb	0	; () banked
 24518  015CBA  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 24519  015CBC  0AFF               	xorlw	255
 24520  015CBE  0100               	movlb	0	; () banked
 24521  015CC0  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 24522  015CC2  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 24523  015CC6  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 24524  015CCA  0100               	movlb	0	; () banked
 24525  015CCC  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 24526  015CCE  16DF               	andwf	indf2,f,c
 24527                           
 24528                           ; BSR set to: 0
 24529                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 24530  015CD0  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 24531  015CD4  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 24532  015CD8  0100               	movlb	0	; () banked
 24533  015CDA  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 24534  015CDC  D003               	goto	u9074
 24535  015CDE                     u9075:
 24536  015CDE  0100               	movlb	0	; () banked
 24537  015CE0  90D8               	bcf	status,0,c
 24538  015CE2  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 24539  015CE4                     u9074:
 24540  015CE4  0100               	movlb	0	; () banked
 24541  015CE6  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 24542  015CE8  D7FA               	goto	u9075
 24543  015CEA  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 24544  015CEE  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 24545  015CF2  0100               	movlb	0	; () banked
 24546  015CF4  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 24547  015CF6  12DF               	iorwf	indf2,f,c
 24548                           
 24549                           ; BSR set to: 0
 24550  015CF8  0012               	return		;funcret
 24551  015CFA                     __end_of_Byte_SetBit:
 24552                           	opt stack 0
 24553                           tosu	equ	0xFFF
 24554                           tosh	equ	0xFFE
 24555                           tosl	equ	0xFFD
 24556                           pclath	equ	0xFFA
 24557                           tblptru	equ	0xFF8
 24558                           tblptrh	equ	0xFF7
 24559                           tblptrl	equ	0xFF6
 24560                           tablat	equ	0xFF5
 24561                           prodh	equ	0xFF4
 24562                           prodl	equ	0xFF3
 24563                           intcon	equ	0xFF2
 24564                           postinc0	equ	0xFEE
 24565                           wreg	equ	0xFE8
 24566                           indf1	equ	0xFE7
 24567                           postdec1	equ	0xFE5
 24568                           fsr1h	equ	0xFE2
 24569                           fsr1l	equ	0xFE1
 24570                           indf2	equ	0xFDF
 24571                           postinc2	equ	0xFDE
 24572                           postdec2	equ	0xFDD
 24573                           plusw2	equ	0xFDB
 24574                           fsr2h	equ	0xFDA
 24575                           fsr2l	equ	0xFD9
 24576                           status	equ	0xFD8
 24577                           
 24578 ;; *************** function _Port_SetQuadType *****************
 24579 ;; Defined at:
 24580 ;;		line 399 in file "Library/Port.c"
 24581 ;; Parameters:    Size  Location     Type
 24582 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 24583 ;;		 -> PortB(10), PortD(10), 
 24584 ;;  pQuad           1   56[BANK0 ] enum E6776
 24585 ;;  pType           1   57[BANK0 ] enum E6795
 24586 ;; Auto vars:     Size  Location     Type
 24587 ;;  Output          1   58[BANK0 ] enum E6475
 24588 ;; Return value:  Size  Location     Type
 24589 ;;                  1    wreg      enum E6475
 24590 ;; Registers used:
 24591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24592 ;; Tracked objects:
 24593 ;;		On entry : 0/0
 24594 ;;		On exit  : 0/0
 24595 ;;		Unchanged: 0/0
 24596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24600 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24601 ;;Total ram usage:        5 bytes
 24602 ;; Hardware stack levels used:    1
 24603 ;; Hardware stack levels required when called:   13
 24604 ;; This function calls:
 24605 ;;		_Byte_SetQuad
 24606 ;;		_Port_CheckQuadType
 24607 ;;		_Word_SetPair
 24608 ;; This function is called by:
 24609 ;;		_MXK_InitDIPSwitch
 24610 ;;		_MXK_Init
 24611 ;; This function uses a non-reentrant model
 24612 ;;
 24613                           
 24614                           	psect	text119
 24615  011C7C                     __ptext119:
 24616                           	opt stack 0
 24617  011C7C                     _Port_SetQuadType:
 24618                           	opt stack 15
 24619                           
 24620                           ;Port.c: 401: ePinError Output = ePinErrorState;
 24621                           
 24622                           ; BSR set to: 0
 24623                           ;incstack = 0
 24624  011C7C  0E05               	movlw	5
 24625  011C7E  0100               	movlb	0	; () banked
 24626  011C80  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 24627                           
 24628                           ;Port.c: 403: switch (pType)
 24629  011C82  D0C7               	goto	l12203
 24630  011C84                     l12187:
 24631                           
 24632                           ; BSR set to: 0
 24633                           ;Port.c: 407: {
 24634                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 24635  011C84  0100               	movlb	0	; () banked
 24636  011C86  EE20 F002          	lfsr	2,2
 24637  011C8A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24638  011C8C  26D9               	addwf	fsr2l,f,c
 24639  011C8E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24640  011C90  22DA               	addwfc	fsr2h,f,c
 24641  011C92  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24642  011C96  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24643  011C9A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24644  011C9E  0E0F               	movlw	15
 24645  011CA0  0100               	movlb	0	; () banked
 24646  011CA2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24647  011CA4  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24648                           
 24649                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24650  011CA8  0100               	movlb	0	; () banked
 24651  011CAA  EE20 F004          	lfsr	2,4
 24652  011CAE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24653  011CB0  26D9               	addwf	fsr2l,f,c
 24654  011CB2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24655  011CB4  22DA               	addwfc	fsr2h,f,c
 24656  011CB6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24657  011CBA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24658  011CBE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24659  011CC2  0E00               	movlw	0
 24660  011CC4  0100               	movlb	0	; () banked
 24661  011CC6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24662  011CC8  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24663                           
 24664                           ;Port.c: 413: }
 24665                           ;Port.c: 415: break;
 24666  011CCC  D0B0               	goto	l12205
 24667  011CCE                     l12189:
 24668                           
 24669                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24670  011CCE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24671  011CD2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24672  011CD6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24673  011CDA  0E03               	movlw	3
 24674  011CDC  0100               	movlb	0	; () banked
 24675  011CDE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24676  011CE0  ECDF  F0AE         	call	_Port_CheckQuadType	;wreg free
 24677  011CE4  0100               	movlb	0	; () banked
 24678  011CE6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 24679  011CE8  0100               	movlb	0	; () banked
 24680  011CEA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 24681  011CEC  A4D8               	btfss	status,2,c
 24682  011CEE  0012               	return	
 24683                           
 24684                           ; BSR set to: 0
 24685                           ;Port.c: 418: {
 24686                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 24687  011CF0  0100               	movlb	0	; () banked
 24688  011CF2  EE20 F002          	lfsr	2,2
 24689  011CF6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24690  011CF8  26D9               	addwf	fsr2l,f,c
 24691  011CFA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24692  011CFC  22DA               	addwfc	fsr2h,f,c
 24693  011CFE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24694  011D02  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24695  011D06  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24696  011D0A  0E00               	movlw	0
 24697  011D0C  0100               	movlb	0	; () banked
 24698  011D0E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24699  011D10  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24700                           
 24701                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24702  011D14  0100               	movlb	0	; () banked
 24703  011D16  EE20 F004          	lfsr	2,4
 24704  011D1A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24705  011D1C  26D9               	addwf	fsr2l,f,c
 24706  011D1E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24707  011D20  22DA               	addwfc	fsr2h,f,c
 24708  011D22  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24709  011D26  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24710  011D2A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24711  011D2E  0E00               	movlw	0
 24712  011D30  0100               	movlb	0	; () banked
 24713  011D32  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24714  011D34  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24715                           
 24716                           ;Port.c: 424: }
 24717  011D38  D07A               	goto	l12205
 24718  011D3A                     l12193:
 24719                           
 24720                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24721  011D3A  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24722  011D3E  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24723  011D42  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24724  011D46  0E03               	movlw	3
 24725  011D48  0100               	movlb	0	; () banked
 24726  011D4A  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24727  011D4C  ECDF  F0AE         	call	_Port_CheckQuadType	;wreg free
 24728  011D50  0100               	movlb	0	; () banked
 24729  011D52  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 24730  011D54  0100               	movlb	0	; () banked
 24731  011D56  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 24732  011D58  A4D8               	btfss	status,2,c
 24733  011D5A  0012               	return	
 24734                           
 24735                           ; BSR set to: 0
 24736                           ;Port.c: 429: {
 24737                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 24738  011D5C  0100               	movlb	0	; () banked
 24739  011D5E  EE20 F002          	lfsr	2,2
 24740  011D62  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24741  011D64  26D9               	addwf	fsr2l,f,c
 24742  011D66  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24743  011D68  22DA               	addwfc	fsr2h,f,c
 24744  011D6A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24745  011D6E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24746  011D72  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24747  011D76  0E0F               	movlw	15
 24748  011D78  0100               	movlb	0	; () banked
 24749  011D7A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24750  011D7C  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24751                           
 24752                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 24753  011D80  0100               	movlb	0	; () banked
 24754  011D82  EE20 F004          	lfsr	2,4
 24755  011D86  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24756  011D88  26D9               	addwf	fsr2l,f,c
 24757  011D8A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24758  011D8C  22DA               	addwfc	fsr2h,f,c
 24759  011D8E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24760  011D92  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24761  011D96  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24762  011D9A  0E0F               	movlw	15
 24763  011D9C  0100               	movlb	0	; () banked
 24764  011D9E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24765  011DA0  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24766                           
 24767                           ;Port.c: 435: }
 24768  011DA4  D044               	goto	l12205
 24769  011DA6                     l12197:
 24770                           
 24771                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24772  011DA6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24773  011DAA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24774  011DAE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24775  011DB2  0E03               	movlw	3
 24776  011DB4  0100               	movlb	0	; () banked
 24777  011DB6  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24778  011DB8  ECDF  F0AE         	call	_Port_CheckQuadType	;wreg free
 24779  011DBC  0100               	movlb	0	; () banked
 24780  011DBE  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 24781  011DC0  0100               	movlb	0	; () banked
 24782  011DC2  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 24783  011DC4  A4D8               	btfss	status,2,c
 24784  011DC6  0012               	return	
 24785                           
 24786                           ; BSR set to: 0
 24787                           ;Port.c: 440: {
 24788                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 24789  011DC8  0100               	movlb	0	; () banked
 24790  011DCA  EE20 F002          	lfsr	2,2
 24791  011DCE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24792  011DD0  26D9               	addwf	fsr2l,f,c
 24793  011DD2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24794  011DD4  22DA               	addwfc	fsr2h,f,c
 24795  011DD6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24796  011DDA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24797  011DDE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24798  011DE2  0E00               	movlw	0
 24799  011DE4  0100               	movlb	0	; () banked
 24800  011DE6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24801  011DE8  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24802                           
 24803                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24804  011DEC  0100               	movlb	0	; () banked
 24805  011DEE  EE20 F004          	lfsr	2,4
 24806  011DF2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24807  011DF4  26D9               	addwf	fsr2l,f,c
 24808  011DF6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24809  011DF8  22DA               	addwfc	fsr2h,f,c
 24810  011DFA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 24811  011DFE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 24812  011E02  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24813  011E06  0E00               	movlw	0
 24814  011E08  0100               	movlb	0	; () banked
 24815  011E0A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 24816  011E0C  EC98  F0B3         	call	_Byte_SetQuad	;wreg free
 24817                           
 24818                           ;Port.c: 446: }
 24819  011E10  D00E               	goto	l12205
 24820  011E12                     l12203:
 24821  011E12  0100               	movlb	0	; () banked
 24822  011E14  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 24823                           
 24824                           ; Switch size 1, requested type "space"
 24825                           ; Number of cases is 4, Range of values is 0 to 3
 24826                           ; switch strategies available:
 24827                           ; Name         Instructions Cycles
 24828                           ; simple_byte           13     7 (average)
 24829                           ;	Chosen strategy is simple_byte
 24830  011E16  0A00               	xorlw	0	; case 0
 24831  011E18  B4D8               	btfsc	status,2,c
 24832  011E1A  D734               	goto	l12187
 24833  011E1C  0A01               	xorlw	1	; case 1
 24834  011E1E  B4D8               	btfsc	status,2,c
 24835  011E20  D756               	goto	l12189
 24836  011E22  0A03               	xorlw	3	; case 2
 24837  011E24  B4D8               	btfsc	status,2,c
 24838  011E26  D789               	goto	l12193
 24839  011E28  0A01               	xorlw	1	; case 3
 24840  011E2A  B4D8               	btfsc	status,2,c
 24841  011E2C  D7BC               	goto	l12197
 24842  011E2E                     l12205:
 24843                           
 24844                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 24845  011E2E  0E08               	movlw	8
 24846  011E30  0100               	movlb	0	; () banked
 24847  011E32  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24848  011E34  0100               	movlb	0	; () banked
 24849  011E36  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24850  011E38  0E00               	movlw	0
 24851  011E3A  0100               	movlb	0	; () banked
 24852  011E3C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24853  011E3E  0100               	movlb	0	; () banked
 24854  011E40  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24855  011E42  0100               	movlb	0	; () banked
 24856  011E44  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24857  011E46  0D04               	mullw	4
 24858  011E48  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 24859  011E4C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24860  011E50  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 24861                           
 24862                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 24863  011E54  0E08               	movlw	8
 24864  011E56  0100               	movlb	0	; () banked
 24865  011E58  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24866  011E5A  0100               	movlb	0	; () banked
 24867  011E5C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24868  011E5E  0E00               	movlw	0
 24869  011E60  0100               	movlb	0	; () banked
 24870  011E62  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24871  011E64  0100               	movlb	0	; () banked
 24872  011E66  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24873  011E68  0100               	movlb	0	; () banked
 24874  011E6A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24875  011E6C  0D04               	mullw	4
 24876  011E6E  28F3               	incf	prodl,w,c
 24877  011E70  0100               	movlb	0	; () banked
 24878  011E72  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 24879  011E74  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24880  011E78  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 24881                           
 24882                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 24883  011E7C  0E08               	movlw	8
 24884  011E7E  0100               	movlb	0	; () banked
 24885  011E80  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24886  011E82  0100               	movlb	0	; () banked
 24887  011E84  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24888  011E86  0E00               	movlw	0
 24889  011E88  0100               	movlb	0	; () banked
 24890  011E8A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24891  011E8C  0100               	movlb	0	; () banked
 24892  011E8E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24893  011E90  0100               	movlb	0	; () banked
 24894  011E92  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24895  011E94  0D04               	mullw	4
 24896  011E96  50F3               	movf	prodl,w,c
 24897  011E98  0F02               	addlw	2
 24898  011E9A  0100               	movlb	0	; () banked
 24899  011E9C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 24900  011E9E  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24901  011EA2  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 24902                           
 24903                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 24904  011EA6  0E08               	movlw	8
 24905  011EA8  0100               	movlb	0	; () banked
 24906  011EAA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24907  011EAC  0100               	movlb	0	; () banked
 24908  011EAE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24909  011EB0  0E00               	movlw	0
 24910  011EB2  0100               	movlb	0	; () banked
 24911  011EB4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24912  011EB6  0100               	movlb	0	; () banked
 24913  011EB8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24914  011EBA  0100               	movlb	0	; () banked
 24915  011EBC  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24916  011EBE  0D04               	mullw	4
 24917  011EC0  50F3               	movf	prodl,w,c
 24918  011EC2  0F03               	addlw	3
 24919  011EC4  0100               	movlb	0	; () banked
 24920  011EC6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 24921  011EC8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24922  011ECC  ECD6  F0B0         	call	_Word_SetPair	;wreg free
 24923  011ED0  0012               	return	
 24924  011ED2                     __end_of_Port_SetQuadType:
 24925                           	opt stack 0
 24926                           tosu	equ	0xFFF
 24927                           tosh	equ	0xFFE
 24928                           tosl	equ	0xFFD
 24929                           pclath	equ	0xFFA
 24930                           tblptru	equ	0xFF8
 24931                           tblptrh	equ	0xFF7
 24932                           tblptrl	equ	0xFF6
 24933                           tablat	equ	0xFF5
 24934                           prodh	equ	0xFF4
 24935                           prodl	equ	0xFF3
 24936                           intcon	equ	0xFF2
 24937                           postinc0	equ	0xFEE
 24938                           wreg	equ	0xFE8
 24939                           indf1	equ	0xFE7
 24940                           postdec1	equ	0xFE5
 24941                           fsr1h	equ	0xFE2
 24942                           fsr1l	equ	0xFE1
 24943                           indf2	equ	0xFDF
 24944                           postinc2	equ	0xFDE
 24945                           postdec2	equ	0xFDD
 24946                           plusw2	equ	0xFDB
 24947                           fsr2h	equ	0xFDA
 24948                           fsr2l	equ	0xFD9
 24949                           status	equ	0xFD8
 24950                           
 24951 ;; *************** function _Word_SetPair *****************
 24952 ;; Defined at:
 24953 ;;		line 149 in file "Library/Types.c"
 24954 ;; Parameters:    Size  Location     Type
 24955 ;;  pInput          2   15[BANK0 ] PTR struct Word
 24956 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24957 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24958 ;;  pPair           1   17[BANK0 ] unsigned char 
 24959 ;;  pValue          1   18[BANK0 ] unsigned char 
 24960 ;; Auto vars:     Size  Location     Type
 24961 ;;		None
 24962 ;; Return value:  Size  Location     Type
 24963 ;;                  1    wreg      void 
 24964 ;; Registers used:
 24965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24966 ;; Tracked objects:
 24967 ;;		On entry : 0/0
 24968 ;;		On exit  : 0/0
 24969 ;;		Unchanged: 0/0
 24970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24971 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24974 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24975 ;;Total ram usage:        4 bytes
 24976 ;; Hardware stack levels used:    1
 24977 ;; Hardware stack levels required when called:    9
 24978 ;; This function calls:
 24979 ;;		_Byte_SetPair
 24980 ;; This function is called by:
 24981 ;;		_Port_SetPinType
 24982 ;;		_Port_SetQuadType
 24983 ;;		_Port_SetType
 24984 ;;		_Port_SetPairType
 24985 ;;		_PortProperty_Init
 24986 ;; This function uses a non-reentrant model
 24987 ;;
 24988                           
 24989                           	psect	text120
 24990  0161AC                     __ptext120:
 24991                           	opt stack 0
 24992  0161AC                     _Word_SetPair:
 24993                           	opt stack 18
 24994                           
 24995                           ;Types.c: 151: if (pPair >= 4)
 24996                           
 24997                           ;incstack = 0
 24998  0161AC  0E03               	movlw	3
 24999  0161AE  0100               	movlb	0	; () banked
 25000  0161B0  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 25001  0161B2  D014               	goto	l11963
 25002                           
 25003                           ; BSR set to: 0
 25004                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 25005  0161B4  0E01               	movlw	1
 25006  0161B6  0100               	movlb	0	; () banked
 25007  0161B8  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 25008  0161BA  0100               	movlb	0	; () banked
 25009  0161BC  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 25010  0161BE  0E00               	movlw	0
 25011  0161C0  0100               	movlb	0	; () banked
 25012  0161C2  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 25013  0161C4  0100               	movlb	0	; () banked
 25014  0161C6  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 25015  0161C8  0100               	movlb	0	; () banked
 25016  0161CA  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 25017  0161CC  0FFC               	addlw	252
 25018  0161CE  0100               	movlb	0	; () banked
 25019  0161D0  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 25020  0161D2  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25021  0161D6  EC87  F0B3         	call	_Byte_SetPair	;wreg free
 25022  0161DA  0012               	return	
 25023  0161DC                     l11963:
 25024                           
 25025                           ;Types.c: 153: else
 25026                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 25027  0161DC  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 25028  0161E0  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 25029  0161E4  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 25030  0161E8  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25031  0161EC  EC87  F0B3         	call	_Byte_SetPair	;wreg free
 25032  0161F0  0012               	return	
 25033  0161F2                     __end_of_Word_SetPair:
 25034                           	opt stack 0
 25035                           tosu	equ	0xFFF
 25036                           tosh	equ	0xFFE
 25037                           tosl	equ	0xFFD
 25038                           pclath	equ	0xFFA
 25039                           tblptru	equ	0xFF8
 25040                           tblptrh	equ	0xFF7
 25041                           tblptrl	equ	0xFF6
 25042                           tablat	equ	0xFF5
 25043                           prodh	equ	0xFF4
 25044                           prodl	equ	0xFF3
 25045                           intcon	equ	0xFF2
 25046                           postinc0	equ	0xFEE
 25047                           wreg	equ	0xFE8
 25048                           indf1	equ	0xFE7
 25049                           postdec1	equ	0xFE5
 25050                           fsr1h	equ	0xFE2
 25051                           fsr1l	equ	0xFE1
 25052                           indf2	equ	0xFDF
 25053                           postinc2	equ	0xFDE
 25054                           postdec2	equ	0xFDD
 25055                           plusw2	equ	0xFDB
 25056                           fsr2h	equ	0xFDA
 25057                           fsr2l	equ	0xFD9
 25058                           status	equ	0xFD8
 25059                           
 25060 ;; *************** function _Byte_SetPair *****************
 25061 ;; Defined at:
 25062 ;;		line 83 in file "Library/Types.c"
 25063 ;; Parameters:    Size  Location     Type
 25064 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25065 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25066 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25067 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 25068 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 25069 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 25070 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 25071 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 25072 ;;		 -> NULL(0), 
 25073 ;;  pPair           1   13[BANK0 ] unsigned char 
 25074 ;;  pValue          1   14[BANK0 ] unsigned char 
 25075 ;; Auto vars:     Size  Location     Type
 25076 ;;		None
 25077 ;; Return value:  Size  Location     Type
 25078 ;;                  1    wreg      void 
 25079 ;; Registers used:
 25080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25081 ;; Tracked objects:
 25082 ;;		On entry : 0/0
 25083 ;;		On exit  : 0/0
 25084 ;;		Unchanged: 0/0
 25085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25086 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25089 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25090 ;;Total ram usage:        4 bytes
 25091 ;; Hardware stack levels used:    1
 25092 ;; Hardware stack levels required when called:    8
 25093 ;; This function calls:
 25094 ;;		_Byte_SetZone
 25095 ;; This function is called by:
 25096 ;;		_Word_SetPair
 25097 ;;		_Port_SetPairType
 25098 ;;		_Port_SetPair
 25099 ;; This function uses a non-reentrant model
 25100 ;;
 25101                           
 25102                           	psect	text121
 25103  01670E                     __ptext121:
 25104                           	opt stack 0
 25105  01670E                     _Byte_SetPair:
 25106                           	opt stack 18
 25107                           
 25108                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 25109                           
 25110                           ;incstack = 0
 25111  01670E  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 25112  016712  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 25113  016716  0E04               	movlw	4
 25114  016718  0100               	movlb	0	; () banked
 25115  01671A  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 25116  01671C  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 25117  016720  0E02               	movlw	2
 25118  016722  0100               	movlb	0	; () banked
 25119  016724  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25120  016726  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 25121  01672A  ECD8  F0A4         	call	_Byte_SetZone	;wreg free
 25122  01672E  0012               	return		;funcret
 25123  016730                     __end_of_Byte_SetPair:
 25124                           	opt stack 0
 25125                           tosu	equ	0xFFF
 25126                           tosh	equ	0xFFE
 25127                           tosl	equ	0xFFD
 25128                           pclath	equ	0xFFA
 25129                           tblptru	equ	0xFF8
 25130                           tblptrh	equ	0xFF7
 25131                           tblptrl	equ	0xFF6
 25132                           tablat	equ	0xFF5
 25133                           prodh	equ	0xFF4
 25134                           prodl	equ	0xFF3
 25135                           intcon	equ	0xFF2
 25136                           postinc0	equ	0xFEE
 25137                           wreg	equ	0xFE8
 25138                           indf1	equ	0xFE7
 25139                           postdec1	equ	0xFE5
 25140                           fsr1h	equ	0xFE2
 25141                           fsr1l	equ	0xFE1
 25142                           indf2	equ	0xFDF
 25143                           postinc2	equ	0xFDE
 25144                           postdec2	equ	0xFDD
 25145                           plusw2	equ	0xFDB
 25146                           fsr2h	equ	0xFDA
 25147                           fsr2l	equ	0xFD9
 25148                           status	equ	0xFD8
 25149                           
 25150 ;; *************** function _Port_CheckQuadType *****************
 25151 ;; Defined at:
 25152 ;;		line 126 in file "Library/Port.c"
 25153 ;; Parameters:    Size  Location     Type
 25154 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 25155 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25156 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25157 ;;  pQuad           1   49[BANK0 ] enum E6776
 25158 ;;  pDrive          1   50[BANK0 ] enum E6469
 25159 ;; Auto vars:     Size  Location     Type
 25160 ;;  Output          1   53[BANK0 ] enum E6475
 25161 ;;  Pair2           1   52[BANK0 ] enum E6760
 25162 ;;  Pair1           1   51[BANK0 ] enum E6760
 25163 ;; Return value:  Size  Location     Type
 25164 ;;                  1    wreg      enum E6475
 25165 ;; Registers used:
 25166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25167 ;; Tracked objects:
 25168 ;;		On entry : 0/0
 25169 ;;		On exit  : 0/0
 25170 ;;		Unchanged: 0/0
 25171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25172 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25173 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25175 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25176 ;;Total ram usage:        7 bytes
 25177 ;; Hardware stack levels used:    1
 25178 ;; Hardware stack levels required when called:   12
 25179 ;; This function calls:
 25180 ;;		_Port_CheckPairType
 25181 ;; This function is called by:
 25182 ;;		_Port_CheckPortType
 25183 ;;		_Port_SetQuadType
 25184 ;; This function uses a non-reentrant model
 25185 ;;
 25186                           
 25187                           	psect	text122
 25188  015DBE                     __ptext122:
 25189                           	opt stack 0
 25190  015DBE                     _Port_CheckQuadType:
 25191                           	opt stack 14
 25192                           
 25193                           ;Port.c: 128: ePinError Output = ePinErrorState;
 25194                           
 25195                           ;incstack = 0
 25196  015DBE  0E05               	movlw	5
 25197  015DC0  0100               	movlb	0	; () banked
 25198  015DC2  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25199                           
 25200                           ; BSR set to: 0
 25201                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 25202  015DC4  0100               	movlb	0	; () banked
 25203  015DC6  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25204  015DC8  0D02               	mullw	2
 25205  015DCA  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 25206                           
 25207                           ; BSR set to: 0
 25208                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 25209  015DCE  0100               	movlb	0	; () banked
 25210  015DD0  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25211  015DD2  0D02               	mullw	2
 25212  015DD4  28F3               	incf	prodl,w,c
 25213  015DD6  0100               	movlb	0	; () banked
 25214  015DD8  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25215                           
 25216                           ; BSR set to: 0
 25217                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25218  015DDA  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25219  015DDE  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25220  015DE2  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25221  015DE6  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25222  015DEA  ECB0  F0AD         	call	_Port_CheckPairType	;wreg free
 25223  015DEE  0100               	movlb	0	; () banked
 25224  015DF0  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25225  015DF2  0100               	movlb	0	; () banked
 25226  015DF4  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25227  015DF6  A4D8               	btfss	status,2,c
 25228  015DF8  D00C               	goto	l11955
 25229                           
 25230                           ; BSR set to: 0
 25231                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25232  015DFA  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25233  015DFE  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25234  015E02  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25235  015E06  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25236  015E0A  ECB0  F0AD         	call	_Port_CheckPairType	;wreg free
 25237  015E0E  0100               	movlb	0	; () banked
 25238  015E10  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25239  015E12                     l11955:
 25240                           
 25241                           ; BSR set to: 0
 25242                           ;Port.c: 136: return Output;
 25243  015E12  0100               	movlb	0	; () banked
 25244  015E14  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25245  015E16  0012               	return	
 25246  015E18                     __end_of_Port_CheckQuadType:
 25247                           	opt stack 0
 25248                           tosu	equ	0xFFF
 25249                           tosh	equ	0xFFE
 25250                           tosl	equ	0xFFD
 25251                           pclath	equ	0xFFA
 25252                           tblptru	equ	0xFF8
 25253                           tblptrh	equ	0xFF7
 25254                           tblptrl	equ	0xFF6
 25255                           tablat	equ	0xFF5
 25256                           prodh	equ	0xFF4
 25257                           prodl	equ	0xFF3
 25258                           intcon	equ	0xFF2
 25259                           postinc0	equ	0xFEE
 25260                           wreg	equ	0xFE8
 25261                           indf1	equ	0xFE7
 25262                           postdec1	equ	0xFE5
 25263                           fsr1h	equ	0xFE2
 25264                           fsr1l	equ	0xFE1
 25265                           indf2	equ	0xFDF
 25266                           postinc2	equ	0xFDE
 25267                           postdec2	equ	0xFDD
 25268                           plusw2	equ	0xFDB
 25269                           fsr2h	equ	0xFDA
 25270                           fsr2l	equ	0xFD9
 25271                           status	equ	0xFD8
 25272                           
 25273 ;; *************** function _Port_CheckPairType *****************
 25274 ;; Defined at:
 25275 ;;		line 112 in file "Library/Port.c"
 25276 ;; Parameters:    Size  Location     Type
 25277 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25278 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25279 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25280 ;;  pPair           1   40[BANK0 ] enum E6760
 25281 ;;  pDrive          1   41[BANK0 ] enum E6469
 25282 ;; Auto vars:     Size  Location     Type
 25283 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25284 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25285 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25286 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25287 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25288 ;;  Output          1   44[BANK0 ] enum E6475
 25289 ;;  Pin2            1   43[BANK0 ] enum E6750
 25290 ;;  Pin1            1   42[BANK0 ] enum E6750
 25291 ;; Return value:  Size  Location     Type
 25292 ;;                  1    wreg      enum E6475
 25293 ;; Registers used:
 25294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25295 ;; Tracked objects:
 25296 ;;		On entry : 0/0
 25297 ;;		On exit  : 0/0
 25298 ;;		Unchanged: 0/0
 25299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25301 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25303 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25304 ;;Total ram usage:        9 bytes
 25305 ;; Hardware stack levels used:    1
 25306 ;; Hardware stack levels required when called:   11
 25307 ;; This function calls:
 25308 ;;		_PortProperty_Valid
 25309 ;; This function is called by:
 25310 ;;		_Port_CheckQuadType
 25311 ;;		_Port_SetPairType
 25312 ;; This function uses a non-reentrant model
 25313 ;;
 25314                           
 25315                           	psect	text123
 25316  015B60                     __ptext123:
 25317                           	opt stack 0
 25318  015B60                     _Port_CheckPairType:
 25319                           	opt stack 14
 25320                           
 25321                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25322                           
 25323                           ; BSR set to: 0
 25324                           ;incstack = 0
 25325  015B60  0E05               	movlw	5
 25326  015B62  0100               	movlb	0	; () banked
 25327  015B64  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25328                           
 25329                           ; BSR set to: 0
 25330                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25331  015B66  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25332  015B6A  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25333  015B6E  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 25334  015B72  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 25335                           
 25336                           ; BSR set to: 0
 25337                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25338  015B76  0100               	movlb	0	; () banked
 25339  015B78  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25340  015B7A  0D02               	mullw	2
 25341  015B7C  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 25342                           
 25343                           ; BSR set to: 0
 25344                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25345  015B80  0100               	movlb	0	; () banked
 25346  015B82  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25347  015B84  0D02               	mullw	2
 25348  015B86  28F3               	incf	prodl,w,c
 25349  015B88  0100               	movlb	0	; () banked
 25350  015B8A  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25351                           
 25352                           ; BSR set to: 0
 25353                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25354  015B8C  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25355  015B90  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25356  015B94  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25357  015B98  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25358  015B9C  ECFC  F0AA         	call	_PortProperty_Valid	;wreg free
 25359  015BA0  0100               	movlb	0	; () banked
 25360  015BA2  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25361  015BA4  0100               	movlb	0	; () banked
 25362  015BA6  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25363  015BA8  A4D8               	btfss	status,2,c
 25364  015BAA  D00C               	goto	l11541
 25365                           
 25366                           ; BSR set to: 0
 25367                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25368  015BAC  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25369  015BB0  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25370  015BB4  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25371  015BB8  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25372  015BBC  ECFC  F0AA         	call	_PortProperty_Valid	;wreg free
 25373  015BC0  0100               	movlb	0	; () banked
 25374  015BC2  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25375  015BC4                     l11541:
 25376                           
 25377                           ; BSR set to: 0
 25378                           ;Port.c: 124: return Output;
 25379  015BC4  0100               	movlb	0	; () banked
 25380  015BC6  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25381  015BC8  0012               	return	
 25382  015BCA                     __end_of_Port_CheckPairType:
 25383                           	opt stack 0
 25384                           tosu	equ	0xFFF
 25385                           tosh	equ	0xFFE
 25386                           tosl	equ	0xFFD
 25387                           pclath	equ	0xFFA
 25388                           tblptru	equ	0xFF8
 25389                           tblptrh	equ	0xFF7
 25390                           tblptrl	equ	0xFF6
 25391                           tablat	equ	0xFF5
 25392                           prodh	equ	0xFF4
 25393                           prodl	equ	0xFF3
 25394                           intcon	equ	0xFF2
 25395                           postinc0	equ	0xFEE
 25396                           wreg	equ	0xFE8
 25397                           indf1	equ	0xFE7
 25398                           postdec1	equ	0xFE5
 25399                           fsr1h	equ	0xFE2
 25400                           fsr1l	equ	0xFE1
 25401                           indf2	equ	0xFDF
 25402                           postinc2	equ	0xFDE
 25403                           postdec2	equ	0xFDD
 25404                           plusw2	equ	0xFDB
 25405                           fsr2h	equ	0xFDA
 25406                           fsr2l	equ	0xFD9
 25407                           status	equ	0xFD8
 25408                           
 25409 ;; *************** function _PortProperty_Valid *****************
 25410 ;; Defined at:
 25411 ;;		line 220 in file "Library/Types.c"
 25412 ;; Parameters:    Size  Location     Type
 25413 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 25414 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25415 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25416 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25417 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25418 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 25419 ;;  pPin            1   18[BANK0 ] unsigned char 
 25420 ;; Auto vars:     Size  Location     Type
 25421 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 25422 ;;  Pair            1   37[BANK0 ] enum E6469
 25423 ;; Return value:  Size  Location     Type
 25424 ;;                  1    wreg      enum E6475
 25425 ;; Registers used:
 25426 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25427 ;; Tracked objects:
 25428 ;;		On entry : 0/0
 25429 ;;		On exit  : 0/0
 25430 ;;		Unchanged: 0/0
 25431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25432 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25433 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25435 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25436 ;;Total ram usage:       23 bytes
 25437 ;; Hardware stack levels used:    1
 25438 ;; Hardware stack levels required when called:   10
 25439 ;; This function calls:
 25440 ;;		_Word_GetPair
 25441 ;; This function is called by:
 25442 ;;		_Port_CheckPairType
 25443 ;;		_Port_SetPinType
 25444 ;; This function uses a non-reentrant model
 25445 ;;
 25446                           
 25447                           	psect	text124
 25448  0155F8                     __ptext124:
 25449                           	opt stack 0
 25450  0155F8                     _PortProperty_Valid:
 25451                           	opt stack 17
 25452                           
 25453                           ;Types.c: 222: ePinDrive Pair;
 25454                           ;Types.c: 223: const ePinError Errors[4][4] =
 25455                           ;Types.c: 224: {
 25456                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 25457                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 25458                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 25459                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 25460                           ;Types.c: 230: };
 25461                           
 25462                           ; BSR set to: 0
 25463                           ;incstack = 0
 25464  0155F8  0E19               	movlw	low PortProperty_Valid@F6830
 25465  0155FA  6EF6               	movwf	tblptrl,c
 25466  0155FC                     	if	1	;There is more than 1 active tblptr byte
 25467  0155FC  0EFD               	movlw	high PortProperty_Valid@F6830
 25468  0155FE  6EF7               	movwf	tblptrh,c
 25469  015600                     	endif
 25470  015600                     	if	1	;There are 3 active tblptr bytes
 25471  015600  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 25472  015602  6EF8               	movwf	tblptru,c
 25473  015604                     	endif
 25474  015604  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 25475  015608  0E0F               	movlw	15
 25476  01560A                     u9030:
 25477  01560A  0009               	tblrd		*+
 25478  01560C  CFF5 FFDE          	movff	tablat,postinc2
 25479  015610  06E8               	decf	wreg,f,c
 25480  015612  E2FB               	bc	u9030
 25481                           
 25482                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 25483  015614  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 25484  015618  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 25485  01561C  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 25486  015620  EC9B  F0B1         	call	_Word_GetPair	;wreg free
 25487  015624  0100               	movlb	0	; () banked
 25488  015626  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 25489                           
 25490                           ; BSR set to: 0
 25491                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 25492  015628  0E04               	movlw	4
 25493  01562A  0100               	movlb	0	; () banked
 25494  01562C  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 25495  01562E  D020               	goto	l11481
 25496                           
 25497                           ; BSR set to: 0
 25498  015630  0E04               	movlw	4
 25499  015632  0100               	movlb	0	; () banked
 25500  015634  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 25501  015636  D01C               	goto	l11481
 25502                           
 25503                           ; BSR set to: 0
 25504                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 25505  015638  0100               	movlb	0	; () banked
 25506  01563A  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 25507  01563C  0D04               	mullw	4
 25508  01563E  0E75               	movlw	low PortProperty_Valid@Errors
 25509  015640  0100               	movlb	0	; () banked
 25510  015642  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 25511  015644  0E00               	movlw	high PortProperty_Valid@Errors
 25512  015646  0100               	movlb	0	; () banked
 25513  015648  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 25514  01564A  50F3               	movf	prodl,w,c
 25515  01564C  0100               	movlb	0	; () banked
 25516  01564E  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 25517  015650  50F4               	movf	prodh,w,c
 25518  015652  0100               	movlb	0	; () banked
 25519  015654  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 25520  015656  0100               	movlb	0	; () banked
 25521  015658  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 25522  01565A  0D01               	mullw	1
 25523  01565C  50F3               	movf	prodl,w,c
 25524  01565E  0100               	movlb	0	; () banked
 25525  015660  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 25526  015662  6ED9               	movwf	fsr2l,c
 25527  015664  50F4               	movf	prodh,w,c
 25528  015666  0100               	movlb	0	; () banked
 25529  015668  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 25530  01566A  6EDA               	movwf	fsr2h,c
 25531  01566C  50DF               	movf	indf2,w,c
 25532                           
 25533                           ; BSR set to: 0
 25534  01566E  0012               	return	
 25535  015670                     l11481:
 25536                           
 25537                           ; BSR set to: 0
 25538                           ;Types.c: 237: return ePinErrorState;
 25539  015670  0E05               	movlw	5
 25540  015672  0012               	return	
 25541  015674                     __end_of_PortProperty_Valid:
 25542                           	opt stack 0
 25543                           tosu	equ	0xFFF
 25544                           tosh	equ	0xFFE
 25545                           tosl	equ	0xFFD
 25546                           pclath	equ	0xFFA
 25547                           tblptru	equ	0xFF8
 25548                           tblptrh	equ	0xFF7
 25549                           tblptrl	equ	0xFF6
 25550                           tablat	equ	0xFF5
 25551                           prodh	equ	0xFF4
 25552                           prodl	equ	0xFF3
 25553                           intcon	equ	0xFF2
 25554                           postinc0	equ	0xFEE
 25555                           wreg	equ	0xFE8
 25556                           indf1	equ	0xFE7
 25557                           postdec1	equ	0xFE5
 25558                           fsr1h	equ	0xFE2
 25559                           fsr1l	equ	0xFE1
 25560                           indf2	equ	0xFDF
 25561                           postinc2	equ	0xFDE
 25562                           postdec2	equ	0xFDD
 25563                           plusw2	equ	0xFDB
 25564                           fsr2h	equ	0xFDA
 25565                           fsr2l	equ	0xFD9
 25566                           status	equ	0xFD8
 25567                           
 25568 ;; *************** function _Word_GetPair *****************
 25569 ;; Defined at:
 25570 ;;		line 156 in file "Library/Types.c"
 25571 ;; Parameters:    Size  Location     Type
 25572 ;;  pInput          2   12[BANK0 ] PTR struct Word
 25573 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25574 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25575 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25576 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25577 ;;  pPair           1   14[BANK0 ] unsigned char 
 25578 ;; Auto vars:     Size  Location     Type
 25579 ;;		None
 25580 ;; Return value:  Size  Location     Type
 25581 ;;                  1    wreg      unsigned char 
 25582 ;; Registers used:
 25583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25584 ;; Tracked objects:
 25585 ;;		On entry : 0/0
 25586 ;;		On exit  : 0/0
 25587 ;;		Unchanged: 0/0
 25588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25589 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25592 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25593 ;;Total ram usage:        3 bytes
 25594 ;; Hardware stack levels used:    1
 25595 ;; Hardware stack levels required when called:    9
 25596 ;; This function calls:
 25597 ;;		_Byte_GetPair
 25598 ;; This function is called by:
 25599 ;;		_Port_Init
 25600 ;;		_Port_SetPin
 25601 ;;		_Port_Set
 25602 ;;		_PortProperty_Valid
 25603 ;;		_Port_SetPair
 25604 ;;		_Port_SetQuad
 25605 ;; This function uses a non-reentrant model
 25606 ;;
 25607                           
 25608                           	psect	text125
 25609  016336                     __ptext125:
 25610                           	opt stack 0
 25611  016336                     _Word_GetPair:
 25612                           	opt stack 14
 25613                           
 25614                           ;Types.c: 158: if (pPair >= 4)
 25615                           
 25616                           ; BSR set to: 0
 25617                           ;incstack = 0
 25618  016336  0E03               	movlw	3
 25619  016338  0100               	movlb	0	; () banked
 25620  01633A  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 25621  01633C  D012               	goto	l11465
 25622                           
 25623                           ; BSR set to: 0
 25624                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 25625  01633E  0E01               	movlw	1
 25626  016340  0100               	movlb	0	; () banked
 25627  016342  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 25628  016344  0100               	movlb	0	; () banked
 25629  016346  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 25630  016348  0E00               	movlw	0
 25631  01634A  0100               	movlb	0	; () banked
 25632  01634C  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 25633  01634E  0100               	movlb	0	; () banked
 25634  016350  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 25635  016352  0100               	movlb	0	; () banked
 25636  016354  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 25637  016356  0FFC               	addlw	252
 25638  016358  0100               	movlb	0	; () banked
 25639  01635A  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 25640  01635C  ECF4  F0B3         	call	_Byte_GetPair	;wreg free
 25641  016360  0012               	return	
 25642  016362                     l11465:
 25643                           
 25644                           ;Types.c: 160: else
 25645                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 25646  016362  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 25647  016366  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 25648  01636A  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 25649  01636E  ECF4  F0B3         	call	_Byte_GetPair	;wreg free
 25650  016372  0012               	return	
 25651  016374                     __end_of_Word_GetPair:
 25652                           	opt stack 0
 25653                           tosu	equ	0xFFF
 25654                           tosh	equ	0xFFE
 25655                           tosl	equ	0xFFD
 25656                           pclath	equ	0xFFA
 25657                           tblptru	equ	0xFF8
 25658                           tblptrh	equ	0xFF7
 25659                           tblptrl	equ	0xFF6
 25660                           tablat	equ	0xFF5
 25661                           prodh	equ	0xFF4
 25662                           prodl	equ	0xFF3
 25663                           intcon	equ	0xFF2
 25664                           postinc0	equ	0xFEE
 25665                           wreg	equ	0xFE8
 25666                           indf1	equ	0xFE7
 25667                           postdec1	equ	0xFE5
 25668                           fsr1h	equ	0xFE2
 25669                           fsr1l	equ	0xFE1
 25670                           indf2	equ	0xFDF
 25671                           postinc2	equ	0xFDE
 25672                           postdec2	equ	0xFDD
 25673                           plusw2	equ	0xFDB
 25674                           fsr2h	equ	0xFDA
 25675                           fsr2l	equ	0xFD9
 25676                           status	equ	0xFD8
 25677                           
 25678 ;; *************** function _Byte_GetPair *****************
 25679 ;; Defined at:
 25680 ;;		line 87 in file "Library/Types.c"
 25681 ;; Parameters:    Size  Location     Type
 25682 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 25683 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 25684 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 25685 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 25686 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 25687 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 25688 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 25689 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 25690 ;;		 -> NULL(0), 
 25691 ;;  pPair           1   11[BANK0 ] unsigned char 
 25692 ;; Auto vars:     Size  Location     Type
 25693 ;;		None
 25694 ;; Return value:  Size  Location     Type
 25695 ;;                  1    wreg      unsigned char 
 25696 ;; Registers used:
 25697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25698 ;; Tracked objects:
 25699 ;;		On entry : 0/0
 25700 ;;		On exit  : 0/0
 25701 ;;		Unchanged: 0/0
 25702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25703 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25706 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25707 ;;Total ram usage:        3 bytes
 25708 ;; Hardware stack levels used:    1
 25709 ;; Hardware stack levels required when called:    8
 25710 ;; This function calls:
 25711 ;;		_Byte_GetZone
 25712 ;; This function is called by:
 25713 ;;		_Word_GetPair
 25714 ;; This function uses a non-reentrant model
 25715 ;;
 25716                           
 25717                           	psect	text126
 25718  0167E8                     __ptext126:
 25719                           	opt stack 0
 25720  0167E8                     _Byte_GetPair:
 25721                           	opt stack 14
 25722                           
 25723                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 25724                           
 25725                           ;incstack = 0
 25726  0167E8  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 25727  0167EC  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 25728  0167F0  0E04               	movlw	4
 25729  0167F2  0100               	movlb	0	; () banked
 25730  0167F4  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 25731  0167F6  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 25732  0167FA  0E02               	movlw	2
 25733  0167FC  0100               	movlb	0	; () banked
 25734  0167FE  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 25735  016800  EC81  F0A8         	call	_Byte_GetZone	;wreg free
 25736  016804  0012               	return	
 25737  016806                     __end_of_Byte_GetPair:
 25738                           	opt stack 0
 25739                           tosu	equ	0xFFF
 25740                           tosh	equ	0xFFE
 25741                           tosl	equ	0xFFD
 25742                           pclath	equ	0xFFA
 25743                           tblptru	equ	0xFF8
 25744                           tblptrh	equ	0xFF7
 25745                           tblptrl	equ	0xFF6
 25746                           tablat	equ	0xFF5
 25747                           prodh	equ	0xFF4
 25748                           prodl	equ	0xFF3
 25749                           intcon	equ	0xFF2
 25750                           postinc0	equ	0xFEE
 25751                           wreg	equ	0xFE8
 25752                           indf1	equ	0xFE7
 25753                           postdec1	equ	0xFE5
 25754                           fsr1h	equ	0xFE2
 25755                           fsr1l	equ	0xFE1
 25756                           indf2	equ	0xFDF
 25757                           postinc2	equ	0xFDE
 25758                           postdec2	equ	0xFDD
 25759                           plusw2	equ	0xFDB
 25760                           fsr2h	equ	0xFDA
 25761                           fsr2l	equ	0xFD9
 25762                           status	equ	0xFD8
 25763                           
 25764 ;; *************** function _Byte_GetZone *****************
 25765 ;; Defined at:
 25766 ;;		line 64 in file "Library/Types.c"
 25767 ;; Parameters:    Size  Location     Type
 25768 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 25769 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 25770 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 25771 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 25772 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 25773 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 25774 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 25775 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 25776 ;;		 -> NULL(0), 
 25777 ;;  pMax            1    2[BANK0 ] unsigned char 
 25778 ;;  pChunk          1    3[BANK0 ] unsigned char 
 25779 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 25780 ;; Auto vars:     Size  Location     Type
 25781 ;;  Output          1    8[BANK0 ] unsigned char 
 25782 ;;  Offset          1    7[BANK0 ] unsigned char 
 25783 ;;  MASK            1    6[BANK0 ] unsigned char 
 25784 ;; Return value:  Size  Location     Type
 25785 ;;                  1    wreg      unsigned char 
 25786 ;; Registers used:
 25787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 25788 ;; Tracked objects:
 25789 ;;		On entry : 0/0
 25790 ;;		On exit  : 0/0
 25791 ;;		Unchanged: 0/0
 25792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25793 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25794 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25796 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25797 ;;Total ram usage:        9 bytes
 25798 ;; Hardware stack levels used:    1
 25799 ;; Hardware stack levels required when called:    7
 25800 ;; This function calls:
 25801 ;;		Nothing
 25802 ;; This function is called by:
 25803 ;;		_Byte_GetPair
 25804 ;;		_Byte_GetTriple
 25805 ;;		_Byte_GetQuad
 25806 ;; This function uses a non-reentrant model
 25807 ;;
 25808                           
 25809                           	psect	text127
 25810  015102                     __ptext127:
 25811                           	opt stack 0
 25812  015102                     _Byte_GetZone:
 25813                           	opt stack 14
 25814                           
 25815                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 25816                           
 25817                           ;incstack = 0
 25818  015102  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 25819  015106  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 25820  01510A  0E00               	movlw	low (__mediumconst shr (0+16))
 25821  01510C  6EF8               	movwf	tblptru,c
 25822  01510E  0E0F               	movlw	(high __ramtop+-1)
 25823  015110  64F7               	cpfsgt	tblptrh,c
 25824  015112  D003               	bra	u8997
 25825  015114  0008               	tblrd		*
 25826  015116  50F5               	movf	tablat,w,c
 25827  015118  D005               	bra	u8990
 25828  01511A                     u8997:
 25829  01511A  CFF6 FFE9          	movff	tblptrl,fsr0l
 25830  01511E  CFF7 FFEA          	movff	tblptrh,fsr0h
 25831  015122  50EF               	movf	indf0,w,c
 25832  015124                     u8990:
 25833  015124  0100               	movlb	0	; () banked
 25834  015126  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 25835                           
 25836                           ; BSR set to: 0
 25837                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 25838  015128  0100               	movlb	0	; () banked
 25839  01512A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 25840  01512C  0D01               	mullw	1
 25841  01512E  0E33               	movlw	low _MASKS
 25842  015130  24F3               	addwf	prodl,w,c
 25843  015132  6EF6               	movwf	tblptrl,c
 25844  015134  0EFD               	movlw	high _MASKS
 25845  015136  20F4               	addwfc	prodh,w,c
 25846  015138  6EF7               	movwf	tblptrh,c
 25847  01513A                     	if	1	;There are 3 active tblptr bytes
 25848  01513A  6AF8               	clrf	tblptru,c
 25849  01513C  0E00               	movlw	low (__mediumconst shr (0+16))
 25850  01513E  22F8               	addwfc	tblptru,f,c
 25851  015140                     	endif
 25852  015140  0008               	tblrd		*
 25853  015142  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 25854                           
 25855                           ; BSR set to: 0
 25856                           ;Types.c: 68: UINT8 Offset = 0;
 25857  015146  0E00               	movlw	0
 25858  015148  0100               	movlb	0	; () banked
 25859  01514A  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 25860                           
 25861                           ;Types.c: 70: while (pChunk >= pMax)
 25862  01514C  D006               	goto	l11439
 25863  01514E                     l11435:
 25864                           
 25865                           ; BSR set to: 0
 25866                           ;Types.c: 71: {
 25867                           ;Types.c: 72: pChunk -= pMax;
 25868  01514E  0100               	movlb	0	; () banked
 25869  015150  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 25870  015152  0100               	movlb	0	; () banked
 25871  015154  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 25872                           
 25873                           ; BSR set to: 0
 25874                           ;Types.c: 73: Offset += 1;
 25875  015156  0100               	movlb	0	; () banked
 25876  015158  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 25877  01515A                     l11439:
 25878                           
 25879                           ; BSR set to: 0
 25880  01515A  0100               	movlb	0	; () banked
 25881  01515C  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 25882  01515E  0100               	movlb	0	; () banked
 25883  015160  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 25884  015162  B0D8               	btfsc	status,0,c
 25885  015164  D7F4               	goto	l11435
 25886                           
 25887                           ; BSR set to: 0
 25888                           ;Types.c: 74: }
 25889                           ;Types.c: 75: pChunk *= pChunkSize;
 25890                           
 25891                           ; BSR set to: 0
 25892  015166  0100               	movlb	0	; () banked
 25893  015168  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 25894  01516A  0100               	movlb	0	; () banked
 25895  01516C  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 25896  01516E  50F3               	movf	prodl,w,c
 25897  015170  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 25898                           
 25899                           ; BSR set to: 0
 25900                           ;Types.c: 76: pChunk += Offset;
 25901  015172  0100               	movlb	0	; () banked
 25902  015174  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 25903  015176  0100               	movlb	0	; () banked
 25904  015178  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;Types.c: 78: Output >>= pChunk;
 25908  01517A  0100               	movlb	0	; () banked
 25909  01517C  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 25910  01517E  0100               	movlb	0	; () banked
 25911  015180  6F65               	movwf	??_Byte_GetZone& (0+255),b
 25912  015182  D003               	goto	u9010
 25913  015184                     u9015:
 25914  015184  0100               	movlb	0	; () banked
 25915  015186  90D8               	bcf	status,0,c
 25916  015188  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 25917  01518A                     u9010:
 25918  01518A  0100               	movlb	0	; () banked
 25919  01518C  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 25920  01518E  D7FA               	goto	u9015
 25921                           
 25922                           ;Types.c: 79: Output &= MASK;
 25923  015190  0100               	movlb	0	; () banked
 25924  015192  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 25925  015194  0100               	movlb	0	; () banked
 25926  015196  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 25927                           
 25928                           ; BSR set to: 0
 25929                           ;Types.c: 80: return Output;
 25930  015198  0100               	movlb	0	; () banked
 25931  01519A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 25932  01519C  0012               	return	
 25933  01519E                     __end_of_Byte_GetZone:
 25934                           	opt stack 0
 25935                           tosu	equ	0xFFF
 25936                           tosh	equ	0xFFE
 25937                           tosl	equ	0xFFD
 25938                           pclath	equ	0xFFA
 25939                           tblptru	equ	0xFF8
 25940                           tblptrh	equ	0xFF7
 25941                           tblptrl	equ	0xFF6
 25942                           tablat	equ	0xFF5
 25943                           prodh	equ	0xFF4
 25944                           prodl	equ	0xFF3
 25945                           intcon	equ	0xFF2
 25946                           indf0	equ	0xFEF
 25947                           postinc0	equ	0xFEE
 25948                           fsr0h	equ	0xFEA
 25949                           fsr0l	equ	0xFE9
 25950                           wreg	equ	0xFE8
 25951                           indf1	equ	0xFE7
 25952                           postdec1	equ	0xFE5
 25953                           fsr1h	equ	0xFE2
 25954                           fsr1l	equ	0xFE1
 25955                           indf2	equ	0xFDF
 25956                           postinc2	equ	0xFDE
 25957                           postdec2	equ	0xFDD
 25958                           plusw2	equ	0xFDB
 25959                           fsr2h	equ	0xFDA
 25960                           fsr2l	equ	0xFD9
 25961                           status	equ	0xFD8
 25962                           
 25963 ;; *************** function _Byte_SetQuad *****************
 25964 ;; Defined at:
 25965 ;;		line 101 in file "Library/Types.c"
 25966 ;; Parameters:    Size  Location     Type
 25967 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25968 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 25969 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 25970 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 25971 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 25972 ;;		 -> NULL(0), 
 25973 ;;  pQuad           1   13[BANK0 ] unsigned char 
 25974 ;;  pValue          1   14[BANK0 ] unsigned char 
 25975 ;; Auto vars:     Size  Location     Type
 25976 ;;		None
 25977 ;; Return value:  Size  Location     Type
 25978 ;;                  1    wreg      void 
 25979 ;; Registers used:
 25980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25981 ;; Tracked objects:
 25982 ;;		On entry : 0/0
 25983 ;;		On exit  : 0/0
 25984 ;;		Unchanged: 0/0
 25985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25989 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25990 ;;Total ram usage:        4 bytes
 25991 ;; Hardware stack levels used:    1
 25992 ;; Hardware stack levels required when called:    8
 25993 ;; This function calls:
 25994 ;;		_Byte_SetZone
 25995 ;; This function is called by:
 25996 ;;		_Port_SetQuadType
 25997 ;;		_SPI_Init
 25998 ;;		_SPI_MinSpeed
 25999 ;;		_SPI_MaxSpeed
 26000 ;;		_Port_SetQuad
 26001 ;;		_Word_SetQuad
 26002 ;;		_I2C_Init
 26003 ;; This function uses a non-reentrant model
 26004 ;;
 26005                           
 26006                           	psect	text128
 26007  016730                     __ptext128:
 26008                           	opt stack 0
 26009  016730                     _Byte_SetQuad:
 26010                           	opt stack 19
 26011                           
 26012                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 26013                           
 26014                           ; BSR set to: 0
 26015                           ;incstack = 0
 26016  016730  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 26017  016734  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 26018  016738  0E02               	movlw	2
 26019  01673A  0100               	movlb	0	; () banked
 26020  01673C  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 26021  01673E  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 26022  016742  0E04               	movlw	4
 26023  016744  0100               	movlb	0	; () banked
 26024  016746  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 26025  016748  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 26026  01674C  ECD8  F0A4         	call	_Byte_SetZone	;wreg free
 26027  016750  0012               	return		;funcret
 26028  016752                     __end_of_Byte_SetQuad:
 26029                           	opt stack 0
 26030                           tosu	equ	0xFFF
 26031                           tosh	equ	0xFFE
 26032                           tosl	equ	0xFFD
 26033                           pclath	equ	0xFFA
 26034                           tblptru	equ	0xFF8
 26035                           tblptrh	equ	0xFF7
 26036                           tblptrl	equ	0xFF6
 26037                           tablat	equ	0xFF5
 26038                           prodh	equ	0xFF4
 26039                           prodl	equ	0xFF3
 26040                           intcon	equ	0xFF2
 26041                           indf0	equ	0xFEF
 26042                           postinc0	equ	0xFEE
 26043                           fsr0h	equ	0xFEA
 26044                           fsr0l	equ	0xFE9
 26045                           wreg	equ	0xFE8
 26046                           indf1	equ	0xFE7
 26047                           postdec1	equ	0xFE5
 26048                           fsr1h	equ	0xFE2
 26049                           fsr1l	equ	0xFE1
 26050                           indf2	equ	0xFDF
 26051                           postinc2	equ	0xFDE
 26052                           postdec2	equ	0xFDD
 26053                           plusw2	equ	0xFDB
 26054                           fsr2h	equ	0xFDA
 26055                           fsr2l	equ	0xFD9
 26056                           status	equ	0xFD8
 26057                           
 26058 ;; *************** function _Byte_SetZone *****************
 26059 ;; Defined at:
 26060 ;;		line 47 in file "Library/Types.c"
 26061 ;; Parameters:    Size  Location     Type
 26062 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26063 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 26064 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 26065 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 26066 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 26067 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26068 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26069 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26070 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26071 ;;  pMax            1    2[BANK0 ] unsigned char 
 26072 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26073 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26074 ;;  pValue          1    5[BANK0 ] unsigned char 
 26075 ;; Auto vars:     Size  Location     Type
 26076 ;;  MASK            1   10[BANK0 ] unsigned char 
 26077 ;;  Offset          1    9[BANK0 ] unsigned char 
 26078 ;; Return value:  Size  Location     Type
 26079 ;;                  1    wreg      void 
 26080 ;; Registers used:
 26081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26082 ;; Tracked objects:
 26083 ;;		On entry : 0/0
 26084 ;;		On exit  : 0/0
 26085 ;;		Unchanged: 0/0
 26086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26087 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26089 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26090 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26091 ;;Total ram usage:       11 bytes
 26092 ;; Hardware stack levels used:    1
 26093 ;; Hardware stack levels required when called:    7
 26094 ;; This function calls:
 26095 ;;		Nothing
 26096 ;; This function is called by:
 26097 ;;		_Byte_SetPair
 26098 ;;		_Byte_SetQuad
 26099 ;;		_Byte_SetTriple
 26100 ;; This function uses a non-reentrant model
 26101 ;;
 26102                           
 26103                           	psect	text129
 26104  0149B0                     __ptext129:
 26105                           	opt stack 0
 26106  0149B0                     _Byte_SetZone:
 26107                           	opt stack 18
 26108                           
 26109                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 26110                           
 26111                           ;incstack = 0
 26112  0149B0  0100               	movlb	0	; () banked
 26113  0149B2  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26114  0149B4  0D01               	mullw	1
 26115  0149B6  0E33               	movlw	low _MASKS
 26116  0149B8  24F3               	addwf	prodl,w,c
 26117  0149BA  6EF6               	movwf	tblptrl,c
 26118  0149BC  0EFD               	movlw	high _MASKS
 26119  0149BE  20F4               	addwfc	prodh,w,c
 26120  0149C0  6EF7               	movwf	tblptrh,c
 26121  0149C2                     	if	1	;There are 3 active tblptr bytes
 26122  0149C2  6AF8               	clrf	tblptru,c
 26123  0149C4  0E00               	movlw	low (__mediumconst shr (0+16))
 26124  0149C6  22F8               	addwfc	tblptru,f,c
 26125  0149C8                     	endif
 26126  0149C8  0008               	tblrd		*
 26127  0149CA  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 26128                           
 26129                           ; BSR set to: 0
 26130                           ;Types.c: 50: UINT8 Offset = 0;
 26131  0149CE  0E00               	movlw	0
 26132  0149D0  0100               	movlb	0	; () banked
 26133  0149D2  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 26134                           
 26135                           ;Types.c: 52: while (pChunk >= pMax)
 26136  0149D4  D006               	goto	l11499
 26137  0149D6                     l11495:
 26138                           
 26139                           ; BSR set to: 0
 26140                           ;Types.c: 53: {
 26141                           ;Types.c: 54: pChunk -= pMax;
 26142  0149D6  0100               	movlb	0	; () banked
 26143  0149D8  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26144  0149DA  0100               	movlb	0	; () banked
 26145  0149DC  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 26146                           
 26147                           ; BSR set to: 0
 26148                           ;Types.c: 55: Offset += 1;
 26149  0149DE  0100               	movlb	0	; () banked
 26150  0149E0  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 26151  0149E2                     l11499:
 26152                           
 26153                           ; BSR set to: 0
 26154  0149E2  0100               	movlb	0	; () banked
 26155  0149E4  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26156  0149E6  0100               	movlb	0	; () banked
 26157  0149E8  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 26158  0149EA  B0D8               	btfsc	status,0,c
 26159  0149EC  D7F4               	goto	l11495
 26160                           
 26161                           ; BSR set to: 0
 26162                           ;Types.c: 56: }
 26163                           ;Types.c: 57: pChunk *= pChunkSize;
 26164                           
 26165                           ; BSR set to: 0
 26166  0149EE  0100               	movlb	0	; () banked
 26167  0149F0  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26168  0149F2  0100               	movlb	0	; () banked
 26169  0149F4  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 26170  0149F6  50F3               	movf	prodl,w,c
 26171  0149F8  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 26172                           
 26173                           ; BSR set to: 0
 26174                           ;Types.c: 58: pChunk += Offset;
 26175  0149FA  0100               	movlb	0	; () banked
 26176  0149FC  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 26177  0149FE  0100               	movlb	0	; () banked
 26178  014A00  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 26179                           
 26180                           ; BSR set to: 0
 26181                           ;Types.c: 60: pValue &= MASK;
 26182  014A02  0100               	movlb	0	; () banked
 26183  014A04  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 26184  014A06  0100               	movlb	0	; () banked
 26185  014A08  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 26186                           
 26187                           ; BSR set to: 0
 26188                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 26189  014A0A  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26190  014A0E  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 26191  014A12  0100               	movlb	0	; () banked
 26192  014A14  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26193  014A16  D003               	goto	u9094
 26194  014A18                     u9095:
 26195  014A18  0100               	movlb	0	; () banked
 26196  014A1A  90D8               	bcf	status,0,c
 26197  014A1C  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26198  014A1E                     u9094:
 26199  014A1E  0100               	movlb	0	; () banked
 26200  014A20  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26201  014A22  D7FA               	goto	u9095
 26202  014A24  0100               	movlb	0	; () banked
 26203  014A26  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26204  014A28  0AFF               	xorlw	255
 26205  014A2A  0100               	movlb	0	; () banked
 26206  014A2C  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26207  014A2E  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26208  014A32  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26209  014A36  0100               	movlb	0	; () banked
 26210  014A38  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26211  014A3A  16DF               	andwf	indf2,f,c
 26212                           
 26213                           ; BSR set to: 0
 26214                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26215  014A3C  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26216  014A40  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26217  014A44  0100               	movlb	0	; () banked
 26218  014A46  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26219  014A48  D003               	goto	u9104
 26220  014A4A                     u9105:
 26221  014A4A  0100               	movlb	0	; () banked
 26222  014A4C  90D8               	bcf	status,0,c
 26223  014A4E  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26224  014A50                     u9104:
 26225  014A50  0100               	movlb	0	; () banked
 26226  014A52  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26227  014A54  D7FA               	goto	u9105
 26228  014A56  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26229  014A5A  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26230  014A5E  0100               	movlb	0	; () banked
 26231  014A60  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26232  014A62  12DF               	iorwf	indf2,f,c
 26233                           
 26234                           ; BSR set to: 0
 26235  014A64  0012               	return		;funcret
 26236  014A66                     __end_of_Byte_SetZone:
 26237                           	opt stack 0
 26238                           tosu	equ	0xFFF
 26239                           tosh	equ	0xFFE
 26240                           tosl	equ	0xFFD
 26241                           pclath	equ	0xFFA
 26242                           tblptru	equ	0xFF8
 26243                           tblptrh	equ	0xFF7
 26244                           tblptrl	equ	0xFF6
 26245                           tablat	equ	0xFF5
 26246                           prodh	equ	0xFF4
 26247                           prodl	equ	0xFF3
 26248                           intcon	equ	0xFF2
 26249                           indf0	equ	0xFEF
 26250                           postinc0	equ	0xFEE
 26251                           fsr0h	equ	0xFEA
 26252                           fsr0l	equ	0xFE9
 26253                           wreg	equ	0xFE8
 26254                           indf1	equ	0xFE7
 26255                           postdec1	equ	0xFE5
 26256                           fsr1h	equ	0xFE2
 26257                           fsr1l	equ	0xFE1
 26258                           indf2	equ	0xFDF
 26259                           postinc2	equ	0xFDE
 26260                           postdec2	equ	0xFDD
 26261                           plusw2	equ	0xFDB
 26262                           fsr2h	equ	0xFDA
 26263                           fsr2l	equ	0xFD9
 26264                           status	equ	0xFD8
 26265                           
 26266 ;; *************** function _FunctInitADC *****************
 26267 ;; Defined at:
 26268 ;;		line 31 in file "Functions.c"
 26269 ;; Parameters:    Size  Location     Type
 26270 ;;		None
 26271 ;; Auto vars:     Size  Location     Type
 26272 ;;		None
 26273 ;; Return value:  Size  Location     Type
 26274 ;;                  1    wreg      void 
 26275 ;; Registers used:
 26276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26277 ;; Tracked objects:
 26278 ;;		On entry : 0/0
 26279 ;;		On exit  : 0/0
 26280 ;;		Unchanged: 0/0
 26281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26286 ;;Total ram usage:        0 bytes
 26287 ;; Hardware stack levels used:    1
 26288 ;; Hardware stack levels required when called:   10
 26289 ;; This function calls:
 26290 ;;		_ADC_Init
 26291 ;;		_ADC_Sequence
 26292 ;; This function is called by:
 26293 ;;		_init
 26294 ;; This function uses a non-reentrant model
 26295 ;;
 26296                           
 26297                           	psect	text130
 26298  014BC8                     __ptext130:
 26299                           	opt stack 0
 26300  014BC8                     _FunctInitADC:
 26301                           	opt stack 19
 26302                           
 26303                           ;Functions.c: 33: ADC_Init(&ADC_AN0, eADC_Ch0);
 26304                           
 26305                           ; BSR set to: 0
 26306                           ;incstack = 0
 26307  014BC8  0ED2               	movlw	low _ADC_AN0
 26308  014BCA  0100               	movlb	0	; () banked
 26309  014BCC  6F64               	movwf	ADC_Init@pInput& (0+255),b
 26310  014BCE  0E01               	movlw	high _ADC_AN0
 26311  014BD0  0100               	movlb	0	; () banked
 26312  014BD2  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 26313  014BD4  0E00               	movlw	0
 26314  014BD6  0100               	movlb	0	; () banked
 26315  014BD8  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 26316  014BDA  EC3A  F0AB         	call	_ADC_Init	;wreg free
 26317                           
 26318                           ;Functions.c: 34: ADC_Init(&ADC_AN1, eADC_Ch1);
 26319  014BDE  0ECD               	movlw	low _ADC_AN1
 26320  014BE0  0100               	movlb	0	; () banked
 26321  014BE2  6F64               	movwf	ADC_Init@pInput& (0+255),b
 26322  014BE4  0E01               	movlw	high _ADC_AN1
 26323  014BE6  0100               	movlb	0	; () banked
 26324  014BE8  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 26325  014BEA  0E01               	movlw	1
 26326  014BEC  0100               	movlb	0	; () banked
 26327  014BEE  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 26328  014BF0  EC3A  F0AB         	call	_ADC_Init	;wreg free
 26329                           
 26330                           ;Functions.c: 35: ADC_Init(&ADC_AN2, eADC_Ch2);
 26331  014BF4  0EC8               	movlw	low _ADC_AN2
 26332  014BF6  0100               	movlb	0	; () banked
 26333  014BF8  6F64               	movwf	ADC_Init@pInput& (0+255),b
 26334  014BFA  0E01               	movlw	high _ADC_AN2
 26335  014BFC  0100               	movlb	0	; () banked
 26336  014BFE  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 26337  014C00  0E02               	movlw	2
 26338  014C02  0100               	movlb	0	; () banked
 26339  014C04  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 26340  014C06  EC3A  F0AB         	call	_ADC_Init	;wreg free
 26341                           
 26342                           ;Functions.c: 36: ADC_Init(&ADC_AN3, eADC_Ch3);
 26343  014C0A  0EC3               	movlw	low _ADC_AN3
 26344  014C0C  0100               	movlb	0	; () banked
 26345  014C0E  6F64               	movwf	ADC_Init@pInput& (0+255),b
 26346  014C10  0E01               	movlw	high _ADC_AN3
 26347  014C12  0100               	movlb	0	; () banked
 26348  014C14  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 26349  014C16  0E03               	movlw	3
 26350  014C18  0100               	movlb	0	; () banked
 26351  014C1A  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 26352  014C1C  EC3A  F0AB         	call	_ADC_Init	;wreg free
 26353                           
 26354                           ;Functions.c: 39: ADC_Sequence(&ADC_AN0, &ADC_AN1);
 26355  014C20  0ED2               	movlw	low _ADC_AN0
 26356  014C22  0100               	movlb	0	; () banked
 26357  014C24  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 26358  014C26  0E01               	movlw	high _ADC_AN0
 26359  014C28  0100               	movlb	0	; () banked
 26360  014C2A  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 26361  014C2C  0ECD               	movlw	low _ADC_AN1
 26362  014C2E  0100               	movlb	0	; () banked
 26363  014C30  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 26364  014C32  0E01               	movlw	high _ADC_AN1
 26365  014C34  0100               	movlb	0	; () banked
 26366  014C36  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 26367  014C38  ECF9  F0B0         	call	_ADC_Sequence	;wreg free
 26368                           
 26369                           ;Functions.c: 40: ADC_Sequence(&ADC_AN1, &ADC_AN2);
 26370  014C3C  0ECD               	movlw	low _ADC_AN1
 26371  014C3E  0100               	movlb	0	; () banked
 26372  014C40  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 26373  014C42  0E01               	movlw	high _ADC_AN1
 26374  014C44  0100               	movlb	0	; () banked
 26375  014C46  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 26376  014C48  0EC8               	movlw	low _ADC_AN2
 26377  014C4A  0100               	movlb	0	; () banked
 26378  014C4C  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 26379  014C4E  0E01               	movlw	high _ADC_AN2
 26380  014C50  0100               	movlb	0	; () banked
 26381  014C52  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 26382  014C54  ECF9  F0B0         	call	_ADC_Sequence	;wreg free
 26383                           
 26384                           ;Functions.c: 41: ADC_Sequence(&ADC_AN2, &ADC_AN3);
 26385  014C58  0EC8               	movlw	low _ADC_AN2
 26386  014C5A  0100               	movlb	0	; () banked
 26387  014C5C  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 26388  014C5E  0E01               	movlw	high _ADC_AN2
 26389  014C60  0100               	movlb	0	; () banked
 26390  014C62  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 26391  014C64  0EC3               	movlw	low _ADC_AN3
 26392  014C66  0100               	movlb	0	; () banked
 26393  014C68  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 26394  014C6A  0E01               	movlw	high _ADC_AN3
 26395  014C6C  0100               	movlb	0	; () banked
 26396  014C6E  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 26397  014C70  ECF9  F0B0         	call	_ADC_Sequence	;wreg free
 26398  014C74  0012               	return		;funcret
 26399  014C76                     __end_of_FunctInitADC:
 26400                           	opt stack 0
 26401                           tosu	equ	0xFFF
 26402                           tosh	equ	0xFFE
 26403                           tosl	equ	0xFFD
 26404                           pclath	equ	0xFFA
 26405                           tblptru	equ	0xFF8
 26406                           tblptrh	equ	0xFF7
 26407                           tblptrl	equ	0xFF6
 26408                           tablat	equ	0xFF5
 26409                           prodh	equ	0xFF4
 26410                           prodl	equ	0xFF3
 26411                           intcon	equ	0xFF2
 26412                           indf0	equ	0xFEF
 26413                           postinc0	equ	0xFEE
 26414                           fsr0h	equ	0xFEA
 26415                           fsr0l	equ	0xFE9
 26416                           wreg	equ	0xFE8
 26417                           indf1	equ	0xFE7
 26418                           postdec1	equ	0xFE5
 26419                           fsr1h	equ	0xFE2
 26420                           fsr1l	equ	0xFE1
 26421                           indf2	equ	0xFDF
 26422                           postinc2	equ	0xFDE
 26423                           postdec2	equ	0xFDD
 26424                           plusw2	equ	0xFDB
 26425                           fsr2h	equ	0xFDA
 26426                           fsr2l	equ	0xFD9
 26427                           status	equ	0xFD8
 26428                           
 26429 ;; *************** function _ADC_Sequence *****************
 26430 ;; Defined at:
 26431 ;;		line 101 in file "Library/ADC.c"
 26432 ;; Parameters:    Size  Location     Type
 26433 ;;  pItemA          2    0[BANK0 ] PTR struct ADC
 26434 ;;		 -> ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 26435 ;;  pItemB          2    2[BANK0 ] PTR struct ADC
 26436 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), 
 26437 ;; Auto vars:     Size  Location     Type
 26438 ;;		None
 26439 ;; Return value:  Size  Location     Type
 26440 ;;                  1    wreg      void 
 26441 ;; Registers used:
 26442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26443 ;; Tracked objects:
 26444 ;;		On entry : 0/0
 26445 ;;		On exit  : 0/0
 26446 ;;		Unchanged: 0/0
 26447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26451 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26452 ;;Total ram usage:        4 bytes
 26453 ;; Hardware stack levels used:    1
 26454 ;; Hardware stack levels required when called:    7
 26455 ;; This function calls:
 26456 ;;		Nothing
 26457 ;; This function is called by:
 26458 ;;		_FunctInitADC
 26459 ;; This function uses a non-reentrant model
 26460 ;;
 26461                           
 26462                           	psect	text131
 26463  0161F2                     __ptext131:
 26464                           	opt stack 0
 26465  0161F2                     _ADC_Sequence:
 26466                           	opt stack 21
 26467                           
 26468                           ;ADC.c: 103: if(pItemA==(void*)0)
 26469                           
 26470                           ;incstack = 0
 26471  0161F2  0100               	movlb	0	; () banked
 26472  0161F4  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 26473  0161F6  0100               	movlb	0	; () banked
 26474  0161F8  1161               	iorwf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 26475  0161FA  B4D8               	btfsc	status,2,c
 26476  0161FC  0012               	return	
 26477                           
 26478                           ; BSR set to: 0
 26479                           ;ADC.c: 105: if(pItemB==(void*)0)
 26480                           
 26481                           ; BSR set to: 0
 26482                           
 26483                           ; BSR set to: 0
 26484                           ;ADC.c: 104: return;
 26485  0161FE  0100               	movlb	0	; () banked
 26486  016200  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 26487  016202  0100               	movlb	0	; () banked
 26488  016204  1163               	iorwf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 26489  016206  B4D8               	btfsc	status,2,c
 26490  016208  0012               	return	
 26491                           
 26492                           ; BSR set to: 0
 26493                           ;ADC.c: 109: pItemA->mNext = pItemB;
 26494                           
 26495                           ; BSR set to: 0
 26496                           
 26497                           ; BSR set to: 0
 26498                           ;ADC.c: 106: return;
 26499  01620A  0100               	movlb	0	; () banked
 26500  01620C  EE20 F003          	lfsr	2,3
 26501  016210  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 26502  016212  26D9               	addwf	fsr2l,f,c
 26503  016214  5161               	movf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 26504  016216  22DA               	addwfc	fsr2h,f,c
 26505  016218  C062  FFDE         	movff	ADC_Sequence@pItemB,postinc2
 26506  01621C  C063  FFDD         	movff	ADC_Sequence@pItemB+1,postdec2
 26507                           
 26508                           ;ADC.c: 110: pItemB->mNext = 0;
 26509  016220  0100               	movlb	0	; () banked
 26510  016222  EE20 F003          	lfsr	2,3
 26511  016226  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 26512  016228  26D9               	addwf	fsr2l,f,c
 26513  01622A  5163               	movf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 26514  01622C  22DA               	addwfc	fsr2h,f,c
 26515  01622E  0E00               	movlw	0
 26516  016230  6EDE               	movwf	postinc2,c
 26517  016232  0E00               	movlw	0
 26518  016234  6EDD               	movwf	postdec2,c
 26519                           
 26520                           ; BSR set to: 0
 26521  016236  0012               	return		;funcret
 26522  016238                     __end_of_ADC_Sequence:
 26523                           	opt stack 0
 26524                           tosu	equ	0xFFF
 26525                           tosh	equ	0xFFE
 26526                           tosl	equ	0xFFD
 26527                           pclath	equ	0xFFA
 26528                           tblptru	equ	0xFF8
 26529                           tblptrh	equ	0xFF7
 26530                           tblptrl	equ	0xFF6
 26531                           tablat	equ	0xFF5
 26532                           prodh	equ	0xFF4
 26533                           prodl	equ	0xFF3
 26534                           intcon	equ	0xFF2
 26535                           indf0	equ	0xFEF
 26536                           postinc0	equ	0xFEE
 26537                           fsr0h	equ	0xFEA
 26538                           fsr0l	equ	0xFE9
 26539                           wreg	equ	0xFE8
 26540                           indf1	equ	0xFE7
 26541                           postdec1	equ	0xFE5
 26542                           fsr1h	equ	0xFE2
 26543                           fsr1l	equ	0xFE1
 26544                           indf2	equ	0xFDF
 26545                           postinc2	equ	0xFDE
 26546                           postdec2	equ	0xFDD
 26547                           plusw2	equ	0xFDB
 26548                           fsr2h	equ	0xFDA
 26549                           fsr2l	equ	0xFD9
 26550                           status	equ	0xFD8
 26551                           
 26552 ;; *************** function _ADC_Init *****************
 26553 ;; Defined at:
 26554 ;;		line 19 in file "Library/ADC.c"
 26555 ;; Parameters:    Size  Location     Type
 26556 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 26557 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 26558 ;;  pChannel        1    6[BANK0 ] enum E6742
 26559 ;; Auto vars:     Size  Location     Type
 26560 ;;		None
 26561 ;; Return value:  Size  Location     Type
 26562 ;;                  1    wreg      void 
 26563 ;; Registers used:
 26564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26565 ;; Tracked objects:
 26566 ;;		On entry : 0/0
 26567 ;;		On exit  : 0/0
 26568 ;;		Unchanged: 0/0
 26569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26570 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26573 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26574 ;;Total ram usage:        3 bytes
 26575 ;; Hardware stack levels used:    1
 26576 ;; Hardware stack levels required when called:    9
 26577 ;; This function calls:
 26578 ;;		_ADC_Calibrate
 26579 ;;		_ADC_ClockDivision
 26580 ;;		_ADC_ConversionTime
 26581 ;;		_ADC_SetChannel
 26582 ;;		_ADC_SetupIO
 26583 ;; This function is called by:
 26584 ;;		_FunctInitADC
 26585 ;; This function uses a non-reentrant model
 26586 ;;
 26587                           
 26588                           	psect	text132
 26589  015674                     __ptext132:
 26590                           	opt stack 0
 26591  015674                     _ADC_Init:
 26592                           	opt stack 19
 26593                           
 26594                           ;ADC.c: 21: if(pInput==(void*)0)
 26595                           
 26596                           ; BSR set to: 0
 26597                           ;incstack = 0
 26598  015674  0100               	movlb	0	; () banked
 26599  015676  5164               	movf	ADC_Init@pInput& (0+255),w,b
 26600  015678  0100               	movlb	0	; () banked
 26601  01567A  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 26602  01567C  B4D8               	btfsc	status,2,c
 26603  01567E  0012               	return	
 26604                           
 26605                           ; BSR set to: 0
 26606                           ;ADC.c: 25: lCurrent = pInput;
 26607                           
 26608                           ; BSR set to: 0
 26609                           
 26610                           ; BSR set to: 0
 26611                           ;ADC.c: 22: return;
 26612  015680  C064  F0DC         	movff	ADC_Init@pInput,_lCurrent
 26613  015684  C065  F0DD         	movff	ADC_Init@pInput+1,_lCurrent+1
 26614                           
 26615                           ; BSR set to: 0
 26616                           ;ADC.c: 27: pInput->mChannel = pChannel;
 26617  015688  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 26618  01568C  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 26619  015690  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 26620                           
 26621                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 26622  015694  0100               	movlb	0	; () banked
 26623  015696  EE20 F003          	lfsr	2,3
 26624  01569A  5164               	movf	ADC_Init@pInput& (0+255),w,b
 26625  01569C  26D9               	addwf	fsr2l,f,c
 26626  01569E  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 26627  0156A0  22DA               	addwfc	fsr2h,f,c
 26628  0156A2  0E00               	movlw	0
 26629  0156A4  6EDE               	movwf	postinc2,c
 26630  0156A6  0E00               	movlw	0
 26631  0156A8  6EDD               	movwf	postdec2,c
 26632                           
 26633                           ;ADC.c: 29: pInput->mValue = 0;
 26634  0156AA  0100               	movlb	0	; () banked
 26635  0156AC  EE20 F001          	lfsr	2,1
 26636  0156B0  5164               	movf	ADC_Init@pInput& (0+255),w,b
 26637  0156B2  26D9               	addwf	fsr2l,f,c
 26638  0156B4  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 26639  0156B6  22DA               	addwfc	fsr2h,f,c
 26640  0156B8  0E00               	movlw	0
 26641  0156BA  6EDE               	movwf	postinc2,c
 26642  0156BC  0E00               	movlw	0
 26643  0156BE  6EDD               	movwf	postdec2,c
 26644                           
 26645                           ; BSR set to: 0
 26646                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 26647  0156C0  0100               	movlb	0	; () banked
 26648  0156C2  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 26649  0156C4  EC03  F0B4         	call	_ADC_SetChannel
 26650                           
 26651                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 26652  0156C8  9EC2               	bcf	4034,7,c	;volatile
 26653                           
 26654                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 26655  0156CA  9CC2               	bcf	4034,6,c	;volatile
 26656                           
 26657                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 26658  0156CC  8EC1               	bsf	4033,7,c	;volatile
 26659                           
 26660                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 26661  0156CE  8CC1               	bsf	4033,6,c	;volatile
 26662                           
 26663                           ;ADC.c: 43: ADC_ConversionTime(12);
 26664  0156D0  0E0C               	movlw	12
 26665  0156D2  EC8F  F0B0         	call	_ADC_ConversionTime
 26666                           
 26667                           ;ADC.c: 47: ADC_ClockDivision(16);
 26668  0156D6  0E10               	movlw	16
 26669  0156D8  ECF1  F0A9         	call	_ADC_ClockDivision
 26670                           
 26671                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 26672  0156DC  0100               	movlb	0	; () banked
 26673  0156DE  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 26674  0156E0  EC7F  F0B2         	call	_ADC_SetupIO
 26675                           
 26676                           ;ADC.c: 58: ADC_Initialised = 1;
 26677  0156E4  0E01               	movlw	1
 26678  0156E6  0100               	movlb	0	; () banked
 26679  0156E8  6FEA               	movwf	_ADC_Initialised& (0+255),b
 26680                           
 26681                           ; BSR set to: 0
 26682                           ;ADC.c: 61: ADC_Calibrate();
 26683  0156EA  EC8A  F0B4         	call	_ADC_Calibrate	;wreg free
 26684  0156EE  0012               	return		;funcret
 26685  0156F0                     __end_of_ADC_Init:
 26686                           	opt stack 0
 26687                           tosu	equ	0xFFF
 26688                           tosh	equ	0xFFE
 26689                           tosl	equ	0xFFD
 26690                           pclath	equ	0xFFA
 26691                           tblptru	equ	0xFF8
 26692                           tblptrh	equ	0xFF7
 26693                           tblptrl	equ	0xFF6
 26694                           tablat	equ	0xFF5
 26695                           prodh	equ	0xFF4
 26696                           prodl	equ	0xFF3
 26697                           intcon	equ	0xFF2
 26698                           indf0	equ	0xFEF
 26699                           postinc0	equ	0xFEE
 26700                           fsr0h	equ	0xFEA
 26701                           fsr0l	equ	0xFE9
 26702                           wreg	equ	0xFE8
 26703                           indf1	equ	0xFE7
 26704                           postdec1	equ	0xFE5
 26705                           fsr1h	equ	0xFE2
 26706                           fsr1l	equ	0xFE1
 26707                           indf2	equ	0xFDF
 26708                           postinc2	equ	0xFDE
 26709                           postdec2	equ	0xFDD
 26710                           plusw2	equ	0xFDB
 26711                           fsr2h	equ	0xFDA
 26712                           fsr2l	equ	0xFD9
 26713                           status	equ	0xFD8
 26714                           
 26715 ;; *************** function _ADC_SetupIO *****************
 26716 ;; Defined at:
 26717 ;;		line 150 in file "Library/ADC.c"
 26718 ;; Parameters:    Size  Location     Type
 26719 ;;  pChannel        1    wreg     enum E6742
 26720 ;; Auto vars:     Size  Location     Type
 26721 ;;  pChannel        1    2[BANK0 ] enum E6742
 26722 ;;  MASK            1    3[BANK0 ] unsigned char 
 26723 ;; Return value:  Size  Location     Type
 26724 ;;                  1    wreg      void 
 26725 ;; Registers used:
 26726 ;;		wreg, status,2, status,0
 26727 ;; Tracked objects:
 26728 ;;		On entry : 0/0
 26729 ;;		On exit  : 0/0
 26730 ;;		Unchanged: 0/0
 26731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26736 ;;Total ram usage:        4 bytes
 26737 ;; Hardware stack levels used:    1
 26738 ;; Hardware stack levels required when called:    7
 26739 ;; This function calls:
 26740 ;;		Nothing
 26741 ;; This function is called by:
 26742 ;;		_ADC_Init
 26743 ;; This function uses a non-reentrant model
 26744 ;;
 26745                           
 26746                           	psect	text133
 26747  0164FE                     __ptext133:
 26748                           	opt stack 0
 26749  0164FE                     _ADC_SetupIO:
 26750                           	opt stack 20
 26751                           
 26752                           ;incstack = 0
 26753                           ;ADC_SetupIO@pChannel stored from wreg
 26754  0164FE  0100               	movlb	0	; () banked
 26755  016500  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 26756                           
 26757                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 26758  016502  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 26759  016506  0E01               	movlw	1
 26760  016508  0100               	movlb	0	; () banked
 26761  01650A  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 26762  01650C  0100               	movlb	0	; () banked
 26763  01650E  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 26764  016510  D003               	goto	u10744
 26765  016512                     u10745:
 26766  016512  0100               	movlb	0	; () banked
 26767  016514  90D8               	bcf	status,0,c
 26768  016516  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 26769  016518                     u10744:
 26770  016518  0100               	movlb	0	; () banked
 26771  01651A  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 26772  01651C  D7FA               	goto	u10745
 26773  01651E  0100               	movlb	0	; () banked
 26774  016520  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 26775  016522  0AFF               	xorlw	255
 26776  016524  0100               	movlb	0	; () banked
 26777  016526  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 26778                           
 26779                           ;ADC.c: 153: ANCON0 &= MASK;
 26780  016528  0100               	movlb	0	; () banked
 26781  01652A  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 26782  01652C  16C1               	andwf	4033,f,c	;volatile
 26783                           
 26784                           ; BSR set to: 0
 26785  01652E  0012               	return		;funcret
 26786  016530                     __end_of_ADC_SetupIO:
 26787                           	opt stack 0
 26788                           tosu	equ	0xFFF
 26789                           tosh	equ	0xFFE
 26790                           tosl	equ	0xFFD
 26791                           pclath	equ	0xFFA
 26792                           tblptru	equ	0xFF8
 26793                           tblptrh	equ	0xFF7
 26794                           tblptrl	equ	0xFF6
 26795                           tablat	equ	0xFF5
 26796                           prodh	equ	0xFF4
 26797                           prodl	equ	0xFF3
 26798                           intcon	equ	0xFF2
 26799                           indf0	equ	0xFEF
 26800                           postinc0	equ	0xFEE
 26801                           fsr0h	equ	0xFEA
 26802                           fsr0l	equ	0xFE9
 26803                           wreg	equ	0xFE8
 26804                           indf1	equ	0xFE7
 26805                           postdec1	equ	0xFE5
 26806                           fsr1h	equ	0xFE2
 26807                           fsr1l	equ	0xFE1
 26808                           indf2	equ	0xFDF
 26809                           postinc2	equ	0xFDE
 26810                           postdec2	equ	0xFDD
 26811                           plusw2	equ	0xFDB
 26812                           fsr2h	equ	0xFDA
 26813                           fsr2l	equ	0xFD9
 26814                           status	equ	0xFD8
 26815                           
 26816 ;; *************** function _ADC_SetChannel *****************
 26817 ;; Defined at:
 26818 ;;		line 155 in file "Library/ADC.c"
 26819 ;; Parameters:    Size  Location     Type
 26820 ;;  pChannel        1    wreg     enum E6742
 26821 ;; Auto vars:     Size  Location     Type
 26822 ;;  pChannel        1    1[BANK0 ] enum E6742
 26823 ;; Return value:  Size  Location     Type
 26824 ;;                  1    wreg      void 
 26825 ;; Registers used:
 26826 ;;		wreg, status,2, status,0
 26827 ;; Tracked objects:
 26828 ;;		On entry : 0/0
 26829 ;;		On exit  : 0/0
 26830 ;;		Unchanged: 0/0
 26831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26836 ;;Total ram usage:        2 bytes
 26837 ;; Hardware stack levels used:    1
 26838 ;; Hardware stack levels required when called:    7
 26839 ;; This function calls:
 26840 ;;		Nothing
 26841 ;; This function is called by:
 26842 ;;		_ADC_Init
 26843 ;;		_ADC_Start
 26844 ;;		_ADC_ISR
 26845 ;;		_ADC_Sample
 26846 ;; This function uses a non-reentrant model
 26847 ;;
 26848                           
 26849                           	psect	text134
 26850  016806                     __ptext134:
 26851                           	opt stack 0
 26852  016806                     _ADC_SetChannel:
 26853                           	opt stack 20
 26854                           
 26855                           ; BSR set to: 0
 26856                           ;incstack = 0
 26857                           ;ADC_SetChannel@pChannel stored from wreg
 26858  016806  0100               	movlb	0	; () banked
 26859  016808  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 26860                           
 26861                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 26862  01680A  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 26863  01680E  0100               	movlb	0	; () banked
 26864  016810  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 26865  016812  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 26866  016814  50C2               	movf	4034,w,c	;volatile
 26867  016816  0100               	movlb	0	; () banked
 26868  016818  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 26869  01681A  0BC3               	andlw	-61
 26870  01681C  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 26871  01681E  6EC2               	movwf	4034,c	;volatile
 26872                           
 26873                           ; BSR set to: 0
 26874  016820  0012               	return		;funcret
 26875  016822                     __end_of_ADC_SetChannel:
 26876                           	opt stack 0
 26877                           tosu	equ	0xFFF
 26878                           tosh	equ	0xFFE
 26879                           tosl	equ	0xFFD
 26880                           pclath	equ	0xFFA
 26881                           tblptru	equ	0xFF8
 26882                           tblptrh	equ	0xFF7
 26883                           tblptrl	equ	0xFF6
 26884                           tablat	equ	0xFF5
 26885                           prodh	equ	0xFF4
 26886                           prodl	equ	0xFF3
 26887                           intcon	equ	0xFF2
 26888                           indf0	equ	0xFEF
 26889                           postinc0	equ	0xFEE
 26890                           fsr0h	equ	0xFEA
 26891                           fsr0l	equ	0xFE9
 26892                           wreg	equ	0xFE8
 26893                           indf1	equ	0xFE7
 26894                           postdec1	equ	0xFE5
 26895                           fsr1h	equ	0xFE2
 26896                           fsr1l	equ	0xFE1
 26897                           indf2	equ	0xFDF
 26898                           postinc2	equ	0xFDE
 26899                           postdec2	equ	0xFDD
 26900                           plusw2	equ	0xFDB
 26901                           fsr2h	equ	0xFDA
 26902                           fsr2l	equ	0xFD9
 26903                           status	equ	0xFD8
 26904                           
 26905 ;; *************** function _ADC_ConversionTime *****************
 26906 ;; Defined at:
 26907 ;;		line 199 in file "Library/ADC.c"
 26908 ;; Parameters:    Size  Location     Type
 26909 ;;  pCount          1    wreg     unsigned char 
 26910 ;; Auto vars:     Size  Location     Type
 26911 ;;  pCount          1    1[BANK0 ] unsigned char 
 26912 ;; Return value:  Size  Location     Type
 26913 ;;                  1    wreg      void 
 26914 ;; Registers used:
 26915 ;;		wreg, status,2, status,0
 26916 ;; Tracked objects:
 26917 ;;		On entry : 0/0
 26918 ;;		On exit  : 0/0
 26919 ;;		Unchanged: 0/0
 26920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26923 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26924 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26925 ;;Total ram usage:        2 bytes
 26926 ;; Hardware stack levels used:    1
 26927 ;; Hardware stack levels required when called:    7
 26928 ;; This function calls:
 26929 ;;		Nothing
 26930 ;; This function is called by:
 26931 ;;		_ADC_Init
 26932 ;; This function uses a non-reentrant model
 26933 ;;
 26934                           
 26935                           	psect	text135
 26936  01611E                     __ptext135:
 26937                           	opt stack 0
 26938  01611E                     _ADC_ConversionTime:
 26939                           	opt stack 20
 26940                           
 26941                           ; BSR set to: 0
 26942                           ;incstack = 0
 26943                           ;ADC_ConversionTime@pCount stored from wreg
 26944  01611E  0100               	movlb	0	; () banked
 26945  016120  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 26946                           
 26947                           ;ADC.c: 201: if (pCount == 10)
 26948  016122  0E0A               	movlw	10
 26949  016124  0100               	movlb	0	; () banked
 26950  016126  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 26951  016128  B4D8               	btfsc	status,2,c
 26952  01612A  D00A               	goto	l13181
 26953                           
 26954                           ; BSR set to: 0
 26955                           ;ADC.c: 203: else if (pCount == 14)
 26956                           
 26957                           ; BSR set to: 0
 26958                           
 26959                           ; BSR set to: 0
 26960                           ;ADC.c: 202: pCount -= 2;
 26961  01612C  0E0E               	movlw	14
 26962  01612E  0100               	movlb	0	; () banked
 26963  016130  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 26964  016132  B4D8               	btfsc	status,2,c
 26965  016134  D005               	goto	l13181
 26966                           
 26967                           ; BSR set to: 0
 26968                           ;ADC.c: 205: else if (pCount == 18)
 26969                           
 26970                           ; BSR set to: 0
 26971                           
 26972                           ; BSR set to: 0
 26973                           ;ADC.c: 204: pCount -= 2;
 26974  016136  0E12               	movlw	18
 26975  016138  0100               	movlb	0	; () banked
 26976  01613A  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 26977  01613C  A4D8               	btfss	status,2,c
 26978  01613E  D003               	goto	l1310
 26979  016140                     l13181:
 26980                           
 26981                           ; BSR set to: 0
 26982                           ;ADC.c: 206: pCount -= 2;
 26983  016140  0E02               	movlw	2
 26984  016142  0100               	movlb	0	; () banked
 26985  016144  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 26986  016146                     l1310:
 26987                           
 26988                           ; BSR set to: 0
 26989                           ;ADC.c: 208: pCount <<= 1;
 26990  016146  0100               	movlb	0	; () banked
 26991  016148  90D8               	bcf	status,0,c
 26992  01614A  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 26993                           
 26994                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 26995  01614C  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 26996  016150  0100               	movlb	0	; () banked
 26997  016152  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 26998  016154  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 26999  016156  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27000  016158  50C1               	movf	4033,w,c	;volatile
 27001  01615A  0100               	movlb	0	; () banked
 27002  01615C  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27003  01615E  0BC7               	andlw	-57
 27004  016160  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27005  016162  6EC1               	movwf	4033,c	;volatile
 27006                           
 27007                           ; BSR set to: 0
 27008  016164  0012               	return		;funcret
 27009  016166                     __end_of_ADC_ConversionTime:
 27010                           	opt stack 0
 27011                           tosu	equ	0xFFF
 27012                           tosh	equ	0xFFE
 27013                           tosl	equ	0xFFD
 27014                           pclath	equ	0xFFA
 27015                           tblptru	equ	0xFF8
 27016                           tblptrh	equ	0xFF7
 27017                           tblptrl	equ	0xFF6
 27018                           tablat	equ	0xFF5
 27019                           prodh	equ	0xFF4
 27020                           prodl	equ	0xFF3
 27021                           intcon	equ	0xFF2
 27022                           indf0	equ	0xFEF
 27023                           postinc0	equ	0xFEE
 27024                           fsr0h	equ	0xFEA
 27025                           fsr0l	equ	0xFE9
 27026                           wreg	equ	0xFE8
 27027                           indf1	equ	0xFE7
 27028                           postdec1	equ	0xFE5
 27029                           fsr1h	equ	0xFE2
 27030                           fsr1l	equ	0xFE1
 27031                           indf2	equ	0xFDF
 27032                           postinc2	equ	0xFDE
 27033                           postdec2	equ	0xFDD
 27034                           plusw2	equ	0xFDB
 27035                           fsr2h	equ	0xFDA
 27036                           fsr2l	equ	0xFD9
 27037                           status	equ	0xFD8
 27038                           
 27039 ;; *************** function _ADC_ClockDivision *****************
 27040 ;; Defined at:
 27041 ;;		line 159 in file "Library/ADC.c"
 27042 ;; Parameters:    Size  Location     Type
 27043 ;;  pDivide         1    wreg     unsigned char 
 27044 ;; Auto vars:     Size  Location     Type
 27045 ;;  pDivide         1    0[BANK0 ] unsigned char 
 27046 ;;  unfound         1    2[BANK0 ] unsigned char 
 27047 ;;  reg             1    1[BANK0 ] unsigned char 
 27048 ;; Return value:  Size  Location     Type
 27049 ;;                  1    wreg      void 
 27050 ;; Registers used:
 27051 ;;		wreg, status,2, status,0
 27052 ;; Tracked objects:
 27053 ;;		On entry : 0/0
 27054 ;;		On exit  : 0/0
 27055 ;;		Unchanged: 0/0
 27056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27058 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27060 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27061 ;;Total ram usage:        3 bytes
 27062 ;; Hardware stack levels used:    1
 27063 ;; Hardware stack levels required when called:    7
 27064 ;; This function calls:
 27065 ;;		Nothing
 27066 ;; This function is called by:
 27067 ;;		_ADC_Init
 27068 ;; This function uses a non-reentrant model
 27069 ;;
 27070                           
 27071                           	psect	text136
 27072  0153E2                     __ptext136:
 27073                           	opt stack 0
 27074  0153E2                     _ADC_ClockDivision:
 27075                           	opt stack 20
 27076                           
 27077                           ; BSR set to: 0
 27078                           ;incstack = 0
 27079                           ;ADC_ClockDivision@pDivide stored from wreg
 27080  0153E2  0100               	movlb	0	; () banked
 27081  0153E4  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27082                           
 27083                           ;ADC.c: 161: UINT8 reg = 0;
 27084  0153E6  0E00               	movlw	0
 27085  0153E8  0100               	movlb	0	; () banked
 27086  0153EA  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27087                           
 27088                           ;ADC.c: 162: bool unfound = 1;
 27089  0153EC  0E01               	movlw	1
 27090  0153EE  D002               	goto	L16
 27091  0153F0                     l13185:
 27092                           
 27093                           ; BSR set to: 0
 27094                           ;ADC.c: 167: reg = 0;
 27095  0153F0  0E00               	movlw	0
 27096  0153F2  D00C               	goto	L21
 27097  0153F4                     L16:
 27098  0153F4  0100               	movlb	0	; () banked
 27099  0153F6  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 27100                           
 27101                           ;ADC.c: 169: break;
 27102  0153F8  D02D               	goto	l13205
 27103  0153FA                     l13187:
 27104                           
 27105                           ; BSR set to: 0
 27106                           ;ADC.c: 171: reg = 0b100;
 27107  0153FA  0E04               	movlw	4
 27108  0153FC  D007               	goto	L21
 27109  0153FE                     l13189:
 27110                           
 27111                           ; BSR set to: 0
 27112                           ;ADC.c: 175: reg = 0b001;
 27113  0153FE  0E01               	movlw	1
 27114  015400  D005               	goto	L21
 27115  015402                     l13191:
 27116                           
 27117                           ; BSR set to: 0
 27118                           ;ADC.c: 179: reg = 0b101;
 27119  015402  0E05               	movlw	5
 27120  015404  D003               	goto	L21
 27121  015406                     l13193:
 27122                           
 27123                           ; BSR set to: 0
 27124                           ;ADC.c: 183: reg = 0b010;
 27125  015406  0E02               	movlw	2
 27126  015408  D001               	goto	L21
 27127  01540A                     l13195:
 27128                           
 27129                           ; BSR set to: 0
 27130                           ;ADC.c: 187: reg = 0b110;
 27131  01540A  0E06               	movlw	6
 27132  01540C                     L21:
 27133  01540C  0100               	movlb	0	; () banked
 27134  01540E  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27135                           
 27136                           ;ADC.c: 188: unfound = 0;
 27137  015410  0E00               	movlw	0
 27138  015412  D7F0               	goto	L16
 27139  015414                     l13197:
 27140                           
 27141                           ; BSR set to: 0
 27142                           ;ADC.c: 191: if (pDivide > 2)
 27143  015414  0E02               	movlw	2
 27144  015416  0100               	movlb	0	; () banked
 27145  015418  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 27146  01541A  D003               	goto	l13201
 27147                           
 27148                           ; BSR set to: 0
 27149                           ;ADC.c: 192: pDivide --;
 27150  01541C  0100               	movlb	0	; () banked
 27151  01541E  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 27152  015420  D019               	goto	l13205
 27153  015422                     l13201:
 27154                           
 27155                           ; BSR set to: 0
 27156                           ;ADC.c: 193: else
 27157                           ;ADC.c: 194: pDivide = 2;
 27158  015422  0E02               	movlw	2
 27159  015424  0100               	movlb	0	; () banked
 27160  015426  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27161                           
 27162                           ; BSR set to: 0
 27163                           ;ADC.c: 195: };
 27164  015428  D015               	goto	l13205
 27165  01542A                     l13203:
 27166                           
 27167                           ; BSR set to: 0
 27168  01542A  0100               	movlb	0	; () banked
 27169  01542C  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 27170                           
 27171                           ; Switch size 1, requested type "space"
 27172                           ; Number of cases is 6, Range of values is 2 to 64
 27173                           ; switch strategies available:
 27174                           ; Name         Instructions Cycles
 27175                           ; simple_byte           19    10 (average)
 27176                           ;	Chosen strategy is simple_byte
 27177  01542E  0A02               	xorlw	2	; case 2
 27178  015430  B4D8               	btfsc	status,2,c
 27179  015432  D7DE               	goto	l13185
 27180  015434  0A06               	xorlw	6	; case 4
 27181  015436  B4D8               	btfsc	status,2,c
 27182  015438  D7E0               	goto	l13187
 27183  01543A  0A0C               	xorlw	12	; case 8
 27184  01543C  B4D8               	btfsc	status,2,c
 27185  01543E  D7DF               	goto	l13189
 27186  015440  0A18               	xorlw	24	; case 16
 27187  015442  B4D8               	btfsc	status,2,c
 27188  015444  D7DE               	goto	l13191
 27189  015446  0A30               	xorlw	48	; case 32
 27190  015448  B4D8               	btfsc	status,2,c
 27191  01544A  D7DD               	goto	l13193
 27192  01544C  0A60               	xorlw	96	; case 64
 27193  01544E  B4D8               	btfsc	status,2,c
 27194  015450  D7DC               	goto	l13195
 27195  015452  D7E0               	goto	l13197
 27196  015454                     l13205:
 27197                           
 27198                           ; BSR set to: 0
 27199  015454  0100               	movlb	0	; () banked
 27200  015456  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 27201  015458  0100               	movlb	0	; () banked
 27202  01545A  A4D8               	btfss	status,2,c
 27203  01545C  D7E6               	goto	l13203
 27204                           
 27205                           ; BSR set to: 0
 27206                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 27207                           
 27208                           ; BSR set to: 0
 27209  01545E  50C1               	movf	4033,w,c	;volatile
 27210  015460  0100               	movlb	0	; () banked
 27211  015462  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27212  015464  0BF8               	andlw	-8
 27213  015466  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27214  015468  6EC1               	movwf	4033,c	;volatile
 27215                           
 27216                           ; BSR set to: 0
 27217  01546A  0012               	return		;funcret
 27218  01546C                     __end_of_ADC_ClockDivision:
 27219                           	opt stack 0
 27220                           tosu	equ	0xFFF
 27221                           tosh	equ	0xFFE
 27222                           tosl	equ	0xFFD
 27223                           pclath	equ	0xFFA
 27224                           tblptru	equ	0xFF8
 27225                           tblptrh	equ	0xFF7
 27226                           tblptrl	equ	0xFF6
 27227                           tablat	equ	0xFF5
 27228                           prodh	equ	0xFF4
 27229                           prodl	equ	0xFF3
 27230                           intcon	equ	0xFF2
 27231                           indf0	equ	0xFEF
 27232                           postinc0	equ	0xFEE
 27233                           fsr0h	equ	0xFEA
 27234                           fsr0l	equ	0xFE9
 27235                           wreg	equ	0xFE8
 27236                           indf1	equ	0xFE7
 27237                           postdec1	equ	0xFE5
 27238                           fsr1h	equ	0xFE2
 27239                           fsr1l	equ	0xFE1
 27240                           indf2	equ	0xFDF
 27241                           postinc2	equ	0xFDE
 27242                           postdec2	equ	0xFDD
 27243                           plusw2	equ	0xFDB
 27244                           fsr2h	equ	0xFDA
 27245                           fsr2l	equ	0xFD9
 27246                           status	equ	0xFD8
 27247                           
 27248 ;; *************** function _ADC_Calibrate *****************
 27249 ;; Defined at:
 27250 ;;		line 63 in file "Library/ADC.c"
 27251 ;; Parameters:    Size  Location     Type
 27252 ;;		None
 27253 ;; Auto vars:     Size  Location     Type
 27254 ;;		None
 27255 ;; Return value:  Size  Location     Type
 27256 ;;                  1    wreg      void 
 27257 ;; Registers used:
 27258 ;;		cstack
 27259 ;; Tracked objects:
 27260 ;;		On entry : 0/0
 27261 ;;		On exit  : 0/0
 27262 ;;		Unchanged: 0/0
 27263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27268 ;;Total ram usage:        0 bytes
 27269 ;; Hardware stack levels used:    1
 27270 ;; Hardware stack levels required when called:    8
 27271 ;; This function calls:
 27272 ;;		_ADC_Off
 27273 ;;		_ADC_On
 27274 ;; This function is called by:
 27275 ;;		_ADC_Init
 27276 ;; This function uses a non-reentrant model
 27277 ;;
 27278                           
 27279                           	psect	text137
 27280  016914                     __ptext137:
 27281                           	opt stack 0
 27282  016914                     _ADC_Calibrate:
 27283                           	opt stack 19
 27284                           
 27285                           ;ADC.c: 65: ADC_On();
 27286                           
 27287                           ; BSR set to: 0
 27288                           ;incstack = 0
 27289  016914  EC02  F0B5         	call	_ADC_On	;wreg free
 27290                           
 27291                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 27292  016918  8CC1               	bsf	4033,6,c	;volatile
 27293                           
 27294                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 27295  01691A  82C2               	bsf	4034,1,c	;volatile
 27296  01691C                     l1253:
 27297  01691C  B2C2               	btfsc	4034,1,c	;volatile
 27298  01691E  D7FE               	goto	l1253
 27299                           
 27300                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 27301  016920  9CC1               	bcf	4033,6,c	;volatile
 27302                           
 27303                           ;ADC.c: 73: ADC_Off();
 27304  016922  ECF2  F0B4         	call	_ADC_Off	;wreg free
 27305  016926  0012               	return		;funcret
 27306  016928                     __end_of_ADC_Calibrate:
 27307                           	opt stack 0
 27308                           tosu	equ	0xFFF
 27309                           tosh	equ	0xFFE
 27310                           tosl	equ	0xFFD
 27311                           pclath	equ	0xFFA
 27312                           tblptru	equ	0xFF8
 27313                           tblptrh	equ	0xFF7
 27314                           tblptrl	equ	0xFF6
 27315                           tablat	equ	0xFF5
 27316                           prodh	equ	0xFF4
 27317                           prodl	equ	0xFF3
 27318                           intcon	equ	0xFF2
 27319                           indf0	equ	0xFEF
 27320                           postinc0	equ	0xFEE
 27321                           fsr0h	equ	0xFEA
 27322                           fsr0l	equ	0xFE9
 27323                           wreg	equ	0xFE8
 27324                           indf1	equ	0xFE7
 27325                           postdec1	equ	0xFE5
 27326                           fsr1h	equ	0xFE2
 27327                           fsr1l	equ	0xFE1
 27328                           indf2	equ	0xFDF
 27329                           postinc2	equ	0xFDE
 27330                           postdec2	equ	0xFDD
 27331                           plusw2	equ	0xFDB
 27332                           fsr2h	equ	0xFDA
 27333                           fsr2l	equ	0xFD9
 27334                           status	equ	0xFD8
 27335                           
 27336 ;; *************** function _ADC_On *****************
 27337 ;; Defined at:
 27338 ;;		line 85 in file "Library/ADC.c"
 27339 ;; Parameters:    Size  Location     Type
 27340 ;;		None
 27341 ;; Auto vars:     Size  Location     Type
 27342 ;;		None
 27343 ;; Return value:  Size  Location     Type
 27344 ;;                  1    wreg      void 
 27345 ;; Registers used:
 27346 ;;		None
 27347 ;; Tracked objects:
 27348 ;;		On entry : 0/0
 27349 ;;		On exit  : 0/0
 27350 ;;		Unchanged: 0/0
 27351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27356 ;;Total ram usage:        0 bytes
 27357 ;; Hardware stack levels used:    1
 27358 ;; Hardware stack levels required when called:    7
 27359 ;; This function calls:
 27360 ;;		Nothing
 27361 ;; This function is called by:
 27362 ;;		_ADC_Calibrate
 27363 ;;		_ADC_Start
 27364 ;;		_ADC_ISR
 27365 ;;		_ADC_Sample
 27366 ;; This function uses a non-reentrant model
 27367 ;;
 27368                           
 27369                           	psect	text138
 27370  016A04                     __ptext138:
 27371                           	opt stack 0
 27372  016A04                     _ADC_On:
 27373                           	opt stack 20
 27374                           
 27375                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 27376                           
 27377                           ;incstack = 0
 27378  016A04  80C2               	bsf	4034,0,c	;volatile
 27379                           
 27380                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 27381  016A06  9C9E               	bcf	3998,6,c	;volatile
 27382  016A08  0012               	return		;funcret
 27383  016A0A                     __end_of_ADC_On:
 27384                           	opt stack 0
 27385                           tosu	equ	0xFFF
 27386                           tosh	equ	0xFFE
 27387                           tosl	equ	0xFFD
 27388                           pclath	equ	0xFFA
 27389                           tblptru	equ	0xFF8
 27390                           tblptrh	equ	0xFF7
 27391                           tblptrl	equ	0xFF6
 27392                           tablat	equ	0xFF5
 27393                           prodh	equ	0xFF4
 27394                           prodl	equ	0xFF3
 27395                           intcon	equ	0xFF2
 27396                           indf0	equ	0xFEF
 27397                           postinc0	equ	0xFEE
 27398                           fsr0h	equ	0xFEA
 27399                           fsr0l	equ	0xFE9
 27400                           wreg	equ	0xFE8
 27401                           indf1	equ	0xFE7
 27402                           postdec1	equ	0xFE5
 27403                           fsr1h	equ	0xFE2
 27404                           fsr1l	equ	0xFE1
 27405                           indf2	equ	0xFDF
 27406                           postinc2	equ	0xFDE
 27407                           postdec2	equ	0xFDD
 27408                           plusw2	equ	0xFDB
 27409                           fsr2h	equ	0xFDA
 27410                           fsr2l	equ	0xFD9
 27411                           status	equ	0xFD8
 27412                           
 27413 ;; *************** function _ADC_Off *****************
 27414 ;; Defined at:
 27415 ;;		line 94 in file "Library/ADC.c"
 27416 ;; Parameters:    Size  Location     Type
 27417 ;;		None
 27418 ;; Auto vars:     Size  Location     Type
 27419 ;;		None
 27420 ;; Return value:  Size  Location     Type
 27421 ;;                  1    wreg      void 
 27422 ;; Registers used:
 27423 ;;		None
 27424 ;; Tracked objects:
 27425 ;;		On entry : 0/0
 27426 ;;		On exit  : 0/0
 27427 ;;		Unchanged: 0/0
 27428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27433 ;;Total ram usage:        0 bytes
 27434 ;; Hardware stack levels used:    1
 27435 ;; Hardware stack levels required when called:    7
 27436 ;; This function calls:
 27437 ;;		Nothing
 27438 ;; This function is called by:
 27439 ;;		_ADC_Calibrate
 27440 ;;		_ADC_Start
 27441 ;;		_ADC_ISR
 27442 ;;		_ADC_Sample
 27443 ;; This function uses a non-reentrant model
 27444 ;;
 27445                           
 27446                           	psect	text139
 27447  0169E4                     __ptext139:
 27448                           	opt stack 0
 27449  0169E4                     _ADC_Off:
 27450                           	opt stack 20
 27451                           
 27452                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 27453                           
 27454                           ;incstack = 0
 27455  0169E4  90C2               	bcf	4034,0,c	;volatile
 27456                           
 27457                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 27458  0169E6  9C9E               	bcf	3998,6,c	;volatile
 27459                           
 27460                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 27461  0169E8  9C9D               	bcf	3997,6,c	;volatile
 27462  0169EA  0012               	return		;funcret
 27463  0169EC                     __end_of_ADC_Off:
 27464                           	opt stack 0
 27465                           tosu	equ	0xFFF
 27466                           tosh	equ	0xFFE
 27467                           tosl	equ	0xFFD
 27468                           pclath	equ	0xFFA
 27469                           tblptru	equ	0xFF8
 27470                           tblptrh	equ	0xFF7
 27471                           tblptrl	equ	0xFF6
 27472                           tablat	equ	0xFF5
 27473                           prodh	equ	0xFF4
 27474                           prodl	equ	0xFF3
 27475                           intcon	equ	0xFF2
 27476                           indf0	equ	0xFEF
 27477                           postinc0	equ	0xFEE
 27478                           fsr0h	equ	0xFEA
 27479                           fsr0l	equ	0xFE9
 27480                           wreg	equ	0xFE8
 27481                           indf1	equ	0xFE7
 27482                           postdec1	equ	0xFE5
 27483                           fsr1h	equ	0xFE2
 27484                           fsr1l	equ	0xFE1
 27485                           indf2	equ	0xFDF
 27486                           postinc2	equ	0xFDE
 27487                           postdec2	equ	0xFDD
 27488                           plusw2	equ	0xFDB
 27489                           fsr2h	equ	0xFDA
 27490                           fsr2l	equ	0xFD9
 27491                           status	equ	0xFD8
 27492                           
 27493 ;; *************** function _Console_Init *****************
 27494 ;; Defined at:
 27495 ;;		line 157 in file "Library/Console.c"
 27496 ;; Parameters:    Size  Location     Type
 27497 ;;		None
 27498 ;; Auto vars:     Size  Location     Type
 27499 ;;  y               1    3[BANK0 ] unsigned char 
 27500 ;;  x               1    2[BANK0 ] unsigned char 
 27501 ;; Return value:  Size  Location     Type
 27502 ;;                  1    wreg      void 
 27503 ;; Registers used:
 27504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27505 ;; Tracked objects:
 27506 ;;		On entry : 0/0
 27507 ;;		On exit  : 0/0
 27508 ;;		Unchanged: 0/0
 27509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27513 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27514 ;;Total ram usage:        4 bytes
 27515 ;; Hardware stack levels used:    1
 27516 ;; Hardware stack levels required when called:    7
 27517 ;; This function calls:
 27518 ;;		Nothing
 27519 ;; This function is called by:
 27520 ;;		_init
 27521 ;; This function uses a non-reentrant model
 27522 ;;
 27523                           
 27524                           	psect	text140
 27525  01546C                     __ptext140:
 27526                           	opt stack 0
 27527  01546C                     _Console_Init:
 27528                           	opt stack 22
 27529                           
 27530                           ;Console.c: 160: lBufferX = 0;
 27531                           
 27532                           ;incstack = 0
 27533  01546C  0E00               	movlw	0
 27534  01546E  6E37               	movwf	_lBufferX,c
 27535                           
 27536                           ;Console.c: 161: lBufferY = 0;
 27537  015470  0E00               	movlw	0
 27538  015472  6E36               	movwf	_lBufferY,c
 27539                           
 27540                           ;Console.c: 163: UINT8 x, y;
 27541                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 27542  015474  0E00               	movlw	0
 27543  015476  0100               	movlb	0	; () banked
 27544  015478  6F62               	movwf	Console_Init@x& (0+255),b
 27545  01547A                     l14013:
 27546                           
 27547                           ; BSR set to: 0
 27548  01547A  0E13               	movlw	19
 27549  01547C  0100               	movlb	0	; () banked
 27550  01547E  6562               	cpfsgt	Console_Init@x& (0+255),b
 27551  015480  D001               	goto	l14017
 27552  015482  0012               	return	
 27553  015484                     l14017:
 27554                           
 27555                           ; BSR set to: 0
 27556                           ;Console.c: 165: {
 27557                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 27558  015484  0E00               	movlw	0
 27559  015486  0100               	movlb	0	; () banked
 27560  015488  6F63               	movwf	Console_Init@y& (0+255),b
 27561  01548A                     l14019:
 27562                           
 27563                           ; BSR set to: 0
 27564  01548A  0E0E               	movlw	14
 27565  01548C  0100               	movlb	0	; () banked
 27566  01548E  6563               	cpfsgt	Console_Init@y& (0+255),b
 27567  015490  D001               	goto	l14023
 27568  015492  D02C               	goto	l14029
 27569  015494                     l14023:
 27570                           
 27571                           ; BSR set to: 0
 27572                           ;Console.c: 167: {
 27573                           ;Console.c: 168: lBuffer[y][x] = '\0';
 27574  015494  0100               	movlb	0	; () banked
 27575  015496  5163               	movf	Console_Init@y& (0+255),w,b
 27576  015498  0D14               	mullw	20
 27577  01549A  0E6E               	movlw	low _lBuffer
 27578  01549C  0100               	movlb	0	; () banked
 27579  01549E  6F60               	movwf	??_Console_Init& (0+255),b
 27580  0154A0  0E02               	movlw	high _lBuffer
 27581  0154A2  0100               	movlb	0	; () banked
 27582  0154A4  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 27583  0154A6  50F3               	movf	prodl,w,c
 27584  0154A8  0100               	movlb	0	; () banked
 27585  0154AA  2760               	addwf	??_Console_Init& (0+255),f,b
 27586  0154AC  50F4               	movf	prodh,w,c
 27587  0154AE  0100               	movlb	0	; () banked
 27588  0154B0  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 27589  0154B2  0100               	movlb	0	; () banked
 27590  0154B4  5162               	movf	Console_Init@x& (0+255),w,b
 27591  0154B6  0D01               	mullw	1
 27592  0154B8  50F3               	movf	prodl,w,c
 27593  0154BA  0100               	movlb	0	; () banked
 27594  0154BC  2560               	addwf	??_Console_Init& (0+255),w,b
 27595  0154BE  6ED9               	movwf	fsr2l,c
 27596  0154C0  50F4               	movf	prodh,w,c
 27597  0154C2  0100               	movlb	0	; () banked
 27598  0154C4  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 27599  0154C6  6EDA               	movwf	fsr2h,c
 27600  0154C8  0E00               	movlw	0
 27601  0154CA  6EDF               	movwf	indf2,c
 27602                           
 27603                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 27604  0154CC  0100               	movlb	0	; () banked
 27605  0154CE  5163               	movf	Console_Init@y& (0+255),w,b
 27606  0154D0  0D02               	mullw	2
 27607  0154D2  0E00               	movlw	low _lCBuffer
 27608  0154D4  24F3               	addwf	prodl,w,c
 27609  0154D6  6ED9               	movwf	fsr2l,c
 27610  0154D8  0E02               	movlw	high _lCBuffer
 27611  0154DA  20F4               	addwfc	prodh,w,c
 27612  0154DC  6EDA               	movwf	fsr2h,c
 27613  0154DE  0EFF               	movlw	255
 27614  0154E0  6EDE               	movwf	postinc2,c
 27615  0154E2  0EFF               	movlw	255
 27616  0154E4  6EDD               	movwf	postdec2,c
 27617                           
 27618                           ; BSR set to: 0
 27619  0154E6  0100               	movlb	0	; () banked
 27620  0154E8  2B63               	incf	Console_Init@y& (0+255),f,b
 27621  0154EA  D7CF               	goto	l14019
 27622  0154EC                     l14029:
 27623                           
 27624                           ; BSR set to: 0
 27625  0154EC  0100               	movlb	0	; () banked
 27626  0154EE  2B62               	incf	Console_Init@x& (0+255),f,b
 27627  0154F0  D7C4               	goto	l14013
 27628  0154F2                     __end_of_Console_Init:
 27629                           	opt stack 0
 27630                           tosu	equ	0xFFF
 27631                           tosh	equ	0xFFE
 27632                           tosl	equ	0xFFD
 27633                           pclath	equ	0xFFA
 27634                           tblptru	equ	0xFF8
 27635                           tblptrh	equ	0xFF7
 27636                           tblptrl	equ	0xFF6
 27637                           tablat	equ	0xFF5
 27638                           prodh	equ	0xFF4
 27639                           prodl	equ	0xFF3
 27640                           intcon	equ	0xFF2
 27641                           indf0	equ	0xFEF
 27642                           postinc0	equ	0xFEE
 27643                           fsr0h	equ	0xFEA
 27644                           fsr0l	equ	0xFE9
 27645                           wreg	equ	0xFE8
 27646                           indf1	equ	0xFE7
 27647                           postdec1	equ	0xFE5
 27648                           fsr1h	equ	0xFE2
 27649                           fsr1l	equ	0xFE1
 27650                           indf2	equ	0xFDF
 27651                           postinc2	equ	0xFDE
 27652                           postdec2	equ	0xFDD
 27653                           plusw2	equ	0xFDB
 27654                           fsr2h	equ	0xFDA
 27655                           fsr2l	equ	0xFD9
 27656                           status	equ	0xFD8
 27657                           
 27658 ;; *************** function _Motor_Speed *****************
 27659 ;; Defined at:
 27660 ;;		line 117 in file "Library/Motor.c"
 27661 ;; Parameters:    Size  Location     Type
 27662 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 27663 ;;		 -> Stepper(6), 
 27664 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 27665 ;; Auto vars:     Size  Location     Type
 27666 ;;		None
 27667 ;; Return value:  Size  Location     Type
 27668 ;;                  1    wreg      unsigned char 
 27669 ;; Registers used:
 27670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27671 ;; Tracked objects:
 27672 ;;		On entry : 0/0
 27673 ;;		On exit  : 0/0
 27674 ;;		Unchanged: 0/0
 27675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27676 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27679 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27680 ;;Total ram usage:        4 bytes
 27681 ;; Hardware stack levels used:    1
 27682 ;; Hardware stack levels required when called:    9
 27683 ;; This function calls:
 27684 ;;		_Timer0_Init
 27685 ;; This function is called by:
 27686 ;;		_main
 27687 ;; This function uses a non-reentrant model
 27688 ;;
 27689                           
 27690                           	psect	text141
 27691  016676                     __ptext141:
 27692                           	opt stack 0
 27693  016676                     _Motor_Speed:
 27694                           	opt stack 21
 27695                           
 27696                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 27697                           
 27698                           ; BSR set to: 0
 27699                           ;incstack = 0
 27700  016676  0100               	movlb	0	; () banked
 27701  016678  EE20 F002          	lfsr	2,2
 27702  01667C  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
 27703  01667E  26D9               	addwf	fsr2l,f,c
 27704  016680  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 27705  016682  22DA               	addwfc	fsr2h,f,c
 27706  016684  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 27707  016688  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 27708                           
 27709                           ; BSR set to: 0
 27710                           ;Motor.c: 120: Timer0_Init(pFrequency);
 27711  01668C  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 27712  016690  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 27713  016694  0100               	movlb	0	; () banked
 27714  016696  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 27715  016698  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 27716  01669A  EC56  F09B         	call	_Timer0_Init	;wreg free
 27717  01669E  0012               	return	
 27718  0166A0                     __end_of_Motor_Speed:
 27719                           	opt stack 0
 27720                           tosu	equ	0xFFF
 27721                           tosh	equ	0xFFE
 27722                           tosl	equ	0xFFD
 27723                           pclath	equ	0xFFA
 27724                           tblptru	equ	0xFF8
 27725                           tblptrh	equ	0xFF7
 27726                           tblptrl	equ	0xFF6
 27727                           tablat	equ	0xFF5
 27728                           prodh	equ	0xFF4
 27729                           prodl	equ	0xFF3
 27730                           intcon	equ	0xFF2
 27731                           indf0	equ	0xFEF
 27732                           postinc0	equ	0xFEE
 27733                           fsr0h	equ	0xFEA
 27734                           fsr0l	equ	0xFE9
 27735                           wreg	equ	0xFE8
 27736                           indf1	equ	0xFE7
 27737                           postdec1	equ	0xFE5
 27738                           fsr1h	equ	0xFE2
 27739                           fsr1l	equ	0xFE1
 27740                           indf2	equ	0xFDF
 27741                           postinc2	equ	0xFDE
 27742                           postdec2	equ	0xFDD
 27743                           plusw2	equ	0xFDB
 27744                           fsr2h	equ	0xFDA
 27745                           fsr2l	equ	0xFD9
 27746                           status	equ	0xFD8
 27747                           
 27748 ;; *************** function _Timer0_Init *****************
 27749 ;; Defined at:
 27750 ;;		line 25 in file "Library/Timer0.c"
 27751 ;; Parameters:    Size  Location     Type
 27752 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 27753 ;; Auto vars:     Size  Location     Type
 27754 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 27755 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 27756 ;; Return value:  Size  Location     Type
 27757 ;;                  1    wreg      void 
 27758 ;; Registers used:
 27759 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27760 ;; Tracked objects:
 27761 ;;		On entry : 0/0
 27762 ;;		On exit  : 0/0
 27763 ;;		Unchanged: 0/0
 27764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27765 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27766 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27768 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27769 ;;Total ram usage:       14 bytes
 27770 ;; Hardware stack levels used:    1
 27771 ;; Hardware stack levels required when called:    8
 27772 ;; This function calls:
 27773 ;;		_Timer0_Clear
 27774 ;;		___lldiv
 27775 ;; This function is called by:
 27776 ;;		_Motor_Init
 27777 ;;		_Motor_Speed
 27778 ;; This function uses a non-reentrant model
 27779 ;;
 27780                           
 27781                           	psect	text142
 27782  0136AC                     __ptext142:
 27783                           	opt stack 0
 27784  0136AC                     _Timer0_Init:
 27785                           	opt stack 20
 27786                           
 27787                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 27788                           
 27789                           ;incstack = 0
 27790  0136AC  0E80               	movlw	128
 27791  0136AE  0100               	movlb	0	; () banked
 27792  0136B0  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 27793  0136B2  0E8D               	movlw	141
 27794  0136B4  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 27795  0136B6  0E5B               	movlw	91
 27796  0136B8  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 27797  0136BA  0E00               	movlw	0
 27798  0136BC  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 27799                           
 27800                           ; BSR set to: 0
 27801                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 27802                           ;Timer0.c: 31: static UINT8 PRE = 0;
 27803                           ;Timer0.c: 32: static UINT32 DIV = 0;
 27804                           ;Timer0.c: 34: UINT32 DIVIDE;
 27805                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 27806  0136BE  9ED5               	bcf	4053,7,c	;volatile
 27807                           
 27808                           ; BSR set to: 0
 27809                           ;Timer0.c: 38: if (pFrequency == 0)
 27810  0136C0  0100               	movlb	0	; () banked
 27811  0136C2  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 27812  0136C4  0100               	movlb	0	; () banked
 27813  0136C6  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 27814  0136C8  0100               	movlb	0	; () banked
 27815  0136CA  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 27816  0136CC  0100               	movlb	0	; () banked
 27817  0136CE  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 27818  0136D0  B4D8               	btfsc	status,2,c
 27819  0136D2  0012               	return	
 27820                           
 27821                           ; BSR set to: 0
 27822                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 27823                           
 27824                           ; BSR set to: 0
 27825                           ;Timer0.c: 39: return;
 27826  0136D4  96D5               	bcf	4053,3,c	;volatile
 27827                           
 27828                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 27829  0136D6  9CD5               	bcf	4053,6,c	;volatile
 27830                           
 27831                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 27832  0136D8  9AD5               	bcf	4053,5,c	;volatile
 27833                           
 27834                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 27835  0136DA  98D5               	bcf	4053,4,c	;volatile
 27836                           
 27837                           ; BSR set to: 0
 27838                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 27839  0136DC  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 27840  0136E0  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 27841  0136E4  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 27842  0136E8  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 27843  0136EC  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 27844  0136F0  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 27845  0136F4  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 27846  0136F8  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 27847  0136FC  ECC2  F0A3         	call	___lldiv	;wreg free
 27848  013700  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 27849  013704  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 27850  013708  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 27851  01370C  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 27852                           
 27853                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 27854  013710  D009               	goto	l13861
 27855  013712                     l13851:
 27856                           
 27857                           ;Timer0.c: 50: {
 27858                           ;Timer0.c: 51: INDEX ++;
 27859  013712  2A31               	incf	_INDEX,f,c
 27860                           
 27861                           ;Timer0.c: 52: if (INDEX >= 3)
 27862  013714  0E02               	movlw	2
 27863  013716  6431               	cpfsgt	_INDEX,c
 27864  013718  D001               	goto	l13857
 27865  01371A  D02D               	goto	l13863
 27866  01371C                     l13857:
 27867                           
 27868                           ;Timer0.c: 56: if (INDEX >= 8)
 27869  01371C  0E07               	movlw	7
 27870  01371E  6431               	cpfsgt	_INDEX,c
 27871  013720  D001               	goto	l13861
 27872  013722  0012               	return	
 27873  013724                     l13861:
 27874  013724  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 27875  013728  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 27876  01372C  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 27877  013730  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 27878  013734  5031               	movf	_INDEX,w,c
 27879  013736  0D02               	mullw	2
 27880  013738  0E09               	movlw	low Timer0_Init@PRESCALE
 27881  01373A  24F3               	addwf	prodl,w,c
 27882  01373C  6EF6               	movwf	tblptrl,c
 27883  01373E  0EFD               	movlw	high Timer0_Init@PRESCALE
 27884  013740  20F4               	addwfc	prodh,w,c
 27885  013742  6EF7               	movwf	tblptrh,c
 27886  013744                     	if	1	;There are 3 active tblptr bytes
 27887  013744  6AF8               	clrf	tblptru,c
 27888  013746  0E00               	movlw	low (__mediumconst shr (0+16))
 27889  013748  22F8               	addwfc	tblptru,f,c
 27890  01374A                     	endif
 27891  01374A  0009               	tblrd		*+
 27892  01374C  CFF5 F071          	movff	tablat,??_Timer0_Init
 27893  013750  0009               	tblrd		*+
 27894  013752  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 27895  013756  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 27896  01375A  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 27897  01375E  0100               	movlb	0	; () banked
 27898  013760  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 27899  013762  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 27900  013764  ECC2  F0A3         	call	___lldiv	;wreg free
 27901  013768  0100               	movlb	0	; () banked
 27902  01376A  5163               	movf	(?___lldiv+3)& (0+255),w,b
 27903  01376C  E1D2               	bnz	l13851
 27904  01376E  0100               	movlb	0	; () banked
 27905  013770  0562               	decf	(?___lldiv+2)& (0+255),w,b
 27906  013772  B0D8               	btfsc	status,0,c
 27907  013774  D7CE               	goto	l13851
 27908  013776                     l13863:
 27909                           
 27910                           ;Timer0.c: 58: }
 27911                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 27912  013776  5031               	movf	_INDEX,w,c
 27913  013778  0D02               	mullw	2
 27914  01377A  0E09               	movlw	low Timer0_Init@PRESCALE
 27915  01377C  24F3               	addwf	prodl,w,c
 27916  01377E  6EF6               	movwf	tblptrl,c
 27917  013780  0EFD               	movlw	high Timer0_Init@PRESCALE
 27918  013782  20F4               	addwfc	prodh,w,c
 27919  013784  6EF7               	movwf	tblptrh,c
 27920  013786                     	if	1	;There are 3 active tblptr bytes
 27921  013786  6AF8               	clrf	tblptru,c
 27922  013788  0E00               	movlw	low (__mediumconst shr (0+16))
 27923  01378A  22F8               	addwfc	tblptru,f,c
 27924  01378C                     	endif
 27925  01378C  0008               	tblrd		*
 27926  01378E  CFF5 F030          	movff	tablat,Timer0_Init@PRE
 27927                           
 27928                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 27929  013792  0EFF               	movlw	255
 27930  013794  0100               	movlb	0	; () banked
 27931  013796  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 27932  013798  0101               	movlb	1	; () banked
 27933  01379A  6F04               	movwf	Timer0_Init@DIV& (0+255),b
 27934  01379C  0EFF               	movlw	255
 27935  01379E  0100               	movlb	0	; () banked
 27936  0137A0  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 27937  0137A2  0101               	movlb	1	; () banked
 27938  0137A4  6F05               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 27939  0137A6  0EFF               	movlw	255
 27940  0137A8  0100               	movlb	0	; () banked
 27941  0137AA  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 27942  0137AC  0101               	movlb	1	; () banked
 27943  0137AE  6F06               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 27944  0137B0  0EFF               	movlw	255
 27945  0137B2  0100               	movlb	0	; () banked
 27946  0137B4  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 27947  0137B6  0101               	movlb	1	; () banked
 27948  0137B8  6F07               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 27949                           
 27950                           ; BSR set to: 1
 27951                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 27952  0137BA  C104  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 27953  0137BE  C105  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 27954  0137C2  C106  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 27955  0137C6  C107  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 27956  0137CA  5030               	movf	Timer0_Init@PRE,w,c
 27957  0137CC  0100               	movlb	0	; () banked
 27958  0137CE  6F64               	movwf	___lldiv@divisor& (0+255),b
 27959  0137D0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 27960  0137D2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 27961  0137D4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 27962  0137D6  ECC2  F0A3         	call	___lldiv	;wreg free
 27963  0137DA  0100               	movlb	0	; () banked
 27964  0137DC  1F60               	comf	?___lldiv& (0+255),f,b
 27965  0137DE  0100               	movlb	0	; () banked
 27966  0137E0  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 27967  0137E2  0100               	movlb	0	; () banked
 27968  0137E4  4B60               	infsnz	?___lldiv& (0+255),f,b
 27969  0137E6  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 27970  0137E8  0EFF               	movlw	255
 27971  0137EA  0100               	movlb	0	; () banked
 27972  0137EC  2560               	addwf	?___lldiv& (0+255),w,b
 27973  0137EE  6E28               	movwf	_COUNTER,c
 27974  0137F0  0EFF               	movlw	255
 27975  0137F2  0100               	movlb	0	; () banked
 27976  0137F4  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 27977  0137F6  6E29               	movwf	_COUNTER+1,c
 27978                           
 27979                           ; BSR set to: 0
 27980                           ;Timer0.c: 68: Timer0_Clear();
 27981  0137F8  ECCE  F0B4         	call	_Timer0_Clear	;wreg free
 27982                           
 27983                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 27984  0137FC  8ED5               	bsf	4053,7,c	;volatile
 27985  0137FE  0012               	return		;funcret
 27986  013800                     __end_of_Timer0_Init:
 27987                           	opt stack 0
 27988                           tosu	equ	0xFFF
 27989                           tosh	equ	0xFFE
 27990                           tosl	equ	0xFFD
 27991                           pclath	equ	0xFFA
 27992                           tblptru	equ	0xFF8
 27993                           tblptrh	equ	0xFF7
 27994                           tblptrl	equ	0xFF6
 27995                           tablat	equ	0xFF5
 27996                           prodh	equ	0xFF4
 27997                           prodl	equ	0xFF3
 27998                           intcon	equ	0xFF2
 27999                           indf0	equ	0xFEF
 28000                           postinc0	equ	0xFEE
 28001                           fsr0h	equ	0xFEA
 28002                           fsr0l	equ	0xFE9
 28003                           wreg	equ	0xFE8
 28004                           indf1	equ	0xFE7
 28005                           postdec1	equ	0xFE5
 28006                           fsr1h	equ	0xFE2
 28007                           fsr1l	equ	0xFE1
 28008                           indf2	equ	0xFDF
 28009                           postinc2	equ	0xFDE
 28010                           postdec2	equ	0xFDD
 28011                           plusw2	equ	0xFDB
 28012                           fsr2h	equ	0xFDA
 28013                           fsr2l	equ	0xFD9
 28014                           status	equ	0xFD8
 28015                           
 28016 ;; *************** function ___lldiv *****************
 28017 ;; Defined at:
 28018 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 28019 ;; Parameters:    Size  Location     Type
 28020 ;;  dividend        4    0[BANK0 ] unsigned long 
 28021 ;;  divisor         4    4[BANK0 ] unsigned long 
 28022 ;; Auto vars:     Size  Location     Type
 28023 ;;  quotient        4    8[BANK0 ] unsigned long 
 28024 ;;  counter         1   12[BANK0 ] unsigned char 
 28025 ;; Return value:  Size  Location     Type
 28026 ;;                  4    0[BANK0 ] unsigned long 
 28027 ;; Registers used:
 28028 ;;		wreg, status,2, status,0
 28029 ;; Tracked objects:
 28030 ;;		On entry : 0/0
 28031 ;;		On exit  : 0/0
 28032 ;;		Unchanged: 0/0
 28033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28034 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28035 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28037 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28038 ;;Total ram usage:       13 bytes
 28039 ;; Hardware stack levels used:    1
 28040 ;; Hardware stack levels required when called:    7
 28041 ;; This function calls:
 28042 ;;		Nothing
 28043 ;; This function is called by:
 28044 ;;		_Timer0_Init
 28045 ;;		_Timer2_Init
 28046 ;;		_rand_between
 28047 ;;		_I2C_Init
 28048 ;; This function uses a non-reentrant model
 28049 ;;
 28050                           
 28051                           	psect	text143
 28052  014784                     __ptext143:
 28053                           	opt stack 0
 28054  014784                     ___lldiv:
 28055                           	opt stack 20
 28056                           
 28057                           ;incstack = 0
 28058  014784  0E00               	movlw	0
 28059  014786  0100               	movlb	0	; () banked
 28060  014788  6F68               	movwf	___lldiv@quotient& (0+255),b
 28061  01478A  0E00               	movlw	0
 28062  01478C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 28063  01478E  0E00               	movlw	0
 28064  014790  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 28065  014792  0E00               	movlw	0
 28066  014794  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 28067                           
 28068                           ; BSR set to: 0
 28069  014796  0100               	movlb	0	; () banked
 28070  014798  5164               	movf	___lldiv@divisor& (0+255),w,b
 28071  01479A  0100               	movlb	0	; () banked
 28072  01479C  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 28073  01479E  0100               	movlb	0	; () banked
 28074  0147A0  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 28075  0147A2  0100               	movlb	0	; () banked
 28076  0147A4  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 28077  0147A6  B4D8               	btfsc	status,2,c
 28078  0147A8  D042               	goto	l2458
 28079                           
 28080                           ; BSR set to: 0
 28081  0147AA  0E01               	movlw	1
 28082  0147AC  0100               	movlb	0	; () banked
 28083  0147AE  6F6C               	movwf	___lldiv@counter& (0+255),b
 28084  0147B0  D008               	goto	l12099
 28085  0147B2                     l12097:
 28086                           
 28087                           ; BSR set to: 0
 28088  0147B2  0100               	movlb	0	; () banked
 28089  0147B4  90D8               	bcf	status,0,c
 28090  0147B6  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 28091  0147B8  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 28092  0147BA  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 28093  0147BC  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 28094  0147BE  0100               	movlb	0	; () banked
 28095  0147C0  2B6C               	incf	___lldiv@counter& (0+255),f,b
 28096  0147C2                     l12099:
 28097                           
 28098                           ; BSR set to: 0
 28099  0147C2  0100               	movlb	0	; () banked
 28100  0147C4  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 28101  0147C6  D7F5               	goto	l12097
 28102  0147C8                     l12101:
 28103                           
 28104                           ; BSR set to: 0
 28105  0147C8  0100               	movlb	0	; () banked
 28106  0147CA  90D8               	bcf	status,0,c
 28107  0147CC  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 28108  0147CE  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 28109  0147D0  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 28110  0147D2  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 28111                           
 28112                           ; BSR set to: 0
 28113  0147D4  0100               	movlb	0	; () banked
 28114  0147D6  5164               	movf	___lldiv@divisor& (0+255),w,b
 28115  0147D8  0100               	movlb	0	; () banked
 28116  0147DA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 28117  0147DC  0100               	movlb	0	; () banked
 28118  0147DE  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 28119  0147E0  0100               	movlb	0	; () banked
 28120  0147E2  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 28121  0147E4  0100               	movlb	0	; () banked
 28122  0147E6  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 28123  0147E8  0100               	movlb	0	; () banked
 28124  0147EA  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 28125  0147EC  0100               	movlb	0	; () banked
 28126  0147EE  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 28127  0147F0  0100               	movlb	0	; () banked
 28128  0147F2  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 28129  0147F4  A0D8               	btfss	status,0,c
 28130  0147F6  D012               	goto	l12109
 28131                           
 28132                           ; BSR set to: 0
 28133  0147F8  0100               	movlb	0	; () banked
 28134  0147FA  5164               	movf	___lldiv@divisor& (0+255),w,b
 28135  0147FC  0100               	movlb	0	; () banked
 28136  0147FE  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 28137  014800  0100               	movlb	0	; () banked
 28138  014802  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 28139  014804  0100               	movlb	0	; () banked
 28140  014806  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 28141  014808  0100               	movlb	0	; () banked
 28142  01480A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 28143  01480C  0100               	movlb	0	; () banked
 28144  01480E  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 28145  014810  0100               	movlb	0	; () banked
 28146  014812  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 28147  014814  0100               	movlb	0	; () banked
 28148  014816  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 28149                           
 28150                           ; BSR set to: 0
 28151  014818  0100               	movlb	0	; () banked
 28152  01481A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 28153  01481C                     l12109:
 28154                           
 28155                           ; BSR set to: 0
 28156  01481C  0100               	movlb	0	; () banked
 28157  01481E  90D8               	bcf	status,0,c
 28158  014820  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 28159  014822  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 28160  014824  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 28161  014826  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 28162                           
 28163                           ; BSR set to: 0
 28164  014828  0100               	movlb	0	; () banked
 28165  01482A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 28166  01482C  D7CD               	goto	l12101
 28167  01482E                     l2458:
 28168                           
 28169                           ; BSR set to: 0
 28170  01482E  C068  F060         	movff	___lldiv@quotient,?___lldiv
 28171  014832  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 28172  014836  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 28173  01483A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 28174                           
 28175                           ; BSR set to: 0
 28176  01483E  0012               	return		;funcret
 28177  014840                     __end_of___lldiv:
 28178                           	opt stack 0
 28179                           tosu	equ	0xFFF
 28180                           tosh	equ	0xFFE
 28181                           tosl	equ	0xFFD
 28182                           pclath	equ	0xFFA
 28183                           tblptru	equ	0xFF8
 28184                           tblptrh	equ	0xFF7
 28185                           tblptrl	equ	0xFF6
 28186                           tablat	equ	0xFF5
 28187                           prodh	equ	0xFF4
 28188                           prodl	equ	0xFF3
 28189                           intcon	equ	0xFF2
 28190                           indf0	equ	0xFEF
 28191                           postinc0	equ	0xFEE
 28192                           fsr0h	equ	0xFEA
 28193                           fsr0l	equ	0xFE9
 28194                           wreg	equ	0xFE8
 28195                           indf1	equ	0xFE7
 28196                           postdec1	equ	0xFE5
 28197                           fsr1h	equ	0xFE2
 28198                           fsr1l	equ	0xFE1
 28199                           indf2	equ	0xFDF
 28200                           postinc2	equ	0xFDE
 28201                           postdec2	equ	0xFDD
 28202                           plusw2	equ	0xFDB
 28203                           fsr2h	equ	0xFDA
 28204                           fsr2l	equ	0xFD9
 28205                           status	equ	0xFD8
 28206                           
 28207 ;; *************** function _Timer0_Clear *****************
 28208 ;; Defined at:
 28209 ;;		line 20 in file "Library/Timer0.c"
 28210 ;; Parameters:    Size  Location     Type
 28211 ;;		None
 28212 ;; Auto vars:     Size  Location     Type
 28213 ;;		None
 28214 ;; Return value:  Size  Location     Type
 28215 ;;                  1    wreg      void 
 28216 ;; Registers used:
 28217 ;;		None
 28218 ;; Tracked objects:
 28219 ;;		On entry : 0/0
 28220 ;;		On exit  : 0/0
 28221 ;;		Unchanged: 0/0
 28222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28227 ;;Total ram usage:        0 bytes
 28228 ;; Hardware stack levels used:    1
 28229 ;; Hardware stack levels required when called:    7
 28230 ;; This function calls:
 28231 ;;		Nothing
 28232 ;; This function is called by:
 28233 ;;		_Timer0_Init
 28234 ;; This function uses a non-reentrant model
 28235 ;;
 28236                           
 28237                           	psect	text144
 28238  01699C                     __ptext144:
 28239                           	opt stack 0
 28240  01699C                     _Timer0_Clear:
 28241                           	opt stack 20
 28242                           
 28243                           ;Timer0.c: 22: TMR0 = COUNTER;
 28244                           
 28245                           ; BSR set to: 0
 28246                           ;incstack = 0
 28247  01699C  C028  FFD6         	movff	_COUNTER,4054	;volatile
 28248  0169A0  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 28249                           
 28250                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 28251  0169A4  94F2               	bcf	intcon,2,c	;volatile
 28252  0169A6  0012               	return		;funcret
 28253  0169A8                     __end_of_Timer0_Clear:
 28254                           	opt stack 0
 28255                           tosu	equ	0xFFF
 28256                           tosh	equ	0xFFE
 28257                           tosl	equ	0xFFD
 28258                           pclath	equ	0xFFA
 28259                           tblptru	equ	0xFF8
 28260                           tblptrh	equ	0xFF7
 28261                           tblptrl	equ	0xFF6
 28262                           tablat	equ	0xFF5
 28263                           prodh	equ	0xFF4
 28264                           prodl	equ	0xFF3
 28265                           intcon	equ	0xFF2
 28266                           indf0	equ	0xFEF
 28267                           postinc0	equ	0xFEE
 28268                           fsr0h	equ	0xFEA
 28269                           fsr0l	equ	0xFE9
 28270                           wreg	equ	0xFE8
 28271                           indf1	equ	0xFE7
 28272                           postdec1	equ	0xFE5
 28273                           fsr1h	equ	0xFE2
 28274                           fsr1l	equ	0xFE1
 28275                           indf2	equ	0xFDF
 28276                           postinc2	equ	0xFDE
 28277                           postdec2	equ	0xFDD
 28278                           plusw2	equ	0xFDB
 28279                           fsr2h	equ	0xFDA
 28280                           fsr2l	equ	0xFD9
 28281                           status	equ	0xFD8
 28282                           
 28283 ;; *************** function _Motor_Move *****************
 28284 ;; Defined at:
 28285 ;;		line 51 in file "Library/Motor.c"
 28286 ;; Parameters:    Size  Location     Type
 28287 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 28288 ;;		 -> Stepper(6), 
 28289 ;;  pDelta          2    5[BANK0 ] short 
 28290 ;; Auto vars:     Size  Location     Type
 28291 ;;		None
 28292 ;; Return value:  Size  Location     Type
 28293 ;;                  1    wreg      unsigned char 
 28294 ;; Registers used:
 28295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28296 ;; Tracked objects:
 28297 ;;		On entry : 0/0
 28298 ;;		On exit  : 0/0
 28299 ;;		Unchanged: 0/0
 28300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28304 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28305 ;;Total ram usage:        6 bytes
 28306 ;; Hardware stack levels used:    1
 28307 ;; Hardware stack levels required when called:    8
 28308 ;; This function calls:
 28309 ;;		_Timer0_Start
 28310 ;; This function is called by:
 28311 ;;		_main
 28312 ;; This function uses a non-reentrant model
 28313 ;;
 28314                           
 28315                           	psect	text145
 28316  0163EC                     __ptext145:
 28317                           	opt stack 0
 28318  0163EC                     _Motor_Move:
 28319                           	opt stack 22
 28320                           
 28321                           ;Motor.c: 54: lMotor = pMotor;
 28322                           
 28323                           ;incstack = 0
 28324  0163EC  C063  F02A         	movff	Motor_Move@pMotor,_lMotor
 28325  0163F0  C064  F02B         	movff	Motor_Move@pMotor+1,_lMotor+1
 28326                           
 28327                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 28328  0163F4  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 28329  0163F8  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 28330  0163FC  50DE               	movf	postinc2,w,c
 28331  0163FE  10DE               	iorwf	postinc2,w,c
 28332  016400  A4D8               	btfss	status,2,c
 28333  016402  0012               	return	
 28334                           
 28335                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 28336                           
 28337                           ;Motor.c: 59: return 0;
 28338                           ;	Return value of _Motor_Move is never used
 28339  016404  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 28340  016408  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 28341  01640C  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
 28342  016410  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 28343                           
 28344                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 28345  016414  C0D1  F060         	movff	_lStepFunction,Timer0_Start@pFunction
 28346  016418  C0D2  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 28347  01641C  C0D3  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 28348  016420  EC64  F0B3         	call	_Timer0_Start	;wreg free
 28349  016424  0012               	return	
 28350  016426                     __end_of_Motor_Move:
 28351                           	opt stack 0
 28352                           tosu	equ	0xFFF
 28353                           tosh	equ	0xFFE
 28354                           tosl	equ	0xFFD
 28355                           pclath	equ	0xFFA
 28356                           tblptru	equ	0xFF8
 28357                           tblptrh	equ	0xFF7
 28358                           tblptrl	equ	0xFF6
 28359                           tablat	equ	0xFF5
 28360                           prodh	equ	0xFF4
 28361                           prodl	equ	0xFF3
 28362                           intcon	equ	0xFF2
 28363                           indf0	equ	0xFEF
 28364                           postinc0	equ	0xFEE
 28365                           fsr0h	equ	0xFEA
 28366                           fsr0l	equ	0xFE9
 28367                           wreg	equ	0xFE8
 28368                           indf1	equ	0xFE7
 28369                           postdec1	equ	0xFE5
 28370                           fsr1h	equ	0xFE2
 28371                           fsr1l	equ	0xFE1
 28372                           indf2	equ	0xFDF
 28373                           postinc2	equ	0xFDE
 28374                           postdec2	equ	0xFDD
 28375                           plusw2	equ	0xFDB
 28376                           fsr2h	equ	0xFDA
 28377                           fsr2l	equ	0xFD9
 28378                           status	equ	0xFD8
 28379                           
 28380 ;; *************** function _Timer0_Start *****************
 28381 ;; Defined at:
 28382 ;;		line 75 in file "Library/Timer0.c"
 28383 ;; Parameters:    Size  Location     Type
 28384 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 28385 ;;		 -> Absolute function(1), Motor_Step(1), 
 28386 ;; Auto vars:     Size  Location     Type
 28387 ;;		None
 28388 ;; Return value:  Size  Location     Type
 28389 ;;                  1    wreg      void 
 28390 ;; Registers used:
 28391 ;;		wreg, status,2, status,0
 28392 ;; Tracked objects:
 28393 ;;		On entry : 0/0
 28394 ;;		On exit  : 0/0
 28395 ;;		Unchanged: 0/0
 28396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28397 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28400 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28401 ;;Total ram usage:        3 bytes
 28402 ;; Hardware stack levels used:    1
 28403 ;; Hardware stack levels required when called:    7
 28404 ;; This function calls:
 28405 ;;		Nothing
 28406 ;; This function is called by:
 28407 ;;		_Motor_Move
 28408 ;; This function uses a non-reentrant model
 28409 ;;
 28410                           
 28411                           	psect	text146
 28412  0166C8                     __ptext146:
 28413                           	opt stack 0
 28414  0166C8                     _Timer0_Start:
 28415                           	opt stack 22
 28416                           
 28417                           ;Timer0.c: 77: gISR = pFunction;
 28418                           
 28419                           ;incstack = 0
 28420  0166C8  C060  F0CE         	movff	Timer0_Start@pFunction,_gISR
 28421  0166CC  C061  F0CF         	movff	Timer0_Start@pFunction+1,_gISR+1
 28422  0166D0  C062  F0D0         	movff	Timer0_Start@pFunction+2,_gISR+2
 28423                           
 28424                           ;Timer0.c: 78: TMR0 = COUNTER;
 28425  0166D4  C028  FFD6         	movff	_COUNTER,4054	;volatile
 28426  0166D8  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 28427                           
 28428                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 28429  0166DC  50D5               	movf	4053,w,c	;volatile
 28430  0166DE  1831               	xorwf	_INDEX,w,c
 28431  0166E0  0BF8               	andlw	-8
 28432  0166E2  1831               	xorwf	_INDEX,w,c
 28433  0166E4  6ED5               	movwf	4053,c	;volatile
 28434                           
 28435                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 28436  0166E6  94F2               	bcf	intcon,2,c	;volatile
 28437                           
 28438                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 28439  0166E8  8AF2               	bsf	intcon,5,c	;volatile
 28440  0166EA  0012               	return		;funcret
 28441  0166EC                     __end_of_Timer0_Start:
 28442                           	opt stack 0
 28443                           tosu	equ	0xFFF
 28444                           tosh	equ	0xFFE
 28445                           tosl	equ	0xFFD
 28446                           pclath	equ	0xFFA
 28447                           tblptru	equ	0xFF8
 28448                           tblptrh	equ	0xFF7
 28449                           tblptrl	equ	0xFF6
 28450                           tablat	equ	0xFF5
 28451                           prodh	equ	0xFF4
 28452                           prodl	equ	0xFF3
 28453                           intcon	equ	0xFF2
 28454                           indf0	equ	0xFEF
 28455                           postinc0	equ	0xFEE
 28456                           fsr0h	equ	0xFEA
 28457                           fsr0l	equ	0xFE9
 28458                           wreg	equ	0xFE8
 28459                           indf1	equ	0xFE7
 28460                           postdec1	equ	0xFE5
 28461                           fsr1h	equ	0xFE2
 28462                           fsr1l	equ	0xFE1
 28463                           indf2	equ	0xFDF
 28464                           postinc2	equ	0xFDE
 28465                           postdec2	equ	0xFDD
 28466                           plusw2	equ	0xFDB
 28467                           fsr2h	equ	0xFDA
 28468                           fsr2l	equ	0xFD9
 28469                           status	equ	0xFD8
 28470                           
 28471 ;; *************** function _ISR_Function *****************
 28472 ;; Defined at:
 28473 ;;		line 38 in file "Library/ISR.c"
 28474 ;; Parameters:    Size  Location     Type
 28475 ;;		None
 28476 ;; Auto vars:     Size  Location     Type
 28477 ;;		None
 28478 ;; Return value:  Size  Location     Type
 28479 ;;                  1    wreg      void 
 28480 ;; Registers used:
 28481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28482 ;; Tracked objects:
 28483 ;;		On entry : 0/0
 28484 ;;		On exit  : 0/0
 28485 ;;		Unchanged: 0/0
 28486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28489 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28490 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28491 ;;Total ram usage:       14 bytes
 28492 ;; Hardware stack levels used:    1
 28493 ;; Hardware stack levels required when called:    6
 28494 ;; This function calls:
 28495 ;;		_Timer0_ISR
 28496 ;; This function is called by:
 28497 ;;		Interrupt level 2
 28498 ;; This function uses a non-reentrant model
 28499 ;;
 28500                           
 28501                           	psect	intcode
 28502  001408                     __pintcode:
 28503                           	opt stack 0
 28504  001408                     _ISR_Function:
 28505                           	opt stack 13
 28506                           
 28507                           ;incstack = 0
 28508  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28509  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28510  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28511  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28512  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28513  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28514  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28515  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 28516  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 28517  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 28518  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 28519  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 28520  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 28521  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 28522  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 28523                           
 28524                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 28525  001442  92F2               	bcf	intcon,1,c	;volatile
 28526                           
 28527                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 28528  001444  B4F2               	btfsc	intcon,2,c	;volatile
 28529  001446  AAF2               	btfss	intcon,5,c	;volatile
 28530  001448  D002               	goto	i2l1591
 28531                           
 28532                           ;ISR.c: 68: Timer0_ISR();
 28533  00144A  EC0F  F0B3         	call	_Timer0_ISR	;wreg free
 28534  00144E                     i2l1591:
 28535  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 28536  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 28537  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 28538  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 28539  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 28540  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 28541  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 28542  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 28543  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 28544  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 28545  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 28546  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 28547  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 28548  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 28549  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28550  001488  0011               	retfie		f
 28551  00148A                     __end_of_ISR_Function:
 28552                           	opt stack 0
 28553                           tosu	equ	0xFFF
 28554                           tosh	equ	0xFFE
 28555                           tosl	equ	0xFFD
 28556                           pclatu	equ	0xFFB
 28557                           pclath	equ	0xFFA
 28558                           tblptru	equ	0xFF8
 28559                           tblptrh	equ	0xFF7
 28560                           tblptrl	equ	0xFF6
 28561                           tablat	equ	0xFF5
 28562                           prodh	equ	0xFF4
 28563                           prodl	equ	0xFF3
 28564                           intcon	equ	0xFF2
 28565                           indf0	equ	0xFEF
 28566                           postinc0	equ	0xFEE
 28567                           fsr0h	equ	0xFEA
 28568                           fsr0l	equ	0xFE9
 28569                           wreg	equ	0xFE8
 28570                           indf1	equ	0xFE7
 28571                           postdec1	equ	0xFE5
 28572                           fsr1h	equ	0xFE2
 28573                           fsr1l	equ	0xFE1
 28574                           indf2	equ	0xFDF
 28575                           postinc2	equ	0xFDE
 28576                           postdec2	equ	0xFDD
 28577                           plusw2	equ	0xFDB
 28578                           fsr2h	equ	0xFDA
 28579                           fsr2l	equ	0xFD9
 28580                           status	equ	0xFD8
 28581                           
 28582 ;; *************** function _Timer0_ISR *****************
 28583 ;; Defined at:
 28584 ;;		line 94 in file "Library/Timer0.c"
 28585 ;; Parameters:    Size  Location     Type
 28586 ;;		None
 28587 ;; Auto vars:     Size  Location     Type
 28588 ;;		None
 28589 ;; Return value:  Size  Location     Type
 28590 ;;                  1    wreg      void 
 28591 ;; Registers used:
 28592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28593 ;; Tracked objects:
 28594 ;;		On entry : 0/0
 28595 ;;		On exit  : 0/0
 28596 ;;		Unchanged: 0/0
 28597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28602 ;;Total ram usage:        0 bytes
 28603 ;; Hardware stack levels used:    1
 28604 ;; Hardware stack levels required when called:    5
 28605 ;; This function calls:
 28606 ;;		Absolute function
 28607 ;;		i2_Motor_Step
 28608 ;;		i2_Timer0_Stop
 28609 ;; This function is called by:
 28610 ;;		_ISR_Function
 28611 ;; This function uses a non-reentrant model
 28612 ;;
 28613                           
 28614                           	psect	text148
 28615  01661E                     __ptext148:
 28616                           	opt stack 0
 28617  01661E                     _Timer0_ISR:
 28618                           	opt stack 13
 28619                           
 28620                           ;Timer0.c: 96: Timer0_Stop();
 28621                           
 28622                           ;incstack = 0
 28623  01661E  EC05  F0B5         	call	i2_Timer0_Stop	;wreg free
 28624                           
 28625                           ;Timer0.c: 99: if (gISR != 0)
 28626  016622  0100               	movlb	0	; () banked
 28627  016624  51CE               	movf	_gISR& (0+255),w,b
 28628  016626  0100               	movlb	0	; () banked
 28629  016628  11CF               	iorwf	(_gISR+1)& (0+255),w,b
 28630  01662A  0100               	movlb	0	; () banked
 28631  01662C  11D0               	iorwf	(_gISR+2)& (0+255),w,b
 28632  01662E  B4D8               	btfsc	status,2,c
 28633  016630  0012               	return	
 28634                           
 28635                           ; BSR set to: 0
 28636                           ;Timer0.c: 100: gISR();
 28637  016632  D801               	call	i2u1328_48
 28638  016634  0012               	return	
 28639  016636                     i2u1328_48:
 28640  016636  0005               	push	
 28641  016638  6EFA               	movwf	pclath,c
 28642  01663A  0100               	movlb	0	; () banked
 28643  01663C  51CE               	movf	_gISR& (0+255),w,b
 28644  01663E  6EFD               	movwf	tosl,c
 28645  016640  51CF               	movf	(_gISR+1)& (0+255),w,b
 28646  016642  6EFE               	movwf	tosh,c
 28647  016644  51D0               	movf	(_gISR+2)& (0+255),w,b
 28648  016646  6EFF               	movwf	tosu,c
 28649  016648  50FA               	movf	pclath,w,c
 28650  01664A  0012               	return		;indir
 28651  01664C                     __end_of_Timer0_ISR:
 28652                           	opt stack 0
 28653                           tosu	equ	0xFFF
 28654                           tosh	equ	0xFFE
 28655                           tosl	equ	0xFFD
 28656                           pclatu	equ	0xFFB
 28657                           pclath	equ	0xFFA
 28658                           tblptru	equ	0xFF8
 28659                           tblptrh	equ	0xFF7
 28660                           tblptrl	equ	0xFF6
 28661                           tablat	equ	0xFF5
 28662                           prodh	equ	0xFF4
 28663                           prodl	equ	0xFF3
 28664                           intcon	equ	0xFF2
 28665                           indf0	equ	0xFEF
 28666                           postinc0	equ	0xFEE
 28667                           fsr0h	equ	0xFEA
 28668                           fsr0l	equ	0xFE9
 28669                           wreg	equ	0xFE8
 28670                           indf1	equ	0xFE7
 28671                           postdec1	equ	0xFE5
 28672                           fsr1h	equ	0xFE2
 28673                           fsr1l	equ	0xFE1
 28674                           indf2	equ	0xFDF
 28675                           postinc2	equ	0xFDE
 28676                           postdec2	equ	0xFDD
 28677                           plusw2	equ	0xFDB
 28678                           fsr2h	equ	0xFDA
 28679                           fsr2l	equ	0xFD9
 28680                           status	equ	0xFD8
 28681                           
 28682 ;; *************** function i2_Motor_Step *****************
 28683 ;; Defined at:
 28684 ;;		line 75 in file "Library/Motor.c"
 28685 ;; Parameters:    Size  Location     Type
 28686 ;;		None
 28687 ;; Auto vars:     Size  Location     Type
 28688 ;;		None
 28689 ;; Return value:  Size  Location     Type
 28690 ;;                  1    wreg      void 
 28691 ;; Registers used:
 28692 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28693 ;; Tracked objects:
 28694 ;;		On entry : 0/0
 28695 ;;		On exit  : 0/0
 28696 ;;		Unchanged: 0/0
 28697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28700 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28702 ;;Total ram usage:        2 bytes
 28703 ;; Hardware stack levels used:    1
 28704 ;; Hardware stack levels required when called:    4
 28705 ;; This function calls:
 28706 ;;		i2_MXK_Queue
 28707 ;;		i2_MXK_Release
 28708 ;;		i2_MXK_SwitchTo
 28709 ;;		i2_Port_SetPin
 28710 ;;		i2_Timer0_Restart
 28711 ;;		i2_Timer0_Stop
 28712 ;; This function is called by:
 28713 ;; This function uses a non-reentrant model
 28714 ;;
 28715                           
 28716                           	psect	text149
 28717  014018                     __ptext149:
 28718                           	opt stack 0
 28719  014018                     i2_Motor_Step:
 28720                           	opt stack 13
 28721                           
 28722                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 28723                           
 28724                           ;incstack = 0
 28725  014018  EE20 F004          	lfsr	2,4
 28726  01401C  502A               	movf	_lMotor,w,c
 28727  01401E  26D9               	addwf	fsr2l,f,c
 28728  014020  502B               	movf	_lMotor+1,w,c
 28729  014022  22DA               	addwfc	fsr2h,f,c
 28730  014024  50DF               	movf	indf2,w,c
 28731  014026  EC4A  F0B2         	call	i2_MXK_SwitchTo
 28732  01402A  0900               	iorlw	0
 28733  01402C  B4D8               	btfsc	status,2,c
 28734  01402E  D06A               	goto	i2l10305
 28735                           
 28736                           ;Motor.c: 78: {
 28737                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 28738  014030  C02A  FFD9         	movff	_lMotor,fsr2l
 28739  014034  C02B  FFDA         	movff	_lMotor+1,fsr2h
 28740  014038  50DE               	movf	postinc2,w,c
 28741  01403A  10DE               	iorwf	postinc2,w,c
 28742  01403C  B4D8               	btfsc	status,2,c
 28743  01403E  D05D               	goto	i2l10299
 28744                           
 28745                           ;Motor.c: 80: {
 28746                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 28747  014040  C02A  FFD9         	movff	_lMotor,fsr2l
 28748  014044  C02B  FFDA         	movff	_lMotor+1,fsr2h
 28749  014048  0E01               	movlw	1
 28750  01404A  BEDB               	btfsc	plusw2,7,c
 28751  01404C  D022               	goto	i2l10283
 28752  01404E  0E01               	movlw	1
 28753  014050  50DB               	movf	plusw2,w,c
 28754  014052  E103               	bnz	i2u781_40
 28755  014054  04DE               	decf	postinc2,w,c
 28756  014056  A0D8               	btfss	status,0,c
 28757  014058  D01C               	goto	i2l10283
 28758  01405A                     i2u781_40:
 28759                           
 28760                           ;Motor.c: 83: {
 28761                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 28762  01405A  C02A  FFD9         	movff	_lMotor,fsr2l
 28763  01405E  C02B  FFDA         	movff	_lMotor+1,fsr2h
 28764  014062  28DE               	incf	postinc2,w,c
 28765  014064  E104               	bnz	i2u782_40
 28766  014066  0E7F               	movlw	127
 28767  014068  18DE               	xorwf	postinc2,w,c
 28768  01406A  B4D8               	btfsc	status,2,c
 28769  01406C  D007               	goto	i2l10281
 28770  01406E                     i2u782_40:
 28771                           
 28772                           ;Motor.c: 85: lMotor->mDelta --;
 28773  01406E  C02A  FFD9         	movff	_lMotor,fsr2l
 28774  014072  C02B  FFDA         	movff	_lMotor+1,fsr2h
 28775  014076  06DE               	decf	postinc2,f,c
 28776  014078  0E00               	movlw	0
 28777  01407A  5ADD               	subwfb	postdec2,f,c
 28778  01407C                     i2l10281:
 28779                           
 28780                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 28781  01407C  0E84               	movlw	low _PortE
 28782  01407E  6E10               	movwf	i2Port_SetPin@pInput,c
 28783  014080  0E01               	movlw	high _PortE
 28784  014082  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28785  014084  0E00               	movlw	0
 28786  014086  6E12               	movwf	i2Port_SetPin@pPin,c
 28787  014088  0E01               	movlw	1
 28788  01408A  6E13               	movwf	i2Port_SetPin@pValue,c
 28789  01408C  EC90  F0A6         	call	i2_Port_SetPin	;wreg free
 28790                           
 28791                           ;Motor.c: 88: }
 28792  014090  D01B               	goto	i2l10289
 28793  014092                     i2l10283:
 28794                           
 28795                           ;Motor.c: 89: else
 28796                           ;Motor.c: 90: {
 28797                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 28798  014092  C02A  FFD9         	movff	_lMotor,fsr2l
 28799  014096  C02B  FFDA         	movff	_lMotor+1,fsr2h
 28800  01409A  04DE               	decf	postinc2,w,c
 28801  01409C  E104               	bnz	i2u783_40
 28802  01409E  0E80               	movlw	128
 28803  0140A0  18DE               	xorwf	postinc2,w,c
 28804  0140A2  B4D8               	btfsc	status,2,c
 28805  0140A4  D007               	goto	i2l10287
 28806  0140A6                     i2u783_40:
 28807                           
 28808                           ;Motor.c: 92: lMotor->mDelta ++;
 28809  0140A6  C02A  FFD9         	movff	_lMotor,fsr2l
 28810  0140AA  C02B  FFDA         	movff	_lMotor+1,fsr2h
 28811  0140AE  2ADE               	incf	postinc2,f,c
 28812  0140B0  0E00               	movlw	0
 28813  0140B2  22DD               	addwfc	postdec2,f,c
 28814  0140B4                     i2l10287:
 28815                           
 28816                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 28817  0140B4  0E84               	movlw	low _PortE
 28818  0140B6  6E10               	movwf	i2Port_SetPin@pInput,c
 28819  0140B8  0E01               	movlw	high _PortE
 28820  0140BA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28821  0140BC  0E00               	movlw	0
 28822  0140BE  6E12               	movwf	i2Port_SetPin@pPin,c
 28823  0140C0  0E00               	movlw	0
 28824  0140C2  6E13               	movwf	i2Port_SetPin@pValue,c
 28825  0140C4  EC90  F0A6         	call	i2_Port_SetPin	;wreg free
 28826  0140C8                     i2l10289:
 28827                           
 28828                           ;Motor.c: 95: }
 28829                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 28830  0140C8  0E84               	movlw	low _PortE
 28831  0140CA  6E10               	movwf	i2Port_SetPin@pInput,c
 28832  0140CC  0E01               	movlw	high _PortE
 28833  0140CE  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28834  0140D0  0E01               	movlw	1
 28835  0140D2  6E12               	movwf	i2Port_SetPin@pPin,c
 28836  0140D4  0E01               	movlw	1
 28837  0140D6  6E13               	movwf	i2Port_SetPin@pValue,c
 28838  0140D8  EC90  F0A6         	call	i2_Port_SetPin	;wreg free
 28839                           
 28840                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 28841  0140DC  0E84               	movlw	low _PortE
 28842  0140DE  6E10               	movwf	i2Port_SetPin@pInput,c
 28843  0140E0  0E01               	movlw	high _PortE
 28844  0140E2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28845  0140E4  0E01               	movlw	1
 28846  0140E6  6E12               	movwf	i2Port_SetPin@pPin,c
 28847  0140E8  0E00               	movlw	0
 28848  0140EA  6E13               	movwf	i2Port_SetPin@pValue,c
 28849  0140EC  EC90  F0A6         	call	i2_Port_SetPin	;wreg free
 28850                           
 28851                           ;Motor.c: 101: MXK_Release();
 28852  0140F0  EC08  F0B5         	call	i2_MXK_Release	;wreg free
 28853                           
 28854                           ;Motor.c: 102: Timer0_Restart();
 28855  0140F4  ECD4  F0B4         	call	i2_Timer0_Restart	;wreg free
 28856                           
 28857                           ;Motor.c: 103: return;
 28858  0140F8  0012               	return	
 28859  0140FA                     i2l10299:
 28860                           
 28861                           ;Motor.c: 104: }
 28862                           ;Motor.c: 105: MXK_Release();
 28863  0140FA  EC08  F0B5         	call	i2_MXK_Release	;wreg free
 28864                           
 28865                           ;Motor.c: 106: Timer0_Stop();
 28866  0140FE  EC05  F0B5         	call	i2_Timer0_Stop	;wreg free
 28867                           
 28868                           ;Motor.c: 107: return;
 28869  014102  0012               	return	
 28870  014104                     i2l10305:
 28871                           
 28872                           ;Motor.c: 108: }
 28873                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 28874  014104  C0D1  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 28875  014108  C0D2  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 28876  01410C  C0D3  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 28877  014110  ECBB  F0B4         	call	i2_MXK_Queue	;wreg free
 28878  014114  0012               	return		;funcret
 28879  014116                     __end_ofi2_Motor_Step:
 28880                           	opt stack 0
 28881                           tosu	equ	0xFFF
 28882                           tosh	equ	0xFFE
 28883                           tosl	equ	0xFFD
 28884                           pclatu	equ	0xFFB
 28885                           pclath	equ	0xFFA
 28886                           tblptru	equ	0xFF8
 28887                           tblptrh	equ	0xFF7
 28888                           tblptrl	equ	0xFF6
 28889                           tablat	equ	0xFF5
 28890                           prodh	equ	0xFF4
 28891                           prodl	equ	0xFF3
 28892                           intcon	equ	0xFF2
 28893                           indf0	equ	0xFEF
 28894                           postinc0	equ	0xFEE
 28895                           fsr0h	equ	0xFEA
 28896                           fsr0l	equ	0xFE9
 28897                           wreg	equ	0xFE8
 28898                           indf1	equ	0xFE7
 28899                           postdec1	equ	0xFE5
 28900                           fsr1h	equ	0xFE2
 28901                           fsr1l	equ	0xFE1
 28902                           indf2	equ	0xFDF
 28903                           postinc2	equ	0xFDE
 28904                           postdec2	equ	0xFDD
 28905                           plusw2	equ	0xFDB
 28906                           fsr2h	equ	0xFDA
 28907                           fsr2l	equ	0xFD9
 28908                           status	equ	0xFD8
 28909                           
 28910 ;; *************** function i2_Timer0_Stop *****************
 28911 ;; Defined at:
 28912 ;;		line 89 in file "Library/Timer0.c"
 28913 ;; Parameters:    Size  Location     Type
 28914 ;;		None
 28915 ;; Auto vars:     Size  Location     Type
 28916 ;;		None
 28917 ;; Return value:  Size  Location     Type
 28918 ;;                  1    wreg      void 
 28919 ;; Registers used:
 28920 ;;		None
 28921 ;; Tracked objects:
 28922 ;;		On entry : 0/0
 28923 ;;		On exit  : 0/0
 28924 ;;		Unchanged: 0/0
 28925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28930 ;;Total ram usage:        0 bytes
 28931 ;; Hardware stack levels used:    1
 28932 ;; This function calls:
 28933 ;;		Nothing
 28934 ;; This function is called by:
 28935 ;;		_Timer0_ISR
 28936 ;;		i2_Motor_Step
 28937 ;; This function uses a non-reentrant model
 28938 ;;
 28939                           
 28940                           	psect	text150
 28941  016A0A                     __ptext150:
 28942                           	opt stack 0
 28943  016A0A                     i2_Timer0_Stop:
 28944                           	opt stack 17
 28945                           
 28946                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 28947                           
 28948                           ;incstack = 0
 28949  016A0A  9AF2               	bcf	intcon,5,c	;volatile
 28950                           
 28951                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 28952  016A0C  94F2               	bcf	intcon,2,c	;volatile
 28953  016A0E  0012               	return		;funcret
 28954  016A10                     __end_ofi2_Timer0_Stop:
 28955                           	opt stack 0
 28956                           tosu	equ	0xFFF
 28957                           tosh	equ	0xFFE
 28958                           tosl	equ	0xFFD
 28959                           pclatu	equ	0xFFB
 28960                           pclath	equ	0xFFA
 28961                           tblptru	equ	0xFF8
 28962                           tblptrh	equ	0xFF7
 28963                           tblptrl	equ	0xFF6
 28964                           tablat	equ	0xFF5
 28965                           prodh	equ	0xFF4
 28966                           prodl	equ	0xFF3
 28967                           intcon	equ	0xFF2
 28968                           indf0	equ	0xFEF
 28969                           postinc0	equ	0xFEE
 28970                           fsr0h	equ	0xFEA
 28971                           fsr0l	equ	0xFE9
 28972                           wreg	equ	0xFE8
 28973                           indf1	equ	0xFE7
 28974                           postdec1	equ	0xFE5
 28975                           fsr1h	equ	0xFE2
 28976                           fsr1l	equ	0xFE1
 28977                           indf2	equ	0xFDF
 28978                           postinc2	equ	0xFDE
 28979                           postdec2	equ	0xFDD
 28980                           plusw2	equ	0xFDB
 28981                           fsr2h	equ	0xFDA
 28982                           fsr2l	equ	0xFD9
 28983                           status	equ	0xFD8
 28984                           
 28985 ;; *************** function i2_Timer0_Restart *****************
 28986 ;; Defined at:
 28987 ;;		line 83 in file "Library/Timer0.c"
 28988 ;; Parameters:    Size  Location     Type
 28989 ;;		None
 28990 ;; Auto vars:     Size  Location     Type
 28991 ;;		None
 28992 ;; Return value:  Size  Location     Type
 28993 ;;                  1    wreg      void 
 28994 ;; Registers used:
 28995 ;;		None
 28996 ;; Tracked objects:
 28997 ;;		On entry : 0/0
 28998 ;;		On exit  : 0/0
 28999 ;;		Unchanged: 0/0
 29000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29005 ;;Total ram usage:        0 bytes
 29006 ;; Hardware stack levels used:    1
 29007 ;; This function calls:
 29008 ;;		Nothing
 29009 ;; This function is called by:
 29010 ;;		i2_Motor_Step
 29011 ;; This function uses a non-reentrant model
 29012 ;;
 29013                           
 29014                           	psect	text151
 29015  0169A8                     __ptext151:
 29016                           	opt stack 0
 29017  0169A8                     i2_Timer0_Restart:
 29018                           	opt stack 16
 29019                           
 29020                           ;Timer0.c: 85: TMR0 = COUNTER;
 29021                           
 29022                           ;incstack = 0
 29023  0169A8  C028  FFD6         	movff	_COUNTER,4054	;volatile
 29024  0169AC  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 29025                           
 29026                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29027  0169B0  8AF2               	bsf	intcon,5,c	;volatile
 29028  0169B2  0012               	return		;funcret
 29029  0169B4                     __end_ofi2_Timer0_Restart:
 29030                           	opt stack 0
 29031                           tosu	equ	0xFFF
 29032                           tosh	equ	0xFFE
 29033                           tosl	equ	0xFFD
 29034                           pclatu	equ	0xFFB
 29035                           pclath	equ	0xFFA
 29036                           tblptru	equ	0xFF8
 29037                           tblptrh	equ	0xFF7
 29038                           tblptrl	equ	0xFF6
 29039                           tablat	equ	0xFF5
 29040                           prodh	equ	0xFF4
 29041                           prodl	equ	0xFF3
 29042                           intcon	equ	0xFF2
 29043                           indf0	equ	0xFEF
 29044                           postinc0	equ	0xFEE
 29045                           fsr0h	equ	0xFEA
 29046                           fsr0l	equ	0xFE9
 29047                           wreg	equ	0xFE8
 29048                           indf1	equ	0xFE7
 29049                           postdec1	equ	0xFE5
 29050                           fsr1h	equ	0xFE2
 29051                           fsr1l	equ	0xFE1
 29052                           indf2	equ	0xFDF
 29053                           postinc2	equ	0xFDE
 29054                           postdec2	equ	0xFDD
 29055                           plusw2	equ	0xFDB
 29056                           fsr2h	equ	0xFDA
 29057                           fsr2l	equ	0xFD9
 29058                           status	equ	0xFD8
 29059                           
 29060 ;; *************** function i2_Port_SetPin *****************
 29061 ;; Defined at:
 29062 ;;		line 247 in file "Library/Port.c"
 29063 ;; Parameters:    Size  Location     Type
 29064 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29065 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29066 ;;  pPin            1   17[COMRAM] enum E6750
 29067 ;;  pValue          1   18[COMRAM] unsigned char 
 29068 ;; Auto vars:     Size  Location     Type
 29069 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29070 ;; Return value:  Size  Location     Type
 29071 ;;                  1    wreg      void 
 29072 ;; Registers used:
 29073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29074 ;; Tracked objects:
 29075 ;;		On entry : 0/0
 29076 ;;		On exit  : 0/0
 29077 ;;		Unchanged: 0/0
 29078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29082 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29083 ;;Total ram usage:        5 bytes
 29084 ;; Hardware stack levels used:    1
 29085 ;; Hardware stack levels required when called:    3
 29086 ;; This function calls:
 29087 ;;		i2_Byte_SetBit
 29088 ;;		i2_Word_GetPair
 29089 ;; This function is called by:
 29090 ;;		i2_Motor_Step
 29091 ;; This function uses a non-reentrant model
 29092 ;;
 29093                           
 29094                           	psect	text152
 29095  014D20                     __ptext152:
 29096                           	opt stack 0
 29097  014D20                     i2_Port_SetPin:
 29098                           	opt stack 13
 29099                           
 29100                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29101                           
 29102                           ;incstack = 0
 29103  014D20  0E08               	movlw	8
 29104  014D22  2410               	addwf	i2Port_SetPin@pInput,w,c
 29105  014D24  6E0D               	movwf	i2Word_GetPair@pInput,c
 29106  014D26  0E00               	movlw	0
 29107  014D28  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29108  014D2A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29109  014D2C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29110  014D30  ECE0  F0B2         	call	i2_Word_GetPair	;wreg free
 29111  014D34  6E14               	movwf	i2Port_SetPin@Type,c
 29112                           
 29113                           ;Port.c: 250: switch (Type)
 29114  014D36  D03B               	goto	i2l9857
 29115  014D38                     i2l9843:
 29116                           
 29117                           ;Port.c: 256: pValue &= 1;
 29118  014D38  0E01               	movlw	1
 29119  014D3A  1613               	andwf	i2Port_SetPin@pValue,f,c
 29120                           
 29121                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29122  014D3C  EE20 F002          	lfsr	2,2
 29123  014D40  5010               	movf	i2Port_SetPin@pInput,w,c
 29124  014D42  26D9               	addwf	fsr2l,f,c
 29125  014D44  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29126  014D46  22DA               	addwfc	fsr2h,f,c
 29127  014D48  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29128  014D4C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29129  014D50  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29130  014D54  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29131  014D58  ECD8  F0AF         	call	i2_Byte_SetBit	;wreg free
 29132                           
 29133                           ;Port.c: 258: break;
 29134  014D5C  0012               	return	
 29135  014D5E                     i2l9847:
 29136                           
 29137                           ;Port.c: 261: pValue &= 1;
 29138  014D5E  0E01               	movlw	1
 29139  014D60  1613               	andwf	i2Port_SetPin@pValue,f,c
 29140                           
 29141                           ;Port.c: 262: pValue ^= 1;
 29142  014D62  0E01               	movlw	1
 29143  014D64  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29144                           
 29145                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29146  014D66  EE20 F002          	lfsr	2,2
 29147  014D6A  5010               	movf	i2Port_SetPin@pInput,w,c
 29148  014D6C  26D9               	addwf	fsr2l,f,c
 29149  014D6E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29150  014D70  22DA               	addwfc	fsr2h,f,c
 29151  014D72  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29152  014D76  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29153  014D7A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29154  014D7E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29155  014D82  ECD8  F0AF         	call	i2_Byte_SetBit	;wreg free
 29156                           
 29157                           ;Port.c: 264: break;
 29158  014D86  0012               	return	
 29159  014D88                     i2l9851:
 29160                           
 29161                           ;Port.c: 266: pValue &= 1;
 29162  014D88  0E01               	movlw	1
 29163  014D8A  1613               	andwf	i2Port_SetPin@pValue,f,c
 29164                           
 29165                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29166  014D8C  EE20 F004          	lfsr	2,4
 29167  014D90  5010               	movf	i2Port_SetPin@pInput,w,c
 29168  014D92  26D9               	addwf	fsr2l,f,c
 29169  014D94  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29170  014D96  22DA               	addwfc	fsr2h,f,c
 29171  014D98  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29172  014D9C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29173  014DA0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29174  014DA4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29175  014DA8  ECD8  F0AF         	call	i2_Byte_SetBit	;wreg free
 29176                           
 29177                           ;Port.c: 269: }
 29178                           
 29179                           ;Port.c: 268: break;
 29180  014DAC  0012               	return	
 29181  014DAE                     i2l9857:
 29182  014DAE  5014               	movf	i2Port_SetPin@Type,w,c
 29183                           
 29184                           ; Switch size 1, requested type "space"
 29185                           ; Number of cases is 4, Range of values is 0 to 3
 29186                           ; switch strategies available:
 29187                           ; Name         Instructions Cycles
 29188                           ; simple_byte           13     7 (average)
 29189                           ;	Chosen strategy is simple_byte
 29190  014DB0  0A00               	xorlw	0	; case 0
 29191  014DB2  B4D8               	btfsc	status,2,c
 29192  014DB4  0012               	return	
 29193  014DB6  0A01               	xorlw	1	; case 1
 29194  014DB8  B4D8               	btfsc	status,2,c
 29195  014DBA  D7BE               	goto	i2l9843
 29196  014DBC  0A03               	xorlw	3	; case 2
 29197  014DBE  B4D8               	btfsc	status,2,c
 29198  014DC0  D7CE               	goto	i2l9847
 29199  014DC2  0A01               	xorlw	1	; case 3
 29200  014DC4  A4D8               	btfss	status,2,c
 29201  014DC6  0012               	return	
 29202  014DC8  D7DF               	goto	i2l9851
 29203  014DCA                     __end_ofi2_Port_SetPin:
 29204                           	opt stack 0
 29205                           tosu	equ	0xFFF
 29206                           tosh	equ	0xFFE
 29207                           tosl	equ	0xFFD
 29208                           pclatu	equ	0xFFB
 29209                           pclath	equ	0xFFA
 29210                           tblptru	equ	0xFF8
 29211                           tblptrh	equ	0xFF7
 29212                           tblptrl	equ	0xFF6
 29213                           tablat	equ	0xFF5
 29214                           prodh	equ	0xFF4
 29215                           prodl	equ	0xFF3
 29216                           intcon	equ	0xFF2
 29217                           indf0	equ	0xFEF
 29218                           postinc0	equ	0xFEE
 29219                           fsr0h	equ	0xFEA
 29220                           fsr0l	equ	0xFE9
 29221                           wreg	equ	0xFE8
 29222                           indf1	equ	0xFE7
 29223                           postdec1	equ	0xFE5
 29224                           fsr1h	equ	0xFE2
 29225                           fsr1l	equ	0xFE1
 29226                           indf2	equ	0xFDF
 29227                           postinc2	equ	0xFDE
 29228                           postdec2	equ	0xFDD
 29229                           plusw2	equ	0xFDB
 29230                           fsr2h	equ	0xFDA
 29231                           fsr2l	equ	0xFD9
 29232                           status	equ	0xFD8
 29233                           
 29234 ;; *************** function i2_Word_GetPair *****************
 29235 ;; Defined at:
 29236 ;;		line 156 in file "Library/Types.c"
 29237 ;; Parameters:    Size  Location     Type
 29238 ;;  pInput          2   12[COMRAM] PTR struct Word
 29239 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29240 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29241 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29242 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29243 ;;  pPair           1   14[COMRAM] unsigned char 
 29244 ;; Auto vars:     Size  Location     Type
 29245 ;;		None
 29246 ;; Return value:  Size  Location     Type
 29247 ;;                  1    wreg      unsigned char 
 29248 ;; Registers used:
 29249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29250 ;; Tracked objects:
 29251 ;;		On entry : 0/0
 29252 ;;		On exit  : 0/0
 29253 ;;		Unchanged: 0/0
 29254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29255 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29258 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29259 ;;Total ram usage:        3 bytes
 29260 ;; Hardware stack levels used:    1
 29261 ;; Hardware stack levels required when called:    2
 29262 ;; This function calls:
 29263 ;;		i2_Byte_GetPair
 29264 ;; This function is called by:
 29265 ;;		i2_Port_SetPin
 29266 ;; This function uses a non-reentrant model
 29267 ;;
 29268                           
 29269                           	psect	text153
 29270  0165C0                     __ptext153:
 29271                           	opt stack 0
 29272  0165C0                     i2_Word_GetPair:
 29273                           	opt stack 13
 29274                           
 29275                           ;Types.c: 158: if (pPair >= 4)
 29276                           
 29277                           ;incstack = 0
 29278  0165C0  0E03               	movlw	3
 29279  0165C2  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29280  0165C4  D00C               	goto	i2l9363
 29281                           
 29282                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29283  0165C6  0E01               	movlw	1
 29284  0165C8  240D               	addwf	i2Word_GetPair@pInput,w,c
 29285  0165CA  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29286  0165CC  0E00               	movlw	0
 29287  0165CE  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29288  0165D0  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29289  0165D2  500F               	movf	i2Word_GetPair@pPair,w,c
 29290  0165D4  0FFC               	addlw	252
 29291  0165D6  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29292  0165D8  EC1E  F0B4         	call	i2_Byte_GetPair	;wreg free
 29293  0165DC  0012               	return	
 29294  0165DE                     i2l9363:
 29295                           
 29296                           ;Types.c: 160: else
 29297                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29298  0165DE  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29299  0165E2  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29300  0165E6  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29301  0165EA  EC1E  F0B4         	call	i2_Byte_GetPair	;wreg free
 29302  0165EE  0012               	return	
 29303  0165F0                     __end_ofi2_Word_GetPair:
 29304                           	opt stack 0
 29305                           tosu	equ	0xFFF
 29306                           tosh	equ	0xFFE
 29307                           tosl	equ	0xFFD
 29308                           pclatu	equ	0xFFB
 29309                           pclath	equ	0xFFA
 29310                           tblptru	equ	0xFF8
 29311                           tblptrh	equ	0xFF7
 29312                           tblptrl	equ	0xFF6
 29313                           tablat	equ	0xFF5
 29314                           prodh	equ	0xFF4
 29315                           prodl	equ	0xFF3
 29316                           intcon	equ	0xFF2
 29317                           indf0	equ	0xFEF
 29318                           postinc0	equ	0xFEE
 29319                           fsr0h	equ	0xFEA
 29320                           fsr0l	equ	0xFE9
 29321                           wreg	equ	0xFE8
 29322                           indf1	equ	0xFE7
 29323                           postdec1	equ	0xFE5
 29324                           fsr1h	equ	0xFE2
 29325                           fsr1l	equ	0xFE1
 29326                           indf2	equ	0xFDF
 29327                           postinc2	equ	0xFDE
 29328                           postdec2	equ	0xFDD
 29329                           plusw2	equ	0xFDB
 29330                           fsr2h	equ	0xFDA
 29331                           fsr2l	equ	0xFD9
 29332                           status	equ	0xFD8
 29333                           
 29334 ;; *************** function i2_Byte_GetPair *****************
 29335 ;; Defined at:
 29336 ;;		line 87 in file "Library/Types.c"
 29337 ;; Parameters:    Size  Location     Type
 29338 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29339 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29340 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29341 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29342 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29343 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29344 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29345 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29346 ;;		 -> NULL(0), 
 29347 ;;  pPair           1   11[COMRAM] unsigned char 
 29348 ;; Auto vars:     Size  Location     Type
 29349 ;;		None
 29350 ;; Return value:  Size  Location     Type
 29351 ;;                  1    wreg      unsigned char 
 29352 ;; Registers used:
 29353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29354 ;; Tracked objects:
 29355 ;;		On entry : 0/0
 29356 ;;		On exit  : 0/0
 29357 ;;		Unchanged: 0/0
 29358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29359 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29362 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29363 ;;Total ram usage:        3 bytes
 29364 ;; Hardware stack levels used:    1
 29365 ;; Hardware stack levels required when called:    1
 29366 ;; This function calls:
 29367 ;;		i2_Byte_GetZone
 29368 ;; This function is called by:
 29369 ;;		i2_Word_GetPair
 29370 ;; This function uses a non-reentrant model
 29371 ;;
 29372                           
 29373                           	psect	text154
 29374  01683C                     __ptext154:
 29375                           	opt stack 0
 29376  01683C                     i2_Byte_GetPair:
 29377                           	opt stack 13
 29378                           
 29379                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29380                           
 29381                           ;incstack = 0
 29382  01683C  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29383  016840  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29384  016844  0E04               	movlw	4
 29385  016846  6E03               	movwf	i2Byte_GetZone@pMax,c
 29386  016848  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29387  01684C  0E02               	movlw	2
 29388  01684E  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29389  016850  ECB4  F0AB         	call	i2_Byte_GetZone	;wreg free
 29390  016854  0012               	return	
 29391  016856                     __end_ofi2_Byte_GetPair:
 29392                           	opt stack 0
 29393                           tosu	equ	0xFFF
 29394                           tosh	equ	0xFFE
 29395                           tosl	equ	0xFFD
 29396                           pclatu	equ	0xFFB
 29397                           pclath	equ	0xFFA
 29398                           tblptru	equ	0xFF8
 29399                           tblptrh	equ	0xFF7
 29400                           tblptrl	equ	0xFF6
 29401                           tablat	equ	0xFF5
 29402                           prodh	equ	0xFF4
 29403                           prodl	equ	0xFF3
 29404                           intcon	equ	0xFF2
 29405                           indf0	equ	0xFEF
 29406                           postinc0	equ	0xFEE
 29407                           fsr0h	equ	0xFEA
 29408                           fsr0l	equ	0xFE9
 29409                           wreg	equ	0xFE8
 29410                           indf1	equ	0xFE7
 29411                           postdec1	equ	0xFE5
 29412                           fsr1h	equ	0xFE2
 29413                           fsr1l	equ	0xFE1
 29414                           indf2	equ	0xFDF
 29415                           postinc2	equ	0xFDE
 29416                           postdec2	equ	0xFDD
 29417                           plusw2	equ	0xFDB
 29418                           fsr2h	equ	0xFDA
 29419                           fsr2l	equ	0xFD9
 29420                           status	equ	0xFD8
 29421                           
 29422 ;; *************** function i2_Byte_GetZone *****************
 29423 ;; Defined at:
 29424 ;;		line 64 in file "Library/Types.c"
 29425 ;; Parameters:    Size  Location     Type
 29426 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29427 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29428 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29429 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29430 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29431 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29432 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29433 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29434 ;;		 -> NULL(0), 
 29435 ;;  pMax            1    2[COMRAM] unsigned char 
 29436 ;;  pChunk          1    3[COMRAM] unsigned char 
 29437 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29438 ;; Auto vars:     Size  Location     Type
 29439 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29440 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29441 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29442 ;; Return value:  Size  Location     Type
 29443 ;;                  1    wreg      unsigned char 
 29444 ;; Registers used:
 29445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29446 ;; Tracked objects:
 29447 ;;		On entry : 0/0
 29448 ;;		On exit  : 0/0
 29449 ;;		Unchanged: 0/0
 29450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29451 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29452 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29454 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29455 ;;Total ram usage:        9 bytes
 29456 ;; Hardware stack levels used:    1
 29457 ;; This function calls:
 29458 ;;		Nothing
 29459 ;; This function is called by:
 29460 ;;		i2_Byte_GetPair
 29461 ;; This function uses a non-reentrant model
 29462 ;;
 29463                           
 29464                           	psect	text155
 29465  015768                     __ptext155:
 29466                           	opt stack 0
 29467  015768                     i2_Byte_GetZone:
 29468                           	opt stack 13
 29469                           
 29470                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29471                           
 29472                           ;incstack = 0
 29473  015768  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29474  01576C  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29475  015770  0E00               	movlw	low (__mediumconst shr (0+16))
 29476  015772  6EF8               	movwf	tblptru,c
 29477  015774  0E0F               	movlw	(high __ramtop+-1)
 29478  015776  64F7               	cpfsgt	tblptrh,c
 29479  015778  D003               	bra	i2u504_47
 29480  01577A  0008               	tblrd		*
 29481  01577C  50F5               	movf	tablat,w,c
 29482  01577E  D005               	bra	i2u504_40
 29483  015780                     i2u504_47:
 29484  015780  CFF6 FFE9          	movff	tblptrl,fsr0l
 29485  015784  CFF7 FFEA          	movff	tblptrh,fsr0h
 29486  015788  50EF               	movf	indf0,w,c
 29487  01578A                     i2u504_40:
 29488  01578A  6E09               	movwf	i2Byte_GetZone@Output,c
 29489                           
 29490                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29491  01578C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29492  01578E  0D01               	mullw	1
 29493  015790  0E33               	movlw	low _MASKS
 29494  015792  24F3               	addwf	prodl,w,c
 29495  015794  6EF6               	movwf	tblptrl,c
 29496  015796  0EFD               	movlw	high _MASKS
 29497  015798  20F4               	addwfc	prodh,w,c
 29498  01579A  6EF7               	movwf	tblptrh,c
 29499  01579C                     	if	1	;There are 3 active tblptr bytes
 29500  01579C  6AF8               	clrf	tblptru,c
 29501  01579E  0E00               	movlw	low (__mediumconst shr (0+16))
 29502  0157A0  22F8               	addwfc	tblptru,f,c
 29503  0157A2                     	endif
 29504  0157A2  0008               	tblrd		*
 29505  0157A4  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29506                           
 29507                           ;Types.c: 68: UINT8 Offset = 0;
 29508  0157A8  0E00               	movlw	0
 29509  0157AA  6E08               	movwf	i2Byte_GetZone@Offset,c
 29510                           
 29511                           ;Types.c: 70: while (pChunk >= pMax)
 29512  0157AC  D003               	goto	i2l7929
 29513  0157AE                     i2l7925:
 29514                           
 29515                           ;Types.c: 71: {
 29516                           ;Types.c: 72: pChunk -= pMax;
 29517  0157AE  5003               	movf	i2Byte_GetZone@pMax,w,c
 29518  0157B0  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 29519                           
 29520                           ;Types.c: 73: Offset += 1;
 29521  0157B2  2A08               	incf	i2Byte_GetZone@Offset,f,c
 29522  0157B4                     i2l7929:
 29523  0157B4  5003               	movf	i2Byte_GetZone@pMax,w,c
 29524  0157B6  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 29525  0157B8  B0D8               	btfsc	status,0,c
 29526  0157BA  D7F9               	goto	i2l7925
 29527                           
 29528                           ;Types.c: 74: }
 29529                           ;Types.c: 75: pChunk *= pChunkSize;
 29530  0157BC  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29531  0157BE  0204               	mulwf	i2Byte_GetZone@pChunk,c
 29532  0157C0  50F3               	movf	prodl,w,c
 29533  0157C2  6E04               	movwf	i2Byte_GetZone@pChunk,c
 29534                           
 29535                           ;Types.c: 76: pChunk += Offset;
 29536  0157C4  5008               	movf	i2Byte_GetZone@Offset,w,c
 29537  0157C6  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 29538                           
 29539                           ;Types.c: 78: Output >>= pChunk;
 29540  0157C8  2804               	incf	i2Byte_GetZone@pChunk,w,c
 29541  0157CA  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 29542  0157CC  D002               	goto	i2u506_40
 29543  0157CE                     i2u506_45:
 29544  0157CE  90D8               	bcf	status,0,c
 29545  0157D0  3209               	rrcf	i2Byte_GetZone@Output,f,c
 29546  0157D2                     i2u506_40:
 29547  0157D2  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 29548  0157D4  D7FC               	goto	i2u506_45
 29549                           
 29550                           ;Types.c: 79: Output &= MASK;
 29551  0157D6  5007               	movf	i2Byte_GetZone@MASK,w,c
 29552  0157D8  1609               	andwf	i2Byte_GetZone@Output,f,c
 29553                           
 29554                           ;Types.c: 80: return Output;
 29555  0157DA  5009               	movf	i2Byte_GetZone@Output,w,c
 29556  0157DC  0012               	return	
 29557  0157DE                     __end_ofi2_Byte_GetZone:
 29558                           	opt stack 0
 29559                           tosu	equ	0xFFF
 29560                           tosh	equ	0xFFE
 29561                           tosl	equ	0xFFD
 29562                           pclatu	equ	0xFFB
 29563                           pclath	equ	0xFFA
 29564                           tblptru	equ	0xFF8
 29565                           tblptrh	equ	0xFF7
 29566                           tblptrl	equ	0xFF6
 29567                           tablat	equ	0xFF5
 29568                           prodh	equ	0xFF4
 29569                           prodl	equ	0xFF3
 29570                           intcon	equ	0xFF2
 29571                           indf0	equ	0xFEF
 29572                           postinc0	equ	0xFEE
 29573                           fsr0h	equ	0xFEA
 29574                           fsr0l	equ	0xFE9
 29575                           wreg	equ	0xFE8
 29576                           indf1	equ	0xFE7
 29577                           postdec1	equ	0xFE5
 29578                           fsr1h	equ	0xFE2
 29579                           fsr1l	equ	0xFE1
 29580                           indf2	equ	0xFDF
 29581                           postinc2	equ	0xFDE
 29582                           postdec2	equ	0xFDD
 29583                           plusw2	equ	0xFDB
 29584                           fsr2h	equ	0xFDA
 29585                           fsr2l	equ	0xFD9
 29586                           status	equ	0xFD8
 29587                           
 29588 ;; *************** function i2_Byte_SetBit *****************
 29589 ;; Defined at:
 29590 ;;		line 32 in file "Library/Types.c"
 29591 ;; Parameters:    Size  Location     Type
 29592 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29593 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29594 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29595 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29596 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29597 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29598 ;;		 -> NULL(0), 
 29599 ;;  pBit            1    2[COMRAM] unsigned char 
 29600 ;;  pValue          1    3[COMRAM] unsigned char 
 29601 ;; Auto vars:     Size  Location     Type
 29602 ;;		None
 29603 ;; Return value:  Size  Location     Type
 29604 ;;                  1    wreg      void 
 29605 ;; Registers used:
 29606 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29607 ;; Tracked objects:
 29608 ;;		On entry : 0/0
 29609 ;;		On exit  : 0/0
 29610 ;;		Unchanged: 0/0
 29611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29614 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29615 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29616 ;;Total ram usage:        7 bytes
 29617 ;; Hardware stack levels used:    1
 29618 ;; This function calls:
 29619 ;;		Nothing
 29620 ;; This function is called by:
 29621 ;;		i2_Port_SetPin
 29622 ;; This function uses a non-reentrant model
 29623 ;;
 29624                           
 29625                           	psect	text156
 29626  015FB0                     __ptext156:
 29627                           	opt stack 0
 29628  015FB0                     i2_Byte_SetBit:
 29629                           	opt stack 15
 29630                           
 29631                           ;Types.c: 34: pValue &= 1;
 29632                           
 29633                           ;incstack = 0
 29634  015FB0  0E01               	movlw	1
 29635  015FB2  1604               	andwf	i2Byte_SetBit@pValue,f,c
 29636                           
 29637                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29638  015FB4  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29639  015FB8  0E01               	movlw	1
 29640  015FBA  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 29641  015FBC  2A05               	incf	??i2_Byte_SetBit,f,c
 29642  015FBE  D002               	goto	i2u672_44
 29643  015FC0                     i2u672_45:
 29644  015FC0  90D8               	bcf	status,0,c
 29645  015FC2  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29646  015FC4                     i2u672_44:
 29647  015FC4  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29648  015FC6  D7FC               	goto	i2u672_45
 29649  015FC8  5006               	movf	??i2_Byte_SetBit+1,w,c
 29650  015FCA  0AFF               	xorlw	255
 29651  015FCC  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 29652  015FCE  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29653  015FD2  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29654  015FD6  5007               	movf	??i2_Byte_SetBit+2,w,c
 29655  015FD8  16DF               	andwf	indf2,f,c
 29656                           
 29657                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29658  015FDA  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29659  015FDE  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 29660  015FE2  2A05               	incf	??i2_Byte_SetBit,f,c
 29661  015FE4  D002               	goto	i2u673_44
 29662  015FE6                     i2u673_45:
 29663  015FE6  90D8               	bcf	status,0,c
 29664  015FE8  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29665  015FEA                     i2u673_44:
 29666  015FEA  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29667  015FEC  D7FC               	goto	i2u673_45
 29668  015FEE  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29669  015FF2  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29670  015FF6  5006               	movf	??i2_Byte_SetBit+1,w,c
 29671  015FF8  12DF               	iorwf	indf2,f,c
 29672  015FFA  0012               	return		;funcret
 29673  015FFC                     __end_ofi2_Byte_SetBit:
 29674                           	opt stack 0
 29675                           tosu	equ	0xFFF
 29676                           tosh	equ	0xFFE
 29677                           tosl	equ	0xFFD
 29678                           pclatu	equ	0xFFB
 29679                           pclath	equ	0xFFA
 29680                           tblptru	equ	0xFF8
 29681                           tblptrh	equ	0xFF7
 29682                           tblptrl	equ	0xFF6
 29683                           tablat	equ	0xFF5
 29684                           prodh	equ	0xFF4
 29685                           prodl	equ	0xFF3
 29686                           intcon	equ	0xFF2
 29687                           indf0	equ	0xFEF
 29688                           postinc0	equ	0xFEE
 29689                           fsr0h	equ	0xFEA
 29690                           fsr0l	equ	0xFE9
 29691                           wreg	equ	0xFE8
 29692                           indf1	equ	0xFE7
 29693                           postdec1	equ	0xFE5
 29694                           fsr1h	equ	0xFE2
 29695                           fsr1l	equ	0xFE1
 29696                           indf2	equ	0xFDF
 29697                           postinc2	equ	0xFDE
 29698                           postdec2	equ	0xFDD
 29699                           plusw2	equ	0xFDB
 29700                           fsr2h	equ	0xFDA
 29701                           fsr2l	equ	0xFD9
 29702                           status	equ	0xFD8
 29703                           
 29704 ;; *************** function i2_MXK_SwitchTo *****************
 29705 ;; Defined at:
 29706 ;;		line 105 in file "Library/MXK.c"
 29707 ;; Parameters:    Size  Location     Type
 29708 ;;  pModule         1    wreg     enum E6927
 29709 ;; Auto vars:     Size  Location     Type
 29710 ;;  pModule         1    7[COMRAM] enum E6927
 29711 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 29712 ;; Return value:  Size  Location     Type
 29713 ;;                  1    wreg      unsigned char 
 29714 ;; Registers used:
 29715 ;;		wreg, status,2, status,0, cstack
 29716 ;; Tracked objects:
 29717 ;;		On entry : 0/0
 29718 ;;		On exit  : 0/0
 29719 ;;		Unchanged: 0/0
 29720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29725 ;;Total ram usage:        2 bytes
 29726 ;; Hardware stack levels used:    1
 29727 ;; Hardware stack levels required when called:    1
 29728 ;; This function calls:
 29729 ;;		i2_delay_us
 29730 ;; This function is called by:
 29731 ;;		i2_Motor_Step
 29732 ;; This function uses a non-reentrant model
 29733 ;;
 29734                           
 29735                           	psect	text157
 29736  016494                     __ptext157:
 29737                           	opt stack 0
 29738  016494                     i2_MXK_SwitchTo:
 29739                           	opt stack 15
 29740                           
 29741                           ;incstack = 0
 29742                           ;i2MXK_SwitchTo@pModule stored from wreg
 29743  016494  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 29744                           
 29745                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 29746  016496  5086               	movf	3974,w,c	;volatile
 29747  016498  0B0F               	andlw	15
 29748  01649A  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 29749                           
 29750                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 29751  01649C  5043               	movf	_Bus_State,w,c
 29752  01649E  A4D8               	btfss	status,2,c
 29753  0164A0  D002               	goto	i2l9867
 29754                           
 29755                           ;MXK.c: 110: return 0;
 29756  0164A2  0E00               	movlw	0
 29757  0164A4  0012               	return	
 29758  0164A6                     i2l9867:
 29759                           
 29760                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 29761  0164A6  0E00               	movlw	0
 29762  0164A8  6E43               	movwf	_Bus_State,c
 29763                           
 29764                           ;MXK.c: 114: if (CUR != pModule)
 29765  0164AA  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 29766  0164AC  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 29767  0164AE  B4D8               	btfsc	status,2,c
 29768  0164B0  D00A               	goto	i2l9875
 29769                           
 29770                           ;MXK.c: 115: {
 29771                           ;MXK.c: 116: PORTG &= ~(0xF);
 29772  0164B2  0EF0               	movlw	240
 29773  0164B4  1686               	andwf	3974,f,c	;volatile
 29774                           
 29775                           ;MXK.c: 117: PORTG |= pModule;
 29776  0164B6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 29777  0164B8  1286               	iorwf	3974,f,c	;volatile
 29778                           
 29779                           ;MXK.c: 120: delay_us(10);
 29780  0164BA  0E00               	movlw	0
 29781  0164BC  6E02               	movwf	i2delay_us@us+1,c
 29782  0164BE  0E0A               	movlw	10
 29783  0164C0  6E01               	movwf	i2delay_us@us,c
 29784  0164C2  EC3D  F0B1         	call	i2_delay_us	;wreg free
 29785  0164C6                     i2l9875:
 29786                           
 29787                           ;MXK.c: 121: }
 29788                           ;MXK.c: 122: return 1;
 29789  0164C6  0E01               	movlw	1
 29790  0164C8  0012               	return	
 29791  0164CA                     __end_ofi2_MXK_SwitchTo:
 29792                           	opt stack 0
 29793                           tosu	equ	0xFFF
 29794                           tosh	equ	0xFFE
 29795                           tosl	equ	0xFFD
 29796                           pclatu	equ	0xFFB
 29797                           pclath	equ	0xFFA
 29798                           tblptru	equ	0xFF8
 29799                           tblptrh	equ	0xFF7
 29800                           tblptrl	equ	0xFF6
 29801                           tablat	equ	0xFF5
 29802                           prodh	equ	0xFF4
 29803                           prodl	equ	0xFF3
 29804                           intcon	equ	0xFF2
 29805                           indf0	equ	0xFEF
 29806                           postinc0	equ	0xFEE
 29807                           fsr0h	equ	0xFEA
 29808                           fsr0l	equ	0xFE9
 29809                           wreg	equ	0xFE8
 29810                           indf1	equ	0xFE7
 29811                           postdec1	equ	0xFE5
 29812                           fsr1h	equ	0xFE2
 29813                           fsr1l	equ	0xFE1
 29814                           indf2	equ	0xFDF
 29815                           postinc2	equ	0xFDE
 29816                           postdec2	equ	0xFDD
 29817                           plusw2	equ	0xFDB
 29818                           fsr2h	equ	0xFDA
 29819                           fsr2l	equ	0xFD9
 29820                           status	equ	0xFD8
 29821                           
 29822 ;; *************** function i2_delay_us *****************
 29823 ;; Defined at:
 29824 ;;		line 255 in file "Library/Types.c"
 29825 ;; Parameters:    Size  Location     Type
 29826 ;;  us              2    0[COMRAM] unsigned short 
 29827 ;; Auto vars:     Size  Location     Type
 29828 ;;  delay_us        4    2[COMRAM] unsigned long 
 29829 ;; Return value:  Size  Location     Type
 29830 ;;                  1    wreg      void 
 29831 ;; Registers used:
 29832 ;;		wreg, status,2, status,0
 29833 ;; Tracked objects:
 29834 ;;		On entry : 0/0
 29835 ;;		On exit  : 0/0
 29836 ;;		Unchanged: 0/0
 29837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29839 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29841 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29842 ;;Total ram usage:        6 bytes
 29843 ;; Hardware stack levels used:    1
 29844 ;; This function calls:
 29845 ;;		Nothing
 29846 ;; This function is called by:
 29847 ;;		i2_MXK_SwitchTo
 29848 ;; This function uses a non-reentrant model
 29849 ;;
 29850                           
 29851                           	psect	text158
 29852  01627A                     __ptext158:
 29853                           	opt stack 0
 29854  01627A                     i2_delay_us:
 29855                           	opt stack 15
 29856                           
 29857                           ;Types.c: 256: unsigned long u;
 29858                           ;Types.c: 257: while (us--) {
 29859                           
 29860                           ;incstack = 0
 29861  01627A  D016               	goto	i2l9377
 29862  01627C                     i2l9369:
 29863                           
 29864                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 29865  01627C  0E00               	movlw	0
 29866  01627E  6E03               	movwf	i2delay_us@u,c
 29867  016280  0E00               	movlw	0
 29868  016282  6E04               	movwf	i2delay_us@u+1,c
 29869  016284  0E00               	movlw	0
 29870  016286  6E05               	movwf	i2delay_us@u+2,c
 29871  016288  0E00               	movlw	0
 29872  01628A  6E06               	movwf	i2delay_us@u+3,c
 29873  01628C                     i2l9371:
 29874  01628C  5003               	movf	i2delay_us@u,w,c
 29875  01628E  1004               	iorwf	i2delay_us@u+1,w,c
 29876  016290  1005               	iorwf	i2delay_us@u+2,w,c
 29877  016292  1006               	iorwf	i2delay_us@u+3,w,c
 29878  016294  A4D8               	btfss	status,2,c
 29879  016296  D008               	goto	i2l9377
 29880  016298  F000               	nop		; ;# 
 29881  01629A  0E01               	movlw	1
 29882  01629C  2603               	addwf	i2delay_us@u,f,c
 29883  01629E  0E00               	movlw	0
 29884  0162A0  2204               	addwfc	i2delay_us@u+1,f,c
 29885  0162A2  2205               	addwfc	i2delay_us@u+2,f,c
 29886  0162A4  2206               	addwfc	i2delay_us@u+3,f,c
 29887  0162A6  D7F2               	goto	i2l9371
 29888  0162A8                     i2l9377:
 29889  0162A8  0601               	decf	i2delay_us@us,f,c
 29890  0162AA  A0D8               	btfss	status,0,c
 29891  0162AC  0602               	decf	i2delay_us@us+1,f,c
 29892  0162AE  2801               	incf	i2delay_us@us,w,c
 29893  0162B0  E1E5               	bnz	i2l9369
 29894  0162B2  2802               	incf	i2delay_us@us+1,w,c
 29895  0162B4  B4D8               	btfsc	status,2,c
 29896  0162B6  0012               	return	
 29897  0162B8  D7E1               	goto	i2l9369
 29898  0162BA                     __end_ofi2_delay_us:
 29899                           	opt stack 0
 29900                           tosu	equ	0xFFF
 29901                           tosh	equ	0xFFE
 29902                           tosl	equ	0xFFD
 29903                           pclatu	equ	0xFFB
 29904                           pclath	equ	0xFFA
 29905                           tblptru	equ	0xFF8
 29906                           tblptrh	equ	0xFF7
 29907                           tblptrl	equ	0xFF6
 29908                           tablat	equ	0xFF5
 29909                           prodh	equ	0xFF4
 29910                           prodl	equ	0xFF3
 29911                           intcon	equ	0xFF2
 29912                           indf0	equ	0xFEF
 29913                           postinc0	equ	0xFEE
 29914                           fsr0h	equ	0xFEA
 29915                           fsr0l	equ	0xFE9
 29916                           wreg	equ	0xFE8
 29917                           indf1	equ	0xFE7
 29918                           postdec1	equ	0xFE5
 29919                           fsr1h	equ	0xFE2
 29920                           fsr1l	equ	0xFE1
 29921                           indf2	equ	0xFDF
 29922                           postinc2	equ	0xFDE
 29923                           postdec2	equ	0xFDD
 29924                           plusw2	equ	0xFDB
 29925                           fsr2h	equ	0xFDA
 29926                           fsr2l	equ	0xFD9
 29927                           status	equ	0xFD8
 29928                           
 29929 ;; *************** function i2_MXK_Release *****************
 29930 ;; Defined at:
 29931 ;;		line 130 in file "Library/MXK.c"
 29932 ;; Parameters:    Size  Location     Type
 29933 ;;		None
 29934 ;; Auto vars:     Size  Location     Type
 29935 ;;		None
 29936 ;; Return value:  Size  Location     Type
 29937 ;;                  1    wreg      unsigned char 
 29938 ;; Registers used:
 29939 ;;		wreg, status,2, status,0
 29940 ;; Tracked objects:
 29941 ;;		On entry : 0/0
 29942 ;;		On exit  : 0/0
 29943 ;;		Unchanged: 0/0
 29944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29949 ;;Total ram usage:        0 bytes
 29950 ;; Hardware stack levels used:    1
 29951 ;; This function calls:
 29952 ;;		Nothing
 29953 ;; This function is called by:
 29954 ;;		i2_Motor_Step
 29955 ;; This function uses a non-reentrant model
 29956 ;;
 29957                           
 29958                           	psect	text159
 29959  016A10                     __ptext159:
 29960                           	opt stack 0
 29961  016A10                     i2_MXK_Release:
 29962                           	opt stack 16
 29963                           
 29964                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 29965                           
 29966                           ;incstack = 0
 29967  016A10  0E01               	movlw	1
 29968  016A12  6E43               	movwf	_Bus_State,c
 29969                           
 29970                           ;MXK.c: 135: return 1;
 29971                           ;	Return value of i2_MXK_Release is never used
 29972  016A14  0012               	return	
 29973  016A16                     __end_ofi2_MXK_Release:
 29974                           	opt stack 0
 29975                           tosu	equ	0xFFF
 29976                           tosh	equ	0xFFE
 29977                           tosl	equ	0xFFD
 29978                           pclatu	equ	0xFFB
 29979                           pclath	equ	0xFFA
 29980                           tblptru	equ	0xFF8
 29981                           tblptrh	equ	0xFF7
 29982                           tblptrl	equ	0xFF6
 29983                           tablat	equ	0xFF5
 29984                           prodh	equ	0xFF4
 29985                           prodl	equ	0xFF3
 29986                           intcon	equ	0xFF2
 29987                           indf0	equ	0xFEF
 29988                           postinc0	equ	0xFEE
 29989                           fsr0h	equ	0xFEA
 29990                           fsr0l	equ	0xFE9
 29991                           wreg	equ	0xFE8
 29992                           indf1	equ	0xFE7
 29993                           postdec1	equ	0xFE5
 29994                           fsr1h	equ	0xFE2
 29995                           fsr1l	equ	0xFE1
 29996                           indf2	equ	0xFDF
 29997                           postinc2	equ	0xFDE
 29998                           postdec2	equ	0xFDD
 29999                           plusw2	equ	0xFDB
 30000                           fsr2h	equ	0xFDA
 30001                           fsr2l	equ	0xFD9
 30002                           status	equ	0xFD8
 30003                           
 30004 ;; *************** function i2_MXK_Queue *****************
 30005 ;; Defined at:
 30006 ;;		line 144 in file "Library/MXK.c"
 30007 ;; Parameters:    Size  Location     Type
 30008 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30009 ;;		 -> Absolute function(1), Motor_Step(1), 
 30010 ;; Auto vars:     Size  Location     Type
 30011 ;;		None
 30012 ;; Return value:  Size  Location     Type
 30013 ;;                  1    wreg      void 
 30014 ;; Registers used:
 30015 ;;		wreg, status,2, status,0
 30016 ;; Tracked objects:
 30017 ;;		On entry : 0/0
 30018 ;;		On exit  : 0/0
 30019 ;;		Unchanged: 0/0
 30020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30021 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30024 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30025 ;;Total ram usage:        3 bytes
 30026 ;; Hardware stack levels used:    1
 30027 ;; This function calls:
 30028 ;;		Nothing
 30029 ;; This function is called by:
 30030 ;;		i2_Motor_Step
 30031 ;; This function uses a non-reentrant model
 30032 ;;
 30033                           
 30034                           	psect	text160
 30035  016976                     __ptext160:
 30036                           	opt stack 0
 30037  016976                     i2_MXK_Queue:
 30038                           	opt stack 16
 30039                           
 30040                           ;MXK.c: 146: lQueue = pCallback;
 30041                           
 30042                           ;incstack = 0
 30043  016976  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30044  01697A  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30045  01697E  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30046  016982  0012               	return		;funcret
 30047  016984                     __end_ofi2_MXK_Queue:
 30048                           	opt stack 0
 30049                           tosu	equ	0xFFF
 30050                           tosh	equ	0xFFE
 30051                           tosl	equ	0xFFD
 30052                           pclatu	equ	0xFFB
 30053                           pclath	equ	0xFFA
 30054                           tblptru	equ	0xFF8
 30055                           tblptrh	equ	0xFF7
 30056                           tblptrl	equ	0xFF6
 30057                           tablat	equ	0xFF5
 30058                           prodh	equ	0xFF4
 30059                           prodl	equ	0xFF3
 30060                           intcon	equ	0xFF2
 30061                           indf0	equ	0xFEF
 30062                           postinc0	equ	0xFEE
 30063                           fsr0h	equ	0xFEA
 30064                           fsr0l	equ	0xFE9
 30065                           wreg	equ	0xFE8
 30066                           indf1	equ	0xFE7
 30067                           postdec1	equ	0xFE5
 30068                           fsr1h	equ	0xFE2
 30069                           fsr1l	equ	0xFE1
 30070                           indf2	equ	0xFDF
 30071                           postinc2	equ	0xFDE
 30072                           postdec2	equ	0xFDD
 30073                           plusw2	equ	0xFDB
 30074                           fsr2h	equ	0xFDA
 30075                           fsr2l	equ	0xFD9
 30076                           status	equ	0xFD8
 30077                           tosu	equ	0xFFF
 30078                           tosh	equ	0xFFE
 30079                           tosl	equ	0xFFD
 30080                           pclatu	equ	0xFFB
 30081                           pclath	equ	0xFFA
 30082                           tblptru	equ	0xFF8
 30083                           tblptrh	equ	0xFF7
 30084                           tblptrl	equ	0xFF6
 30085                           tablat	equ	0xFF5
 30086                           prodh	equ	0xFF4
 30087                           prodl	equ	0xFF3
 30088                           intcon	equ	0xFF2
 30089                           indf0	equ	0xFEF
 30090                           postinc0	equ	0xFEE
 30091                           fsr0h	equ	0xFEA
 30092                           fsr0l	equ	0xFE9
 30093                           wreg	equ	0xFE8
 30094                           indf1	equ	0xFE7
 30095                           postdec1	equ	0xFE5
 30096                           fsr1h	equ	0xFE2
 30097                           fsr1l	equ	0xFE1
 30098                           indf2	equ	0xFDF
 30099                           postinc2	equ	0xFDE
 30100                           postdec2	equ	0xFDD
 30101                           plusw2	equ	0xFDB
 30102                           fsr2h	equ	0xFDA
 30103                           fsr2l	equ	0xFD9
 30104                           status	equ	0xFD8
 30105                           
 30106                           	psect	text161
 30107  000000                     __ptext161:
 30108                           	opt stack 0
 30109                           tosu	equ	0xFFF
 30110                           tosh	equ	0xFFE
 30111                           tosl	equ	0xFFD
 30112                           pclatu	equ	0xFFB
 30113                           pclath	equ	0xFFA
 30114                           tblptru	equ	0xFF8
 30115                           tblptrh	equ	0xFF7
 30116                           tblptrl	equ	0xFF6
 30117                           tablat	equ	0xFF5
 30118                           prodh	equ	0xFF4
 30119                           prodl	equ	0xFF3
 30120                           intcon	equ	0xFF2
 30121                           indf0	equ	0xFEF
 30122                           postinc0	equ	0xFEE
 30123                           fsr0h	equ	0xFEA
 30124                           fsr0l	equ	0xFE9
 30125                           wreg	equ	0xFE8
 30126                           indf1	equ	0xFE7
 30127                           postdec1	equ	0xFE5
 30128                           fsr1h	equ	0xFE2
 30129                           fsr1l	equ	0xFE1
 30130                           indf2	equ	0xFDF
 30131                           postinc2	equ	0xFDE
 30132                           postdec2	equ	0xFDD
 30133                           plusw2	equ	0xFDB
 30134                           fsr2h	equ	0xFDA
 30135                           fsr2l	equ	0xFD9
 30136                           status	equ	0xFD8
 30137                           
 30138                           	psect	rparam
 30139  0000                     tosu	equ	0xFFF
 30140                           tosh	equ	0xFFE
 30141                           tosl	equ	0xFFD
 30142                           pclatu	equ	0xFFB
 30143                           pclath	equ	0xFFA
 30144                           tblptru	equ	0xFF8
 30145                           tblptrh	equ	0xFF7
 30146                           tblptrl	equ	0xFF6
 30147                           tablat	equ	0xFF5
 30148                           prodh	equ	0xFF4
 30149                           prodl	equ	0xFF3
 30150                           intcon	equ	0xFF2
 30151                           indf0	equ	0xFEF
 30152                           postinc0	equ	0xFEE
 30153                           fsr0h	equ	0xFEA
 30154                           fsr0l	equ	0xFE9
 30155                           wreg	equ	0xFE8
 30156                           indf1	equ	0xFE7
 30157                           postdec1	equ	0xFE5
 30158                           fsr1h	equ	0xFE2
 30159                           fsr1l	equ	0xFE1
 30160                           indf2	equ	0xFDF
 30161                           postinc2	equ	0xFDE
 30162                           postdec2	equ	0xFDD
 30163                           plusw2	equ	0xFDB
 30164                           fsr2h	equ	0xFDA
 30165                           fsr2l	equ	0xFD9
 30166                           status	equ	0xFD8
 30167                           
 30168                           	psect	temp
 30169  000049                     btemp:
 30170                           	opt stack 0
 30171  000049                     	ds	1
 30172  0000                     int$flags	set	btemp
 30173                           tosu	equ	0xFFF
 30174                           tosh	equ	0xFFE
 30175                           tosl	equ	0xFFD
 30176                           pclatu	equ	0xFFB
 30177                           pclath	equ	0xFFA
 30178                           tblptru	equ	0xFF8
 30179                           tblptrh	equ	0xFF7
 30180                           tblptrl	equ	0xFF6
 30181                           tablat	equ	0xFF5
 30182                           prodh	equ	0xFF4
 30183                           prodl	equ	0xFF3
 30184                           intcon	equ	0xFF2
 30185                           indf0	equ	0xFEF
 30186                           postinc0	equ	0xFEE
 30187                           fsr0h	equ	0xFEA
 30188                           fsr0l	equ	0xFE9
 30189                           wreg	equ	0xFE8
 30190                           indf1	equ	0xFE7
 30191                           postdec1	equ	0xFE5
 30192                           fsr1h	equ	0xFE2
 30193                           fsr1l	equ	0xFE1
 30194                           indf2	equ	0xFDF
 30195                           postinc2	equ	0xFDE
 30196                           postdec2	equ	0xFDD
 30197                           plusw2	equ	0xFDB
 30198                           fsr2h	equ	0xFDA
 30199                           fsr2l	equ	0xFD9
 30200                           status	equ	0xFD8


Data Sizes:
    Strings     129
    Constant    806
    Data        28
    BSS         691
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160    110     158
    BANK1           256     13     248
    BANK2           256     10     110
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_11(CODE[16]), STR_10(CODE[15]), STR_9(CODE[12]), STR_8(CODE[12]), 
		 -> STR_7(CODE[13]), STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[12]), 
		 -> STR_3(CODE[18]), STR_2(CODE[23]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK1[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), 

    ADC_Sequence@pItemA	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_printToScreen
    _printToScreen->_pow
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    ___fltol->___flmul
    _eval_poly->___fladd
    ___flsub->___fladd
    ___fladd->___flmul
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _FunctADC->_ADC_Start
    _ADC_Start->_ADC_SetChannel
    _init->_HMI_Init
    _Motor_Init->_Port_SetPinType
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _FunctInitADC->_ADC_Init
    _ADC_Init->_ADC_SetupIO
    _Motor_Speed->_Timer0_Init
    _Timer0_Init->___lldiv
    _Motor_Move->_Timer0_Start

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _printToScreen->_pow

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printToScreen

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1365757
                                            104 BANK0      6     6      0
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                         _Motor_Move
                        _Motor_Speed
                             ___wmul
                               _init
                           _inputVar
                      _printToScreen
 ---------------------------------------------------------------------------------
 (1) _printToScreen                                       12    12      0  133558
                                            102 BANK0      2     2      0
                                              0 BANK2     10    10      0
                        _ADC_Voltage
                     _Console_Render
              _Console_SetForecolour
                         _HMI_Render
                      _HMI_SetNumber
                            ___flmul
                            ___fltol
                                _pow
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              21    17      4    5964
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   71356
                                             94 BANK0      8     0      8
                                              0 BANK1     13    13      0
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   22932
                                             75 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   38654
                                             83 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     663
                                             75 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4    9755
                                             59 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     945
                                             39 BANK0     10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   10741
                                             59 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5359
                                             59 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4726
                                             39 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     521
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _Console_SetForecolour                                2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    8841
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1152
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    4849
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _inputVar                                             1     1      0   96525
                                             36 BANK0      1     1      0
                           _FunctADC
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84557
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84557
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37189
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4094
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctADC                                             0     0      0     310
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2     310
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0 1098738
                       _Console_Init
                       _FunctInitADC
                    _FunctInitButton
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (7) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (8) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (9) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (10) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctInitADC                                         0     0      0    2935
                           _ADC_Init
                       _ADC_Sequence
 ---------------------------------------------------------------------------------
 (3) _ADC_Sequence                                         4     0      4    1067
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             3     0      3    1868
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (4) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Motor_Speed                                          4     0      4    3839
                                             27 BANK0      4     0      4
                        _Timer0_Init
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Motor_Move                                           6     2      4     915
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (2) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       14    14      0    1778
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _Motor_Move
     _Timer0_Start
   _Motor_Speed
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
     ___wmul (ARG)
   ___wmul
   _init
     _Console_Init
     _FunctInitADC
       _ADC_Init
         _ADC_Calibrate
           _ADC_Off
           _ADC_On
         _ADC_ClockDivision
         _ADC_ConversionTime
         _ADC_SetChannel
         _ADC_SetupIO
       _ADC_Sequence
     _FunctInitButton
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _inputVar
     _FunctADC
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _printToScreen
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Console_SetForecolour
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fltol
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      A      6E       9       43.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      D      F8       7       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24C      12        0.0%
DATA                 0      0     378       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Aug 24 09:31:16 2017

                   i2_Timer0_Stop 6A0A                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 4018  
                               _A 0044                      ___fldiv@aexp 0078  
                    ___fldiv@bexp 0077                                 _a 0045  
                               _i 00E9                                 _j 00E8  
                               _l 0047                                 _u 00E7  
                               _w 0048                      ___fldiv@sign 006C  
                    ___awdiv@sign 0065                __size_of_ADC_Start 0084  
             ___wmul@multiplicand 0062                     _HMI_DIPSwitch 686E  
              LCD_DrawField@pSize 0078                LCD_DrawField@count 007E  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 69A8  
            ADC_ClockDivision@reg 0061                       ?_LED_Toggle 0001  
                   ??_Console_Tab 0068                       ?_HMI_GetBar 0001  
                             l615 0CEC                               l528 14E4  
                             l617 0CF0                               l655 66A2  
                             l680 5A9C                               l657 66A6  
                             l685 5AC2                               _PR2 000FCB  
                             _exp 14E6                               _log 30D0  
                             _val 00DA                               _pow 2308  
                 __end_of_ADC_Off 69EC                       ?_HMI_SetBar 0001  
              ??_Event_TestButton 0079                      _Word_GetPair 6336  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 0067        __end_of_ADC_ConversionTime 6166  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                    Console_Tab@c 006F                      Console_Tab@i 006E  
             LCD_DrawField@pField 0072                      Console_Tab@t 006D  
      __size_of_ADC_ClockDivision 008A                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 627A  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 5F12           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 4D20                      ___fltol@exp1 0090  
                    _Word_SetPair 61AC                     ?_Byte_GetZone 0060  
                            l1310 6146                              l1207 48F8  
                            l1056 2124                              l1153 2700  
                            l1082 44DC                              l1253 691C  
                            l1158 62F6                              l2038 1A94  
                            l2070 39E4                              l2311 2EF4  
                            l1279 550E                              l2511 575E  
                            l2521 5D52                              l2630 1040  
                            l2622 0F42                              l2543 2358  
                            l2458 482E                              l2619 0F9A  
                            l2563 01E0                              l2707 176E  
                            l2628 0FD2                              l2580 0354  
                            l2564 01D4                              l2548 24F6  
                            l2565 01A0                              l2717 3CBE  
                            l2671 274C                              l2656 07F8  
                            l2649 055C                              l2666 090A  
                            l2658 0866                              l2685 2854  
                            l2589 03E8                              l2686 286C  
                            l2678 27F8                              ?_exp 00B3  
                            ?_log 00AB                    ??_Console_Init 0060  
           Port_SetPinType@pInput 0086                              ?_pow 00BE  
                            STR_1 FFFB                              STR_2 FF7D  
                            STR_3 FF94                              STR_4 FFEA  
                            STR_5 FFF6                              STR_6 FFF7  
                            STR_7 FFC5                              STR_8 FFDE  
                            STR_9 FFD2                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F               __end_of_GetPortPORT 4FBC  
                            _PIR1 000F9E                              u9010 518A  
                            _PIR2 000FA1                              _PIR3 000FA4  
                            u9030 560A                              u9015 5184  
                            u9104 4A50                              u9120 619A  
             __end_of_GetPortTRIS 4E70                              u9105 4A4A  
                            u9125 6194                              u9064 5CB2  
                            u9065 5CAC                              u9074 5CE4  
                            u9075 5CDE                              u9340 5C60  
                            u9094 4A1E                              u9350 5C8A  
                            u9095 4A18                              u9265 6948  
                            u9266 694A                              u9605 3824  
                            u9704 5324                              u9800 016A  
                            u9705 531E                              u9810 0182  
                            _SPI1 0150                              u9820 0184  
                            _SPI2 015B                              u9590 6034  
                            u9595 602E                              u8990 5124  
                            _TMR0 000FD6                              u8997 511A  
                            _gISR 00CE                Event_DIPSwitch@Bar 007A  
                   ??_Byte_GetBit 0063              __size_of_ADC_SetupIO 0032  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 65C0  
                            _main 3952                              _init 5BCA  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 41EE                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0049  
                            _zero 0046                              exp@x 00B3  
                            log@x 00AB                  __end_of_ADC_Init 56F0  
                   ??_Byte_SetBit 0064                              pow@x 00BE  
                            pow@y 00C2                __size_of_LCD_Reset 0050  
            __size_of_ADC_Voltage 00D8                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 0065  
                            start 148A                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
               Timer0_Init@DIVIDE 0077                   ?_SPI_DisableISR 0060  
                Motor_Move@pMotor 0063               HMI_SetButton@pValue 0066  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FF23  
            Set_Rotation@rotation 0066            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A                       ?_ISR_Enable 0001  
                           ??_exp 00B7                             ??_log 00AF  
                           ??_pow 00C6      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 5E70                  __end_of_LCD_Init 3546  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 5DBE                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 2702                             l12101 47C8  
                           l12021 484C                             l12015 5C92  
                           l12007 5C64                             l12121 28E8  
                           l12203 1E12                             l12123 290E  
                           l13011 4E08                             l13003 4DEC  
                           l12043 48E6                             l12109 481C  
                           l12205 1E2E                             l12141 2A52  
                           l12029 48A0                             l12037 48BC  
                           l12061 46F8                             l13101 2F4A  
                           l12135 29E6                             l12143 2A6E  
                           l13023 4E32                             l13015 4E16  
                           l13007 4DFA                             l12039 48CC  
                           l12071 4728                             l12055 46E2  
                           l12303 4656                             l13201 5422  
                           l12129 297A                             l11521 45BC  
                           l11513 4562                             l12153 60DC  
                           l14001 3508                             l13033 1EDA  
                           l13121 2F68                             l13113 2F5C  
                           l13105 2F50                             l13203 542A  
                           l11435 514E                             l12155 60F4  
                           l12163 5AF8                             l12171 5B36  
                           l13019 4E24                             l13043 1F8C  
                           l13035 1EFC                             l13051 1FEA  
                           l11611 17BA                             l11603 17B2  
                           l12067 4716                             l12083 4766  
                           l12307 4662                             l14013 547A  
                           l13205 5454                             l11541 5BC4  
                           l12229 386C                             l12237 3888  
                           l11517 458C                             l12165 5B0A  
                           l13029 4E40                             l12181 60D0  
                           l12069 4722                             l13133 300A  
                           l13125 2F6E                             l13117 2F62  
                           l13109 2F56                             l14023 5494  
                           l11439 515A                             l12263 65B2  
                           l12239 38D2                             l11527 45E6  
                           l12159 610C                             l13039 1F44  
                           l11711 181E                             l11703 1816  
                           l11631 17CE                             l11623 17C6  
                           l11615 17BE                             l11607 17B6  
                           l13311 0DAE                             l14103 62C4  
                           l12415 0120                             l12343 001E  
                           l12087 477A                             l12079 4758  
                           l12097 47B2                             l14017 5484  
                           l11465 6362                             l11481 5670  
                           l12193 1D3A                             l12257 66AA  
                           l13049 1FCE                             l13401 103A  
                           l13305 0D8A                             l12505 03E2  
                           l12433 01C4                             l12361 0078  
                           l12353 004C                             l13145 309A  
                           l12099 47C2                             l14019 548A  
                           l12187 1C84                             l12267 5E72  
                           l12275 5EAA                             l13235 6276  
                           l13227 624E                             l13083 14A6  
                           l11803 187A                             l11731 1832  
                           l11723 182A                             l11715 1822  
                           l11707 181A                             l11651 17E2  
                           l11643 17DA                             l11635 17D2  
                           l11627 17CA                             l11619 17C2  
                           l11571 1792                             l11563 178A  
                           l13411 1090                             l13331 0E0C  
                           l13315 0DB8                             l12523 0472  
                           l12515 043E                             l12451 0242  
                           l12443 0204                             l12427 01B4  
                           l12283 5F74                             l14029 54EC  
                           l13181 6140                             l12197 1DA6  
                           l12189 1CCE                             l12269 5E84  
                           l13077 1462                             l11813 1882  
                           l11821 5A38                             l13325 0DE8  
                           l12621 07E2                             l14061 2294  
                           l14053 2156                             l14045 212C  
                           l12453 0248                             l12461 0264  
                           l12429 01BA                             l12373 00B0  
                           l12349 0042                             l12293 5F92  
                           l14301 2B9C                             l13191 5402  
                           l11495 49D6                             l13247 6910  
                           l13079 1482                             l13087 14C6  
                           l11807 187E                             l11751 1846  
                           l11743 183E                             l11735 1836  
                           l11727 182E                             l11719 1826  
                           l11671 17F6                             l11663 17EE  
                           l11655 17E6                             l11647 17DE  
                           l11639 17D6                             l11591 17A6  
                           l11583 179E                             l11575 1796  
                           l11567 178E                             l11559 1786  
                           l11911 5D44                             l11903 5D0E  
                           l13415 10BE                             l13335 0E16  
                           l12551 04EA                             l14063 22C2  
                           l12535 0496                             l12527 047E  
                           l12519 0450                             l12471 0334  
                           l12367 008C                             l12295 5FAA  
                           l13193 5406                             l13185 53F0  
                           l11905 5D1A                             l13425 1104  
                           l13417 10D2                             l12553 04F0  
                           l12545 04C6                             l14049 214C  
                           l12529 0482                             l12457 0252  
                           l12385 00E4                             l12377 00BA  
                           l12713 3FA0                             l13505 3B46  
                           l11833 5238                             l11841 52AA  
                           l14305 2BF4                             l13195 540A  
                           l13187 53FA                             l11499 49E2  
                           l14091 26D4                             l14227 6304  
                           l11771 185A                             l11763 1852  
                           l11755 184A                             l11747 1842  
                           l11739 183A                             l11691 180A  
                           l11683 1802                             l11675 17FA  
                           l11667 17F2                             l11659 17EA  
                           l11595 17AA                             l11587 17A2  
                           l11579 179A                             l11907 5D20  
                           l13291 63E4                             l13427 1108  
                           l13419 10F4                             l13355 0E98  
                           l13347 0E6A                             l12651 08DC  
                           l12627 080C                             l12571 054A  
                           l12563 0520                             l12555 0502  
                           l14075 22EA                             l12731 4006  
                           l12723 3FD0                             l14307 2C00  
                           l13197 5414                             l13189 53FE  
                           l12821 0978                             l12813 0950  
                           l14237 6332                             l13701 2D0A  
                           l11829 5A6C                             l13373 0F4E  
                           l13365 0F16                             l12661 092A  
                           l12653 08F0                             l12637 0860  
                           l12741 275C                             l14069 22D2  
                           l13445 644C                             l12485 039C  
                           l12725 3FE0                             l12717 3FB4  
                           l13509 3B58                             l14333 241C  
                           l14325 2394                             l11853 5366  
                           l14261 2ABA                             l13535 43EE  
                           l12831 0A3A                             l12823 098C  
                           l12815 095A                             l11927 5AB2  
                           l11919 5A8C                             l13615 5E40  
                           l13607 5218                             l12911 5EE4  
                           l13703 2D22                             l13711 2D6A  
                           l11791 186E                             l11783 1866  
                           l11775 185E                             l11767 1856  
                           l11759 184E                             l11695 180E  
                           l11687 1806                             l11679 17FE  
                           l11599 17AE                             l13391 0FE6  
                           l12663 0934                             l12647 08B6  
                           l12575 0570                             l12751 279C  
                           l12479 0386                             l12495 03BC  
                           l12727 3FEA                             l13463 3C00  
                           l14319 236C                             l11871 53C4  
                           l11863 5380                             l11839 52A8  
                           l14271 2B10                             l14255 2A9E  
                           l12841 0AEE                             l11937 5AD8  
                           l13705 2D3A                             l13713 2D9A  
                           l13385 0FBC                             l12569 0544  
                           l12761 2846                             l12753 27DA  
                           l12489 03A8                             l12497 03C2  
                           l12681 2EA2                             l12673 2E02  
                           l14337 244A                             l11857 5370  
                           l14281 2B40                             l14265 2AD2  
                           l15401 39CC                             l11955 5E12  
                           l11963 61DC                             l12851 0C12  
                           l12843 0B00                             l12819 0968  
                           l13619 5E4E                             l12915 5F00  
                           l12931 4EA0                             l12923 4E84  
                           l13707 2D52                             l11795 1872  
                           l11787 186A                             l11779 1862  
                           l11699 1812                             l11883 570E  
                           l13555 35AE                             l13379 0F96  
                           l12579 0584                             l12747 2784  
                           l13643 5830                             l13475 3E4A  
                           l13467 3C22                             l13459 3BEC  
                           l11859 5376                             l11875 53CA  
                           l14283 2B46                             l14259 2AB2  
                           l15411 3A2C                             l12845 0B28  
                           l13629 5E6A                             l13581 51C0  
                           l13901 3DD8                             l12909 5EC8  
                           l13717 2DA0                             l11885 571A  
                           l13557 35C4                             l12773 28BE  
                           l12749 278C                             l13733 44A2  
                           l13653 584C                             l13477 3EEE  
                           l12677 2E50                             l13493 3B16  
                           l13485 3AB0                             l14269 2ADC  
                           l14613 1B56                             l14605 1B08  
                           l12847 0B76                             l12855 0C60  
                           l12943 4ECA                             l12935 4EAE  
                           l12927 4E92                             l12919 4E76  
                           l11799 1876                             l11895 5750  
                           l11887 5720                             l11991 4298  
                           l12759 2836                             l13743 44BC  
                           l13639 5822                             l12687 2F40  
                           l14295 2B82                             l14623 1B7A  
                           l14631 1BCE                             l12865 0CF4  
                           l12849 0BC4                             l12857 0C7E  
                           l13593 51EC                             l12961 4F2A  
                           l12953 4EE6                             l15361 5BF2  
                           l13825 54F6                             l11993 42AC  
                           l13753 4526                             l13737 44AC  
                           l13673 5040                             l12697 3F32  
                           l12785 4932                             l13921 3126  
                           l14625 1B8C                             l14617 1B66  
                           l15417 3A50                             l13851 3712  
                           l12867 0D06                             l13587 51D6  
                           l13907 3DE2                             l15339 6552  
                           l13683 5D9E                             l12947 4ED8  
                           l12939 4EBC                             l11979 422C  
                           l11987 427C                             l13747 44E4  
                           l13739 44B2                             l13915 30F4  
                           l14299 2B96                             l15419 3A78  
                           l13861 3724                             l13685 5DAE  
                           l13677 5D62                             l12981 4F70  
                           l12973 4F54                             l12965 4F38  
                           l12957 4F1C                             l13757 4532  
                           l13669 501A                             l13781 55E0  
                           l13773 5592                             l14629 1BA4  
                __end_of_HMI_Poll 58C6                             l13863 3776  
                           l13599 5202                             l13679 5D80  
                           l12991 4F8C                             l13839 5570  
                           l13943 1558                             l14591 1ABE  
                           l15383 3956                             l13857 371C  
                           l12985 4F7E                             l12977 4F62  
                           l12969 4F46                             l13697 2D00  
                           l15369 5C24                             l13769 558A  
                           l13937 150E                             l14585 1A84  
                           l15393 3976                             l13891 3D96  
                           l13883 3D3A                             l12995 4DD0  
                           l13955 15E0                             l14595 1AD2  
                           l14579 1A3E                             l13885 3D58  
                           l13973 1736                             l13949 15A2  
                           l15397 3984                             l13991 3464  
                           l12999 4DDE                             l14599 1AE2  
                           l13985 33F6                             l13889 3D7A  
                           l13995 34D0                             l13997 34FA  
                           _I2C1T 0038                             _I2C2T 01B6  
                   ___fltol@sign1 008F                   __end_of___fladd 04A8  
                           ?_main 0001                             ?_init 0001  
                 __end_of___fldiv 112C                   __end_of___awdiv 4784  
                 __end_of___flneg 645E                             ?_itos 006C  
                           STR_10 FFB6                             STR_11 FFA6  
                 __end_of___flmul 094E                   __end_of___flsub 608E  
                 __end_of___fltol 4018                   _Event_DIPSwitch 65F0  
                 __end_of___lldiv 4840                             u11000 10A4  
                           u11100 3AE2                             u10260 08CA  
                           u10180 0784                             u11060 3C10  
                           u11108 3AE6                             u10350 3F52  
                           u11208 3558                             u10520 4964  
                           u11209 356C                             u10185 0778  
                           u10355 3F46           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 0062                             u10605 132C  
                           u10615 13AA                             u11600 3D6C  
                           u10528 4968                             u10625 13EC  
                           u11258 3694                             u10650 64EC  
                           u12090 23FE                             u10635 142E  
                           u10565 115A                             u11445 55A2  
                           u11198 445A                             u11710 33F4  
                           u12510 1B4C                             u10575 1172  
                           u10655 64E6                             u10744 6518  
                           u12408 4AA0                             u12440 1A72  
                           u10745 6512                             u10585 118A  
                           u12409 4AB4                             u12418 4AC0  
                           u10595 11AC                             u12419 4AD4  
                           u11580 3D18                             u12428 4AE0  
                           u11660 15AC                             u12429 4AF4  
                           u11590 3D2C                             u12438 4B00  
                           u11670 15AE                             u12439 4B14  
                           u12490 1AFE                             u13268 653E  
                           u12398 4A76                             u12399 4A8A  
                           _INDEX 0031                   __end_of___lwdiv 5768  
                 ??_printToScreen 00C6                             _MASKS FD33  
                 __end_of___lwmod 5D5C                   ___awdiv@counter 0064  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0018  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                   ?_FunctInitADC 0001                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 0076                    __CFG_FCMEN$OFF 000000  
                           _PortA 01A2                             _PortB 0198  
                           _PortC 00EC                             _PortD 018E  
                           _PortE 0184                             _PortF 01AC  
                           _PortG 017A                             _Speed 00F6  
         __end_of_Port_SetPinType 2A90                             _Steps 00D6  
                 _ADC_Initialised 00EA                    ??_Byte_GetPair 006C  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
           __size_of_ADC_Sequence 0046                   __end_of_dpowers FD33  
                  ??_Byte_GetZone 0065                             _floor 3BAC  
                           _ldexp 3A88                    Button_Poll@Pin 0083  
                           _frexp 48FA                             _errno 0114  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 46C6  
                __end_of_MXK_Init 33D4              i2Byte_GetPair@pInput 000A  
                           _putch 694C                  __end_of_SPI_Init 0D6C  
                __end_of_SPI_Send 5AF6             __end_ofi2_MXK_Release 6A16  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 5A8A                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 0063                 __end_of_ADC_Start 5576  
                  ??_Byte_SetPair 006F                             pow@yi 01E8  
                  ??_Byte_SetQuad 006F                             plusw2 000FDB  
                  ??_Byte_SetZone 0066                      main@rotation 00CA  
                           status 000FD8            __size_of_ADC_Calibrate 0014  
                 _Configure_GPIOs 59AE              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 6752  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001                       exp@exponent 00BB  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 006A  
                     ldexp@newexp 00AF               __size_of_HMI_SetBar 000A  
                 __initialization 4B1A               __size_of_HMI_Render 003E  
                     log@exponent 00AF               __end_of_Byte_GetBit 64FE  
                    __end_of_main 3A88                      __end_of_init 5C32  
                    __end_of_itos 42C6              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 00E0               __end_of_Byte_SetBit 5CFA  
                __end_of_FunctADC 693A                  __end_of_InitList FD09  
         printToScreen@IRDistance 026C       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 694C                         ??_ADC_Off 0060  
     __size_of_Port_CheckPortType 0048                       HMI_Render@a 0068  
                          ??_main 00C8                            ??_init 00AA  
                    _ADC_Sequence 61F2                            ??_itos 0070  
        __size_of_FunctInitButton 00A2           _Console_MakeField$10974 006E  
                   __activetblptr 000003                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 5F62                 Port_SetPin@pValue 0072  
                  ??_FunctInitADC 0067                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 67AC                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 670E                       _GetPortPORT 4F16  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 4DCA  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 5674  
                __end_of_Port_Set 14E6                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0064               __end_of_Button_Init 4470  
             __end_of_Button_Poll 36AC                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 52C8                         ??_SPI_DCS 0062  
                          ?_floor 009B                            ?_ldexp 00AB  
                          ?_frexp 0060                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 6A04  
                   _HMI_SetNumber 664C            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0060  
                          ?_putch 0001                  ??_Console_Render 0083  
                   ToSegment@pCHR 0060             _Console_SetForecolour 69BE  
                _Console_FormFeed 5358            Port_SetQuadType@pInput 0096  
                  __CFG_WDTEN$OFF 000000                            i2l1591 144E  
             __size_of_ISR_Enable 000A                            i2l9371 628C  
                          i2l9363 65DE                            i2l7925 57AE  
                          i2l9369 627C                            i2l9377 62A8  
                          i2l7929 57B4                            i2l9851 4D88  
                          i2l9843 4D38                            i2l9847 4D5E  
                          i2l9857 4DAE                            i2l9875 64C6  
                          i2l9867 64A6            __end_of_LCD_Word_Write 6770  
                  _Timer0_Restart 6990               ??_MXK_InitDIPSwitch 009B  
                __end_of___xxtofl 28D0                    i2_MXK_SwitchTo 6494  
                 Byte_GetBit@pBit 0062      Console_SetForecolour@pColour 0060  
                      _Reset_High 678E                Console_Render@temp 0085  
                  ??_HMI_UpSwitch 0066                    OutSeg@pSegment 0063  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 0077  
          ADC_SetChannel@pChannel 0061                  __end_of_delay_ms 5B60  
                    LED_Init@pLED 008D                  __end_of_delay_us 5EC2  
                   ??_Timer0_Init 0071                     ??_Timer2_Init 0071  
                   ??_Timer0_Stop 0060                        _Timer0_ISR 661E  
        __size_of_Console_NewLine 0092                 Timer2_Init@DIVIDE 007A  
                  __CFG_XINST$OFF 000000                            _OutSeg 5576  
        __size_of_HMI_InitButtons 0006                        _Motor_Init 42C6  
                      _Motor_Move 63EC                     ??_Motor_Speed 007F  
                          ___flge 2DB4                        _Motor_Step 3CD0  
         __end_of_Event_DIPSwitch 661E                         ??___fladd 008F  
                          ___wmul 645E                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 0064  
                       ??___flneg 0064                    __CFG_STVREN$ON 000000  
                          _change 00FD                         ??___flmul 0076  
                          _lMotor 002A                         ??___flsub 00A3  
                       ??___fltol 008B                         ??___lldiv 0068  
                          _lQueue 0025                        _TestButton 0170  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 1ED2  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002C  
            __end_of_Console_Init 54F2                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 001E                            clear_0 4B82  
                          clear_1 4B94                            clear_2 4BA0  
                          clear_3 4BAC                            clear_4 4BB8  
                ___awdiv@quotient 0066                        Port_Init@i 00A5  
               __end_of_MXK_Queue 6976        __end_ofHMI_SetButton@F7213 FD40  
                          _printf 2A90                  __end_of_inputVar 4B1A  
                   main@movetoPos 00CC         __end_of_MXK_InitDIPSwitch 67CA  
                   _ADC_Calibrate 6914                    HMI_SetButton@v 0067  
                          floor@i 009F                            floor@x 009B  
          HMI_SetSegments@pString 0061                       _Console_Tab 4604  
             LCD_Word_Write@value 0065                      __pdataCOMRAM 003F  
              __size_of_Port_Init 0192                     ??_Port_GetPin 0063  
        Port_CheckPortType@Output 0099                         ?_ADC_Init 0064  
                 ??i2_Port_SetPin 0014                      __mediumconst FC56  
     __end_ofTimer2_Init@PRESCALE FD43          Port_CheckPortType@pDrive 0098  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0096  
                   ??_Port_SetPin 0073                         ??_reverse 0064  
           Console_MakeField@Fill 021E                  ?_Port_SetPinType 0086  
                          putch@c 0074                 Motor_Speed@pMotor 007B  
                  ?_HMI_SetNumber 0076                    i2_Word_GetPair 65C0  
         __end_of_Configure_GPIOs 5A1E                  ??_MXK_TestButton 0066  
          __end_of_Timer0_Restart 699C                     Set_Rotation@m 0065  
                    ?_MXK_Release 0001                        ___flge@ff1 0060  
                      ___flge@ff2 0064                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 64CA                      ___xxtofl@arg 006A  
                __end_ofexp@coeff FF4B                      i2delay_us@us 0001  
                    ___xxtofl@exp 0069                      ___xxtofl@val 0060  
                __end_oflog@coeff FF6F                   ?_LCD_Word_Write 0065  
                      __accesstop 0060           __end_of__initialization 4BBE  
                       ?_LCD_Fill 0069                         ?_LCD_Init 0001  
                   SPI_Init@pMode 0092                        ___flneg@f1 0060  
                     _Byte_GetBit 64CA                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 69B4                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 0068                         ?_HMI_Poll 0001  
                    eval_poly@res 00A7                     ___rparam_used 000001  
                      ___fltol@f1 0087                       _Byte_SetBit 5C96  
                   __end_of_MASKS FD3C                    _PortA_Property FF7B  
                     ?_Event_NULL 0001                         LCD_Fill@i 006B  
                       LCD_Fill@j 006C                         LCD_Init@i 0097  
                  __pcstackCOMRAM 0001                    _PortB_Property FF79  
             __size_ofi2_delay_us 0040                      __pidataBANK0 69EC  
                    __pidataBANK1 6984               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 6806                   Console_Render@x 008A  
                 Console_Render@y 008B               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FD09  
            __end_of_Byte_GetZone 519E                ADC_Sequence@pItemA 0060  
              ADC_Sequence@pItemB 0062                     __end_of_floor 3CD0  
                   __end_of_ldexp 3BAC                     __end_of_frexp 49B0  
                  _PortC_Property FF77               __end_of_Timer0_Init 3800  
                   __end_of_putch 695A                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 3952               __end_of_Timer0_Stop 69FE  
                  ?_ADC_Calibrate 0001                         ?_SPI_Init 008D  
                       ?_SPI_Send 0060                       _Button_Init 439C  
               Port_SetType@pType 009C                       _Button_Poll 3546  
            __end_of_Byte_SetByte 6968              __end_of_Byte_SetPair 6730  
                  _HMI_LeftSwitch 68CE                    _PortD_Property FF75  
            __end_of_Byte_SetQuad 6752                      ??_LED_Toggle 0078  
                    ??_HMI_GetBar 0060              __end_of_Byte_SetZone 4A66  
             __end_of_Motor_Speed 66A0                    _HMI_DownSwitch 6886  
                   SPI_Send@pData 0062             __end_of_MXK_DIPSwitch 686E  
                    ??_HMI_SetBar 0060                      ??_HMI_Render 0068  
                  _PortE_Property FF73                        ??_ADC_Init 0067  
        __size_of_HMI_SetSegments 00BA            __end_ofi2_Word_GetPair 65F0  
                  _PortF_Property FF71           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                         ??_floor 009F                           ??_ldexp 00B1  
                         ??_frexp 0066            ?_Console_SetForecolour 0060  
               ??_FunctInitButton 00A8                           ?_ADC_On 0001  
               _Console_Backspace 5F62                   ?_Timer0_Restart 0001  
                         ??_putch 0074          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 6374                 __end_of_ToSegment 1A04  
                  _PortG_Property FF6F                        __pbssBANK0 00CE  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 61AC           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                __size_of_eval_poly 0118  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 678E  
                       ?_FunctADC 0001         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 4604  
          __end_of_PortA_Property FF7D                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 0060                        ??_LED_Init 008D  
        ADC_ClockDivision@pDivide 0060                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
              _ADC_ConversionTime 611E                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001           Port_CheckPairType@Props 008D  
          __end_of_PortB_Property FF7B                     ?_Timer0_Start 0060  
               __end_of_Port_Init 2DB4                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 0088                __end_of_LED_Toggle 611E  
              __end_of_HMI_GetBar 69F8              __end_of_FunctInitADC 4C76  
        LCD_FillRectangle@pColour 0069               ??_Console_Backspace 0062  
               Set_Addr_Window@xe 0066                 Set_Addr_Window@ye 0067  
               Set_Addr_Window@xs 0068                 Set_Addr_Window@ys 0065  
                         ?_OutSeg 0063                       ?_Motor_Init 008D  
              Byte_SetPair@pInput 006B                       ?_Motor_Move 0063  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 006E  
                         ?___flge 0060                __end_of_HMI_SetBar 69D2  
          __end_of_PortC_Property FF79                Word_GetPair@pInput 006C  
              __end_of_HMI_Render 62F8                    ??_Set_Rotation 0065  
                       ?_Port_Set 006F               ?_ADC_ConversionTime 0001  
                         ?___wmul 0060                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 0065                      ??_ISR_Enable 0060  
    __size_of_Console_ResetCursor 001A              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 68E6            __end_of_PortD_Property FF77  
                         _ADC_AN0 01D2                           _ADC_AN1 01CD  
                         _ADC_AN2 01C8                           _ADC_AN3 01C3  
                      ??_MXK_Init 00A6                 Port_GetPin@pInput 0060  
               _Console_MakeField 4470                           _ADC_Off 69E4  
               ??_Console_NewLine 0060          ADC_ClockDivision@unfound 0062  
          __end_of_HMI_DownSwitch 689E                        ??_SPI_Init 0093  
          Event_TestButton@pState 0079                        ??_SPI_Send 0063  
                         ?_printf 0075                 ??_HMI_InitButtons 0060  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FF75  
             Console_Render@F6956 01EC                ?_Console_MakeField 0065  
                         _COUNTER 0028                           i2l10305 4104  
                         i2l10281 407C                           i2l10283 4092  
                         i2l10287 40B4                           i2l10289 40C8  
                         i2l10299 40FA                   ??_HMI_SetButton 0060  
            __end_of_HMI_UpSwitch 68B6                           _LED_Set 5EC2  
         _Console_IncrementCursor 5C32                         ?___xxtofl 0060  
          __end_of_PortF_Property FF73                       _gBackcolour 00DE  
                 ??_HMI_SetNumber 0078                         _I2C1_Done 0111  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 010E  
                       _I2C1_More 010B                         _I2C2_More 0108  
                       ?_delay_ms 0060         __end_of_Console_Backspace 5FB0  
                       ?_delay_us 0060               __size_of_Event_NULL 0002  
      __end_of_MXK_InitTestButton 67E8                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
            ??_ADC_ConversionTime 0060            __end_of_PortG_Property FF71  
             ??_Console_MakeField 0067           __size_of_ADC_SetChannel 001C  
                         _SPI_DCS 6590              __size_ofi2_MXK_Queue 000E  
                   ??_ADC_SetupIO 0060                  ?_Configure_GPIOs 0001  
                 __size_of_ADC_On 0006                  ADC_Init@pChannel 0066  
            i2Byte_GetZone@Offset 0008                     ??_ADC_Voltage 008B  
                      ??_FunctADC 0066                __end_of_ISR_Enable 69DC  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 0060                 Event_TestButton@j 00E6  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FD43              i2Byte_GetZone@pChunk 0004  
        ADC_ConversionTime@pCount 0061              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 0063                         ?_inputVar 0001  
            SPI_DisableISR@pInput 0060                     ?_Port_GetQuad 0060  
                 Byte_SetBit@pBit 0062              Port_TogglePin@pInput 0074  
           __end_ofi2_Byte_SetBit 5FFC                         _ADC_Start 54F2  
                         __Hparam 0000                 Port_GetQuad@pQuad 0062  
                     _Timer0_Init 36AC                       _Timer2_Init 3800  
                         __Lparam 0000                       _Timer0_Stop 69F8  
           __size_of_Console_Init 0086                           OutSeg@a 0033  
 __end_ofPortProperty_Valid@F6830 FD29                     LCD_Write@mode 0063  
                 __size_of_OutSeg 0082                        ??_Port_Set 0072  
                 __size_of___flge 0190         __end_of_Console_MakeField 4540  
               _Console_PrintChar 2F44                       _Motor_Speed 6676  
                         _Stepper 01BD                           ___fladd 0000  
                   ?_Port_SetType 009A                           _gCursor 003F  
                         ___fldiv 0D6C                           ___awdiv 46C6  
                         ___flneg 6426             ??_Console_ClearCursor 0060  
                         ___flmul 04A8                           ___flsub 6046  
                         ___fltol 3F0C                           _lBuffer 026E  
                         ___lldiv 4784                   __size_of___wmul 0036  
                 ??_ADC_Calibrate 0060                           ___lwdiv 56F0  
                         ___lwmod 5CFA                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 53E2                ?_Console_PrintChar 0001  
                         __pcinit 4B1A                 __end_of_eval_poly 3F0C  
                         _dipMode 00D4                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                        _lockedMode 00FC  
                         __ptext0 3952                           __ptext1 1A04  
                         __ptext2 2A90                           __ptext3 694C  
                         __ptext4 2F44                           __ptext5 4604  
                         __ptext6 46C6                           __ptext7 5C32  
                         __ptext8 5236                           __ptext9 5358  
                 __size_of_printf 0192                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FD29  
                       _T2CONbits 000FCA                     LED_Set@pValue 0074  
                    __size_of_exp 029A                      __size_of_log 018A  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 0079  
                    __size_of_pow 0200                        ??___xxtofl 0064  
                    ?_GetPortPORT 0060                      ?_GetPortTRIS 0060  
             ??_Console_PrintChar 0070                       _Port_GetPin 6166  
           __end_of_printToScreen 1C7C                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 01DB               LCD_DrawRectangle@p4 01D7  
                    ??i2_delay_us 0003                        ??_delay_ms 0062  
                      ??_delay_us 0062                           _reverse 5A1E  
                       _DIPSwitch 0166               __size_of_Timer0_ISR 002E  
                         _upState 00E5                       _Port_SetPin 4540  
                  LCD_DrawField@i 0082                         _LCD_Reset 5F12  
             __size_of_Motor_Init 00D6               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0124                         _LCD_Write 66EC  
            __size_of_MXK_Dequeue 0030                        delay_ms@ms 0060  
            end_of_initialization 4BBE               ADC_SetupIO@pChannel 0062  
                         exp@sign 00BD                        delay_us@us 0060  
               ??_HMI_SetSegments 0063           Console_PrintChar@pInput 0073  
                    _Console_Init 546C              __size_of_MXK_Release 0016  
      __end_of_Port_CheckPairType 5BCA                           itos@Out 0074  
                  ??_Port_GetQuad 0063                _PortProperty_Valid 55F8  
                      _rightState 00E2                         i2u1328_48 6636  
              Byte_SetQuad@pInput 006B                        ??_inputVar 0084  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
             __end_of_ADC_SetupIO 6530             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 0064             __size_of_Byte_GetZone 009C  
                      ?_ADC_Start 0062                 ??_HMI_RightSwitch 0066  
                         pow@sign 01E7                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 30D0               __end_of_ADC_Voltage 41EE  
                  ??_Port_SetType 009D        __end_of_Port_CheckQuadType 5E18  
                         printf@c 0080                           printf@f 0075  
                  Port_Init@pPort 00A2                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 0069  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 006F             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 60D6             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 62BA                Button_Init@pInitIO 009F  
           Timer0_Init@pFrequency 006D                 ?_Port_SetQuadType 0096  
                     _gForecolour 00FA         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 009A                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 0066                       ___fladd@grs 009A  
           Console_Render@lCursor 0086                         _MXK_Queue 6968  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0068  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 004E  
                 _Set_Addr_Window 4C76                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 5060  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                 __size_of_ADC_Init 007C  
                  Port_Set@pValue 0071                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 5236                        ?_LCD_Write 0063  
                    _Byte_GetPair 67E8                HMI_SetButton@F7213 FD3C  
                    _Byte_GetZone 5102                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
                  __end_of_ADC_On 6A0A                    _Port_TogglePin 6560  
                _Event_TestButton 63B0             __size_of_FunctInitADC 00AE  
                     ___flmul@grs 007C              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 695A                      _Byte_SetPair 670E  
                 ADC_SetupIO@MASK 0063                      _Byte_SetQuad 6730  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 49B0  
            Port_SetPinType@pType 0089                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 0060                     ?_SPI_MaxSpeed 006F  
               __size_of_LCD_Fill 0058                      ??_Event_NULL 0060  
               __size_of_LCD_Init 0172                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 006F             __end_ofi2_Timer0_Stop 6A10  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
               __size_of_HMI_Poll 0074                     ?i2_Motor_Step 0001  
      __size_of_Console_MakeField 00D0                    __end_of_OutSeg 55F8  
                  __end_of___flge 2F44                         _Direction 00F8  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 6494  
           __end_of_HMI_DIPSwitch 6886                     __pidataCOMRAM 69B4  
                    ?_Button_Init 009B                   _FunctInitButton 5060  
                    ?_Button_Poll 007B                         _Bus_State 0043  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
            __end_of_Timer0_Clear 69A8                 __size_of_MXK_Init 017A  
                      floor@expon 00A3              __end_of_Timer2_Clear 69E4  
                  __end_of_printf 2C22                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 006C  
                ??_Timer0_Restart 0060              __end_of_Timer0_Start 66EC  
         ??_Console_SetForecolour 0062                Port_SetType@Output 009F  
             start_initialization 4B1A                        ?_MXK_Queue 0060  
                      eval_poly@d 009F                        eval_poly@n 00A1  
                      eval_poly@x 009B                      _FunctInitADC 4BC8  
                      ldexp@value 00AB          PortProperty_Valid@Errors 0075  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 57DE  
              Port_SetType@pInput 009A                    _ADC_SetChannel 6806  
                     __end_of_exp 1780                       __end_of_log 325A  
                     __end_of_pow 2508                        HMI_Init@in 00A8  
             HMI_SetNumber@pInput 0076             __end_ofi2_Port_SetPin 4DCA  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 6590  
                   ?_Word_SetPair 006F                 Byte_SetBit@pInput 0060  
                        ??_ADC_On 0060                    ??_MXK_SwitchTo 0066  
               Byte_SetBit@pValue 0063                ?_LCD_FillRectangle 0069  
             _Console_ResetCursor 6822       PortProperty_Valid@pPinDrive 0071  
                     _ADC_SetupIO 64FE              MXK_BlockSwitchTo@CUR 0066  
        PortProperty_Valid@pInput 006F                     i2_MXK_Release 6A10  
                     _ADC_Voltage 4116                        frexp@value 0060  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 01C0  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1780               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Console_NewLine 5236  
               __size_of_FunctADC 0012                    ??_SPI_MinSpeed 0071  
                     ??_ADC_Start 0064                      _HMI_UpSwitch 689E  
                       _Reset_Low 6770                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 69FE                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 018C                    ADC_Init@pInput 0064  
                       _gCharSize 01F4                  Timer2_Init@INDEX 002F  
                       OutSeg@cur 0035                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 0091                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 020C  
                    ??_Motor_Move 0067                      ??_Motor_Step 0074  
                        ??___flge 0068                Byte_SetZone@Offset 0069  
                        ??___wmul 0064              ?_Console_ResetCursor 0001  
                       _Port_Init 2C22                       __pdataBANK0 00F8  
                     __pdataBANK1 01EC                 __size_of_Port_Set 03BA  
             _printToScreen$15175 0268                Byte_SetZone@pChunk 0063  
                        ?_ADC_Off 0001                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 0060                Byte_SetZone@pValue 0065  
                   Mode_Set@pMode 0060                          ??_printf 0079  
         __end_of_Set_Addr_Window 4D20          Port_CheckQuadType@Output 0095  
                       _gLineSize 01F0          Port_CheckQuadType@pDrive 0092  
                       ___fladd@a 008B                         ___fladd@b 0087  
                  ??_Word_GetPair 006F          Port_CheckQuadType@pInput 008F  
            __end_of_Port_GetQuad 6046                         ___fldiv@a 0064  
                       ___fldiv@b 0060         __end_of_LCD_FillRectangle 5852  
                     __pbssBIGRAM 026E            __end_of_ADC_SetChannel 6822  
                        ?_LED_Set 0074                         ___flmul@a 0072  
                       ___flmul@b 006E                       __pbssCOMRAM 0025  
                       ___flsub@a 009F                         ___flsub@b 009B  
                 ADC_Start@pInput 0062                __end_of_Reset_High 67AC  
                   __pcstackBANK0 0060                     __pcstackBANK1 01DF  
                   __pcstackBANK2 0264                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 01CE  
              __end_of_Timer0_ISR 664C              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 20FC                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 439C               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 6426                __end_of_Motor_Step 3DF4  
           Timer2_Init@pFrequency 006D                    ?i2_MXK_Release 0001  
                       _exp$15178 00B7          Port_CheckPairType@Output 008C  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
              _MXK_InitTestButton 67CA                        ?_Reset_Low 0001  
                    ?_Timer0_Init 006D            __size_of_MXK_DIPSwitch 0018  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 00D1           __size_of_MXK_TestButton 0018  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 5102  
               __size_of_inputVar 00B4                  ??_HMI_DownSwitch 0066  
                       __pintcode 1408                     __pmediumconst FC56  
                    ?_Motor_Speed 007B             ??_Console_ResetCursor 0060  
                        ?___fladd 0087                          ?___fldiv 0060  
                        ?___awdiv 0060                         __ptext100 60D6  
                       __ptext101 6560                         __ptext110 66A0  
                       __ptext102 4540                          ?___flneg 0060  
                       __ptext111 6590                         __ptext103 6166  
                       __ptext120 61AC                         __ptext112 5060  
                       __ptext104 69D2                         __ptext121 670E  
                       __ptext113 439C                         __ptext105 2508  
                       __ptext130 4BC8                         __ptext122 5DBE  
                       __ptext114 67AC                         __ptext106 593A  
                       __ptext131 61F2                         __ptext123 5B60  
                       __ptext115 69FE                         __ptext107 094E  
                       __ptext140 546C                         __ptext132 5674  
                       __ptext124 55F8                         __ptext116 67CA  
                       __ptext108 3800                         __ptext141 6676  
                       __ptext133 64FE                         __ptext125 6336  
                       __ptext117 28D0                         __ptext109 69DC  
                       __ptext150 6A0A                         __ptext142 36AC  
                       __ptext134 6806                         __ptext126 67E8  
                       __ptext118 5C96                         __ptext151 69A8  
                       __ptext143 4784                         __ptext135 611E  
                       __ptext127 5102                         __ptext119 1C7C  
                       __ptext160 6976                         __ptext152 4D20  
                       __ptext144 699C                         __ptext136 53E2  
                       __ptext128 6730                         __ptext161 0000  
                       __ptext153 65C0                         __ptext145 63EC  
                       __ptext137 6914                         __ptext129 49B0  
                       __ptext154 683C                         __ptext146 66C8  
                       __ptext138 6A04                         __ptext155 5768  
                       __ptext139 69E4                         __ptext156 5FB0  
                       __ptext148 661E                         __ptext157 6494  
                       __ptext149 4018                         __ptext158 627A  
                       _pShiftVal 00D8                         __ptext159 6A10  
                        ?___flmul 006E                          ?___flsub 009B  
                        ?___fltol 0087                          ?___lldiv 0060  
                      ?_Port_Init 00A0              Timer0_Init@pCPUClock 0073  
                        ?___lwdiv 0060                          ?___lwmod 0067  
             ?_MXK_InitTestButton 0001                 ?_Console_FormFeed 0001  
               _GetPortProperties 4E70                     ?_ADC_Sequence 0060  
                       _pow$15176 01DF                         _pow$15177 01E3  
     __end_ofTimer0_Init@PRESCALE FD19                ??_Console_FormFeed 0060  
                 _HMI_SetSegments 4840                ?_GetPortProperties 0060  
                Event_NULL@pState 0001          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                   ?_ADC_SetChannel 0001  
                   ??i2_MXK_Queue 0004                         _leftState 00E3  
                       _eval_poly 3DF4                       ??_MXK_Queue 0063  
                    ?_Port_GetPin 0060                          _ADC_Init 5674  
                       _downState 00E4             __end_of_HMI_SetButton 5358  
            __size_of_Console_Tab 00C2                          ?_reverse 0060  
                    ?_Port_SetPin 006F             __end_of_HMI_SetNumber 6676  
                ___lwdiv@quotient 0065                   _HMI_RightSwitch 68B6  
     __size_of_ADC_ConversionTime 0048                    __size_of_floor 0124  
                  __size_of_ldexp 0124                    __size_of_frexp 00B6  
             ??_GetPortProperties 0062           __end_of_Console_NewLine 52C8  
            ??_MXK_InitTestButton 008D                Byte_GetPair@pInput 0069  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 6A04  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 683C                          _LCD_Fill 5E18  
                        _LCD_Init 33D4                    ___wmul@product 0064  
                        _HMIBoard 0116                    i2_Byte_GetZone 5768  
                        _LED_Init 5D5C                         delay_ms@u 0062  
              Button_Poll@pButton 007B                         delay_us@u 0062  
                        _HMI_Init 2508                          _HMI_Poll 5852  
              MXK_Queue@pCallback 0060                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 63B0  
        __size_of_Configure_GPIOs 0070              __size_of_Byte_GetBit 0034  
               Byte_SetQuad@pQuad 006D                          i2u504_40 578A  
                        i2u504_47 5780                          _PIR1bits 000F9E  
                        i2u506_40 57D2                          i2u506_45 57CE  
                        _PIR3bits 000FA4                          i2u672_44 5FC4  
                        i2u672_45 5FC0                          i2u673_44 5FEA  
                        i2u673_45 5FE6                          i2u781_40 405A  
                        i2u782_40 406E                          i2u783_40 40A6  
            __size_of_Byte_SetBit 0064                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 0082             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 4F16  
                        _SSP2STAT 000F6D                      _Set_Rotation 519E  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 627A  
              _Port_CheckPairType 5B60                          _MXK_Init 325A  
           __size_of_Timer0_Start 0024                    ??_ADC_Sequence 0064  
                 MXK_SwitchTo@CUR 0066             __end_of_ADC_Calibrate 6928  
                        _SPI_Init 094E          __end_of_Event_TestButton 63EC  
                        _SPI_Send 5A8A                        _ADCON0bits 000FC2  
                __size_of_ADC_Off 0008                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
               Byte_GetBit@Output 0064                        printf@flag 007A  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0074  
            __size_of_Button_Init 00D4              __end_of_SPI_MaxSpeed 593A  
                      printf@prec 007B             Motor_Speed@pFrequency 007D  
               Byte_GetBit@pInput 0060               Port_SetPinType@pPin 0088  
            __size_of_Button_Poll 0166                        ?_eval_poly 009B  
              _Port_CheckQuadType 5DBE                     _MXK_DIPSwitch 6856  
             ?_Port_CheckPairType 0086              __end_of_SPI_MinSpeed 59AE  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 608E  
           Button_Poll@pIncrement 007D           PortProperty_Valid@F6830 FD19  
            __end_ofi2_Motor_Step 4116                   ??i2_MXK_Release 0001  
                       copy_data0 4B2E                         copy_data1 4B4E  
                       copy_data2 4B6E                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 6856         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 57DE               __end_ofi2_MXK_Queue 6984  
             ?_Port_CheckPortType 0096                          _FunctADC 6928  
                 itos@destination 006E                          _InitList FC57  
            _Motor_Step$intlevel0 3CD6                          _Mode_Set 693A  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
                    _Timer0_Clear 699C                Port_GetQuad@pInput 0060  
                    _Timer2_Clear 69DC              __end_of_Word_GetPair 6374  
                        _lCBuffer 0200              ??_Port_CheckPairType 008A  
                     ??_Reset_Low 0074                          __Hrparam 0000  
                    _Timer0_Start 66C8                      OutSeg@pInput 0066  
                  _Console_Render 20FC                          __Lrparam 0000  
                 Timer2_Init@RDIV 0072            __size_of_printToScreen 0278  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 112C                      OutSeg@segset 0034  
                       rand@screw 0032              __end_of_Word_SetPair 61F2  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 48FA  
            ??_Port_CheckQuadType 0093                  __size_of___fladd 04A8  
                __size_of___fldiv 03C0             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___flneg 0038  
                __size_of___flmul 04A6                  __size_of___flsub 0048  
                __size_of___fltol 010C                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 62F8                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 0099                  __size_of___lwmod 0062  
                        _lBufferX 0037                          _lBufferY 0036  
             Timer2_Init@PRESCALE FD40                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00DC           __end_of_HMI_RightSwitch 68CE  
          Byte_GetZone@pChunkSize 0064                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 0064             __size_of_Port_SetType 022A  
                   reverse@length 0062                         itos@input 006C  
           i2MXK_SwitchTo@pModule 0008                          ___xxtofl 2702  
              Motor_Init@pAddress 008F                          _delay_ms 5AF6  
                        _delay_us 5E70                          _clearall 00EB  
                 ___lwdiv@divisor 0062    __size_of_Console_SetForecolour 000A  
                 ___lwdiv@counter 0064     __end_of_Console_SetForecolour 69C8  
                 Port_GetPin@pPin 0062                          __ptext10 6822  
                        __ptext11 5F62                          __ptext20 2DB4  
                        __ptext12 6374                          __ptext21 3DF4  
                        __ptext13 2308                          __ptext30 4FBC  
                        __ptext22 6046                          __ptext14 30D0  
                        __ptext31 645E                          __ptext23 0000  
                        __ptext15 14E6                          __ptext40 3546  
                        __ptext32 4470                          __ptext24 6426  
                        __ptext16 3A88                          __ptext41 6856  
                        __ptext33 64CA                          __ptext25 62BA  
                        __ptext17 3BAC                          __ptext50 1404  
                        __ptext42 686E                          __ptext34 4116  
                        __ptext26 5576                          __ptext18 48FA  
                        __ptext51 63B0                          __ptext43 6886  
                        __ptext35 2702                          __ptext27 69BE  
                        __ptext19 3F0C                          __ptext60 69C8  
                        __ptext52 664C                          __ptext44 689E  
                        __ptext36 04A8                          __ptext28 20FC  
                        __ptext61 69F2                          __ptext53 41EE  
                        __ptext45 68B6                          __ptext37 0D6C  
                        __ptext29 57DE                          __ptext70 112C  
                        __ptext62 6928                          __ptext54 5A1E  
                        __ptext46 68CE                          __ptext38 4A66  
                        __ptext71 695A                          __ptext63 54F2  
                        __ptext55 5CFA                          __ptext47 68E6  
                        __ptext39 5852               ??_MXK_BlockSwitchTo 0066  
                        __ptext80 6990                          __ptext72 4DCA  
                        __ptext64 5BCA                          __ptext56 56F0  
                        __ptext48 5FFC                          __ptext81 6238  
                        __ptext73 4E70                          __ptext65 42C6  
                        __ptext57 4840                          __ptext49 65F0  
                        __ptext90 6752                          __ptext82 68FE  
                        __ptext74 4F16                          __ptext66 325A  
                        __ptext58 1780                          __ptext91 66EC  
                        __ptext83 6968                          __ptext75 5D5C  
                        __ptext67 2C22                          __ptext59 52C8  
                        __ptext92 5A8A                          __ptext84 62F8  
                        __ptext76 5EC2                          __ptext68 1ED2  
                        __ptext93 693A                          __ptext85 5E70  
                        __ptext77 6530                          __ptext69 608E  
                        __ptext94 59AE                          __ptext86 33D4  
                        __ptext78 3CD0                          __ptext95 58C6  
                        __ptext87 519E                          __ptext79 69F8  
                        __ptext96 5F12                          __ptext88 5E18  
                        __ptext97 5AF6                          __ptext89 4C76  
                        __ptext98 6770                          __ptext99 678E  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                 _ADC_ClockDivision 53E2  
                    ?_ADC_SetupIO 0001                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 0079  
                 ?i2_Byte_GetZone 0001                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001                ?_ADC_ClockDivision 0001  
                    ?_ADC_Voltage 0087               __end_of_MXK_Dequeue 6560  
               HMI_SetSegments@in 0064             Button_Init@pThreshold 009D  
                   __size_of_main 0136                     __size_of_init 0068  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 006B  
          __end_of_Console_Render 2308                          _inputVar 4A66  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
                    _Port_GetQuad 5FFC               __end_of_MXK_Release 6914  
                  _MXK_TestButton 68E6                     i2_Byte_SetBit 5FB0  
             ??_ADC_ClockDivision 0060               i2Word_GetPair@pPair 000F  
                  ADC_Voltage@max 008D                    ADC_Voltage@ref 0091  
       __end_of_MXK_BlockSwitchTo 6336          ?_Console_IncrementCursor 0001  
            __size_of_Timer0_Init 0154              __size_of_Timer2_Init 0152  
                        int$flags 0049              __size_of_Timer0_Stop 0006  
                    _Port_SetType 1ED2                      Port_Set@Type 0086  
      __size_of_GetPortProperties 00A6            __size_of_LCD_DrawField 00A4  
               ??_Configure_GPIOs 0095                         printf@val 007E  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 0104                    Timer0_Init@PRE 0030  
                    _SSP2STATbits 000F6D                          exp@coeff FF23  
                      _LED_Toggle 60D6                          log@coeff FF4B  
                      _HMI_GetBar 69F2              Button_Init@pGetState 00A2  
          PortProperty_Valid@Pair 0085                  ??_Port_TogglePin 0077  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 0072                       ??_eval_poly 00A3  
                      _HMI_SetBar 69C8                        _HMI_Render 62BA  
                Byte_SetZone@MASK 006A                       i2_MXK_Queue 6976  
       __end_of_ADC_ClockDivision 546C                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 002E                     _printToScreen 1A04  
                Byte_SetZone@pMax 0062            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 00A5  
                        itos@Data 0070                LCD_FillRectangle@i 0075  
              LCD_FillRectangle@j 0076              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                      reverse@input 0060  
            __end_of_ADC_Sequence 6238            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 0067                  ___lldiv@dividend 0060  
          __end_of_MXK_TestButton 68FE                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042                    _SPI_DisableISR 66A0  
                 Port_Init@pInput 00A0                          printf@ap 007C  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 69D2  
                ?_HMI_SetSegments 0061           Console_MakeField@Column 006C  
           __size_of_SPI_MaxSpeed 0074                  ??_ADC_SetChannel 0060  
                   SPI_DCS@pInput 0060             __size_of_SPI_MinSpeed 0074  
                 ??_MXK_DIPSwitch 0066             __size_ofi2_Motor_Step 00FE  
               ADC_Voltage@pInput 0087           Console_MakeField@pInput 006B  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 0068  
                   ??_GetPortPORT 0062                   ___lwmod@divisor 0069  
                   ??_GetPortTRIS 0062             Timer0_Start@pFunction 0060  
              Word_SetPair@pInput 006F                   ___lwmod@counter 006B  
              Word_SetPair@pValue 0072                  Motor_Init@pMotor 008D  
                  ?_printToScreen 0001                       _MXK_Dequeue 6530  
               ADC_Voltage@output 0095                    LED_Toggle@pLED 0078  
                   ___fladd@signs 0097                     _LCD_DrawField 4FBC  
                _Port_SetQuadType 1C7C                       _MXK_Release 68FE  
       __size_of_Console_FormFeed 008A                      _MXK_SwitchTo 6238  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
                 _Port_SetPinType 28D0                      ___fladd@aexp 0098  
                    ___fladd@bexp 0099           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 0068                Byte_GetZone@pChunk 0063  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 683C  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 5C96             __size_of_Word_SetPair 0046  
         printToScreen@ADCVoltage 0264            __end_of_SPI_DisableISR 66C8  
                    _SPI_MaxSpeed 58C6                      _SPI_MinSpeed 593A  
              Port_Set@TypeActual 0084  
