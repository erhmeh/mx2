

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Aug 12 15:14:46 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1,inline
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1,inline
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1,inline
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1
   168                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   169                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   170  0000                     
   171                           ; Version 1.43
   172                           ; Generated 25/07/2017 GMT
   173                           ; 
   174                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   175                           ; All rights reserved.
   176                           ; 
   177                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   178                           ; 
   179                           ; Redistribution and use in source and binary forms, with or without modification, are
   180                           ; permitted provided that the following conditions are met:
   181                           ; 
   182                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   183                           ;        conditions and the following disclaimer.
   184                           ; 
   185                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   186                           ;        of conditions and the following disclaimer in the documentation and/or other
   187                           ;        materials provided with the distribution.
   188                           ; 
   189                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   190                           ;        software without specific prior written permission.
   191                           ; 
   192                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   193                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   194                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   195                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   196                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   197                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   198                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   199                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   200                           ; 
   201                           ; 
   202                           ; Code-generator required, PIC18F67J50 Definitions
   203                           ; 
   204                           ; SFR Addresses
   205  0000                     
   206                           	psect	idataCOMRAM
   207  014B80                     __pidataCOMRAM:
   208                           	opt stack 0
   209                           
   210                           ;initializer for _gCursor
   211  014B80  0006               	dw	6
   212  014B82  0006               	dw	6
   213                           
   214                           ;initializer for _Bus_State
   215  014B84  01                 	db	1
   216                           
   217                           ;initializer for _A
   218  014B85  41                 	db	65
   219                           
   220                           ;initializer for _a
   221  014B86  61                 	db	97
   222                           
   223                           ;initializer for _zero
   224  014B87  30                 	db	48
   225                           
   226                           ;initializer for _l
   227  014B88  80                 	db	128
   228                           
   229                           ;initializer for _w
   230  014B89  80                 	db	128
   231                           
   232                           	psect	idataBANK0
   233  014BAE                     __pidataBANK0:
   234                           	opt stack 0
   235                           
   236                           ;initializer for _gCharSize
   237  014BAE  0005               	dw	5
   238  014BB0  0007               	dw	7
   239                           
   240                           ;initializer for _gForecolour
   241  014BB2  FFFF               	dw	65535
   242                           
   243                           ;initializer for _change
   244  014BB4  01                 	db	1
   245                           
   246                           	psect	idataBANK1
   247  014B9E                     __pidataBANK1:
   248                           	opt stack 0
   249                           
   250                           ;initializer for Console_Render@F6956
   251  014B9E  0006               	dw	6
   252  014BA0  0006               	dw	6
   253                           
   254                           ;initializer for _gLineSize
   255  014BA2  0080               	dw	128
   256  014BA4  0007               	dw	7
   257                           
   258                           	psect	mediumconst
   259  00FC70                     __pmediumconst:
   260                           	opt stack 0
   261  00FC70  00                 	db	0
   262  00FC71                     _InitList:
   263                           	opt stack 0
   264  00FC71  1100               	dw	4352
   265  00FC73  0080               	dw	128
   266  00FC75  012C               	dw	300
   267  00FC77  B100               	dw	45312
   268  00FC79  0002               	dw	2
   269  00FC7B  0035               	dw	53
   270  00FC7D  0036               	dw	54
   271  00FC7F  B200               	dw	45568
   272  00FC81  0002               	dw	2
   273  00FC83  0035               	dw	53
   274  00FC85  0036               	dw	54
   275  00FC87  B300               	dw	45824
   276  00FC89  0002               	dw	2
   277  00FC8B  0035               	dw	53
   278  00FC8D  0036               	dw	54
   279  00FC8F  0002               	dw	2
   280  00FC91  0035               	dw	53
   281  00FC93  0036               	dw	54
   282  00FC95  B400               	dw	46080
   283  00FC97  0000               	dw	0
   284  00FC99  C000               	dw	49152
   285  00FC9B  00A2               	dw	162
   286  00FC9D  0002               	dw	2
   287  00FC9F  0084               	dw	132
   288  00FCA1  C100               	dw	49408
   289  00FCA3  00C5               	dw	197
   290  00FCA5  C200               	dw	49664
   291  00FCA7  000D               	dw	13
   292  00FCA9  0000               	dw	0
   293  00FCAB  C300               	dw	49920
   294  00FCAD  008D               	dw	141
   295  00FCAF  002A               	dw	42
   296  00FCB1  C400               	dw	50176
   297  00FCB3  008D               	dw	141
   298  00FCB5  00EE               	dw	238
   299  00FCB7  C500               	dw	50432
   300  00FCB9  000A               	dw	10
   301  00FCBB  3600               	dw	13824
   302  00FCBD  00C8               	dw	200
   303  00FCBF  E000               	dw	57344
   304  00FCC1  0012               	dw	18
   305  00FCC3  001C               	dw	28
   306  00FCC5  0010               	dw	16
   307  00FCC7  0018               	dw	24
   308  00FCC9  0033               	dw	51
   309  00FCCB  002C               	dw	44
   310  00FCCD  0025               	dw	37
   311  00FCCF  0028               	dw	40
   312  00FCD1  0028               	dw	40
   313  00FCD3  0027               	dw	39
   314  00FCD5  002F               	dw	47
   315  00FCD7  003C               	dw	60
   316  00FCD9  0000               	dw	0
   317  00FCDB  0003               	dw	3
   318  00FCDD  0003               	dw	3
   319  00FCDF  0010               	dw	16
   320  00FCE1  0080               	dw	128
   321  00FCE3  0078               	dw	120
   322  00FCE5  E100               	dw	57600
   323  00FCE7  0012               	dw	18
   324  00FCE9  001C               	dw	28
   325  00FCEB  0010               	dw	16
   326  00FCED  0018               	dw	24
   327  00FCEF  002D               	dw	45
   328  00FCF1  0028               	dw	40
   329  00FCF3  0023               	dw	35
   330  00FCF5  0028               	dw	40
   331  00FCF7  0028               	dw	40
   332  00FCF9  0026               	dw	38
   333  00FCFB  002F               	dw	47
   334  00FCFD  003B               	dw	59
   335  00FCFF  0000               	dw	0
   336  00FD01  0003               	dw	3
   337  00FD03  0003               	dw	3
   338  00FD05  0010               	dw	16
   339  00FD07  3A00               	dw	14848
   340  00FD09  0005               	dw	5
   341  00FD0B  2A00               	dw	10752
   342  00FD0D  0000               	dw	0
   343  00FD0F  0002               	dw	2
   344  00FD11  0000               	dw	0
   345  00FD13  0081               	dw	129
   346  00FD15  2B00               	dw	11008
   347  00FD17  0000               	dw	0
   348  00FD19  0003               	dw	3
   349  00FD1B  0000               	dw	0
   350  00FD1D  00A2               	dw	162
   351  00FD1F  2900               	dw	10496
   352  00FD21  2C00               	dw	11264
   353  00FD23                     __end_of_InitList:
   354                           	opt stack 0
   355  00FD23                     _dpowers:
   356                           	opt stack 0
   357  00FD23  0001               	dw	1
   358  00FD25  0000               	dw	0
   359  00FD27  000A               	dw	10
   360  00FD29  0000               	dw	0
   361  00FD2B  0064               	dw	100
   362  00FD2D  0000               	dw	0
   363  00FD2F  03E8               	dw	1000
   364  00FD31  0000               	dw	0
   365  00FD33  2710               	dw	10000
   366  00FD35  0000               	dw	0
   367  00FD37  86A0               	dw	34464
   368  00FD39  0001               	dw	1
   369  00FD3B  4240               	dw	16960
   370  00FD3D  000F               	dw	15
   371  00FD3F  9680               	dw	38528
   372  00FD41  0098               	dw	152
   373  00FD43  E100               	dw	57600
   374  00FD45  05F5               	dw	1525
   375  00FD47  CA00               	dw	51712
   376  00FD49  3B9A               	dw	15258
   377  00FD4B                     __end_of_dpowers:
   378                           	opt stack 0
   379  00FD4B                     Timer0_Init@PRESCALE:
   380                           	opt stack 0
   381  00FD4B  0002               	dw	2
   382  00FD4D  0004               	dw	4
   383  00FD4F  0008               	dw	8
   384  00FD51  0010               	dw	16
   385  00FD53  0020               	dw	32
   386  00FD55  0040               	dw	64
   387  00FD57  0080               	dw	128
   388  00FD59  0100               	dw	256
   389  00FD5B                     __end_ofTimer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FD5B                     PortProperty_Valid@F6830:
   392                           	opt stack 0
   393  00FD5B  00                 	db	0
   394  00FD5C  01                 	db	1
   395  00FD5D  02                 	db	2
   396  00FD5E  00                 	db	0
   397  00FD5F  01                 	db	1
   398  00FD60  00                 	db	0
   399  00FD61  01                 	db	1
   400  00FD62  00                 	db	0
   401  00FD63  02                 	db	2
   402  00FD64  02                 	db	2
   403  00FD65  00                 	db	0
   404  00FD66  00                 	db	0
   405  00FD67  03                 	db	3
   406  00FD68  03                 	db	3
   407  00FD69  03                 	db	3
   408  00FD6A  00                 	db	0
   409  00FD6B                     __end_ofPortProperty_Valid@F6830:
   410                           	opt stack 0
   411  00FD6B                     _MASKS:
   412                           	opt stack 0
   413  00FD6B  00                 	db	0
   414  00FD6C  01                 	db	1
   415  00FD6D  03                 	db	3
   416  00FD6E  07                 	db	7
   417  00FD6F  0F                 	db	15
   418  00FD70  1F                 	db	31
   419  00FD71  3F                 	db	63
   420  00FD72  7F                 	db	127
   421  00FD73  FF                 	db	255
   422  00FD74                     __end_of_MASKS:
   423                           	opt stack 0
   424  00FD74                     HMI_SetButton@F7211:
   425                           	opt stack 0
   426  00FD74  00                 	db	0
   427  00FD75  02                 	db	2
   428  00FD76  01                 	db	1
   429  00FD77  03                 	db	3
   430  00FD78                     __end_ofHMI_SetButton@F7211:
   431                           	opt stack 0
   432  00FD78                     Timer2_Init@PRESCALE:
   433                           	opt stack 0
   434  00FD78  01                 	db	1
   435  00FD79  04                 	db	4
   436  00FD7A  10                 	db	16
   437  00FD7B                     __end_ofTimer2_Init@PRESCALE:
   438                           	opt stack 0
   439  00FD7B                     _Font5x7:
   440                           	opt stack 0
   441  00FD7B  00                 	db	0
   442  00FD7C  00                 	db	0
   443  00FD7D  00                 	db	0
   444  00FD7E  00                 	db	0
   445  00FD7F  00                 	db	0
   446  00FD80  00                 	db	0
   447  00FD81  00                 	db	0
   448  00FD82  5F                 	db	95
   449  00FD83  00                 	db	0
   450  00FD84  00                 	db	0
   451  00FD85  00                 	db	0
   452  00FD86  07                 	db	7
   453  00FD87  00                 	db	0
   454  00FD88  07                 	db	7
   455  00FD89  00                 	db	0
   456  00FD8A  14                 	db	20
   457  00FD8B  7F                 	db	127
   458  00FD8C  14                 	db	20
   459  00FD8D  7F                 	db	127
   460  00FD8E  14                 	db	20
   461  00FD8F  24                 	db	36
   462  00FD90  2A                 	db	42
   463  00FD91  7F                 	db	127
   464  00FD92  2A                 	db	42
   465  00FD93  12                 	db	18
   466  00FD94  23                 	db	35
   467  00FD95  13                 	db	19
   468  00FD96  08                 	db	8
   469  00FD97  64                 	db	100
   470  00FD98  62                 	db	98
   471  00FD99  36                 	db	54
   472  00FD9A  49                 	db	73
   473  00FD9B  55                 	db	85
   474  00FD9C  22                 	db	34
   475  00FD9D  50                 	db	80
   476  00FD9E  00                 	db	0
   477  00FD9F  05                 	db	5
   478  00FDA0  03                 	db	3
   479  00FDA1  00                 	db	0
   480  00FDA2  00                 	db	0
   481  00FDA3  00                 	db	0
   482  00FDA4  1C                 	db	28
   483  00FDA5  22                 	db	34
   484  00FDA6  41                 	db	65
   485  00FDA7  00                 	db	0
   486  00FDA8  00                 	db	0
   487  00FDA9  41                 	db	65
   488  00FDAA  22                 	db	34
   489  00FDAB  1C                 	db	28
   490  00FDAC  00                 	db	0
   491  00FDAD  08                 	db	8
   492  00FDAE  2A                 	db	42
   493  00FDAF  1C                 	db	28
   494  00FDB0  2A                 	db	42
   495  00FDB1  08                 	db	8
   496  00FDB2  08                 	db	8
   497  00FDB3  08                 	db	8
   498  00FDB4  3E                 	db	62
   499  00FDB5  08                 	db	8
   500  00FDB6  08                 	db	8
   501  00FDB7  00                 	db	0
   502  00FDB8  50                 	db	80
   503  00FDB9  30                 	db	48
   504  00FDBA  00                 	db	0
   505  00FDBB  00                 	db	0
   506  00FDBC  08                 	db	8
   507  00FDBD  08                 	db	8
   508  00FDBE  08                 	db	8
   509  00FDBF  08                 	db	8
   510  00FDC0  08                 	db	8
   511  00FDC1  00                 	db	0
   512  00FDC2  60                 	db	96
   513  00FDC3  60                 	db	96
   514  00FDC4  00                 	db	0
   515  00FDC5  00                 	db	0
   516  00FDC6  20                 	db	32
   517  00FDC7  10                 	db	16
   518  00FDC8  08                 	db	8
   519  00FDC9  04                 	db	4
   520  00FDCA  02                 	db	2
   521  00FDCB  3E                 	db	62
   522  00FDCC  51                 	db	81
   523  00FDCD  49                 	db	73
   524  00FDCE  45                 	db	69
   525  00FDCF  3E                 	db	62
   526  00FDD0  00                 	db	0
   527  00FDD1  42                 	db	66
   528  00FDD2  7F                 	db	127
   529  00FDD3  40                 	db	64
   530  00FDD4  00                 	db	0
   531  00FDD5  42                 	db	66
   532  00FDD6  61                 	db	97
   533  00FDD7  51                 	db	81
   534  00FDD8  49                 	db	73
   535  00FDD9  46                 	db	70
   536  00FDDA  21                 	db	33
   537  00FDDB  41                 	db	65
   538  00FDDC  45                 	db	69
   539  00FDDD  4B                 	db	75
   540  00FDDE  31                 	db	49
   541  00FDDF  18                 	db	24
   542  00FDE0  14                 	db	20
   543  00FDE1  12                 	db	18
   544  00FDE2  7F                 	db	127
   545  00FDE3  10                 	db	16
   546  00FDE4  27                 	db	39
   547  00FDE5  45                 	db	69
   548  00FDE6  45                 	db	69
   549  00FDE7  45                 	db	69
   550  00FDE8  39                 	db	57
   551  00FDE9  3C                 	db	60
   552  00FDEA  4A                 	db	74
   553  00FDEB  49                 	db	73
   554  00FDEC  49                 	db	73
   555  00FDED  30                 	db	48
   556  00FDEE  01                 	db	1
   557  00FDEF  71                 	db	113
   558  00FDF0  09                 	db	9
   559  00FDF1  05                 	db	5
   560  00FDF2  03                 	db	3
   561  00FDF3  36                 	db	54
   562  00FDF4  49                 	db	73
   563  00FDF5  49                 	db	73
   564  00FDF6  49                 	db	73
   565  00FDF7  36                 	db	54
   566  00FDF8  06                 	db	6
   567  00FDF9  49                 	db	73
   568  00FDFA  49                 	db	73
   569  00FDFB  29                 	db	41
   570  00FDFC  1E                 	db	30
   571  00FDFD  00                 	db	0
   572  00FDFE  36                 	db	54
   573  00FDFF  36                 	db	54
   574  00FE00  00                 	db	0
   575  00FE01  00                 	db	0
   576  00FE02  00                 	db	0
   577  00FE03  56                 	db	86
   578  00FE04  36                 	db	54
   579  00FE05  00                 	db	0
   580  00FE06  00                 	db	0
   581  00FE07  00                 	db	0
   582  00FE08  08                 	db	8
   583  00FE09  14                 	db	20
   584  00FE0A  22                 	db	34
   585  00FE0B  41                 	db	65
   586  00FE0C  14                 	db	20
   587  00FE0D  14                 	db	20
   588  00FE0E  14                 	db	20
   589  00FE0F  14                 	db	20
   590  00FE10  14                 	db	20
   591  00FE11  41                 	db	65
   592  00FE12  22                 	db	34
   593  00FE13  14                 	db	20
   594  00FE14  08                 	db	8
   595  00FE15  00                 	db	0
   596  00FE16  02                 	db	2
   597  00FE17  01                 	db	1
   598  00FE18  51                 	db	81
   599  00FE19  09                 	db	9
   600  00FE1A  06                 	db	6
   601  00FE1B  32                 	db	50
   602  00FE1C  49                 	db	73
   603  00FE1D  79                 	db	121
   604  00FE1E  41                 	db	65
   605  00FE1F  3E                 	db	62
   606  00FE20  7E                 	db	126
   607  00FE21  11                 	db	17
   608  00FE22  11                 	db	17
   609  00FE23  11                 	db	17
   610  00FE24  7E                 	db	126
   611  00FE25  7F                 	db	127
   612  00FE26  49                 	db	73
   613  00FE27  49                 	db	73
   614  00FE28  49                 	db	73
   615  00FE29  36                 	db	54
   616  00FE2A  3E                 	db	62
   617  00FE2B  41                 	db	65
   618  00FE2C  41                 	db	65
   619  00FE2D  41                 	db	65
   620  00FE2E  22                 	db	34
   621  00FE2F  7F                 	db	127
   622  00FE30  41                 	db	65
   623  00FE31  41                 	db	65
   624  00FE32  22                 	db	34
   625  00FE33  1C                 	db	28
   626  00FE34  7F                 	db	127
   627  00FE35  49                 	db	73
   628  00FE36  49                 	db	73
   629  00FE37  49                 	db	73
   630  00FE38  41                 	db	65
   631  00FE39  7F                 	db	127
   632  00FE3A  09                 	db	9
   633  00FE3B  09                 	db	9
   634  00FE3C  01                 	db	1
   635  00FE3D  01                 	db	1
   636  00FE3E  3E                 	db	62
   637  00FE3F  41                 	db	65
   638  00FE40  41                 	db	65
   639  00FE41  51                 	db	81
   640  00FE42  32                 	db	50
   641  00FE43  7F                 	db	127
   642  00FE44  08                 	db	8
   643  00FE45  08                 	db	8
   644  00FE46  08                 	db	8
   645  00FE47  7F                 	db	127
   646  00FE48  00                 	db	0
   647  00FE49  41                 	db	65
   648  00FE4A  7F                 	db	127
   649  00FE4B  41                 	db	65
   650  00FE4C  00                 	db	0
   651  00FE4D  20                 	db	32
   652  00FE4E  40                 	db	64
   653  00FE4F  41                 	db	65
   654  00FE50  3F                 	db	63
   655  00FE51  01                 	db	1
   656  00FE52  7F                 	db	127
   657  00FE53  08                 	db	8
   658  00FE54  14                 	db	20
   659  00FE55  22                 	db	34
   660  00FE56  41                 	db	65
   661  00FE57  7F                 	db	127
   662  00FE58  40                 	db	64
   663  00FE59  40                 	db	64
   664  00FE5A  40                 	db	64
   665  00FE5B  40                 	db	64
   666  00FE5C  7F                 	db	127
   667  00FE5D  02                 	db	2
   668  00FE5E  04                 	db	4
   669  00FE5F  02                 	db	2
   670  00FE60  7F                 	db	127
   671  00FE61  7F                 	db	127
   672  00FE62  04                 	db	4
   673  00FE63  08                 	db	8
   674  00FE64  10                 	db	16
   675  00FE65  7F                 	db	127
   676  00FE66  3E                 	db	62
   677  00FE67  41                 	db	65
   678  00FE68  41                 	db	65
   679  00FE69  41                 	db	65
   680  00FE6A  3E                 	db	62
   681  00FE6B  7F                 	db	127
   682  00FE6C  09                 	db	9
   683  00FE6D  09                 	db	9
   684  00FE6E  09                 	db	9
   685  00FE6F  06                 	db	6
   686  00FE70  3E                 	db	62
   687  00FE71  41                 	db	65
   688  00FE72  51                 	db	81
   689  00FE73  21                 	db	33
   690  00FE74  5E                 	db	94
   691  00FE75  7F                 	db	127
   692  00FE76  09                 	db	9
   693  00FE77  19                 	db	25
   694  00FE78  29                 	db	41
   695  00FE79  46                 	db	70
   696  00FE7A  46                 	db	70
   697  00FE7B  49                 	db	73
   698  00FE7C  49                 	db	73
   699  00FE7D  49                 	db	73
   700  00FE7E  31                 	db	49
   701  00FE7F  01                 	db	1
   702  00FE80  01                 	db	1
   703  00FE81  7F                 	db	127
   704  00FE82  01                 	db	1
   705  00FE83  01                 	db	1
   706  00FE84  3F                 	db	63
   707  00FE85  40                 	db	64
   708  00FE86  40                 	db	64
   709  00FE87  40                 	db	64
   710  00FE88  3F                 	db	63
   711  00FE89  1F                 	db	31
   712  00FE8A  20                 	db	32
   713  00FE8B  40                 	db	64
   714  00FE8C  20                 	db	32
   715  00FE8D  1F                 	db	31
   716  00FE8E  7F                 	db	127
   717  00FE8F  20                 	db	32
   718  00FE90  18                 	db	24
   719  00FE91  20                 	db	32
   720  00FE92  7F                 	db	127
   721  00FE93  63                 	db	99
   722  00FE94  14                 	db	20
   723  00FE95  08                 	db	8
   724  00FE96  14                 	db	20
   725  00FE97  63                 	db	99
   726  00FE98  03                 	db	3
   727  00FE99  04                 	db	4
   728  00FE9A  78                 	db	120
   729  00FE9B  04                 	db	4
   730  00FE9C  03                 	db	3
   731  00FE9D  61                 	db	97
   732  00FE9E  51                 	db	81
   733  00FE9F  49                 	db	73
   734  00FEA0  45                 	db	69
   735  00FEA1  43                 	db	67
   736  00FEA2  00                 	db	0
   737  00FEA3  00                 	db	0
   738  00FEA4  7F                 	db	127
   739  00FEA5  41                 	db	65
   740  00FEA6  41                 	db	65
   741  00FEA7  02                 	db	2
   742  00FEA8  04                 	db	4
   743  00FEA9  08                 	db	8
   744  00FEAA  10                 	db	16
   745  00FEAB  20                 	db	32
   746  00FEAC  41                 	db	65
   747  00FEAD  41                 	db	65
   748  00FEAE  7F                 	db	127
   749  00FEAF  00                 	db	0
   750  00FEB0  00                 	db	0
   751  00FEB1  04                 	db	4
   752  00FEB2  02                 	db	2
   753  00FEB3  01                 	db	1
   754  00FEB4  02                 	db	2
   755  00FEB5  04                 	db	4
   756  00FEB6  40                 	db	64
   757  00FEB7  40                 	db	64
   758  00FEB8  40                 	db	64
   759  00FEB9  40                 	db	64
   760  00FEBA  40                 	db	64
   761  00FEBB  00                 	db	0
   762  00FEBC  01                 	db	1
   763  00FEBD  02                 	db	2
   764  00FEBE  04                 	db	4
   765  00FEBF  00                 	db	0
   766  00FEC0  20                 	db	32
   767  00FEC1  54                 	db	84
   768  00FEC2  54                 	db	84
   769  00FEC3  54                 	db	84
   770  00FEC4  78                 	db	120
   771  00FEC5  7F                 	db	127
   772  00FEC6  48                 	db	72
   773  00FEC7  44                 	db	68
   774  00FEC8  44                 	db	68
   775  00FEC9  38                 	db	56
   776  00FECA  38                 	db	56
   777  00FECB  44                 	db	68
   778  00FECC  44                 	db	68
   779  00FECD  44                 	db	68
   780  00FECE  20                 	db	32
   781  00FECF  38                 	db	56
   782  00FED0  44                 	db	68
   783  00FED1  44                 	db	68
   784  00FED2  48                 	db	72
   785  00FED3  7F                 	db	127
   786  00FED4  38                 	db	56
   787  00FED5  54                 	db	84
   788  00FED6  54                 	db	84
   789  00FED7  54                 	db	84
   790  00FED8  18                 	db	24
   791  00FED9  08                 	db	8
   792  00FEDA  7E                 	db	126
   793  00FEDB  09                 	db	9
   794  00FEDC  01                 	db	1
   795  00FEDD  02                 	db	2
   796  00FEDE  08                 	db	8
   797  00FEDF  14                 	db	20
   798  00FEE0  54                 	db	84
   799  00FEE1  54                 	db	84
   800  00FEE2  3C                 	db	60
   801  00FEE3  7F                 	db	127
   802  00FEE4  08                 	db	8
   803  00FEE5  04                 	db	4
   804  00FEE6  04                 	db	4
   805  00FEE7  78                 	db	120
   806  00FEE8  00                 	db	0
   807  00FEE9  44                 	db	68
   808  00FEEA  7D                 	db	125
   809  00FEEB  40                 	db	64
   810  00FEEC  00                 	db	0
   811  00FEED  20                 	db	32
   812  00FEEE  40                 	db	64
   813  00FEEF  44                 	db	68
   814  00FEF0  3D                 	db	61
   815  00FEF1  00                 	db	0
   816  00FEF2  00                 	db	0
   817  00FEF3  7F                 	db	127
   818  00FEF4  10                 	db	16
   819  00FEF5  28                 	db	40
   820  00FEF6  44                 	db	68
   821  00FEF7  00                 	db	0
   822  00FEF8  41                 	db	65
   823  00FEF9  7F                 	db	127
   824  00FEFA  40                 	db	64
   825  00FEFB  00                 	db	0
   826  00FEFC  7C                 	db	124
   827  00FEFD  04                 	db	4
   828  00FEFE  18                 	db	24
   829  00FEFF  04                 	db	4
   830  00FF00  78                 	db	120
   831  00FF01  7C                 	db	124
   832  00FF02  08                 	db	8
   833  00FF03  04                 	db	4
   834  00FF04  04                 	db	4
   835  00FF05  78                 	db	120
   836  00FF06  38                 	db	56
   837  00FF07  44                 	db	68
   838  00FF08  44                 	db	68
   839  00FF09  44                 	db	68
   840  00FF0A  38                 	db	56
   841  00FF0B  7C                 	db	124
   842  00FF0C  14                 	db	20
   843  00FF0D  14                 	db	20
   844  00FF0E  14                 	db	20
   845  00FF0F  08                 	db	8
   846  00FF10  08                 	db	8
   847  00FF11  14                 	db	20
   848  00FF12  14                 	db	20
   849  00FF13  18                 	db	24
   850  00FF14  7C                 	db	124
   851  00FF15  7C                 	db	124
   852  00FF16  08                 	db	8
   853  00FF17  04                 	db	4
   854  00FF18  04                 	db	4
   855  00FF19  08                 	db	8
   856  00FF1A  48                 	db	72
   857  00FF1B  54                 	db	84
   858  00FF1C  54                 	db	84
   859  00FF1D  54                 	db	84
   860  00FF1E  20                 	db	32
   861  00FF1F  04                 	db	4
   862  00FF20  3F                 	db	63
   863  00FF21  44                 	db	68
   864  00FF22  40                 	db	64
   865  00FF23  20                 	db	32
   866  00FF24  3C                 	db	60
   867  00FF25  40                 	db	64
   868  00FF26  40                 	db	64
   869  00FF27  20                 	db	32
   870  00FF28  7C                 	db	124
   871  00FF29  1C                 	db	28
   872  00FF2A  20                 	db	32
   873  00FF2B  40                 	db	64
   874  00FF2C  20                 	db	32
   875  00FF2D  1C                 	db	28
   876  00FF2E  3C                 	db	60
   877  00FF2F  40                 	db	64
   878  00FF30  30                 	db	48
   879  00FF31  40                 	db	64
   880  00FF32  3C                 	db	60
   881  00FF33  44                 	db	68
   882  00FF34  28                 	db	40
   883  00FF35  10                 	db	16
   884  00FF36  28                 	db	40
   885  00FF37  44                 	db	68
   886  00FF38  0C                 	db	12
   887  00FF39  50                 	db	80
   888  00FF3A  50                 	db	80
   889  00FF3B  50                 	db	80
   890  00FF3C  3C                 	db	60
   891  00FF3D  44                 	db	68
   892  00FF3E  64                 	db	100
   893  00FF3F  54                 	db	84
   894  00FF40  4C                 	db	76
   895  00FF41  44                 	db	68
   896  00FF42  00                 	db	0
   897  00FF43  08                 	db	8
   898  00FF44  36                 	db	54
   899  00FF45  41                 	db	65
   900  00FF46  00                 	db	0
   901  00FF47  00                 	db	0
   902  00FF48  00                 	db	0
   903  00FF49  7F                 	db	127
   904  00FF4A  00                 	db	0
   905  00FF4B  00                 	db	0
   906  00FF4C  00                 	db	0
   907  00FF4D  41                 	db	65
   908  00FF4E  36                 	db	54
   909  00FF4F  08                 	db	8
   910  00FF50  00                 	db	0
   911  00FF51  08                 	db	8
   912  00FF52  08                 	db	8
   913  00FF53  2A                 	db	42
   914  00FF54  1C                 	db	28
   915  00FF55  08                 	db	8
   916  00FF56  08                 	db	8
   917  00FF57  1C                 	db	28
   918  00FF58  2A                 	db	42
   919  00FF59  08                 	db	8
   920  00FF5A  08                 	db	8
   921  00FF5B                     __end_of_Font5x7:
   922                           	opt stack 0
   923  00FF5B                     _PortG_Property:
   924                           	opt stack 0
   925  00FF5B  FC00               	dw	64512
   926  00FF5D                     __end_of_PortG_Property:
   927                           	opt stack 0
   928  00FF5D                     _PortF_Property:
   929                           	opt stack 0
   930  00FF5D  0FFF               	dw	4095
   931  00FF5F                     __end_of_PortF_Property:
   932                           	opt stack 0
   933  00FF5F                     _PortE_Property:
   934                           	opt stack 0
   935  00FF5F  0000               	dw	0
   936  00FF61                     __end_of_PortE_Property:
   937                           	opt stack 0
   938  00FF61                     _PortD_Property:
   939                           	opt stack 0
   940  00FF61  FFFF               	dw	65535
   941  00FF63                     __end_of_PortD_Property:
   942                           	opt stack 0
   943  00FF63                     _PortC_Property:
   944                           	opt stack 0
   945  00FF63  FFF0               	dw	65520
   946  00FF65                     __end_of_PortC_Property:
   947                           	opt stack 0
   948  00FF65                     _PortB_Property:
   949                           	opt stack 0
   950  00FF65  FF00               	dw	65280
   951  00FF67                     __end_of_PortB_Property:
   952                           	opt stack 0
   953  00FF67                     _PortA_Property:
   954                           	opt stack 0
   955  00FF67  00FF               	dw	255
   956  00FF69                     __end_of_PortA_Property:
   957                           	opt stack 0
   958  0000                     _TMR0	set	4054
   959  0000                     _PR2	set	4043
   960  0000                     _T2CONbits	set	4042
   961  0000                     _T0CONbits	set	4053
   962  0000                     _RCONbits	set	4048
   963  0000                     _OSCTUNEbits	set	3995
   964  0000                     _PIR3	set	4004
   965  0000                     _PIR2	set	4001
   966  0000                     _PIR1	set	3998
   967  0000                     _INTCONbits	set	4082
   968  0000                     _SSP2CON2bits	set	3947
   969  0000                     _SSP1CON2bits	set	4037
   970  0000                     _SSP1ADD	set	4040
   971  0000                     _ANCON0	set	4033
   972  0000                     _ADRESL	set	4035
   973  0000                     _ADRESH	set	4036
   974  0000                     _ADCON1bits	set	4033
   975  0000                     _ADCON0bits	set	4034
   976  0000                     _SSP2CON1bits	set	3948
   977  0000                     _SSP1CON1bits	set	4038
   978  0000                     _SSP2STATbits	set	3949
   979  0000                     _SSP1STATbits	set	4039
   980  0000                     _PIE3bits	set	4003
   981  0000                     _PIE1bits	set	3997
   982  0000                     _PIR3bits	set	4004
   983  0000                     _PIR1bits	set	3998
   984  0000                     _IPR3bits	set	4005
   985  0000                     _IPR1bits	set	3999
   986  0000                     _PORTFbits	set	3973
   987  0000                     _SSP2CON2	set	3947
   988  0000                     _SSP1CON2	set	4037
   989  0000                     _SSP2BUF	set	3951
   990  0000                     _SSP2CON1	set	3948
   991  0000                     _SSP2STAT	set	3949
   992  0000                     _SSP1BUF	set	4041
   993  0000                     _SSP1CON1	set	4038
   994  0000                     _SSP1STAT	set	4039
   995  0000                     _LATG	set	3983
   996  0000                     _LATF	set	3982
   997  0000                     _LATE	set	3981
   998  0000                     _LATD	set	3980
   999  0000                     _LATC	set	3979
  1000  0000                     _LATB	set	3978
  1001  0000                     _LATA	set	3977
  1002  0000                     _TRISG	set	3992
  1003  0000                     _TRISF	set	3991
  1004  0000                     _TRISE	set	3990
  1005  0000                     _TRISD	set	3989
  1006  0000                     _TRISC	set	3988
  1007  0000                     _TRISB	set	3987
  1008  0000                     _TRISA	set	3986
  1009  0000                     _PORTG	set	3974
  1010  0000                     _PORTF	set	3973
  1011  0000                     _PORTE	set	3972
  1012  0000                     _PORTD	set	3971
  1013  0000                     _PORTC	set	3970
  1014  0000                     _PORTB	set	3969
  1015  0000                     _PORTA	set	3968
  1016  00FF69                     STR_11:
  1017  00FF69  20                 	db	32
  1018  00FF6A  20                 	db	32
  1019  00FF6B  20                 	db	32
  1020  00FF6C  20                 	db	32
  1021  00FF6D  20                 	db	32
  1022  00FF6E  20                 	db	32
  1023  00FF6F  20                 	db	32
  1024  00FF70  20                 	db	32
  1025  00FF71  20                 	db	32
  1026  00FF72  20                 	db	32
  1027  00FF73  20                 	db	32
  1028  00FF74  20                 	db	32
  1029  00FF75  20                 	db	32
  1030  00FF76  20                 	db	32
  1031  00FF77  20                 	db	32
  1032  00FF78  20                 	db	32
  1033  00FF79  20                 	db	32
  1034  00FF7A  20                 	db	32
  1035  00FF7B  20                 	db	32
  1036  00FF7C  20                 	db	32
  1037  00FF7D  20                 	db	32
  1038  00FF7E  20                 	db	32
  1039  00FF7F  0A                 	db	10
  1040  00FF80  00                 	db	0
  1041  00FF81                     STR_1:
  1042  00FF81  4A                 	db	74	;'J'
  1043  00FF82  61                 	db	97	;'a'
  1044  00FF83  6D                 	db	109	;'m'
  1045  00FF84  69                 	db	105	;'i'
  1046  00FF85  6E                 	db	110	;'n'
  1047  00FF86  20                 	db	32
  1048  00FF87  45                 	db	69	;'E'
  1049  00FF88  61                 	db	97	;'a'
  1050  00FF89  72                 	db	114	;'r'
  1051  00FF8A  6C                 	db	108	;'l'
  1052  00FF8B  79                 	db	121	;'y'
  1053  00FF8C  20                 	db	32
  1054  00FF8D  39                 	db	57	;'9'
  1055  00FF8E  39                 	db	57	;'9'
  1056  00FF8F  31                 	db	49	;'1'
  1057  00FF90  33                 	db	51	;'3'
  1058  00FF91  33                 	db	51	;'3'
  1059  00FF92  33                 	db	51	;'3'
  1060  00FF93  39                 	db	57	;'9'
  1061  00FF94  31                 	db	49	;'1'
  1062  00FF95  0A                 	db	10
  1063  00FF96  00                 	db	0
  1064  00FF97                     STR_3:
  1065  00FF97  43                 	db	67	;'C'
  1066  00FF98  75                 	db	117	;'u'
  1067  00FF99  72                 	db	114	;'r'
  1068  00FF9A  72                 	db	114	;'r'
  1069  00FF9B  65                 	db	101	;'e'
  1070  00FF9C  6E                 	db	110	;'n'
  1071  00FF9D  74                 	db	116	;'t'
  1072  00FF9E  20                 	db	32
  1073  00FF9F  4D                 	db	77	;'M'
  1074  00FFA0  6F                 	db	111	;'o'
  1075  00FFA1  64                 	db	100	;'d'
  1076  00FFA2  65                 	db	101	;'e'
  1077  00FFA3  3A                 	db	58	;':'
  1078  00FFA4  0A                 	db	10
  1079  00FFA5  00                 	db	0
  1080  00FFA6                     STR_9:
  1081  00FFA6  44                 	db	68	;'D'
  1082  00FFA7  69                 	db	105	;'i'
  1083  00FFA8  72                 	db	114	;'r'
  1084  00FFA9  65                 	db	101	;'e'
  1085  00FFAA  63                 	db	99	;'c'
  1086  00FFAB  74                 	db	116	;'t'
  1087  00FFAC  69                 	db	105	;'i'
  1088  00FFAD  6F                 	db	111	;'o'
  1089  00FFAE  6E                 	db	110	;'n'
  1090  00FFAF  3A                 	db	58	;':'
  1091  00FFB0  20                 	db	32
  1092  00FFB1  25                 	db	37
  1093  00FFB2  64                 	db	100	;'d'
  1094  00FFB3  0A                 	db	10
  1095  00FFB4  00                 	db	0
  1096  00FFB5                     STR_6:
  1097  00FFB5  20                 	db	32
  1098  00FFB6  43                 	db	67	;'C'
  1099  00FFB7  6F                 	db	111	;'o'
  1100  00FFB8  6E                 	db	110	;'n'
  1101  00FFB9  74                 	db	116	;'t'
  1102  00FFBA  69                 	db	105	;'i'
  1103  00FFBB  6E                 	db	110	;'n'
  1104  00FFBC  75                 	db	117	;'u'
  1105  00FFBD  6F                 	db	111	;'o'
  1106  00FFBE  75                 	db	117	;'u'
  1107  00FFBF  73                 	db	115	;'s'
  1108  00FFC0  0A                 	db	10
  1109  00FFC1  0A                 	db	10
  1110  00FFC2  00                 	db	0
  1111  00FFC3                     STR_7:
  1112  00FFC3  20                 	db	32
  1113  00FFC4  55                 	db	85	;'U'
  1114  00FFC5  6E                 	db	110	;'n'
  1115  00FFC6  64                 	db	100	;'d'
  1116  00FFC7  65                 	db	101	;'e'
  1117  00FFC8  66                 	db	102	;'f'
  1118  00FFC9  69                 	db	105	;'i'
  1119  00FFCA  6E                 	db	110	;'n'
  1120  00FFCB  65                 	db	101	;'e'
  1121  00FFCC  64                 	db	100	;'d'
  1122  00FFCD  0A                 	db	10
  1123  00FFCE  0A                 	db	10
  1124  00FFCF  00                 	db	0
  1125  00FFD0                     STR_10:
  1126  00FFD0  6D                 	db	109	;'m'
  1127  00FFD1  44                 	db	68	;'D'
  1128  00FFD2  65                 	db	101	;'e'
  1129  00FFD3  6C                 	db	108	;'l'
  1130  00FFD4  74                 	db	116	;'t'
  1131  00FFD5  61                 	db	97	;'a'
  1132  00FFD6  3A                 	db	58	;':'
  1133  00FFD7  20                 	db	32
  1134  00FFD8  25                 	db	37
  1135  00FFD9  6C                 	db	108	;'l'
  1136  00FFDA  64                 	db	100	;'d'
  1137  00FFDB  0A                 	db	10
  1138  00FFDC  00                 	db	0
  1139  00FFDD                     STR_4:
  1140  00FFDD  20                 	db	32
  1141  00FFDE  50                 	db	80	;'P'
  1142  00FFDF  6F                 	db	111	;'o'
  1143  00FFE0  73                 	db	115	;'s'
  1144  00FFE1  69                 	db	105	;'i'
  1145  00FFE2  74                 	db	116	;'t'
  1146  00FFE3  69                 	db	105	;'i'
  1147  00FFE4  6F                 	db	111	;'o'
  1148  00FFE5  6E                 	db	110	;'n'
  1149  00FFE6  0A                 	db	10
  1150  00FFE7  0A                 	db	10
  1151  00FFE8  00                 	db	0
  1152  00FFE9                     STR_8:
  1153  00FFE9  53                 	db	83	;'S'
  1154  00FFEA  70                 	db	112	;'p'
  1155  00FFEB  65                 	db	101	;'e'
  1156  00FFEC  65                 	db	101	;'e'
  1157  00FFED  64                 	db	100	;'d'
  1158  00FFEE  3A                 	db	58	;':'
  1159  00FFEF  20                 	db	32
  1160  00FFF0  25                 	db	37
  1161  00FFF1  64                 	db	100	;'d'
  1162  00FFF2  0A                 	db	10
  1163  00FFF3  00                 	db	0
  1164  00FFF4                     STR_5:
  1165  00FFF4  20                 	db	32
  1166  00FFF5  53                 	db	83	;'S'
  1167  00FFF6  74                 	db	116	;'t'
  1168  00FFF7  65                 	db	101	;'e'
  1169  00FFF8  70                 	db	112	;'p'
  1170  00FFF9  0A                 	db	10
  1171  00FFFA  0A                 	db	10
  1172  00FFFB  00                 	db	0
  1173  00FFFC                     STR_2:
  1174  00FFFC  25                 	db	37
  1175  00FFFD  63                 	db	99	;'c'
  1176  00FFFE  00                 	db	0
  1177  0000                     
  1178                           ; #config settings
  1179  00FFFF  00                 	db	0	; dummy byte at the end
  1180  0000                     
  1181                           	psect	cinit
  1182  012D94                     __pcinit:
  1183                           	opt stack 0
  1184  012D94                     start_initialization:
  1185                           	opt stack 0
  1186  012D94                     __initialization:
  1187                           	opt stack 0
  1188                           
  1189                           ; Initialize objects allocated to BANK1 (8 bytes)
  1190                           ; load TBLPTR registers with __pidataBANK1
  1191  012D94  0E9E               	movlw	low __pidataBANK1
  1192  012D96  6EF6               	movwf	tblptrl,c
  1193  012D98  0E4B               	movlw	high __pidataBANK1
  1194  012D9A  6EF7               	movwf	tblptrh,c
  1195  012D9C  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1196  012D9E  6EF8               	movwf	tblptru,c
  1197  012DA0  EE01  F0C9         	lfsr	0,__pdataBANK1
  1198  012DA4  EE10 F008          	lfsr	1,8
  1199  012DA8                     copy_data0:
  1200  012DA8  0009               	tblrd		*+
  1201  012DAA  CFF5 FFEE          	movff	tablat,postinc0
  1202  012DAE  50E5               	movf	postdec1,w,c
  1203  012DB0  50E1               	movf	fsr1l,w,c
  1204  012DB2  E1FA               	bnz	copy_data0
  1205                           
  1206                           ; Initialize objects allocated to BANK0 (7 bytes)
  1207                           ; load TBLPTR registers with __pidataBANK0
  1208  012DB4  0EAE               	movlw	low __pidataBANK0
  1209  012DB6  6EF6               	movwf	tblptrl,c
  1210  012DB8  0E4B               	movlw	high __pidataBANK0
  1211  012DBA  6EF7               	movwf	tblptrh,c
  1212  012DBC  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1213  012DBE  6EF8               	movwf	tblptru,c
  1214  012DC0  EE00  F0F9         	lfsr	0,__pdataBANK0
  1215  012DC4  EE10 F007          	lfsr	1,7
  1216  012DC8                     copy_data1:
  1217  012DC8  0009               	tblrd		*+
  1218  012DCA  CFF5 FFEE          	movff	tablat,postinc0
  1219  012DCE  50E5               	movf	postdec1,w,c
  1220  012DD0  50E1               	movf	fsr1l,w,c
  1221  012DD2  E1FA               	bnz	copy_data1
  1222                           
  1223                           ; Initialize objects allocated to COMRAM (10 bytes)
  1224                           ; load TBLPTR registers with __pidataCOMRAM
  1225  012DD4  0E80               	movlw	low __pidataCOMRAM
  1226  012DD6  6EF6               	movwf	tblptrl,c
  1227  012DD8  0E4B               	movlw	high __pidataCOMRAM
  1228  012DDA  6EF7               	movwf	tblptrh,c
  1229  012DDC  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1230  012DDE  6EF8               	movwf	tblptru,c
  1231  012DE0  EE00  F047         	lfsr	0,__pdataCOMRAM
  1232  012DE4  EE10 F00A          	lfsr	1,10
  1233  012DE8                     copy_data2:
  1234  012DE8  0009               	tblrd		*+
  1235  012DEA  CFF5 FFEE          	movff	tablat,postinc0
  1236  012DEE  50E5               	movf	postdec1,w,c
  1237  012DF0  50E1               	movf	fsr1l,w,c
  1238  012DF2  E1FA               	bnz	copy_data2
  1239                           
  1240                           ; Clear objects allocated to BIGRAM (300 bytes)
  1241  012DF4  EE02  F046         	lfsr	0,__pbssBIGRAM
  1242  012DF8  EE11 F02C          	lfsr	1,300
  1243  012DFC                     clear_0:
  1244  012DFC  6AEE               	clrf	postinc0,c
  1245  012DFE  50E5               	movf	postdec1,w,c
  1246  012E00  50E1               	movf	fsr1l,w,c
  1247  012E02  E1FC               	bnz	clear_0
  1248  012E04  50E2               	movf	fsr1h,w,c
  1249  012E06  E1FA               	bnz	clear_0
  1250                           
  1251                           ; Clear objects allocated to BANK2 (70 bytes)
  1252  012E08  EE02  F000         	lfsr	0,__pbssBANK2
  1253  012E0C  0E46               	movlw	70
  1254  012E0E                     clear_1:
  1255  012E0E  6AEE               	clrf	postinc0,c
  1256  012E10  06E8               	decf	wreg,f,c
  1257  012E12  E1FD               	bnz	clear_1
  1258                           
  1259                           ; Clear objects allocated to BANK1 (186 bytes)
  1260  012E14  EE01  F000         	lfsr	0,__pbssBANK1
  1261  012E18  0EBA               	movlw	186
  1262  012E1A                     clear_2:
  1263  012E1A  6AEE               	clrf	postinc0,c
  1264  012E1C  06E8               	decf	wreg,f,c
  1265  012E1E  E1FD               	bnz	clear_2
  1266                           
  1267                           ; Clear objects allocated to BANK0 (93 bytes)
  1268  012E20  EE00  F060         	lfsr	0,__pbssBANK0
  1269  012E24  0E5D               	movlw	93
  1270  012E26                     clear_3:
  1271  012E26  6AEE               	clrf	postinc0,c
  1272  012E28  06E8               	decf	wreg,f,c
  1273  012E2A  E1FD               	bnz	clear_3
  1274                           
  1275                           ; Clear objects allocated to COMRAM (30 bytes)
  1276  012E2C  EE00  F029         	lfsr	0,__pbssCOMRAM
  1277  012E30  0E1E               	movlw	30
  1278  012E32                     clear_4:
  1279  012E32  6AEE               	clrf	postinc0,c
  1280  012E34  06E8               	decf	wreg,f,c
  1281  012E36  E1FD               	bnz	clear_4
  1282  012E38                     end_of_initialization:
  1283                           	opt stack 0
  1284  012E38                     __end_of__initialization:
  1285                           	opt stack 0
  1286  012E38  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1287  012E3A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1288  012E3C  0100               	movlb	0
  1289  012E3E  EFE0  F0A3         	goto	_main	;jump to C main() function
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           postinc0	equ	0xFEE
  1295                           wreg	equ	0xFE8
  1296                           postdec1	equ	0xFE5
  1297                           fsr1h	equ	0xFE2
  1298                           fsr1l	equ	0xFE1
  1299                           
  1300                           	psect	bssCOMRAM
  1301  000029                     __pbssCOMRAM:
  1302                           	opt stack 0
  1303  000029                     _gISR:
  1304                           	opt stack 0
  1305  000029                     	ds	3
  1306  00002C                     _lStepFunction:
  1307                           	opt stack 0
  1308  00002C                     	ds	3
  1309  00002F                     _I2C1_Done:
  1310                           	opt stack 0
  1311  00002F                     	ds	3
  1312  000032                     _COUNTER:
  1313                           	opt stack 0
  1314  000032                     	ds	2
  1315  000034                     HMI_GRender@a:
  1316                           	opt stack 0
  1317  000034                     	ds	2
  1318  000036                     SPI_Send9@dat:
  1319                           	opt stack 0
  1320  000036                     	ds	2
  1321  000038                     _u:
  1322                           	opt stack 0
  1323  000038                     	ds	1
  1324  000039                     _j:
  1325                           	opt stack 0
  1326  000039                     	ds	1
  1327  00003A                     _i:
  1328                           	opt stack 0
  1329  00003A                     	ds	1
  1330  00003B                     rand@screw:
  1331                           	opt stack 0
  1332  00003B                     	ds	1
  1333  00003C                     _ADC_Initialised:
  1334                           	opt stack 0
  1335  00003C                     	ds	1
  1336  00003D                     OutSeg@a:
  1337                           	opt stack 0
  1338  00003D                     	ds	1
  1339  00003E                     OutSeg@segset:
  1340                           	opt stack 0
  1341  00003E                     	ds	1
  1342  00003F                     OutSeg@cur:
  1343                           	opt stack 0
  1344  00003F                     	ds	1
  1345  000040                     _I2C1T:
  1346                           	opt stack 0
  1347  000040                     	ds	7
  1348                           tblptru	equ	0xFF8
  1349                           tblptrh	equ	0xFF7
  1350                           tblptrl	equ	0xFF6
  1351                           tablat	equ	0xFF5
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           postdec1	equ	0xFE5
  1355                           fsr1h	equ	0xFE2
  1356                           fsr1l	equ	0xFE1
  1357                           
  1358                           	psect	dataCOMRAM
  1359  000047                     __pdataCOMRAM:
  1360                           	opt stack 0
  1361  000047                     _gCursor:
  1362                           	opt stack 0
  1363  000047                     	ds	4
  1364  00004B                     _Bus_State:
  1365                           	opt stack 0
  1366  00004B                     	ds	1
  1367  00004C                     	ds	1
  1368  00004D                     	ds	1
  1369  00004E                     	ds	1
  1370  00004F                     _l:
  1371                           	opt stack 0
  1372  00004F                     	ds	1
  1373  000050                     _w:
  1374                           	opt stack 0
  1375  000050                     	ds	1
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           postdec1	equ	0xFE5
  1383                           fsr1h	equ	0xFE2
  1384                           fsr1l	equ	0xFE1
  1385                           
  1386                           	psect	bssBANK0
  1387  000060                     __pbssBANK0:
  1388                           	opt stack 0
  1389  000060                     Timer2_Init@DIV:
  1390                           	opt stack 0
  1391  000060                     	ds	4
  1392  000064                     Timer0_Init@DIV:
  1393                           	opt stack 0
  1394  000064                     	ds	4
  1395  000068                     _lQueue:
  1396                           	opt stack 0
  1397  000068                     	ds	3
  1398  00006B                     _pShiftVal:
  1399                           	opt stack 0
  1400  00006B                     	ds	2
  1401  00006D                     _val:
  1402                           	opt stack 0
  1403  00006D                     	ds	2
  1404  00006F                     _lMotor:
  1405                           	opt stack 0
  1406  00006F                     	ds	2
  1407  000071                     _lCurrent:
  1408                           	opt stack 0
  1409  000071                     	ds	2
  1410  000073                     _gBackcolour:
  1411                           	opt stack 0
  1412  000073                     	ds	2
  1413  000075                     Event_TestButton@j:
  1414                           	opt stack 0
  1415  000075                     	ds	1
  1416  000076                     Timer2_Init@PRE:
  1417                           	opt stack 0
  1418  000076                     	ds	1
  1419  000077                     Timer2_Init@INDEX:
  1420                           	opt stack 0
  1421  000077                     	ds	1
  1422  000078                     Timer0_Init@PRE:
  1423                           	opt stack 0
  1424  000078                     	ds	1
  1425  000079                     _INDEX:
  1426                           	opt stack 0
  1427  000079                     	ds	1
  1428  00007A                     _lBufferY:
  1429                           	opt stack 0
  1430  00007A                     	ds	1
  1431  00007B                     _lBufferX:
  1432                           	opt stack 0
  1433  00007B                     	ds	1
  1434  00007C                     _clearall:
  1435                           	opt stack 0
  1436  00007C                     	ds	1
  1437  00007D                     _PortE:
  1438                           	opt stack 0
  1439  00007D                     	ds	10
  1440  000087                     _PortD:
  1441                           	opt stack 0
  1442  000087                     	ds	10
  1443  000091                     _PortC:
  1444                           	opt stack 0
  1445  000091                     	ds	10
  1446  00009B                     _Stepper:
  1447                           	opt stack 0
  1448  00009B                     	ds	6
  1449  0000A1                     _ADC_AN3:
  1450                           	opt stack 0
  1451  0000A1                     	ds	5
  1452  0000A6                     _ADC_AN2:
  1453                           	opt stack 0
  1454  0000A6                     	ds	5
  1455  0000AB                     _ADC_AN1:
  1456                           	opt stack 0
  1457  0000AB                     	ds	5
  1458  0000B0                     _ADC_AN0:
  1459                           	opt stack 0
  1460  0000B0                     	ds	5
  1461  0000B5                     LCD_DrawRectangle@p4:
  1462                           	opt stack 0
  1463  0000B5                     	ds	4
  1464  0000B9                     LCD_DrawRectangle@p2:
  1465                           	opt stack 0
  1466  0000B9                     	ds	4
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           
  1477                           	psect	dataBANK0
  1478  0000F9                     __pdataBANK0:
  1479                           	opt stack 0
  1480  0000F9                     _gCharSize:
  1481                           	opt stack 0
  1482  0000F9                     	ds	4
  1483  0000FD                     _gForecolour:
  1484                           	opt stack 0
  1485  0000FD                     	ds	2
  1486  0000FF                     _change:
  1487                           	opt stack 0
  1488  0000FF                     	ds	1
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           	psect	bssBANK1
  1500  000100                     __pbssBANK1:
  1501                           	opt stack 0
  1502  000100                     _lCBuffer:
  1503                           	opt stack 0
  1504  000100                     	ds	30
  1505  00011E                     _I2C2_More:
  1506                           	opt stack 0
  1507  00011E                     	ds	3
  1508  000121                     _I2C1_More:
  1509                           	opt stack 0
  1510  000121                     	ds	3
  1511  000124                     _I2C2_Done:
  1512                           	opt stack 0
  1513  000124                     	ds	3
  1514  000127                     _HMIBoard:
  1515                           	opt stack 0
  1516  000127                     	ds	58
  1517  000161                     _SPI1:
  1518                           	opt stack 0
  1519  000161                     	ds	11
  1520  00016C                     _SPI2:
  1521                           	opt stack 0
  1522  00016C                     	ds	11
  1523  000177                     _DIPSwitch:
  1524                           	opt stack 0
  1525  000177                     	ds	10
  1526  000181                     _TestButton:
  1527                           	opt stack 0
  1528  000181                     	ds	10
  1529  00018B                     _PortG:
  1530                           	opt stack 0
  1531  00018B                     	ds	10
  1532  000195                     _PortB:
  1533                           	opt stack 0
  1534  000195                     	ds	10
  1535  00019F                     _PortA:
  1536                           	opt stack 0
  1537  00019F                     	ds	10
  1538  0001A9                     _PortF:
  1539                           	opt stack 0
  1540  0001A9                     	ds	10
  1541  0001B3                     _I2C2T:
  1542                           	opt stack 0
  1543  0001B3                     	ds	7
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           
  1554                           	psect	dataBANK1
  1555  0001C9                     __pdataBANK1:
  1556                           	opt stack 0
  1557  0001C9                     Console_Render@F6956:
  1558                           	opt stack 0
  1559  0001C9                     	ds	4
  1560  0001CD                     _gLineSize:
  1561                           	opt stack 0
  1562  0001CD                     	ds	4
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1h	equ	0xFE2
  1571                           fsr1l	equ	0xFE1
  1572                           
  1573                           	psect	bssBANK2
  1574  000200                     __pbssBANK2:
  1575                           	opt stack 0
  1576  000200                     Console_MakeField@Fill:
  1577                           	opt stack 0
  1578  000200                     	ds	70
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           fsr1h	equ	0xFE2
  1587                           fsr1l	equ	0xFE1
  1588                           
  1589                           	psect	bssBIGRAM
  1590  000246                     __pbssBIGRAM:
  1591                           	opt stack 0
  1592  000246                     _lBuffer:
  1593                           	opt stack 0
  1594  000246                     	ds	300
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           postinc0	equ	0xFEE
  1600                           wreg	equ	0xFE8
  1601                           postdec1	equ	0xFE5
  1602                           fsr1h	equ	0xFE2
  1603                           fsr1l	equ	0xFE1
  1604                           
  1605                           	psect	cstackBANK1
  1606  0001BA                     __pcstackBANK1:
  1607                           	opt stack 0
  1608  0001BA                     Button_Init@pInput:
  1609                           	opt stack 0
  1610  0001BA                     Port_SetType@pInput:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x0
  1614  0001BA                     	ds	2
  1615  0001BC                     Port_SetType@pType:
  1616                           	opt stack 0
  1617  0001BC                     Button_Init@pThreshold:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x2
  1621  0001BC                     	ds	1
  1622  0001BD                     Port_SetType@Output:
  1623                           	opt stack 0
  1624                           
  1625                           ; 1 bytes @ 0x3
  1626  0001BD                     	ds	1
  1627  0001BE                     Port_Init@pInput:
  1628                           	opt stack 0
  1629  0001BE                     Button_Init@pInitIO:
  1630                           	opt stack 0
  1631                           
  1632                           ; 3 bytes @ 0x4
  1633  0001BE                     	ds	2
  1634  0001C0                     Port_Init@pPort:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x6
  1638  0001C0                     	ds	1
  1639  0001C1                     ??_Port_Init:
  1640  0001C1                     Button_Init@pGetState:
  1641                           	opt stack 0
  1642                           
  1643                           ; 3 bytes @ 0x7
  1644  0001C1                     	ds	2
  1645  0001C3                     Port_Init@i:
  1646                           	opt stack 0
  1647                           
  1648                           ; 1 bytes @ 0x9
  1649  0001C3                     	ds	1
  1650  0001C4                     Button_Init@pFunction:
  1651                           	opt stack 0
  1652                           
  1653                           ; 3 bytes @ 0xA
  1654  0001C4                     	ds	3
  1655  0001C7                     HMI_Init@in:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0xD
  1659  0001C7                     	ds	2
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           postdec1	equ	0xFE5
  1667                           fsr1h	equ	0xFE2
  1668                           fsr1l	equ	0xFE1
  1669                           
  1670                           	psect	cstackBANK0
  1671  0000BD                     __pcstackBANK0:
  1672                           	opt stack 0
  1673  0000BD                     ??_Console_ClearCursor:
  1674  0000BD                     ??_Console_Init:
  1675  0000BD                     ??_Console_NewLine:
  1676  0000BD                     ??_Console_FormFeed:
  1677  0000BD                     ??_HMI_SetButton:
  1678  0000BD                     ?_GetPortProperties:
  1679                           	opt stack 0
  1680  0000BD                     ?_GetPortPORT:
  1681                           	opt stack 0
  1682  0000BD                     ?_GetPortTRIS:
  1683                           	opt stack 0
  1684  0000BD                     ?___wmul:
  1685                           	opt stack 0
  1686  0000BD                     ?___awdiv:
  1687                           	opt stack 0
  1688  0000BD                     ?___lwdiv:
  1689                           	opt stack 0
  1690  0000BD                     ?___lwmod:
  1691                           	opt stack 0
  1692  0000BD                     ?___lldiv:
  1693                           	opt stack 0
  1694  0000BD                     Mode_Set@pMode:
  1695                           	opt stack 0
  1696  0000BD                     ToSegment@pCHR:
  1697                           	opt stack 0
  1698  0000BD                     HMI_SetLeft@pValue:
  1699                           	opt stack 0
  1700  0000BD                     HMI_SetRight@pValue:
  1701                           	opt stack 0
  1702  0000BD                     HMI_SetUp@pValue:
  1703                           	opt stack 0
  1704  0000BD                     HMI_SetDown@pValue:
  1705                           	opt stack 0
  1706  0000BD                     HMI_SetBar@pValue:
  1707                           	opt stack 0
  1708  0000BD                     Port_GetPin@pInput:
  1709                           	opt stack 0
  1710  0000BD                     Port_GetQuad@pInput:
  1711                           	opt stack 0
  1712  0000BD                     SPI_DisableISR@pInput:
  1713                           	opt stack 0
  1714  0000BD                     SPI_DCS@pInput:
  1715                           	opt stack 0
  1716  0000BD                     SPI_Send@pInput:
  1717                           	opt stack 0
  1718  0000BD                     Byte_SetBit@pInput:
  1719                           	opt stack 0
  1720  0000BD                     Byte_GetBit@pInput:
  1721                           	opt stack 0
  1722  0000BD                     Byte_SetZone@pInput:
  1723                           	opt stack 0
  1724  0000BD                     Byte_GetZone@pInput:
  1725                           	opt stack 0
  1726  0000BD                     Byte_SetByte@pInput:
  1727                           	opt stack 0
  1728  0000BD                     delay_ms@ms:
  1729                           	opt stack 0
  1730  0000BD                     delay_us@us:
  1731                           	opt stack 0
  1732  0000BD                     reverse@input:
  1733                           	opt stack 0
  1734  0000BD                     Console_SetForecolour@pColour:
  1735                           	opt stack 0
  1736  0000BD                     ___wmul@multiplier:
  1737                           	opt stack 0
  1738  0000BD                     ___awdiv@dividend:
  1739                           	opt stack 0
  1740  0000BD                     ___lwdiv@dividend:
  1741                           	opt stack 0
  1742  0000BD                     ___lwmod@dividend:
  1743                           	opt stack 0
  1744  0000BD                     MXK_Queue@pCallback:
  1745                           	opt stack 0
  1746  0000BD                     Timer0_Start@pFunction:
  1747                           	opt stack 0
  1748  0000BD                     ___lldiv@dividend:
  1749                           	opt stack 0
  1750                           
  1751                           ; 4 bytes @ 0x0
  1752  0000BD                     	ds	1
  1753  0000BE                     HMI_SetSegments@pString:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x1
  1757  0000BE                     	ds	1
  1758  0000BF                     GetPortProperties@pInput:
  1759                           	opt stack 0
  1760  0000BF                     GetPortPORT@pInput:
  1761                           	opt stack 0
  1762  0000BF                     GetPortTRIS@pInput:
  1763                           	opt stack 0
  1764  0000BF                     Port_GetPin@pPin:
  1765                           	opt stack 0
  1766  0000BF                     Port_GetQuad@pQuad:
  1767                           	opt stack 0
  1768  0000BF                     SPI_Send@pData:
  1769                           	opt stack 0
  1770  0000BF                     Byte_SetBit@pBit:
  1771                           	opt stack 0
  1772  0000BF                     Byte_GetBit@pBit:
  1773                           	opt stack 0
  1774  0000BF                     Byte_SetZone@pMax:
  1775                           	opt stack 0
  1776  0000BF                     Byte_GetZone@pMax:
  1777                           	opt stack 0
  1778  0000BF                     Byte_SetByte@pValue:
  1779                           	opt stack 0
  1780  0000BF                     Console_Init@x:
  1781                           	opt stack 0
  1782  0000BF                     Console_FormFeed@x:
  1783                           	opt stack 0
  1784  0000BF                     reverse@length:
  1785                           	opt stack 0
  1786  0000BF                     ___wmul@multiplicand:
  1787                           	opt stack 0
  1788  0000BF                     ___awdiv@divisor:
  1789                           	opt stack 0
  1790  0000BF                     ___lwdiv@divisor:
  1791                           	opt stack 0
  1792  0000BF                     ___lwmod@divisor:
  1793                           	opt stack 0
  1794  0000BF                     delay_ms@u:
  1795                           	opt stack 0
  1796  0000BF                     delay_us@u:
  1797                           	opt stack 0
  1798  0000BF                     HMI_SetButton@reindex:
  1799                           	opt stack 0
  1800                           
  1801                           ; 4 bytes @ 0x2
  1802  0000BF                     	ds	1
  1803  0000C0                     ??_Port_GetPin:
  1804  0000C0                     ??_Port_GetQuad:
  1805  0000C0                     ??_Byte_GetBit:
  1806  0000C0                     LCD_Write@mode:
  1807                           	opt stack 0
  1808  0000C0                     Byte_SetBit@pValue:
  1809                           	opt stack 0
  1810  0000C0                     Byte_SetZone@pChunk:
  1811                           	opt stack 0
  1812  0000C0                     Byte_GetZone@pChunk:
  1813                           	opt stack 0
  1814  0000C0                     Console_Init@y:
  1815                           	opt stack 0
  1816  0000C0                     Console_FormFeed@y:
  1817                           	opt stack 0
  1818  0000C0                     Motor_Move@pMotor:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x3
  1822  0000C0                     	ds	1
  1823  0000C1                     ??_Byte_SetBit:
  1824  0000C1                     ??_Console_IncrementCursor:
  1825  0000C1                     LCD_Write@value:
  1826                           	opt stack 0
  1827  0000C1                     Byte_GetBit@Output:
  1828                           	opt stack 0
  1829  0000C1                     Byte_SetZone@pChunkSize:
  1830                           	opt stack 0
  1831  0000C1                     Byte_GetZone@pChunkSize:
  1832                           	opt stack 0
  1833  0000C1                     reverse@tempVar:
  1834                           	opt stack 0
  1835  0000C1                     ___awdiv@counter:
  1836                           	opt stack 0
  1837  0000C1                     ___lwdiv@counter:
  1838                           	opt stack 0
  1839  0000C1                     ___lwmod@counter:
  1840                           	opt stack 0
  1841  0000C1                     HMI_SetSegments@in:
  1842                           	opt stack 0
  1843  0000C1                     ___wmul@product:
  1844                           	opt stack 0
  1845  0000C1                     ___lldiv@divisor:
  1846                           	opt stack 0
  1847                           
  1848                           ; 4 bytes @ 0x4
  1849  0000C1                     	ds	1
  1850  0000C2                     ??_Byte_GetZone:
  1851  0000C2                     ?_Console_MakeField:
  1852                           	opt stack 0
  1853  0000C2                     Set_Addr_Window@ys:
  1854                           	opt stack 0
  1855  0000C2                     Set_Rotation@m:
  1856                           	opt stack 0
  1857  0000C2                     Port_GetPin@Output:
  1858                           	opt stack 0
  1859  0000C2                     Port_GetQuad@Output:
  1860                           	opt stack 0
  1861  0000C2                     Byte_SetZone@pValue:
  1862                           	opt stack 0
  1863  0000C2                     ___awdiv@sign:
  1864                           	opt stack 0
  1865  0000C2                     LCD_Word_Write@value:
  1866                           	opt stack 0
  1867  0000C2                     reverse@iterator:
  1868                           	opt stack 0
  1869  0000C2                     Motor_Move@pDelta:
  1870                           	opt stack 0
  1871  0000C2                     ___lwdiv@quotient:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x5
  1875  0000C2                     	ds	1
  1876  0000C3                     ??_Byte_SetZone:
  1877  0000C3                     Set_Addr_Window@xe:
  1878                           	opt stack 0
  1879  0000C3                     Set_Rotation@rotation:
  1880                           	opt stack 0
  1881  0000C3                     Byte_GetZone@MASK:
  1882                           	opt stack 0
  1883  0000C3                     HMI_SetButton@pValue:
  1884                           	opt stack 0
  1885  0000C3                     MXK_BlockSwitchTo@CUR:
  1886                           	opt stack 0
  1887  0000C3                     MXK_SwitchTo@CUR:
  1888                           	opt stack 0
  1889  0000C3                     ___awdiv@quotient:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x6
  1893  0000C3                     	ds	1
  1894  0000C4                     ??_Console_MakeField:
  1895  0000C4                     Set_Addr_Window@ye:
  1896                           	opt stack 0
  1897  0000C4                     Byte_GetZone@Offset:
  1898                           	opt stack 0
  1899  0000C4                     HMI_SetButton@v:
  1900                           	opt stack 0
  1901  0000C4                     MXK_BlockSwitchTo@pModule:
  1902                           	opt stack 0
  1903  0000C4                     MXK_SwitchTo@pModule:
  1904                           	opt stack 0
  1905  0000C4                     itos@input:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x7
  1909  0000C4                     	ds	1
  1910  0000C5                     ??_Console_Tab:
  1911  0000C5                     Set_Addr_Window@xs:
  1912                           	opt stack 0
  1913  0000C5                     Byte_GetZone@Output:
  1914                           	opt stack 0
  1915  0000C5                     ___lldiv@quotient:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x8
  1919  0000C5                     	ds	1
  1920  0000C6                     Byte_SetZone@Offset:
  1921                           	opt stack 0
  1922  0000C6                     LCD_Fill@pColour:
  1923                           	opt stack 0
  1924  0000C6                     LCD_FillRectangle@pColour:
  1925                           	opt stack 0
  1926  0000C6                     Byte_GetPair@pInput:
  1927                           	opt stack 0
  1928  0000C6                     itos@destination:
  1929                           	opt stack 0
  1930  0000C6                     Console_MakeField@Index:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x9
  1934  0000C6                     	ds	1
  1935  0000C7                     Byte_SetZone@MASK:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0xA
  1939  0000C7                     	ds	1
  1940  0000C8                     LCD_Fill@i:
  1941                           	opt stack 0
  1942  0000C8                     Byte_GetPair@pPair:
  1943                           	opt stack 0
  1944  0000C8                     Console_MakeField@pInput:
  1945                           	opt stack 0
  1946  0000C8                     Byte_SetPair@pInput:
  1947                           	opt stack 0
  1948  0000C8                     Byte_SetQuad@pInput:
  1949                           	opt stack 0
  1950  0000C8                     itos@Data:
  1951                           	opt stack 0
  1952  0000C8                     LCD_FillRectangle@pPoint:
  1953                           	opt stack 0
  1954                           
  1955                           ; 4 bytes @ 0xB
  1956  0000C8                     	ds	1
  1957  0000C9                     LCD_Fill@j:
  1958                           	opt stack 0
  1959  0000C9                     ___lldiv@counter:
  1960                           	opt stack 0
  1961  0000C9                     Word_GetPair@pInput:
  1962                           	opt stack 0
  1963  0000C9                     Console_MakeField@Column:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0xC
  1967  0000C9                     	ds	1
  1968  0000CA                     ?___llmod:
  1969                           	opt stack 0
  1970  0000CA                     Byte_SetPair@pPair:
  1971                           	opt stack 0
  1972  0000CA                     Byte_SetQuad@pQuad:
  1973                           	opt stack 0
  1974  0000CA                     Console_Tab@t:
  1975                           	opt stack 0
  1976  0000CA                     itos@Length:
  1977                           	opt stack 0
  1978  0000CA                     Timer0_Init@pFrequency:
  1979                           	opt stack 0
  1980  0000CA                     Timer2_Init@pFrequency:
  1981                           	opt stack 0
  1982  0000CA                     ___llmod@dividend:
  1983                           	opt stack 0
  1984                           
  1985                           ; 4 bytes @ 0xD
  1986  0000CA                     	ds	1
  1987  0000CB                     Byte_SetPair@pValue:
  1988                           	opt stack 0
  1989  0000CB                     Byte_SetQuad@pValue:
  1990                           	opt stack 0
  1991  0000CB                     Word_GetPair@pPair:
  1992                           	opt stack 0
  1993  0000CB                     Console_Tab@i:
  1994                           	opt stack 0
  1995  0000CB                     _Console_MakeField$10974:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0xE
  1999  0000CB                     	ds	1
  2000  0000CC                     Console_Tab@c:
  2001                           	opt stack 0
  2002  0000CC                     Port_SetPin@pInput:
  2003                           	opt stack 0
  2004  0000CC                     Port_Set@pInput:
  2005                           	opt stack 0
  2006  0000CC                     SPI_MinSpeed@pInput:
  2007                           	opt stack 0
  2008  0000CC                     SPI_MaxSpeed@pInput:
  2009                           	opt stack 0
  2010  0000CC                     Word_SetPair@pInput:
  2011                           	opt stack 0
  2012  0000CC                     PortProperty_Valid@pInput:
  2013                           	opt stack 0
  2014  0000CC                     itos@Out:
  2015                           	opt stack 0
  2016  0000CC                     LCD_FillRectangle@pSize:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0xF
  2020  0000CC                     	ds	1
  2021  0000CD                     ??_Console_PrintChar:
  2022  0000CD                     Console_MakeField@x:
  2023                           	opt stack 0
  2024                           
  2025                           ; 1 bytes @ 0x10
  2026  0000CD                     	ds	1
  2027  0000CE                     ??_Timer2_Init:
  2028  0000CE                     ??_Timer0_Init:
  2029  0000CE                     Port_SetPin@pPin:
  2030                           	opt stack 0
  2031  0000CE                     Port_Set@pValue:
  2032                           	opt stack 0
  2033  0000CE                     Word_SetPair@pPair:
  2034                           	opt stack 0
  2035  0000CE                     PortProperty_Valid@pPinDrive:
  2036                           	opt stack 0
  2037  0000CE                     Console_MakeField@y:
  2038                           	opt stack 0
  2039  0000CE                     HMI_SetNumber@pInput:
  2040                           	opt stack 0
  2041  0000CE                     ___llmod@divisor:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x11
  2045  0000CE                     	ds	1
  2046  0000CF                     ??_Port_Set:
  2047  0000CF                     Port_SetPin@pValue:
  2048                           	opt stack 0
  2049  0000CF                     Word_SetPair@pValue:
  2050                           	opt stack 0
  2051  0000CF                     PortProperty_Valid@pPin:
  2052                           	opt stack 0
  2053  0000CF                     LCD_DrawField@pField:
  2054                           	opt stack 0
  2055  0000CF                     Timer2_Init@RDIV:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x12
  2059  0000CF                     	ds	1
  2060  0000D0                     ??_PortProperty_Valid:
  2061  0000D0                     ??_LCD_FillRectangle:
  2062  0000D0                     Port_SetPin@Type:
  2063                           	opt stack 0
  2064  0000D0                     Console_PrintChar@pInput:
  2065                           	opt stack 0
  2066  0000D0                     Timer0_Init@pCPUClock:
  2067                           	opt stack 0
  2068                           
  2069                           ; 4 bytes @ 0x13
  2070  0000D0                     	ds	1
  2071  0000D1                     LED_Set@pValue:
  2072                           	opt stack 0
  2073  0000D1                     putch@c:
  2074                           	opt stack 0
  2075  0000D1                     Port_TogglePin@pInput:
  2076                           	opt stack 0
  2077  0000D1                     LCD_DrawField@pPoint:
  2078                           	opt stack 0
  2079                           
  2080                           ; 4 bytes @ 0x14
  2081  0000D1                     	ds	1
  2082  0000D2                     LCD_FillRectangle@i:
  2083                           	opt stack 0
  2084  0000D2                     LED_Set@pLED:
  2085                           	opt stack 0
  2086  0000D2                     ___llmod@counter:
  2087                           	opt stack 0
  2088  0000D2                     PortProperty_Valid@Errors:
  2089                           	opt stack 0
  2090                           
  2091                           ; 16 bytes @ 0x15
  2092  0000D2                     	ds	1
  2093  0000D3                     ?_printf:
  2094                           	opt stack 0
  2095  0000D3                     LCD_FillRectangle@j:
  2096                           	opt stack 0
  2097  0000D3                     Port_TogglePin@pPin:
  2098                           	opt stack 0
  2099  0000D3                     printf@f:
  2100                           	opt stack 0
  2101  0000D3                     Timer2_Init@pCPUClock:
  2102                           	opt stack 0
  2103                           
  2104                           ; 4 bytes @ 0x16
  2105  0000D3                     	ds	1
  2106  0000D4                     Port_TogglePin@Value:
  2107                           	opt stack 0
  2108  0000D4                     Timer0_Init@DIVIDE:
  2109                           	opt stack 0
  2110                           
  2111                           ; 4 bytes @ 0x17
  2112  0000D4                     	ds	1
  2113  0000D5                     LED_Toggle@pLED:
  2114                           	opt stack 0
  2115  0000D5                     LCD_DrawField@pSize:
  2116                           	opt stack 0
  2117                           
  2118                           ; 4 bytes @ 0x18
  2119  0000D5                     	ds	1
  2120  0000D6                     Event_DIPSwitch@pState:
  2121                           	opt stack 0
  2122  0000D6                     Event_HMI_DIPSwitch@pState:
  2123                           	opt stack 0
  2124  0000D6                     Event_TestButton@pState:
  2125                           	opt stack 0
  2126  0000D6                     Event_HMI_LeftButton@pState:
  2127                           	opt stack 0
  2128  0000D6                     Event_HMI_RightButton@pState:
  2129                           	opt stack 0
  2130  0000D6                     Event_HMI_UpButton@pState:
  2131                           	opt stack 0
  2132  0000D6                     Event_HMI_DownButton@pState:
  2133                           	opt stack 0
  2134                           
  2135                           ; 1 bytes @ 0x19
  2136  0000D6                     	ds	1
  2137  0000D7                     Event_DIPSwitch@Bar:
  2138                           	opt stack 0
  2139  0000D7                     Event_HMI_DIPSwitch@Bar:
  2140                           	opt stack 0
  2141  0000D7                     Timer2_Init@DIVIDE:
  2142                           	opt stack 0
  2143                           
  2144                           ; 4 bytes @ 0x1A
  2145  0000D7                     	ds	1
  2146  0000D8                     Button_Poll@pButton:
  2147                           	opt stack 0
  2148  0000D8                     Motor_Speed@pMotor:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x1B
  2152  0000D8                     	ds	1
  2153  0000D9                     ??_printf:
  2154  0000D9                     ??_LCD_DrawField:
  2155                           
  2156                           ; 1 bytes @ 0x1C
  2157  0000D9                     	ds	1
  2158  0000DA                     Button_Poll@pIncrement:
  2159                           	opt stack 0
  2160  0000DA                     Motor_Speed@pFrequency:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x1D
  2164  0000DA                     	ds	1
  2165  0000DB                     ??_Button_Poll:
  2166  0000DB                     LCD_DrawField@count:
  2167                           	opt stack 0
  2168  0000DB                     printf@prec:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x1E
  2172  0000DB                     	ds	1
  2173  0000DC                     
  2174                           ; 1 bytes @ 0x1F
  2175  0000DC                     	ds	1
  2176  0000DD                     LCD_DrawField@xmax:
  2177                           	opt stack 0
  2178  0000DD                     printf@flag:
  2179                           	opt stack 0
  2180                           
  2181                           ; 1 bytes @ 0x20
  2182  0000DD                     	ds	1
  2183  0000DE                     LCD_DrawField@ymax:
  2184                           	opt stack 0
  2185  0000DE                     printf@ap:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x21
  2189  0000DE                     	ds	1
  2190  0000DF                     LCD_DrawField@i:
  2191                           	opt stack 0
  2192  0000DF                     Port_Set@TypeRequired:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x22
  2196  0000DF                     	ds	1
  2197  0000E0                     ??_Console_Render:
  2198  0000E0                     Button_Poll@Pin:
  2199                           	opt stack 0
  2200  0000E0                     printf@val:
  2201                           	opt stack 0
  2202                           
  2203                           ; 4 bytes @ 0x23
  2204  0000E0                     	ds	1
  2205  0000E1                     ?_getMode:
  2206                           	opt stack 0
  2207  0000E1                     Port_Set@TypeActual:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x24
  2211  0000E1                     	ds	1
  2212  0000E2                     PortProperty_Valid@Pair:
  2213                           	opt stack 0
  2214  0000E2                     Console_Render@temp:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0x25
  2218  0000E2                     	ds	1
  2219  0000E3                     ??_getMode:
  2220  0000E3                     Port_Set@Type:
  2221                           	opt stack 0
  2222  0000E3                     Port_CheckPairType@pInput:
  2223                           	opt stack 0
  2224  0000E3                     Port_SetPinType@pInput:
  2225                           	opt stack 0
  2226  0000E3                     Console_Render@lCursor:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0x26
  2230  0000E3                     	ds	1
  2231  0000E4                     printf@c:
  2232                           	opt stack 0
  2233                           
  2234                           ; 1 bytes @ 0x27
  2235  0000E4                     	ds	1
  2236  0000E5                     Port_CheckPairType@pPair:
  2237                           	opt stack 0
  2238  0000E5                     Port_SetPinType@pPin:
  2239                           	opt stack 0
  2240  0000E5                     getMode@dipState:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x28
  2244  0000E5                     	ds	1
  2245  0000E6                     Port_CheckPairType@pDrive:
  2246                           	opt stack 0
  2247  0000E6                     Port_SetPinType@pType:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x29
  2251  0000E6                     	ds	1
  2252  0000E7                     Port_CheckPairType@Pin1:
  2253                           	opt stack 0
  2254  0000E7                     Port_SetPinType@Output:
  2255                           	opt stack 0
  2256  0000E7                     Console_Render@x:
  2257                           	opt stack 0
  2258                           
  2259                           ; 1 bytes @ 0x2A
  2260  0000E7                     	ds	1
  2261  0000E8                     Port_CheckPairType@Pin2:
  2262                           	opt stack 0
  2263  0000E8                     Console_Render@y:
  2264                           	opt stack 0
  2265  0000E8                     Port_SetPinType@Props:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x2B
  2269  0000E8                     	ds	1
  2270  0000E9                     Port_CheckPairType@Output:
  2271                           	opt stack 0
  2272  0000E9                     continuousMode@direction:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x2C
  2276  0000E9                     	ds	1
  2277  0000EA                     LED_Init@pLED:
  2278                           	opt stack 0
  2279  0000EA                     Port_CheckPairType@Props:
  2280                           	opt stack 0
  2281  0000EA                     Motor_Init@pMotor:
  2282                           	opt stack 0
  2283  0000EA                     SPI_Init@pClock:
  2284                           	opt stack 0
  2285                           
  2286                           ; 4 bytes @ 0x2D
  2287  0000EA                     	ds	1
  2288  0000EB                     continuousMode@speed:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x2E
  2292  0000EB                     	ds	1
  2293  0000EC                     Port_CheckQuadType@pInput:
  2294                           	opt stack 0
  2295  0000EC                     Motor_Init@pAddress:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x2F
  2299  0000EC                     	ds	1
  2300  0000ED                     ??_setMode:
  2301                           
  2302                           ; 1 bytes @ 0x30
  2303  0000ED                     	ds	1
  2304  0000EE                     Port_CheckQuadType@pQuad:
  2305                           	opt stack 0
  2306  0000EE                     SPI_Init@pChannel:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x31
  2310  0000EE                     	ds	1
  2311  0000EF                     Port_CheckQuadType@pDrive:
  2312                           	opt stack 0
  2313  0000EF                     SPI_Init@pMode:
  2314                           	opt stack 0
  2315  0000EF                     setMode@mode:
  2316                           	opt stack 0
  2317                           
  2318                           ; 2 bytes @ 0x32
  2319  0000EF                     	ds	1
  2320  0000F0                     Port_CheckQuadType@Pair1:
  2321                           	opt stack 0
  2322  0000F0                     SPI_Init@pInput:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x33
  2326  0000F0                     	ds	1
  2327  0000F1                     Port_CheckQuadType@Pair2:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x34
  2331  0000F1                     	ds	1
  2332  0000F2                     ??_LCD_Init:
  2333  0000F2                     Port_CheckQuadType@Output:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x35
  2337  0000F2                     	ds	1
  2338  0000F3                     Port_CheckPortType@pInput:
  2339                           	opt stack 0
  2340  0000F3                     Port_SetQuadType@pInput:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x36
  2344  0000F3                     	ds	1
  2345  0000F4                     LCD_Init@i:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x37
  2349  0000F4                     	ds	1
  2350  0000F5                     Port_CheckPortType@pDrive:
  2351                           	opt stack 0
  2352  0000F5                     Port_SetQuadType@pQuad:
  2353                           	opt stack 0
  2354                           
  2355                           ; 1 bytes @ 0x38
  2356  0000F5                     	ds	1
  2357  0000F6                     Port_CheckPortType@Output:
  2358                           	opt stack 0
  2359  0000F6                     Port_SetQuadType@pType:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x39
  2363  0000F6                     	ds	1
  2364  0000F7                     ??_Port_SetType:
  2365  0000F7                     Port_SetQuadType@Output:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x3A
  2369  0000F7                     	ds	1
  2370  0000F8                     
  2371                           ; 1 bytes @ 0x3B
  2372  0000F8                     	ds	1
  2373  0000F9                     tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postdec1	equ	0xFE5
  2380                           fsr1h	equ	0xFE2
  2381                           fsr1l	equ	0xFE1
  2382                           
  2383                           ; 1 bytes @ 0x3C
  2384                           
  2385                           	psect	cstackCOMRAM
  2386  000001                     __pcstackCOMRAM:
  2387                           	opt stack 0
  2388  000001                     i2Byte_SetBit@pInput:
  2389                           	opt stack 0
  2390  000001                     i2Byte_GetZone@pInput:
  2391                           	opt stack 0
  2392  000001                     i2delay_us@us:
  2393                           	opt stack 0
  2394  000001                     i2MXK_Queue@pCallback:
  2395                           	opt stack 0
  2396                           
  2397                           ; 3 bytes @ 0x0
  2398  000001                     	ds	2
  2399  000003                     i2Byte_SetBit@pBit:
  2400                           	opt stack 0
  2401  000003                     i2Byte_GetZone@pMax:
  2402                           	opt stack 0
  2403  000003                     i2delay_us@u:
  2404                           	opt stack 0
  2405                           
  2406                           ; 4 bytes @ 0x2
  2407  000003                     	ds	1
  2408  000004                     i2Byte_SetBit@pValue:
  2409                           	opt stack 0
  2410  000004                     i2Byte_GetZone@pChunk:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x3
  2414  000004                     	ds	1
  2415  000005                     ??i2_Byte_SetBit:
  2416  000005                     i2Byte_GetZone@pChunkSize:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x4
  2420  000005                     	ds	1
  2421  000006                     ??i2_Byte_GetZone:
  2422                           
  2423                           ; 1 bytes @ 0x5
  2424  000006                     	ds	1
  2425  000007                     i2Byte_GetZone@MASK:
  2426                           	opt stack 0
  2427  000007                     i2MXK_SwitchTo@CUR:
  2428                           	opt stack 0
  2429                           
  2430                           ; 1 bytes @ 0x6
  2431  000007                     	ds	1
  2432  000008                     i2Byte_GetZone@Offset:
  2433                           	opt stack 0
  2434  000008                     i2MXK_SwitchTo@pModule:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x7
  2438  000008                     	ds	1
  2439  000009                     i2Byte_GetZone@Output:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x8
  2443  000009                     	ds	1
  2444  00000A                     i2Byte_GetPair@pInput:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x9
  2448  00000A                     	ds	2
  2449  00000C                     i2Byte_GetPair@pPair:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0xB
  2453  00000C                     	ds	1
  2454  00000D                     i2Word_GetPair@pInput:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0xC
  2458  00000D                     	ds	2
  2459  00000F                     i2Word_GetPair@pPair:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0xE
  2463  00000F                     	ds	1
  2464  000010                     i2Port_SetPin@pInput:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0xF
  2468  000010                     	ds	2
  2469  000012                     i2Port_SetPin@pPin:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x11
  2473  000012                     	ds	1
  2474  000013                     i2Port_SetPin@pValue:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x12
  2478  000013                     	ds	1
  2479  000014                     i2Port_SetPin@Type:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x13
  2483  000014                     	ds	1
  2484  000015                     
  2485                           ; 1 bytes @ 0x14
  2486  000015                     	ds	2
  2487  000017                     ??_ISR_Function:
  2488                           
  2489                           ; 1 bytes @ 0x16
  2490  000017                     	ds	18
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           
  2501 ;;
  2502 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2503 ;;
  2504 ;; *************** function _main *****************
  2505 ;; Defined at:
  2506 ;;		line 218 in file "main.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;Total ram usage:        0 bytes
  2525 ;; Hardware stack levels required when called:   21
  2526 ;; This function calls:
  2527 ;;		_MXK_BlockSwitchTo
  2528 ;;		_MXK_Dequeue
  2529 ;;		_MXK_Release
  2530 ;;		_displayText
  2531 ;;		_initialise
  2532 ;;		_setMode
  2533 ;; This function is called by:
  2534 ;;		Startup code after reset
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text0
  2539  0147C0                     __ptext0:
  2540                           	opt stack 0
  2541  0147C0                     _main:
  2542                           	opt stack 10
  2543                           
  2544                           ;main.c: 219: initialise();
  2545                           
  2546                           ;incstack = 0
  2547  0147C0  EC28  F09C         	call	_initialise	;wreg free
  2548  0147C4                     
  2549                           ;main.c: 223: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2550  0147C4  0E01               	movlw	1
  2551  0147C6  EC2A  F0A2         	call	_MXK_BlockSwitchTo
  2552  0147CA  0900               	iorlw	0
  2553  0147CC  B4D8               	btfsc	status,2,c
  2554  0147CE  D7FA               	goto	l2063
  2555                           
  2556                           ;main.c: 225: displayText();
  2557  0147D0  ECF4  F0A3         	call	_displayText	;wreg free
  2558                           
  2559                           ;main.c: 228: setMode();
  2560  0147D4  EC37  F0A0         	call	_setMode	;wreg free
  2561                           
  2562                           ;main.c: 230: if (MXK_Release())
  2563  0147D8  ECEE  F0A4         	call	_MXK_Release	;wreg free
  2564  0147DC  0900               	iorlw	0
  2565  0147DE  B4D8               	btfsc	status,2,c
  2566  0147E0  D7F1               	goto	l2063
  2567                           
  2568                           ;main.c: 231: MXK_Dequeue();
  2569  0147E2  EC0B  F0A2         	call	_MXK_Dequeue	;wreg free
  2570                           
  2571                           ;main.c: 232: }
  2572                           ;main.c: 251: }
  2573  0147E6  D7EE               	goto	l2063
  2574  0147E8                     __end_of_main:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           postdec1	equ	0xFE5
  2583                           fsr1h	equ	0xFE2
  2584                           fsr1l	equ	0xFE1
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function _setMode *****************
  2588 ;; Defined at:
  2589 ;;		line 200 in file "main.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  mode            2   50[BANK0 ] int 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;Total ram usage:        4 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:   20
  2610 ;; This function calls:
  2611 ;;		_continuousMode
  2612 ;;		_getMode
  2613 ;;		_nullMode
  2614 ;;		_positionMode
  2615 ;;		_stepMode
  2616 ;; This function is called by:
  2617 ;;		_main
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text1
  2622  01406E                     __ptext1:
  2623                           	opt stack 0
  2624  01406E                     _setMode:
  2625                           	opt stack 10
  2626                           
  2627                           ;main.c: 201: int mode = getMode();
  2628                           
  2629                           ;incstack = 0
  2630  01406E  EC24  F09B         	call	_getMode	;wreg free
  2631  014072  C0E1  F0EF         	movff	?_getMode,setMode@mode
  2632  014076  C0E2  F0F0         	movff	?_getMode+1,setMode@mode+1
  2633                           
  2634                           ;main.c: 202: switch (mode) {
  2635  01407A  D00C               	goto	l2052
  2636  01407C                     
  2637                           ;main.c: 204: continuousMode();
  2638  01407C  ECEC  F083         	call	_continuousMode	;wreg free
  2639                           
  2640                           ;main.c: 205: break;
  2641  014080  0012               	return	
  2642  014082                     
  2643                           ;main.c: 207: stepMode();
  2644  014082  EC02  F00A         	call	_stepMode	;wreg free
  2645                           
  2646                           ;main.c: 208: break;
  2647  014086  0012               	return	
  2648  014088                     
  2649                           ;main.c: 210: positionMode();
  2650  014088  ECE9  F0A5         	call	_positionMode	;wreg free
  2651                           
  2652                           ;main.c: 211: break;
  2653  01408C  0012               	return	
  2654  01408E                     
  2655                           ;main.c: 213: nullMode();
  2656  01408E  EC86  F0A2         	call	_nullMode	;wreg free
  2657                           
  2658                           ;main.c: 215: }
  2659                           
  2660                           ;main.c: 214: break;
  2661  014092  0012               	return	
  2662  014094                     l2052:
  2663  014094  C0EF  F0ED         	movff	setMode@mode,??_setMode
  2664  014098  C0F0  F0EE         	movff	setMode@mode+1,??_setMode+1
  2665                           
  2666                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2667                           ; Switch size 1, requested type "space"
  2668                           ; Number of cases is 1, Range of values is 0 to 0
  2669                           ; switch strategies available:
  2670                           ; Name         Instructions Cycles
  2671                           ; simple_byte            4     3 (average)
  2672                           ;	Chosen strategy is simple_byte
  2673  01409C  0100               	movlb	0	; () banked
  2674  01409E  51EE               	movf	(??_setMode+1)& (0+255),w,b
  2675  0140A0  0A00               	xorlw	0	; case 0
  2676  0140A2  A4D8               	btfss	status,2,c
  2677  0140A4  D7F4               	goto	l2057
  2678                           
  2679                           ; BSR set to: 0
  2680                           ; Switch size 1, requested type "space"
  2681                           ; Number of cases is 3, Range of values is 1 to 3
  2682                           ; switch strategies available:
  2683                           ; Name         Instructions Cycles
  2684                           ; simple_byte           10     6 (average)
  2685                           ;	Chosen strategy is simple_byte
  2686  0140A6  0100               	movlb	0	; () banked
  2687  0140A8  51ED               	movf	??_setMode& (0+255),w,b
  2688  0140AA  0A01               	xorlw	1	; case 1
  2689  0140AC  B4D8               	btfsc	status,2,c
  2690  0140AE  D7E6               	goto	l2053
  2691  0140B0  0A03               	xorlw	3	; case 2
  2692  0140B2  B4D8               	btfsc	status,2,c
  2693  0140B4  D7E6               	goto	l2055
  2694  0140B6  0A01               	xorlw	1	; case 3
  2695  0140B8  B4D8               	btfsc	status,2,c
  2696  0140BA  D7E6               	goto	l2056
  2697  0140BC  D7E8               	goto	l2057
  2698  0140BE                     __end_of_setMode:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1h	equ	0xFE2
  2708                           fsr1l	equ	0xFE1
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function _stepMode *****************
  2712 ;; Defined at:
  2713 ;;		line 184 in file "main.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;		None
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		None
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;Total ram usage:        0 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    7
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_setMode
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text2
  2742  001404                     __ptext2:
  2743                           	opt stack 0
  2744  001404                     _stepMode:
  2745                           	opt stack 22
  2746                           
  2747                           ;incstack = 0
  2748  001404  0012               	return		;funcret
  2749  001406                     __end_of_stepMode:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1h	equ	0xFE2
  2759                           fsr1l	equ	0xFE1
  2760                           status	equ	0xFD8
  2761                           
  2762 ;; *************** function _positionMode *****************
  2763 ;; Defined at:
  2764 ;;		line 188 in file "main.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;		None
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;		None
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		None
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;Total ram usage:        0 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    7
  2785 ;; This function calls:
  2786 ;;		Nothing
  2787 ;; This function is called by:
  2788 ;;		_setMode
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           	psect	text3
  2793  014BD2                     __ptext3:
  2794                           	opt stack 0
  2795  014BD2                     _positionMode:
  2796                           	opt stack 22
  2797                           
  2798                           ;incstack = 0
  2799  014BD2  0012               	return		;funcret
  2800  014BD4                     __end_of_positionMode:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1h	equ	0xFE2
  2810                           fsr1l	equ	0xFE1
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function _nullMode *****************
  2814 ;; Defined at:
  2815 ;;		line 192 in file "main.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;Total ram usage:        0 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:   19
  2836 ;; This function calls:
  2837 ;;		_Console_Render
  2838 ;;		_displayText
  2839 ;;		_printf
  2840 ;; This function is called by:
  2841 ;;		_setMode
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text4
  2846  01450C                     __ptext4:
  2847                           	opt stack 0
  2848  01450C                     _nullMode:
  2849                           	opt stack 10
  2850                           
  2851                           ;main.c: 193: displayText();
  2852                           
  2853                           ;incstack = 0
  2854  01450C  ECF4  F0A3         	call	_displayText	;wreg free
  2855                           
  2856                           ;main.c: 194: printf("                      \n");
  2857  014510  0E69               	movlw	low STR_11
  2858  014512  0100               	movlb	0	; () banked
  2859  014514  6FD3               	movwf	printf@f& (0+255),b
  2860  014516  0EFF               	movlw	high STR_11
  2861  014518  0100               	movlb	0	; () banked
  2862  01451A  6FD4               	movwf	(printf@f+1)& (0+255),b
  2863  01451C  ECA2  F087         	call	_printf	;wreg free
  2864                           
  2865                           ;main.c: 195: printf("                      \n");
  2866  014520  0E69               	movlw	low STR_11
  2867  014522  0100               	movlb	0	; () banked
  2868  014524  6FD3               	movwf	printf@f& (0+255),b
  2869  014526  0EFF               	movlw	high STR_11
  2870  014528  0100               	movlb	0	; () banked
  2871  01452A  6FD4               	movwf	(printf@f+1)& (0+255),b
  2872  01452C  ECA2  F087         	call	_printf	;wreg free
  2873                           
  2874                           ;main.c: 196: printf("                      \n");
  2875  014530  0E69               	movlw	low STR_11
  2876  014532  0100               	movlb	0	; () banked
  2877  014534  6FD3               	movwf	printf@f& (0+255),b
  2878  014536  0EFF               	movlw	high STR_11
  2879  014538  0100               	movlb	0	; () banked
  2880  01453A  6FD4               	movwf	(printf@f+1)& (0+255),b
  2881  01453C  ECA2  F087         	call	_printf	;wreg free
  2882                           
  2883                           ;main.c: 197: Console_Render();
  2884  014540  ECD0  F089         	call	_Console_Render	;wreg free
  2885  014544  0012               	return		;funcret
  2886  014546                     __end_of_nullMode:
  2887                           	opt stack 0
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _continuousMode *****************
  2900 ;; Defined at:
  2901 ;;		line 132 in file "main.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  speed           2   46[BANK0 ] int 
  2906 ;;  direction       2   44[BANK0 ] short 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;Total ram usage:        4 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:   19
  2923 ;; This function calls:
  2924 ;;		_Console_Render
  2925 ;;		_Console_SetForecolour
  2926 ;;		_HMI_DIPSwitch
  2927 ;;		_HMI_DownSwitch
  2928 ;;		_HMI_LeftSwitch
  2929 ;;		_HMI_Poll
  2930 ;;		_HMI_RightSwitch
  2931 ;;		_HMI_UpSwitch
  2932 ;;		_MXK_BlockSwitchTo
  2933 ;;		_MXK_DIPSwitch
  2934 ;;		_MXK_Dequeue
  2935 ;;		_MXK_Release
  2936 ;;		_MXK_TestButton
  2937 ;;		_Motor_Move
  2938 ;;		_Motor_Speed
  2939 ;;		___wmul
  2940 ;;		_displayText
  2941 ;;		_getMode
  2942 ;;		_printf
  2943 ;; This function is called by:
  2944 ;;		_setMode
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text5
  2949  0107D8                     __ptext5:
  2950                           	opt stack 0
  2951  0107D8                     _continuousMode:
  2952                           	opt stack 10
  2953                           
  2954                           ;main.c: 134: int speed = 0;
  2955                           
  2956                           ;incstack = 0
  2957  0107D8  0E00               	movlw	0
  2958  0107DA  0100               	movlb	0	; () banked
  2959  0107DC  6FEC               	movwf	(continuousMode@speed+1)& (0+255),b
  2960  0107DE  0E00               	movlw	0
  2961  0107E0  6FEB               	movwf	continuousMode@speed& (0+255),b
  2962                           
  2963                           ;main.c: 137: INT16 direction = 0;
  2964  0107E2  0E00               	movlw	0
  2965  0107E4  0100               	movlb	0	; () banked
  2966  0107E6  6FEA               	movwf	(continuousMode@direction+1)& (0+255),b
  2967  0107E8  0E00               	movlw	0
  2968  0107EA  6FE9               	movwf	continuousMode@direction& (0+255),b
  2969                           
  2970                           ;main.c: 140: while (getMode() == 1) {
  2971  0107EC  D135               	goto	l2025
  2972  0107EE                     
  2973                           ; BSR set to: 0
  2974                           ;main.c: 143: if ((int) HMIBoard.mUp.mGetState() == 1 && (int) HMIBoard.mDown.mGetState(
      +                          ) == 0 & speed <= 9) {
  2975                           
  2976                           ; BSR set to: 0
  2977  0107EE  EE21  F04A         	lfsr	2,_HMIBoard+35
  2978  0107F2  D801               	call	u9848
  2979  0107F4  D00A               	goto	u9849
  2980  0107F6                     u9848:
  2981  0107F6  0005               	push	
  2982  0107F8  6EFA               	movwf	pclath,c
  2983  0107FA  50DE               	movf	postinc2,w,c
  2984  0107FC  6EFD               	movwf	tosl,c
  2985  0107FE  50DE               	movf	postinc2,w,c
  2986  010800  6EFE               	movwf	tosh,c
  2987  010802  50DE               	movf	postinc2,w,c
  2988  010804  6EFF               	movwf	tosu,c
  2989  010806  50FA               	movf	pclath,w,c
  2990  010808  0012               	return		;indir
  2991  01080A                     u9849:
  2992  01080A  06E8               	decf	wreg,f,c
  2993  01080C  A4D8               	btfss	status,2,c
  2994  01080E  D030               	goto	l2027
  2995  010810  EE21  F054         	lfsr	2,_HMIBoard+45
  2996  010814  D801               	call	u9868
  2997  010816  D00A               	goto	u9869
  2998  010818                     u9868:
  2999  010818  0005               	push	
  3000  01081A  6EFA               	movwf	pclath,c
  3001  01081C  50DE               	movf	postinc2,w,c
  3002  01081E  6EFD               	movwf	tosl,c
  3003  010820  50DE               	movf	postinc2,w,c
  3004  010822  6EFE               	movwf	tosh,c
  3005  010824  50DE               	movf	postinc2,w,c
  3006  010826  6EFF               	movwf	tosu,c
  3007  010828  50FA               	movf	pclath,w,c
  3008  01082A  0012               	return		;indir
  3009  01082C                     u9869:
  3010  01082C  0900               	iorlw	0
  3011  01082E  A4D8               	btfss	status,2,c
  3012  010830  D01F               	goto	l2027
  3013  010832  0100               	movlb	0	; () banked
  3014  010834  BFEC               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3015  010836  D008               	goto	u9880
  3016  010838  0100               	movlb	0	; () banked
  3017  01083A  51EC               	movf	(continuousMode@speed+1)& (0+255),w,b
  3018  01083C  E119               	bnz	l13008
  3019  01083E  0E0A               	movlw	10
  3020  010840  0100               	movlb	0	; () banked
  3021  010842  5DEB               	subwf	continuousMode@speed& (0+255),w,b
  3022  010844  B0D8               	btfsc	status,0,c
  3023  010846  D014               	goto	l2027
  3024  010848                     u9880:
  3025                           
  3026                           ; BSR set to: 0
  3027                           
  3028                           ; BSR set to: 0
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;main.c: 144: while ((int) HMIBoard.mUp.mGetState() == 1) {
  3032  010848  EE21  F04A         	lfsr	2,_HMIBoard+35
  3033  01084C  D801               	call	u9898
  3034  01084E  D00A               	goto	u9899
  3035  010850                     u9898:
  3036  010850  0005               	push	
  3037  010852  6EFA               	movwf	pclath,c
  3038  010854  50DE               	movf	postinc2,w,c
  3039  010856  6EFD               	movwf	tosl,c
  3040  010858  50DE               	movf	postinc2,w,c
  3041  01085A  6EFE               	movwf	tosh,c
  3042  01085C  50DE               	movf	postinc2,w,c
  3043  01085E  6EFF               	movwf	tosu,c
  3044  010860  50FA               	movf	pclath,w,c
  3045  010862  0012               	return		;indir
  3046  010864                     u9899:
  3047  010864  06E8               	decf	wreg,f,c
  3048  010866  B4D8               	btfsc	status,2,c
  3049  010868  D7EF               	goto	u9880
  3050                           
  3051                           ;main.c: 145: }
  3052                           ;main.c: 146: speed++;
  3053  01086A  0100               	movlb	0	; () banked
  3054  01086C  4BEB               	infsnz	continuousMode@speed& (0+255),f,b
  3055  01086E  2BEC               	incf	(continuousMode@speed+1)& (0+255),f,b
  3056  010870                     l2027:
  3057  010870                     l13008:
  3058                           
  3059                           ;main.c: 147: }
  3060                           ;main.c: 149: if ((int) HMIBoard.mDown.mGetState() == 1 && (int) HMIBoard.mUp.mGetState(
      +                          ) == 0 & speed > 0) {
  3061  010870  EE21  F054         	lfsr	2,_HMIBoard+45
  3062  010874  D801               	call	u9918
  3063  010876  D00A               	goto	u9919
  3064  010878                     u9918:
  3065  010878  0005               	push	
  3066  01087A  6EFA               	movwf	pclath,c
  3067  01087C  50DE               	movf	postinc2,w,c
  3068  01087E  6EFD               	movwf	tosl,c
  3069  010880  50DE               	movf	postinc2,w,c
  3070  010882  6EFE               	movwf	tosh,c
  3071  010884  50DE               	movf	postinc2,w,c
  3072  010886  6EFF               	movwf	tosu,c
  3073  010888  50FA               	movf	pclath,w,c
  3074  01088A  0012               	return		;indir
  3075  01088C                     u9919:
  3076  01088C  06E8               	decf	wreg,f,c
  3077  01088E  A4D8               	btfss	status,2,c
  3078  010890  D030               	goto	l2031
  3079  010892  EE21  F04A         	lfsr	2,_HMIBoard+35
  3080  010896  D801               	call	u9938
  3081  010898  D00A               	goto	u9939
  3082  01089A                     u9938:
  3083  01089A  0005               	push	
  3084  01089C  6EFA               	movwf	pclath,c
  3085  01089E  50DE               	movf	postinc2,w,c
  3086  0108A0  6EFD               	movwf	tosl,c
  3087  0108A2  50DE               	movf	postinc2,w,c
  3088  0108A4  6EFE               	movwf	tosh,c
  3089  0108A6  50DE               	movf	postinc2,w,c
  3090  0108A8  6EFF               	movwf	tosu,c
  3091  0108AA  50FA               	movf	pclath,w,c
  3092  0108AC  0012               	return		;indir
  3093  0108AE                     u9939:
  3094  0108AE  0900               	iorlw	0
  3095  0108B0  A4D8               	btfss	status,2,c
  3096  0108B2  D01F               	goto	l2031
  3097  0108B4  0100               	movlb	0	; () banked
  3098  0108B6  BFEC               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3099  0108B8  D01C               	goto	l2031
  3100  0108BA  0100               	movlb	0	; () banked
  3101  0108BC  51EC               	movf	(continuousMode@speed+1)& (0+255),w,b
  3102  0108BE  E104               	bnz	l13016
  3103  0108C0  0100               	movlb	0	; () banked
  3104  0108C2  05EB               	decf	continuousMode@speed& (0+255),w,b
  3105  0108C4  A0D8               	btfss	status,0,c
  3106  0108C6  D015               	goto	l2031
  3107  0108C8                     u9950:
  3108  0108C8                     l13016:
  3109  0108C8  EE21  F054         	lfsr	2,_HMIBoard+45
  3110  0108CC  D801               	call	u9968
  3111  0108CE  D00A               	goto	u9969
  3112  0108D0                     u9968:
  3113  0108D0  0005               	push	
  3114  0108D2  6EFA               	movwf	pclath,c
  3115  0108D4  50DE               	movf	postinc2,w,c
  3116  0108D6  6EFD               	movwf	tosl,c
  3117  0108D8  50DE               	movf	postinc2,w,c
  3118  0108DA  6EFE               	movwf	tosh,c
  3119  0108DC  50DE               	movf	postinc2,w,c
  3120  0108DE  6EFF               	movwf	tosu,c
  3121  0108E0  50FA               	movf	pclath,w,c
  3122  0108E2  0012               	return		;indir
  3123  0108E4                     u9969:
  3124  0108E4  06E8               	decf	wreg,f,c
  3125  0108E6  B4D8               	btfsc	status,2,c
  3126  0108E8  D7EF               	goto	u9950
  3127                           
  3128                           ;main.c: 151: }
  3129                           ;main.c: 152: speed--;
  3130  0108EA  0100               	movlb	0	; () banked
  3131  0108EC  07EB               	decf	continuousMode@speed& (0+255),f,b
  3132  0108EE  A0D8               	btfss	status,0,c
  3133  0108F0  07EC               	decf	(continuousMode@speed+1)& (0+255),f,b
  3134  0108F2                     l2031:
  3135                           
  3136                           ;main.c: 153: }
  3137                           ;main.c: 155: if ((int) HMIBoard.mLeft.mGetState() == 1 && (int) HMIBoard.mRight.mGetSta
      +                          te() == 0) {
  3138                           
  3139                           ; BSR set to: 0
  3140  0108F2  EE21  F040         	lfsr	2,_HMIBoard+25
  3141  0108F6  D801               	call	u9988
  3142  0108F8  D00A               	goto	u9989
  3143  0108FA                     u9988:
  3144  0108FA  0005               	push	
  3145  0108FC  6EFA               	movwf	pclath,c
  3146  0108FE  50DE               	movf	postinc2,w,c
  3147  010900  6EFD               	movwf	tosl,c
  3148  010902  50DE               	movf	postinc2,w,c
  3149  010904  6EFE               	movwf	tosh,c
  3150  010906  50DE               	movf	postinc2,w,c
  3151  010908  6EFF               	movwf	tosu,c
  3152  01090A  50FA               	movf	pclath,w,c
  3153  01090C  0012               	return		;indir
  3154  01090E                     u9989:
  3155  01090E  06E8               	decf	wreg,f,c
  3156  010910  A4D8               	btfss	status,2,c
  3157  010912  D016               	goto	l2035
  3158  010914  EE21  F036         	lfsr	2,_HMIBoard+15
  3159  010918  D801               	call	u10008
  3160  01091A  D00A               	goto	u10009
  3161  01091C                     u10008:
  3162  01091C  0005               	push	
  3163  01091E  6EFA               	movwf	pclath,c
  3164  010920  50DE               	movf	postinc2,w,c
  3165  010922  6EFD               	movwf	tosl,c
  3166  010924  50DE               	movf	postinc2,w,c
  3167  010926  6EFE               	movwf	tosh,c
  3168  010928  50DE               	movf	postinc2,w,c
  3169  01092A  6EFF               	movwf	tosu,c
  3170  01092C  50FA               	movf	pclath,w,c
  3171  01092E  0012               	return		;indir
  3172  010930                     u10009:
  3173  010930  0900               	iorlw	0
  3174  010932  A4D8               	btfss	status,2,c
  3175  010934  D005               	goto	l2035
  3176                           
  3177                           ;main.c: 156: direction = 1;
  3178  010936  0E00               	movlw	0
  3179  010938  0100               	movlb	0	; () banked
  3180  01093A  6FEA               	movwf	(continuousMode@direction+1)& (0+255),b
  3181  01093C  0E01               	movlw	1
  3182  01093E  6FE9               	movwf	continuousMode@direction& (0+255),b
  3183  010940                     l2035:
  3184                           
  3185                           ;main.c: 157: }
  3186                           ;main.c: 159: if ((int) HMIBoard.mRight.mGetState() == 1 && (int) HMIBoard.mLeft.mGetSta
      +                          te() == 0) {
  3187                           
  3188                           ; BSR set to: 0
  3189  010940  EE21  F036         	lfsr	2,_HMIBoard+15
  3190  010944  D801               	call	u10028
  3191  010946  D00A               	goto	u10029
  3192  010948                     u10028:
  3193  010948  0005               	push	
  3194  01094A  6EFA               	movwf	pclath,c
  3195  01094C  50DE               	movf	postinc2,w,c
  3196  01094E  6EFD               	movwf	tosl,c
  3197  010950  50DE               	movf	postinc2,w,c
  3198  010952  6EFE               	movwf	tosh,c
  3199  010954  50DE               	movf	postinc2,w,c
  3200  010956  6EFF               	movwf	tosu,c
  3201  010958  50FA               	movf	pclath,w,c
  3202  01095A  0012               	return		;indir
  3203  01095C                     u10029:
  3204  01095C  06E8               	decf	wreg,f,c
  3205  01095E  A4D8               	btfss	status,2,c
  3206  010960  D014               	goto	l2036
  3207  010962  EE21  F040         	lfsr	2,_HMIBoard+25
  3208  010966  D801               	call	u10048
  3209  010968  D00A               	goto	u10049
  3210  01096A                     u10048:
  3211  01096A  0005               	push	
  3212  01096C  6EFA               	movwf	pclath,c
  3213  01096E  50DE               	movf	postinc2,w,c
  3214  010970  6EFD               	movwf	tosl,c
  3215  010972  50DE               	movf	postinc2,w,c
  3216  010974  6EFE               	movwf	tosh,c
  3217  010976  50DE               	movf	postinc2,w,c
  3218  010978  6EFF               	movwf	tosu,c
  3219  01097A  50FA               	movf	pclath,w,c
  3220  01097C  0012               	return		;indir
  3221  01097E                     u10049:
  3222  01097E  0900               	iorlw	0
  3223  010980  A4D8               	btfss	status,2,c
  3224  010982  D003               	goto	l2036
  3225                           
  3226                           ;main.c: 160: direction = -1;
  3227  010984  0100               	movlb	0	; () banked
  3228  010986  69E9               	setf	continuousMode@direction& (0+255),b
  3229  010988  69EA               	setf	(continuousMode@direction+1)& (0+255),b
  3230  01098A                     l2036:
  3231                           
  3232                           ;main.c: 161: }
  3233                           ;main.c: 163: displayText();
  3234                           
  3235                           ; BSR set to: 0
  3236  01098A  ECF4  F0A3         	call	_displayText	;wreg free
  3237                           
  3238                           ;main.c: 164: Console_SetForecolour(0xFFE0);
  3239  01098E  0EFF               	movlw	255
  3240  010990  0100               	movlb	0	; () banked
  3241  010992  6FBE               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3242  010994  0EE0               	movlw	224
  3243  010996  6FBD               	movwf	Console_SetForecolour@pColour& (0+255),b
  3244  010998  ECCA  F0A5         	call	_Console_SetForecolour	;wreg free
  3245                           
  3246                           ;main.c: 165: printf("Speed: %d\n", speed);
  3247  01099C  0EE9               	movlw	low STR_8
  3248  01099E  0100               	movlb	0	; () banked
  3249  0109A0  6FD3               	movwf	printf@f& (0+255),b
  3250  0109A2  0EFF               	movlw	high STR_8
  3251  0109A4  0100               	movlb	0	; () banked
  3252  0109A6  6FD4               	movwf	(printf@f+1)& (0+255),b
  3253  0109A8  C0EB  F0D5         	movff	continuousMode@speed,?_printf+2
  3254  0109AC  C0EC  F0D6         	movff	continuousMode@speed+1,?_printf+3
  3255  0109B0  ECA2  F087         	call	_printf	;wreg free
  3256                           
  3257                           ;main.c: 166: printf("Direction: %d\n", direction);
  3258  0109B4  0EA6               	movlw	low STR_9
  3259  0109B6  0100               	movlb	0	; () banked
  3260  0109B8  6FD3               	movwf	printf@f& (0+255),b
  3261  0109BA  0EFF               	movlw	high STR_9
  3262  0109BC  0100               	movlb	0	; () banked
  3263  0109BE  6FD4               	movwf	(printf@f+1)& (0+255),b
  3264  0109C0  C0E9  F0D5         	movff	continuousMode@direction,?_printf+2
  3265  0109C4  C0EA  F0D6         	movff	continuousMode@direction+1,?_printf+3
  3266  0109C8  ECA2  F087         	call	_printf	;wreg free
  3267                           
  3268                           ;main.c: 167: printf("mDelta: %ld\n", (long) Stepper.mDelta);
  3269  0109CC  0ED0               	movlw	low STR_10
  3270  0109CE  0100               	movlb	0	; () banked
  3271  0109D0  6FD3               	movwf	printf@f& (0+255),b
  3272  0109D2  0EFF               	movlw	high STR_10
  3273  0109D4  0100               	movlb	0	; () banked
  3274  0109D6  6FD4               	movwf	(printf@f+1)& (0+255),b
  3275  0109D8  C09B  F0D5         	movff	_Stepper,?_printf+2
  3276  0109DC  C09C  F0D6         	movff	_Stepper+1,?_printf+3
  3277  0109E0  0100               	movlb	0	; () banked
  3278  0109E2  0E00               	movlw	0
  3279  0109E4  BFD6               	btfsc	(?_printf+3)& (0+255),7,b
  3280  0109E6  0EFF               	movlw	-1
  3281  0109E8  6FD7               	movwf	(?_printf+4)& (0+255),b
  3282  0109EA  6FD8               	movwf	(?_printf+5)& (0+255),b
  3283  0109EC  ECA2  F087         	call	_printf	;wreg free
  3284                           
  3285                           ;main.c: 168: Console_Render();
  3286  0109F0  ECD0  F089         	call	_Console_Render	;wreg free
  3287                           
  3288                           ;main.c: 169: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3289  0109F4  0E08               	movlw	8
  3290  0109F6  EC2A  F0A2         	call	_MXK_BlockSwitchTo
  3291  0109FA  0900               	iorlw	0
  3292  0109FC  B4D8               	btfsc	status,2,c
  3293  0109FE  D02A               	goto	l2038
  3294                           
  3295                           ;main.c: 170: Motor_Speed(&Stepper, speed * 10);
  3296  010A00  0E9B               	movlw	low _Stepper
  3297  010A02  0100               	movlb	0	; () banked
  3298  010A04  6FD8               	movwf	Motor_Speed@pMotor& (0+255),b
  3299  010A06  0E00               	movlw	high _Stepper
  3300  010A08  0100               	movlb	0	; () banked
  3301  010A0A  6FD9               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3302  010A0C  C0EB  F0BD         	movff	continuousMode@speed,___wmul@multiplier
  3303  010A10  C0EC  F0BE         	movff	continuousMode@speed+1,___wmul@multiplier+1
  3304  010A14  0E00               	movlw	0
  3305  010A16  0100               	movlb	0	; () banked
  3306  010A18  6FC0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3307  010A1A  0E0A               	movlw	10
  3308  010A1C  6FBF               	movwf	___wmul@multiplicand& (0+255),b
  3309  010A1E  ECC0  F0A2         	call	___wmul	;wreg free
  3310  010A22  C0BD  F0DA         	movff	?___wmul,Motor_Speed@pFrequency
  3311  010A26  C0BE  F0DB         	movff	?___wmul+1,Motor_Speed@pFrequency+1
  3312  010A2A  ECCB  F0A3         	call	_Motor_Speed	;wreg free
  3313                           
  3314                           ;main.c: 171: Motor_Move(&Stepper, 100);
  3315  010A2E  0E9B               	movlw	low _Stepper
  3316  010A30  0100               	movlb	0	; () banked
  3317  010A32  6FC0               	movwf	Motor_Move@pMotor& (0+255),b
  3318  010A34  0E00               	movlw	high _Stepper
  3319  010A36  0100               	movlb	0	; () banked
  3320  010A38  6FC1               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3321  010A3A  0E00               	movlw	0
  3322  010A3C  0100               	movlb	0	; () banked
  3323  010A3E  6FC3               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3324  010A40  0E64               	movlw	100
  3325  010A42  6FC2               	movwf	Motor_Move@pDelta& (0+255),b
  3326  010A44  ECA3  F0A2         	call	_Motor_Move	;wreg free
  3327                           
  3328                           ;main.c: 172: if (MXK_Release())
  3329  010A48  ECEE  F0A4         	call	_MXK_Release	;wreg free
  3330  010A4C  0900               	iorlw	0
  3331  010A4E  A4D8               	btfss	status,2,c
  3332                           
  3333                           ;main.c: 173: MXK_Dequeue();
  3334  010A50  EC0B  F0A2         	call	_MXK_Dequeue	;wreg free
  3335  010A54                     l2038:
  3336                           
  3337                           ;main.c: 174: }
  3338                           ;main.c: 177: HMI_Poll();
  3339  010A54  EC4D  F09D         	call	_HMI_Poll	;wreg free
  3340  010A58                     l2025:
  3341  010A58  EC24  F09B         	call	_getMode	;wreg free
  3342  010A5C  0100               	movlb	0	; () banked
  3343  010A5E  05E1               	decf	?_getMode& (0+255),w,b
  3344  010A60  0100               	movlb	0	; () banked
  3345  010A62  11E2               	iorwf	(?_getMode+1)& (0+255),w,b
  3346  010A64  A4D8               	btfss	status,2,c
  3347  010A66  0012               	return	
  3348  010A68  D6C2               	goto	l2026
  3349  010A6A                     __end_of_continuousMode:
  3350                           	opt stack 0
  3351                           tosu	equ	0xFFF
  3352                           tosh	equ	0xFFE
  3353                           tosl	equ	0xFFD
  3354                           pclath	equ	0xFFA
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           postdec1	equ	0xFE5
  3362                           fsr1h	equ	0xFE2
  3363                           fsr1l	equ	0xFE1
  3364                           postinc2	equ	0xFDE
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _displayText *****************
  3368 ;; Defined at:
  3369 ;;		line 72 in file "main.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      void 
  3376 ;; Registers used:
  3377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;Total ram usage:        0 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:   18
  3390 ;; This function calls:
  3391 ;;		_Console_Render
  3392 ;;		_displayMode
  3393 ;;		_displaySID
  3394 ;;		_printf
  3395 ;; This function is called by:
  3396 ;;		_continuousMode
  3397 ;;		_nullMode
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text6
  3403  0147E8                     __ptext6:
  3404                           	opt stack 0
  3405  0147E8                     _displayText:
  3406                           	opt stack 10
  3407                           
  3408                           ;main.c: 74: printf("%c", (char)35);
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;incstack = 0
  3412  0147E8  0EFC               	movlw	low STR_2
  3413  0147EA  0100               	movlb	0	; () banked
  3414  0147EC  6FD3               	movwf	printf@f& (0+255),b
  3415  0147EE  0EFF               	movlw	high STR_2
  3416  0147F0  0100               	movlb	0	; () banked
  3417  0147F2  6FD4               	movwf	(printf@f+1)& (0+255),b
  3418  0147F4  0E00               	movlw	0
  3419  0147F6  0100               	movlb	0	; () banked
  3420  0147F8  6FD6               	movwf	(?_printf+3)& (0+255),b
  3421  0147FA  0E23               	movlw	35
  3422  0147FC  6FD5               	movwf	(?_printf+2)& (0+255),b
  3423  0147FE  ECA2  F087         	call	_printf	;wreg free
  3424                           
  3425                           ;main.c: 77: displaySID();
  3426  014802  EC75  F0A4         	call	_displaySID	;wreg free
  3427                           
  3428                           ;main.c: 80: displayMode();
  3429  014806  EC96  F09A         	call	_displayMode	;wreg free
  3430                           
  3431                           ;main.c: 83: Console_Render();
  3432  01480A  ECD0  F089         	call	_Console_Render	;wreg free
  3433  01480E  0012               	return		;funcret
  3434  014810                     __end_of_displayText:
  3435                           	opt stack 0
  3436                           tosu	equ	0xFFF
  3437                           tosh	equ	0xFFE
  3438                           tosl	equ	0xFFD
  3439                           pclath	equ	0xFFA
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           postinc0	equ	0xFEE
  3445                           wreg	equ	0xFE8
  3446                           postdec1	equ	0xFE5
  3447                           fsr1h	equ	0xFE2
  3448                           fsr1l	equ	0xFE1
  3449                           postinc2	equ	0xFDE
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _displaySID *****************
  3453 ;; Defined at:
  3454 ;;		line 66 in file "main.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:   13
  3475 ;; This function calls:
  3476 ;;		_Console_SetForecolour
  3477 ;;		_printf
  3478 ;; This function is called by:
  3479 ;;		_displayText
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text7
  3484  0148EA                     __ptext7:
  3485                           	opt stack 0
  3486  0148EA                     _displaySID:
  3487                           	opt stack 14
  3488                           
  3489                           ;main.c: 67: Console_SetForecolour(0x07E0);
  3490                           
  3491                           ;incstack = 0
  3492  0148EA  0E07               	movlw	7
  3493  0148EC  0100               	movlb	0	; () banked
  3494  0148EE  6FBE               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3495  0148F0  0EE0               	movlw	224
  3496  0148F2  6FBD               	movwf	Console_SetForecolour@pColour& (0+255),b
  3497  0148F4  ECCA  F0A5         	call	_Console_SetForecolour	;wreg free
  3498                           
  3499                           ;main.c: 68: printf("Jamin Early 99133391\n");
  3500  0148F8  0E81               	movlw	low STR_1
  3501  0148FA  0100               	movlb	0	; () banked
  3502  0148FC  6FD3               	movwf	printf@f& (0+255),b
  3503  0148FE  0EFF               	movlw	high STR_1
  3504  014900  0100               	movlb	0	; () banked
  3505  014902  6FD4               	movwf	(printf@f+1)& (0+255),b
  3506  014904  ECA2  F087         	call	_printf	;wreg free
  3507  014908  0012               	return		;funcret
  3508  01490A                     __end_of_displaySID:
  3509                           	opt stack 0
  3510                           tosu	equ	0xFFF
  3511                           tosh	equ	0xFFE
  3512                           tosl	equ	0xFFD
  3513                           pclath	equ	0xFFA
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           postinc0	equ	0xFEE
  3519                           wreg	equ	0xFE8
  3520                           postdec1	equ	0xFE5
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           postinc2	equ	0xFDE
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _displayMode *****************
  3527 ;; Defined at:
  3528 ;;		line 112 in file "main.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:   17
  3549 ;; This function calls:
  3550 ;;		_Console_SetForecolour
  3551 ;;		_getMode
  3552 ;;		_printf
  3553 ;; This function is called by:
  3554 ;;		_displayText
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text8
  3559  01352C                     __ptext8:
  3560                           	opt stack 0
  3561  01352C                     _displayMode:
  3562                           	opt stack 10
  3563                           
  3564                           ;main.c: 113: Console_SetForecolour(0xF800);
  3565                           
  3566                           ;incstack = 0
  3567  01352C  0EF8               	movlw	248
  3568  01352E  0100               	movlb	0	; () banked
  3569  013530  6FBE               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3570  013532  0E00               	movlw	0
  3571  013534  6FBD               	movwf	Console_SetForecolour@pColour& (0+255),b
  3572  013536  ECCA  F0A5         	call	_Console_SetForecolour	;wreg free
  3573                           
  3574                           ;main.c: 114: printf("Current Mode:\n");
  3575  01353A  0E97               	movlw	low STR_3
  3576  01353C  0100               	movlb	0	; () banked
  3577  01353E  6FD3               	movwf	printf@f& (0+255),b
  3578  013540  0EFF               	movlw	high STR_3
  3579  013542  0100               	movlb	0	; () banked
  3580  013544  6FD4               	movwf	(printf@f+1)& (0+255),b
  3581  013546  ECA2  F087         	call	_printf	;wreg free
  3582                           
  3583                           ;main.c: 115: switch (getMode()) {
  3584  01354A  D024               	goto	l2016
  3585  01354C                     
  3586                           ;main.c: 117: printf(" Position\n\n");
  3587  01354C  0EDD               	movlw	low STR_4
  3588  01354E  0100               	movlb	0	; () banked
  3589  013550  6FD3               	movwf	printf@f& (0+255),b
  3590  013552  0EFF               	movlw	high STR_4
  3591  013554  0100               	movlb	0	; () banked
  3592  013556  6FD4               	movwf	(printf@f+1)& (0+255),b
  3593  013558  ECA2  F087         	call	_printf	;wreg free
  3594                           
  3595                           ;main.c: 118: break;
  3596  01355C  0012               	return	
  3597  01355E                     
  3598                           ;main.c: 120: printf(" Step\n\n");
  3599  01355E  0EF4               	movlw	low STR_5
  3600  013560  0100               	movlb	0	; () banked
  3601  013562  6FD3               	movwf	printf@f& (0+255),b
  3602  013564  0EFF               	movlw	high STR_5
  3603  013566  0100               	movlb	0	; () banked
  3604  013568  6FD4               	movwf	(printf@f+1)& (0+255),b
  3605  01356A  ECA2  F087         	call	_printf	;wreg free
  3606                           
  3607                           ;main.c: 121: break;
  3608  01356E  0012               	return	
  3609  013570                     
  3610                           ;main.c: 123: printf(" Continuous\n\n");
  3611  013570  0EB5               	movlw	low STR_6
  3612  013572  0100               	movlb	0	; () banked
  3613  013574  6FD3               	movwf	printf@f& (0+255),b
  3614  013576  0EFF               	movlw	high STR_6
  3615  013578  0100               	movlb	0	; () banked
  3616  01357A  6FD4               	movwf	(printf@f+1)& (0+255),b
  3617  01357C  ECA2  F087         	call	_printf	;wreg free
  3618                           
  3619                           ;main.c: 124: break;
  3620  013580  0012               	return	
  3621  013582                     
  3622                           ;main.c: 126: printf(" Undefined\n\n");
  3623  013582  0EC3               	movlw	low STR_7
  3624  013584  0100               	movlb	0	; () banked
  3625  013586  6FD3               	movwf	printf@f& (0+255),b
  3626  013588  0EFF               	movlw	high STR_7
  3627  01358A  0100               	movlb	0	; () banked
  3628  01358C  6FD4               	movwf	(printf@f+1)& (0+255),b
  3629  01358E  ECA2  F087         	call	_printf	;wreg free
  3630                           
  3631                           ;main.c: 128: }
  3632                           
  3633                           ;main.c: 127: break;
  3634  013592  0012               	return	
  3635  013594                     l2016:
  3636  013594  EC24  F09B         	call	_getMode	;wreg free
  3637                           
  3638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3639                           ; Switch size 1, requested type "space"
  3640                           ; Number of cases is 1, Range of values is 0 to 0
  3641                           ; switch strategies available:
  3642                           ; Name         Instructions Cycles
  3643                           ; simple_byte            4     3 (average)
  3644                           ;	Chosen strategy is simple_byte
  3645  013598  0100               	movlb	0	; () banked
  3646  01359A  51E2               	movf	(?_getMode+1)& (0+255),w,b
  3647  01359C  0A00               	xorlw	0	; case 0
  3648  01359E  A4D8               	btfss	status,2,c
  3649  0135A0  D7F0               	goto	l2021
  3650                           
  3651                           ; BSR set to: 0
  3652                           ; Switch size 1, requested type "space"
  3653                           ; Number of cases is 3, Range of values is 1 to 3
  3654                           ; switch strategies available:
  3655                           ; Name         Instructions Cycles
  3656                           ; simple_byte           10     6 (average)
  3657                           ;	Chosen strategy is simple_byte
  3658  0135A2  0100               	movlb	0	; () banked
  3659  0135A4  51E1               	movf	?_getMode& (0+255),w,b
  3660  0135A6  0A01               	xorlw	1	; case 1
  3661  0135A8  B4D8               	btfsc	status,2,c
  3662  0135AA  D7E2               	goto	l2020
  3663  0135AC  0A03               	xorlw	3	; case 2
  3664  0135AE  B4D8               	btfsc	status,2,c
  3665  0135B0  D7D6               	goto	l2019
  3666  0135B2  0A01               	xorlw	1	; case 3
  3667  0135B4  B4D8               	btfsc	status,2,c
  3668  0135B6  D7CA               	goto	l2017
  3669  0135B8  D7E4               	goto	l2021
  3670  0135BA                     __end_of_displayMode:
  3671                           	opt stack 0
  3672                           tosu	equ	0xFFF
  3673                           tosh	equ	0xFFE
  3674                           tosl	equ	0xFFD
  3675                           pclath	equ	0xFFA
  3676                           tblptru	equ	0xFF8
  3677                           tblptrh	equ	0xFF7
  3678                           tblptrl	equ	0xFF6
  3679                           tablat	equ	0xFF5
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           postdec1	equ	0xFE5
  3683                           fsr1h	equ	0xFE2
  3684                           fsr1l	equ	0xFE1
  3685                           postinc2	equ	0xFDE
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _printf *****************
  3689 ;; Defined at:
  3690 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  3693 ;;		 -> STR_13(24), STR_12(24), STR_11(24), STR_10(13), 
  3694 ;;		 -> STR_9(15), STR_8(11), STR_7(13), STR_6(14), 
  3695 ;;		 -> STR_5(8), STR_4(12), STR_3(15), STR_2(3), 
  3696 ;;		 -> STR_1(22), 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  val             4   35[BANK0 ] unsigned long 
  3699 ;;  tmpval          4    0        struct .
  3700 ;;  cp              3    0        PTR const unsigned char 
  3701 ;;  ap              2   33[BANK0 ] PTR void [1]
  3702 ;;		 -> ?_printf(2), 
  3703 ;;  prec            2   30[BANK0 ] int 
  3704 ;;  len             2    0        unsigned int 
  3705 ;;  c               1   39[BANK0 ] char 
  3706 ;;  flag            1   32[BANK0 ] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  2   22[BANK0 ] int 
  3709 ;; Registers used:
  3710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3716 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;Total ram usage:       18 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:   12
  3723 ;; This function calls:
  3724 ;;		___lldiv
  3725 ;;		___llmod
  3726 ;;		_putch
  3727 ;; This function is called by:
  3728 ;;		_displaySID
  3729 ;;		_displayText
  3730 ;;		_displayMode
  3731 ;;		_continuousMode
  3732 ;;		_nullMode
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text9
  3737  010F44                     __ptext9:
  3738                           	opt stack 0
  3739  010F44                     _printf:
  3740                           	opt stack 16
  3741                           
  3742                           ;doprnt.c: 466: va_list ap;
  3743                           ;doprnt.c: 499: signed char c;
  3744                           ;doprnt.c: 504: int prec;
  3745                           ;doprnt.c: 508: unsigned char flag;
  3746                           ;doprnt.c: 523: union {
  3747                           ;doprnt.c: 524: unsigned long vd;
  3748                           ;doprnt.c: 525: double integ;
  3749                           ;doprnt.c: 526: } tmpval;
  3750                           ;doprnt.c: 528: unsigned long val;
  3751                           ;doprnt.c: 529: unsigned len;
  3752                           ;doprnt.c: 530: const char * cp;
  3753                           ;doprnt.c: 533: *ap = __va_start();
  3754                           
  3755                           ;incstack = 0
  3756  010F44  0ED5               	movlw	low (?_printf+2)
  3757  010F46  0100               	movlb	0	; () banked
  3758  010F48  6FDE               	movwf	printf@ap& (0+255),b
  3759  010F4A  0E00               	movlw	high (?_printf+2)
  3760  010F4C  0100               	movlb	0	; () banked
  3761  010F4E  6FDF               	movwf	(printf@ap+1)& (0+255),b
  3762                           
  3763                           ;doprnt.c: 536: while(c = *f++) {
  3764  010F50  D101               	goto	u7700
  3765  010F52                     
  3766                           ; BSR set to: 0
  3767                           ;doprnt.c: 538: if(c != '%')
  3768                           
  3769                           ; BSR set to: 0
  3770  010F52  0E25               	movlw	37
  3771  010F54  0100               	movlb	0	; () banked
  3772  010F56  19E4               	xorwf	printf@c& (0+255),w,b
  3773  010F58  B4D8               	btfsc	status,2,c
  3774  010F5A  D005               	goto	l2080
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;doprnt.c: 540: {
  3778                           ;doprnt.c: 541: (putch(c) );
  3779  010F5C  0100               	movlb	0	; () banked
  3780  010F5E  51E4               	movf	printf@c& (0+255),w,b
  3781  010F60  EC92  F0A5         	call	_putch
  3782                           
  3783                           ;doprnt.c: 542: continue;
  3784  010F64  D0F7               	goto	u7700
  3785  010F66                     l2080:
  3786                           
  3787                           ;doprnt.c: 543: }
  3788                           ;doprnt.c: 548: flag = 0;
  3789  010F66  0E00               	movlw	0
  3790  010F68  0100               	movlb	0	; () banked
  3791  010F6A  6FDD               	movwf	printf@flag& (0+255),b
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;doprnt.c: 635: switch(c = *f++) {
  3795                           
  3796                           ;doprnt.c: 633: loop:
  3797  010F6C  D014               	goto	l2082
  3798  010F6E                     
  3799                           ; BSR set to: 0
  3800                           ;doprnt.c: 643: flag |= 0x10;
  3801                           
  3802                           ; BSR set to: 0
  3803  010F6E  0100               	movlb	0	; () banked
  3804  010F70  89DD               	bsf	printf@flag& (0+255),4,b
  3805                           
  3806                           ;doprnt.c: 644: goto loop;
  3807  010F72  D011               	goto	l2082
  3808  010F74                     
  3809                           ; BSR set to: 0
  3810                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3811                           
  3812                           ; BSR set to: 0
  3813  010F74  C0DE  FFD9         	movff	printf@ap,fsr2l
  3814  010F78  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  3815  010F7C  50DF               	movf	indf2,w,c
  3816  010F7E  0100               	movlb	0	; () banked
  3817  010F80  6FE4               	movwf	printf@c& (0+255),b
  3818                           
  3819                           ; BSR set to: 0
  3820  010F82  0E02               	movlw	2
  3821  010F84  0100               	movlb	0	; () banked
  3822  010F86  27DE               	addwf	printf@ap& (0+255),f,b
  3823  010F88  0E00               	movlw	0
  3824  010F8A  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  3825  010F8C                     
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 809: (putch(c) );
  3828                           
  3829                           ; BSR set to: 0
  3830  010F8C  0100               	movlb	0	; () banked
  3831  010F8E  51E4               	movf	printf@c& (0+255),w,b
  3832  010F90  EC92  F0A5         	call	_putch
  3833                           
  3834                           ;doprnt.c: 810: continue;
  3835  010F94  D0DF               	goto	u7700
  3836  010F96                     l2082:
  3837  010F96  C0D3  FFF6         	movff	printf@f,tblptrl
  3838  010F9A  C0D4  FFF7         	movff	printf@f+1,tblptrh
  3839  010F9E  0100               	movlb	0	; () banked
  3840  010FA0  4BD3               	infsnz	printf@f& (0+255),f,b
  3841  010FA2  2BD4               	incf	(printf@f+1)& (0+255),f,b
  3842  010FA4                     	if	0	;tblptru may be non-zero
  3843  010FA4                     	endif
  3844  010FA4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3845  010FA4  0E00               	movlw	low (__mediumconst shr (0+16))
  3846  010FA6  6EF8               	movwf	tblptru,c
  3847  010FA8                     	endif
  3848  010FA8  0008               	tblrd		*
  3849  010FAA  CFF5 F0E4          	movff	tablat,printf@c
  3850  010FAE  0100               	movlb	0	; () banked
  3851  010FB0  51E4               	movf	printf@c& (0+255),w,b
  3852                           
  3853                           ; Switch size 1, requested type "space"
  3854                           ; Number of cases is 5, Range of values is 0 to 108
  3855                           ; switch strategies available:
  3856                           ; Name         Instructions Cycles
  3857                           ; simple_byte           16     9 (average)
  3858                           ;	Chosen strategy is simple_byte
  3859  010FB2  0A00               	xorlw	0	; case 0
  3860  010FB4  B4D8               	btfsc	status,2,c
  3861  010FB6  0012               	return	
  3862  010FB8  0A63               	xorlw	99	; case 99
  3863  010FBA  B4D8               	btfsc	status,2,c
  3864  010FBC  D7DB               	goto	l2089
  3865  010FBE  0A07               	xorlw	7	; case 100
  3866  010FC0  B4D8               	btfsc	status,2,c
  3867  010FC2  D007               	goto	l2088
  3868  010FC4  0A0D               	xorlw	13	; case 105
  3869  010FC6  B4D8               	btfsc	status,2,c
  3870  010FC8  D004               	goto	l2088
  3871  010FCA  0A05               	xorlw	5	; case 108
  3872  010FCC  B4D8               	btfsc	status,2,c
  3873  010FCE  D7CF               	goto	l2085
  3874  010FD0  D7DD               	goto	l2090
  3875  010FD2                     l2088:
  3876                           
  3877                           ;doprnt.c: 1253: {
  3878                           ;doprnt.c: 1255: if(flag & 0x10)
  3879  010FD2  0100               	movlb	0	; () banked
  3880  010FD4  A9DD               	btfss	printf@flag& (0+255),4,b
  3881  010FD6  D00E               	goto	l2091
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3885  010FD8  C0DE  FFD9         	movff	printf@ap,fsr2l
  3886  010FDC  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  3887  010FE0  CFDE F0E0          	movff	postinc2,printf@val
  3888  010FE4  CFDE F0E1          	movff	postinc2,printf@val+1
  3889  010FE8  CFDE F0E2          	movff	postinc2,printf@val+2
  3890  010FEC  CFDE F0E3          	movff	postinc2,printf@val+3
  3891                           
  3892                           ; BSR set to: 0
  3893  010FF0  0E04               	movlw	4
  3894  010FF2  D00F               	goto	L1
  3895  010FF4                     l2091:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;doprnt.c: 1257: else
  3899                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3900                           
  3901                           ; BSR set to: 0
  3902  010FF4  C0DE  FFD9         	movff	printf@ap,fsr2l
  3903  010FF8  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  3904  010FFC  CFDE F0E0          	movff	postinc2,printf@val
  3905  011000  CFDD F0E1          	movff	postdec2,printf@val+1
  3906  011004  0100               	movlb	0	; () banked
  3907  011006  0E00               	movlw	0
  3908  011008  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  3909  01100A  0EFF               	movlw	-1
  3910  01100C  6FE2               	movwf	(printf@val+2)& (0+255),b
  3911  01100E  6FE3               	movwf	(printf@val+3)& (0+255),b
  3912                           
  3913                           ; BSR set to: 0
  3914  011010  0E02               	movlw	2
  3915  011012                     L1:
  3916  011012  0100               	movlb	0	; () banked
  3917  011014  27DE               	addwf	printf@ap& (0+255),f,b
  3918  011016  0E00               	movlw	0
  3919  011018  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;doprnt.c: 1261: if((long)val < 0) {
  3923                           
  3924                           ; BSR set to: 0
  3925  01101A  0100               	movlb	0	; () banked
  3926  01101C  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  3927  01101E  D00C               	goto	l2093
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;doprnt.c: 1262: flag |= 0x03;
  3931  011020  0E03               	movlw	3
  3932  011022  0100               	movlb	0	; () banked
  3933  011024  13DD               	iorwf	printf@flag& (0+255),f,b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;doprnt.c: 1263: val = -val;
  3937  011026  0100               	movlb	0	; () banked
  3938  011028  1FE3               	comf	(printf@val+3)& (0+255),f,b
  3939  01102A  1FE2               	comf	(printf@val+2)& (0+255),f,b
  3940  01102C  1FE1               	comf	(printf@val+1)& (0+255),f,b
  3941  01102E  6DE0               	negf	printf@val& (0+255),b
  3942  011030  0E00               	movlw	0
  3943  011032  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  3944  011034  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  3945  011036  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  3946  011038                     l2093:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;doprnt.c: 1264: }
  3950                           ;doprnt.c: 1266: }
  3951                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3952                           
  3953                           ; BSR set to: 0
  3954  011038  0E01               	movlw	1
  3955  01103A  0100               	movlb	0	; () banked
  3956  01103C  6FE4               	movwf	printf@c& (0+255),b
  3957  01103E                     l11156:
  3958                           
  3959                           ; BSR set to: 0
  3960  01103E  0E0A               	movlw	10
  3961  011040  0100               	movlb	0	; () banked
  3962  011042  19E4               	xorwf	printf@c& (0+255),w,b
  3963  011044  B4D8               	btfsc	status,2,c
  3964  011046  D021               	goto	u7680
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;doprnt.c: 1306: if(val < dpowers[c])
  3968                           
  3969                           ; BSR set to: 0
  3970                           
  3971                           ; BSR set to: 0
  3972  011048  0100               	movlb	0	; () banked
  3973  01104A  51E4               	movf	printf@c& (0+255),w,b
  3974  01104C  0D04               	mullw	4
  3975  01104E  0E23               	movlw	low _dpowers
  3976  011050  24F3               	addwf	prodl,w,c
  3977  011052  6EF6               	movwf	tblptrl,c
  3978  011054  0EFD               	movlw	high _dpowers
  3979  011056  20F4               	addwfc	prodh,w,c
  3980  011058  6EF7               	movwf	tblptrh,c
  3981  01105A                     	if	1	;There are 3 active tblptr bytes
  3982  01105A  6AF8               	clrf	tblptru,c
  3983  01105C  0E00               	movlw	low (__mediumconst shr (0+16))
  3984  01105E  22F8               	addwfc	tblptru,f,c
  3985  011060                     	endif
  3986  011060  0009               	tblrd		*+
  3987  011062  50F5               	movf	tablat,w,c
  3988  011064  0100               	movlb	0	; () banked
  3989  011066  5DE0               	subwf	printf@val& (0+255),w,b
  3990  011068  0009               	tblrd		*+
  3991  01106A  50F5               	movf	tablat,w,c
  3992  01106C  0100               	movlb	0	; () banked
  3993  01106E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  3994  011070  0009               	tblrd		*+
  3995  011072  50F5               	movf	tablat,w,c
  3996  011074  0100               	movlb	0	; () banked
  3997  011076  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  3998  011078  0009               	tblrd		*+
  3999  01107A  50F5               	movf	tablat,w,c
  4000  01107C  0100               	movlb	0	; () banked
  4001  01107E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  4002  011080  A0D8               	btfss	status,0,c
  4003  011082  D003               	goto	u7680
  4004                           
  4005                           ; BSR set to: 0
  4006                           
  4007                           ; BSR set to: 0
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 1307: break;
  4011  011084  0100               	movlb	0	; () banked
  4012  011086  2BE4               	incf	printf@c& (0+255),f,b
  4013  011088  D7DA               	goto	l11156
  4014  01108A                     u7680:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;doprnt.c: 1422: {
  4018                           ;doprnt.c: 1438: if(flag & 0x03)
  4019                           
  4020                           ; BSR set to: 0
  4021  01108A  C0DD  F0D9         	movff	printf@flag,??_printf
  4022  01108E  0E03               	movlw	3
  4023  011090  0100               	movlb	0	; () banked
  4024  011092  17D9               	andwf	??_printf& (0+255),f,b
  4025  011094  B4D8               	btfsc	status,2,c
  4026  011096  D003               	goto	l2097
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 1439: (putch('-') );
  4030  011098  0E2D               	movlw	45
  4031  01109A  EC92  F0A5         	call	_putch
  4032  01109E                     l2097:
  4033                           
  4034                           ;doprnt.c: 1469: }
  4035                           ;doprnt.c: 1472: prec = c;
  4036  01109E  0100               	movlb	0	; () banked
  4037  0110A0  51E4               	movf	printf@c& (0+255),w,b
  4038  0110A2  0100               	movlb	0	; () banked
  4039  0110A4  6FDB               	movwf	printf@prec& (0+255),b
  4040  0110A6  6BDC               	clrf	(printf@prec+1)& (0+255),b
  4041  0110A8  BFDB               	btfsc	printf@prec& (0+255),7,b
  4042  0110AA  07DC               	decf	(printf@prec+1)& (0+255),f,b
  4043                           
  4044                           ;doprnt.c: 1474: while(prec--) {
  4045  0110AC  D048               	goto	l2098
  4046  0110AE                     l11174:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;doprnt.c: 1478: {
  4050                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4051  0110AE  C0DB  F0D9         	movff	printf@prec,??_printf
  4052  0110B2  C0DC  F0DA         	movff	printf@prec+1,??_printf+1
  4053  0110B6  0100               	movlb	0	; () banked
  4054  0110B8  90D8               	bcf	status,0,c
  4055  0110BA  37D9               	rlcf	??_printf& (0+255),f,b
  4056  0110BC  37DA               	rlcf	(??_printf+1)& (0+255),f,b
  4057  0110BE  0100               	movlb	0	; () banked
  4058  0110C0  90D8               	bcf	status,0,c
  4059  0110C2  37D9               	rlcf	??_printf& (0+255),f,b
  4060  0110C4  37DA               	rlcf	(??_printf+1)& (0+255),f,b
  4061  0110C6  0E23               	movlw	low _dpowers
  4062  0110C8  0100               	movlb	0	; () banked
  4063  0110CA  25D9               	addwf	??_printf& (0+255),w,b
  4064  0110CC  6EF6               	movwf	tblptrl,c
  4065  0110CE  0EFD               	movlw	high _dpowers
  4066  0110D0  21DA               	addwfc	(??_printf+1)& (0+255),w,b
  4067  0110D2  6EF7               	movwf	tblptrh,c
  4068  0110D4                     	if	1	;There are 3 active tblptr bytes
  4069  0110D4  6AF8               	clrf	tblptru,c
  4070  0110D6  0E00               	movlw	low (__mediumconst shr (0+16))
  4071  0110D8  22F8               	addwfc	tblptru,f,c
  4072  0110DA                     	endif
  4073  0110DA  0009               	tblrd		*+
  4074  0110DC  CFF5 F0C1          	movff	tablat,___lldiv@divisor
  4075  0110E0  0009               	tblrd		*+
  4076  0110E2  CFF5 F0C2          	movff	tablat,___lldiv@divisor+1
  4077  0110E6  0009               	tblrd		*+
  4078  0110E8  CFF5 F0C3          	movff	tablat,___lldiv@divisor+2
  4079  0110EC  000A               	tblrd		*-
  4080  0110EE  CFF5 F0C4          	movff	tablat,___lldiv@divisor+3
  4081  0110F2  C0E0  F0BD         	movff	printf@val,___lldiv@dividend
  4082  0110F6  C0E1  F0BE         	movff	printf@val+1,___lldiv@dividend+1
  4083  0110FA  C0E2  F0BF         	movff	printf@val+2,___lldiv@dividend+2
  4084  0110FE  C0E3  F0C0         	movff	printf@val+3,___lldiv@dividend+3
  4085  011102  ECB4  F095         	call	___lldiv	;wreg free
  4086  011106  C0BD  F0CA         	movff	?___lldiv,___llmod@dividend
  4087  01110A  C0BE  F0CB         	movff	?___lldiv+1,___llmod@dividend+1
  4088  01110E  C0BF  F0CC         	movff	?___lldiv+2,___llmod@dividend+2
  4089  011112  C0C0  F0CD         	movff	?___lldiv+3,___llmod@dividend+3
  4090  011116  0E0A               	movlw	10
  4091  011118  0100               	movlb	0	; () banked
  4092  01111A  6FCE               	movwf	___llmod@divisor& (0+255),b
  4093  01111C  0E00               	movlw	0
  4094  01111E  6FCF               	movwf	(___llmod@divisor+1)& (0+255),b
  4095  011120  0E00               	movlw	0
  4096  011122  6FD0               	movwf	(___llmod@divisor+2)& (0+255),b
  4097  011124  0E00               	movlw	0
  4098  011126  6FD1               	movwf	(___llmod@divisor+3)& (0+255),b
  4099  011128  ECB5  F099         	call	___llmod	;wreg free
  4100  01112C  0100               	movlb	0	; () banked
  4101  01112E  51CA               	movf	?___llmod& (0+255),w,b
  4102  011130  0F30               	addlw	48
  4103  011132  0100               	movlb	0	; () banked
  4104  011134  6FE4               	movwf	printf@c& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;doprnt.c: 1523: }
  4108                           ;doprnt.c: 1524: (putch(c) );
  4109  011136  0100               	movlb	0	; () banked
  4110  011138  51E4               	movf	printf@c& (0+255),w,b
  4111  01113A  EC92  F0A5         	call	_putch
  4112  01113E                     l2098:
  4113  01113E  0100               	movlb	0	; () banked
  4114  011140  07DB               	decf	printf@prec& (0+255),f,b
  4115  011142  A0D8               	btfss	status,0,c
  4116  011144  07DC               	decf	(printf@prec+1)& (0+255),f,b
  4117  011146  0100               	movlb	0	; () banked
  4118  011148  29DB               	incf	printf@prec& (0+255),w,b
  4119  01114A  E1B1               	bnz	l11174
  4120  01114C  0100               	movlb	0	; () banked
  4121  01114E  29DC               	incf	(printf@prec+1)& (0+255),w,b
  4122  011150  A4D8               	btfss	status,2,c
  4123  011152  D7AD               	goto	l2099
  4124  011154                     u7700:
  4125                           
  4126                           ; BSR set to: 0
  4127                           
  4128                           ; BSR set to: 0
  4129  011154  C0D3  FFF6         	movff	printf@f,tblptrl
  4130  011158  C0D4  FFF7         	movff	printf@f+1,tblptrh
  4131  01115C  0100               	movlb	0	; () banked
  4132  01115E  4BD3               	infsnz	printf@f& (0+255),f,b
  4133  011160  2BD4               	incf	(printf@f+1)& (0+255),f,b
  4134  011162                     	if	0	;tblptru may be non-zero
  4135  011162                     	endif
  4136  011162                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4137  011162  0E00               	movlw	low (__mediumconst shr (0+16))
  4138  011164  6EF8               	movwf	tblptru,c
  4139  011166                     	endif
  4140  011166  0008               	tblrd		*
  4141  011168  CFF5 F0E4          	movff	tablat,printf@c
  4142  01116C  0100               	movlb	0	; () banked
  4143  01116E  51E4               	movf	printf@c& (0+255),w,b
  4144  011170  B4D8               	btfsc	status,2,c
  4145  011172  0012               	return	
  4146  011174  D6EE               	goto	l2079
  4147  011176                     __end_of_printf:
  4148                           	opt stack 0
  4149                           tosu	equ	0xFFF
  4150                           tosh	equ	0xFFE
  4151                           tosl	equ	0xFFD
  4152                           pclath	equ	0xFFA
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           postinc0	equ	0xFEE
  4160                           wreg	equ	0xFE8
  4161                           postdec1	equ	0xFE5
  4162                           fsr1h	equ	0xFE2
  4163                           fsr1l	equ	0xFE1
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           postdec2	equ	0xFDD
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _putch *****************
  4172 ;; Defined at:
  4173 ;;		line 454 in file "Library/Console.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  c               1    wreg     unsigned char 
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;  c               1   20[BANK0 ] unsigned char 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  1    wreg      void 
  4180 ;; Registers used:
  4181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;Total ram usage:        1 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:   11
  4194 ;; This function calls:
  4195 ;;		_Console_PrintChar
  4196 ;; This function is called by:
  4197 ;;		_printf
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text10
  4202  014B24                     __ptext10:
  4203                           	opt stack 0
  4204  014B24                     _putch:
  4205                           	opt stack 16
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;incstack = 0
  4209                           ;putch@c stored from wreg
  4210  014B24  0100               	movlb	0	; () banked
  4211  014B26  6FD1               	movwf	putch@c& (0+255),b
  4212                           
  4213                           ;Console.c: 456: Console_PrintChar(c);
  4214  014B28  0100               	movlb	0	; () banked
  4215  014B2A  51D1               	movf	putch@c& (0+255),w,b
  4216  014B2C  ECB5  F08C         	call	_Console_PrintChar
  4217  014B30  0012               	return		;funcret
  4218  014B32                     __end_of_putch:
  4219                           	opt stack 0
  4220                           tosu	equ	0xFFF
  4221                           tosh	equ	0xFFE
  4222                           tosl	equ	0xFFD
  4223                           pclath	equ	0xFFA
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           postinc0	equ	0xFEE
  4231                           wreg	equ	0xFE8
  4232                           postdec1	equ	0xFE5
  4233                           fsr1h	equ	0xFE2
  4234                           fsr1l	equ	0xFE1
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _Console_PrintChar *****************
  4243 ;; Defined at:
  4244 ;;		line 322 in file "Library/Console.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  pInput          1    wreg     unsigned char 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  pInput          1   19[BANK0 ] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        4 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:   10
  4265 ;; This function calls:
  4266 ;;		_Console_Backspace
  4267 ;;		_Console_FormFeed
  4268 ;;		_Console_IncrementCursor
  4269 ;;		_Console_NewLine
  4270 ;;		_Console_ResetCursor
  4271 ;;		_Console_Tab
  4272 ;; This function is called by:
  4273 ;;		_putch
  4274 ;;		_Console_PrintString
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text11
  4279  01196A                     __ptext11:
  4280                           	opt stack 0
  4281  01196A                     _Console_PrintChar:
  4282                           	opt stack 16
  4283                           
  4284                           ;incstack = 0
  4285                           ;Console_PrintChar@pInput stored from wreg
  4286  01196A  0100               	movlb	0	; () banked
  4287  01196C  6FD0               	movwf	Console_PrintChar@pInput& (0+255),b
  4288                           
  4289                           ;Console.c: 324: switch(pInput)
  4290  01196E  D0B1               	goto	l1036
  4291  011970                     
  4292                           ;Console.c: 327: case '\n':
  4293                           ;Console.c: 328: Console_NewLine();
  4294  011970  EC16  F099         	call	_Console_NewLine	;wreg free
  4295                           
  4296                           ;Console.c: 329: return;
  4297  011974  0012               	return	
  4298  011976                     
  4299                           ;Console.c: 331: Console_Backspace();
  4300  011976  EC5B  F09F         	call	_Console_Backspace	;wreg free
  4301                           
  4302                           ;Console.c: 332: return;
  4303  01197A  0012               	return	
  4304  01197C                     
  4305                           ;Console.c: 334: Console_FormFeed();
  4306  01197C  ECDD  F09A         	call	_Console_FormFeed	;wreg free
  4307                           
  4308                           ;Console.c: 335: return;
  4309  011980  0012               	return	
  4310  011982                     
  4311                           ;Console.c: 337: Console_Tab();
  4312  011982  ECF4  F094         	call	_Console_Tab	;wreg free
  4313                           
  4314                           ;Console.c: 338: return;
  4315  011986  0012               	return	
  4316  011988                     
  4317                           ;Console.c: 340: Console_IncrementCursor();
  4318  011988  EC94  F09E         	call	_Console_IncrementCursor	;wreg free
  4319                           
  4320                           ;Console.c: 341: return;
  4321  01198C  0012               	return	
  4322  01198E                     
  4323                           ;Console.c: 343: Console_ResetCursor();
  4324  01198E  EC85  F0A4         	call	_Console_ResetCursor	;wreg free
  4325                           
  4326                           ;Console.c: 344: return;
  4327  011992  0012               	return	
  4328  011994                     
  4329                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4330                           
  4331                           ;Console.c: 349: default:
  4332  011994  C0D0  F0CD         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4333  011998  0E7F               	movlw	127
  4334  01199A  0100               	movlb	0	; () banked
  4335  01199C  17CD               	andwf	??_Console_PrintChar& (0+255),f,b
  4336  01199E  0100               	movlb	0	; () banked
  4337  0119A0  517A               	movf	_lBufferY& (0+255),w,b
  4338  0119A2  0D14               	mullw	20
  4339  0119A4  0E46               	movlw	low _lBuffer
  4340  0119A6  0100               	movlb	0	; () banked
  4341  0119A8  6FCE               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4342  0119AA  0E02               	movlw	high _lBuffer
  4343  0119AC  0100               	movlb	0	; () banked
  4344  0119AE  6FCF               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4345  0119B0  50F3               	movf	prodl,w,c
  4346  0119B2  0100               	movlb	0	; () banked
  4347  0119B4  27CE               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4348  0119B6  50F4               	movf	prodh,w,c
  4349  0119B8  0100               	movlb	0	; () banked
  4350  0119BA  23CF               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4351  0119BC  0100               	movlb	0	; () banked
  4352  0119BE  517B               	movf	_lBufferX& (0+255),w,b
  4353  0119C0  0D01               	mullw	1
  4354  0119C2  50F3               	movf	prodl,w,c
  4355  0119C4  0100               	movlb	0	; () banked
  4356  0119C6  25CE               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4357  0119C8  6ED9               	movwf	fsr2l,c
  4358  0119CA  50F4               	movf	prodh,w,c
  4359  0119CC  0100               	movlb	0	; () banked
  4360  0119CE  21CF               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4361  0119D0  6EDA               	movwf	fsr2h,c
  4362  0119D2  50DF               	movf	indf2,w,c
  4363  0119D4  0B7F               	andlw	127
  4364  0119D6  0100               	movlb	0	; () banked
  4365  0119D8  19CD               	xorwf	??_Console_PrintChar& (0+255),w,b
  4366  0119DA  B4D8               	btfsc	status,2,c
  4367  0119DC  D02E               	goto	l1047
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;Console.c: 351: {
  4371                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4372  0119DE  0E01               	movlw	1
  4373  0119E0  0100               	movlb	0	; () banked
  4374  0119E2  6FFF               	movwf	_change& (0+255),b
  4375                           
  4376                           ; BSR set to: 0
  4377  0119E4  0100               	movlb	0	; () banked
  4378  0119E6  517A               	movf	_lBufferY& (0+255),w,b
  4379  0119E8  0D14               	mullw	20
  4380  0119EA  0E46               	movlw	low _lBuffer
  4381  0119EC  0100               	movlb	0	; () banked
  4382  0119EE  6FCD               	movwf	??_Console_PrintChar& (0+255),b
  4383  0119F0  0E02               	movlw	high _lBuffer
  4384  0119F2  0100               	movlb	0	; () banked
  4385  0119F4  6FCE               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4386  0119F6  50F3               	movf	prodl,w,c
  4387  0119F8  0100               	movlb	0	; () banked
  4388  0119FA  27CD               	addwf	??_Console_PrintChar& (0+255),f,b
  4389  0119FC  50F4               	movf	prodh,w,c
  4390  0119FE  0100               	movlb	0	; () banked
  4391  011A00  23CE               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4392  011A02  0100               	movlb	0	; () banked
  4393  011A04  517B               	movf	_lBufferX& (0+255),w,b
  4394  011A06  0D01               	mullw	1
  4395  011A08  50F3               	movf	prodl,w,c
  4396  011A0A  0100               	movlb	0	; () banked
  4397  011A0C  25CD               	addwf	??_Console_PrintChar& (0+255),w,b
  4398  011A0E  6ED9               	movwf	fsr2l,c
  4399  011A10  50F4               	movf	prodh,w,c
  4400  011A12  0100               	movlb	0	; () banked
  4401  011A14  21CE               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4402  011A16  6EDA               	movwf	fsr2h,c
  4403  011A18  0100               	movlb	0	; () banked
  4404  011A1A  51D0               	movf	Console_PrintChar@pInput& (0+255),w,b
  4405  011A1C  0980               	iorlw	128
  4406  011A1E  6EDF               	movwf	indf2,c
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4410  011A20  0100               	movlb	0	; () banked
  4411  011A22  517A               	movf	_lBufferY& (0+255),w,b
  4412  011A24  0D02               	mullw	2
  4413  011A26  0E00               	movlw	low _lCBuffer
  4414  011A28  24F3               	addwf	prodl,w,c
  4415  011A2A  6ED9               	movwf	fsr2l,c
  4416  011A2C  0E01               	movlw	high _lCBuffer
  4417  011A2E  20F4               	addwfc	prodh,w,c
  4418  011A30  6EDA               	movwf	fsr2h,c
  4419  011A32  C0FD  FFDE         	movff	_gForecolour,postinc2
  4420  011A36  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4421  011A3A                     l1047:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;Console.c: 354: }
  4425                           ;Console.c: 368: if(Console_IncrementCursor())
  4426                           
  4427                           ; BSR set to: 0
  4428  011A3A  EC94  F09E         	call	_Console_IncrementCursor	;wreg free
  4429  011A3E  0900               	iorlw	0
  4430  011A40  B4D8               	btfsc	status,2,c
  4431  011A42  0012               	return	
  4432                           
  4433                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4434  011A44  C0D0  F0CD         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4435  011A48  0E7F               	movlw	127
  4436  011A4A  0100               	movlb	0	; () banked
  4437  011A4C  17CD               	andwf	??_Console_PrintChar& (0+255),f,b
  4438  011A4E  0100               	movlb	0	; () banked
  4439  011A50  517A               	movf	_lBufferY& (0+255),w,b
  4440  011A52  0D14               	mullw	20
  4441  011A54  0E46               	movlw	low _lBuffer
  4442  011A56  0100               	movlb	0	; () banked
  4443  011A58  6FCE               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4444  011A5A  0E02               	movlw	high _lBuffer
  4445  011A5C  0100               	movlb	0	; () banked
  4446  011A5E  6FCF               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4447  011A60  50F3               	movf	prodl,w,c
  4448  011A62  0100               	movlb	0	; () banked
  4449  011A64  27CE               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4450  011A66  50F4               	movf	prodh,w,c
  4451  011A68  0100               	movlb	0	; () banked
  4452  011A6A  23CF               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4453  011A6C  0100               	movlb	0	; () banked
  4454  011A6E  517B               	movf	_lBufferX& (0+255),w,b
  4455  011A70  0D01               	mullw	1
  4456  011A72  50F3               	movf	prodl,w,c
  4457  011A74  0100               	movlb	0	; () banked
  4458  011A76  25CE               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4459  011A78  6ED9               	movwf	fsr2l,c
  4460  011A7A  50F4               	movf	prodh,w,c
  4461  011A7C  0100               	movlb	0	; () banked
  4462  011A7E  21CF               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4463  011A80  6EDA               	movwf	fsr2h,c
  4464  011A82  50DF               	movf	indf2,w,c
  4465  011A84  0B7F               	andlw	127
  4466  011A86  0100               	movlb	0	; () banked
  4467  011A88  19CD               	xorwf	??_Console_PrintChar& (0+255),w,b
  4468  011A8A  B4D8               	btfsc	status,2,c
  4469  011A8C  0012               	return	
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4473  011A8E  0E01               	movlw	1
  4474  011A90  0100               	movlb	0	; () banked
  4475  011A92  6FFF               	movwf	_change& (0+255),b
  4476                           
  4477                           ; BSR set to: 0
  4478  011A94  0100               	movlb	0	; () banked
  4479  011A96  517A               	movf	_lBufferY& (0+255),w,b
  4480  011A98  0D14               	mullw	20
  4481  011A9A  0E46               	movlw	low _lBuffer
  4482  011A9C  0100               	movlb	0	; () banked
  4483  011A9E  6FCD               	movwf	??_Console_PrintChar& (0+255),b
  4484  011AA0  0E02               	movlw	high _lBuffer
  4485  011AA2  0100               	movlb	0	; () banked
  4486  011AA4  6FCE               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4487  011AA6  50F3               	movf	prodl,w,c
  4488  011AA8  0100               	movlb	0	; () banked
  4489  011AAA  27CD               	addwf	??_Console_PrintChar& (0+255),f,b
  4490  011AAC  50F4               	movf	prodh,w,c
  4491  011AAE  0100               	movlb	0	; () banked
  4492  011AB0  23CE               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4493  011AB2  0100               	movlb	0	; () banked
  4494  011AB4  517B               	movf	_lBufferX& (0+255),w,b
  4495  011AB6  0D01               	mullw	1
  4496  011AB8  50F3               	movf	prodl,w,c
  4497  011ABA  0100               	movlb	0	; () banked
  4498  011ABC  25CD               	addwf	??_Console_PrintChar& (0+255),w,b
  4499  011ABE  6ED9               	movwf	fsr2l,c
  4500  011AC0  50F4               	movf	prodh,w,c
  4501  011AC2  0100               	movlb	0	; () banked
  4502  011AC4  21CE               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4503  011AC6  6EDA               	movwf	fsr2h,c
  4504  011AC8  0100               	movlb	0	; () banked
  4505  011ACA  51D0               	movf	Console_PrintChar@pInput& (0+255),w,b
  4506  011ACC  0980               	iorlw	128
  4507  011ACE  6EDF               	movwf	indf2,c
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;Console.c: 372: };
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;Console.c: 371: return;
  4514                           
  4515                           ; BSR set to: 0
  4516                           
  4517                           ; BSR set to: 0
  4518  011AD0  0012               	return	
  4519  011AD2                     l1036:
  4520                           
  4521                           ; BSR set to: 0
  4522  011AD2  0100               	movlb	0	; () banked
  4523  011AD4  51D0               	movf	Console_PrintChar@pInput& (0+255),w,b
  4524                           
  4525                           ; Switch size 1, requested type "space"
  4526                           ; Number of cases is 8, Range of values is 7 to 35
  4527                           ; switch strategies available:
  4528                           ; Name         Instructions Cycles
  4529                           ; simple_byte           25    13 (average)
  4530                           ;	Chosen strategy is simple_byte
  4531  011AD6  0A07               	xorlw	7	; case 7
  4532  011AD8  B4D8               	btfsc	status,2,c
  4533  011ADA  D756               	goto	l1043
  4534  011ADC  0A0F               	xorlw	15	; case 8
  4535  011ADE  B4D8               	btfsc	status,2,c
  4536  011AE0  D74A               	goto	l1040
  4537  011AE2  0A01               	xorlw	1	; case 9
  4538  011AE4  B4D8               	btfsc	status,2,c
  4539  011AE6  D74D               	goto	l1042
  4540  011AE8  0A03               	xorlw	3	; case 10
  4541  011AEA  B4D8               	btfsc	status,2,c
  4542  011AEC  D741               	goto	l1037
  4543  011AEE  0A06               	xorlw	6	; case 12
  4544  011AF0  B4D8               	btfsc	status,2,c
  4545  011AF2  D744               	goto	l1041
  4546  011AF4  0A01               	xorlw	1	; case 13
  4547  011AF6  B4D8               	btfsc	status,2,c
  4548  011AF8  D73B               	goto	l1037
  4549  011AFA  0A2D               	xorlw	45	; case 32
  4550  011AFC  B4D8               	btfsc	status,2,c
  4551  011AFE  D74A               	goto	l1045
  4552  011B00  0A03               	xorlw	3	; case 35
  4553  011B02  B4D8               	btfsc	status,2,c
  4554  011B04  D744               	goto	l1044
  4555  011B06  D746               	goto	l1045
  4556  011B08                     __end_of_Console_PrintChar:
  4557                           	opt stack 0
  4558                           tosu	equ	0xFFF
  4559                           tosh	equ	0xFFE
  4560                           tosl	equ	0xFFD
  4561                           pclath	equ	0xFFA
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           postdec1	equ	0xFE5
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _Console_Tab *****************
  4581 ;; Defined at:
  4582 ;;		line 260 in file "Library/Console.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;		None
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  c               1   15[BANK0 ] unsigned char 
  4587 ;;  i               1   14[BANK0 ] unsigned char 
  4588 ;;  t               1   13[BANK0 ] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;Total ram usage:        8 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    9
  4605 ;; This function calls:
  4606 ;;		_Console_ClearCursor
  4607 ;;		_Console_IncrementCursor
  4608 ;;		___awdiv
  4609 ;; This function is called by:
  4610 ;;		_Console_PrintChar
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text12
  4615  0129E8                     __ptext12:
  4616                           	opt stack 0
  4617  0129E8                     _Console_Tab:
  4618                           	opt stack 16
  4619                           
  4620                           ;Console.c: 262: UINT8 i = 0;
  4621                           
  4622                           ;incstack = 0
  4623  0129E8  0E00               	movlw	0
  4624  0129EA  0100               	movlb	0	; () banked
  4625  0129EC  6FCB               	movwf	Console_Tab@i& (0+255),b
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4629  0129EE  0EFA               	movlw	250
  4630  0129F0  2447               	addwf	_gCursor,w,c
  4631  0129F2  0100               	movlb	0	; () banked
  4632  0129F4  6FBD               	movwf	___awdiv@dividend& (0+255),b
  4633  0129F6  0EFF               	movlw	255
  4634  0129F8  2048               	addwfc	_gCursor+1,w,c
  4635  0129FA  0100               	movlb	0	; () banked
  4636  0129FC  6FBE               	movwf	(___awdiv@dividend+1)& (0+255),b
  4637  0129FE  0E00               	movlw	0
  4638  012A00  0100               	movlb	0	; () banked
  4639  012A02  6FC0               	movwf	(___awdiv@divisor+1)& (0+255),b
  4640  012A04  0E06               	movlw	6
  4641  012A06  6FBF               	movwf	___awdiv@divisor& (0+255),b
  4642  012A08  EC55  F095         	call	___awdiv	;wreg free
  4643  012A0C  0100               	movlb	0	; () banked
  4644  012A0E  51BD               	movf	?___awdiv& (0+255),w,b
  4645  012A10  0100               	movlb	0	; () banked
  4646  012A12  6FCC               	movwf	Console_Tab@c& (0+255),b
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;Console.c: 264: UINT8 t = c/4;
  4650  012A14  C0CC  F0BD         	movff	Console_Tab@c,___awdiv@dividend
  4651  012A18  0100               	movlb	0	; () banked
  4652  012A1A  6BBE               	clrf	(___awdiv@dividend+1)& (0+255),b
  4653  012A1C  0E00               	movlw	0
  4654  012A1E  0100               	movlb	0	; () banked
  4655  012A20  6FC0               	movwf	(___awdiv@divisor+1)& (0+255),b
  4656  012A22  0E04               	movlw	4
  4657  012A24  6FBF               	movwf	___awdiv@divisor& (0+255),b
  4658  012A26  EC55  F095         	call	___awdiv	;wreg free
  4659  012A2A  0100               	movlb	0	; () banked
  4660  012A2C  51BD               	movf	?___awdiv& (0+255),w,b
  4661  012A2E  0100               	movlb	0	; () banked
  4662  012A30  6FCA               	movwf	Console_Tab@t& (0+255),b
  4663                           
  4664                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4665  012A32  0E00               	movlw	0
  4666  012A34  0100               	movlb	0	; () banked
  4667  012A36  6FCB               	movwf	Console_Tab@i& (0+255),b
  4668  012A38  D006               	goto	l1009
  4669  012A3A                     
  4670                           ; BSR set to: 0
  4671                           ;Console.c: 266: {
  4672                           ;Console.c: 267: Console_ClearCursor();
  4673                           
  4674                           ; BSR set to: 0
  4675  012A3A  ECCB  F0A1         	call	_Console_ClearCursor	;wreg free
  4676                           
  4677                           ;Console.c: 268: Console_IncrementCursor();
  4678  012A3E  EC94  F09E         	call	_Console_IncrementCursor	;wreg free
  4679  012A42  0100               	movlb	0	; () banked
  4680  012A44  2BCB               	incf	Console_Tab@i& (0+255),f,b
  4681  012A46                     l1009:
  4682                           
  4683                           ; BSR set to: 0
  4684                           
  4685                           ; BSR set to: 0
  4686  012A46  0100               	movlb	0	; () banked
  4687  012A48  51CA               	movf	Console_Tab@t& (0+255),w,b
  4688  012A4A  0D04               	mullw	4
  4689  012A4C  1EF3               	comf	prodl,f,c
  4690  012A4E  1EF4               	comf	prodh,f,c
  4691  012A50  4AF3               	infsnz	prodl,f,c
  4692  012A52  2AF4               	incf	prodh,f,c
  4693  012A54  0100               	movlb	0	; () banked
  4694  012A56  51CC               	movf	Console_Tab@c& (0+255),w,b
  4695  012A58  0100               	movlb	0	; () banked
  4696  012A5A  6FC5               	movwf	??_Console_Tab& (0+255),b
  4697  012A5C  6BC6               	clrf	(??_Console_Tab+1)& (0+255),b
  4698  012A5E  50F3               	movf	prodl,w,c
  4699  012A60  0100               	movlb	0	; () banked
  4700  012A62  27C5               	addwf	??_Console_Tab& (0+255),f,b
  4701  012A64  50F4               	movf	prodh,w,c
  4702  012A66  0100               	movlb	0	; () banked
  4703  012A68  23C6               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4704  012A6A  0100               	movlb	0	; () banked
  4705  012A6C  1FC5               	comf	??_Console_Tab& (0+255),f,b
  4706  012A6E  1FC6               	comf	(??_Console_Tab+1)& (0+255),f,b
  4707  012A70  4BC5               	infsnz	??_Console_Tab& (0+255),f,b
  4708  012A72  2BC6               	incf	(??_Console_Tab+1)& (0+255),f,b
  4709  012A74  0E04               	movlw	4
  4710  012A76  0100               	movlb	0	; () banked
  4711  012A78  27C5               	addwf	??_Console_Tab& (0+255),f,b
  4712  012A7A  0E00               	movlw	0
  4713  012A7C  23C6               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4714  012A7E  0100               	movlb	0	; () banked
  4715  012A80  51CB               	movf	Console_Tab@i& (0+255),w,b
  4716  012A82  0100               	movlb	0	; () banked
  4717  012A84  6FC7               	movwf	(??_Console_Tab+2)& (0+255),b
  4718  012A86  6BC8               	clrf	(??_Console_Tab+3)& (0+255),b
  4719  012A88  0100               	movlb	0	; () banked
  4720  012A8A  51C5               	movf	??_Console_Tab& (0+255),w,b
  4721  012A8C  0100               	movlb	0	; () banked
  4722  012A8E  5DC7               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4723  012A90  0100               	movlb	0	; () banked
  4724  012A92  51C8               	movf	(??_Console_Tab+3)& (0+255),w,b
  4725  012A94  0A80               	xorlw	128
  4726  012A96  0100               	movlb	0	; () banked
  4727  012A98  6FC9               	movwf	(??_Console_Tab+4)& (0+255),b
  4728  012A9A  0100               	movlb	0	; () banked
  4729  012A9C  51C6               	movf	(??_Console_Tab+1)& (0+255),w,b
  4730  012A9E  0A80               	xorlw	128
  4731  012AA0  0100               	movlb	0	; () banked
  4732  012AA2  59C9               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4733  012AA4  B0D8               	btfsc	status,0,c
  4734  012AA6  0012               	return	
  4735  012AA8  D7C8               	goto	l1010
  4736  012AAA                     __end_of_Console_Tab:
  4737                           	opt stack 0
  4738                           tosu	equ	0xFFF
  4739                           tosh	equ	0xFFE
  4740                           tosl	equ	0xFFD
  4741                           pclath	equ	0xFFA
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           prodh	equ	0xFF4
  4747                           prodl	equ	0xFF3
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           postdec1	equ	0xFE5
  4751                           fsr1h	equ	0xFE2
  4752                           fsr1l	equ	0xFE1
  4753                           indf2	equ	0xFDF
  4754                           postinc2	equ	0xFDE
  4755                           postdec2	equ	0xFDD
  4756                           fsr2h	equ	0xFDA
  4757                           fsr2l	equ	0xFD9
  4758                           status	equ	0xFD8
  4759                           
  4760 ;; *************** function ___awdiv *****************
  4761 ;; Defined at:
  4762 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  dividend        2    0[BANK0 ] int 
  4765 ;;  divisor         2    2[BANK0 ] int 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  quotient        2    6[BANK0 ] int 
  4768 ;;  sign            1    5[BANK0 ] unsigned char 
  4769 ;;  counter         1    4[BANK0 ] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  2    0[BANK0 ] int 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;Total ram usage:        8 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    7
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_Console_Tab
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text13
  4794  012AAA                     __ptext13:
  4795                           	opt stack 0
  4796  012AAA                     ___awdiv:
  4797                           	opt stack 17
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;incstack = 0
  4801  012AAA  0E00               	movlw	0
  4802  012AAC  0100               	movlb	0	; () banked
  4803  012AAE  6FC2               	movwf	___awdiv@sign& (0+255),b
  4804                           
  4805                           ; BSR set to: 0
  4806  012AB0  0100               	movlb	0	; () banked
  4807  012AB2  AFC0               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4808  012AB4  D008               	goto	l2270
  4809                           
  4810                           ; BSR set to: 0
  4811  012AB6  0100               	movlb	0	; () banked
  4812  012AB8  6DBF               	negf	___awdiv@divisor& (0+255),b
  4813  012ABA  1FC0               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4814  012ABC  B0D8               	btfsc	status,0,c
  4815  012ABE  2BC0               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4816                           
  4817                           ; BSR set to: 0
  4818  012AC0  0E01               	movlw	1
  4819  012AC2  0100               	movlb	0	; () banked
  4820  012AC4  6FC2               	movwf	___awdiv@sign& (0+255),b
  4821  012AC6                     l2270:
  4822                           
  4823                           ; BSR set to: 0
  4824                           
  4825                           ; BSR set to: 0
  4826  012AC6  0100               	movlb	0	; () banked
  4827  012AC8  AFBE               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4828  012ACA  D008               	goto	l2271
  4829                           
  4830                           ; BSR set to: 0
  4831  012ACC  0100               	movlb	0	; () banked
  4832  012ACE  6DBD               	negf	___awdiv@dividend& (0+255),b
  4833  012AD0  1FBE               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4834  012AD2  B0D8               	btfsc	status,0,c
  4835  012AD4  2BBE               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4836                           
  4837                           ; BSR set to: 0
  4838  012AD6  0E01               	movlw	1
  4839  012AD8  0100               	movlb	0	; () banked
  4840  012ADA  1BC2               	xorwf	___awdiv@sign& (0+255),f,b
  4841  012ADC                     l2271:
  4842                           
  4843                           ; BSR set to: 0
  4844                           
  4845                           ; BSR set to: 0
  4846  012ADC  0E00               	movlw	0
  4847  012ADE  0100               	movlb	0	; () banked
  4848  012AE0  6FC4               	movwf	(___awdiv@quotient+1)& (0+255),b
  4849  012AE2  0E00               	movlw	0
  4850  012AE4  6FC3               	movwf	___awdiv@quotient& (0+255),b
  4851                           
  4852                           ; BSR set to: 0
  4853  012AE6  0100               	movlb	0	; () banked
  4854  012AE8  51BF               	movf	___awdiv@divisor& (0+255),w,b
  4855  012AEA  0100               	movlb	0	; () banked
  4856  012AEC  11C0               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4857  012AEE  B4D8               	btfsc	status,2,c
  4858  012AF0  D02C               	goto	l2278
  4859                           
  4860                           ; BSR set to: 0
  4861  012AF2  0E01               	movlw	1
  4862  012AF4  0100               	movlb	0	; () banked
  4863  012AF6  6FC1               	movwf	___awdiv@counter& (0+255),b
  4864  012AF8  D006               	goto	l2273
  4865  012AFA                     
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869  012AFA  0100               	movlb	0	; () banked
  4870  012AFC  90D8               	bcf	status,0,c
  4871  012AFE  37BF               	rlcf	___awdiv@divisor& (0+255),f,b
  4872  012B00  37C0               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4873  012B02  0100               	movlb	0	; () banked
  4874  012B04  2BC1               	incf	___awdiv@counter& (0+255),f,b
  4875  012B06                     l2273:
  4876                           
  4877                           ; BSR set to: 0
  4878                           
  4879                           ; BSR set to: 0
  4880  012B06  0100               	movlb	0	; () banked
  4881  012B08  AFC0               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4882  012B0A  D7F7               	goto	l2274
  4883  012B0C                     u6910:
  4884                           
  4885                           ; BSR set to: 0
  4886                           
  4887                           ; BSR set to: 0
  4888                           
  4889                           ; BSR set to: 0
  4890  012B0C  0100               	movlb	0	; () banked
  4891  012B0E  90D8               	bcf	status,0,c
  4892  012B10  37C3               	rlcf	___awdiv@quotient& (0+255),f,b
  4893  012B12  37C4               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4894                           
  4895                           ; BSR set to: 0
  4896  012B14  0100               	movlb	0	; () banked
  4897  012B16  51BF               	movf	___awdiv@divisor& (0+255),w,b
  4898  012B18  0100               	movlb	0	; () banked
  4899  012B1A  5DBD               	subwf	___awdiv@dividend& (0+255),w,b
  4900  012B1C  0100               	movlb	0	; () banked
  4901  012B1E  51C0               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4902  012B20  0100               	movlb	0	; () banked
  4903  012B22  59BE               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4904  012B24  A0D8               	btfss	status,0,c
  4905  012B26  D00A               	goto	l2277
  4906                           
  4907                           ; BSR set to: 0
  4908  012B28  0100               	movlb	0	; () banked
  4909  012B2A  51BF               	movf	___awdiv@divisor& (0+255),w,b
  4910  012B2C  0100               	movlb	0	; () banked
  4911  012B2E  5FBD               	subwf	___awdiv@dividend& (0+255),f,b
  4912  012B30  0100               	movlb	0	; () banked
  4913  012B32  51C0               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4914  012B34  0100               	movlb	0	; () banked
  4915  012B36  5BBE               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4916                           
  4917                           ; BSR set to: 0
  4918  012B38  0100               	movlb	0	; () banked
  4919  012B3A  81C3               	bsf	___awdiv@quotient& (0+255),0,b
  4920  012B3C                     l2277:
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925  012B3C  0100               	movlb	0	; () banked
  4926  012B3E  90D8               	bcf	status,0,c
  4927  012B40  33C0               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4928  012B42  33BF               	rrcf	___awdiv@divisor& (0+255),f,b
  4929                           
  4930                           ; BSR set to: 0
  4931  012B44  0100               	movlb	0	; () banked
  4932  012B46  2FC1               	decfsz	___awdiv@counter& (0+255),f,b
  4933  012B48  D7E1               	goto	u6910
  4934  012B4A                     l2278:
  4935                           
  4936                           ; BSR set to: 0
  4937                           
  4938                           ; BSR set to: 0
  4939                           
  4940                           ; BSR set to: 0
  4941  012B4A  0100               	movlb	0	; () banked
  4942  012B4C  51C2               	movf	___awdiv@sign& (0+255),w,b
  4943  012B4E  0100               	movlb	0	; () banked
  4944  012B50  B4D8               	btfsc	status,2,c
  4945  012B52  D005               	goto	l2279
  4946                           
  4947                           ; BSR set to: 0
  4948  012B54  0100               	movlb	0	; () banked
  4949  012B56  6DC3               	negf	___awdiv@quotient& (0+255),b
  4950  012B58  1FC4               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4951  012B5A  B0D8               	btfsc	status,0,c
  4952  012B5C  2BC4               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4953  012B5E                     l2279:
  4954                           
  4955                           ; BSR set to: 0
  4956                           
  4957                           ; BSR set to: 0
  4958  012B5E  C0C3  F0BD         	movff	___awdiv@quotient,?___awdiv
  4959  012B62  C0C4  F0BE         	movff	___awdiv@quotient+1,?___awdiv+1
  4960  012B66  0012               	return	
  4961  012B68                     __end_of___awdiv:
  4962                           	opt stack 0
  4963                           tosu	equ	0xFFF
  4964                           tosh	equ	0xFFE
  4965                           tosl	equ	0xFFD
  4966                           pclath	equ	0xFFA
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           postdec1	equ	0xFE5
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _Console_IncrementCursor *****************
  4986 ;; Defined at:
  4987 ;;		line 243 in file "Library/Console.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      unsigned char 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        2 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    8
  5008 ;; This function calls:
  5009 ;;		_Console_FormFeed
  5010 ;;		_Console_NewLine
  5011 ;; This function is called by:
  5012 ;;		_Console_Tab
  5013 ;;		_Console_PrintChar
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text14
  5018  013D28                     __ptext14:
  5019                           	opt stack 0
  5020  013D28                     _Console_IncrementCursor:
  5021                           	opt stack 16
  5022                           
  5023                           ;Console.c: 246: lBufferX += 1;
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  013D28  0100               	movlb	0	; () banked
  5028  013D2A  2B7B               	incf	_lBufferX& (0+255),f,b
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;Console.c: 248: gCursor.x += 6;
  5032  013D2C  0E06               	movlw	6
  5033  013D2E  2647               	addwf	_gCursor,f,c
  5034  013D30  0E00               	movlw	0
  5035  013D32  2248               	addwfc	_gCursor+1,f,c
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5039  013D34  0E06               	movlw	6
  5040  013D36  2447               	addwf	_gCursor,w,c
  5041  013D38  0100               	movlb	0	; () banked
  5042  013D3A  6FC1               	movwf	??_Console_IncrementCursor& (0+255),b
  5043  013D3C  0E00               	movlw	0
  5044  013D3E  2048               	addwfc	_gCursor+1,w,c
  5045  013D40  0100               	movlb	0	; () banked
  5046  013D42  6FC2               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5047  013D44  0100               	movlb	0	; () banked
  5048  013D46  BFC2               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5049  013D48  D009               	goto	l1004
  5050  013D4A  0100               	movlb	0	; () banked
  5051  013D4C  51C2               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5052  013D4E  E104               	bnz	u6810
  5053  013D50  0E80               	movlw	128
  5054  013D52  0100               	movlb	0	; () banked
  5055  013D54  5DC1               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5056  013D56  B0D8               	btfsc	status,0,c
  5057  013D58                     u6810:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;Console.c: 250: Console_NewLine();
  5061  013D58  EC16  F099         	call	_Console_NewLine	;wreg free
  5062  013D5C                     l1004:
  5063                           
  5064                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5065  013D5C  0E08               	movlw	8
  5066  013D5E  2449               	addwf	_gCursor+2,w,c
  5067  013D60  0100               	movlb	0	; () banked
  5068  013D62  6FC1               	movwf	??_Console_IncrementCursor& (0+255),b
  5069  013D64  0E00               	movlw	0
  5070  013D66  204A               	addwfc	_gCursor+3,w,c
  5071  013D68  0100               	movlb	0	; () banked
  5072  013D6A  6FC2               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5073  013D6C  0100               	movlb	0	; () banked
  5074  013D6E  BFC2               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5075  013D70  D00C               	goto	l1005
  5076  013D72  0100               	movlb	0	; () banked
  5077  013D74  51C2               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5078  013D76  E105               	bnz	u6820
  5079  013D78  0E80               	movlw	128
  5080  013D7A  0100               	movlb	0	; () banked
  5081  013D7C  5DC1               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5082  013D7E  A0D8               	btfss	status,0,c
  5083  013D80  D004               	goto	l1005
  5084  013D82                     u6820:
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;Console.c: 252: {
  5088                           ;Console.c: 253: Console_FormFeed();
  5089  013D82  ECDD  F09A         	call	_Console_FormFeed	;wreg free
  5090                           
  5091                           ;Console.c: 254: return 1;
  5092  013D86  0E01               	movlw	1
  5093  013D88  0012               	return	
  5094  013D8A                     l1005:
  5095                           
  5096                           ;Console.c: 255: }
  5097                           ;Console.c: 257: return 0;
  5098  013D8A  0E00               	movlw	0
  5099  013D8C  0012               	return	
  5100  013D8E                     __end_of_Console_IncrementCursor:
  5101                           	opt stack 0
  5102                           tosu	equ	0xFFF
  5103                           tosh	equ	0xFFE
  5104                           tosl	equ	0xFFD
  5105                           pclath	equ	0xFFA
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           prodh	equ	0xFF4
  5111                           prodl	equ	0xFF3
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           postdec1	equ	0xFE5
  5115                           fsr1h	equ	0xFE2
  5116                           fsr1l	equ	0xFE1
  5117                           indf2	equ	0xFDF
  5118                           postinc2	equ	0xFDE
  5119                           postdec2	equ	0xFDD
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _Console_NewLine *****************
  5125 ;; Defined at:
  5126 ;;		line 175 in file "Library/Console.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      void 
  5133 ;; Registers used:
  5134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;Total ram usage:        2 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    7
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_Console_IncrementCursor
  5151 ;;		_Console_PrintChar
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text15
  5156  01322C                     __ptext15:
  5157                           	opt stack 0
  5158  01322C                     _Console_NewLine:
  5159                           	opt stack 16
  5160                           
  5161                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5162                           
  5163                           ;incstack = 0
  5164  01322C  D03E               	goto	l983
  5165  01322E                     
  5166                           ;Console.c: 179: {
  5167                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5168  01322E  0100               	movlb	0	; () banked
  5169  013230  517A               	movf	_lBufferY& (0+255),w,b
  5170  013232  0D14               	mullw	20
  5171  013234  0E46               	movlw	low _lBuffer
  5172  013236  0100               	movlb	0	; () banked
  5173  013238  6FBD               	movwf	??_Console_NewLine& (0+255),b
  5174  01323A  0E02               	movlw	high _lBuffer
  5175  01323C  0100               	movlb	0	; () banked
  5176  01323E  6FBE               	movwf	(??_Console_NewLine+1)& (0+255),b
  5177  013240  50F3               	movf	prodl,w,c
  5178  013242  0100               	movlb	0	; () banked
  5179  013244  27BD               	addwf	??_Console_NewLine& (0+255),f,b
  5180  013246  50F4               	movf	prodh,w,c
  5181  013248  0100               	movlb	0	; () banked
  5182  01324A  23BE               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5183  01324C  0100               	movlb	0	; () banked
  5184  01324E  517B               	movf	_lBufferX& (0+255),w,b
  5185  013250  0D01               	mullw	1
  5186  013252  50F3               	movf	prodl,w,c
  5187  013254  0100               	movlb	0	; () banked
  5188  013256  25BD               	addwf	??_Console_NewLine& (0+255),w,b
  5189  013258  6ED9               	movwf	fsr2l,c
  5190  01325A  50F4               	movf	prodh,w,c
  5191  01325C  0100               	movlb	0	; () banked
  5192  01325E  21BE               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5193  013260  6EDA               	movwf	fsr2h,c
  5194  013262  50DF               	movf	indf2,w,c
  5195  013264  B4D8               	btfsc	status,2,c
  5196  013266  D01F               	goto	l985
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5200  013268  0E01               	movlw	1
  5201  01326A  0100               	movlb	0	; () banked
  5202  01326C  6FFF               	movwf	_change& (0+255),b
  5203                           
  5204                           ; BSR set to: 0
  5205  01326E  0100               	movlb	0	; () banked
  5206  013270  517A               	movf	_lBufferY& (0+255),w,b
  5207  013272  0D14               	mullw	20
  5208  013274  0E46               	movlw	low _lBuffer
  5209  013276  0100               	movlb	0	; () banked
  5210  013278  6FBD               	movwf	??_Console_NewLine& (0+255),b
  5211  01327A  0E02               	movlw	high _lBuffer
  5212  01327C  0100               	movlb	0	; () banked
  5213  01327E  6FBE               	movwf	(??_Console_NewLine+1)& (0+255),b
  5214  013280  50F3               	movf	prodl,w,c
  5215  013282  0100               	movlb	0	; () banked
  5216  013284  27BD               	addwf	??_Console_NewLine& (0+255),f,b
  5217  013286  50F4               	movf	prodh,w,c
  5218  013288  0100               	movlb	0	; () banked
  5219  01328A  23BE               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5220  01328C  0100               	movlb	0	; () banked
  5221  01328E  517B               	movf	_lBufferX& (0+255),w,b
  5222  013290  0D01               	mullw	1
  5223  013292  50F3               	movf	prodl,w,c
  5224  013294  0100               	movlb	0	; () banked
  5225  013296  25BD               	addwf	??_Console_NewLine& (0+255),w,b
  5226  013298  6ED9               	movwf	fsr2l,c
  5227  01329A  50F4               	movf	prodh,w,c
  5228  01329C  0100               	movlb	0	; () banked
  5229  01329E  21BE               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5230  0132A0  6EDA               	movwf	fsr2h,c
  5231  0132A2  0E80               	movlw	128
  5232  0132A4  6EDF               	movwf	indf2,c
  5233  0132A6                     l985:
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;Console.c: 182: lBufferX ++;
  5237                           
  5238                           ; BSR set to: 0
  5239  0132A6  0100               	movlb	0	; () banked
  5240  0132A8  2B7B               	incf	_lBufferX& (0+255),f,b
  5241  0132AA                     l983:
  5242                           
  5243                           ; BSR set to: 0
  5244  0132AA  0E13               	movlw	19
  5245  0132AC  0100               	movlb	0	; () banked
  5246  0132AE  657B               	cpfsgt	_lBufferX& (0+255),b
  5247  0132B0  D7BE               	goto	l984
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;Console.c: 183: }
  5251                           ;Console.c: 185: lBufferX = 0;
  5252                           
  5253                           ; BSR set to: 0
  5254  0132B2  0E00               	movlw	0
  5255  0132B4  0100               	movlb	0	; () banked
  5256  0132B6  6F7B               	movwf	_lBufferX& (0+255),b
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;Console.c: 186: lBufferY ++;
  5260  0132B8  0100               	movlb	0	; () banked
  5261  0132BA  2B7A               	incf	_lBufferY& (0+255),f,b
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;Console.c: 188: gCursor.y += 8;
  5265  0132BC  0E08               	movlw	8
  5266  0132BE  2649               	addwf	_gCursor+2,f,c
  5267  0132C0  0E00               	movlw	0
  5268  0132C2  224A               	addwfc	_gCursor+3,f,c
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;Console.c: 189: gCursor.x = 6;
  5272  0132C4  0E00               	movlw	0
  5273  0132C6  6E48               	movwf	_gCursor+1,c
  5274  0132C8  0E06               	movlw	6
  5275  0132CA  6E47               	movwf	_gCursor,c
  5276                           
  5277                           ; BSR set to: 0
  5278  0132CC  0012               	return		;funcret
  5279  0132CE                     __end_of_Console_NewLine:
  5280                           	opt stack 0
  5281                           tosu	equ	0xFFF
  5282                           tosh	equ	0xFFE
  5283                           tosl	equ	0xFFD
  5284                           pclath	equ	0xFFA
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           postdec1	equ	0xFE5
  5294                           fsr1h	equ	0xFE2
  5295                           fsr1l	equ	0xFE1
  5296                           indf2	equ	0xFDF
  5297                           postinc2	equ	0xFDE
  5298                           postdec2	equ	0xFDD
  5299                           fsr2h	equ	0xFDA
  5300                           fsr2l	equ	0xFD9
  5301                           status	equ	0xFD8
  5302                           
  5303 ;; *************** function _Console_FormFeed *****************
  5304 ;; Defined at:
  5305 ;;		line 192 in file "Library/Console.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  y               1    3[BANK0 ] unsigned char 
  5310 ;;  x               1    2[BANK0 ] unsigned char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;Total ram usage:        4 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    7
  5327 ;; This function calls:
  5328 ;;		Nothing
  5329 ;; This function is called by:
  5330 ;;		_Console_IncrementCursor
  5331 ;;		_Console_PrintChar
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text16
  5336  0135BA                     __ptext16:
  5337                           	opt stack 0
  5338  0135BA                     _Console_FormFeed:
  5339                           	opt stack 16
  5340                           
  5341                           ;Console.c: 195: lBufferX = 0;
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;incstack = 0
  5345  0135BA  0E00               	movlw	0
  5346  0135BC  0100               	movlb	0	; () banked
  5347  0135BE  6F7B               	movwf	_lBufferX& (0+255),b
  5348                           
  5349                           ;Console.c: 196: lBufferY = 0;
  5350  0135C0  0E00               	movlw	0
  5351  0135C2  0100               	movlb	0	; () banked
  5352  0135C4  6F7A               	movwf	_lBufferY& (0+255),b
  5353                           
  5354                           ;Console.c: 197: UINT8 x, y;
  5355                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5356  0135C6  0E00               	movlw	0
  5357  0135C8  0100               	movlb	0	; () banked
  5358  0135CA  6FC0               	movwf	Console_FormFeed@y& (0+255),b
  5359  0135CC                     l10282:
  5360                           
  5361                           ; BSR set to: 0
  5362  0135CC  0E0E               	movlw	14
  5363  0135CE  0100               	movlb	0	; () banked
  5364  0135D0  65C0               	cpfsgt	Console_FormFeed@y& (0+255),b
  5365  0135D2  D001               	goto	l990
  5366  0135D4  D02D               	goto	u6750
  5367  0135D6                     l990:
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5371                           
  5372                           ; BSR set to: 0
  5373  0135D6  0E00               	movlw	0
  5374  0135D8  0100               	movlb	0	; () banked
  5375  0135DA  6FBF               	movwf	Console_FormFeed@x& (0+255),b
  5376  0135DC                     l10288:
  5377                           
  5378                           ; BSR set to: 0
  5379  0135DC  0E13               	movlw	19
  5380  0135DE  0100               	movlb	0	; () banked
  5381  0135E0  65BF               	cpfsgt	Console_FormFeed@x& (0+255),b
  5382  0135E2  D001               	goto	l992
  5383  0135E4  D022               	goto	u6740
  5384  0135E6                     l992:
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5388                           
  5389                           ; BSR set to: 0
  5390  0135E6  0E01               	movlw	1
  5391  0135E8  0100               	movlb	0	; () banked
  5392  0135EA  6FFF               	movwf	_change& (0+255),b
  5393                           
  5394                           ; BSR set to: 0
  5395  0135EC  0100               	movlb	0	; () banked
  5396  0135EE  51C0               	movf	Console_FormFeed@y& (0+255),w,b
  5397  0135F0  0D14               	mullw	20
  5398  0135F2  0E46               	movlw	low _lBuffer
  5399  0135F4  0100               	movlb	0	; () banked
  5400  0135F6  6FBD               	movwf	??_Console_FormFeed& (0+255),b
  5401  0135F8  0E02               	movlw	high _lBuffer
  5402  0135FA  0100               	movlb	0	; () banked
  5403  0135FC  6FBE               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5404  0135FE  50F3               	movf	prodl,w,c
  5405  013600  0100               	movlb	0	; () banked
  5406  013602  27BD               	addwf	??_Console_FormFeed& (0+255),f,b
  5407  013604  50F4               	movf	prodh,w,c
  5408  013606  0100               	movlb	0	; () banked
  5409  013608  23BE               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5410  01360A  0100               	movlb	0	; () banked
  5411  01360C  51BF               	movf	Console_FormFeed@x& (0+255),w,b
  5412  01360E  0D01               	mullw	1
  5413  013610  50F3               	movf	prodl,w,c
  5414  013612  0100               	movlb	0	; () banked
  5415  013614  25BD               	addwf	??_Console_FormFeed& (0+255),w,b
  5416  013616  6ED9               	movwf	fsr2l,c
  5417  013618  50F4               	movf	prodh,w,c
  5418  01361A  0100               	movlb	0	; () banked
  5419  01361C  21BE               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5420  01361E  6EDA               	movwf	fsr2h,c
  5421  013620  0E80               	movlw	128
  5422  013622  6EDF               	movwf	indf2,c
  5423                           
  5424                           ; BSR set to: 0
  5425  013624  0100               	movlb	0	; () banked
  5426  013626  2BBF               	incf	Console_FormFeed@x& (0+255),f,b
  5427  013628  D7D9               	goto	l10288
  5428  01362A                     u6740:
  5429                           
  5430                           ; BSR set to: 0
  5431                           
  5432                           ; BSR set to: 0
  5433  01362A  0100               	movlb	0	; () banked
  5434  01362C  2BC0               	incf	Console_FormFeed@y& (0+255),f,b
  5435  01362E  D7CE               	goto	l10282
  5436  013630                     u6750:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;Console.c: 204: clearall = 1;
  5440                           
  5441                           ; BSR set to: 0
  5442  013630  0E01               	movlw	1
  5443  013632  0100               	movlb	0	; () banked
  5444  013634  6F7C               	movwf	_clearall& (0+255),b
  5445                           
  5446                           ;Console.c: 205: gCursor.x = 6;
  5447  013636  0E00               	movlw	0
  5448  013638  6E48               	movwf	_gCursor+1,c
  5449  01363A  0E06               	movlw	6
  5450  01363C  6E47               	movwf	_gCursor,c
  5451                           
  5452                           ;Console.c: 206: gCursor.y = 6;
  5453  01363E  0E00               	movlw	0
  5454  013640  6E4A               	movwf	_gCursor+3,c
  5455  013642  0E06               	movlw	6
  5456  013644  6E49               	movwf	_gCursor+2,c
  5457                           
  5458                           ; BSR set to: 0
  5459  013646  0012               	return		;funcret
  5460  013648                     __end_of_Console_FormFeed:
  5461                           	opt stack 0
  5462                           tosu	equ	0xFFF
  5463                           tosh	equ	0xFFE
  5464                           tosl	equ	0xFFD
  5465                           pclath	equ	0xFFA
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           postinc0	equ	0xFEE
  5473                           wreg	equ	0xFE8
  5474                           postdec1	equ	0xFE5
  5475                           fsr1h	equ	0xFE2
  5476                           fsr1l	equ	0xFE1
  5477                           indf2	equ	0xFDF
  5478                           postinc2	equ	0xFDE
  5479                           postdec2	equ	0xFDD
  5480                           fsr2h	equ	0xFDA
  5481                           fsr2l	equ	0xFD9
  5482                           status	equ	0xFD8
  5483                           
  5484 ;; *************** function _Console_ResetCursor *****************
  5485 ;; Defined at:
  5486 ;;		line 297 in file "Library/Console.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;		None
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		wreg, status,2
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;Total ram usage:        0 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    7
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_Console_PrintChar
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text17
  5515  01490A                     __ptext17:
  5516                           	opt stack 0
  5517  01490A                     _Console_ResetCursor:
  5518                           	opt stack 18
  5519                           
  5520                           ;Console.c: 299: gCursor.x = 6;
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;incstack = 0
  5524  01490A  0E00               	movlw	0
  5525  01490C  6E48               	movwf	_gCursor+1,c
  5526  01490E  0E06               	movlw	6
  5527  014910  6E47               	movwf	_gCursor,c
  5528                           
  5529                           ;Console.c: 300: gCursor.y = 6;
  5530  014912  0E00               	movlw	0
  5531  014914  6E4A               	movwf	_gCursor+3,c
  5532  014916  0E06               	movlw	6
  5533  014918  6E49               	movwf	_gCursor+2,c
  5534                           
  5535                           ;Console.c: 303: lBufferX = 0;
  5536  01491A  0E00               	movlw	0
  5537  01491C  0100               	movlb	0	; () banked
  5538  01491E  6F7B               	movwf	_lBufferX& (0+255),b
  5539                           
  5540                           ;Console.c: 304: lBufferY = 0;
  5541  014920  0E00               	movlw	0
  5542  014922  0100               	movlb	0	; () banked
  5543  014924  6F7A               	movwf	_lBufferY& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546  014926  0012               	return		;funcret
  5547  014928                     __end_of_Console_ResetCursor:
  5548                           	opt stack 0
  5549                           tosu	equ	0xFFF
  5550                           tosh	equ	0xFFE
  5551                           tosl	equ	0xFFD
  5552                           pclath	equ	0xFFA
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           prodh	equ	0xFF4
  5558                           prodl	equ	0xFF3
  5559                           postinc0	equ	0xFEE
  5560                           wreg	equ	0xFE8
  5561                           postdec1	equ	0xFE5
  5562                           fsr1h	equ	0xFE2
  5563                           fsr1l	equ	0xFE1
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _Console_Backspace *****************
  5572 ;; Defined at:
  5573 ;;		line 209 in file "Library/Console.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    8
  5594 ;; This function calls:
  5595 ;;		_Console_ClearCursor
  5596 ;; This function is called by:
  5597 ;;		_Console_PrintChar
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text18
  5602  013EB6                     __ptext18:
  5603                           	opt stack 0
  5604  013EB6                     _Console_Backspace:
  5605                           	opt stack 17
  5606                           
  5607                           ;Console.c: 211: if (lBufferX > 0)
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;incstack = 0
  5611  013EB6  0100               	movlb	0	; () banked
  5612  013EB8  517B               	movf	_lBufferX& (0+255),w,b
  5613  013EBA  B4D8               	btfsc	status,2,c
  5614  013EBC  D007               	goto	l997
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;Console.c: 212: {
  5618                           ;Console.c: 213: gCursor.x -= 6;
  5619  013EBE  0EFA               	movlw	250
  5620  013EC0  2647               	addwf	_gCursor,f,c
  5621  013EC2  0EFF               	movlw	255
  5622  013EC4  2248               	addwfc	_gCursor+1,f,c
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;Console.c: 216: lBufferX --;
  5626  013EC6  0100               	movlb	0	; () banked
  5627  013EC8  077B               	decf	_lBufferX& (0+255),f,b
  5628                           
  5629                           ;Console.c: 218: }
  5630  013ECA  D020               	goto	l1000
  5631  013ECC                     l997:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;Console.c: 219: else if (lBufferY > 0)
  5635                           
  5636                           ; BSR set to: 0
  5637  013ECC  0100               	movlb	0	; () banked
  5638  013ECE  517A               	movf	_lBufferY& (0+255),w,b
  5639  013ED0  B4D8               	btfsc	status,2,c
  5640  013ED2  D00E               	goto	l999
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;Console.c: 220: {
  5644                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5645  013ED4  0E00               	movlw	0
  5646  013ED6  6E48               	movwf	_gCursor+1,c
  5647  013ED8  0E72               	movlw	114
  5648  013EDA  6E47               	movwf	_gCursor,c
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;Console.c: 222: gCursor.y -= 8;
  5652  013EDC  0EF8               	movlw	248
  5653  013EDE  2649               	addwf	_gCursor+2,f,c
  5654  013EE0  0EFF               	movlw	255
  5655  013EE2  224A               	addwfc	_gCursor+3,f,c
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5659  013EE4  0E13               	movlw	19
  5660  013EE6  0100               	movlb	0	; () banked
  5661  013EE8  6F7B               	movwf	_lBufferX& (0+255),b
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;Console.c: 226: lBufferY --;
  5665  013EEA  0100               	movlb	0	; () banked
  5666  013EEC  077A               	decf	_lBufferY& (0+255),f,b
  5667                           
  5668                           ;Console.c: 228: }
  5669  013EEE  D00E               	goto	l1000
  5670  013EF0                     l999:
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;Console.c: 229: else
  5674                           ;Console.c: 230: {
  5675                           ;Console.c: 231: gCursor.x = 6;
  5676                           
  5677                           ; BSR set to: 0
  5678  013EF0  0E00               	movlw	0
  5679  013EF2  6E48               	movwf	_gCursor+1,c
  5680  013EF4  0E06               	movlw	6
  5681  013EF6  6E47               	movwf	_gCursor,c
  5682                           
  5683                           ;Console.c: 232: gCursor.y = 6;
  5684  013EF8  0E00               	movlw	0
  5685  013EFA  6E4A               	movwf	_gCursor+3,c
  5686  013EFC  0E06               	movlw	6
  5687  013EFE  6E49               	movwf	_gCursor+2,c
  5688                           
  5689                           ;Console.c: 235: lBufferX = 0;
  5690  013F00  0E00               	movlw	0
  5691  013F02  0100               	movlb	0	; () banked
  5692  013F04  6F7B               	movwf	_lBufferX& (0+255),b
  5693                           
  5694                           ;Console.c: 236: lBufferY = 0;
  5695  013F06  0E00               	movlw	0
  5696  013F08  0100               	movlb	0	; () banked
  5697  013F0A  6F7A               	movwf	_lBufferY& (0+255),b
  5698  013F0C                     l1000:
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;Console.c: 238: }
  5702                           ;Console.c: 240: Console_ClearCursor();
  5703                           
  5704                           ; BSR set to: 0
  5705                           
  5706                           ; BSR set to: 0
  5707  013F0C  ECCB  F0A1         	call	_Console_ClearCursor	;wreg free
  5708  013F10  0012               	return		;funcret
  5709  013F12                     __end_of_Console_Backspace:
  5710                           	opt stack 0
  5711                           tosu	equ	0xFFF
  5712                           tosh	equ	0xFFE
  5713                           tosl	equ	0xFFD
  5714                           pclath	equ	0xFFA
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           prodh	equ	0xFF4
  5720                           prodl	equ	0xFF3
  5721                           postinc0	equ	0xFEE
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           fsr1h	equ	0xFE2
  5725                           fsr1l	equ	0xFE1
  5726                           indf2	equ	0xFDF
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           fsr2h	equ	0xFDA
  5730                           fsr2l	equ	0xFD9
  5731                           status	equ	0xFD8
  5732                           
  5733 ;; *************** function _Console_ClearCursor *****************
  5734 ;; Defined at:
  5735 ;;		line 308 in file "Library/Console.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;		None
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;		None
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      void 
  5742 ;; Registers used:
  5743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;Total ram usage:        2 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    7
  5756 ;; This function calls:
  5757 ;;		Nothing
  5758 ;; This function is called by:
  5759 ;;		_Console_Backspace
  5760 ;;		_Console_Tab
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text19
  5765  014396                     __ptext19:
  5766                           	opt stack 0
  5767  014396                     _Console_ClearCursor:
  5768                           	opt stack 17
  5769                           
  5770                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5771                           
  5772                           ;incstack = 0
  5773  014396  0E01               	movlw	1
  5774  014398  0100               	movlb	0	; () banked
  5775  01439A  6FFF               	movwf	_change& (0+255),b
  5776                           
  5777                           ; BSR set to: 0
  5778  01439C  0100               	movlb	0	; () banked
  5779  01439E  517A               	movf	_lBufferY& (0+255),w,b
  5780  0143A0  0D14               	mullw	20
  5781  0143A2  0E46               	movlw	low _lBuffer
  5782  0143A4  0100               	movlb	0	; () banked
  5783  0143A6  6FBD               	movwf	??_Console_ClearCursor& (0+255),b
  5784  0143A8  0E02               	movlw	high _lBuffer
  5785  0143AA  0100               	movlb	0	; () banked
  5786  0143AC  6FBE               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5787  0143AE  50F3               	movf	prodl,w,c
  5788  0143B0  0100               	movlb	0	; () banked
  5789  0143B2  27BD               	addwf	??_Console_ClearCursor& (0+255),f,b
  5790  0143B4  50F4               	movf	prodh,w,c
  5791  0143B6  0100               	movlb	0	; () banked
  5792  0143B8  23BE               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5793  0143BA  0100               	movlb	0	; () banked
  5794  0143BC  517B               	movf	_lBufferX& (0+255),w,b
  5795  0143BE  0D01               	mullw	1
  5796  0143C0  50F3               	movf	prodl,w,c
  5797  0143C2  0100               	movlb	0	; () banked
  5798  0143C4  25BD               	addwf	??_Console_ClearCursor& (0+255),w,b
  5799  0143C6  6ED9               	movwf	fsr2l,c
  5800  0143C8  50F4               	movf	prodh,w,c
  5801  0143CA  0100               	movlb	0	; () banked
  5802  0143CC  21BE               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5803  0143CE  6EDA               	movwf	fsr2h,c
  5804  0143D0  0E80               	movlw	128
  5805  0143D2  6EDF               	movwf	indf2,c
  5806                           
  5807                           ; BSR set to: 0
  5808  0143D4  0012               	return		;funcret
  5809  0143D6                     __end_of_Console_ClearCursor:
  5810                           	opt stack 0
  5811                           tosu	equ	0xFFF
  5812                           tosh	equ	0xFFE
  5813                           tosl	equ	0xFFD
  5814                           pclath	equ	0xFFA
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           postinc0	equ	0xFEE
  5822                           wreg	equ	0xFE8
  5823                           postdec1	equ	0xFE5
  5824                           fsr1h	equ	0xFE2
  5825                           fsr1l	equ	0xFE1
  5826                           indf2	equ	0xFDF
  5827                           postinc2	equ	0xFDE
  5828                           postdec2	equ	0xFDD
  5829                           fsr2h	equ	0xFDA
  5830                           fsr2l	equ	0xFD9
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function ___llmod *****************
  5834 ;; Defined at:
  5835 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  dividend        4   13[BANK0 ] unsigned long 
  5838 ;;  divisor         4   17[BANK0 ] unsigned long 
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  counter         1   21[BANK0 ] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  4   13[BANK0 ] unsigned long 
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5850 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;Total ram usage:        9 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    7
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_printf
  5861 ;;		_rand_between
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text20
  5866  01336A                     __ptext20:
  5867                           	opt stack 0
  5868  01336A                     ___llmod:
  5869                           	opt stack 20
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;incstack = 0
  5873  01336A  0100               	movlb	0	; () banked
  5874  01336C  51CE               	movf	___llmod@divisor& (0+255),w,b
  5875  01336E  0100               	movlb	0	; () banked
  5876  013370  11CF               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5877  013372  0100               	movlb	0	; () banked
  5878  013374  11D0               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5879  013376  0100               	movlb	0	; () banked
  5880  013378  11D1               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5881  01337A  B4D8               	btfsc	status,2,c
  5882  01337C  D03A               	goto	l2468
  5883                           
  5884                           ; BSR set to: 0
  5885  01337E  0E01               	movlw	1
  5886  013380  0100               	movlb	0	; () banked
  5887  013382  6FD2               	movwf	___llmod@counter& (0+255),b
  5888  013384  D008               	goto	l2463
  5889  013386                     
  5890                           ; BSR set to: 0
  5891                           
  5892                           ; BSR set to: 0
  5893  013386  0100               	movlb	0	; () banked
  5894  013388  90D8               	bcf	status,0,c
  5895  01338A  37CE               	rlcf	___llmod@divisor& (0+255),f,b
  5896  01338C  37CF               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5897  01338E  37D0               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5898  013390  37D1               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5899  013392  0100               	movlb	0	; () banked
  5900  013394  2BD2               	incf	___llmod@counter& (0+255),f,b
  5901  013396                     l2463:
  5902                           
  5903                           ; BSR set to: 0
  5904                           
  5905                           ; BSR set to: 0
  5906  013396  0100               	movlb	0	; () banked
  5907  013398  AFD1               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5908  01339A  D7F5               	goto	l2464
  5909  01339C                     u7340:
  5910                           
  5911                           ; BSR set to: 0
  5912                           
  5913                           ; BSR set to: 0
  5914                           
  5915                           ; BSR set to: 0
  5916  01339C  0100               	movlb	0	; () banked
  5917  01339E  51CE               	movf	___llmod@divisor& (0+255),w,b
  5918  0133A0  0100               	movlb	0	; () banked
  5919  0133A2  5DCA               	subwf	___llmod@dividend& (0+255),w,b
  5920  0133A4  0100               	movlb	0	; () banked
  5921  0133A6  51CF               	movf	(___llmod@divisor+1)& (0+255),w,b
  5922  0133A8  0100               	movlb	0	; () banked
  5923  0133AA  59CB               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5924  0133AC  0100               	movlb	0	; () banked
  5925  0133AE  51D0               	movf	(___llmod@divisor+2)& (0+255),w,b
  5926  0133B0  0100               	movlb	0	; () banked
  5927  0133B2  59CC               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5928  0133B4  0100               	movlb	0	; () banked
  5929  0133B6  51D1               	movf	(___llmod@divisor+3)& (0+255),w,b
  5930  0133B8  0100               	movlb	0	; () banked
  5931  0133BA  59CD               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5932  0133BC  A0D8               	btfss	status,0,c
  5933  0133BE  D010               	goto	l2467
  5934                           
  5935                           ; BSR set to: 0
  5936  0133C0  0100               	movlb	0	; () banked
  5937  0133C2  51CE               	movf	___llmod@divisor& (0+255),w,b
  5938  0133C4  0100               	movlb	0	; () banked
  5939  0133C6  5FCA               	subwf	___llmod@dividend& (0+255),f,b
  5940  0133C8  0100               	movlb	0	; () banked
  5941  0133CA  51CF               	movf	(___llmod@divisor+1)& (0+255),w,b
  5942  0133CC  0100               	movlb	0	; () banked
  5943  0133CE  5BCB               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5944  0133D0  0100               	movlb	0	; () banked
  5945  0133D2  51D0               	movf	(___llmod@divisor+2)& (0+255),w,b
  5946  0133D4  0100               	movlb	0	; () banked
  5947  0133D6  5BCC               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5948  0133D8  0100               	movlb	0	; () banked
  5949  0133DA  51D1               	movf	(___llmod@divisor+3)& (0+255),w,b
  5950  0133DC  0100               	movlb	0	; () banked
  5951  0133DE  5BCD               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5952  0133E0                     l2467:
  5953                           
  5954                           ; BSR set to: 0
  5955                           
  5956                           ; BSR set to: 0
  5957  0133E0  0100               	movlb	0	; () banked
  5958  0133E2  90D8               	bcf	status,0,c
  5959  0133E4  33D1               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5960  0133E6  33D0               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5961  0133E8  33CF               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5962  0133EA  33CE               	rrcf	___llmod@divisor& (0+255),f,b
  5963                           
  5964                           ; BSR set to: 0
  5965  0133EC  0100               	movlb	0	; () banked
  5966  0133EE  2FD2               	decfsz	___llmod@counter& (0+255),f,b
  5967  0133F0  D7D5               	goto	u7340
  5968  0133F2                     l2468:
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973  0133F2  C0CA  F0CA         	movff	___llmod@dividend,?___llmod
  5974  0133F6  C0CB  F0CB         	movff	___llmod@dividend+1,?___llmod+1
  5975  0133FA  C0CC  F0CC         	movff	___llmod@dividend+2,?___llmod+2
  5976  0133FE  C0CD  F0CD         	movff	___llmod@dividend+3,?___llmod+3
  5977                           
  5978                           ; BSR set to: 0
  5979  013402  0012               	return		;funcret
  5980  013404                     __end_of___llmod:
  5981                           	opt stack 0
  5982                           tosu	equ	0xFFF
  5983                           tosh	equ	0xFFE
  5984                           tosl	equ	0xFFD
  5985                           pclath	equ	0xFFA
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           postdec1	equ	0xFE5
  5995                           fsr1h	equ	0xFE2
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           postinc2	equ	0xFDE
  5999                           postdec2	equ	0xFDD
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function _getMode *****************
  6005 ;; Defined at:
  6006 ;;		line 97 in file "main.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;		None
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  dipState        2   40[BANK0 ] int 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  2   36[BANK0 ] int 
  6013 ;; Registers used:
  6014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6020 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;Total ram usage:        6 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:   16
  6027 ;; This function calls:
  6028 ;;		_HMI_DIPSwitch
  6029 ;;		_HMI_DownSwitch
  6030 ;;		_HMI_LeftSwitch
  6031 ;;		_HMI_Poll
  6032 ;;		_HMI_RightSwitch
  6033 ;;		_HMI_UpSwitch
  6034 ;;		_MXK_DIPSwitch
  6035 ;;		_MXK_TestButton
  6036 ;; This function is called by:
  6037 ;;		_displayMode
  6038 ;;		_continuousMode
  6039 ;;		_setMode
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text21
  6044  013648                     __ptext21:
  6045                           	opt stack 0
  6046  013648                     _getMode:
  6047                           	opt stack 10
  6048                           
  6049                           ;main.c: 98: HMI_Poll();
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;incstack = 0
  6053  013648  EC4D  F09D         	call	_HMI_Poll	;wreg free
  6054                           
  6055                           ;main.c: 99: int dipState = HMIBoard.mDIP.mGetState();
  6056  01364C  EE21  F05E         	lfsr	2,_HMIBoard+55
  6057  013650  D801               	call	u7728
  6058  013652  D00A               	goto	u7729
  6059  013654                     u7728:
  6060  013654  0005               	push	
  6061  013656  6EFA               	movwf	pclath,c
  6062  013658  50DE               	movf	postinc2,w,c
  6063  01365A  6EFD               	movwf	tosl,c
  6064  01365C  50DE               	movf	postinc2,w,c
  6065  01365E  6EFE               	movwf	tosh,c
  6066  013660  50DE               	movf	postinc2,w,c
  6067  013662  6EFF               	movwf	tosu,c
  6068  013664  50FA               	movf	pclath,w,c
  6069  013666  0012               	return		;indir
  6070  013668                     u7729:
  6071  013668  0100               	movlb	0	; () banked
  6072  01366A  6FE3               	movwf	??_getMode& (0+255),b
  6073  01366C  0100               	movlb	0	; () banked
  6074  01366E  51E3               	movf	??_getMode& (0+255),w,b
  6075  013670  0100               	movlb	0	; () banked
  6076  013672  6FE5               	movwf	getMode@dipState& (0+255),b
  6077  013674  6BE6               	clrf	(getMode@dipState+1)& (0+255),b
  6078                           
  6079                           ;main.c: 100: switch (dipState) {
  6080  013676  D018               	goto	l2007
  6081  013678                     
  6082                           ; BSR set to: 0
  6083                           ;main.c: 102: return 3;
  6084                           
  6085                           ; BSR set to: 0
  6086  013678  0E00               	movlw	0
  6087  01367A  0100               	movlb	0	; () banked
  6088  01367C  6FE2               	movwf	(?_getMode+1)& (0+255),b
  6089  01367E  0E03               	movlw	3
  6090  013680  6FE1               	movwf	?_getMode& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093  013682  0012               	return	
  6094  013684                     
  6095                           ; BSR set to: 0
  6096                           ;main.c: 104: return 2;
  6097                           
  6098                           ; BSR set to: 0
  6099  013684  0E00               	movlw	0
  6100  013686  0100               	movlb	0	; () banked
  6101  013688  6FE2               	movwf	(?_getMode+1)& (0+255),b
  6102  01368A  0E02               	movlw	2
  6103  01368C  6FE1               	movwf	?_getMode& (0+255),b
  6104                           
  6105                           ; BSR set to: 0
  6106  01368E  0012               	return	
  6107  013690                     
  6108                           ; BSR set to: 0
  6109                           ;main.c: 106: return 1;
  6110                           
  6111                           ; BSR set to: 0
  6112  013690  0E00               	movlw	0
  6113  013692  0100               	movlb	0	; () banked
  6114  013694  6FE2               	movwf	(?_getMode+1)& (0+255),b
  6115  013696  0E01               	movlw	1
  6116  013698  6FE1               	movwf	?_getMode& (0+255),b
  6117                           
  6118                           ; BSR set to: 0
  6119  01369A  0012               	return	
  6120  01369C                     
  6121                           ; BSR set to: 0
  6122                           ;main.c: 108: return 0;
  6123                           
  6124                           ; BSR set to: 0
  6125  01369C  0E00               	movlw	0
  6126  01369E  0100               	movlb	0	; () banked
  6127  0136A0  6FE2               	movwf	(?_getMode+1)& (0+255),b
  6128  0136A2  0E00               	movlw	0
  6129  0136A4  6FE1               	movwf	?_getMode& (0+255),b
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;main.c: 109: }
  6133                           
  6134                           ; BSR set to: 0
  6135  0136A6  0012               	return	
  6136  0136A8                     l2007:
  6137                           
  6138                           ; BSR set to: 0
  6139                           
  6140                           ; BSR set to: 0
  6141  0136A8  C0E5  F0E3         	movff	getMode@dipState,??_getMode
  6142  0136AC  C0E6  F0E4         	movff	getMode@dipState+1,??_getMode+1
  6143                           
  6144                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6145                           ; Switch size 1, requested type "space"
  6146                           ; Number of cases is 1, Range of values is 0 to 0
  6147                           ; switch strategies available:
  6148                           ; Name         Instructions Cycles
  6149                           ; simple_byte            4     3 (average)
  6150                           ;	Chosen strategy is simple_byte
  6151  0136B0  0100               	movlb	0	; () banked
  6152  0136B2  51E4               	movf	(??_getMode+1)& (0+255),w,b
  6153  0136B4  0A00               	xorlw	0	; case 0
  6154  0136B6  A4D8               	btfss	status,2,c
  6155  0136B8  D7F1               	goto	l2012
  6156                           
  6157                           ; BSR set to: 0
  6158                           ; Switch size 1, requested type "space"
  6159                           ; Number of cases is 3, Range of values is 2 to 8
  6160                           ; switch strategies available:
  6161                           ; Name         Instructions Cycles
  6162                           ; simple_byte           10     6 (average)
  6163                           ;	Chosen strategy is simple_byte
  6164  0136BA  0100               	movlb	0	; () banked
  6165  0136BC  51E3               	movf	??_getMode& (0+255),w,b
  6166  0136BE  0A02               	xorlw	2	; case 2
  6167  0136C0  B4D8               	btfsc	status,2,c
  6168  0136C2  D7DA               	goto	l2008
  6169  0136C4  0A06               	xorlw	6	; case 4
  6170  0136C6  B4D8               	btfsc	status,2,c
  6171  0136C8  D7DD               	goto	l2010
  6172  0136CA  0A0C               	xorlw	12	; case 8
  6173  0136CC  B4D8               	btfsc	status,2,c
  6174  0136CE  D7E0               	goto	l2011
  6175  0136D0  D7E5               	goto	l2012
  6176  0136D2                     __end_of_getMode:
  6177                           	opt stack 0
  6178                           tosu	equ	0xFFF
  6179                           tosh	equ	0xFFE
  6180                           tosl	equ	0xFFD
  6181                           pclath	equ	0xFFA
  6182                           tblptru	equ	0xFF8
  6183                           tblptrh	equ	0xFF7
  6184                           tblptrl	equ	0xFF6
  6185                           tablat	equ	0xFF5
  6186                           prodh	equ	0xFF4
  6187                           prodl	equ	0xFF3
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           postdec1	equ	0xFE5
  6191                           fsr1h	equ	0xFE2
  6192                           fsr1l	equ	0xFE1
  6193                           indf2	equ	0xFDF
  6194                           postinc2	equ	0xFDE
  6195                           postdec2	equ	0xFDD
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _HMI_Poll *****************
  6201 ;; Defined at:
  6202 ;;		line 252 in file "HMI.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;Total ram usage:        0 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:   15
  6223 ;; This function calls:
  6224 ;;		_Button_Poll
  6225 ;; This function is called by:
  6226 ;;		_getMode
  6227 ;;		_continuousMode
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text22
  6232  013A9A                     __ptext22:
  6233                           	opt stack 0
  6234  013A9A                     _HMI_Poll:
  6235                           	opt stack 10
  6236                           
  6237                           ;HMI.c: 254: TRISE = 0xFF;
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;incstack = 0
  6241  013A9A  6896               	setf	3990,c	;volatile
  6242                           
  6243                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6244  013A9C  0E57               	movlw	low (_HMIBoard+48)
  6245  013A9E  0100               	movlb	0	; () banked
  6246  013AA0  6FD8               	movwf	Button_Poll@pButton& (0+255),b
  6247  013AA2  0E01               	movlw	high (_HMIBoard+48)
  6248  013AA4  0100               	movlb	0	; () banked
  6249  013AA6  6FD9               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6250  013AA8  0E01               	movlw	1
  6251  013AAA  0100               	movlb	0	; () banked
  6252  013AAC  6FDA               	movwf	Button_Poll@pIncrement& (0+255),b
  6253  013AAE  ECC6  F08F         	call	_Button_Poll	;wreg free
  6254                           
  6255                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6256  013AB2  0E39               	movlw	low (_HMIBoard+18)
  6257  013AB4  0100               	movlb	0	; () banked
  6258  013AB6  6FD8               	movwf	Button_Poll@pButton& (0+255),b
  6259  013AB8  0E01               	movlw	high (_HMIBoard+18)
  6260  013ABA  0100               	movlb	0	; () banked
  6261  013ABC  6FD9               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6262  013ABE  0E01               	movlw	1
  6263  013AC0  0100               	movlb	0	; () banked
  6264  013AC2  6FDA               	movwf	Button_Poll@pIncrement& (0+255),b
  6265  013AC4  ECC6  F08F         	call	_Button_Poll	;wreg free
  6266                           
  6267                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6268  013AC8  0E2F               	movlw	low (_HMIBoard+8)
  6269  013ACA  0100               	movlb	0	; () banked
  6270  013ACC  6FD8               	movwf	Button_Poll@pButton& (0+255),b
  6271  013ACE  0E01               	movlw	high (_HMIBoard+8)
  6272  013AD0  0100               	movlb	0	; () banked
  6273  013AD2  6FD9               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6274  013AD4  0E01               	movlw	1
  6275  013AD6  0100               	movlb	0	; () banked
  6276  013AD8  6FDA               	movwf	Button_Poll@pIncrement& (0+255),b
  6277  013ADA  ECC6  F08F         	call	_Button_Poll	;wreg free
  6278                           
  6279                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6280  013ADE  0E43               	movlw	low (_HMIBoard+28)
  6281  013AE0  0100               	movlb	0	; () banked
  6282  013AE2  6FD8               	movwf	Button_Poll@pButton& (0+255),b
  6283  013AE4  0E01               	movlw	high (_HMIBoard+28)
  6284  013AE6  0100               	movlb	0	; () banked
  6285  013AE8  6FD9               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6286  013AEA  0E01               	movlw	1
  6287  013AEC  0100               	movlb	0	; () banked
  6288  013AEE  6FDA               	movwf	Button_Poll@pIncrement& (0+255),b
  6289  013AF0  ECC6  F08F         	call	_Button_Poll	;wreg free
  6290                           
  6291                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6292  013AF4  0E4D               	movlw	low (_HMIBoard+38)
  6293  013AF6  0100               	movlb	0	; () banked
  6294  013AF8  6FD8               	movwf	Button_Poll@pButton& (0+255),b
  6295  013AFA  0E01               	movlw	high (_HMIBoard+38)
  6296  013AFC  0100               	movlb	0	; () banked
  6297  013AFE  6FD9               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6298  013B00  0E01               	movlw	1
  6299  013B02  0100               	movlb	0	; () banked
  6300  013B04  6FDA               	movwf	Button_Poll@pIncrement& (0+255),b
  6301  013B06  ECC6  F08F         	call	_Button_Poll	;wreg free
  6302  013B0A  0012               	return		;funcret
  6303  013B0C                     __end_of_HMI_Poll:
  6304                           	opt stack 0
  6305                           tosu	equ	0xFFF
  6306                           tosh	equ	0xFFE
  6307                           tosl	equ	0xFFD
  6308                           pclath	equ	0xFFA
  6309                           tblptru	equ	0xFF8
  6310                           tblptrh	equ	0xFF7
  6311                           tblptrl	equ	0xFF6
  6312                           tablat	equ	0xFF5
  6313                           prodh	equ	0xFF4
  6314                           prodl	equ	0xFF3
  6315                           postinc0	equ	0xFEE
  6316                           wreg	equ	0xFE8
  6317                           postdec1	equ	0xFE5
  6318                           fsr1h	equ	0xFE2
  6319                           fsr1l	equ	0xFE1
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _Button_Poll *****************
  6328 ;; Defined at:
  6329 ;;		line 57 in file "Library/Button.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6332 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6333 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  Pin             1   35[BANK0 ] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      unsigned char 
  6338 ;; Registers used:
  6339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6345 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;Total ram usage:        9 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:   14
  6352 ;; This function calls:
  6353 ;;		_Event_DIPSwitch
  6354 ;;		_Event_HMI_DIPSwitch
  6355 ;;		_Event_HMI_DownButton
  6356 ;;		_Event_HMI_LeftButton
  6357 ;;		_Event_HMI_RightButton
  6358 ;;		_Event_HMI_UpButton
  6359 ;;		_Event_TestButton
  6360 ;;		_HMI_DIPSwitch
  6361 ;;		_HMI_DownSwitch
  6362 ;;		_HMI_LeftSwitch
  6363 ;;		_HMI_RightSwitch
  6364 ;;		_HMI_UpSwitch
  6365 ;;		_MXK_DIPSwitch
  6366 ;;		_MXK_TestButton
  6367 ;; This function is called by:
  6368 ;;		_HMI_Poll
  6369 ;;		_MXK_Poll
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text23
  6374  011F8C                     __ptext23:
  6375                           	opt stack 0
  6376  011F8C                     _Button_Poll:
  6377                           	opt stack 10
  6378                           
  6379                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6380                           
  6381                           ;incstack = 0
  6382  011F8C  0100               	movlb	0	; () banked
  6383  011F8E  EE20 F007          	lfsr	2,7
  6384  011F92  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6385  011F94  26D9               	addwf	fsr2l,f,c
  6386  011F96  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6387  011F98  22DA               	addwfc	fsr2h,f,c
  6388  011F9A  D801               	call	u7148
  6389  011F9C  D00A               	goto	u7149
  6390  011F9E                     u7148:
  6391  011F9E  0005               	push	
  6392  011FA0  6EFA               	movwf	pclath,c
  6393  011FA2  50DE               	movf	postinc2,w,c
  6394  011FA4  6EFD               	movwf	tosl,c
  6395  011FA6  50DE               	movf	postinc2,w,c
  6396  011FA8  6EFE               	movwf	tosh,c
  6397  011FAA  50DE               	movf	postinc2,w,c
  6398  011FAC  6EFF               	movwf	tosu,c
  6399  011FAE  50FA               	movf	pclath,w,c
  6400  011FB0  0012               	return		;indir
  6401  011FB2                     u7149:
  6402  011FB2  0100               	movlb	0	; () banked
  6403  011FB4  6FE0               	movwf	Button_Poll@Pin& (0+255),b
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;Button.c: 61: if (pButton->mState == Pin)
  6407  011FB6  C0D8  FFD9         	movff	Button_Poll@pButton,fsr2l
  6408  011FBA  C0D9  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6409  011FBE  0100               	movlb	0	; () banked
  6410  011FC0  51E0               	movf	Button_Poll@Pin& (0+255),w,b
  6411  011FC2  18DE               	xorwf	postinc2,w,c
  6412  011FC4  A4D8               	btfss	status,2,c
  6413  011FC6  D021               	goto	l11
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;Button.c: 62: {
  6417                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6418  011FC8  0100               	movlb	0	; () banked
  6419  011FCA  EE20 F001          	lfsr	2,1
  6420  011FCE  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6421  011FD0  26D9               	addwf	fsr2l,f,c
  6422  011FD2  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6423  011FD4  22DA               	addwfc	fsr2h,f,c
  6424  011FD6  0100               	movlb	0	; () banked
  6425  011FD8  51DA               	movf	Button_Poll@pIncrement& (0+255),w,b
  6426  011FDA  5CDE               	subwf	postinc2,w,c
  6427  011FDC  B0D8               	btfsc	status,0,c
  6428  011FDE  D00A               	goto	l12
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;Button.c: 66: pButton->mCount = 0;
  6432  011FE0  0100               	movlb	0	; () banked
  6433  011FE2  EE20 F001          	lfsr	2,1
  6434  011FE6  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6435  011FE8  26D9               	addwf	fsr2l,f,c
  6436  011FEA  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6437  011FEC  22DA               	addwfc	fsr2h,f,c
  6438  011FEE  0E00               	movlw	0
  6439  011FF0  6EDF               	movwf	indf2,c
  6440  011FF2  0012               	return	
  6441  011FF4                     l12:
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;Button.c: 67: else
  6445                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6446                           
  6447                           ; BSR set to: 0
  6448  011FF4  0100               	movlb	0	; () banked
  6449  011FF6  EE20 F001          	lfsr	2,1
  6450  011FFA  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6451  011FFC  26D9               	addwf	fsr2l,f,c
  6452  011FFE  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6453  012000  22DA               	addwfc	fsr2h,f,c
  6454  012002  0100               	movlb	0	; () banked
  6455  012004  51DA               	movf	Button_Poll@pIncrement& (0+255),w,b
  6456  012006  5EDF               	subwf	indf2,f,c
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;Button.c: 69: }
  6460  012008  0012               	return	
  6461  01200A                     l11:
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6465                           
  6466                           ; BSR set to: 0
  6467  01200A  0100               	movlb	0	; () banked
  6468  01200C  EE20 F001          	lfsr	2,1
  6469  012010  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6470  012012  26D9               	addwf	fsr2l,f,c
  6471  012014  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6472  012016  22DA               	addwfc	fsr2h,f,c
  6473  012018  50DF               	movf	indf2,w,c
  6474  01201A  0100               	movlb	0	; () banked
  6475  01201C  6FDB               	movwf	??_Button_Poll& (0+255),b
  6476  01201E  6BDC               	clrf	(??_Button_Poll+1)& (0+255),b
  6477  012020  0100               	movlb	0	; () banked
  6478  012022  51DA               	movf	Button_Poll@pIncrement& (0+255),w,b
  6479  012024  0100               	movlb	0	; () banked
  6480  012026  27DB               	addwf	??_Button_Poll& (0+255),f,b
  6481  012028  0E00               	movlw	0
  6482  01202A  23DC               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6483  01202C  0100               	movlb	0	; () banked
  6484  01202E  EE20 F001          	lfsr	2,1
  6485  012032  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6486  012034  26D9               	addwf	fsr2l,f,c
  6487  012036  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6488  012038  22DA               	addwfc	fsr2h,f,c
  6489  01203A  50DF               	movf	indf2,w,c
  6490  01203C  0100               	movlb	0	; () banked
  6491  01203E  6FDD               	movwf	(??_Button_Poll+2)& (0+255),b
  6492  012040  6BDE               	clrf	(??_Button_Poll+3)& (0+255),b
  6493  012042  0100               	movlb	0	; () banked
  6494  012044  51DB               	movf	??_Button_Poll& (0+255),w,b
  6495  012046  0100               	movlb	0	; () banked
  6496  012048  5DDD               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6497  01204A  0100               	movlb	0	; () banked
  6498  01204C  51DE               	movf	(??_Button_Poll+3)& (0+255),w,b
  6499  01204E  0A80               	xorlw	128
  6500  012050  0100               	movlb	0	; () banked
  6501  012052  6FDF               	movwf	(??_Button_Poll+4)& (0+255),b
  6502  012054  0100               	movlb	0	; () banked
  6503  012056  51DC               	movf	(??_Button_Poll+1)& (0+255),w,b
  6504  012058  0A80               	xorlw	128
  6505  01205A  0100               	movlb	0	; () banked
  6506  01205C  59DF               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6507  01205E  B0D8               	btfsc	status,0,c
  6508  012060  0012               	return	
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;Button.c: 73: {
  6512                           ;Button.c: 75: pButton->mCount += pIncrement;
  6513  012062  0100               	movlb	0	; () banked
  6514  012064  EE20 F001          	lfsr	2,1
  6515  012068  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6516  01206A  26D9               	addwf	fsr2l,f,c
  6517  01206C  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6518  01206E  22DA               	addwfc	fsr2h,f,c
  6519  012070  0100               	movlb	0	; () banked
  6520  012072  51DA               	movf	Button_Poll@pIncrement& (0+255),w,b
  6521  012074  26DF               	addwf	indf2,f,c
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6525  012076  0100               	movlb	0	; () banked
  6526  012078  EE20 F002          	lfsr	2,2
  6527  01207C  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6528  01207E  26D9               	addwf	fsr2l,f,c
  6529  012080  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6530  012082  22DA               	addwfc	fsr2h,f,c
  6531  012084  0100               	movlb	0	; () banked
  6532  012086  EE10 F001          	lfsr	1,1
  6533  01208A  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6534  01208C  26E1               	addwf	fsr1l,f,c
  6535  01208E  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6536  012090  22E2               	addwfc	fsr1h,f,c
  6537  012092  50E7               	movf	indf1,w,c
  6538  012094  0100               	movlb	0	; () banked
  6539  012096  6FDD               	movwf	(??_Button_Poll+2)& (0+255),b
  6540  012098  6BDE               	clrf	(??_Button_Poll+3)& (0+255),b
  6541  01209A  50DE               	movf	postinc2,w,c
  6542  01209C  0100               	movlb	0	; () banked
  6543  01209E  5DDD               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6544  0120A0  50DE               	movf	postinc2,w,c
  6545  0120A2  0100               	movlb	0	; () banked
  6546  0120A4  59DE               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6547  0120A6  A0D8               	btfss	status,0,c
  6548  0120A8  0012               	return	
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;Button.c: 77: {
  6552                           ;Button.c: 79: pButton->mState = Pin;
  6553  0120AA  C0D8  FFD9         	movff	Button_Poll@pButton,fsr2l
  6554  0120AE  C0D9  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6555  0120B2  C0E0  FFDF         	movff	Button_Poll@Pin,indf2
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;Button.c: 80: pButton->mCount = 0;
  6559  0120B6  0100               	movlb	0	; () banked
  6560  0120B8  EE20 F001          	lfsr	2,1
  6561  0120BC  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6562  0120BE  26D9               	addwf	fsr2l,f,c
  6563  0120C0  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6564  0120C2  22DA               	addwfc	fsr2h,f,c
  6565  0120C4  0E00               	movlw	0
  6566  0120C6  6EDF               	movwf	indf2,c
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;Button.c: 83: pButton->mFunction(Pin);
  6570  0120C8  0100               	movlb	0	; () banked
  6571  0120CA  EE20 F004          	lfsr	2,4
  6572  0120CE  51D8               	movf	Button_Poll@pButton& (0+255),w,b
  6573  0120D0  26D9               	addwf	fsr2l,f,c
  6574  0120D2  51D9               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6575  0120D4  22DA               	addwfc	fsr2h,f,c
  6576  0120D6  D801               	call	u7198
  6577  0120D8  0012               	return	
  6578  0120DA                     u7198:
  6579  0120DA  0005               	push	
  6580  0120DC  6EFA               	movwf	pclath,c
  6581  0120DE  50DE               	movf	postinc2,w,c
  6582  0120E0  6EFD               	movwf	tosl,c
  6583  0120E2  50DE               	movf	postinc2,w,c
  6584  0120E4  6EFE               	movwf	tosh,c
  6585  0120E6  50DE               	movf	postinc2,w,c
  6586  0120E8  6EFF               	movwf	tosu,c
  6587  0120EA  50FA               	movf	pclath,w,c
  6588  0120EC  0100               	movlb	0	; () banked
  6589  0120EE  51E0               	movf	Button_Poll@Pin& (0+255),w,b
  6590  0120F0  0012               	return		;indir
  6591  0120F2                     __end_of_Button_Poll:
  6592                           	opt stack 0
  6593                           tosu	equ	0xFFF
  6594                           tosh	equ	0xFFE
  6595                           tosl	equ	0xFFD
  6596                           pclath	equ	0xFFA
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           postinc0	equ	0xFEE
  6604                           wreg	equ	0xFE8
  6605                           indf1	equ	0xFE7
  6606                           postdec1	equ	0xFE5
  6607                           fsr1h	equ	0xFE2
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function _MXK_DIPSwitch *****************
  6617 ;; Defined at:
  6618 ;;		line 24 in file "Library/MXK.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      unsigned char 
  6625 ;; Registers used:
  6626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    8
  6639 ;; This function calls:
  6640 ;;		_Port_GetQuad
  6641 ;; This function is called by:
  6642 ;;		_FunctInitButton
  6643 ;;		_Button_Poll
  6644 ;;		_getMode
  6645 ;;		_continuousMode
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text24
  6650  014A12                     __ptext24:
  6651                           	opt stack 0
  6652  014A12                     _MXK_DIPSwitch:
  6653                           	opt stack 17
  6654                           
  6655                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6656                           
  6657                           ;incstack = 0
  6658  014A12  0E87               	movlw	low _PortD
  6659  014A14  0100               	movlb	0	; () banked
  6660  014A16  6FBD               	movwf	Port_GetQuad@pInput& (0+255),b
  6661  014A18  0E00               	movlw	high _PortD
  6662  014A1A  0100               	movlb	0	; () banked
  6663  014A1C  6FBE               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6664  014A1E  0E00               	movlw	0
  6665  014A20  0100               	movlb	0	; () banked
  6666  014A22  6FBF               	movwf	Port_GetQuad@pQuad& (0+255),b
  6667  014A24  ECD5  F0A0         	call	_Port_GetQuad
  6668  014A28  0012               	return	
  6669  014A2A                     __end_of_MXK_DIPSwitch:
  6670                           	opt stack 0
  6671                           tosu	equ	0xFFF
  6672                           tosh	equ	0xFFE
  6673                           tosl	equ	0xFFD
  6674                           pclath	equ	0xFFA
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           postinc0	equ	0xFEE
  6682                           wreg	equ	0xFE8
  6683                           indf1	equ	0xFE7
  6684                           postdec1	equ	0xFE5
  6685                           fsr1h	equ	0xFE2
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _HMI_DIPSwitch *****************
  6695 ;; Defined at:
  6696 ;;		line 47 in file "HMI.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      unsigned char 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    8
  6717 ;; This function calls:
  6718 ;;		_Port_GetQuad
  6719 ;; This function is called by:
  6720 ;;		_HMI_Init
  6721 ;;		_Button_Poll
  6722 ;;		_getMode
  6723 ;;		_continuousMode
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text25
  6728  014A2A                     __ptext25:
  6729                           	opt stack 0
  6730  014A2A                     _HMI_DIPSwitch:
  6731                           	opt stack 15
  6732                           
  6733                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6734                           
  6735                           ;incstack = 0
  6736  014A2A  0E7D               	movlw	low _PortE
  6737  014A2C  0100               	movlb	0	; () banked
  6738  014A2E  6FBD               	movwf	Port_GetQuad@pInput& (0+255),b
  6739  014A30  0E00               	movlw	high _PortE
  6740  014A32  0100               	movlb	0	; () banked
  6741  014A34  6FBE               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6742  014A36  0E00               	movlw	0
  6743  014A38  0100               	movlb	0	; () banked
  6744  014A3A  6FBF               	movwf	Port_GetQuad@pQuad& (0+255),b
  6745  014A3C  ECD5  F0A0         	call	_Port_GetQuad	;wreg free
  6746  014A40  0012               	return	
  6747  014A42                     __end_of_HMI_DIPSwitch:
  6748                           	opt stack 0
  6749                           tosu	equ	0xFFF
  6750                           tosh	equ	0xFFE
  6751                           tosl	equ	0xFFD
  6752                           pclath	equ	0xFFA
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           postinc0	equ	0xFEE
  6760                           wreg	equ	0xFE8
  6761                           indf1	equ	0xFE7
  6762                           postdec1	equ	0xFE5
  6763                           fsr1h	equ	0xFE2
  6764                           fsr1l	equ	0xFE1
  6765                           indf2	equ	0xFDF
  6766                           postinc2	equ	0xFDE
  6767                           postdec2	equ	0xFDD
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _HMI_DownSwitch *****************
  6773 ;; Defined at:
  6774 ;;		line 42 in file "HMI.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;		None
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      unsigned char 
  6781 ;; Registers used:
  6782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;Total ram usage:        0 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    8
  6795 ;; This function calls:
  6796 ;;		_Port_GetPin
  6797 ;; This function is called by:
  6798 ;;		_HMI_Init
  6799 ;;		_Button_Poll
  6800 ;;		_getMode
  6801 ;;		_continuousMode
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text26
  6806  014A42                     __ptext26:
  6807                           	opt stack 0
  6808  014A42                     _HMI_DownSwitch:
  6809                           	opt stack 15
  6810                           
  6811                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  6812                           
  6813                           ;incstack = 0
  6814  014A42  0E7D               	movlw	low _PortE
  6815  014A44  0100               	movlb	0	; () banked
  6816  014A46  6FBD               	movwf	Port_GetPin@pInput& (0+255),b
  6817  014A48  0E00               	movlw	high _PortE
  6818  014A4A  0100               	movlb	0	; () banked
  6819  014A4C  6FBE               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6820  014A4E  0E06               	movlw	6
  6821  014A50  0100               	movlb	0	; () banked
  6822  014A52  6FBF               	movwf	Port_GetPin@pPin& (0+255),b
  6823  014A54  EC42  F0A1         	call	_Port_GetPin	;wreg free
  6824  014A58  0012               	return	
  6825  014A5A                     __end_of_HMI_DownSwitch:
  6826                           	opt stack 0
  6827                           tosu	equ	0xFFF
  6828                           tosh	equ	0xFFE
  6829                           tosl	equ	0xFFD
  6830                           pclath	equ	0xFFA
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           indf1	equ	0xFE7
  6840                           postdec1	equ	0xFE5
  6841                           fsr1h	equ	0xFE2
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function _HMI_UpSwitch *****************
  6851 ;; Defined at:
  6852 ;;		line 37 in file "HMI.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      unsigned char 
  6859 ;; Registers used:
  6860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;Total ram usage:        0 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    8
  6873 ;; This function calls:
  6874 ;;		_Port_GetPin
  6875 ;; This function is called by:
  6876 ;;		_HMI_Init
  6877 ;;		_Button_Poll
  6878 ;;		_getMode
  6879 ;;		_continuousMode
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text27
  6884  014A5A                     __ptext27:
  6885                           	opt stack 0
  6886  014A5A                     _HMI_UpSwitch:
  6887                           	opt stack 17
  6888                           
  6889                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  6890                           
  6891                           ;incstack = 0
  6892  014A5A  0E7D               	movlw	low _PortE
  6893  014A5C  0100               	movlb	0	; () banked
  6894  014A5E  6FBD               	movwf	Port_GetPin@pInput& (0+255),b
  6895  014A60  0E00               	movlw	high _PortE
  6896  014A62  0100               	movlb	0	; () banked
  6897  014A64  6FBE               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6898  014A66  0E07               	movlw	7
  6899  014A68  0100               	movlb	0	; () banked
  6900  014A6A  6FBF               	movwf	Port_GetPin@pPin& (0+255),b
  6901  014A6C  EC42  F0A1         	call	_Port_GetPin	;wreg free
  6902  014A70  0012               	return	
  6903  014A72                     __end_of_HMI_UpSwitch:
  6904                           	opt stack 0
  6905                           tosu	equ	0xFFF
  6906                           tosh	equ	0xFFE
  6907                           tosl	equ	0xFFD
  6908                           pclath	equ	0xFFA
  6909                           tblptru	equ	0xFF8
  6910                           tblptrh	equ	0xFF7
  6911                           tblptrl	equ	0xFF6
  6912                           tablat	equ	0xFF5
  6913                           prodh	equ	0xFF4
  6914                           prodl	equ	0xFF3
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function _HMI_RightSwitch *****************
  6929 ;; Defined at:
  6930 ;;		line 32 in file "HMI.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      unsigned char 
  6937 ;; Registers used:
  6938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:        0 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    8
  6951 ;; This function calls:
  6952 ;;		_Port_GetPin
  6953 ;; This function is called by:
  6954 ;;		_HMI_Init
  6955 ;;		_Button_Poll
  6956 ;;		_getMode
  6957 ;;		_continuousMode
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text28
  6962  014A72                     __ptext28:
  6963                           	opt stack 0
  6964  014A72                     _HMI_RightSwitch:
  6965                           	opt stack 17
  6966                           
  6967                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  6968                           
  6969                           ;incstack = 0
  6970  014A72  0E7D               	movlw	low _PortE
  6971  014A74  0100               	movlb	0	; () banked
  6972  014A76  6FBD               	movwf	Port_GetPin@pInput& (0+255),b
  6973  014A78  0E00               	movlw	high _PortE
  6974  014A7A  0100               	movlb	0	; () banked
  6975  014A7C  6FBE               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6976  014A7E  0E04               	movlw	4
  6977  014A80  0100               	movlb	0	; () banked
  6978  014A82  6FBF               	movwf	Port_GetPin@pPin& (0+255),b
  6979  014A84  EC42  F0A1         	call	_Port_GetPin	;wreg free
  6980  014A88  0012               	return	
  6981  014A8A                     __end_of_HMI_RightSwitch:
  6982                           	opt stack 0
  6983                           tosu	equ	0xFFF
  6984                           tosh	equ	0xFFE
  6985                           tosl	equ	0xFFD
  6986                           pclath	equ	0xFFA
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           postinc0	equ	0xFEE
  6994                           wreg	equ	0xFE8
  6995                           indf1	equ	0xFE7
  6996                           postdec1	equ	0xFE5
  6997                           fsr1h	equ	0xFE2
  6998                           fsr1l	equ	0xFE1
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _HMI_LeftSwitch *****************
  7007 ;; Defined at:
  7008 ;;		line 27 in file "HMI.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      unsigned char 
  7015 ;; Registers used:
  7016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;Total ram usage:        0 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    8
  7029 ;; This function calls:
  7030 ;;		_Port_GetPin
  7031 ;; This function is called by:
  7032 ;;		_HMI_Init
  7033 ;;		_Button_Poll
  7034 ;;		_getMode
  7035 ;;		_continuousMode
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text29
  7040  014A8A                     __ptext29:
  7041                           	opt stack 0
  7042  014A8A                     _HMI_LeftSwitch:
  7043                           	opt stack 15
  7044                           
  7045                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  7046                           
  7047                           ;incstack = 0
  7048  014A8A  0E7D               	movlw	low _PortE
  7049  014A8C  0100               	movlb	0	; () banked
  7050  014A8E  6FBD               	movwf	Port_GetPin@pInput& (0+255),b
  7051  014A90  0E00               	movlw	high _PortE
  7052  014A92  0100               	movlb	0	; () banked
  7053  014A94  6FBE               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7054  014A96  0E05               	movlw	5
  7055  014A98  0100               	movlb	0	; () banked
  7056  014A9A  6FBF               	movwf	Port_GetPin@pPin& (0+255),b
  7057  014A9C  EC42  F0A1         	call	_Port_GetPin	;wreg free
  7058  014AA0  0012               	return	
  7059  014AA2                     __end_of_HMI_LeftSwitch:
  7060                           	opt stack 0
  7061                           tosu	equ	0xFFF
  7062                           tosh	equ	0xFFE
  7063                           tosl	equ	0xFFD
  7064                           pclath	equ	0xFFA
  7065                           tblptru	equ	0xFF8
  7066                           tblptrh	equ	0xFF7
  7067                           tblptrl	equ	0xFF6
  7068                           tablat	equ	0xFF5
  7069                           prodh	equ	0xFF4
  7070                           prodl	equ	0xFF3
  7071                           postinc0	equ	0xFEE
  7072                           wreg	equ	0xFE8
  7073                           indf1	equ	0xFE7
  7074                           postdec1	equ	0xFE5
  7075                           fsr1h	equ	0xFE2
  7076                           fsr1l	equ	0xFE1
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           postdec2	equ	0xFDD
  7080                           fsr2h	equ	0xFDA
  7081                           fsr2l	equ	0xFD9
  7082                           status	equ	0xFD8
  7083                           
  7084 ;; *************** function _MXK_TestButton *****************
  7085 ;; Defined at:
  7086 ;;		line 14 in file "Library/MXK.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;		None
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;		None
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      unsigned char 
  7093 ;; Registers used:
  7094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;Total ram usage:        0 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    8
  7107 ;; This function calls:
  7108 ;;		_Port_GetPin
  7109 ;; This function is called by:
  7110 ;;		_FunctInitButton
  7111 ;;		_Button_Poll
  7112 ;;		_getMode
  7113 ;;		_continuousMode
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text30
  7118  014AA2                     __ptext30:
  7119                           	opt stack 0
  7120  014AA2                     _MXK_TestButton:
  7121                           	opt stack 17
  7122                           
  7123                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  7124                           
  7125                           ;incstack = 0
  7126  014AA2  0E95               	movlw	low _PortB
  7127  014AA4  0100               	movlb	0	; () banked
  7128  014AA6  6FBD               	movwf	Port_GetPin@pInput& (0+255),b
  7129  014AA8  0E01               	movlw	high _PortB
  7130  014AAA  0100               	movlb	0	; () banked
  7131  014AAC  6FBE               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7132  014AAE  0E04               	movlw	4
  7133  014AB0  0100               	movlb	0	; () banked
  7134  014AB2  6FBF               	movwf	Port_GetPin@pPin& (0+255),b
  7135  014AB4  EC42  F0A1         	call	_Port_GetPin	;wreg free
  7136  014AB8  0012               	return	
  7137  014ABA                     __end_of_MXK_TestButton:
  7138                           	opt stack 0
  7139                           tosu	equ	0xFFF
  7140                           tosh	equ	0xFFE
  7141                           tosl	equ	0xFFD
  7142                           pclath	equ	0xFFA
  7143                           tblptru	equ	0xFF8
  7144                           tblptrh	equ	0xFF7
  7145                           tblptrl	equ	0xFF6
  7146                           tablat	equ	0xFF5
  7147                           prodh	equ	0xFF4
  7148                           prodl	equ	0xFF3
  7149                           postinc0	equ	0xFEE
  7150                           wreg	equ	0xFE8
  7151                           indf1	equ	0xFE7
  7152                           postdec1	equ	0xFE5
  7153                           fsr1h	equ	0xFE2
  7154                           fsr1l	equ	0xFE1
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _Port_GetQuad *****************
  7163 ;; Defined at:
  7164 ;;		line 498 in file "Library/Port.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7167 ;;		 -> PortE(10), PortD(10), 
  7168 ;;  pQuad           1    2[BANK0 ] enum E6776
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;  Output          1    5[BANK0 ] unsigned char 
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      unsigned char 
  7173 ;; Registers used:
  7174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7180 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;Total ram usage:        6 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    7
  7187 ;; This function calls:
  7188 ;;		Nothing
  7189 ;; This function is called by:
  7190 ;;		_HMI_DIPSwitch
  7191 ;;		_MXK_DIPSwitch
  7192 ;;		_Port_ToggleQuad
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text31
  7197  0141AA                     __ptext31:
  7198                           	opt stack 0
  7199  0141AA                     _Port_GetQuad:
  7200                           	opt stack 17
  7201                           
  7202                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7203                           
  7204                           ;incstack = 0
  7205  0141AA  0100               	movlb	0	; () banked
  7206  0141AC  EE20 F006          	lfsr	2,6
  7207  0141B0  51BD               	movf	Port_GetQuad@pInput& (0+255),w,b
  7208  0141B2  26D9               	addwf	fsr2l,f,c
  7209  0141B4  51BE               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7210  0141B6  22DA               	addwfc	fsr2h,f,c
  7211  0141B8  CFDE F0C0          	movff	postinc2,??_Port_GetQuad
  7212  0141BC  CFDD F0C1          	movff	postdec2,??_Port_GetQuad+1
  7213  0141C0  C0C0  FFD9         	movff	??_Port_GetQuad,fsr2l
  7214  0141C4  C0C1  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7215  0141C8  50DF               	movf	indf2,w,c
  7216  0141CA  0100               	movlb	0	; () banked
  7217  0141CC  6FC2               	movwf	Port_GetQuad@Output& (0+255),b
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7221  0141CE  0100               	movlb	0	; () banked
  7222  0141D0  51BF               	movf	Port_GetQuad@pQuad& (0+255),w,b
  7223  0141D2  0D04               	mullw	4
  7224  0141D4  28F3               	incf	prodl,w,c
  7225  0141D6  0100               	movlb	0	; () banked
  7226  0141D8  6FC0               	movwf	??_Port_GetQuad& (0+255),b
  7227  0141DA  D003               	goto	u6800
  7228  0141DC                     u6805:
  7229  0141DC  0100               	movlb	0	; () banked
  7230  0141DE  90D8               	bcf	status,0,c
  7231  0141E0  33C2               	rrcf	Port_GetQuad@Output& (0+255),f,b
  7232  0141E2                     u6800:
  7233  0141E2  0100               	movlb	0	; () banked
  7234  0141E4  2FC0               	decfsz	??_Port_GetQuad& (0+255),f,b
  7235  0141E6  D7FA               	goto	u6805
  7236                           
  7237                           ;Port.c: 502: Output &= 0xF;
  7238  0141E8  0E0F               	movlw	15
  7239  0141EA  0100               	movlb	0	; () banked
  7240  0141EC  17C2               	andwf	Port_GetQuad@Output& (0+255),f,b
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;Port.c: 503: return Output;
  7244  0141EE  0100               	movlb	0	; () banked
  7245  0141F0  51C2               	movf	Port_GetQuad@Output& (0+255),w,b
  7246  0141F2  0012               	return	
  7247  0141F4                     __end_of_Port_GetQuad:
  7248                           	opt stack 0
  7249                           tosu	equ	0xFFF
  7250                           tosh	equ	0xFFE
  7251                           tosl	equ	0xFFD
  7252                           pclath	equ	0xFFA
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           postinc0	equ	0xFEE
  7260                           wreg	equ	0xFE8
  7261                           indf1	equ	0xFE7
  7262                           postdec1	equ	0xFE5
  7263                           fsr1h	equ	0xFE2
  7264                           fsr1l	equ	0xFE1
  7265                           indf2	equ	0xFDF
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272 ;; *************** function _Event_DIPSwitch *****************
  7273 ;; Defined at:
  7274 ;;		line 17 in file "Events.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  pState          1    wreg     unsigned char 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  pState          1   25[BANK0 ] unsigned char 
  7279 ;;  Bar             1   26[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  1    wreg      void 
  7282 ;; Registers used:
  7283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;Total ram usage:        2 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:   13
  7296 ;; This function calls:
  7297 ;;		_HMI_GetBar
  7298 ;;		_HMI_SetBar
  7299 ;;		_LED_Toggle
  7300 ;; This function is called by:
  7301 ;;		_FunctInitButton
  7302 ;;		_Button_Poll
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text32
  7307  014712                     __ptext32:
  7308                           	opt stack 0
  7309  014712                     _Event_DIPSwitch:
  7310                           	opt stack 10
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;incstack = 0
  7314                           ;Event_DIPSwitch@pState stored from wreg
  7315  014712  0100               	movlb	0	; () banked
  7316  014714  6FD6               	movwf	Event_DIPSwitch@pState& (0+255),b
  7317                           
  7318                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
  7319  014716  ECDB  F0A5         	call	_HMI_GetBar	;wreg free
  7320  01471A  0100               	movlb	0	; () banked
  7321  01471C  6FD7               	movwf	Event_DIPSwitch@Bar& (0+255),b
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;Events.c: 20: Bar &= 0x0F;
  7325  01471E  0E0F               	movlw	15
  7326  014720  0100               	movlb	0	; () banked
  7327  014722  17D7               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;Events.c: 21: pState <<= 4;
  7331  014724  0100               	movlb	0	; () banked
  7332  014726  3BD6               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7333  014728  0EF0               	movlw	240
  7334  01472A  17D6               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;Events.c: 24: HMI_SetBar(pState | Bar);
  7338  01472C  0100               	movlb	0	; () banked
  7339  01472E  51D6               	movf	Event_DIPSwitch@pState& (0+255),w,b
  7340  014730  0100               	movlb	0	; () banked
  7341  014732  11D7               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7342  014734  ECC5  F0A5         	call	_HMI_SetBar
  7343                           
  7344                           ;Events.c: 27: LED_Toggle(eLED1);
  7345  014738  0E00               	movlw	0
  7346  01473A  EC1E  F0A1         	call	_LED_Toggle
  7347  01473E  0012               	return		;funcret
  7348  014740                     __end_of_Event_DIPSwitch:
  7349                           	opt stack 0
  7350                           tosu	equ	0xFFF
  7351                           tosh	equ	0xFFE
  7352                           tosl	equ	0xFFD
  7353                           pclath	equ	0xFFA
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           indf1	equ	0xFE7
  7363                           postdec1	equ	0xFE5
  7364                           fsr1h	equ	0xFE2
  7365                           fsr1l	equ	0xFE1
  7366                           indf2	equ	0xFDF
  7367                           postinc2	equ	0xFDE
  7368                           postdec2	equ	0xFDD
  7369                           fsr2h	equ	0xFDA
  7370                           fsr2l	equ	0xFD9
  7371                           status	equ	0xFD8
  7372                           
  7373 ;; *************** function _Event_HMI_DownButton *****************
  7374 ;; Defined at:
  7375 ;;		line 123 in file "Events.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  pState          1    wreg     unsigned char 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  pState          1   25[BANK0 ] unsigned char 
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  1    wreg      void 
  7382 ;; Registers used:
  7383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;Total ram usage:        1 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; Hardware stack levels required when called:   13
  7396 ;; This function calls:
  7397 ;;		_HMI_SetDown
  7398 ;;		_HMI_SetNumber
  7399 ;;		_LED_Toggle
  7400 ;; This function is called by:
  7401 ;;		_HMI_Init
  7402 ;;		_Button_Poll
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           	psect	text33
  7407  014620                     __ptext33:
  7408                           	opt stack 0
  7409  014620                     _Event_HMI_DownButton:
  7410                           	opt stack 10
  7411                           
  7412                           ;incstack = 0
  7413                           ;Event_HMI_DownButton@pState stored from wreg
  7414  014620  0100               	movlb	0	; () banked
  7415  014622  6FD6               	movwf	Event_HMI_DownButton@pState& (0+255),b
  7416                           
  7417                           ;Events.c: 126: HMI_SetDown(pState);
  7418  014624  0100               	movlb	0	; () banked
  7419  014626  51D6               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7420  014628  EC7E  F0A5         	call	_HMI_SetDown
  7421                           
  7422                           ;Events.c: 128: if (pState == 0)
  7423  01462C  0100               	movlb	0	; () banked
  7424  01462E  51D6               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7425  014630  0100               	movlb	0	; () banked
  7426  014632  A4D8               	btfss	status,2,c
  7427  014634  D00A               	goto	l1900
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;Events.c: 129: {
  7431                           ;Events.c: 130: val -= 1;
  7432  014636  0100               	movlb	0	; () banked
  7433  014638  076D               	decf	_val& (0+255),f,b
  7434  01463A  A0D8               	btfss	status,0,c
  7435  01463C  076E               	decf	(_val+1)& (0+255),f,b
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;Events.c: 131: HMI_SetNumber(val);
  7439  01463E  C06D  F0CE         	movff	_val,HMI_SetNumber@pInput
  7440  014642  C06E  F0CF         	movff	_val+1,HMI_SetNumber@pInput+1
  7441  014646  ECB6  F0A3         	call	_HMI_SetNumber	;wreg free
  7442  01464A                     l1900:
  7443                           
  7444                           ;Events.c: 132: }
  7445                           ;Events.c: 135: LED_Toggle(eLED1);
  7446  01464A  0E00               	movlw	0
  7447  01464C  EC1E  F0A1         	call	_LED_Toggle
  7448  014650  0012               	return		;funcret
  7449  014652                     __end_of_Event_HMI_DownButton:
  7450                           	opt stack 0
  7451                           tosu	equ	0xFFF
  7452                           tosh	equ	0xFFE
  7453                           tosl	equ	0xFFD
  7454                           pclath	equ	0xFFA
  7455                           tblptru	equ	0xFF8
  7456                           tblptrh	equ	0xFF7
  7457                           tblptrl	equ	0xFF6
  7458                           tablat	equ	0xFF5
  7459                           prodh	equ	0xFF4
  7460                           prodl	equ	0xFF3
  7461                           postinc0	equ	0xFEE
  7462                           wreg	equ	0xFE8
  7463                           indf1	equ	0xFE7
  7464                           postdec1	equ	0xFE5
  7465                           fsr1h	equ	0xFE2
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _Event_HMI_UpButton *****************
  7475 ;; Defined at:
  7476 ;;		line 108 in file "Events.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  pState          1    wreg     unsigned char 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  pState          1   25[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;Total ram usage:        1 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:   13
  7497 ;; This function calls:
  7498 ;;		_HMI_SetNumber
  7499 ;;		_HMI_SetUp
  7500 ;;		_LED_Toggle
  7501 ;; This function is called by:
  7502 ;;		_HMI_Init
  7503 ;;		_Button_Poll
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text34
  7508  014652                     __ptext34:
  7509                           	opt stack 0
  7510  014652                     _Event_HMI_UpButton:
  7511                           	opt stack 10
  7512                           
  7513                           ;incstack = 0
  7514                           ;Event_HMI_UpButton@pState stored from wreg
  7515  014652  0100               	movlb	0	; () banked
  7516  014654  6FD6               	movwf	Event_HMI_UpButton@pState& (0+255),b
  7517                           
  7518                           ;Events.c: 111: HMI_SetUp(pState);
  7519  014656  0100               	movlb	0	; () banked
  7520  014658  51D6               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7521  01465A  EC5D  F0A5         	call	_HMI_SetUp
  7522                           
  7523                           ;Events.c: 113: if (pState == 0)
  7524  01465E  0100               	movlb	0	; () banked
  7525  014660  51D6               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7526  014662  0100               	movlb	0	; () banked
  7527  014664  A4D8               	btfss	status,2,c
  7528  014666  D009               	goto	l1896
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;Events.c: 114: {
  7532                           ;Events.c: 115: val += 1;
  7533  014668  0100               	movlb	0	; () banked
  7534  01466A  4B6D               	infsnz	_val& (0+255),f,b
  7535  01466C  2B6E               	incf	(_val+1)& (0+255),f,b
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;Events.c: 116: HMI_SetNumber(val);
  7539  01466E  C06D  F0CE         	movff	_val,HMI_SetNumber@pInput
  7540  014672  C06E  F0CF         	movff	_val+1,HMI_SetNumber@pInput+1
  7541  014676  ECB6  F0A3         	call	_HMI_SetNumber	;wreg free
  7542  01467A                     l1896:
  7543                           
  7544                           ;Events.c: 117: }
  7545                           ;Events.c: 120: LED_Toggle(eLED1);
  7546  01467A  0E00               	movlw	0
  7547  01467C  EC1E  F0A1         	call	_LED_Toggle
  7548  014680  0012               	return		;funcret
  7549  014682                     __end_of_Event_HMI_UpButton:
  7550                           	opt stack 0
  7551                           tosu	equ	0xFFF
  7552                           tosh	equ	0xFFE
  7553                           tosl	equ	0xFFD
  7554                           pclath	equ	0xFFA
  7555                           tblptru	equ	0xFF8
  7556                           tblptrh	equ	0xFF7
  7557                           tblptrl	equ	0xFF6
  7558                           tablat	equ	0xFF5
  7559                           prodh	equ	0xFF4
  7560                           prodl	equ	0xFF3
  7561                           postinc0	equ	0xFEE
  7562                           wreg	equ	0xFE8
  7563                           indf1	equ	0xFE7
  7564                           postdec1	equ	0xFE5
  7565                           fsr1h	equ	0xFE2
  7566                           fsr1l	equ	0xFE1
  7567                           indf2	equ	0xFDF
  7568                           postinc2	equ	0xFDE
  7569                           postdec2	equ	0xFDD
  7570                           fsr2h	equ	0xFDA
  7571                           fsr2l	equ	0xFD9
  7572                           status	equ	0xFD8
  7573                           
  7574 ;; *************** function _Event_HMI_RightButton *****************
  7575 ;; Defined at:
  7576 ;;		line 91 in file "Events.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  pState          1    wreg     unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  pState          1   25[BANK0 ] unsigned char 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      void 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;Total ram usage:        1 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:   13
  7597 ;; This function calls:
  7598 ;;		_HMI_SetBar
  7599 ;;		_HMI_SetRight
  7600 ;;		_LED_Toggle
  7601 ;; This function is called by:
  7602 ;;		_HMI_Init
  7603 ;;		_Button_Poll
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text35
  7608  014310                     __ptext35:
  7609                           	opt stack 0
  7610  014310                     _Event_HMI_RightButton:
  7611                           	opt stack 10
  7612                           
  7613                           ;incstack = 0
  7614                           ;Event_HMI_RightButton@pState stored from wreg
  7615  014310  0100               	movlb	0	; () banked
  7616  014312  6FD6               	movwf	Event_HMI_RightButton@pState& (0+255),b
  7617                           
  7618                           ;Events.c: 94: HMI_SetRight(pState);
  7619  014314  0100               	movlb	0	; () banked
  7620  014316  51D6               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7621  014318  EC68  F0A5         	call	_HMI_SetRight
  7622                           
  7623                           ;Events.c: 96: if (pState == 0)
  7624  01431C  0100               	movlb	0	; () banked
  7625  01431E  51D6               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7626  014320  0100               	movlb	0	; () banked
  7627  014322  A4D8               	btfss	status,2,c
  7628  014324  D013               	goto	l1891
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;Events.c: 97: {
  7632                           ;Events.c: 98: if (pShiftVal == 0)
  7633  014326  0100               	movlb	0	; () banked
  7634  014328  516B               	movf	_pShiftVal& (0+255),w,b
  7635  01432A  0100               	movlb	0	; () banked
  7636  01432C  116C               	iorwf	(_pShiftVal+1)& (0+255),w,b
  7637  01432E  A4D8               	btfss	status,2,c
  7638  014330  D005               	goto	l1892
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;Events.c: 99: pShiftVal = 0xFF00;
  7642  014332  0EFF               	movlw	255
  7643  014334  0100               	movlb	0	; () banked
  7644  014336  6F6C               	movwf	(_pShiftVal+1)& (0+255),b
  7645  014338  0E00               	movlw	0
  7646  01433A  6F6B               	movwf	_pShiftVal& (0+255),b
  7647  01433C                     l1892:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;Events.c: 100: pShiftVal >>= 1;
  7651                           
  7652                           ; BSR set to: 0
  7653  01433C  0100               	movlb	0	; () banked
  7654  01433E  90D8               	bcf	status,0,c
  7655  014340  336C               	rrcf	(_pShiftVal+1)& (0+255),f,b
  7656  014342  336B               	rrcf	_pShiftVal& (0+255),f,b
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
  7660  014344  0100               	movlb	0	; () banked
  7661  014346  516B               	movf	_pShiftVal& (0+255),w,b
  7662  014348  ECC5  F0A5         	call	_HMI_SetBar
  7663  01434C                     l1891:
  7664                           
  7665                           ;Events.c: 103: }
  7666                           ;Events.c: 105: LED_Toggle(eLED1);
  7667  01434C  0E00               	movlw	0
  7668  01434E  EC1E  F0A1         	call	_LED_Toggle
  7669  014352  0012               	return		;funcret
  7670  014354                     __end_of_Event_HMI_RightButton:
  7671                           	opt stack 0
  7672                           tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           postinc0	equ	0xFEE
  7683                           wreg	equ	0xFE8
  7684                           indf1	equ	0xFE7
  7685                           postdec1	equ	0xFE5
  7686                           fsr1h	equ	0xFE2
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8
  7694                           
  7695 ;; *************** function _Event_HMI_LeftButton *****************
  7696 ;; Defined at:
  7697 ;;		line 71 in file "Events.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;  pState          1    wreg     unsigned char 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  pState          1   25[BANK0 ] unsigned char 
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;Total ram usage:        1 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:   13
  7718 ;; This function calls:
  7719 ;;		_HMI_SetBar
  7720 ;;		_HMI_SetLeft
  7721 ;;		_LED_Toggle
  7722 ;; This function is called by:
  7723 ;;		_HMI_Init
  7724 ;;		_Button_Poll
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text36
  7729  013F6C                     __ptext36:
  7730                           	opt stack 0
  7731  013F6C                     _Event_HMI_LeftButton:
  7732                           	opt stack 10
  7733                           
  7734                           ;incstack = 0
  7735                           ;Event_HMI_LeftButton@pState stored from wreg
  7736  013F6C  0100               	movlb	0	; () banked
  7737  013F6E  6FD6               	movwf	Event_HMI_LeftButton@pState& (0+255),b
  7738                           
  7739                           ;Events.c: 74: HMI_SetLeft(pState);
  7740  013F70  0100               	movlb	0	; () banked
  7741  013F72  51D6               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7742  013F74  EC73  F0A5         	call	_HMI_SetLeft
  7743                           
  7744                           ;Events.c: 76: if (pState == 0)
  7745  013F78  0100               	movlb	0	; () banked
  7746  013F7A  51D6               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7747  013F7C  0100               	movlb	0	; () banked
  7748  013F7E  A4D8               	btfss	status,2,c
  7749  013F80  D01D               	goto	l1884
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;Events.c: 77: {
  7753                           ;Events.c: 78: pShiftVal <<= 1;
  7754  013F82  0100               	movlb	0	; () banked
  7755  013F84  90D8               	bcf	status,0,c
  7756  013F86  376B               	rlcf	_pShiftVal& (0+255),f,b
  7757  013F88  376C               	rlcf	(_pShiftVal+1)& (0+255),f,b
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;Events.c: 79: if (pShiftVal == 0xFF00)
  7761  013F8A  0100               	movlb	0	; () banked
  7762  013F8C  296C               	incf	(_pShiftVal+1)& (0+255),w,b
  7763  013F8E  0100               	movlb	0	; () banked
  7764  013F90  116B               	iorwf	_pShiftVal& (0+255),w,b
  7765  013F92  A4D8               	btfss	status,2,c
  7766  013F94  D006               	goto	l1885
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;Events.c: 80: pShiftVal = 0;
  7770  013F96  0E00               	movlw	0
  7771  013F98  0100               	movlb	0	; () banked
  7772  013F9A  6F6C               	movwf	(_pShiftVal+1)& (0+255),b
  7773  013F9C  0E00               	movlw	0
  7774  013F9E  6F6B               	movwf	_pShiftVal& (0+255),b
  7775  013FA0  D009               	goto	l1887
  7776  013FA2                     l1885:
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;Events.c: 81: else if (pShiftVal < 0xFF)
  7780                           
  7781                           ; BSR set to: 0
  7782  013FA2  0100               	movlb	0	; () banked
  7783  013FA4  516C               	movf	(_pShiftVal+1)& (0+255),w,b
  7784  013FA6  E106               	bnz	l10618
  7785  013FA8  0100               	movlb	0	; () banked
  7786  013FAA  296B               	incf	_pShiftVal& (0+255),w,b
  7787  013FAC  B0D8               	btfsc	status,0,c
  7788  013FAE  D002               	goto	l1887
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;Events.c: 82: pShiftVal |= 1;
  7792  013FB0  0100               	movlb	0	; () banked
  7793  013FB2  816B               	bsf	_pShiftVal& (0+255),0,b
  7794  013FB4                     l1887:
  7795  013FB4                     l10618:
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
  7799  013FB4  0100               	movlb	0	; () banked
  7800  013FB6  516B               	movf	_pShiftVal& (0+255),w,b
  7801  013FB8  ECC5  F0A5         	call	_HMI_SetBar
  7802  013FBC                     l1884:
  7803                           
  7804                           ;Events.c: 85: }
  7805                           ;Events.c: 88: LED_Toggle(eLED1);
  7806  013FBC  0E00               	movlw	0
  7807  013FBE  EC1E  F0A1         	call	_LED_Toggle
  7808  013FC2  0012               	return		;funcret
  7809  013FC4                     __end_of_Event_HMI_LeftButton:
  7810                           	opt stack 0
  7811                           tosu	equ	0xFFF
  7812                           tosh	equ	0xFFE
  7813                           tosl	equ	0xFFD
  7814                           pclath	equ	0xFFA
  7815                           tblptru	equ	0xFF8
  7816                           tblptrh	equ	0xFF7
  7817                           tblptrl	equ	0xFF6
  7818                           tablat	equ	0xFF5
  7819                           prodh	equ	0xFF4
  7820                           prodl	equ	0xFF3
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           indf1	equ	0xFE7
  7824                           postdec1	equ	0xFE5
  7825                           fsr1h	equ	0xFE2
  7826                           fsr1l	equ	0xFE1
  7827                           indf2	equ	0xFDF
  7828                           postinc2	equ	0xFDE
  7829                           postdec2	equ	0xFDD
  7830                           fsr2h	equ	0xFDA
  7831                           fsr2l	equ	0xFD9
  7832                           status	equ	0xFD8
  7833                           
  7834 ;; *************** function _Event_HMI_DIPSwitch *****************
  7835 ;; Defined at:
  7836 ;;		line 30 in file "Events.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  pState          1    wreg     unsigned char 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  pState          1   25[BANK0 ] unsigned char 
  7841 ;;  Bar             1   26[BANK0 ] unsigned char 
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  1    wreg      void 
  7844 ;; Registers used:
  7845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;Total ram usage:        2 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; Hardware stack levels required when called:   13
  7858 ;; This function calls:
  7859 ;;		_HMI_GetBar
  7860 ;;		_HMI_SetBar
  7861 ;;		_LED_Toggle
  7862 ;; This function is called by:
  7863 ;;		_HMI_Init
  7864 ;;		_Button_Poll
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text37
  7869  014740                     __ptext37:
  7870                           	opt stack 0
  7871  014740                     _Event_HMI_DIPSwitch:
  7872                           	opt stack 10
  7873                           
  7874                           ;incstack = 0
  7875                           ;Event_HMI_DIPSwitch@pState stored from wreg
  7876  014740  0100               	movlb	0	; () banked
  7877  014742  6FD6               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
  7878                           
  7879                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
  7880  014744  ECDB  F0A5         	call	_HMI_GetBar	;wreg free
  7881  014748  0100               	movlb	0	; () banked
  7882  01474A  6FD7               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;Events.c: 33: HMI_SetBar(pState | Bar);
  7886  01474C  0100               	movlb	0	; () banked
  7887  01474E  51D6               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
  7888  014750  0100               	movlb	0	; () banked
  7889  014752  11D7               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
  7890  014754  ECC5  F0A5         	call	_HMI_SetBar
  7891                           
  7892                           ;Events.c: 35: Bar &= 0xF0;
  7893  014758  0EF0               	movlw	240
  7894  01475A  0100               	movlb	0	; () banked
  7895  01475C  17D7               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;Events.c: 36: pState &= 0x0F;
  7899  01475E  0E0F               	movlw	15
  7900  014760  0100               	movlb	0	; () banked
  7901  014762  17D6               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;Events.c: 42: LED_Toggle(eLED1);
  7905  014764  0E00               	movlw	0
  7906  014766  EC1E  F0A1         	call	_LED_Toggle
  7907  01476A  0012               	return		;funcret
  7908  01476C                     __end_of_Event_HMI_DIPSwitch:
  7909                           	opt stack 0
  7910                           tosu	equ	0xFFF
  7911                           tosh	equ	0xFFE
  7912                           tosl	equ	0xFFD
  7913                           pclath	equ	0xFFA
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           postinc0	equ	0xFEE
  7921                           wreg	equ	0xFE8
  7922                           indf1	equ	0xFE7
  7923                           postdec1	equ	0xFE5
  7924                           fsr1h	equ	0xFE2
  7925                           fsr1l	equ	0xFE1
  7926                           indf2	equ	0xFDF
  7927                           postinc2	equ	0xFDE
  7928                           postdec2	equ	0xFDD
  7929                           fsr2h	equ	0xFDA
  7930                           fsr2l	equ	0xFD9
  7931                           status	equ	0xFD8
  7932                           
  7933 ;; *************** function _Event_TestButton *****************
  7934 ;; Defined at:
  7935 ;;		line 47 in file "Events.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;  pState          1    wreg     unsigned char 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;  pState          1   25[BANK0 ] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      void 
  7942 ;; Registers used:
  7943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;Total ram usage:        1 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:   13
  7956 ;; This function calls:
  7957 ;;		_HMI_SetButton
  7958 ;;		_HMI_SetNumber
  7959 ;;		_LED_Toggle
  7960 ;; This function is called by:
  7961 ;;		_FunctInitButton
  7962 ;;		_Button_Poll
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text38
  7967  0144D0                     __ptext38:
  7968                           	opt stack 0
  7969  0144D0                     _Event_TestButton:
  7970                           	opt stack 10
  7971                           
  7972                           ;incstack = 0
  7973                           ;Event_TestButton@pState stored from wreg
  7974  0144D0  0100               	movlb	0	; () banked
  7975  0144D2  6FD6               	movwf	Event_TestButton@pState& (0+255),b
  7976                           
  7977                           ;Events.c: 51: static UINT8 j = 0;
  7978                           ;Events.c: 55: if (pState == 0)
  7979  0144D4  0100               	movlb	0	; () banked
  7980  0144D6  51D6               	movf	Event_TestButton@pState& (0+255),w,b
  7981  0144D8  0100               	movlb	0	; () banked
  7982  0144DA  A4D8               	btfss	status,2,c
  7983  0144DC  D013               	goto	l1878
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;Events.c: 56: {
  7987                           ;Events.c: 57: j++;
  7988  0144DE  0100               	movlb	0	; () banked
  7989  0144E0  2B75               	incf	Event_TestButton@j& (0+255),f,b
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;Events.c: 58: val += j;
  7993  0144E2  0100               	movlb	0	; () banked
  7994  0144E4  5175               	movf	Event_TestButton@j& (0+255),w,b
  7995  0144E6  0100               	movlb	0	; () banked
  7996  0144E8  276D               	addwf	_val& (0+255),f,b
  7997  0144EA  0E00               	movlw	0
  7998  0144EC  236E               	addwfc	(_val+1)& (0+255),f,b
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;Events.c: 59: HMI_SetNumber( val );
  8002  0144EE  C06D  F0CE         	movff	_val,HMI_SetNumber@pInput
  8003  0144F2  C06E  F0CF         	movff	_val+1,HMI_SetNumber@pInput+1
  8004  0144F6  ECB6  F0A3         	call	_HMI_SetNumber	;wreg free
  8005                           
  8006                           ;Events.c: 62: HMI_SetButton( j & 3 );
  8007  0144FA  0100               	movlb	0	; () banked
  8008  0144FC  5175               	movf	Event_TestButton@j& (0+255),w,b
  8009  0144FE  0B03               	andlw	3
  8010  014500  EC4E  F09A         	call	_HMI_SetButton
  8011  014504                     l1878:
  8012                           
  8013                           ;Events.c: 63: }
  8014                           ;Events.c: 67: LED_Toggle(eLED1);
  8015  014504  0E00               	movlw	0
  8016  014506  EC1E  F0A1         	call	_LED_Toggle
  8017  01450A  0012               	return		;funcret
  8018  01450C                     __end_of_Event_TestButton:
  8019                           	opt stack 0
  8020                           tosu	equ	0xFFF
  8021                           tosh	equ	0xFFE
  8022                           tosl	equ	0xFFD
  8023                           pclath	equ	0xFFA
  8024                           tblptru	equ	0xFF8
  8025                           tblptrh	equ	0xFF7
  8026                           tblptrl	equ	0xFF6
  8027                           tablat	equ	0xFF5
  8028                           prodh	equ	0xFF4
  8029                           prodl	equ	0xFF3
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           indf1	equ	0xFE7
  8033                           postdec1	equ	0xFE5
  8034                           fsr1h	equ	0xFE2
  8035                           fsr1l	equ	0xFE1
  8036                           indf2	equ	0xFDF
  8037                           postinc2	equ	0xFDE
  8038                           postdec2	equ	0xFDD
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _HMI_SetButton *****************
  8044 ;; Defined at:
  8045 ;;		line 186 in file "HMI.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;  pValue          1    wreg     unsigned char 
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  pValue          1    6[BANK0 ] unsigned char 
  8050 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  8051 ;;  v               1    7[BANK0 ] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;Total ram usage:        8 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    7
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_Event_TestButton
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text39
  8076  01349C                     __ptext39:
  8077                           	opt stack 0
  8078  01349C                     _HMI_SetButton:
  8079                           	opt stack 15
  8080                           
  8081                           ;incstack = 0
  8082                           ;HMI_SetButton@pValue stored from wreg
  8083  01349C  0100               	movlb	0	; () banked
  8084  01349E  6FC3               	movwf	HMI_SetButton@pValue& (0+255),b
  8085                           
  8086                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  8087  0134A0  0E74               	movlw	low HMI_SetButton@F7211
  8088  0134A2  6EF6               	movwf	tblptrl,c
  8089  0134A4                     	if	1	;There is more than 1 active tblptr byte
  8090  0134A4  0EFD               	movlw	high HMI_SetButton@F7211
  8091  0134A6  6EF7               	movwf	tblptrh,c
  8092  0134A8                     	endif
  8093  0134A8                     	if	1	;There are 3 active tblptr bytes
  8094  0134A8  0E00               	movlw	low (HMI_SetButton@F7211 shr (0+16))
  8095  0134AA  6EF8               	movwf	tblptru,c
  8096  0134AC                     	endif
  8097  0134AC  0009               	tblrd		*+
  8098  0134AE  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex
  8099  0134B2  0009               	tblrd		*+
  8100  0134B4  CFF5 F0C0          	movff	tablat,HMI_SetButton@reindex+1
  8101  0134B8  0009               	tblrd		*+
  8102  0134BA  CFF5 F0C1          	movff	tablat,HMI_SetButton@reindex+2
  8103  0134BE  000A               	tblrd		*-
  8104  0134C0  CFF5 F0C2          	movff	tablat,HMI_SetButton@reindex+3
  8105                           
  8106                           ;HMI.c: 189: UINT8 v = 0b00010001;
  8107  0134C4  0E11               	movlw	17
  8108  0134C6  0100               	movlb	0	; () banked
  8109  0134C8  6FC4               	movwf	HMI_SetButton@v& (0+255),b
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;HMI.c: 190: pValue &= 3;
  8113  0134CA  0E03               	movlw	3
  8114  0134CC  0100               	movlb	0	; () banked
  8115  0134CE  17C3               	andwf	HMI_SetButton@pValue& (0+255),f,b
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;HMI.c: 191: v = v << reindex[pValue];
  8119  0134D0  0100               	movlb	0	; () banked
  8120  0134D2  51C3               	movf	HMI_SetButton@pValue& (0+255),w,b
  8121  0134D4  0D01               	mullw	1
  8122  0134D6  0EBF               	movlw	low HMI_SetButton@reindex
  8123  0134D8  24F3               	addwf	prodl,w,c
  8124  0134DA  6ED9               	movwf	fsr2l,c
  8125  0134DC  0E00               	movlw	high HMI_SetButton@reindex
  8126  0134DE  20F4               	addwfc	prodh,w,c
  8127  0134E0  6EDA               	movwf	fsr2h,c
  8128  0134E2  50DF               	movf	indf2,w,c
  8129  0134E4  0100               	movlb	0	; () banked
  8130  0134E6  6FBD               	movwf	??_HMI_SetButton& (0+255),b
  8131  0134E8  C0C4  F0BE         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  8132  0134EC  0100               	movlb	0	; () banked
  8133  0134EE  2BBD               	incf	??_HMI_SetButton& (0+255),f,b
  8134  0134F0  D003               	goto	u6874
  8135  0134F2                     u6875:
  8136  0134F2  0100               	movlb	0	; () banked
  8137  0134F4  90D8               	bcf	status,0,c
  8138  0134F6  37BE               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  8139  0134F8                     u6874:
  8140  0134F8  0100               	movlb	0	; () banked
  8141  0134FA  2FBD               	decfsz	??_HMI_SetButton& (0+255),f,b
  8142  0134FC  D7FA               	goto	u6875
  8143  0134FE  0100               	movlb	0	; () banked
  8144  013500  51BE               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  8145  013502  0100               	movlb	0	; () banked
  8146  013504  6FC4               	movwf	HMI_SetButton@v& (0+255),b
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;HMI.c: 192: v = v >> 4;
  8150  013506  0100               	movlb	0	; () banked
  8151  013508  39C4               	swapf	HMI_SetButton@v& (0+255),w,b
  8152  01350A  0B0F               	andlw	15
  8153  01350C  0100               	movlb	0	; () banked
  8154  01350E  6FC4               	movwf	HMI_SetButton@v& (0+255),b
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;HMI.c: 193: v = v & 0x0F;
  8158  013510  0100               	movlb	0	; () banked
  8159  013512  51C4               	movf	HMI_SetButton@v& (0+255),w,b
  8160  013514  0B0F               	andlw	15
  8161  013516  0100               	movlb	0	; () banked
  8162  013518  6FC4               	movwf	HMI_SetButton@v& (0+255),b
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;HMI.c: 194: HMIBoard.pButton = v;
  8166  01351A  0101               	movlb	1	; () banked
  8167  01351C  512D               	movf	(_HMIBoard+6)& (0+255),w,b
  8168  01351E  0100               	movlb	0	; () banked
  8169  013520  19C4               	xorwf	HMI_SetButton@v& (0+255),w,b
  8170  013522  0BF0               	andlw	-16
  8171  013524  19C4               	xorwf	HMI_SetButton@v& (0+255),w,b
  8172  013526  0101               	movlb	1	; () banked
  8173  013528  6F2D               	movwf	(_HMIBoard+6)& (0+255),b
  8174                           
  8175                           ; BSR set to: 1
  8176  01352A  0012               	return		;funcret
  8177  01352C                     __end_of_HMI_SetButton:
  8178                           	opt stack 0
  8179                           tosu	equ	0xFFF
  8180                           tosh	equ	0xFFE
  8181                           tosl	equ	0xFFD
  8182                           pclath	equ	0xFFA
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodh	equ	0xFF4
  8188                           prodl	equ	0xFF3
  8189                           postinc0	equ	0xFEE
  8190                           wreg	equ	0xFE8
  8191                           indf1	equ	0xFE7
  8192                           postdec1	equ	0xFE5
  8193                           fsr1h	equ	0xFE2
  8194                           fsr1l	equ	0xFE1
  8195                           indf2	equ	0xFDF
  8196                           postinc2	equ	0xFDE
  8197                           postdec2	equ	0xFDD
  8198                           fsr2h	equ	0xFDA
  8199                           fsr2l	equ	0xFD9
  8200                           status	equ	0xFD8
  8201                           
  8202 ;; *************** function _HMI_SetUp *****************
  8203 ;; Defined at:
  8204 ;;		line 174 in file "HMI.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  pValue          1    wreg     unsigned char 
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;  pValue          1    0[BANK0 ] unsigned char 
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		wreg
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;Total ram usage:        1 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    7
  8225 ;; This function calls:
  8226 ;;		Nothing
  8227 ;; This function is called by:
  8228 ;;		_Event_HMI_UpButton
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           	psect	text40
  8233  014ABA                     __ptext40:
  8234                           	opt stack 0
  8235  014ABA                     _HMI_SetUp:
  8236                           	opt stack 15
  8237                           
  8238                           ; BSR set to: 1
  8239                           ;incstack = 0
  8240                           ;HMI_SetUp@pValue stored from wreg
  8241  014ABA  0100               	movlb	0	; () banked
  8242  014ABC  6FBD               	movwf	HMI_SetUp@pValue& (0+255),b
  8243                           
  8244                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
  8245  014ABE  0100               	movlb	0	; () banked
  8246  014AC0  B1BD               	btfsc	HMI_SetUp@pValue& (0+255),0,b
  8247  014AC2  D003               	bra	u6855
  8248  014AC4  0101               	movlb	1	; () banked
  8249  014AC6  912D               	bcf	(_HMIBoard+6)& (0+255),0,b
  8250  014AC8  D002               	bra	u6856
  8251  014ACA                     u6855:
  8252  014ACA  0101               	movlb	1	; () banked
  8253  014ACC  812D               	bsf	(_HMIBoard+6)& (0+255),0,b
  8254  014ACE                     u6856:
  8255                           
  8256                           ; BSR set to: 1
  8257  014ACE  0012               	return		;funcret
  8258  014AD0                     __end_of_HMI_SetUp:
  8259                           	opt stack 0
  8260                           tosu	equ	0xFFF
  8261                           tosh	equ	0xFFE
  8262                           tosl	equ	0xFFD
  8263                           pclath	equ	0xFFA
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           indf1	equ	0xFE7
  8273                           postdec1	equ	0xFE5
  8274                           fsr1h	equ	0xFE2
  8275                           fsr1l	equ	0xFE1
  8276                           indf2	equ	0xFDF
  8277                           postinc2	equ	0xFDE
  8278                           postdec2	equ	0xFDD
  8279                           fsr2h	equ	0xFDA
  8280                           fsr2l	equ	0xFD9
  8281                           status	equ	0xFD8
  8282                           
  8283 ;; *************** function _HMI_SetRight *****************
  8284 ;; Defined at:
  8285 ;;		line 168 in file "HMI.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  pValue          1    wreg     unsigned char 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  pValue          1    0[BANK0 ] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      void 
  8292 ;; Registers used:
  8293 ;;		wreg
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;Total ram usage:        1 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    7
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_Event_HMI_RightButton
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	text41
  8314  014AD0                     __ptext41:
  8315                           	opt stack 0
  8316  014AD0                     _HMI_SetRight:
  8317                           	opt stack 15
  8318                           
  8319                           ; BSR set to: 1
  8320                           ;incstack = 0
  8321                           ;HMI_SetRight@pValue stored from wreg
  8322  014AD0  0100               	movlb	0	; () banked
  8323  014AD2  6FBD               	movwf	HMI_SetRight@pValue& (0+255),b
  8324                           
  8325                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
  8326  014AD4  0100               	movlb	0	; () banked
  8327  014AD6  B1BD               	btfsc	HMI_SetRight@pValue& (0+255),0,b
  8328  014AD8  D003               	bra	u6845
  8329  014ADA  0101               	movlb	1	; () banked
  8330  014ADC  972D               	bcf	(_HMIBoard+6)& (0+255),3,b
  8331  014ADE  D002               	bra	u6846
  8332  014AE0                     u6845:
  8333  014AE0  0101               	movlb	1	; () banked
  8334  014AE2  872D               	bsf	(_HMIBoard+6)& (0+255),3,b
  8335  014AE4                     u6846:
  8336                           
  8337                           ; BSR set to: 1
  8338  014AE4  0012               	return		;funcret
  8339  014AE6                     __end_of_HMI_SetRight:
  8340                           	opt stack 0
  8341                           tosu	equ	0xFFF
  8342                           tosh	equ	0xFFE
  8343                           tosl	equ	0xFFD
  8344                           pclath	equ	0xFFA
  8345                           tblptru	equ	0xFF8
  8346                           tblptrh	equ	0xFF7
  8347                           tblptrl	equ	0xFF6
  8348                           tablat	equ	0xFF5
  8349                           prodh	equ	0xFF4
  8350                           prodl	equ	0xFF3
  8351                           postinc0	equ	0xFEE
  8352                           wreg	equ	0xFE8
  8353                           indf1	equ	0xFE7
  8354                           postdec1	equ	0xFE5
  8355                           fsr1h	equ	0xFE2
  8356                           fsr1l	equ	0xFE1
  8357                           indf2	equ	0xFDF
  8358                           postinc2	equ	0xFDE
  8359                           postdec2	equ	0xFDD
  8360                           fsr2h	equ	0xFDA
  8361                           fsr2l	equ	0xFD9
  8362                           status	equ	0xFD8
  8363                           
  8364 ;; *************** function _HMI_SetLeft *****************
  8365 ;; Defined at:
  8366 ;;		line 162 in file "HMI.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  pValue          1    wreg     unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  pValue          1    0[BANK0 ] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      void 
  8373 ;; Registers used:
  8374 ;;		wreg
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;Total ram usage:        1 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    7
  8387 ;; This function calls:
  8388 ;;		Nothing
  8389 ;; This function is called by:
  8390 ;;		_Event_HMI_LeftButton
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text42
  8395  014AE6                     __ptext42:
  8396                           	opt stack 0
  8397  014AE6                     _HMI_SetLeft:
  8398                           	opt stack 15
  8399                           
  8400                           ; BSR set to: 1
  8401                           ;incstack = 0
  8402                           ;HMI_SetLeft@pValue stored from wreg
  8403  014AE6  0100               	movlb	0	; () banked
  8404  014AE8  6FBD               	movwf	HMI_SetLeft@pValue& (0+255),b
  8405                           
  8406                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
  8407  014AEA  0100               	movlb	0	; () banked
  8408  014AEC  B1BD               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
  8409  014AEE  D003               	bra	u6835
  8410  014AF0  0101               	movlb	1	; () banked
  8411  014AF2  952D               	bcf	(_HMIBoard+6)& (0+255),2,b
  8412  014AF4  D002               	bra	u6836
  8413  014AF6                     u6835:
  8414  014AF6  0101               	movlb	1	; () banked
  8415  014AF8  852D               	bsf	(_HMIBoard+6)& (0+255),2,b
  8416  014AFA                     u6836:
  8417                           
  8418                           ; BSR set to: 1
  8419  014AFA  0012               	return		;funcret
  8420  014AFC                     __end_of_HMI_SetLeft:
  8421                           	opt stack 0
  8422                           tosu	equ	0xFFF
  8423                           tosh	equ	0xFFE
  8424                           tosl	equ	0xFFD
  8425                           pclath	equ	0xFFA
  8426                           tblptru	equ	0xFF8
  8427                           tblptrh	equ	0xFF7
  8428                           tblptrl	equ	0xFF6
  8429                           tablat	equ	0xFF5
  8430                           prodh	equ	0xFF4
  8431                           prodl	equ	0xFF3
  8432                           postinc0	equ	0xFEE
  8433                           wreg	equ	0xFE8
  8434                           indf1	equ	0xFE7
  8435                           postdec1	equ	0xFE5
  8436                           fsr1h	equ	0xFE2
  8437                           fsr1l	equ	0xFE1
  8438                           indf2	equ	0xFDF
  8439                           postinc2	equ	0xFDE
  8440                           postdec2	equ	0xFDD
  8441                           fsr2h	equ	0xFDA
  8442                           fsr2l	equ	0xFD9
  8443                           status	equ	0xFD8
  8444                           
  8445 ;; *************** function _HMI_SetNumber *****************
  8446 ;; Defined at:
  8447 ;;		line 221 in file "HMI.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;  pInput          2   17[BANK0 ] int 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;		None
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8461 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;Total ram usage:        2 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    9
  8468 ;; This function calls:
  8469 ;;		_HMI_SetSegments
  8470 ;;		_itos
  8471 ;; This function is called by:
  8472 ;;		_Event_TestButton
  8473 ;;		_Event_HMI_UpButton
  8474 ;;		_Event_HMI_DownButton
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text43
  8479  01476C                     __ptext43:
  8480                           	opt stack 0
  8481  01476C                     _HMI_SetNumber:
  8482                           	opt stack 13
  8483                           
  8484                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  8485                           
  8486                           ; BSR set to: 1
  8487                           ;incstack = 0
  8488  01476C  C0CE  F0C4         	movff	HMI_SetNumber@pInput,itos@input
  8489  014770  C0CF  F0C5         	movff	HMI_SetNumber@pInput+1,itos@input+1
  8490  014774  0E27               	movlw	low _HMIBoard
  8491  014776  0100               	movlb	0	; () banked
  8492  014778  6FC6               	movwf	itos@destination& (0+255),b
  8493  01477A  0E01               	movlw	high _HMIBoard
  8494  01477C  0100               	movlb	0	; () banked
  8495  01477E  6FC7               	movwf	(itos@destination+1)& (0+255),b
  8496  014780  ECEC  F092         	call	_itos	;wreg free
  8497                           
  8498                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  8499  014784  0E27               	movlw	low _HMIBoard
  8500  014786  0100               	movlb	0	; () banked
  8501  014788  6FBE               	movwf	HMI_SetSegments@pString& (0+255),b
  8502  01478A  0E01               	movlw	high _HMIBoard
  8503  01478C  0100               	movlb	0	; () banked
  8504  01478E  6FBF               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  8505  014790  EC12  F096         	call	_HMI_SetSegments	;wreg free
  8506  014794  0012               	return		;funcret
  8507  014796                     __end_of_HMI_SetNumber:
  8508                           	opt stack 0
  8509                           tosu	equ	0xFFF
  8510                           tosh	equ	0xFFE
  8511                           tosl	equ	0xFFD
  8512                           pclath	equ	0xFFA
  8513                           tblptru	equ	0xFF8
  8514                           tblptrh	equ	0xFF7
  8515                           tblptrl	equ	0xFF6
  8516                           tablat	equ	0xFF5
  8517                           prodh	equ	0xFF4
  8518                           prodl	equ	0xFF3
  8519                           postinc0	equ	0xFEE
  8520                           wreg	equ	0xFE8
  8521                           indf1	equ	0xFE7
  8522                           postdec1	equ	0xFE5
  8523                           fsr1h	equ	0xFE2
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           fsr2h	equ	0xFDA
  8529                           fsr2l	equ	0xFD9
  8530                           status	equ	0xFD8
  8531                           
  8532 ;; *************** function _itos *****************
  8533 ;; Defined at:
  8534 ;;		line 369 in file "Library/Types.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  input           2    7[BANK0 ] unsigned short 
  8537 ;;  destination     2    9[BANK0 ] PTR unsigned char 
  8538 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  Out             2   15[BANK0 ] unsigned short 
  8541 ;;  Length          2   13[BANK0 ] unsigned short 
  8542 ;;  Data            2   11[BANK0 ] PTR unsigned char 
  8543 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8544 ;; Return value:  Size  Location     Type
  8545 ;;                  1    wreg      void 
  8546 ;; Registers used:
  8547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8548 ;; Tracked objects:
  8549 ;;		On entry : 0/0
  8550 ;;		On exit  : 0/0
  8551 ;;		Unchanged: 0/0
  8552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8553 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;Total ram usage:       10 bytes
  8558 ;; Hardware stack levels used:    1
  8559 ;; Hardware stack levels required when called:    8
  8560 ;; This function calls:
  8561 ;;		___lwdiv
  8562 ;;		___lwmod
  8563 ;;		_reverse
  8564 ;; This function is called by:
  8565 ;;		_HMI_SetNumber
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           	psect	text44
  8570  0125D8                     __ptext44:
  8571                           	opt stack 0
  8572  0125D8                     _itos:
  8573                           	opt stack 13
  8574                           
  8575                           ;Types.c: 371: UINT16 Out = input;
  8576                           
  8577                           ;incstack = 0
  8578  0125D8  C0C4  F0CC         	movff	itos@input,itos@Out
  8579  0125DC  C0C5  F0CD         	movff	itos@input+1,itos@Out+1
  8580                           
  8581                           ;Types.c: 372: UINT16 Length = 0;
  8582  0125E0  0E00               	movlw	0
  8583  0125E2  0100               	movlb	0	; () banked
  8584  0125E4  6FCB               	movwf	(itos@Length+1)& (0+255),b
  8585  0125E6  0E00               	movlw	0
  8586  0125E8  6FCA               	movwf	itos@Length& (0+255),b
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;Types.c: 373: char *Data = destination;
  8590  0125EA  C0C6  F0C8         	movff	itos@destination,itos@Data
  8591  0125EE  C0C7  F0C9         	movff	itos@destination+1,itos@Data+1
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;Types.c: 374: if(Out == 0)
  8595  0125F2  0100               	movlb	0	; () banked
  8596  0125F4  51CC               	movf	itos@Out& (0+255),w,b
  8597  0125F6  0100               	movlb	0	; () banked
  8598  0125F8  11CD               	iorwf	(itos@Out+1)& (0+255),w,b
  8599  0125FA  A4D8               	btfss	status,2,c
  8600  0125FC  D034               	goto	l929
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;Types.c: 375: {
  8604                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8605  0125FE  C0C8  FFD9         	movff	itos@Data,fsr2l
  8606  012602  C0C9  FFDA         	movff	itos@Data+1,fsr2h
  8607  012606  0E30               	movlw	48
  8608  012608  6EDF               	movwf	indf2,c
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;Types.c: 377: Length = 1;
  8612  01260A  0E00               	movlw	0
  8613  01260C  0100               	movlb	0	; () banked
  8614  01260E  6FCB               	movwf	(itos@Length+1)& (0+255),b
  8615  012610  0E01               	movlw	1
  8616  012612  6FCA               	movwf	itos@Length& (0+255),b
  8617                           
  8618                           ;Types.c: 378: }
  8619  012614  D040               	goto	l928
  8620  012616                     
  8621                           ; BSR set to: 0
  8622                           ;Types.c: 382: {
  8623                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8624                           
  8625                           ; BSR set to: 0
  8626  012616  C0CC  F0BD         	movff	itos@Out,___lwmod@dividend
  8627  01261A  C0CD  F0BE         	movff	itos@Out+1,___lwmod@dividend+1
  8628  01261E  0E00               	movlw	0
  8629  012620  0100               	movlb	0	; () banked
  8630  012622  6FC0               	movwf	(___lwmod@divisor+1)& (0+255),b
  8631  012624  0E0A               	movlw	10
  8632  012626  6FBF               	movwf	___lwmod@divisor& (0+255),b
  8633  012628  ECF9  F09E         	call	___lwmod	;wreg free
  8634  01262C  0100               	movlb	0	; () banked
  8635  01262E  51BD               	movf	?___lwmod& (0+255),w,b
  8636  012630  0F30               	addlw	48
  8637  012632  C0C8  FFD9         	movff	itos@Data,fsr2l
  8638  012636  C0C9  FFDA         	movff	itos@Data+1,fsr2h
  8639  01263A  6EDF               	movwf	indf2,c
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;Types.c: 384: Out /= 10;
  8643  01263C  C0CC  F0BD         	movff	itos@Out,___lwdiv@dividend
  8644  012640  C0CD  F0BE         	movff	itos@Out+1,___lwdiv@dividend+1
  8645  012644  0E00               	movlw	0
  8646  012646  0100               	movlb	0	; () banked
  8647  012648  6FC0               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8648  01264A  0E0A               	movlw	10
  8649  01264C  6FBF               	movwf	___lwdiv@divisor& (0+255),b
  8650  01264E  ECEC  F09B         	call	___lwdiv	;wreg free
  8651  012652  C0BD  F0CC         	movff	?___lwdiv,itos@Out
  8652  012656  C0BE  F0CD         	movff	?___lwdiv+1,itos@Out+1
  8653                           
  8654                           ;Types.c: 385: Length ++;
  8655  01265A  0100               	movlb	0	; () banked
  8656  01265C  4BCA               	infsnz	itos@Length& (0+255),f,b
  8657  01265E  2BCB               	incf	(itos@Length+1)& (0+255),f,b
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;Types.c: 386: Data++;
  8661  012660  0100               	movlb	0	; () banked
  8662  012662  4BC8               	infsnz	itos@Data& (0+255),f,b
  8663  012664  2BC9               	incf	(itos@Data+1)& (0+255),f,b
  8664  012666                     l929:
  8665                           
  8666                           ; BSR set to: 0
  8667                           
  8668                           ; BSR set to: 0
  8669  012666  0100               	movlb	0	; () banked
  8670  012668  51CC               	movf	itos@Out& (0+255),w,b
  8671  01266A  0100               	movlb	0	; () banked
  8672  01266C  11CD               	iorwf	(itos@Out+1)& (0+255),w,b
  8673  01266E  B4D8               	btfsc	status,2,c
  8674  012670  D008               	goto	u6690
  8675                           
  8676                           ; BSR set to: 0
  8677  012672  0100               	movlb	0	; () banked
  8678  012674  51CB               	movf	(itos@Length+1)& (0+255),w,b
  8679  012676  E105               	bnz	l10256
  8680  012678  0E06               	movlw	6
  8681  01267A  0100               	movlb	0	; () banked
  8682  01267C  5DCA               	subwf	itos@Length& (0+255),w,b
  8683  01267E  A0D8               	btfss	status,0,c
  8684  012680  D7CA               	goto	l930
  8685  012682                     u6690:
  8686  012682                     l10256:
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;Types.c: 387: }
  8690                           ;Types.c: 388: reverse(destination, Length);
  8691  012682  C0C6  F0BD         	movff	itos@destination,reverse@input
  8692  012686  C0C7  F0BE         	movff	itos@destination+1,reverse@input+1
  8693  01268A  C0CA  F0BF         	movff	itos@Length,reverse@length
  8694  01268E  C0CB  F0C0         	movff	itos@Length+1,reverse@length+1
  8695  012692  ECBE  F09D         	call	_reverse	;wreg free
  8696  012696                     l928:
  8697                           
  8698                           ;Types.c: 389: }
  8699                           ;Types.c: 390: destination[Length] = '\0';
  8700  012696  0100               	movlb	0	; () banked
  8701  012698  51CA               	movf	itos@Length& (0+255),w,b
  8702  01269A  0100               	movlb	0	; () banked
  8703  01269C  25C6               	addwf	itos@destination& (0+255),w,b
  8704  01269E  6ED9               	movwf	fsr2l,c
  8705  0126A0  0100               	movlb	0	; () banked
  8706  0126A2  51CB               	movf	(itos@Length+1)& (0+255),w,b
  8707  0126A4  0100               	movlb	0	; () banked
  8708  0126A6  21C7               	addwfc	(itos@destination+1)& (0+255),w,b
  8709  0126A8  6EDA               	movwf	fsr2h,c
  8710  0126AA  0E00               	movlw	0
  8711  0126AC  6EDF               	movwf	indf2,c
  8712                           
  8713                           ; BSR set to: 0
  8714  0126AE  0012               	return		;funcret
  8715  0126B0                     __end_of_itos:
  8716                           	opt stack 0
  8717                           tosu	equ	0xFFF
  8718                           tosh	equ	0xFFE
  8719                           tosl	equ	0xFFD
  8720                           pclath	equ	0xFFA
  8721                           tblptru	equ	0xFF8
  8722                           tblptrh	equ	0xFF7
  8723                           tblptrl	equ	0xFF6
  8724                           tablat	equ	0xFF5
  8725                           prodh	equ	0xFF4
  8726                           prodl	equ	0xFF3
  8727                           postinc0	equ	0xFEE
  8728                           wreg	equ	0xFE8
  8729                           indf1	equ	0xFE7
  8730                           postdec1	equ	0xFE5
  8731                           fsr1h	equ	0xFE2
  8732                           fsr1l	equ	0xFE1
  8733                           indf2	equ	0xFDF
  8734                           postinc2	equ	0xFDE
  8735                           postdec2	equ	0xFDD
  8736                           fsr2h	equ	0xFDA
  8737                           fsr2l	equ	0xFD9
  8738                           status	equ	0xFD8
  8739                           
  8740 ;; *************** function _reverse *****************
  8741 ;; Defined at:
  8742 ;;		line 357 in file "Library/Types.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8745 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8746 ;;  length          2    2[BANK0 ] unsigned short 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8749 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8750 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      void 
  8753 ;; Registers used:
  8754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;Total ram usage:        7 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; Hardware stack levels required when called:    7
  8767 ;; This function calls:
  8768 ;;		Nothing
  8769 ;; This function is called by:
  8770 ;;		_itos
  8771 ;; This function uses a non-reentrant model
  8772 ;;
  8773                           
  8774                           	psect	text45
  8775  013B7C                     __ptext45:
  8776                           	opt stack 0
  8777  013B7C                     _reverse:
  8778                           	opt stack 13
  8779                           
  8780                           ;Types.c: 359: char tempVar,
  8781                           ;Types.c: 360: *iterator = input + length;
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;incstack = 0
  8785  013B7C  0100               	movlb	0	; () banked
  8786  013B7E  51BF               	movf	reverse@length& (0+255),w,b
  8787  013B80  0100               	movlb	0	; () banked
  8788  013B82  25BD               	addwf	reverse@input& (0+255),w,b
  8789  013B84  0100               	movlb	0	; () banked
  8790  013B86  6FC2               	movwf	reverse@iterator& (0+255),b
  8791  013B88  0100               	movlb	0	; () banked
  8792  013B8A  51C0               	movf	(reverse@length+1)& (0+255),w,b
  8793  013B8C  0100               	movlb	0	; () banked
  8794  013B8E  21BE               	addwfc	(reverse@input+1)& (0+255),w,b
  8795  013B90  0100               	movlb	0	; () banked
  8796  013B92  6FC3               	movwf	(reverse@iterator+1)& (0+255),b
  8797                           
  8798                           ;Types.c: 362: while ( --iterator > input )
  8799  013B94  D01A               	goto	l921
  8800  013B96                     
  8801                           ; BSR set to: 0
  8802                           ;Types.c: 363: {
  8803                           ;Types.c: 364: tempVar = *input;
  8804                           
  8805                           ; BSR set to: 0
  8806  013B96  C0BD  FFD9         	movff	reverse@input,fsr2l
  8807  013B9A  C0BE  FFDA         	movff	reverse@input+1,fsr2h
  8808  013B9E  50DF               	movf	indf2,w,c
  8809  013BA0  0100               	movlb	0	; () banked
  8810  013BA2  6FC1               	movwf	reverse@tempVar& (0+255),b
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;Types.c: 365: *input++=*iterator;
  8814  013BA4  C0C2  FFD9         	movff	reverse@iterator,fsr2l
  8815  013BA8  C0C3  FFDA         	movff	reverse@iterator+1,fsr2h
  8816  013BAC  C0BD  FFE1         	movff	reverse@input,fsr1l
  8817  013BB0  C0BE  FFE2         	movff	reverse@input+1,fsr1h
  8818  013BB4  CFDF FFE7          	movff	indf2,indf1
  8819                           
  8820                           ; BSR set to: 0
  8821  013BB8  0100               	movlb	0	; () banked
  8822  013BBA  4BBD               	infsnz	reverse@input& (0+255),f,b
  8823  013BBC  2BBE               	incf	(reverse@input+1)& (0+255),f,b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;Types.c: 366: *iterator=tempVar;
  8827  013BBE  C0C2  FFD9         	movff	reverse@iterator,fsr2l
  8828  013BC2  C0C3  FFDA         	movff	reverse@iterator+1,fsr2h
  8829  013BC6  C0C1  FFDF         	movff	reverse@tempVar,indf2
  8830  013BCA                     l921:
  8831                           
  8832                           ; BSR set to: 0
  8833                           
  8834                           ; BSR set to: 0
  8835  013BCA  0100               	movlb	0	; () banked
  8836  013BCC  07C2               	decf	reverse@iterator& (0+255),f,b
  8837  013BCE  A0D8               	btfss	status,0,c
  8838  013BD0  07C3               	decf	(reverse@iterator+1)& (0+255),f,b
  8839  013BD2  0100               	movlb	0	; () banked
  8840  013BD4  51C2               	movf	reverse@iterator& (0+255),w,b
  8841  013BD6  0100               	movlb	0	; () banked
  8842  013BD8  5DBD               	subwf	reverse@input& (0+255),w,b
  8843  013BDA  0100               	movlb	0	; () banked
  8844  013BDC  51C3               	movf	(reverse@iterator+1)& (0+255),w,b
  8845  013BDE  0100               	movlb	0	; () banked
  8846  013BE0  59BE               	subwfb	(reverse@input+1)& (0+255),w,b
  8847  013BE2  B0D8               	btfsc	status,0,c
  8848  013BE4  0012               	return	
  8849  013BE6  D7D7               	goto	l922
  8850  013BE8                     __end_of_reverse:
  8851                           	opt stack 0
  8852                           tosu	equ	0xFFF
  8853                           tosh	equ	0xFFE
  8854                           tosl	equ	0xFFD
  8855                           pclath	equ	0xFFA
  8856                           tblptru	equ	0xFF8
  8857                           tblptrh	equ	0xFF7
  8858                           tblptrl	equ	0xFF6
  8859                           tablat	equ	0xFF5
  8860                           prodh	equ	0xFF4
  8861                           prodl	equ	0xFF3
  8862                           postinc0	equ	0xFEE
  8863                           wreg	equ	0xFE8
  8864                           indf1	equ	0xFE7
  8865                           postdec1	equ	0xFE5
  8866                           fsr1h	equ	0xFE2
  8867                           fsr1l	equ	0xFE1
  8868                           indf2	equ	0xFDF
  8869                           postinc2	equ	0xFDE
  8870                           postdec2	equ	0xFDD
  8871                           fsr2h	equ	0xFDA
  8872                           fsr2l	equ	0xFD9
  8873                           status	equ	0xFD8
  8874                           
  8875 ;; *************** function ___lwmod *****************
  8876 ;; Defined at:
  8877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;  dividend        2    0[BANK0 ] unsigned int 
  8880 ;;  divisor         2    2[BANK0 ] unsigned int 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  counter         1    4[BANK0 ] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  2    0[BANK0 ] unsigned int 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;Total ram usage:        5 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    7
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_itos
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           	psect	text46
  8907  013DF2                     __ptext46:
  8908                           	opt stack 0
  8909  013DF2                     ___lwmod:
  8910                           	opt stack 13
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;incstack = 0
  8914  013DF2  0100               	movlb	0	; () banked
  8915  013DF4  51BF               	movf	___lwmod@divisor& (0+255),w,b
  8916  013DF6  0100               	movlb	0	; () banked
  8917  013DF8  11C0               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8918  013DFA  B4D8               	btfsc	status,2,c
  8919  013DFC  D026               	goto	l2521
  8920                           
  8921                           ; BSR set to: 0
  8922  013DFE  0E01               	movlw	1
  8923  013E00  0100               	movlb	0	; () banked
  8924  013E02  6FC1               	movwf	___lwmod@counter& (0+255),b
  8925  013E04  D006               	goto	l2516
  8926  013E06                     
  8927                           ; BSR set to: 0
  8928                           
  8929                           ; BSR set to: 0
  8930  013E06  0100               	movlb	0	; () banked
  8931  013E08  90D8               	bcf	status,0,c
  8932  013E0A  37BF               	rlcf	___lwmod@divisor& (0+255),f,b
  8933  013E0C  37C0               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8934  013E0E  0100               	movlb	0	; () banked
  8935  013E10  2BC1               	incf	___lwmod@counter& (0+255),f,b
  8936  013E12                     l2516:
  8937                           
  8938                           ; BSR set to: 0
  8939                           
  8940                           ; BSR set to: 0
  8941  013E12  0100               	movlb	0	; () banked
  8942  013E14  AFC0               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8943  013E16  D7F7               	goto	l2517
  8944  013E18                     u6650:
  8945                           
  8946                           ; BSR set to: 0
  8947                           
  8948                           ; BSR set to: 0
  8949                           
  8950                           ; BSR set to: 0
  8951  013E18  0100               	movlb	0	; () banked
  8952  013E1A  51BF               	movf	___lwmod@divisor& (0+255),w,b
  8953  013E1C  0100               	movlb	0	; () banked
  8954  013E1E  5DBD               	subwf	___lwmod@dividend& (0+255),w,b
  8955  013E20  0100               	movlb	0	; () banked
  8956  013E22  51C0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8957  013E24  0100               	movlb	0	; () banked
  8958  013E26  59BE               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8959  013E28  A0D8               	btfss	status,0,c
  8960  013E2A  D008               	goto	l2520
  8961                           
  8962                           ; BSR set to: 0
  8963  013E2C  0100               	movlb	0	; () banked
  8964  013E2E  51BF               	movf	___lwmod@divisor& (0+255),w,b
  8965  013E30  0100               	movlb	0	; () banked
  8966  013E32  5FBD               	subwf	___lwmod@dividend& (0+255),f,b
  8967  013E34  0100               	movlb	0	; () banked
  8968  013E36  51C0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8969  013E38  0100               	movlb	0	; () banked
  8970  013E3A  5BBE               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8971  013E3C                     l2520:
  8972                           
  8973                           ; BSR set to: 0
  8974                           
  8975                           ; BSR set to: 0
  8976  013E3C  0100               	movlb	0	; () banked
  8977  013E3E  90D8               	bcf	status,0,c
  8978  013E40  33C0               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8979  013E42  33BF               	rrcf	___lwmod@divisor& (0+255),f,b
  8980                           
  8981                           ; BSR set to: 0
  8982  013E44  0100               	movlb	0	; () banked
  8983  013E46  2FC1               	decfsz	___lwmod@counter& (0+255),f,b
  8984  013E48  D7E7               	goto	u6650
  8985  013E4A                     l2521:
  8986                           
  8987                           ; BSR set to: 0
  8988                           
  8989                           ; BSR set to: 0
  8990  013E4A  C0BD  F0BD         	movff	___lwmod@dividend,?___lwmod
  8991  013E4E  C0BE  F0BE         	movff	___lwmod@dividend+1,?___lwmod+1
  8992                           
  8993                           ; BSR set to: 0
  8994  013E52  0012               	return		;funcret
  8995  013E54                     __end_of___lwmod:
  8996                           	opt stack 0
  8997                           tosu	equ	0xFFF
  8998                           tosh	equ	0xFFE
  8999                           tosl	equ	0xFFD
  9000                           pclath	equ	0xFFA
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           postinc0	equ	0xFEE
  9008                           wreg	equ	0xFE8
  9009                           indf1	equ	0xFE7
  9010                           postdec1	equ	0xFE5
  9011                           fsr1h	equ	0xFE2
  9012                           fsr1l	equ	0xFE1
  9013                           indf2	equ	0xFDF
  9014                           postinc2	equ	0xFDE
  9015                           postdec2	equ	0xFDD
  9016                           fsr2h	equ	0xFDA
  9017                           fsr2l	equ	0xFD9
  9018                           status	equ	0xFD8
  9019                           
  9020 ;; *************** function ___lwdiv *****************
  9021 ;; Defined at:
  9022 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;  dividend        2    0[BANK0 ] unsigned int 
  9025 ;;  divisor         2    2[BANK0 ] unsigned int 
  9026 ;; Auto vars:     Size  Location     Type
  9027 ;;  quotient        2    5[BANK0 ] unsigned int 
  9028 ;;  counter         1    4[BANK0 ] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  2    0[BANK0 ] unsigned int 
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;Total ram usage:        7 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    7
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_itos
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text47
  9053  0137D8                     __ptext47:
  9054                           	opt stack 0
  9055  0137D8                     ___lwdiv:
  9056                           	opt stack 13
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;incstack = 0
  9060  0137D8  0E00               	movlw	0
  9061  0137DA  0100               	movlb	0	; () banked
  9062  0137DC  6FC3               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9063  0137DE  0E00               	movlw	0
  9064  0137E0  6FC2               	movwf	___lwdiv@quotient& (0+255),b
  9065                           
  9066                           ; BSR set to: 0
  9067  0137E2  0100               	movlb	0	; () banked
  9068  0137E4  51BF               	movf	___lwdiv@divisor& (0+255),w,b
  9069  0137E6  0100               	movlb	0	; () banked
  9070  0137E8  11C0               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9071  0137EA  B4D8               	btfsc	status,2,c
  9072  0137EC  D02C               	goto	l2511
  9073                           
  9074                           ; BSR set to: 0
  9075  0137EE  0E01               	movlw	1
  9076  0137F0  0100               	movlb	0	; () banked
  9077  0137F2  6FC1               	movwf	___lwdiv@counter& (0+255),b
  9078  0137F4  D006               	goto	l2506
  9079  0137F6                     
  9080                           ; BSR set to: 0
  9081                           
  9082                           ; BSR set to: 0
  9083  0137F6  0100               	movlb	0	; () banked
  9084  0137F8  90D8               	bcf	status,0,c
  9085  0137FA  37BF               	rlcf	___lwdiv@divisor& (0+255),f,b
  9086  0137FC  37C0               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9087  0137FE  0100               	movlb	0	; () banked
  9088  013800  2BC1               	incf	___lwdiv@counter& (0+255),f,b
  9089  013802                     l2506:
  9090                           
  9091                           ; BSR set to: 0
  9092                           
  9093                           ; BSR set to: 0
  9094  013802  0100               	movlb	0	; () banked
  9095  013804  AFC0               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9096  013806  D7F7               	goto	l2507
  9097  013808                     u6620:
  9098                           
  9099                           ; BSR set to: 0
  9100                           
  9101                           ; BSR set to: 0
  9102                           
  9103                           ; BSR set to: 0
  9104  013808  0100               	movlb	0	; () banked
  9105  01380A  90D8               	bcf	status,0,c
  9106  01380C  37C2               	rlcf	___lwdiv@quotient& (0+255),f,b
  9107  01380E  37C3               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9108                           
  9109                           ; BSR set to: 0
  9110  013810  0100               	movlb	0	; () banked
  9111  013812  51BF               	movf	___lwdiv@divisor& (0+255),w,b
  9112  013814  0100               	movlb	0	; () banked
  9113  013816  5DBD               	subwf	___lwdiv@dividend& (0+255),w,b
  9114  013818  0100               	movlb	0	; () banked
  9115  01381A  51C0               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9116  01381C  0100               	movlb	0	; () banked
  9117  01381E  59BE               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9118  013820  A0D8               	btfss	status,0,c
  9119  013822  D00A               	goto	l2510
  9120                           
  9121                           ; BSR set to: 0
  9122  013824  0100               	movlb	0	; () banked
  9123  013826  51BF               	movf	___lwdiv@divisor& (0+255),w,b
  9124  013828  0100               	movlb	0	; () banked
  9125  01382A  5FBD               	subwf	___lwdiv@dividend& (0+255),f,b
  9126  01382C  0100               	movlb	0	; () banked
  9127  01382E  51C0               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9128  013830  0100               	movlb	0	; () banked
  9129  013832  5BBE               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9130                           
  9131                           ; BSR set to: 0
  9132  013834  0100               	movlb	0	; () banked
  9133  013836  81C2               	bsf	___lwdiv@quotient& (0+255),0,b
  9134  013838                     l2510:
  9135                           
  9136                           ; BSR set to: 0
  9137                           
  9138                           ; BSR set to: 0
  9139  013838  0100               	movlb	0	; () banked
  9140  01383A  90D8               	bcf	status,0,c
  9141  01383C  33C0               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9142  01383E  33BF               	rrcf	___lwdiv@divisor& (0+255),f,b
  9143                           
  9144                           ; BSR set to: 0
  9145  013840  0100               	movlb	0	; () banked
  9146  013842  2FC1               	decfsz	___lwdiv@counter& (0+255),f,b
  9147  013844  D7E1               	goto	u6620
  9148  013846                     l2511:
  9149                           
  9150                           ; BSR set to: 0
  9151                           
  9152                           ; BSR set to: 0
  9153  013846  C0C2  F0BD         	movff	___lwdiv@quotient,?___lwdiv
  9154  01384A  C0C3  F0BE         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9155                           
  9156                           ; BSR set to: 0
  9157  01384E  0012               	return		;funcret
  9158  013850                     __end_of___lwdiv:
  9159                           	opt stack 0
  9160                           tosu	equ	0xFFF
  9161                           tosh	equ	0xFFE
  9162                           tosl	equ	0xFFD
  9163                           pclath	equ	0xFFA
  9164                           tblptru	equ	0xFF8
  9165                           tblptrh	equ	0xFF7
  9166                           tblptrl	equ	0xFF6
  9167                           tablat	equ	0xFF5
  9168                           prodh	equ	0xFF4
  9169                           prodl	equ	0xFF3
  9170                           postinc0	equ	0xFEE
  9171                           wreg	equ	0xFE8
  9172                           indf1	equ	0xFE7
  9173                           postdec1	equ	0xFE5
  9174                           fsr1h	equ	0xFE2
  9175                           fsr1l	equ	0xFE1
  9176                           indf2	equ	0xFDF
  9177                           postinc2	equ	0xFDE
  9178                           postdec2	equ	0xFDD
  9179                           fsr2h	equ	0xFDA
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function _HMI_SetSegments *****************
  9184 ;; Defined at:
  9185 ;;		line 226 in file "HMI.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  9188 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;  in              2    4[BANK0 ] unsigned short 
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  1    wreg      void 
  9193 ;; Registers used:
  9194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9200 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;Total ram usage:        5 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    8
  9207 ;; This function calls:
  9208 ;;		_ToSegment
  9209 ;; This function is called by:
  9210 ;;		_HMI_SetNumber
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           	psect	text48
  9215  012C24                     __ptext48:
  9216                           	opt stack 0
  9217  012C24                     _HMI_SetSegments:
  9218                           	opt stack 13
  9219                           
  9220                           ;HMI.c: 228: UINT16 in=0;
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;incstack = 0
  9224  012C24  0E00               	movlw	0
  9225  012C26  0100               	movlb	0	; () banked
  9226  012C28  6FC2               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  9227  012C2A  0E00               	movlw	0
  9228  012C2C  6FC1               	movwf	HMI_SetSegments@in& (0+255),b
  9229                           
  9230                           ;HMI.c: 229: while(*pString)
  9231  012C2E  D038               	goto	l1210
  9232  012C30                     
  9233                           ; BSR set to: 0
  9234                           ;HMI.c: 230: {
  9235                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  9236                           
  9237                           ; BSR set to: 0
  9238  012C30  0E27               	movlw	low _HMIBoard
  9239  012C32  0100               	movlb	0	; () banked
  9240  012C34  25C1               	addwf	HMI_SetSegments@in& (0+255),w,b
  9241  012C36  6ED9               	movwf	fsr2l,c
  9242  012C38  0E01               	movlw	high _HMIBoard
  9243  012C3A  0100               	movlb	0	; () banked
  9244  012C3C  21C2               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9245  012C3E  6EDA               	movwf	fsr2h,c
  9246  012C40  C0BE  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  9247  012C44  C0BF  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  9248  012C48  50E7               	movf	indf1,w,c
  9249  012C4A  EC35  F085         	call	_ToSegment
  9250  012C4E  6EDF               	movwf	indf2,c
  9251                           
  9252                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  9253  012C50  0E27               	movlw	low _HMIBoard
  9254  012C52  0100               	movlb	0	; () banked
  9255  012C54  25C1               	addwf	HMI_SetSegments@in& (0+255),w,b
  9256  012C56  6ED9               	movwf	fsr2l,c
  9257  012C58  0E01               	movlw	high _HMIBoard
  9258  012C5A  0100               	movlb	0	; () banked
  9259  012C5C  21C2               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9260  012C5E  6EDA               	movwf	fsr2h,c
  9261  012C60  0E80               	movlw	128
  9262  012C62  18DE               	xorwf	postinc2,w,c
  9263  012C64  A4D8               	btfss	status,2,c
  9264  012C66  D00E               	goto	l1209
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;HMI.c: 234: {
  9268                           ;HMI.c: 235: in--;
  9269  012C68  0100               	movlb	0	; () banked
  9270  012C6A  07C1               	decf	HMI_SetSegments@in& (0+255),f,b
  9271  012C6C  A0D8               	btfss	status,0,c
  9272  012C6E  07C2               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  9276  012C70  0E27               	movlw	low _HMIBoard
  9277  012C72  0100               	movlb	0	; () banked
  9278  012C74  25C1               	addwf	HMI_SetSegments@in& (0+255),w,b
  9279  012C76  6ED9               	movwf	fsr2l,c
  9280  012C78  0E01               	movlw	high _HMIBoard
  9281  012C7A  0100               	movlb	0	; () banked
  9282  012C7C  21C2               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9283  012C7E  6EDA               	movwf	fsr2h,c
  9284  012C80  0E00               	movlw	0
  9285  012C82  8EDB               	bsf	plusw2,7,c
  9286  012C84                     l1209:
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;HMI.c: 237: }
  9290                           ;HMI.c: 239: pString++;
  9291                           
  9292                           ; BSR set to: 0
  9293  012C84  0100               	movlb	0	; () banked
  9294  012C86  4BBE               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  9295  012C88  2BBF               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;HMI.c: 240: in++;
  9299  012C8A  0100               	movlb	0	; () banked
  9300  012C8C  4BC1               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9301  012C8E  2BC2               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;HMI.c: 241: if (in>=6)
  9305  012C90  0100               	movlb	0	; () banked
  9306  012C92  51C2               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9307  012C94  E11A               	bnz	l10330
  9308  012C96  0E06               	movlw	6
  9309  012C98  0100               	movlb	0	; () banked
  9310  012C9A  5DC1               	subwf	HMI_SetSegments@in& (0+255),w,b
  9311  012C9C  B0D8               	btfsc	status,0,c
  9312  012C9E  D015               	goto	l1212
  9313  012CA0                     l1210:
  9314                           
  9315                           ; BSR set to: 0
  9316                           
  9317                           ; BSR set to: 0
  9318                           
  9319                           ; BSR set to: 0
  9320  012CA0  C0BE  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  9321  012CA4  C0BF  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  9322  012CA8  50DF               	movf	indf2,w,c
  9323  012CAA  B4D8               	btfsc	status,2,c
  9324  012CAC  D00E               	goto	l1212
  9325  012CAE  D7C0               	goto	l1208
  9326  012CB0                     
  9327                           ; BSR set to: 0
  9328                           ;HMI.c: 245: {
  9329                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  9330                           
  9331                           ; BSR set to: 0
  9332  012CB0  0E27               	movlw	low _HMIBoard
  9333  012CB2  0100               	movlb	0	; () banked
  9334  012CB4  25C1               	addwf	HMI_SetSegments@in& (0+255),w,b
  9335  012CB6  6ED9               	movwf	fsr2l,c
  9336  012CB8  0E01               	movlw	high _HMIBoard
  9337  012CBA  0100               	movlb	0	; () banked
  9338  012CBC  21C2               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9339  012CBE  6EDA               	movwf	fsr2h,c
  9340  012CC0  0E00               	movlw	0
  9341  012CC2  6EDF               	movwf	indf2,c
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;HMI.c: 247: in++;
  9345  012CC4  0100               	movlb	0	; () banked
  9346  012CC6  4BC1               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9347  012CC8  2BC2               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9348  012CCA                     l1212:
  9349  012CCA                     l10330:
  9350                           
  9351                           ; BSR set to: 0
  9352  012CCA  0100               	movlb	0	; () banked
  9353  012CCC  51C2               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9354  012CCE  E106               	bnz	l1215
  9355  012CD0  0E06               	movlw	6
  9356  012CD2  0100               	movlb	0	; () banked
  9357  012CD4  5DC1               	subwf	HMI_SetSegments@in& (0+255),w,b
  9358  012CD6  B0D8               	btfsc	status,0,c
  9359  012CD8  0012               	return	
  9360  012CDA  D7EA               	goto	l1213
  9361  012CDC                     l1215:
  9362                           
  9363                           ; BSR set to: 0
  9364  012CDC  0012               	return		;funcret
  9365  012CDE                     __end_of_HMI_SetSegments:
  9366                           	opt stack 0
  9367                           tosu	equ	0xFFF
  9368                           tosh	equ	0xFFE
  9369                           tosl	equ	0xFFD
  9370                           pclath	equ	0xFFA
  9371                           tblptru	equ	0xFF8
  9372                           tblptrh	equ	0xFF7
  9373                           tblptrl	equ	0xFF6
  9374                           tablat	equ	0xFF5
  9375                           prodh	equ	0xFF4
  9376                           prodl	equ	0xFF3
  9377                           postinc0	equ	0xFEE
  9378                           wreg	equ	0xFE8
  9379                           indf1	equ	0xFE7
  9380                           postdec1	equ	0xFE5
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           plusw2	equ	0xFDB
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function _ToSegment *****************
  9392 ;; Defined at:
  9393 ;;		line 284 in file "Library/Types.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  pCHR            1    wreg     unsigned char 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  pCHR            1    0[BANK0 ] unsigned char 
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  1    wreg      unsigned char 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;Total ram usage:        1 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    7
  9414 ;; This function calls:
  9415 ;;		Nothing
  9416 ;; This function is called by:
  9417 ;;		_HMI_SetSegments
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           	psect	text49
  9422  010A6A                     __ptext49:
  9423                           	opt stack 0
  9424  010A6A                     _ToSegment:
  9425                           	opt stack 13
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;incstack = 0
  9429                           ;ToSegment@pCHR stored from wreg
  9430  010A6A  0100               	movlb	0	; () banked
  9431  010A6C  6FBD               	movwf	ToSegment@pCHR& (0+255),b
  9432                           
  9433                           ;Types.c: 286: switch(pCHR)
  9434  010A6E  D07E               	goto	l853
  9435  010A70  0E3F               	movlw	63
  9436  010A72  0012               	return	
  9437  010A74  0E06               	movlw	6
  9438  010A76  0012               	return	
  9439  010A78  0E5B               	movlw	91
  9440  010A7A  0012               	return	
  9441  010A7C  0E4F               	movlw	79
  9442  010A7E  0012               	return	
  9443  010A80  0E66               	movlw	102
  9444  010A82  0012               	return	
  9445  010A84  0E6D               	movlw	109
  9446  010A86  0012               	return	
  9447  010A88  0E7D               	movlw	125
  9448  010A8A  0012               	return	
  9449  010A8C  0E07               	movlw	7
  9450  010A8E  0012               	return	
  9451  010A90  0E7F               	movlw	127
  9452  010A92  0012               	return	
  9453  010A94  0E6F               	movlw	111
  9454  010A96  0012               	return	
  9455  010A98  0E5F               	movlw	95
  9456  010A9A  0012               	return	
  9457  010A9C  0E7C               	movlw	124
  9458  010A9E  0012               	return	
  9459  010AA0  0E58               	movlw	88
  9460  010AA2  0012               	return	
  9461  010AA4  0E5E               	movlw	94
  9462  010AA6  0012               	return	
  9463  010AA8  0E7B               	movlw	123
  9464  010AAA  0012               	return	
  9465  010AAC  0E71               	movlw	113
  9466  010AAE  0012               	return	
  9467  010AB0  0E6F               	movlw	111
  9468  010AB2  0012               	return	
  9469  010AB4  0E74               	movlw	116
  9470  010AB6  0012               	return	
  9471  010AB8  0E04               	movlw	4
  9472  010ABA  0012               	return	
  9473  010ABC  0E0E               	movlw	14
  9474  010ABE  0012               	return	
  9475  010AC0  0E7A               	movlw	122
  9476  010AC2  0012               	return	
  9477  010AC4  0E06               	movlw	6
  9478  010AC6  0012               	return	
  9479  010AC8  0E14               	movlw	20
  9480  010ACA  0012               	return	
  9481  010ACC  0E54               	movlw	84
  9482  010ACE  0012               	return	
  9483  010AD0  0E5C               	movlw	92
  9484  010AD2  0012               	return	
  9485  010AD4  0E73               	movlw	115
  9486  010AD6  0012               	return	
  9487  010AD8  0E67               	movlw	103
  9488  010ADA  0012               	return	
  9489  010ADC  0E50               	movlw	80
  9490  010ADE  0012               	return	
  9491  010AE0  0E6D               	movlw	109
  9492  010AE2  0012               	return	
  9493  010AE4  0E78               	movlw	120
  9494  010AE6  0012               	return	
  9495  010AE8  0E1C               	movlw	28
  9496  010AEA  0012               	return	
  9497  010AEC  0E62               	movlw	98
  9498  010AEE  0012               	return	
  9499  010AF0  0E2A               	movlw	42
  9500  010AF2  0012               	return	
  9501  010AF4  0E64               	movlw	100
  9502  010AF6  0012               	return	
  9503  010AF8  0E6E               	movlw	110
  9504  010AFA  0012               	return	
  9505  010AFC  0E5B               	movlw	91
  9506  010AFE  0012               	return	
  9507  010B00  0E77               	movlw	119
  9508  010B02  0012               	return	
  9509  010B04  0E7F               	movlw	127
  9510  010B06  0012               	return	
  9511  010B08  0E39               	movlw	57
  9512  010B0A  0012               	return	
  9513  010B0C  0E3F               	movlw	63
  9514  010B0E  0012               	return	
  9515  010B10  0E79               	movlw	121
  9516  010B12  0012               	return	
  9517  010B14  0E71               	movlw	113
  9518  010B16  0012               	return	
  9519  010B18  0E3D               	movlw	61
  9520  010B1A  0012               	return	
  9521  010B1C  0E76               	movlw	118
  9522  010B1E  0012               	return	
  9523  010B20  0E06               	movlw	6
  9524  010B22  0012               	return	
  9525  010B24  0E1E               	movlw	30
  9526  010B26  0012               	return	
  9527  010B28  0E57               	movlw	87
  9528  010B2A  0012               	return	
  9529  010B2C  0E38               	movlw	56
  9530  010B2E  0012               	return	
  9531  010B30  0E76               	movlw	118
  9532  010B32  0012               	return	
  9533  010B34  0E76               	movlw	118
  9534  010B36  0012               	return	
  9535  010B38  0E3F               	movlw	63
  9536  010B3A  0012               	return	
  9537  010B3C  0E73               	movlw	115
  9538  010B3E  0012               	return	
  9539  010B40  0E3F               	movlw	63
  9540  010B42  0012               	return	
  9541  010B44  0E77               	movlw	119
  9542  010B46  0012               	return	
  9543  010B48  0E6D               	movlw	109
  9544  010B4A  0012               	return	
  9545  010B4C  0E31               	movlw	49
  9546  010B4E  0012               	return	
  9547  010B50  0E3E               	movlw	62
  9548  010B52  0012               	return	
  9549  010B54  0E3E               	movlw	62
  9550  010B56  0012               	return	
  9551  010B58  0E7E               	movlw	126
  9552  010B5A  0012               	return	
  9553  010B5C  0E76               	movlw	118
  9554  010B5E  0012               	return	
  9555  010B60  0E66               	movlw	102
  9556  010B62  0012               	return	
  9557  010B64  0E5B               	movlw	91
  9558  010B66  0012               	return	
  9559  010B68  0E80               	movlw	128
  9560  010B6A  0012               	return	
  9561  010B6C                     l853:
  9562  010B6C  0100               	movlb	0	; () banked
  9563  010B6E  51BD               	movf	ToSegment@pCHR& (0+255),w,b
  9564                           
  9565                           ; Switch size 1, requested type "space"
  9566                           ; Number of cases is 63, Range of values is 46 to 122
  9567                           ; switch strategies available:
  9568                           ; Name         Instructions Cycles
  9569                           ; simple_byte          190    96 (average)
  9570                           ;	Chosen strategy is simple_byte
  9571  010B70  0A2E               	xorlw	46	; case 46
  9572  010B72  B4D8               	btfsc	status,2,c
  9573  010B74  D7F9               	goto	l917
  9574  010B76  0A1E               	xorlw	30	; case 48
  9575  010B78  B4D8               	btfsc	status,2,c
  9576  010B7A  D77A               	goto	l854
  9577  010B7C  0A01               	xorlw	1	; case 49
  9578  010B7E  B4D8               	btfsc	status,2,c
  9579  010B80  D779               	goto	l856
  9580  010B82  0A03               	xorlw	3	; case 50
  9581  010B84  B4D8               	btfsc	status,2,c
  9582  010B86  D778               	goto	l857
  9583  010B88  0A01               	xorlw	1	; case 51
  9584  010B8A  B4D8               	btfsc	status,2,c
  9585  010B8C  D777               	goto	l858
  9586  010B8E  0A07               	xorlw	7	; case 52
  9587  010B90  B4D8               	btfsc	status,2,c
  9588  010B92  D776               	goto	l859
  9589  010B94  0A01               	xorlw	1	; case 53
  9590  010B96  B4D8               	btfsc	status,2,c
  9591  010B98  D775               	goto	l860
  9592  010B9A  0A03               	xorlw	3	; case 54
  9593  010B9C  B4D8               	btfsc	status,2,c
  9594  010B9E  D774               	goto	l861
  9595  010BA0  0A01               	xorlw	1	; case 55
  9596  010BA2  B4D8               	btfsc	status,2,c
  9597  010BA4  D773               	goto	l862
  9598  010BA6  0A0F               	xorlw	15	; case 56
  9599  010BA8  B4D8               	btfsc	status,2,c
  9600  010BAA  D772               	goto	l863
  9601  010BAC  0A01               	xorlw	1	; case 57
  9602  010BAE  B4D8               	btfsc	status,2,c
  9603  010BB0  D771               	goto	l864
  9604  010BB2  0A78               	xorlw	120	; case 65
  9605  010BB4  B4D8               	btfsc	status,2,c
  9606  010BB6  D7A4               	goto	l891
  9607  010BB8  0A03               	xorlw	3	; case 66
  9608  010BBA  B4D8               	btfsc	status,2,c
  9609  010BBC  D7A3               	goto	l892
  9610  010BBE  0A01               	xorlw	1	; case 67
  9611  010BC0  B4D8               	btfsc	status,2,c
  9612  010BC2  D7A2               	goto	l893
  9613  010BC4  0A07               	xorlw	7	; case 68
  9614  010BC6  B4D8               	btfsc	status,2,c
  9615  010BC8  D7A1               	goto	l894
  9616  010BCA  0A01               	xorlw	1	; case 69
  9617  010BCC  B4D8               	btfsc	status,2,c
  9618  010BCE  D7A0               	goto	l895
  9619  010BD0  0A03               	xorlw	3	; case 70
  9620  010BD2  B4D8               	btfsc	status,2,c
  9621  010BD4  D79F               	goto	l896
  9622  010BD6  0A01               	xorlw	1	; case 71
  9623  010BD8  B4D8               	btfsc	status,2,c
  9624  010BDA  D79E               	goto	l897
  9625  010BDC  0A0F               	xorlw	15	; case 72
  9626  010BDE  B4D8               	btfsc	status,2,c
  9627  010BE0  D79D               	goto	l898
  9628  010BE2  0A01               	xorlw	1	; case 73
  9629  010BE4  B4D8               	btfsc	status,2,c
  9630  010BE6  D79C               	goto	l899
  9631  010BE8  0A03               	xorlw	3	; case 74
  9632  010BEA  B4D8               	btfsc	status,2,c
  9633  010BEC  D79B               	goto	l900
  9634  010BEE  0A01               	xorlw	1	; case 75
  9635  010BF0  B4D8               	btfsc	status,2,c
  9636  010BF2  D79A               	goto	l901
  9637  010BF4  0A07               	xorlw	7	; case 76
  9638  010BF6  B4D8               	btfsc	status,2,c
  9639  010BF8  D799               	goto	l902
  9640  010BFA  0A01               	xorlw	1	; case 77
  9641  010BFC  B4D8               	btfsc	status,2,c
  9642  010BFE  D798               	goto	l903
  9643  010C00  0A03               	xorlw	3	; case 78
  9644  010C02  B4D8               	btfsc	status,2,c
  9645  010C04  D797               	goto	l904
  9646  010C06  0A01               	xorlw	1	; case 79
  9647  010C08  B4D8               	btfsc	status,2,c
  9648  010C0A  D796               	goto	l905
  9649  010C0C  0A1F               	xorlw	31	; case 80
  9650  010C0E  B4D8               	btfsc	status,2,c
  9651  010C10  D795               	goto	l906
  9652  010C12  0A01               	xorlw	1	; case 81
  9653  010C14  B4D8               	btfsc	status,2,c
  9654  010C16  D794               	goto	l907
  9655  010C18  0A03               	xorlw	3	; case 82
  9656  010C1A  B4D8               	btfsc	status,2,c
  9657  010C1C  D793               	goto	l908
  9658  010C1E  0A01               	xorlw	1	; case 83
  9659  010C20  B4D8               	btfsc	status,2,c
  9660  010C22  D792               	goto	l909
  9661  010C24  0A07               	xorlw	7	; case 84
  9662  010C26  B4D8               	btfsc	status,2,c
  9663  010C28  D791               	goto	l910
  9664  010C2A  0A01               	xorlw	1	; case 85
  9665  010C2C  B4D8               	btfsc	status,2,c
  9666  010C2E  D790               	goto	l911
  9667  010C30  0A03               	xorlw	3	; case 86
  9668  010C32  B4D8               	btfsc	status,2,c
  9669  010C34  D78F               	goto	l912
  9670  010C36  0A01               	xorlw	1	; case 87
  9671  010C38  B4D8               	btfsc	status,2,c
  9672  010C3A  D78E               	goto	l913
  9673  010C3C  0A0F               	xorlw	15	; case 88
  9674  010C3E  B4D8               	btfsc	status,2,c
  9675  010C40  D78D               	goto	l914
  9676  010C42  0A01               	xorlw	1	; case 89
  9677  010C44  B4D8               	btfsc	status,2,c
  9678  010C46  D78C               	goto	l915
  9679  010C48  0A03               	xorlw	3	; case 90
  9680  010C4A  B4D8               	btfsc	status,2,c
  9681  010C4C  D78B               	goto	l916
  9682  010C4E  0A3B               	xorlw	59	; case 97
  9683  010C50  B4D8               	btfsc	status,2,c
  9684  010C52  D722               	goto	l865
  9685  010C54  0A03               	xorlw	3	; case 98
  9686  010C56  B4D8               	btfsc	status,2,c
  9687  010C58  D721               	goto	l866
  9688  010C5A  0A01               	xorlw	1	; case 99
  9689  010C5C  B4D8               	btfsc	status,2,c
  9690  010C5E  D720               	goto	l867
  9691  010C60  0A07               	xorlw	7	; case 100
  9692  010C62  B4D8               	btfsc	status,2,c
  9693  010C64  D71F               	goto	l868
  9694  010C66  0A01               	xorlw	1	; case 101
  9695  010C68  B4D8               	btfsc	status,2,c
  9696  010C6A  D71E               	goto	l869
  9697  010C6C  0A03               	xorlw	3	; case 102
  9698  010C6E  B4D8               	btfsc	status,2,c
  9699  010C70  D71D               	goto	l870
  9700  010C72  0A01               	xorlw	1	; case 103
  9701  010C74  B4D8               	btfsc	status,2,c
  9702  010C76  D71C               	goto	l871
  9703  010C78  0A0F               	xorlw	15	; case 104
  9704  010C7A  B4D8               	btfsc	status,2,c
  9705  010C7C  D71B               	goto	l872
  9706  010C7E  0A01               	xorlw	1	; case 105
  9707  010C80  B4D8               	btfsc	status,2,c
  9708  010C82  D71A               	goto	l873
  9709  010C84  0A03               	xorlw	3	; case 106
  9710  010C86  B4D8               	btfsc	status,2,c
  9711  010C88  D719               	goto	l874
  9712  010C8A  0A01               	xorlw	1	; case 107
  9713  010C8C  B4D8               	btfsc	status,2,c
  9714  010C8E  D718               	goto	l875
  9715  010C90  0A07               	xorlw	7	; case 108
  9716  010C92  B4D8               	btfsc	status,2,c
  9717  010C94  D717               	goto	l876
  9718  010C96  0A01               	xorlw	1	; case 109
  9719  010C98  B4D8               	btfsc	status,2,c
  9720  010C9A  D716               	goto	l877
  9721  010C9C  0A03               	xorlw	3	; case 110
  9722  010C9E  B4D8               	btfsc	status,2,c
  9723  010CA0  D715               	goto	l878
  9724  010CA2  0A01               	xorlw	1	; case 111
  9725  010CA4  B4D8               	btfsc	status,2,c
  9726  010CA6  D714               	goto	l879
  9727  010CA8  0A1F               	xorlw	31	; case 112
  9728  010CAA  B4D8               	btfsc	status,2,c
  9729  010CAC  D713               	goto	l880
  9730  010CAE  0A01               	xorlw	1	; case 113
  9731  010CB0  B4D8               	btfsc	status,2,c
  9732  010CB2  D712               	goto	l881
  9733  010CB4  0A03               	xorlw	3	; case 114
  9734  010CB6  B4D8               	btfsc	status,2,c
  9735  010CB8  D711               	goto	l882
  9736  010CBA  0A01               	xorlw	1	; case 115
  9737  010CBC  B4D8               	btfsc	status,2,c
  9738  010CBE  D710               	goto	l883
  9739  010CC0  0A07               	xorlw	7	; case 116
  9740  010CC2  B4D8               	btfsc	status,2,c
  9741  010CC4  D70F               	goto	l884
  9742  010CC6  0A01               	xorlw	1	; case 117
  9743  010CC8  B4D8               	btfsc	status,2,c
  9744  010CCA  D70E               	goto	l885
  9745  010CCC  0A03               	xorlw	3	; case 118
  9746  010CCE  B4D8               	btfsc	status,2,c
  9747  010CD0  D70D               	goto	l886
  9748  010CD2  0A01               	xorlw	1	; case 119
  9749  010CD4  B4D8               	btfsc	status,2,c
  9750  010CD6  D70C               	goto	l887
  9751  010CD8  0A0F               	xorlw	15	; case 120
  9752  010CDA  B4D8               	btfsc	status,2,c
  9753  010CDC  D70B               	goto	l888
  9754  010CDE  0A01               	xorlw	1	; case 121
  9755  010CE0  B4D8               	btfsc	status,2,c
  9756  010CE2  D70A               	goto	l889
  9757  010CE4  0A03               	xorlw	3	; case 122
  9758  010CE6  B4D8               	btfsc	status,2,c
  9759  010CE8  D709               	goto	l890
  9760                           
  9761                           ;Types.c: 354: return 0;
  9762                           
  9763                           ; BSR set to: 0
  9764  010CEA  0E00               	movlw	0
  9765  010CEC  0012               	return	
  9766  010CEE                     __end_of_ToSegment:
  9767                           	opt stack 0
  9768                           tosu	equ	0xFFF
  9769                           tosh	equ	0xFFE
  9770                           tosl	equ	0xFFD
  9771                           pclath	equ	0xFFA
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           postinc0	equ	0xFEE
  9779                           wreg	equ	0xFE8
  9780                           indf1	equ	0xFE7
  9781                           postdec1	equ	0xFE5
  9782                           fsr1h	equ	0xFE2
  9783                           fsr1l	equ	0xFE1
  9784                           indf2	equ	0xFDF
  9785                           postinc2	equ	0xFDE
  9786                           postdec2	equ	0xFDD
  9787                           plusw2	equ	0xFDB
  9788                           fsr2h	equ	0xFDA
  9789                           fsr2l	equ	0xFD9
  9790                           status	equ	0xFD8
  9791                           
  9792 ;; *************** function _HMI_SetDown *****************
  9793 ;; Defined at:
  9794 ;;		line 180 in file "HMI.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;  pValue          1    wreg     unsigned char 
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;  pValue          1    0[BANK0 ] unsigned char 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      void 
  9801 ;; Registers used:
  9802 ;;		wreg
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;Total ram usage:        1 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    7
  9815 ;; This function calls:
  9816 ;;		Nothing
  9817 ;; This function is called by:
  9818 ;;		_Event_HMI_DownButton
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           	psect	text50
  9823  014AFC                     __ptext50:
  9824                           	opt stack 0
  9825  014AFC                     _HMI_SetDown:
  9826                           	opt stack 15
  9827                           
  9828                           ;incstack = 0
  9829                           ;HMI_SetDown@pValue stored from wreg
  9830  014AFC  0100               	movlb	0	; () banked
  9831  014AFE  6FBD               	movwf	HMI_SetDown@pValue& (0+255),b
  9832                           
  9833                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
  9834  014B00  0100               	movlb	0	; () banked
  9835  014B02  B1BD               	btfsc	HMI_SetDown@pValue& (0+255),0,b
  9836  014B04  D003               	bra	u6865
  9837  014B06  0101               	movlb	1	; () banked
  9838  014B08  932D               	bcf	(_HMIBoard+6)& (0+255),1,b
  9839  014B0A  D002               	bra	u6866
  9840  014B0C                     u6865:
  9841  014B0C  0101               	movlb	1	; () banked
  9842  014B0E  832D               	bsf	(_HMIBoard+6)& (0+255),1,b
  9843  014B10                     u6866:
  9844                           
  9845                           ; BSR set to: 1
  9846  014B10  0012               	return		;funcret
  9847  014B12                     __end_of_HMI_SetDown:
  9848                           	opt stack 0
  9849                           tosu	equ	0xFFF
  9850                           tosh	equ	0xFFE
  9851                           tosl	equ	0xFFD
  9852                           pclath	equ	0xFFA
  9853                           tblptru	equ	0xFF8
  9854                           tblptrh	equ	0xFF7
  9855                           tblptrl	equ	0xFF6
  9856                           tablat	equ	0xFF5
  9857                           prodh	equ	0xFF4
  9858                           prodl	equ	0xFF3
  9859                           postinc0	equ	0xFEE
  9860                           wreg	equ	0xFE8
  9861                           indf1	equ	0xFE7
  9862                           postdec1	equ	0xFE5
  9863                           fsr1h	equ	0xFE2
  9864                           fsr1l	equ	0xFE1
  9865                           indf2	equ	0xFDF
  9866                           postinc2	equ	0xFDE
  9867                           postdec2	equ	0xFDD
  9868                           plusw2	equ	0xFDB
  9869                           fsr2h	equ	0xFDA
  9870                           fsr2l	equ	0xFD9
  9871                           status	equ	0xFD8
  9872                           
  9873 ;; *************** function _HMI_SetBar *****************
  9874 ;; Defined at:
  9875 ;;		line 205 in file "HMI.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  pValue          1    wreg     unsigned char 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  pValue          1    0[BANK0 ] unsigned char 
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  1    wreg      void 
  9882 ;; Registers used:
  9883 ;;		wreg
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;Total ram usage:        1 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    7
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		_Event_DIPSwitch
  9900 ;;		_Event_HMI_DIPSwitch
  9901 ;;		_Event_HMI_LeftButton
  9902 ;;		_Event_HMI_RightButton
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text51
  9907  014B8A                     __ptext51:
  9908                           	opt stack 0
  9909  014B8A                     _HMI_SetBar:
  9910                           	opt stack 15
  9911                           
  9912                           ; BSR set to: 1
  9913                           ;incstack = 0
  9914                           ;HMI_SetBar@pValue stored from wreg
  9915  014B8A  0100               	movlb	0	; () banked
  9916  014B8C  6FBD               	movwf	HMI_SetBar@pValue& (0+255),b
  9917                           
  9918                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9919  014B8E  C0BD  F12E         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9920  014B92  0012               	return		;funcret
  9921  014B94                     __end_of_HMI_SetBar:
  9922                           	opt stack 0
  9923                           tosu	equ	0xFFF
  9924                           tosh	equ	0xFFE
  9925                           tosl	equ	0xFFD
  9926                           pclath	equ	0xFFA
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           postinc0	equ	0xFEE
  9934                           wreg	equ	0xFE8
  9935                           indf1	equ	0xFE7
  9936                           postdec1	equ	0xFE5
  9937                           fsr1h	equ	0xFE2
  9938                           fsr1l	equ	0xFE1
  9939                           indf2	equ	0xFDF
  9940                           postinc2	equ	0xFDE
  9941                           postdec2	equ	0xFDD
  9942                           plusw2	equ	0xFDB
  9943                           fsr2h	equ	0xFDA
  9944                           fsr2l	equ	0xFD9
  9945                           status	equ	0xFD8
  9946                           
  9947 ;; *************** function _HMI_GetBar *****************
  9948 ;; Defined at:
  9949 ;;		line 209 in file "HMI.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      unsigned char 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;Total ram usage:        0 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    7
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_Event_DIPSwitch
  9974 ;;		_Event_HMI_DIPSwitch
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text52
  9979  014BB6                     __ptext52:
  9980                           	opt stack 0
  9981  014BB6                     _HMI_GetBar:
  9982                           	opt stack 15
  9983                           
  9984                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9985                           
  9986                           ;incstack = 0
  9987  014BB6  0101               	movlb	1	; () banked
  9988  014BB8  512E               	movf	(_HMIBoard+7)& (0+255),w,b
  9989  014BBA  0012               	return	
  9990  014BBC                     __end_of_HMI_GetBar:
  9991                           	opt stack 0
  9992                           tosu	equ	0xFFF
  9993                           tosh	equ	0xFFE
  9994                           tosl	equ	0xFFD
  9995                           pclath	equ	0xFFA
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           postinc0	equ	0xFEE
 10003                           wreg	equ	0xFE8
 10004                           indf1	equ	0xFE7
 10005                           postdec1	equ	0xFE5
 10006                           fsr1h	equ	0xFE2
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           plusw2	equ	0xFDB
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _Console_SetForecolour *****************
 10017 ;; Defined at:
 10018 ;;		line 286 in file "Library/Console.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;  pColour         2    0[BANK0 ] unsigned short 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;		None
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		None
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;Total ram usage:        2 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    7
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_displaySID
 10043 ;;		_displayMode
 10044 ;;		_continuousMode
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           	psect	text53
 10049  014B94                     __ptext53:
 10050                           	opt stack 0
 10051  014B94                     _Console_SetForecolour:
 10052                           	opt stack 19
 10053                           
 10054                           ;Console.c: 289: gForecolour = pColour;
 10055                           
 10056                           ; BSR set to: 1
 10057                           ;incstack = 0
 10058  014B94  C0BD  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
 10059  014B98  C0BE  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 10060  014B9C  0012               	return		;funcret
 10061  014B9E                     __end_of_Console_SetForecolour:
 10062                           	opt stack 0
 10063                           tosu	equ	0xFFF
 10064                           tosh	equ	0xFFE
 10065                           tosl	equ	0xFFD
 10066                           pclath	equ	0xFFA
 10067                           tblptru	equ	0xFF8
 10068                           tblptrh	equ	0xFF7
 10069                           tblptrl	equ	0xFF6
 10070                           tablat	equ	0xFF5
 10071                           prodh	equ	0xFF4
 10072                           prodl	equ	0xFF3
 10073                           postinc0	equ	0xFEE
 10074                           wreg	equ	0xFE8
 10075                           indf1	equ	0xFE7
 10076                           postdec1	equ	0xFE5
 10077                           fsr1h	equ	0xFE2
 10078                           fsr1l	equ	0xFE1
 10079                           indf2	equ	0xFDF
 10080                           postinc2	equ	0xFDE
 10081                           postdec2	equ	0xFDD
 10082                           plusw2	equ	0xFDB
 10083                           fsr2h	equ	0xFDA
 10084                           fsr2l	equ	0xFD9
 10085                           status	equ	0xFD8
 10086                           
 10087 ;; *************** function _Console_Render *****************
 10088 ;; Defined at:
 10089 ;;		line 377 in file "Library/Console.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;		None
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;  lCursor         4   38[BANK0 ] struct Point
 10094 ;;  y               1   43[BANK0 ] unsigned char 
 10095 ;;  x               1   42[BANK0 ] unsigned char 
 10096 ;;  temp            1   37[BANK0 ] unsigned char 
 10097 ;;  Temp            2    0        unsigned short 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  1    wreg      void 
 10100 ;; Registers used:
 10101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;Total ram usage:        9 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:   11
 10114 ;; This function calls:
 10115 ;;		_Console_MakeField
 10116 ;;		_LCD_DrawField
 10117 ;;		_LCD_FillRectangle
 10118 ;; This function is called by:
 10119 ;;		_displayText
 10120 ;;		_continuousMode
 10121 ;;		_nullMode
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           	psect	text54
 10126  0113A0                     __ptext54:
 10127                           	opt stack 0
 10128  0113A0                     _Console_Render:
 10129                           	opt stack 16
 10130                           
 10131                           ;Console.c: 379: Colour Temp;
 10132                           ;Console.c: 380: if (change)
 10133                           
 10134                           ;incstack = 0
 10135  0113A0  0100               	movlb	0	; () banked
 10136  0113A2  51FF               	movf	_change& (0+255),w,b
 10137  0113A4  B4D8               	btfsc	status,2,c
 10138  0113A6  0012               	return	
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;Console.c: 381: {
 10142                           ;Console.c: 382: UINT8 x, y, temp;
 10143                           ;Console.c: 383: Point lCursor = {6,6};
 10144  0113A8  C1C9  F0E3         	movff	Console_Render@F6956,Console_Render@lCursor
 10145  0113AC  C1CA  F0E4         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10146  0113B0  C1CB  F0E5         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10147  0113B4  C1CC  F0E6         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;Console.c: 385: if (clearall)
 10151  0113B8  0100               	movlb	0	; () banked
 10152  0113BA  517C               	movf	_clearall& (0+255),w,b
 10153  0113BC  B4D8               	btfsc	status,2,c
 10154  0113BE  D005               	goto	l1056
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;Console.c: 386: {
 10158                           ;Console.c: 389: temp = lBufferY;
 10159  0113C0  C07A  F0E2         	movff	_lBufferY,Console_Render@temp
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10163  0113C4  0E0F               	movlw	15
 10164  0113C6  0100               	movlb	0	; () banked
 10165  0113C8  6F7A               	movwf	_lBufferY& (0+255),b
 10166  0113CA                     l1056:
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;Console.c: 391: }
 10170                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10171  0113CA  0E00               	movlw	0
 10172  0113CC  0100               	movlb	0	; () banked
 10173  0113CE  6FE8               	movwf	Console_Render@y& (0+255),b
 10174  0113D0  D0DF               	goto	l1057
 10175  0113D2                     
 10176                           ; BSR set to: 0
 10177                           ;Console.c: 394: {
 10178                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10179                           
 10180                           ; BSR set to: 0
 10181  0113D2  0100               	movlb	0	; () banked
 10182  0113D4  51E8               	movf	Console_Render@y& (0+255),w,b
 10183  0113D6  0D02               	mullw	2
 10184  0113D8  0E00               	movlw	low _lCBuffer
 10185  0113DA  24F3               	addwf	prodl,w,c
 10186  0113DC  6ED9               	movwf	fsr2l,c
 10187  0113DE  0E01               	movlw	high _lCBuffer
 10188  0113E0  20F4               	addwfc	prodh,w,c
 10189  0113E2  6EDA               	movwf	fsr2h,c
 10190  0113E4  CFDE F0FD          	movff	postinc2,_gForecolour
 10191  0113E8  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10195  0113EC  0E00               	movlw	0
 10196  0113EE  0100               	movlb	0	; () banked
 10197  0113F0  6FE7               	movwf	Console_Render@x& (0+255),b
 10198  0113F2                     l11490:
 10199                           
 10200                           ; BSR set to: 0
 10201  0113F2  0E13               	movlw	19
 10202  0113F4  0100               	movlb	0	; () banked
 10203  0113F6  65E7               	cpfsgt	Console_Render@x& (0+255),b
 10204  0113F8  D001               	goto	l1059
 10205  0113FA  D0BE               	goto	u7900
 10206  0113FC                     l1059:
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;Console.c: 397: {
 10210                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10211                           
 10212                           ; BSR set to: 0
 10213  0113FC  0100               	movlb	0	; () banked
 10214  0113FE  51E8               	movf	Console_Render@y& (0+255),w,b
 10215  011400  0D14               	mullw	20
 10216  011402  0E46               	movlw	low _lBuffer
 10217  011404  0100               	movlb	0	; () banked
 10218  011406  6FE0               	movwf	??_Console_Render& (0+255),b
 10219  011408  0E02               	movlw	high _lBuffer
 10220  01140A  0100               	movlb	0	; () banked
 10221  01140C  6FE1               	movwf	(??_Console_Render+1)& (0+255),b
 10222  01140E  50F3               	movf	prodl,w,c
 10223  011410  0100               	movlb	0	; () banked
 10224  011412  27E0               	addwf	??_Console_Render& (0+255),f,b
 10225  011414  50F4               	movf	prodh,w,c
 10226  011416  0100               	movlb	0	; () banked
 10227  011418  23E1               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10228  01141A  0100               	movlb	0	; () banked
 10229  01141C  51E7               	movf	Console_Render@x& (0+255),w,b
 10230  01141E  0D01               	mullw	1
 10231  011420  50F3               	movf	prodl,w,c
 10232  011422  0100               	movlb	0	; () banked
 10233  011424  25E0               	addwf	??_Console_Render& (0+255),w,b
 10234  011426  6ED9               	movwf	fsr2l,c
 10235  011428  50F4               	movf	prodh,w,c
 10236  01142A  0100               	movlb	0	; () banked
 10237  01142C  21E1               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10238  01142E  6EDA               	movwf	fsr2h,c
 10239  011430  AEDF               	btfss	indf2,7,c
 10240  011432  D09A               	goto	l1063
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;Console.c: 399: {
 10244                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10245  011434  0100               	movlb	0	; () banked
 10246  011436  51E8               	movf	Console_Render@y& (0+255),w,b
 10247  011438  0D14               	mullw	20
 10248  01143A  0E46               	movlw	low _lBuffer
 10249  01143C  0100               	movlb	0	; () banked
 10250  01143E  6FE0               	movwf	??_Console_Render& (0+255),b
 10251  011440  0E02               	movlw	high _lBuffer
 10252  011442  0100               	movlb	0	; () banked
 10253  011444  6FE1               	movwf	(??_Console_Render+1)& (0+255),b
 10254  011446  50F3               	movf	prodl,w,c
 10255  011448  0100               	movlb	0	; () banked
 10256  01144A  27E0               	addwf	??_Console_Render& (0+255),f,b
 10257  01144C  50F4               	movf	prodh,w,c
 10258  01144E  0100               	movlb	0	; () banked
 10259  011450  23E1               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10260  011452  0100               	movlb	0	; () banked
 10261  011454  51E7               	movf	Console_Render@x& (0+255),w,b
 10262  011456  0D01               	mullw	1
 10263  011458  50F3               	movf	prodl,w,c
 10264  01145A  0100               	movlb	0	; () banked
 10265  01145C  25E0               	addwf	??_Console_Render& (0+255),w,b
 10266  01145E  6ED9               	movwf	fsr2l,c
 10267  011460  50F4               	movf	prodh,w,c
 10268  011462  0100               	movlb	0	; () banked
 10269  011464  21E1               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10270  011466  6EDA               	movwf	fsr2h,c
 10271  011468  0E7F               	movlw	127
 10272  01146A  16DF               	andwf	indf2,f,c
 10273                           
 10274                           ;Console.c: 401: if (lBuffer[y][x])
 10275  01146C  0100               	movlb	0	; () banked
 10276  01146E  51E8               	movf	Console_Render@y& (0+255),w,b
 10277  011470  0D14               	mullw	20
 10278  011472  0E46               	movlw	low _lBuffer
 10279  011474  0100               	movlb	0	; () banked
 10280  011476  6FE0               	movwf	??_Console_Render& (0+255),b
 10281  011478  0E02               	movlw	high _lBuffer
 10282  01147A  0100               	movlb	0	; () banked
 10283  01147C  6FE1               	movwf	(??_Console_Render+1)& (0+255),b
 10284  01147E  50F3               	movf	prodl,w,c
 10285  011480  0100               	movlb	0	; () banked
 10286  011482  27E0               	addwf	??_Console_Render& (0+255),f,b
 10287  011484  50F4               	movf	prodh,w,c
 10288  011486  0100               	movlb	0	; () banked
 10289  011488  23E1               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10290  01148A  0100               	movlb	0	; () banked
 10291  01148C  51E7               	movf	Console_Render@x& (0+255),w,b
 10292  01148E  0D01               	mullw	1
 10293  011490  50F3               	movf	prodl,w,c
 10294  011492  0100               	movlb	0	; () banked
 10295  011494  25E0               	addwf	??_Console_Render& (0+255),w,b
 10296  011496  6ED9               	movwf	fsr2l,c
 10297  011498  50F4               	movf	prodh,w,c
 10298  01149A  0100               	movlb	0	; () banked
 10299  01149C  21E1               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10300  01149E  6EDA               	movwf	fsr2h,c
 10301  0114A0  50DF               	movf	indf2,w,c
 10302  0114A2  B4D8               	btfsc	status,2,c
 10303  0114A4  D04A               	goto	l1062
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;Console.c: 402: {
 10307                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10308  0114A6  C073  F0C6         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10309  0114AA  C074  F0C7         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10310  0114AE  C0E3  F0C8         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10311  0114B2  C0E4  F0C9         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10312  0114B6  C0E5  F0CA         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10313  0114BA  C0E6  F0CB         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10314  0114BE  C0F9  F0CC         	movff	_gCharSize,LCD_FillRectangle@pSize
 10315  0114C2  C0FA  F0CD         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10316  0114C6  C0FB  F0CE         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10317  0114CA  C0FC  F0CF         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10318  0114CE  EC9F  F09C         	call	_LCD_FillRectangle	;wreg free
 10319                           
 10320                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10321  0114D2  0100               	movlb	0	; () banked
 10322  0114D4  51E8               	movf	Console_Render@y& (0+255),w,b
 10323  0114D6  0D14               	mullw	20
 10324  0114D8  0E46               	movlw	low _lBuffer
 10325  0114DA  0100               	movlb	0	; () banked
 10326  0114DC  6FE0               	movwf	??_Console_Render& (0+255),b
 10327  0114DE  0E02               	movlw	high _lBuffer
 10328  0114E0  0100               	movlb	0	; () banked
 10329  0114E2  6FE1               	movwf	(??_Console_Render+1)& (0+255),b
 10330  0114E4  50F3               	movf	prodl,w,c
 10331  0114E6  0100               	movlb	0	; () banked
 10332  0114E8  27E0               	addwf	??_Console_Render& (0+255),f,b
 10333  0114EA  50F4               	movf	prodh,w,c
 10334  0114EC  0100               	movlb	0	; () banked
 10335  0114EE  23E1               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10336  0114F0  0100               	movlb	0	; () banked
 10337  0114F2  51E7               	movf	Console_Render@x& (0+255),w,b
 10338  0114F4  0D01               	mullw	1
 10339  0114F6  50F3               	movf	prodl,w,c
 10340  0114F8  0100               	movlb	0	; () banked
 10341  0114FA  25E0               	addwf	??_Console_Render& (0+255),w,b
 10342  0114FC  6ED9               	movwf	fsr2l,c
 10343  0114FE  50F4               	movf	prodh,w,c
 10344  011500  0100               	movlb	0	; () banked
 10345  011502  21E1               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10346  011504  6EDA               	movwf	fsr2h,c
 10347  011506  50DF               	movf	indf2,w,c
 10348  011508  ECC2  F093         	call	_Console_MakeField
 10349  01150C  C0C2  F0CF         	movff	?_Console_MakeField,LCD_DrawField@pField
 10350  011510  C0C3  F0D0         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10351  011514  C0E3  F0D1         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10352  011518  C0E4  F0D2         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10353  01151C  C0E5  F0D3         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10354  011520  C0E6  F0D4         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10355  011524  C0F9  F0D5         	movff	_gCharSize,LCD_DrawField@pSize
 10356  011528  C0FA  F0D6         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10357  01152C  C0FB  F0D7         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10358  011530  C0FC  F0D8         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10359  011534  ECC4  F098         	call	_LCD_DrawField	;wreg free
 10360                           
 10361                           ;Console.c: 405: }
 10362  011538  D017               	goto	l1063
 10363  01153A                     l1062:
 10364                           
 10365                           ;Console.c: 406: else
 10366                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10367  01153A  0E00               	movlw	0
 10368  01153C  0100               	movlb	0	; () banked
 10369  01153E  6FC7               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10370  011540  0E00               	movlw	0
 10371  011542  6FC6               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10372  011544  C0E3  F0C8         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10373  011548  C0E4  F0C9         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10374  01154C  C0E5  F0CA         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10375  011550  C0E6  F0CB         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10376  011554  C0F9  F0CC         	movff	_gCharSize,LCD_FillRectangle@pSize
 10377  011558  C0FA  F0CD         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10378  01155C  C0FB  F0CE         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10379  011560  C0FC  F0CF         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10380  011564  EC9F  F09C         	call	_LCD_FillRectangle	;wreg free
 10381  011568                     l1063:
 10382                           
 10383                           ;Console.c: 408: }
 10384                           ;Console.c: 409: lCursor.x += (5 + 1);
 10385  011568  0E06               	movlw	6
 10386  01156A  0100               	movlb	0	; () banked
 10387  01156C  27E3               	addwf	Console_Render@lCursor& (0+255),f,b
 10388  01156E  0E00               	movlw	0
 10389  011570  23E4               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10390                           
 10391                           ; BSR set to: 0
 10392  011572  0100               	movlb	0	; () banked
 10393  011574  2BE7               	incf	Console_Render@x& (0+255),f,b
 10394  011576  D73D               	goto	l11490
 10395  011578                     u7900:
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;Console.c: 410: }
 10399                           ;Console.c: 411: lCursor.y += (7 + 1);
 10400                           
 10401                           ; BSR set to: 0
 10402  011578  0E08               	movlw	8
 10403  01157A  0100               	movlb	0	; () banked
 10404  01157C  27E5               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10405  01157E  0E00               	movlw	0
 10406  011580  23E6               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;Console.c: 412: lCursor.x = 6;
 10410  011582  0E00               	movlw	0
 10411  011584  0100               	movlb	0	; () banked
 10412  011586  6FE4               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10413  011588  0E06               	movlw	6
 10414  01158A  6FE3               	movwf	Console_Render@lCursor& (0+255),b
 10415                           
 10416                           ; BSR set to: 0
 10417  01158C  0100               	movlb	0	; () banked
 10418  01158E  2BE8               	incf	Console_Render@y& (0+255),f,b
 10419  011590                     l1057:
 10420                           
 10421                           ; BSR set to: 0
 10422                           
 10423                           ; BSR set to: 0
 10424  011590  0100               	movlb	0	; () banked
 10425  011592  51E8               	movf	Console_Render@y& (0+255),w,b
 10426  011594  0100               	movlb	0	; () banked
 10427  011596  5D7A               	subwf	_lBufferY& (0+255),w,b
 10428  011598  B0D8               	btfsc	status,0,c
 10429  01159A  D71B               	goto	l1058
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;Console.c: 413: }
 10433                           ;Console.c: 415: if (clearall)
 10434                           
 10435                           ; BSR set to: 0
 10436  01159C  0100               	movlb	0	; () banked
 10437  01159E  517C               	movf	_clearall& (0+255),w,b
 10438  0115A0  B4D8               	btfsc	status,2,c
 10439  0115A2  0012               	return	
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;Console.c: 416: {
 10443                           ;Console.c: 417: clearall = 0;
 10444  0115A4  0E00               	movlw	0
 10445  0115A6  0100               	movlb	0	; () banked
 10446  0115A8  6F7C               	movwf	_clearall& (0+255),b
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;Console.c: 418: lBufferY = temp;
 10450  0115AA  C0E2  F07A         	movff	Console_Render@temp,_lBufferY
 10451                           
 10452                           ; BSR set to: 0
 10453  0115AE  0012               	return	
 10454  0115B0                     __end_of_Console_Render:
 10455                           	opt stack 0
 10456                           tosu	equ	0xFFF
 10457                           tosh	equ	0xFFE
 10458                           tosl	equ	0xFFD
 10459                           pclath	equ	0xFFA
 10460                           tblptru	equ	0xFF8
 10461                           tblptrh	equ	0xFF7
 10462                           tblptrl	equ	0xFF6
 10463                           tablat	equ	0xFF5
 10464                           prodh	equ	0xFF4
 10465                           prodl	equ	0xFF3
 10466                           postinc0	equ	0xFEE
 10467                           wreg	equ	0xFE8
 10468                           indf1	equ	0xFE7
 10469                           postdec1	equ	0xFE5
 10470                           fsr1h	equ	0xFE2
 10471                           fsr1l	equ	0xFE1
 10472                           indf2	equ	0xFDF
 10473                           postinc2	equ	0xFDE
 10474                           postdec2	equ	0xFDD
 10475                           plusw2	equ	0xFDB
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           
 10480 ;; *************** function _LCD_FillRectangle *****************
 10481 ;; Defined at:
 10482 ;;		line 318 in file "Library/LCD.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;  pColour         2    9[BANK0 ] unsigned short 
 10485 ;;  pPoint          4   11[BANK0 ] struct Point
 10486 ;;  pSize           4   15[BANK0 ] struct Point
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;  j               1   22[BANK0 ] unsigned char 
 10489 ;;  i               1   21[BANK0 ] unsigned char 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      void 
 10492 ;; Registers used:
 10493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10499 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;Total ram usage:       14 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:   10
 10506 ;; This function calls:
 10507 ;;		_LCD_Word_Write
 10508 ;;		_Set_Addr_Window
 10509 ;; This function is called by:
 10510 ;;		_Console_Render
 10511 ;;		_Console_ClearLine
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           	psect	text55
 10516  01393E                     __ptext55:
 10517                           	opt stack 0
 10518  01393E                     _LCD_FillRectangle:
 10519                           	opt stack 16
 10520                           
 10521                           ;LCD.c: 320: UINT8 i = 0x00;
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;incstack = 0
 10525  01393E  0E00               	movlw	0
 10526  013940  0100               	movlb	0	; () banked
 10527  013942  6FD2               	movwf	LCD_FillRectangle@i& (0+255),b
 10528                           
 10529                           ;LCD.c: 321: UINT8 j = 0x00;
 10530  013944  0E00               	movlw	0
 10531  013946  0100               	movlb	0	; () banked
 10532  013948  6FD3               	movwf	LCD_FillRectangle@j& (0+255),b
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10536  01394A  C0CA  F0C2         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10537  01394E  0100               	movlb	0	; () banked
 10538  013950  51C8               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10539  013952  0100               	movlb	0	; () banked
 10540  013954  25CC               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10541  013956  0100               	movlb	0	; () banked
 10542  013958  6FD0               	movwf	??_LCD_FillRectangle& (0+255),b
 10543  01395A  0100               	movlb	0	; () banked
 10544  01395C  05D0               	decf	??_LCD_FillRectangle& (0+255),w,b
 10545  01395E  0100               	movlb	0	; () banked
 10546  013960  6FC3               	movwf	Set_Addr_Window@xe& (0+255),b
 10547  013962  0100               	movlb	0	; () banked
 10548  013964  51CA               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10549  013966  0100               	movlb	0	; () banked
 10550  013968  25CE               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10551  01396A  0100               	movlb	0	; () banked
 10552  01396C  6FD1               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10553  01396E  0100               	movlb	0	; () banked
 10554  013970  05D1               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10555  013972  0100               	movlb	0	; () banked
 10556  013974  6FC4               	movwf	Set_Addr_Window@ye& (0+255),b
 10557  013976  0100               	movlb	0	; () banked
 10558  013978  51C8               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10559  01397A  EC21  F097         	call	_Set_Addr_Window
 10560                           
 10561                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10562  01397E  C0CE  F0D3         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10563  013982                     l10926:
 10564  013982  0100               	movlb	0	; () banked
 10565  013984  51D3               	movf	LCD_FillRectangle@j& (0+255),w,b
 10566  013986  0100               	movlb	0	; () banked
 10567  013988  B4D8               	btfsc	status,2,c
 10568  01398A  0012               	return	
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10572                           
 10573                           ; BSR set to: 0
 10574  01398C  C0CC  F0D2         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10575  013990                     l10930:
 10576                           
 10577                           ; BSR set to: 0
 10578  013990  0100               	movlb	0	; () banked
 10579  013992  51D2               	movf	LCD_FillRectangle@i& (0+255),w,b
 10580  013994  0100               	movlb	0	; () banked
 10581  013996  B4D8               	btfsc	status,2,c
 10582  013998  D009               	goto	u7440
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10586                           
 10587                           ; BSR set to: 0
 10588                           
 10589                           ; BSR set to: 0
 10590  01399A  C0C6  F0C2         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10591  01399E  C0C7  F0C3         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10592  0139A2  EC94  F0A4         	call	_LCD_Word_Write	;wreg free
 10593  0139A6  0100               	movlb	0	; () banked
 10594  0139A8  07D2               	decf	LCD_FillRectangle@i& (0+255),f,b
 10595  0139AA  D7F2               	goto	l10930
 10596  0139AC                     u7440:
 10597                           
 10598                           ; BSR set to: 0
 10599                           
 10600                           ; BSR set to: 0
 10601  0139AC  0100               	movlb	0	; () banked
 10602  0139AE  07D3               	decf	LCD_FillRectangle@j& (0+255),f,b
 10603  0139B0  D7E8               	goto	l10926
 10604  0139B2                     __end_of_LCD_FillRectangle:
 10605                           	opt stack 0
 10606                           tosu	equ	0xFFF
 10607                           tosh	equ	0xFFE
 10608                           tosl	equ	0xFFD
 10609                           pclath	equ	0xFFA
 10610                           tblptru	equ	0xFF8
 10611                           tblptrh	equ	0xFF7
 10612                           tblptrl	equ	0xFF6
 10613                           tablat	equ	0xFF5
 10614                           prodh	equ	0xFF4
 10615                           prodl	equ	0xFF3
 10616                           postinc0	equ	0xFEE
 10617                           wreg	equ	0xFE8
 10618                           indf1	equ	0xFE7
 10619                           postdec1	equ	0xFE5
 10620                           fsr1h	equ	0xFE2
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           plusw2	equ	0xFDB
 10626                           fsr2h	equ	0xFDA
 10627                           fsr2l	equ	0xFD9
 10628                           status	equ	0xFD8
 10629                           
 10630 ;; *************** function _LCD_DrawField *****************
 10631 ;; Defined at:
 10632 ;;		line 393 in file "Library/LCD.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10635 ;;		 -> Console_MakeField@Fill(70), 
 10636 ;;  pPoint          4   20[BANK0 ] struct Point
 10637 ;;  pSize           4   24[BANK0 ] struct Point
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  count           2   30[BANK0 ] unsigned short 
 10640 ;;  i               1   34[BANK0 ] unsigned char 
 10641 ;;  ymax            1   33[BANK0 ] unsigned char 
 10642 ;;  xmax            1   32[BANK0 ] unsigned char 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  1    wreg      void 
 10645 ;; Registers used:
 10646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10652 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10655 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10656 ;;Total ram usage:       17 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:   10
 10659 ;; This function calls:
 10660 ;;		_LCD_Word_Write
 10661 ;;		_Set_Addr_Window
 10662 ;;		___wmul
 10663 ;; This function is called by:
 10664 ;;		_Console_Render
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text56
 10669  013188                     __ptext56:
 10670                           	opt stack 0
 10671  013188                     _LCD_DrawField:
 10672                           	opt stack 16
 10673                           
 10674                           ;LCD.c: 396: UINT8 i = 0x00;
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;incstack = 0
 10678  013188  0E00               	movlw	0
 10679  01318A  0100               	movlb	0	; () banked
 10680  01318C  6FDF               	movwf	LCD_DrawField@i& (0+255),b
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10684  01318E  0100               	movlb	0	; () banked
 10685  013190  51D1               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10686  013192  0100               	movlb	0	; () banked
 10687  013194  25D5               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10688  013196  0100               	movlb	0	; () banked
 10689  013198  6FDD               	movwf	LCD_DrawField@xmax& (0+255),b
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10693  01319A  0100               	movlb	0	; () banked
 10694  01319C  51D3               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10695  01319E  0100               	movlb	0	; () banked
 10696  0131A0  25D7               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10697  0131A2  0100               	movlb	0	; () banked
 10698  0131A4  6FDE               	movwf	LCD_DrawField@ymax& (0+255),b
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10702  0131A6  C0D7  F0BD         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10703  0131AA  C0D8  F0BE         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10704  0131AE  C0D5  F0BF         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10705  0131B2  C0D6  F0C0         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10706  0131B6  ECC0  F0A2         	call	___wmul	;wreg free
 10707  0131BA  C0BD  F0DB         	movff	?___wmul,LCD_DrawField@count
 10708  0131BE  C0BE  F0DC         	movff	?___wmul+1,LCD_DrawField@count+1
 10709                           
 10710                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10711  0131C2  C0D3  F0C2         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10712  0131C6  0100               	movlb	0	; () banked
 10713  0131C8  05DD               	decf	LCD_DrawField@xmax& (0+255),w,b
 10714  0131CA  0100               	movlb	0	; () banked
 10715  0131CC  6FC3               	movwf	Set_Addr_Window@xe& (0+255),b
 10716  0131CE  0100               	movlb	0	; () banked
 10717  0131D0  05DE               	decf	LCD_DrawField@ymax& (0+255),w,b
 10718  0131D2  0100               	movlb	0	; () banked
 10719  0131D4  6FC4               	movwf	Set_Addr_Window@ye& (0+255),b
 10720  0131D6  0100               	movlb	0	; () banked
 10721  0131D8  51D1               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10722  0131DA  EC21  F097         	call	_Set_Addr_Window
 10723                           
 10724                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10725  0131DE  0E00               	movlw	0
 10726  0131E0  0100               	movlb	0	; () banked
 10727  0131E2  6FDF               	movwf	LCD_DrawField@i& (0+255),b
 10728  0131E4  D013               	goto	l183
 10729  0131E6                     
 10730                           ; BSR set to: 0
 10731                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10732                           
 10733                           ; BSR set to: 0
 10734  0131E6  0100               	movlb	0	; () banked
 10735  0131E8  51DF               	movf	LCD_DrawField@i& (0+255),w,b
 10736  0131EA  0D02               	mullw	2
 10737  0131EC  50F3               	movf	prodl,w,c
 10738  0131EE  0100               	movlb	0	; () banked
 10739  0131F0  25CF               	addwf	LCD_DrawField@pField& (0+255),w,b
 10740  0131F2  6ED9               	movwf	fsr2l,c
 10741  0131F4  50F4               	movf	prodh,w,c
 10742  0131F6  0100               	movlb	0	; () banked
 10743  0131F8  21D0               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10744  0131FA  6EDA               	movwf	fsr2h,c
 10745  0131FC  CFDE F0C2          	movff	postinc2,LCD_Word_Write@value
 10746  013200  CFDD F0C3          	movff	postdec2,LCD_Word_Write@value+1
 10747  013204  EC94  F0A4         	call	_LCD_Word_Write	;wreg free
 10748  013208  0100               	movlb	0	; () banked
 10749  01320A  2BDF               	incf	LCD_DrawField@i& (0+255),f,b
 10750  01320C                     l183:
 10751                           
 10752                           ; BSR set to: 0
 10753                           
 10754                           ; BSR set to: 0
 10755  01320C  0100               	movlb	0	; () banked
 10756  01320E  51DF               	movf	LCD_DrawField@i& (0+255),w,b
 10757  013210  0100               	movlb	0	; () banked
 10758  013212  6FD9               	movwf	??_LCD_DrawField& (0+255),b
 10759  013214  6BDA               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10760  013216  0100               	movlb	0	; () banked
 10761  013218  51DB               	movf	LCD_DrawField@count& (0+255),w,b
 10762  01321A  0100               	movlb	0	; () banked
 10763  01321C  5DD9               	subwf	??_LCD_DrawField& (0+255),w,b
 10764  01321E  0100               	movlb	0	; () banked
 10765  013220  51DC               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10766  013222  0100               	movlb	0	; () banked
 10767  013224  59DA               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10768  013226  B0D8               	btfsc	status,0,c
 10769  013228  0012               	return	
 10770  01322A  D7DD               	goto	l184
 10771  01322C                     __end_of_LCD_DrawField:
 10772                           	opt stack 0
 10773                           tosu	equ	0xFFF
 10774                           tosh	equ	0xFFE
 10775                           tosl	equ	0xFFD
 10776                           pclath	equ	0xFFA
 10777                           tblptru	equ	0xFF8
 10778                           tblptrh	equ	0xFF7
 10779                           tblptrl	equ	0xFF6
 10780                           tablat	equ	0xFF5
 10781                           prodh	equ	0xFF4
 10782                           prodl	equ	0xFF3
 10783                           postinc0	equ	0xFEE
 10784                           wreg	equ	0xFE8
 10785                           indf1	equ	0xFE7
 10786                           postdec1	equ	0xFE5
 10787                           fsr1h	equ	0xFE2
 10788                           fsr1l	equ	0xFE1
 10789                           indf2	equ	0xFDF
 10790                           postinc2	equ	0xFDE
 10791                           postdec2	equ	0xFDD
 10792                           plusw2	equ	0xFDB
 10793                           fsr2h	equ	0xFDA
 10794                           fsr2l	equ	0xFD9
 10795                           status	equ	0xFD8
 10796                           
 10797 ;; *************** function ___wmul *****************
 10798 ;; Defined at:
 10799 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10802 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;  product         2    4[BANK0 ] unsigned int 
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  2    0[BANK0 ] unsigned int 
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, status,0, prodl, prodh
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10814 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;Total ram usage:        6 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    7
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_LCD_DrawField
 10825 ;;		_continuousMode
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           	psect	text57
 10830  014580                     __ptext57:
 10831                           	opt stack 0
 10832  014580                     ___wmul:
 10833                           	opt stack 18
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;incstack = 0
 10837  014580  0100               	movlb	0	; () banked
 10838  014582  51BD               	movf	___wmul@multiplier& (0+255),w,b
 10839  014584  0100               	movlb	0	; () banked
 10840  014586  03BF               	mulwf	___wmul@multiplicand& (0+255),b
 10841  014588  CFF3 F0C1          	movff	prodl,___wmul@product
 10842  01458C  CFF4 F0C2          	movff	prodh,___wmul@product+1
 10843  014590  0100               	movlb	0	; () banked
 10844  014592  51BD               	movf	___wmul@multiplier& (0+255),w,b
 10845  014594  0100               	movlb	0	; () banked
 10846  014596  03C0               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10847  014598  50F3               	movf	prodl,w,c
 10848  01459A  0100               	movlb	0	; () banked
 10849  01459C  27C2               	addwf	(___wmul@product+1)& (0+255),f,b
 10850  01459E  0100               	movlb	0	; () banked
 10851  0145A0  51BE               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10852  0145A2  0100               	movlb	0	; () banked
 10853  0145A4  03BF               	mulwf	___wmul@multiplicand& (0+255),b
 10854  0145A6  50F3               	movf	prodl,w,c
 10855  0145A8  0100               	movlb	0	; () banked
 10856  0145AA  27C2               	addwf	(___wmul@product+1)& (0+255),f,b
 10857                           
 10858                           ; BSR set to: 0
 10859  0145AC  C0C1  F0BD         	movff	___wmul@product,?___wmul
 10860  0145B0  C0C2  F0BE         	movff	___wmul@product+1,?___wmul+1
 10861  0145B4  0012               	return	
 10862  0145B6                     __end_of___wmul:
 10863                           	opt stack 0
 10864                           tosu	equ	0xFFF
 10865                           tosh	equ	0xFFE
 10866                           tosl	equ	0xFFD
 10867                           pclath	equ	0xFFA
 10868                           tblptru	equ	0xFF8
 10869                           tblptrh	equ	0xFF7
 10870                           tblptrl	equ	0xFF6
 10871                           tablat	equ	0xFF5
 10872                           prodh	equ	0xFF4
 10873                           prodl	equ	0xFF3
 10874                           postinc0	equ	0xFEE
 10875                           wreg	equ	0xFE8
 10876                           indf1	equ	0xFE7
 10877                           postdec1	equ	0xFE5
 10878                           fsr1h	equ	0xFE2
 10879                           fsr1l	equ	0xFE1
 10880                           indf2	equ	0xFDF
 10881                           postinc2	equ	0xFDE
 10882                           postdec2	equ	0xFDD
 10883                           plusw2	equ	0xFDB
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function _Console_MakeField *****************
 10889 ;; Defined at:
 10890 ;;		line 435 in file "Library/Console.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;  pInput          1    wreg     unsigned char 
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;  pInput          1   11[BANK0 ] unsigned char 
 10895 ;;  y               1   17[BANK0 ] unsigned char 
 10896 ;;  x               1   16[BANK0 ] unsigned char 
 10897 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10898 ;;		 -> Font5x7(480), 
 10899 ;;  Index           2    9[BANK0 ] unsigned short 
 10900 ;; Return value:  Size  Location     Type
 10901 ;;                  2    5[BANK0 ] PTR unsigned short 
 10902 ;; Registers used:
 10903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10909 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;Total ram usage:       13 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    8
 10916 ;; This function calls:
 10917 ;;		_Byte_GetBit
 10918 ;; This function is called by:
 10919 ;;		_Console_Render
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           	psect	text58
 10924  012784                     __ptext58:
 10925                           	opt stack 0
 10926  012784                     _Console_MakeField:
 10927                           	opt stack 18
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;incstack = 0
 10931                           ;Console_MakeField@pInput stored from wreg
 10932  012784  0100               	movlb	0	; () banked
 10933  012786  6FC8               	movwf	Console_MakeField@pInput& (0+255),b
 10934                           
 10935                           ;Console.c: 437: static Colour Fill[7][5];
 10936                           ;Console.c: 438: pInput -= 32;
 10937  012788  0E20               	movlw	32
 10938  01278A  0100               	movlb	0	; () banked
 10939  01278C  5FC8               	subwf	Console_MakeField@pInput& (0+255),f,b
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10943  01278E  0100               	movlb	0	; () banked
 10944  012790  51C8               	movf	Console_MakeField@pInput& (0+255),w,b
 10945  012792  0D05               	mullw	5
 10946  012794  CFF3 F0C6          	movff	prodl,Console_MakeField@Index
 10947  012798  CFF4 F0C7          	movff	prodh,Console_MakeField@Index+1
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10951  01279C  0E7B               	movlw	low _Font5x7
 10952  01279E  0100               	movlb	0	; () banked
 10953  0127A0  25C6               	addwf	Console_MakeField@Index& (0+255),w,b
 10954  0127A2  0100               	movlb	0	; () banked
 10955  0127A4  6FC9               	movwf	Console_MakeField@Column& (0+255),b
 10956  0127A6  0EFD               	movlw	high _Font5x7
 10957  0127A8  0100               	movlb	0	; () banked
 10958  0127AA  21C7               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10959  0127AC  0100               	movlb	0	; () banked
 10960  0127AE  6FCA               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10964  0127B0  0E00               	movlw	0
 10965  0127B2  0100               	movlb	0	; () banked
 10966  0127B4  6FCD               	movwf	Console_MakeField@x& (0+255),b
 10967  0127B6                     l11052:
 10968                           
 10969                           ; BSR set to: 0
 10970  0127B6  0E04               	movlw	4
 10971  0127B8  0100               	movlb	0	; () banked
 10972  0127BA  65CD               	cpfsgt	Console_MakeField@x& (0+255),b
 10973  0127BC  D001               	goto	l1077
 10974  0127BE  D043               	goto	u7590
 10975  0127C0                     l1077:
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;Console.c: 444: {
 10979                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10980                           
 10981                           ; BSR set to: 0
 10982  0127C0  0E00               	movlw	0
 10983  0127C2  0100               	movlb	0	; () banked
 10984  0127C4  6FCE               	movwf	Console_MakeField@y& (0+255),b
 10985  0127C6                     l11058:
 10986                           
 10987                           ; BSR set to: 0
 10988  0127C6  0E06               	movlw	6
 10989  0127C8  0100               	movlb	0	; () banked
 10990  0127CA  65CE               	cpfsgt	Console_MakeField@y& (0+255),b
 10991  0127CC  D001               	goto	l1079
 10992  0127CE  D035               	goto	u7580
 10993  0127D0                     l1079:
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10997                           
 10998                           ; BSR set to: 0
 10999  0127D0  C0C9  F0BD         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 11000  0127D4  C0CA  F0BE         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 11001  0127D8  C0CE  F0BF         	movff	Console_MakeField@y,Byte_GetBit@pBit
 11002  0127DC  ECF6  F0A2         	call	_Byte_GetBit	;wreg free
 11003  0127E0  0900               	iorlw	0
 11004  0127E2  A4D8               	btfss	status,2,c
 11005  0127E4  D005               	goto	l1082
 11006  0127E6  C073  F0CB         	movff	_gBackcolour,_Console_MakeField$10974
 11007  0127EA  C074  F0CC         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11008  0127EE  D004               	goto	l1084
 11009  0127F0                     l1082:
 11010  0127F0  C0FD  F0CB         	movff	_gForecolour,_Console_MakeField$10974
 11011  0127F4  C0FE  F0CC         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11012  0127F8                     l1084:
 11013  0127F8  0100               	movlb	0	; () banked
 11014  0127FA  51CE               	movf	Console_MakeField@y& (0+255),w,b
 11015  0127FC  0D0A               	mullw	10
 11016  0127FE  0E00               	movlw	low Console_MakeField@Fill
 11017  012800  0100               	movlb	0	; () banked
 11018  012802  6FC4               	movwf	??_Console_MakeField& (0+255),b
 11019  012804  0E02               	movlw	high Console_MakeField@Fill
 11020  012806  0100               	movlb	0	; () banked
 11021  012808  6FC5               	movwf	(??_Console_MakeField+1)& (0+255),b
 11022  01280A  50F3               	movf	prodl,w,c
 11023  01280C  0100               	movlb	0	; () banked
 11024  01280E  27C4               	addwf	??_Console_MakeField& (0+255),f,b
 11025  012810  50F4               	movf	prodh,w,c
 11026  012812  0100               	movlb	0	; () banked
 11027  012814  23C5               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 11028  012816  0100               	movlb	0	; () banked
 11029  012818  51CD               	movf	Console_MakeField@x& (0+255),w,b
 11030  01281A  0D02               	mullw	2
 11031  01281C  50F3               	movf	prodl,w,c
 11032  01281E  0100               	movlb	0	; () banked
 11033  012820  25C4               	addwf	??_Console_MakeField& (0+255),w,b
 11034  012822  6ED9               	movwf	fsr2l,c
 11035  012824  50F4               	movf	prodh,w,c
 11036  012826  0100               	movlb	0	; () banked
 11037  012828  21C5               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 11038  01282A  6EDA               	movwf	fsr2h,c
 11039  01282C  C0CB  FFDE         	movff	_Console_MakeField$10974,postinc2
 11040  012830  C0CC  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 11041                           
 11042                           ; BSR set to: 0
 11043  012834  0100               	movlb	0	; () banked
 11044  012836  2BCE               	incf	Console_MakeField@y& (0+255),f,b
 11045  012838  D7C6               	goto	l11058
 11046  01283A                     u7580:
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;Console.c: 447: Column += 1;
 11050                           
 11051                           ; BSR set to: 0
 11052  01283A  0100               	movlb	0	; () banked
 11053  01283C  4BC9               	infsnz	Console_MakeField@Column& (0+255),f,b
 11054  01283E  2BCA               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 11055  012840  0100               	movlb	0	; () banked
 11056  012842  2BCD               	incf	Console_MakeField@x& (0+255),f,b
 11057  012844  D7B8               	goto	l11052
 11058  012846                     u7590:
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;Console.c: 448: }
 11062                           ;Console.c: 449: return (ColourPtr)Fill;
 11063                           
 11064                           ; BSR set to: 0
 11065  012846  0E00               	movlw	low Console_MakeField@Fill
 11066  012848  0100               	movlb	0	; () banked
 11067  01284A  6FC2               	movwf	?_Console_MakeField& (0+255),b
 11068  01284C  0E02               	movlw	high Console_MakeField@Fill
 11069  01284E  0100               	movlb	0	; () banked
 11070  012850  6FC3               	movwf	(?_Console_MakeField+1)& (0+255),b
 11071  012852  0012               	return	
 11072  012854                     __end_of_Console_MakeField:
 11073                           	opt stack 0
 11074                           tosu	equ	0xFFF
 11075                           tosh	equ	0xFFE
 11076                           tosl	equ	0xFFD
 11077                           pclath	equ	0xFFA
 11078                           tblptru	equ	0xFF8
 11079                           tblptrh	equ	0xFF7
 11080                           tblptrl	equ	0xFF6
 11081                           tablat	equ	0xFF5
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           postinc0	equ	0xFEE
 11085                           wreg	equ	0xFE8
 11086                           indf1	equ	0xFE7
 11087                           postdec1	equ	0xFE5
 11088                           fsr1h	equ	0xFE2
 11089                           fsr1l	equ	0xFE1
 11090                           indf2	equ	0xFDF
 11091                           postinc2	equ	0xFDE
 11092                           postdec2	equ	0xFDD
 11093                           plusw2	equ	0xFDB
 11094                           fsr2h	equ	0xFDA
 11095                           fsr2l	equ	0xFD9
 11096                           status	equ	0xFD8
 11097                           
 11098 ;; *************** function _Byte_GetBit *****************
 11099 ;; Defined at:
 11100 ;;		line 38 in file "Library/Types.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11103 ;;		 -> Font5x7(480), 
 11104 ;;  pBit            1    2[BANK0 ] unsigned char 
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;  Output          1    4[BANK0 ] unsigned char 
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  1    wreg      unsigned char 
 11109 ;; Registers used:
 11110 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11111 ;; Tracked objects:
 11112 ;;		On entry : 0/0
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11116 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;Total ram usage:        5 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; Hardware stack levels required when called:    7
 11123 ;; This function calls:
 11124 ;;		Nothing
 11125 ;; This function is called by:
 11126 ;;		_Console_MakeField
 11127 ;;		_Word_GetBit
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           	psect	text59
 11132  0145EC                     __ptext59:
 11133                           	opt stack 0
 11134  0145EC                     _Byte_GetBit:
 11135                           	opt stack 18
 11136                           
 11137                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;incstack = 0
 11141  0145EC  C0BD  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11142  0145F0  C0BE  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11143  0145F4                     	if	0	;tblptru may be non-zero
 11144  0145F4                     	endif
 11145  0145F4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11146  0145F4  0E00               	movlw	low (__mediumconst shr (0+16))
 11147  0145F6  6EF8               	movwf	tblptru,c
 11148  0145F8                     	endif
 11149  0145F8  0008               	tblrd		*
 11150  0145FA  CFF5 F0C1          	movff	tablat,Byte_GetBit@Output
 11151                           
 11152                           ;Types.c: 42: Output >>= pBit;
 11153  0145FE  0100               	movlb	0	; () banked
 11154  014600  29BF               	incf	Byte_GetBit@pBit& (0+255),w,b
 11155  014602  0100               	movlb	0	; () banked
 11156  014604  6FC0               	movwf	??_Byte_GetBit& (0+255),b
 11157  014606  D003               	goto	u7260
 11158  014608                     u7265:
 11159  014608  0100               	movlb	0	; () banked
 11160  01460A  90D8               	bcf	status,0,c
 11161  01460C  33C1               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11162  01460E                     u7260:
 11163  01460E  0100               	movlb	0	; () banked
 11164  014610  2FC0               	decfsz	??_Byte_GetBit& (0+255),f,b
 11165  014612  D7FA               	goto	u7265
 11166                           
 11167                           ;Types.c: 43: Output &= 1;
 11168  014614  0E01               	movlw	1
 11169  014616  0100               	movlb	0	; () banked
 11170  014618  17C1               	andwf	Byte_GetBit@Output& (0+255),f,b
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;Types.c: 44: return Output;
 11174  01461A  0100               	movlb	0	; () banked
 11175  01461C  51C1               	movf	Byte_GetBit@Output& (0+255),w,b
 11176  01461E  0012               	return	
 11177  014620                     __end_of_Byte_GetBit:
 11178                           	opt stack 0
 11179                           tosu	equ	0xFFF
 11180                           tosh	equ	0xFFE
 11181                           tosl	equ	0xFFD
 11182                           pclath	equ	0xFFA
 11183                           tblptru	equ	0xFF8
 11184                           tblptrh	equ	0xFF7
 11185                           tblptrl	equ	0xFF6
 11186                           tablat	equ	0xFF5
 11187                           prodh	equ	0xFF4
 11188                           prodl	equ	0xFF3
 11189                           postinc0	equ	0xFEE
 11190                           wreg	equ	0xFE8
 11191                           indf1	equ	0xFE7
 11192                           postdec1	equ	0xFE5
 11193                           fsr1h	equ	0xFE2
 11194                           fsr1l	equ	0xFE1
 11195                           indf2	equ	0xFDF
 11196                           postinc2	equ	0xFDE
 11197                           postdec2	equ	0xFDD
 11198                           plusw2	equ	0xFDB
 11199                           fsr2h	equ	0xFDA
 11200                           fsr2l	equ	0xFD9
 11201                           status	equ	0xFD8
 11202                           
 11203 ;; *************** function _Motor_Speed *****************
 11204 ;; Defined at:
 11205 ;;		line 117 in file "Library/Motor.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 11208 ;;		 -> Stepper(6), 
 11209 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      unsigned char 
 11214 ;; Registers used:
 11215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11221 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;Total ram usage:        4 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    9
 11228 ;; This function calls:
 11229 ;;		_Timer0_Init
 11230 ;; This function is called by:
 11231 ;;		_continuousMode
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           	psect	text60
 11236  014796                     __ptext60:
 11237                           	opt stack 0
 11238  014796                     _Motor_Speed:
 11239                           	opt stack 19
 11240                           
 11241                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;incstack = 0
 11245  014796  0100               	movlb	0	; () banked
 11246  014798  EE20 F002          	lfsr	2,2
 11247  01479C  51D8               	movf	Motor_Speed@pMotor& (0+255),w,b
 11248  01479E  26D9               	addwf	fsr2l,f,c
 11249  0147A0  51D9               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 11250  0147A2  22DA               	addwfc	fsr2h,f,c
 11251  0147A4  C0DA  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 11252  0147A8  C0DB  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;Motor.c: 120: Timer0_Init(pFrequency);
 11256  0147AC  C0DA  F0CA         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 11257  0147B0  C0DB  F0CB         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 11258  0147B4  0100               	movlb	0	; () banked
 11259  0147B6  6BCC               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 11260  0147B8  6BCD               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 11261  0147BA  EC79  F090         	call	_Timer0_Init	;wreg free
 11262  0147BE  0012               	return	
 11263  0147C0                     __end_of_Motor_Speed:
 11264                           	opt stack 0
 11265                           tosu	equ	0xFFF
 11266                           tosh	equ	0xFFE
 11267                           tosl	equ	0xFFD
 11268                           pclath	equ	0xFFA
 11269                           tblptru	equ	0xFF8
 11270                           tblptrh	equ	0xFF7
 11271                           tblptrl	equ	0xFF6
 11272                           tablat	equ	0xFF5
 11273                           prodh	equ	0xFF4
 11274                           prodl	equ	0xFF3
 11275                           postinc0	equ	0xFEE
 11276                           wreg	equ	0xFE8
 11277                           indf1	equ	0xFE7
 11278                           postdec1	equ	0xFE5
 11279                           fsr1h	equ	0xFE2
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           plusw2	equ	0xFDB
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _initialise *****************
 11290 ;; Defined at:
 11291 ;;		line 37 in file "main.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;Total ram usage:        0 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:   17
 11312 ;; This function calls:
 11313 ;;		_Console_Init
 11314 ;;		_HMI_Init
 11315 ;;		_LCD_Init
 11316 ;;		_MXK_BlockSwitchTo
 11317 ;;		_MXK_Dequeue
 11318 ;;		_MXK_Init
 11319 ;;		_MXK_Release
 11320 ;;		_Motor_Init
 11321 ;;		_Motor_Move
 11322 ;; This function is called by:
 11323 ;;		_main
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           	psect	text61
 11328  013850                     __ptext61:
 11329                           	opt stack 0
 11330  013850                     _initialise:
 11331                           	opt stack 13
 11332                           
 11333                           ;main.c: 39: MXK_Init();
 11334                           
 11335                           ;incstack = 0
 11336  013850  EC4D  F08E         	call	_MXK_Init	;wreg free
 11337                           
 11338                           ;main.c: 42: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 11339  013854  0E01               	movlw	1
 11340  013856  EC2A  F0A2         	call	_MXK_BlockSwitchTo
 11341  01385A  0900               	iorlw	0
 11342  01385C  B4D8               	btfsc	status,2,c
 11343  01385E  D00C               	goto	l1995
 11344                           
 11345                           ;main.c: 44: LCD_Init();
 11346  013860  EC0D  F08F         	call	_LCD_Init	;wreg free
 11347                           
 11348                           ;main.c: 45: Console_Init();
 11349  013864  EC69  F09B         	call	_Console_Init	;wreg free
 11350                           
 11351                           ;main.c: 46: HMI_Init();
 11352  013868  ECD8  F08A         	call	_HMI_Init	;wreg free
 11353                           
 11354                           ;main.c: 47: if (MXK_Release())
 11355  01386C  ECEE  F0A4         	call	_MXK_Release	;wreg free
 11356  013870  0900               	iorlw	0
 11357  013872  A4D8               	btfss	status,2,c
 11358                           
 11359                           ;main.c: 48: MXK_Dequeue();
 11360  013874  EC0B  F0A2         	call	_MXK_Dequeue	;wreg free
 11361  013878                     l1995:
 11362                           
 11363                           ;main.c: 49: }
 11364                           ;main.c: 52: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 11365  013878  0E08               	movlw	8
 11366  01387A  EC2A  F0A2         	call	_MXK_BlockSwitchTo
 11367  01387E  0900               	iorlw	0
 11368  013880  B4D8               	btfsc	status,2,c
 11369  013882  D01A               	goto	l1996
 11370                           
 11371                           ;main.c: 53: Motor_Init(&Stepper, 0b1000);
 11372  013884  0E9B               	movlw	low _Stepper
 11373  013886  0100               	movlb	0	; () banked
 11374  013888  6FEA               	movwf	Motor_Init@pMotor& (0+255),b
 11375  01388A  0E00               	movlw	high _Stepper
 11376  01388C  0100               	movlb	0	; () banked
 11377  01388E  6FEB               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 11378  013890  0E00               	movlw	0
 11379  013892  0100               	movlb	0	; () banked
 11380  013894  6FED               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 11381  013896  0E08               	movlw	8
 11382  013898  6FEC               	movwf	Motor_Init@pAddress& (0+255),b
 11383  01389A  EC2A  F094         	call	_Motor_Init	;wreg free
 11384                           
 11385                           ;main.c: 54: Motor_Move(&Stepper, 100);
 11386  01389E  0E9B               	movlw	low _Stepper
 11387  0138A0  0100               	movlb	0	; () banked
 11388  0138A2  6FC0               	movwf	Motor_Move@pMotor& (0+255),b
 11389  0138A4  0E00               	movlw	high _Stepper
 11390  0138A6  0100               	movlb	0	; () banked
 11391  0138A8  6FC1               	movwf	(Motor_Move@pMotor+1)& (0+255),b
 11392  0138AA  0E00               	movlw	0
 11393  0138AC  0100               	movlb	0	; () banked
 11394  0138AE  6FC3               	movwf	(Motor_Move@pDelta+1)& (0+255),b
 11395  0138B0  0E64               	movlw	100
 11396  0138B2  6FC2               	movwf	Motor_Move@pDelta& (0+255),b
 11397  0138B4  ECA3  F0A2         	call	_Motor_Move	;wreg free
 11398  0138B8                     l1996:
 11399                           
 11400                           ;main.c: 55: }
 11401                           ;main.c: 56: if (MXK_Release())
 11402  0138B8  ECEE  F0A4         	call	_MXK_Release	;wreg free
 11403  0138BC  0900               	iorlw	0
 11404  0138BE  B4D8               	btfsc	status,2,c
 11405  0138C0  0012               	return	
 11406                           
 11407                           ;main.c: 57: MXK_Dequeue();
 11408  0138C2  EC0B  F0A2         	call	_MXK_Dequeue	;wreg free
 11409  0138C6  0012               	return	
 11410  0138C8                     __end_of_initialise:
 11411                           	opt stack 0
 11412                           tosu	equ	0xFFF
 11413                           tosh	equ	0xFFE
 11414                           tosl	equ	0xFFD
 11415                           pclath	equ	0xFFA
 11416                           tblptru	equ	0xFF8
 11417                           tblptrh	equ	0xFF7
 11418                           tblptrl	equ	0xFF6
 11419                           tablat	equ	0xFF5
 11420                           prodh	equ	0xFF4
 11421                           prodl	equ	0xFF3
 11422                           postinc0	equ	0xFEE
 11423                           wreg	equ	0xFE8
 11424                           indf1	equ	0xFE7
 11425                           postdec1	equ	0xFE5
 11426                           fsr1h	equ	0xFE2
 11427                           fsr1l	equ	0xFE1
 11428                           indf2	equ	0xFDF
 11429                           postinc2	equ	0xFDE
 11430                           postdec2	equ	0xFDD
 11431                           plusw2	equ	0xFDB
 11432                           fsr2h	equ	0xFDA
 11433                           fsr2l	equ	0xFD9
 11434                           status	equ	0xFD8
 11435                           
 11436 ;; *************** function _Motor_Move *****************
 11437 ;; Defined at:
 11438 ;;		line 51 in file "Library/Motor.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 11441 ;;		 -> Stepper(6), 
 11442 ;;  pDelta          2    5[BANK0 ] short 
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;		None
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      unsigned char 
 11447 ;; Registers used:
 11448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11454 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;Total ram usage:        6 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:    8
 11461 ;; This function calls:
 11462 ;;		_Timer0_Start
 11463 ;; This function is called by:
 11464 ;;		_initialise
 11465 ;;		_continuousMode
 11466 ;; This function uses a non-reentrant model
 11467 ;;
 11468                           
 11469                           	psect	text62
 11470  014546                     __ptext62:
 11471                           	opt stack 0
 11472  014546                     _Motor_Move:
 11473                           	opt stack 20
 11474                           
 11475                           ;Motor.c: 54: lMotor = pMotor;
 11476                           
 11477                           ;incstack = 0
 11478  014546  C0C0  F06F         	movff	Motor_Move@pMotor,_lMotor
 11479  01454A  C0C1  F070         	movff	Motor_Move@pMotor+1,_lMotor+1
 11480                           
 11481                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 11482  01454E  C0C0  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11483  014552  C0C1  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11484  014556  50DE               	movf	postinc2,w,c
 11485  014558  10DE               	iorwf	postinc2,w,c
 11486  01455A  A4D8               	btfss	status,2,c
 11487  01455C  0012               	return	
 11488                           
 11489                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 11490                           
 11491                           ;Motor.c: 59: return 0;
 11492                           ;	Return value of _Motor_Move is never used
 11493  01455E  C0C0  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11494  014562  C0C1  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11495  014566  C0C2  FFDE         	movff	Motor_Move@pDelta,postinc2
 11496  01456A  C0C3  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 11497                           
 11498                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 11499  01456E  C02C  F0BD         	movff	_lStepFunction,Timer0_Start@pFunction
 11500  014572  C02D  F0BE         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 11501  014576  C02E  F0BF         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 11502  01457A  EC1C  F0A4         	call	_Timer0_Start	;wreg free
 11503  01457E  0012               	return	
 11504  014580                     __end_of_Motor_Move:
 11505                           	opt stack 0
 11506                           tosu	equ	0xFFF
 11507                           tosh	equ	0xFFE
 11508                           tosl	equ	0xFFD
 11509                           pclath	equ	0xFFA
 11510                           tblptru	equ	0xFF8
 11511                           tblptrh	equ	0xFF7
 11512                           tblptrl	equ	0xFF6
 11513                           tablat	equ	0xFF5
 11514                           prodh	equ	0xFF4
 11515                           prodl	equ	0xFF3
 11516                           postinc0	equ	0xFEE
 11517                           wreg	equ	0xFE8
 11518                           indf1	equ	0xFE7
 11519                           postdec1	equ	0xFE5
 11520                           fsr1h	equ	0xFE2
 11521                           fsr1l	equ	0xFE1
 11522                           indf2	equ	0xFDF
 11523                           postinc2	equ	0xFDE
 11524                           postdec2	equ	0xFDD
 11525                           plusw2	equ	0xFDB
 11526                           fsr2h	equ	0xFDA
 11527                           fsr2l	equ	0xFD9
 11528                           status	equ	0xFD8
 11529                           
 11530 ;; *************** function _Timer0_Start *****************
 11531 ;; Defined at:
 11532 ;;		line 75 in file "Library/Timer0.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 11535 ;;		 -> Absolute function(1), Motor_Step(1), 
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;		None
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  1    wreg      void 
 11540 ;; Registers used:
 11541 ;;		wreg, status,2, status,0
 11542 ;; Tracked objects:
 11543 ;;		On entry : 0/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11547 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;Total ram usage:        3 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    7
 11554 ;; This function calls:
 11555 ;;		Nothing
 11556 ;; This function is called by:
 11557 ;;		_Motor_Move
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           	psect	text63
 11562  014838                     __ptext63:
 11563                           	opt stack 0
 11564  014838                     _Timer0_Start:
 11565                           	opt stack 20
 11566                           
 11567                           ;Timer0.c: 77: gISR = pFunction;
 11568                           
 11569                           ;incstack = 0
 11570  014838  C0BD  F029         	movff	Timer0_Start@pFunction,_gISR
 11571  01483C  C0BE  F02A         	movff	Timer0_Start@pFunction+1,_gISR+1
 11572  014840  C0BF  F02B         	movff	Timer0_Start@pFunction+2,_gISR+2
 11573                           
 11574                           ;Timer0.c: 78: TMR0 = COUNTER;
 11575  014844  C032  FFD6         	movff	_COUNTER,4054	;volatile
 11576  014848  C033  FFD7         	movff	_COUNTER+1,4055	;volatile
 11577                           
 11578                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 11579  01484C  50D5               	movf	4053,w,c	;volatile
 11580  01484E  0100               	movlb	0	; () banked
 11581  014850  1979               	xorwf	_INDEX& (0+255),w,b
 11582  014852  0BF8               	andlw	-8
 11583  014854  1979               	xorwf	_INDEX& (0+255),w,b
 11584  014856  6ED5               	movwf	4053,c	;volatile
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 11588  014858  94F2               	bcf	intcon,2,c	;volatile
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 11592  01485A  8AF2               	bsf	intcon,5,c	;volatile
 11593                           
 11594                           ; BSR set to: 0
 11595  01485C  0012               	return		;funcret
 11596  01485E                     __end_of_Timer0_Start:
 11597                           	opt stack 0
 11598                           tosu	equ	0xFFF
 11599                           tosh	equ	0xFFE
 11600                           tosl	equ	0xFFD
 11601                           pclath	equ	0xFFA
 11602                           tblptru	equ	0xFF8
 11603                           tblptrh	equ	0xFF7
 11604                           tblptrl	equ	0xFF6
 11605                           tablat	equ	0xFF5
 11606                           prodh	equ	0xFF4
 11607                           prodl	equ	0xFF3
 11608                           intcon	equ	0xFF2
 11609                           postinc0	equ	0xFEE
 11610                           wreg	equ	0xFE8
 11611                           indf1	equ	0xFE7
 11612                           postdec1	equ	0xFE5
 11613                           fsr1h	equ	0xFE2
 11614                           fsr1l	equ	0xFE1
 11615                           indf2	equ	0xFDF
 11616                           postinc2	equ	0xFDE
 11617                           postdec2	equ	0xFDD
 11618                           plusw2	equ	0xFDB
 11619                           fsr2h	equ	0xFDA
 11620                           fsr2l	equ	0xFD9
 11621                           status	equ	0xFD8
 11622                           
 11623 ;; *************** function _Motor_Init *****************
 11624 ;; Defined at:
 11625 ;;		line 26 in file "Library/Motor.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 11628 ;;		 -> Stepper(6), 
 11629 ;;  pAddress        2   47[BANK0 ] unsigned short 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;		None
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  1    wreg      void 
 11634 ;; Registers used:
 11635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11641 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;Total ram usage:        4 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:   12
 11648 ;; This function calls:
 11649 ;;		_Port_SetPin
 11650 ;;		_Port_SetPinType
 11651 ;;		_Timer0_Init
 11652 ;; This function is called by:
 11653 ;;		_initialise
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           	psect	text64
 11658  012854                     __ptext64:
 11659                           	opt stack 0
 11660  012854                     _Motor_Init:
 11661                           	opt stack 17
 11662                           
 11663                           ;Motor.c: 28: pMotor->mDelta = 0;
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;incstack = 0
 11667  012854  C0EA  FFD9         	movff	Motor_Init@pMotor,fsr2l
 11668  012858  C0EB  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 11669  01285C  0E00               	movlw	0
 11670  01285E  6EDE               	movwf	postinc2,c
 11671  012860  0E00               	movlw	0
 11672  012862  6EDD               	movwf	postdec2,c
 11673                           
 11674                           ;Motor.c: 29: pMotor->mFrequency = 0;
 11675  012864  0100               	movlb	0	; () banked
 11676  012866  EE20 F002          	lfsr	2,2
 11677  01286A  51EA               	movf	Motor_Init@pMotor& (0+255),w,b
 11678  01286C  26D9               	addwf	fsr2l,f,c
 11679  01286E  51EB               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11680  012870  22DA               	addwfc	fsr2h,f,c
 11681  012872  0E00               	movlw	0
 11682  012874  6EDE               	movwf	postinc2,c
 11683  012876  0E00               	movlw	0
 11684  012878  6EDD               	movwf	postdec2,c
 11685                           
 11686                           ; BSR set to: 0
 11687                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 11688  01287A  0100               	movlb	0	; () banked
 11689  01287C  EE20 F004          	lfsr	2,4
 11690  012880  51EA               	movf	Motor_Init@pMotor& (0+255),w,b
 11691  012882  26D9               	addwf	fsr2l,f,c
 11692  012884  51EB               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11693  012886  22DA               	addwfc	fsr2h,f,c
 11694  012888  C0EC  FFDE         	movff	Motor_Init@pAddress,postinc2
 11695  01288C  C0ED  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 11699  012890  0E7D               	movlw	low _PortE
 11700  012892  0100               	movlb	0	; () banked
 11701  012894  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 11702  012896  0E00               	movlw	high _PortE
 11703  012898  0100               	movlb	0	; () banked
 11704  01289A  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11705  01289C  0E00               	movlw	0
 11706  01289E  0100               	movlb	0	; () banked
 11707  0128A0  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 11708  0128A2  0E03               	movlw	3
 11709  0128A4  0100               	movlb	0	; () banked
 11710  0128A6  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 11711  0128A8  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 11712                           
 11713                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 11714  0128AC  0E7D               	movlw	low _PortE
 11715  0128AE  0100               	movlb	0	; () banked
 11716  0128B0  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 11717  0128B2  0E00               	movlw	high _PortE
 11718  0128B4  0100               	movlb	0	; () banked
 11719  0128B6  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11720  0128B8  0E01               	movlw	1
 11721  0128BA  0100               	movlb	0	; () banked
 11722  0128BC  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 11723  0128BE  0E03               	movlw	3
 11724  0128C0  0100               	movlb	0	; () banked
 11725  0128C2  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 11726  0128C4  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 11727                           
 11728                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 11729  0128C8  0E7D               	movlw	low _PortE
 11730  0128CA  0100               	movlb	0	; () banked
 11731  0128CC  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 11732  0128CE  0E00               	movlw	high _PortE
 11733  0128D0  0100               	movlb	0	; () banked
 11734  0128D2  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11735  0128D4  0E00               	movlw	0
 11736  0128D6  0100               	movlb	0	; () banked
 11737  0128D8  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 11738  0128DA  0E00               	movlw	0
 11739  0128DC  0100               	movlb	0	; () banked
 11740  0128DE  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 11741  0128E0  EC92  F094         	call	_Port_SetPin	;wreg free
 11742                           
 11743                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 11744  0128E4  0E7D               	movlw	low _PortE
 11745  0128E6  0100               	movlb	0	; () banked
 11746  0128E8  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 11747  0128EA  0E00               	movlw	high _PortE
 11748  0128EC  0100               	movlb	0	; () banked
 11749  0128EE  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11750  0128F0  0E01               	movlw	1
 11751  0128F2  0100               	movlb	0	; () banked
 11752  0128F4  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 11753  0128F6  0E00               	movlw	0
 11754  0128F8  0100               	movlb	0	; () banked
 11755  0128FA  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 11756  0128FC  EC92  F094         	call	_Port_SetPin	;wreg free
 11757                           
 11758                           ;Motor.c: 38: lStepFunction = Motor_Step;
 11759  012900  0EB2               	movlw	low _Motor_Step
 11760  012902  6E2C               	movwf	_lStepFunction,c
 11761  012904  0E23               	movlw	high _Motor_Step
 11762  012906  6E2D               	movwf	_lStepFunction+1,c
 11763  012908  0E01               	movlw	low (_Motor_Step shr (0+16))
 11764  01290A  6E2E               	movwf	_lStepFunction+2,c
 11765                           
 11766                           ;Motor.c: 39: Timer0_Init(1000);
 11767  01290C  0EE8               	movlw	232
 11768  01290E  0100               	movlb	0	; () banked
 11769  012910  6FCA               	movwf	Timer0_Init@pFrequency& (0+255),b
 11770  012912  0E03               	movlw	3
 11771  012914  6FCB               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 11772  012916  0E00               	movlw	0
 11773  012918  6FCC               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 11774  01291A  0E00               	movlw	0
 11775  01291C  6FCD               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 11776  01291E  EC79  F090         	call	_Timer0_Init	;wreg free
 11777  012922  0012               	return		;funcret
 11778  012924                     __end_of_Motor_Init:
 11779                           	opt stack 0
 11780                           tosu	equ	0xFFF
 11781                           tosh	equ	0xFFE
 11782                           tosl	equ	0xFFD
 11783                           pclath	equ	0xFFA
 11784                           tblptru	equ	0xFF8
 11785                           tblptrh	equ	0xFF7
 11786                           tblptrl	equ	0xFF6
 11787                           tablat	equ	0xFF5
 11788                           prodh	equ	0xFF4
 11789                           prodl	equ	0xFF3
 11790                           intcon	equ	0xFF2
 11791                           postinc0	equ	0xFEE
 11792                           wreg	equ	0xFE8
 11793                           indf1	equ	0xFE7
 11794                           postdec1	equ	0xFE5
 11795                           fsr1h	equ	0xFE2
 11796                           fsr1l	equ	0xFE1
 11797                           indf2	equ	0xFDF
 11798                           postinc2	equ	0xFDE
 11799                           postdec2	equ	0xFDD
 11800                           plusw2	equ	0xFDB
 11801                           fsr2h	equ	0xFDA
 11802                           fsr2l	equ	0xFD9
 11803                           status	equ	0xFD8
 11804                           
 11805 ;; *************** function _Timer0_Init *****************
 11806 ;; Defined at:
 11807 ;;		line 25 in file "Library/Timer0.c"
 11808 ;; Parameters:    Size  Location     Type
 11809 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 11812 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 11813 ;; Return value:  Size  Location     Type
 11814 ;;                  1    wreg      void 
 11815 ;; Registers used:
 11816 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11822 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;Total ram usage:       14 bytes
 11827 ;; Hardware stack levels used:    1
 11828 ;; Hardware stack levels required when called:    8
 11829 ;; This function calls:
 11830 ;;		_Timer0_Clear
 11831 ;;		___lldiv
 11832 ;; This function is called by:
 11833 ;;		_Motor_Init
 11834 ;;		_Motor_Speed
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	text65
 11839  0120F2                     __ptext65:
 11840                           	opt stack 0
 11841  0120F2                     _Timer0_Init:
 11842                           	opt stack 19
 11843                           
 11844                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 11845                           
 11846                           ;incstack = 0
 11847  0120F2  0E80               	movlw	128
 11848  0120F4  0100               	movlb	0	; () banked
 11849  0120F6  6FD0               	movwf	Timer0_Init@pCPUClock& (0+255),b
 11850  0120F8  0E8D               	movlw	141
 11851  0120FA  6FD1               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 11852  0120FC  0E5B               	movlw	91
 11853  0120FE  6FD2               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 11854  012100  0E00               	movlw	0
 11855  012102  6FD3               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 11859                           ;Timer0.c: 31: static UINT8 PRE = 0;
 11860                           ;Timer0.c: 32: static UINT32 DIV = 0;
 11861                           ;Timer0.c: 34: UINT32 DIVIDE;
 11862                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 11863  012104  9ED5               	bcf	4053,7,c	;volatile
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;Timer0.c: 38: if (pFrequency == 0)
 11867  012106  0100               	movlb	0	; () banked
 11868  012108  51CA               	movf	Timer0_Init@pFrequency& (0+255),w,b
 11869  01210A  0100               	movlb	0	; () banked
 11870  01210C  11CB               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 11871  01210E  0100               	movlb	0	; () banked
 11872  012110  11CC               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 11873  012112  0100               	movlb	0	; () banked
 11874  012114  11CD               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 11875  012116  B4D8               	btfsc	status,2,c
 11876  012118  0012               	return	
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;Timer0.c: 39: return;
 11883  01211A  96D5               	bcf	4053,3,c	;volatile
 11884                           
 11885                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 11886  01211C  9CD5               	bcf	4053,6,c	;volatile
 11887                           
 11888                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 11889  01211E  9AD5               	bcf	4053,5,c	;volatile
 11890                           
 11891                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 11892  012120  98D5               	bcf	4053,4,c	;volatile
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 11896  012122  C0D0  F0BD         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 11897  012126  C0D1  F0BE         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 11898  01212A  C0D2  F0BF         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 11899  01212E  C0D3  F0C0         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 11900  012132  C0CA  F0C1         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 11901  012136  C0CB  F0C2         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 11902  01213A  C0CC  F0C3         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 11903  01213E  C0CD  F0C4         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 11904  012142  ECB4  F095         	call	___lldiv	;wreg free
 11905  012146  C0BD  F0D4         	movff	?___lldiv,Timer0_Init@DIVIDE
 11906  01214A  C0BE  F0D5         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 11907  01214E  C0BF  F0D6         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 11908  012152  C0C0  F0D7         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 11909                           
 11910                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 11911  012156  D00C               	goto	l1795
 11912  012158                     l11536:
 11913                           
 11914                           ;Timer0.c: 50: {
 11915                           ;Timer0.c: 51: INDEX ++;
 11916  012158  0100               	movlb	0	; () banked
 11917  01215A  2B79               	incf	_INDEX& (0+255),f,b
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;Timer0.c: 52: if (INDEX >= 3)
 11921  01215C  0E02               	movlw	2
 11922  01215E  0100               	movlb	0	; () banked
 11923  012160  6579               	cpfsgt	_INDEX& (0+255),b
 11924  012162  D001               	goto	l1793
 11925  012164  D02F               	goto	u7960
 11926  012166                     l1793:
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;Timer0.c: 56: if (INDEX >= 8)
 11930                           
 11931                           ; BSR set to: 0
 11932  012166  0E07               	movlw	7
 11933  012168  0100               	movlb	0	; () banked
 11934  01216A  6579               	cpfsgt	_INDEX& (0+255),b
 11935  01216C  D001               	goto	l1795
 11936  01216E  0012               	return	
 11937  012170                     l1795:
 11938                           
 11939                           ; BSR set to: 0
 11940                           
 11941                           ; BSR set to: 0
 11942  012170  C0D4  F0BD         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 11943  012174  C0D5  F0BE         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 11944  012178  C0D6  F0BF         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 11945  01217C  C0D7  F0C0         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 11946  012180  0100               	movlb	0	; () banked
 11947  012182  5179               	movf	_INDEX& (0+255),w,b
 11948  012184  0D02               	mullw	2
 11949  012186  0E4B               	movlw	low Timer0_Init@PRESCALE
 11950  012188  24F3               	addwf	prodl,w,c
 11951  01218A  6EF6               	movwf	tblptrl,c
 11952  01218C  0EFD               	movlw	high Timer0_Init@PRESCALE
 11953  01218E  20F4               	addwfc	prodh,w,c
 11954  012190  6EF7               	movwf	tblptrh,c
 11955  012192                     	if	1	;There are 3 active tblptr bytes
 11956  012192  6AF8               	clrf	tblptru,c
 11957  012194  0E00               	movlw	low (__mediumconst shr (0+16))
 11958  012196  22F8               	addwfc	tblptru,f,c
 11959  012198                     	endif
 11960  012198  0009               	tblrd		*+
 11961  01219A  CFF5 F0CE          	movff	tablat,??_Timer0_Init
 11962  01219E  0009               	tblrd		*+
 11963  0121A0  CFF5 F0CF          	movff	tablat,??_Timer0_Init+1
 11964  0121A4  C0CE  F0C1         	movff	??_Timer0_Init,___lldiv@divisor
 11965  0121A8  C0CF  F0C2         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 11966  0121AC  0100               	movlb	0	; () banked
 11967  0121AE  6BC3               	clrf	(___lldiv@divisor+2)& (0+255),b
 11968  0121B0  6BC4               	clrf	(___lldiv@divisor+3)& (0+255),b
 11969  0121B2  ECB4  F095         	call	___lldiv	;wreg free
 11970  0121B6  0100               	movlb	0	; () banked
 11971  0121B8  51C0               	movf	(?___lldiv+3)& (0+255),w,b
 11972  0121BA  E1CE               	bnz	l11536
 11973  0121BC  0100               	movlb	0	; () banked
 11974  0121BE  05BF               	decf	(?___lldiv+2)& (0+255),w,b
 11975  0121C0  B0D8               	btfsc	status,0,c
 11976  0121C2  D7CA               	goto	l1792
 11977  0121C4                     u7960:
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;Timer0.c: 58: }
 11981                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 11982                           
 11983                           ; BSR set to: 0
 11984  0121C4  0100               	movlb	0	; () banked
 11985  0121C6  5179               	movf	_INDEX& (0+255),w,b
 11986  0121C8  0D02               	mullw	2
 11987  0121CA  0E4B               	movlw	low Timer0_Init@PRESCALE
 11988  0121CC  24F3               	addwf	prodl,w,c
 11989  0121CE  6EF6               	movwf	tblptrl,c
 11990  0121D0  0EFD               	movlw	high Timer0_Init@PRESCALE
 11991  0121D2  20F4               	addwfc	prodh,w,c
 11992  0121D4  6EF7               	movwf	tblptrh,c
 11993  0121D6                     	if	1	;There are 3 active tblptr bytes
 11994  0121D6  6AF8               	clrf	tblptru,c
 11995  0121D8  0E00               	movlw	low (__mediumconst shr (0+16))
 11996  0121DA  22F8               	addwfc	tblptru,f,c
 11997  0121DC                     	endif
 11998  0121DC  0008               	tblrd		*
 11999  0121DE  CFF5 F078          	movff	tablat,Timer0_Init@PRE
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 12003  0121E2  0EFF               	movlw	255
 12004  0121E4  0100               	movlb	0	; () banked
 12005  0121E6  25D4               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 12006  0121E8  0100               	movlb	0	; () banked
 12007  0121EA  6F64               	movwf	Timer0_Init@DIV& (0+255),b
 12008  0121EC  0EFF               	movlw	255
 12009  0121EE  0100               	movlb	0	; () banked
 12010  0121F0  21D5               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 12011  0121F2  0100               	movlb	0	; () banked
 12012  0121F4  6F65               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 12013  0121F6  0EFF               	movlw	255
 12014  0121F8  0100               	movlb	0	; () banked
 12015  0121FA  21D6               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 12016  0121FC  0100               	movlb	0	; () banked
 12017  0121FE  6F66               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 12018  012200  0EFF               	movlw	255
 12019  012202  0100               	movlb	0	; () banked
 12020  012204  21D7               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 12021  012206  0100               	movlb	0	; () banked
 12022  012208  6F67               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 12026  01220A  C064  F0BD         	movff	Timer0_Init@DIV,___lldiv@dividend
 12027  01220E  C065  F0BE         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 12028  012212  C066  F0BF         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 12029  012216  C067  F0C0         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 12030  01221A  0100               	movlb	0	; () banked
 12031  01221C  5178               	movf	Timer0_Init@PRE& (0+255),w,b
 12032  01221E  0100               	movlb	0	; () banked
 12033  012220  6FC1               	movwf	___lldiv@divisor& (0+255),b
 12034  012222  6BC2               	clrf	(___lldiv@divisor+1)& (0+255),b
 12035  012224  6BC3               	clrf	(___lldiv@divisor+2)& (0+255),b
 12036  012226  6BC4               	clrf	(___lldiv@divisor+3)& (0+255),b
 12037  012228  ECB4  F095         	call	___lldiv	;wreg free
 12038  01222C  0100               	movlb	0	; () banked
 12039  01222E  1FBD               	comf	?___lldiv& (0+255),f,b
 12040  012230  0100               	movlb	0	; () banked
 12041  012232  1FBE               	comf	(?___lldiv+1)& (0+255),f,b
 12042  012234  0100               	movlb	0	; () banked
 12043  012236  4BBD               	infsnz	?___lldiv& (0+255),f,b
 12044  012238  2BBE               	incf	(?___lldiv+1)& (0+255),f,b
 12045  01223A  0EFF               	movlw	255
 12046  01223C  0100               	movlb	0	; () banked
 12047  01223E  25BD               	addwf	?___lldiv& (0+255),w,b
 12048  012240  6E32               	movwf	_COUNTER,c
 12049  012242  0EFF               	movlw	255
 12050  012244  0100               	movlb	0	; () banked
 12051  012246  21BE               	addwfc	(?___lldiv+1)& (0+255),w,b
 12052  012248  6E33               	movwf	_COUNTER+1,c
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;Timer0.c: 68: Timer0_Clear();
 12056  01224A  ECAE  F0A5         	call	_Timer0_Clear	;wreg free
 12057                           
 12058                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 12059  01224E  8ED5               	bsf	4053,7,c	;volatile
 12060  012250  0012               	return		;funcret
 12061  012252                     __end_of_Timer0_Init:
 12062                           	opt stack 0
 12063                           tosu	equ	0xFFF
 12064                           tosh	equ	0xFFE
 12065                           tosl	equ	0xFFD
 12066                           pclath	equ	0xFFA
 12067                           tblptru	equ	0xFF8
 12068                           tblptrh	equ	0xFF7
 12069                           tblptrl	equ	0xFF6
 12070                           tablat	equ	0xFF5
 12071                           prodh	equ	0xFF4
 12072                           prodl	equ	0xFF3
 12073                           intcon	equ	0xFF2
 12074                           postinc0	equ	0xFEE
 12075                           wreg	equ	0xFE8
 12076                           indf1	equ	0xFE7
 12077                           postdec1	equ	0xFE5
 12078                           fsr1h	equ	0xFE2
 12079                           fsr1l	equ	0xFE1
 12080                           indf2	equ	0xFDF
 12081                           postinc2	equ	0xFDE
 12082                           postdec2	equ	0xFDD
 12083                           plusw2	equ	0xFDB
 12084                           fsr2h	equ	0xFDA
 12085                           fsr2l	equ	0xFD9
 12086                           status	equ	0xFD8
 12087                           
 12088 ;; *************** function _Timer0_Clear *****************
 12089 ;; Defined at:
 12090 ;;		line 20 in file "Library/Timer0.c"
 12091 ;; Parameters:    Size  Location     Type
 12092 ;;		None
 12093 ;; Auto vars:     Size  Location     Type
 12094 ;;		None
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  1    wreg      void 
 12097 ;; Registers used:
 12098 ;;		None
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12108 ;;Total ram usage:        0 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; Hardware stack levels required when called:    7
 12111 ;; This function calls:
 12112 ;;		Nothing
 12113 ;; This function is called by:
 12114 ;;		_Timer0_Init
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text66
 12119  014B5C                     __ptext66:
 12120                           	opt stack 0
 12121  014B5C                     _Timer0_Clear:
 12122                           	opt stack 19
 12123                           
 12124                           ;Timer0.c: 22: TMR0 = COUNTER;
 12125                           
 12126                           ;incstack = 0
 12127  014B5C  C032  FFD6         	movff	_COUNTER,4054	;volatile
 12128  014B60  C033  FFD7         	movff	_COUNTER+1,4055	;volatile
 12129                           
 12130                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 12131  014B64  94F2               	bcf	intcon,2,c	;volatile
 12132  014B66  0012               	return		;funcret
 12133  014B68                     __end_of_Timer0_Clear:
 12134                           	opt stack 0
 12135                           tosu	equ	0xFFF
 12136                           tosh	equ	0xFFE
 12137                           tosl	equ	0xFFD
 12138                           pclath	equ	0xFFA
 12139                           tblptru	equ	0xFF8
 12140                           tblptrh	equ	0xFF7
 12141                           tblptrl	equ	0xFF6
 12142                           tablat	equ	0xFF5
 12143                           prodh	equ	0xFF4
 12144                           prodl	equ	0xFF3
 12145                           intcon	equ	0xFF2
 12146                           postinc0	equ	0xFEE
 12147                           wreg	equ	0xFE8
 12148                           indf1	equ	0xFE7
 12149                           postdec1	equ	0xFE5
 12150                           fsr1h	equ	0xFE2
 12151                           fsr1l	equ	0xFE1
 12152                           indf2	equ	0xFDF
 12153                           postinc2	equ	0xFDE
 12154                           postdec2	equ	0xFDD
 12155                           plusw2	equ	0xFDB
 12156                           fsr2h	equ	0xFDA
 12157                           fsr2l	equ	0xFD9
 12158                           status	equ	0xFD8
 12159                           
 12160 ;; *************** function _MXK_Init *****************
 12161 ;; Defined at:
 12162 ;;		line 33 in file "Library/MXK.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;		None
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;		None
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  1    wreg      void 
 12169 ;; Registers used:
 12170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;Total ram usage:        0 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:   16
 12183 ;; This function calls:
 12184 ;;		_LED_Init
 12185 ;;		_Port_Init
 12186 ;;		_Port_SetPin
 12187 ;;		_Port_SetPinType
 12188 ;;		_Port_SetQuadType
 12189 ;;		_Port_SetType
 12190 ;;		_delay_ms
 12191 ;; This function is called by:
 12192 ;;		_initialise
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           	psect	text67
 12197  011C9A                     __ptext67:
 12198                           	opt stack 0
 12199  011C9A                     _MXK_Init:
 12200                           	opt stack 13
 12201                           
 12202                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 12203                           
 12204                           ;incstack = 0
 12205  011C9A  0E01               	movlw	1
 12206  011C9C  6E4B               	movwf	_Bus_State,c
 12207                           
 12208                           ;MXK.c: 36: lQueue = (Function)0;
 12209  011C9E  0E00               	movlw	0
 12210  011CA0  0100               	movlb	0	; () banked
 12211  011CA2  6F68               	movwf	_lQueue& (0+255),b	;volatile
 12212  011CA4  0E00               	movlw	0
 12213  011CA6  0100               	movlb	0	; () banked
 12214  011CA8  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
 12215  011CAA  0E00               	movlw	0
 12216  011CAC  0100               	movlb	0	; () banked
 12217  011CAE  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 12221  011CB0  0E9F               	movlw	low _PortA
 12222  011CB2  0101               	movlb	1	; () banked
 12223  011CB4  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12224  011CB6  0E01               	movlw	high _PortA
 12225  011CB8  0101               	movlb	1	; () banked
 12226  011CBA  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12227  011CBC  0E00               	movlw	0
 12228  011CBE  0101               	movlb	1	; () banked
 12229  011CC0  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12230  011CC2  EC84  F08D         	call	_Port_Init	;wreg free
 12231                           
 12232                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 12233  011CC6  0E95               	movlw	low _PortB
 12234  011CC8  0101               	movlb	1	; () banked
 12235  011CCA  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12236  011CCC  0E01               	movlw	high _PortB
 12237  011CCE  0101               	movlb	1	; () banked
 12238  011CD0  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12239  011CD2  0E01               	movlw	1
 12240  011CD4  0101               	movlb	1	; () banked
 12241  011CD6  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12242  011CD8  EC84  F08D         	call	_Port_Init	;wreg free
 12243                           
 12244                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 12245  011CDC  0E91               	movlw	low _PortC
 12246  011CDE  0101               	movlb	1	; () banked
 12247  011CE0  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12248  011CE2  0E00               	movlw	high _PortC
 12249  011CE4  0101               	movlb	1	; () banked
 12250  011CE6  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12251  011CE8  0E02               	movlw	2
 12252  011CEA  0101               	movlb	1	; () banked
 12253  011CEC  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12254  011CEE  EC84  F08D         	call	_Port_Init	;wreg free
 12255                           
 12256                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 12257  011CF2  0E87               	movlw	low _PortD
 12258  011CF4  0101               	movlb	1	; () banked
 12259  011CF6  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12260  011CF8  0E00               	movlw	high _PortD
 12261  011CFA  0101               	movlb	1	; () banked
 12262  011CFC  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12263  011CFE  0E03               	movlw	3
 12264  011D00  0101               	movlb	1	; () banked
 12265  011D02  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12266  011D04  EC84  F08D         	call	_Port_Init	;wreg free
 12267                           
 12268                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 12269  011D08  0E7D               	movlw	low _PortE
 12270  011D0A  0101               	movlb	1	; () banked
 12271  011D0C  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12272  011D0E  0E00               	movlw	high _PortE
 12273  011D10  0101               	movlb	1	; () banked
 12274  011D12  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12275  011D14  0E04               	movlw	4
 12276  011D16  0101               	movlb	1	; () banked
 12277  011D18  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12278  011D1A  EC84  F08D         	call	_Port_Init	;wreg free
 12279                           
 12280                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 12281  011D1E  0EA9               	movlw	low _PortF
 12282  011D20  0101               	movlb	1	; () banked
 12283  011D22  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12284  011D24  0E01               	movlw	high _PortF
 12285  011D26  0101               	movlb	1	; () banked
 12286  011D28  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12287  011D2A  0E05               	movlw	5
 12288  011D2C  0101               	movlb	1	; () banked
 12289  011D2E  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12290  011D30  EC84  F08D         	call	_Port_Init	;wreg free
 12291                           
 12292                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 12293  011D34  0E8B               	movlw	low _PortG
 12294  011D36  0101               	movlb	1	; () banked
 12295  011D38  6FBE               	movwf	Port_Init@pInput& (0+255),b
 12296  011D3A  0E01               	movlw	high _PortG
 12297  011D3C  0101               	movlb	1	; () banked
 12298  011D3E  6FBF               	movwf	(Port_Init@pInput+1)& (0+255),b
 12299  011D40  0E06               	movlw	6
 12300  011D42  0101               	movlb	1	; () banked
 12301  011D44  6FC0               	movwf	Port_Init@pPort& (0+255),b
 12302  011D46  EC84  F08D         	call	_Port_Init	;wreg free
 12303                           
 12304                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 12305  011D4A  0EA9               	movlw	low _PortF
 12306  011D4C  0100               	movlb	0	; () banked
 12307  011D4E  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 12308  011D50  0E01               	movlw	high _PortF
 12309  011D52  0100               	movlb	0	; () banked
 12310  011D54  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12311  011D56  0E05               	movlw	5
 12312  011D58  0100               	movlb	0	; () banked
 12313  011D5A  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 12314  011D5C  0E00               	movlw	0
 12315  011D5E  0100               	movlb	0	; () banked
 12316  011D60  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 12317  011D62  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 12318                           
 12319                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 12320  011D66  0E95               	movlw	low _PortB
 12321  011D68  0100               	movlb	0	; () banked
 12322  011D6A  6FF3               	movwf	Port_SetQuadType@pInput& (0+255),b
 12323  011D6C  0E01               	movlw	high _PortB
 12324  011D6E  0100               	movlb	0	; () banked
 12325  011D70  6FF4               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 12326  011D72  0E00               	movlw	0
 12327  011D74  0100               	movlb	0	; () banked
 12328  011D76  6FF5               	movwf	Port_SetQuadType@pQuad& (0+255),b
 12329  011D78  0E00               	movlw	0
 12330  011D7A  0100               	movlb	0	; () banked
 12331  011D7C  6FF6               	movwf	Port_SetQuadType@pType& (0+255),b
 12332  011D7E  EC77  F086         	call	_Port_SetQuadType	;wreg free
 12333                           
 12334                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 12335  011D82  0EA9               	movlw	low _PortF
 12336  011D84  0100               	movlb	0	; () banked
 12337  011D86  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 12338  011D88  0E01               	movlw	high _PortF
 12339  011D8A  0100               	movlb	0	; () banked
 12340  011D8C  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12341  011D8E  0E06               	movlw	6
 12342  011D90  0100               	movlb	0	; () banked
 12343  011D92  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 12344  011D94  0E03               	movlw	3
 12345  011D96  0100               	movlb	0	; () banked
 12346  011D98  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 12347  011D9A  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 12348                           
 12349                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 12350  011D9E  0E8B               	movlw	low _PortG
 12351  011DA0  0101               	movlb	1	; () banked
 12352  011DA2  6FBA               	movwf	Port_SetType@pInput& (0+255),b
 12353  011DA4  0E01               	movlw	high _PortG
 12354  011DA6  0101               	movlb	1	; () banked
 12355  011DA8  6FBB               	movwf	(Port_SetType@pInput+1)& (0+255),b
 12356  011DAA  0E03               	movlw	3
 12357  011DAC  0101               	movlb	1	; () banked
 12358  011DAE  6FBC               	movwf	Port_SetType@pType& (0+255),b
 12359  011DB0  ECBB  F088         	call	_Port_SetType	;wreg free
 12360                           
 12361                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 12362  011DB4  0E8B               	movlw	low _PortG
 12363  011DB6  0100               	movlb	0	; () banked
 12364  011DB8  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 12365  011DBA  0E01               	movlw	high _PortG
 12366  011DBC  0100               	movlb	0	; () banked
 12367  011DBE  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12368  011DC0  0E04               	movlw	4
 12369  011DC2  0100               	movlb	0	; () banked
 12370  011DC4  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 12371  011DC6  0E00               	movlw	0
 12372  011DC8  0100               	movlb	0	; () banked
 12373  011DCA  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 12374  011DCC  EC92  F094         	call	_Port_SetPin	;wreg free
 12375                           
 12376                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 12377  011DD0  0EA9               	movlw	low _PortF
 12378  011DD2  0100               	movlb	0	; () banked
 12379  011DD4  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 12380  011DD6  0E01               	movlw	high _PortF
 12381  011DD8  0100               	movlb	0	; () banked
 12382  011DDA  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12383  011DDC  0E06               	movlw	6
 12384  011DDE  0100               	movlb	0	; () banked
 12385  011DE0  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 12386  011DE2  0E01               	movlw	1
 12387  011DE4  0100               	movlb	0	; () banked
 12388  011DE6  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 12389  011DE8  EC92  F094         	call	_Port_SetPin	;wreg free
 12390                           
 12391                           ;MXK.c: 55: LED_Init(eLED1);
 12392  011DEC  0E00               	movlw	0
 12393  011DEE  EC2A  F09F         	call	_LED_Init
 12394                           
 12395                           ;MXK.c: 56: LED_Init(eLED2);
 12396  011DF2  0E01               	movlw	1
 12397  011DF4  EC2A  F09F         	call	_LED_Init
 12398                           
 12399                           ;MXK.c: 58: PIR1 = 0;
 12400  011DF8  0E00               	movlw	0
 12401  011DFA  6E9E               	movwf	3998,c	;volatile
 12402                           
 12403                           ;MXK.c: 59: PIR2 = 0;
 12404  011DFC  0E00               	movlw	0
 12405  011DFE  6EA1               	movwf	4001,c	;volatile
 12406                           
 12407                           ;MXK.c: 60: PIR3 = 0;
 12408  011E00  0E00               	movlw	0
 12409  011E02  6EA4               	movwf	4004,c	;volatile
 12410                           
 12411                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 12412  011E04  8E9B               	bsf	3995,7,c	;volatile
 12413                           
 12414                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 12415  011E06  8C9B               	bsf	3995,6,c	;volatile
 12416                           
 12417                           ;MXK.c: 66: delay_ms(100);
 12418  011E08  0E00               	movlw	0
 12419  011E0A  0100               	movlb	0	; () banked
 12420  011E0C  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
 12421  011E0E  0E64               	movlw	100
 12422  011E10  6FBD               	movwf	delay_ms@ms& (0+255),b
 12423  011E12  EC2A  F09E         	call	_delay_ms	;wreg free
 12424                           
 12425                           ;MXK.c: 68: RCONbits.IPEN = 1;
 12426  011E16  8ED0               	bsf	4048,7,c	;volatile
 12427  011E18  0012               	return		;funcret
 12428  011E1A                     __end_of_MXK_Init:
 12429                           	opt stack 0
 12430                           tosu	equ	0xFFF
 12431                           tosh	equ	0xFFE
 12432                           tosl	equ	0xFFD
 12433                           pclath	equ	0xFFA
 12434                           tblptru	equ	0xFF8
 12435                           tblptrh	equ	0xFF7
 12436                           tblptrl	equ	0xFF6
 12437                           tablat	equ	0xFF5
 12438                           prodh	equ	0xFF4
 12439                           prodl	equ	0xFF3
 12440                           intcon	equ	0xFF2
 12441                           postinc0	equ	0xFEE
 12442                           wreg	equ	0xFE8
 12443                           indf1	equ	0xFE7
 12444                           postdec1	equ	0xFE5
 12445                           fsr1h	equ	0xFE2
 12446                           fsr1l	equ	0xFE1
 12447                           indf2	equ	0xFDF
 12448                           postinc2	equ	0xFDE
 12449                           postdec2	equ	0xFDD
 12450                           plusw2	equ	0xFDB
 12451                           fsr2h	equ	0xFDA
 12452                           fsr2l	equ	0xFD9
 12453                           status	equ	0xFD8
 12454                           
 12455 ;; *************** function _Port_Init *****************
 12456 ;; Defined at:
 12457 ;;		line 150 in file "Library/Port.c"
 12458 ;; Parameters:    Size  Location     Type
 12459 ;;  pInput          2    4[BANK1 ] const PTR struct Port
 12460 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12461 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12462 ;;  pPort           1    6[BANK1 ] enum E6786
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;  i               1    9[BANK1 ] unsigned char 
 12465 ;; Return value:  Size  Location     Type
 12466 ;;                  1    wreg      void 
 12467 ;; Registers used:
 12468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 0/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12474 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12475 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12477 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;Total ram usage:        6 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:   15
 12481 ;; This function calls:
 12482 ;;		_GetPortPORT
 12483 ;;		_GetPortProperties
 12484 ;;		_GetPortTRIS
 12485 ;;		_Port_Set
 12486 ;;		_Port_SetPinType
 12487 ;;		_Port_SetType
 12488 ;;		_Word_GetPair
 12489 ;; This function is called by:
 12490 ;;		_MXK_Init
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text68
 12495  011B08                     __ptext68:
 12496                           	opt stack 0
 12497  011B08                     _Port_Init:
 12498                           	opt stack 13
 12499                           
 12500                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 12501                           
 12502                           ;incstack = 0
 12503  011B08  0101               	movlb	1	; () banked
 12504  011B0A  51C0               	movf	Port_Init@pPort& (0+255),w,b
 12505  011B0C  EC1E  F098         	call	_GetPortProperties
 12506  011B10  C1BE  FFD9         	movff	Port_Init@pInput,fsr2l
 12507  011B14  C1BF  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12508  011B18  0100               	movlb	0	; () banked
 12509  011B1A  C0BD  FFDE         	movff	?_GetPortProperties,postinc2
 12510  011B1E  0100               	movlb	0	; () banked
 12511  011B20  C0BE  FFDD         	movff	?_GetPortProperties+1,postdec2
 12512                           
 12513                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 12514  011B24  0101               	movlb	1	; () banked
 12515  011B26  51C0               	movf	Port_Init@pPort& (0+255),w,b
 12516  011B28  EC71  F098         	call	_GetPortPORT
 12517  011B2C  0101               	movlb	1	; () banked
 12518  011B2E  EE20 F006          	lfsr	2,6
 12519  011B32  51BE               	movf	Port_Init@pInput& (0+255),w,b
 12520  011B34  26D9               	addwf	fsr2l,f,c
 12521  011B36  51BF               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12522  011B38  22DA               	addwfc	fsr2h,f,c
 12523  011B3A  0100               	movlb	0	; () banked
 12524  011B3C  C0BD  FFDE         	movff	?_GetPortPORT,postinc2
 12525  011B40  0100               	movlb	0	; () banked
 12526  011B42  C0BE  FFDD         	movff	?_GetPortPORT+1,postdec2
 12527                           
 12528                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 12529  011B46  0101               	movlb	1	; () banked
 12530  011B48  51C0               	movf	Port_Init@pPort& (0+255),w,b
 12531  011B4A  EC71  F098         	call	_GetPortPORT
 12532  011B4E  0101               	movlb	1	; () banked
 12533  011B50  EE20 F004          	lfsr	2,4
 12534  011B54  51BE               	movf	Port_Init@pInput& (0+255),w,b
 12535  011B56  26D9               	addwf	fsr2l,f,c
 12536  011B58  51BF               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12537  011B5A  22DA               	addwfc	fsr2h,f,c
 12538  011B5C  0100               	movlb	0	; () banked
 12539  011B5E  C0BD  FFDE         	movff	?_GetPortPORT,postinc2
 12540  011B62  0100               	movlb	0	; () banked
 12541  011B64  C0BE  FFDD         	movff	?_GetPortPORT+1,postdec2
 12542                           
 12543                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 12544  011B68  0101               	movlb	1	; () banked
 12545  011B6A  51C0               	movf	Port_Init@pPort& (0+255),w,b
 12546  011B6C  ECCB  F097         	call	_GetPortTRIS
 12547  011B70  0101               	movlb	1	; () banked
 12548  011B72  EE20 F002          	lfsr	2,2
 12549  011B76  51BE               	movf	Port_Init@pInput& (0+255),w,b
 12550  011B78  26D9               	addwf	fsr2l,f,c
 12551  011B7A  51BF               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12552  011B7C  22DA               	addwfc	fsr2h,f,c
 12553  011B7E  0100               	movlb	0	; () banked
 12554  011B80  C0BD  FFDE         	movff	?_GetPortTRIS,postinc2
 12555  011B84  0100               	movlb	0	; () banked
 12556  011B86  C0BE  FFDD         	movff	?_GetPortTRIS+1,postdec2
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 12560  011B8A  0101               	movlb	1	; () banked
 12561  011B8C  EE20 F004          	lfsr	2,4
 12562  011B90  51BE               	movf	Port_Init@pInput& (0+255),w,b
 12563  011B92  26D9               	addwf	fsr2l,f,c
 12564  011B94  51BF               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12565  011B96  22DA               	addwfc	fsr2h,f,c
 12566  011B98  CFDE F1C1          	movff	postinc2,??_Port_Init
 12567  011B9C  CFDD F1C2          	movff	postdec2,??_Port_Init+1
 12568  011BA0  C1C1  FFD9         	movff	??_Port_Init,fsr2l
 12569  011BA4  C1C2  FFDA         	movff	??_Port_Init+1,fsr2h
 12570  011BA8  0E00               	movlw	0
 12571  011BAA  6EDF               	movwf	indf2,c
 12572                           
 12573                           ; BSR set to: 1
 12574                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 12575  011BAC  0101               	movlb	1	; () banked
 12576  011BAE  EE20 F002          	lfsr	2,2
 12577  011BB2  51BE               	movf	Port_Init@pInput& (0+255),w,b
 12578  011BB4  26D9               	addwf	fsr2l,f,c
 12579  011BB6  51BF               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12580  011BB8  22DA               	addwfc	fsr2h,f,c
 12581  011BBA  CFDE F1C1          	movff	postinc2,??_Port_Init
 12582  011BBE  CFDD F1C2          	movff	postdec2,??_Port_Init+1
 12583  011BC2  C1C1  FFD9         	movff	??_Port_Init,fsr2l
 12584  011BC6  C1C2  FFDA         	movff	??_Port_Init+1,fsr2h
 12585  011BCA  0EFF               	movlw	255
 12586  011BCC  6EDF               	movwf	indf2,c
 12587                           
 12588                           ; BSR set to: 1
 12589                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 12590  011BCE  C1BE  F1BA         	movff	Port_Init@pInput,Port_SetType@pInput
 12591  011BD2  C1BF  F1BB         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 12592  011BD6  0E00               	movlw	0
 12593  011BD8  0101               	movlb	1	; () banked
 12594  011BDA  6FBC               	movwf	Port_SetType@pType& (0+255),b
 12595  011BDC  ECBB  F088         	call	_Port_SetType	;wreg free
 12596                           
 12597                           ;Port.c: 166: UINT8 i;
 12598                           ;Port.c: 167: for (i=0; i<8; i++)
 12599  011BE0  0E00               	movlw	0
 12600  011BE2  0101               	movlb	1	; () banked
 12601  011BE4  6FC3               	movwf	Port_Init@i& (0+255),b
 12602  011BE6                     l11746:
 12603                           
 12604                           ; BSR set to: 1
 12605  011BE6  0E07               	movlw	7
 12606  011BE8  0101               	movlb	1	; () banked
 12607  011BEA  65C3               	cpfsgt	Port_Init@i& (0+255),b
 12608  011BEC  D031               	goto	l403
 12609  011BEE  D04B               	goto	u8130
 12610  011BF0                     
 12611                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 12612                           
 12613                           ; BSR set to: 1
 12614  011BF0  C1BE  F0E3         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12615  011BF4  C1BF  F0E4         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12616  011BF8  C1C3  F0E5         	movff	Port_Init@i,Port_SetPinType@pPin
 12617  011BFC  0E03               	movlw	3
 12618  011BFE  0100               	movlb	0	; () banked
 12619  011C00  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 12620  011C02  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 12621                           
 12622                           ;Port.c: 173: break;
 12623  011C06  D03C               	goto	l405
 12624  011C08                     
 12625                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 12626  011C08  C1BE  F0E3         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12627  011C0C  C1BF  F0E4         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12628  011C10  C1C3  F0E5         	movff	Port_Init@i,Port_SetPinType@pPin
 12629  011C14  0E02               	movlw	2
 12630  011C16  0100               	movlb	0	; () banked
 12631  011C18  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 12632  011C1A  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 12633                           
 12634                           ;Port.c: 176: break;
 12635  011C1E  D030               	goto	l405
 12636  011C20                     
 12637                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 12638  011C20  C1BE  F0E3         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12639  011C24  C1BF  F0E4         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12640  011C28  C1C3  F0E5         	movff	Port_Init@i,Port_SetPinType@pPin
 12641  011C2C  0E01               	movlw	1
 12642  011C2E  0100               	movlb	0	; () banked
 12643  011C30  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 12644  011C32  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 12645                           
 12646                           ;Port.c: 179: break;
 12647  011C36  D024               	goto	l405
 12648  011C38                     
 12649                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 12650  011C38  C1BE  F0E3         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12651  011C3C  C1BF  F0E4         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12652  011C40  C1C3  F0E5         	movff	Port_Init@i,Port_SetPinType@pPin
 12653  011C44  0E00               	movlw	0
 12654  011C46  0100               	movlb	0	; () banked
 12655  011C48  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 12656  011C4A  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 12657                           
 12658                           ;Port.c: 183: }
 12659                           
 12660                           ;Port.c: 182: break;
 12661  011C4E  D018               	goto	l405
 12662  011C50                     l403:
 12663  011C50  C1BE  FFD9         	movff	Port_Init@pInput,fsr2l
 12664  011C54  C1BF  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12665  011C58  CFDE F0C9          	movff	postinc2,Word_GetPair@pInput
 12666  011C5C  CFDD F0CA          	movff	postdec2,Word_GetPair@pInput+1
 12667  011C60  C1C3  F0CB         	movff	Port_Init@i,Word_GetPair@pPair
 12668  011C64  EC49  F0A2         	call	_Word_GetPair	;wreg free
 12669                           
 12670                           ; Switch size 1, requested type "space"
 12671                           ; Number of cases is 4, Range of values is 0 to 3
 12672                           ; switch strategies available:
 12673                           ; Name         Instructions Cycles
 12674                           ; simple_byte           13     7 (average)
 12675                           ;	Chosen strategy is simple_byte
 12676  011C68  0A00               	xorlw	0	; case 0
 12677  011C6A  B4D8               	btfsc	status,2,c
 12678  011C6C  D7C1               	goto	l404
 12679  011C6E  0A01               	xorlw	1	; case 1
 12680  011C70  B4D8               	btfsc	status,2,c
 12681  011C72  D7D6               	goto	l407
 12682  011C74  0A03               	xorlw	3	; case 2
 12683  011C76  B4D8               	btfsc	status,2,c
 12684  011C78  D7C7               	goto	l406
 12685  011C7A  0A01               	xorlw	1	; case 3
 12686  011C7C  B4D8               	btfsc	status,2,c
 12687  011C7E  D7DC               	goto	l408
 12688  011C80                     l405:
 12689  011C80  0101               	movlb	1	; () banked
 12690  011C82  2BC3               	incf	Port_Init@i& (0+255),f,b
 12691  011C84  D7B0               	goto	l11746
 12692  011C86                     u8130:
 12693                           
 12694                           ; BSR set to: 1
 12695                           ;Port.c: 184: }
 12696                           ;Port.c: 185: Port_Set(pInput, 0x00);
 12697                           
 12698                           ; BSR set to: 1
 12699  011C86  C1BE  F0CC         	movff	Port_Init@pInput,Port_Set@pInput
 12700  011C8A  C1BF  F0CD         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 12701  011C8E  0E00               	movlw	0
 12702  011C90  0100               	movlb	0	; () banked
 12703  011C92  6FCE               	movwf	Port_Set@pValue& (0+255),b
 12704  011C94  EC0F  F082         	call	_Port_Set	;wreg free
 12705  011C98  0012               	return		;funcret
 12706  011C9A                     __end_of_Port_Init:
 12707                           	opt stack 0
 12708                           tosu	equ	0xFFF
 12709                           tosh	equ	0xFFE
 12710                           tosl	equ	0xFFD
 12711                           pclath	equ	0xFFA
 12712                           tblptru	equ	0xFF8
 12713                           tblptrh	equ	0xFF7
 12714                           tblptrl	equ	0xFF6
 12715                           tablat	equ	0xFF5
 12716                           prodh	equ	0xFF4
 12717                           prodl	equ	0xFF3
 12718                           intcon	equ	0xFF2
 12719                           postinc0	equ	0xFEE
 12720                           wreg	equ	0xFE8
 12721                           indf1	equ	0xFE7
 12722                           postdec1	equ	0xFE5
 12723                           fsr1h	equ	0xFE2
 12724                           fsr1l	equ	0xFE1
 12725                           indf2	equ	0xFDF
 12726                           postinc2	equ	0xFDE
 12727                           postdec2	equ	0xFDD
 12728                           plusw2	equ	0xFDB
 12729                           fsr2h	equ	0xFDA
 12730                           fsr2l	equ	0xFD9
 12731                           status	equ	0xFD8
 12732                           
 12733 ;; *************** function _Port_SetType *****************
 12734 ;; Defined at:
 12735 ;;		line 513 in file "Library/Port.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;  pInput          2    0[BANK1 ] const PTR struct Port
 12738 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12739 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12740 ;;  pType           1    2[BANK1 ] enum E6795
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;  Output          1    3[BANK1 ] enum E6475
 12743 ;; Return value:  Size  Location     Type
 12744 ;;                  1    wreg      enum E6475
 12745 ;; Registers used:
 12746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12747 ;; Tracked objects:
 12748 ;;		On entry : 0/0
 12749 ;;		On exit  : 0/0
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12752 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12753 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12755 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12756 ;;Total ram usage:        6 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; Hardware stack levels required when called:   14
 12759 ;; This function calls:
 12760 ;;		_Port_CheckPortType
 12761 ;;		_Word_SetPair
 12762 ;; This function is called by:
 12763 ;;		_Port_Init
 12764 ;;		_MXK_Init
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text69
 12769  011176                     __ptext69:
 12770                           	opt stack 0
 12771  011176                     _Port_SetType:
 12772                           	opt stack 14
 12773                           
 12774                           ;Port.c: 515: ePinError Output = ePinErrorState;
 12775                           
 12776                           ;incstack = 0
 12777  011176  0E05               	movlw	5
 12778  011178  0101               	movlb	1	; () banked
 12779  01117A  6FBD               	movwf	Port_SetType@Output& (0+255),b
 12780                           
 12781                           ;Port.c: 517: switch (pType)
 12782  01117C  D07A               	goto	l509
 12783  01117E                     
 12784                           ; BSR set to: 1
 12785                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 12786                           
 12787                           ; BSR set to: 1
 12788  01117E  0101               	movlb	1	; () banked
 12789  011180  EE20 F002          	lfsr	2,2
 12790  011184  51BA               	movf	Port_SetType@pInput& (0+255),w,b
 12791  011186  26D9               	addwf	fsr2l,f,c
 12792  011188  51BB               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12793  01118A  22DA               	addwfc	fsr2h,f,c
 12794  01118C  CFDE F0F7          	movff	postinc2,??_Port_SetType
 12795  011190  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 12796  011194  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 12797  011198  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 12798  01119C  0EFF               	movlw	255
 12799  01119E  D067               	goto	L4
 12800  0111A0                     
 12801                           ; BSR set to: 1
 12802                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 12803                           
 12804                           ; BSR set to: 1
 12805  0111A0  C1BA  F0F3         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12806  0111A4  C1BB  F0F4         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12807  0111A8  0E01               	movlw	1
 12808  0111AA  0100               	movlb	0	; () banked
 12809  0111AC  6FF5               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12810  0111AE  ECFA  F0A0         	call	_Port_CheckPortType	;wreg free
 12811  0111B2  0101               	movlb	1	; () banked
 12812  0111B4  6FBD               	movwf	Port_SetType@Output& (0+255),b
 12813  0111B6  0101               	movlb	1	; () banked
 12814  0111B8  51BD               	movf	Port_SetType@Output& (0+255),w,b
 12815  0111BA  A4D8               	btfss	status,2,c
 12816  0111BC  0012               	return	
 12817                           
 12818                           ; BSR set to: 1
 12819                           ;Port.c: 527: {
 12820                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 12821  0111BE  0101               	movlb	1	; () banked
 12822  0111C0  EE20 F002          	lfsr	2,2
 12823  0111C4  51BA               	movf	Port_SetType@pInput& (0+255),w,b
 12824  0111C6  26D9               	addwf	fsr2l,f,c
 12825  0111C8  51BB               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12826  0111CA  22DA               	addwfc	fsr2h,f,c
 12827  0111CC  CFDE F0F7          	movff	postinc2,??_Port_SetType
 12828  0111D0  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 12829  0111D4  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 12830  0111D8  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 12831  0111DC  0E00               	movlw	0
 12832  0111DE  6EDF               	movwf	indf2,c
 12833                           
 12834                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 12835  0111E0  0101               	movlb	1	; () banked
 12836  0111E2  EE20 F004          	lfsr	2,4
 12837  0111E6  D036               	goto	L9
 12838  0111E8                     
 12839                           ; BSR set to: 1
 12840                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 12841                           
 12842                           ; BSR set to: 1
 12843  0111E8  C1BA  F0F3         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12844  0111EC  C1BB  F0F4         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12845  0111F0  0E02               	movlw	2
 12846  0111F2  0100               	movlb	0	; () banked
 12847  0111F4  6FF5               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12848  0111F6  ECFA  F0A0         	call	_Port_CheckPortType	;wreg free
 12849  0111FA  0101               	movlb	1	; () banked
 12850  0111FC  6FBD               	movwf	Port_SetType@Output& (0+255),b
 12851  0111FE  0101               	movlb	1	; () banked
 12852  011200  51BD               	movf	Port_SetType@Output& (0+255),w,b
 12853  011202  A4D8               	btfss	status,2,c
 12854  011204  0012               	return	
 12855                           
 12856                           ; BSR set to: 1
 12857                           ;Port.c: 538: {
 12858                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 12859  011206  0101               	movlb	1	; () banked
 12860  011208  EE20 F002          	lfsr	2,2
 12861  01120C  51BA               	movf	Port_SetType@pInput& (0+255),w,b
 12862  01120E  26D9               	addwf	fsr2l,f,c
 12863  011210  51BB               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12864  011212  22DA               	addwfc	fsr2h,f,c
 12865  011214  CFDE F0F7          	movff	postinc2,??_Port_SetType
 12866  011218  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 12867  01121C  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 12868  011220  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 12869  011224  0EFF               	movlw	255
 12870  011226  6EDF               	movwf	indf2,c
 12871                           
 12872                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 12873  011228  0101               	movlb	1	; () banked
 12874  01122A  EE20 F004          	lfsr	2,4
 12875  01122E  D7AA               	goto	L5
 12876  011230                     
 12877                           ; BSR set to: 1
 12878                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 12879                           
 12880                           ; BSR set to: 1
 12881  011230  C1BA  F0F3         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12882  011234  C1BB  F0F4         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12883  011238  0E00               	movlw	0
 12884  01123A  0100               	movlb	0	; () banked
 12885  01123C  6FF5               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12886  01123E  ECFA  F0A0         	call	_Port_CheckPortType	;wreg free
 12887  011242  0101               	movlb	1	; () banked
 12888  011244  6FBD               	movwf	Port_SetType@Output& (0+255),b
 12889  011246  0101               	movlb	1	; () banked
 12890  011248  51BD               	movf	Port_SetType@Output& (0+255),w,b
 12891  01124A  A4D8               	btfss	status,2,c
 12892  01124C  0012               	return	
 12893                           
 12894                           ; BSR set to: 1
 12895                           ;Port.c: 549: {
 12896                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 12897  01124E  0101               	movlb	1	; () banked
 12898  011250  EE20 F002          	lfsr	2,2
 12899  011254                     L9:
 12900  011254  51BA               	movf	Port_SetType@pInput& (0+255),w,b
 12901  011256  26D9               	addwf	fsr2l,f,c
 12902  011258  51BB               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12903  01125A  22DA               	addwfc	fsr2h,f,c
 12904  01125C  CFDE F0F7          	movff	postinc2,??_Port_SetType
 12905  011260  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 12906  011264  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 12907  011268  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 12908  01126C  0E00               	movlw	0
 12909  01126E                     L4:
 12910  01126E  6EDF               	movwf	indf2,c
 12911                           
 12912                           ;Port.c: 552: }
 12913  011270  D00E               	goto	l511
 12914  011272                     l509:
 12915                           
 12916                           ; BSR set to: 1
 12917                           
 12918                           ; BSR set to: 1
 12919  011272  0101               	movlb	1	; () banked
 12920  011274  51BC               	movf	Port_SetType@pType& (0+255),w,b
 12921                           
 12922                           ; Switch size 1, requested type "space"
 12923                           ; Number of cases is 4, Range of values is 0 to 3
 12924                           ; switch strategies available:
 12925                           ; Name         Instructions Cycles
 12926                           ; simple_byte           13     7 (average)
 12927                           ;	Chosen strategy is simple_byte
 12928  011276  0A00               	xorlw	0	; case 0
 12929  011278  B4D8               	btfsc	status,2,c
 12930  01127A  D781               	goto	l510
 12931  01127C  0A01               	xorlw	1	; case 1
 12932  01127E  B4D8               	btfsc	status,2,c
 12933  011280  D78F               	goto	l512
 12934  011282  0A03               	xorlw	3	; case 2
 12935  011284  B4D8               	btfsc	status,2,c
 12936  011286  D7B0               	goto	l516
 12937  011288  0A01               	xorlw	1	; case 3
 12938  01128A  B4D8               	btfsc	status,2,c
 12939  01128C  D7D1               	goto	l519
 12940  01128E                     l511:
 12941                           
 12942                           ; BSR set to: 1
 12943                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 12944                           
 12945                           ; BSR set to: 1
 12946  01128E  0E08               	movlw	8
 12947  011290  0101               	movlb	1	; () banked
 12948  011292  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 12949  011294  0100               	movlb	0	; () banked
 12950  011296  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 12951  011298  0E00               	movlw	0
 12952  01129A  0101               	movlb	1	; () banked
 12953  01129C  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12954  01129E  0100               	movlb	0	; () banked
 12955  0112A0  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12956  0112A2  0E00               	movlw	0
 12957  0112A4  0100               	movlb	0	; () banked
 12958  0112A6  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 12959  0112A8  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 12960  0112AC  EC65  F0A1         	call	_Word_SetPair	;wreg free
 12961                           
 12962                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 12963  0112B0  0E08               	movlw	8
 12964  0112B2  0101               	movlb	1	; () banked
 12965  0112B4  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 12966  0112B6  0100               	movlb	0	; () banked
 12967  0112B8  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 12968  0112BA  0E00               	movlw	0
 12969  0112BC  0101               	movlb	1	; () banked
 12970  0112BE  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12971  0112C0  0100               	movlb	0	; () banked
 12972  0112C2  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12973  0112C4  0E01               	movlw	1
 12974  0112C6  0100               	movlb	0	; () banked
 12975  0112C8  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 12976  0112CA  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 12977  0112CE  EC65  F0A1         	call	_Word_SetPair	;wreg free
 12978                           
 12979                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 12980  0112D2  0E08               	movlw	8
 12981  0112D4  0101               	movlb	1	; () banked
 12982  0112D6  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 12983  0112D8  0100               	movlb	0	; () banked
 12984  0112DA  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 12985  0112DC  0E00               	movlw	0
 12986  0112DE  0101               	movlb	1	; () banked
 12987  0112E0  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12988  0112E2  0100               	movlb	0	; () banked
 12989  0112E4  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12990  0112E6  0E02               	movlw	2
 12991  0112E8  0100               	movlb	0	; () banked
 12992  0112EA  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 12993  0112EC  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 12994  0112F0  EC65  F0A1         	call	_Word_SetPair	;wreg free
 12995                           
 12996                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 12997  0112F4  0E08               	movlw	8
 12998  0112F6  0101               	movlb	1	; () banked
 12999  0112F8  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 13000  0112FA  0100               	movlb	0	; () banked
 13001  0112FC  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 13002  0112FE  0E00               	movlw	0
 13003  011300  0101               	movlb	1	; () banked
 13004  011302  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13005  011304  0100               	movlb	0	; () banked
 13006  011306  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13007  011308  0E03               	movlw	3
 13008  01130A  0100               	movlb	0	; () banked
 13009  01130C  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 13010  01130E  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 13011  011312  EC65  F0A1         	call	_Word_SetPair	;wreg free
 13012                           
 13013                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 13014  011316  0E08               	movlw	8
 13015  011318  0101               	movlb	1	; () banked
 13016  01131A  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 13017  01131C  0100               	movlb	0	; () banked
 13018  01131E  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 13019  011320  0E00               	movlw	0
 13020  011322  0101               	movlb	1	; () banked
 13021  011324  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13022  011326  0100               	movlb	0	; () banked
 13023  011328  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13024  01132A  0E04               	movlw	4
 13025  01132C  0100               	movlb	0	; () banked
 13026  01132E  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 13027  011330  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 13028  011334  EC65  F0A1         	call	_Word_SetPair	;wreg free
 13029                           
 13030                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 13031  011338  0E08               	movlw	8
 13032  01133A  0101               	movlb	1	; () banked
 13033  01133C  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 13034  01133E  0100               	movlb	0	; () banked
 13035  011340  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 13036  011342  0E00               	movlw	0
 13037  011344  0101               	movlb	1	; () banked
 13038  011346  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13039  011348  0100               	movlb	0	; () banked
 13040  01134A  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13041  01134C  0E05               	movlw	5
 13042  01134E  0100               	movlb	0	; () banked
 13043  011350  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 13044  011352  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 13045  011356  EC65  F0A1         	call	_Word_SetPair	;wreg free
 13046                           
 13047                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 13048  01135A  0E08               	movlw	8
 13049  01135C  0101               	movlb	1	; () banked
 13050  01135E  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 13051  011360  0100               	movlb	0	; () banked
 13052  011362  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 13053  011364  0E00               	movlw	0
 13054  011366  0101               	movlb	1	; () banked
 13055  011368  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13056  01136A  0100               	movlb	0	; () banked
 13057  01136C  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13058  01136E  0E06               	movlw	6
 13059  011370  0100               	movlb	0	; () banked
 13060  011372  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 13061  011374  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 13062  011378  EC65  F0A1         	call	_Word_SetPair	;wreg free
 13063                           
 13064                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 13065  01137C  0E08               	movlw	8
 13066  01137E  0101               	movlb	1	; () banked
 13067  011380  25BA               	addwf	Port_SetType@pInput& (0+255),w,b
 13068  011382  0100               	movlb	0	; () banked
 13069  011384  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 13070  011386  0E00               	movlw	0
 13071  011388  0101               	movlb	1	; () banked
 13072  01138A  21BB               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13073  01138C  0100               	movlb	0	; () banked
 13074  01138E  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13075  011390  0E07               	movlw	7
 13076  011392  0100               	movlb	0	; () banked
 13077  011394  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 13078  011396  C1BC  F0CF         	movff	Port_SetType@pType,Word_SetPair@pValue
 13079  01139A  EC65  F0A1         	call	_Word_SetPair	;wreg free
 13080  01139E  0012               	return	
 13081  0113A0                     __end_of_Port_SetType:
 13082                           	opt stack 0
 13083                           tosu	equ	0xFFF
 13084                           tosh	equ	0xFFE
 13085                           tosl	equ	0xFFD
 13086                           pclath	equ	0xFFA
 13087                           tblptru	equ	0xFF8
 13088                           tblptrh	equ	0xFF7
 13089                           tblptrl	equ	0xFF6
 13090                           tablat	equ	0xFF5
 13091                           prodh	equ	0xFF4
 13092                           prodl	equ	0xFF3
 13093                           intcon	equ	0xFF2
 13094                           postinc0	equ	0xFEE
 13095                           wreg	equ	0xFE8
 13096                           indf1	equ	0xFE7
 13097                           postdec1	equ	0xFE5
 13098                           fsr1h	equ	0xFE2
 13099                           fsr1l	equ	0xFE1
 13100                           indf2	equ	0xFDF
 13101                           postinc2	equ	0xFDE
 13102                           postdec2	equ	0xFDD
 13103                           plusw2	equ	0xFDB
 13104                           fsr2h	equ	0xFDA
 13105                           fsr2l	equ	0xFD9
 13106                           status	equ	0xFD8
 13107                           
 13108 ;; *************** function _Port_CheckPortType *****************
 13109 ;; Defined at:
 13110 ;;		line 138 in file "Library/Port.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 13113 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13114 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13115 ;;  pDrive          1   56[BANK0 ] enum E6469
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  Output          1   57[BANK0 ] enum E6475
 13118 ;; Return value:  Size  Location     Type
 13119 ;;                  1    wreg      enum E6475
 13120 ;; Registers used:
 13121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13122 ;; Tracked objects:
 13123 ;;		On entry : 0/0
 13124 ;;		On exit  : 0/0
 13125 ;;		Unchanged: 0/0
 13126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13127 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;Total ram usage:        4 bytes
 13132 ;; Hardware stack levels used:    1
 13133 ;; Hardware stack levels required when called:   13
 13134 ;; This function calls:
 13135 ;;		_Port_CheckQuadType
 13136 ;; This function is called by:
 13137 ;;		_Port_SetType
 13138 ;; This function uses a non-reentrant model
 13139 ;;
 13140                           
 13141                           	psect	text70
 13142  0141F4                     __ptext70:
 13143                           	opt stack 0
 13144  0141F4                     _Port_CheckPortType:
 13145                           	opt stack 14
 13146                           
 13147                           ;Port.c: 140: ePinError Output = ePinErrorState;
 13148                           
 13149                           ;incstack = 0
 13150  0141F4  0E05               	movlw	5
 13151  0141F6  0100               	movlb	0	; () banked
 13152  0141F8  6FF6               	movwf	Port_CheckPortType@Output& (0+255),b
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 13156  0141FA  C0F3  F0EC         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13157  0141FE  C0F4  F0ED         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13158  014202  0E00               	movlw	0
 13159  014204  0100               	movlb	0	; () banked
 13160  014206  6FEE               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13161  014208  C0F5  F0EF         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13162  01420C  EC89  F09F         	call	_Port_CheckQuadType	;wreg free
 13163  014210  0100               	movlb	0	; () banked
 13164  014212  6FF6               	movwf	Port_CheckPortType@Output& (0+255),b
 13165  014214  0100               	movlb	0	; () banked
 13166  014216  51F6               	movf	Port_CheckPortType@Output& (0+255),w,b
 13167  014218  A4D8               	btfss	status,2,c
 13168  01421A  D00D               	goto	l397
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 13172  01421C  C0F3  F0EC         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13173  014220  C0F4  F0ED         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13174  014224  0E01               	movlw	1
 13175  014226  0100               	movlb	0	; () banked
 13176  014228  6FEE               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13177  01422A  C0F5  F0EF         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13178  01422E  EC89  F09F         	call	_Port_CheckQuadType	;wreg free
 13179  014232  0100               	movlb	0	; () banked
 13180  014234  6FF6               	movwf	Port_CheckPortType@Output& (0+255),b
 13181  014236                     l397:
 13182                           
 13183                           ; BSR set to: 0
 13184                           ;Port.c: 146: return Output;
 13185                           
 13186                           ; BSR set to: 0
 13187  014236  0100               	movlb	0	; () banked
 13188  014238  51F6               	movf	Port_CheckPortType@Output& (0+255),w,b
 13189  01423A  0012               	return	
 13190  01423C                     __end_of_Port_CheckPortType:
 13191                           	opt stack 0
 13192                           tosu	equ	0xFFF
 13193                           tosh	equ	0xFFE
 13194                           tosl	equ	0xFFD
 13195                           pclath	equ	0xFFA
 13196                           tblptru	equ	0xFF8
 13197                           tblptrh	equ	0xFF7
 13198                           tblptrl	equ	0xFF6
 13199                           tablat	equ	0xFF5
 13200                           prodh	equ	0xFF4
 13201                           prodl	equ	0xFF3
 13202                           intcon	equ	0xFF2
 13203                           postinc0	equ	0xFEE
 13204                           wreg	equ	0xFE8
 13205                           indf1	equ	0xFE7
 13206                           postdec1	equ	0xFE5
 13207                           fsr1h	equ	0xFE2
 13208                           fsr1l	equ	0xFE1
 13209                           indf2	equ	0xFDF
 13210                           postinc2	equ	0xFDE
 13211                           postdec2	equ	0xFDD
 13212                           plusw2	equ	0xFDB
 13213                           fsr2h	equ	0xFDA
 13214                           fsr2l	equ	0xFD9
 13215                           status	equ	0xFD8
 13216                           
 13217 ;; *************** function _Port_Set *****************
 13218 ;; Defined at:
 13219 ;;		line 570 in file "Library/Port.c"
 13220 ;; Parameters:    Size  Location     Type
 13221 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13222 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13223 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13224 ;;  pValue          1   17[BANK0 ] unsigned char 
 13225 ;; Auto vars:     Size  Location     Type
 13226 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 13227 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 13228 ;;  Type            1   38[BANK0 ] enum E6795
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      void 
 13231 ;; Registers used:
 13232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13238 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13239 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13240 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;Total ram usage:       24 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:   10
 13245 ;; This function calls:
 13246 ;;		_Byte_SetByte
 13247 ;;		_Word_GetPair
 13248 ;; This function is called by:
 13249 ;;		_Port_Init
 13250 ;;		_Port_Toggle
 13251 ;; This function uses a non-reentrant model
 13252 ;;
 13253                           
 13254                           	psect	text71
 13255  01041E                     __ptext71:
 13256                           	opt stack 0
 13257  01041E                     _Port_Set:
 13258                           	opt stack 17
 13259                           
 13260                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;incstack = 0
 13264  01041E  0E08               	movlw	8
 13265  010420  0100               	movlb	0	; () banked
 13266  010422  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13267  010424  0100               	movlb	0	; () banked
 13268  010426  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13269  010428  0E00               	movlw	0
 13270  01042A  0100               	movlb	0	; () banked
 13271  01042C  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13272  01042E  0100               	movlb	0	; () banked
 13273  010430  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13274  010432  0E00               	movlw	0
 13275  010434  0100               	movlb	0	; () banked
 13276  010436  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13277  010438  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13278  01043C  0100               	movlb	0	; () banked
 13279  01043E  6FE3               	movwf	Port_Set@Type& (0+255),b
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 13283  010440  0100               	movlb	0	; () banked
 13284  010442  51E3               	movf	Port_Set@Type& (0+255),w,b
 13285  010444  0100               	movlb	0	; () banked
 13286  010446  6FCF               	movwf	??_Port_Set& (0+255),b
 13287  010448  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13288  01044A  0E0E               	movlw	14
 13289  01044C                     u7765:
 13290  01044C  90D8               	bcf	status,0,c
 13291  01044E  0100               	movlb	0	; () banked
 13292  010450  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13293  010452  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13294  010454  2EE8               	decfsz	wreg,f,c
 13295  010456  D7FA               	goto	u7765
 13296  010458  0100               	movlb	0	; () banked
 13297  01045A  51E3               	movf	Port_Set@Type& (0+255),w,b
 13298  01045C  0100               	movlb	0	; () banked
 13299  01045E  6FD1               	movwf	(??_Port_Set+2)& (0+255),b
 13300  010460  6BD2               	clrf	(??_Port_Set+3)& (0+255),b
 13301  010462  0E0C               	movlw	12
 13302  010464                     u7775:
 13303  010464  90D8               	bcf	status,0,c
 13304  010466  0100               	movlb	0	; () banked
 13305  010468  37D1               	rlcf	(??_Port_Set+2)& (0+255),f,b
 13306  01046A  37D2               	rlcf	(??_Port_Set+3)& (0+255),f,b
 13307  01046C  2EE8               	decfsz	wreg,f,c
 13308  01046E  D7FA               	goto	u7775
 13309  010470  0100               	movlb	0	; () banked
 13310  010472  51E3               	movf	Port_Set@Type& (0+255),w,b
 13311  010474  0100               	movlb	0	; () banked
 13312  010476  6FD3               	movwf	(??_Port_Set+4)& (0+255),b
 13313  010478  6BD4               	clrf	(??_Port_Set+5)& (0+255),b
 13314  01047A  0E0A               	movlw	10
 13315  01047C                     u7785:
 13316  01047C  90D8               	bcf	status,0,c
 13317  01047E  0100               	movlb	0	; () banked
 13318  010480  37D3               	rlcf	(??_Port_Set+4)& (0+255),f,b
 13319  010482  37D4               	rlcf	(??_Port_Set+5)& (0+255),f,b
 13320  010484  2EE8               	decfsz	wreg,f,c
 13321  010486  D7FA               	goto	u7785
 13322  010488  0100               	movlb	0	; () banked
 13323  01048A  51E3               	movf	Port_Set@Type& (0+255),w,b
 13324  01048C  0100               	movlb	0	; () banked
 13325  01048E  6FD6               	movwf	(??_Port_Set+7)& (0+255),b
 13326  010490  6BD5               	clrf	(??_Port_Set+6)& (0+255),b
 13327  010492  0100               	movlb	0	; () banked
 13328  010494  51E3               	movf	Port_Set@Type& (0+255),w,b
 13329  010496  0100               	movlb	0	; () banked
 13330  010498  6FD7               	movwf	(??_Port_Set+8)& (0+255),b
 13331  01049A  6BD8               	clrf	(??_Port_Set+9)& (0+255),b
 13332  01049C  0E06               	movlw	6
 13333  01049E                     u7795:
 13334  01049E  90D8               	bcf	status,0,c
 13335  0104A0  0100               	movlb	0	; () banked
 13336  0104A2  37D7               	rlcf	(??_Port_Set+8)& (0+255),f,b
 13337  0104A4  37D8               	rlcf	(??_Port_Set+9)& (0+255),f,b
 13338  0104A6  2EE8               	decfsz	wreg,f,c
 13339  0104A8  D7FA               	goto	u7795
 13340  0104AA  0100               	movlb	0	; () banked
 13341  0104AC  51E3               	movf	Port_Set@Type& (0+255),w,b
 13342  0104AE  0100               	movlb	0	; () banked
 13343  0104B0  6FD9               	movwf	(??_Port_Set+10)& (0+255),b
 13344  0104B2  6BDA               	clrf	(??_Port_Set+11)& (0+255),b
 13345  0104B4  0100               	movlb	0	; () banked
 13346  0104B6  3BD9               	swapf	(??_Port_Set+10)& (0+255),f,b
 13347  0104B8  3BDA               	swapf	(??_Port_Set+11)& (0+255),f,b
 13348  0104BA  0EF0               	movlw	240
 13349  0104BC  17DA               	andwf	(??_Port_Set+11)& (0+255),f,b
 13350  0104BE  51D9               	movf	(??_Port_Set+10)& (0+255),w,b
 13351  0104C0  0B0F               	andlw	15
 13352  0104C2  13DA               	iorwf	(??_Port_Set+11)& (0+255),f,b
 13353  0104C4  0EF0               	movlw	240
 13354  0104C6  17D9               	andwf	(??_Port_Set+10)& (0+255),f,b
 13355  0104C8  0100               	movlb	0	; () banked
 13356  0104CA  51E3               	movf	Port_Set@Type& (0+255),w,b
 13357  0104CC  0100               	movlb	0	; () banked
 13358  0104CE  6FDB               	movwf	(??_Port_Set+12)& (0+255),b
 13359  0104D0  6BDC               	clrf	(??_Port_Set+13)& (0+255),b
 13360  0104D2  0100               	movlb	0	; () banked
 13361  0104D4  90D8               	bcf	status,0,c
 13362  0104D6  37DB               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13363  0104D8  37DC               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13364  0104DA  0100               	movlb	0	; () banked
 13365  0104DC  90D8               	bcf	status,0,c
 13366  0104DE  37DB               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13367  0104E0  37DC               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13368  0104E2  0100               	movlb	0	; () banked
 13369  0104E4  51E3               	movf	Port_Set@Type& (0+255),w,b
 13370  0104E6  0100               	movlb	0	; () banked
 13371  0104E8  6FDD               	movwf	(??_Port_Set+14)& (0+255),b
 13372  0104EA  6BDE               	clrf	(??_Port_Set+15)& (0+255),b
 13373  0104EC  0100               	movlb	0	; () banked
 13374  0104EE  51DB               	movf	(??_Port_Set+12)& (0+255),w,b
 13375  0104F0  0100               	movlb	0	; () banked
 13376  0104F2  13DD               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13377  0104F4  0100               	movlb	0	; () banked
 13378  0104F6  51DC               	movf	(??_Port_Set+13)& (0+255),w,b
 13379  0104F8  0100               	movlb	0	; () banked
 13380  0104FA  13DE               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13381  0104FC  0100               	movlb	0	; () banked
 13382  0104FE  51D9               	movf	(??_Port_Set+10)& (0+255),w,b
 13383  010500  0100               	movlb	0	; () banked
 13384  010502  13DD               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13385  010504  0100               	movlb	0	; () banked
 13386  010506  51DA               	movf	(??_Port_Set+11)& (0+255),w,b
 13387  010508  0100               	movlb	0	; () banked
 13388  01050A  13DE               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13389  01050C  0100               	movlb	0	; () banked
 13390  01050E  51D7               	movf	(??_Port_Set+8)& (0+255),w,b
 13391  010510  0100               	movlb	0	; () banked
 13392  010512  13DD               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13393  010514  0100               	movlb	0	; () banked
 13394  010516  51D8               	movf	(??_Port_Set+9)& (0+255),w,b
 13395  010518  0100               	movlb	0	; () banked
 13396  01051A  13DE               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13397  01051C  0100               	movlb	0	; () banked
 13398  01051E  51D5               	movf	(??_Port_Set+6)& (0+255),w,b
 13399  010520  0100               	movlb	0	; () banked
 13400  010522  13DD               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13401  010524  0100               	movlb	0	; () banked
 13402  010526  51D6               	movf	(??_Port_Set+7)& (0+255),w,b
 13403  010528  0100               	movlb	0	; () banked
 13404  01052A  13DE               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13405  01052C  0100               	movlb	0	; () banked
 13406  01052E  51D3               	movf	(??_Port_Set+4)& (0+255),w,b
 13407  010530  0100               	movlb	0	; () banked
 13408  010532  13DD               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13409  010534  0100               	movlb	0	; () banked
 13410  010536  51D4               	movf	(??_Port_Set+5)& (0+255),w,b
 13411  010538  0100               	movlb	0	; () banked
 13412  01053A  13DE               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13413  01053C  0100               	movlb	0	; () banked
 13414  01053E  51D1               	movf	(??_Port_Set+2)& (0+255),w,b
 13415  010540  0100               	movlb	0	; () banked
 13416  010542  13DD               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13417  010544  0100               	movlb	0	; () banked
 13418  010546  51D2               	movf	(??_Port_Set+3)& (0+255),w,b
 13419  010548  0100               	movlb	0	; () banked
 13420  01054A  13DE               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13421  01054C  0100               	movlb	0	; () banked
 13422  01054E  51CF               	movf	??_Port_Set& (0+255),w,b
 13423  010550  0100               	movlb	0	; () banked
 13424  010552  11DD               	iorwf	(??_Port_Set+14)& (0+255),w,b
 13425  010554  0100               	movlb	0	; () banked
 13426  010556  6FDF               	movwf	Port_Set@TypeRequired& (0+255),b
 13427  010558  0100               	movlb	0	; () banked
 13428  01055A  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13429  01055C  0100               	movlb	0	; () banked
 13430  01055E  11DE               	iorwf	(??_Port_Set+15)& (0+255),w,b
 13431  010560  0100               	movlb	0	; () banked
 13432  010562  6FE0               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;Port.c: 574: UINT16 TypeActual = Type;
 13436  010564  C0E3  F0E1         	movff	Port_Set@Type,Port_Set@TypeActual
 13437  010568  0100               	movlb	0	; () banked
 13438  01056A  6BE2               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 13439                           
 13440                           ; BSR set to: 0
 13441                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 13442  01056C  0E08               	movlw	8
 13443  01056E  0100               	movlb	0	; () banked
 13444  010570  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13445  010572  0100               	movlb	0	; () banked
 13446  010574  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13447  010576  0E00               	movlw	0
 13448  010578  0100               	movlb	0	; () banked
 13449  01057A  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13450  01057C  0100               	movlb	0	; () banked
 13451  01057E  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13452  010580  0E01               	movlw	1
 13453  010582  0100               	movlb	0	; () banked
 13454  010584  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13455  010586  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13456  01058A  0100               	movlb	0	; () banked
 13457  01058C  6FCF               	movwf	??_Port_Set& (0+255),b
 13458  01058E  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13459  010590  0100               	movlb	0	; () banked
 13460  010592  90D8               	bcf	status,0,c
 13461  010594  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13462  010596  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13463  010598  0100               	movlb	0	; () banked
 13464  01059A  90D8               	bcf	status,0,c
 13465  01059C  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13466  01059E  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13467  0105A0  0100               	movlb	0	; () banked
 13468  0105A2  51CF               	movf	??_Port_Set& (0+255),w,b
 13469  0105A4  0100               	movlb	0	; () banked
 13470  0105A6  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13471  0105A8  0100               	movlb	0	; () banked
 13472  0105AA  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13473  0105AC  0100               	movlb	0	; () banked
 13474  0105AE  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 13478  0105B0  0E08               	movlw	8
 13479  0105B2  0100               	movlb	0	; () banked
 13480  0105B4  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13481  0105B6  0100               	movlb	0	; () banked
 13482  0105B8  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13483  0105BA  0E00               	movlw	0
 13484  0105BC  0100               	movlb	0	; () banked
 13485  0105BE  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13486  0105C0  0100               	movlb	0	; () banked
 13487  0105C2  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13488  0105C4  0E02               	movlw	2
 13489  0105C6  0100               	movlb	0	; () banked
 13490  0105C8  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13491  0105CA  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13492  0105CE  0100               	movlb	0	; () banked
 13493  0105D0  6FCF               	movwf	??_Port_Set& (0+255),b
 13494  0105D2  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13495  0105D4  0100               	movlb	0	; () banked
 13496  0105D6  3BCF               	swapf	??_Port_Set& (0+255),f,b
 13497  0105D8  3BD0               	swapf	(??_Port_Set+1)& (0+255),f,b
 13498  0105DA  0EF0               	movlw	240
 13499  0105DC  17D0               	andwf	(??_Port_Set+1)& (0+255),f,b
 13500  0105DE  51CF               	movf	??_Port_Set& (0+255),w,b
 13501  0105E0  0B0F               	andlw	15
 13502  0105E2  13D0               	iorwf	(??_Port_Set+1)& (0+255),f,b
 13503  0105E4  0EF0               	movlw	240
 13504  0105E6  17CF               	andwf	??_Port_Set& (0+255),f,b
 13505  0105E8  0100               	movlb	0	; () banked
 13506  0105EA  51CF               	movf	??_Port_Set& (0+255),w,b
 13507  0105EC  0100               	movlb	0	; () banked
 13508  0105EE  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13509  0105F0  0100               	movlb	0	; () banked
 13510  0105F2  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13511  0105F4  0100               	movlb	0	; () banked
 13512  0105F6  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13513                           
 13514                           ; BSR set to: 0
 13515                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 13516  0105F8  0E08               	movlw	8
 13517  0105FA  0100               	movlb	0	; () banked
 13518  0105FC  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13519  0105FE  0100               	movlb	0	; () banked
 13520  010600  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13521  010602  0E00               	movlw	0
 13522  010604  0100               	movlb	0	; () banked
 13523  010606  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13524  010608  0100               	movlb	0	; () banked
 13525  01060A  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13526  01060C  0E03               	movlw	3
 13527  01060E  0100               	movlb	0	; () banked
 13528  010610  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13529  010612  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13530  010616  0100               	movlb	0	; () banked
 13531  010618  6FCF               	movwf	??_Port_Set& (0+255),b
 13532  01061A  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13533  01061C  0E06               	movlw	6
 13534  01061E                     u7805:
 13535  01061E  90D8               	bcf	status,0,c
 13536  010620  0100               	movlb	0	; () banked
 13537  010622  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13538  010624  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13539  010626  2EE8               	decfsz	wreg,f,c
 13540  010628  D7FA               	goto	u7805
 13541  01062A  0100               	movlb	0	; () banked
 13542  01062C  51CF               	movf	??_Port_Set& (0+255),w,b
 13543  01062E  0100               	movlb	0	; () banked
 13544  010630  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13545  010632  0100               	movlb	0	; () banked
 13546  010634  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13547  010636  0100               	movlb	0	; () banked
 13548  010638  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13549                           
 13550                           ; BSR set to: 0
 13551                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 13552  01063A  0E08               	movlw	8
 13553  01063C  0100               	movlb	0	; () banked
 13554  01063E  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13555  010640  0100               	movlb	0	; () banked
 13556  010642  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13557  010644  0E00               	movlw	0
 13558  010646  0100               	movlb	0	; () banked
 13559  010648  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13560  01064A  0100               	movlb	0	; () banked
 13561  01064C  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13562  01064E  0E04               	movlw	4
 13563  010650  0100               	movlb	0	; () banked
 13564  010652  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13565  010654  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13566  010658  0100               	movlb	0	; () banked
 13567  01065A  6FCF               	movwf	??_Port_Set& (0+255),b
 13568  01065C  0100               	movlb	0	; () banked
 13569  01065E  51CF               	movf	??_Port_Set& (0+255),w,b
 13570  010660  0100               	movlb	0	; () banked
 13571  010662  6FD1               	movwf	(??_Port_Set+2)& (0+255),b
 13572  010664  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13573  010666  0100               	movlb	0	; () banked
 13574  010668  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13575  01066A  0100               	movlb	0	; () banked
 13576  01066C  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13577  01066E  0100               	movlb	0	; () banked
 13578  010670  51D1               	movf	(??_Port_Set+2)& (0+255),w,b
 13579  010672  0100               	movlb	0	; () banked
 13580  010674  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 13584  010676  0E08               	movlw	8
 13585  010678  0100               	movlb	0	; () banked
 13586  01067A  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13587  01067C  0100               	movlb	0	; () banked
 13588  01067E  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13589  010680  0E00               	movlw	0
 13590  010682  0100               	movlb	0	; () banked
 13591  010684  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13592  010686  0100               	movlb	0	; () banked
 13593  010688  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13594  01068A  0E05               	movlw	5
 13595  01068C  0100               	movlb	0	; () banked
 13596  01068E  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13597  010690  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13598  010694  0100               	movlb	0	; () banked
 13599  010696  6FCF               	movwf	??_Port_Set& (0+255),b
 13600  010698  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13601  01069A  0E0A               	movlw	10
 13602  01069C                     u7815:
 13603  01069C  90D8               	bcf	status,0,c
 13604  01069E  0100               	movlb	0	; () banked
 13605  0106A0  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13606  0106A2  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13607  0106A4  2EE8               	decfsz	wreg,f,c
 13608  0106A6  D7FA               	goto	u7815
 13609  0106A8  0100               	movlb	0	; () banked
 13610  0106AA  51CF               	movf	??_Port_Set& (0+255),w,b
 13611  0106AC  0100               	movlb	0	; () banked
 13612  0106AE  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13613  0106B0  0100               	movlb	0	; () banked
 13614  0106B2  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13615  0106B4  0100               	movlb	0	; () banked
 13616  0106B6  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 13620  0106B8  0E08               	movlw	8
 13621  0106BA  0100               	movlb	0	; () banked
 13622  0106BC  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13623  0106BE  0100               	movlb	0	; () banked
 13624  0106C0  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13625  0106C2  0E00               	movlw	0
 13626  0106C4  0100               	movlb	0	; () banked
 13627  0106C6  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13628  0106C8  0100               	movlb	0	; () banked
 13629  0106CA  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13630  0106CC  0E06               	movlw	6
 13631  0106CE  0100               	movlb	0	; () banked
 13632  0106D0  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13633  0106D2  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13634  0106D6  0100               	movlb	0	; () banked
 13635  0106D8  6FCF               	movwf	??_Port_Set& (0+255),b
 13636  0106DA  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13637  0106DC  0E0C               	movlw	12
 13638  0106DE                     u7825:
 13639  0106DE  90D8               	bcf	status,0,c
 13640  0106E0  0100               	movlb	0	; () banked
 13641  0106E2  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13642  0106E4  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13643  0106E6  2EE8               	decfsz	wreg,f,c
 13644  0106E8  D7FA               	goto	u7825
 13645  0106EA  0100               	movlb	0	; () banked
 13646  0106EC  51CF               	movf	??_Port_Set& (0+255),w,b
 13647  0106EE  0100               	movlb	0	; () banked
 13648  0106F0  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13649  0106F2  0100               	movlb	0	; () banked
 13650  0106F4  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13651  0106F6  0100               	movlb	0	; () banked
 13652  0106F8  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 13656  0106FA  0E08               	movlw	8
 13657  0106FC  0100               	movlb	0	; () banked
 13658  0106FE  25CC               	addwf	Port_Set@pInput& (0+255),w,b
 13659  010700  0100               	movlb	0	; () banked
 13660  010702  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 13661  010704  0E00               	movlw	0
 13662  010706  0100               	movlb	0	; () banked
 13663  010708  21CD               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13664  01070A  0100               	movlb	0	; () banked
 13665  01070C  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13666  01070E  0E07               	movlw	7
 13667  010710  0100               	movlb	0	; () banked
 13668  010712  6FCB               	movwf	Word_GetPair@pPair& (0+255),b
 13669  010714  EC49  F0A2         	call	_Word_GetPair	;wreg free
 13670  010718  0100               	movlb	0	; () banked
 13671  01071A  6FCF               	movwf	??_Port_Set& (0+255),b
 13672  01071C  6BD0               	clrf	(??_Port_Set+1)& (0+255),b
 13673  01071E  0E0E               	movlw	14
 13674  010720                     u7835:
 13675  010720  90D8               	bcf	status,0,c
 13676  010722  0100               	movlb	0	; () banked
 13677  010724  37CF               	rlcf	??_Port_Set& (0+255),f,b
 13678  010726  37D0               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13679  010728  2EE8               	decfsz	wreg,f,c
 13680  01072A  D7FA               	goto	u7835
 13681  01072C  0100               	movlb	0	; () banked
 13682  01072E  51CF               	movf	??_Port_Set& (0+255),w,b
 13683  010730  0100               	movlb	0	; () banked
 13684  010732  13E1               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13685  010734  0100               	movlb	0	; () banked
 13686  010736  51D0               	movf	(??_Port_Set+1)& (0+255),w,b
 13687  010738  0100               	movlb	0	; () banked
 13688  01073A  13E2               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13689                           
 13690                           ;Port.c: 584: if (TypeRequired == TypeActual)
 13691  01073C  0100               	movlb	0	; () banked
 13692  01073E  51E1               	movf	Port_Set@TypeActual& (0+255),w,b
 13693  010740  0100               	movlb	0	; () banked
 13694  010742  19DF               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 13695  010744  E148               	bnz	l528
 13696  010746  0100               	movlb	0	; () banked
 13697  010748  51E2               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 13698  01074A  0100               	movlb	0	; () banked
 13699  01074C  19E0               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 13700  01074E  A4D8               	btfss	status,2,c
 13701  010750  0012               	return	
 13702  010752  D032               	goto	l526
 13703  010754                     
 13704                           ; BSR set to: 0
 13705                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 13706                           
 13707                           ; BSR set to: 0
 13708  010754  0100               	movlb	0	; () banked
 13709  010756  EE20 F002          	lfsr	2,2
 13710  01075A  51CC               	movf	Port_Set@pInput& (0+255),w,b
 13711  01075C  26D9               	addwf	fsr2l,f,c
 13712  01075E  51CD               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13713  010760  22DA               	addwfc	fsr2h,f,c
 13714  010762  CFDE F0BD          	movff	postinc2,Byte_SetByte@pInput
 13715  010766  CFDD F0BE          	movff	postdec2,Byte_SetByte@pInput+1
 13716  01076A  C0CE  F0BF         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13717  01076E  EC99  F0A5         	call	_Byte_SetByte	;wreg free
 13718                           
 13719                           ;Port.c: 594: break;
 13720  010772  0012               	return	
 13721  010774                     
 13722                           ;Port.c: 597: pValue = ~pValue;
 13723  010774  0100               	movlb	0	; () banked
 13724  010776  1FCE               	comf	Port_Set@pValue& (0+255),f,b
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 13728  010778  0100               	movlb	0	; () banked
 13729  01077A  EE20 F002          	lfsr	2,2
 13730  01077E  51CC               	movf	Port_Set@pInput& (0+255),w,b
 13731  010780  26D9               	addwf	fsr2l,f,c
 13732  010782  51CD               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13733  010784  22DA               	addwfc	fsr2h,f,c
 13734  010786  CFDE F0BD          	movff	postinc2,Byte_SetByte@pInput
 13735  01078A  CFDD F0BE          	movff	postdec2,Byte_SetByte@pInput+1
 13736  01078E  C0CE  F0BF         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13737  010792  EC99  F0A5         	call	_Byte_SetByte	;wreg free
 13738                           
 13739                           ;Port.c: 599: break;
 13740  010796  0012               	return	
 13741  010798                     
 13742                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 13743  010798  0100               	movlb	0	; () banked
 13744  01079A  EE20 F004          	lfsr	2,4
 13745  01079E  51CC               	movf	Port_Set@pInput& (0+255),w,b
 13746  0107A0  26D9               	addwf	fsr2l,f,c
 13747  0107A2  51CD               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13748  0107A4  22DA               	addwfc	fsr2h,f,c
 13749  0107A6  CFDE F0BD          	movff	postinc2,Byte_SetByte@pInput
 13750  0107AA  CFDD F0BE          	movff	postdec2,Byte_SetByte@pInput+1
 13751  0107AE  C0CE  F0BF         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13752  0107B2  EC99  F0A5         	call	_Byte_SetByte	;wreg free
 13753                           
 13754                           ;Port.c: 606: }
 13755                           
 13756                           ;Port.c: 605: break;
 13757                           
 13758                           ;Port.c: 604: default:
 13759                           
 13760                           ;Port.c: 603: break;
 13761  0107B6  0012               	return	
 13762  0107B8                     l526:
 13763  0107B8  0100               	movlb	0	; () banked
 13764  0107BA  51E3               	movf	Port_Set@Type& (0+255),w,b
 13765                           
 13766                           ; Switch size 1, requested type "space"
 13767                           ; Number of cases is 4, Range of values is 0 to 3
 13768                           ; switch strategies available:
 13769                           ; Name         Instructions Cycles
 13770                           ; simple_byte           13     7 (average)
 13771                           ;	Chosen strategy is simple_byte
 13772  0107BC  0A00               	xorlw	0	; case 0
 13773  0107BE  B4D8               	btfsc	status,2,c
 13774  0107C0  0012               	return	
 13775  0107C2  0A01               	xorlw	1	; case 1
 13776  0107C4  B4D8               	btfsc	status,2,c
 13777  0107C6  D7C6               	goto	l529
 13778  0107C8  0A03               	xorlw	3	; case 2
 13779  0107CA  B4D8               	btfsc	status,2,c
 13780  0107CC  D7D3               	goto	l531
 13781  0107CE  0A01               	xorlw	1	; case 3
 13782  0107D0  A4D8               	btfss	status,2,c
 13783                           
 13784                           ; BSR set to: 0
 13785                           
 13786                           ; BSR set to: 0
 13787                           ;Port.c: 607: }
 13788  0107D2  0012               	return	
 13789  0107D4  D7E1               	goto	l532
 13790  0107D6                     l528:
 13791  0107D6  0012               	return		;funcret
 13792  0107D8                     __end_of_Port_Set:
 13793                           	opt stack 0
 13794                           tosu	equ	0xFFF
 13795                           tosh	equ	0xFFE
 13796                           tosl	equ	0xFFD
 13797                           pclath	equ	0xFFA
 13798                           tblptru	equ	0xFF8
 13799                           tblptrh	equ	0xFF7
 13800                           tblptrl	equ	0xFF6
 13801                           tablat	equ	0xFF5
 13802                           prodh	equ	0xFF4
 13803                           prodl	equ	0xFF3
 13804                           intcon	equ	0xFF2
 13805                           postinc0	equ	0xFEE
 13806                           wreg	equ	0xFE8
 13807                           indf1	equ	0xFE7
 13808                           postdec1	equ	0xFE5
 13809                           fsr1h	equ	0xFE2
 13810                           fsr1l	equ	0xFE1
 13811                           indf2	equ	0xFDF
 13812                           postinc2	equ	0xFDE
 13813                           postdec2	equ	0xFDD
 13814                           plusw2	equ	0xFDB
 13815                           fsr2h	equ	0xFDA
 13816                           fsr2l	equ	0xFD9
 13817                           status	equ	0xFD8
 13818                           
 13819 ;; *************** function _Byte_SetByte *****************
 13820 ;; Defined at:
 13821 ;;		line 110 in file "Library/Types.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13824 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 13825 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13826 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13827 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13828 ;;		 -> NULL(0), 
 13829 ;;  pValue          1    2[BANK0 ] unsigned char 
 13830 ;; Auto vars:     Size  Location     Type
 13831 ;;		None
 13832 ;; Return value:  Size  Location     Type
 13833 ;;                  1    wreg      void 
 13834 ;; Registers used:
 13835 ;;		fsr2l, fsr2h
 13836 ;; Tracked objects:
 13837 ;;		On entry : 0/0
 13838 ;;		On exit  : 0/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13841 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13844 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13845 ;;Total ram usage:        3 bytes
 13846 ;; Hardware stack levels used:    1
 13847 ;; Hardware stack levels required when called:    7
 13848 ;; This function calls:
 13849 ;;		Nothing
 13850 ;; This function is called by:
 13851 ;;		_Port_Set
 13852 ;;		_I2C_Init
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           	psect	text72
 13857  014B32                     __ptext72:
 13858                           	opt stack 0
 13859  014B32                     _Byte_SetByte:
 13860                           	opt stack 19
 13861                           
 13862                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 13863                           
 13864                           ;incstack = 0
 13865  014B32  C0BD  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 13866  014B36  C0BE  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 13867  014B3A  C0BF  FFDF         	movff	Byte_SetByte@pValue,indf2
 13868  014B3E  0012               	return		;funcret
 13869  014B40                     __end_of_Byte_SetByte:
 13870                           	opt stack 0
 13871                           tosu	equ	0xFFF
 13872                           tosh	equ	0xFFE
 13873                           tosl	equ	0xFFD
 13874                           pclath	equ	0xFFA
 13875                           tblptru	equ	0xFF8
 13876                           tblptrh	equ	0xFF7
 13877                           tblptrl	equ	0xFF6
 13878                           tablat	equ	0xFF5
 13879                           prodh	equ	0xFF4
 13880                           prodl	equ	0xFF3
 13881                           intcon	equ	0xFF2
 13882                           postinc0	equ	0xFEE
 13883                           wreg	equ	0xFE8
 13884                           indf1	equ	0xFE7
 13885                           postdec1	equ	0xFE5
 13886                           fsr1h	equ	0xFE2
 13887                           fsr1l	equ	0xFE1
 13888                           indf2	equ	0xFDF
 13889                           postinc2	equ	0xFDE
 13890                           postdec2	equ	0xFDD
 13891                           plusw2	equ	0xFDB
 13892                           fsr2h	equ	0xFDA
 13893                           fsr2l	equ	0xFD9
 13894                           status	equ	0xFD8
 13895                           
 13896 ;; *************** function _GetPortTRIS *****************
 13897 ;; Defined at:
 13898 ;;		line 67 in file "Library/Port.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;  pInput          1    wreg     enum E6786
 13901 ;; Auto vars:     Size  Location     Type
 13902 ;;  pInput          1    2[BANK0 ] enum E6786
 13903 ;; Return value:  Size  Location     Type
 13904 ;;                  2    0[BANK0 ] PTR struct Byte
 13905 ;; Registers used:
 13906 ;;		wreg, status,2, status,0
 13907 ;; Tracked objects:
 13908 ;;		On entry : 0/0
 13909 ;;		On exit  : 0/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13913 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;Total ram usage:        3 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:    7
 13919 ;; This function calls:
 13920 ;;		Nothing
 13921 ;; This function is called by:
 13922 ;;		_Port_Init
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           	psect	text73
 13927  012F96                     __ptext73:
 13928                           	opt stack 0
 13929  012F96                     _GetPortTRIS:
 13930                           	opt stack 20
 13931                           
 13932                           ;incstack = 0
 13933                           ;GetPortTRIS@pInput stored from wreg
 13934  012F96  0100               	movlb	0	; () banked
 13935  012F98  6FBF               	movwf	GetPortTRIS@pInput& (0+255),b
 13936                           
 13937                           ;Port.c: 69: switch (pInput)
 13938  012F9A  D038               	goto	l363
 13939  012F9C                     
 13940                           ;Port.c: 72: return (BytePtr)&TRISA;
 13941  012F9C  0E92               	movlw	146
 13942  012F9E  0100               	movlb	0	; () banked
 13943  012FA0  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 13944  012FA2  0E0F               	movlw	15
 13945  012FA4  0100               	movlb	0	; () banked
 13946  012FA6  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13947                           
 13948                           ; BSR set to: 0
 13949  012FA8  0012               	return	
 13950  012FAA                     
 13951                           ; BSR set to: 0
 13952                           ;Port.c: 74: return (BytePtr)&TRISB;
 13953                           
 13954                           ; BSR set to: 0
 13955  012FAA  0E93               	movlw	147
 13956  012FAC  0100               	movlb	0	; () banked
 13957  012FAE  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 13958  012FB0  0E0F               	movlw	15
 13959  012FB2  0100               	movlb	0	; () banked
 13960  012FB4  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13961                           
 13962                           ; BSR set to: 0
 13963  012FB6  0012               	return	
 13964  012FB8                     
 13965                           ; BSR set to: 0
 13966                           ;Port.c: 76: return (BytePtr)&TRISC;
 13967                           
 13968                           ; BSR set to: 0
 13969  012FB8  0E94               	movlw	148
 13970  012FBA  0100               	movlb	0	; () banked
 13971  012FBC  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 13972  012FBE  0E0F               	movlw	15
 13973  012FC0  0100               	movlb	0	; () banked
 13974  012FC2  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13975                           
 13976                           ; BSR set to: 0
 13977  012FC4  0012               	return	
 13978  012FC6                     
 13979                           ; BSR set to: 0
 13980                           ;Port.c: 78: return (BytePtr)&TRISD;
 13981                           
 13982                           ; BSR set to: 0
 13983  012FC6  0E95               	movlw	149
 13984  012FC8  0100               	movlb	0	; () banked
 13985  012FCA  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 13986  012FCC  0E0F               	movlw	15
 13987  012FCE  0100               	movlb	0	; () banked
 13988  012FD0  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13989                           
 13990                           ; BSR set to: 0
 13991  012FD2  0012               	return	
 13992  012FD4                     
 13993                           ; BSR set to: 0
 13994                           ;Port.c: 80: return (BytePtr)&TRISE;
 13995                           
 13996                           ; BSR set to: 0
 13997  012FD4  0E96               	movlw	150
 13998  012FD6  0100               	movlb	0	; () banked
 13999  012FD8  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 14000  012FDA  0E0F               	movlw	15
 14001  012FDC  0100               	movlb	0	; () banked
 14002  012FDE  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14003                           
 14004                           ; BSR set to: 0
 14005  012FE0  0012               	return	
 14006  012FE2                     
 14007                           ; BSR set to: 0
 14008                           ;Port.c: 82: return (BytePtr)&TRISF;
 14009                           
 14010                           ; BSR set to: 0
 14011  012FE2  0E97               	movlw	151
 14012  012FE4  0100               	movlb	0	; () banked
 14013  012FE6  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 14014  012FE8  0E0F               	movlw	15
 14015  012FEA  0100               	movlb	0	; () banked
 14016  012FEC  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14017                           
 14018                           ; BSR set to: 0
 14019  012FEE  0012               	return	
 14020  012FF0                     
 14021                           ; BSR set to: 0
 14022                           ;Port.c: 84: return (BytePtr)&TRISG;
 14023                           
 14024                           ; BSR set to: 0
 14025  012FF0  0E98               	movlw	152
 14026  012FF2  0100               	movlb	0	; () banked
 14027  012FF4  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 14028  012FF6  0E0F               	movlw	15
 14029  012FF8  0100               	movlb	0	; () banked
 14030  012FFA  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14031                           
 14032                           ; BSR set to: 0
 14033  012FFC  0012               	return	
 14034  012FFE                     
 14035                           ; BSR set to: 0
 14036                           ;Port.c: 86: return (void*)0;
 14037                           
 14038                           ; BSR set to: 0
 14039  012FFE  0E00               	movlw	0
 14040  013000  0100               	movlb	0	; () banked
 14041  013002  6FBD               	movwf	?_GetPortTRIS& (0+255),b
 14042  013004  0E00               	movlw	0
 14043  013006  0100               	movlb	0	; () banked
 14044  013008  6FBE               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;Port.c: 87: }
 14048                           
 14049                           ; BSR set to: 0
 14050  01300A  0012               	return	
 14051  01300C                     l363:
 14052                           
 14053                           ; BSR set to: 0
 14054  01300C  0100               	movlb	0	; () banked
 14055  01300E  51BF               	movf	GetPortTRIS@pInput& (0+255),w,b
 14056                           
 14057                           ; Switch size 1, requested type "space"
 14058                           ; Number of cases is 7, Range of values is 0 to 6
 14059                           ; switch strategies available:
 14060                           ; Name         Instructions Cycles
 14061                           ; simple_byte           22    12 (average)
 14062                           ;	Chosen strategy is simple_byte
 14063  013010  0A00               	xorlw	0	; case 0
 14064  013012  B4D8               	btfsc	status,2,c
 14065  013014  D7C3               	goto	l364
 14066  013016  0A01               	xorlw	1	; case 1
 14067  013018  B4D8               	btfsc	status,2,c
 14068  01301A  D7C7               	goto	l366
 14069  01301C  0A03               	xorlw	3	; case 2
 14070  01301E  B4D8               	btfsc	status,2,c
 14071  013020  D7CB               	goto	l367
 14072  013022  0A01               	xorlw	1	; case 3
 14073  013024  B4D8               	btfsc	status,2,c
 14074  013026  D7CF               	goto	l368
 14075  013028  0A07               	xorlw	7	; case 4
 14076  01302A  B4D8               	btfsc	status,2,c
 14077  01302C  D7D3               	goto	l369
 14078  01302E  0A01               	xorlw	1	; case 5
 14079  013030  B4D8               	btfsc	status,2,c
 14080  013032  D7D7               	goto	l370
 14081  013034  0A03               	xorlw	3	; case 6
 14082  013036  B4D8               	btfsc	status,2,c
 14083  013038  D7DB               	goto	l371
 14084  01303A  D7E1               	goto	l372
 14085  01303C                     __end_of_GetPortTRIS:
 14086                           	opt stack 0
 14087                           tosu	equ	0xFFF
 14088                           tosh	equ	0xFFE
 14089                           tosl	equ	0xFFD
 14090                           pclath	equ	0xFFA
 14091                           tblptru	equ	0xFF8
 14092                           tblptrh	equ	0xFF7
 14093                           tblptrl	equ	0xFF6
 14094                           tablat	equ	0xFF5
 14095                           prodh	equ	0xFF4
 14096                           prodl	equ	0xFF3
 14097                           intcon	equ	0xFF2
 14098                           postinc0	equ	0xFEE
 14099                           wreg	equ	0xFE8
 14100                           indf1	equ	0xFE7
 14101                           postdec1	equ	0xFE5
 14102                           fsr1h	equ	0xFE2
 14103                           fsr1l	equ	0xFE1
 14104                           indf2	equ	0xFDF
 14105                           postinc2	equ	0xFDE
 14106                           postdec2	equ	0xFDD
 14107                           plusw2	equ	0xFDB
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function _GetPortProperties *****************
 14113 ;; Defined at:
 14114 ;;		line 21 in file "Library/Port.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;  pInput          1    wreg     enum E6786
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;  pInput          1    2[BANK0 ] enum E6786
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  2    0[BANK0 ] PTR struct PortProperty
 14121 ;; Registers used:
 14122 ;;		wreg, status,2, status,0
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14128 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14131 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;Total ram usage:        3 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; Hardware stack levels required when called:    7
 14135 ;; This function calls:
 14136 ;;		Nothing
 14137 ;; This function is called by:
 14138 ;;		_Port_Init
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text74
 14143  01303C                     __ptext74:
 14144                           	opt stack 0
 14145  01303C                     _GetPortProperties:
 14146                           	opt stack 20
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;incstack = 0
 14150                           ;GetPortProperties@pInput stored from wreg
 14151  01303C  0100               	movlb	0	; () banked
 14152  01303E  6FBF               	movwf	GetPortProperties@pInput& (0+255),b
 14153                           
 14154                           ;Port.c: 23: switch (pInput)
 14155  013040  D038               	goto	l337
 14156  013042                     
 14157                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 14158  013042  0E67               	movlw	low _PortA_Property
 14159  013044  0100               	movlb	0	; () banked
 14160  013046  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14161  013048  0EFF               	movlw	high _PortA_Property
 14162  01304A  0100               	movlb	0	; () banked
 14163  01304C  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14164                           
 14165                           ; BSR set to: 0
 14166  01304E  0012               	return	
 14167  013050                     
 14168                           ; BSR set to: 0
 14169                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 14170                           
 14171                           ; BSR set to: 0
 14172  013050  0E65               	movlw	low _PortB_Property
 14173  013052  0100               	movlb	0	; () banked
 14174  013054  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14175  013056  0EFF               	movlw	high _PortB_Property
 14176  013058  0100               	movlb	0	; () banked
 14177  01305A  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14178                           
 14179                           ; BSR set to: 0
 14180  01305C  0012               	return	
 14181  01305E                     
 14182                           ; BSR set to: 0
 14183                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 14184                           
 14185                           ; BSR set to: 0
 14186  01305E  0E63               	movlw	low _PortC_Property
 14187  013060  0100               	movlb	0	; () banked
 14188  013062  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14189  013064  0EFF               	movlw	high _PortC_Property
 14190  013066  0100               	movlb	0	; () banked
 14191  013068  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14192                           
 14193                           ; BSR set to: 0
 14194  01306A  0012               	return	
 14195  01306C                     
 14196                           ; BSR set to: 0
 14197                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 14198                           
 14199                           ; BSR set to: 0
 14200  01306C  0E61               	movlw	low _PortD_Property
 14201  01306E  0100               	movlb	0	; () banked
 14202  013070  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14203  013072  0EFF               	movlw	high _PortD_Property
 14204  013074  0100               	movlb	0	; () banked
 14205  013076  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14206                           
 14207                           ; BSR set to: 0
 14208  013078  0012               	return	
 14209  01307A                     
 14210                           ; BSR set to: 0
 14211                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 14212                           
 14213                           ; BSR set to: 0
 14214  01307A  0E5F               	movlw	low _PortE_Property
 14215  01307C  0100               	movlb	0	; () banked
 14216  01307E  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14217  013080  0EFF               	movlw	high _PortE_Property
 14218  013082  0100               	movlb	0	; () banked
 14219  013084  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14220                           
 14221                           ; BSR set to: 0
 14222  013086  0012               	return	
 14223  013088                     
 14224                           ; BSR set to: 0
 14225                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 14226                           
 14227                           ; BSR set to: 0
 14228  013088  0E5D               	movlw	low _PortF_Property
 14229  01308A  0100               	movlb	0	; () banked
 14230  01308C  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14231  01308E  0EFF               	movlw	high _PortF_Property
 14232  013090  0100               	movlb	0	; () banked
 14233  013092  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14234                           
 14235                           ; BSR set to: 0
 14236  013094  0012               	return	
 14237  013096                     
 14238                           ; BSR set to: 0
 14239                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 14240                           
 14241                           ; BSR set to: 0
 14242  013096  0E5B               	movlw	low _PortG_Property
 14243  013098  0100               	movlb	0	; () banked
 14244  01309A  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14245  01309C  0EFF               	movlw	high _PortG_Property
 14246  01309E  0100               	movlb	0	; () banked
 14247  0130A0  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14248                           
 14249                           ; BSR set to: 0
 14250  0130A2  0012               	return	
 14251  0130A4                     
 14252                           ; BSR set to: 0
 14253                           ;Port.c: 40: return (void*)0;
 14254                           
 14255                           ; BSR set to: 0
 14256  0130A4  0E00               	movlw	0
 14257  0130A6  0100               	movlb	0	; () banked
 14258  0130A8  6FBD               	movwf	?_GetPortProperties& (0+255),b
 14259  0130AA  0E00               	movlw	0
 14260  0130AC  0100               	movlb	0	; () banked
 14261  0130AE  6FBE               	movwf	(?_GetPortProperties+1)& (0+255),b
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;Port.c: 41: }
 14265                           
 14266                           ; BSR set to: 0
 14267  0130B0  0012               	return	
 14268  0130B2                     l337:
 14269                           
 14270                           ; BSR set to: 0
 14271  0130B2  0100               	movlb	0	; () banked
 14272  0130B4  51BF               	movf	GetPortProperties@pInput& (0+255),w,b
 14273                           
 14274                           ; Switch size 1, requested type "space"
 14275                           ; Number of cases is 7, Range of values is 0 to 6
 14276                           ; switch strategies available:
 14277                           ; Name         Instructions Cycles
 14278                           ; simple_byte           22    12 (average)
 14279                           ;	Chosen strategy is simple_byte
 14280  0130B6  0A00               	xorlw	0	; case 0
 14281  0130B8  B4D8               	btfsc	status,2,c
 14282  0130BA  D7C3               	goto	l338
 14283  0130BC  0A01               	xorlw	1	; case 1
 14284  0130BE  B4D8               	btfsc	status,2,c
 14285  0130C0  D7C7               	goto	l340
 14286  0130C2  0A03               	xorlw	3	; case 2
 14287  0130C4  B4D8               	btfsc	status,2,c
 14288  0130C6  D7CB               	goto	l341
 14289  0130C8  0A01               	xorlw	1	; case 3
 14290  0130CA  B4D8               	btfsc	status,2,c
 14291  0130CC  D7CF               	goto	l342
 14292  0130CE  0A07               	xorlw	7	; case 4
 14293  0130D0  B4D8               	btfsc	status,2,c
 14294  0130D2  D7D3               	goto	l343
 14295  0130D4  0A01               	xorlw	1	; case 5
 14296  0130D6  B4D8               	btfsc	status,2,c
 14297  0130D8  D7D7               	goto	l344
 14298  0130DA  0A03               	xorlw	3	; case 6
 14299  0130DC  B4D8               	btfsc	status,2,c
 14300  0130DE  D7DB               	goto	l345
 14301  0130E0  D7E1               	goto	l346
 14302  0130E2                     __end_of_GetPortProperties:
 14303                           	opt stack 0
 14304                           tosu	equ	0xFFF
 14305                           tosh	equ	0xFFE
 14306                           tosl	equ	0xFFD
 14307                           pclath	equ	0xFFA
 14308                           tblptru	equ	0xFF8
 14309                           tblptrh	equ	0xFF7
 14310                           tblptrl	equ	0xFF6
 14311                           tablat	equ	0xFF5
 14312                           prodh	equ	0xFF4
 14313                           prodl	equ	0xFF3
 14314                           intcon	equ	0xFF2
 14315                           postinc0	equ	0xFEE
 14316                           wreg	equ	0xFE8
 14317                           indf1	equ	0xFE7
 14318                           postdec1	equ	0xFE5
 14319                           fsr1h	equ	0xFE2
 14320                           fsr1l	equ	0xFE1
 14321                           indf2	equ	0xFDF
 14322                           postinc2	equ	0xFDE
 14323                           postdec2	equ	0xFDD
 14324                           plusw2	equ	0xFDB
 14325                           fsr2h	equ	0xFDA
 14326                           fsr2l	equ	0xFD9
 14327                           status	equ	0xFD8
 14328                           
 14329 ;; *************** function _GetPortPORT *****************
 14330 ;; Defined at:
 14331 ;;		line 44 in file "Library/Port.c"
 14332 ;; Parameters:    Size  Location     Type
 14333 ;;  pInput          1    wreg     enum E6786
 14334 ;; Auto vars:     Size  Location     Type
 14335 ;;  pInput          1    2[BANK0 ] enum E6786
 14336 ;; Return value:  Size  Location     Type
 14337 ;;                  2    0[BANK0 ] PTR struct Byte
 14338 ;; Registers used:
 14339 ;;		wreg, status,2, status,0
 14340 ;; Tracked objects:
 14341 ;;		On entry : 0/0
 14342 ;;		On exit  : 0/0
 14343 ;;		Unchanged: 0/0
 14344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14345 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14348 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14349 ;;Total ram usage:        3 bytes
 14350 ;; Hardware stack levels used:    1
 14351 ;; Hardware stack levels required when called:    7
 14352 ;; This function calls:
 14353 ;;		Nothing
 14354 ;; This function is called by:
 14355 ;;		_Port_Init
 14356 ;; This function uses a non-reentrant model
 14357 ;;
 14358                           
 14359                           	psect	text75
 14360  0130E2                     __ptext75:
 14361                           	opt stack 0
 14362  0130E2                     _GetPortPORT:
 14363                           	opt stack 20
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;incstack = 0
 14367                           ;GetPortPORT@pInput stored from wreg
 14368  0130E2  0100               	movlb	0	; () banked
 14369  0130E4  6FBF               	movwf	GetPortPORT@pInput& (0+255),b
 14370                           
 14371                           ;Port.c: 46: switch (pInput)
 14372  0130E6  D038               	goto	l350
 14373  0130E8                     
 14374                           ;Port.c: 49: return (BytePtr)&PORTA;
 14375  0130E8  0E80               	movlw	128
 14376  0130EA  0100               	movlb	0	; () banked
 14377  0130EC  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14378  0130EE  0E0F               	movlw	15
 14379  0130F0  0100               	movlb	0	; () banked
 14380  0130F2  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14381                           
 14382                           ; BSR set to: 0
 14383  0130F4  0012               	return	
 14384  0130F6                     
 14385                           ; BSR set to: 0
 14386                           ;Port.c: 51: return (BytePtr)&PORTB;
 14387                           
 14388                           ; BSR set to: 0
 14389  0130F6  0E81               	movlw	129
 14390  0130F8  0100               	movlb	0	; () banked
 14391  0130FA  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14392  0130FC  0E0F               	movlw	15
 14393  0130FE  0100               	movlb	0	; () banked
 14394  013100  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14395                           
 14396                           ; BSR set to: 0
 14397  013102  0012               	return	
 14398  013104                     
 14399                           ; BSR set to: 0
 14400                           ;Port.c: 53: return (BytePtr)&PORTC;
 14401                           
 14402                           ; BSR set to: 0
 14403  013104  0E82               	movlw	130
 14404  013106  0100               	movlb	0	; () banked
 14405  013108  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14406  01310A  0E0F               	movlw	15
 14407  01310C  0100               	movlb	0	; () banked
 14408  01310E  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14409                           
 14410                           ; BSR set to: 0
 14411  013110  0012               	return	
 14412  013112                     
 14413                           ; BSR set to: 0
 14414                           ;Port.c: 55: return (BytePtr)&PORTD;
 14415                           
 14416                           ; BSR set to: 0
 14417  013112  0E83               	movlw	131
 14418  013114  0100               	movlb	0	; () banked
 14419  013116  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14420  013118  0E0F               	movlw	15
 14421  01311A  0100               	movlb	0	; () banked
 14422  01311C  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14423                           
 14424                           ; BSR set to: 0
 14425  01311E  0012               	return	
 14426  013120                     
 14427                           ; BSR set to: 0
 14428                           ;Port.c: 57: return (BytePtr)&PORTE;
 14429                           
 14430                           ; BSR set to: 0
 14431  013120  0E84               	movlw	132
 14432  013122  0100               	movlb	0	; () banked
 14433  013124  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14434  013126  0E0F               	movlw	15
 14435  013128  0100               	movlb	0	; () banked
 14436  01312A  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14437                           
 14438                           ; BSR set to: 0
 14439  01312C  0012               	return	
 14440  01312E                     
 14441                           ; BSR set to: 0
 14442                           ;Port.c: 59: return (BytePtr)&PORTF;
 14443                           
 14444                           ; BSR set to: 0
 14445  01312E  0E85               	movlw	133
 14446  013130  0100               	movlb	0	; () banked
 14447  013132  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14448  013134  0E0F               	movlw	15
 14449  013136  0100               	movlb	0	; () banked
 14450  013138  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14451                           
 14452                           ; BSR set to: 0
 14453  01313A  0012               	return	
 14454  01313C                     
 14455                           ; BSR set to: 0
 14456                           ;Port.c: 61: return (BytePtr)&PORTG;
 14457                           
 14458                           ; BSR set to: 0
 14459  01313C  0E86               	movlw	134
 14460  01313E  0100               	movlb	0	; () banked
 14461  013140  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14462  013142  0E0F               	movlw	15
 14463  013144  0100               	movlb	0	; () banked
 14464  013146  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14465                           
 14466                           ; BSR set to: 0
 14467  013148  0012               	return	
 14468  01314A                     
 14469                           ; BSR set to: 0
 14470                           ;Port.c: 63: return (void*)0;
 14471                           
 14472                           ; BSR set to: 0
 14473  01314A  0E00               	movlw	0
 14474  01314C  0100               	movlb	0	; () banked
 14475  01314E  6FBD               	movwf	?_GetPortPORT& (0+255),b
 14476  013150  0E00               	movlw	0
 14477  013152  0100               	movlb	0	; () banked
 14478  013154  6FBE               	movwf	(?_GetPortPORT+1)& (0+255),b
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;Port.c: 64: }
 14482                           
 14483                           ; BSR set to: 0
 14484  013156  0012               	return	
 14485  013158                     l350:
 14486                           
 14487                           ; BSR set to: 0
 14488  013158  0100               	movlb	0	; () banked
 14489  01315A  51BF               	movf	GetPortPORT@pInput& (0+255),w,b
 14490                           
 14491                           ; Switch size 1, requested type "space"
 14492                           ; Number of cases is 7, Range of values is 0 to 6
 14493                           ; switch strategies available:
 14494                           ; Name         Instructions Cycles
 14495                           ; simple_byte           22    12 (average)
 14496                           ;	Chosen strategy is simple_byte
 14497  01315C  0A00               	xorlw	0	; case 0
 14498  01315E  B4D8               	btfsc	status,2,c
 14499  013160  D7C3               	goto	l351
 14500  013162  0A01               	xorlw	1	; case 1
 14501  013164  B4D8               	btfsc	status,2,c
 14502  013166  D7C7               	goto	l353
 14503  013168  0A03               	xorlw	3	; case 2
 14504  01316A  B4D8               	btfsc	status,2,c
 14505  01316C  D7CB               	goto	l354
 14506  01316E  0A01               	xorlw	1	; case 3
 14507  013170  B4D8               	btfsc	status,2,c
 14508  013172  D7CF               	goto	l355
 14509  013174  0A07               	xorlw	7	; case 4
 14510  013176  B4D8               	btfsc	status,2,c
 14511  013178  D7D3               	goto	l356
 14512  01317A  0A01               	xorlw	1	; case 5
 14513  01317C  B4D8               	btfsc	status,2,c
 14514  01317E  D7D7               	goto	l357
 14515  013180  0A03               	xorlw	3	; case 6
 14516  013182  B4D8               	btfsc	status,2,c
 14517  013184  D7DB               	goto	l358
 14518  013186  D7E1               	goto	l359
 14519  013188                     __end_of_GetPortPORT:
 14520                           	opt stack 0
 14521                           tosu	equ	0xFFF
 14522                           tosh	equ	0xFFE
 14523                           tosl	equ	0xFFD
 14524                           pclath	equ	0xFFA
 14525                           tblptru	equ	0xFF8
 14526                           tblptrh	equ	0xFF7
 14527                           tblptrl	equ	0xFF6
 14528                           tablat	equ	0xFF5
 14529                           prodh	equ	0xFF4
 14530                           prodl	equ	0xFF3
 14531                           intcon	equ	0xFF2
 14532                           postinc0	equ	0xFEE
 14533                           wreg	equ	0xFE8
 14534                           indf1	equ	0xFE7
 14535                           postdec1	equ	0xFE5
 14536                           fsr1h	equ	0xFE2
 14537                           fsr1l	equ	0xFE1
 14538                           indf2	equ	0xFDF
 14539                           postinc2	equ	0xFDE
 14540                           postdec2	equ	0xFDD
 14541                           plusw2	equ	0xFDB
 14542                           fsr2h	equ	0xFDA
 14543                           fsr2l	equ	0xFD9
 14544                           status	equ	0xFD8
 14545                           
 14546 ;; *************** function _LED_Init *****************
 14547 ;; Defined at:
 14548 ;;		line 15 in file "Library/LED.c"
 14549 ;; Parameters:    Size  Location     Type
 14550 ;;  pLED            1    wreg     enum E6739
 14551 ;; Auto vars:     Size  Location     Type
 14552 ;;  pLED            1   45[BANK0 ] enum E6739
 14553 ;; Return value:  Size  Location     Type
 14554 ;;                  1    wreg      void 
 14555 ;; Registers used:
 14556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14557 ;; Tracked objects:
 14558 ;;		On entry : 0/0
 14559 ;;		On exit  : 0/0
 14560 ;;		Unchanged: 0/0
 14561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14565 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14566 ;;Total ram usage:        1 bytes
 14567 ;; Hardware stack levels used:    1
 14568 ;; Hardware stack levels required when called:   12
 14569 ;; This function calls:
 14570 ;;		_LED_Set
 14571 ;;		_Port_SetPinType
 14572 ;; This function is called by:
 14573 ;;		_MXK_Init
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           	psect	text76
 14578  013E54                     __ptext76:
 14579                           	opt stack 0
 14580  013E54                     _LED_Init:
 14581                           	opt stack 16
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;incstack = 0
 14585                           ;LED_Init@pLED stored from wreg
 14586  013E54  0100               	movlb	0	; () banked
 14587  013E56  6FEA               	movwf	LED_Init@pLED& (0+255),b
 14588                           
 14589                           ;LED.c: 17: switch (pLED)
 14590  013E58  D01E               	goto	l220
 14591  013E5A                     
 14592                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 14593  013E5A  0E91               	movlw	low _PortC
 14594  013E5C  0100               	movlb	0	; () banked
 14595  013E5E  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 14596  013E60  0E00               	movlw	high _PortC
 14597  013E62  0100               	movlb	0	; () banked
 14598  013E64  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14599  013E66  0E00               	movlw	0
 14600  013E68  0100               	movlb	0	; () banked
 14601  013E6A  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 14602  013E6C  0E03               	movlw	3
 14603  013E6E  0100               	movlb	0	; () banked
 14604  013E70  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 14605  013E72  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 14606                           
 14607                           ;LED.c: 21: break;
 14608  013E76  D017               	goto	l222
 14609  013E78                     
 14610                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 14611  013E78  0E91               	movlw	low _PortC
 14612  013E7A  0100               	movlb	0	; () banked
 14613  013E7C  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 14614  013E7E  0E00               	movlw	high _PortC
 14615  013E80  0100               	movlb	0	; () banked
 14616  013E82  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14617  013E84  0E01               	movlw	1
 14618  013E86  0100               	movlb	0	; () banked
 14619  013E88  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 14620  013E8A  0E03               	movlw	3
 14621  013E8C  0100               	movlb	0	; () banked
 14622  013E8E  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 14623  013E90  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 14624                           
 14625                           ;LED.c: 25: }
 14626                           
 14627                           ;LED.c: 24: break;
 14628  013E94  D008               	goto	l222
 14629  013E96                     l220:
 14630  013E96  0100               	movlb	0	; () banked
 14631  013E98  51EA               	movf	LED_Init@pLED& (0+255),w,b
 14632                           
 14633                           ; Switch size 1, requested type "space"
 14634                           ; Number of cases is 2, Range of values is 0 to 1
 14635                           ; switch strategies available:
 14636                           ; Name         Instructions Cycles
 14637                           ; simple_byte            7     4 (average)
 14638                           ;	Chosen strategy is simple_byte
 14639  013E9A  0A00               	xorlw	0	; case 0
 14640  013E9C  B4D8               	btfsc	status,2,c
 14641  013E9E  D7DD               	goto	l221
 14642  013EA0  0A01               	xorlw	1	; case 1
 14643  013EA2  B4D8               	btfsc	status,2,c
 14644  013EA4  D7E9               	goto	l223
 14645  013EA6                     l222:
 14646                           
 14647                           ;LED.c: 26: LED_Set(pLED, 0);
 14648                           
 14649                           ; BSR set to: 0
 14650  013EA6  0E00               	movlw	0
 14651  013EA8  0100               	movlb	0	; () banked
 14652  013EAA  6FD1               	movwf	LED_Set@pValue& (0+255),b
 14653  013EAC  0100               	movlb	0	; () banked
 14654  013EAE  51EA               	movf	LED_Init@pLED& (0+255),w,b
 14655  013EB0  EC5F  F0A0         	call	_LED_Set
 14656  013EB4  0012               	return		;funcret
 14657  013EB6                     __end_of_LED_Init:
 14658                           	opt stack 0
 14659                           tosu	equ	0xFFF
 14660                           tosh	equ	0xFFE
 14661                           tosl	equ	0xFFD
 14662                           pclath	equ	0xFFA
 14663                           tblptru	equ	0xFF8
 14664                           tblptrh	equ	0xFF7
 14665                           tblptrl	equ	0xFF6
 14666                           tablat	equ	0xFF5
 14667                           prodh	equ	0xFF4
 14668                           prodl	equ	0xFF3
 14669                           intcon	equ	0xFF2
 14670                           postinc0	equ	0xFEE
 14671                           wreg	equ	0xFE8
 14672                           indf1	equ	0xFE7
 14673                           postdec1	equ	0xFE5
 14674                           fsr1h	equ	0xFE2
 14675                           fsr1l	equ	0xFE1
 14676                           indf2	equ	0xFDF
 14677                           postinc2	equ	0xFDE
 14678                           postdec2	equ	0xFDD
 14679                           plusw2	equ	0xFDB
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function _LED_Set *****************
 14685 ;; Defined at:
 14686 ;;		line 33 in file "Library/LED.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  pLED            1    wreg     enum E6739
 14689 ;;  pValue          1   20[BANK0 ] unsigned char 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;  pLED            1   21[BANK0 ] enum E6739
 14692 ;; Return value:  Size  Location     Type
 14693 ;;                  1    wreg      void 
 14694 ;; Registers used:
 14695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14696 ;; Tracked objects:
 14697 ;;		On entry : 0/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14701 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14705 ;;Total ram usage:        2 bytes
 14706 ;; Hardware stack levels used:    1
 14707 ;; Hardware stack levels required when called:   11
 14708 ;; This function calls:
 14709 ;;		_Port_SetPin
 14710 ;; This function is called by:
 14711 ;;		_LED_Init
 14712 ;;		_SYSTEM_Initialize
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           	psect	text77
 14717  0140BE                     __ptext77:
 14718                           	opt stack 0
 14719  0140BE                     _LED_Set:
 14720                           	opt stack 16
 14721                           
 14722                           ;incstack = 0
 14723                           ;LED_Set@pLED stored from wreg
 14724  0140BE  0100               	movlb	0	; () banked
 14725  0140C0  6FD2               	movwf	LED_Set@pLED& (0+255),b
 14726                           
 14727                           ;LED.c: 35: switch (pLED)
 14728  0140C2  D01C               	goto	l227
 14729  0140C4                     
 14730                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 14731  0140C4  0E91               	movlw	low _PortC
 14732  0140C6  0100               	movlb	0	; () banked
 14733  0140C8  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 14734  0140CA  0E00               	movlw	high _PortC
 14735  0140CC  0100               	movlb	0	; () banked
 14736  0140CE  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14737  0140D0  0E00               	movlw	0
 14738  0140D2  0100               	movlb	0	; () banked
 14739  0140D4  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 14740  0140D6  C0D1  F0CF         	movff	LED_Set@pValue,Port_SetPin@pValue
 14741  0140DA  EC92  F094         	call	_Port_SetPin	;wreg free
 14742                           
 14743                           ;LED.c: 39: break;
 14744  0140DE  0012               	return	
 14745  0140E0                     
 14746                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 14747  0140E0  0E91               	movlw	low _PortC
 14748  0140E2  0100               	movlb	0	; () banked
 14749  0140E4  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 14750  0140E6  0E00               	movlw	high _PortC
 14751  0140E8  0100               	movlb	0	; () banked
 14752  0140EA  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14753  0140EC  0E01               	movlw	1
 14754  0140EE  0100               	movlb	0	; () banked
 14755  0140F0  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 14756  0140F2  C0D1  F0CF         	movff	LED_Set@pValue,Port_SetPin@pValue
 14757  0140F6  EC92  F094         	call	_Port_SetPin	;wreg free
 14758                           
 14759                           ;LED.c: 43: }
 14760                           
 14761                           ;LED.c: 42: break;
 14762  0140FA  0012               	return	
 14763  0140FC                     l227:
 14764  0140FC  0100               	movlb	0	; () banked
 14765  0140FE  51D2               	movf	LED_Set@pLED& (0+255),w,b
 14766                           
 14767                           ; Switch size 1, requested type "space"
 14768                           ; Number of cases is 2, Range of values is 0 to 1
 14769                           ; switch strategies available:
 14770                           ; Name         Instructions Cycles
 14771                           ; simple_byte            7     4 (average)
 14772                           ;	Chosen strategy is simple_byte
 14773  014100  0A00               	xorlw	0	; case 0
 14774  014102  B4D8               	btfsc	status,2,c
 14775  014104  D7DF               	goto	l228
 14776  014106  0A01               	xorlw	1	; case 1
 14777  014108  A4D8               	btfss	status,2,c
 14778  01410A  0012               	return	
 14779  01410C  D7E9               	goto	l230
 14780  01410E                     __end_of_LED_Set:
 14781                           	opt stack 0
 14782                           tosu	equ	0xFFF
 14783                           tosh	equ	0xFFE
 14784                           tosl	equ	0xFFD
 14785                           pclath	equ	0xFFA
 14786                           tblptru	equ	0xFF8
 14787                           tblptrh	equ	0xFF7
 14788                           tblptrl	equ	0xFF6
 14789                           tablat	equ	0xFF5
 14790                           prodh	equ	0xFF4
 14791                           prodl	equ	0xFF3
 14792                           intcon	equ	0xFF2
 14793                           postinc0	equ	0xFEE
 14794                           wreg	equ	0xFE8
 14795                           indf1	equ	0xFE7
 14796                           postdec1	equ	0xFE5
 14797                           fsr1h	equ	0xFE2
 14798                           fsr1l	equ	0xFE1
 14799                           indf2	equ	0xFDF
 14800                           postinc2	equ	0xFDE
 14801                           postdec2	equ	0xFDD
 14802                           plusw2	equ	0xFDB
 14803                           fsr2h	equ	0xFDA
 14804                           fsr2l	equ	0xFD9
 14805                           status	equ	0xFD8
 14806                           
 14807 ;; *************** function _MXK_Dequeue *****************
 14808 ;; Defined at:
 14809 ;;		line 153 in file "Library/MXK.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;		None
 14812 ;; Auto vars:     Size  Location     Type
 14813 ;;		None
 14814 ;; Return value:  Size  Location     Type
 14815 ;;                  1    wreg      void 
 14816 ;; Registers used:
 14817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14818 ;; Tracked objects:
 14819 ;;		On entry : 0/0
 14820 ;;		On exit  : 0/0
 14821 ;;		Unchanged: 0/0
 14822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14827 ;;Total ram usage:        0 bytes
 14828 ;; Hardware stack levels used:    1
 14829 ;; Hardware stack levels required when called:   12
 14830 ;; This function calls:
 14831 ;;		Absolute function
 14832 ;;		_Motor_Step
 14833 ;; This function is called by:
 14834 ;;		_initialise
 14835 ;;		_continuousMode
 14836 ;;		_main
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           	psect	text78
 14841  014416                     __ptext78:
 14842                           	opt stack 0
 14843  014416                     _MXK_Dequeue:
 14844                           	opt stack 16
 14845                           
 14846                           ;MXK.c: 155: if (lQueue)
 14847                           
 14848                           ;incstack = 0
 14849  014416  0100               	movlb	0	; () banked
 14850  014418  5168               	movf	_lQueue& (0+255),w,b	;volatile
 14851  01441A  0100               	movlb	0	; () banked
 14852  01441C  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 14853  01441E  0100               	movlb	0	; () banked
 14854  014420  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 14855  014422  B4D8               	btfsc	status,2,c
 14856  014424  D00D               	goto	u9839
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;MXK.c: 156: lQueue();
 14860  014426  D801               	call	u9838
 14861  014428  D00B               	goto	u9839
 14862  01442A                     u9838:
 14863  01442A  0005               	push	
 14864  01442C  6EFA               	movwf	pclath,c
 14865  01442E  0100               	movlb	0	; () banked
 14866  014430  5168               	movf	_lQueue& (0+255),w,b	;volatile
 14867  014432  6EFD               	movwf	tosl,c
 14868  014434  5169               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 14869  014436  6EFE               	movwf	tosh,c
 14870  014438  516A               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 14871  01443A  6EFF               	movwf	tosu,c
 14872  01443C  50FA               	movf	pclath,w,c
 14873  01443E  0012               	return		;indir
 14874  014440                     u9839:
 14875                           
 14876                           ;MXK.c: 157: lQueue = 0;
 14877  014440  0E00               	movlw	0
 14878  014442  0100               	movlb	0	; () banked
 14879  014444  6F68               	movwf	_lQueue& (0+255),b	;volatile
 14880  014446  0E00               	movlw	0
 14881  014448  0100               	movlb	0	; () banked
 14882  01444A  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14883  01444C  0E00               	movlw	0
 14884  01444E  0100               	movlb	0	; () banked
 14885  014450  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14886                           
 14887                           ; BSR set to: 0
 14888  014452  0012               	return		;funcret
 14889  014454                     __end_of_MXK_Dequeue:
 14890                           	opt stack 0
 14891                           tosu	equ	0xFFF
 14892                           tosh	equ	0xFFE
 14893                           tosl	equ	0xFFD
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           postinc0	equ	0xFEE
 14903                           wreg	equ	0xFE8
 14904                           indf1	equ	0xFE7
 14905                           postdec1	equ	0xFE5
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           plusw2	equ	0xFDB
 14912                           fsr2h	equ	0xFDA
 14913                           fsr2l	equ	0xFD9
 14914                           status	equ	0xFD8
 14915                           
 14916 ;; *************** function _Motor_Step *****************
 14917 ;; Defined at:
 14918 ;;		line 75 in file "Library/Motor.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;		None
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  1    wreg      void 
 14925 ;; Registers used:
 14926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;Total ram usage:        2 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:   11
 14939 ;; This function calls:
 14940 ;;		_MXK_Queue
 14941 ;;		_MXK_Release
 14942 ;;		_MXK_SwitchTo
 14943 ;;		_Port_SetPin
 14944 ;;		_Timer0_Restart
 14945 ;;		_Timer0_Stop
 14946 ;; This function is called by:
 14947 ;;		_Motor_Init
 14948 ;;		_MXK_Dequeue
 14949 ;;		_Timer0_ISR
 14950 ;; This function uses a non-reentrant model
 14951 ;;
 14952                           
 14953                           	psect	text79
 14954  0123B2                     __ptext79:
 14955                           	opt stack 0
 14956  0123B2                     _Motor_Step:
 14957                           	opt stack 0
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;Skip over the trampoline to the duplicate function for level 2
 14961  0123B2  B251               	btfsc	btemp,1,c
 14962  0123B4  EF6C  F092         	goto	i2_Motor_Step
 14963  0123B8                     _Motor_Step$intlevel0:
 14964                           	opt stack 16
 14965                           
 14966                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 14967                           
 14968                           ;incstack = 0
 14969  0123B8  0100               	movlb	0	; () banked
 14970  0123BA  EE20 F004          	lfsr	2,4
 14971  0123BE  516F               	movf	_lMotor& (0+255),w,b
 14972  0123C0  26D9               	addwf	fsr2l,f,c
 14973  0123C2  5170               	movf	(_lMotor+1)& (0+255),w,b
 14974  0123C4  22DA               	addwfc	fsr2h,f,c
 14975  0123C6  50DF               	movf	indf2,w,c
 14976  0123C8  ECAA  F0A1         	call	_MXK_SwitchTo
 14977  0123CC  0900               	iorlw	0
 14978  0123CE  B4D8               	btfsc	status,2,c
 14979  0123D0  D07A               	goto	l1635
 14980                           
 14981                           ;Motor.c: 78: {
 14982                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 14983  0123D2  C06F  FFD9         	movff	_lMotor,fsr2l
 14984  0123D6  C070  FFDA         	movff	_lMotor+1,fsr2h
 14985  0123DA  50DE               	movf	postinc2,w,c
 14986  0123DC  10DE               	iorwf	postinc2,w,c
 14987  0123DE  B4D8               	btfsc	status,2,c
 14988  0123E0  D06D               	goto	l1636
 14989                           
 14990                           ;Motor.c: 80: {
 14991                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 14992  0123E2  C06F  FFD9         	movff	_lMotor,fsr2l
 14993  0123E6  C070  FFDA         	movff	_lMotor+1,fsr2h
 14994  0123EA  0E01               	movlw	1
 14995  0123EC  BEDB               	btfsc	plusw2,7,c
 14996  0123EE  D026               	goto	l1637
 14997  0123F0  0E01               	movlw	1
 14998  0123F2  50DB               	movf	plusw2,w,c
 14999  0123F4  E103               	bnz	u7990
 15000  0123F6  04DE               	decf	postinc2,w,c
 15001  0123F8  A0D8               	btfss	status,0,c
 15002  0123FA  D020               	goto	l1637
 15003  0123FC                     u7990:
 15004                           
 15005                           ;Motor.c: 83: {
 15006                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 15007  0123FC  C06F  FFD9         	movff	_lMotor,fsr2l
 15008  012400  C070  FFDA         	movff	_lMotor+1,fsr2h
 15009  012404  28DE               	incf	postinc2,w,c
 15010  012406  E104               	bnz	u8000
 15011  012408  0E7F               	movlw	127
 15012  01240A  18DE               	xorwf	postinc2,w,c
 15013  01240C  B4D8               	btfsc	status,2,c
 15014  01240E  D007               	goto	l1638
 15015  012410                     u8000:
 15016                           
 15017                           ;Motor.c: 85: lMotor->mDelta --;
 15018  012410  C06F  FFD9         	movff	_lMotor,fsr2l
 15019  012414  C070  FFDA         	movff	_lMotor+1,fsr2h
 15020  012418  06DE               	decf	postinc2,f,c
 15021  01241A  0E00               	movlw	0
 15022  01241C  5ADD               	subwfb	postdec2,f,c
 15023  01241E                     l1638:
 15024                           
 15025                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 15026  01241E  0E7D               	movlw	low _PortE
 15027  012420  0100               	movlb	0	; () banked
 15028  012422  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 15029  012424  0E00               	movlw	high _PortE
 15030  012426  0100               	movlb	0	; () banked
 15031  012428  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15032  01242A  0E00               	movlw	0
 15033  01242C  0100               	movlb	0	; () banked
 15034  01242E  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 15035  012430  0E01               	movlw	1
 15036  012432  0100               	movlb	0	; () banked
 15037  012434  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 15038  012436  EC92  F094         	call	_Port_SetPin	;wreg free
 15039                           
 15040                           ;Motor.c: 88: }
 15041  01243A  D01F               	goto	l1639
 15042  01243C                     l1637:
 15043                           
 15044                           ;Motor.c: 89: else
 15045                           ;Motor.c: 90: {
 15046                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 15047  01243C  C06F  FFD9         	movff	_lMotor,fsr2l
 15048  012440  C070  FFDA         	movff	_lMotor+1,fsr2h
 15049  012444  04DE               	decf	postinc2,w,c
 15050  012446  E104               	bnz	u8010
 15051  012448  0E80               	movlw	128
 15052  01244A  18DE               	xorwf	postinc2,w,c
 15053  01244C  B4D8               	btfsc	status,2,c
 15054  01244E  D007               	goto	l1640
 15055  012450                     u8010:
 15056                           
 15057                           ;Motor.c: 92: lMotor->mDelta ++;
 15058  012450  C06F  FFD9         	movff	_lMotor,fsr2l
 15059  012454  C070  FFDA         	movff	_lMotor+1,fsr2h
 15060  012458  2ADE               	incf	postinc2,f,c
 15061  01245A  0E00               	movlw	0
 15062  01245C  22DD               	addwfc	postdec2,f,c
 15063  01245E                     l1640:
 15064                           
 15065                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 15066  01245E  0E7D               	movlw	low _PortE
 15067  012460  0100               	movlb	0	; () banked
 15068  012462  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 15069  012464  0E00               	movlw	high _PortE
 15070  012466  0100               	movlb	0	; () banked
 15071  012468  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15072  01246A  0E00               	movlw	0
 15073  01246C  0100               	movlb	0	; () banked
 15074  01246E  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 15075  012470  0E00               	movlw	0
 15076  012472  0100               	movlb	0	; () banked
 15077  012474  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 15078  012476  EC92  F094         	call	_Port_SetPin	;wreg free
 15079  01247A                     l1639:
 15080                           
 15081                           ;Motor.c: 95: }
 15082                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 15083  01247A  0E7D               	movlw	low _PortE
 15084  01247C  0100               	movlb	0	; () banked
 15085  01247E  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 15086  012480  0E00               	movlw	high _PortE
 15087  012482  0100               	movlb	0	; () banked
 15088  012484  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15089  012486  0E01               	movlw	1
 15090  012488  0100               	movlb	0	; () banked
 15091  01248A  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 15092  01248C  0E01               	movlw	1
 15093  01248E  0100               	movlb	0	; () banked
 15094  012490  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 15095  012492  EC92  F094         	call	_Port_SetPin	;wreg free
 15096                           
 15097                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 15098  012496  0E7D               	movlw	low _PortE
 15099  012498  0100               	movlb	0	; () banked
 15100  01249A  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 15101  01249C  0E00               	movlw	high _PortE
 15102  01249E  0100               	movlb	0	; () banked
 15103  0124A0  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15104  0124A2  0E01               	movlw	1
 15105  0124A4  0100               	movlb	0	; () banked
 15106  0124A6  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 15107  0124A8  0E00               	movlw	0
 15108  0124AA  0100               	movlb	0	; () banked
 15109  0124AC  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 15110  0124AE  EC92  F094         	call	_Port_SetPin	;wreg free
 15111                           
 15112                           ;Motor.c: 101: MXK_Release();
 15113  0124B2  ECEE  F0A4         	call	_MXK_Release	;wreg free
 15114                           
 15115                           ;Motor.c: 102: Timer0_Restart();
 15116  0124B6  ECB4  F0A5         	call	_Timer0_Restart	;wreg free
 15117                           
 15118                           ;Motor.c: 103: return;
 15119  0124BA  0012               	return	
 15120  0124BC                     l1636:
 15121                           
 15122                           ;Motor.c: 104: }
 15123                           ;Motor.c: 105: MXK_Release();
 15124  0124BC  ECEE  F0A4         	call	_MXK_Release	;wreg free
 15125                           
 15126                           ;Motor.c: 106: Timer0_Stop();
 15127  0124C0  ECDE  F0A5         	call	_Timer0_Stop	;wreg free
 15128                           
 15129                           ;Motor.c: 107: return;
 15130  0124C4  0012               	return	
 15131  0124C6                     l1635:
 15132                           
 15133                           ;Motor.c: 108: }
 15134                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 15135  0124C6  C02C  F0BD         	movff	_lStepFunction,MXK_Queue@pCallback
 15136  0124CA  C02D  F0BE         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 15137  0124CE  C02E  F0BF         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 15138  0124D2  ECA0  F0A5         	call	_MXK_Queue	;wreg free
 15139  0124D6  0012               	return		;funcret
 15140  0124D8                     __end_of_Motor_Step:
 15141                           	opt stack 0
 15142                           tosu	equ	0xFFF
 15143                           tosh	equ	0xFFE
 15144                           tosl	equ	0xFFD
 15145                           pclath	equ	0xFFA
 15146                           tblptru	equ	0xFF8
 15147                           tblptrh	equ	0xFF7
 15148                           tblptrl	equ	0xFF6
 15149                           tablat	equ	0xFF5
 15150                           prodh	equ	0xFF4
 15151                           prodl	equ	0xFF3
 15152                           intcon	equ	0xFF2
 15153                           postinc0	equ	0xFEE
 15154                           wreg	equ	0xFE8
 15155                           indf1	equ	0xFE7
 15156                           postdec1	equ	0xFE5
 15157                           fsr1h	equ	0xFE2
 15158                           fsr1l	equ	0xFE1
 15159                           indf2	equ	0xFDF
 15160                           postinc2	equ	0xFDE
 15161                           postdec2	equ	0xFDD
 15162                           plusw2	equ	0xFDB
 15163                           fsr2h	equ	0xFDA
 15164                           fsr2l	equ	0xFD9
 15165                           status	equ	0xFD8
 15166                           
 15167 ;; *************** function _Timer0_Stop *****************
 15168 ;; Defined at:
 15169 ;;		line 89 in file "Library/Timer0.c"
 15170 ;; Parameters:    Size  Location     Type
 15171 ;;		None
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;		None
 15174 ;; Return value:  Size  Location     Type
 15175 ;;                  1    wreg      void 
 15176 ;; Registers used:
 15177 ;;		None
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15187 ;;Total ram usage:        0 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:    7
 15190 ;; This function calls:
 15191 ;;		Nothing
 15192 ;; This function is called by:
 15193 ;;		_Motor_Step
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           	psect	text80
 15198  014BBC                     __ptext80:
 15199                           	opt stack 0
 15200  014BBC                     _Timer0_Stop:
 15201                           	opt stack 19
 15202                           
 15203                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 15204                           
 15205                           ;incstack = 0
 15206  014BBC  9AF2               	bcf	intcon,5,c	;volatile
 15207                           
 15208                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 15209  014BBE  94F2               	bcf	intcon,2,c	;volatile
 15210  014BC0  0012               	return		;funcret
 15211  014BC2                     __end_of_Timer0_Stop:
 15212                           	opt stack 0
 15213                           tosu	equ	0xFFF
 15214                           tosh	equ	0xFFE
 15215                           tosl	equ	0xFFD
 15216                           pclath	equ	0xFFA
 15217                           tblptru	equ	0xFF8
 15218                           tblptrh	equ	0xFF7
 15219                           tblptrl	equ	0xFF6
 15220                           tablat	equ	0xFF5
 15221                           prodh	equ	0xFF4
 15222                           prodl	equ	0xFF3
 15223                           intcon	equ	0xFF2
 15224                           postinc0	equ	0xFEE
 15225                           wreg	equ	0xFE8
 15226                           indf1	equ	0xFE7
 15227                           postdec1	equ	0xFE5
 15228                           fsr1h	equ	0xFE2
 15229                           fsr1l	equ	0xFE1
 15230                           indf2	equ	0xFDF
 15231                           postinc2	equ	0xFDE
 15232                           postdec2	equ	0xFDD
 15233                           plusw2	equ	0xFDB
 15234                           fsr2h	equ	0xFDA
 15235                           fsr2l	equ	0xFD9
 15236                           status	equ	0xFD8
 15237                           
 15238 ;; *************** function _Timer0_Restart *****************
 15239 ;; Defined at:
 15240 ;;		line 83 in file "Library/Timer0.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;		None
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;		None
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  1    wreg      void 
 15247 ;; Registers used:
 15248 ;;		None
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15258 ;;Total ram usage:        0 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:    7
 15261 ;; This function calls:
 15262 ;;		Nothing
 15263 ;; This function is called by:
 15264 ;;		_Motor_Step
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           	psect	text81
 15269  014B68                     __ptext81:
 15270                           	opt stack 0
 15271  014B68                     _Timer0_Restart:
 15272                           	opt stack 19
 15273                           
 15274                           ;Timer0.c: 85: TMR0 = COUNTER;
 15275                           
 15276                           ;incstack = 0
 15277  014B68  C032  FFD6         	movff	_COUNTER,4054	;volatile
 15278  014B6C  C033  FFD7         	movff	_COUNTER+1,4055	;volatile
 15279                           
 15280                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 15281  014B70  8AF2               	bsf	intcon,5,c	;volatile
 15282  014B72  0012               	return		;funcret
 15283  014B74                     __end_of_Timer0_Restart:
 15284                           	opt stack 0
 15285                           tosu	equ	0xFFF
 15286                           tosh	equ	0xFFE
 15287                           tosl	equ	0xFFD
 15288                           pclath	equ	0xFFA
 15289                           tblptru	equ	0xFF8
 15290                           tblptrh	equ	0xFF7
 15291                           tblptrl	equ	0xFF6
 15292                           tablat	equ	0xFF5
 15293                           prodh	equ	0xFF4
 15294                           prodl	equ	0xFF3
 15295                           intcon	equ	0xFF2
 15296                           postinc0	equ	0xFEE
 15297                           wreg	equ	0xFE8
 15298                           indf1	equ	0xFE7
 15299                           postdec1	equ	0xFE5
 15300                           fsr1h	equ	0xFE2
 15301                           fsr1l	equ	0xFE1
 15302                           indf2	equ	0xFDF
 15303                           postinc2	equ	0xFDE
 15304                           postdec2	equ	0xFDD
 15305                           plusw2	equ	0xFDB
 15306                           fsr2h	equ	0xFDA
 15307                           fsr2l	equ	0xFD9
 15308                           status	equ	0xFD8
 15309                           
 15310 ;; *************** function _MXK_SwitchTo *****************
 15311 ;; Defined at:
 15312 ;;		line 105 in file "Library/MXK.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;  pModule         1    wreg     enum E6925
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;  pModule         1    7[BANK0 ] enum E6925
 15317 ;;  CUR             1    6[BANK0 ] unsigned char 
 15318 ;; Return value:  Size  Location     Type
 15319 ;;                  1    wreg      unsigned char 
 15320 ;; Registers used:
 15321 ;;		wreg, status,2, status,0, cstack
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15331 ;;Total ram usage:        2 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    8
 15334 ;; This function calls:
 15335 ;;		_delay_us
 15336 ;; This function is called by:
 15337 ;;		_Motor_Step
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           	psect	text82
 15342  014354                     __ptext82:
 15343                           	opt stack 0
 15344  014354                     _MXK_SwitchTo:
 15345                           	opt stack 18
 15346                           
 15347                           ;incstack = 0
 15348                           ;MXK_SwitchTo@pModule stored from wreg
 15349  014354  0100               	movlb	0	; () banked
 15350  014356  6FC4               	movwf	MXK_SwitchTo@pModule& (0+255),b
 15351                           
 15352                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 15353  014358  5086               	movf	3974,w,c	;volatile
 15354  01435A  0B0F               	andlw	15
 15355  01435C  0100               	movlb	0	; () banked
 15356  01435E  6FC3               	movwf	MXK_SwitchTo@CUR& (0+255),b
 15357                           
 15358                           ; BSR set to: 0
 15359                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 15360  014360  504B               	movf	_Bus_State,w,c
 15361  014362  A4D8               	btfss	status,2,c
 15362  014364  D002               	goto	l1738
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;MXK.c: 110: return 0;
 15366  014366  0E00               	movlw	0
 15367                           
 15368                           ; BSR set to: 0
 15369  014368  0012               	return	
 15370  01436A                     l1738:
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 15374                           
 15375                           ; BSR set to: 0
 15376  01436A  0E00               	movlw	0
 15377  01436C  6E4B               	movwf	_Bus_State,c
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;MXK.c: 114: if (CUR != pModule)
 15381  01436E  0100               	movlb	0	; () banked
 15382  014370  51C4               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15383  014372  0100               	movlb	0	; () banked
 15384  014374  19C3               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 15385  014376  B4D8               	btfsc	status,2,c
 15386  014378  D00C               	goto	l1740
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;MXK.c: 115: {
 15390                           ;MXK.c: 116: PORTG &= ~(0xF);
 15391  01437A  0EF0               	movlw	240
 15392  01437C  1686               	andwf	3974,f,c	;volatile
 15393                           
 15394                           ;MXK.c: 117: PORTG |= pModule;
 15395  01437E  0100               	movlb	0	; () banked
 15396  014380  51C4               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15397  014382  1286               	iorwf	3974,f,c	;volatile
 15398                           
 15399                           ; BSR set to: 0
 15400                           ;MXK.c: 120: delay_us(10);
 15401  014384  0E00               	movlw	0
 15402  014386  0100               	movlb	0	; () banked
 15403  014388  6FBE               	movwf	(delay_us@us+1)& (0+255),b
 15404  01438A  0E0A               	movlw	10
 15405  01438C  6FBD               	movwf	delay_us@us& (0+255),b
 15406  01438E  EC0E  F0A0         	call	_delay_us	;wreg free
 15407  014392                     l1740:
 15408                           
 15409                           ;MXK.c: 121: }
 15410                           ;MXK.c: 122: return 1;
 15411  014392  0E01               	movlw	1
 15412  014394  0012               	return	
 15413  014396                     __end_of_MXK_SwitchTo:
 15414                           	opt stack 0
 15415                           tosu	equ	0xFFF
 15416                           tosh	equ	0xFFE
 15417                           tosl	equ	0xFFD
 15418                           pclath	equ	0xFFA
 15419                           tblptru	equ	0xFF8
 15420                           tblptrh	equ	0xFF7
 15421                           tblptrl	equ	0xFF6
 15422                           tablat	equ	0xFF5
 15423                           prodh	equ	0xFF4
 15424                           prodl	equ	0xFF3
 15425                           intcon	equ	0xFF2
 15426                           postinc0	equ	0xFEE
 15427                           wreg	equ	0xFE8
 15428                           indf1	equ	0xFE7
 15429                           postdec1	equ	0xFE5
 15430                           fsr1h	equ	0xFE2
 15431                           fsr1l	equ	0xFE1
 15432                           indf2	equ	0xFDF
 15433                           postinc2	equ	0xFDE
 15434                           postdec2	equ	0xFDD
 15435                           plusw2	equ	0xFDB
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440 ;; *************** function _MXK_Release *****************
 15441 ;; Defined at:
 15442 ;;		line 130 in file "Library/MXK.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;		None
 15445 ;; Auto vars:     Size  Location     Type
 15446 ;;		None
 15447 ;; Return value:  Size  Location     Type
 15448 ;;                  1    wreg      unsigned char 
 15449 ;; Registers used:
 15450 ;;		wreg, status,2, status,0
 15451 ;; Tracked objects:
 15452 ;;		On entry : 0/0
 15453 ;;		On exit  : 0/0
 15454 ;;		Unchanged: 0/0
 15455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15460 ;;Total ram usage:        0 bytes
 15461 ;; Hardware stack levels used:    1
 15462 ;; Hardware stack levels required when called:    7
 15463 ;; This function calls:
 15464 ;;		Nothing
 15465 ;; This function is called by:
 15466 ;;		_Motor_Step
 15467 ;;		_initialise
 15468 ;;		_continuousMode
 15469 ;;		_main
 15470 ;; This function uses a non-reentrant model
 15471 ;;
 15472                           
 15473                           	psect	text83
 15474  0149DC                     __ptext83:
 15475                           	opt stack 0
 15476  0149DC                     _MXK_Release:
 15477                           	opt stack 21
 15478                           
 15479                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 15480                           
 15481                           ;incstack = 0
 15482  0149DC  0E01               	movlw	1
 15483  0149DE  6E4B               	movwf	_Bus_State,c
 15484                           
 15485                           ;MXK.c: 134: if (lQueue != 0)
 15486  0149E0  0100               	movlb	0	; () banked
 15487  0149E2  5168               	movf	_lQueue& (0+255),w,b	;volatile
 15488  0149E4  0100               	movlb	0	; () banked
 15489  0149E6  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15490  0149E8  0100               	movlb	0	; () banked
 15491  0149EA  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15492  0149EC  B4D8               	btfsc	status,2,c
 15493  0149EE  D002               	goto	l1743
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;MXK.c: 135: return 1;
 15497  0149F0  0E01               	movlw	1
 15498                           
 15499                           ; BSR set to: 0
 15500  0149F2  0012               	return	
 15501  0149F4                     l1743:
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;MXK.c: 137: return 0;
 15505                           
 15506                           ; BSR set to: 0
 15507  0149F4  0E00               	movlw	0
 15508  0149F6  0012               	return	
 15509  0149F8                     __end_of_MXK_Release:
 15510                           	opt stack 0
 15511                           tosu	equ	0xFFF
 15512                           tosh	equ	0xFFE
 15513                           tosl	equ	0xFFD
 15514                           pclath	equ	0xFFA
 15515                           tblptru	equ	0xFF8
 15516                           tblptrh	equ	0xFF7
 15517                           tblptrl	equ	0xFF6
 15518                           tablat	equ	0xFF5
 15519                           prodh	equ	0xFF4
 15520                           prodl	equ	0xFF3
 15521                           intcon	equ	0xFF2
 15522                           postinc0	equ	0xFEE
 15523                           wreg	equ	0xFE8
 15524                           indf1	equ	0xFE7
 15525                           postdec1	equ	0xFE5
 15526                           fsr1h	equ	0xFE2
 15527                           fsr1l	equ	0xFE1
 15528                           indf2	equ	0xFDF
 15529                           postinc2	equ	0xFDE
 15530                           postdec2	equ	0xFDD
 15531                           plusw2	equ	0xFDB
 15532                           fsr2h	equ	0xFDA
 15533                           fsr2l	equ	0xFD9
 15534                           status	equ	0xFD8
 15535                           
 15536 ;; *************** function _MXK_Queue *****************
 15537 ;; Defined at:
 15538 ;;		line 144 in file "Library/MXK.c"
 15539 ;; Parameters:    Size  Location     Type
 15540 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 15541 ;;		 -> Absolute function(1), Motor_Step(1), 
 15542 ;; Auto vars:     Size  Location     Type
 15543 ;;		None
 15544 ;; Return value:  Size  Location     Type
 15545 ;;                  1    wreg      void 
 15546 ;; Registers used:
 15547 ;;		wreg, status,2, status,0
 15548 ;; Tracked objects:
 15549 ;;		On entry : 0/0
 15550 ;;		On exit  : 0/0
 15551 ;;		Unchanged: 0/0
 15552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15553 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15556 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15557 ;;Total ram usage:        3 bytes
 15558 ;; Hardware stack levels used:    1
 15559 ;; Hardware stack levels required when called:    7
 15560 ;; This function calls:
 15561 ;;		Nothing
 15562 ;; This function is called by:
 15563 ;;		_Motor_Step
 15564 ;; This function uses a non-reentrant model
 15565 ;;
 15566                           
 15567                           	psect	text84
 15568  014B40                     __ptext84:
 15569                           	opt stack 0
 15570  014B40                     _MXK_Queue:
 15571                           	opt stack 19
 15572                           
 15573                           ;MXK.c: 146: lQueue = pCallback;
 15574                           
 15575                           ; BSR set to: 0
 15576                           ;incstack = 0
 15577  014B40  C0BD  F068         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 15578  014B44  C0BE  F069         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 15579  014B48  C0BF  F06A         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 15580  014B4C  0012               	return		;funcret
 15581  014B4E                     __end_of_MXK_Queue:
 15582                           	opt stack 0
 15583                           tosu	equ	0xFFF
 15584                           tosh	equ	0xFFE
 15585                           tosl	equ	0xFFD
 15586                           pclath	equ	0xFFA
 15587                           tblptru	equ	0xFF8
 15588                           tblptrh	equ	0xFF7
 15589                           tblptrl	equ	0xFF6
 15590                           tablat	equ	0xFF5
 15591                           prodh	equ	0xFF4
 15592                           prodl	equ	0xFF3
 15593                           intcon	equ	0xFF2
 15594                           postinc0	equ	0xFEE
 15595                           wreg	equ	0xFE8
 15596                           indf1	equ	0xFE7
 15597                           postdec1	equ	0xFE5
 15598                           fsr1h	equ	0xFE2
 15599                           fsr1l	equ	0xFE1
 15600                           indf2	equ	0xFDF
 15601                           postinc2	equ	0xFDE
 15602                           postdec2	equ	0xFDD
 15603                           plusw2	equ	0xFDB
 15604                           fsr2h	equ	0xFDA
 15605                           fsr2l	equ	0xFD9
 15606                           status	equ	0xFD8
 15607                           
 15608 ;; *************** function _MXK_BlockSwitchTo *****************
 15609 ;; Defined at:
 15610 ;;		line 82 in file "Library/MXK.c"
 15611 ;; Parameters:    Size  Location     Type
 15612 ;;  pModule         1    wreg     enum E6925
 15613 ;; Auto vars:     Size  Location     Type
 15614 ;;  pModule         1    7[BANK0 ] enum E6925
 15615 ;;  CUR             1    6[BANK0 ] unsigned char 
 15616 ;; Return value:  Size  Location     Type
 15617 ;;                  1    wreg      unsigned char 
 15618 ;; Registers used:
 15619 ;;		wreg, status,2, status,0, cstack
 15620 ;; Tracked objects:
 15621 ;;		On entry : 0/0
 15622 ;;		On exit  : 0/0
 15623 ;;		Unchanged: 0/0
 15624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15629 ;;Total ram usage:        2 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; Hardware stack levels required when called:    8
 15632 ;; This function calls:
 15633 ;;		_delay_us
 15634 ;; This function is called by:
 15635 ;;		_initialise
 15636 ;;		_continuousMode
 15637 ;;		_main
 15638 ;; This function uses a non-reentrant model
 15639 ;;
 15640                           
 15641                           	psect	text85
 15642  014454                     __ptext85:
 15643                           	opt stack 0
 15644  014454                     _MXK_BlockSwitchTo:
 15645                           	opt stack 20
 15646                           
 15647                           ;incstack = 0
 15648                           ;MXK_BlockSwitchTo@pModule stored from wreg
 15649  014454  0100               	movlb	0	; () banked
 15650  014456  6FC4               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 15651                           
 15652                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 15653  014458  5086               	movf	3974,w,c	;volatile
 15654  01445A  0B0F               	andlw	15
 15655  01445C  0100               	movlb	0	; () banked
 15656  01445E  6FC3               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 15657  014460                     
 15658                           ; BSR set to: 0
 15659                           
 15660                           ; BSR set to: 0
 15661  014460  504B               	movf	_Bus_State,w,c
 15662  014462  B4D8               	btfsc	status,2,c
 15663  014464  D7FD               	goto	l1732
 15664                           
 15665                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 15666  014466  0E00               	movlw	0
 15667  014468  6E4B               	movwf	_Bus_State,c
 15668                           
 15669                           ;MXK.c: 90: if (CUR != pModule)
 15670  01446A  0100               	movlb	0	; () banked
 15671  01446C  51C4               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15672  01446E  0100               	movlb	0	; () banked
 15673  014470  19C3               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 15674  014472  B4D8               	btfsc	status,2,c
 15675  014474  D00C               	goto	l1734
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;MXK.c: 91: {
 15679                           ;MXK.c: 92: PORTG &= ~(0xF);
 15680  014476  0EF0               	movlw	240
 15681  014478  1686               	andwf	3974,f,c	;volatile
 15682                           
 15683                           ;MXK.c: 93: PORTG |= pModule;
 15684  01447A  0100               	movlb	0	; () banked
 15685  01447C  51C4               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15686  01447E  1286               	iorwf	3974,f,c	;volatile
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;MXK.c: 96: delay_us(10);
 15690  014480  0E00               	movlw	0
 15691  014482  0100               	movlb	0	; () banked
 15692  014484  6FBE               	movwf	(delay_us@us+1)& (0+255),b
 15693  014486  0E0A               	movlw	10
 15694  014488  6FBD               	movwf	delay_us@us& (0+255),b
 15695  01448A  EC0E  F0A0         	call	_delay_us	;wreg free
 15696  01448E                     l1734:
 15697                           
 15698                           ;MXK.c: 97: }
 15699                           ;MXK.c: 98: return 1;
 15700  01448E  0E01               	movlw	1
 15701  014490  0012               	return	
 15702  014492                     __end_of_MXK_BlockSwitchTo:
 15703                           	opt stack 0
 15704                           tosu	equ	0xFFF
 15705                           tosh	equ	0xFFE
 15706                           tosl	equ	0xFFD
 15707                           pclath	equ	0xFFA
 15708                           tblptru	equ	0xFF8
 15709                           tblptrh	equ	0xFF7
 15710                           tblptrl	equ	0xFF6
 15711                           tablat	equ	0xFF5
 15712                           prodh	equ	0xFF4
 15713                           prodl	equ	0xFF3
 15714                           intcon	equ	0xFF2
 15715                           postinc0	equ	0xFEE
 15716                           wreg	equ	0xFE8
 15717                           indf1	equ	0xFE7
 15718                           postdec1	equ	0xFE5
 15719                           fsr1h	equ	0xFE2
 15720                           fsr1l	equ	0xFE1
 15721                           indf2	equ	0xFDF
 15722                           postinc2	equ	0xFDE
 15723                           postdec2	equ	0xFDD
 15724                           plusw2	equ	0xFDB
 15725                           fsr2h	equ	0xFDA
 15726                           fsr2l	equ	0xFD9
 15727                           status	equ	0xFD8
 15728                           
 15729 ;; *************** function _delay_us *****************
 15730 ;; Defined at:
 15731 ;;		line 255 in file "Library/Types.c"
 15732 ;; Parameters:    Size  Location     Type
 15733 ;;  us              2    0[BANK0 ] unsigned short 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;  u               4    2[BANK0 ] unsigned long 
 15736 ;; Return value:  Size  Location     Type
 15737 ;;                  1    wreg      void 
 15738 ;; Registers used:
 15739 ;;		wreg, status,2, status,0
 15740 ;; Tracked objects:
 15741 ;;		On entry : 0/0
 15742 ;;		On exit  : 0/0
 15743 ;;		Unchanged: 0/0
 15744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15746 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15749 ;;Total ram usage:        6 bytes
 15750 ;; Hardware stack levels used:    1
 15751 ;; Hardware stack levels required when called:    7
 15752 ;; This function calls:
 15753 ;;		Nothing
 15754 ;; This function is called by:
 15755 ;;		_MXK_BlockSwitchTo
 15756 ;;		_MXK_SwitchTo
 15757 ;; This function uses a non-reentrant model
 15758 ;;
 15759                           
 15760                           	psect	text86
 15761  01401C                     __ptext86:
 15762                           	opt stack 0
 15763  01401C                     _delay_us:
 15764                           	opt stack 18
 15765                           
 15766                           ;Types.c: 256: unsigned long u;
 15767                           ;Types.c: 257: while (us--) {
 15768                           
 15769                           ;incstack = 0
 15770  01401C  D01C               	goto	u7280
 15771  01401E                     l10810:
 15772                           
 15773                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 15774  01401E  0E00               	movlw	0
 15775  014020  0100               	movlb	0	; () banked
 15776  014022  6FBF               	movwf	delay_us@u& (0+255),b
 15777  014024  0E00               	movlw	0
 15778  014026  6FC0               	movwf	(delay_us@u+1)& (0+255),b
 15779  014028  0E00               	movlw	0
 15780  01402A  6FC1               	movwf	(delay_us@u+2)& (0+255),b
 15781  01402C  0E00               	movlw	0
 15782  01402E  6FC2               	movwf	(delay_us@u+3)& (0+255),b
 15783  014030                     l10812:
 15784                           
 15785                           ; BSR set to: 0
 15786  014030  0100               	movlb	0	; () banked
 15787  014032  51BF               	movf	delay_us@u& (0+255),w,b
 15788  014034  0100               	movlb	0	; () banked
 15789  014036  11C0               	iorwf	(delay_us@u+1)& (0+255),w,b
 15790  014038  0100               	movlb	0	; () banked
 15791  01403A  11C1               	iorwf	(delay_us@u+2)& (0+255),w,b
 15792  01403C  0100               	movlb	0	; () banked
 15793  01403E  11C2               	iorwf	(delay_us@u+3)& (0+255),w,b
 15794  014040  A4D8               	btfss	status,2,c
 15795  014042  D009               	goto	u7280
 15796                           
 15797                           ; BSR set to: 0
 15798                           
 15799                           ; BSR set to: 0
 15800  014044  F000               	nop		; ;# 
 15801  014046  0E01               	movlw	1
 15802  014048  0100               	movlb	0	; () banked
 15803  01404A  27BF               	addwf	delay_us@u& (0+255),f,b
 15804  01404C  0E00               	movlw	0
 15805  01404E  23C0               	addwfc	(delay_us@u+1)& (0+255),f,b
 15806  014050  23C1               	addwfc	(delay_us@u+2)& (0+255),f,b
 15807  014052  23C2               	addwfc	(delay_us@u+3)& (0+255),f,b
 15808  014054  D7ED               	goto	l10812
 15809  014056                     u7280:
 15810                           
 15811                           ; BSR set to: 0
 15812                           
 15813                           ; BSR set to: 0
 15814  014056  0100               	movlb	0	; () banked
 15815  014058  07BD               	decf	delay_us@us& (0+255),f,b
 15816  01405A  A0D8               	btfss	status,0,c
 15817  01405C  07BE               	decf	(delay_us@us+1)& (0+255),f,b
 15818  01405E  0100               	movlb	0	; () banked
 15819  014060  29BD               	incf	delay_us@us& (0+255),w,b
 15820  014062  E1DD               	bnz	l10810
 15821  014064  0100               	movlb	0	; () banked
 15822  014066  29BE               	incf	(delay_us@us+1)& (0+255),w,b
 15823  014068  B4D8               	btfsc	status,2,c
 15824  01406A  0012               	return	
 15825  01406C  D7D8               	goto	l832
 15826  01406E                     __end_of_delay_us:
 15827                           	opt stack 0
 15828                           tosu	equ	0xFFF
 15829                           tosh	equ	0xFFE
 15830                           tosl	equ	0xFFD
 15831                           pclath	equ	0xFFA
 15832                           tblptru	equ	0xFF8
 15833                           tblptrh	equ	0xFF7
 15834                           tblptrl	equ	0xFF6
 15835                           tablat	equ	0xFF5
 15836                           prodh	equ	0xFF4
 15837                           prodl	equ	0xFF3
 15838                           intcon	equ	0xFF2
 15839                           postinc0	equ	0xFEE
 15840                           wreg	equ	0xFE8
 15841                           indf1	equ	0xFE7
 15842                           postdec1	equ	0xFE5
 15843                           fsr1h	equ	0xFE2
 15844                           fsr1l	equ	0xFE1
 15845                           indf2	equ	0xFDF
 15846                           postinc2	equ	0xFDE
 15847                           postdec2	equ	0xFDD
 15848                           plusw2	equ	0xFDB
 15849                           fsr2h	equ	0xFDA
 15850                           fsr2l	equ	0xFD9
 15851                           status	equ	0xFD8
 15852                           
 15853 ;; *************** function _LCD_Init *****************
 15854 ;; Defined at:
 15855 ;;		line 172 in file "Library/LCD.c"
 15856 ;; Parameters:    Size  Location     Type
 15857 ;;		None
 15858 ;; Auto vars:     Size  Location     Type
 15859 ;;  i               2   55[BANK0 ] unsigned short 
 15860 ;; Return value:  Size  Location     Type
 15861 ;;                  1    wreg      void 
 15862 ;; Registers used:
 15863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15864 ;; Tracked objects:
 15865 ;;		On entry : 0/0
 15866 ;;		On exit  : 0/0
 15867 ;;		Unchanged: 0/0
 15868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15872 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15873 ;;Total ram usage:        4 bytes
 15874 ;; Hardware stack levels used:    1
 15875 ;; Hardware stack levels required when called:   15
 15876 ;; This function calls:
 15877 ;;		_Configure_GPIOs
 15878 ;;		_LCD_Fill
 15879 ;;		_LCD_Write
 15880 ;;		_Set_Rotation
 15881 ;;		_delay_ms
 15882 ;; This function is called by:
 15883 ;;		_initialise
 15884 ;; This function uses a non-reentrant model
 15885 ;;
 15886                           
 15887                           	psect	text87
 15888  011E1A                     __ptext87:
 15889                           	opt stack 0
 15890  011E1A                     _LCD_Init:
 15891                           	opt stack 14
 15892                           
 15893                           ;LCD.c: 174: UINT16 i;
 15894                           ;LCD.c: 175: Configure_GPIOs();
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;incstack = 0
 15898  011E1A  EC86  F09D         	call	_Configure_GPIOs	;wreg free
 15899                           
 15900                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 15901  011E1E  0E00               	movlw	0
 15902  011E20  0100               	movlb	0	; () banked
 15903  011E22  6FF5               	movwf	(LCD_Init@i+1)& (0+255),b
 15904  011E24  0E00               	movlw	0
 15905  011E26  6FF4               	movwf	LCD_Init@i& (0+255),b
 15906                           
 15907                           ; BSR set to: 0
 15908  011E28  0100               	movlb	0	; () banked
 15909  011E2A  51F5               	movf	(LCD_Init@i+1)& (0+255),w,b
 15910  011E2C  E106               	bnz	u8190
 15911  011E2E  0E59               	movlw	89
 15912  011E30  0100               	movlb	0	; () banked
 15913  011E32  5DF4               	subwf	LCD_Init@i& (0+255),w,b
 15914  011E34  B0D8               	btfsc	status,0,c
 15915  011E36  D08B               	goto	u8230
 15916  011E38  D001               	goto	l85
 15917  011E3A                     u8190:
 15918                           
 15919                           ; BSR set to: 0
 15920  011E3A  D089               	goto	u8230
 15921  011E3C                     l85:
 15922                           
 15923                           ; BSR set to: 0
 15924                           ;LCD.c: 178: {
 15925                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 15926                           
 15927                           ; BSR set to: 0
 15928  011E3C  90D8               	bcf	status,0,c
 15929  011E3E  0100               	movlb	0	; () banked
 15930  011E40  35F4               	rlcf	LCD_Init@i& (0+255),w,b
 15931  011E42  6EF6               	movwf	tblptrl,c
 15932  011E44  0100               	movlb	0	; () banked
 15933  011E46  35F5               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15934  011E48  6EF7               	movwf	tblptrh,c
 15935  011E4A  0E71               	movlw	low _InitList
 15936  011E4C  26F6               	addwf	tblptrl,f,c
 15937  011E4E  0EFC               	movlw	high _InitList
 15938  011E50  22F7               	addwfc	tblptrh,f,c
 15939  011E52                     	if	1	;There are 3 active tblptr bytes
 15940  011E52  6AF8               	clrf	tblptru,c
 15941  011E54  0E00               	movlw	low (__mediumconst shr (0+16))
 15942  011E56  22F8               	addwfc	tblptru,f,c
 15943  011E58                     	endif
 15944  011E58  0009               	tblrd		*+
 15945  011E5A  0E80               	movlw	128
 15946  011E5C  18F5               	xorwf	tablat,w,c
 15947  011E5E  0009               	tblrd		*+
 15948  011E60  10F5               	iorwf	tablat,w,c
 15949  011E62  A4D8               	btfss	status,2,c
 15950  011E64  D022               	goto	l87
 15951                           
 15952                           ; BSR set to: 0
 15953  011E66  0100               	movlb	0	; () banked
 15954  011E68  51F5               	movf	(LCD_Init@i+1)& (0+255),w,b
 15955  011E6A  E11F               	bnz	l11834
 15956  011E6C  0E58               	movlw	88
 15957  011E6E  0100               	movlb	0	; () banked
 15958  011E70  5DF4               	subwf	LCD_Init@i& (0+255),w,b
 15959  011E72  B0D8               	btfsc	status,0,c
 15960  011E74  D01A               	goto	l87
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;LCD.c: 180: delay_ms(InitList[++i]);
 15964  011E76  0100               	movlb	0	; () banked
 15965  011E78  4BF4               	infsnz	LCD_Init@i& (0+255),f,b
 15966  011E7A  2BF5               	incf	(LCD_Init@i+1)& (0+255),f,b
 15967  011E7C  90D8               	bcf	status,0,c
 15968  011E7E  0100               	movlb	0	; () banked
 15969  011E80  35F4               	rlcf	LCD_Init@i& (0+255),w,b
 15970  011E82  6EF6               	movwf	tblptrl,c
 15971  011E84  0100               	movlb	0	; () banked
 15972  011E86  35F5               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15973  011E88  6EF7               	movwf	tblptrh,c
 15974  011E8A  0E71               	movlw	low _InitList
 15975  011E8C  26F6               	addwf	tblptrl,f,c
 15976  011E8E  0EFC               	movlw	high _InitList
 15977  011E90  22F7               	addwfc	tblptrh,f,c
 15978  011E92                     	if	1	;There are 3 active tblptr bytes
 15979  011E92  6AF8               	clrf	tblptru,c
 15980  011E94  0E00               	movlw	low (__mediumconst shr (0+16))
 15981  011E96  22F8               	addwfc	tblptru,f,c
 15982  011E98                     	endif
 15983  011E98  0009               	tblrd		*+
 15984  011E9A  CFF5 F0BD          	movff	tablat,delay_ms@ms
 15985  011E9E  000A               	tblrd		*-
 15986  011EA0  CFF5 F0BE          	movff	tablat,delay_ms@ms+1
 15987  011EA4  EC2A  F09E         	call	_delay_ms	;wreg free
 15988  011EA8  D04B               	goto	l90
 15989  011EAA                     l87:
 15990  011EAA                     l11834:
 15991                           
 15992                           ;LCD.c: 181: else
 15993                           ;LCD.c: 182: {
 15994                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 15995  011EAA  90D8               	bcf	status,0,c
 15996  011EAC  0100               	movlb	0	; () banked
 15997  011EAE  35F4               	rlcf	LCD_Init@i& (0+255),w,b
 15998  011EB0  6EF6               	movwf	tblptrl,c
 15999  011EB2  0100               	movlb	0	; () banked
 16000  011EB4  35F5               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16001  011EB6  6EF7               	movwf	tblptrh,c
 16002  011EB8  0E71               	movlw	low _InitList
 16003  011EBA  26F6               	addwf	tblptrl,f,c
 16004  011EBC  0EFC               	movlw	high _InitList
 16005  011EBE  22F7               	addwfc	tblptrh,f,c
 16006  011EC0                     	if	1	;There are 3 active tblptr bytes
 16007  011EC0  6AF8               	clrf	tblptru,c
 16008  011EC2  0E00               	movlw	low (__mediumconst shr (0+16))
 16009  011EC4  22F8               	addwfc	tblptru,f,c
 16010  011EC6                     	endif
 16011  011EC6  0009               	tblrd		*+
 16012  011EC8  0E00               	movlw	0
 16013  011ECA  5EF5               	subwf	tablat,f,c
 16014  011ECC  0009               	tblrd		*+
 16015  011ECE  0E01               	movlw	1
 16016  011ED0  5AF5               	subwfb	tablat,f,c
 16017  011ED2  A0D8               	btfss	status,0,c
 16018  011ED4  D020               	goto	l89
 16019                           
 16020                           ; BSR set to: 0
 16021  011ED6  0E00               	movlw	0
 16022  011ED8  0100               	movlb	0	; () banked
 16023  011EDA  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16024  011EDC  90D8               	bcf	status,0,c
 16025  011EDE  0100               	movlb	0	; () banked
 16026  011EE0  35F4               	rlcf	LCD_Init@i& (0+255),w,b
 16027  011EE2  6EF6               	movwf	tblptrl,c
 16028  011EE4  0100               	movlb	0	; () banked
 16029  011EE6  35F5               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16030  011EE8  6EF7               	movwf	tblptrh,c
 16031  011EEA  0E71               	movlw	low _InitList
 16032  011EEC  26F6               	addwf	tblptrl,f,c
 16033  011EEE  0EFC               	movlw	high _InitList
 16034  011EF0  22F7               	addwfc	tblptrh,f,c
 16035  011EF2                     	if	1	;There are 3 active tblptr bytes
 16036  011EF2  6AF8               	clrf	tblptru,c
 16037  011EF4  0E00               	movlw	low (__mediumconst shr (0+16))
 16038  011EF6  22F8               	addwfc	tblptru,f,c
 16039  011EF8                     	endif
 16040  011EF8  0009               	tblrd		*+
 16041  011EFA  CFF5 F0F2          	movff	tablat,??_LCD_Init
 16042  011EFE  0009               	tblrd		*+
 16043  011F00  CFF5 F0F3          	movff	tablat,??_LCD_Init+1
 16044  011F04  C0F3  F0F2         	movff	??_LCD_Init+1,??_LCD_Init
 16045  011F08  0100               	movlb	0	; () banked
 16046  011F0A  6BF3               	clrf	(??_LCD_Init+1)& (0+255),b
 16047  011F0C  0100               	movlb	0	; () banked
 16048  011F0E  51F2               	movf	??_LCD_Init& (0+255),w,b
 16049  011F10  EC42  F0A4         	call	_LCD_Write
 16050  011F14  D015               	goto	l90
 16051  011F16                     l89:
 16052                           
 16053                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 16054  011F16  0E01               	movlw	1
 16055  011F18  0100               	movlb	0	; () banked
 16056  011F1A  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16057  011F1C  90D8               	bcf	status,0,c
 16058  011F1E  0100               	movlb	0	; () banked
 16059  011F20  35F4               	rlcf	LCD_Init@i& (0+255),w,b
 16060  011F22  6EF6               	movwf	tblptrl,c
 16061  011F24  0100               	movlb	0	; () banked
 16062  011F26  35F5               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16063  011F28  6EF7               	movwf	tblptrh,c
 16064  011F2A  0E71               	movlw	low _InitList
 16065  011F2C  26F6               	addwf	tblptrl,f,c
 16066  011F2E  0EFC               	movlw	high _InitList
 16067  011F30  22F7               	addwfc	tblptrh,f,c
 16068  011F32                     	if	1	;There are 3 active tblptr bytes
 16069  011F32  6AF8               	clrf	tblptru,c
 16070  011F34  0E00               	movlw	low (__mediumconst shr (0+16))
 16071  011F36  22F8               	addwfc	tblptru,f,c
 16072  011F38                     	endif
 16073  011F38  0008               	tblrd		*
 16074  011F3A  50F5               	movf	tablat,w,c
 16075  011F3C  EC42  F0A4         	call	_LCD_Write
 16076  011F40                     l90:
 16077  011F40  0100               	movlb	0	; () banked
 16078  011F42  4BF4               	infsnz	LCD_Init@i& (0+255),f,b
 16079  011F44  2BF5               	incf	(LCD_Init@i+1)& (0+255),f,b
 16080                           
 16081                           ; BSR set to: 0
 16082  011F46  0100               	movlb	0	; () banked
 16083  011F48  51F5               	movf	(LCD_Init@i+1)& (0+255),w,b
 16084  011F4A  E101               	bnz	l11844
 16085  011F4C  D770               	goto	L6
 16086  011F4E                     u8230:
 16087  011F4E                     l11844:
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;LCD.c: 185: }
 16091                           ;LCD.c: 186: }
 16092                           ;LCD.c: 187: delay_ms(100);
 16093  011F4E  0E00               	movlw	0
 16094  011F50  0100               	movlb	0	; () banked
 16095  011F52  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
 16096  011F54  0E64               	movlw	100
 16097  011F56  6FBD               	movwf	delay_ms@ms& (0+255),b
 16098  011F58  EC2A  F09E         	call	_delay_ms	;wreg free
 16099                           
 16100                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 16101  011F5C  0E00               	movlw	0
 16102  011F5E  0100               	movlb	0	; () banked
 16103  011F60  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16104  011F62  0E29               	movlw	41
 16105  011F64  EC42  F0A4         	call	_LCD_Write
 16106                           
 16107                           ;LCD.c: 189: Set_Rotation(1);
 16108  011F68  0E01               	movlw	1
 16109  011F6A  EC02  F09A         	call	_Set_Rotation
 16110                           
 16111                           ;LCD.c: 191: delay_ms(100);
 16112  011F6E  0E00               	movlw	0
 16113  011F70  0100               	movlb	0	; () banked
 16114  011F72  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
 16115  011F74  0E64               	movlw	100
 16116  011F76  6FBD               	movwf	delay_ms@ms& (0+255),b
 16117  011F78  EC2A  F09E         	call	_delay_ms	;wreg free
 16118                           
 16119                           ;LCD.c: 192: LCD_Fill(0x0000);
 16120  011F7C  0E00               	movlw	0
 16121  011F7E  0100               	movlb	0	; () banked
 16122  011F80  6FC7               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 16123  011F82  0E00               	movlw	0
 16124  011F84  6FC6               	movwf	LCD_Fill@pColour& (0+255),b
 16125  011F86  ECE2  F09F         	call	_LCD_Fill	;wreg free
 16126  011F8A  0012               	return		;funcret
 16127  011F8C                     __end_of_LCD_Init:
 16128                           	opt stack 0
 16129                           tosu	equ	0xFFF
 16130                           tosh	equ	0xFFE
 16131                           tosl	equ	0xFFD
 16132                           pclath	equ	0xFFA
 16133                           tblptru	equ	0xFF8
 16134                           tblptrh	equ	0xFF7
 16135                           tblptrl	equ	0xFF6
 16136                           tablat	equ	0xFF5
 16137                           prodh	equ	0xFF4
 16138                           prodl	equ	0xFF3
 16139                           intcon	equ	0xFF2
 16140                           postinc0	equ	0xFEE
 16141                           wreg	equ	0xFE8
 16142                           indf1	equ	0xFE7
 16143                           postdec1	equ	0xFE5
 16144                           fsr1h	equ	0xFE2
 16145                           fsr1l	equ	0xFE1
 16146                           indf2	equ	0xFDF
 16147                           postinc2	equ	0xFDE
 16148                           postdec2	equ	0xFDD
 16149                           plusw2	equ	0xFDB
 16150                           fsr2h	equ	0xFDA
 16151                           fsr2l	equ	0xFD9
 16152                           status	equ	0xFD8
 16153                           
 16154 ;; *************** function _Set_Rotation *****************
 16155 ;; Defined at:
 16156 ;;		line 248 in file "Library/LCD.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;  m               1    wreg     unsigned char 
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;  m               1    5[BANK0 ] unsigned char 
 16161 ;;  rotation        1    6[BANK0 ] unsigned char 
 16162 ;; Return value:  Size  Location     Type
 16163 ;;                  1    wreg      void 
 16164 ;; Registers used:
 16165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16166 ;; Tracked objects:
 16167 ;;		On entry : 0/0
 16168 ;;		On exit  : 0/0
 16169 ;;		Unchanged: 0/0
 16170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16175 ;;Total ram usage:        2 bytes
 16176 ;; Hardware stack levels used:    1
 16177 ;; Hardware stack levels required when called:    9
 16178 ;; This function calls:
 16179 ;;		_LCD_Write
 16180 ;; This function is called by:
 16181 ;;		_LCD_Init
 16182 ;; This function uses a non-reentrant model
 16183 ;;
 16184                           
 16185                           	psect	text88
 16186  013404                     __ptext88:
 16187                           	opt stack 0
 16188  013404                     _Set_Rotation:
 16189                           	opt stack 19
 16190                           
 16191                           ;incstack = 0
 16192                           ;Set_Rotation@m stored from wreg
 16193  013404  0100               	movlb	0	; () banked
 16194  013406  6FC2               	movwf	Set_Rotation@m& (0+255),b
 16195                           
 16196                           ;LCD.c: 250: UINT8 rotation = 0x00;
 16197  013408  0E00               	movlw	0
 16198  01340A  0100               	movlb	0	; () banked
 16199  01340C  6FC3               	movwf	Set_Rotation@rotation& (0+255),b
 16200                           
 16201                           ; BSR set to: 0
 16202                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 16203  01340E  0E00               	movlw	0
 16204  013410  0100               	movlb	0	; () banked
 16205  013412  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16206  013414  0E36               	movlw	54
 16207  013416  EC42  F0A4         	call	_LCD_Write
 16208                           
 16209                           ;LCD.c: 253: rotation = (m % 4);
 16210  01341A  0100               	movlb	0	; () banked
 16211  01341C  51C2               	movf	Set_Rotation@m& (0+255),w,b
 16212  01341E  0B03               	andlw	3
 16213  013420  0100               	movlb	0	; () banked
 16214  013422  6FC3               	movwf	Set_Rotation@rotation& (0+255),b
 16215                           
 16216                           ;LCD.c: 255: switch(rotation)
 16217  013424  D02C               	goto	l117
 16218  013426                     
 16219                           ; BSR set to: 0
 16220                           ;LCD.c: 258: {
 16221                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 16222                           
 16223                           ; BSR set to: 0
 16224  013426  0E01               	movlw	1
 16225  013428  0100               	movlb	0	; () banked
 16226  01342A  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16227  01342C  0EC8               	movlw	200
 16228  01342E  EC42  F0A4         	call	_LCD_Write
 16229                           
 16230                           ;LCD.c: 260: w = 128;
 16231  013432  0E80               	movlw	128
 16232  013434  6E50               	movwf	_w,c
 16233                           
 16234                           ;LCD.c: 261: l = 128;
 16235  013436  0E80               	movlw	128
 16236  013438  6E4F               	movwf	_l,c
 16237                           
 16238                           ;LCD.c: 262: break;
 16239  01343A  0012               	return	
 16240  01343C                     
 16241                           ;LCD.c: 265: {
 16242                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 16243  01343C  0E01               	movlw	1
 16244  01343E  0100               	movlb	0	; () banked
 16245  013440  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16246  013442  0EA8               	movlw	168
 16247  013444  EC42  F0A4         	call	_LCD_Write
 16248                           
 16249                           ;LCD.c: 267: w = 128;
 16250  013448  0E80               	movlw	128
 16251  01344A  6E50               	movwf	_w,c
 16252                           
 16253                           ;LCD.c: 268: l = 128;
 16254  01344C  0E80               	movlw	128
 16255  01344E  6E4F               	movwf	_l,c
 16256                           
 16257                           ;LCD.c: 269: break;
 16258  013450  0012               	return	
 16259  013452                     
 16260                           ;LCD.c: 272: {
 16261                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 16262  013452  0E01               	movlw	1
 16263  013454  0100               	movlb	0	; () banked
 16264  013456  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16265  013458  0E08               	movlw	8
 16266  01345A  EC42  F0A4         	call	_LCD_Write
 16267                           
 16268                           ;LCD.c: 274: w = 128;
 16269  01345E  0E80               	movlw	128
 16270  013460  6E50               	movwf	_w,c
 16271                           
 16272                           ;LCD.c: 275: l = 128;
 16273  013462  0E80               	movlw	128
 16274  013464  6E4F               	movwf	_l,c
 16275                           
 16276                           ;LCD.c: 276: break;
 16277  013466  0012               	return	
 16278  013468                     
 16279                           ;LCD.c: 279: {
 16280                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 16281  013468  0E01               	movlw	1
 16282  01346A  0100               	movlb	0	; () banked
 16283  01346C  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16284  01346E  0E68               	movlw	104
 16285  013470  EC42  F0A4         	call	_LCD_Write
 16286                           
 16287                           ;LCD.c: 281: w = 128;
 16288  013474  0E80               	movlw	128
 16289  013476  6E50               	movwf	_w,c
 16290                           
 16291                           ;LCD.c: 282: l = 128;
 16292  013478  0E80               	movlw	128
 16293  01347A  6E4F               	movwf	_l,c
 16294                           
 16295                           ;LCD.c: 284: }
 16296                           ;LCD.c: 285: }
 16297                           
 16298                           ;LCD.c: 283: break;
 16299  01347C  0012               	return	
 16300  01347E                     l117:
 16301  01347E  0100               	movlb	0	; () banked
 16302  013480  51C3               	movf	Set_Rotation@rotation& (0+255),w,b
 16303                           
 16304                           ; Switch size 1, requested type "space"
 16305                           ; Number of cases is 4, Range of values is 0 to 3
 16306                           ; switch strategies available:
 16307                           ; Name         Instructions Cycles
 16308                           ; simple_byte           13     7 (average)
 16309                           ;	Chosen strategy is simple_byte
 16310  013482  0A00               	xorlw	0	; case 0
 16311  013484  B4D8               	btfsc	status,2,c
 16312  013486  D7CF               	goto	l118
 16313  013488  0A01               	xorlw	1	; case 1
 16314  01348A  B4D8               	btfsc	status,2,c
 16315  01348C  D7D7               	goto	l120
 16316  01348E  0A03               	xorlw	3	; case 2
 16317  013490  B4D8               	btfsc	status,2,c
 16318  013492  D7DF               	goto	l121
 16319  013494  0A01               	xorlw	1	; case 3
 16320  013496  A4D8               	btfss	status,2,c
 16321  013498  0012               	return	
 16322  01349A  D7E6               	goto	l122
 16323  01349C                     __end_of_Set_Rotation:
 16324                           	opt stack 0
 16325                           tosu	equ	0xFFF
 16326                           tosh	equ	0xFFE
 16327                           tosl	equ	0xFFD
 16328                           pclath	equ	0xFFA
 16329                           tblptru	equ	0xFF8
 16330                           tblptrh	equ	0xFF7
 16331                           tblptrl	equ	0xFF6
 16332                           tablat	equ	0xFF5
 16333                           prodh	equ	0xFF4
 16334                           prodl	equ	0xFF3
 16335                           intcon	equ	0xFF2
 16336                           postinc0	equ	0xFEE
 16337                           wreg	equ	0xFE8
 16338                           indf1	equ	0xFE7
 16339                           postdec1	equ	0xFE5
 16340                           fsr1h	equ	0xFE2
 16341                           fsr1l	equ	0xFE1
 16342                           indf2	equ	0xFDF
 16343                           postinc2	equ	0xFDE
 16344                           postdec2	equ	0xFDD
 16345                           plusw2	equ	0xFDB
 16346                           fsr2h	equ	0xFDA
 16347                           fsr2l	equ	0xFD9
 16348                           status	equ	0xFD8
 16349                           
 16350 ;; *************** function _LCD_Fill *****************
 16351 ;; Defined at:
 16352 ;;		line 287 in file "Library/LCD.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  pColour         2    9[BANK0 ] unsigned short 
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;  j               1   12[BANK0 ] unsigned char 
 16357 ;;  i               1   11[BANK0 ] unsigned char 
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  1    wreg      void 
 16360 ;; Registers used:
 16361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16370 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;Total ram usage:        4 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:   10
 16374 ;; This function calls:
 16375 ;;		_LCD_Word_Write
 16376 ;;		_Set_Addr_Window
 16377 ;; This function is called by:
 16378 ;;		_LCD_Init
 16379 ;; This function uses a non-reentrant model
 16380 ;;
 16381                           
 16382                           	psect	text89
 16383  013FC4                     __ptext89:
 16384                           	opt stack 0
 16385  013FC4                     _LCD_Fill:
 16386                           	opt stack 18
 16387                           
 16388                           ;LCD.c: 296: UINT8 i = 0x00;
 16389                           
 16390                           ;incstack = 0
 16391  013FC4  0E00               	movlw	0
 16392  013FC6  0100               	movlb	0	; () banked
 16393  013FC8  6FC8               	movwf	LCD_Fill@i& (0+255),b
 16394                           
 16395                           ;LCD.c: 297: UINT8 j = 0x00;
 16396  013FCA  0E00               	movlw	0
 16397  013FCC  0100               	movlb	0	; () banked
 16398  013FCE  6FC9               	movwf	LCD_Fill@j& (0+255),b
 16399                           
 16400                           ; BSR set to: 0
 16401                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 16402  013FD0  0E00               	movlw	0
 16403  013FD2  0100               	movlb	0	; () banked
 16404  013FD4  6FC2               	movwf	Set_Addr_Window@ys& (0+255),b
 16405  013FD6  0450               	decf	_w,w,c
 16406  013FD8  0100               	movlb	0	; () banked
 16407  013FDA  6FC3               	movwf	Set_Addr_Window@xe& (0+255),b
 16408  013FDC  044F               	decf	_l,w,c
 16409  013FDE  0100               	movlb	0	; () banked
 16410  013FE0  6FC4               	movwf	Set_Addr_Window@ye& (0+255),b
 16411  013FE2  0E00               	movlw	0
 16412  013FE4  EC21  F097         	call	_Set_Addr_Window
 16413                           
 16414                           ;LCD.c: 299: for (j = l; j > 0; j--)
 16415  013FE8  C04F  F0C9         	movff	_l,LCD_Fill@j
 16416  013FEC                     l11706:
 16417  013FEC  0100               	movlb	0	; () banked
 16418  013FEE  51C9               	movf	LCD_Fill@j& (0+255),w,b
 16419  013FF0  0100               	movlb	0	; () banked
 16420  013FF2  B4D8               	btfsc	status,2,c
 16421  013FF4  0012               	return	
 16422                           
 16423                           ; BSR set to: 0
 16424                           ;LCD.c: 300: for (i = w; i > 0; i--)
 16425                           
 16426                           ; BSR set to: 0
 16427  013FF6  C050  F0C8         	movff	_w,LCD_Fill@i
 16428  013FFA                     l11710:
 16429                           
 16430                           ; BSR set to: 0
 16431  013FFA  0100               	movlb	0	; () banked
 16432  013FFC  51C8               	movf	LCD_Fill@i& (0+255),w,b
 16433  013FFE  0100               	movlb	0	; () banked
 16434  014000  B4D8               	btfsc	status,2,c
 16435  014002  D009               	goto	u8100
 16436                           
 16437                           ; BSR set to: 0
 16438                           ;LCD.c: 301: LCD_Word_Write(pColour);
 16439                           
 16440                           ; BSR set to: 0
 16441                           
 16442                           ; BSR set to: 0
 16443  014004  C0C6  F0C2         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 16444  014008  C0C7  F0C3         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 16445  01400C  EC94  F0A4         	call	_LCD_Word_Write	;wreg free
 16446  014010  0100               	movlb	0	; () banked
 16447  014012  07C8               	decf	LCD_Fill@i& (0+255),f,b
 16448  014014  D7F2               	goto	l11710
 16449  014016                     u8100:
 16450                           
 16451                           ; BSR set to: 0
 16452                           
 16453                           ; BSR set to: 0
 16454  014016  0100               	movlb	0	; () banked
 16455  014018  07C9               	decf	LCD_Fill@j& (0+255),f,b
 16456  01401A  D7E8               	goto	l11706
 16457  01401C                     __end_of_LCD_Fill:
 16458                           	opt stack 0
 16459                           tosu	equ	0xFFF
 16460                           tosh	equ	0xFFE
 16461                           tosl	equ	0xFFD
 16462                           pclath	equ	0xFFA
 16463                           tblptru	equ	0xFF8
 16464                           tblptrh	equ	0xFF7
 16465                           tblptrl	equ	0xFF6
 16466                           tablat	equ	0xFF5
 16467                           prodh	equ	0xFF4
 16468                           prodl	equ	0xFF3
 16469                           intcon	equ	0xFF2
 16470                           postinc0	equ	0xFEE
 16471                           wreg	equ	0xFE8
 16472                           indf1	equ	0xFE7
 16473                           postdec1	equ	0xFE5
 16474                           fsr1h	equ	0xFE2
 16475                           fsr1l	equ	0xFE1
 16476                           indf2	equ	0xFDF
 16477                           postinc2	equ	0xFDE
 16478                           postdec2	equ	0xFDD
 16479                           plusw2	equ	0xFDB
 16480                           fsr2h	equ	0xFDA
 16481                           fsr2l	equ	0xFD9
 16482                           status	equ	0xFD8
 16483                           
 16484 ;; *************** function _Set_Addr_Window *****************
 16485 ;; Defined at:
 16486 ;;		line 214 in file "Library/LCD.c"
 16487 ;; Parameters:    Size  Location     Type
 16488 ;;  xs              1    wreg     unsigned char 
 16489 ;;  ys              1    5[BANK0 ] unsigned char 
 16490 ;;  xe              1    6[BANK0 ] unsigned char 
 16491 ;;  ye              1    7[BANK0 ] unsigned char 
 16492 ;; Auto vars:     Size  Location     Type
 16493 ;;  xs              1    8[BANK0 ] unsigned char 
 16494 ;; Return value:  Size  Location     Type
 16495 ;;                  1    wreg      void 
 16496 ;; Registers used:
 16497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16498 ;; Tracked objects:
 16499 ;;		On entry : 0/0
 16500 ;;		On exit  : 0/0
 16501 ;;		Unchanged: 0/0
 16502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16503 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16506 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16507 ;;Total ram usage:        4 bytes
 16508 ;; Hardware stack levels used:    1
 16509 ;; Hardware stack levels required when called:    9
 16510 ;; This function calls:
 16511 ;;		_LCD_Write
 16512 ;; This function is called by:
 16513 ;;		_LCD_Fill
 16514 ;;		_LCD_FillRectangle
 16515 ;;		_LCD_DrawField
 16516 ;;		_RAM_Address_Set
 16517 ;;		_LCD_DrawPixel
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           	psect	text90
 16522  012E42                     __ptext90:
 16523                           	opt stack 0
 16524  012E42                     _Set_Addr_Window:
 16525                           	opt stack 16
 16526                           
 16527                           ; BSR set to: 0
 16528                           ;incstack = 0
 16529                           ;Set_Addr_Window@xs stored from wreg
 16530  012E42  0100               	movlb	0	; () banked
 16531  012E44  6FC5               	movwf	Set_Addr_Window@xs& (0+255),b
 16532                           
 16533                           ;LCD.c: 216: ys+=2;
 16534  012E46  0E02               	movlw	2
 16535  012E48  0100               	movlb	0	; () banked
 16536  012E4A  27C2               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16537                           
 16538                           ;LCD.c: 217: ye+=2;
 16539  012E4C  0E02               	movlw	2
 16540  012E4E  0100               	movlb	0	; () banked
 16541  012E50  27C4               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16542                           
 16543                           ;LCD.c: 218: xs+=3;
 16544  012E52  0E03               	movlw	3
 16545  012E54  0100               	movlb	0	; () banked
 16546  012E56  27C5               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16547                           
 16548                           ;LCD.c: 219: xe+=3;
 16549  012E58  0E03               	movlw	3
 16550  012E5A  0100               	movlb	0	; () banked
 16551  012E5C  27C3               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16555  012E5E  0E00               	movlw	0
 16556  012E60  0100               	movlb	0	; () banked
 16557  012E62  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16558  012E64  0E2A               	movlw	42
 16559  012E66  EC42  F0A4         	call	_LCD_Write
 16560                           
 16561                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16562  012E6A  0E01               	movlw	1
 16563  012E6C  0100               	movlb	0	; () banked
 16564  012E6E  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16565  012E70  0E00               	movlw	0
 16566  012E72  EC42  F0A4         	call	_LCD_Write
 16567                           
 16568                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16569  012E76  0E01               	movlw	1
 16570  012E78  0100               	movlb	0	; () banked
 16571  012E7A  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16572  012E7C  0100               	movlb	0	; () banked
 16573  012E7E  51C5               	movf	Set_Addr_Window@xs& (0+255),w,b
 16574  012E80  EC42  F0A4         	call	_LCD_Write
 16575                           
 16576                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16577  012E84  0E01               	movlw	1
 16578  012E86  0100               	movlb	0	; () banked
 16579  012E88  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16580  012E8A  0E00               	movlw	0
 16581  012E8C  EC42  F0A4         	call	_LCD_Write
 16582                           
 16583                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16584  012E90  0E01               	movlw	1
 16585  012E92  0100               	movlb	0	; () banked
 16586  012E94  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16587  012E96  0100               	movlb	0	; () banked
 16588  012E98  51C3               	movf	Set_Addr_Window@xe& (0+255),w,b
 16589  012E9A  EC42  F0A4         	call	_LCD_Write
 16590                           
 16591                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16592  012E9E  0E00               	movlw	0
 16593  012EA0  0100               	movlb	0	; () banked
 16594  012EA2  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16595  012EA4  0E2B               	movlw	43
 16596  012EA6  EC42  F0A4         	call	_LCD_Write
 16597                           
 16598                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16599  012EAA  0E01               	movlw	1
 16600  012EAC  0100               	movlb	0	; () banked
 16601  012EAE  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16602  012EB0  0E00               	movlw	0
 16603  012EB2  EC42  F0A4         	call	_LCD_Write
 16604                           
 16605                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16606  012EB6  0E01               	movlw	1
 16607  012EB8  0100               	movlb	0	; () banked
 16608  012EBA  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16609  012EBC  0100               	movlb	0	; () banked
 16610  012EBE  51C2               	movf	Set_Addr_Window@ys& (0+255),w,b
 16611  012EC0  EC42  F0A4         	call	_LCD_Write
 16612                           
 16613                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16614  012EC4  0E01               	movlw	1
 16615  012EC6  0100               	movlb	0	; () banked
 16616  012EC8  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16617  012ECA  0E00               	movlw	0
 16618  012ECC  EC42  F0A4         	call	_LCD_Write
 16619                           
 16620                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16621  012ED0  0E01               	movlw	1
 16622  012ED2  0100               	movlb	0	; () banked
 16623  012ED4  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16624  012ED6  0100               	movlb	0	; () banked
 16625  012ED8  51C4               	movf	Set_Addr_Window@ye& (0+255),w,b
 16626  012EDA  EC42  F0A4         	call	_LCD_Write
 16627                           
 16628                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16629  012EDE  0E00               	movlw	0
 16630  012EE0  0100               	movlb	0	; () banked
 16631  012EE2  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16632  012EE4  0E2C               	movlw	44
 16633  012EE6  EC42  F0A4         	call	_LCD_Write
 16634  012EEA  0012               	return		;funcret
 16635  012EEC                     __end_of_Set_Addr_Window:
 16636                           	opt stack 0
 16637                           tosu	equ	0xFFF
 16638                           tosh	equ	0xFFE
 16639                           tosl	equ	0xFFD
 16640                           pclath	equ	0xFFA
 16641                           tblptru	equ	0xFF8
 16642                           tblptrh	equ	0xFF7
 16643                           tblptrl	equ	0xFF6
 16644                           tablat	equ	0xFF5
 16645                           prodh	equ	0xFF4
 16646                           prodl	equ	0xFF3
 16647                           intcon	equ	0xFF2
 16648                           postinc0	equ	0xFEE
 16649                           wreg	equ	0xFE8
 16650                           indf1	equ	0xFE7
 16651                           postdec1	equ	0xFE5
 16652                           fsr1h	equ	0xFE2
 16653                           fsr1l	equ	0xFE1
 16654                           indf2	equ	0xFDF
 16655                           postinc2	equ	0xFDE
 16656                           postdec2	equ	0xFDD
 16657                           plusw2	equ	0xFDB
 16658                           fsr2h	equ	0xFDA
 16659                           fsr2l	equ	0xFD9
 16660                           status	equ	0xFD8
 16661                           
 16662 ;; *************** function _LCD_Word_Write *****************
 16663 ;; Defined at:
 16664 ;;		line 198 in file "Library/LCD.c"
 16665 ;; Parameters:    Size  Location     Type
 16666 ;;  value           2    5[BANK0 ] unsigned short 
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;		None
 16669 ;; Return value:  Size  Location     Type
 16670 ;;                  1    wreg      void 
 16671 ;; Registers used:
 16672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16678 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16682 ;;Total ram usage:        2 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; Hardware stack levels required when called:    9
 16685 ;; This function calls:
 16686 ;;		_LCD_Write
 16687 ;; This function is called by:
 16688 ;;		_LCD_Fill
 16689 ;;		_LCD_FillRectangle
 16690 ;;		_LCD_DrawField
 16691 ;;		_LCD_DrawPixel
 16692 ;; This function uses a non-reentrant model
 16693 ;;
 16694                           
 16695                           	psect	text91
 16696  014928                     __ptext91:
 16697                           	opt stack 0
 16698  014928                     _LCD_Word_Write:
 16699                           	opt stack 16
 16700                           
 16701                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16702                           
 16703                           ;incstack = 0
 16704  014928  0E01               	movlw	1
 16705  01492A  0100               	movlb	0	; () banked
 16706  01492C  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16707  01492E  0100               	movlb	0	; () banked
 16708  014930  51C3               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16709  014932  EC42  F0A4         	call	_LCD_Write
 16710                           
 16711                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 16712  014936  0E01               	movlw	1
 16713  014938  0100               	movlb	0	; () banked
 16714  01493A  6FC0               	movwf	LCD_Write@mode& (0+255),b
 16715  01493C  0100               	movlb	0	; () banked
 16716  01493E  51C2               	movf	LCD_Word_Write@value& (0+255),w,b
 16717  014940  EC42  F0A4         	call	_LCD_Write
 16718  014944  0012               	return		;funcret
 16719  014946                     __end_of_LCD_Word_Write:
 16720                           	opt stack 0
 16721                           tosu	equ	0xFFF
 16722                           tosh	equ	0xFFE
 16723                           tosl	equ	0xFFD
 16724                           pclath	equ	0xFFA
 16725                           tblptru	equ	0xFF8
 16726                           tblptrh	equ	0xFF7
 16727                           tblptrl	equ	0xFF6
 16728                           tablat	equ	0xFF5
 16729                           prodh	equ	0xFF4
 16730                           prodl	equ	0xFF3
 16731                           intcon	equ	0xFF2
 16732                           postinc0	equ	0xFEE
 16733                           wreg	equ	0xFE8
 16734                           indf1	equ	0xFE7
 16735                           postdec1	equ	0xFE5
 16736                           fsr1h	equ	0xFE2
 16737                           fsr1l	equ	0xFE1
 16738                           indf2	equ	0xFDF
 16739                           postinc2	equ	0xFDE
 16740                           postdec2	equ	0xFDD
 16741                           plusw2	equ	0xFDB
 16742                           fsr2h	equ	0xFDA
 16743                           fsr2l	equ	0xFD9
 16744                           status	equ	0xFD8
 16745                           
 16746 ;; *************** function _LCD_Write *****************
 16747 ;; Defined at:
 16748 ;;		line 67 in file "Library/LCD.c"
 16749 ;; Parameters:    Size  Location     Type
 16750 ;;  value           1    wreg     unsigned char 
 16751 ;;  mode            1    3[BANK0 ] enum E6761
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;  value           1    4[BANK0 ] unsigned char 
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  1    wreg      void 
 16756 ;; Registers used:
 16757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16763 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;Total ram usage:        2 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    8
 16770 ;; This function calls:
 16771 ;;		_Mode_Set
 16772 ;;		_SPI_Send
 16773 ;; This function is called by:
 16774 ;;		_LCD_Init
 16775 ;;		_LCD_Word_Write
 16776 ;;		_Set_Addr_Window
 16777 ;;		_Set_Rotation
 16778 ;;		_LCD_WriteCMD
 16779 ;;		_LCD_WriteData
 16780 ;;		_LCD_Data_Write
 16781 ;;		_LCD_Data_Write_4k
 16782 ;;		_Invert_Display
 16783 ;; This function uses a non-reentrant model
 16784 ;;
 16785                           
 16786                           	psect	text92
 16787  014884                     __ptext92:
 16788                           	opt stack 0
 16789  014884                     _LCD_Write:
 16790                           	opt stack 16
 16791                           
 16792                           ;incstack = 0
 16793                           ;LCD_Write@value stored from wreg
 16794  014884  0100               	movlb	0	; () banked
 16795  014886  6FC1               	movwf	LCD_Write@value& (0+255),b
 16796                           
 16797                           ;LCD.c: 89: Mode_Set(mode);
 16798  014888  0100               	movlb	0	; () banked
 16799  01488A  51C0               	movf	LCD_Write@mode& (0+255),w,b
 16800  01488C  EC89  F0A5         	call	_Mode_Set
 16801                           
 16802                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 16803  014890  0E6C               	movlw	low _SPI2
 16804  014892  0100               	movlb	0	; () banked
 16805  014894  6FBD               	movwf	SPI_Send@pInput& (0+255),b
 16806  014896  0E01               	movlw	high _SPI2
 16807  014898  0100               	movlb	0	; () banked
 16808  01489A  6FBE               	movwf	(SPI_Send@pInput+1)& (0+255),b
 16809  01489C  C0C1  F0BF         	movff	LCD_Write@value,SPI_Send@pData
 16810  0148A0  ECF4  F09D         	call	_SPI_Send	;wreg free
 16811  0148A4  0012               	return		;funcret
 16812  0148A6                     __end_of_LCD_Write:
 16813                           	opt stack 0
 16814                           tosu	equ	0xFFF
 16815                           tosh	equ	0xFFE
 16816                           tosl	equ	0xFFD
 16817                           pclath	equ	0xFFA
 16818                           tblptru	equ	0xFF8
 16819                           tblptrh	equ	0xFF7
 16820                           tblptrl	equ	0xFF6
 16821                           tablat	equ	0xFF5
 16822                           prodh	equ	0xFF4
 16823                           prodl	equ	0xFF3
 16824                           intcon	equ	0xFF2
 16825                           postinc0	equ	0xFEE
 16826                           wreg	equ	0xFE8
 16827                           indf1	equ	0xFE7
 16828                           postdec1	equ	0xFE5
 16829                           fsr1h	equ	0xFE2
 16830                           fsr1l	equ	0xFE1
 16831                           indf2	equ	0xFDF
 16832                           postinc2	equ	0xFDE
 16833                           postdec2	equ	0xFDD
 16834                           plusw2	equ	0xFDB
 16835                           fsr2h	equ	0xFDA
 16836                           fsr2l	equ	0xFD9
 16837                           status	equ	0xFD8
 16838                           
 16839 ;; *************** function _SPI_Send *****************
 16840 ;; Defined at:
 16841 ;;		line 226 in file "Library/SPI.c"
 16842 ;; Parameters:    Size  Location     Type
 16843 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16844 ;;		 -> SPI1(11), SPI2(11), 
 16845 ;;  pData           1    2[BANK0 ] unsigned char 
 16846 ;; Auto vars:     Size  Location     Type
 16847 ;;		None
 16848 ;; Return value:  Size  Location     Type
 16849 ;;                  1    wreg      unsigned char 
 16850 ;; Registers used:
 16851 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16852 ;; Tracked objects:
 16853 ;;		On entry : 0/0
 16854 ;;		On exit  : 0/0
 16855 ;;		Unchanged: 0/0
 16856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16857 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16860 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16861 ;;Total ram usage:        3 bytes
 16862 ;; Hardware stack levels used:    1
 16863 ;; Hardware stack levels required when called:    7
 16864 ;; This function calls:
 16865 ;;		Nothing
 16866 ;; This function is called by:
 16867 ;;		_LCD_Write
 16868 ;;		_OutSeg
 16869 ;; This function uses a non-reentrant model
 16870 ;;
 16871                           
 16872                           	psect	text93
 16873  013BE8                     __ptext93:
 16874                           	opt stack 0
 16875  013BE8                     _SPI_Send:
 16876                           	opt stack 16
 16877                           
 16878                           ;SPI.c: 253: switch (pInput->mChannel)
 16879                           
 16880                           ;incstack = 0
 16881  013BE8  D026               	goto	l678
 16882  013BEA                     
 16883                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 16884  013BEA  C095  FFD9         	movff	_PortC+4,fsr2l
 16885  013BEE  C096  FFDA         	movff	_PortC+5,fsr2h
 16886  013BF2  0100               	movlb	0	; () banked
 16887  013BF4  94DF               	bcf	indf2,2,c
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;SPI.c: 257: SSP1BUF = pData;
 16891  013BF6  C0BF  FFC9         	movff	SPI_Send@pData,4041	;volatile
 16892  013BFA                     
 16893                           ; BSR set to: 0
 16894  013BFA  A0C7               	btfss	4039,0,c	;volatile
 16895  013BFC  D7FE               	goto	l681
 16896                           
 16897                           ;SPI.c: 259: pData = SSP1BUF;
 16898  013BFE  CFC9 F0BF          	movff	4041,SPI_Send@pData	;volatile
 16899                           
 16900                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 16901  013C02  C095  FFD9         	movff	_PortC+4,fsr2l
 16902  013C06  C096  FFDA         	movff	_PortC+5,fsr2h
 16903  013C0A  0100               	movlb	0	; () banked
 16904  013C0C  84DF               	bsf	indf2,2,c
 16905                           
 16906                           ; BSR set to: 0
 16907                           ;SPI.c: 261: return pData;
 16908                           ;	Return value of _SPI_Send is never used
 16909  013C0E  0012               	return	
 16910  013C10                     
 16911                           ; BSR set to: 0
 16912                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 16913                           
 16914                           ; BSR set to: 0
 16915  013C10  C08B  FFD9         	movff	_PortD+4,fsr2l
 16916  013C14  C08C  FFDA         	movff	_PortD+5,fsr2h
 16917  013C18  0100               	movlb	0	; () banked
 16918  013C1A  9EDF               	bcf	indf2,7,c
 16919                           
 16920                           ; BSR set to: 0
 16921                           ;SPI.c: 264: SSP2BUF = pData;
 16922  013C1C  C0BF  FF6F         	movff	SPI_Send@pData,3951	;volatile
 16923  013C20                     
 16924                           ; BSR set to: 0
 16925  013C20  A06D               	btfss	3949,0,c	;volatile
 16926  013C22  D7FE               	goto	l686
 16927                           
 16928                           ;SPI.c: 266: pData = SSP2BUF;
 16929  013C24  CF6F F0BF          	movff	3951,SPI_Send@pData	;volatile
 16930                           
 16931                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 16932  013C28  C08B  FFD9         	movff	_PortD+4,fsr2l
 16933  013C2C  C08C  FFDA         	movff	_PortD+5,fsr2h
 16934  013C30  0100               	movlb	0	; () banked
 16935  013C32  8EDF               	bsf	indf2,7,c
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;SPI.c: 269: };
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;SPI.c: 268: return pData;
 16942                           ;	Return value of _SPI_Send is never used
 16943  013C34  0012               	return	
 16944  013C36                     l678:
 16945                           
 16946                           ; BSR set to: 0
 16947  013C36  0100               	movlb	0	; () banked
 16948  013C38  EE20 F002          	lfsr	2,2
 16949  013C3C  51BD               	movf	SPI_Send@pInput& (0+255),w,b
 16950  013C3E  26D9               	addwf	fsr2l,f,c
 16951  013C40  51BE               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 16952  013C42  22DA               	addwfc	fsr2h,f,c
 16953  013C44  50DF               	movf	indf2,w,c
 16954                           
 16955                           ; Switch size 1, requested type "space"
 16956                           ; Number of cases is 2, Range of values is 0 to 1
 16957                           ; switch strategies available:
 16958                           ; Name         Instructions Cycles
 16959                           ; simple_byte            7     4 (average)
 16960                           ;	Chosen strategy is simple_byte
 16961  013C46  0A00               	xorlw	0	; case 0
 16962  013C48  B4D8               	btfsc	status,2,c
 16963  013C4A  D7CF               	goto	l679
 16964  013C4C  0A01               	xorlw	1	; case 1
 16965  013C4E  A4D8               	btfss	status,2,c
 16966  013C50  0012               	return	
 16967  013C52  D7DE               	goto	l684
 16968  013C54                     __end_of_SPI_Send:
 16969                           	opt stack 0
 16970                           tosu	equ	0xFFF
 16971                           tosh	equ	0xFFE
 16972                           tosl	equ	0xFFD
 16973                           pclath	equ	0xFFA
 16974                           tblptru	equ	0xFF8
 16975                           tblptrh	equ	0xFF7
 16976                           tblptrl	equ	0xFF6
 16977                           tablat	equ	0xFF5
 16978                           prodh	equ	0xFF4
 16979                           prodl	equ	0xFF3
 16980                           intcon	equ	0xFF2
 16981                           postinc0	equ	0xFEE
 16982                           wreg	equ	0xFE8
 16983                           indf1	equ	0xFE7
 16984                           postdec1	equ	0xFE5
 16985                           fsr1h	equ	0xFE2
 16986                           fsr1l	equ	0xFE1
 16987                           indf2	equ	0xFDF
 16988                           postinc2	equ	0xFDE
 16989                           postdec2	equ	0xFDD
 16990                           plusw2	equ	0xFDB
 16991                           fsr2h	equ	0xFDA
 16992                           fsr2l	equ	0xFD9
 16993                           status	equ	0xFD8
 16994                           
 16995 ;; *************** function _Mode_Set *****************
 16996 ;; Defined at:
 16997 ;;		line 40 in file "Library/LCD.c"
 16998 ;; Parameters:    Size  Location     Type
 16999 ;;  pMode           1    wreg     enum E6761
 17000 ;; Auto vars:     Size  Location     Type
 17001 ;;  pMode           1    0[BANK0 ] enum E6761
 17002 ;; Return value:  Size  Location     Type
 17003 ;;                  1    wreg      void 
 17004 ;; Registers used:
 17005 ;;		wreg
 17006 ;; Tracked objects:
 17007 ;;		On entry : 0/0
 17008 ;;		On exit  : 0/0
 17009 ;;		Unchanged: 0/0
 17010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17015 ;;Total ram usage:        1 bytes
 17016 ;; Hardware stack levels used:    1
 17017 ;; Hardware stack levels required when called:    7
 17018 ;; This function calls:
 17019 ;;		Nothing
 17020 ;; This function is called by:
 17021 ;;		_LCD_Write
 17022 ;; This function uses a non-reentrant model
 17023 ;;
 17024                           
 17025                           	psect	text94
 17026  014B12                     __ptext94:
 17027                           	opt stack 0
 17028  014B12                     _Mode_Set:
 17029                           	opt stack 16
 17030                           
 17031                           ; BSR set to: 0
 17032                           ;incstack = 0
 17033                           ;Mode_Set@pMode stored from wreg
 17034  014B12  0100               	movlb	0	; () banked
 17035  014B14  6FBD               	movwf	Mode_Set@pMode& (0+255),b
 17036                           
 17037                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 17038  014B16  0100               	movlb	0	; () banked
 17039  014B18  B1BD               	btfsc	Mode_Set@pMode& (0+255),0,b
 17040  014B1A  D002               	bra	u6945
 17041  014B1C  9E85               	bcf	3973,7,c	;volatile
 17042  014B1E  D001               	bra	u6946
 17043  014B20                     u6945:
 17044  014B20  8E85               	bsf	3973,7,c	;volatile
 17045  014B22                     u6946:
 17046  014B22  0012               	return		;funcret
 17047  014B24                     __end_of_Mode_Set:
 17048                           	opt stack 0
 17049                           tosu	equ	0xFFF
 17050                           tosh	equ	0xFFE
 17051                           tosl	equ	0xFFD
 17052                           pclath	equ	0xFFA
 17053                           tblptru	equ	0xFF8
 17054                           tblptrh	equ	0xFF7
 17055                           tblptrl	equ	0xFF6
 17056                           tablat	equ	0xFF5
 17057                           prodh	equ	0xFF4
 17058                           prodl	equ	0xFF3
 17059                           intcon	equ	0xFF2
 17060                           postinc0	equ	0xFEE
 17061                           wreg	equ	0xFE8
 17062                           indf1	equ	0xFE7
 17063                           postdec1	equ	0xFE5
 17064                           fsr1h	equ	0xFE2
 17065                           fsr1l	equ	0xFE1
 17066                           indf2	equ	0xFDF
 17067                           postinc2	equ	0xFDE
 17068                           postdec2	equ	0xFDD
 17069                           plusw2	equ	0xFDB
 17070                           fsr2h	equ	0xFDA
 17071                           fsr2l	equ	0xFD9
 17072                           status	equ	0xFD8
 17073                           
 17074 ;; *************** function _Configure_GPIOs *****************
 17075 ;; Defined at:
 17076 ;;		line 46 in file "Library/LCD.c"
 17077 ;; Parameters:    Size  Location     Type
 17078 ;;		None
 17079 ;; Auto vars:     Size  Location     Type
 17080 ;;		None
 17081 ;; Return value:  Size  Location     Type
 17082 ;;                  1    wreg      void 
 17083 ;; Registers used:
 17084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17085 ;; Tracked objects:
 17086 ;;		On entry : 0/0
 17087 ;;		On exit  : 0/0
 17088 ;;		Unchanged: 0/0
 17089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17094 ;;Total ram usage:        0 bytes
 17095 ;; Hardware stack levels used:    1
 17096 ;; Hardware stack levels required when called:   14
 17097 ;; This function calls:
 17098 ;;		_LCD_Reset
 17099 ;;		_Port_SetPinType
 17100 ;;		_SPI_Init
 17101 ;;		_SPI_MaxSpeed
 17102 ;; This function is called by:
 17103 ;;		_LCD_Init
 17104 ;; This function uses a non-reentrant model
 17105 ;;
 17106                           
 17107                           	psect	text95
 17108  013B0C                     __ptext95:
 17109                           	opt stack 0
 17110  013B0C                     _Configure_GPIOs:
 17111                           	opt stack 14
 17112                           
 17113                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 17114                           
 17115                           ;incstack = 0
 17116  013B0C  0EA9               	movlw	low _PortF
 17117  013B0E  0100               	movlb	0	; () banked
 17118  013B10  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 17119  013B12  0E01               	movlw	high _PortF
 17120  013B14  0100               	movlb	0	; () banked
 17121  013B16  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17122  013B18  0E07               	movlw	7
 17123  013B1A  0100               	movlb	0	; () banked
 17124  013B1C  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 17125  013B1E  0E03               	movlw	3
 17126  013B20  0100               	movlb	0	; () banked
 17127  013B22  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 17128  013B24  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 17129                           
 17130                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 17131  013B28  0EA9               	movlw	low _PortF
 17132  013B2A  0100               	movlb	0	; () banked
 17133  013B2C  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 17134  013B2E  0E01               	movlw	high _PortF
 17135  013B30  0100               	movlb	0	; () banked
 17136  013B32  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17137  013B34  0E06               	movlw	6
 17138  013B36  0100               	movlb	0	; () banked
 17139  013B38  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 17140  013B3A  0E03               	movlw	3
 17141  013B3C  0100               	movlb	0	; () banked
 17142  013B3E  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 17143  013B40  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 17144                           
 17145                           ;LCD.c: 55: LCD_Reset();
 17146  013B44  EC87  F0A0         	call	_LCD_Reset	;wreg free
 17147                           
 17148                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 17149  013B48  0EC0               	movlw	192
 17150  013B4A  0100               	movlb	0	; () banked
 17151  013B4C  6FEA               	movwf	SPI_Init@pClock& (0+255),b
 17152  013B4E  0EC6               	movlw	198
 17153  013B50  6FEB               	movwf	(SPI_Init@pClock+1)& (0+255),b
 17154  013B52  0E2D               	movlw	45
 17155  013B54  6FEC               	movwf	(SPI_Init@pClock+2)& (0+255),b
 17156  013B56  0E00               	movlw	0
 17157  013B58  6FED               	movwf	(SPI_Init@pClock+3)& (0+255),b
 17158  013B5A  0E01               	movlw	1
 17159  013B5C  0100               	movlb	0	; () banked
 17160  013B5E  6FEE               	movwf	SPI_Init@pChannel& (0+255),b
 17161  013B60  0E01               	movlw	1
 17162  013B62  0100               	movlb	0	; () banked
 17163  013B64  6FEF               	movwf	SPI_Init@pMode& (0+255),b
 17164  013B66  EC00  F080         	call	_SPI_Init	;wreg free
 17165                           
 17166                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 17167  013B6A  0E6C               	movlw	low _SPI2
 17168  013B6C  0100               	movlb	0	; () banked
 17169  013B6E  6FCC               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 17170  013B70  0E01               	movlw	high _SPI2
 17171  013B72  0100               	movlb	0	; () banked
 17172  013B74  6FCD               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 17173  013B76  ECD9  F09C         	call	_SPI_MaxSpeed	;wreg free
 17174  013B7A  0012               	return		;funcret
 17175  013B7C                     __end_of_Configure_GPIOs:
 17176                           	opt stack 0
 17177                           tosu	equ	0xFFF
 17178                           tosh	equ	0xFFE
 17179                           tosl	equ	0xFFD
 17180                           pclath	equ	0xFFA
 17181                           tblptru	equ	0xFF8
 17182                           tblptrh	equ	0xFF7
 17183                           tblptrl	equ	0xFF6
 17184                           tablat	equ	0xFF5
 17185                           prodh	equ	0xFF4
 17186                           prodl	equ	0xFF3
 17187                           intcon	equ	0xFF2
 17188                           postinc0	equ	0xFEE
 17189                           wreg	equ	0xFE8
 17190                           indf1	equ	0xFE7
 17191                           postdec1	equ	0xFE5
 17192                           fsr1h	equ	0xFE2
 17193                           fsr1l	equ	0xFE1
 17194                           indf2	equ	0xFDF
 17195                           postinc2	equ	0xFDE
 17196                           postdec2	equ	0xFDD
 17197                           plusw2	equ	0xFDB
 17198                           fsr2h	equ	0xFDA
 17199                           fsr2l	equ	0xFD9
 17200                           status	equ	0xFD8
 17201                           
 17202 ;; *************** function _SPI_MaxSpeed *****************
 17203 ;; Defined at:
 17204 ;;		line 201 in file "Library/SPI.c"
 17205 ;; Parameters:    Size  Location     Type
 17206 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 17207 ;;		 -> SPI2(11), 
 17208 ;; Auto vars:     Size  Location     Type
 17209 ;;		None
 17210 ;; Return value:  Size  Location     Type
 17211 ;;                  1    wreg      void 
 17212 ;; Registers used:
 17213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17214 ;; Tracked objects:
 17215 ;;		On entry : 0/0
 17216 ;;		On exit  : 0/0
 17217 ;;		Unchanged: 0/0
 17218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17219 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17223 ;;Total ram usage:        2 bytes
 17224 ;; Hardware stack levels used:    1
 17225 ;; Hardware stack levels required when called:    9
 17226 ;; This function calls:
 17227 ;;		_Byte_SetBit
 17228 ;;		_Byte_SetQuad
 17229 ;; This function is called by:
 17230 ;;		_Configure_GPIOs
 17231 ;; This function uses a non-reentrant model
 17232 ;;
 17233                           
 17234                           	psect	text96
 17235  0139B2                     __ptext96:
 17236                           	opt stack 0
 17237  0139B2                     _SPI_MaxSpeed:
 17238                           	opt stack 18
 17239                           
 17240                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17241                           
 17242                           ;incstack = 0
 17243  0139B2  0100               	movlb	0	; () banked
 17244  0139B4  EE20 F006          	lfsr	2,6
 17245  0139B8  51CC               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17246  0139BA  26D9               	addwf	fsr2l,f,c
 17247  0139BC  51CD               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17248  0139BE  22DA               	addwfc	fsr2h,f,c
 17249  0139C0  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 17250  0139C4  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 17251  0139C8  0E05               	movlw	5
 17252  0139CA  0100               	movlb	0	; () banked
 17253  0139CC  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 17254  0139CE  0E00               	movlw	0
 17255  0139D0  0100               	movlb	0	; () banked
 17256  0139D2  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 17257  0139D4  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 17258                           
 17259                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 17260  0139D8  0100               	movlb	0	; () banked
 17261  0139DA  EE20 F006          	lfsr	2,6
 17262  0139DE  51CC               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17263  0139E0  26D9               	addwf	fsr2l,f,c
 17264  0139E2  51CD               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17265  0139E4  22DA               	addwfc	fsr2h,f,c
 17266  0139E6  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 17267  0139EA  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 17268  0139EE  0E00               	movlw	0
 17269  0139F0  0100               	movlb	0	; () banked
 17270  0139F2  6FCA               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17271  0139F4  0E00               	movlw	0
 17272  0139F6  0100               	movlb	0	; () banked
 17273  0139F8  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 17274  0139FA  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 17275                           
 17276                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17277  0139FE  0100               	movlb	0	; () banked
 17278  013A00  EE20 F006          	lfsr	2,6
 17279  013A04  51CC               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17280  013A06  26D9               	addwf	fsr2l,f,c
 17281  013A08  51CD               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17282  013A0A  22DA               	addwfc	fsr2h,f,c
 17283  013A0C  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 17284  013A10  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 17285  013A14  0E05               	movlw	5
 17286  013A16  0100               	movlb	0	; () banked
 17287  013A18  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 17288  013A1A  0E01               	movlw	1
 17289  013A1C  0100               	movlb	0	; () banked
 17290  013A1E  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 17291  013A20  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 17292  013A24  0012               	return		;funcret
 17293  013A26                     __end_of_SPI_MaxSpeed:
 17294                           	opt stack 0
 17295                           tosu	equ	0xFFF
 17296                           tosh	equ	0xFFE
 17297                           tosl	equ	0xFFD
 17298                           pclath	equ	0xFFA
 17299                           tblptru	equ	0xFF8
 17300                           tblptrh	equ	0xFF7
 17301                           tblptrl	equ	0xFF6
 17302                           tablat	equ	0xFF5
 17303                           prodh	equ	0xFF4
 17304                           prodl	equ	0xFF3
 17305                           intcon	equ	0xFF2
 17306                           postinc0	equ	0xFEE
 17307                           wreg	equ	0xFE8
 17308                           indf1	equ	0xFE7
 17309                           postdec1	equ	0xFE5
 17310                           fsr1h	equ	0xFE2
 17311                           fsr1l	equ	0xFE1
 17312                           indf2	equ	0xFDF
 17313                           postinc2	equ	0xFDE
 17314                           postdec2	equ	0xFDD
 17315                           plusw2	equ	0xFDB
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           
 17320 ;; *************** function _LCD_Reset *****************
 17321 ;; Defined at:
 17322 ;;		line 95 in file "Library/LCD.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;		None
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;		None
 17327 ;; Return value:  Size  Location     Type
 17328 ;;                  1    wreg      void 
 17329 ;; Registers used:
 17330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17331 ;; Tracked objects:
 17332 ;;		On entry : 0/0
 17333 ;;		On exit  : 0/0
 17334 ;;		Unchanged: 0/0
 17335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17340 ;;Total ram usage:        0 bytes
 17341 ;; Hardware stack levels used:    1
 17342 ;; Hardware stack levels required when called:   13
 17343 ;; This function calls:
 17344 ;;		_LED_Toggle
 17345 ;;		_Reset_High
 17346 ;;		_Reset_Low
 17347 ;;		_delay_ms
 17348 ;; This function is called by:
 17349 ;;		_Configure_GPIOs
 17350 ;; This function uses a non-reentrant model
 17351 ;;
 17352                           
 17353                           	psect	text97
 17354  01410E                     __ptext97:
 17355                           	opt stack 0
 17356  01410E                     _LCD_Reset:
 17357                           	opt stack 14
 17358                           
 17359                           ;LCD.c: 97: Reset_High();
 17360                           
 17361                           ;incstack = 0
 17362  01410E  ECB2  F0A4         	call	_Reset_High	;wreg free
 17363                           
 17364                           ;LCD.c: 98: LED_Toggle(eLED2);
 17365  014112  0E01               	movlw	1
 17366  014114  EC1E  F0A1         	call	_LED_Toggle
 17367                           
 17368                           ;LCD.c: 99: delay_ms(0x80);
 17369  014118  0E00               	movlw	0
 17370  01411A  0100               	movlb	0	; () banked
 17371  01411C  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
 17372  01411E  0E80               	movlw	128
 17373  014120  6FBD               	movwf	delay_ms@ms& (0+255),b
 17374  014122  EC2A  F09E         	call	_delay_ms	;wreg free
 17375                           
 17376                           ;LCD.c: 100: LED_Toggle(eLED2);
 17377  014126  0E01               	movlw	1
 17378  014128  EC1E  F0A1         	call	_LED_Toggle
 17379                           
 17380                           ;LCD.c: 101: Reset_Low();
 17381  01412C  ECA3  F0A4         	call	_Reset_Low	;wreg free
 17382                           
 17383                           ;LCD.c: 102: delay_ms(0x80);
 17384  014130  0E00               	movlw	0
 17385  014132  0100               	movlb	0	; () banked
 17386  014134  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
 17387  014136  0E80               	movlw	128
 17388  014138  6FBD               	movwf	delay_ms@ms& (0+255),b
 17389  01413A  EC2A  F09E         	call	_delay_ms	;wreg free
 17390                           
 17391                           ;LCD.c: 103: LED_Toggle(eLED2);
 17392  01413E  0E01               	movlw	1
 17393  014140  EC1E  F0A1         	call	_LED_Toggle
 17394                           
 17395                           ;LCD.c: 104: Reset_High();
 17396  014144  ECB2  F0A4         	call	_Reset_High	;wreg free
 17397                           
 17398                           ;LCD.c: 105: delay_ms(0x80);
 17399  014148  0E00               	movlw	0
 17400  01414A  0100               	movlb	0	; () banked
 17401  01414C  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
 17402  01414E  0E80               	movlw	128
 17403  014150  6FBD               	movwf	delay_ms@ms& (0+255),b
 17404  014152  EC2A  F09E         	call	_delay_ms	;wreg free
 17405                           
 17406                           ;LCD.c: 106: LED_Toggle(eLED2);
 17407  014156  0E01               	movlw	1
 17408  014158  EC1E  F0A1         	call	_LED_Toggle
 17409  01415C  0012               	return		;funcret
 17410  01415E                     __end_of_LCD_Reset:
 17411                           	opt stack 0
 17412                           tosu	equ	0xFFF
 17413                           tosh	equ	0xFFE
 17414                           tosl	equ	0xFFD
 17415                           pclath	equ	0xFFA
 17416                           tblptru	equ	0xFF8
 17417                           tblptrh	equ	0xFF7
 17418                           tblptrl	equ	0xFF6
 17419                           tablat	equ	0xFF5
 17420                           prodh	equ	0xFF4
 17421                           prodl	equ	0xFF3
 17422                           intcon	equ	0xFF2
 17423                           postinc0	equ	0xFEE
 17424                           wreg	equ	0xFE8
 17425                           indf1	equ	0xFE7
 17426                           postdec1	equ	0xFE5
 17427                           fsr1h	equ	0xFE2
 17428                           fsr1l	equ	0xFE1
 17429                           indf2	equ	0xFDF
 17430                           postinc2	equ	0xFDE
 17431                           postdec2	equ	0xFDD
 17432                           plusw2	equ	0xFDB
 17433                           fsr2h	equ	0xFDA
 17434                           fsr2l	equ	0xFD9
 17435                           status	equ	0xFD8
 17436                           
 17437 ;; *************** function _delay_ms *****************
 17438 ;; Defined at:
 17439 ;;		line 240 in file "Library/Types.c"
 17440 ;; Parameters:    Size  Location     Type
 17441 ;;  ms              2    0[BANK0 ] unsigned short 
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;  u               4    2[BANK0 ] volatile unsigned long 
 17444 ;; Return value:  Size  Location     Type
 17445 ;;                  1    wreg      void 
 17446 ;; Registers used:
 17447 ;;		wreg, status,2, status,0
 17448 ;; Tracked objects:
 17449 ;;		On entry : 0/0
 17450 ;;		On exit  : 0/0
 17451 ;;		Unchanged: 0/0
 17452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17453 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17454 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;Total ram usage:        6 bytes
 17458 ;; Hardware stack levels used:    1
 17459 ;; Hardware stack levels required when called:    7
 17460 ;; This function calls:
 17461 ;;		Nothing
 17462 ;; This function is called by:
 17463 ;;		_LCD_Reset
 17464 ;;		_LCD_Init
 17465 ;;		_MXK_Init
 17466 ;; This function uses a non-reentrant model
 17467 ;;
 17468                           
 17469                           	psect	text98
 17470  013C54                     __ptext98:
 17471                           	opt stack 0
 17472  013C54                     _delay_ms:
 17473                           	opt stack 21
 17474                           
 17475                           ;Types.c: 242: volatile unsigned long u;
 17476                           ;Types.c: 243: while (ms--)
 17477                           
 17478                           ;incstack = 0
 17479  013C54  D01F               	goto	u7400
 17480  013C56                     l10908:
 17481                           
 17482                           ;Types.c: 244: {
 17483                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 17484  013C56  0E00               	movlw	0
 17485  013C58  0100               	movlb	0	; () banked
 17486  013C5A  6FBF               	movwf	delay_ms@u& (0+255),b	;volatile
 17487  013C5C  0E00               	movlw	0
 17488  013C5E  6FC0               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17489  013C60  0E00               	movlw	0
 17490  013C62  6FC1               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17491  013C64  0E00               	movlw	0
 17492  013C66  6FC2               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17493  013C68                     l10910:
 17494                           
 17495                           ; BSR set to: 0
 17496  013C68  0100               	movlb	0	; () banked
 17497  013C6A  51C2               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 17498  013C6C  0100               	movlb	0	; () banked
 17499  013C6E  11C1               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 17500  013C70  E111               	bnz	l10916
 17501  013C72  0EB0               	movlw	176
 17502  013C74  0100               	movlb	0	; () banked
 17503  013C76  5DBF               	subwf	delay_ms@u& (0+255),w,b	;volatile
 17504  013C78  0E04               	movlw	4
 17505  013C7A  0100               	movlb	0	; () banked
 17506  013C7C  59C0               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 17507  013C7E  B0D8               	btfsc	status,0,c
 17508  013C80  D009               	goto	u7400
 17509                           
 17510                           ; BSR set to: 0
 17511                           
 17512                           ; BSR set to: 0
 17513  013C82  F000               	nop		; ;# 
 17514  013C84  0E01               	movlw	1
 17515  013C86  0100               	movlb	0	; () banked
 17516  013C88  27BF               	addwf	delay_ms@u& (0+255),f,b	;volatile
 17517  013C8A  0E00               	movlw	0
 17518  013C8C  23C0               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 17519  013C8E  23C1               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 17520  013C90  23C2               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 17521  013C92  D7EA               	goto	l10910
 17522  013C94                     u7400:
 17523  013C94                     l10916:
 17524  013C94  0100               	movlb	0	; () banked
 17525  013C96  07BD               	decf	delay_ms@ms& (0+255),f,b
 17526  013C98  A0D8               	btfss	status,0,c
 17527  013C9A  07BE               	decf	(delay_ms@ms+1)& (0+255),f,b
 17528  013C9C  0100               	movlb	0	; () banked
 17529  013C9E  29BD               	incf	delay_ms@ms& (0+255),w,b
 17530  013CA0  E1DA               	bnz	l10908
 17531  013CA2  0100               	movlb	0	; () banked
 17532  013CA4  29BE               	incf	(delay_ms@ms+1)& (0+255),w,b
 17533  013CA6  A4D8               	btfss	status,2,c
 17534  013CA8  D7D6               	goto	l824
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;Types.c: 251: }
 17538                           ;Types.c: 252: }
 17539                           ;Types.c: 253: u = 0x8008;
 17540                           
 17541                           ; BSR set to: 0
 17542  013CAA  0E08               	movlw	8
 17543  013CAC  0100               	movlb	0	; () banked
 17544  013CAE  6FBF               	movwf	delay_ms@u& (0+255),b	;volatile
 17545  013CB0  0E80               	movlw	128
 17546  013CB2  6FC0               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17547  013CB4  0E00               	movlw	0
 17548  013CB6  6FC1               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17549  013CB8  0E00               	movlw	0
 17550  013CBA  6FC2               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17551                           
 17552                           ; BSR set to: 0
 17553  013CBC  0012               	return		;funcret
 17554  013CBE                     __end_of_delay_ms:
 17555                           	opt stack 0
 17556                           tosu	equ	0xFFF
 17557                           tosh	equ	0xFFE
 17558                           tosl	equ	0xFFD
 17559                           pclath	equ	0xFFA
 17560                           tblptru	equ	0xFF8
 17561                           tblptrh	equ	0xFF7
 17562                           tblptrl	equ	0xFF6
 17563                           tablat	equ	0xFF5
 17564                           prodh	equ	0xFF4
 17565                           prodl	equ	0xFF3
 17566                           intcon	equ	0xFF2
 17567                           postinc0	equ	0xFEE
 17568                           wreg	equ	0xFE8
 17569                           indf1	equ	0xFE7
 17570                           postdec1	equ	0xFE5
 17571                           fsr1h	equ	0xFE2
 17572                           fsr1l	equ	0xFE1
 17573                           indf2	equ	0xFDF
 17574                           postinc2	equ	0xFDE
 17575                           postdec2	equ	0xFDD
 17576                           plusw2	equ	0xFDB
 17577                           fsr2h	equ	0xFDA
 17578                           fsr2l	equ	0xFD9
 17579                           status	equ	0xFD8
 17580                           
 17581 ;; *************** function _Reset_Low *****************
 17582 ;; Defined at:
 17583 ;;		line 32 in file "Library/LCD.c"
 17584 ;; Parameters:    Size  Location     Type
 17585 ;;		None
 17586 ;; Auto vars:     Size  Location     Type
 17587 ;;		None
 17588 ;; Return value:  Size  Location     Type
 17589 ;;                  1    wreg      void 
 17590 ;; Registers used:
 17591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17592 ;; Tracked objects:
 17593 ;;		On entry : 0/0
 17594 ;;		On exit  : 0/0
 17595 ;;		Unchanged: 0/0
 17596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17601 ;;Total ram usage:        0 bytes
 17602 ;; Hardware stack levels used:    1
 17603 ;; Hardware stack levels required when called:   11
 17604 ;; This function calls:
 17605 ;;		_Port_SetPin
 17606 ;; This function is called by:
 17607 ;;		_LCD_Reset
 17608 ;; This function uses a non-reentrant model
 17609 ;;
 17610                           
 17611                           	psect	text99
 17612  014946                     __ptext99:
 17613                           	opt stack 0
 17614  014946                     _Reset_Low:
 17615                           	opt stack 15
 17616                           
 17617                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 17618                           
 17619                           ; BSR set to: 0
 17620                           ;incstack = 0
 17621  014946  0EA9               	movlw	low _PortF
 17622  014948  0100               	movlb	0	; () banked
 17623  01494A  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 17624  01494C  0E01               	movlw	high _PortF
 17625  01494E  0100               	movlb	0	; () banked
 17626  014950  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17627  014952  0E06               	movlw	6
 17628  014954  0100               	movlb	0	; () banked
 17629  014956  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 17630  014958  0E01               	movlw	1
 17631  01495A  0100               	movlb	0	; () banked
 17632  01495C  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 17633  01495E  EC92  F094         	call	_Port_SetPin	;wreg free
 17634  014962  0012               	return		;funcret
 17635  014964                     __end_of_Reset_Low:
 17636                           	opt stack 0
 17637                           tosu	equ	0xFFF
 17638                           tosh	equ	0xFFE
 17639                           tosl	equ	0xFFD
 17640                           pclath	equ	0xFFA
 17641                           tblptru	equ	0xFF8
 17642                           tblptrh	equ	0xFF7
 17643                           tblptrl	equ	0xFF6
 17644                           tablat	equ	0xFF5
 17645                           prodh	equ	0xFF4
 17646                           prodl	equ	0xFF3
 17647                           intcon	equ	0xFF2
 17648                           postinc0	equ	0xFEE
 17649                           wreg	equ	0xFE8
 17650                           indf1	equ	0xFE7
 17651                           postdec1	equ	0xFE5
 17652                           fsr1h	equ	0xFE2
 17653                           fsr1l	equ	0xFE1
 17654                           indf2	equ	0xFDF
 17655                           postinc2	equ	0xFDE
 17656                           postdec2	equ	0xFDD
 17657                           plusw2	equ	0xFDB
 17658                           fsr2h	equ	0xFDA
 17659                           fsr2l	equ	0xFD9
 17660                           status	equ	0xFD8
 17661                           
 17662 ;; *************** function _Reset_High *****************
 17663 ;; Defined at:
 17664 ;;		line 36 in file "Library/LCD.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;		None
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;		None
 17669 ;; Return value:  Size  Location     Type
 17670 ;;                  1    wreg      void 
 17671 ;; Registers used:
 17672 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17673 ;; Tracked objects:
 17674 ;;		On entry : 0/0
 17675 ;;		On exit  : 0/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17682 ;;Total ram usage:        0 bytes
 17683 ;; Hardware stack levels used:    1
 17684 ;; Hardware stack levels required when called:   11
 17685 ;; This function calls:
 17686 ;;		_Port_SetPin
 17687 ;; This function is called by:
 17688 ;;		_LCD_Reset
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692                           	psect	text100
 17693  014964                     __ptext100:
 17694                           	opt stack 0
 17695  014964                     _Reset_High:
 17696                           	opt stack 15
 17697                           
 17698                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 17699                           
 17700                           ;incstack = 0
 17701  014964  0EA9               	movlw	low _PortF
 17702  014966  0100               	movlb	0	; () banked
 17703  014968  6FCC               	movwf	Port_SetPin@pInput& (0+255),b
 17704  01496A  0E01               	movlw	high _PortF
 17705  01496C  0100               	movlb	0	; () banked
 17706  01496E  6FCD               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17707  014970  0E06               	movlw	6
 17708  014972  0100               	movlb	0	; () banked
 17709  014974  6FCE               	movwf	Port_SetPin@pPin& (0+255),b
 17710  014976  0E00               	movlw	0
 17711  014978  0100               	movlb	0	; () banked
 17712  01497A  6FCF               	movwf	Port_SetPin@pValue& (0+255),b
 17713  01497C  EC92  F094         	call	_Port_SetPin	;wreg free
 17714  014980  0012               	return		;funcret
 17715  014982                     __end_of_Reset_High:
 17716                           	opt stack 0
 17717                           tosu	equ	0xFFF
 17718                           tosh	equ	0xFFE
 17719                           tosl	equ	0xFFD
 17720                           pclath	equ	0xFFA
 17721                           tblptru	equ	0xFF8
 17722                           tblptrh	equ	0xFF7
 17723                           tblptrl	equ	0xFF6
 17724                           tablat	equ	0xFF5
 17725                           prodh	equ	0xFF4
 17726                           prodl	equ	0xFF3
 17727                           intcon	equ	0xFF2
 17728                           postinc0	equ	0xFEE
 17729                           wreg	equ	0xFE8
 17730                           indf1	equ	0xFE7
 17731                           postdec1	equ	0xFE5
 17732                           fsr1h	equ	0xFE2
 17733                           fsr1l	equ	0xFE1
 17734                           indf2	equ	0xFDF
 17735                           postinc2	equ	0xFDE
 17736                           postdec2	equ	0xFDD
 17737                           plusw2	equ	0xFDB
 17738                           fsr2h	equ	0xFDA
 17739                           fsr2l	equ	0xFD9
 17740                           status	equ	0xFD8
 17741                           
 17742 ;; *************** function _LED_Toggle *****************
 17743 ;; Defined at:
 17744 ;;		line 50 in file "Library/LED.c"
 17745 ;; Parameters:    Size  Location     Type
 17746 ;;  pLED            1    wreg     enum E6739
 17747 ;; Auto vars:     Size  Location     Type
 17748 ;;  pLED            1   24[BANK0 ] enum E6739
 17749 ;; Return value:  Size  Location     Type
 17750 ;;                  1    wreg      void 
 17751 ;; Registers used:
 17752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17753 ;; Tracked objects:
 17754 ;;		On entry : 0/0
 17755 ;;		On exit  : 0/0
 17756 ;;		Unchanged: 0/0
 17757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17761 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17762 ;;Total ram usage:        1 bytes
 17763 ;; Hardware stack levels used:    1
 17764 ;; Hardware stack levels required when called:   12
 17765 ;; This function calls:
 17766 ;;		_Port_TogglePin
 17767 ;; This function is called by:
 17768 ;;		_LCD_Reset
 17769 ;;		_Event_DIPSwitch
 17770 ;;		_Event_HMI_DIPSwitch
 17771 ;;		_Event_TestButton
 17772 ;;		_Event_HMI_LeftButton
 17773 ;;		_Event_HMI_RightButton
 17774 ;;		_Event_HMI_UpButton
 17775 ;;		_Event_HMI_DownButton
 17776 ;;		_Event_ADCSequenceComplete
 17777 ;; This function uses a non-reentrant model
 17778 ;;
 17779                           
 17780                           	psect	text101
 17781  01423C                     __ptext101:
 17782                           	opt stack 0
 17783  01423C                     _LED_Toggle:
 17784                           	opt stack 10
 17785                           
 17786                           ;incstack = 0
 17787                           ;LED_Toggle@pLED stored from wreg
 17788  01423C  0100               	movlb	0	; () banked
 17789  01423E  6FD5               	movwf	LED_Toggle@pLED& (0+255),b
 17790                           
 17791                           ;LED.c: 52: switch (pLED)
 17792  014240  D018               	goto	l234
 17793  014242                     
 17794                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 17795  014242  0E91               	movlw	low _PortC
 17796  014244  0100               	movlb	0	; () banked
 17797  014246  6FD1               	movwf	Port_TogglePin@pInput& (0+255),b
 17798  014248  0E00               	movlw	high _PortC
 17799  01424A  0100               	movlb	0	; () banked
 17800  01424C  6FD2               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17801  01424E  0E00               	movlw	0
 17802  014250  0100               	movlb	0	; () banked
 17803  014252  6FD3               	movwf	Port_TogglePin@pPin& (0+255),b
 17804  014254  EC41  F0A3         	call	_Port_TogglePin	;wreg free
 17805                           
 17806                           ;LED.c: 56: break;
 17807  014258  0012               	return	
 17808  01425A                     
 17809                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 17810  01425A  0E91               	movlw	low _PortC
 17811  01425C  0100               	movlb	0	; () banked
 17812  01425E  6FD1               	movwf	Port_TogglePin@pInput& (0+255),b
 17813  014260  0E00               	movlw	high _PortC
 17814  014262  0100               	movlb	0	; () banked
 17815  014264  6FD2               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17816  014266  0E01               	movlw	1
 17817  014268  0100               	movlb	0	; () banked
 17818  01426A  6FD3               	movwf	Port_TogglePin@pPin& (0+255),b
 17819  01426C  EC41  F0A3         	call	_Port_TogglePin	;wreg free
 17820                           
 17821                           ;LED.c: 60: }
 17822                           
 17823                           ;LED.c: 59: break;
 17824  014270  0012               	return	
 17825  014272                     l234:
 17826  014272  0100               	movlb	0	; () banked
 17827  014274  51D5               	movf	LED_Toggle@pLED& (0+255),w,b
 17828                           
 17829                           ; Switch size 1, requested type "space"
 17830                           ; Number of cases is 2, Range of values is 0 to 1
 17831                           ; switch strategies available:
 17832                           ; Name         Instructions Cycles
 17833                           ; simple_byte            7     4 (average)
 17834                           ;	Chosen strategy is simple_byte
 17835  014276  0A00               	xorlw	0	; case 0
 17836  014278  B4D8               	btfsc	status,2,c
 17837  01427A  D7E3               	goto	l235
 17838  01427C  0A01               	xorlw	1	; case 1
 17839  01427E  A4D8               	btfss	status,2,c
 17840  014280  0012               	return	
 17841  014282  D7EB               	goto	l237
 17842  014284                     __end_of_LED_Toggle:
 17843                           	opt stack 0
 17844                           tosu	equ	0xFFF
 17845                           tosh	equ	0xFFE
 17846                           tosl	equ	0xFFD
 17847                           pclath	equ	0xFFA
 17848                           tblptru	equ	0xFF8
 17849                           tblptrh	equ	0xFF7
 17850                           tblptrl	equ	0xFF6
 17851                           tablat	equ	0xFF5
 17852                           prodh	equ	0xFF4
 17853                           prodl	equ	0xFF3
 17854                           intcon	equ	0xFF2
 17855                           postinc0	equ	0xFEE
 17856                           wreg	equ	0xFE8
 17857                           indf1	equ	0xFE7
 17858                           postdec1	equ	0xFE5
 17859                           fsr1h	equ	0xFE2
 17860                           fsr1l	equ	0xFE1
 17861                           indf2	equ	0xFDF
 17862                           postinc2	equ	0xFDE
 17863                           postdec2	equ	0xFDD
 17864                           plusw2	equ	0xFDB
 17865                           fsr2h	equ	0xFDA
 17866                           fsr2l	equ	0xFD9
 17867                           status	equ	0xFD8
 17868                           
 17869 ;; *************** function _Port_TogglePin *****************
 17870 ;; Defined at:
 17871 ;;		line 278 in file "Library/Port.c"
 17872 ;; Parameters:    Size  Location     Type
 17873 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 17874 ;;		 -> PortC(10), 
 17875 ;;  pPin            1   22[BANK0 ] enum E6750
 17876 ;; Auto vars:     Size  Location     Type
 17877 ;;  Value           1   23[BANK0 ] unsigned char 
 17878 ;; Return value:  Size  Location     Type
 17879 ;;                  1    wreg      void 
 17880 ;; Registers used:
 17881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17882 ;; Tracked objects:
 17883 ;;		On entry : 0/0
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17887 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17891 ;;Total ram usage:        4 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; Hardware stack levels required when called:   11
 17894 ;; This function calls:
 17895 ;;		_Port_GetPin
 17896 ;;		_Port_SetPin
 17897 ;; This function is called by:
 17898 ;;		_LED_Toggle
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text102
 17903  014682                     __ptext102:
 17904                           	opt stack 0
 17905  014682                     _Port_TogglePin:
 17906                           	opt stack 10
 17907                           
 17908                           ;Port.c: 280: UINT8 Value;
 17909                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 17910                           
 17911                           ;incstack = 0
 17912  014682  C0D1  F0BD         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 17913  014686  C0D2  F0BE         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 17914  01468A  C0D3  F0BF         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 17915  01468E  EC42  F0A1         	call	_Port_GetPin	;wreg free
 17916  014692  0100               	movlb	0	; () banked
 17917  014694  6FD4               	movwf	Port_TogglePin@Value& (0+255),b
 17918                           
 17919                           ; BSR set to: 0
 17920                           ;Port.c: 282: Value ^= 0x01;
 17921  014696  0E01               	movlw	1
 17922  014698  0100               	movlb	0	; () banked
 17923  01469A  1BD4               	xorwf	Port_TogglePin@Value& (0+255),f,b
 17924                           
 17925                           ; BSR set to: 0
 17926                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 17927  01469C  C0D1  F0CC         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 17928  0146A0  C0D2  F0CD         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 17929  0146A4  C0D3  F0CE         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 17930  0146A8  C0D4  F0CF         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 17931  0146AC  EC92  F094         	call	_Port_SetPin	;wreg free
 17932  0146B0  0012               	return		;funcret
 17933  0146B2                     __end_of_Port_TogglePin:
 17934                           	opt stack 0
 17935                           tosu	equ	0xFFF
 17936                           tosh	equ	0xFFE
 17937                           tosl	equ	0xFFD
 17938                           pclath	equ	0xFFA
 17939                           tblptru	equ	0xFF8
 17940                           tblptrh	equ	0xFF7
 17941                           tblptrl	equ	0xFF6
 17942                           tablat	equ	0xFF5
 17943                           prodh	equ	0xFF4
 17944                           prodl	equ	0xFF3
 17945                           intcon	equ	0xFF2
 17946                           postinc0	equ	0xFEE
 17947                           wreg	equ	0xFE8
 17948                           indf1	equ	0xFE7
 17949                           postdec1	equ	0xFE5
 17950                           fsr1h	equ	0xFE2
 17951                           fsr1l	equ	0xFE1
 17952                           indf2	equ	0xFDF
 17953                           postinc2	equ	0xFDE
 17954                           postdec2	equ	0xFDD
 17955                           plusw2	equ	0xFDB
 17956                           fsr2h	equ	0xFDA
 17957                           fsr2l	equ	0xFD9
 17958                           status	equ	0xFD8
 17959                           
 17960 ;; *************** function _Port_SetPin *****************
 17961 ;; Defined at:
 17962 ;;		line 247 in file "Library/Port.c"
 17963 ;; Parameters:    Size  Location     Type
 17964 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17965 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 17966 ;;  pPin            1   17[BANK0 ] enum E6750
 17967 ;;  pValue          1   18[BANK0 ] unsigned char 
 17968 ;; Auto vars:     Size  Location     Type
 17969 ;;  Type            1   19[BANK0 ] enum E6795
 17970 ;; Return value:  Size  Location     Type
 17971 ;;                  1    wreg      void 
 17972 ;; Registers used:
 17973 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17974 ;; Tracked objects:
 17975 ;;		On entry : 0/0
 17976 ;;		On exit  : 0/0
 17977 ;;		Unchanged: 0/0
 17978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17982 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17983 ;;Total ram usage:        5 bytes
 17984 ;; Hardware stack levels used:    1
 17985 ;; Hardware stack levels required when called:   10
 17986 ;; This function calls:
 17987 ;;		_Byte_SetBit
 17988 ;;		_Word_GetPair
 17989 ;; This function is called by:
 17990 ;;		_Reset_Low
 17991 ;;		_Reset_High
 17992 ;;		_LED_Set
 17993 ;;		_Port_TogglePin
 17994 ;;		_Motor_Init
 17995 ;;		_Motor_Step
 17996 ;;		_MXK_Init
 17997 ;; This function uses a non-reentrant model
 17998 ;;
 17999                           
 18000                           	psect	text103
 18001  012924                     __ptext103:
 18002                           	opt stack 0
 18003  012924                     _Port_SetPin:
 18004                           	opt stack 10
 18005                           
 18006                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 18007                           
 18008                           ;incstack = 0
 18009  012924  0E08               	movlw	8
 18010  012926  0100               	movlb	0	; () banked
 18011  012928  25CC               	addwf	Port_SetPin@pInput& (0+255),w,b
 18012  01292A  0100               	movlb	0	; () banked
 18013  01292C  6FC9               	movwf	Word_GetPair@pInput& (0+255),b
 18014  01292E  0E00               	movlw	0
 18015  012930  0100               	movlb	0	; () banked
 18016  012932  21CD               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 18017  012934  0100               	movlb	0	; () banked
 18018  012936  6FCA               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 18019  012938  C0CE  F0CB         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 18020  01293C  EC49  F0A2         	call	_Word_GetPair	;wreg free
 18021  012940  0100               	movlb	0	; () banked
 18022  012942  6FD0               	movwf	Port_SetPin@Type& (0+255),b
 18023                           
 18024                           ;Port.c: 250: switch (Type)
 18025  012944  D042               	goto	l427
 18026  012946                     
 18027                           ; BSR set to: 0
 18028                           ;Port.c: 256: pValue &= 1;
 18029                           
 18030                           ; BSR set to: 0
 18031  012946  0E01               	movlw	1
 18032  012948  0100               	movlb	0	; () banked
 18033  01294A  17CF               	andwf	Port_SetPin@pValue& (0+255),f,b
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18037  01294C  0100               	movlb	0	; () banked
 18038  01294E  EE20 F002          	lfsr	2,2
 18039  012952  51CC               	movf	Port_SetPin@pInput& (0+255),w,b
 18040  012954  26D9               	addwf	fsr2l,f,c
 18041  012956  51CD               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18042  012958  22DA               	addwfc	fsr2h,f,c
 18043  01295A  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 18044  01295E  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 18045  012962  C0CE  F0BF         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18046  012966  C0CF  F0C0         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18047  01296A  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 18048                           
 18049                           ;Port.c: 258: break;
 18050  01296E  0012               	return	
 18051  012970                     
 18052                           ;Port.c: 261: pValue &= 1;
 18053  012970  0E01               	movlw	1
 18054  012972  0100               	movlb	0	; () banked
 18055  012974  17CF               	andwf	Port_SetPin@pValue& (0+255),f,b
 18056                           
 18057                           ;Port.c: 262: pValue ^= 1;
 18058  012976  0E01               	movlw	1
 18059  012978  0100               	movlb	0	; () banked
 18060  01297A  1BCF               	xorwf	Port_SetPin@pValue& (0+255),f,b
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18064  01297C  0100               	movlb	0	; () banked
 18065  01297E  EE20 F002          	lfsr	2,2
 18066  012982  51CC               	movf	Port_SetPin@pInput& (0+255),w,b
 18067  012984  26D9               	addwf	fsr2l,f,c
 18068  012986  51CD               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18069  012988  22DA               	addwfc	fsr2h,f,c
 18070  01298A  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 18071  01298E  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 18072  012992  C0CE  F0BF         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18073  012996  C0CF  F0C0         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18074  01299A  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 18075                           
 18076                           ;Port.c: 264: break;
 18077  01299E  0012               	return	
 18078  0129A0                     
 18079                           ;Port.c: 266: pValue &= 1;
 18080  0129A0  0E01               	movlw	1
 18081  0129A2  0100               	movlb	0	; () banked
 18082  0129A4  17CF               	andwf	Port_SetPin@pValue& (0+255),f,b
 18083                           
 18084                           ; BSR set to: 0
 18085                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 18086  0129A6  0100               	movlb	0	; () banked
 18087  0129A8  EE20 F004          	lfsr	2,4
 18088  0129AC  51CC               	movf	Port_SetPin@pInput& (0+255),w,b
 18089  0129AE  26D9               	addwf	fsr2l,f,c
 18090  0129B0  51CD               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18091  0129B2  22DA               	addwfc	fsr2h,f,c
 18092  0129B4  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 18093  0129B8  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 18094  0129BC  C0CE  F0BF         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18095  0129C0  C0CF  F0C0         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18096  0129C4  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 18097                           
 18098                           ;Port.c: 269: }
 18099                           
 18100                           ;Port.c: 268: break;
 18101  0129C8  0012               	return	
 18102  0129CA                     l427:
 18103  0129CA  0100               	movlb	0	; () banked
 18104  0129CC  51D0               	movf	Port_SetPin@Type& (0+255),w,b
 18105                           
 18106                           ; Switch size 1, requested type "space"
 18107                           ; Number of cases is 4, Range of values is 0 to 3
 18108                           ; switch strategies available:
 18109                           ; Name         Instructions Cycles
 18110                           ; simple_byte           13     7 (average)
 18111                           ;	Chosen strategy is simple_byte
 18112  0129CE  0A00               	xorlw	0	; case 0
 18113  0129D0  B4D8               	btfsc	status,2,c
 18114  0129D2  0012               	return	
 18115  0129D4  0A01               	xorlw	1	; case 1
 18116  0129D6  B4D8               	btfsc	status,2,c
 18117  0129D8  D7B6               	goto	l430
 18118  0129DA  0A03               	xorlw	3	; case 2
 18119  0129DC  B4D8               	btfsc	status,2,c
 18120  0129DE  D7C8               	goto	l432
 18121  0129E0  0A01               	xorlw	1	; case 3
 18122  0129E2  A4D8               	btfss	status,2,c
 18123  0129E4  0012               	return	
 18124  0129E6  D7DC               	goto	l433
 18125  0129E8                     __end_of_Port_SetPin:
 18126                           	opt stack 0
 18127                           tosu	equ	0xFFF
 18128                           tosh	equ	0xFFE
 18129                           tosl	equ	0xFFD
 18130                           pclath	equ	0xFFA
 18131                           tblptru	equ	0xFF8
 18132                           tblptrh	equ	0xFF7
 18133                           tblptrl	equ	0xFF6
 18134                           tablat	equ	0xFF5
 18135                           prodh	equ	0xFF4
 18136                           prodl	equ	0xFF3
 18137                           intcon	equ	0xFF2
 18138                           postinc0	equ	0xFEE
 18139                           wreg	equ	0xFE8
 18140                           indf1	equ	0xFE7
 18141                           postdec1	equ	0xFE5
 18142                           fsr1h	equ	0xFE2
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           plusw2	equ	0xFDB
 18148                           fsr2h	equ	0xFDA
 18149                           fsr2l	equ	0xFD9
 18150                           status	equ	0xFD8
 18151                           
 18152 ;; *************** function _Port_GetPin *****************
 18153 ;; Defined at:
 18154 ;;		line 271 in file "Library/Port.c"
 18155 ;; Parameters:    Size  Location     Type
 18156 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 18157 ;;		 -> PortB(10), PortE(10), PortC(10), 
 18158 ;;  pPin            1    2[BANK0 ] enum E6750
 18159 ;; Auto vars:     Size  Location     Type
 18160 ;;  Output          1    5[BANK0 ] unsigned char 
 18161 ;; Return value:  Size  Location     Type
 18162 ;;                  1    wreg      unsigned char 
 18163 ;; Registers used:
 18164 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18165 ;; Tracked objects:
 18166 ;;		On entry : 0/0
 18167 ;;		On exit  : 0/0
 18168 ;;		Unchanged: 0/0
 18169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18170 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18173 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18174 ;;Total ram usage:        6 bytes
 18175 ;; Hardware stack levels used:    1
 18176 ;; Hardware stack levels required when called:    7
 18177 ;; This function calls:
 18178 ;;		Nothing
 18179 ;; This function is called by:
 18180 ;;		_Port_TogglePin
 18181 ;;		_HMI_LeftSwitch
 18182 ;;		_HMI_RightSwitch
 18183 ;;		_HMI_UpSwitch
 18184 ;;		_HMI_DownSwitch
 18185 ;;		_MXK_TestButton
 18186 ;; This function uses a non-reentrant model
 18187 ;;
 18188                           
 18189                           	psect	text104
 18190  014284                     __ptext104:
 18191                           	opt stack 0
 18192  014284                     _Port_GetPin:
 18193                           	opt stack 17
 18194                           
 18195                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 18196                           
 18197                           ;incstack = 0
 18198  014284  0100               	movlb	0	; () banked
 18199  014286  EE20 F006          	lfsr	2,6
 18200  01428A  51BD               	movf	Port_GetPin@pInput& (0+255),w,b
 18201  01428C  26D9               	addwf	fsr2l,f,c
 18202  01428E  51BE               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 18203  014290  22DA               	addwfc	fsr2h,f,c
 18204  014292  CFDE F0C0          	movff	postinc2,??_Port_GetPin
 18205  014296  CFDD F0C1          	movff	postdec2,??_Port_GetPin+1
 18206  01429A  C0C0  FFD9         	movff	??_Port_GetPin,fsr2l
 18207  01429E  C0C1  FFDA         	movff	??_Port_GetPin+1,fsr2h
 18208  0142A2  50DF               	movf	indf2,w,c
 18209  0142A4  0100               	movlb	0	; () banked
 18210  0142A6  6FC2               	movwf	Port_GetPin@Output& (0+255),b
 18211                           
 18212                           ; BSR set to: 0
 18213                           ;Port.c: 274: Output >>= (UINT8)pPin;
 18214  0142A8  0100               	movlb	0	; () banked
 18215  0142AA  29BF               	incf	Port_GetPin@pPin& (0+255),w,b
 18216  0142AC  0100               	movlb	0	; () banked
 18217  0142AE  6FC0               	movwf	??_Port_GetPin& (0+255),b
 18218  0142B0  D003               	goto	u6590
 18219  0142B2                     u6595:
 18220  0142B2  0100               	movlb	0	; () banked
 18221  0142B4  90D8               	bcf	status,0,c
 18222  0142B6  33C2               	rrcf	Port_GetPin@Output& (0+255),f,b
 18223  0142B8                     u6590:
 18224  0142B8  0100               	movlb	0	; () banked
 18225  0142BA  2FC0               	decfsz	??_Port_GetPin& (0+255),f,b
 18226  0142BC  D7FA               	goto	u6595
 18227                           
 18228                           ;Port.c: 275: Output &= 1;
 18229  0142BE  0E01               	movlw	1
 18230  0142C0  0100               	movlb	0	; () banked
 18231  0142C2  17C2               	andwf	Port_GetPin@Output& (0+255),f,b
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;Port.c: 276: return Output;
 18235  0142C4  0100               	movlb	0	; () banked
 18236  0142C6  51C2               	movf	Port_GetPin@Output& (0+255),w,b
 18237  0142C8  0012               	return	
 18238  0142CA                     __end_of_Port_GetPin:
 18239                           	opt stack 0
 18240                           tosu	equ	0xFFF
 18241                           tosh	equ	0xFFE
 18242                           tosl	equ	0xFFD
 18243                           pclath	equ	0xFFA
 18244                           tblptru	equ	0xFF8
 18245                           tblptrh	equ	0xFF7
 18246                           tblptrl	equ	0xFF6
 18247                           tablat	equ	0xFF5
 18248                           prodh	equ	0xFF4
 18249                           prodl	equ	0xFF3
 18250                           intcon	equ	0xFF2
 18251                           postinc0	equ	0xFEE
 18252                           wreg	equ	0xFE8
 18253                           indf1	equ	0xFE7
 18254                           postdec1	equ	0xFE5
 18255                           fsr1h	equ	0xFE2
 18256                           fsr1l	equ	0xFE1
 18257                           indf2	equ	0xFDF
 18258                           postinc2	equ	0xFDE
 18259                           postdec2	equ	0xFDD
 18260                           plusw2	equ	0xFDB
 18261                           fsr2h	equ	0xFDA
 18262                           fsr2l	equ	0xFD9
 18263                           status	equ	0xFD8
 18264                           
 18265 ;; *************** function _HMI_Init *****************
 18266 ;; Defined at:
 18267 ;;		line 104 in file "HMI.c"
 18268 ;; Parameters:    Size  Location     Type
 18269 ;;		None
 18270 ;; Auto vars:     Size  Location     Type
 18271 ;;  in              2   13[BANK1 ] unsigned short 
 18272 ;; Return value:  Size  Location     Type
 18273 ;;                  1    wreg      void 
 18274 ;; Registers used:
 18275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18276 ;; Tracked objects:
 18277 ;;		On entry : 0/0
 18278 ;;		On exit  : 0/0
 18279 ;;		Unchanged: 0/0
 18280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18282 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18284 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18285 ;;Total ram usage:        2 bytes
 18286 ;; Hardware stack levels used:    1
 18287 ;; Hardware stack levels required when called:   16
 18288 ;; This function calls:
 18289 ;;		_Button_Init
 18290 ;;		_SPI_Init
 18291 ;;		_SPI_MinSpeed
 18292 ;; This function is called by:
 18293 ;;		_initialise
 18294 ;; This function uses a non-reentrant model
 18295 ;;
 18296                           
 18297                           	psect	text105
 18298  0115B0                     __ptext105:
 18299                           	opt stack 0
 18300  0115B0                     _HMI_Init:
 18301                           	opt stack 13
 18302                           
 18303                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 18304                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 18305                           
 18306                           ; BSR set to: 0
 18307                           ;incstack = 0
 18308  0115B0  0E57               	movlw	low (_HMIBoard+48)
 18309  0115B2  0101               	movlb	1	; () banked
 18310  0115B4  6FBA               	movwf	Button_Init@pInput& (0+255),b
 18311  0115B6  0E01               	movlw	high (_HMIBoard+48)
 18312  0115B8  0101               	movlb	1	; () banked
 18313  0115BA  6FBB               	movwf	(Button_Init@pInput+1)& (0+255),b
 18314  0115BC  0E00               	movlw	0
 18315  0115BE  0101               	movlb	1	; () banked
 18316  0115C0  6FBD               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18317  0115C2  0E02               	movlw	2
 18318  0115C4  6FBC               	movwf	Button_Init@pThreshold& (0+255),b
 18319  0115C6  0ECE               	movlw	low _HMI_InitButtons
 18320  0115C8  0101               	movlb	1	; () banked
 18321  0115CA  6FBE               	movwf	Button_Init@pInitIO& (0+255),b
 18322  0115CC  0E4B               	movlw	high _HMI_InitButtons
 18323  0115CE  0101               	movlb	1	; () banked
 18324  0115D0  6FBF               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18325  0115D2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18326  0115D4  0101               	movlb	1	; () banked
 18327  0115D6  6FC0               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18328  0115D8  0E2A               	movlw	low _HMI_DIPSwitch
 18329  0115DA  0101               	movlb	1	; () banked
 18330  0115DC  6FC1               	movwf	Button_Init@pGetState& (0+255),b
 18331  0115DE  0E4A               	movlw	high _HMI_DIPSwitch
 18332  0115E0  0101               	movlb	1	; () banked
 18333  0115E2  6FC2               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18334  0115E4  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 18335  0115E6  0101               	movlb	1	; () banked
 18336  0115E8  6FC3               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18337  0115EA  0E40               	movlw	low _Event_HMI_DIPSwitch
 18338  0115EC  0101               	movlb	1	; () banked
 18339  0115EE  6FC4               	movwf	Button_Init@pFunction& (0+255),b
 18340  0115F0  0E47               	movlw	high _Event_HMI_DIPSwitch
 18341  0115F2  0101               	movlb	1	; () banked
 18342  0115F4  6FC5               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18343  0115F6  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 18344  0115F8  0101               	movlb	1	; () banked
 18345  0115FA  6FC6               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18346  0115FC  EC58  F093         	call	_Button_Init	;wreg free
 18347                           
 18348                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 18349                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 18350  011600  0E39               	movlw	low (_HMIBoard+18)
 18351  011602  0101               	movlb	1	; () banked
 18352  011604  6FBA               	movwf	Button_Init@pInput& (0+255),b
 18353  011606  0E01               	movlw	high (_HMIBoard+18)
 18354  011608  0101               	movlb	1	; () banked
 18355  01160A  6FBB               	movwf	(Button_Init@pInput+1)& (0+255),b
 18356  01160C  0E00               	movlw	0
 18357  01160E  0101               	movlb	1	; () banked
 18358  011610  6FBD               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18359  011612  0E02               	movlw	2
 18360  011614  6FBC               	movwf	Button_Init@pThreshold& (0+255),b
 18361  011616  0ECE               	movlw	low _HMI_InitButtons
 18362  011618  0101               	movlb	1	; () banked
 18363  01161A  6FBE               	movwf	Button_Init@pInitIO& (0+255),b
 18364  01161C  0E4B               	movlw	high _HMI_InitButtons
 18365  01161E  0101               	movlb	1	; () banked
 18366  011620  6FBF               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18367  011622  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18368  011624  0101               	movlb	1	; () banked
 18369  011626  6FC0               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18370  011628  0E8A               	movlw	low _HMI_LeftSwitch
 18371  01162A  0101               	movlb	1	; () banked
 18372  01162C  6FC1               	movwf	Button_Init@pGetState& (0+255),b
 18373  01162E  0E4A               	movlw	high _HMI_LeftSwitch
 18374  011630  0101               	movlb	1	; () banked
 18375  011632  6FC2               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18376  011634  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 18377  011636  0101               	movlb	1	; () banked
 18378  011638  6FC3               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18379  01163A  0E6C               	movlw	low _Event_HMI_LeftButton
 18380  01163C  0101               	movlb	1	; () banked
 18381  01163E  6FC4               	movwf	Button_Init@pFunction& (0+255),b
 18382  011640  0E3F               	movlw	high _Event_HMI_LeftButton
 18383  011642  0101               	movlb	1	; () banked
 18384  011644  6FC5               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18385  011646  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 18386  011648  0101               	movlb	1	; () banked
 18387  01164A  6FC6               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18388  01164C  EC58  F093         	call	_Button_Init	;wreg free
 18389                           
 18390                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 18391                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 18392  011650  0E2F               	movlw	low (_HMIBoard+8)
 18393  011652  0101               	movlb	1	; () banked
 18394  011654  6FBA               	movwf	Button_Init@pInput& (0+255),b
 18395  011656  0E01               	movlw	high (_HMIBoard+8)
 18396  011658  0101               	movlb	1	; () banked
 18397  01165A  6FBB               	movwf	(Button_Init@pInput+1)& (0+255),b
 18398  01165C  0E00               	movlw	0
 18399  01165E  0101               	movlb	1	; () banked
 18400  011660  6FBD               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18401  011662  0E02               	movlw	2
 18402  011664  6FBC               	movwf	Button_Init@pThreshold& (0+255),b
 18403  011666  0ECE               	movlw	low _HMI_InitButtons
 18404  011668  0101               	movlb	1	; () banked
 18405  01166A  6FBE               	movwf	Button_Init@pInitIO& (0+255),b
 18406  01166C  0E4B               	movlw	high _HMI_InitButtons
 18407  01166E  0101               	movlb	1	; () banked
 18408  011670  6FBF               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18409  011672  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18410  011674  0101               	movlb	1	; () banked
 18411  011676  6FC0               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18412  011678  0E72               	movlw	low _HMI_RightSwitch
 18413  01167A  0101               	movlb	1	; () banked
 18414  01167C  6FC1               	movwf	Button_Init@pGetState& (0+255),b
 18415  01167E  0E4A               	movlw	high _HMI_RightSwitch
 18416  011680  0101               	movlb	1	; () banked
 18417  011682  6FC2               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18418  011684  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 18419  011686  0101               	movlb	1	; () banked
 18420  011688  6FC3               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18421  01168A  0E10               	movlw	low _Event_HMI_RightButton
 18422  01168C  0101               	movlb	1	; () banked
 18423  01168E  6FC4               	movwf	Button_Init@pFunction& (0+255),b
 18424  011690  0E43               	movlw	high _Event_HMI_RightButton
 18425  011692  0101               	movlb	1	; () banked
 18426  011694  6FC5               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18427  011696  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 18428  011698  0101               	movlb	1	; () banked
 18429  01169A  6FC6               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18430  01169C  EC58  F093         	call	_Button_Init	;wreg free
 18431                           
 18432                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 18433                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 18434  0116A0  0E43               	movlw	low (_HMIBoard+28)
 18435  0116A2  0101               	movlb	1	; () banked
 18436  0116A4  6FBA               	movwf	Button_Init@pInput& (0+255),b
 18437  0116A6  0E01               	movlw	high (_HMIBoard+28)
 18438  0116A8  0101               	movlb	1	; () banked
 18439  0116AA  6FBB               	movwf	(Button_Init@pInput+1)& (0+255),b
 18440  0116AC  0E00               	movlw	0
 18441  0116AE  0101               	movlb	1	; () banked
 18442  0116B0  6FBD               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18443  0116B2  0E02               	movlw	2
 18444  0116B4  6FBC               	movwf	Button_Init@pThreshold& (0+255),b
 18445  0116B6  0ECE               	movlw	low _HMI_InitButtons
 18446  0116B8  0101               	movlb	1	; () banked
 18447  0116BA  6FBE               	movwf	Button_Init@pInitIO& (0+255),b
 18448  0116BC  0E4B               	movlw	high _HMI_InitButtons
 18449  0116BE  0101               	movlb	1	; () banked
 18450  0116C0  6FBF               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18451  0116C2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18452  0116C4  0101               	movlb	1	; () banked
 18453  0116C6  6FC0               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18454  0116C8  0E5A               	movlw	low _HMI_UpSwitch
 18455  0116CA  0101               	movlb	1	; () banked
 18456  0116CC  6FC1               	movwf	Button_Init@pGetState& (0+255),b
 18457  0116CE  0E4A               	movlw	high _HMI_UpSwitch
 18458  0116D0  0101               	movlb	1	; () banked
 18459  0116D2  6FC2               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18460  0116D4  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 18461  0116D6  0101               	movlb	1	; () banked
 18462  0116D8  6FC3               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18463  0116DA  0E52               	movlw	low _Event_HMI_UpButton
 18464  0116DC  0101               	movlb	1	; () banked
 18465  0116DE  6FC4               	movwf	Button_Init@pFunction& (0+255),b
 18466  0116E0  0E46               	movlw	high _Event_HMI_UpButton
 18467  0116E2  0101               	movlb	1	; () banked
 18468  0116E4  6FC5               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18469  0116E6  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 18470  0116E8  0101               	movlb	1	; () banked
 18471  0116EA  6FC6               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18472  0116EC  EC58  F093         	call	_Button_Init	;wreg free
 18473                           
 18474                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 18475                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 18476  0116F0  0E4D               	movlw	low (_HMIBoard+38)
 18477  0116F2  0101               	movlb	1	; () banked
 18478  0116F4  6FBA               	movwf	Button_Init@pInput& (0+255),b
 18479  0116F6  0E01               	movlw	high (_HMIBoard+38)
 18480  0116F8  0101               	movlb	1	; () banked
 18481  0116FA  6FBB               	movwf	(Button_Init@pInput+1)& (0+255),b
 18482  0116FC  0E00               	movlw	0
 18483  0116FE  0101               	movlb	1	; () banked
 18484  011700  6FBD               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18485  011702  0E02               	movlw	2
 18486  011704  6FBC               	movwf	Button_Init@pThreshold& (0+255),b
 18487  011706  0ECE               	movlw	low _HMI_InitButtons
 18488  011708  0101               	movlb	1	; () banked
 18489  01170A  6FBE               	movwf	Button_Init@pInitIO& (0+255),b
 18490  01170C  0E4B               	movlw	high _HMI_InitButtons
 18491  01170E  0101               	movlb	1	; () banked
 18492  011710  6FBF               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18493  011712  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18494  011714  0101               	movlb	1	; () banked
 18495  011716  6FC0               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18496  011718  0E42               	movlw	low _HMI_DownSwitch
 18497  01171A  0101               	movlb	1	; () banked
 18498  01171C  6FC1               	movwf	Button_Init@pGetState& (0+255),b
 18499  01171E  0E4A               	movlw	high _HMI_DownSwitch
 18500  011720  0101               	movlb	1	; () banked
 18501  011722  6FC2               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18502  011724  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 18503  011726  0101               	movlb	1	; () banked
 18504  011728  6FC3               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18505  01172A  0E20               	movlw	low _Event_HMI_DownButton
 18506  01172C  0101               	movlb	1	; () banked
 18507  01172E  6FC4               	movwf	Button_Init@pFunction& (0+255),b
 18508  011730  0E46               	movlw	high _Event_HMI_DownButton
 18509  011732  0101               	movlb	1	; () banked
 18510  011734  6FC5               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18511  011736  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 18512  011738  0101               	movlb	1	; () banked
 18513  01173A  6FC6               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18514  01173C  EC58  F093         	call	_Button_Init	;wreg free
 18515                           
 18516                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 18517  011740  0EA0               	movlw	160
 18518  011742  0100               	movlb	0	; () banked
 18519  011744  6FEA               	movwf	SPI_Init@pClock& (0+255),b
 18520  011746  0E86               	movlw	134
 18521  011748  6FEB               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18522  01174A  0E01               	movlw	1
 18523  01174C  6FEC               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18524  01174E  0E00               	movlw	0
 18525  011750  6FED               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18526  011752  0E00               	movlw	0
 18527  011754  0100               	movlb	0	; () banked
 18528  011756  6FEE               	movwf	SPI_Init@pChannel& (0+255),b
 18529  011758  0E02               	movlw	2
 18530  01175A  0100               	movlb	0	; () banked
 18531  01175C  6FEF               	movwf	SPI_Init@pMode& (0+255),b
 18532  01175E  EC00  F080         	call	_SPI_Init	;wreg free
 18533                           
 18534                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 18535  011762  0E61               	movlw	low _SPI1
 18536  011764  0100               	movlb	0	; () banked
 18537  011766  6FCC               	movwf	SPI_MinSpeed@pInput& (0+255),b
 18538  011768  0E01               	movlw	high _SPI1
 18539  01176A  0100               	movlb	0	; () banked
 18540  01176C  6FCD               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 18541  01176E  EC13  F09D         	call	_SPI_MinSpeed	;wreg free
 18542                           
 18543                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 18544  011772  0E00               	movlw	0
 18545  011774  0101               	movlb	1	; () banked
 18546  011776  6FC8               	movwf	(HMI_Init@in+1)& (0+255),b
 18547  011778  0E00               	movlw	0
 18548  01177A  6FC7               	movwf	HMI_Init@in& (0+255),b
 18549  01177C                     l11884:
 18550                           
 18551                           ; BSR set to: 1
 18552  01177C  0101               	movlb	1	; () banked
 18553  01177E  51C8               	movf	(HMI_Init@in+1)& (0+255),w,b
 18554  011780  E113               	bnz	l1161
 18555  011782  0E08               	movlw	8
 18556  011784  0101               	movlb	1	; () banked
 18557  011786  5DC7               	subwf	HMI_Init@in& (0+255),w,b
 18558  011788  B0D8               	btfsc	status,0,c
 18559  01178A  0012               	return	
 18560                           
 18561                           ; BSR set to: 1
 18562                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 18563                           
 18564                           ; BSR set to: 1
 18565                           
 18566                           ; BSR set to: 1
 18567  01178C  0E27               	movlw	low _HMIBoard
 18568  01178E  0101               	movlb	1	; () banked
 18569  011790  25C7               	addwf	HMI_Init@in& (0+255),w,b
 18570  011792  6ED9               	movwf	fsr2l,c
 18571  011794  0E01               	movlw	high _HMIBoard
 18572  011796  0101               	movlb	1	; () banked
 18573  011798  21C8               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 18574  01179A  6EDA               	movwf	fsr2h,c
 18575  01179C  0E00               	movlw	0
 18576  01179E  6EDF               	movwf	indf2,c
 18577                           
 18578                           ; BSR set to: 1
 18579  0117A0  0101               	movlb	1	; () banked
 18580  0117A2  4BC7               	infsnz	HMI_Init@in& (0+255),f,b
 18581  0117A4  2BC8               	incf	(HMI_Init@in+1)& (0+255),f,b
 18582  0117A6  D7EA               	goto	l11884
 18583  0117A8                     l1161:
 18584                           
 18585                           ; BSR set to: 1
 18586  0117A8  0012               	return		;funcret
 18587  0117AA                     __end_of_HMI_Init:
 18588                           	opt stack 0
 18589                           tosu	equ	0xFFF
 18590                           tosh	equ	0xFFE
 18591                           tosl	equ	0xFFD
 18592                           pclath	equ	0xFFA
 18593                           tblptru	equ	0xFF8
 18594                           tblptrh	equ	0xFF7
 18595                           tblptrl	equ	0xFF6
 18596                           tablat	equ	0xFF5
 18597                           prodh	equ	0xFF4
 18598                           prodl	equ	0xFF3
 18599                           intcon	equ	0xFF2
 18600                           postinc0	equ	0xFEE
 18601                           wreg	equ	0xFE8
 18602                           indf1	equ	0xFE7
 18603                           postdec1	equ	0xFE5
 18604                           fsr1h	equ	0xFE2
 18605                           fsr1l	equ	0xFE1
 18606                           indf2	equ	0xFDF
 18607                           postinc2	equ	0xFDE
 18608                           postdec2	equ	0xFDD
 18609                           plusw2	equ	0xFDB
 18610                           fsr2h	equ	0xFDA
 18611                           fsr2l	equ	0xFD9
 18612                           status	equ	0xFD8
 18613                           
 18614 ;; *************** function _SPI_MinSpeed *****************
 18615 ;; Defined at:
 18616 ;;		line 190 in file "Library/SPI.c"
 18617 ;; Parameters:    Size  Location     Type
 18618 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18619 ;;		 -> SPI1(11), 
 18620 ;; Auto vars:     Size  Location     Type
 18621 ;;		None
 18622 ;; Return value:  Size  Location     Type
 18623 ;;                  1    wreg      void 
 18624 ;; Registers used:
 18625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18626 ;; Tracked objects:
 18627 ;;		On entry : 0/0
 18628 ;;		On exit  : 0/0
 18629 ;;		Unchanged: 0/0
 18630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18635 ;;Total ram usage:        2 bytes
 18636 ;; Hardware stack levels used:    1
 18637 ;; Hardware stack levels required when called:    9
 18638 ;; This function calls:
 18639 ;;		_Byte_SetBit
 18640 ;;		_Byte_SetQuad
 18641 ;; This function is called by:
 18642 ;;		_HMI_Init
 18643 ;; This function uses a non-reentrant model
 18644 ;;
 18645                           
 18646                           	psect	text106
 18647  013A26                     __ptext106:
 18648                           	opt stack 0
 18649  013A26                     _SPI_MinSpeed:
 18650                           	opt stack 19
 18651                           
 18652                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18653                           
 18654                           ; BSR set to: 1
 18655                           ;incstack = 0
 18656  013A26  0100               	movlb	0	; () banked
 18657  013A28  EE20 F006          	lfsr	2,6
 18658  013A2C  51CC               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18659  013A2E  26D9               	addwf	fsr2l,f,c
 18660  013A30  51CD               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18661  013A32  22DA               	addwfc	fsr2h,f,c
 18662  013A34  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 18663  013A38  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 18664  013A3C  0E05               	movlw	5
 18665  013A3E  0100               	movlb	0	; () banked
 18666  013A40  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 18667  013A42  0E00               	movlw	0
 18668  013A44  0100               	movlb	0	; () banked
 18669  013A46  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 18670  013A48  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 18671                           
 18672                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 18673  013A4C  0100               	movlb	0	; () banked
 18674  013A4E  EE20 F006          	lfsr	2,6
 18675  013A52  51CC               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18676  013A54  26D9               	addwf	fsr2l,f,c
 18677  013A56  51CD               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18678  013A58  22DA               	addwfc	fsr2h,f,c
 18679  013A5A  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 18680  013A5E  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 18681  013A62  0E00               	movlw	0
 18682  013A64  0100               	movlb	0	; () banked
 18683  013A66  6FCA               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18684  013A68  0E02               	movlw	2
 18685  013A6A  0100               	movlb	0	; () banked
 18686  013A6C  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 18687  013A6E  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 18688                           
 18689                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18690  013A72  0100               	movlb	0	; () banked
 18691  013A74  EE20 F006          	lfsr	2,6
 18692  013A78  51CC               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18693  013A7A  26D9               	addwf	fsr2l,f,c
 18694  013A7C  51CD               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18695  013A7E  22DA               	addwfc	fsr2h,f,c
 18696  013A80  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 18697  013A84  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 18698  013A88  0E05               	movlw	5
 18699  013A8A  0100               	movlb	0	; () banked
 18700  013A8C  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 18701  013A8E  0E01               	movlw	1
 18702  013A90  0100               	movlb	0	; () banked
 18703  013A92  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 18704  013A94  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 18705  013A98  0012               	return		;funcret
 18706  013A9A                     __end_of_SPI_MinSpeed:
 18707                           	opt stack 0
 18708                           tosu	equ	0xFFF
 18709                           tosh	equ	0xFFE
 18710                           tosl	equ	0xFFD
 18711                           pclath	equ	0xFFA
 18712                           tblptru	equ	0xFF8
 18713                           tblptrh	equ	0xFF7
 18714                           tblptrl	equ	0xFF6
 18715                           tablat	equ	0xFF5
 18716                           prodh	equ	0xFF4
 18717                           prodl	equ	0xFF3
 18718                           intcon	equ	0xFF2
 18719                           postinc0	equ	0xFEE
 18720                           wreg	equ	0xFE8
 18721                           indf1	equ	0xFE7
 18722                           postdec1	equ	0xFE5
 18723                           fsr1h	equ	0xFE2
 18724                           fsr1l	equ	0xFE1
 18725                           indf2	equ	0xFDF
 18726                           postinc2	equ	0xFDE
 18727                           postdec2	equ	0xFDD
 18728                           plusw2	equ	0xFDB
 18729                           fsr2h	equ	0xFDA
 18730                           fsr2l	equ	0xFD9
 18731                           status	equ	0xFD8
 18732                           
 18733 ;; *************** function _SPI_Init *****************
 18734 ;; Defined at:
 18735 ;;		line 12 in file "Library/SPI.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;  pClock          4   45[BANK0 ] unsigned long 
 18738 ;;  pChannel        1   49[BANK0 ] enum E6744
 18739 ;;  pMode           1   50[BANK0 ] enum E6748
 18740 ;; Auto vars:     Size  Location     Type
 18741 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 18742 ;;		 -> SPI1(11), SPI2(11), 
 18743 ;; Return value:  Size  Location     Type
 18744 ;;                  1    wreg      void 
 18745 ;; Registers used:
 18746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18747 ;; Tracked objects:
 18748 ;;		On entry : 0/0
 18749 ;;		On exit  : 0/0
 18750 ;;		Unchanged: 0/0
 18751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18752 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18755 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18756 ;;Total ram usage:        8 bytes
 18757 ;; Hardware stack levels used:    1
 18758 ;; Hardware stack levels required when called:   12
 18759 ;; This function calls:
 18760 ;;		_Byte_SetBit
 18761 ;;		_Byte_SetQuad
 18762 ;;		_Port_SetPinType
 18763 ;;		_SPI_DCS
 18764 ;;		_SPI_DisableISR
 18765 ;;		_Timer2_Init
 18766 ;; This function is called by:
 18767 ;;		_Configure_GPIOs
 18768 ;;		_HMI_Init
 18769 ;; This function uses a non-reentrant model
 18770 ;;
 18771                           
 18772                           	psect	text107
 18773  010000                     __ptext107:
 18774                           	opt stack 0
 18775  010000                     _SPI_Init:
 18776                           	opt stack 15
 18777                           
 18778                           ;SPI.c: 14: SPIPtr pInput;
 18779                           ;SPI.c: 16: switch (pChannel)
 18780                           
 18781                           ;incstack = 0
 18782  010000  D00C               	goto	l597
 18783  010002                     
 18784                           ;SPI.c: 19: pInput = &SPI1;
 18785  010002  0E61               	movlw	low _SPI1
 18786  010004  0100               	movlb	0	; () banked
 18787  010006  6FF0               	movwf	SPI_Init@pInput& (0+255),b
 18788  010008  0E01               	movlw	high _SPI1
 18789  01000A  D004               	goto	L7
 18790  01000C                     
 18791                           ; BSR set to: 0
 18792                           ;SPI.c: 22: pInput = &SPI2;
 18793                           
 18794                           ; BSR set to: 0
 18795  01000C  0E6C               	movlw	low _SPI2
 18796  01000E  0100               	movlb	0	; () banked
 18797  010010  6FF0               	movwf	SPI_Init@pInput& (0+255),b
 18798  010012  0E01               	movlw	high _SPI2
 18799  010014                     L7:
 18800  010014  0100               	movlb	0	; () banked
 18801  010016  6FF1               	movwf	(SPI_Init@pInput+1)& (0+255),b
 18802                           
 18803                           ; BSR set to: 0
 18804                           ;SPI.c: 24: };
 18805                           
 18806                           ;SPI.c: 23: break;
 18807  010018  D008               	goto	l599
 18808  01001A                     l597:
 18809                           
 18810                           ; BSR set to: 0
 18811  01001A  0100               	movlb	0	; () banked
 18812  01001C  51EE               	movf	SPI_Init@pChannel& (0+255),w,b
 18813                           
 18814                           ; Switch size 1, requested type "space"
 18815                           ; Number of cases is 2, Range of values is 0 to 1
 18816                           ; switch strategies available:
 18817                           ; Name         Instructions Cycles
 18818                           ; simple_byte            7     4 (average)
 18819                           ;	Chosen strategy is simple_byte
 18820  01001E  0A00               	xorlw	0	; case 0
 18821  010020  B4D8               	btfsc	status,2,c
 18822  010022  D7EF               	goto	l598
 18823  010024  0A01               	xorlw	1	; case 1
 18824  010026  B4D8               	btfsc	status,2,c
 18825  010028  D7F1               	goto	l600
 18826  01002A                     l599:
 18827                           
 18828                           ; BSR set to: 0
 18829                           ;SPI.c: 26: pInput->mChannel = pChannel;
 18830                           
 18831                           ; BSR set to: 0
 18832  01002A  0100               	movlb	0	; () banked
 18833  01002C  EE20 F002          	lfsr	2,2
 18834  010030  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 18835  010032  26D9               	addwf	fsr2l,f,c
 18836  010034  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18837  010036  22DA               	addwfc	fsr2h,f,c
 18838  010038  C0EE  FFDF         	movff	SPI_Init@pChannel,indf2
 18839                           
 18840                           ;SPI.c: 35: switch (pChannel)
 18841  01003C  D0B1               	goto	l601
 18842  01003E                     
 18843                           ; BSR set to: 0
 18844                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 18845                           
 18846                           ; BSR set to: 0
 18847  01003E  0E91               	movlw	low _PortC
 18848  010040  0100               	movlb	0	; () banked
 18849  010042  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18850  010044  0E00               	movlw	high _PortC
 18851  010046  0100               	movlb	0	; () banked
 18852  010048  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18853  01004A  0E02               	movlw	2
 18854  01004C  0100               	movlb	0	; () banked
 18855  01004E  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18856  010050  0E03               	movlw	3
 18857  010052  0100               	movlb	0	; () banked
 18858  010054  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18859  010056  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18860                           
 18861                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 18862  01005A  0E91               	movlw	low _PortC
 18863  01005C  0100               	movlb	0	; () banked
 18864  01005E  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18865  010060  0E00               	movlw	high _PortC
 18866  010062  0100               	movlb	0	; () banked
 18867  010064  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18868  010066  0E03               	movlw	3
 18869  010068  0100               	movlb	0	; () banked
 18870  01006A  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18871  01006C  0E03               	movlw	3
 18872  01006E  0100               	movlb	0	; () banked
 18873  010070  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18874  010072  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18875                           
 18876                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 18877  010076  0E91               	movlw	low _PortC
 18878  010078  0100               	movlb	0	; () banked
 18879  01007A  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18880  01007C  0E00               	movlw	high _PortC
 18881  01007E  0100               	movlb	0	; () banked
 18882  010080  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18883  010082  0E05               	movlw	5
 18884  010084  0100               	movlb	0	; () banked
 18885  010086  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18886  010088  0E03               	movlw	3
 18887  01008A  0100               	movlb	0	; () banked
 18888  01008C  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18889  01008E  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18890                           
 18891                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 18892  010092  0E91               	movlw	low _PortC
 18893  010094  0100               	movlb	0	; () banked
 18894  010096  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18895  010098  0E00               	movlw	high _PortC
 18896  01009A  0100               	movlb	0	; () banked
 18897  01009C  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18898  01009E  0E04               	movlw	4
 18899  0100A0  0100               	movlb	0	; () banked
 18900  0100A2  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18901  0100A4  0E00               	movlw	0
 18902  0100A6  0100               	movlb	0	; () banked
 18903  0100A8  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18904  0100AA  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18905                           
 18906                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 18907  0100AE  0100               	movlb	0	; () banked
 18908  0100B0  EE20 F003          	lfsr	2,3
 18909  0100B4  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 18910  0100B6  26D9               	addwf	fsr2l,f,c
 18911  0100B8  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18912  0100BA  22DA               	addwfc	fsr2h,f,c
 18913  0100BC  0EC7               	movlw	199
 18914  0100BE  6EDE               	movwf	postinc2,c
 18915  0100C0  0E0F               	movlw	15
 18916  0100C2  6EDD               	movwf	postdec2,c
 18917                           
 18918                           ; BSR set to: 0
 18919                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 18920  0100C4  0100               	movlb	0	; () banked
 18921  0100C6  EE20 F006          	lfsr	2,6
 18922  0100CA  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 18923  0100CC  26D9               	addwf	fsr2l,f,c
 18924  0100CE  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18925  0100D0  22DA               	addwfc	fsr2h,f,c
 18926  0100D2  0EC6               	movlw	198
 18927  0100D4  6EDE               	movwf	postinc2,c
 18928  0100D6  0E0F               	movlw	15
 18929  0100D8  6EDD               	movwf	postdec2,c
 18930                           
 18931                           ; BSR set to: 0
 18932                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 18933  0100DA  0100               	movlb	0	; () banked
 18934  0100DC  EE20 F009          	lfsr	2,9
 18935  0100E0  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 18936  0100E2  26D9               	addwf	fsr2l,f,c
 18937  0100E4  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18938  0100E6  22DA               	addwfc	fsr2h,f,c
 18939  0100E8  0EC9               	movlw	201
 18940  0100EA  D056               	goto	L8
 18941  0100EC                     
 18942                           ; BSR set to: 0
 18943                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 18944                           
 18945                           ; BSR set to: 0
 18946  0100EC  0E87               	movlw	low _PortD
 18947  0100EE  0100               	movlb	0	; () banked
 18948  0100F0  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18949  0100F2  0E00               	movlw	high _PortD
 18950  0100F4  0100               	movlb	0	; () banked
 18951  0100F6  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18952  0100F8  0E07               	movlw	7
 18953  0100FA  0100               	movlb	0	; () banked
 18954  0100FC  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18955  0100FE  0E03               	movlw	3
 18956  010100  0100               	movlb	0	; () banked
 18957  010102  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18958  010104  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18959                           
 18960                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 18961  010108  0E87               	movlw	low _PortD
 18962  01010A  0100               	movlb	0	; () banked
 18963  01010C  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18964  01010E  0E00               	movlw	high _PortD
 18965  010110  0100               	movlb	0	; () banked
 18966  010112  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18967  010114  0E06               	movlw	6
 18968  010116  0100               	movlb	0	; () banked
 18969  010118  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18970  01011A  0E03               	movlw	3
 18971  01011C  0100               	movlb	0	; () banked
 18972  01011E  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18973  010120  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18974                           
 18975                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 18976  010124  0E87               	movlw	low _PortD
 18977  010126  0100               	movlb	0	; () banked
 18978  010128  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18979  01012A  0E00               	movlw	high _PortD
 18980  01012C  0100               	movlb	0	; () banked
 18981  01012E  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18982  010130  0E04               	movlw	4
 18983  010132  0100               	movlb	0	; () banked
 18984  010134  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 18985  010136  0E03               	movlw	3
 18986  010138  0100               	movlb	0	; () banked
 18987  01013A  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 18988  01013C  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 18989                           
 18990                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 18991  010140  0E87               	movlw	low _PortD
 18992  010142  0100               	movlb	0	; () banked
 18993  010144  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 18994  010146  0E00               	movlw	high _PortD
 18995  010148  0100               	movlb	0	; () banked
 18996  01014A  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18997  01014C  0E05               	movlw	5
 18998  01014E  0100               	movlb	0	; () banked
 18999  010150  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 19000  010152  0E00               	movlw	0
 19001  010154  0100               	movlb	0	; () banked
 19002  010156  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 19003  010158  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 19004                           
 19005                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 19006  01015C  0100               	movlb	0	; () banked
 19007  01015E  EE20 F003          	lfsr	2,3
 19008  010162  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19009  010164  26D9               	addwf	fsr2l,f,c
 19010  010166  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19011  010168  22DA               	addwfc	fsr2h,f,c
 19012  01016A  0E6D               	movlw	109
 19013  01016C  6EDE               	movwf	postinc2,c
 19014  01016E  0E0F               	movlw	15
 19015  010170  6EDD               	movwf	postdec2,c
 19016                           
 19017                           ; BSR set to: 0
 19018                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 19019  010172  0100               	movlb	0	; () banked
 19020  010174  EE20 F006          	lfsr	2,6
 19021  010178  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19022  01017A  26D9               	addwf	fsr2l,f,c
 19023  01017C  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19024  01017E  22DA               	addwfc	fsr2h,f,c
 19025  010180  0E6C               	movlw	108
 19026  010182  6EDE               	movwf	postinc2,c
 19027  010184  0E0F               	movlw	15
 19028  010186  6EDD               	movwf	postdec2,c
 19029                           
 19030                           ; BSR set to: 0
 19031                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 19032  010188  0100               	movlb	0	; () banked
 19033  01018A  EE20 F009          	lfsr	2,9
 19034  01018E  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19035  010190  26D9               	addwf	fsr2l,f,c
 19036  010192  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19037  010194  22DA               	addwfc	fsr2h,f,c
 19038  010196  0E6F               	movlw	111
 19039  010198                     L8:
 19040  010198  6EDE               	movwf	postinc2,c
 19041  01019A  0E0F               	movlw	15
 19042  01019C  6EDD               	movwf	postdec2,c
 19043                           
 19044                           ;SPI.c: 68: break;
 19045  01019E  D009               	goto	l603
 19046  0101A0                     l601:
 19047                           
 19048                           ; BSR set to: 0
 19049                           
 19050                           ; BSR set to: 0
 19051  0101A0  0100               	movlb	0	; () banked
 19052  0101A2  51EE               	movf	SPI_Init@pChannel& (0+255),w,b
 19053                           
 19054                           ; Switch size 1, requested type "space"
 19055                           ; Number of cases is 2, Range of values is 0 to 1
 19056                           ; switch strategies available:
 19057                           ; Name         Instructions Cycles
 19058                           ; simple_byte            7     4 (average)
 19059                           ;	Chosen strategy is simple_byte
 19060  0101A4  0A00               	xorlw	0	; case 0
 19061  0101A6  B4D8               	btfsc	status,2,c
 19062  0101A8  D74A               	goto	l602
 19063  0101AA  0A01               	xorlw	1	; case 1
 19064  0101AC  A4D8               	btfss	status,2,c
 19065  0101AE  0012               	return	
 19066  0101B0  D79D               	goto	l604
 19067  0101B2                     l603:
 19068                           
 19069                           ; BSR set to: 0
 19070                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19071                           
 19072                           ; BSR set to: 0
 19073  0101B2  0100               	movlb	0	; () banked
 19074  0101B4  EE20 F006          	lfsr	2,6
 19075  0101B8  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19076  0101BA  26D9               	addwf	fsr2l,f,c
 19077  0101BC  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19078  0101BE  22DA               	addwfc	fsr2h,f,c
 19079  0101C0  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19080  0101C4  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19081  0101C8  0E05               	movlw	5
 19082  0101CA  0100               	movlb	0	; () banked
 19083  0101CC  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19084  0101CE  0E00               	movlw	0
 19085  0101D0  0100               	movlb	0	; () banked
 19086  0101D2  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19087  0101D4  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19088                           
 19089                           ;SPI.c: 77: switch(pMode)
 19090  0101D8  D09C               	goto	l607
 19091  0101DA                     
 19092                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19093  0101DA  0100               	movlb	0	; () banked
 19094  0101DC  EE20 F006          	lfsr	2,6
 19095  0101E0  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19096  0101E2  26D9               	addwf	fsr2l,f,c
 19097  0101E4  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19098  0101E6  22DA               	addwfc	fsr2h,f,c
 19099  0101E8  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19100  0101EC  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19101  0101F0  0E04               	movlw	4
 19102  0101F2  0100               	movlb	0	; () banked
 19103  0101F4  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19104  0101F6  0E00               	movlw	0
 19105  0101F8  0100               	movlb	0	; () banked
 19106  0101FA  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19107  0101FC  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19108                           
 19109                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19110  010200  0100               	movlb	0	; () banked
 19111  010202  EE20 F003          	lfsr	2,3
 19112  010206  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19113  010208  26D9               	addwf	fsr2l,f,c
 19114  01020A  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19115  01020C  22DA               	addwfc	fsr2h,f,c
 19116  01020E  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19117  010212  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19118  010216  0E06               	movlw	6
 19119  010218  0100               	movlb	0	; () banked
 19120  01021A  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19121  01021C  0E00               	movlw	0
 19122  01021E  0100               	movlb	0	; () banked
 19123  010220  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19124  010222  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19125                           
 19126                           ;SPI.c: 82: break;
 19127  010226  D084               	goto	l609
 19128  010228                     
 19129                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19130  010228  0100               	movlb	0	; () banked
 19131  01022A  EE20 F006          	lfsr	2,6
 19132  01022E  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19133  010230  26D9               	addwf	fsr2l,f,c
 19134  010232  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19135  010234  22DA               	addwfc	fsr2h,f,c
 19136  010236  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19137  01023A  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19138  01023E  0E04               	movlw	4
 19139  010240  0100               	movlb	0	; () banked
 19140  010242  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19141  010244  0E00               	movlw	0
 19142  010246  0100               	movlb	0	; () banked
 19143  010248  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19144  01024A  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19145                           
 19146                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19147  01024E  0100               	movlb	0	; () banked
 19148  010250  EE20 F003          	lfsr	2,3
 19149  010254  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19150  010256  26D9               	addwf	fsr2l,f,c
 19151  010258  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19152  01025A  22DA               	addwfc	fsr2h,f,c
 19153  01025C  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19154  010260  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19155  010264  0E06               	movlw	6
 19156  010266  0100               	movlb	0	; () banked
 19157  010268  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19158  01026A  0E01               	movlw	1
 19159  01026C  0100               	movlb	0	; () banked
 19160  01026E  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19161  010270  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19162                           
 19163                           ;SPI.c: 86: break;
 19164  010274  D05D               	goto	l609
 19165  010276                     
 19166                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19167  010276  0100               	movlb	0	; () banked
 19168  010278  EE20 F006          	lfsr	2,6
 19169  01027C  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19170  01027E  26D9               	addwf	fsr2l,f,c
 19171  010280  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19172  010282  22DA               	addwfc	fsr2h,f,c
 19173  010284  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19174  010288  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19175  01028C  0E04               	movlw	4
 19176  01028E  0100               	movlb	0	; () banked
 19177  010290  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19178  010292  0E01               	movlw	1
 19179  010294  0100               	movlb	0	; () banked
 19180  010296  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19181  010298  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19182                           
 19183                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19184  01029C  0100               	movlb	0	; () banked
 19185  01029E  EE20 F003          	lfsr	2,3
 19186  0102A2  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19187  0102A4  26D9               	addwf	fsr2l,f,c
 19188  0102A6  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19189  0102A8  22DA               	addwfc	fsr2h,f,c
 19190  0102AA  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19191  0102AE  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19192  0102B2  0E06               	movlw	6
 19193  0102B4  0100               	movlb	0	; () banked
 19194  0102B6  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19195  0102B8  0E00               	movlw	0
 19196  0102BA  0100               	movlb	0	; () banked
 19197  0102BC  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19198  0102BE  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19199                           
 19200                           ;SPI.c: 90: break;
 19201  0102C2  D036               	goto	l609
 19202  0102C4                     
 19203                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19204  0102C4  0100               	movlb	0	; () banked
 19205  0102C6  EE20 F006          	lfsr	2,6
 19206  0102CA  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19207  0102CC  26D9               	addwf	fsr2l,f,c
 19208  0102CE  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19209  0102D0  22DA               	addwfc	fsr2h,f,c
 19210  0102D2  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19211  0102D6  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19212  0102DA  0E04               	movlw	4
 19213  0102DC  0100               	movlb	0	; () banked
 19214  0102DE  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19215  0102E0  0E01               	movlw	1
 19216  0102E2  0100               	movlb	0	; () banked
 19217  0102E4  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19218  0102E6  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19219                           
 19220                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19221  0102EA  0100               	movlb	0	; () banked
 19222  0102EC  EE20 F003          	lfsr	2,3
 19223  0102F0  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19224  0102F2  26D9               	addwf	fsr2l,f,c
 19225  0102F4  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19226  0102F6  22DA               	addwfc	fsr2h,f,c
 19227  0102F8  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19228  0102FC  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19229  010300  0E06               	movlw	6
 19230  010302  0100               	movlb	0	; () banked
 19231  010304  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19232  010306  0E01               	movlw	1
 19233  010308  0100               	movlb	0	; () banked
 19234  01030A  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19235  01030C  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19236                           
 19237                           ;SPI.c: 94: break;
 19238  010310  D00F               	goto	l609
 19239  010312                     l607:
 19240  010312  0100               	movlb	0	; () banked
 19241  010314  51EF               	movf	SPI_Init@pMode& (0+255),w,b
 19242                           
 19243                           ; Switch size 1, requested type "space"
 19244                           ; Number of cases is 4, Range of values is 0 to 3
 19245                           ; switch strategies available:
 19246                           ; Name         Instructions Cycles
 19247                           ; simple_byte           13     7 (average)
 19248                           ;	Chosen strategy is simple_byte
 19249  010316  0A00               	xorlw	0	; case 0
 19250  010318  B4D8               	btfsc	status,2,c
 19251  01031A  D75F               	goto	l608
 19252  01031C  0A01               	xorlw	1	; case 1
 19253  01031E  B4D8               	btfsc	status,2,c
 19254  010320  D783               	goto	l610
 19255  010322  0A03               	xorlw	3	; case 2
 19256  010324  B4D8               	btfsc	status,2,c
 19257  010326  D7A7               	goto	l611
 19258  010328  0A01               	xorlw	1	; case 3
 19259  01032A  A4D8               	btfss	status,2,c
 19260  01032C  0012               	return	
 19261  01032E  D7CA               	goto	l612
 19262  010330                     l609:
 19263                           
 19264                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 19265                           
 19266                           ; BSR set to: 0
 19267  010330  0100               	movlb	0	; () banked
 19268  010332  EE20 F006          	lfsr	2,6
 19269  010336  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19270  010338  26D9               	addwf	fsr2l,f,c
 19271  01033A  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19272  01033C  22DA               	addwfc	fsr2h,f,c
 19273  01033E  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19274  010342  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19275  010346  0E07               	movlw	7
 19276  010348  0100               	movlb	0	; () banked
 19277  01034A  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19278  01034C  0E00               	movlw	0
 19279  01034E  0100               	movlb	0	; () banked
 19280  010350  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19281  010352  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19282                           
 19283                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 19284  010356  0100               	movlb	0	; () banked
 19285  010358  EE20 F006          	lfsr	2,6
 19286  01035C  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19287  01035E  26D9               	addwf	fsr2l,f,c
 19288  010360  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19289  010362  22DA               	addwfc	fsr2h,f,c
 19290  010364  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19291  010368  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19292  01036C  0E06               	movlw	6
 19293  01036E  0100               	movlb	0	; () banked
 19294  010370  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19295  010372  0E00               	movlw	0
 19296  010374  0100               	movlb	0	; () banked
 19297  010376  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19298  010378  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19299                           
 19300                           ;SPI.c: 106: Timer2_Init(pClock);
 19301  01037C  C0EA  F0CA         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 19302  010380  C0EB  F0CB         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 19303  010384  C0EC  F0CC         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 19304  010388  C0ED  F0CD         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 19305  01038C  EC29  F091         	call	_Timer2_Init	;wreg free
 19306                           
 19307                           ;SPI.c: 112: SPI_DisableISR(pInput);
 19308  010390  C0F0  F0BD         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 19309  010394  C0F1  F0BE         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 19310  010398  EC08  F0A4         	call	_SPI_DisableISR	;wreg free
 19311                           
 19312                           ;SPI.c: 116: switch (pChannel)
 19313  01039C  D004               	goto	l614
 19314  01039E                     l615:
 19315                           
 19316                           ; BSR set to: 0
 19317  01039E  869F               	bsf	3999,3,c	;volatile
 19318  0103A0  D00B               	goto	l616
 19319  0103A2                     l617:
 19320                           
 19321                           ; BSR set to: 0
 19322  0103A2  8EA5               	bsf	4005,7,c	;volatile
 19323  0103A4  D009               	goto	l616
 19324  0103A6                     l614:
 19325                           
 19326                           ; BSR set to: 0
 19327  0103A6  0100               	movlb	0	; () banked
 19328  0103A8  51EE               	movf	SPI_Init@pChannel& (0+255),w,b
 19329                           
 19330                           ; Switch size 1, requested type "space"
 19331                           ; Number of cases is 2, Range of values is 0 to 1
 19332                           ; switch strategies available:
 19333                           ; Name         Instructions Cycles
 19334                           ; simple_byte            7     4 (average)
 19335                           ;	Chosen strategy is simple_byte
 19336  0103AA  0A00               	xorlw	0	; case 0
 19337  0103AC  B4D8               	btfsc	status,2,c
 19338  0103AE  D7F7               	goto	l615
 19339  0103B0  0A01               	xorlw	1	; case 1
 19340  0103B2  A4D8               	btfss	status,2,c
 19341  0103B4  0012               	return	
 19342  0103B6  D7F5               	goto	l617
 19343  0103B8                     l616:
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;SPI.c: 124: SPI_DCS(pInput);
 19347                           
 19348                           ; BSR set to: 0
 19349  0103B8  C0F0  F0BD         	movff	SPI_Init@pInput,SPI_DCS@pInput
 19350  0103BC  C0F1  F0BE         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 19351  0103C0  EC59  F0A3         	call	_SPI_DCS	;wreg free
 19352                           
 19353                           ;SPI.c: 126: pInput->mBusy = 0;
 19354  0103C4  C0F0  FFD9         	movff	SPI_Init@pInput,fsr2l
 19355  0103C8  C0F1  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 19356  0103CC  0E00               	movlw	0
 19357  0103CE  6EDF               	movwf	indf2,c
 19358                           
 19359                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 19360  0103D0  0100               	movlb	0	; () banked
 19361  0103D2  EE20 F006          	lfsr	2,6
 19362  0103D6  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19363  0103D8  26D9               	addwf	fsr2l,f,c
 19364  0103DA  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19365  0103DC  22DA               	addwfc	fsr2h,f,c
 19366  0103DE  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 19367  0103E2  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 19368  0103E6  0E00               	movlw	0
 19369  0103E8  0100               	movlb	0	; () banked
 19370  0103EA  6FCA               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19371  0103EC  0E03               	movlw	3
 19372  0103EE  0100               	movlb	0	; () banked
 19373  0103F0  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 19374  0103F2  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 19375                           
 19376                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19377  0103F6  0100               	movlb	0	; () banked
 19378  0103F8  EE20 F006          	lfsr	2,6
 19379  0103FC  51F0               	movf	SPI_Init@pInput& (0+255),w,b
 19380  0103FE  26D9               	addwf	fsr2l,f,c
 19381  010400  51F1               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19382  010402  22DA               	addwfc	fsr2h,f,c
 19383  010404  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 19384  010408  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 19385  01040C  0E05               	movlw	5
 19386  01040E  0100               	movlb	0	; () banked
 19387  010410  6FBF               	movwf	Byte_SetBit@pBit& (0+255),b
 19388  010412  0E01               	movlw	1
 19389  010414  0100               	movlb	0	; () banked
 19390  010416  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 19391  010418  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 19392  01041C  0012               	return		;funcret
 19393  01041E                     __end_of_SPI_Init:
 19394                           	opt stack 0
 19395                           tosu	equ	0xFFF
 19396                           tosh	equ	0xFFE
 19397                           tosl	equ	0xFFD
 19398                           pclath	equ	0xFFA
 19399                           tblptru	equ	0xFF8
 19400                           tblptrh	equ	0xFF7
 19401                           tblptrl	equ	0xFF6
 19402                           tablat	equ	0xFF5
 19403                           prodh	equ	0xFF4
 19404                           prodl	equ	0xFF3
 19405                           intcon	equ	0xFF2
 19406                           postinc0	equ	0xFEE
 19407                           wreg	equ	0xFE8
 19408                           indf1	equ	0xFE7
 19409                           postdec1	equ	0xFE5
 19410                           fsr1h	equ	0xFE2
 19411                           fsr1l	equ	0xFE1
 19412                           indf2	equ	0xFDF
 19413                           postinc2	equ	0xFDE
 19414                           postdec2	equ	0xFDD
 19415                           plusw2	equ	0xFDB
 19416                           fsr2h	equ	0xFDA
 19417                           fsr2l	equ	0xFD9
 19418                           status	equ	0xFD8
 19419                           
 19420 ;; *************** function _Timer2_Init *****************
 19421 ;; Defined at:
 19422 ;;		line 10 in file "Library/Timer2.c"
 19423 ;; Parameters:    Size  Location     Type
 19424 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 19425 ;; Auto vars:     Size  Location     Type
 19426 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 19427 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 19428 ;;  RDIV            4   18[BANK0 ] unsigned long 
 19429 ;; Return value:  Size  Location     Type
 19430 ;;                  1    wreg      void 
 19431 ;; Registers used:
 19432 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19433 ;; Tracked objects:
 19434 ;;		On entry : 0/0
 19435 ;;		On exit  : 0/0
 19436 ;;		Unchanged: 0/0
 19437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19439 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19441 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19442 ;;Total ram usage:       17 bytes
 19443 ;; Hardware stack levels used:    1
 19444 ;; Hardware stack levels required when called:    8
 19445 ;; This function calls:
 19446 ;;		_Timer2_Clear
 19447 ;;		___lldiv
 19448 ;; This function is called by:
 19449 ;;		_SPI_Init
 19450 ;; This function uses a non-reentrant model
 19451 ;;
 19452                           
 19453                           	psect	text108
 19454  012252                     __ptext108:
 19455                           	opt stack 0
 19456  012252                     _Timer2_Init:
 19457                           	opt stack 18
 19458                           
 19459                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 19460                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 19461                           ;Timer2.c: 14: static UINT8 PRE = 0;
 19462                           ;Timer2.c: 15: static UINT32 DIV = 0;
 19463                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 19464                           
 19465                           ;incstack = 0
 19466  012252  0E00               	movlw	0
 19467  012254  0100               	movlb	0	; () banked
 19468  012256  6FD3               	movwf	Timer2_Init@pCPUClock& (0+255),b
 19469  012258  0E6C               	movlw	108
 19470  01225A  6FD4               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 19471  01225C  0EDC               	movlw	220
 19472  01225E  6FD5               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 19473  012260  0E02               	movlw	2
 19474  012262  6FD6               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 19475                           
 19476                           ; BSR set to: 0
 19477                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 19478                           ;Timer2.c: 20: pFrequency *= 2;
 19479  012264  0100               	movlb	0	; () banked
 19480  012266  90D8               	bcf	status,0,c
 19481  012268  37CA               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 19482  01226A  37CB               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 19483  01226C  37CC               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 19484  01226E  37CD               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 19485                           
 19486                           ; BSR set to: 0
 19487                           ;Timer2.c: 23: pCPUClock /= 4;
 19488  012270  0E02               	movlw	2
 19489  012272  0100               	movlb	0	; () banked
 19490  012274  6FCE               	movwf	??_Timer2_Init& (0+255),b
 19491  012276                     u7515:
 19492  012276  90D8               	bcf	status,0,c
 19493  012278  0100               	movlb	0	; () banked
 19494  01227A  33D6               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 19495  01227C  33D5               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 19496  01227E  33D4               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 19497  012280  33D3               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 19498  012282  0100               	movlb	0	; () banked
 19499  012284  2FCE               	decfsz	??_Timer2_Init& (0+255),f,b
 19500  012286  D7F7               	goto	u7515
 19501                           
 19502                           ; BSR set to: 0
 19503                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 19504  012288  C0D3  F0BD         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 19505  01228C  C0D4  F0BE         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 19506  012290  C0D5  F0BF         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 19507  012294  C0D6  F0C0         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 19508  012298  C0CA  F0C1         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 19509  01229C  C0CB  F0C2         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 19510  0122A0  C0CC  F0C3         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 19511  0122A4  C0CD  F0C4         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 19512  0122A8  ECB4  F095         	call	___lldiv	;wreg free
 19513  0122AC  C0BD  F0D7         	movff	?___lldiv,Timer2_Init@DIVIDE
 19514  0122B0  C0BE  F0D8         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 19515  0122B4  C0BF  F0D9         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 19516  0122B8  C0C0  F0DA         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 19517                           
 19518                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 19519  0122BC  D010               	goto	l1836
 19520  0122BE                     l11006:
 19521                           
 19522                           ;Timer2.c: 28: {
 19523                           ;Timer2.c: 29: RDIV = 0;
 19524  0122BE  0E00               	movlw	0
 19525  0122C0  0100               	movlb	0	; () banked
 19526  0122C2  6FCF               	movwf	Timer2_Init@RDIV& (0+255),b
 19527  0122C4  0E00               	movlw	0
 19528  0122C6  6FD0               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 19529  0122C8  0E00               	movlw	0
 19530  0122CA  6FD1               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 19531  0122CC  0E00               	movlw	0
 19532  0122CE  6FD2               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;Timer2.c: 30: INDEX ++;
 19536  0122D0  0100               	movlb	0	; () banked
 19537  0122D2  2B77               	incf	Timer2_Init@INDEX& (0+255),f,b
 19538                           
 19539                           ; BSR set to: 0
 19540                           ;Timer2.c: 31: if (INDEX >= 3)
 19541  0122D4  0E02               	movlw	2
 19542  0122D6  0100               	movlb	0	; () banked
 19543  0122D8  6577               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 19544  0122DA  D001               	goto	l1836
 19545  0122DC  D026               	goto	u7530
 19546  0122DE                     l1836:
 19547                           
 19548                           ; BSR set to: 0
 19549                           
 19550                           ; BSR set to: 0
 19551  0122DE  C0D7  F0BD         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 19552  0122E2  C0D8  F0BE         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 19553  0122E6  C0D9  F0BF         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 19554  0122EA  C0DA  F0C0         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 19555  0122EE  0100               	movlb	0	; () banked
 19556  0122F0  5177               	movf	Timer2_Init@INDEX& (0+255),w,b
 19557  0122F2  0D01               	mullw	1
 19558  0122F4  0E78               	movlw	low Timer2_Init@PRESCALE
 19559  0122F6  24F3               	addwf	prodl,w,c
 19560  0122F8  6EF6               	movwf	tblptrl,c
 19561  0122FA  0EFD               	movlw	high Timer2_Init@PRESCALE
 19562  0122FC  20F4               	addwfc	prodh,w,c
 19563  0122FE  6EF7               	movwf	tblptrh,c
 19564  012300                     	if	1	;There are 3 active tblptr bytes
 19565  012300  6AF8               	clrf	tblptru,c
 19566  012302  0E00               	movlw	low (__mediumconst shr (0+16))
 19567  012304  22F8               	addwfc	tblptru,f,c
 19568  012306                     	endif
 19569  012306  0008               	tblrd		*
 19570  012308  50F5               	movf	tablat,w,c
 19571  01230A  0100               	movlb	0	; () banked
 19572  01230C  6FC1               	movwf	___lldiv@divisor& (0+255),b
 19573  01230E  6BC2               	clrf	(___lldiv@divisor+1)& (0+255),b
 19574  012310  6BC3               	clrf	(___lldiv@divisor+2)& (0+255),b
 19575  012312  6BC4               	clrf	(___lldiv@divisor+3)& (0+255),b
 19576  012314  ECB4  F095         	call	___lldiv	;wreg free
 19577  012318  0100               	movlb	0	; () banked
 19578  01231A  51C0               	movf	(?___lldiv+3)& (0+255),w,b
 19579  01231C  0100               	movlb	0	; () banked
 19580  01231E  11BF               	iorwf	(?___lldiv+2)& (0+255),w,b
 19581  012320  E1CE               	bnz	l11006
 19582  012322  0100               	movlb	0	; () banked
 19583  012324  05BE               	decf	(?___lldiv+1)& (0+255),w,b
 19584  012326  B0D8               	btfsc	status,0,c
 19585  012328  D7CA               	goto	l1835
 19586  01232A                     u7530:
 19587                           
 19588                           ; BSR set to: 0
 19589                           ;Timer2.c: 33: }
 19590                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 19591                           
 19592                           ; BSR set to: 0
 19593  01232A  50CA               	movf	4042,w,c	;volatile
 19594  01232C  0100               	movlb	0	; () banked
 19595  01232E  1977               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19596  012330  0BFC               	andlw	-4
 19597  012332  1977               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19598  012334  6ECA               	movwf	4042,c	;volatile
 19599                           
 19600                           ; BSR set to: 0
 19601                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 19602  012336  84CA               	bsf	4042,2,c	;volatile
 19603                           
 19604                           ; BSR set to: 0
 19605                           ;Timer2.c: 44: Timer2_Clear();
 19606  012338  ECD3  F0A5         	call	_Timer2_Clear	;wreg free
 19607                           
 19608                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 19609  01233C  0100               	movlb	0	; () banked
 19610  01233E  5177               	movf	Timer2_Init@INDEX& (0+255),w,b
 19611  012340  0D01               	mullw	1
 19612  012342  0E78               	movlw	low Timer2_Init@PRESCALE
 19613  012344  24F3               	addwf	prodl,w,c
 19614  012346  6EF6               	movwf	tblptrl,c
 19615  012348  0EFD               	movlw	high Timer2_Init@PRESCALE
 19616  01234A  20F4               	addwfc	prodh,w,c
 19617  01234C  6EF7               	movwf	tblptrh,c
 19618  01234E                     	if	1	;There are 3 active tblptr bytes
 19619  01234E  6AF8               	clrf	tblptru,c
 19620  012350  0E00               	movlw	low (__mediumconst shr (0+16))
 19621  012352  22F8               	addwfc	tblptru,f,c
 19622  012354                     	endif
 19623  012354  0008               	tblrd		*
 19624  012356  CFF5 F076          	movff	tablat,Timer2_Init@PRE
 19625                           
 19626                           ; BSR set to: 0
 19627                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 19628  01235A  0EFF               	movlw	255
 19629  01235C  0100               	movlb	0	; () banked
 19630  01235E  25D7               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 19631  012360  0100               	movlb	0	; () banked
 19632  012362  6F60               	movwf	Timer2_Init@DIV& (0+255),b
 19633  012364  0EFF               	movlw	255
 19634  012366  0100               	movlb	0	; () banked
 19635  012368  21D8               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 19636  01236A  0100               	movlb	0	; () banked
 19637  01236C  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 19638  01236E  0EFF               	movlw	255
 19639  012370  0100               	movlb	0	; () banked
 19640  012372  21D9               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 19641  012374  0100               	movlb	0	; () banked
 19642  012376  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 19643  012378  0EFF               	movlw	255
 19644  01237A  0100               	movlb	0	; () banked
 19645  01237C  21DA               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 19646  01237E  0100               	movlb	0	; () banked
 19647  012380  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 19648                           
 19649                           ; BSR set to: 0
 19650                           ;Timer2.c: 48: INDEX = DIV/PRE;
 19651  012382  C060  F0BD         	movff	Timer2_Init@DIV,___lldiv@dividend
 19652  012386  C061  F0BE         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 19653  01238A  C062  F0BF         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 19654  01238E  C063  F0C0         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 19655  012392  0100               	movlb	0	; () banked
 19656  012394  5176               	movf	Timer2_Init@PRE& (0+255),w,b
 19657  012396  0100               	movlb	0	; () banked
 19658  012398  6FC1               	movwf	___lldiv@divisor& (0+255),b
 19659  01239A  6BC2               	clrf	(___lldiv@divisor+1)& (0+255),b
 19660  01239C  6BC3               	clrf	(___lldiv@divisor+2)& (0+255),b
 19661  01239E  6BC4               	clrf	(___lldiv@divisor+3)& (0+255),b
 19662  0123A0  ECB4  F095         	call	___lldiv	;wreg free
 19663  0123A4  0100               	movlb	0	; () banked
 19664  0123A6  51BD               	movf	?___lldiv& (0+255),w,b
 19665  0123A8  0100               	movlb	0	; () banked
 19666  0123AA  6F77               	movwf	Timer2_Init@INDEX& (0+255),b
 19667                           
 19668                           ; BSR set to: 0
 19669                           ;Timer2.c: 49: PR2 = INDEX;
 19670  0123AC  C077  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 19671                           
 19672                           ; BSR set to: 0
 19673  0123B0  0012               	return		;funcret
 19674  0123B2                     __end_of_Timer2_Init:
 19675                           	opt stack 0
 19676                           tosu	equ	0xFFF
 19677                           tosh	equ	0xFFE
 19678                           tosl	equ	0xFFD
 19679                           pclath	equ	0xFFA
 19680                           tblptru	equ	0xFF8
 19681                           tblptrh	equ	0xFF7
 19682                           tblptrl	equ	0xFF6
 19683                           tablat	equ	0xFF5
 19684                           prodh	equ	0xFF4
 19685                           prodl	equ	0xFF3
 19686                           intcon	equ	0xFF2
 19687                           postinc0	equ	0xFEE
 19688                           wreg	equ	0xFE8
 19689                           indf1	equ	0xFE7
 19690                           postdec1	equ	0xFE5
 19691                           fsr1h	equ	0xFE2
 19692                           fsr1l	equ	0xFE1
 19693                           indf2	equ	0xFDF
 19694                           postinc2	equ	0xFDE
 19695                           postdec2	equ	0xFDD
 19696                           plusw2	equ	0xFDB
 19697                           fsr2h	equ	0xFDA
 19698                           fsr2l	equ	0xFD9
 19699                           status	equ	0xFD8
 19700                           
 19701 ;; *************** function ___lldiv *****************
 19702 ;; Defined at:
 19703 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 19704 ;; Parameters:    Size  Location     Type
 19705 ;;  dividend        4    0[BANK0 ] unsigned long 
 19706 ;;  divisor         4    4[BANK0 ] unsigned long 
 19707 ;; Auto vars:     Size  Location     Type
 19708 ;;  quotient        4    8[BANK0 ] unsigned long 
 19709 ;;  counter         1   12[BANK0 ] unsigned char 
 19710 ;; Return value:  Size  Location     Type
 19711 ;;                  4    0[BANK0 ] unsigned long 
 19712 ;; Registers used:
 19713 ;;		wreg, status,2, status,0
 19714 ;; Tracked objects:
 19715 ;;		On entry : 0/0
 19716 ;;		On exit  : 0/0
 19717 ;;		Unchanged: 0/0
 19718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19719 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19720 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19722 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19723 ;;Total ram usage:       13 bytes
 19724 ;; Hardware stack levels used:    1
 19725 ;; Hardware stack levels required when called:    7
 19726 ;; This function calls:
 19727 ;;		Nothing
 19728 ;; This function is called by:
 19729 ;;		_Timer0_Init
 19730 ;;		_Timer2_Init
 19731 ;;		_printf
 19732 ;;		_rand_between
 19733 ;;		_I2C_Init
 19734 ;; This function uses a non-reentrant model
 19735 ;;
 19736                           
 19737                           	psect	text109
 19738  012B68                     __ptext109:
 19739                           	opt stack 0
 19740  012B68                     ___lldiv:
 19741                           	opt stack 20
 19742                           
 19743                           ; BSR set to: 0
 19744                           ;incstack = 0
 19745  012B68  0E00               	movlw	0
 19746  012B6A  0100               	movlb	0	; () banked
 19747  012B6C  6FC5               	movwf	___lldiv@quotient& (0+255),b
 19748  012B6E  0E00               	movlw	0
 19749  012B70  6FC6               	movwf	(___lldiv@quotient+1)& (0+255),b
 19750  012B72  0E00               	movlw	0
 19751  012B74  6FC7               	movwf	(___lldiv@quotient+2)& (0+255),b
 19752  012B76  0E00               	movlw	0
 19753  012B78  6FC8               	movwf	(___lldiv@quotient+3)& (0+255),b
 19754                           
 19755                           ; BSR set to: 0
 19756  012B7A  0100               	movlb	0	; () banked
 19757  012B7C  51C1               	movf	___lldiv@divisor& (0+255),w,b
 19758  012B7E  0100               	movlb	0	; () banked
 19759  012B80  11C2               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19760  012B82  0100               	movlb	0	; () banked
 19761  012B84  11C3               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19762  012B86  0100               	movlb	0	; () banked
 19763  012B88  11C4               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19764  012B8A  B4D8               	btfsc	status,2,c
 19765  012B8C  D042               	goto	l2458
 19766                           
 19767                           ; BSR set to: 0
 19768  012B8E  0E01               	movlw	1
 19769  012B90  0100               	movlb	0	; () banked
 19770  012B92  6FC9               	movwf	___lldiv@counter& (0+255),b
 19771  012B94  D008               	goto	l2453
 19772  012B96                     
 19773                           ; BSR set to: 0
 19774                           
 19775                           ; BSR set to: 0
 19776  012B96  0100               	movlb	0	; () banked
 19777  012B98  90D8               	bcf	status,0,c
 19778  012B9A  37C1               	rlcf	___lldiv@divisor& (0+255),f,b
 19779  012B9C  37C2               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19780  012B9E  37C3               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19781  012BA0  37C4               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19782  012BA2  0100               	movlb	0	; () banked
 19783  012BA4  2BC9               	incf	___lldiv@counter& (0+255),f,b
 19784  012BA6                     l2453:
 19785                           
 19786                           ; BSR set to: 0
 19787                           
 19788                           ; BSR set to: 0
 19789  012BA6  0100               	movlb	0	; () banked
 19790  012BA8  AFC4               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19791  012BAA  D7F5               	goto	l2454
 19792  012BAC                     u7310:
 19793                           
 19794                           ; BSR set to: 0
 19795                           
 19796                           ; BSR set to: 0
 19797                           
 19798                           ; BSR set to: 0
 19799  012BAC  0100               	movlb	0	; () banked
 19800  012BAE  90D8               	bcf	status,0,c
 19801  012BB0  37C5               	rlcf	___lldiv@quotient& (0+255),f,b
 19802  012BB2  37C6               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19803  012BB4  37C7               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19804  012BB6  37C8               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19805                           
 19806                           ; BSR set to: 0
 19807  012BB8  0100               	movlb	0	; () banked
 19808  012BBA  51C1               	movf	___lldiv@divisor& (0+255),w,b
 19809  012BBC  0100               	movlb	0	; () banked
 19810  012BBE  5DBD               	subwf	___lldiv@dividend& (0+255),w,b
 19811  012BC0  0100               	movlb	0	; () banked
 19812  012BC2  51C2               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19813  012BC4  0100               	movlb	0	; () banked
 19814  012BC6  59BE               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19815  012BC8  0100               	movlb	0	; () banked
 19816  012BCA  51C3               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19817  012BCC  0100               	movlb	0	; () banked
 19818  012BCE  59BF               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19819  012BD0  0100               	movlb	0	; () banked
 19820  012BD2  51C4               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19821  012BD4  0100               	movlb	0	; () banked
 19822  012BD6  59C0               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19823  012BD8  A0D8               	btfss	status,0,c
 19824  012BDA  D012               	goto	l2457
 19825                           
 19826                           ; BSR set to: 0
 19827  012BDC  0100               	movlb	0	; () banked
 19828  012BDE  51C1               	movf	___lldiv@divisor& (0+255),w,b
 19829  012BE0  0100               	movlb	0	; () banked
 19830  012BE2  5FBD               	subwf	___lldiv@dividend& (0+255),f,b
 19831  012BE4  0100               	movlb	0	; () banked
 19832  012BE6  51C2               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19833  012BE8  0100               	movlb	0	; () banked
 19834  012BEA  5BBE               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19835  012BEC  0100               	movlb	0	; () banked
 19836  012BEE  51C3               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19837  012BF0  0100               	movlb	0	; () banked
 19838  012BF2  5BBF               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19839  012BF4  0100               	movlb	0	; () banked
 19840  012BF6  51C4               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19841  012BF8  0100               	movlb	0	; () banked
 19842  012BFA  5BC0               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19843                           
 19844                           ; BSR set to: 0
 19845  012BFC  0100               	movlb	0	; () banked
 19846  012BFE  81C5               	bsf	___lldiv@quotient& (0+255),0,b
 19847  012C00                     l2457:
 19848                           
 19849                           ; BSR set to: 0
 19850                           
 19851                           ; BSR set to: 0
 19852  012C00  0100               	movlb	0	; () banked
 19853  012C02  90D8               	bcf	status,0,c
 19854  012C04  33C4               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19855  012C06  33C3               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19856  012C08  33C2               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19857  012C0A  33C1               	rrcf	___lldiv@divisor& (0+255),f,b
 19858                           
 19859                           ; BSR set to: 0
 19860  012C0C  0100               	movlb	0	; () banked
 19861  012C0E  2FC9               	decfsz	___lldiv@counter& (0+255),f,b
 19862  012C10  D7CD               	goto	u7310
 19863  012C12                     l2458:
 19864                           
 19865                           ; BSR set to: 0
 19866                           
 19867                           ; BSR set to: 0
 19868  012C12  C0C5  F0BD         	movff	___lldiv@quotient,?___lldiv
 19869  012C16  C0C6  F0BE         	movff	___lldiv@quotient+1,?___lldiv+1
 19870  012C1A  C0C7  F0BF         	movff	___lldiv@quotient+2,?___lldiv+2
 19871  012C1E  C0C8  F0C0         	movff	___lldiv@quotient+3,?___lldiv+3
 19872                           
 19873                           ; BSR set to: 0
 19874  012C22  0012               	return		;funcret
 19875  012C24                     __end_of___lldiv:
 19876                           	opt stack 0
 19877                           tosu	equ	0xFFF
 19878                           tosh	equ	0xFFE
 19879                           tosl	equ	0xFFD
 19880                           pclath	equ	0xFFA
 19881                           tblptru	equ	0xFF8
 19882                           tblptrh	equ	0xFF7
 19883                           tblptrl	equ	0xFF6
 19884                           tablat	equ	0xFF5
 19885                           prodh	equ	0xFF4
 19886                           prodl	equ	0xFF3
 19887                           intcon	equ	0xFF2
 19888                           postinc0	equ	0xFEE
 19889                           wreg	equ	0xFE8
 19890                           indf1	equ	0xFE7
 19891                           postdec1	equ	0xFE5
 19892                           fsr1h	equ	0xFE2
 19893                           fsr1l	equ	0xFE1
 19894                           indf2	equ	0xFDF
 19895                           postinc2	equ	0xFDE
 19896                           postdec2	equ	0xFDD
 19897                           plusw2	equ	0xFDB
 19898                           fsr2h	equ	0xFDA
 19899                           fsr2l	equ	0xFD9
 19900                           status	equ	0xFD8
 19901                           
 19902 ;; *************** function _Timer2_Clear *****************
 19903 ;; Defined at:
 19904 ;;		line 3 in file "Library/Timer2.c"
 19905 ;; Parameters:    Size  Location     Type
 19906 ;;		None
 19907 ;; Auto vars:     Size  Location     Type
 19908 ;;		None
 19909 ;; Return value:  Size  Location     Type
 19910 ;;                  1    wreg      void 
 19911 ;; Registers used:
 19912 ;;		None
 19913 ;; Tracked objects:
 19914 ;;		On entry : 0/0
 19915 ;;		On exit  : 0/0
 19916 ;;		Unchanged: 0/0
 19917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19922 ;;Total ram usage:        0 bytes
 19923 ;; Hardware stack levels used:    1
 19924 ;; Hardware stack levels required when called:    7
 19925 ;; This function calls:
 19926 ;;		Nothing
 19927 ;; This function is called by:
 19928 ;;		_Timer2_Init
 19929 ;; This function uses a non-reentrant model
 19930 ;;
 19931                           
 19932                           	psect	text110
 19933  014BA6                     __ptext110:
 19934                           	opt stack 0
 19935  014BA6                     _Timer2_Clear:
 19936                           	opt stack 18
 19937                           
 19938                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;incstack = 0
 19942  014BA6  929E               	bcf	3998,1,c	;volatile
 19943                           
 19944                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 19945  014BA8  929D               	bcf	3997,1,c	;volatile
 19946                           
 19947                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 19948  014BAA  929F               	bcf	3999,1,c	;volatile
 19949  014BAC  0012               	return		;funcret
 19950  014BAE                     __end_of_Timer2_Clear:
 19951                           	opt stack 0
 19952                           tosu	equ	0xFFF
 19953                           tosh	equ	0xFFE
 19954                           tosl	equ	0xFFD
 19955                           pclath	equ	0xFFA
 19956                           tblptru	equ	0xFF8
 19957                           tblptrh	equ	0xFF7
 19958                           tblptrl	equ	0xFF6
 19959                           tablat	equ	0xFF5
 19960                           prodh	equ	0xFF4
 19961                           prodl	equ	0xFF3
 19962                           intcon	equ	0xFF2
 19963                           postinc0	equ	0xFEE
 19964                           wreg	equ	0xFE8
 19965                           indf1	equ	0xFE7
 19966                           postdec1	equ	0xFE5
 19967                           fsr1h	equ	0xFE2
 19968                           fsr1l	equ	0xFE1
 19969                           indf2	equ	0xFDF
 19970                           postinc2	equ	0xFDE
 19971                           postdec2	equ	0xFDD
 19972                           plusw2	equ	0xFDB
 19973                           fsr2h	equ	0xFDA
 19974                           fsr2l	equ	0xFD9
 19975                           status	equ	0xFD8
 19976                           
 19977 ;; *************** function _SPI_DisableISR *****************
 19978 ;; Defined at:
 19979 ;;		line 181 in file "Library/SPI.c"
 19980 ;; Parameters:    Size  Location     Type
 19981 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19982 ;;		 -> SPI1(11), SPI2(11), 
 19983 ;; Auto vars:     Size  Location     Type
 19984 ;;		None
 19985 ;; Return value:  Size  Location     Type
 19986 ;;                  1    wreg      void 
 19987 ;; Registers used:
 19988 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19989 ;; Tracked objects:
 19990 ;;		On entry : 0/0
 19991 ;;		On exit  : 0/0
 19992 ;;		Unchanged: 0/0
 19993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19998 ;;Total ram usage:        2 bytes
 19999 ;; Hardware stack levels used:    1
 20000 ;; Hardware stack levels required when called:    7
 20001 ;; This function calls:
 20002 ;;		Nothing
 20003 ;; This function is called by:
 20004 ;;		_SPI_Init
 20005 ;; This function uses a non-reentrant model
 20006 ;;
 20007                           
 20008                           	psect	text111
 20009  014810                     __ptext111:
 20010                           	opt stack 0
 20011  014810                     _SPI_DisableISR:
 20012                           	opt stack 19
 20013                           
 20014                           ;SPI.c: 183: switch (pInput->mChannel)
 20015                           
 20016                           ;incstack = 0
 20017  014810  D004               	goto	l654
 20018  014812                     l655:
 20019                           
 20020                           ; BSR set to: 0
 20021  014812  969D               	bcf	3997,3,c	;volatile
 20022  014814  0012               	return	
 20023  014816                     l657:
 20024                           
 20025                           ; BSR set to: 0
 20026  014816  9EA3               	bcf	4003,7,c	;volatile
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;SPI.c: 188: };
 20030                           
 20031                           ; BSR set to: 0
 20032                           
 20033                           ;SPI.c: 187: default: return;
 20034  014818  0012               	return	
 20035  01481A                     l654:
 20036                           
 20037                           ; BSR set to: 0
 20038  01481A  0100               	movlb	0	; () banked
 20039  01481C  EE20 F002          	lfsr	2,2
 20040  014820  51BD               	movf	SPI_DisableISR@pInput& (0+255),w,b
 20041  014822  26D9               	addwf	fsr2l,f,c
 20042  014824  51BE               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 20043  014826  22DA               	addwfc	fsr2h,f,c
 20044  014828  50DF               	movf	indf2,w,c
 20045                           
 20046                           ; Switch size 1, requested type "space"
 20047                           ; Number of cases is 2, Range of values is 0 to 1
 20048                           ; switch strategies available:
 20049                           ; Name         Instructions Cycles
 20050                           ; simple_byte            7     4 (average)
 20051                           ;	Chosen strategy is simple_byte
 20052  01482A  0A00               	xorlw	0	; case 0
 20053  01482C  B4D8               	btfsc	status,2,c
 20054  01482E  D7F1               	goto	l655
 20055  014830  0A01               	xorlw	1	; case 1
 20056  014832  A4D8               	btfss	status,2,c
 20057  014834  0012               	return	
 20058  014836  D7EF               	goto	l657
 20059  014838                     __end_of_SPI_DisableISR:
 20060                           	opt stack 0
 20061                           tosu	equ	0xFFF
 20062                           tosh	equ	0xFFE
 20063                           tosl	equ	0xFFD
 20064                           pclath	equ	0xFFA
 20065                           tblptru	equ	0xFF8
 20066                           tblptrh	equ	0xFF7
 20067                           tblptrl	equ	0xFF6
 20068                           tablat	equ	0xFF5
 20069                           prodh	equ	0xFF4
 20070                           prodl	equ	0xFF3
 20071                           intcon	equ	0xFF2
 20072                           postinc0	equ	0xFEE
 20073                           wreg	equ	0xFE8
 20074                           indf1	equ	0xFE7
 20075                           postdec1	equ	0xFE5
 20076                           fsr1h	equ	0xFE2
 20077                           fsr1l	equ	0xFE1
 20078                           indf2	equ	0xFDF
 20079                           postinc2	equ	0xFDE
 20080                           postdec2	equ	0xFDD
 20081                           plusw2	equ	0xFDB
 20082                           fsr2h	equ	0xFDA
 20083                           fsr2l	equ	0xFD9
 20084                           status	equ	0xFD8
 20085                           
 20086 ;; *************** function _SPI_DCS *****************
 20087 ;; Defined at:
 20088 ;;		line 219 in file "Library/SPI.c"
 20089 ;; Parameters:    Size  Location     Type
 20090 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20091 ;;		 -> SPI1(11), SPI2(11), 
 20092 ;; Auto vars:     Size  Location     Type
 20093 ;;		None
 20094 ;; Return value:  Size  Location     Type
 20095 ;;                  1    wreg      void 
 20096 ;; Registers used:
 20097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20098 ;; Tracked objects:
 20099 ;;		On entry : 0/0
 20100 ;;		On exit  : 0/0
 20101 ;;		Unchanged: 0/0
 20102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20107 ;;Total ram usage:        2 bytes
 20108 ;; Hardware stack levels used:    1
 20109 ;; Hardware stack levels required when called:    7
 20110 ;; This function calls:
 20111 ;;		Nothing
 20112 ;; This function is called by:
 20113 ;;		_SPI_Init
 20114 ;; This function uses a non-reentrant model
 20115 ;;
 20116                           
 20117                           	psect	text112
 20118  0146B2                     __ptext112:
 20119                           	opt stack 0
 20120  0146B2                     _SPI_DCS:
 20121                           	opt stack 19
 20122                           
 20123                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 20124                           
 20125                           ; BSR set to: 0
 20126                           ;incstack = 0
 20127  0146B2  0100               	movlb	0	; () banked
 20128  0146B4  EE20 F002          	lfsr	2,2
 20129  0146B8  51BD               	movf	SPI_DCS@pInput& (0+255),w,b
 20130  0146BA  26D9               	addwf	fsr2l,f,c
 20131  0146BC  51BE               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 20132  0146BE  22DA               	addwfc	fsr2h,f,c
 20133  0146C0  50DF               	movf	indf2,w,c
 20134  0146C2  A4D8               	btfss	status,2,c
 20135  0146C4  D007               	goto	l673
 20136                           
 20137                           ; BSR set to: 0
 20138                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 20139  0146C6  C095  FFD9         	movff	_PortC+4,fsr2l
 20140  0146CA  C096  FFDA         	movff	_PortC+5,fsr2h
 20141  0146CE  0100               	movlb	0	; () banked
 20142  0146D0  84DF               	bsf	indf2,2,c
 20143  0146D2  0012               	return	
 20144  0146D4                     l673:
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;SPI.c: 223: else
 20148                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 20149                           
 20150                           ; BSR set to: 0
 20151  0146D4  C08B  FFD9         	movff	_PortD+4,fsr2l
 20152  0146D8  C08C  FFDA         	movff	_PortD+5,fsr2h
 20153  0146DC  0100               	movlb	0	; () banked
 20154  0146DE  8EDF               	bsf	indf2,7,c
 20155  0146E0  0012               	return	
 20156  0146E2                     __end_of_SPI_DCS:
 20157                           	opt stack 0
 20158                           tosu	equ	0xFFF
 20159                           tosh	equ	0xFFE
 20160                           tosl	equ	0xFFD
 20161                           pclath	equ	0xFFA
 20162                           tblptru	equ	0xFF8
 20163                           tblptrh	equ	0xFF7
 20164                           tblptrl	equ	0xFF6
 20165                           tablat	equ	0xFF5
 20166                           prodh	equ	0xFF4
 20167                           prodl	equ	0xFF3
 20168                           intcon	equ	0xFF2
 20169                           postinc0	equ	0xFEE
 20170                           wreg	equ	0xFE8
 20171                           indf1	equ	0xFE7
 20172                           postdec1	equ	0xFE5
 20173                           fsr1h	equ	0xFE2
 20174                           fsr1l	equ	0xFE1
 20175                           indf2	equ	0xFDF
 20176                           postinc2	equ	0xFDE
 20177                           postdec2	equ	0xFDD
 20178                           plusw2	equ	0xFDB
 20179                           fsr2h	equ	0xFDA
 20180                           fsr2l	equ	0xFD9
 20181                           status	equ	0xFD8
 20182                           
 20183 ;; *************** function _Button_Init *****************
 20184 ;; Defined at:
 20185 ;;		line 18 in file "Library/Button.c"
 20186 ;; Parameters:    Size  Location     Type
 20187 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 20188 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 20189 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 20190 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 20191 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 20192 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 20193 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 20194 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 20195 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 20196 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 20197 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 20198 ;; Auto vars:     Size  Location     Type
 20199 ;;		None
 20200 ;; Return value:  Size  Location     Type
 20201 ;;                  1    wreg      void 
 20202 ;; Registers used:
 20203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20204 ;; Tracked objects:
 20205 ;;		On entry : 0/0
 20206 ;;		On exit  : 0/0
 20207 ;;		Unchanged: 0/0
 20208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20209 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20212 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20213 ;;Total ram usage:       13 bytes
 20214 ;; Hardware stack levels used:    1
 20215 ;; Hardware stack levels required when called:   15
 20216 ;; This function calls:
 20217 ;;		_HMI_InitButtons
 20218 ;;		_MXK_InitDIPSwitch
 20219 ;;		_MXK_InitTestButton
 20220 ;; This function is called by:
 20221 ;;		_HMI_Init
 20222 ;;		_FunctInitButton
 20223 ;; This function uses a non-reentrant model
 20224 ;;
 20225                           
 20226                           	psect	text113
 20227  0126B0                     __ptext113:
 20228                           	opt stack 0
 20229  0126B0                     _Button_Init:
 20230                           	opt stack 13
 20231                           
 20232                           ;Button.c: 21: if(pInput==(void*)0)
 20233                           
 20234                           ; BSR set to: 0
 20235                           ;incstack = 0
 20236  0126B0  0101               	movlb	1	; () banked
 20237  0126B2  51BA               	movf	Button_Init@pInput& (0+255),w,b
 20238  0126B4  0101               	movlb	1	; () banked
 20239  0126B6  11BB               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 20240  0126B8  B4D8               	btfsc	status,2,c
 20241  0126BA  0012               	return	
 20242                           
 20243                           ; BSR set to: 1
 20244                           ;Button.c: 23: if(pInitIO==(void*)0)
 20245                           
 20246                           ; BSR set to: 1
 20247                           
 20248                           ; BSR set to: 1
 20249                           ;Button.c: 22: return;
 20250  0126BC  0101               	movlb	1	; () banked
 20251  0126BE  51BE               	movf	Button_Init@pInitIO& (0+255),w,b
 20252  0126C0  0101               	movlb	1	; () banked
 20253  0126C2  11BF               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 20254  0126C4  0101               	movlb	1	; () banked
 20255  0126C6  11C0               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 20256  0126C8  B4D8               	btfsc	status,2,c
 20257  0126CA  0012               	return	
 20258                           
 20259                           ; BSR set to: 1
 20260                           ;Button.c: 25: if(pGetState==(void*)0)
 20261                           
 20262                           ; BSR set to: 1
 20263                           
 20264                           ; BSR set to: 1
 20265                           ;Button.c: 24: return;
 20266  0126CC  0101               	movlb	1	; () banked
 20267  0126CE  51C1               	movf	Button_Init@pGetState& (0+255),w,b
 20268  0126D0  0101               	movlb	1	; () banked
 20269  0126D2  11C2               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 20270  0126D4  0101               	movlb	1	; () banked
 20271  0126D6  11C3               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 20272  0126D8  B4D8               	btfsc	status,2,c
 20273  0126DA  0012               	return	
 20274                           
 20275                           ; BSR set to: 1
 20276                           ;Button.c: 27: if(pFunction==(void*)0)
 20277                           
 20278                           ; BSR set to: 1
 20279                           
 20280                           ; BSR set to: 1
 20281                           ;Button.c: 26: return;
 20282  0126DC  0101               	movlb	1	; () banked
 20283  0126DE  51C4               	movf	Button_Init@pFunction& (0+255),w,b
 20284  0126E0  0101               	movlb	1	; () banked
 20285  0126E2  11C5               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 20286  0126E4  0101               	movlb	1	; () banked
 20287  0126E6  11C6               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 20288  0126E8  B4D8               	btfsc	status,2,c
 20289  0126EA  0012               	return	
 20290                           
 20291                           ; BSR set to: 1
 20292                           ;Button.c: 30: if(pThreshold == 0)
 20293                           
 20294                           ; BSR set to: 1
 20295                           
 20296                           ; BSR set to: 1
 20297                           ;Button.c: 28: return;
 20298  0126EC  0101               	movlb	1	; () banked
 20299  0126EE  51BC               	movf	Button_Init@pThreshold& (0+255),w,b
 20300  0126F0  0101               	movlb	1	; () banked
 20301  0126F2  11BD               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 20302  0126F4  A4D8               	btfss	status,2,c
 20303  0126F6  D005               	goto	l8
 20304                           
 20305                           ; BSR set to: 1
 20306                           ;Button.c: 31: pThreshold = 1;
 20307  0126F8  0E00               	movlw	0
 20308  0126FA  0101               	movlb	1	; () banked
 20309  0126FC  6FBD               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20310  0126FE  0E01               	movlw	1
 20311  012700  6FBC               	movwf	Button_Init@pThreshold& (0+255),b
 20312  012702                     l8:
 20313                           
 20314                           ; BSR set to: 1
 20315                           ;Button.c: 34: pInput->mState = 0;
 20316                           
 20317                           ; BSR set to: 1
 20318  012702  C1BA  FFD9         	movff	Button_Init@pInput,fsr2l
 20319  012706  C1BB  FFDA         	movff	Button_Init@pInput+1,fsr2h
 20320  01270A  0E00               	movlw	0
 20321  01270C  6EDF               	movwf	indf2,c
 20322                           
 20323                           ; BSR set to: 1
 20324                           ;Button.c: 35: pInput->mCount = 0;
 20325  01270E  0101               	movlb	1	; () banked
 20326  012710  EE20 F001          	lfsr	2,1
 20327  012714  51BA               	movf	Button_Init@pInput& (0+255),w,b
 20328  012716  26D9               	addwf	fsr2l,f,c
 20329  012718  51BB               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20330  01271A  22DA               	addwfc	fsr2h,f,c
 20331  01271C  0E00               	movlw	0
 20332  01271E  6EDF               	movwf	indf2,c
 20333                           
 20334                           ; BSR set to: 1
 20335                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 20336  012720  0101               	movlb	1	; () banked
 20337  012722  EE20 F002          	lfsr	2,2
 20338  012726  51BA               	movf	Button_Init@pInput& (0+255),w,b
 20339  012728  26D9               	addwf	fsr2l,f,c
 20340  01272A  51BB               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20341  01272C  22DA               	addwfc	fsr2h,f,c
 20342  01272E  C1BC  FFDE         	movff	Button_Init@pThreshold,postinc2
 20343  012732  C1BD  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 20344                           
 20345                           ; BSR set to: 1
 20346                           ;Button.c: 37: pInput->mFunction = pFunction;
 20347  012736  0101               	movlb	1	; () banked
 20348  012738  EE20 F004          	lfsr	2,4
 20349  01273C  51BA               	movf	Button_Init@pInput& (0+255),w,b
 20350  01273E  26D9               	addwf	fsr2l,f,c
 20351  012740  51BB               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20352  012742  22DA               	addwfc	fsr2h,f,c
 20353  012744  C1C4  FFDE         	movff	Button_Init@pFunction,postinc2
 20354  012748  C1C5  FFDE         	movff	Button_Init@pFunction+1,postinc2
 20355  01274C  C1C6  FFDE         	movff	Button_Init@pFunction+2,postinc2
 20356                           
 20357                           ; BSR set to: 1
 20358                           ;Button.c: 38: pInput->mGetState = pGetState;
 20359  012750  0101               	movlb	1	; () banked
 20360  012752  EE20 F007          	lfsr	2,7
 20361  012756  51BA               	movf	Button_Init@pInput& (0+255),w,b
 20362  012758  26D9               	addwf	fsr2l,f,c
 20363  01275A  51BB               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20364  01275C  22DA               	addwfc	fsr2h,f,c
 20365  01275E  C1C1  FFDE         	movff	Button_Init@pGetState,postinc2
 20366  012762  C1C2  FFDE         	movff	Button_Init@pGetState+1,postinc2
 20367  012766  C1C3  FFDE         	movff	Button_Init@pGetState+2,postinc2
 20368                           
 20369                           ; BSR set to: 1
 20370                           ;Button.c: 41: pInitIO();
 20371  01276A  D801               	call	u8078
 20372  01276C  0012               	return	
 20373  01276E                     u8078:
 20374  01276E  0005               	push	
 20375  012770  6EFA               	movwf	pclath,c
 20376  012772  0101               	movlb	1	; () banked
 20377  012774  51BE               	movf	Button_Init@pInitIO& (0+255),w,b
 20378  012776  6EFD               	movwf	tosl,c
 20379  012778  51BF               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 20380  01277A  6EFE               	movwf	tosh,c
 20381  01277C  51C0               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 20382  01277E  6EFF               	movwf	tosu,c
 20383  012780  50FA               	movf	pclath,w,c
 20384  012782  0012               	return		;indir
 20385  012784                     __end_of_Button_Init:
 20386                           	opt stack 0
 20387                           tosu	equ	0xFFF
 20388                           tosh	equ	0xFFE
 20389                           tosl	equ	0xFFD
 20390                           pclath	equ	0xFFA
 20391                           tblptru	equ	0xFF8
 20392                           tblptrh	equ	0xFF7
 20393                           tblptrl	equ	0xFF6
 20394                           tablat	equ	0xFF5
 20395                           prodh	equ	0xFF4
 20396                           prodl	equ	0xFF3
 20397                           intcon	equ	0xFF2
 20398                           postinc0	equ	0xFEE
 20399                           wreg	equ	0xFE8
 20400                           indf1	equ	0xFE7
 20401                           postdec1	equ	0xFE5
 20402                           fsr1h	equ	0xFE2
 20403                           fsr1l	equ	0xFE1
 20404                           indf2	equ	0xFDF
 20405                           postinc2	equ	0xFDE
 20406                           postdec2	equ	0xFDD
 20407                           plusw2	equ	0xFDB
 20408                           fsr2h	equ	0xFDA
 20409                           fsr2l	equ	0xFD9
 20410                           status	equ	0xFD8
 20411                           
 20412 ;; *************** function _MXK_InitDIPSwitch *****************
 20413 ;; Defined at:
 20414 ;;		line 20 in file "Library/MXK.c"
 20415 ;; Parameters:    Size  Location     Type
 20416 ;;		None
 20417 ;; Auto vars:     Size  Location     Type
 20418 ;;		None
 20419 ;; Return value:  Size  Location     Type
 20420 ;;                  1    wreg      void 
 20421 ;; Registers used:
 20422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20423 ;; Tracked objects:
 20424 ;;		On entry : 0/0
 20425 ;;		On exit  : 0/0
 20426 ;;		Unchanged: 0/0
 20427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20432 ;;Total ram usage:        0 bytes
 20433 ;; Hardware stack levels used:    1
 20434 ;; Hardware stack levels required when called:   14
 20435 ;; This function calls:
 20436 ;;		_Port_SetQuadType
 20437 ;; This function is called by:
 20438 ;;		_FunctInitButton
 20439 ;;		_Button_Init
 20440 ;; This function uses a non-reentrant model
 20441 ;;
 20442                           
 20443                           	psect	text114
 20444  014982                     __ptext114:
 20445                           	opt stack 0
 20446  014982                     _MXK_InitDIPSwitch:
 20447                           	opt stack 13
 20448                           
 20449                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 20450                           
 20451                           ;incstack = 0
 20452  014982  0E87               	movlw	low _PortD
 20453  014984  0100               	movlb	0	; () banked
 20454  014986  6FF3               	movwf	Port_SetQuadType@pInput& (0+255),b
 20455  014988  0E00               	movlw	high _PortD
 20456  01498A  0100               	movlb	0	; () banked
 20457  01498C  6FF4               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 20458  01498E  0E00               	movlw	0
 20459  014990  0100               	movlb	0	; () banked
 20460  014992  6FF5               	movwf	Port_SetQuadType@pQuad& (0+255),b
 20461  014994  0E00               	movlw	0
 20462  014996  0100               	movlb	0	; () banked
 20463  014998  6FF6               	movwf	Port_SetQuadType@pType& (0+255),b
 20464  01499A  EC77  F086         	call	_Port_SetQuadType	;wreg free
 20465  01499E  0012               	return		;funcret
 20466  0149A0                     __end_of_MXK_InitDIPSwitch:
 20467                           	opt stack 0
 20468                           tosu	equ	0xFFF
 20469                           tosh	equ	0xFFE
 20470                           tosl	equ	0xFFD
 20471                           pclath	equ	0xFFA
 20472                           tblptru	equ	0xFF8
 20473                           tblptrh	equ	0xFF7
 20474                           tblptrl	equ	0xFF6
 20475                           tablat	equ	0xFF5
 20476                           prodh	equ	0xFF4
 20477                           prodl	equ	0xFF3
 20478                           intcon	equ	0xFF2
 20479                           postinc0	equ	0xFEE
 20480                           wreg	equ	0xFE8
 20481                           indf1	equ	0xFE7
 20482                           postdec1	equ	0xFE5
 20483                           fsr1h	equ	0xFE2
 20484                           fsr1l	equ	0xFE1
 20485                           indf2	equ	0xFDF
 20486                           postinc2	equ	0xFDE
 20487                           postdec2	equ	0xFDD
 20488                           plusw2	equ	0xFDB
 20489                           fsr2h	equ	0xFDA
 20490                           fsr2l	equ	0xFD9
 20491                           status	equ	0xFD8
 20492                           
 20493 ;; *************** function _HMI_InitButtons *****************
 20494 ;; Defined at:
 20495 ;;		line 21 in file "HMI.c"
 20496 ;; Parameters:    Size  Location     Type
 20497 ;;		None
 20498 ;; Auto vars:     Size  Location     Type
 20499 ;;		None
 20500 ;; Return value:  Size  Location     Type
 20501 ;;                  1    wreg      void 
 20502 ;; Registers used:
 20503 ;;		None
 20504 ;; Tracked objects:
 20505 ;;		On entry : 0/0
 20506 ;;		On exit  : 0/0
 20507 ;;		Unchanged: 0/0
 20508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20513 ;;Total ram usage:        0 bytes
 20514 ;; Hardware stack levels used:    1
 20515 ;; Hardware stack levels required when called:    7
 20516 ;; This function calls:
 20517 ;;		Nothing
 20518 ;; This function is called by:
 20519 ;;		_HMI_Init
 20520 ;;		_Button_Init
 20521 ;; This function uses a non-reentrant model
 20522 ;;
 20523                           
 20524                           	psect	text115
 20525  014BCE                     __ptext115:
 20526                           	opt stack 0
 20527  014BCE                     _HMI_InitButtons:
 20528                           	opt stack 20
 20529                           
 20530                           ;HMI.c: 23: TRISE = 0xFF;
 20531                           
 20532                           ;incstack = 0
 20533  014BCE  6896               	setf	3990,c	;volatile
 20534  014BD0  0012               	return		;funcret
 20535  014BD2                     __end_of_HMI_InitButtons:
 20536                           	opt stack 0
 20537                           tosu	equ	0xFFF
 20538                           tosh	equ	0xFFE
 20539                           tosl	equ	0xFFD
 20540                           pclath	equ	0xFFA
 20541                           tblptru	equ	0xFF8
 20542                           tblptrh	equ	0xFF7
 20543                           tblptrl	equ	0xFF6
 20544                           tablat	equ	0xFF5
 20545                           prodh	equ	0xFF4
 20546                           prodl	equ	0xFF3
 20547                           intcon	equ	0xFF2
 20548                           postinc0	equ	0xFEE
 20549                           wreg	equ	0xFE8
 20550                           indf1	equ	0xFE7
 20551                           postdec1	equ	0xFE5
 20552                           fsr1h	equ	0xFE2
 20553                           fsr1l	equ	0xFE1
 20554                           indf2	equ	0xFDF
 20555                           postinc2	equ	0xFDE
 20556                           postdec2	equ	0xFDD
 20557                           plusw2	equ	0xFDB
 20558                           fsr2h	equ	0xFDA
 20559                           fsr2l	equ	0xFD9
 20560                           status	equ	0xFD8
 20561                           
 20562 ;; *************** function _MXK_InitTestButton *****************
 20563 ;; Defined at:
 20564 ;;		line 10 in file "Library/MXK.c"
 20565 ;; Parameters:    Size  Location     Type
 20566 ;;		None
 20567 ;; Auto vars:     Size  Location     Type
 20568 ;;		None
 20569 ;; Return value:  Size  Location     Type
 20570 ;;                  1    wreg      void 
 20571 ;; Registers used:
 20572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20573 ;; Tracked objects:
 20574 ;;		On entry : 0/0
 20575 ;;		On exit  : 0/0
 20576 ;;		Unchanged: 0/0
 20577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20582 ;;Total ram usage:        0 bytes
 20583 ;; Hardware stack levels used:    1
 20584 ;; Hardware stack levels required when called:   12
 20585 ;; This function calls:
 20586 ;;		_Port_SetPinType
 20587 ;; This function is called by:
 20588 ;;		_FunctInitButton
 20589 ;;		_Button_Init
 20590 ;; This function uses a non-reentrant model
 20591 ;;
 20592                           
 20593                           	psect	text116
 20594  0149A0                     __ptext116:
 20595                           	opt stack 0
 20596  0149A0                     _MXK_InitTestButton:
 20597                           	opt stack 15
 20598                           
 20599                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 20600                           
 20601                           ;incstack = 0
 20602  0149A0  0E95               	movlw	low _PortB
 20603  0149A2  0100               	movlb	0	; () banked
 20604  0149A4  6FE3               	movwf	Port_SetPinType@pInput& (0+255),b
 20605  0149A6  0E01               	movlw	high _PortB
 20606  0149A8  0100               	movlb	0	; () banked
 20607  0149AA  6FE4               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20608  0149AC  0E04               	movlw	4
 20609  0149AE  0100               	movlb	0	; () banked
 20610  0149B0  6FE5               	movwf	Port_SetPinType@pPin& (0+255),b
 20611  0149B2  0E00               	movlw	0
 20612  0149B4  0100               	movlb	0	; () banked
 20613  0149B6  6FE6               	movwf	Port_SetPinType@pType& (0+255),b
 20614  0149B8  ECD5  F08B         	call	_Port_SetPinType	;wreg free
 20615  0149BC  0012               	return		;funcret
 20616  0149BE                     __end_of_MXK_InitTestButton:
 20617                           	opt stack 0
 20618                           tosu	equ	0xFFF
 20619                           tosh	equ	0xFFE
 20620                           tosl	equ	0xFFD
 20621                           pclath	equ	0xFFA
 20622                           tblptru	equ	0xFF8
 20623                           tblptrh	equ	0xFF7
 20624                           tblptrl	equ	0xFF6
 20625                           tablat	equ	0xFF5
 20626                           prodh	equ	0xFF4
 20627                           prodl	equ	0xFF3
 20628                           intcon	equ	0xFF2
 20629                           postinc0	equ	0xFEE
 20630                           wreg	equ	0xFE8
 20631                           indf1	equ	0xFE7
 20632                           postdec1	equ	0xFE5
 20633                           fsr1h	equ	0xFE2
 20634                           fsr1l	equ	0xFE1
 20635                           indf2	equ	0xFDF
 20636                           postinc2	equ	0xFDE
 20637                           postdec2	equ	0xFDD
 20638                           plusw2	equ	0xFDB
 20639                           fsr2h	equ	0xFDA
 20640                           fsr2l	equ	0xFD9
 20641                           status	equ	0xFD8
 20642                           
 20643 ;; *************** function _Port_SetPinType *****************
 20644 ;; Defined at:
 20645 ;;		line 189 in file "Library/Port.c"
 20646 ;; Parameters:    Size  Location     Type
 20647 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20648 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20649 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20650 ;;  pPin            1   40[BANK0 ] enum E6750
 20651 ;;  pType           1   41[BANK0 ] enum E6795
 20652 ;; Auto vars:     Size  Location     Type
 20653 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 20654 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20655 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 20656 ;;  Output          1   42[BANK0 ] enum E6475
 20657 ;; Return value:  Size  Location     Type
 20658 ;;                  1    wreg      enum E6475
 20659 ;; Registers used:
 20660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20661 ;; Tracked objects:
 20662 ;;		On entry : 0/0
 20663 ;;		On exit  : 0/0
 20664 ;;		Unchanged: 0/0
 20665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20666 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20669 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20670 ;;Total ram usage:        7 bytes
 20671 ;; Hardware stack levels used:    1
 20672 ;; Hardware stack levels required when called:   11
 20673 ;; This function calls:
 20674 ;;		_Byte_SetBit
 20675 ;;		_PortProperty_Valid
 20676 ;;		_Word_SetPair
 20677 ;; This function is called by:
 20678 ;;		_Configure_GPIOs
 20679 ;;		_LED_Init
 20680 ;;		_Port_Init
 20681 ;;		_SPI_Init
 20682 ;;		_Motor_Init
 20683 ;;		_MXK_InitTestButton
 20684 ;;		_MXK_Init
 20685 ;;		_I2C_Init
 20686 ;; This function uses a non-reentrant model
 20687 ;;
 20688                           
 20689                           	psect	text117
 20690  0117AA                     __ptext117:
 20691                           	opt stack 0
 20692  0117AA                     _Port_SetPinType:
 20693                           	opt stack 17
 20694                           
 20695                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 20696                           
 20697                           ;incstack = 0
 20698  0117AA  C0E3  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 20699  0117AE  C0E4  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 20700  0117B2  CFDE F0E8          	movff	postinc2,Port_SetPinType@Props
 20701  0117B6  CFDD F0E9          	movff	postdec2,Port_SetPinType@Props+1
 20702                           
 20703                           ;Port.c: 192: ePinError Output = ePinErrorState;
 20704  0117BA  0E05               	movlw	5
 20705  0117BC  0100               	movlb	0	; () banked
 20706  0117BE  6FE7               	movwf	Port_SetPinType@Output& (0+255),b
 20707                           
 20708                           ;Port.c: 193: switch (pType)
 20709  0117C0  D0B5               	goto	l412
 20710  0117C2                     
 20711                           ; BSR set to: 0
 20712                           ;Port.c: 197: {
 20713                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20714                           
 20715                           ; BSR set to: 0
 20716  0117C2  0100               	movlb	0	; () banked
 20717  0117C4  EE20 F002          	lfsr	2,2
 20718  0117C8  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20719  0117CA  26D9               	addwf	fsr2l,f,c
 20720  0117CC  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20721  0117CE  22DA               	addwfc	fsr2h,f,c
 20722  0117D0  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20723  0117D4  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20724  0117D8  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20725  0117DC  0E01               	movlw	1
 20726  0117DE  0100               	movlb	0	; () banked
 20727  0117E0  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20728  0117E2  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20729                           
 20730                           ;Port.c: 203: break;
 20731  0117E6  D0B0               	goto	l414
 20732  0117E8                     
 20733                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 20734  0117E8  C0E8  F0CC         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20735  0117EC  C0E9  F0CD         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20736  0117F0  0E01               	movlw	1
 20737  0117F2  0100               	movlb	0	; () banked
 20738  0117F4  6FCE               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20739  0117F6  C0E5  F0CF         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20740  0117FA  ECAE  F09B         	call	_PortProperty_Valid	;wreg free
 20741  0117FE  0100               	movlb	0	; () banked
 20742  011800  6FE7               	movwf	Port_SetPinType@Output& (0+255),b
 20743  011802  0100               	movlb	0	; () banked
 20744  011804  51E7               	movf	Port_SetPinType@Output& (0+255),w,b
 20745  011806  A4D8               	btfss	status,2,c
 20746  011808  0012               	return	
 20747                           
 20748                           ; BSR set to: 0
 20749                           ;Port.c: 208: {
 20750                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20751  01180A  0100               	movlb	0	; () banked
 20752  01180C  EE20 F002          	lfsr	2,2
 20753  011810  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20754  011812  26D9               	addwf	fsr2l,f,c
 20755  011814  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20756  011816  22DA               	addwfc	fsr2h,f,c
 20757  011818  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20758  01181C  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20759  011820  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20760  011824  0E00               	movlw	0
 20761  011826  0100               	movlb	0	; () banked
 20762  011828  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20763  01182A  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20764                           
 20765                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20766  01182E  0100               	movlb	0	; () banked
 20767  011830  EE20 F004          	lfsr	2,4
 20768  011834  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20769  011836  26D9               	addwf	fsr2l,f,c
 20770  011838  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20771  01183A  22DA               	addwfc	fsr2h,f,c
 20772  01183C  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20773  011840  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20774  011844  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20775  011848  0E00               	movlw	0
 20776  01184A  0100               	movlb	0	; () banked
 20777  01184C  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20778  01184E  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20779                           
 20780                           ;Port.c: 214: break;
 20781  011852  D07A               	goto	l414
 20782  011854                     
 20783                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 20784                           
 20785                           ;Port.c: 218: case eTypeOutputOpenSource:
 20786  011854  C0E8  F0CC         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20787  011858  C0E9  F0CD         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20788  01185C  0E02               	movlw	2
 20789  01185E  0100               	movlb	0	; () banked
 20790  011860  6FCE               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20791  011862  C0E5  F0CF         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20792  011866  ECAE  F09B         	call	_PortProperty_Valid	;wreg free
 20793  01186A  0100               	movlb	0	; () banked
 20794  01186C  6FE7               	movwf	Port_SetPinType@Output& (0+255),b
 20795  01186E  0100               	movlb	0	; () banked
 20796  011870  51E7               	movf	Port_SetPinType@Output& (0+255),w,b
 20797  011872  A4D8               	btfss	status,2,c
 20798  011874  0012               	return	
 20799                           
 20800                           ; BSR set to: 0
 20801                           ;Port.c: 220: {
 20802                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20803  011876  0100               	movlb	0	; () banked
 20804  011878  EE20 F002          	lfsr	2,2
 20805  01187C  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20806  01187E  26D9               	addwf	fsr2l,f,c
 20807  011880  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20808  011882  22DA               	addwfc	fsr2h,f,c
 20809  011884  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20810  011888  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20811  01188C  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20812  011890  0E01               	movlw	1
 20813  011892  0100               	movlb	0	; () banked
 20814  011894  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20815  011896  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20816                           
 20817                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 20818  01189A  0100               	movlb	0	; () banked
 20819  01189C  EE20 F004          	lfsr	2,4
 20820  0118A0  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20821  0118A2  26D9               	addwf	fsr2l,f,c
 20822  0118A4  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20823  0118A6  22DA               	addwfc	fsr2h,f,c
 20824  0118A8  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20825  0118AC  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20826  0118B0  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20827  0118B4  0E01               	movlw	1
 20828  0118B6  0100               	movlb	0	; () banked
 20829  0118B8  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20830  0118BA  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20831                           
 20832                           ;Port.c: 226: break;
 20833  0118BE  D044               	goto	l414
 20834  0118C0                     
 20835                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 20836                           
 20837                           ;Port.c: 230: case eTypeOutputPushPull:
 20838  0118C0  C0E8  F0CC         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20839  0118C4  C0E9  F0CD         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20840  0118C8  0E00               	movlw	0
 20841  0118CA  0100               	movlb	0	; () banked
 20842  0118CC  6FCE               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20843  0118CE  C0E5  F0CF         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20844  0118D2  ECAE  F09B         	call	_PortProperty_Valid	;wreg free
 20845  0118D6  0100               	movlb	0	; () banked
 20846  0118D8  6FE7               	movwf	Port_SetPinType@Output& (0+255),b
 20847  0118DA  0100               	movlb	0	; () banked
 20848  0118DC  51E7               	movf	Port_SetPinType@Output& (0+255),w,b
 20849  0118DE  A4D8               	btfss	status,2,c
 20850  0118E0  0012               	return	
 20851                           
 20852                           ; BSR set to: 0
 20853                           ;Port.c: 232: {
 20854                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20855  0118E2  0100               	movlb	0	; () banked
 20856  0118E4  EE20 F002          	lfsr	2,2
 20857  0118E8  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20858  0118EA  26D9               	addwf	fsr2l,f,c
 20859  0118EC  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20860  0118EE  22DA               	addwfc	fsr2h,f,c
 20861  0118F0  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20862  0118F4  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20863  0118F8  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20864  0118FC  0E00               	movlw	0
 20865  0118FE  0100               	movlb	0	; () banked
 20866  011900  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20867  011902  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20868                           
 20869                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20870  011906  0100               	movlb	0	; () banked
 20871  011908  EE20 F004          	lfsr	2,4
 20872  01190C  51E3               	movf	Port_SetPinType@pInput& (0+255),w,b
 20873  01190E  26D9               	addwf	fsr2l,f,c
 20874  011910  51E4               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20875  011912  22DA               	addwfc	fsr2h,f,c
 20876  011914  CFDE F0BD          	movff	postinc2,Byte_SetBit@pInput
 20877  011918  CFDD F0BE          	movff	postdec2,Byte_SetBit@pInput+1
 20878  01191C  C0E5  F0BF         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20879  011920  0E00               	movlw	0
 20880  011922  0100               	movlb	0	; () banked
 20881  011924  6FC0               	movwf	Byte_SetBit@pValue& (0+255),b
 20882  011926  ECC7  F09E         	call	_Byte_SetBit	;wreg free
 20883                           
 20884                           ;Port.c: 239: }
 20885                           
 20886                           ;Port.c: 238: break;
 20887  01192A  D00E               	goto	l414
 20888  01192C                     l412:
 20889  01192C  0100               	movlb	0	; () banked
 20890  01192E  51E6               	movf	Port_SetPinType@pType& (0+255),w,b
 20891                           
 20892                           ; Switch size 1, requested type "space"
 20893                           ; Number of cases is 4, Range of values is 0 to 3
 20894                           ; switch strategies available:
 20895                           ; Name         Instructions Cycles
 20896                           ; simple_byte           13     7 (average)
 20897                           ;	Chosen strategy is simple_byte
 20898  011930  0A00               	xorlw	0	; case 0
 20899  011932  B4D8               	btfsc	status,2,c
 20900  011934  D746               	goto	l413
 20901  011936  0A01               	xorlw	1	; case 1
 20902  011938  B4D8               	btfsc	status,2,c
 20903  01193A  D756               	goto	l415
 20904  01193C  0A03               	xorlw	3	; case 2
 20905  01193E  B4D8               	btfsc	status,2,c
 20906  011940  D789               	goto	l417
 20907  011942  0A01               	xorlw	1	; case 3
 20908  011944  B4D8               	btfsc	status,2,c
 20909  011946  D7BC               	goto	l421
 20910  011948                     l414:
 20911                           
 20912                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 20913                           
 20914                           ; BSR set to: 0
 20915  011948  0E08               	movlw	8
 20916  01194A  0100               	movlb	0	; () banked
 20917  01194C  25E3               	addwf	Port_SetPinType@pInput& (0+255),w,b
 20918  01194E  0100               	movlb	0	; () banked
 20919  011950  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 20920  011952  0E00               	movlw	0
 20921  011954  0100               	movlb	0	; () banked
 20922  011956  21E4               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 20923  011958  0100               	movlb	0	; () banked
 20924  01195A  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 20925  01195C  C0E5  F0CE         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 20926  011960  C0E6  F0CF         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 20927  011964  EC65  F0A1         	call	_Word_SetPair	;wreg free
 20928  011968  0012               	return	
 20929  01196A                     __end_of_Port_SetPinType:
 20930                           	opt stack 0
 20931                           tosu	equ	0xFFF
 20932                           tosh	equ	0xFFE
 20933                           tosl	equ	0xFFD
 20934                           pclath	equ	0xFFA
 20935                           tblptru	equ	0xFF8
 20936                           tblptrh	equ	0xFF7
 20937                           tblptrl	equ	0xFF6
 20938                           tablat	equ	0xFF5
 20939                           prodh	equ	0xFF4
 20940                           prodl	equ	0xFF3
 20941                           intcon	equ	0xFF2
 20942                           postinc0	equ	0xFEE
 20943                           wreg	equ	0xFE8
 20944                           indf1	equ	0xFE7
 20945                           postdec1	equ	0xFE5
 20946                           fsr1h	equ	0xFE2
 20947                           fsr1l	equ	0xFE1
 20948                           indf2	equ	0xFDF
 20949                           postinc2	equ	0xFDE
 20950                           postdec2	equ	0xFDD
 20951                           plusw2	equ	0xFDB
 20952                           fsr2h	equ	0xFDA
 20953                           fsr2l	equ	0xFD9
 20954                           status	equ	0xFD8
 20955                           
 20956 ;; *************** function _Byte_SetBit *****************
 20957 ;; Defined at:
 20958 ;;		line 32 in file "Library/Types.c"
 20959 ;; Parameters:    Size  Location     Type
 20960 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20961 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20962 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20963 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20964 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20965 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20966 ;;		 -> NULL(0), 
 20967 ;;  pBit            1    2[BANK0 ] unsigned char 
 20968 ;;  pValue          1    3[BANK0 ] unsigned char 
 20969 ;; Auto vars:     Size  Location     Type
 20970 ;;		None
 20971 ;; Return value:  Size  Location     Type
 20972 ;;                  1    wreg      void 
 20973 ;; Registers used:
 20974 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20975 ;; Tracked objects:
 20976 ;;		On entry : 0/0
 20977 ;;		On exit  : 0/0
 20978 ;;		Unchanged: 0/0
 20979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20980 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20982 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20983 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20984 ;;Total ram usage:        7 bytes
 20985 ;; Hardware stack levels used:    1
 20986 ;; Hardware stack levels required when called:    7
 20987 ;; This function calls:
 20988 ;;		Nothing
 20989 ;; This function is called by:
 20990 ;;		_Port_SetPinType
 20991 ;;		_Port_SetPin
 20992 ;;		_SPI_Init
 20993 ;;		_SPI_MinSpeed
 20994 ;;		_SPI_MaxSpeed
 20995 ;;		_Word_SetBit
 20996 ;;		_I2C_Init
 20997 ;; This function uses a non-reentrant model
 20998 ;;
 20999                           
 21000                           	psect	text118
 21001  013D8E                     __ptext118:
 21002                           	opt stack 0
 21003  013D8E                     _Byte_SetBit:
 21004                           	opt stack 12
 21005                           
 21006                           ;Types.c: 34: pValue &= 1;
 21007                           
 21008                           ;incstack = 0
 21009  013D8E  0E01               	movlw	1
 21010  013D90  0100               	movlb	0	; () banked
 21011  013D92  17C0               	andwf	Byte_SetBit@pValue& (0+255),f,b
 21012                           
 21013                           ; BSR set to: 0
 21014                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 21015  013D94  C0BF  F0C1         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21016  013D98  0E01               	movlw	1
 21017  013D9A  0100               	movlb	0	; () banked
 21018  013D9C  6FC2               	movwf	(??_Byte_SetBit+1)& (0+255),b
 21019  013D9E  0100               	movlb	0	; () banked
 21020  013DA0  2BC1               	incf	??_Byte_SetBit& (0+255),f,b
 21021  013DA2  D003               	goto	u6574
 21022  013DA4                     u6575:
 21023  013DA4  0100               	movlb	0	; () banked
 21024  013DA6  90D8               	bcf	status,0,c
 21025  013DA8  37C2               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21026  013DAA                     u6574:
 21027  013DAA  0100               	movlb	0	; () banked
 21028  013DAC  2FC1               	decfsz	??_Byte_SetBit& (0+255),f,b
 21029  013DAE  D7FA               	goto	u6575
 21030  013DB0  0100               	movlb	0	; () banked
 21031  013DB2  51C2               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21032  013DB4  0AFF               	xorlw	255
 21033  013DB6  0100               	movlb	0	; () banked
 21034  013DB8  6FC3               	movwf	(??_Byte_SetBit+2)& (0+255),b
 21035  013DBA  C0BD  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21036  013DBE  C0BE  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21037  013DC2  0100               	movlb	0	; () banked
 21038  013DC4  51C3               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 21039  013DC6  16DF               	andwf	indf2,f,c
 21040                           
 21041                           ; BSR set to: 0
 21042                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 21043  013DC8  C0BF  F0C1         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21044  013DCC  C0C0  F0C2         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 21045  013DD0  0100               	movlb	0	; () banked
 21046  013DD2  2BC1               	incf	??_Byte_SetBit& (0+255),f,b
 21047  013DD4  D003               	goto	u6584
 21048  013DD6                     u6585:
 21049  013DD6  0100               	movlb	0	; () banked
 21050  013DD8  90D8               	bcf	status,0,c
 21051  013DDA  37C2               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21052  013DDC                     u6584:
 21053  013DDC  0100               	movlb	0	; () banked
 21054  013DDE  2FC1               	decfsz	??_Byte_SetBit& (0+255),f,b
 21055  013DE0  D7FA               	goto	u6585
 21056  013DE2  C0BD  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21057  013DE6  C0BE  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21058  013DEA  0100               	movlb	0	; () banked
 21059  013DEC  51C2               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21060  013DEE  12DF               	iorwf	indf2,f,c
 21061                           
 21062                           ; BSR set to: 0
 21063  013DF0  0012               	return		;funcret
 21064  013DF2                     __end_of_Byte_SetBit:
 21065                           	opt stack 0
 21066                           tosu	equ	0xFFF
 21067                           tosh	equ	0xFFE
 21068                           tosl	equ	0xFFD
 21069                           pclath	equ	0xFFA
 21070                           tblptru	equ	0xFF8
 21071                           tblptrh	equ	0xFF7
 21072                           tblptrl	equ	0xFF6
 21073                           tablat	equ	0xFF5
 21074                           prodh	equ	0xFF4
 21075                           prodl	equ	0xFF3
 21076                           intcon	equ	0xFF2
 21077                           postinc0	equ	0xFEE
 21078                           wreg	equ	0xFE8
 21079                           indf1	equ	0xFE7
 21080                           postdec1	equ	0xFE5
 21081                           fsr1h	equ	0xFE2
 21082                           fsr1l	equ	0xFE1
 21083                           indf2	equ	0xFDF
 21084                           postinc2	equ	0xFDE
 21085                           postdec2	equ	0xFDD
 21086                           plusw2	equ	0xFDB
 21087                           fsr2h	equ	0xFDA
 21088                           fsr2l	equ	0xFD9
 21089                           status	equ	0xFD8
 21090                           
 21091 ;; *************** function _Port_SetQuadType *****************
 21092 ;; Defined at:
 21093 ;;		line 399 in file "Library/Port.c"
 21094 ;; Parameters:    Size  Location     Type
 21095 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 21096 ;;		 -> PortB(10), PortD(10), 
 21097 ;;  pQuad           1   56[BANK0 ] enum E6776
 21098 ;;  pType           1   57[BANK0 ] enum E6795
 21099 ;; Auto vars:     Size  Location     Type
 21100 ;;  Output          1   58[BANK0 ] enum E6475
 21101 ;; Return value:  Size  Location     Type
 21102 ;;                  1    wreg      enum E6475
 21103 ;; Registers used:
 21104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21105 ;; Tracked objects:
 21106 ;;		On entry : 0/0
 21107 ;;		On exit  : 0/0
 21108 ;;		Unchanged: 0/0
 21109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21110 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21113 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21114 ;;Total ram usage:        5 bytes
 21115 ;; Hardware stack levels used:    1
 21116 ;; Hardware stack levels required when called:   13
 21117 ;; This function calls:
 21118 ;;		_Byte_SetQuad
 21119 ;;		_Port_CheckQuadType
 21120 ;;		_Word_SetPair
 21121 ;; This function is called by:
 21122 ;;		_MXK_InitDIPSwitch
 21123 ;;		_MXK_Init
 21124 ;; This function uses a non-reentrant model
 21125 ;;
 21126                           
 21127                           	psect	text119
 21128  010CEE                     __ptext119:
 21129                           	opt stack 0
 21130  010CEE                     _Port_SetQuadType:
 21131                           	opt stack 15
 21132                           
 21133                           ;Port.c: 401: ePinError Output = ePinErrorState;
 21134                           
 21135                           ; BSR set to: 0
 21136                           ;incstack = 0
 21137  010CEE  0E05               	movlw	5
 21138  010CF0  0100               	movlb	0	; () banked
 21139  010CF2  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 21140                           
 21141                           ;Port.c: 403: switch (pType)
 21142  010CF4  D0C7               	goto	l476
 21143  010CF6                     
 21144                           ; BSR set to: 0
 21145                           ;Port.c: 407: {
 21146                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21147                           
 21148                           ; BSR set to: 0
 21149  010CF6  0100               	movlb	0	; () banked
 21150  010CF8  EE20 F002          	lfsr	2,2
 21151  010CFC  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21152  010CFE  26D9               	addwf	fsr2l,f,c
 21153  010D00  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21154  010D02  22DA               	addwfc	fsr2h,f,c
 21155  010D04  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21156  010D08  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21157  010D0C  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21158  010D10  0E0F               	movlw	15
 21159  010D12  0100               	movlb	0	; () banked
 21160  010D14  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21161  010D16  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21162                           
 21163                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21164  010D1A  0100               	movlb	0	; () banked
 21165  010D1C  EE20 F004          	lfsr	2,4
 21166  010D20  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21167  010D22  26D9               	addwf	fsr2l,f,c
 21168  010D24  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21169  010D26  22DA               	addwfc	fsr2h,f,c
 21170  010D28  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21171  010D2C  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21172  010D30  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21173  010D34  0E00               	movlw	0
 21174  010D36  0100               	movlb	0	; () banked
 21175  010D38  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21176  010D3A  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21177                           
 21178                           ;Port.c: 413: }
 21179                           ;Port.c: 415: break;
 21180  010D3E  D0B0               	goto	l478
 21181  010D40                     
 21182                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21183  010D40  C0F3  F0EC         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21184  010D44  C0F4  F0ED         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21185  010D48  C0F5  F0EE         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21186  010D4C  0E03               	movlw	3
 21187  010D4E  0100               	movlb	0	; () banked
 21188  010D50  6FEF               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21189  010D52  EC89  F09F         	call	_Port_CheckQuadType	;wreg free
 21190  010D56  0100               	movlb	0	; () banked
 21191  010D58  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 21192  010D5A  0100               	movlb	0	; () banked
 21193  010D5C  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
 21194  010D5E  A4D8               	btfss	status,2,c
 21195  010D60  0012               	return	
 21196                           
 21197                           ; BSR set to: 0
 21198                           ;Port.c: 418: {
 21199                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21200  010D62  0100               	movlb	0	; () banked
 21201  010D64  EE20 F002          	lfsr	2,2
 21202  010D68  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21203  010D6A  26D9               	addwf	fsr2l,f,c
 21204  010D6C  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21205  010D6E  22DA               	addwfc	fsr2h,f,c
 21206  010D70  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21207  010D74  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21208  010D78  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21209  010D7C  0E00               	movlw	0
 21210  010D7E  0100               	movlb	0	; () banked
 21211  010D80  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21212  010D82  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21213                           
 21214                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21215  010D86  0100               	movlb	0	; () banked
 21216  010D88  EE20 F004          	lfsr	2,4
 21217  010D8C  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21218  010D8E  26D9               	addwf	fsr2l,f,c
 21219  010D90  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21220  010D92  22DA               	addwfc	fsr2h,f,c
 21221  010D94  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21222  010D98  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21223  010D9C  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21224  010DA0  0E00               	movlw	0
 21225  010DA2  0100               	movlb	0	; () banked
 21226  010DA4  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21227  010DA6  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21228                           
 21229                           ;Port.c: 424: }
 21230  010DAA  D07A               	goto	l478
 21231  010DAC                     
 21232                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21233  010DAC  C0F3  F0EC         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21234  010DB0  C0F4  F0ED         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21235  010DB4  C0F5  F0EE         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21236  010DB8  0E03               	movlw	3
 21237  010DBA  0100               	movlb	0	; () banked
 21238  010DBC  6FEF               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21239  010DBE  EC89  F09F         	call	_Port_CheckQuadType	;wreg free
 21240  010DC2  0100               	movlb	0	; () banked
 21241  010DC4  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 21242  010DC6  0100               	movlb	0	; () banked
 21243  010DC8  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
 21244  010DCA  A4D8               	btfss	status,2,c
 21245  010DCC  0012               	return	
 21246                           
 21247                           ; BSR set to: 0
 21248                           ;Port.c: 429: {
 21249                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21250  010DCE  0100               	movlb	0	; () banked
 21251  010DD0  EE20 F002          	lfsr	2,2
 21252  010DD4  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21253  010DD6  26D9               	addwf	fsr2l,f,c
 21254  010DD8  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21255  010DDA  22DA               	addwfc	fsr2h,f,c
 21256  010DDC  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21257  010DE0  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21258  010DE4  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21259  010DE8  0E0F               	movlw	15
 21260  010DEA  0100               	movlb	0	; () banked
 21261  010DEC  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21262  010DEE  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21263                           
 21264                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 21265  010DF2  0100               	movlb	0	; () banked
 21266  010DF4  EE20 F004          	lfsr	2,4
 21267  010DF8  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21268  010DFA  26D9               	addwf	fsr2l,f,c
 21269  010DFC  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21270  010DFE  22DA               	addwfc	fsr2h,f,c
 21271  010E00  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21272  010E04  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21273  010E08  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21274  010E0C  0E0F               	movlw	15
 21275  010E0E  0100               	movlb	0	; () banked
 21276  010E10  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21277  010E12  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21278                           
 21279                           ;Port.c: 435: }
 21280  010E16  D044               	goto	l478
 21281  010E18                     
 21282                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21283  010E18  C0F3  F0EC         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21284  010E1C  C0F4  F0ED         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21285  010E20  C0F5  F0EE         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21286  010E24  0E03               	movlw	3
 21287  010E26  0100               	movlb	0	; () banked
 21288  010E28  6FEF               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21289  010E2A  EC89  F09F         	call	_Port_CheckQuadType	;wreg free
 21290  010E2E  0100               	movlb	0	; () banked
 21291  010E30  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 21292  010E32  0100               	movlb	0	; () banked
 21293  010E34  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
 21294  010E36  A4D8               	btfss	status,2,c
 21295  010E38  0012               	return	
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;Port.c: 440: {
 21299                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21300  010E3A  0100               	movlb	0	; () banked
 21301  010E3C  EE20 F002          	lfsr	2,2
 21302  010E40  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21303  010E42  26D9               	addwf	fsr2l,f,c
 21304  010E44  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21305  010E46  22DA               	addwfc	fsr2h,f,c
 21306  010E48  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21307  010E4C  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21308  010E50  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21309  010E54  0E00               	movlw	0
 21310  010E56  0100               	movlb	0	; () banked
 21311  010E58  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21312  010E5A  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21313                           
 21314                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21315  010E5E  0100               	movlb	0	; () banked
 21316  010E60  EE20 F004          	lfsr	2,4
 21317  010E64  51F3               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21318  010E66  26D9               	addwf	fsr2l,f,c
 21319  010E68  51F4               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21320  010E6A  22DA               	addwfc	fsr2h,f,c
 21321  010E6C  CFDE F0C8          	movff	postinc2,Byte_SetQuad@pInput
 21322  010E70  CFDD F0C9          	movff	postdec2,Byte_SetQuad@pInput+1
 21323  010E74  C0F5  F0CA         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21324  010E78  0E00               	movlw	0
 21325  010E7A  0100               	movlb	0	; () banked
 21326  010E7C  6FCB               	movwf	Byte_SetQuad@pValue& (0+255),b
 21327  010E7E  EC64  F0A4         	call	_Byte_SetQuad	;wreg free
 21328                           
 21329                           ;Port.c: 446: }
 21330  010E82  D00E               	goto	l478
 21331  010E84                     l476:
 21332  010E84  0100               	movlb	0	; () banked
 21333  010E86  51F6               	movf	Port_SetQuadType@pType& (0+255),w,b
 21334                           
 21335                           ; Switch size 1, requested type "space"
 21336                           ; Number of cases is 4, Range of values is 0 to 3
 21337                           ; switch strategies available:
 21338                           ; Name         Instructions Cycles
 21339                           ; simple_byte           13     7 (average)
 21340                           ;	Chosen strategy is simple_byte
 21341  010E88  0A00               	xorlw	0	; case 0
 21342  010E8A  B4D8               	btfsc	status,2,c
 21343  010E8C  D734               	goto	l477
 21344  010E8E  0A01               	xorlw	1	; case 1
 21345  010E90  B4D8               	btfsc	status,2,c
 21346  010E92  D756               	goto	l479
 21347  010E94  0A03               	xorlw	3	; case 2
 21348  010E96  B4D8               	btfsc	status,2,c
 21349  010E98  D789               	goto	l483
 21350  010E9A  0A01               	xorlw	1	; case 3
 21351  010E9C  B4D8               	btfsc	status,2,c
 21352  010E9E  D7BC               	goto	l486
 21353  010EA0                     l478:
 21354                           
 21355                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 21356                           
 21357                           ; BSR set to: 0
 21358  010EA0  0E08               	movlw	8
 21359  010EA2  0100               	movlb	0	; () banked
 21360  010EA4  25F3               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21361  010EA6  0100               	movlb	0	; () banked
 21362  010EA8  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 21363  010EAA  0E00               	movlw	0
 21364  010EAC  0100               	movlb	0	; () banked
 21365  010EAE  21F4               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21366  010EB0  0100               	movlb	0	; () banked
 21367  010EB2  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21368  010EB4  0100               	movlb	0	; () banked
 21369  010EB6  51F5               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21370  010EB8  0D04               	mullw	4
 21371  010EBA  CFF3 F0CE          	movff	prodl,Word_SetPair@pPair
 21372  010EBE  C0F6  F0CF         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21373  010EC2  EC65  F0A1         	call	_Word_SetPair	;wreg free
 21374                           
 21375                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 21376  010EC6  0E08               	movlw	8
 21377  010EC8  0100               	movlb	0	; () banked
 21378  010ECA  25F3               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21379  010ECC  0100               	movlb	0	; () banked
 21380  010ECE  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 21381  010ED0  0E00               	movlw	0
 21382  010ED2  0100               	movlb	0	; () banked
 21383  010ED4  21F4               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21384  010ED6  0100               	movlb	0	; () banked
 21385  010ED8  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21386  010EDA  0100               	movlb	0	; () banked
 21387  010EDC  51F5               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21388  010EDE  0D04               	mullw	4
 21389  010EE0  28F3               	incf	prodl,w,c
 21390  010EE2  0100               	movlb	0	; () banked
 21391  010EE4  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 21392  010EE6  C0F6  F0CF         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21393  010EEA  EC65  F0A1         	call	_Word_SetPair	;wreg free
 21394                           
 21395                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 21396  010EEE  0E08               	movlw	8
 21397  010EF0  0100               	movlb	0	; () banked
 21398  010EF2  25F3               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21399  010EF4  0100               	movlb	0	; () banked
 21400  010EF6  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 21401  010EF8  0E00               	movlw	0
 21402  010EFA  0100               	movlb	0	; () banked
 21403  010EFC  21F4               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21404  010EFE  0100               	movlb	0	; () banked
 21405  010F00  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21406  010F02  0100               	movlb	0	; () banked
 21407  010F04  51F5               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21408  010F06  0D04               	mullw	4
 21409  010F08  50F3               	movf	prodl,w,c
 21410  010F0A  0F02               	addlw	2
 21411  010F0C  0100               	movlb	0	; () banked
 21412  010F0E  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 21413  010F10  C0F6  F0CF         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21414  010F14  EC65  F0A1         	call	_Word_SetPair	;wreg free
 21415                           
 21416                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 21417  010F18  0E08               	movlw	8
 21418  010F1A  0100               	movlb	0	; () banked
 21419  010F1C  25F3               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21420  010F1E  0100               	movlb	0	; () banked
 21421  010F20  6FCC               	movwf	Word_SetPair@pInput& (0+255),b
 21422  010F22  0E00               	movlw	0
 21423  010F24  0100               	movlb	0	; () banked
 21424  010F26  21F4               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21425  010F28  0100               	movlb	0	; () banked
 21426  010F2A  6FCD               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21427  010F2C  0100               	movlb	0	; () banked
 21428  010F2E  51F5               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21429  010F30  0D04               	mullw	4
 21430  010F32  50F3               	movf	prodl,w,c
 21431  010F34  0F03               	addlw	3
 21432  010F36  0100               	movlb	0	; () banked
 21433  010F38  6FCE               	movwf	Word_SetPair@pPair& (0+255),b
 21434  010F3A  C0F6  F0CF         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21435  010F3E  EC65  F0A1         	call	_Word_SetPair	;wreg free
 21436  010F42  0012               	return	
 21437  010F44                     __end_of_Port_SetQuadType:
 21438                           	opt stack 0
 21439                           tosu	equ	0xFFF
 21440                           tosh	equ	0xFFE
 21441                           tosl	equ	0xFFD
 21442                           pclath	equ	0xFFA
 21443                           tblptru	equ	0xFF8
 21444                           tblptrh	equ	0xFF7
 21445                           tblptrl	equ	0xFF6
 21446                           tablat	equ	0xFF5
 21447                           prodh	equ	0xFF4
 21448                           prodl	equ	0xFF3
 21449                           intcon	equ	0xFF2
 21450                           postinc0	equ	0xFEE
 21451                           wreg	equ	0xFE8
 21452                           indf1	equ	0xFE7
 21453                           postdec1	equ	0xFE5
 21454                           fsr1h	equ	0xFE2
 21455                           fsr1l	equ	0xFE1
 21456                           indf2	equ	0xFDF
 21457                           postinc2	equ	0xFDE
 21458                           postdec2	equ	0xFDD
 21459                           plusw2	equ	0xFDB
 21460                           fsr2h	equ	0xFDA
 21461                           fsr2l	equ	0xFD9
 21462                           status	equ	0xFD8
 21463                           
 21464 ;; *************** function _Word_SetPair *****************
 21465 ;; Defined at:
 21466 ;;		line 149 in file "Library/Types.c"
 21467 ;; Parameters:    Size  Location     Type
 21468 ;;  pInput          2   15[BANK0 ] PTR struct Word
 21469 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21470 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21471 ;;  pPair           1   17[BANK0 ] unsigned char 
 21472 ;;  pValue          1   18[BANK0 ] unsigned char 
 21473 ;; Auto vars:     Size  Location     Type
 21474 ;;		None
 21475 ;; Return value:  Size  Location     Type
 21476 ;;                  1    wreg      void 
 21477 ;; Registers used:
 21478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21479 ;; Tracked objects:
 21480 ;;		On entry : 0/0
 21481 ;;		On exit  : 0/0
 21482 ;;		Unchanged: 0/0
 21483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21487 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21488 ;;Total ram usage:        4 bytes
 21489 ;; Hardware stack levels used:    1
 21490 ;; Hardware stack levels required when called:    9
 21491 ;; This function calls:
 21492 ;;		_Byte_SetPair
 21493 ;; This function is called by:
 21494 ;;		_Port_SetPinType
 21495 ;;		_Port_SetQuadType
 21496 ;;		_Port_SetType
 21497 ;;		_Port_SetPairType
 21498 ;;		_PortProperty_Init
 21499 ;; This function uses a non-reentrant model
 21500 ;;
 21501                           
 21502                           	psect	text120
 21503  0142CA                     __ptext120:
 21504                           	opt stack 0
 21505  0142CA                     _Word_SetPair:
 21506                           	opt stack 18
 21507                           
 21508                           ;Types.c: 151: if (pPair >= 4)
 21509                           
 21510                           ;incstack = 0
 21511  0142CA  0E03               	movlw	3
 21512  0142CC  0100               	movlb	0	; () banked
 21513  0142CE  65CE               	cpfsgt	Word_SetPair@pPair& (0+255),b
 21514  0142D0  D014               	goto	l776
 21515                           
 21516                           ; BSR set to: 0
 21517                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 21518  0142D2  0E01               	movlw	1
 21519  0142D4  0100               	movlb	0	; () banked
 21520  0142D6  25CC               	addwf	Word_SetPair@pInput& (0+255),w,b
 21521  0142D8  0100               	movlb	0	; () banked
 21522  0142DA  6FC8               	movwf	Byte_SetPair@pInput& (0+255),b
 21523  0142DC  0E00               	movlw	0
 21524  0142DE  0100               	movlb	0	; () banked
 21525  0142E0  21CD               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 21526  0142E2  0100               	movlb	0	; () banked
 21527  0142E4  6FC9               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 21528  0142E6  0100               	movlb	0	; () banked
 21529  0142E8  51CE               	movf	Word_SetPair@pPair& (0+255),w,b
 21530  0142EA  0FFC               	addlw	252
 21531  0142EC  0100               	movlb	0	; () banked
 21532  0142EE  6FCA               	movwf	Byte_SetPair@pPair& (0+255),b
 21533  0142F0  C0CF  F0CB         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21534  0142F4  EC53  F0A4         	call	_Byte_SetPair	;wreg free
 21535  0142F8  0012               	return	
 21536  0142FA                     l776:
 21537                           
 21538                           ;Types.c: 153: else
 21539                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 21540  0142FA  C0CC  F0C8         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 21541  0142FE  C0CD  F0C9         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 21542  014302  C0CE  F0CA         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 21543  014306  C0CF  F0CB         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21544  01430A  EC53  F0A4         	call	_Byte_SetPair	;wreg free
 21545  01430E  0012               	return	
 21546  014310                     __end_of_Word_SetPair:
 21547                           	opt stack 0
 21548                           tosu	equ	0xFFF
 21549                           tosh	equ	0xFFE
 21550                           tosl	equ	0xFFD
 21551                           pclath	equ	0xFFA
 21552                           tblptru	equ	0xFF8
 21553                           tblptrh	equ	0xFF7
 21554                           tblptrl	equ	0xFF6
 21555                           tablat	equ	0xFF5
 21556                           prodh	equ	0xFF4
 21557                           prodl	equ	0xFF3
 21558                           intcon	equ	0xFF2
 21559                           postinc0	equ	0xFEE
 21560                           wreg	equ	0xFE8
 21561                           indf1	equ	0xFE7
 21562                           postdec1	equ	0xFE5
 21563                           fsr1h	equ	0xFE2
 21564                           fsr1l	equ	0xFE1
 21565                           indf2	equ	0xFDF
 21566                           postinc2	equ	0xFDE
 21567                           postdec2	equ	0xFDD
 21568                           plusw2	equ	0xFDB
 21569                           fsr2h	equ	0xFDA
 21570                           fsr2l	equ	0xFD9
 21571                           status	equ	0xFD8
 21572                           
 21573 ;; *************** function _Byte_SetPair *****************
 21574 ;; Defined at:
 21575 ;;		line 83 in file "Library/Types.c"
 21576 ;; Parameters:    Size  Location     Type
 21577 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 21578 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21579 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21580 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 21581 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 21582 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 21583 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 21584 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 21585 ;;		 -> NULL(0), 
 21586 ;;  pPair           1   13[BANK0 ] unsigned char 
 21587 ;;  pValue          1   14[BANK0 ] unsigned char 
 21588 ;; Auto vars:     Size  Location     Type
 21589 ;;		None
 21590 ;; Return value:  Size  Location     Type
 21591 ;;                  1    wreg      void 
 21592 ;; Registers used:
 21593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21594 ;; Tracked objects:
 21595 ;;		On entry : 0/0
 21596 ;;		On exit  : 0/0
 21597 ;;		Unchanged: 0/0
 21598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21599 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21603 ;;Total ram usage:        4 bytes
 21604 ;; Hardware stack levels used:    1
 21605 ;; Hardware stack levels required when called:    8
 21606 ;; This function calls:
 21607 ;;		_Byte_SetZone
 21608 ;; This function is called by:
 21609 ;;		_Word_SetPair
 21610 ;;		_Port_SetPairType
 21611 ;;		_Port_SetPair
 21612 ;; This function uses a non-reentrant model
 21613 ;;
 21614                           
 21615                           	psect	text121
 21616  0148A6                     __ptext121:
 21617                           	opt stack 0
 21618  0148A6                     _Byte_SetPair:
 21619                           	opt stack 18
 21620                           
 21621                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 21622                           
 21623                           ;incstack = 0
 21624  0148A6  C0C8  F0BD         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 21625  0148AA  C0C9  F0BE         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 21626  0148AE  0E04               	movlw	4
 21627  0148B0  0100               	movlb	0	; () banked
 21628  0148B2  6FBF               	movwf	Byte_SetZone@pMax& (0+255),b
 21629  0148B4  C0CA  F0C0         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 21630  0148B8  0E02               	movlw	2
 21631  0148BA  0100               	movlb	0	; () banked
 21632  0148BC  6FC1               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21633  0148BE  C0CB  F0C2         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 21634  0148C2  EC6F  F096         	call	_Byte_SetZone	;wreg free
 21635  0148C6  0012               	return		;funcret
 21636  0148C8                     __end_of_Byte_SetPair:
 21637                           	opt stack 0
 21638                           tosu	equ	0xFFF
 21639                           tosh	equ	0xFFE
 21640                           tosl	equ	0xFFD
 21641                           pclath	equ	0xFFA
 21642                           tblptru	equ	0xFF8
 21643                           tblptrh	equ	0xFF7
 21644                           tblptrl	equ	0xFF6
 21645                           tablat	equ	0xFF5
 21646                           prodh	equ	0xFF4
 21647                           prodl	equ	0xFF3
 21648                           intcon	equ	0xFF2
 21649                           postinc0	equ	0xFEE
 21650                           wreg	equ	0xFE8
 21651                           indf1	equ	0xFE7
 21652                           postdec1	equ	0xFE5
 21653                           fsr1h	equ	0xFE2
 21654                           fsr1l	equ	0xFE1
 21655                           indf2	equ	0xFDF
 21656                           postinc2	equ	0xFDE
 21657                           postdec2	equ	0xFDD
 21658                           plusw2	equ	0xFDB
 21659                           fsr2h	equ	0xFDA
 21660                           fsr2l	equ	0xFD9
 21661                           status	equ	0xFD8
 21662                           
 21663 ;; *************** function _Port_CheckQuadType *****************
 21664 ;; Defined at:
 21665 ;;		line 126 in file "Library/Port.c"
 21666 ;; Parameters:    Size  Location     Type
 21667 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 21668 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21669 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21670 ;;  pQuad           1   49[BANK0 ] enum E6776
 21671 ;;  pDrive          1   50[BANK0 ] enum E6469
 21672 ;; Auto vars:     Size  Location     Type
 21673 ;;  Output          1   53[BANK0 ] enum E6475
 21674 ;;  Pair2           1   52[BANK0 ] enum E6760
 21675 ;;  Pair1           1   51[BANK0 ] enum E6760
 21676 ;; Return value:  Size  Location     Type
 21677 ;;                  1    wreg      enum E6475
 21678 ;; Registers used:
 21679 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21680 ;; Tracked objects:
 21681 ;;		On entry : 0/0
 21682 ;;		On exit  : 0/0
 21683 ;;		Unchanged: 0/0
 21684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21685 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21686 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21688 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21689 ;;Total ram usage:        7 bytes
 21690 ;; Hardware stack levels used:    1
 21691 ;; Hardware stack levels required when called:   12
 21692 ;; This function calls:
 21693 ;;		_Port_CheckPairType
 21694 ;; This function is called by:
 21695 ;;		_Port_CheckPortType
 21696 ;;		_Port_SetQuadType
 21697 ;; This function uses a non-reentrant model
 21698 ;;
 21699                           
 21700                           	psect	text122
 21701  013F12                     __ptext122:
 21702                           	opt stack 0
 21703  013F12                     _Port_CheckQuadType:
 21704                           	opt stack 14
 21705                           
 21706                           ;Port.c: 128: ePinError Output = ePinErrorState;
 21707                           
 21708                           ;incstack = 0
 21709  013F12  0E05               	movlw	5
 21710  013F14  0100               	movlb	0	; () banked
 21711  013F16  6FF2               	movwf	Port_CheckQuadType@Output& (0+255),b
 21712                           
 21713                           ; BSR set to: 0
 21714                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 21715  013F18  0100               	movlb	0	; () banked
 21716  013F1A  51EE               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21717  013F1C  0D02               	mullw	2
 21718  013F1E  CFF3 F0F0          	movff	prodl,Port_CheckQuadType@Pair1
 21719                           
 21720                           ; BSR set to: 0
 21721                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 21722  013F22  0100               	movlb	0	; () banked
 21723  013F24  51EE               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21724  013F26  0D02               	mullw	2
 21725  013F28  28F3               	incf	prodl,w,c
 21726  013F2A  0100               	movlb	0	; () banked
 21727  013F2C  6FF1               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 21728                           
 21729                           ; BSR set to: 0
 21730                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 21731  013F2E  C0EC  F0E3         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21732  013F32  C0ED  F0E4         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21733  013F36  C0F0  F0E5         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 21734  013F3A  C0EF  F0E6         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21735  013F3E  EC5F  F09E         	call	_Port_CheckPairType	;wreg free
 21736  013F42  0100               	movlb	0	; () banked
 21737  013F44  6FF2               	movwf	Port_CheckQuadType@Output& (0+255),b
 21738  013F46  0100               	movlb	0	; () banked
 21739  013F48  51F2               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21740  013F4A  A4D8               	btfss	status,2,c
 21741  013F4C  D00C               	goto	l393
 21742                           
 21743                           ; BSR set to: 0
 21744                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 21745  013F4E  C0EC  F0E3         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21746  013F52  C0ED  F0E4         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21747  013F56  C0F1  F0E5         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 21748  013F5A  C0EF  F0E6         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21749  013F5E  EC5F  F09E         	call	_Port_CheckPairType	;wreg free
 21750  013F62  0100               	movlb	0	; () banked
 21751  013F64  6FF2               	movwf	Port_CheckQuadType@Output& (0+255),b
 21752  013F66                     l393:
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;Port.c: 136: return Output;
 21756                           
 21757                           ; BSR set to: 0
 21758  013F66  0100               	movlb	0	; () banked
 21759  013F68  51F2               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21760  013F6A  0012               	return	
 21761  013F6C                     __end_of_Port_CheckQuadType:
 21762                           	opt stack 0
 21763                           tosu	equ	0xFFF
 21764                           tosh	equ	0xFFE
 21765                           tosl	equ	0xFFD
 21766                           pclath	equ	0xFFA
 21767                           tblptru	equ	0xFF8
 21768                           tblptrh	equ	0xFF7
 21769                           tblptrl	equ	0xFF6
 21770                           tablat	equ	0xFF5
 21771                           prodh	equ	0xFF4
 21772                           prodl	equ	0xFF3
 21773                           intcon	equ	0xFF2
 21774                           postinc0	equ	0xFEE
 21775                           wreg	equ	0xFE8
 21776                           indf1	equ	0xFE7
 21777                           postdec1	equ	0xFE5
 21778                           fsr1h	equ	0xFE2
 21779                           fsr1l	equ	0xFE1
 21780                           indf2	equ	0xFDF
 21781                           postinc2	equ	0xFDE
 21782                           postdec2	equ	0xFDD
 21783                           plusw2	equ	0xFDB
 21784                           fsr2h	equ	0xFDA
 21785                           fsr2l	equ	0xFD9
 21786                           status	equ	0xFD8
 21787                           
 21788 ;; *************** function _Port_CheckPairType *****************
 21789 ;; Defined at:
 21790 ;;		line 112 in file "Library/Port.c"
 21791 ;; Parameters:    Size  Location     Type
 21792 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21793 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21794 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21795 ;;  pPair           1   40[BANK0 ] enum E6760
 21796 ;;  pDrive          1   41[BANK0 ] enum E6469
 21797 ;; Auto vars:     Size  Location     Type
 21798 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 21799 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21800 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21801 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21802 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21803 ;;  Output          1   44[BANK0 ] enum E6475
 21804 ;;  Pin2            1   43[BANK0 ] enum E6750
 21805 ;;  Pin1            1   42[BANK0 ] enum E6750
 21806 ;; Return value:  Size  Location     Type
 21807 ;;                  1    wreg      enum E6475
 21808 ;; Registers used:
 21809 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21810 ;; Tracked objects:
 21811 ;;		On entry : 0/0
 21812 ;;		On exit  : 0/0
 21813 ;;		Unchanged: 0/0
 21814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21815 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21816 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21818 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21819 ;;Total ram usage:        9 bytes
 21820 ;; Hardware stack levels used:    1
 21821 ;; Hardware stack levels required when called:   11
 21822 ;; This function calls:
 21823 ;;		_PortProperty_Valid
 21824 ;; This function is called by:
 21825 ;;		_Port_CheckQuadType
 21826 ;;		_Port_SetPairType
 21827 ;; This function uses a non-reentrant model
 21828 ;;
 21829                           
 21830                           	psect	text123
 21831  013CBE                     __ptext123:
 21832                           	opt stack 0
 21833  013CBE                     _Port_CheckPairType:
 21834                           	opt stack 14
 21835                           
 21836                           ;Port.c: 114: ePinError Output = ePinErrorState;
 21837                           
 21838                           ; BSR set to: 0
 21839                           ;incstack = 0
 21840  013CBE  0E05               	movlw	5
 21841  013CC0  0100               	movlb	0	; () banked
 21842  013CC2  6FE9               	movwf	Port_CheckPairType@Output& (0+255),b
 21843                           
 21844                           ; BSR set to: 0
 21845                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 21846  013CC4  C0E3  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 21847  013CC8  C0E4  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 21848  013CCC  CFDE F0EA          	movff	postinc2,Port_CheckPairType@Props
 21849  013CD0  CFDD F0EB          	movff	postdec2,Port_CheckPairType@Props+1
 21850                           
 21851                           ; BSR set to: 0
 21852                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 21853  013CD4  0100               	movlb	0	; () banked
 21854  013CD6  51E5               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21855  013CD8  0D02               	mullw	2
 21856  013CDA  CFF3 F0E7          	movff	prodl,Port_CheckPairType@Pin1
 21857                           
 21858                           ; BSR set to: 0
 21859                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 21860  013CDE  0100               	movlb	0	; () banked
 21861  013CE0  51E5               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21862  013CE2  0D02               	mullw	2
 21863  013CE4  28F3               	incf	prodl,w,c
 21864  013CE6  0100               	movlb	0	; () banked
 21865  013CE8  6FE8               	movwf	Port_CheckPairType@Pin2& (0+255),b
 21866                           
 21867                           ; BSR set to: 0
 21868                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 21869  013CEA  C0EA  F0CC         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21870  013CEE  C0EB  F0CD         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21871  013CF2  C0E6  F0CE         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21872  013CF6  C0E7  F0CF         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 21873  013CFA  ECAE  F09B         	call	_PortProperty_Valid	;wreg free
 21874  013CFE  0100               	movlb	0	; () banked
 21875  013D00  6FE9               	movwf	Port_CheckPairType@Output& (0+255),b
 21876  013D02  0100               	movlb	0	; () banked
 21877  013D04  51E9               	movf	Port_CheckPairType@Output& (0+255),w,b
 21878  013D06  A4D8               	btfss	status,2,c
 21879  013D08  D00C               	goto	l389
 21880                           
 21881                           ; BSR set to: 0
 21882                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 21883  013D0A  C0EA  F0CC         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21884  013D0E  C0EB  F0CD         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21885  013D12  C0E6  F0CE         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21886  013D16  C0E8  F0CF         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 21887  013D1A  ECAE  F09B         	call	_PortProperty_Valid	;wreg free
 21888  013D1E  0100               	movlb	0	; () banked
 21889  013D20  6FE9               	movwf	Port_CheckPairType@Output& (0+255),b
 21890  013D22                     l389:
 21891                           
 21892                           ; BSR set to: 0
 21893                           ;Port.c: 124: return Output;
 21894                           
 21895                           ; BSR set to: 0
 21896  013D22  0100               	movlb	0	; () banked
 21897  013D24  51E9               	movf	Port_CheckPairType@Output& (0+255),w,b
 21898  013D26  0012               	return	
 21899  013D28                     __end_of_Port_CheckPairType:
 21900                           	opt stack 0
 21901                           tosu	equ	0xFFF
 21902                           tosh	equ	0xFFE
 21903                           tosl	equ	0xFFD
 21904                           pclath	equ	0xFFA
 21905                           tblptru	equ	0xFF8
 21906                           tblptrh	equ	0xFF7
 21907                           tblptrl	equ	0xFF6
 21908                           tablat	equ	0xFF5
 21909                           prodh	equ	0xFF4
 21910                           prodl	equ	0xFF3
 21911                           intcon	equ	0xFF2
 21912                           postinc0	equ	0xFEE
 21913                           wreg	equ	0xFE8
 21914                           indf1	equ	0xFE7
 21915                           postdec1	equ	0xFE5
 21916                           fsr1h	equ	0xFE2
 21917                           fsr1l	equ	0xFE1
 21918                           indf2	equ	0xFDF
 21919                           postinc2	equ	0xFDE
 21920                           postdec2	equ	0xFDD
 21921                           plusw2	equ	0xFDB
 21922                           fsr2h	equ	0xFDA
 21923                           fsr2l	equ	0xFD9
 21924                           status	equ	0xFD8
 21925                           
 21926 ;; *************** function _PortProperty_Valid *****************
 21927 ;; Defined at:
 21928 ;;		line 220 in file "Library/Types.c"
 21929 ;; Parameters:    Size  Location     Type
 21930 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 21931 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21932 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21933 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21934 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21935 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 21936 ;;  pPin            1   18[BANK0 ] unsigned char 
 21937 ;; Auto vars:     Size  Location     Type
 21938 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 21939 ;;  Pair            1   37[BANK0 ] enum E6469
 21940 ;; Return value:  Size  Location     Type
 21941 ;;                  1    wreg      enum E6475
 21942 ;; Registers used:
 21943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21944 ;; Tracked objects:
 21945 ;;		On entry : 0/0
 21946 ;;		On exit  : 0/0
 21947 ;;		Unchanged: 0/0
 21948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21950 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21952 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;Total ram usage:       23 bytes
 21954 ;; Hardware stack levels used:    1
 21955 ;; Hardware stack levels required when called:   10
 21956 ;; This function calls:
 21957 ;;		_Word_GetPair
 21958 ;; This function is called by:
 21959 ;;		_Port_CheckPairType
 21960 ;;		_Port_SetPinType
 21961 ;; This function uses a non-reentrant model
 21962 ;;
 21963                           
 21964                           	psect	text124
 21965  01375C                     __ptext124:
 21966                           	opt stack 0
 21967  01375C                     _PortProperty_Valid:
 21968                           	opt stack 17
 21969                           
 21970                           ;Types.c: 222: ePinDrive Pair;
 21971                           ;Types.c: 223: const ePinError Errors[4][4] =
 21972                           ;Types.c: 224: {
 21973                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 21974                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 21975                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 21976                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 21977                           ;Types.c: 230: };
 21978                           
 21979                           ; BSR set to: 0
 21980                           ;incstack = 0
 21981  01375C  0E5B               	movlw	low PortProperty_Valid@F6830
 21982  01375E  6EF6               	movwf	tblptrl,c
 21983  013760                     	if	1	;There is more than 1 active tblptr byte
 21984  013760  0EFD               	movlw	high PortProperty_Valid@F6830
 21985  013762  6EF7               	movwf	tblptrh,c
 21986  013764                     	endif
 21987  013764                     	if	1	;There are 3 active tblptr bytes
 21988  013764  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 21989  013766  6EF8               	movwf	tblptru,c
 21990  013768                     	endif
 21991  013768  EE20  F0D2         	lfsr	2,PortProperty_Valid@Errors
 21992  01376C  0E0F               	movlw	15
 21993  01376E                     u6970:
 21994  01376E  0009               	tblrd		*+
 21995  013770  CFF5 FFDE          	movff	tablat,postinc2
 21996  013774  06E8               	decf	wreg,f,c
 21997  013776  E2FB               	bc	u6970
 21998                           
 21999                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 22000  013778  C0CC  F0C9         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 22001  01377C  C0CD  F0CA         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 22002  013780  C0CF  F0CB         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 22003  013784  EC49  F0A2         	call	_Word_GetPair	;wreg free
 22004  013788  0100               	movlb	0	; () banked
 22005  01378A  6FE2               	movwf	PortProperty_Valid@Pair& (0+255),b
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 22009  01378C  0E04               	movlw	4
 22010  01378E  0100               	movlb	0	; () banked
 22011  013790  61CE               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 22012  013792  D020               	goto	l819
 22013                           
 22014                           ; BSR set to: 0
 22015  013794  0E04               	movlw	4
 22016  013796  0100               	movlb	0	; () banked
 22017  013798  61E2               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 22018  01379A  D01C               	goto	l819
 22019                           
 22020                           ; BSR set to: 0
 22021                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 22022  01379C  0100               	movlb	0	; () banked
 22023  01379E  51CE               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 22024  0137A0  0D04               	mullw	4
 22025  0137A2  0ED2               	movlw	low PortProperty_Valid@Errors
 22026  0137A4  0100               	movlb	0	; () banked
 22027  0137A6  6FD0               	movwf	??_PortProperty_Valid& (0+255),b
 22028  0137A8  0E00               	movlw	high PortProperty_Valid@Errors
 22029  0137AA  0100               	movlb	0	; () banked
 22030  0137AC  6FD1               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 22031  0137AE  50F3               	movf	prodl,w,c
 22032  0137B0  0100               	movlb	0	; () banked
 22033  0137B2  27D0               	addwf	??_PortProperty_Valid& (0+255),f,b
 22034  0137B4  50F4               	movf	prodh,w,c
 22035  0137B6  0100               	movlb	0	; () banked
 22036  0137B8  23D1               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 22037  0137BA  0100               	movlb	0	; () banked
 22038  0137BC  51E2               	movf	PortProperty_Valid@Pair& (0+255),w,b
 22039  0137BE  0D01               	mullw	1
 22040  0137C0  50F3               	movf	prodl,w,c
 22041  0137C2  0100               	movlb	0	; () banked
 22042  0137C4  25D0               	addwf	??_PortProperty_Valid& (0+255),w,b
 22043  0137C6  6ED9               	movwf	fsr2l,c
 22044  0137C8  50F4               	movf	prodh,w,c
 22045  0137CA  0100               	movlb	0	; () banked
 22046  0137CC  21D1               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 22047  0137CE  6EDA               	movwf	fsr2h,c
 22048  0137D0  50DF               	movf	indf2,w,c
 22049                           
 22050                           ; BSR set to: 0
 22051  0137D2  0012               	return	
 22052  0137D4                     l819:
 22053                           
 22054                           ; BSR set to: 0
 22055                           ;Types.c: 237: return ePinErrorState;
 22056                           
 22057                           ; BSR set to: 0
 22058  0137D4  0E05               	movlw	5
 22059  0137D6  0012               	return	
 22060  0137D8                     __end_of_PortProperty_Valid:
 22061                           	opt stack 0
 22062                           tosu	equ	0xFFF
 22063                           tosh	equ	0xFFE
 22064                           tosl	equ	0xFFD
 22065                           pclath	equ	0xFFA
 22066                           tblptru	equ	0xFF8
 22067                           tblptrh	equ	0xFF7
 22068                           tblptrl	equ	0xFF6
 22069                           tablat	equ	0xFF5
 22070                           prodh	equ	0xFF4
 22071                           prodl	equ	0xFF3
 22072                           intcon	equ	0xFF2
 22073                           postinc0	equ	0xFEE
 22074                           wreg	equ	0xFE8
 22075                           indf1	equ	0xFE7
 22076                           postdec1	equ	0xFE5
 22077                           fsr1h	equ	0xFE2
 22078                           fsr1l	equ	0xFE1
 22079                           indf2	equ	0xFDF
 22080                           postinc2	equ	0xFDE
 22081                           postdec2	equ	0xFDD
 22082                           plusw2	equ	0xFDB
 22083                           fsr2h	equ	0xFDA
 22084                           fsr2l	equ	0xFD9
 22085                           status	equ	0xFD8
 22086                           
 22087 ;; *************** function _Word_GetPair *****************
 22088 ;; Defined at:
 22089 ;;		line 156 in file "Library/Types.c"
 22090 ;; Parameters:    Size  Location     Type
 22091 ;;  pInput          2   12[BANK0 ] PTR struct Word
 22092 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22093 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22094 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22095 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22096 ;;  pPair           1   14[BANK0 ] unsigned char 
 22097 ;; Auto vars:     Size  Location     Type
 22098 ;;		None
 22099 ;; Return value:  Size  Location     Type
 22100 ;;                  1    wreg      unsigned char 
 22101 ;; Registers used:
 22102 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22103 ;; Tracked objects:
 22104 ;;		On entry : 0/0
 22105 ;;		On exit  : 0/0
 22106 ;;		Unchanged: 0/0
 22107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22108 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22111 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22112 ;;Total ram usage:        3 bytes
 22113 ;; Hardware stack levels used:    1
 22114 ;; Hardware stack levels required when called:    9
 22115 ;; This function calls:
 22116 ;;		_Byte_GetPair
 22117 ;; This function is called by:
 22118 ;;		_Port_Init
 22119 ;;		_Port_SetPin
 22120 ;;		_Port_Set
 22121 ;;		_PortProperty_Valid
 22122 ;;		_Port_SetPair
 22123 ;;		_Port_SetQuad
 22124 ;; This function uses a non-reentrant model
 22125 ;;
 22126                           
 22127                           	psect	text125
 22128  014492                     __ptext125:
 22129                           	opt stack 0
 22130  014492                     _Word_GetPair:
 22131                           	opt stack 10
 22132                           
 22133                           ;Types.c: 158: if (pPair >= 4)
 22134                           
 22135                           ; BSR set to: 0
 22136                           ;incstack = 0
 22137  014492  0E03               	movlw	3
 22138  014494  0100               	movlb	0	; () banked
 22139  014496  65CB               	cpfsgt	Word_GetPair@pPair& (0+255),b
 22140  014498  D012               	goto	l781
 22141                           
 22142                           ; BSR set to: 0
 22143                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22144  01449A  0E01               	movlw	1
 22145  01449C  0100               	movlb	0	; () banked
 22146  01449E  25C9               	addwf	Word_GetPair@pInput& (0+255),w,b
 22147  0144A0  0100               	movlb	0	; () banked
 22148  0144A2  6FC6               	movwf	Byte_GetPair@pInput& (0+255),b
 22149  0144A4  0E00               	movlw	0
 22150  0144A6  0100               	movlb	0	; () banked
 22151  0144A8  21CA               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 22152  0144AA  0100               	movlb	0	; () banked
 22153  0144AC  6FC7               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 22154  0144AE  0100               	movlb	0	; () banked
 22155  0144B0  51CB               	movf	Word_GetPair@pPair& (0+255),w,b
 22156  0144B2  0FFC               	addlw	252
 22157  0144B4  0100               	movlb	0	; () banked
 22158  0144B6  6FC8               	movwf	Byte_GetPair@pPair& (0+255),b
 22159  0144B8  ECDF  F0A4         	call	_Byte_GetPair	;wreg free
 22160  0144BC  0012               	return	
 22161  0144BE                     l781:
 22162                           
 22163                           ;Types.c: 160: else
 22164                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22165  0144BE  C0C9  F0C6         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 22166  0144C2  C0CA  F0C7         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 22167  0144C6  C0CB  F0C8         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 22168  0144CA  ECDF  F0A4         	call	_Byte_GetPair	;wreg free
 22169  0144CE  0012               	return	
 22170  0144D0                     __end_of_Word_GetPair:
 22171                           	opt stack 0
 22172                           tosu	equ	0xFFF
 22173                           tosh	equ	0xFFE
 22174                           tosl	equ	0xFFD
 22175                           pclath	equ	0xFFA
 22176                           tblptru	equ	0xFF8
 22177                           tblptrh	equ	0xFF7
 22178                           tblptrl	equ	0xFF6
 22179                           tablat	equ	0xFF5
 22180                           prodh	equ	0xFF4
 22181                           prodl	equ	0xFF3
 22182                           intcon	equ	0xFF2
 22183                           postinc0	equ	0xFEE
 22184                           wreg	equ	0xFE8
 22185                           indf1	equ	0xFE7
 22186                           postdec1	equ	0xFE5
 22187                           fsr1h	equ	0xFE2
 22188                           fsr1l	equ	0xFE1
 22189                           indf2	equ	0xFDF
 22190                           postinc2	equ	0xFDE
 22191                           postdec2	equ	0xFDD
 22192                           plusw2	equ	0xFDB
 22193                           fsr2h	equ	0xFDA
 22194                           fsr2l	equ	0xFD9
 22195                           status	equ	0xFD8
 22196                           
 22197 ;; *************** function _Byte_GetPair *****************
 22198 ;; Defined at:
 22199 ;;		line 87 in file "Library/Types.c"
 22200 ;; Parameters:    Size  Location     Type
 22201 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 22202 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22203 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22204 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22205 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22206 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22207 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22208 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22209 ;;		 -> NULL(0), 
 22210 ;;  pPair           1   11[BANK0 ] unsigned char 
 22211 ;; Auto vars:     Size  Location     Type
 22212 ;;		None
 22213 ;; Return value:  Size  Location     Type
 22214 ;;                  1    wreg      unsigned char 
 22215 ;; Registers used:
 22216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22217 ;; Tracked objects:
 22218 ;;		On entry : 0/0
 22219 ;;		On exit  : 0/0
 22220 ;;		Unchanged: 0/0
 22221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22222 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22226 ;;Total ram usage:        3 bytes
 22227 ;; Hardware stack levels used:    1
 22228 ;; Hardware stack levels required when called:    8
 22229 ;; This function calls:
 22230 ;;		_Byte_GetZone
 22231 ;; This function is called by:
 22232 ;;		_Word_GetPair
 22233 ;; This function uses a non-reentrant model
 22234 ;;
 22235                           
 22236                           	psect	text126
 22237  0149BE                     __ptext126:
 22238                           	opt stack 0
 22239  0149BE                     _Byte_GetPair:
 22240                           	opt stack 10
 22241                           
 22242                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22243                           
 22244                           ;incstack = 0
 22245  0149BE  C0C6  F0BD         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 22246  0149C2  C0C7  F0BE         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 22247  0149C6  0E04               	movlw	4
 22248  0149C8  0100               	movlb	0	; () banked
 22249  0149CA  6FBF               	movwf	Byte_GetZone@pMax& (0+255),b
 22250  0149CC  C0C8  F0C0         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 22251  0149D0  0E02               	movlw	2
 22252  0149D2  0100               	movlb	0	; () banked
 22253  0149D4  6FC1               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 22254  0149D6  EC67  F099         	call	_Byte_GetZone	;wreg free
 22255  0149DA  0012               	return	
 22256  0149DC                     __end_of_Byte_GetPair:
 22257                           	opt stack 0
 22258                           tosu	equ	0xFFF
 22259                           tosh	equ	0xFFE
 22260                           tosl	equ	0xFFD
 22261                           pclath	equ	0xFFA
 22262                           tblptru	equ	0xFF8
 22263                           tblptrh	equ	0xFF7
 22264                           tblptrl	equ	0xFF6
 22265                           tablat	equ	0xFF5
 22266                           prodh	equ	0xFF4
 22267                           prodl	equ	0xFF3
 22268                           intcon	equ	0xFF2
 22269                           postinc0	equ	0xFEE
 22270                           wreg	equ	0xFE8
 22271                           indf1	equ	0xFE7
 22272                           postdec1	equ	0xFE5
 22273                           fsr1h	equ	0xFE2
 22274                           fsr1l	equ	0xFE1
 22275                           indf2	equ	0xFDF
 22276                           postinc2	equ	0xFDE
 22277                           postdec2	equ	0xFDD
 22278                           plusw2	equ	0xFDB
 22279                           fsr2h	equ	0xFDA
 22280                           fsr2l	equ	0xFD9
 22281                           status	equ	0xFD8
 22282                           
 22283 ;; *************** function _Byte_GetZone *****************
 22284 ;; Defined at:
 22285 ;;		line 64 in file "Library/Types.c"
 22286 ;; Parameters:    Size  Location     Type
 22287 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22288 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22289 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22290 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22291 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22292 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22293 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22294 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22295 ;;		 -> NULL(0), 
 22296 ;;  pMax            1    2[BANK0 ] unsigned char 
 22297 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22298 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22299 ;; Auto vars:     Size  Location     Type
 22300 ;;  Output          1    8[BANK0 ] unsigned char 
 22301 ;;  Offset          1    7[BANK0 ] unsigned char 
 22302 ;;  MASK            1    6[BANK0 ] unsigned char 
 22303 ;; Return value:  Size  Location     Type
 22304 ;;                  1    wreg      unsigned char 
 22305 ;; Registers used:
 22306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22307 ;; Tracked objects:
 22308 ;;		On entry : 0/0
 22309 ;;		On exit  : 0/0
 22310 ;;		Unchanged: 0/0
 22311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22312 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22313 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22315 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22316 ;;Total ram usage:        9 bytes
 22317 ;; Hardware stack levels used:    1
 22318 ;; Hardware stack levels required when called:    7
 22319 ;; This function calls:
 22320 ;;		Nothing
 22321 ;; This function is called by:
 22322 ;;		_Byte_GetPair
 22323 ;;		_Byte_GetTriple
 22324 ;;		_Byte_GetQuad
 22325 ;; This function uses a non-reentrant model
 22326 ;;
 22327                           
 22328                           	psect	text127
 22329  0132CE                     __ptext127:
 22330                           	opt stack 0
 22331  0132CE                     _Byte_GetZone:
 22332                           	opt stack 10
 22333                           
 22334                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22335                           
 22336                           ;incstack = 0
 22337  0132CE  C0BD  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 22338  0132D2  C0BE  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 22339  0132D6  0E00               	movlw	low (__mediumconst shr (0+16))
 22340  0132D8  6EF8               	movwf	tblptru,c
 22341  0132DA  0E0F               	movlw	(high __ramtop+-1)
 22342  0132DC  64F7               	cpfsgt	tblptrh,c
 22343  0132DE  D003               	bra	u6537
 22344  0132E0  0008               	tblrd		*
 22345  0132E2  50F5               	movf	tablat,w,c
 22346  0132E4  D005               	bra	u6530
 22347  0132E6                     u6537:
 22348  0132E6  CFF6 FFE9          	movff	tblptrl,fsr0l
 22349  0132EA  CFF7 FFEA          	movff	tblptrh,fsr0h
 22350  0132EE  50EF               	movf	indf0,w,c
 22351  0132F0                     u6530:
 22352  0132F0  0100               	movlb	0	; () banked
 22353  0132F2  6FC5               	movwf	Byte_GetZone@Output& (0+255),b
 22354                           
 22355                           ; BSR set to: 0
 22356                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22357  0132F4  0100               	movlb	0	; () banked
 22358  0132F6  51C1               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22359  0132F8  0D01               	mullw	1
 22360  0132FA  0E6B               	movlw	low _MASKS
 22361  0132FC  24F3               	addwf	prodl,w,c
 22362  0132FE  6EF6               	movwf	tblptrl,c
 22363  013300  0EFD               	movlw	high _MASKS
 22364  013302  20F4               	addwfc	prodh,w,c
 22365  013304  6EF7               	movwf	tblptrh,c
 22366  013306                     	if	1	;There are 3 active tblptr bytes
 22367  013306  6AF8               	clrf	tblptru,c
 22368  013308  0E00               	movlw	low (__mediumconst shr (0+16))
 22369  01330A  22F8               	addwfc	tblptru,f,c
 22370  01330C                     	endif
 22371  01330C  0008               	tblrd		*
 22372  01330E  CFF5 F0C3          	movff	tablat,Byte_GetZone@MASK
 22373                           
 22374                           ; BSR set to: 0
 22375                           ;Types.c: 68: UINT8 Offset = 0;
 22376  013312  0E00               	movlw	0
 22377  013314  0100               	movlb	0	; () banked
 22378  013316  6FC4               	movwf	Byte_GetZone@Offset& (0+255),b
 22379                           
 22380                           ;Types.c: 70: while (pChunk >= pMax)
 22381  013318  D006               	goto	l732
 22382  01331A                     
 22383                           ; BSR set to: 0
 22384                           ;Types.c: 71: {
 22385                           ;Types.c: 72: pChunk -= pMax;
 22386                           
 22387                           ; BSR set to: 0
 22388  01331A  0100               	movlb	0	; () banked
 22389  01331C  51BF               	movf	Byte_GetZone@pMax& (0+255),w,b
 22390  01331E  0100               	movlb	0	; () banked
 22391  013320  5FC0               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 22392                           
 22393                           ; BSR set to: 0
 22394                           ;Types.c: 73: Offset += 1;
 22395  013322  0100               	movlb	0	; () banked
 22396  013324  2BC4               	incf	Byte_GetZone@Offset& (0+255),f,b
 22397  013326                     l732:
 22398                           
 22399                           ; BSR set to: 0
 22400                           
 22401                           ; BSR set to: 0
 22402  013326  0100               	movlb	0	; () banked
 22403  013328  51BF               	movf	Byte_GetZone@pMax& (0+255),w,b
 22404  01332A  0100               	movlb	0	; () banked
 22405  01332C  5DC0               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 22406  01332E  B0D8               	btfsc	status,0,c
 22407  013330  D7F4               	goto	l733
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;Types.c: 74: }
 22411                           ;Types.c: 75: pChunk *= pChunkSize;
 22412                           
 22413                           ; BSR set to: 0
 22414  013332  0100               	movlb	0	; () banked
 22415  013334  51C1               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22416  013336  0100               	movlb	0	; () banked
 22417  013338  03C0               	mulwf	Byte_GetZone@pChunk& (0+255),b
 22418  01333A  50F3               	movf	prodl,w,c
 22419  01333C  6FC0               	movwf	Byte_GetZone@pChunk& (0+255),b
 22420                           
 22421                           ; BSR set to: 0
 22422                           ;Types.c: 76: pChunk += Offset;
 22423  01333E  0100               	movlb	0	; () banked
 22424  013340  51C4               	movf	Byte_GetZone@Offset& (0+255),w,b
 22425  013342  0100               	movlb	0	; () banked
 22426  013344  27C0               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 22427                           
 22428                           ; BSR set to: 0
 22429                           ;Types.c: 78: Output >>= pChunk;
 22430  013346  0100               	movlb	0	; () banked
 22431  013348  29C0               	incf	Byte_GetZone@pChunk& (0+255),w,b
 22432  01334A  0100               	movlb	0	; () banked
 22433  01334C  6FC2               	movwf	??_Byte_GetZone& (0+255),b
 22434  01334E  D003               	goto	u6550
 22435  013350                     u6555:
 22436  013350  0100               	movlb	0	; () banked
 22437  013352  90D8               	bcf	status,0,c
 22438  013354  33C5               	rrcf	Byte_GetZone@Output& (0+255),f,b
 22439  013356                     u6550:
 22440  013356  0100               	movlb	0	; () banked
 22441  013358  2FC2               	decfsz	??_Byte_GetZone& (0+255),f,b
 22442  01335A  D7FA               	goto	u6555
 22443                           
 22444                           ;Types.c: 79: Output &= MASK;
 22445  01335C  0100               	movlb	0	; () banked
 22446  01335E  51C3               	movf	Byte_GetZone@MASK& (0+255),w,b
 22447  013360  0100               	movlb	0	; () banked
 22448  013362  17C5               	andwf	Byte_GetZone@Output& (0+255),f,b
 22449                           
 22450                           ; BSR set to: 0
 22451                           ;Types.c: 80: return Output;
 22452  013364  0100               	movlb	0	; () banked
 22453  013366  51C5               	movf	Byte_GetZone@Output& (0+255),w,b
 22454  013368  0012               	return	
 22455  01336A                     __end_of_Byte_GetZone:
 22456                           	opt stack 0
 22457                           tosu	equ	0xFFF
 22458                           tosh	equ	0xFFE
 22459                           tosl	equ	0xFFD
 22460                           pclath	equ	0xFFA
 22461                           tblptru	equ	0xFF8
 22462                           tblptrh	equ	0xFF7
 22463                           tblptrl	equ	0xFF6
 22464                           tablat	equ	0xFF5
 22465                           prodh	equ	0xFF4
 22466                           prodl	equ	0xFF3
 22467                           intcon	equ	0xFF2
 22468                           indf0	equ	0xFEF
 22469                           postinc0	equ	0xFEE
 22470                           fsr0h	equ	0xFEA
 22471                           fsr0l	equ	0xFE9
 22472                           wreg	equ	0xFE8
 22473                           indf1	equ	0xFE7
 22474                           postdec1	equ	0xFE5
 22475                           fsr1h	equ	0xFE2
 22476                           fsr1l	equ	0xFE1
 22477                           indf2	equ	0xFDF
 22478                           postinc2	equ	0xFDE
 22479                           postdec2	equ	0xFDD
 22480                           plusw2	equ	0xFDB
 22481                           fsr2h	equ	0xFDA
 22482                           fsr2l	equ	0xFD9
 22483                           status	equ	0xFD8
 22484                           
 22485 ;; *************** function _Byte_SetQuad *****************
 22486 ;; Defined at:
 22487 ;;		line 101 in file "Library/Types.c"
 22488 ;; Parameters:    Size  Location     Type
 22489 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22490 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 22491 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22492 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22493 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22494 ;;		 -> NULL(0), 
 22495 ;;  pQuad           1   13[BANK0 ] unsigned char 
 22496 ;;  pValue          1   14[BANK0 ] unsigned char 
 22497 ;; Auto vars:     Size  Location     Type
 22498 ;;		None
 22499 ;; Return value:  Size  Location     Type
 22500 ;;                  1    wreg      void 
 22501 ;; Registers used:
 22502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22503 ;; Tracked objects:
 22504 ;;		On entry : 0/0
 22505 ;;		On exit  : 0/0
 22506 ;;		Unchanged: 0/0
 22507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22511 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22512 ;;Total ram usage:        4 bytes
 22513 ;; Hardware stack levels used:    1
 22514 ;; Hardware stack levels required when called:    8
 22515 ;; This function calls:
 22516 ;;		_Byte_SetZone
 22517 ;; This function is called by:
 22518 ;;		_Port_SetQuadType
 22519 ;;		_SPI_Init
 22520 ;;		_SPI_MinSpeed
 22521 ;;		_SPI_MaxSpeed
 22522 ;;		_Port_SetQuad
 22523 ;;		_Word_SetQuad
 22524 ;;		_I2C_Init
 22525 ;; This function uses a non-reentrant model
 22526 ;;
 22527                           
 22528                           	psect	text128
 22529  0148C8                     __ptext128:
 22530                           	opt stack 0
 22531  0148C8                     _Byte_SetQuad:
 22532                           	opt stack 19
 22533                           
 22534                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 22535                           
 22536                           ; BSR set to: 0
 22537                           ;incstack = 0
 22538  0148C8  C0C8  F0BD         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 22539  0148CC  C0C9  F0BE         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 22540  0148D0  0E02               	movlw	2
 22541  0148D2  0100               	movlb	0	; () banked
 22542  0148D4  6FBF               	movwf	Byte_SetZone@pMax& (0+255),b
 22543  0148D6  C0CA  F0C0         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 22544  0148DA  0E04               	movlw	4
 22545  0148DC  0100               	movlb	0	; () banked
 22546  0148DE  6FC1               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22547  0148E0  C0CB  F0C2         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 22548  0148E4  EC6F  F096         	call	_Byte_SetZone	;wreg free
 22549  0148E8  0012               	return		;funcret
 22550  0148EA                     __end_of_Byte_SetQuad:
 22551                           	opt stack 0
 22552                           tosu	equ	0xFFF
 22553                           tosh	equ	0xFFE
 22554                           tosl	equ	0xFFD
 22555                           pclath	equ	0xFFA
 22556                           tblptru	equ	0xFF8
 22557                           tblptrh	equ	0xFF7
 22558                           tblptrl	equ	0xFF6
 22559                           tablat	equ	0xFF5
 22560                           prodh	equ	0xFF4
 22561                           prodl	equ	0xFF3
 22562                           intcon	equ	0xFF2
 22563                           indf0	equ	0xFEF
 22564                           postinc0	equ	0xFEE
 22565                           fsr0h	equ	0xFEA
 22566                           fsr0l	equ	0xFE9
 22567                           wreg	equ	0xFE8
 22568                           indf1	equ	0xFE7
 22569                           postdec1	equ	0xFE5
 22570                           fsr1h	equ	0xFE2
 22571                           fsr1l	equ	0xFE1
 22572                           indf2	equ	0xFDF
 22573                           postinc2	equ	0xFDE
 22574                           postdec2	equ	0xFDD
 22575                           plusw2	equ	0xFDB
 22576                           fsr2h	equ	0xFDA
 22577                           fsr2l	equ	0xFD9
 22578                           status	equ	0xFD8
 22579                           
 22580 ;; *************** function _Byte_SetZone *****************
 22581 ;; Defined at:
 22582 ;;		line 47 in file "Library/Types.c"
 22583 ;; Parameters:    Size  Location     Type
 22584 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22585 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22586 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22587 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 22588 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 22589 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22590 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22591 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22592 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22593 ;;  pMax            1    2[BANK0 ] unsigned char 
 22594 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22595 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22596 ;;  pValue          1    5[BANK0 ] unsigned char 
 22597 ;; Auto vars:     Size  Location     Type
 22598 ;;  MASK            1   10[BANK0 ] unsigned char 
 22599 ;;  Offset          1    9[BANK0 ] unsigned char 
 22600 ;; Return value:  Size  Location     Type
 22601 ;;                  1    wreg      void 
 22602 ;; Registers used:
 22603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22604 ;; Tracked objects:
 22605 ;;		On entry : 0/0
 22606 ;;		On exit  : 0/0
 22607 ;;		Unchanged: 0/0
 22608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22609 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22611 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22612 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22613 ;;Total ram usage:       11 bytes
 22614 ;; Hardware stack levels used:    1
 22615 ;; Hardware stack levels required when called:    7
 22616 ;; This function calls:
 22617 ;;		Nothing
 22618 ;; This function is called by:
 22619 ;;		_Byte_SetPair
 22620 ;;		_Byte_SetQuad
 22621 ;;		_Byte_SetTriple
 22622 ;; This function uses a non-reentrant model
 22623 ;;
 22624                           
 22625                           	psect	text129
 22626  012CDE                     __ptext129:
 22627                           	opt stack 0
 22628  012CDE                     _Byte_SetZone:
 22629                           	opt stack 18
 22630                           
 22631                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 22632                           
 22633                           ;incstack = 0
 22634  012CDE  0100               	movlb	0	; () banked
 22635  012CE0  51C1               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22636  012CE2  0D01               	mullw	1
 22637  012CE4  0E6B               	movlw	low _MASKS
 22638  012CE6  24F3               	addwf	prodl,w,c
 22639  012CE8  6EF6               	movwf	tblptrl,c
 22640  012CEA  0EFD               	movlw	high _MASKS
 22641  012CEC  20F4               	addwfc	prodh,w,c
 22642  012CEE  6EF7               	movwf	tblptrh,c
 22643  012CF0                     	if	1	;There are 3 active tblptr bytes
 22644  012CF0  6AF8               	clrf	tblptru,c
 22645  012CF2  0E00               	movlw	low (__mediumconst shr (0+16))
 22646  012CF4  22F8               	addwfc	tblptru,f,c
 22647  012CF6                     	endif
 22648  012CF6  0008               	tblrd		*
 22649  012CF8  CFF5 F0C7          	movff	tablat,Byte_SetZone@MASK
 22650                           
 22651                           ; BSR set to: 0
 22652                           ;Types.c: 50: UINT8 Offset = 0;
 22653  012CFC  0E00               	movlw	0
 22654  012CFE  0100               	movlb	0	; () banked
 22655  012D00  6FC6               	movwf	Byte_SetZone@Offset& (0+255),b
 22656                           
 22657                           ;Types.c: 52: while (pChunk >= pMax)
 22658  012D02  D006               	goto	l726
 22659  012D04                     
 22660                           ; BSR set to: 0
 22661                           ;Types.c: 53: {
 22662                           ;Types.c: 54: pChunk -= pMax;
 22663                           
 22664                           ; BSR set to: 0
 22665  012D04  0100               	movlb	0	; () banked
 22666  012D06  51BF               	movf	Byte_SetZone@pMax& (0+255),w,b
 22667  012D08  0100               	movlb	0	; () banked
 22668  012D0A  5FC0               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 22669                           
 22670                           ; BSR set to: 0
 22671                           ;Types.c: 55: Offset += 1;
 22672  012D0C  0100               	movlb	0	; () banked
 22673  012D0E  2BC6               	incf	Byte_SetZone@Offset& (0+255),f,b
 22674  012D10                     l726:
 22675                           
 22676                           ; BSR set to: 0
 22677                           
 22678                           ; BSR set to: 0
 22679  012D10  0100               	movlb	0	; () banked
 22680  012D12  51BF               	movf	Byte_SetZone@pMax& (0+255),w,b
 22681  012D14  0100               	movlb	0	; () banked
 22682  012D16  5DC0               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 22683  012D18  B0D8               	btfsc	status,0,c
 22684  012D1A  D7F4               	goto	l727
 22685                           
 22686                           ; BSR set to: 0
 22687                           ;Types.c: 56: }
 22688                           ;Types.c: 57: pChunk *= pChunkSize;
 22689                           
 22690                           ; BSR set to: 0
 22691  012D1C  0100               	movlb	0	; () banked
 22692  012D1E  51C1               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22693  012D20  0100               	movlb	0	; () banked
 22694  012D22  03C0               	mulwf	Byte_SetZone@pChunk& (0+255),b
 22695  012D24  50F3               	movf	prodl,w,c
 22696  012D26  6FC0               	movwf	Byte_SetZone@pChunk& (0+255),b
 22697                           
 22698                           ; BSR set to: 0
 22699                           ;Types.c: 58: pChunk += Offset;
 22700  012D28  0100               	movlb	0	; () banked
 22701  012D2A  51C6               	movf	Byte_SetZone@Offset& (0+255),w,b
 22702  012D2C  0100               	movlb	0	; () banked
 22703  012D2E  27C0               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 22704                           
 22705                           ; BSR set to: 0
 22706                           ;Types.c: 60: pValue &= MASK;
 22707  012D30  0100               	movlb	0	; () banked
 22708  012D32  51C7               	movf	Byte_SetZone@MASK& (0+255),w,b
 22709  012D34  0100               	movlb	0	; () banked
 22710  012D36  17C2               	andwf	Byte_SetZone@pValue& (0+255),f,b
 22711                           
 22712                           ; BSR set to: 0
 22713                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 22714  012D38  C0C0  F0C3         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22715  012D3C  C0C7  F0C4         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 22716  012D40  0100               	movlb	0	; () banked
 22717  012D42  2BC3               	incf	??_Byte_SetZone& (0+255),f,b
 22718  012D44  D003               	goto	u7014
 22719  012D46                     u7015:
 22720  012D46  0100               	movlb	0	; () banked
 22721  012D48  90D8               	bcf	status,0,c
 22722  012D4A  37C4               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22723  012D4C                     u7014:
 22724  012D4C  0100               	movlb	0	; () banked
 22725  012D4E  2FC3               	decfsz	??_Byte_SetZone& (0+255),f,b
 22726  012D50  D7FA               	goto	u7015
 22727  012D52  0100               	movlb	0	; () banked
 22728  012D54  51C4               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22729  012D56  0AFF               	xorlw	255
 22730  012D58  0100               	movlb	0	; () banked
 22731  012D5A  6FC5               	movwf	(??_Byte_SetZone+2)& (0+255),b
 22732  012D5C  C0BD  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22733  012D60  C0BE  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22734  012D64  0100               	movlb	0	; () banked
 22735  012D66  51C5               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 22736  012D68  16DF               	andwf	indf2,f,c
 22737                           
 22738                           ; BSR set to: 0
 22739                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 22740  012D6A  C0C0  F0C3         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22741  012D6E  C0C2  F0C4         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 22742  012D72  0100               	movlb	0	; () banked
 22743  012D74  2BC3               	incf	??_Byte_SetZone& (0+255),f,b
 22744  012D76  D003               	goto	u7024
 22745  012D78                     u7025:
 22746  012D78  0100               	movlb	0	; () banked
 22747  012D7A  90D8               	bcf	status,0,c
 22748  012D7C  37C4               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22749  012D7E                     u7024:
 22750  012D7E  0100               	movlb	0	; () banked
 22751  012D80  2FC3               	decfsz	??_Byte_SetZone& (0+255),f,b
 22752  012D82  D7FA               	goto	u7025
 22753  012D84  C0BD  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22754  012D88  C0BE  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22755  012D8C  0100               	movlb	0	; () banked
 22756  012D8E  51C4               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22757  012D90  12DF               	iorwf	indf2,f,c
 22758                           
 22759                           ; BSR set to: 0
 22760  012D92  0012               	return		;funcret
 22761  012D94                     __end_of_Byte_SetZone:
 22762                           	opt stack 0
 22763                           tosu	equ	0xFFF
 22764                           tosh	equ	0xFFE
 22765                           tosl	equ	0xFFD
 22766                           pclath	equ	0xFFA
 22767                           tblptru	equ	0xFF8
 22768                           tblptrh	equ	0xFF7
 22769                           tblptrl	equ	0xFF6
 22770                           tablat	equ	0xFF5
 22771                           prodh	equ	0xFF4
 22772                           prodl	equ	0xFF3
 22773                           intcon	equ	0xFF2
 22774                           indf0	equ	0xFEF
 22775                           postinc0	equ	0xFEE
 22776                           fsr0h	equ	0xFEA
 22777                           fsr0l	equ	0xFE9
 22778                           wreg	equ	0xFE8
 22779                           indf1	equ	0xFE7
 22780                           postdec1	equ	0xFE5
 22781                           fsr1h	equ	0xFE2
 22782                           fsr1l	equ	0xFE1
 22783                           indf2	equ	0xFDF
 22784                           postinc2	equ	0xFDE
 22785                           postdec2	equ	0xFDD
 22786                           plusw2	equ	0xFDB
 22787                           fsr2h	equ	0xFDA
 22788                           fsr2l	equ	0xFD9
 22789                           status	equ	0xFD8
 22790                           
 22791 ;; *************** function _Console_Init *****************
 22792 ;; Defined at:
 22793 ;;		line 157 in file "Library/Console.c"
 22794 ;; Parameters:    Size  Location     Type
 22795 ;;		None
 22796 ;; Auto vars:     Size  Location     Type
 22797 ;;  y               1    3[BANK0 ] unsigned char 
 22798 ;;  x               1    2[BANK0 ] unsigned char 
 22799 ;; Return value:  Size  Location     Type
 22800 ;;                  1    wreg      void 
 22801 ;; Registers used:
 22802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22803 ;; Tracked objects:
 22804 ;;		On entry : 0/0
 22805 ;;		On exit  : 0/0
 22806 ;;		Unchanged: 0/0
 22807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22811 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22812 ;;Total ram usage:        4 bytes
 22813 ;; Hardware stack levels used:    1
 22814 ;; Hardware stack levels required when called:    7
 22815 ;; This function calls:
 22816 ;;		Nothing
 22817 ;; This function is called by:
 22818 ;;		_initialise
 22819 ;; This function uses a non-reentrant model
 22820 ;;
 22821                           
 22822                           	psect	text130
 22823  0136D2                     __ptext130:
 22824                           	opt stack 0
 22825  0136D2                     _Console_Init:
 22826                           	opt stack 22
 22827                           
 22828                           ;Console.c: 160: lBufferX = 0;
 22829                           
 22830                           ; BSR set to: 0
 22831                           ;incstack = 0
 22832  0136D2  0E00               	movlw	0
 22833  0136D4  0100               	movlb	0	; () banked
 22834  0136D6  6F7B               	movwf	_lBufferX& (0+255),b
 22835                           
 22836                           ;Console.c: 161: lBufferY = 0;
 22837  0136D8  0E00               	movlw	0
 22838  0136DA  0100               	movlb	0	; () banked
 22839  0136DC  6F7A               	movwf	_lBufferY& (0+255),b
 22840                           
 22841                           ;Console.c: 163: UINT8 x, y;
 22842                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22843  0136DE  0E00               	movlw	0
 22844  0136E0  0100               	movlb	0	; () banked
 22845  0136E2  6FBF               	movwf	Console_Init@x& (0+255),b
 22846  0136E4                     l11856:
 22847                           
 22848                           ; BSR set to: 0
 22849  0136E4  0E13               	movlw	19
 22850  0136E6  0100               	movlb	0	; () banked
 22851  0136E8  65BF               	cpfsgt	Console_Init@x& (0+255),b
 22852  0136EA  D001               	goto	l976
 22853  0136EC  0012               	return	
 22854  0136EE                     l976:
 22855                           
 22856                           ; BSR set to: 0
 22857                           ;Console.c: 165: {
 22858                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22859                           
 22860                           ; BSR set to: 0
 22861  0136EE  0E00               	movlw	0
 22862  0136F0  0100               	movlb	0	; () banked
 22863  0136F2  6FC0               	movwf	Console_Init@y& (0+255),b
 22864  0136F4                     l11862:
 22865                           
 22866                           ; BSR set to: 0
 22867  0136F4  0E0E               	movlw	14
 22868  0136F6  0100               	movlb	0	; () banked
 22869  0136F8  65C0               	cpfsgt	Console_Init@y& (0+255),b
 22870  0136FA  D001               	goto	l978
 22871  0136FC  D02C               	goto	u8260
 22872  0136FE                     l978:
 22873                           
 22874                           ; BSR set to: 0
 22875                           ;Console.c: 167: {
 22876                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22877                           
 22878                           ; BSR set to: 0
 22879  0136FE  0100               	movlb	0	; () banked
 22880  013700  51C0               	movf	Console_Init@y& (0+255),w,b
 22881  013702  0D14               	mullw	20
 22882  013704  0E46               	movlw	low _lBuffer
 22883  013706  0100               	movlb	0	; () banked
 22884  013708  6FBD               	movwf	??_Console_Init& (0+255),b
 22885  01370A  0E02               	movlw	high _lBuffer
 22886  01370C  0100               	movlb	0	; () banked
 22887  01370E  6FBE               	movwf	(??_Console_Init+1)& (0+255),b
 22888  013710  50F3               	movf	prodl,w,c
 22889  013712  0100               	movlb	0	; () banked
 22890  013714  27BD               	addwf	??_Console_Init& (0+255),f,b
 22891  013716  50F4               	movf	prodh,w,c
 22892  013718  0100               	movlb	0	; () banked
 22893  01371A  23BE               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22894  01371C  0100               	movlb	0	; () banked
 22895  01371E  51BF               	movf	Console_Init@x& (0+255),w,b
 22896  013720  0D01               	mullw	1
 22897  013722  50F3               	movf	prodl,w,c
 22898  013724  0100               	movlb	0	; () banked
 22899  013726  25BD               	addwf	??_Console_Init& (0+255),w,b
 22900  013728  6ED9               	movwf	fsr2l,c
 22901  01372A  50F4               	movf	prodh,w,c
 22902  01372C  0100               	movlb	0	; () banked
 22903  01372E  21BE               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22904  013730  6EDA               	movwf	fsr2h,c
 22905  013732  0E00               	movlw	0
 22906  013734  6EDF               	movwf	indf2,c
 22907                           
 22908                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22909  013736  0100               	movlb	0	; () banked
 22910  013738  51C0               	movf	Console_Init@y& (0+255),w,b
 22911  01373A  0D02               	mullw	2
 22912  01373C  0E00               	movlw	low _lCBuffer
 22913  01373E  24F3               	addwf	prodl,w,c
 22914  013740  6ED9               	movwf	fsr2l,c
 22915  013742  0E01               	movlw	high _lCBuffer
 22916  013744  20F4               	addwfc	prodh,w,c
 22917  013746  6EDA               	movwf	fsr2h,c
 22918  013748  0EFF               	movlw	255
 22919  01374A  6EDE               	movwf	postinc2,c
 22920  01374C  0EFF               	movlw	255
 22921  01374E  6EDD               	movwf	postdec2,c
 22922                           
 22923                           ; BSR set to: 0
 22924  013750  0100               	movlb	0	; () banked
 22925  013752  2BC0               	incf	Console_Init@y& (0+255),f,b
 22926  013754  D7CF               	goto	l11862
 22927  013756                     u8260:
 22928                           
 22929                           ; BSR set to: 0
 22930                           
 22931                           ; BSR set to: 0
 22932  013756  0100               	movlb	0	; () banked
 22933  013758  2BBF               	incf	Console_Init@x& (0+255),f,b
 22934  01375A  D7C4               	goto	l11856
 22935  01375C                     __end_of_Console_Init:
 22936                           	opt stack 0
 22937                           tosu	equ	0xFFF
 22938                           tosh	equ	0xFFE
 22939                           tosl	equ	0xFFD
 22940                           pclath	equ	0xFFA
 22941                           tblptru	equ	0xFF8
 22942                           tblptrh	equ	0xFF7
 22943                           tblptrl	equ	0xFF6
 22944                           tablat	equ	0xFF5
 22945                           prodh	equ	0xFF4
 22946                           prodl	equ	0xFF3
 22947                           intcon	equ	0xFF2
 22948                           indf0	equ	0xFEF
 22949                           postinc0	equ	0xFEE
 22950                           fsr0h	equ	0xFEA
 22951                           fsr0l	equ	0xFE9
 22952                           wreg	equ	0xFE8
 22953                           indf1	equ	0xFE7
 22954                           postdec1	equ	0xFE5
 22955                           fsr1h	equ	0xFE2
 22956                           fsr1l	equ	0xFE1
 22957                           indf2	equ	0xFDF
 22958                           postinc2	equ	0xFDE
 22959                           postdec2	equ	0xFDD
 22960                           plusw2	equ	0xFDB
 22961                           fsr2h	equ	0xFDA
 22962                           fsr2l	equ	0xFD9
 22963                           status	equ	0xFD8
 22964                           
 22965 ;; *************** function _ISR_Function *****************
 22966 ;; Defined at:
 22967 ;;		line 38 in file "Library/ISR.c"
 22968 ;; Parameters:    Size  Location     Type
 22969 ;;		None
 22970 ;; Auto vars:     Size  Location     Type
 22971 ;;		None
 22972 ;; Return value:  Size  Location     Type
 22973 ;;                  1    wreg      void 
 22974 ;; Registers used:
 22975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22976 ;; Tracked objects:
 22977 ;;		On entry : 0/0
 22978 ;;		On exit  : 0/0
 22979 ;;		Unchanged: 0/0
 22980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22983 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22984 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22985 ;;Total ram usage:       18 bytes
 22986 ;; Hardware stack levels used:    1
 22987 ;; Hardware stack levels required when called:    6
 22988 ;; This function calls:
 22989 ;;		_Timer0_ISR
 22990 ;; This function is called by:
 22991 ;;		Interrupt level 2
 22992 ;; This function uses a non-reentrant model
 22993 ;;
 22994                           
 22995                           	psect	intcode
 22996  001408                     __pintcode:
 22997                           	opt stack 0
 22998  001408                     _ISR_Function:
 22999                           	opt stack 10
 23000                           
 23001                           ; BSR set to: 0
 23002                           ;incstack = 0
 23003  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 23004  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 23005  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 23006  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 23007  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 23008  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 23009  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 23010  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 23011  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 23012  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 23013  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 23014  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 23015  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 23016  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 23017  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 23018  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 23019  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 23020  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 23021  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 23022                           
 23023                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 23024  001452  92F2               	bcf	intcon,1,c	;volatile
 23025                           
 23026                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 23027  001454  B4F2               	btfsc	intcon,2,c	;volatile
 23028  001456  AAF2               	btfss	intcon,5,c	;volatile
 23029  001458  D002               	goto	i2l1598
 23030                           
 23031                           ;ISR.c: 68: Timer0_ISR();
 23032  00145A  EC2F  F0A4         	call	_Timer0_ISR	;wreg free
 23033  00145E                     i2l1598:
 23034  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 23035  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 23036  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 23037  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 23038  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 23039  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 23040  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 23041  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 23042  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 23043  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 23044  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 23045  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 23046  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 23047  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 23048  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 23049  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 23050  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 23051  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 23052  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23053  0014A8  0011               	retfie		f
 23054  0014AA                     __end_of_ISR_Function:
 23055                           	opt stack 0
 23056                           tosu	equ	0xFFF
 23057                           tosh	equ	0xFFE
 23058                           tosl	equ	0xFFD
 23059                           pclatu	equ	0xFFB
 23060                           pclath	equ	0xFFA
 23061                           tblptru	equ	0xFF8
 23062                           tblptrh	equ	0xFF7
 23063                           tblptrl	equ	0xFF6
 23064                           tablat	equ	0xFF5
 23065                           prodh	equ	0xFF4
 23066                           prodl	equ	0xFF3
 23067                           intcon	equ	0xFF2
 23068                           indf0	equ	0xFEF
 23069                           postinc0	equ	0xFEE
 23070                           fsr0h	equ	0xFEA
 23071                           fsr0l	equ	0xFE9
 23072                           wreg	equ	0xFE8
 23073                           indf1	equ	0xFE7
 23074                           postdec1	equ	0xFE5
 23075                           fsr1h	equ	0xFE2
 23076                           fsr1l	equ	0xFE1
 23077                           indf2	equ	0xFDF
 23078                           postinc2	equ	0xFDE
 23079                           postdec2	equ	0xFDD
 23080                           plusw2	equ	0xFDB
 23081                           fsr2h	equ	0xFDA
 23082                           fsr2l	equ	0xFD9
 23083                           status	equ	0xFD8
 23084                           
 23085 ;; *************** function _Timer0_ISR *****************
 23086 ;; Defined at:
 23087 ;;		line 94 in file "Library/Timer0.c"
 23088 ;; Parameters:    Size  Location     Type
 23089 ;;		None
 23090 ;; Auto vars:     Size  Location     Type
 23091 ;;		None
 23092 ;; Return value:  Size  Location     Type
 23093 ;;                  1    wreg      void 
 23094 ;; Registers used:
 23095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23096 ;; Tracked objects:
 23097 ;;		On entry : 0/0
 23098 ;;		On exit  : 0/0
 23099 ;;		Unchanged: 0/0
 23100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23105 ;;Total ram usage:        0 bytes
 23106 ;; Hardware stack levels used:    1
 23107 ;; Hardware stack levels required when called:    5
 23108 ;; This function calls:
 23109 ;;		Absolute function
 23110 ;;		i2_Motor_Step
 23111 ;;		i2_Timer0_Stop
 23112 ;; This function is called by:
 23113 ;;		_ISR_Function
 23114 ;; This function uses a non-reentrant model
 23115 ;;
 23116                           
 23117                           	psect	text132
 23118  01485E                     __ptext132:
 23119                           	opt stack 0
 23120  01485E                     _Timer0_ISR:
 23121                           	opt stack 10
 23122                           
 23123                           ;Timer0.c: 96: Timer0_Stop();
 23124                           
 23125                           ;incstack = 0
 23126  01485E  ECE1  F0A5         	call	i2_Timer0_Stop	;wreg free
 23127                           
 23128                           ;Timer0.c: 99: if (gISR != 0)
 23129  014862  5029               	movf	_gISR,w,c
 23130  014864  102A               	iorwf	_gISR+1,w,c
 23131  014866  102B               	iorwf	_gISR+2,w,c
 23132  014868  B4D8               	btfsc	status,2,c
 23133  01486A  0012               	return	
 23134                           
 23135                           ;Timer0.c: 100: gISR();
 23136  01486C  D801               	call	i2u1010_48
 23137  01486E  0012               	return	
 23138  014870                     i2u1010_48:
 23139  014870  0005               	push	
 23140  014872  6EFA               	movwf	pclath,c
 23141  014874  5029               	movf	_gISR,w,c
 23142  014876  6EFD               	movwf	tosl,c
 23143  014878  502A               	movf	_gISR+1,w,c
 23144  01487A  6EFE               	movwf	tosh,c
 23145  01487C  502B               	movf	_gISR+2,w,c
 23146  01487E  6EFF               	movwf	tosu,c
 23147  014880  50FA               	movf	pclath,w,c
 23148  014882  0012               	return		;indir
 23149  014884                     __end_of_Timer0_ISR:
 23150                           	opt stack 0
 23151                           tosu	equ	0xFFF
 23152                           tosh	equ	0xFFE
 23153                           tosl	equ	0xFFD
 23154                           pclatu	equ	0xFFB
 23155                           pclath	equ	0xFFA
 23156                           tblptru	equ	0xFF8
 23157                           tblptrh	equ	0xFF7
 23158                           tblptrl	equ	0xFF6
 23159                           tablat	equ	0xFF5
 23160                           prodh	equ	0xFF4
 23161                           prodl	equ	0xFF3
 23162                           intcon	equ	0xFF2
 23163                           indf0	equ	0xFEF
 23164                           postinc0	equ	0xFEE
 23165                           fsr0h	equ	0xFEA
 23166                           fsr0l	equ	0xFE9
 23167                           wreg	equ	0xFE8
 23168                           indf1	equ	0xFE7
 23169                           postdec1	equ	0xFE5
 23170                           fsr1h	equ	0xFE2
 23171                           fsr1l	equ	0xFE1
 23172                           indf2	equ	0xFDF
 23173                           postinc2	equ	0xFDE
 23174                           postdec2	equ	0xFDD
 23175                           plusw2	equ	0xFDB
 23176                           fsr2h	equ	0xFDA
 23177                           fsr2l	equ	0xFD9
 23178                           status	equ	0xFD8
 23179                           
 23180 ;; *************** function i2_Motor_Step *****************
 23181 ;; Defined at:
 23182 ;;		line 75 in file "Library/Motor.c"
 23183 ;; Parameters:    Size  Location     Type
 23184 ;;		None
 23185 ;; Auto vars:     Size  Location     Type
 23186 ;;		None
 23187 ;; Return value:  Size  Location     Type
 23188 ;;                  1    wreg      void 
 23189 ;; Registers used:
 23190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23191 ;; Tracked objects:
 23192 ;;		On entry : 0/0
 23193 ;;		On exit  : 0/0
 23194 ;;		Unchanged: 0/0
 23195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23200 ;;Total ram usage:        2 bytes
 23201 ;; Hardware stack levels used:    1
 23202 ;; Hardware stack levels required when called:    4
 23203 ;; This function calls:
 23204 ;;		i2_MXK_Queue
 23205 ;;		i2_MXK_Release
 23206 ;;		i2_MXK_SwitchTo
 23207 ;;		i2_Port_SetPin
 23208 ;;		i2_Timer0_Restart
 23209 ;;		i2_Timer0_Stop
 23210 ;; This function is called by:
 23211 ;; This function uses a non-reentrant model
 23212 ;;
 23213                           
 23214                           	psect	text133
 23215  0124D8                     __ptext133:
 23216                           	opt stack 0
 23217  0124D8                     i2_Motor_Step:
 23218                           	opt stack 10
 23219                           
 23220                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 23221                           
 23222                           ;incstack = 0
 23223  0124D8  0100               	movlb	0	; () banked
 23224  0124DA  EE20 F004          	lfsr	2,4
 23225  0124DE  516F               	movf	_lMotor& (0+255),w,b
 23226  0124E0  26D9               	addwf	fsr2l,f,c
 23227  0124E2  5170               	movf	(_lMotor+1)& (0+255),w,b
 23228  0124E4  22DA               	addwfc	fsr2h,f,c
 23229  0124E6  50DF               	movf	indf2,w,c
 23230  0124E8  ECDB  F0A2         	call	i2_MXK_SwitchTo
 23231  0124EC  0900               	iorlw	0
 23232  0124EE  B4D8               	btfsc	status,2,c
 23233  0124F0  D06A               	goto	i2l1635
 23234                           
 23235                           ;Motor.c: 78: {
 23236                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 23237  0124F2  C06F  FFD9         	movff	_lMotor,fsr2l
 23238  0124F6  C070  FFDA         	movff	_lMotor+1,fsr2h
 23239  0124FA  50DE               	movf	postinc2,w,c
 23240  0124FC  10DE               	iorwf	postinc2,w,c
 23241  0124FE  B4D8               	btfsc	status,2,c
 23242  012500  D05D               	goto	i2l1636
 23243                           
 23244                           ;Motor.c: 80: {
 23245                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 23246  012502  C06F  FFD9         	movff	_lMotor,fsr2l
 23247  012506  C070  FFDA         	movff	_lMotor+1,fsr2h
 23248  01250A  0E01               	movlw	1
 23249  01250C  BEDB               	btfsc	plusw2,7,c
 23250  01250E  D022               	goto	i2l1637
 23251  012510  0E01               	movlw	1
 23252  012512  50DB               	movf	plusw2,w,c
 23253  012514  E103               	bnz	i2u556_40
 23254  012516  04DE               	decf	postinc2,w,c
 23255  012518  A0D8               	btfss	status,0,c
 23256  01251A  D01C               	goto	i2l1637
 23257  01251C                     i2u556_40:
 23258                           
 23259                           ;Motor.c: 83: {
 23260                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 23261  01251C  C06F  FFD9         	movff	_lMotor,fsr2l
 23262  012520  C070  FFDA         	movff	_lMotor+1,fsr2h
 23263  012524  28DE               	incf	postinc2,w,c
 23264  012526  E104               	bnz	i2u557_40
 23265  012528  0E7F               	movlw	127
 23266  01252A  18DE               	xorwf	postinc2,w,c
 23267  01252C  B4D8               	btfsc	status,2,c
 23268  01252E  D007               	goto	i2l1638
 23269  012530                     i2u557_40:
 23270                           
 23271                           ;Motor.c: 85: lMotor->mDelta --;
 23272  012530  C06F  FFD9         	movff	_lMotor,fsr2l
 23273  012534  C070  FFDA         	movff	_lMotor+1,fsr2h
 23274  012538  06DE               	decf	postinc2,f,c
 23275  01253A  0E00               	movlw	0
 23276  01253C  5ADD               	subwfb	postdec2,f,c
 23277  01253E                     i2l1638:
 23278                           
 23279                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 23280  01253E  0E7D               	movlw	low _PortE
 23281  012540  6E10               	movwf	i2Port_SetPin@pInput,c
 23282  012542  0E00               	movlw	high _PortE
 23283  012544  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23284  012546  0E00               	movlw	0
 23285  012548  6E12               	movwf	i2Port_SetPin@pPin,c
 23286  01254A  0E01               	movlw	1
 23287  01254C  6E13               	movwf	i2Port_SetPin@pValue,c
 23288  01254E  EC76  F097         	call	i2_Port_SetPin	;wreg free
 23289                           
 23290                           ;Motor.c: 88: }
 23291  012552  D01B               	goto	i2l1639
 23292  012554                     i2l1637:
 23293                           
 23294                           ;Motor.c: 89: else
 23295                           ;Motor.c: 90: {
 23296                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 23297  012554  C06F  FFD9         	movff	_lMotor,fsr2l
 23298  012558  C070  FFDA         	movff	_lMotor+1,fsr2h
 23299  01255C  04DE               	decf	postinc2,w,c
 23300  01255E  E104               	bnz	i2u558_40
 23301  012560  0E80               	movlw	128
 23302  012562  18DE               	xorwf	postinc2,w,c
 23303  012564  B4D8               	btfsc	status,2,c
 23304  012566  D007               	goto	i2l1640
 23305  012568                     i2u558_40:
 23306                           
 23307                           ;Motor.c: 92: lMotor->mDelta ++;
 23308  012568  C06F  FFD9         	movff	_lMotor,fsr2l
 23309  01256C  C070  FFDA         	movff	_lMotor+1,fsr2h
 23310  012570  2ADE               	incf	postinc2,f,c
 23311  012572  0E00               	movlw	0
 23312  012574  22DD               	addwfc	postdec2,f,c
 23313  012576                     i2l1640:
 23314                           
 23315                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 23316  012576  0E7D               	movlw	low _PortE
 23317  012578  6E10               	movwf	i2Port_SetPin@pInput,c
 23318  01257A  0E00               	movlw	high _PortE
 23319  01257C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23320  01257E  0E00               	movlw	0
 23321  012580  6E12               	movwf	i2Port_SetPin@pPin,c
 23322  012582  0E00               	movlw	0
 23323  012584  6E13               	movwf	i2Port_SetPin@pValue,c
 23324  012586  EC76  F097         	call	i2_Port_SetPin	;wreg free
 23325  01258A                     i2l1639:
 23326                           
 23327                           ;Motor.c: 95: }
 23328                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 23329  01258A  0E7D               	movlw	low _PortE
 23330  01258C  6E10               	movwf	i2Port_SetPin@pInput,c
 23331  01258E  0E00               	movlw	high _PortE
 23332  012590  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23333  012592  0E01               	movlw	1
 23334  012594  6E12               	movwf	i2Port_SetPin@pPin,c
 23335  012596  0E01               	movlw	1
 23336  012598  6E13               	movwf	i2Port_SetPin@pValue,c
 23337  01259A  EC76  F097         	call	i2_Port_SetPin	;wreg free
 23338                           
 23339                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 23340  01259E  0E7D               	movlw	low _PortE
 23341  0125A0  6E10               	movwf	i2Port_SetPin@pInput,c
 23342  0125A2  0E00               	movlw	high _PortE
 23343  0125A4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23344  0125A6  0E01               	movlw	1
 23345  0125A8  6E12               	movwf	i2Port_SetPin@pPin,c
 23346  0125AA  0E00               	movlw	0
 23347  0125AC  6E13               	movwf	i2Port_SetPin@pValue,c
 23348  0125AE  EC76  F097         	call	i2_Port_SetPin	;wreg free
 23349                           
 23350                           ;Motor.c: 101: MXK_Release();
 23351  0125B2  ECE4  F0A5         	call	i2_MXK_Release	;wreg free
 23352                           
 23353                           ;Motor.c: 102: Timer0_Restart();
 23354  0125B6  ECBA  F0A5         	call	i2_Timer0_Restart	;wreg free
 23355                           
 23356                           ;Motor.c: 103: return;
 23357  0125BA  0012               	return	
 23358  0125BC                     i2l1636:
 23359                           
 23360                           ;Motor.c: 104: }
 23361                           ;Motor.c: 105: MXK_Release();
 23362  0125BC  ECE4  F0A5         	call	i2_MXK_Release	;wreg free
 23363                           
 23364                           ;Motor.c: 106: Timer0_Stop();
 23365  0125C0  ECE1  F0A5         	call	i2_Timer0_Stop	;wreg free
 23366                           
 23367                           ;Motor.c: 107: return;
 23368  0125C4  0012               	return	
 23369  0125C6                     i2l1635:
 23370                           
 23371                           ;Motor.c: 108: }
 23372                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 23373  0125C6  C02C  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 23374  0125CA  C02D  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 23375  0125CE  C02E  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 23376  0125D2  ECA7  F0A5         	call	i2_MXK_Queue	;wreg free
 23377  0125D6  0012               	return		;funcret
 23378  0125D8                     __end_ofi2_Motor_Step:
 23379                           	opt stack 0
 23380                           tosu	equ	0xFFF
 23381                           tosh	equ	0xFFE
 23382                           tosl	equ	0xFFD
 23383                           pclatu	equ	0xFFB
 23384                           pclath	equ	0xFFA
 23385                           tblptru	equ	0xFF8
 23386                           tblptrh	equ	0xFF7
 23387                           tblptrl	equ	0xFF6
 23388                           tablat	equ	0xFF5
 23389                           prodh	equ	0xFF4
 23390                           prodl	equ	0xFF3
 23391                           intcon	equ	0xFF2
 23392                           indf0	equ	0xFEF
 23393                           postinc0	equ	0xFEE
 23394                           fsr0h	equ	0xFEA
 23395                           fsr0l	equ	0xFE9
 23396                           wreg	equ	0xFE8
 23397                           indf1	equ	0xFE7
 23398                           postdec1	equ	0xFE5
 23399                           fsr1h	equ	0xFE2
 23400                           fsr1l	equ	0xFE1
 23401                           indf2	equ	0xFDF
 23402                           postinc2	equ	0xFDE
 23403                           postdec2	equ	0xFDD
 23404                           plusw2	equ	0xFDB
 23405                           fsr2h	equ	0xFDA
 23406                           fsr2l	equ	0xFD9
 23407                           status	equ	0xFD8
 23408                           
 23409 ;; *************** function i2_Timer0_Stop *****************
 23410 ;; Defined at:
 23411 ;;		line 89 in file "Library/Timer0.c"
 23412 ;; Parameters:    Size  Location     Type
 23413 ;;		None
 23414 ;; Auto vars:     Size  Location     Type
 23415 ;;		None
 23416 ;; Return value:  Size  Location     Type
 23417 ;;                  1    wreg      void 
 23418 ;; Registers used:
 23419 ;;		None
 23420 ;; Tracked objects:
 23421 ;;		On entry : 0/0
 23422 ;;		On exit  : 0/0
 23423 ;;		Unchanged: 0/0
 23424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23429 ;;Total ram usage:        0 bytes
 23430 ;; Hardware stack levels used:    1
 23431 ;; This function calls:
 23432 ;;		Nothing
 23433 ;; This function is called by:
 23434 ;;		_Timer0_ISR
 23435 ;;		i2_Motor_Step
 23436 ;; This function uses a non-reentrant model
 23437 ;;
 23438                           
 23439                           	psect	text134
 23440  014BC2                     __ptext134:
 23441                           	opt stack 0
 23442  014BC2                     i2_Timer0_Stop:
 23443                           	opt stack 14
 23444                           
 23445                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 23446                           
 23447                           ;incstack = 0
 23448  014BC2  9AF2               	bcf	intcon,5,c	;volatile
 23449                           
 23450                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 23451  014BC4  94F2               	bcf	intcon,2,c	;volatile
 23452  014BC6  0012               	return		;funcret
 23453  014BC8                     __end_ofi2_Timer0_Stop:
 23454                           	opt stack 0
 23455                           tosu	equ	0xFFF
 23456                           tosh	equ	0xFFE
 23457                           tosl	equ	0xFFD
 23458                           pclatu	equ	0xFFB
 23459                           pclath	equ	0xFFA
 23460                           tblptru	equ	0xFF8
 23461                           tblptrh	equ	0xFF7
 23462                           tblptrl	equ	0xFF6
 23463                           tablat	equ	0xFF5
 23464                           prodh	equ	0xFF4
 23465                           prodl	equ	0xFF3
 23466                           intcon	equ	0xFF2
 23467                           indf0	equ	0xFEF
 23468                           postinc0	equ	0xFEE
 23469                           fsr0h	equ	0xFEA
 23470                           fsr0l	equ	0xFE9
 23471                           wreg	equ	0xFE8
 23472                           indf1	equ	0xFE7
 23473                           postdec1	equ	0xFE5
 23474                           fsr1h	equ	0xFE2
 23475                           fsr1l	equ	0xFE1
 23476                           indf2	equ	0xFDF
 23477                           postinc2	equ	0xFDE
 23478                           postdec2	equ	0xFDD
 23479                           plusw2	equ	0xFDB
 23480                           fsr2h	equ	0xFDA
 23481                           fsr2l	equ	0xFD9
 23482                           status	equ	0xFD8
 23483                           
 23484 ;; *************** function i2_Timer0_Restart *****************
 23485 ;; Defined at:
 23486 ;;		line 83 in file "Library/Timer0.c"
 23487 ;; Parameters:    Size  Location     Type
 23488 ;;		None
 23489 ;; Auto vars:     Size  Location     Type
 23490 ;;		None
 23491 ;; Return value:  Size  Location     Type
 23492 ;;                  1    wreg      void 
 23493 ;; Registers used:
 23494 ;;		None
 23495 ;; Tracked objects:
 23496 ;;		On entry : 0/0
 23497 ;;		On exit  : 0/0
 23498 ;;		Unchanged: 0/0
 23499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23504 ;;Total ram usage:        0 bytes
 23505 ;; Hardware stack levels used:    1
 23506 ;; This function calls:
 23507 ;;		Nothing
 23508 ;; This function is called by:
 23509 ;;		i2_Motor_Step
 23510 ;; This function uses a non-reentrant model
 23511 ;;
 23512                           
 23513                           	psect	text135
 23514  014B74                     __ptext135:
 23515                           	opt stack 0
 23516  014B74                     i2_Timer0_Restart:
 23517                           	opt stack 13
 23518                           
 23519                           ;Timer0.c: 85: TMR0 = COUNTER;
 23520                           
 23521                           ;incstack = 0
 23522  014B74  C032  FFD6         	movff	_COUNTER,4054	;volatile
 23523  014B78  C033  FFD7         	movff	_COUNTER+1,4055	;volatile
 23524                           
 23525                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23526  014B7C  8AF2               	bsf	intcon,5,c	;volatile
 23527  014B7E  0012               	return		;funcret
 23528  014B80                     __end_ofi2_Timer0_Restart:
 23529                           	opt stack 0
 23530                           tosu	equ	0xFFF
 23531                           tosh	equ	0xFFE
 23532                           tosl	equ	0xFFD
 23533                           pclatu	equ	0xFFB
 23534                           pclath	equ	0xFFA
 23535                           tblptru	equ	0xFF8
 23536                           tblptrh	equ	0xFF7
 23537                           tblptrl	equ	0xFF6
 23538                           tablat	equ	0xFF5
 23539                           prodh	equ	0xFF4
 23540                           prodl	equ	0xFF3
 23541                           intcon	equ	0xFF2
 23542                           indf0	equ	0xFEF
 23543                           postinc0	equ	0xFEE
 23544                           fsr0h	equ	0xFEA
 23545                           fsr0l	equ	0xFE9
 23546                           wreg	equ	0xFE8
 23547                           indf1	equ	0xFE7
 23548                           postdec1	equ	0xFE5
 23549                           fsr1h	equ	0xFE2
 23550                           fsr1l	equ	0xFE1
 23551                           indf2	equ	0xFDF
 23552                           postinc2	equ	0xFDE
 23553                           postdec2	equ	0xFDD
 23554                           plusw2	equ	0xFDB
 23555                           fsr2h	equ	0xFDA
 23556                           fsr2l	equ	0xFD9
 23557                           status	equ	0xFD8
 23558                           
 23559 ;; *************** function i2_Port_SetPin *****************
 23560 ;; Defined at:
 23561 ;;		line 247 in file "Library/Port.c"
 23562 ;; Parameters:    Size  Location     Type
 23563 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23564 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23565 ;;  pPin            1   17[COMRAM] enum E6750
 23566 ;;  pValue          1   18[COMRAM] unsigned char 
 23567 ;; Auto vars:     Size  Location     Type
 23568 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23569 ;; Return value:  Size  Location     Type
 23570 ;;                  1    wreg      void 
 23571 ;; Registers used:
 23572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23573 ;; Tracked objects:
 23574 ;;		On entry : 0/0
 23575 ;;		On exit  : 0/0
 23576 ;;		Unchanged: 0/0
 23577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23581 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23582 ;;Total ram usage:        5 bytes
 23583 ;; Hardware stack levels used:    1
 23584 ;; Hardware stack levels required when called:    3
 23585 ;; This function calls:
 23586 ;;		i2_Byte_SetBit
 23587 ;;		i2_Word_GetPair
 23588 ;; This function is called by:
 23589 ;;		i2_Motor_Step
 23590 ;; This function uses a non-reentrant model
 23591 ;;
 23592                           
 23593                           	psect	text136
 23594  012EEC                     __ptext136:
 23595                           	opt stack 0
 23596  012EEC                     i2_Port_SetPin:
 23597                           	opt stack 10
 23598                           
 23599                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23600                           
 23601                           ;incstack = 0
 23602  012EEC  0E08               	movlw	8
 23603  012EEE  2410               	addwf	i2Port_SetPin@pInput,w,c
 23604  012EF0  6E0D               	movwf	i2Word_GetPair@pInput,c
 23605  012EF2  0E00               	movlw	0
 23606  012EF4  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23607  012EF6  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23608  012EF8  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23609  012EFC  EC71  F0A3         	call	i2_Word_GetPair	;wreg free
 23610  012F00  6E14               	movwf	i2Port_SetPin@Type,c
 23611                           
 23612                           ;Port.c: 250: switch (Type)
 23613  012F02  D03B               	goto	i2l427
 23614  012F04                     
 23615                           ;Port.c: 256: pValue &= 1;
 23616  012F04  0E01               	movlw	1
 23617  012F06  1613               	andwf	i2Port_SetPin@pValue,f,c
 23618                           
 23619                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23620  012F08  EE20 F002          	lfsr	2,2
 23621  012F0C  5010               	movf	i2Port_SetPin@pInput,w,c
 23622  012F0E  26D9               	addwf	fsr2l,f,c
 23623  012F10  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23624  012F12  22DA               	addwfc	fsr2h,f,c
 23625  012F14  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23626  012F18  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23627  012F1C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23628  012F20  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23629  012F24  ECAF  F0A0         	call	i2_Byte_SetBit	;wreg free
 23630                           
 23631                           ;Port.c: 258: break;
 23632  012F28  0012               	return	
 23633  012F2A                     
 23634                           ;Port.c: 261: pValue &= 1;
 23635  012F2A  0E01               	movlw	1
 23636  012F2C  1613               	andwf	i2Port_SetPin@pValue,f,c
 23637                           
 23638                           ;Port.c: 262: pValue ^= 1;
 23639  012F2E  0E01               	movlw	1
 23640  012F30  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 23641                           
 23642                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23643  012F32  EE20 F002          	lfsr	2,2
 23644  012F36  5010               	movf	i2Port_SetPin@pInput,w,c
 23645  012F38  26D9               	addwf	fsr2l,f,c
 23646  012F3A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23647  012F3C  22DA               	addwfc	fsr2h,f,c
 23648  012F3E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23649  012F42  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23650  012F46  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23651  012F4A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23652  012F4E  ECAF  F0A0         	call	i2_Byte_SetBit	;wreg free
 23653                           
 23654                           ;Port.c: 264: break;
 23655  012F52  0012               	return	
 23656  012F54                     
 23657                           ;Port.c: 266: pValue &= 1;
 23658  012F54  0E01               	movlw	1
 23659  012F56  1613               	andwf	i2Port_SetPin@pValue,f,c
 23660                           
 23661                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23662  012F58  EE20 F004          	lfsr	2,4
 23663  012F5C  5010               	movf	i2Port_SetPin@pInput,w,c
 23664  012F5E  26D9               	addwf	fsr2l,f,c
 23665  012F60  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23666  012F62  22DA               	addwfc	fsr2h,f,c
 23667  012F64  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23668  012F68  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23669  012F6C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23670  012F70  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23671  012F74  ECAF  F0A0         	call	i2_Byte_SetBit	;wreg free
 23672                           
 23673                           ;Port.c: 269: }
 23674                           
 23675                           ;Port.c: 268: break;
 23676  012F78  0012               	return	
 23677  012F7A                     i2l427:
 23678  012F7A  5014               	movf	i2Port_SetPin@Type,w,c
 23679                           
 23680                           ; Switch size 1, requested type "space"
 23681                           ; Number of cases is 4, Range of values is 0 to 3
 23682                           ; switch strategies available:
 23683                           ; Name         Instructions Cycles
 23684                           ; simple_byte           13     7 (average)
 23685                           ;	Chosen strategy is simple_byte
 23686  012F7C  0A00               	xorlw	0	; case 0
 23687  012F7E  B4D8               	btfsc	status,2,c
 23688  012F80  0012               	return	
 23689  012F82  0A01               	xorlw	1	; case 1
 23690  012F84  B4D8               	btfsc	status,2,c
 23691  012F86  D7BE               	goto	i2l430
 23692  012F88  0A03               	xorlw	3	; case 2
 23693  012F8A  B4D8               	btfsc	status,2,c
 23694  012F8C  D7CE               	goto	i2l432
 23695  012F8E  0A01               	xorlw	1	; case 3
 23696  012F90  A4D8               	btfss	status,2,c
 23697  012F92  0012               	return	
 23698  012F94  D7DF               	goto	i2l433
 23699  012F96                     __end_ofi2_Port_SetPin:
 23700                           	opt stack 0
 23701                           tosu	equ	0xFFF
 23702                           tosh	equ	0xFFE
 23703                           tosl	equ	0xFFD
 23704                           pclatu	equ	0xFFB
 23705                           pclath	equ	0xFFA
 23706                           tblptru	equ	0xFF8
 23707                           tblptrh	equ	0xFF7
 23708                           tblptrl	equ	0xFF6
 23709                           tablat	equ	0xFF5
 23710                           prodh	equ	0xFF4
 23711                           prodl	equ	0xFF3
 23712                           intcon	equ	0xFF2
 23713                           indf0	equ	0xFEF
 23714                           postinc0	equ	0xFEE
 23715                           fsr0h	equ	0xFEA
 23716                           fsr0l	equ	0xFE9
 23717                           wreg	equ	0xFE8
 23718                           indf1	equ	0xFE7
 23719                           postdec1	equ	0xFE5
 23720                           fsr1h	equ	0xFE2
 23721                           fsr1l	equ	0xFE1
 23722                           indf2	equ	0xFDF
 23723                           postinc2	equ	0xFDE
 23724                           postdec2	equ	0xFDD
 23725                           plusw2	equ	0xFDB
 23726                           fsr2h	equ	0xFDA
 23727                           fsr2l	equ	0xFD9
 23728                           status	equ	0xFD8
 23729                           
 23730 ;; *************** function i2_Word_GetPair *****************
 23731 ;; Defined at:
 23732 ;;		line 156 in file "Library/Types.c"
 23733 ;; Parameters:    Size  Location     Type
 23734 ;;  pInput          2   12[COMRAM] PTR struct Word
 23735 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23736 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23737 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23738 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23739 ;;  pPair           1   14[COMRAM] unsigned char 
 23740 ;; Auto vars:     Size  Location     Type
 23741 ;;		None
 23742 ;; Return value:  Size  Location     Type
 23743 ;;                  1    wreg      unsigned char 
 23744 ;; Registers used:
 23745 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23746 ;; Tracked objects:
 23747 ;;		On entry : 0/0
 23748 ;;		On exit  : 0/0
 23749 ;;		Unchanged: 0/0
 23750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23754 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23755 ;;Total ram usage:        3 bytes
 23756 ;; Hardware stack levels used:    1
 23757 ;; Hardware stack levels required when called:    2
 23758 ;; This function calls:
 23759 ;;		i2_Byte_GetPair
 23760 ;; This function is called by:
 23761 ;;		i2_Port_SetPin
 23762 ;; This function uses a non-reentrant model
 23763 ;;
 23764                           
 23765                           	psect	text137
 23766  0146E2                     __ptext137:
 23767                           	opt stack 0
 23768  0146E2                     i2_Word_GetPair:
 23769                           	opt stack 10
 23770                           
 23771                           ;Types.c: 158: if (pPair >= 4)
 23772                           
 23773                           ;incstack = 0
 23774  0146E2  0E03               	movlw	3
 23775  0146E4  640F               	cpfsgt	i2Word_GetPair@pPair,c
 23776  0146E6  D00C               	goto	i2l781
 23777                           
 23778                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23779  0146E8  0E01               	movlw	1
 23780  0146EA  240D               	addwf	i2Word_GetPair@pInput,w,c
 23781  0146EC  6E0A               	movwf	i2Byte_GetPair@pInput,c
 23782  0146EE  0E00               	movlw	0
 23783  0146F0  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 23784  0146F2  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 23785  0146F4  500F               	movf	i2Word_GetPair@pPair,w,c
 23786  0146F6  0FFC               	addlw	252
 23787  0146F8  6E0C               	movwf	i2Byte_GetPair@pPair,c
 23788  0146FA  ECFC  F0A4         	call	i2_Byte_GetPair	;wreg free
 23789  0146FE  0012               	return	
 23790  014700                     i2l781:
 23791                           
 23792                           ;Types.c: 160: else
 23793                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23794  014700  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23795  014704  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23796  014708  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23797  01470C  ECFC  F0A4         	call	i2_Byte_GetPair	;wreg free
 23798  014710  0012               	return	
 23799  014712                     __end_ofi2_Word_GetPair:
 23800                           	opt stack 0
 23801                           tosu	equ	0xFFF
 23802                           tosh	equ	0xFFE
 23803                           tosl	equ	0xFFD
 23804                           pclatu	equ	0xFFB
 23805                           pclath	equ	0xFFA
 23806                           tblptru	equ	0xFF8
 23807                           tblptrh	equ	0xFF7
 23808                           tblptrl	equ	0xFF6
 23809                           tablat	equ	0xFF5
 23810                           prodh	equ	0xFF4
 23811                           prodl	equ	0xFF3
 23812                           intcon	equ	0xFF2
 23813                           indf0	equ	0xFEF
 23814                           postinc0	equ	0xFEE
 23815                           fsr0h	equ	0xFEA
 23816                           fsr0l	equ	0xFE9
 23817                           wreg	equ	0xFE8
 23818                           indf1	equ	0xFE7
 23819                           postdec1	equ	0xFE5
 23820                           fsr1h	equ	0xFE2
 23821                           fsr1l	equ	0xFE1
 23822                           indf2	equ	0xFDF
 23823                           postinc2	equ	0xFDE
 23824                           postdec2	equ	0xFDD
 23825                           plusw2	equ	0xFDB
 23826                           fsr2h	equ	0xFDA
 23827                           fsr2l	equ	0xFD9
 23828                           status	equ	0xFD8
 23829                           
 23830 ;; *************** function i2_Byte_GetPair *****************
 23831 ;; Defined at:
 23832 ;;		line 87 in file "Library/Types.c"
 23833 ;; Parameters:    Size  Location     Type
 23834 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23835 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23836 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23837 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23838 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23839 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23840 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23841 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23842 ;;		 -> NULL(0), 
 23843 ;;  pPair           1   11[COMRAM] unsigned char 
 23844 ;; Auto vars:     Size  Location     Type
 23845 ;;		None
 23846 ;; Return value:  Size  Location     Type
 23847 ;;                  1    wreg      unsigned char 
 23848 ;; Registers used:
 23849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23850 ;; Tracked objects:
 23851 ;;		On entry : 0/0
 23852 ;;		On exit  : 0/0
 23853 ;;		Unchanged: 0/0
 23854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23858 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23859 ;;Total ram usage:        3 bytes
 23860 ;; Hardware stack levels used:    1
 23861 ;; Hardware stack levels required when called:    1
 23862 ;; This function calls:
 23863 ;;		i2_Byte_GetZone
 23864 ;; This function is called by:
 23865 ;;		i2_Word_GetPair
 23866 ;; This function uses a non-reentrant model
 23867 ;;
 23868                           
 23869                           	psect	text138
 23870  0149F8                     __ptext138:
 23871                           	opt stack 0
 23872  0149F8                     i2_Byte_GetPair:
 23873                           	opt stack 10
 23874                           
 23875                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23876                           
 23877                           ;incstack = 0
 23878  0149F8  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23879  0149FC  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23880  014A00  0E04               	movlw	4
 23881  014A02  6E03               	movwf	i2Byte_GetZone@pMax,c
 23882  014A04  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23883  014A08  0E02               	movlw	2
 23884  014A0A  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 23885  014A0C  EC64  F09C         	call	i2_Byte_GetZone	;wreg free
 23886  014A10  0012               	return	
 23887  014A12                     __end_ofi2_Byte_GetPair:
 23888                           	opt stack 0
 23889                           tosu	equ	0xFFF
 23890                           tosh	equ	0xFFE
 23891                           tosl	equ	0xFFD
 23892                           pclatu	equ	0xFFB
 23893                           pclath	equ	0xFFA
 23894                           tblptru	equ	0xFF8
 23895                           tblptrh	equ	0xFF7
 23896                           tblptrl	equ	0xFF6
 23897                           tablat	equ	0xFF5
 23898                           prodh	equ	0xFF4
 23899                           prodl	equ	0xFF3
 23900                           intcon	equ	0xFF2
 23901                           indf0	equ	0xFEF
 23902                           postinc0	equ	0xFEE
 23903                           fsr0h	equ	0xFEA
 23904                           fsr0l	equ	0xFE9
 23905                           wreg	equ	0xFE8
 23906                           indf1	equ	0xFE7
 23907                           postdec1	equ	0xFE5
 23908                           fsr1h	equ	0xFE2
 23909                           fsr1l	equ	0xFE1
 23910                           indf2	equ	0xFDF
 23911                           postinc2	equ	0xFDE
 23912                           postdec2	equ	0xFDD
 23913                           plusw2	equ	0xFDB
 23914                           fsr2h	equ	0xFDA
 23915                           fsr2l	equ	0xFD9
 23916                           status	equ	0xFD8
 23917                           
 23918 ;; *************** function i2_Byte_GetZone *****************
 23919 ;; Defined at:
 23920 ;;		line 64 in file "Library/Types.c"
 23921 ;; Parameters:    Size  Location     Type
 23922 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23923 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23924 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23925 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23926 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23927 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23928 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23929 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23930 ;;		 -> NULL(0), 
 23931 ;;  pMax            1    2[COMRAM] unsigned char 
 23932 ;;  pChunk          1    3[COMRAM] unsigned char 
 23933 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23934 ;; Auto vars:     Size  Location     Type
 23935 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23936 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23937 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23938 ;; Return value:  Size  Location     Type
 23939 ;;                  1    wreg      unsigned char 
 23940 ;; Registers used:
 23941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23942 ;; Tracked objects:
 23943 ;;		On entry : 0/0
 23944 ;;		On exit  : 0/0
 23945 ;;		Unchanged: 0/0
 23946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23947 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23948 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23949 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23950 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23951 ;;Total ram usage:        9 bytes
 23952 ;; Hardware stack levels used:    1
 23953 ;; This function calls:
 23954 ;;		Nothing
 23955 ;; This function is called by:
 23956 ;;		i2_Byte_GetPair
 23957 ;; This function uses a non-reentrant model
 23958 ;;
 23959                           
 23960                           	psect	text139
 23961  0138C8                     __ptext139:
 23962                           	opt stack 0
 23963  0138C8                     i2_Byte_GetZone:
 23964                           	opt stack 10
 23965                           
 23966                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23967                           
 23968                           ;incstack = 0
 23969  0138C8  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23970  0138CC  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23971  0138D0  0E00               	movlw	low (__mediumconst shr (0+16))
 23972  0138D2  6EF8               	movwf	tblptru,c
 23973  0138D4  0E0F               	movlw	(high __ramtop+-1)
 23974  0138D6  64F7               	cpfsgt	tblptrh,c
 23975  0138D8  D003               	bra	i2u414_47
 23976  0138DA  0008               	tblrd		*
 23977  0138DC  50F5               	movf	tablat,w,c
 23978  0138DE  D005               	bra	i2u414_40
 23979  0138E0                     i2u414_47:
 23980  0138E0  CFF6 FFE9          	movff	tblptrl,fsr0l
 23981  0138E4  CFF7 FFEA          	movff	tblptrh,fsr0h
 23982  0138E8  50EF               	movf	indf0,w,c
 23983  0138EA                     i2u414_40:
 23984  0138EA  6E09               	movwf	i2Byte_GetZone@Output,c
 23985                           
 23986                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23987  0138EC  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23988  0138EE  0D01               	mullw	1
 23989  0138F0  0E6B               	movlw	low _MASKS
 23990  0138F2  24F3               	addwf	prodl,w,c
 23991  0138F4  6EF6               	movwf	tblptrl,c
 23992  0138F6  0EFD               	movlw	high _MASKS
 23993  0138F8  20F4               	addwfc	prodh,w,c
 23994  0138FA  6EF7               	movwf	tblptrh,c
 23995  0138FC                     	if	1	;There are 3 active tblptr bytes
 23996  0138FC  6AF8               	clrf	tblptru,c
 23997  0138FE  0E00               	movlw	low (__mediumconst shr (0+16))
 23998  013900  22F8               	addwfc	tblptru,f,c
 23999  013902                     	endif
 24000  013902  0008               	tblrd		*
 24001  013904  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 24002                           
 24003                           ;Types.c: 68: UINT8 Offset = 0;
 24004  013908  0E00               	movlw	0
 24005  01390A  6E08               	movwf	i2Byte_GetZone@Offset,c
 24006                           
 24007                           ;Types.c: 70: while (pChunk >= pMax)
 24008  01390C  D003               	goto	i2l732
 24009  01390E                     
 24010                           ;Types.c: 71: {
 24011                           ;Types.c: 72: pChunk -= pMax;
 24012  01390E  5003               	movf	i2Byte_GetZone@pMax,w,c
 24013  013910  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 24014                           
 24015                           ;Types.c: 73: Offset += 1;
 24016  013912  2A08               	incf	i2Byte_GetZone@Offset,f,c
 24017  013914                     i2l732:
 24018  013914  5003               	movf	i2Byte_GetZone@pMax,w,c
 24019  013916  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 24020  013918  B0D8               	btfsc	status,0,c
 24021  01391A  D7F9               	goto	i2l733
 24022                           
 24023                           ;Types.c: 74: }
 24024                           ;Types.c: 75: pChunk *= pChunkSize;
 24025  01391C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 24026  01391E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 24027  013920  50F3               	movf	prodl,w,c
 24028  013922  6E04               	movwf	i2Byte_GetZone@pChunk,c
 24029                           
 24030                           ;Types.c: 76: pChunk += Offset;
 24031  013924  5008               	movf	i2Byte_GetZone@Offset,w,c
 24032  013926  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 24033                           
 24034                           ;Types.c: 78: Output >>= pChunk;
 24035  013928  2804               	incf	i2Byte_GetZone@pChunk,w,c
 24036  01392A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 24037  01392C  D002               	goto	i2u416_40
 24038  01392E                     i2u416_45:
 24039  01392E  90D8               	bcf	status,0,c
 24040  013930  3209               	rrcf	i2Byte_GetZone@Output,f,c
 24041  013932                     i2u416_40:
 24042  013932  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 24043  013934  D7FC               	goto	i2u416_45
 24044                           
 24045                           ;Types.c: 79: Output &= MASK;
 24046  013936  5007               	movf	i2Byte_GetZone@MASK,w,c
 24047  013938  1609               	andwf	i2Byte_GetZone@Output,f,c
 24048                           
 24049                           ;Types.c: 80: return Output;
 24050  01393A  5009               	movf	i2Byte_GetZone@Output,w,c
 24051  01393C  0012               	return	
 24052  01393E                     __end_ofi2_Byte_GetZone:
 24053                           	opt stack 0
 24054                           tosu	equ	0xFFF
 24055                           tosh	equ	0xFFE
 24056                           tosl	equ	0xFFD
 24057                           pclatu	equ	0xFFB
 24058                           pclath	equ	0xFFA
 24059                           tblptru	equ	0xFF8
 24060                           tblptrh	equ	0xFF7
 24061                           tblptrl	equ	0xFF6
 24062                           tablat	equ	0xFF5
 24063                           prodh	equ	0xFF4
 24064                           prodl	equ	0xFF3
 24065                           intcon	equ	0xFF2
 24066                           indf0	equ	0xFEF
 24067                           postinc0	equ	0xFEE
 24068                           fsr0h	equ	0xFEA
 24069                           fsr0l	equ	0xFE9
 24070                           wreg	equ	0xFE8
 24071                           indf1	equ	0xFE7
 24072                           postdec1	equ	0xFE5
 24073                           fsr1h	equ	0xFE2
 24074                           fsr1l	equ	0xFE1
 24075                           indf2	equ	0xFDF
 24076                           postinc2	equ	0xFDE
 24077                           postdec2	equ	0xFDD
 24078                           plusw2	equ	0xFDB
 24079                           fsr2h	equ	0xFDA
 24080                           fsr2l	equ	0xFD9
 24081                           status	equ	0xFD8
 24082                           
 24083 ;; *************** function i2_Byte_SetBit *****************
 24084 ;; Defined at:
 24085 ;;		line 32 in file "Library/Types.c"
 24086 ;; Parameters:    Size  Location     Type
 24087 ;;  pInput          2    0[COMRAM] PTR struct Byte
 24088 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24089 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24090 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24091 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24092 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24093 ;;		 -> NULL(0), 
 24094 ;;  pBit            1    2[COMRAM] unsigned char 
 24095 ;;  pValue          1    3[COMRAM] unsigned char 
 24096 ;; Auto vars:     Size  Location     Type
 24097 ;;		None
 24098 ;; Return value:  Size  Location     Type
 24099 ;;                  1    wreg      void 
 24100 ;; Registers used:
 24101 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24102 ;; Tracked objects:
 24103 ;;		On entry : 0/0
 24104 ;;		On exit  : 0/0
 24105 ;;		Unchanged: 0/0
 24106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24107 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24109 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24110 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24111 ;;Total ram usage:        7 bytes
 24112 ;; Hardware stack levels used:    1
 24113 ;; This function calls:
 24114 ;;		Nothing
 24115 ;; This function is called by:
 24116 ;;		i2_Port_SetPin
 24117 ;; This function uses a non-reentrant model
 24118 ;;
 24119                           
 24120                           	psect	text140
 24121  01415E                     __ptext140:
 24122                           	opt stack 0
 24123  01415E                     i2_Byte_SetBit:
 24124                           	opt stack 12
 24125                           
 24126                           ;Types.c: 34: pValue &= 1;
 24127                           
 24128                           ;incstack = 0
 24129  01415E  0E01               	movlw	1
 24130  014160  1604               	andwf	i2Byte_SetBit@pValue,f,c
 24131                           
 24132                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 24133  014162  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 24134  014166  0E01               	movlw	1
 24135  014168  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 24136  01416A  2A05               	incf	??i2_Byte_SetBit,f,c
 24137  01416C  D002               	goto	i2u483_44
 24138  01416E                     i2u483_45:
 24139  01416E  90D8               	bcf	status,0,c
 24140  014170  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 24141  014172                     i2u483_44:
 24142  014172  2E05               	decfsz	??i2_Byte_SetBit,f,c
 24143  014174  D7FC               	goto	i2u483_45
 24144  014176  5006               	movf	??i2_Byte_SetBit+1,w,c
 24145  014178  0AFF               	xorlw	255
 24146  01417A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 24147  01417C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 24148  014180  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 24149  014184  5007               	movf	??i2_Byte_SetBit+2,w,c
 24150  014186  16DF               	andwf	indf2,f,c
 24151                           
 24152                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 24153  014188  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 24154  01418C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 24155  014190  2A05               	incf	??i2_Byte_SetBit,f,c
 24156  014192  D002               	goto	i2u484_44
 24157  014194                     i2u484_45:
 24158  014194  90D8               	bcf	status,0,c
 24159  014196  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 24160  014198                     i2u484_44:
 24161  014198  2E05               	decfsz	??i2_Byte_SetBit,f,c
 24162  01419A  D7FC               	goto	i2u484_45
 24163  01419C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 24164  0141A0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 24165  0141A4  5006               	movf	??i2_Byte_SetBit+1,w,c
 24166  0141A6  12DF               	iorwf	indf2,f,c
 24167  0141A8  0012               	return		;funcret
 24168  0141AA                     __end_ofi2_Byte_SetBit:
 24169                           	opt stack 0
 24170                           tosu	equ	0xFFF
 24171                           tosh	equ	0xFFE
 24172                           tosl	equ	0xFFD
 24173                           pclatu	equ	0xFFB
 24174                           pclath	equ	0xFFA
 24175                           tblptru	equ	0xFF8
 24176                           tblptrh	equ	0xFF7
 24177                           tblptrl	equ	0xFF6
 24178                           tablat	equ	0xFF5
 24179                           prodh	equ	0xFF4
 24180                           prodl	equ	0xFF3
 24181                           intcon	equ	0xFF2
 24182                           indf0	equ	0xFEF
 24183                           postinc0	equ	0xFEE
 24184                           fsr0h	equ	0xFEA
 24185                           fsr0l	equ	0xFE9
 24186                           wreg	equ	0xFE8
 24187                           indf1	equ	0xFE7
 24188                           postdec1	equ	0xFE5
 24189                           fsr1h	equ	0xFE2
 24190                           fsr1l	equ	0xFE1
 24191                           indf2	equ	0xFDF
 24192                           postinc2	equ	0xFDE
 24193                           postdec2	equ	0xFDD
 24194                           plusw2	equ	0xFDB
 24195                           fsr2h	equ	0xFDA
 24196                           fsr2l	equ	0xFD9
 24197                           status	equ	0xFD8
 24198                           
 24199 ;; *************** function i2_MXK_SwitchTo *****************
 24200 ;; Defined at:
 24201 ;;		line 105 in file "Library/MXK.c"
 24202 ;; Parameters:    Size  Location     Type
 24203 ;;  pModule         1    wreg     enum E6925
 24204 ;; Auto vars:     Size  Location     Type
 24205 ;;  pModule         1    7[COMRAM] enum E6925
 24206 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 24207 ;; Return value:  Size  Location     Type
 24208 ;;                  1    wreg      unsigned char 
 24209 ;; Registers used:
 24210 ;;		wreg, status,2, status,0, cstack
 24211 ;; Tracked objects:
 24212 ;;		On entry : 0/0
 24213 ;;		On exit  : 0/0
 24214 ;;		Unchanged: 0/0
 24215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24219 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24220 ;;Total ram usage:        2 bytes
 24221 ;; Hardware stack levels used:    1
 24222 ;; Hardware stack levels required when called:    1
 24223 ;; This function calls:
 24224 ;;		i2_delay_us
 24225 ;; This function is called by:
 24226 ;;		i2_Motor_Step
 24227 ;; This function uses a non-reentrant model
 24228 ;;
 24229                           
 24230                           	psect	text141
 24231  0145B6                     __ptext141:
 24232                           	opt stack 0
 24233  0145B6                     i2_MXK_SwitchTo:
 24234                           	opt stack 12
 24235                           
 24236                           ;incstack = 0
 24237                           ;i2MXK_SwitchTo@pModule stored from wreg
 24238  0145B6  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 24239                           
 24240                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 24241  0145B8  5086               	movf	3974,w,c	;volatile
 24242  0145BA  0B0F               	andlw	15
 24243  0145BC  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 24244                           
 24245                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 24246  0145BE  504B               	movf	_Bus_State,w,c
 24247  0145C0  A4D8               	btfss	status,2,c
 24248  0145C2  D002               	goto	i2l1738
 24249                           
 24250                           ;MXK.c: 110: return 0;
 24251  0145C4  0E00               	movlw	0
 24252  0145C6  0012               	return	
 24253  0145C8                     i2l1738:
 24254                           
 24255                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 24256  0145C8  0E00               	movlw	0
 24257  0145CA  6E4B               	movwf	_Bus_State,c
 24258                           
 24259                           ;MXK.c: 114: if (CUR != pModule)
 24260  0145CC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24261  0145CE  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 24262  0145D0  B4D8               	btfsc	status,2,c
 24263  0145D2  D00A               	goto	i2l1740
 24264                           
 24265                           ;MXK.c: 115: {
 24266                           ;MXK.c: 116: PORTG &= ~(0xF);
 24267  0145D4  0EF0               	movlw	240
 24268  0145D6  1686               	andwf	3974,f,c	;volatile
 24269                           
 24270                           ;MXK.c: 117: PORTG |= pModule;
 24271  0145D8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24272  0145DA  1286               	iorwf	3974,f,c	;volatile
 24273                           
 24274                           ;MXK.c: 120: delay_us(10);
 24275  0145DC  0E00               	movlw	0
 24276  0145DE  6E02               	movwf	i2delay_us@us+1,c
 24277  0145E0  0E0A               	movlw	10
 24278  0145E2  6E01               	movwf	i2delay_us@us,c
 24279  0145E4  ECEB  F0A1         	call	i2_delay_us	;wreg free
 24280  0145E8                     i2l1740:
 24281                           
 24282                           ;MXK.c: 121: }
 24283                           ;MXK.c: 122: return 1;
 24284  0145E8  0E01               	movlw	1
 24285  0145EA  0012               	return	
 24286  0145EC                     __end_ofi2_MXK_SwitchTo:
 24287                           	opt stack 0
 24288                           tosu	equ	0xFFF
 24289                           tosh	equ	0xFFE
 24290                           tosl	equ	0xFFD
 24291                           pclatu	equ	0xFFB
 24292                           pclath	equ	0xFFA
 24293                           tblptru	equ	0xFF8
 24294                           tblptrh	equ	0xFF7
 24295                           tblptrl	equ	0xFF6
 24296                           tablat	equ	0xFF5
 24297                           prodh	equ	0xFF4
 24298                           prodl	equ	0xFF3
 24299                           intcon	equ	0xFF2
 24300                           indf0	equ	0xFEF
 24301                           postinc0	equ	0xFEE
 24302                           fsr0h	equ	0xFEA
 24303                           fsr0l	equ	0xFE9
 24304                           wreg	equ	0xFE8
 24305                           indf1	equ	0xFE7
 24306                           postdec1	equ	0xFE5
 24307                           fsr1h	equ	0xFE2
 24308                           fsr1l	equ	0xFE1
 24309                           indf2	equ	0xFDF
 24310                           postinc2	equ	0xFDE
 24311                           postdec2	equ	0xFDD
 24312                           plusw2	equ	0xFDB
 24313                           fsr2h	equ	0xFDA
 24314                           fsr2l	equ	0xFD9
 24315                           status	equ	0xFD8
 24316                           
 24317 ;; *************** function i2_delay_us *****************
 24318 ;; Defined at:
 24319 ;;		line 255 in file "Library/Types.c"
 24320 ;; Parameters:    Size  Location     Type
 24321 ;;  us              2    0[COMRAM] unsigned short 
 24322 ;; Auto vars:     Size  Location     Type
 24323 ;;  delay_us        4    2[COMRAM] unsigned long 
 24324 ;; Return value:  Size  Location     Type
 24325 ;;                  1    wreg      void 
 24326 ;; Registers used:
 24327 ;;		wreg, status,2, status,0
 24328 ;; Tracked objects:
 24329 ;;		On entry : 0/0
 24330 ;;		On exit  : 0/0
 24331 ;;		Unchanged: 0/0
 24332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24334 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24336 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24337 ;;Total ram usage:        6 bytes
 24338 ;; Hardware stack levels used:    1
 24339 ;; This function calls:
 24340 ;;		Nothing
 24341 ;; This function is called by:
 24342 ;;		i2_MXK_SwitchTo
 24343 ;; This function uses a non-reentrant model
 24344 ;;
 24345                           
 24346                           	psect	text142
 24347  0143D6                     __ptext142:
 24348                           	opt stack 0
 24349  0143D6                     i2_delay_us:
 24350                           	opt stack 12
 24351                           
 24352                           ;Types.c: 256: unsigned long u;
 24353                           ;Types.c: 257: while (us--) {
 24354                           
 24355                           ;incstack = 0
 24356  0143D6  D016               	goto	i2u487_40
 24357  0143D8                     i2l8230:
 24358                           
 24359                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 24360  0143D8  0E00               	movlw	0
 24361  0143DA  6E03               	movwf	i2delay_us@u,c
 24362  0143DC  0E00               	movlw	0
 24363  0143DE  6E04               	movwf	i2delay_us@u+1,c
 24364  0143E0  0E00               	movlw	0
 24365  0143E2  6E05               	movwf	i2delay_us@u+2,c
 24366  0143E4  0E00               	movlw	0
 24367  0143E6  6E06               	movwf	i2delay_us@u+3,c
 24368  0143E8                     i2l8232:
 24369  0143E8  5003               	movf	i2delay_us@u,w,c
 24370  0143EA  1004               	iorwf	i2delay_us@u+1,w,c
 24371  0143EC  1005               	iorwf	i2delay_us@u+2,w,c
 24372  0143EE  1006               	iorwf	i2delay_us@u+3,w,c
 24373  0143F0  A4D8               	btfss	status,2,c
 24374  0143F2  D008               	goto	i2u487_40
 24375  0143F4  F000               	nop		; ;# 
 24376  0143F6  0E01               	movlw	1
 24377  0143F8  2603               	addwf	i2delay_us@u,f,c
 24378  0143FA  0E00               	movlw	0
 24379  0143FC  2204               	addwfc	i2delay_us@u+1,f,c
 24380  0143FE  2205               	addwfc	i2delay_us@u+2,f,c
 24381  014400  2206               	addwfc	i2delay_us@u+3,f,c
 24382  014402  D7F2               	goto	i2l8232
 24383  014404                     i2u487_40:
 24384  014404  0601               	decf	i2delay_us@us,f,c
 24385  014406  A0D8               	btfss	status,0,c
 24386  014408  0602               	decf	i2delay_us@us+1,f,c
 24387  01440A  2801               	incf	i2delay_us@us,w,c
 24388  01440C  E1E5               	bnz	i2l8230
 24389  01440E  2802               	incf	i2delay_us@us+1,w,c
 24390  014410  B4D8               	btfsc	status,2,c
 24391  014412  0012               	return	
 24392  014414  D7E1               	goto	i2l832
 24393  014416                     __end_ofi2_delay_us:
 24394                           	opt stack 0
 24395                           tosu	equ	0xFFF
 24396                           tosh	equ	0xFFE
 24397                           tosl	equ	0xFFD
 24398                           pclatu	equ	0xFFB
 24399                           pclath	equ	0xFFA
 24400                           tblptru	equ	0xFF8
 24401                           tblptrh	equ	0xFF7
 24402                           tblptrl	equ	0xFF6
 24403                           tablat	equ	0xFF5
 24404                           prodh	equ	0xFF4
 24405                           prodl	equ	0xFF3
 24406                           intcon	equ	0xFF2
 24407                           indf0	equ	0xFEF
 24408                           postinc0	equ	0xFEE
 24409                           fsr0h	equ	0xFEA
 24410                           fsr0l	equ	0xFE9
 24411                           wreg	equ	0xFE8
 24412                           indf1	equ	0xFE7
 24413                           postdec1	equ	0xFE5
 24414                           fsr1h	equ	0xFE2
 24415                           fsr1l	equ	0xFE1
 24416                           indf2	equ	0xFDF
 24417                           postinc2	equ	0xFDE
 24418                           postdec2	equ	0xFDD
 24419                           plusw2	equ	0xFDB
 24420                           fsr2h	equ	0xFDA
 24421                           fsr2l	equ	0xFD9
 24422                           status	equ	0xFD8
 24423                           
 24424 ;; *************** function i2_MXK_Release *****************
 24425 ;; Defined at:
 24426 ;;		line 130 in file "Library/MXK.c"
 24427 ;; Parameters:    Size  Location     Type
 24428 ;;		None
 24429 ;; Auto vars:     Size  Location     Type
 24430 ;;		None
 24431 ;; Return value:  Size  Location     Type
 24432 ;;                  1    wreg      unsigned char 
 24433 ;; Registers used:
 24434 ;;		wreg, status,2, status,0
 24435 ;; Tracked objects:
 24436 ;;		On entry : 0/0
 24437 ;;		On exit  : 0/0
 24438 ;;		Unchanged: 0/0
 24439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24444 ;;Total ram usage:        0 bytes
 24445 ;; Hardware stack levels used:    1
 24446 ;; This function calls:
 24447 ;;		Nothing
 24448 ;; This function is called by:
 24449 ;;		i2_Motor_Step
 24450 ;; This function uses a non-reentrant model
 24451 ;;
 24452                           
 24453                           	psect	text143
 24454  014BC8                     __ptext143:
 24455                           	opt stack 0
 24456  014BC8                     i2_MXK_Release:
 24457                           	opt stack 13
 24458                           
 24459                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 24460                           
 24461                           ;incstack = 0
 24462  014BC8  0E01               	movlw	1
 24463  014BCA  6E4B               	movwf	_Bus_State,c
 24464                           
 24465                           ;MXK.c: 135: return 1;
 24466                           ;	Return value of i2_MXK_Release is never used
 24467  014BCC  0012               	return	
 24468  014BCE                     __end_ofi2_MXK_Release:
 24469                           	opt stack 0
 24470                           tosu	equ	0xFFF
 24471                           tosh	equ	0xFFE
 24472                           tosl	equ	0xFFD
 24473                           pclatu	equ	0xFFB
 24474                           pclath	equ	0xFFA
 24475                           tblptru	equ	0xFF8
 24476                           tblptrh	equ	0xFF7
 24477                           tblptrl	equ	0xFF6
 24478                           tablat	equ	0xFF5
 24479                           prodh	equ	0xFF4
 24480                           prodl	equ	0xFF3
 24481                           intcon	equ	0xFF2
 24482                           indf0	equ	0xFEF
 24483                           postinc0	equ	0xFEE
 24484                           fsr0h	equ	0xFEA
 24485                           fsr0l	equ	0xFE9
 24486                           wreg	equ	0xFE8
 24487                           indf1	equ	0xFE7
 24488                           postdec1	equ	0xFE5
 24489                           fsr1h	equ	0xFE2
 24490                           fsr1l	equ	0xFE1
 24491                           indf2	equ	0xFDF
 24492                           postinc2	equ	0xFDE
 24493                           postdec2	equ	0xFDD
 24494                           plusw2	equ	0xFDB
 24495                           fsr2h	equ	0xFDA
 24496                           fsr2l	equ	0xFD9
 24497                           status	equ	0xFD8
 24498                           
 24499 ;; *************** function i2_MXK_Queue *****************
 24500 ;; Defined at:
 24501 ;;		line 144 in file "Library/MXK.c"
 24502 ;; Parameters:    Size  Location     Type
 24503 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 24504 ;;		 -> Absolute function(1), Motor_Step(1), 
 24505 ;; Auto vars:     Size  Location     Type
 24506 ;;		None
 24507 ;; Return value:  Size  Location     Type
 24508 ;;                  1    wreg      void 
 24509 ;; Registers used:
 24510 ;;		wreg, status,2, status,0
 24511 ;; Tracked objects:
 24512 ;;		On entry : 0/0
 24513 ;;		On exit  : 0/0
 24514 ;;		Unchanged: 0/0
 24515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24516 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24519 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24520 ;;Total ram usage:        3 bytes
 24521 ;; Hardware stack levels used:    1
 24522 ;; This function calls:
 24523 ;;		Nothing
 24524 ;; This function is called by:
 24525 ;;		i2_Motor_Step
 24526 ;; This function uses a non-reentrant model
 24527 ;;
 24528                           
 24529                           	psect	text144
 24530  014B4E                     __ptext144:
 24531                           	opt stack 0
 24532  014B4E                     i2_MXK_Queue:
 24533                           	opt stack 13
 24534                           
 24535                           ;MXK.c: 146: lQueue = pCallback;
 24536                           
 24537                           ;incstack = 0
 24538  014B4E  C001  F068         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24539  014B52  C002  F069         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24540  014B56  C003  F06A         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24541  014B5A  0012               	return		;funcret
 24542  014B5C                     __end_ofi2_MXK_Queue:
 24543                           	opt stack 0
 24544                           tosu	equ	0xFFF
 24545                           tosh	equ	0xFFE
 24546                           tosl	equ	0xFFD
 24547                           pclatu	equ	0xFFB
 24548                           pclath	equ	0xFFA
 24549                           tblptru	equ	0xFF8
 24550                           tblptrh	equ	0xFF7
 24551                           tblptrl	equ	0xFF6
 24552                           tablat	equ	0xFF5
 24553                           prodh	equ	0xFF4
 24554                           prodl	equ	0xFF3
 24555                           intcon	equ	0xFF2
 24556                           indf0	equ	0xFEF
 24557                           postinc0	equ	0xFEE
 24558                           fsr0h	equ	0xFEA
 24559                           fsr0l	equ	0xFE9
 24560                           wreg	equ	0xFE8
 24561                           indf1	equ	0xFE7
 24562                           postdec1	equ	0xFE5
 24563                           fsr1h	equ	0xFE2
 24564                           fsr1l	equ	0xFE1
 24565                           indf2	equ	0xFDF
 24566                           postinc2	equ	0xFDE
 24567                           postdec2	equ	0xFDD
 24568                           plusw2	equ	0xFDB
 24569                           fsr2h	equ	0xFDA
 24570                           fsr2l	equ	0xFD9
 24571                           status	equ	0xFD8
 24572                           tosu	equ	0xFFF
 24573                           tosh	equ	0xFFE
 24574                           tosl	equ	0xFFD
 24575                           pclatu	equ	0xFFB
 24576                           pclath	equ	0xFFA
 24577                           tblptru	equ	0xFF8
 24578                           tblptrh	equ	0xFF7
 24579                           tblptrl	equ	0xFF6
 24580                           tablat	equ	0xFF5
 24581                           prodh	equ	0xFF4
 24582                           prodl	equ	0xFF3
 24583                           intcon	equ	0xFF2
 24584                           indf0	equ	0xFEF
 24585                           postinc0	equ	0xFEE
 24586                           fsr0h	equ	0xFEA
 24587                           fsr0l	equ	0xFE9
 24588                           wreg	equ	0xFE8
 24589                           indf1	equ	0xFE7
 24590                           postdec1	equ	0xFE5
 24591                           fsr1h	equ	0xFE2
 24592                           fsr1l	equ	0xFE1
 24593                           indf2	equ	0xFDF
 24594                           postinc2	equ	0xFDE
 24595                           postdec2	equ	0xFDD
 24596                           plusw2	equ	0xFDB
 24597                           fsr2h	equ	0xFDA
 24598                           fsr2l	equ	0xFD9
 24599                           status	equ	0xFD8
 24600                           
 24601                           	psect	text145
 24602  000000                     __ptext145:
 24603                           	opt stack 0
 24604                           tosu	equ	0xFFF
 24605                           tosh	equ	0xFFE
 24606                           tosl	equ	0xFFD
 24607                           pclatu	equ	0xFFB
 24608                           pclath	equ	0xFFA
 24609                           tblptru	equ	0xFF8
 24610                           tblptrh	equ	0xFF7
 24611                           tblptrl	equ	0xFF6
 24612                           tablat	equ	0xFF5
 24613                           prodh	equ	0xFF4
 24614                           prodl	equ	0xFF3
 24615                           intcon	equ	0xFF2
 24616                           indf0	equ	0xFEF
 24617                           postinc0	equ	0xFEE
 24618                           fsr0h	equ	0xFEA
 24619                           fsr0l	equ	0xFE9
 24620                           wreg	equ	0xFE8
 24621                           indf1	equ	0xFE7
 24622                           postdec1	equ	0xFE5
 24623                           fsr1h	equ	0xFE2
 24624                           fsr1l	equ	0xFE1
 24625                           indf2	equ	0xFDF
 24626                           postinc2	equ	0xFDE
 24627                           postdec2	equ	0xFDD
 24628                           plusw2	equ	0xFDB
 24629                           fsr2h	equ	0xFDA
 24630                           fsr2l	equ	0xFD9
 24631                           status	equ	0xFD8
 24632                           
 24633                           	psect	rparam
 24634  0000                     tosu	equ	0xFFF
 24635                           tosh	equ	0xFFE
 24636                           tosl	equ	0xFFD
 24637                           pclatu	equ	0xFFB
 24638                           pclath	equ	0xFFA
 24639                           tblptru	equ	0xFF8
 24640                           tblptrh	equ	0xFF7
 24641                           tblptrl	equ	0xFF6
 24642                           tablat	equ	0xFF5
 24643                           prodh	equ	0xFF4
 24644                           prodl	equ	0xFF3
 24645                           intcon	equ	0xFF2
 24646                           indf0	equ	0xFEF
 24647                           postinc0	equ	0xFEE
 24648                           fsr0h	equ	0xFEA
 24649                           fsr0l	equ	0xFE9
 24650                           wreg	equ	0xFE8
 24651                           indf1	equ	0xFE7
 24652                           postdec1	equ	0xFE5
 24653                           fsr1h	equ	0xFE2
 24654                           fsr1l	equ	0xFE1
 24655                           indf2	equ	0xFDF
 24656                           postinc2	equ	0xFDE
 24657                           postdec2	equ	0xFDD
 24658                           plusw2	equ	0xFDB
 24659                           fsr2h	equ	0xFDA
 24660                           fsr2l	equ	0xFD9
 24661                           status	equ	0xFD8
 24662                           
 24663                           	psect	temp
 24664  000051                     btemp:
 24665                           	opt stack 0
 24666  000051                     	ds	1
 24667  0000                     int$flags	set	btemp
 24668  0000                     wtemp6	set	btemp+1
 24669                           tosu	equ	0xFFF
 24670                           tosh	equ	0xFFE
 24671                           tosl	equ	0xFFD
 24672                           pclatu	equ	0xFFB
 24673                           pclath	equ	0xFFA
 24674                           tblptru	equ	0xFF8
 24675                           tblptrh	equ	0xFF7
 24676                           tblptrl	equ	0xFF6
 24677                           tablat	equ	0xFF5
 24678                           prodh	equ	0xFF4
 24679                           prodl	equ	0xFF3
 24680                           intcon	equ	0xFF2
 24681                           indf0	equ	0xFEF
 24682                           postinc0	equ	0xFEE
 24683                           fsr0h	equ	0xFEA
 24684                           fsr0l	equ	0xFE9
 24685                           wreg	equ	0xFE8
 24686                           indf1	equ	0xFE7
 24687                           postdec1	equ	0xFE5
 24688                           fsr1h	equ	0xFE2
 24689                           fsr1l	equ	0xFE1
 24690                           indf2	equ	0xFDF
 24691                           postinc2	equ	0xFDE
 24692                           postdec2	equ	0xFDD
 24693                           plusw2	equ	0xFDB
 24694                           fsr2h	equ	0xFDA
 24695                           fsr2l	equ	0xFD9
 24696                           status	equ	0xFD8


Data Sizes:
    Strings     150
    Constant    760
    Data        25
    BSS         679
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     60     160
    BANK1           256     15     209
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_13(CODE[24]), STR_12(CODE[24]), STR_11(CODE[24]), STR_10(CODE[13]), 
		 -> STR_9(CODE[15]), STR_8(CODE[11]), STR_7(CODE[13]), STR_6(CODE[14]), 
		 -> STR_5(CODE[8]), STR_4(CODE[12]), STR_3(CODE[15]), STR_2(CODE[3]), 
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _setMode->_continuousMode
    _nullMode->_Console_Render
    _continuousMode->_Console_Render
    _displayText->_Console_Render
    _displaySID->_printf
    _displayMode->_getMode
    _printf->___llmod
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___llmod->___lldiv
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _initialise->_HMI_Init
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 2937701
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                        _displayText
                         _initialise
                            _setMode
 ---------------------------------------------------------------------------------
 (1) _setMode                                              4     4      0 1584982
                                             48 BANK0      4     4      0
                     _continuousMode
                            _getMode
                           _nullMode
                       _positionMode
                           _stepMode
 ---------------------------------------------------------------------------------
 (2) _stepMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _positionMode                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nullMode                                             0     0      0  373082
                     _Console_Render
                        _displayText
                             _printf
 ---------------------------------------------------------------------------------
 (2) _continuousMode                                       4     4      0  944837
                                             44 BANK0      4     4      0
                     _Console_Render
              _Console_SetForecolour
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                        _MXK_Release
                     _MXK_TestButton *
                         _Motor_Move
                        _Motor_Speed
                             ___wmul
                        _displayText
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _displayText                                          0     0      0  328984
                     _Console_Render
                        _displayMode
                         _displaySID
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displaySID                                           0     0      0    8954
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displayMode                                          0     0      0  275932
              _Console_SetForecolour
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              27    21      6    8467
                                             22 BANK0     18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (5) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (6) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (7) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (8) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (8) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (7) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     840
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) _getMode                                              6     4      2  266978
                                             36 BANK0      6     4      2
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _HMI_Poll                                             0     0      0  255286
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (7) _Button_Poll                                          9     6      3  255286
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (7) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (8) _Event_TestButton                                     1     1      0   36429
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_UpButton                                   1     1      0   36284
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DownButton                                 1     1      0   36284
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetNumber                                        2     0      2    3334
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (10) _itos                                               10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (11) _reverse                                             7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) _HMI_SetSegments                                     5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (11) _ToSegment                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (8) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_SetForecolour                                2     0      2     487
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (5) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (6) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    3839
                                             27 BANK0      4     0      4
                        _Timer0_Init
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0  992423
                       _Console_Init
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                         _Motor_Move
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4     915
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88782
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3442
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              4 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      2     2      0
                                              0 BANK1      4     1      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (6) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (6) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (7) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (8) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (8) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261965
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (9) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (10) _Port_TogglePin                                      4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (11) _Port_SetPin                                         5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  218205
                                             13 BANK1      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86443
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    3268
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2977
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (12) _Byte_SetBit                                         7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (12) _Word_GetPair                                        3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (13) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (14) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (16) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (19) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (20) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (21) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (19) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (18) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (19) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _displayText
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _displayMode
       _Console_SetForecolour
       _getMode
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _displaySID
       _Console_SetForecolour
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _initialise
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _Motor_Move
       _Timer0_Start
   _setMode
     _continuousMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Console_SetForecolour
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_BlockSwitchTo *
         _delay_us
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_Dequeue *
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release *
       _MXK_TestButton *
         _Port_GetPin
       _Motor_Move *
         _Timer0_Start
       _Motor_Speed *
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
         ___wmul (ARG)
       ___wmul *
       _displayText *
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _getMode *
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf *
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _getMode
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
     _nullMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _displayText
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _positionMode
     _stepMode

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      46       9       27.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      D1       7       81.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     207      12        0.0%
DATA                 0      0     333       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Aug 12 15:14:46 2017

                   i2_Timer0_Stop 4BC2                  SPI_Init@pChannel 00EE  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 24D8  
                               _A 004C                                 l8 2702  
                               _a 004D                                 _i 003A  
                               _j 0039                                 _l 004F  
                               _u 0038                                 _w 0050  
                    ?_displayMode 0001                      ?_displayText 0001  
                              l11 200A                                l12 1FF4  
                              l90 1F40                                l85 1E3C  
                              l87 1EAA                                l89 1F16  
                    ___awdiv@sign 00C2               ___wmul@multiplicand 00BF  
                   _HMI_DIPSwitch 4A2A                LCD_DrawField@pSize 00D5  
              LCD_DrawField@count 00DB                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 4B74                               l120 343C  
                             l121 3452                               l122 3468  
                             l220 3E96                               l117 347E  
                             l221 3E5A                               l118 3426  
                             l230 40E0                               l222 3EA6  
                             l223 3E78                       ?_LED_Toggle 0001  
                             l234 4272                               l235 4242  
                             l227 40FC                               l403 1C50  
                             l412 192C                               l228 40C4  
                             l340 3050                               l404 1BF0  
                             l421 18C0                               l413 17C2  
                             l237 425A                               l341 305E  
                             l405 1C80                     ??_Console_Tab 00C5  
                             l414 1948                               l430 2946  
                             l350 3158                               l342 306C  
                             l510 117E                               l406 1C08  
                             l415 17E8                               l351 30E8  
                             l343 307A                               l511 128E  
                             l407 1C20                               l183 320C  
                             l600 000C                               l432 2970  
                             l344 3088                               l512 11A0  
                             l408 1C38                               l184 31E6  
                             l417 1854                               l601 01A0  
                             l433 29A0                               l353 30F6  
                             l337 30B2                               l345 3096  
                             l610 0228                               l602 003E  
                             l354 3104                               l346 30A4  
                             l338 3042                               l370 2FE2  
                             l611 0276                               l603 01B2  
                             l427 29CA                               l355 3112  
                             l363 300C                               l371 2FF0  
                             l531 0774                       ?_HMI_GetBar 0001  
                             l612 02C4                               l604 00EC  
                             l356 3120                               l372 2FFE  
                             l364 2F9C                               l532 0798  
                             l516 11E8                               l357 312E  
                             l509 1272                               l614 03A6  
                             l358 313C                               l366 2FAA  
                             l526 07B8                               l615 039E  
                             l607 0312                               l359 314A  
                             l367 2FB8                               l519 1230  
                             l616 03B8                               l608 01DA  
                             l368 2FC6                               l528 07D6  
                             l393 3F66                               l617 03A2  
                             l609 0330                               l369 2FD4  
                             l529 0754                               l483 0DAC  
                             l732 3326                               l476 0E84  
                             l900 0B24                               l733 331A  
                             l389 3D22                               l477 0CF6  
                             l397 4236                               l901 0B28  
                             l726 2D10                               l478 0EA0  
                             l486 0E18                               l654 481A  
                             l910 0B4C                               l902 0B2C  
                             l727 2D04                               l479 0D40  
                             l655 4812                               l911 0B50  
                             l903 0B30                               l824 3C56  
                             l832 401E                               l912 0B54  
                             l904 0B34                               l673 46D4  
                             l657 4816                               l681 3BFA  
                             l913 0B58                               l905 0B38  
                             l921 3BCA                               l914 0B5C  
                             l906 0B3C                               l922 3B96  
                             l930 2616                               l819 37D4  
                             l915 0B60                               l907 0B40  
                             l684 3C10                               l916 0B64  
                             l908 0B44                               l860 0A84  
                             l781 44BE                               l597 001A  
                             l853 0B6C                               l917 0B68  
                             l909 0B48                               l861 0A88  
                             l598 0002                               l678 3C36  
                             l686 3C20                               l870 0AAC  
                             l862 0A8C                               l854 0A70  
                             l599 002A                               l679 3BEA  
                             l871 0AB0                               l863 0A90  
                             l776 42FA                               l880 0AD4  
                             l872 0AB4                               l864 0A94  
                             l856 0A74                               l928 2696  
                             l881 0AD8                               l873 0AB8  
                             l865 0A98                               l857 0A78  
                             l929 2666                               l890 0AFC  
                             l882 0ADC                               l874 0ABC  
                             l866 0A9C                               l858 0A7C  
                             l891 0B00                               l883 0AE0  
                             l875 0AC0                               l867 0AA0  
                             l859 0A80                               l892 0B04  
                             l884 0AE4                               l876 0AC4  
                             l868 0AA4                               l893 0B08  
                             l885 0AE8                               l877 0AC8  
                             l869 0AA8                               l894 0B0C  
                             l886 0AEC                               l878 0ACC  
                             l990 35D6                               l895 0B10  
                             l887 0AF0                               l879 0AD0  
                             l983 32AA                               l976 36EE  
                             l896 0B14                               l888 0AF4  
                             l992 35E6                               l984 322E  
                             l897 0B18                               l889 0AF8  
                             l985 32A6                               l978 36FE  
                             l898 0B1C                               l899 0B20  
                             l997 3ECC                               l999 3EF0  
                             _PR2 000FCB                               _val 006D  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00D6  
                    _Word_GetPair 4492                               prod 000FF3  
             MXK_SwitchTo@pModule 00C4                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 00CD  
              Console_MakeField@y 00CE                      Console_Tab@c 00CC  
                    Console_Tab@i 00CB               LCD_DrawField@pField 00CF  
                    Console_Tab@t 00CA      __end_of_Event_HMI_LeftButton 3FC4  
                      i2_delay_us 43D6              Port_Set@TypeRequired 00DF  
               Console_FormFeed@x 00BF                 Console_FormFeed@y 00C0  
             LCD_DrawField@pPoint 00D1      __end_of_Event_HMI_DownButton 4652  
                  ?_LCD_DrawField 00CF             Port_SetPinType@Output 00E7  
                 Port_SetPin@Type 00D0                   Port_SetPin@pPin 00CE  
                   ?_Byte_GetPair 00C6                   __end_of_LED_Set 410E  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 2EEC  
                    _Word_SetPair 42CA                              l1000 3F0C  
                            l1010 2A3A                              l1004 3D5C  
                   ?_Byte_GetZone 00BD                              l1005 3D8A  
                            l1040 1976                              l1009 2A46  
                            l1041 197C                              l1210 2CA0  
                            l2010 3684                              l1042 1982  
                            l2011 3690                              l1043 1988  
                            l1212 2CCA                              l2012 369C  
                            l1036 1AD2                              l1044 198E  
                            l2020 3570                              l1213 2CB0  
                            l1045 1994                              l1037 1970  
                            l2021 3582                              l1062 153A  
                            l1063 1568                              l1215 2CDC  
                            l2007 36A8                              l1047 1A3A  
                            l2031 08F2                              l1056 13CA  
                            l1208 2C30                              l2008 3678  
                            l2016 3594                              l1161 17A8  
                            l1057 1590                              l1209 2C84  
                            l2017 354C                              l2025 0A58  
                            l1082 27F0                              l1058 13D2  
                            l2026 07EE                              l1059 13FC  
                            l2019 355E                              l2035 0940  
                            l2027 0870                              l1084 27F8  
                            l2036 098A                              l2052 4094  
                            l1077 27C0                              l2053 407C  
                            l2038 0A54                              l1079 27D0  
                            l2055 4082                              l2063 47C4  
                            l2080 0F66                              l2056 4088  
                            l2057 408E                              l2082 0F96  
                            l2090 0F8C                              l2091 0FF4  
                            l2093 1038                              l2085 0F6E  
                            l2510 3838                              l2270 2AC6  
                            l2511 3846                              l2271 2ADC  
                            l2079 0F52                              l1640 245E  
                            l2520 3E3C                              l2088 0FD2  
                            l2521 3E4A                              l2273 2B06  
                            l2097 109E                              l2089 0F74  
                            l2506 3802                              l2274 2AFA  
                            l2098 113E                              l1635 24C6  
                            l2507 37F6                              l2099 10AE  
                            l1732 4460                              l1740 4392  
                            l1636 24BC                              l2516 3E12  
                            l1900 464A                              l2453 2BA6  
                            l1637 243C                              l2517 3E06  
                            l2277 2B3C                              l2454 2B96  
                            l1734 448E                              l1638 241E  
                            l2278 2B4A                              l1743 49F4  
                            l1639 247A                              l2463 3396  
                            l2279 2B5E                              l2464 3386  
                            l2457 2C00                              l2458 2C12  
                            l1738 436A                              l1835 22BE  
                            l2467 33E0                              l1836 22DE  
                            l2468 33F2                              l1792 2158  
                            l1793 2166                              l1795 2170  
                            l1891 434C                              l1884 3FBC  
                            l1892 433C                              l1885 3FA2  
                            l1878 4504                              l1887 3FB4  
                            l1896 467A                              l1995 3878  
                            l1996 38B8                    ??_Console_Init 00BD  
           Port_SetPinType@pInput 00E3                              STR_1 FF81  
                            STR_2 FFFC                              STR_3 FF97  
                            STR_4 FFDD                              STR_5 FFF4  
                            STR_6 FFB5                              STR_7 FFC3  
                            STR_8 FFE9                              STR_9 FFA6  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 3188                              u7014 2D4C  
                            u7015 2D46                              u7024 2D7E  
                            u8000 2410                              u7025 2D78  
                            u8010 2450                              u8100 4016  
                            u7310 2BAC                              u7400 3C94  
                            _PIR1 000F9E                              u6530 32F0  
                            u8130 1C86                              _PIR2 000FA1  
                            _PIR3 000FA4                              u7260 460E  
                            u6620 3808                              u7148 1F9E  
                            u7340 339C                              u7149 1FB2  
                            u6550 3356                              u8230 1F4E  
                            u7280 4056               __end_of_GetPortTRIS 303C  
                            u7440 39AC                              u6800 41E2  
                            u6537 32E6                              u7265 4608  
                            u7530 232A                              u6650 3E18  
                            u6810 3D58                              u6555 3350  
                            u7515 2276                              u8260 3756  
                            u6740 362A                              u6820 3D82  
                            u7700 1154                              u6805 41DC  
                            u6574 3DAA                              u8078 276E  
                            u6590 42B8                              u8190 1E3A  
                            u7198 20DA                              u6750 3630  
                            u6910 2B0C                              u6575 3DA4  
                            u6584 3DDC                              u6585 3DD6  
                            u6690 2682                              u6595 42B2  
                            u6835 4AF6                              u7580 283A  
                            u7900 1578                              u6836 4AFA  
                            u7805 061E                              u6845 4AE0  
                            u7590 2846                              u6846 4AE4  
                            u7815 069C                              u6855 4ACA  
                            u6856 4ACE                              u7728 3654  
                            u7680 108A                              u6945 4B20  
                            u7825 06DE                              u6865 4B0C  
                            u7729 3668                              u6970 376E  
                            u6946 4B22                              u6866 4B10  
                            u6874 34F8                              u7835 0720  
                            u6875 34F2                              u7765 044C  
                            u7775 0464                              u7960 21C4  
                            u7785 047C                              u7795 049E  
                            _SPI1 0161                              _SPI2 016C  
                            u7990 23FC                              u9838 442A  
                            u9950 08C8                              u9918 0878  
                            u9839 4440                              u9919 088C  
                            u9880 0848                              u9848 07F6  
                            _TMR0 000FD6                              u9849 080A  
                            u9938 089A                              u9939 08AE  
                            u9868 0818                              u9869 082C  
                            u9968 08D0                              u9969 08E4  
                            u9898 0850                              u9899 0864  
                            u9988 08FA                              u9989 090E  
                            _gISR 0029                Event_DIPSwitch@Bar 00D7  
                   ??_Byte_GetBit 00C0                SPI_MaxSpeed@pInput 00CC  
                   ?_Byte_SetByte 00BD                     ?_Byte_SetPair 00C8  
                 __end_of_SPI_DCS 46E2                              _main 47C0  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 00C8  
                            _itos 25D8                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00BD                              btemp 0051  
                            _zero 004E                     ??_Byte_SetBit 00C1  
                    ?_HMI_SetLeft 0001                __size_of_LCD_Reset 0050  
                    ?_HMI_SetDown 0001                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 00C2  
                            start 14AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                 Timer0_Init@DIVIDE 00D4  
                 ?_SPI_DisableISR 00BD                  Motor_Move@pMotor 00C0  
             HMI_SetButton@pValue 00C3                     Console_Init@x 00BF  
                   Console_Init@y 00C0                    ?i2_Timer0_Stop 0001  
              __size_of_HMI_SetUp 0016                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FF5B  
            Set_Rotation@rotation 00C3            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A      __size_of_Console_ClearCursor 0040  
                __end_of_LCD_Fill 401C                  __end_of_LCD_Init 1F8C  
                 getMode@dipState 00E5                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 3EB6  
                   ??_Button_Init 00F8           GetPortProperties@pInput 00BF  
                   ??_Button_Poll 00DB                  __end_of_HMI_Init 17AA  
                           l11006 22BE                             l10330 2CCA  
                           l11052 27B6                             l10256 2682  
                           l11058 27C6                             l10282 35CC  
                           l11156 103E                             l11174 10AE  
                           l10288 35DC                             l13016 08C8  
                           l13008 0870                             l10810 401E  
                           l10618 3FB4                             l10812 4030  
                           l10910 3C68                             l11710 3FFA  
                           l11536 2158                             l11706 3FEC  
                           l10930 3990                             l11490 13F2  
                           l10908 3C56                             l10916 3C94  
                           l10926 3982                             l11834 1EAA  
                           l11746 1BE6                             l11844 1F4E  
                           l11862 36F4                             l11856 36E4  
                           l11884 177C                  __end_of_HMI_Poll 3B0C  
                           _I2C1T 0040                             _I2C2T 01B3  
                           ?_main 0001                   __end_of___awdiv 2B68  
                           ?_itos 00C4                             STR_10 FFD0  
                           STR_11 FF69                             STR_12 FF69  
                           STR_13 FF69                   _Event_DIPSwitch 4712  
                 __end_of___lldiv 2C24                             u10008 091C  
                           u10009 0930                             u10028 0948  
                           u10029 095C                             u10048 096A  
                           u10049 097E           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 00BF                   __end_of___llmod 3404  
                           _INDEX 0079                   __end_of___lwdiv 3850  
                           _MASKS FD6B                   __end_of___lwmod 3E54  
                           i2l430 2F04                             i2l432 2F2A  
                           i2l433 2F54                             i2l427 2F7A  
                           i2l732 3914                             i2l733 390E  
                           i2l832 43D8                             i2l781 4700  
                 ___awdiv@counter 00C1                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 00D3                   __end_of_getMode 36D2  
                  __CFG_FCMEN$OFF 000000                             _PortA 019F  
                           _PortB 0195                             _PortC 0091  
                           _PortD 0087                             _PortE 007D  
                           _PortF 01A9                             _PortG 018B  
         __end_of_Port_SetPinType 196A                   _ADC_Initialised 003C  
                  ??_Byte_GetPair 00C9                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00D2                   __end_of_dpowers FD4B  
                  ??_Byte_GetZone 00C2                    Button_Poll@Pin 00E0  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 2AAA  
                __end_of_MXK_Init 1E1A              i2Byte_GetPair@pInput 000A  
                           _putch 4B24                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 3C54                   __end_of_setMode 40BE  
           __end_ofi2_MXK_Release 4BCE                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 3BE8  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00C0  
                  ??_Byte_SetPair 00CC                    ??_Byte_SetQuad 00CC  
                           plusw2 000FDB                    ??_Byte_SetZone 00C3  
                   ?_HMI_SetRight 0001                             status 000FD8  
                           wtemp6 0052                   _Configure_GPIOs 3B0C  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 4928               __size_of_LED_Toggle 0048  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
     __size_of_Port_CheckPairType 006A               __size_of_HMI_SetBar 000A  
                 __initialization 2D94               __end_of_Byte_GetBit 4620  
                    __end_of_main 47E8                      __end_of_itos 26B0  
            HMI_SetButton@reindex 00BF                      SPI_Send9@dat 0036  
             __end_of_Byte_SetBit 3DF2                  __end_of_InitList FD23  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 4B24  
     __size_of_Port_CheckPortType 0048                            ??_main 00F9  
                          ??_itos 00C8           _Console_MakeField$10974 00CB  
                   __activetblptr 000003                 Port_SetPin@pInput 00CC  
               __end_of_LCD_Reset 415E                 Port_SetPin@pValue 00CF  
                       ??_LED_Set 00D2                 _MXK_InitDIPSwitch 4982  
               GetPortPORT@pInput 00BF            Port_CheckPairType@Pin1 00E7  
          Port_CheckPairType@Pin2 00E8                 __end_of_LCD_Write 48A6  
                     _GetPortPORT 30E2                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 2F96                   ??_LCD_DrawField 00D9  
      __end_of_PortProperty_Valid 37D8                  __end_of_Port_Set 07D8  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0066  
             __end_of_Button_Init 2784               __end_of_Button_Poll 20F2  
               Word_GetPair@pPair 00CB           LCD_FillRectangle@pPoint 00C8  
               __end_of_HMI_SetUp 4AD0                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 349C                         ??_SPI_DCS 00BF  
                ___llmod@dividend 00CA                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 476C  
          Port_SetQuadType@Output 00F7                            _ANCON0 000FC1  
                ___awdiv@dividend 00BD                    _continuousMode 07D8  
                          ?_putch 0001                  ??_Console_Render 00E0  
                   ToSegment@pCHR 00BD             _Console_SetForecolour 4B94  
                _Console_FormFeed 35BA            Port_SetQuadType@pInput 00F3  
                          i2l1640 2576                            i2l1635 25C6  
                          i2l1740 45E8                            i2l1636 25BC  
                          i2l1637 2554                            i2l1638 253E  
                  __CFG_WDTEN$OFF 000000                            i2l1639 258A  
                          i2l1738 45C8                            i2l1598 145E  
                          i2l8230 43D8                            i2l8232 43E8  
                  ??_HMI_SetRight 00BD            __end_of_LCD_Word_Write 4946  
                  _Timer0_Restart 4B68               ??_MXK_InitDIPSwitch 00F8  
                  i2_MXK_SwitchTo 45B6                   Byte_GetBit@pBit 00BF  
    Console_SetForecolour@pColour 00BD                        _Reset_High 4964  
              Console_Render@temp 00E2                    ??_HMI_UpSwitch 00C3  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00D4  
                __end_of_delay_ms 3CBE                      LED_Init@pLED 00EA  
                __end_of_delay_us 406E                     ??_Timer0_Init 00CE  
                   ??_Timer2_Init 00CE                     ??_Timer0_Stop 00BD  
                      _Timer0_ISR 485E          __size_of_Console_NewLine 00A2  
               Timer2_Init@DIVIDE 00D7                    __CFG_XINST$OFF 000000  
        __size_of_HMI_InitButtons 0004                        _Motor_Init 2854  
     __size_of_Event_HMI_UpButton 0030                        _Motor_Move 4546  
                   ??_Motor_Speed 00DC                        _Motor_Step 23B2  
            _Event_HMI_LeftButton 3F6C           __end_of_Event_DIPSwitch 4740  
  __size_of_Event_HMI_RightButton 0044                            ___wmul 4580  
                 ??_HMI_DIPSwitch 00C3                         ??___awdiv 00C1  
                  __CFG_STVREN$ON 000000                            _change 00FF  
   __end_of_Event_HMI_RightButton 4354                            _lMotor 006F  
                       ??___lldiv 00C5                            _lQueue 0068  
                      _TestButton 0181              _Event_HMI_DownButton 4620  
                       ??___llmod 00D2                         ??___lwdiv 00C1  
              __size_of_ToSegment 0284                         ??___lwmod 00C1  
        __end_of_Port_SetQuadType 0F44          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 0034              __end_of_Console_Init 375C  
               GetPortTRIS@pInput 00BF                __size_of_Reset_Low 001E  
                          clear_0 2DFC                            clear_1 2E0E  
                          clear_2 2E1A                            clear_3 2E26  
                          clear_4 2E32                  ___awdiv@quotient 00C3  
                      Port_Init@i 01C3                 __end_of_MXK_Queue 4B4E  
      __end_ofHMI_SetButton@F7211 FD78                         ??_getMode 00E3  
                          _printf 0F44              __size_of_displayMode 008E  
            __size_of_displayText 0028         __end_of_MXK_InitDIPSwitch 49A0  
                  HMI_SetButton@v 00C4            HMI_SetSegments@pString 00BE  
                     _Console_Tab 29E8               LCD_Word_Write@value 00C2  
                    __pdataCOMRAM 0047                __size_of_Port_Init 0192  
                   ??_Port_GetPin 00C0          Port_CheckPortType@Output 00F6  
                __end_of_nullMode 4546                   ??i2_Port_SetPin 0014  
                       ??_setMode 00ED                      __mediumconst FC70  
     __end_ofTimer2_Init@PRESCALE FD7B          Port_CheckPortType@pDrive 00F5  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 00F3  
                   ??_Port_SetPin 00D0                         ??_reverse 00C1  
          __end_of_continuousMode 0A6A                  __end_of_stepMode 1406  
           Console_MakeField@Fill 0200                  ?_Port_SetPinType 00E3  
                          putch@c 00D1                 Motor_Speed@pMotor 00D8  
                  ?_HMI_SetNumber 00CE                    i2_Word_GetPair 46E2  
         __end_of_Configure_GPIOs 3B7C                  ??_MXK_TestButton 00C3  
          __end_of_Timer0_Restart 4B74                     Set_Rotation@m 00C2  
         continuousMode@direction 00E9                      ?_MXK_Release 0001  
    __size_of_Event_HMI_DIPSwitch 002C                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 45EC                      i2delay_us@us 0001  
       Event_HMI_DIPSwitch@pState 00D6                   ?_LCD_Word_Write 00C2  
                      __accesstop 0060           __end_of__initialization 2E38  
                       ?_LCD_Fill 00C6                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00EF                       _Byte_GetBit 45EC  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 4B80  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00C5  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
                     _Byte_SetBit 3D8E                     __end_of_MASKS FD74  
                  _PortA_Property FF67                         LCD_Fill@i 00C8  
                       LCD_Fill@j 00C9                         LCD_Init@i 00F4  
            __size_of_HMI_SetLeft 0016              __size_of_HMI_SetDown 0016  
           ?_Event_HMI_LeftButton 0001                    __pcstackCOMRAM 0001  
                  _PortB_Property FF65               __size_ofi2_delay_us 0040  
                    __pidataBANK0 4BAE                      __pidataBANK1 4B9E  
           ?_Event_HMI_DownButton 0001               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 49DC                   Console_Render@x 00E7  
                 Console_Render@y 00E8               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FD4B  
            __end_of_Byte_GetZone 336A       Event_HMI_RightButton@pState 00D6  
                  _PortC_Property FF63               __end_of_Timer0_Init 2252  
                   __end_of_putch 4B32                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 23B2               __end_of_Timer0_Stop 4BC2  
                       ?_SPI_Init 00EA                         ?_SPI_Send 00BD  
                     _Button_Init 26B0                 Port_SetType@pType 01BC  
                     _Button_Poll 1F8C              __end_of_Byte_SetByte 4B40  
            __end_of_Byte_SetPair 48C8                    _HMI_LeftSwitch 4A8A  
                  _PortD_Property FF61              __end_of_Byte_SetQuad 48EA  
                    ??_LED_Toggle 00D5                      ??_HMI_GetBar 00BD  
            __end_of_Byte_SetZone 2D94               __end_of_Motor_Speed 47C0  
                  _HMI_DownSwitch 4A42                     SPI_Send@pData 00BF  
           __end_of_MXK_DIPSwitch 4A2A                      ??_HMI_SetBar 00BD  
                  _PortE_Property FF5F          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 4712                   ?_continuousMode 0001  
                  _PortF_Property FF5D           Port_CheckQuadType@Pair1 00F0  
         Port_CheckQuadType@Pair2 00F1          MXK_BlockSwitchTo@pModule 00C4  
          ?_Console_SetForecolour 00BD                 _Console_Backspace 3EB6  
                 ?_Timer0_Restart 0001                           ??_putch 00D1  
        __size_of_HMI_RightSwitch 0018               _Console_ClearCursor 4396  
               __end_of_ToSegment 0CEE                    _PortG_Property FF5B  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 42CA  
         Port_CheckQuadType@pQuad 00EE                   reverse@iterator 00C2  
                ??_SPI_DisableISR 00BF                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 4964  
       __size_of_Event_TestButton 003C           __size_of_Port_TogglePin 0030  
                      ??_LCD_Fill 00C8                        ??_LCD_Init 00F2  
             __end_of_Port_SetPin 29E8            __end_of_PortA_Property FF69  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 00BD  
                      ??_LED_Init 00EA                Byte_SetByte@pValue 00BF  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
                   ?_Timer0_Clear 0001                        ??_HMI_Init 00F8  
                      ??_HMI_Poll 00E1                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00EA            __end_of_PortB_Property FF67  
                   ?_Timer0_Start 00BD                 __end_of_Port_Init 1C9A  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00E5  
              __end_of_LED_Toggle 4284                __end_of_HMI_GetBar 4BBC  
        LCD_FillRectangle@pColour 00C6               ??_Console_Backspace 00BF  
               Set_Addr_Window@xe 00C3                 Set_Addr_Window@ye 00C4  
               Set_Addr_Window@xs 00C5                 Set_Addr_Window@ys 00C2  
                     ?_Motor_Init 00EA                Byte_SetPair@pInput 00C8  
                     ?_Motor_Move 00C0                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 00CB                __end_of_HMI_SetBar 4B94  
          __end_of_PortC_Property FF65                Word_GetPair@pInput 00C9  
                  ??_Set_Rotation 00C2                         ?_Port_Set 00CC  
                         ?___wmul 00BD                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 00C2      __size_of_Console_ResetCursor 001E  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 4AA2  
          __end_of_PortD_Property FF63                           _ADC_AN0 00B0  
                         _ADC_AN1 00AB                           _ADC_AN2 00A6  
                         _ADC_AN3 00A1        Event_HMI_DownButton@pState 00D6  
                      ??_MXK_Init 00F9                 Port_GetPin@pInput 00BD  
               _Console_MakeField 2784                 ??_Console_NewLine 00BD  
          __end_of_HMI_DownSwitch 4A5A                        ??_SPI_Init 00F0  
          Event_TestButton@pState 00D6                       setMode@mode 00EF  
                      ??_SPI_Send 00C0              __end_of_HMI_SetRight 4AE6  
                         ?_printf 00D3                 ??_HMI_InitButtons 00BD  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FF61  
             Console_Render@F6956 01C9                ?_Console_MakeField 00C2  
                         _COUNTER 0032                   ??_HMI_SetButton 00BD  
            __end_of_HMI_UpSwitch 4A72                           _LED_Set 40BE  
         _Console_IncrementCursor 3D28            __end_of_PortF_Property FF5F  
                     _gBackcolour 0073                   ??_HMI_SetNumber 00D0  
                       _I2C1_Done 002F                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0124                         _I2C1_More 0121  
                       _I2C2_More 011E                         ?_delay_ms 00BD  
       __end_of_Console_Backspace 3F12                         ?_delay_us 00BD  
      __end_of_MXK_InitTestButton 49BE                           _SSP1ADD 000FC8  
                      _displaySID 48EA                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FF5D  
             ??_Console_MakeField 00C4                           _SPI_DCS 46B2  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
            i2Byte_GetZone@Offset 0008                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 00BD  
               Event_TestButton@j 0075                        ??_Mode_Set 00BD  
                  ??_Timer2_Clear 00BD                           _Font5x7 FD7B  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 00C0              SPI_DisableISR@pInput 00BD  
                   ?_Port_GetQuad 00BD                   Byte_SetBit@pBit 00BF  
            Port_TogglePin@pInput 00D1             __end_ofi2_Byte_SetBit 41AA  
          ??_Event_HMI_LeftButton 00D6                           __Hparam 0000  
               Port_GetQuad@pQuad 00BF                       _Timer0_Init 20F2  
                     _Timer2_Init 2252                           __Lparam 0000  
                     _Timer0_Stop 4BBC             __size_of_Console_Init 008A  
                         OutSeg@a 003D   __end_ofPortProperty_Valid@F6830 FD6B  
          ??_Event_HMI_DownButton 00D6                     LCD_Write@mode 00C0  
                       ?_nullMode 0001                        ??_Port_Set 00CF  
       __end_of_Console_MakeField 2854                 _Console_PrintChar 196A  
                     _Motor_Speed 4796                           _Stepper 009B  
                   ?_Port_SetType 01BA                           _gCursor 0047  
                         ___awdiv 2AAA             ??_Console_ClearCursor 00BD  
                         _lBuffer 0246                           ___lldiv 2B68  
                 __size_of___wmul 0036                         ?_stepMode 0001  
                         ___llmod 336A                           ___lwdiv 37D8  
                         ___lwmod 3DF2                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 3648                ?_Console_PrintChar 0001  
                         __pcinit 2D94                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                        _initialise 3850  
                         _getMode 3648                           __ptext0 47C0  
                         __ptext1 406E                           __ptext2 1404  
                         __ptext3 4BD2                           __ptext4 450C  
                         __ptext5 07D8                           __ptext6 47E8  
                         __ptext7 48EA                           __ptext8 352C  
                         __ptext9 0F44                   __size_of_printf 0232  
                       _T0CONbits 000FD5                 i2MXK_SwitchTo@CUR 0007  
                         _dpowers FD23                         _T2CONbits 000FCA  
                   LED_Set@pValue 00D1               __size_of_Reset_High 001E  
           Event_DIPSwitch@pState 00D6                      ?_GetPortPORT 00BD  
                    ?_GetPortTRIS 00BD               ??_Console_PrintChar 00CD  
                     _Port_GetPin 4284                           _setMode 406E  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 00B9  
             LCD_DrawRectangle@p4 00B5                      ??i2_delay_us 0003  
                      ??_delay_ms 00BF                        ??_delay_us 00BF  
                         _reverse 3B7C                         _DIPSwitch 0177  
             __size_of_Timer0_ISR 0026                       _Port_SetPin 2924  
                  LCD_DrawField@i 00DF                         _LCD_Reset 410E  
             __size_of_Motor_Init 00D0               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0126                         _LCD_Write 4884  
            __size_of_MXK_Dequeue 003E                        delay_ms@ms 00BD  
            end_of_initialization 2E38                        delay_us@us 00BD  
               ??_HMI_SetSegments 00C0           Console_PrintChar@pInput 00D0  
                       _HMI_SetUp 4ABA                      _Console_Init 36D2  
                 HMI_SetUp@pValue 00BD              __size_of_MXK_Release 001C  
      __end_of_Port_CheckPairType 3D28                         i2u1010_48 4870  
                         itos@Out 00CC                    ??_Port_GetQuad 00C0  
              _PortProperty_Valid 375C                Byte_SetQuad@pInput 00C8  
              SPI_MinSpeed@pInput 00CC                Byte_SetQuad@pValue 00CB  
           __size_of_Byte_GetPair 001E                   ___lldiv@divisor 00C1  
           __size_of_Byte_GetZone 009C                 ??_HMI_RightSwitch 00C3  
                 ___lldiv@counter 00C9         __end_of_Console_PrintChar 1B08  
                      ??_nullMode 00E9                    ??_Port_SetType 00F7  
      __end_of_Port_CheckQuadType 3F6C                           printf@c 00E4  
                         printf@f 00D3                    Port_Init@pPort 01C0  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 00C6                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00CC  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 423C  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 4416  
                      ??_stepMode 00BD                Button_Init@pInitIO 01BE  
           Timer0_Init@pFrequency 00CA               _Event_HMI_DIPSwitch 4740  
               ?_Port_SetQuadType 00F3                       _gForecolour 00FD  
       ??_Console_IncrementCursor 00C1            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 00F7  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00C3  
           Console_Render@lCursor 00E3                         _MXK_Queue 4B40  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00BF  
      __size_of_Console_Backspace 005C                   _Set_Addr_Window 2E42  
                  SPI_Init@pClock 00EA                  ??_LCD_Word_Write 00C4  
                     ?_displaySID 0001             __end_of_LCD_DrawField 322C  
                  Port_Set@pInput 00CC                    SPI_Init@pInput 00F0  
            ??_PortProperty_Valid 00D0                    Port_Set@pValue 00CE  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 349C  
                      ?_LCD_Write 00C0                      _Byte_GetPair 49BE  
              HMI_SetButton@F7211 FD74                      _Byte_GetZone 32CE  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 00DD  
               LCD_DrawField@ymax 00DE              ?_Event_HMI_DIPSwitch 0001  
                  _Port_TogglePin 4682                        ?_HMI_SetUp 0001  
                _Event_TestButton 44D0              Port_SetPinType@Props 00E8  
             continuousMode@speed 00EB                      ?_Byte_GetBit 00BD  
         __size_ofi2_Byte_GetPair 001A                     ?_positionMode 0001  
                    _Byte_SetByte 4B32                      _Byte_SetPair 48A6  
                    _Byte_SetQuad 48C8           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 2CDE              Port_SetPinType@pType 00E6  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00BD  
      __end_of_Event_HMI_UpButton 4682                     ?_SPI_MaxSpeed 00CC  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 00CC  
           __end_ofi2_Timer0_Stop 4BC8                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0072  
                   ?i2_Motor_Step 0001             __size_of_HMI_SetRight 0016  
      __size_of_Console_MakeField 00D0                     ??_displayMode 00E7  
                   ??_displayText 00E9             __size_of_HMI_UpSwitch 0018  
                  __end_of___wmul 45B6             __end_of_HMI_DIPSwitch 4A42  
                   __pidataCOMRAM 4B80                       ?_initialise 0001  
           _Event_HMI_RightButton 4310                      ?_Button_Init 01BA  
                    ?_Button_Poll 00D8                         _Bus_State 004B  
                ??_continuousMode 00E9               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 4B68  
               __size_of_MXK_Init 0180              __end_of_Timer2_Clear 4BAE  
                  __end_of_printf 1176                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 00C9  
                ??_Timer0_Restart 00BD              __end_of_Timer0_Start 485E  
         ??_Console_SetForecolour 00BF                Port_SetType@Output 01BD  
             start_initialization 2D94                        ?_MXK_Queue 00BD  
        PortProperty_Valid@Errors 00D2                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 393E                Port_SetType@pInput 01BA  
                      HMI_Init@in 01C7               HMI_SetNumber@pInput 00CE  
           __end_ofi2_Port_SetPin 2F96            __end_of_Port_TogglePin 46B2  
                   ?_Word_SetPair 00CC                 Byte_SetBit@pInput 00BD  
                  ??_MXK_SwitchTo 00C3                 Byte_SetBit@pValue 00C0  
              ?_LCD_FillRectangle 00C6             ??_Event_HMI_DIPSwitch 00D6  
             _Console_ResetCursor 490A       PortProperty_Valid@pPinDrive 00CE  
            MXK_BlockSwitchTo@CUR 00C3          PortProperty_Valid@pInput 00CC  
                   i2_MXK_Release 4BC8                    ??_positionMode 00BD  
          LCD_FillRectangle@pSize 00CC                    SPI_Send@pInput 00BD  
                    _HMI_SetRight 4AD0                      ??_Reset_High 00D1  
                 ___llmod@divisor 00CE          __size_of_Port_SetPinType 01C0  
                   ??_HMI_SetLeft 00BD                     ??_HMI_SetDown 00BD  
                  ??_SPI_MaxSpeed 00CE             Port_SetQuadType@pQuad 00F5  
                 ___llmod@counter 00D2                         _ToSegment 0A6A  
             ??_LCD_FillRectangle 00D0             Port_SetQuadType@pType 00F6  
                 _Console_NewLine 322C                    ??_SPI_MinSpeed 00CE  
                    _HMI_UpSwitch 4A5A                         _Reset_Low 4946  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 4BCE  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 019E  
                       _gCharSize 00F9                  Timer2_Init@INDEX 0077  
                       OutSeg@cur 003F                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 00EE           __size_of_Console_Render 0210  
                    ??_Motor_Move 00C4                      ??_Motor_Step 00D1  
              Byte_SetZone@Offset 00C6                          ??___wmul 00C1  
             __size_of_displaySID 0020              ?_Console_ResetCursor 0001  
                       _Port_Init 1B08                       __pdataBANK0 00F9  
                     __pdataBANK1 01C9                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00C0                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00BD                Byte_SetZone@pValue 00C2  
                   Mode_Set@pMode 00BD                          ??_printf 00D9  
         __end_of_Set_Addr_Window 2EEC          Port_CheckQuadType@Output 00F2  
                       _gLineSize 01CD          Port_CheckQuadType@pDrive 00EF  
                  ??_Word_GetPair 00CC          Port_CheckQuadType@pInput 00EC  
             __end_of_displayMode 35BA              __end_of_Port_GetQuad 41F4  
       __end_of_LCD_FillRectangle 39B2                       __pbssBIGRAM 0246  
             __end_of_displayText 4810                          ?_LED_Set 00D1  
                     __pbssCOMRAM 0029                __end_of_Reset_High 4982  
                   __pcstackBANK0 00BD                     __pcstackBANK1 01BA  
                      itos@Length 00CA                    ??_Word_SetPair 00D0  
              __end_of_Timer0_ISR 4884              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 00D6              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 13A0                          ?_SPI_DCS 00BD  
                 ?_Port_TogglePin 00D1                       ??_LCD_Write 00C1  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 2924               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 4580                __end_of_Motor_Step 24D8  
           Timer2_Init@pFrequency 00CA                    ?i2_MXK_Release 0001  
                     ??_HMI_SetUp 00BD               __size_of_initialise 0078  
        Port_CheckPairType@Output 00E9                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00E6          Port_CheckPairType@pInput 00E3  
                  reverse@tempVar 00C1                _MXK_InitTestButton 49A0  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00CA  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 00CA  
                ??_HMI_LeftSwitch 00C3                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00BD                     _lStepFunction 002C  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 00CA  
                ??_HMI_DownSwitch 00C3                         __pintcode 1408  
                   __pmediumconst FC70                      ?_Motor_Speed 00D8  
           ??_Console_ResetCursor 00BD                          ?___awdiv 00BD  
                       __ptext100 4964                         __ptext101 423C  
                       __ptext110 4BA6                         __ptext102 4682  
                       __ptext111 4810                         __ptext103 2924  
                       __ptext120 42CA                         __ptext112 46B2  
                       __ptext104 4284                         __ptext121 48A6  
                       __ptext113 26B0                         __ptext105 15B0  
                       __ptext130 36D2                         __ptext122 3F12  
                       __ptext114 4982                         __ptext106 3A26  
                       __ptext123 3CBE                         __ptext115 4BCE  
                       __ptext107 0000                         __ptext140 415E  
                       __ptext132 485E                         __ptext124 375C  
                       __ptext116 49A0                         __ptext108 2252  
                       __ptext141 45B6                         __ptext133 24D8  
                       __ptext125 4492                         __ptext117 17AA  
                       __ptext109 2B68                         __ptext142 43D6  
                       __ptext134 4BC2                         __ptext126 49BE  
                       __ptext118 3D8E                         __ptext143 4BC8  
                       __ptext135 4B74                         __ptext127 32CE  
                       __ptext119 0CEE                         __ptext144 4B4E  
                       __ptext136 2EEC                         __ptext128 48C8  
                       __ptext145 0000                         __ptext137 46E2  
                       __ptext129 2CDE                         __ptext138 49F8  
                       __ptext139 38C8                         _pShiftVal 006B  
             __end_of_HMI_SetLeft 4AFC               __end_of_HMI_SetDown 4B12  
                        ?___lldiv 00BD                        ?_Port_Init 01BE  
                        ?___llmod 00CA              Timer0_Init@pCPUClock 00D0  
                        ?___lwdiv 00BD                          ?___lwmod 00BD  
          ?_Event_HMI_RightButton 0001               ?_MXK_InitTestButton 0001  
               __size_of_nullMode 003A                 ?_Console_FormFeed 0001  
               _GetPortProperties 303C                 __size_of_stepMode 0002  
                        ?_getMode 00E1       __end_ofTimer0_Init@PRESCALE FD5B  
              ??_Console_FormFeed 00BD                   _HMI_SetSegments 2C24  
              ?_GetPortProperties 00BD                HMI_SetRight@pValue 00BD  
        __size_of_Event_DIPSwitch 002E             __size_of_Set_Rotation 0098  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00C0  
                    ?_Port_GetPin 00BD                          ?_setMode 0001  
               HMI_SetLeft@pValue 00BD             __end_of_HMI_SetButton 352C  
            __size_of_Console_Tab 00C2                          ?_reverse 00BD  
                    ?_Port_SetPin 00CC             __end_of_HMI_SetNumber 4796  
                ___lwdiv@quotient 00C2                   _HMI_RightSwitch 4A72  
               HMI_SetDown@pValue 00BD               ??_GetPortProperties 00BF  
         __end_of_Console_NewLine 32CE              ??_MXK_InitTestButton 00EA  
              Byte_GetPair@pInput 00C6                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 4BD2                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 49F8  
                        _LCD_Fill 3FC4                          _LCD_Init 1E1A  
                  ___wmul@product 00C1                          _HMIBoard 0127  
                  i2_Byte_GetZone 38C8                          _LED_Init 3E54  
                       delay_ms@u 00BF                Button_Poll@pButton 00D8  
                       delay_us@u 00BF                          _HMI_Init 15B0  
                        _HMI_Poll 3A9A                MXK_Queue@pCallback 00BD  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 43D6          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00CA  
                        i2u414_40 38EA                          i2u414_47 38E0  
                        i2u416_40 3932                          i2u416_45 392E  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        i2u483_44 4172                          i2u483_45 416E  
                        i2u556_40 251C                          i2u484_44 4198  
                        i2u484_45 4194                          i2u557_40 2530  
                        i2u558_40 2568                          i2u487_40 4404  
            __size_of_Byte_SetBit 0064                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
   __size_of_Event_HMI_LeftButton 0058                  HMI_SetBar@pValue 00BD  
               Button_Init@pInput 01BA           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00E7  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
   __size_of_Event_HMI_DownButton 0032             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 30E2  
                        _SSP2STAT 000F6D                       _displayMode 352C  
                    _Set_Rotation 3404             __size_of_Timer2_Clear 0008  
                     _displayText 47E8              __end_of_MXK_SwitchTo 4396  
              _Port_CheckPairType 3CBE                          _MXK_Init 1C9A  
           __size_of_Timer0_Start 0026                   MXK_SwitchTo@CUR 00C3  
                        _SPI_Init 0000          __end_of_Event_TestButton 450C  
                        _SPI_Send 3BE8                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00C2  
               ___wmul@multiplier 00BD              __end_of_positionMode 4BD4  
               Byte_GetBit@Output 00C1                        printf@flag 00DD  
            Timer2_Init@pCPUClock 00D3        __size_of_LCD_FillRectangle 0074  
            __size_of_Button_Init 00D4              __end_of_SPI_MaxSpeed 3A26  
                      printf@prec 00DB             Motor_Speed@pFrequency 00DA  
               Byte_GetBit@pInput 00BD               Port_SetPinType@pPin 00E5  
            __size_of_Button_Poll 0166                _Port_CheckQuadType 3F12  
                   _MXK_DIPSwitch 4A12               ?_Port_CheckPairType 00E3  
            __end_of_SPI_MinSpeed 3A9A                     ??_MXK_Dequeue 00D3  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 41F4             Button_Poll@pIncrement 00DA  
                    ??_displaySID 00E5           PortProperty_Valid@F6830 FD5B  
            __end_ofi2_Motor_Step 25D8                   ??i2_MXK_Release 0001  
                       copy_data0 2DA8                         copy_data1 2DC8  
                       copy_data2 2DE8                     ??_MXK_Release 00BD  
          __end_ofi2_Byte_GetPair 4A12         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 00EC  
          __end_ofi2_Byte_GetZone 393E               __end_ofi2_MXK_Queue 4B5C  
             ?_Port_CheckPortType 00F3                   itos@destination 00C6  
                        _InitList FC71              _Motor_Step$intlevel0 23B8  
                        _Mode_Set 4B12                Port_GetQuad@Output 00C2  
                     ??_ToSegment 00BD                      _ISR_Function 1408  
                    _Timer0_Clear 4B5C                       _HMI_SetLeft 4AE6  
                     _HMI_SetDown 4AFC                Port_GetQuad@pInput 00BD  
                    _Timer2_Clear 4BA6              __end_of_Word_GetPair 44D0  
                        _lCBuffer 0100              ??_Port_CheckPairType 00E7  
                     ??_Reset_Low 00D1                          __Hrparam 0000  
                    _Timer0_Start 4838                    _Console_Render 13A0  
                        __Lrparam 0000                   Timer2_Init@RDIV 00CF  
      Event_HMI_LeftButton@pState 00D6                    LCD_Write@value 00C1  
                        _Port_Set 041E                      OutSeg@segset 003E  
                       rand@screw 003B              __end_of_Word_SetPair 4310  
                     ??_Port_Init 01C1           __end_of_HMI_SetSegments 2CDE  
            ??_Port_CheckQuadType 00F0                __end_of_displaySID 490A  
           __size_of_Port_GetQuad 004A                  __size_of___awdiv 00BE  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 4454  
                __size_of___llmod 009A                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 00F6                  __size_of___lwmod 0062  
                    ??_initialise 00F9                          _lBufferX 007B  
                        _lBufferY 007A               Timer2_Init@PRESCALE FD78  
              _Event_HMI_UpButton 4652                   LCD_Fill@pColour 00C6  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 0071                  __size_of_getMode 008A  
         __end_of_HMI_RightSwitch 4A8A            Byte_GetZone@pChunkSize 00C1  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 00C1  
           __size_of_Port_SetType 022A                     reverse@length 00BF  
                       itos@input 00C4             i2MXK_SwitchTo@pModule 0008  
              Motor_Init@pAddress 00EC                          _delay_ms 3C54  
                        _delay_us 401C                          _clearall 007C  
                 ___lwdiv@divisor 00BF    __size_of_Console_SetForecolour 000A  
             ?_Event_HMI_UpButton 0001                  __size_of_setMode 0050  
                 ___lwdiv@counter 00C1     __end_of_Console_SetForecolour 4B9E  
                 Port_GetPin@pPin 00BF                          __ptext10 4B24  
                        __ptext11 196A                          __ptext20 336A  
                        __ptext12 29E8                          __ptext21 3648  
                        __ptext13 2AAA                          __ptext30 4AA2  
                        __ptext22 3A9A                          __ptext14 3D28  
                        __ptext31 41AA                          __ptext23 1F8C  
                        __ptext15 322C                          __ptext40 4ABA  
                        __ptext32 4712                          __ptext24 4A12  
                        __ptext16 35BA                          __ptext41 4AD0  
                        __ptext33 4620                          __ptext25 4A2A  
                        __ptext17 490A                          __ptext50 4AFC  
                        __ptext42 4AE6                          __ptext34 4652  
                        __ptext26 4A42                          __ptext18 3EB6  
                        __ptext51 4B8A                          __ptext43 476C  
                        __ptext35 4310                          __ptext27 4A5A  
                        __ptext19 4396                          __ptext60 4796  
                        __ptext52 4BB6                          __ptext44 25D8  
                        __ptext36 3F6C                          __ptext28 4A72  
                        __ptext61 3850                          __ptext53 4B94  
                        __ptext45 3B7C                          __ptext37 4740  
                        __ptext29 4A8A                          __ptext70 41F4  
                        __ptext62 4546                          __ptext54 13A0  
                        __ptext46 3DF2                          __ptext38 44D0  
                        __ptext71 041E                          __ptext63 4838  
                        __ptext55 393E                          __ptext47 37D8  
                        __ptext39 349C               ??_MXK_BlockSwitchTo 00C3  
                        __ptext80 4BBC                          __ptext72 4B32  
                        __ptext64 2854                          __ptext56 3188  
                        __ptext48 2C24                          __ptext81 4B68  
                        __ptext73 2F96                          __ptext65 20F2  
                        __ptext57 4580                          __ptext49 0A6A  
                        __ptext90 2E42                          __ptext82 4354  
                        __ptext74 303C                          __ptext66 4B5C  
                        __ptext58 2784                          __ptext91 4928  
                        __ptext83 49DC                          __ptext75 30E2  
                        __ptext67 1C9A                          __ptext59 45EC  
                        __ptext92 4884                          __ptext84 4B40  
                        __ptext76 3E54                          __ptext68 1B08  
                        __ptext93 3BE8                          __ptext85 4454  
                        __ptext77 40BE                          __ptext69 1176  
                        __ptext94 4B12                          __ptext86 401C  
                        __ptext78 4416                          __ptext95 3B0C  
                        __ptext87 1E1A                          __ptext79 23B2  
                        __ptext96 39B2                          __ptext88 3404  
                        __ptext97 410E                          __ptext89 3FC4  
                        __ptext98 3C54                          __ptext99 4946  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 00D6  
                 ?i2_Byte_GetZone 0001                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 4454  
               HMI_SetSegments@in 00C1             Button_Init@pThreshold 01BC  
                   __size_of_main 0028                     __size_of_itos 00D8  
               Byte_GetPair@pPair 00C8            __end_of_Console_Render 15B0  
              __end_of_initialise 38C8               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 41AA  
             __end_of_MXK_Release 49F8                    _MXK_TestButton 4AA2  
                   i2_Byte_SetBit 415E              ??_Event_HMI_UpButton 00D6  
             i2Word_GetPair@pPair 000F                          _nullMode 450C  
       __end_of_MXK_BlockSwitchTo 4492          ?_Console_IncrementCursor 0001  
            __size_of_Timer0_Init 0160              __size_of_Timer2_Init 0160  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 1176                      Port_Set@Type 00E3  
                        _stepMode 1404        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 00F2  
                       printf@val 00E0                      _SSP1STATbits 000FC7  
            __size_of_Motor_Speed 002A                    Timer0_Init@DIV 0064  
                  Timer0_Init@PRE 0078                      _SSP2STATbits 000F6D  
                      _LED_Toggle 423C                        _HMI_GetBar 4BB6  
            Button_Init@pGetState 01C1            PortProperty_Valid@Pair 00E2  
                ??_Port_TogglePin 00D4                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2       __end_of_Event_HMI_DIPSwitch 476C  
          PortProperty_Valid@pPin 00CF                        _HMI_SetBar 4B8A  
                Byte_SetZone@MASK 00C7                       i2_MXK_Queue 4B4E  
                  Timer2_Init@DIV 0060                    Timer2_Init@PRE 0076  
                Byte_SetZone@pMax 00BF            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 01C4  
                        itos@Data 00C8                LCD_FillRectangle@i 00D2  
              LCD_FillRectangle@j 00D3              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                      reverse@input 00BD  
          __size_of_HMI_DIPSwitch 0018                  ___lwmod@dividend 00BD  
                ___lldiv@dividend 00BD            __end_of_MXK_TestButton 4ABA  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
         ??_Event_HMI_RightButton 00D6                    _SPI_DisableISR 4810  
                 Port_Init@pInput 01BE                          printf@ap 00DE  
           __size_of_positionMode 0002          Event_HMI_UpButton@pState 00D6  
          __size_ofi2_Port_SetPin 00AA                  ?_HMI_SetSegments 00BE  
         Console_MakeField@Column 00C9             __size_of_SPI_MaxSpeed 0074  
                   SPI_DCS@pInput 00BD             __size_of_SPI_MinSpeed 0074  
                 ??_MXK_DIPSwitch 00C3            Event_HMI_DIPSwitch@Bar 00D7  
           __size_ofi2_Motor_Step 0100           Console_MakeField@pInput 00C8  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 00C5  
                   ??_GetPortPORT 00BF                   ___lwmod@divisor 00BF  
                   ??_GetPortTRIS 00BF             Timer0_Start@pFunction 00BD  
              Word_SetPair@pInput 00CC                   ___lwmod@counter 00C1  
              Word_SetPair@pValue 00CF                  Motor_Init@pMotor 00EA  
                     _MXK_Dequeue 4416                    LED_Toggle@pLED 00D5  
                   _LCD_DrawField 3188                  _Port_SetQuadType 0CEE  
         __size_of_continuousMode 0292                       _MXK_Release 49DC  
       __size_of_Console_FormFeed 008E                      _MXK_SwitchTo 4354  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 00C4  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00CE  
                 _Port_SetPinType 17AA           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00C5                Byte_GetZone@pChunk 00C0  
                    _positionMode 4BD2                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 4928                Byte_GetZone@pInput 00BD  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 3D8E  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 4838  
                    _SPI_MaxSpeed 39B2                      _SPI_MinSpeed 3A26  
              Port_Set@TypeActual 00E1  
