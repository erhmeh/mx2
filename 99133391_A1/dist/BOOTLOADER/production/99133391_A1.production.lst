

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Aug 10 14:02:43 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1,inline
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1,inline
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1,inline
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   162                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   163  0000                     
   164                           ; Version 1.42
   165                           ; Generated 13/04/2017 GMT
   166                           ; 
   167                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   168                           ; All rights reserved.
   169                           ; 
   170                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   171                           ; 
   172                           ; Redistribution and use in source and binary forms, with or without modification, are
   173                           ; permitted provided that the following conditions are met:
   174                           ; 
   175                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   176                           ;        conditions and the following disclaimer.
   177                           ; 
   178                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   179                           ;        of conditions and the following disclaimer in the documentation and/or other
   180                           ;        materials provided with the distribution.
   181                           ; 
   182                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   183                           ;        software without specific prior written permission.
   184                           ; 
   185                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   186                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   187                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   188                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   189                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   190                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   191                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   192                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   193                           ; 
   194                           ; 
   195                           ; Code-generator required, PIC18F67J50 Definitions
   196                           ; 
   197                           ; SFR Addresses
   198  0000                     
   199                           	psect	idataCOMRAM
   200  014662                     __pidataCOMRAM:
   201                           	opt stack 0
   202                           
   203                           ;initializer for _gCursor
   204  014662  0006               	dw	6
   205  014664  0006               	dw	6
   206                           
   207                           ;initializer for _Bus_State
   208  014666  01                 	db	1
   209                           
   210                           ;initializer for _A
   211  014667  41                 	db	65
   212                           
   213                           ;initializer for _a
   214  014668  61                 	db	97
   215                           
   216                           ;initializer for _zero
   217  014669  30                 	db	48
   218                           
   219                           ;initializer for _l
   220  01466A  80                 	db	128
   221                           
   222                           ;initializer for _w
   223  01466B  80                 	db	128
   224                           
   225                           	psect	idataBANK0
   226  014690                     __pidataBANK0:
   227                           	opt stack 0
   228                           
   229                           ;initializer for _gCharSize
   230  014690  0005               	dw	5
   231  014692  0007               	dw	7
   232                           
   233                           ;initializer for _gForecolour
   234  014694  FFFF               	dw	65535
   235                           
   236                           ;initializer for _change
   237  014696  01                 	db	1
   238                           
   239                           	psect	idataBANK1
   240  014680                     __pidataBANK1:
   241                           	opt stack 0
   242                           
   243                           ;initializer for Console_Render@F6956
   244  014680  0006               	dw	6
   245  014682  0006               	dw	6
   246                           
   247                           ;initializer for _gLineSize
   248  014684  0080               	dw	128
   249  014686  0007               	dw	7
   250                           
   251                           	psect	mediumconst
   252  00FC9A                     __pmediumconst:
   253                           	opt stack 0
   254  00FC9A  00                 	db	0
   255  00FC9B                     _InitList:
   256                           	opt stack 0
   257  00FC9B  1100               	dw	4352
   258  00FC9D  0080               	dw	128
   259  00FC9F  012C               	dw	300
   260  00FCA1  B100               	dw	45312
   261  00FCA3  0002               	dw	2
   262  00FCA5  0035               	dw	53
   263  00FCA7  0036               	dw	54
   264  00FCA9  B200               	dw	45568
   265  00FCAB  0002               	dw	2
   266  00FCAD  0035               	dw	53
   267  00FCAF  0036               	dw	54
   268  00FCB1  B300               	dw	45824
   269  00FCB3  0002               	dw	2
   270  00FCB5  0035               	dw	53
   271  00FCB7  0036               	dw	54
   272  00FCB9  0002               	dw	2
   273  00FCBB  0035               	dw	53
   274  00FCBD  0036               	dw	54
   275  00FCBF  B400               	dw	46080
   276  00FCC1  0000               	dw	0
   277  00FCC3  C000               	dw	49152
   278  00FCC5  00A2               	dw	162
   279  00FCC7  0002               	dw	2
   280  00FCC9  0084               	dw	132
   281  00FCCB  C100               	dw	49408
   282  00FCCD  00C5               	dw	197
   283  00FCCF  C200               	dw	49664
   284  00FCD1  000D               	dw	13
   285  00FCD3  0000               	dw	0
   286  00FCD5  C300               	dw	49920
   287  00FCD7  008D               	dw	141
   288  00FCD9  002A               	dw	42
   289  00FCDB  C400               	dw	50176
   290  00FCDD  008D               	dw	141
   291  00FCDF  00EE               	dw	238
   292  00FCE1  C500               	dw	50432
   293  00FCE3  000A               	dw	10
   294  00FCE5  3600               	dw	13824
   295  00FCE7  00C8               	dw	200
   296  00FCE9  E000               	dw	57344
   297  00FCEB  0012               	dw	18
   298  00FCED  001C               	dw	28
   299  00FCEF  0010               	dw	16
   300  00FCF1  0018               	dw	24
   301  00FCF3  0033               	dw	51
   302  00FCF5  002C               	dw	44
   303  00FCF7  0025               	dw	37
   304  00FCF9  0028               	dw	40
   305  00FCFB  0028               	dw	40
   306  00FCFD  0027               	dw	39
   307  00FCFF  002F               	dw	47
   308  00FD01  003C               	dw	60
   309  00FD03  0000               	dw	0
   310  00FD05  0003               	dw	3
   311  00FD07  0003               	dw	3
   312  00FD09  0010               	dw	16
   313  00FD0B  0080               	dw	128
   314  00FD0D  0078               	dw	120
   315  00FD0F  E100               	dw	57600
   316  00FD11  0012               	dw	18
   317  00FD13  001C               	dw	28
   318  00FD15  0010               	dw	16
   319  00FD17  0018               	dw	24
   320  00FD19  002D               	dw	45
   321  00FD1B  0028               	dw	40
   322  00FD1D  0023               	dw	35
   323  00FD1F  0028               	dw	40
   324  00FD21  0028               	dw	40
   325  00FD23  0026               	dw	38
   326  00FD25  002F               	dw	47
   327  00FD27  003B               	dw	59
   328  00FD29  0000               	dw	0
   329  00FD2B  0003               	dw	3
   330  00FD2D  0003               	dw	3
   331  00FD2F  0010               	dw	16
   332  00FD31  3A00               	dw	14848
   333  00FD33  0005               	dw	5
   334  00FD35  2A00               	dw	10752
   335  00FD37  0000               	dw	0
   336  00FD39  0002               	dw	2
   337  00FD3B  0000               	dw	0
   338  00FD3D  0081               	dw	129
   339  00FD3F  2B00               	dw	11008
   340  00FD41  0000               	dw	0
   341  00FD43  0003               	dw	3
   342  00FD45  0000               	dw	0
   343  00FD47  00A2               	dw	162
   344  00FD49  2900               	dw	10496
   345  00FD4B  2C00               	dw	11264
   346  00FD4D                     __end_of_InitList:
   347                           	opt stack 0
   348  00FD4D                     Timer0_Init@PRESCALE:
   349                           	opt stack 0
   350  00FD4D  0002               	dw	2
   351  00FD4F  0004               	dw	4
   352  00FD51  0008               	dw	8
   353  00FD53  0010               	dw	16
   354  00FD55  0020               	dw	32
   355  00FD57  0040               	dw	64
   356  00FD59  0080               	dw	128
   357  00FD5B  0100               	dw	256
   358  00FD5D                     __end_ofTimer0_Init@PRESCALE:
   359                           	opt stack 0
   360  00FD5D                     PortProperty_Valid@F6830:
   361                           	opt stack 0
   362  00FD5D  00                 	db	0
   363  00FD5E  01                 	db	1
   364  00FD5F  02                 	db	2
   365  00FD60  00                 	db	0
   366  00FD61  01                 	db	1
   367  00FD62  00                 	db	0
   368  00FD63  01                 	db	1
   369  00FD64  00                 	db	0
   370  00FD65  02                 	db	2
   371  00FD66  02                 	db	2
   372  00FD67  00                 	db	0
   373  00FD68  00                 	db	0
   374  00FD69  03                 	db	3
   375  00FD6A  03                 	db	3
   376  00FD6B  03                 	db	3
   377  00FD6C  00                 	db	0
   378  00FD6D                     __end_ofPortProperty_Valid@F6830:
   379                           	opt stack 0
   380  00FD6D                     _dpowers:
   381                           	opt stack 0
   382  00FD6D  0001               	dw	1
   383  00FD6F  000A               	dw	10
   384  00FD71  0064               	dw	100
   385  00FD73  03E8               	dw	1000
   386  00FD75  2710               	dw	10000
   387  00FD77                     __end_of_dpowers:
   388                           	opt stack 0
   389  00FD77                     _MASKS:
   390                           	opt stack 0
   391  00FD77  00                 	db	0
   392  00FD78  01                 	db	1
   393  00FD79  03                 	db	3
   394  00FD7A  07                 	db	7
   395  00FD7B  0F                 	db	15
   396  00FD7C  1F                 	db	31
   397  00FD7D  3F                 	db	63
   398  00FD7E  7F                 	db	127
   399  00FD7F  FF                 	db	255
   400  00FD80                     __end_of_MASKS:
   401                           	opt stack 0
   402  00FD80                     HMI_SetButton@F7211:
   403                           	opt stack 0
   404  00FD80  00                 	db	0
   405  00FD81  02                 	db	2
   406  00FD82  01                 	db	1
   407  00FD83  03                 	db	3
   408  00FD84                     __end_ofHMI_SetButton@F7211:
   409                           	opt stack 0
   410  00FD84                     Timer2_Init@PRESCALE:
   411                           	opt stack 0
   412  00FD84  01                 	db	1
   413  00FD85  04                 	db	4
   414  00FD86  10                 	db	16
   415  00FD87                     __end_ofTimer2_Init@PRESCALE:
   416                           	opt stack 0
   417  00FD87                     _Font5x7:
   418                           	opt stack 0
   419  00FD87  00                 	db	0
   420  00FD88  00                 	db	0
   421  00FD89  00                 	db	0
   422  00FD8A  00                 	db	0
   423  00FD8B  00                 	db	0
   424  00FD8C  00                 	db	0
   425  00FD8D  00                 	db	0
   426  00FD8E  5F                 	db	95
   427  00FD8F  00                 	db	0
   428  00FD90  00                 	db	0
   429  00FD91  00                 	db	0
   430  00FD92  07                 	db	7
   431  00FD93  00                 	db	0
   432  00FD94  07                 	db	7
   433  00FD95  00                 	db	0
   434  00FD96  14                 	db	20
   435  00FD97  7F                 	db	127
   436  00FD98  14                 	db	20
   437  00FD99  7F                 	db	127
   438  00FD9A  14                 	db	20
   439  00FD9B  24                 	db	36
   440  00FD9C  2A                 	db	42
   441  00FD9D  7F                 	db	127
   442  00FD9E  2A                 	db	42
   443  00FD9F  12                 	db	18
   444  00FDA0  23                 	db	35
   445  00FDA1  13                 	db	19
   446  00FDA2  08                 	db	8
   447  00FDA3  64                 	db	100
   448  00FDA4  62                 	db	98
   449  00FDA5  36                 	db	54
   450  00FDA6  49                 	db	73
   451  00FDA7  55                 	db	85
   452  00FDA8  22                 	db	34
   453  00FDA9  50                 	db	80
   454  00FDAA  00                 	db	0
   455  00FDAB  05                 	db	5
   456  00FDAC  03                 	db	3
   457  00FDAD  00                 	db	0
   458  00FDAE  00                 	db	0
   459  00FDAF  00                 	db	0
   460  00FDB0  1C                 	db	28
   461  00FDB1  22                 	db	34
   462  00FDB2  41                 	db	65
   463  00FDB3  00                 	db	0
   464  00FDB4  00                 	db	0
   465  00FDB5  41                 	db	65
   466  00FDB6  22                 	db	34
   467  00FDB7  1C                 	db	28
   468  00FDB8  00                 	db	0
   469  00FDB9  08                 	db	8
   470  00FDBA  2A                 	db	42
   471  00FDBB  1C                 	db	28
   472  00FDBC  2A                 	db	42
   473  00FDBD  08                 	db	8
   474  00FDBE  08                 	db	8
   475  00FDBF  08                 	db	8
   476  00FDC0  3E                 	db	62
   477  00FDC1  08                 	db	8
   478  00FDC2  08                 	db	8
   479  00FDC3  00                 	db	0
   480  00FDC4  50                 	db	80
   481  00FDC5  30                 	db	48
   482  00FDC6  00                 	db	0
   483  00FDC7  00                 	db	0
   484  00FDC8  08                 	db	8
   485  00FDC9  08                 	db	8
   486  00FDCA  08                 	db	8
   487  00FDCB  08                 	db	8
   488  00FDCC  08                 	db	8
   489  00FDCD  00                 	db	0
   490  00FDCE  60                 	db	96
   491  00FDCF  60                 	db	96
   492  00FDD0  00                 	db	0
   493  00FDD1  00                 	db	0
   494  00FDD2  20                 	db	32
   495  00FDD3  10                 	db	16
   496  00FDD4  08                 	db	8
   497  00FDD5  04                 	db	4
   498  00FDD6  02                 	db	2
   499  00FDD7  3E                 	db	62
   500  00FDD8  51                 	db	81
   501  00FDD9  49                 	db	73
   502  00FDDA  45                 	db	69
   503  00FDDB  3E                 	db	62
   504  00FDDC  00                 	db	0
   505  00FDDD  42                 	db	66
   506  00FDDE  7F                 	db	127
   507  00FDDF  40                 	db	64
   508  00FDE0  00                 	db	0
   509  00FDE1  42                 	db	66
   510  00FDE2  61                 	db	97
   511  00FDE3  51                 	db	81
   512  00FDE4  49                 	db	73
   513  00FDE5  46                 	db	70
   514  00FDE6  21                 	db	33
   515  00FDE7  41                 	db	65
   516  00FDE8  45                 	db	69
   517  00FDE9  4B                 	db	75
   518  00FDEA  31                 	db	49
   519  00FDEB  18                 	db	24
   520  00FDEC  14                 	db	20
   521  00FDED  12                 	db	18
   522  00FDEE  7F                 	db	127
   523  00FDEF  10                 	db	16
   524  00FDF0  27                 	db	39
   525  00FDF1  45                 	db	69
   526  00FDF2  45                 	db	69
   527  00FDF3  45                 	db	69
   528  00FDF4  39                 	db	57
   529  00FDF5  3C                 	db	60
   530  00FDF6  4A                 	db	74
   531  00FDF7  49                 	db	73
   532  00FDF8  49                 	db	73
   533  00FDF9  30                 	db	48
   534  00FDFA  01                 	db	1
   535  00FDFB  71                 	db	113
   536  00FDFC  09                 	db	9
   537  00FDFD  05                 	db	5
   538  00FDFE  03                 	db	3
   539  00FDFF  36                 	db	54
   540  00FE00  49                 	db	73
   541  00FE01  49                 	db	73
   542  00FE02  49                 	db	73
   543  00FE03  36                 	db	54
   544  00FE04  06                 	db	6
   545  00FE05  49                 	db	73
   546  00FE06  49                 	db	73
   547  00FE07  29                 	db	41
   548  00FE08  1E                 	db	30
   549  00FE09  00                 	db	0
   550  00FE0A  36                 	db	54
   551  00FE0B  36                 	db	54
   552  00FE0C  00                 	db	0
   553  00FE0D  00                 	db	0
   554  00FE0E  00                 	db	0
   555  00FE0F  56                 	db	86
   556  00FE10  36                 	db	54
   557  00FE11  00                 	db	0
   558  00FE12  00                 	db	0
   559  00FE13  00                 	db	0
   560  00FE14  08                 	db	8
   561  00FE15  14                 	db	20
   562  00FE16  22                 	db	34
   563  00FE17  41                 	db	65
   564  00FE18  14                 	db	20
   565  00FE19  14                 	db	20
   566  00FE1A  14                 	db	20
   567  00FE1B  14                 	db	20
   568  00FE1C  14                 	db	20
   569  00FE1D  41                 	db	65
   570  00FE1E  22                 	db	34
   571  00FE1F  14                 	db	20
   572  00FE20  08                 	db	8
   573  00FE21  00                 	db	0
   574  00FE22  02                 	db	2
   575  00FE23  01                 	db	1
   576  00FE24  51                 	db	81
   577  00FE25  09                 	db	9
   578  00FE26  06                 	db	6
   579  00FE27  32                 	db	50
   580  00FE28  49                 	db	73
   581  00FE29  79                 	db	121
   582  00FE2A  41                 	db	65
   583  00FE2B  3E                 	db	62
   584  00FE2C  7E                 	db	126
   585  00FE2D  11                 	db	17
   586  00FE2E  11                 	db	17
   587  00FE2F  11                 	db	17
   588  00FE30  7E                 	db	126
   589  00FE31  7F                 	db	127
   590  00FE32  49                 	db	73
   591  00FE33  49                 	db	73
   592  00FE34  49                 	db	73
   593  00FE35  36                 	db	54
   594  00FE36  3E                 	db	62
   595  00FE37  41                 	db	65
   596  00FE38  41                 	db	65
   597  00FE39  41                 	db	65
   598  00FE3A  22                 	db	34
   599  00FE3B  7F                 	db	127
   600  00FE3C  41                 	db	65
   601  00FE3D  41                 	db	65
   602  00FE3E  22                 	db	34
   603  00FE3F  1C                 	db	28
   604  00FE40  7F                 	db	127
   605  00FE41  49                 	db	73
   606  00FE42  49                 	db	73
   607  00FE43  49                 	db	73
   608  00FE44  41                 	db	65
   609  00FE45  7F                 	db	127
   610  00FE46  09                 	db	9
   611  00FE47  09                 	db	9
   612  00FE48  01                 	db	1
   613  00FE49  01                 	db	1
   614  00FE4A  3E                 	db	62
   615  00FE4B  41                 	db	65
   616  00FE4C  41                 	db	65
   617  00FE4D  51                 	db	81
   618  00FE4E  32                 	db	50
   619  00FE4F  7F                 	db	127
   620  00FE50  08                 	db	8
   621  00FE51  08                 	db	8
   622  00FE52  08                 	db	8
   623  00FE53  7F                 	db	127
   624  00FE54  00                 	db	0
   625  00FE55  41                 	db	65
   626  00FE56  7F                 	db	127
   627  00FE57  41                 	db	65
   628  00FE58  00                 	db	0
   629  00FE59  20                 	db	32
   630  00FE5A  40                 	db	64
   631  00FE5B  41                 	db	65
   632  00FE5C  3F                 	db	63
   633  00FE5D  01                 	db	1
   634  00FE5E  7F                 	db	127
   635  00FE5F  08                 	db	8
   636  00FE60  14                 	db	20
   637  00FE61  22                 	db	34
   638  00FE62  41                 	db	65
   639  00FE63  7F                 	db	127
   640  00FE64  40                 	db	64
   641  00FE65  40                 	db	64
   642  00FE66  40                 	db	64
   643  00FE67  40                 	db	64
   644  00FE68  7F                 	db	127
   645  00FE69  02                 	db	2
   646  00FE6A  04                 	db	4
   647  00FE6B  02                 	db	2
   648  00FE6C  7F                 	db	127
   649  00FE6D  7F                 	db	127
   650  00FE6E  04                 	db	4
   651  00FE6F  08                 	db	8
   652  00FE70  10                 	db	16
   653  00FE71  7F                 	db	127
   654  00FE72  3E                 	db	62
   655  00FE73  41                 	db	65
   656  00FE74  41                 	db	65
   657  00FE75  41                 	db	65
   658  00FE76  3E                 	db	62
   659  00FE77  7F                 	db	127
   660  00FE78  09                 	db	9
   661  00FE79  09                 	db	9
   662  00FE7A  09                 	db	9
   663  00FE7B  06                 	db	6
   664  00FE7C  3E                 	db	62
   665  00FE7D  41                 	db	65
   666  00FE7E  51                 	db	81
   667  00FE7F  21                 	db	33
   668  00FE80  5E                 	db	94
   669  00FE81  7F                 	db	127
   670  00FE82  09                 	db	9
   671  00FE83  19                 	db	25
   672  00FE84  29                 	db	41
   673  00FE85  46                 	db	70
   674  00FE86  46                 	db	70
   675  00FE87  49                 	db	73
   676  00FE88  49                 	db	73
   677  00FE89  49                 	db	73
   678  00FE8A  31                 	db	49
   679  00FE8B  01                 	db	1
   680  00FE8C  01                 	db	1
   681  00FE8D  7F                 	db	127
   682  00FE8E  01                 	db	1
   683  00FE8F  01                 	db	1
   684  00FE90  3F                 	db	63
   685  00FE91  40                 	db	64
   686  00FE92  40                 	db	64
   687  00FE93  40                 	db	64
   688  00FE94  3F                 	db	63
   689  00FE95  1F                 	db	31
   690  00FE96  20                 	db	32
   691  00FE97  40                 	db	64
   692  00FE98  20                 	db	32
   693  00FE99  1F                 	db	31
   694  00FE9A  7F                 	db	127
   695  00FE9B  20                 	db	32
   696  00FE9C  18                 	db	24
   697  00FE9D  20                 	db	32
   698  00FE9E  7F                 	db	127
   699  00FE9F  63                 	db	99
   700  00FEA0  14                 	db	20
   701  00FEA1  08                 	db	8
   702  00FEA2  14                 	db	20
   703  00FEA3  63                 	db	99
   704  00FEA4  03                 	db	3
   705  00FEA5  04                 	db	4
   706  00FEA6  78                 	db	120
   707  00FEA7  04                 	db	4
   708  00FEA8  03                 	db	3
   709  00FEA9  61                 	db	97
   710  00FEAA  51                 	db	81
   711  00FEAB  49                 	db	73
   712  00FEAC  45                 	db	69
   713  00FEAD  43                 	db	67
   714  00FEAE  00                 	db	0
   715  00FEAF  00                 	db	0
   716  00FEB0  7F                 	db	127
   717  00FEB1  41                 	db	65
   718  00FEB2  41                 	db	65
   719  00FEB3  02                 	db	2
   720  00FEB4  04                 	db	4
   721  00FEB5  08                 	db	8
   722  00FEB6  10                 	db	16
   723  00FEB7  20                 	db	32
   724  00FEB8  41                 	db	65
   725  00FEB9  41                 	db	65
   726  00FEBA  7F                 	db	127
   727  00FEBB  00                 	db	0
   728  00FEBC  00                 	db	0
   729  00FEBD  04                 	db	4
   730  00FEBE  02                 	db	2
   731  00FEBF  01                 	db	1
   732  00FEC0  02                 	db	2
   733  00FEC1  04                 	db	4
   734  00FEC2  40                 	db	64
   735  00FEC3  40                 	db	64
   736  00FEC4  40                 	db	64
   737  00FEC5  40                 	db	64
   738  00FEC6  40                 	db	64
   739  00FEC7  00                 	db	0
   740  00FEC8  01                 	db	1
   741  00FEC9  02                 	db	2
   742  00FECA  04                 	db	4
   743  00FECB  00                 	db	0
   744  00FECC  20                 	db	32
   745  00FECD  54                 	db	84
   746  00FECE  54                 	db	84
   747  00FECF  54                 	db	84
   748  00FED0  78                 	db	120
   749  00FED1  7F                 	db	127
   750  00FED2  48                 	db	72
   751  00FED3  44                 	db	68
   752  00FED4  44                 	db	68
   753  00FED5  38                 	db	56
   754  00FED6  38                 	db	56
   755  00FED7  44                 	db	68
   756  00FED8  44                 	db	68
   757  00FED9  44                 	db	68
   758  00FEDA  20                 	db	32
   759  00FEDB  38                 	db	56
   760  00FEDC  44                 	db	68
   761  00FEDD  44                 	db	68
   762  00FEDE  48                 	db	72
   763  00FEDF  7F                 	db	127
   764  00FEE0  38                 	db	56
   765  00FEE1  54                 	db	84
   766  00FEE2  54                 	db	84
   767  00FEE3  54                 	db	84
   768  00FEE4  18                 	db	24
   769  00FEE5  08                 	db	8
   770  00FEE6  7E                 	db	126
   771  00FEE7  09                 	db	9
   772  00FEE8  01                 	db	1
   773  00FEE9  02                 	db	2
   774  00FEEA  08                 	db	8
   775  00FEEB  14                 	db	20
   776  00FEEC  54                 	db	84
   777  00FEED  54                 	db	84
   778  00FEEE  3C                 	db	60
   779  00FEEF  7F                 	db	127
   780  00FEF0  08                 	db	8
   781  00FEF1  04                 	db	4
   782  00FEF2  04                 	db	4
   783  00FEF3  78                 	db	120
   784  00FEF4  00                 	db	0
   785  00FEF5  44                 	db	68
   786  00FEF6  7D                 	db	125
   787  00FEF7  40                 	db	64
   788  00FEF8  00                 	db	0
   789  00FEF9  20                 	db	32
   790  00FEFA  40                 	db	64
   791  00FEFB  44                 	db	68
   792  00FEFC  3D                 	db	61
   793  00FEFD  00                 	db	0
   794  00FEFE  00                 	db	0
   795  00FEFF  7F                 	db	127
   796  00FF00  10                 	db	16
   797  00FF01  28                 	db	40
   798  00FF02  44                 	db	68
   799  00FF03  00                 	db	0
   800  00FF04  41                 	db	65
   801  00FF05  7F                 	db	127
   802  00FF06  40                 	db	64
   803  00FF07  00                 	db	0
   804  00FF08  7C                 	db	124
   805  00FF09  04                 	db	4
   806  00FF0A  18                 	db	24
   807  00FF0B  04                 	db	4
   808  00FF0C  78                 	db	120
   809  00FF0D  7C                 	db	124
   810  00FF0E  08                 	db	8
   811  00FF0F  04                 	db	4
   812  00FF10  04                 	db	4
   813  00FF11  78                 	db	120
   814  00FF12  38                 	db	56
   815  00FF13  44                 	db	68
   816  00FF14  44                 	db	68
   817  00FF15  44                 	db	68
   818  00FF16  38                 	db	56
   819  00FF17  7C                 	db	124
   820  00FF18  14                 	db	20
   821  00FF19  14                 	db	20
   822  00FF1A  14                 	db	20
   823  00FF1B  08                 	db	8
   824  00FF1C  08                 	db	8
   825  00FF1D  14                 	db	20
   826  00FF1E  14                 	db	20
   827  00FF1F  18                 	db	24
   828  00FF20  7C                 	db	124
   829  00FF21  7C                 	db	124
   830  00FF22  08                 	db	8
   831  00FF23  04                 	db	4
   832  00FF24  04                 	db	4
   833  00FF25  08                 	db	8
   834  00FF26  48                 	db	72
   835  00FF27  54                 	db	84
   836  00FF28  54                 	db	84
   837  00FF29  54                 	db	84
   838  00FF2A  20                 	db	32
   839  00FF2B  04                 	db	4
   840  00FF2C  3F                 	db	63
   841  00FF2D  44                 	db	68
   842  00FF2E  40                 	db	64
   843  00FF2F  20                 	db	32
   844  00FF30  3C                 	db	60
   845  00FF31  40                 	db	64
   846  00FF32  40                 	db	64
   847  00FF33  20                 	db	32
   848  00FF34  7C                 	db	124
   849  00FF35  1C                 	db	28
   850  00FF36  20                 	db	32
   851  00FF37  40                 	db	64
   852  00FF38  20                 	db	32
   853  00FF39  1C                 	db	28
   854  00FF3A  3C                 	db	60
   855  00FF3B  40                 	db	64
   856  00FF3C  30                 	db	48
   857  00FF3D  40                 	db	64
   858  00FF3E  3C                 	db	60
   859  00FF3F  44                 	db	68
   860  00FF40  28                 	db	40
   861  00FF41  10                 	db	16
   862  00FF42  28                 	db	40
   863  00FF43  44                 	db	68
   864  00FF44  0C                 	db	12
   865  00FF45  50                 	db	80
   866  00FF46  50                 	db	80
   867  00FF47  50                 	db	80
   868  00FF48  3C                 	db	60
   869  00FF49  44                 	db	68
   870  00FF4A  64                 	db	100
   871  00FF4B  54                 	db	84
   872  00FF4C  4C                 	db	76
   873  00FF4D  44                 	db	68
   874  00FF4E  00                 	db	0
   875  00FF4F  08                 	db	8
   876  00FF50  36                 	db	54
   877  00FF51  41                 	db	65
   878  00FF52  00                 	db	0
   879  00FF53  00                 	db	0
   880  00FF54  00                 	db	0
   881  00FF55  7F                 	db	127
   882  00FF56  00                 	db	0
   883  00FF57  00                 	db	0
   884  00FF58  00                 	db	0
   885  00FF59  41                 	db	65
   886  00FF5A  36                 	db	54
   887  00FF5B  08                 	db	8
   888  00FF5C  00                 	db	0
   889  00FF5D  08                 	db	8
   890  00FF5E  08                 	db	8
   891  00FF5F  2A                 	db	42
   892  00FF60  1C                 	db	28
   893  00FF61  08                 	db	8
   894  00FF62  08                 	db	8
   895  00FF63  1C                 	db	28
   896  00FF64  2A                 	db	42
   897  00FF65  08                 	db	8
   898  00FF66  08                 	db	8
   899  00FF67                     __end_of_Font5x7:
   900                           	opt stack 0
   901  00FF67                     _PortG_Property:
   902                           	opt stack 0
   903  00FF67  FC00               	dw	64512
   904  00FF69                     __end_of_PortG_Property:
   905                           	opt stack 0
   906  00FF69                     _PortF_Property:
   907                           	opt stack 0
   908  00FF69  0FFF               	dw	4095
   909  00FF6B                     __end_of_PortF_Property:
   910                           	opt stack 0
   911  00FF6B                     _PortE_Property:
   912                           	opt stack 0
   913  00FF6B  0000               	dw	0
   914  00FF6D                     __end_of_PortE_Property:
   915                           	opt stack 0
   916  00FF6D                     _PortD_Property:
   917                           	opt stack 0
   918  00FF6D  FFFF               	dw	65535
   919  00FF6F                     __end_of_PortD_Property:
   920                           	opt stack 0
   921  00FF6F                     _PortC_Property:
   922                           	opt stack 0
   923  00FF6F  FFF0               	dw	65520
   924  00FF71                     __end_of_PortC_Property:
   925                           	opt stack 0
   926  00FF71                     _PortB_Property:
   927                           	opt stack 0
   928  00FF71  FF00               	dw	65280
   929  00FF73                     __end_of_PortB_Property:
   930                           	opt stack 0
   931  00FF73                     _PortA_Property:
   932                           	opt stack 0
   933  00FF73  00FF               	dw	255
   934  00FF75                     __end_of_PortA_Property:
   935                           	opt stack 0
   936  0000                     _TMR0	set	4054
   937  0000                     _PR2	set	4043
   938  0000                     _T2CONbits	set	4042
   939  0000                     _T0CONbits	set	4053
   940  0000                     _RCONbits	set	4048
   941  0000                     _OSCTUNEbits	set	3995
   942  0000                     _PIR3	set	4004
   943  0000                     _PIR2	set	4001
   944  0000                     _PIR1	set	3998
   945  0000                     _INTCONbits	set	4082
   946  0000                     _SSP2CON2bits	set	3947
   947  0000                     _SSP1CON2bits	set	4037
   948  0000                     _SSP1ADD	set	4040
   949  0000                     _ANCON0	set	4033
   950  0000                     _ADRESL	set	4035
   951  0000                     _ADRESH	set	4036
   952  0000                     _ADCON1bits	set	4033
   953  0000                     _ADCON0bits	set	4034
   954  0000                     _SSP2CON1bits	set	3948
   955  0000                     _SSP1CON1bits	set	4038
   956  0000                     _SSP2STATbits	set	3949
   957  0000                     _SSP1STATbits	set	4039
   958  0000                     _PIE3bits	set	4003
   959  0000                     _PIE1bits	set	3997
   960  0000                     _PIR3bits	set	4004
   961  0000                     _PIR1bits	set	3998
   962  0000                     _IPR3bits	set	4005
   963  0000                     _IPR1bits	set	3999
   964  0000                     _PORTFbits	set	3973
   965  0000                     _SSP2CON2	set	3947
   966  0000                     _SSP1CON2	set	4037
   967  0000                     _SSP2BUF	set	3951
   968  0000                     _SSP2CON1	set	3948
   969  0000                     _SSP2STAT	set	3949
   970  0000                     _SSP1BUF	set	4041
   971  0000                     _SSP1CON1	set	4038
   972  0000                     _SSP1STAT	set	4039
   973  0000                     _LATG	set	3983
   974  0000                     _LATF	set	3982
   975  0000                     _LATE	set	3981
   976  0000                     _LATD	set	3980
   977  0000                     _LATC	set	3979
   978  0000                     _LATB	set	3978
   979  0000                     _LATA	set	3977
   980  0000                     _TRISG	set	3992
   981  0000                     _TRISF	set	3991
   982  0000                     _TRISE	set	3990
   983  0000                     _TRISD	set	3989
   984  0000                     _TRISC	set	3988
   985  0000                     _TRISB	set	3987
   986  0000                     _TRISA	set	3986
   987  0000                     _PORTG	set	3974
   988  0000                     _PORTF	set	3973
   989  0000                     _PORTE	set	3972
   990  0000                     _PORTD	set	3971
   991  0000                     _PORTC	set	3970
   992  0000                     _PORTB	set	3969
   993  0000                     _PORTA	set	3968
   994  00FF75                     STR_10:
   995  00FF75  20                 	db	32
   996  00FF76  20                 	db	32
   997  00FF77  20                 	db	32
   998  00FF78  20                 	db	32
   999  00FF79  20                 	db	32
  1000  00FF7A  20                 	db	32
  1001  00FF7B  20                 	db	32
  1002  00FF7C  20                 	db	32
  1003  00FF7D  20                 	db	32
  1004  00FF7E  20                 	db	32
  1005  00FF7F  20                 	db	32
  1006  00FF80  20                 	db	32
  1007  00FF81  20                 	db	32
  1008  00FF82  20                 	db	32
  1009  00FF83  20                 	db	32
  1010  00FF84  20                 	db	32
  1011  00FF85  20                 	db	32
  1012  00FF86  20                 	db	32
  1013  00FF87  20                 	db	32
  1014  00FF88  20                 	db	32
  1015  00FF89  20                 	db	32
  1016  00FF8A  20                 	db	32
  1017  00FF8B  0A                 	db	10
  1018  00FF8C  00                 	db	0
  1019  00FF8D                     STR_1:
  1020  00FF8D  4A                 	db	74	;'J'
  1021  00FF8E  61                 	db	97	;'a'
  1022  00FF8F  6D                 	db	109	;'m'
  1023  00FF90  69                 	db	105	;'i'
  1024  00FF91  6E                 	db	110	;'n'
  1025  00FF92  20                 	db	32
  1026  00FF93  45                 	db	69	;'E'
  1027  00FF94  61                 	db	97	;'a'
  1028  00FF95  72                 	db	114	;'r'
  1029  00FF96  6C                 	db	108	;'l'
  1030  00FF97  79                 	db	121	;'y'
  1031  00FF98  20                 	db	32
  1032  00FF99  39                 	db	57	;'9'
  1033  00FF9A  39                 	db	57	;'9'
  1034  00FF9B  31                 	db	49	;'1'
  1035  00FF9C  33                 	db	51	;'3'
  1036  00FF9D  33                 	db	51	;'3'
  1037  00FF9E  33                 	db	51	;'3'
  1038  00FF9F  39                 	db	57	;'9'
  1039  00FFA0  31                 	db	49	;'1'
  1040  00FFA1  0A                 	db	10
  1041  00FFA2  00                 	db	0
  1042  00FFA3                     STR_3:
  1043  00FFA3  43                 	db	67	;'C'
  1044  00FFA4  75                 	db	117	;'u'
  1045  00FFA5  72                 	db	114	;'r'
  1046  00FFA6  72                 	db	114	;'r'
  1047  00FFA7  65                 	db	101	;'e'
  1048  00FFA8  6E                 	db	110	;'n'
  1049  00FFA9  74                 	db	116	;'t'
  1050  00FFAA  20                 	db	32
  1051  00FFAB  4D                 	db	77	;'M'
  1052  00FFAC  6F                 	db	111	;'o'
  1053  00FFAD  64                 	db	100	;'d'
  1054  00FFAE  65                 	db	101	;'e'
  1055  00FFAF  3A                 	db	58	;':'
  1056  00FFB0  0A                 	db	10
  1057  00FFB1  0A                 	db	10
  1058  00FFB2  00                 	db	0
  1059  00FFB3                     STR_9:
  1060  00FFB3  44                 	db	68	;'D'
  1061  00FFB4  69                 	db	105	;'i'
  1062  00FFB5  72                 	db	114	;'r'
  1063  00FFB6  65                 	db	101	;'e'
  1064  00FFB7  63                 	db	99	;'c'
  1065  00FFB8  74                 	db	116	;'t'
  1066  00FFB9  69                 	db	105	;'i'
  1067  00FFBA  6F                 	db	111	;'o'
  1068  00FFBB  6E                 	db	110	;'n'
  1069  00FFBC  3A                 	db	58	;':'
  1070  00FFBD  20                 	db	32
  1071  00FFBE  25                 	db	37
  1072  00FFBF  64                 	db	100	;'d'
  1073  00FFC0  0A                 	db	10
  1074  00FFC1  00                 	db	0
  1075  00FFC2                     STR_6:
  1076  00FFC2  20                 	db	32
  1077  00FFC3  43                 	db	67	;'C'
  1078  00FFC4  6F                 	db	111	;'o'
  1079  00FFC5  6E                 	db	110	;'n'
  1080  00FFC6  74                 	db	116	;'t'
  1081  00FFC7  69                 	db	105	;'i'
  1082  00FFC8  6E                 	db	110	;'n'
  1083  00FFC9  75                 	db	117	;'u'
  1084  00FFCA  6F                 	db	111	;'o'
  1085  00FFCB  75                 	db	117	;'u'
  1086  00FFCC  73                 	db	115	;'s'
  1087  00FFCD  0A                 	db	10
  1088  00FFCE  0A                 	db	10
  1089  00FFCF  00                 	db	0
  1090  00FFD0                     STR_7:
  1091  00FFD0  20                 	db	32
  1092  00FFD1  55                 	db	85	;'U'
  1093  00FFD2  6E                 	db	110	;'n'
  1094  00FFD3  64                 	db	100	;'d'
  1095  00FFD4  65                 	db	101	;'e'
  1096  00FFD5  66                 	db	102	;'f'
  1097  00FFD6  69                 	db	105	;'i'
  1098  00FFD7  6E                 	db	110	;'n'
  1099  00FFD8  65                 	db	101	;'e'
  1100  00FFD9  64                 	db	100	;'d'
  1101  00FFDA  0A                 	db	10
  1102  00FFDB  0A                 	db	10
  1103  00FFDC  00                 	db	0
  1104  00FFDD                     STR_4:
  1105  00FFDD  20                 	db	32
  1106  00FFDE  50                 	db	80	;'P'
  1107  00FFDF  6F                 	db	111	;'o'
  1108  00FFE0  73                 	db	115	;'s'
  1109  00FFE1  69                 	db	105	;'i'
  1110  00FFE2  74                 	db	116	;'t'
  1111  00FFE3  69                 	db	105	;'i'
  1112  00FFE4  6F                 	db	111	;'o'
  1113  00FFE5  6E                 	db	110	;'n'
  1114  00FFE6  0A                 	db	10
  1115  00FFE7  0A                 	db	10
  1116  00FFE8  00                 	db	0
  1117  00FFE9                     STR_8:
  1118  00FFE9  53                 	db	83	;'S'
  1119  00FFEA  70                 	db	112	;'p'
  1120  00FFEB  65                 	db	101	;'e'
  1121  00FFEC  65                 	db	101	;'e'
  1122  00FFED  64                 	db	100	;'d'
  1123  00FFEE  3A                 	db	58	;':'
  1124  00FFEF  20                 	db	32
  1125  00FFF0  25                 	db	37
  1126  00FFF1  64                 	db	100	;'d'
  1127  00FFF2  0A                 	db	10
  1128  00FFF3  00                 	db	0
  1129  00FFF4                     STR_5:
  1130  00FFF4  20                 	db	32
  1131  00FFF5  53                 	db	83	;'S'
  1132  00FFF6  74                 	db	116	;'t'
  1133  00FFF7  65                 	db	101	;'e'
  1134  00FFF8  70                 	db	112	;'p'
  1135  00FFF9  0A                 	db	10
  1136  00FFFA  0A                 	db	10
  1137  00FFFB  00                 	db	0
  1138  00FFFC                     STR_2:
  1139  00FFFC  25                 	db	37
  1140  00FFFD  63                 	db	99	;'c'
  1141  00FFFE  00                 	db	0
  1142  0000                     
  1143                           ; #config settings
  1144  00FFFF  00                 	db	0	; dummy byte at the end
  1145  0000                     
  1146                           	psect	cinit
  1147  012E14                     __pcinit:
  1148                           	opt stack 0
  1149  012E14                     start_initialization:
  1150                           	opt stack 0
  1151  012E14                     __initialization:
  1152                           	opt stack 0
  1153                           
  1154                           ; Initialize objects allocated to BANK1 (8 bytes)
  1155                           ; load TBLPTR registers with __pidataBANK1
  1156  012E14  0E80               	movlw	low __pidataBANK1
  1157  012E16  6EF6               	movwf	tblptrl,c
  1158  012E18  0E46               	movlw	high __pidataBANK1
  1159  012E1A  6EF7               	movwf	tblptrh,c
  1160  012E1C  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1161  012E1E  6EF8               	movwf	tblptru,c
  1162  012E20  EE01  F0F7         	lfsr	0,__pdataBANK1
  1163  012E24  EE10 F008          	lfsr	1,8
  1164  012E28                     copy_data0:
  1165  012E28  0009               	tblrd		*+
  1166  012E2A  CFF5 FFEE          	movff	tablat,postinc0
  1167  012E2E  50E5               	movf	postdec1,w,c
  1168  012E30  50E1               	movf	fsr1l,w,c
  1169  012E32  E1FA               	bnz	copy_data0
  1170                           
  1171                           ; Initialize objects allocated to BANK0 (7 bytes)
  1172                           ; load TBLPTR registers with __pidataBANK0
  1173  012E34  0E90               	movlw	low __pidataBANK0
  1174  012E36  6EF6               	movwf	tblptrl,c
  1175  012E38  0E46               	movlw	high __pidataBANK0
  1176  012E3A  6EF7               	movwf	tblptrh,c
  1177  012E3C  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1178  012E3E  6EF8               	movwf	tblptru,c
  1179  012E40  EE00  F0F9         	lfsr	0,__pdataBANK0
  1180  012E44  EE10 F007          	lfsr	1,7
  1181  012E48                     copy_data1:
  1182  012E48  0009               	tblrd		*+
  1183  012E4A  CFF5 FFEE          	movff	tablat,postinc0
  1184  012E4E  50E5               	movf	postdec1,w,c
  1185  012E50  50E1               	movf	fsr1l,w,c
  1186  012E52  E1FA               	bnz	copy_data1
  1187                           
  1188                           ; Initialize objects allocated to COMRAM (10 bytes)
  1189                           ; load TBLPTR registers with __pidataCOMRAM
  1190  012E54  0E62               	movlw	low __pidataCOMRAM
  1191  012E56  6EF6               	movwf	tblptrl,c
  1192  012E58  0E46               	movlw	high __pidataCOMRAM
  1193  012E5A  6EF7               	movwf	tblptrh,c
  1194  012E5C  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1195  012E5E  6EF8               	movwf	tblptru,c
  1196  012E60  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1197  012E64  EE10 F00A          	lfsr	1,10
  1198  012E68                     copy_data2:
  1199  012E68  0009               	tblrd		*+
  1200  012E6A  CFF5 FFEE          	movff	tablat,postinc0
  1201  012E6E  50E5               	movf	postdec1,w,c
  1202  012E70  50E1               	movf	fsr1l,w,c
  1203  012E72  E1FA               	bnz	copy_data2
  1204                           
  1205                           ; Clear objects allocated to BIGRAM (300 bytes)
  1206  012E74  EE02  F016         	lfsr	0,__pbssBIGRAM
  1207  012E78  EE11 F02C          	lfsr	1,300
  1208  012E7C                     clear_0:
  1209  012E7C  6AEE               	clrf	postinc0,c
  1210  012E7E  50E5               	movf	postdec1,w,c
  1211  012E80  50E1               	movf	fsr1l,w,c
  1212  012E82  E1FC               	bnz	clear_0
  1213  012E84  50E2               	movf	fsr1h,w,c
  1214  012E86  E1FA               	bnz	clear_0
  1215                           
  1216                           ; Clear objects allocated to BANK1 (247 bytes)
  1217  012E88  EE01  F000         	lfsr	0,__pbssBANK1
  1218  012E8C  0EF7               	movlw	247
  1219  012E8E                     clear_1:
  1220  012E8E  6AEE               	clrf	postinc0,c
  1221  012E90  06E8               	decf	wreg,f,c
  1222  012E92  E1FD               	bnz	clear_1
  1223                           
  1224                           ; Clear objects allocated to BANK0 (100 bytes)
  1225  012E94  EE00  F060         	lfsr	0,__pbssBANK0
  1226  012E98  0E64               	movlw	100
  1227  012E9A                     clear_2:
  1228  012E9A  6AEE               	clrf	postinc0,c
  1229  012E9C  06E8               	decf	wreg,f,c
  1230  012E9E  E1FD               	bnz	clear_2
  1231                           
  1232                           ; Clear objects allocated to COMRAM (26 bytes)
  1233  012EA0  EE00  F025         	lfsr	0,__pbssCOMRAM
  1234  012EA4  0E1A               	movlw	26
  1235  012EA6                     clear_3:
  1236  012EA6  6AEE               	clrf	postinc0,c
  1237  012EA8  06E8               	decf	wreg,f,c
  1238  012EAA  E1FD               	bnz	clear_3
  1239  012EAC                     end_of_initialization:
  1240                           	opt stack 0
  1241  012EAC                     __end_of__initialization:
  1242                           	opt stack 0
  1243  012EAC  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1244  012EAE  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1245  012EB0  0100               	movlb	0
  1246  012EB2  EF82  F0A1         	goto	_main	;jump to C main() function
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           fsr1h	equ	0xFE2
  1255                           fsr1l	equ	0xFE1
  1256                           
  1257                           	psect	bssCOMRAM
  1258  000025                     __pbssCOMRAM:
  1259                           	opt stack 0
  1260  000025                     _lQueue:
  1261                           	opt stack 0
  1262  000025                     	ds	3
  1263  000028                     _COUNTER:
  1264                           	opt stack 0
  1265  000028                     	ds	2
  1266  00002A                     _lMotor:
  1267                           	opt stack 0
  1268  00002A                     	ds	2
  1269  00002C                     HMI_GRender@a:
  1270                           	opt stack 0
  1271  00002C                     	ds	2
  1272  00002E                     Timer2_Init@PRE:
  1273                           	opt stack 0
  1274  00002E                     	ds	1
  1275  00002F                     Timer2_Init@INDEX:
  1276                           	opt stack 0
  1277  00002F                     	ds	1
  1278  000030                     Timer0_Init@PRE:
  1279                           	opt stack 0
  1280  000030                     	ds	1
  1281  000031                     _INDEX:
  1282                           	opt stack 0
  1283  000031                     	ds	1
  1284  000032                     rand@screw:
  1285                           	opt stack 0
  1286  000032                     	ds	1
  1287  000033                     OutSeg@a:
  1288                           	opt stack 0
  1289  000033                     	ds	1
  1290  000034                     OutSeg@segset:
  1291                           	opt stack 0
  1292  000034                     	ds	1
  1293  000035                     OutSeg@cur:
  1294                           	opt stack 0
  1295  000035                     	ds	1
  1296  000036                     _lBufferY:
  1297                           	opt stack 0
  1298  000036                     	ds	1
  1299  000037                     _lBufferX:
  1300                           	opt stack 0
  1301  000037                     	ds	1
  1302  000038                     _I2C1T:
  1303                           	opt stack 0
  1304  000038                     	ds	7
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           postinc0	equ	0xFEE
  1310                           wreg	equ	0xFE8
  1311                           postdec1	equ	0xFE5
  1312                           fsr1h	equ	0xFE2
  1313                           fsr1l	equ	0xFE1
  1314                           
  1315                           	psect	dataCOMRAM
  1316  00003F                     __pdataCOMRAM:
  1317                           	opt stack 0
  1318  00003F                     _gCursor:
  1319                           	opt stack 0
  1320  00003F                     	ds	4
  1321  000043                     _Bus_State:
  1322                           	opt stack 0
  1323  000043                     	ds	1
  1324  000044                     	ds	1
  1325  000045                     	ds	1
  1326  000046                     	ds	1
  1327  000047                     _l:
  1328                           	opt stack 0
  1329  000047                     	ds	1
  1330  000048                     _w:
  1331                           	opt stack 0
  1332  000048                     	ds	1
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1h	equ	0xFE2
  1341                           fsr1l	equ	0xFE1
  1342                           
  1343                           	psect	bssBANK0
  1344  000060                     __pbssBANK0:
  1345                           	opt stack 0
  1346  000060                     Timer2_Init@DIV:
  1347                           	opt stack 0
  1348  000060                     	ds	4
  1349  000064                     Timer0_Init@DIV:
  1350                           	opt stack 0
  1351  000064                     	ds	4
  1352  000068                     _gISR:
  1353                           	opt stack 0
  1354  000068                     	ds	3
  1355  00006B                     _lStepFunction:
  1356                           	opt stack 0
  1357  00006B                     	ds	3
  1358  00006E                     _pShiftVal:
  1359                           	opt stack 0
  1360  00006E                     	ds	2
  1361  000070                     _val:
  1362                           	opt stack 0
  1363  000070                     	ds	2
  1364  000072                     _lCurrent:
  1365                           	opt stack 0
  1366  000072                     	ds	2
  1367  000074                     _gBackcolour:
  1368                           	opt stack 0
  1369  000074                     	ds	2
  1370  000076                     SPI_Send9@dat:
  1371                           	opt stack 0
  1372  000076                     	ds	2
  1373  000078                     Event_TestButton@j:
  1374                           	opt stack 0
  1375  000078                     	ds	1
  1376  000079                     _u:
  1377                           	opt stack 0
  1378  000079                     	ds	1
  1379  00007A                     _j:
  1380                           	opt stack 0
  1381  00007A                     	ds	1
  1382  00007B                     _i:
  1383                           	opt stack 0
  1384  00007B                     	ds	1
  1385  00007C                     _ADC_Initialised:
  1386                           	opt stack 0
  1387  00007C                     	ds	1
  1388  00007D                     _clearall:
  1389                           	opt stack 0
  1390  00007D                     	ds	1
  1391  00007E                     _PortE:
  1392                           	opt stack 0
  1393  00007E                     	ds	10
  1394  000088                     _PortD:
  1395                           	opt stack 0
  1396  000088                     	ds	10
  1397  000092                     _PortC:
  1398                           	opt stack 0
  1399  000092                     	ds	10
  1400  00009C                     _PortF:
  1401                           	opt stack 0
  1402  00009C                     	ds	10
  1403  0000A6                     _I2C2T:
  1404                           	opt stack 0
  1405  0000A6                     	ds	7
  1406  0000AD                     _ADC_AN2:
  1407                           	opt stack 0
  1408  0000AD                     	ds	5
  1409  0000B2                     _ADC_AN1:
  1410                           	opt stack 0
  1411  0000B2                     	ds	5
  1412  0000B7                     _ADC_AN0:
  1413                           	opt stack 0
  1414  0000B7                     	ds	5
  1415  0000BC                     LCD_DrawRectangle@p4:
  1416                           	opt stack 0
  1417  0000BC                     	ds	4
  1418  0000C0                     LCD_DrawRectangle@p2:
  1419                           	opt stack 0
  1420  0000C0                     	ds	4
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           postdec1	equ	0xFE5
  1428                           fsr1h	equ	0xFE2
  1429                           fsr1l	equ	0xFE1
  1430                           
  1431                           	psect	dataBANK0
  1432  0000F9                     __pdataBANK0:
  1433                           	opt stack 0
  1434  0000F9                     _gCharSize:
  1435                           	opt stack 0
  1436  0000F9                     	ds	4
  1437  0000FD                     _gForecolour:
  1438                           	opt stack 0
  1439  0000FD                     	ds	2
  1440  0000FF                     _change:
  1441                           	opt stack 0
  1442  0000FF                     	ds	1
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           postdec1	equ	0xFE5
  1450                           fsr1h	equ	0xFE2
  1451                           fsr1l	equ	0xFE1
  1452                           
  1453                           	psect	bssBANK1
  1454  000100                     __pbssBANK1:
  1455                           	opt stack 0
  1456  000100                     _lCBuffer:
  1457                           	opt stack 0
  1458  000100                     	ds	30
  1459  00011E                     _I2C2_More:
  1460                           	opt stack 0
  1461  00011E                     	ds	3
  1462  000121                     _I2C1_More:
  1463                           	opt stack 0
  1464  000121                     	ds	3
  1465  000124                     _I2C2_Done:
  1466                           	opt stack 0
  1467  000124                     	ds	3
  1468  000127                     _I2C1_Done:
  1469                           	opt stack 0
  1470  000127                     	ds	3
  1471  00012A                     Console_MakeField@Fill:
  1472                           	opt stack 0
  1473  00012A                     	ds	70
  1474  000170                     _HMIBoard:
  1475                           	opt stack 0
  1476  000170                     	ds	58
  1477  0001AA                     _SPI1:
  1478                           	opt stack 0
  1479  0001AA                     	ds	11
  1480  0001B5                     _SPI2:
  1481                           	opt stack 0
  1482  0001B5                     	ds	11
  1483  0001C0                     _DIPSwitch:
  1484                           	opt stack 0
  1485  0001C0                     	ds	10
  1486  0001CA                     _TestButton:
  1487                           	opt stack 0
  1488  0001CA                     	ds	10
  1489  0001D4                     _PortG:
  1490                           	opt stack 0
  1491  0001D4                     	ds	10
  1492  0001DE                     _PortB:
  1493                           	opt stack 0
  1494  0001DE                     	ds	10
  1495  0001E8                     _PortA:
  1496                           	opt stack 0
  1497  0001E8                     	ds	10
  1498  0001F2                     _ADC_AN3:
  1499                           	opt stack 0
  1500  0001F2                     	ds	5
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1h	equ	0xFE2
  1509                           fsr1l	equ	0xFE1
  1510                           
  1511                           	psect	dataBANK1
  1512  0001F7                     __pdataBANK1:
  1513                           	opt stack 0
  1514  0001F7                     Console_Render@F6956:
  1515                           	opt stack 0
  1516  0001F7                     	ds	4
  1517  0001FB                     _gLineSize:
  1518                           	opt stack 0
  1519  0001FB                     	ds	4
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           postdec1	equ	0xFE5
  1527                           fsr1h	equ	0xFE2
  1528                           fsr1l	equ	0xFE1
  1529                           
  1530                           	psect	bssBIGRAM
  1531  000216                     __pbssBIGRAM:
  1532                           	opt stack 0
  1533  000216                     _lBuffer:
  1534                           	opt stack 0
  1535  000216                     	ds	300
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           
  1546                           	psect	cstackBANK2
  1547  000200                     __pcstackBANK2:
  1548                           	opt stack 0
  1549  000200                     ??_LCD_Init:
  1550  000200                     ??_setMode:
  1551  000200                     Port_CheckQuadType@Pair1:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x0
  1555  000200                     	ds	1
  1556  000201                     Port_CheckQuadType@Pair2:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0x1
  1560  000201                     	ds	1
  1561  000202                     Port_CheckQuadType@Output:
  1562                           	opt stack 0
  1563  000202                     LCD_Init@i:
  1564                           	opt stack 0
  1565  000202                     setMode@mode:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x2
  1569  000202                     	ds	1
  1570  000203                     Port_CheckPortType@pInput:
  1571                           	opt stack 0
  1572  000203                     Port_SetQuadType@pInput:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x3
  1576  000203                     	ds	2
  1577  000205                     Port_CheckPortType@pDrive:
  1578                           	opt stack 0
  1579  000205                     Port_SetQuadType@pQuad:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x5
  1583  000205                     	ds	1
  1584  000206                     Port_SetQuadType@pType:
  1585                           	opt stack 0
  1586  000206                     Port_SetType@pInput:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x6
  1590  000206                     	ds	1
  1591  000207                     Button_Init@pInput:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x7
  1595  000207                     	ds	1
  1596  000208                     Port_SetType@pType:
  1597                           	opt stack 0
  1598                           
  1599                           ; 1 bytes @ 0x8
  1600  000208                     	ds	1
  1601  000209                     ??_Port_SetType:
  1602  000209                     Button_Init@pThreshold:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x9
  1606  000209                     	ds	2
  1607  00020B                     Port_Init@pInput:
  1608                           	opt stack 0
  1609  00020B                     Button_Init@pInitIO:
  1610                           	opt stack 0
  1611                           
  1612                           ; 3 bytes @ 0xB
  1613  00020B                     	ds	2
  1614  00020D                     Port_Init@pPort:
  1615                           	opt stack 0
  1616                           
  1617                           ; 1 bytes @ 0xD
  1618  00020D                     	ds	1
  1619  00020E                     ??_Port_Init:
  1620  00020E                     Button_Init@pGetState:
  1621                           	opt stack 0
  1622                           
  1623                           ; 3 bytes @ 0xE
  1624  00020E                     	ds	3
  1625  000211                     Button_Init@pFunction:
  1626                           	opt stack 0
  1627                           
  1628                           ; 3 bytes @ 0x11
  1629  000211                     	ds	3
  1630  000214                     HMI_Init@in:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x14
  1634  000214                     	ds	2
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           fsr1h	equ	0xFE2
  1643                           fsr1l	equ	0xFE1
  1644                           
  1645                           	psect	cstackBANK1
  1646  0001FF                     __pcstackBANK1:
  1647                           	opt stack 0
  1648  0001FF                     Port_Init@i:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0x0
  1652  0001FF                     	ds	1
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           
  1663                           	psect	cstackBANK0
  1664  0000C4                     __pcstackBANK0:
  1665                           	opt stack 0
  1666  0000C4                     ??_Console_ClearCursor:
  1667  0000C4                     ??_Console_Init:
  1668  0000C4                     ??_Console_NewLine:
  1669  0000C4                     ??_Console_FormFeed:
  1670  0000C4                     ??_HMI_SetButton:
  1671  0000C4                     ?_GetPortProperties:
  1672                           	opt stack 0
  1673  0000C4                     ?_GetPortPORT:
  1674                           	opt stack 0
  1675  0000C4                     ?_GetPortTRIS:
  1676                           	opt stack 0
  1677  0000C4                     ?___wmul:
  1678                           	opt stack 0
  1679  0000C4                     ?___awdiv:
  1680                           	opt stack 0
  1681  0000C4                     ?___lwdiv:
  1682                           	opt stack 0
  1683  0000C4                     ?___lldiv:
  1684                           	opt stack 0
  1685  0000C4                     Mode_Set@pMode:
  1686                           	opt stack 0
  1687  0000C4                     ToSegment@pCHR:
  1688                           	opt stack 0
  1689  0000C4                     HMI_SetLeft@pValue:
  1690                           	opt stack 0
  1691  0000C4                     HMI_SetRight@pValue:
  1692                           	opt stack 0
  1693  0000C4                     HMI_SetUp@pValue:
  1694                           	opt stack 0
  1695  0000C4                     HMI_SetDown@pValue:
  1696                           	opt stack 0
  1697  0000C4                     HMI_SetBar@pValue:
  1698                           	opt stack 0
  1699  0000C4                     Port_GetPin@pInput:
  1700                           	opt stack 0
  1701  0000C4                     Port_GetQuad@pInput:
  1702                           	opt stack 0
  1703  0000C4                     SPI_DisableISR@pInput:
  1704                           	opt stack 0
  1705  0000C4                     SPI_DCS@pInput:
  1706                           	opt stack 0
  1707  0000C4                     SPI_Send@pInput:
  1708                           	opt stack 0
  1709  0000C4                     Byte_SetBit@pInput:
  1710                           	opt stack 0
  1711  0000C4                     Byte_GetBit@pInput:
  1712                           	opt stack 0
  1713  0000C4                     Byte_SetZone@pInput:
  1714                           	opt stack 0
  1715  0000C4                     Byte_GetZone@pInput:
  1716                           	opt stack 0
  1717  0000C4                     Byte_SetByte@pInput:
  1718                           	opt stack 0
  1719  0000C4                     delay_ms@ms:
  1720                           	opt stack 0
  1721  0000C4                     delay_us@us:
  1722                           	opt stack 0
  1723  0000C4                     reverse@input:
  1724                           	opt stack 0
  1725  0000C4                     Console_SetForecolour@pColour:
  1726                           	opt stack 0
  1727  0000C4                     ___wmul@multiplier:
  1728                           	opt stack 0
  1729  0000C4                     ___awdiv@dividend:
  1730                           	opt stack 0
  1731  0000C4                     ___lwdiv@dividend:
  1732                           	opt stack 0
  1733  0000C4                     MXK_Queue@pCallback:
  1734                           	opt stack 0
  1735  0000C4                     ___lldiv@dividend:
  1736                           	opt stack 0
  1737                           
  1738                           ; 4 bytes @ 0x0
  1739  0000C4                     	ds	1
  1740  0000C5                     HMI_SetSegments@pString:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x1
  1744  0000C5                     	ds	1
  1745  0000C6                     GetPortProperties@pInput:
  1746                           	opt stack 0
  1747  0000C6                     GetPortPORT@pInput:
  1748                           	opt stack 0
  1749  0000C6                     GetPortTRIS@pInput:
  1750                           	opt stack 0
  1751  0000C6                     Port_GetPin@pPin:
  1752                           	opt stack 0
  1753  0000C6                     Port_GetQuad@pQuad:
  1754                           	opt stack 0
  1755  0000C6                     SPI_Send@pData:
  1756                           	opt stack 0
  1757  0000C6                     Byte_SetBit@pBit:
  1758                           	opt stack 0
  1759  0000C6                     Byte_GetBit@pBit:
  1760                           	opt stack 0
  1761  0000C6                     Byte_SetZone@pMax:
  1762                           	opt stack 0
  1763  0000C6                     Byte_GetZone@pMax:
  1764                           	opt stack 0
  1765  0000C6                     Byte_SetByte@pValue:
  1766                           	opt stack 0
  1767  0000C6                     Console_Init@x:
  1768                           	opt stack 0
  1769  0000C6                     Console_FormFeed@x:
  1770                           	opt stack 0
  1771  0000C6                     reverse@length:
  1772                           	opt stack 0
  1773  0000C6                     ___wmul@multiplicand:
  1774                           	opt stack 0
  1775  0000C6                     ___awdiv@divisor:
  1776                           	opt stack 0
  1777  0000C6                     ___lwdiv@divisor:
  1778                           	opt stack 0
  1779  0000C6                     delay_ms@u:
  1780                           	opt stack 0
  1781  0000C6                     delay_us@u:
  1782                           	opt stack 0
  1783  0000C6                     HMI_SetButton@reindex:
  1784                           	opt stack 0
  1785                           
  1786                           ; 4 bytes @ 0x2
  1787  0000C6                     	ds	1
  1788  0000C7                     ??_Port_GetPin:
  1789  0000C7                     ??_Port_GetQuad:
  1790  0000C7                     ??_Byte_GetBit:
  1791  0000C7                     LCD_Write@mode:
  1792                           	opt stack 0
  1793  0000C7                     Byte_SetBit@pValue:
  1794                           	opt stack 0
  1795  0000C7                     Byte_SetZone@pChunk:
  1796                           	opt stack 0
  1797  0000C7                     Byte_GetZone@pChunk:
  1798                           	opt stack 0
  1799  0000C7                     Console_Init@y:
  1800                           	opt stack 0
  1801  0000C7                     Console_FormFeed@y:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x3
  1805  0000C7                     	ds	1
  1806  0000C8                     ??_Byte_SetBit:
  1807  0000C8                     ??_Console_IncrementCursor:
  1808  0000C8                     LCD_Write@value:
  1809                           	opt stack 0
  1810  0000C8                     Byte_GetBit@Output:
  1811                           	opt stack 0
  1812  0000C8                     Byte_SetZone@pChunkSize:
  1813                           	opt stack 0
  1814  0000C8                     Byte_GetZone@pChunkSize:
  1815                           	opt stack 0
  1816  0000C8                     reverse@tempVar:
  1817                           	opt stack 0
  1818  0000C8                     ___awdiv@counter:
  1819                           	opt stack 0
  1820  0000C8                     ___lwdiv@counter:
  1821                           	opt stack 0
  1822  0000C8                     HMI_SetSegments@in:
  1823                           	opt stack 0
  1824  0000C8                     ___wmul@product:
  1825                           	opt stack 0
  1826  0000C8                     ___lldiv@divisor:
  1827                           	opt stack 0
  1828                           
  1829                           ; 4 bytes @ 0x4
  1830  0000C8                     	ds	1
  1831  0000C9                     ??_Byte_GetZone:
  1832  0000C9                     ?_Console_MakeField:
  1833                           	opt stack 0
  1834  0000C9                     Set_Addr_Window@ys:
  1835                           	opt stack 0
  1836  0000C9                     Set_Rotation@m:
  1837                           	opt stack 0
  1838  0000C9                     Port_GetPin@Output:
  1839                           	opt stack 0
  1840  0000C9                     Port_GetQuad@Output:
  1841                           	opt stack 0
  1842  0000C9                     Byte_SetZone@pValue:
  1843                           	opt stack 0
  1844  0000C9                     ___awdiv@sign:
  1845                           	opt stack 0
  1846  0000C9                     LCD_Word_Write@value:
  1847                           	opt stack 0
  1848  0000C9                     reverse@iterator:
  1849                           	opt stack 0
  1850  0000C9                     ___lwdiv@quotient:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x5
  1854  0000C9                     	ds	1
  1855  0000CA                     ??_Byte_SetZone:
  1856  0000CA                     Set_Addr_Window@xe:
  1857                           	opt stack 0
  1858  0000CA                     Set_Rotation@rotation:
  1859                           	opt stack 0
  1860  0000CA                     Byte_GetZone@MASK:
  1861                           	opt stack 0
  1862  0000CA                     HMI_SetButton@pValue:
  1863                           	opt stack 0
  1864  0000CA                     MXK_BlockSwitchTo@CUR:
  1865                           	opt stack 0
  1866  0000CA                     MXK_SwitchTo@CUR:
  1867                           	opt stack 0
  1868  0000CA                     ___awdiv@quotient:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x6
  1872  0000CA                     	ds	1
  1873  0000CB                     ??_Console_MakeField:
  1874  0000CB                     ?___lwmod:
  1875                           	opt stack 0
  1876  0000CB                     Set_Addr_Window@ye:
  1877                           	opt stack 0
  1878  0000CB                     Byte_GetZone@Offset:
  1879                           	opt stack 0
  1880  0000CB                     HMI_SetButton@v:
  1881                           	opt stack 0
  1882  0000CB                     MXK_BlockSwitchTo@pModule:
  1883                           	opt stack 0
  1884  0000CB                     MXK_SwitchTo@pModule:
  1885                           	opt stack 0
  1886  0000CB                     ___lwmod@dividend:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x7
  1890  0000CB                     	ds	1
  1891  0000CC                     ??_Console_Tab:
  1892  0000CC                     Set_Addr_Window@xs:
  1893                           	opt stack 0
  1894  0000CC                     Byte_GetZone@Output:
  1895                           	opt stack 0
  1896  0000CC                     ___lldiv@quotient:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0x8
  1900  0000CC                     	ds	1
  1901  0000CD                     Byte_SetZone@Offset:
  1902                           	opt stack 0
  1903  0000CD                     LCD_Fill@pColour:
  1904                           	opt stack 0
  1905  0000CD                     LCD_FillRectangle@pColour:
  1906                           	opt stack 0
  1907  0000CD                     Byte_GetPair@pInput:
  1908                           	opt stack 0
  1909  0000CD                     Console_MakeField@Index:
  1910                           	opt stack 0
  1911  0000CD                     ___lwmod@divisor:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x9
  1915  0000CD                     	ds	1
  1916  0000CE                     Byte_SetZone@MASK:
  1917                           	opt stack 0
  1918                           
  1919                           ; 1 bytes @ 0xA
  1920  0000CE                     	ds	1
  1921  0000CF                     LCD_Fill@i:
  1922                           	opt stack 0
  1923  0000CF                     Byte_GetPair@pPair:
  1924                           	opt stack 0
  1925  0000CF                     Console_MakeField@pInput:
  1926                           	opt stack 0
  1927  0000CF                     ___lwmod@counter:
  1928                           	opt stack 0
  1929  0000CF                     Byte_SetPair@pInput:
  1930                           	opt stack 0
  1931  0000CF                     Byte_SetQuad@pInput:
  1932                           	opt stack 0
  1933  0000CF                     LCD_FillRectangle@pPoint:
  1934                           	opt stack 0
  1935                           
  1936                           ; 4 bytes @ 0xB
  1937  0000CF                     	ds	1
  1938  0000D0                     LCD_Fill@j:
  1939                           	opt stack 0
  1940  0000D0                     ___lldiv@counter:
  1941                           	opt stack 0
  1942  0000D0                     Word_GetPair@pInput:
  1943                           	opt stack 0
  1944  0000D0                     itos@input:
  1945                           	opt stack 0
  1946  0000D0                     Console_MakeField@Column:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0xC
  1950  0000D0                     	ds	1
  1951  0000D1                     Byte_SetPair@pPair:
  1952                           	opt stack 0
  1953  0000D1                     Byte_SetQuad@pQuad:
  1954                           	opt stack 0
  1955  0000D1                     Console_Tab@t:
  1956                           	opt stack 0
  1957  0000D1                     Timer2_Init@pFrequency:
  1958                           	opt stack 0
  1959                           
  1960                           ; 4 bytes @ 0xD
  1961  0000D1                     	ds	1
  1962  0000D2                     Byte_SetPair@pValue:
  1963                           	opt stack 0
  1964  0000D2                     Byte_SetQuad@pValue:
  1965                           	opt stack 0
  1966  0000D2                     Word_GetPair@pPair:
  1967                           	opt stack 0
  1968  0000D2                     Console_Tab@i:
  1969                           	opt stack 0
  1970  0000D2                     itos@destination:
  1971                           	opt stack 0
  1972  0000D2                     _Console_MakeField$10974:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0xE
  1976  0000D2                     	ds	1
  1977  0000D3                     Console_Tab@c:
  1978                           	opt stack 0
  1979  0000D3                     Port_SetPin@pInput:
  1980                           	opt stack 0
  1981  0000D3                     Port_Set@pInput:
  1982                           	opt stack 0
  1983  0000D3                     SPI_MinSpeed@pInput:
  1984                           	opt stack 0
  1985  0000D3                     SPI_MaxSpeed@pInput:
  1986                           	opt stack 0
  1987  0000D3                     Word_SetPair@pInput:
  1988                           	opt stack 0
  1989  0000D3                     PortProperty_Valid@pInput:
  1990                           	opt stack 0
  1991  0000D3                     LCD_FillRectangle@pSize:
  1992                           	opt stack 0
  1993                           
  1994                           ; 4 bytes @ 0xF
  1995  0000D3                     	ds	1
  1996  0000D4                     ??_Console_PrintChar:
  1997  0000D4                     Console_MakeField@x:
  1998                           	opt stack 0
  1999  0000D4                     itos@Data:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0x10
  2003  0000D4                     	ds	1
  2004  0000D5                     ??_Timer2_Init:
  2005  0000D5                     Port_SetPin@pPin:
  2006                           	opt stack 0
  2007  0000D5                     Port_Set@pValue:
  2008                           	opt stack 0
  2009  0000D5                     Word_SetPair@pPair:
  2010                           	opt stack 0
  2011  0000D5                     PortProperty_Valid@pPinDrive:
  2012                           	opt stack 0
  2013  0000D5                     Console_MakeField@y:
  2014                           	opt stack 0
  2015                           
  2016                           ; 1 bytes @ 0x11
  2017  0000D5                     	ds	1
  2018  0000D6                     ??_Port_Set:
  2019  0000D6                     Port_SetPin@pValue:
  2020                           	opt stack 0
  2021  0000D6                     Word_SetPair@pValue:
  2022                           	opt stack 0
  2023  0000D6                     PortProperty_Valid@pPin:
  2024                           	opt stack 0
  2025  0000D6                     LCD_DrawField@pField:
  2026                           	opt stack 0
  2027  0000D6                     itos@Length:
  2028                           	opt stack 0
  2029  0000D6                     Timer2_Init@RDIV:
  2030                           	opt stack 0
  2031                           
  2032                           ; 4 bytes @ 0x12
  2033  0000D6                     	ds	1
  2034  0000D7                     ??_PortProperty_Valid:
  2035  0000D7                     ??_LCD_FillRectangle:
  2036  0000D7                     Port_SetPin@Type:
  2037                           	opt stack 0
  2038  0000D7                     Console_PrintChar@pInput:
  2039                           	opt stack 0
  2040                           
  2041                           ; 1 bytes @ 0x13
  2042  0000D7                     	ds	1
  2043  0000D8                     LED_Set@pValue:
  2044                           	opt stack 0
  2045  0000D8                     putch@c:
  2046                           	opt stack 0
  2047  0000D8                     Port_TogglePin@pInput:
  2048                           	opt stack 0
  2049  0000D8                     itos@Out:
  2050                           	opt stack 0
  2051  0000D8                     LCD_DrawField@pPoint:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x14
  2055  0000D8                     	ds	1
  2056  0000D9                     ?_printf:
  2057                           	opt stack 0
  2058  0000D9                     LCD_FillRectangle@i:
  2059                           	opt stack 0
  2060  0000D9                     LED_Set@pLED:
  2061                           	opt stack 0
  2062  0000D9                     printf@f:
  2063                           	opt stack 0
  2064  0000D9                     PortProperty_Valid@Errors:
  2065                           	opt stack 0
  2066                           
  2067                           ; 16 bytes @ 0x15
  2068  0000D9                     	ds	1
  2069  0000DA                     LCD_FillRectangle@j:
  2070                           	opt stack 0
  2071  0000DA                     Port_TogglePin@pPin:
  2072                           	opt stack 0
  2073  0000DA                     HMI_SetNumber@pInput:
  2074                           	opt stack 0
  2075  0000DA                     Timer2_Init@pCPUClock:
  2076                           	opt stack 0
  2077                           
  2078                           ; 4 bytes @ 0x16
  2079  0000DA                     	ds	1
  2080  0000DB                     Port_TogglePin@Value:
  2081                           	opt stack 0
  2082                           
  2083                           ; 1 bytes @ 0x17
  2084  0000DB                     	ds	1
  2085  0000DC                     LED_Toggle@pLED:
  2086                           	opt stack 0
  2087  0000DC                     LCD_DrawField@pSize:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x18
  2091  0000DC                     	ds	1
  2092  0000DD                     ??_printf:
  2093  0000DD                     Event_DIPSwitch@pState:
  2094                           	opt stack 0
  2095  0000DD                     Event_HMI_DIPSwitch@pState:
  2096                           	opt stack 0
  2097  0000DD                     Event_TestButton@pState:
  2098                           	opt stack 0
  2099  0000DD                     Event_HMI_LeftButton@pState:
  2100                           	opt stack 0
  2101  0000DD                     Event_HMI_RightButton@pState:
  2102                           	opt stack 0
  2103  0000DD                     Event_HMI_UpButton@pState:
  2104                           	opt stack 0
  2105  0000DD                     Event_HMI_DownButton@pState:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x19
  2109  0000DD                     	ds	1
  2110  0000DE                     Event_DIPSwitch@Bar:
  2111                           	opt stack 0
  2112  0000DE                     Event_HMI_DIPSwitch@Bar:
  2113                           	opt stack 0
  2114  0000DE                     printf@flag:
  2115                           	opt stack 0
  2116  0000DE                     Timer2_Init@DIVIDE:
  2117                           	opt stack 0
  2118                           
  2119                           ; 4 bytes @ 0x1A
  2120  0000DE                     	ds	1
  2121  0000DF                     printf@prec:
  2122                           	opt stack 0
  2123  0000DF                     Button_Poll@pButton:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x1B
  2127  0000DF                     	ds	1
  2128  0000E0                     ??_LCD_DrawField:
  2129  0000E0                     printf@ap:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x1C
  2133  0000E0                     	ds	1
  2134  0000E1                     Button_Poll@pIncrement:
  2135                           	opt stack 0
  2136                           
  2137                           ; 1 bytes @ 0x1D
  2138  0000E1                     	ds	1
  2139  0000E2                     ??_Button_Poll:
  2140  0000E2                     LCD_DrawField@count:
  2141                           	opt stack 0
  2142  0000E2                     printf@val:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x1E
  2146  0000E2                     	ds	2
  2147  0000E4                     LCD_DrawField@xmax:
  2148                           	opt stack 0
  2149  0000E4                     printf@c:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x20
  2153  0000E4                     	ds	1
  2154  0000E5                     LCD_DrawField@ymax:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0x21
  2158  0000E5                     	ds	1
  2159  0000E6                     LCD_DrawField@i:
  2160                           	opt stack 0
  2161  0000E6                     Port_Set@TypeRequired:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x22
  2165  0000E6                     	ds	1
  2166  0000E7                     ??_Console_Render:
  2167  0000E7                     Button_Poll@Pin:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x23
  2171  0000E7                     	ds	1
  2172  0000E8                     ?_getMode:
  2173                           	opt stack 0
  2174  0000E8                     Port_Set@TypeActual:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x24
  2178  0000E8                     	ds	1
  2179  0000E9                     PortProperty_Valid@Pair:
  2180                           	opt stack 0
  2181  0000E9                     Console_Render@temp:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x25
  2185  0000E9                     	ds	1
  2186  0000EA                     ??_getMode:
  2187  0000EA                     Port_Set@Type:
  2188                           	opt stack 0
  2189  0000EA                     Port_CheckPairType@pInput:
  2190                           	opt stack 0
  2191  0000EA                     Port_SetPinType@pInput:
  2192                           	opt stack 0
  2193  0000EA                     Console_Render@lCursor:
  2194                           	opt stack 0
  2195                           
  2196                           ; 4 bytes @ 0x26
  2197  0000EA                     	ds	2
  2198  0000EC                     Port_CheckPairType@pPair:
  2199                           	opt stack 0
  2200  0000EC                     Port_SetPinType@pPin:
  2201                           	opt stack 0
  2202  0000EC                     getMode@dipState:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x28
  2206  0000EC                     	ds	1
  2207  0000ED                     Port_CheckPairType@pDrive:
  2208                           	opt stack 0
  2209  0000ED                     Port_SetPinType@pType:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x29
  2213  0000ED                     	ds	1
  2214  0000EE                     ??_displayMode:
  2215  0000EE                     Port_CheckPairType@Pin1:
  2216                           	opt stack 0
  2217  0000EE                     Port_SetPinType@Output:
  2218                           	opt stack 0
  2219  0000EE                     Console_Render@x:
  2220                           	opt stack 0
  2221                           
  2222                           ; 1 bytes @ 0x2A
  2223  0000EE                     	ds	1
  2224  0000EF                     Port_CheckPairType@Pin2:
  2225                           	opt stack 0
  2226  0000EF                     Console_Render@y:
  2227                           	opt stack 0
  2228  0000EF                     Port_SetPinType@Props:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x2B
  2232  0000EF                     	ds	1
  2233  0000F0                     Port_CheckPairType@Output:
  2234                           	opt stack 0
  2235  0000F0                     displayMode@mode:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x2C
  2239  0000F0                     	ds	1
  2240  0000F1                     LED_Init@pLED:
  2241                           	opt stack 0
  2242  0000F1                     Port_CheckPairType@Props:
  2243                           	opt stack 0
  2244  0000F1                     SPI_Init@pClock:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0x2D
  2248  0000F1                     	ds	1
  2249  0000F2                     continuousMode@mode:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x2E
  2253  0000F2                     	ds	1
  2254  0000F3                     Port_CheckQuadType@pInput:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x2F
  2258  0000F3                     	ds	1
  2259  0000F4                     continuousMode@direction:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x30
  2263  0000F4                     	ds	1
  2264  0000F5                     Port_CheckQuadType@pQuad:
  2265                           	opt stack 0
  2266  0000F5                     SPI_Init@pChannel:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x31
  2270  0000F5                     	ds	1
  2271  0000F6                     Port_CheckQuadType@pDrive:
  2272                           	opt stack 0
  2273  0000F6                     SPI_Init@pMode:
  2274                           	opt stack 0
  2275  0000F6                     continuousMode@speed:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x32
  2279  0000F6                     	ds	1
  2280  0000F7                     Port_CheckPortType@Output:
  2281                           	opt stack 0
  2282  0000F7                     Port_SetQuadType@Output:
  2283                           	opt stack 0
  2284  0000F7                     SPI_Init@pInput:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x33
  2288  0000F7                     	ds	1
  2289  0000F8                     Port_SetType@Output:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x34
  2293  0000F8                     	ds	1
  2294  0000F9                     tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           postdec1	equ	0xFE5
  2301                           fsr1h	equ	0xFE2
  2302                           fsr1l	equ	0xFE1
  2303                           
  2304                           ; 1 bytes @ 0x35
  2305                           
  2306                           	psect	cstackCOMRAM
  2307  000001                     __pcstackCOMRAM:
  2308                           	opt stack 0
  2309  000001                     i2Byte_SetBit@pInput:
  2310                           	opt stack 0
  2311  000001                     i2Byte_GetZone@pInput:
  2312                           	opt stack 0
  2313  000001                     i2delay_us@us:
  2314                           	opt stack 0
  2315  000001                     i2MXK_Queue@pCallback:
  2316                           	opt stack 0
  2317                           
  2318                           ; 3 bytes @ 0x0
  2319  000001                     	ds	2
  2320  000003                     i2Byte_SetBit@pBit:
  2321                           	opt stack 0
  2322  000003                     i2Byte_GetZone@pMax:
  2323                           	opt stack 0
  2324  000003                     i2delay_us@u:
  2325                           	opt stack 0
  2326                           
  2327                           ; 4 bytes @ 0x2
  2328  000003                     	ds	1
  2329  000004                     i2Byte_SetBit@pValue:
  2330                           	opt stack 0
  2331  000004                     i2Byte_GetZone@pChunk:
  2332                           	opt stack 0
  2333                           
  2334                           ; 1 bytes @ 0x3
  2335  000004                     	ds	1
  2336  000005                     ??i2_Byte_SetBit:
  2337  000005                     i2Byte_GetZone@pChunkSize:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x4
  2341  000005                     	ds	1
  2342  000006                     ??i2_Byte_GetZone:
  2343                           
  2344                           ; 1 bytes @ 0x5
  2345  000006                     	ds	1
  2346  000007                     i2Byte_GetZone@MASK:
  2347                           	opt stack 0
  2348  000007                     i2MXK_SwitchTo@CUR:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x6
  2352  000007                     	ds	1
  2353  000008                     i2Byte_GetZone@Offset:
  2354                           	opt stack 0
  2355  000008                     i2MXK_SwitchTo@pModule:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x7
  2359  000008                     	ds	1
  2360  000009                     i2Byte_GetZone@Output:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x8
  2364  000009                     	ds	1
  2365  00000A                     i2Byte_GetPair@pInput:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x9
  2369  00000A                     	ds	2
  2370  00000C                     i2Byte_GetPair@pPair:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0xB
  2374  00000C                     	ds	1
  2375  00000D                     i2Word_GetPair@pInput:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0xC
  2379  00000D                     	ds	2
  2380  00000F                     i2Word_GetPair@pPair:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0xE
  2384  00000F                     	ds	1
  2385  000010                     i2Port_SetPin@pInput:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0xF
  2389  000010                     	ds	2
  2390  000012                     i2Port_SetPin@pPin:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x11
  2394  000012                     	ds	1
  2395  000013                     i2Port_SetPin@pValue:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x12
  2399  000013                     	ds	1
  2400  000014                     i2Port_SetPin@Type:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x13
  2404  000014                     	ds	1
  2405  000015                     
  2406                           ; 1 bytes @ 0x14
  2407  000015                     	ds	2
  2408  000017                     ??_ISR_Function:
  2409                           
  2410                           ; 1 bytes @ 0x16
  2411  000017                     	ds	14
  2412                           tblptru	equ	0xFF8
  2413                           tblptrh	equ	0xFF7
  2414                           tblptrl	equ	0xFF6
  2415                           tablat	equ	0xFF5
  2416                           postinc0	equ	0xFEE
  2417                           wreg	equ	0xFE8
  2418                           postdec1	equ	0xFE5
  2419                           fsr1h	equ	0xFE2
  2420                           fsr1l	equ	0xFE1
  2421                           
  2422 ;;
  2423 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2424 ;;
  2425 ;; *************** function _main *****************
  2426 ;; Defined at:
  2427 ;;		line 200 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;Total ram usage:        0 bytes
  2446 ;; Hardware stack levels required when called:   21
  2447 ;; This function calls:
  2448 ;;		_MXK_BlockSwitchTo
  2449 ;;		_MXK_Dequeue
  2450 ;;		_MXK_Release
  2451 ;;		_displayText
  2452 ;;		_initialise
  2453 ;;		_setMode
  2454 ;; This function is called by:
  2455 ;;		Startup code after reset
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text0
  2460  014304                     __ptext0:
  2461                           	opt stack 0
  2462  014304                     _main:
  2463                           	opt stack 10
  2464                           
  2465                           ;main.c: 201: initialise();
  2466                           
  2467                           ;incstack = 0
  2468  014304  EC57  F0A1         	call	_initialise	;wreg free
  2469  014308                     l12646:
  2470                           
  2471                           ;main.c: 205: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2472  014308  0E01               	movlw	1
  2473  01430A  EC9B  F09F         	call	_MXK_BlockSwitchTo
  2474  01430E  0900               	iorlw	0
  2475  014310  B4D8               	btfsc	status,2,c
  2476  014312  D7FA               	goto	l12646
  2477                           
  2478                           ;main.c: 207: displayText();
  2479  014314  EC96  F0A1         	call	_displayText	;wreg free
  2480                           
  2481                           ;main.c: 210: setMode();
  2482  014318  ECC0  F09D         	call	_setMode	;wreg free
  2483                           
  2484                           ;main.c: 212: if (MXK_Release())
  2485  01431C  ECF5  F0A2         	call	_MXK_Release	;wreg free
  2486  014320  0900               	iorlw	0
  2487  014322  B4D8               	btfsc	status,2,c
  2488  014324  D7F1               	goto	l12646
  2489                           
  2490                           ;main.c: 213: MXK_Dequeue();
  2491  014326  ECB3  F0A0         	call	_MXK_Dequeue	;wreg free
  2492                           
  2493                           ;main.c: 214: }
  2494                           ;main.c: 233: }
  2495  01432A  D7EE               	goto	l12646
  2496  01432C                     __end_of_main:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           postdec1	equ	0xFE5
  2505                           fsr1h	equ	0xFE2
  2506                           fsr1l	equ	0xFE1
  2507                           status	equ	0xFD8
  2508                           
  2509 ;; *************** function _setMode *****************
  2510 ;; Defined at:
  2511 ;;		line 182 in file "main.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  mode            2    2[BANK2 ] int 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;Total ram usage:        4 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:   20
  2532 ;; This function calls:
  2533 ;;		_continuousMode
  2534 ;;		_getMode
  2535 ;;		_nullMode
  2536 ;;		_positionMode
  2537 ;;		_stepMode
  2538 ;; This function is called by:
  2539 ;;		_main
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text1
  2544  013B80                     __ptext1:
  2545                           	opt stack 0
  2546  013B80                     _setMode:
  2547                           	opt stack 10
  2548                           
  2549                           ;main.c: 183: int mode = getMode();
  2550                           
  2551                           ;incstack = 0
  2552  013B80  EC1A  F099         	call	_getMode	;wreg free
  2553  013B84  C0E8  F202         	movff	?_getMode,setMode@mode
  2554  013B88  C0E9  F203         	movff	?_getMode+1,setMode@mode+1
  2555                           
  2556                           ;main.c: 184: switch (mode) {
  2557  013B8C  D00C               	goto	l12000
  2558  013B8E                     l11990:
  2559                           
  2560                           ;main.c: 186: continuousMode();
  2561  013B8E  EC6E  F087         	call	_continuousMode	;wreg free
  2562                           
  2563                           ;main.c: 187: break;
  2564  013B92  0012               	return	
  2565  013B94                     l11992:
  2566                           
  2567                           ;main.c: 189: stepMode();
  2568  013B94  EC02  F00A         	call	_stepMode	;wreg free
  2569                           
  2570                           ;main.c: 190: break;
  2571  013B98  0012               	return	
  2572  013B9A                     l11994:
  2573                           
  2574                           ;main.c: 192: positionMode();
  2575  013B9A  EC5A  F0A3         	call	_positionMode	;wreg free
  2576                           
  2577                           ;main.c: 193: break;
  2578  013B9E  0012               	return	
  2579  013BA0                     l11996:
  2580                           
  2581                           ;main.c: 195: nullMode();
  2582  013BA0  EC15  F0A0         	call	_nullMode	;wreg free
  2583                           
  2584                           ;main.c: 197: }
  2585                           
  2586                           ;main.c: 196: break;
  2587  013BA4  0012               	return	
  2588  013BA6                     l12000:
  2589  013BA6  C202  F200         	movff	setMode@mode,??_setMode
  2590  013BAA  C203  F201         	movff	setMode@mode+1,??_setMode+1
  2591                           
  2592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2593                           ; Switch size 1, requested type "space"
  2594                           ; Number of cases is 1, Range of values is 0 to 0
  2595                           ; switch strategies available:
  2596                           ; Name         Instructions Cycles
  2597                           ; simple_byte            4     3 (average)
  2598                           ;	Chosen strategy is simple_byte
  2599  013BAE  0102               	movlb	2	; () banked
  2600  013BB0  5101               	movf	(??_setMode+1)& (0+255),w,b
  2601  013BB2  0A00               	xorlw	0	; case 0
  2602  013BB4  A4D8               	btfss	status,2,c
  2603  013BB6  D7F4               	goto	l11996
  2604                           
  2605                           ; BSR set to: 2
  2606                           ; Switch size 1, requested type "space"
  2607                           ; Number of cases is 3, Range of values is 1 to 3
  2608                           ; switch strategies available:
  2609                           ; Name         Instructions Cycles
  2610                           ; simple_byte           10     6 (average)
  2611                           ;	Chosen strategy is simple_byte
  2612  013BB8  0102               	movlb	2	; () banked
  2613  013BBA  5100               	movf	??_setMode& (0+255),w,b
  2614  013BBC  0A01               	xorlw	1	; case 1
  2615  013BBE  B4D8               	btfsc	status,2,c
  2616  013BC0  D7E6               	goto	l11990
  2617  013BC2  0A03               	xorlw	3	; case 2
  2618  013BC4  B4D8               	btfsc	status,2,c
  2619  013BC6  D7E6               	goto	l11992
  2620  013BC8  0A01               	xorlw	1	; case 3
  2621  013BCA  B4D8               	btfsc	status,2,c
  2622  013BCC  D7E6               	goto	l11994
  2623  013BCE  D7E8               	goto	l11996
  2624  013BD0                     __end_of_setMode:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postdec1	equ	0xFE5
  2633                           fsr1h	equ	0xFE2
  2634                           fsr1l	equ	0xFE1
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _stepMode *****************
  2638 ;; Defined at:
  2639 ;;		line 168 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;		None
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		None
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;Total ram usage:        0 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    7
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_setMode
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text2
  2668  001404                     __ptext2:
  2669                           	opt stack 0
  2670  001404                     _stepMode:
  2671                           	opt stack 22
  2672                           
  2673                           ;incstack = 0
  2674  001404  0012               	return		;funcret
  2675  001406                     __end_of_stepMode:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           postdec1	equ	0xFE5
  2684                           fsr1h	equ	0xFE2
  2685                           fsr1l	equ	0xFE1
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _positionMode *****************
  2689 ;; Defined at:
  2690 ;;		line 171 in file "main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		None
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    7
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_setMode
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text3
  2719  0146B4                     __ptext3:
  2720                           	opt stack 0
  2721  0146B4                     _positionMode:
  2722                           	opt stack 22
  2723                           
  2724                           ;incstack = 0
  2725  0146B4  0012               	return		;funcret
  2726  0146B6                     __end_of_positionMode:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           postdec1	equ	0xFE5
  2735                           fsr1h	equ	0xFE2
  2736                           fsr1l	equ	0xFE1
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _nullMode *****************
  2740 ;; Defined at:
  2741 ;;		line 174 in file "main.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;Total ram usage:        0 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:   19
  2762 ;; This function calls:
  2763 ;;		_Console_Render
  2764 ;;		_displayText
  2765 ;;		_printf
  2766 ;; This function is called by:
  2767 ;;		_setMode
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text4
  2772  01402A                     __ptext4:
  2773                           	opt stack 0
  2774  01402A                     _nullMode:
  2775                           	opt stack 10
  2776                           
  2777                           ;main.c: 175: displayText();
  2778                           
  2779                           ;incstack = 0
  2780  01402A  EC96  F0A1         	call	_displayText	;wreg free
  2781                           
  2782                           ;main.c: 176: printf("                      \n");
  2783  01402E  0E75               	movlw	low STR_10
  2784  014030  0100               	movlb	0	; () banked
  2785  014032  6FD9               	movwf	printf@f& (0+255),b
  2786  014034  0EFF               	movlw	high STR_10
  2787  014036  0100               	movlb	0	; () banked
  2788  014038  6FDA               	movwf	(printf@f+1)& (0+255),b
  2789  01403A  EC64  F08B         	call	_printf	;wreg free
  2790                           
  2791                           ;main.c: 177: printf("                      \n");
  2792  01403E  0E75               	movlw	low STR_10
  2793  014040  0100               	movlb	0	; () banked
  2794  014042  6FD9               	movwf	printf@f& (0+255),b
  2795  014044  0EFF               	movlw	high STR_10
  2796  014046  0100               	movlb	0	; () banked
  2797  014048  6FDA               	movwf	(printf@f+1)& (0+255),b
  2798  01404A  EC64  F08B         	call	_printf	;wreg free
  2799                           
  2800                           ;main.c: 178: printf("                      \n");
  2801  01404E  0E75               	movlw	low STR_10
  2802  014050  0100               	movlb	0	; () banked
  2803  014052  6FD9               	movwf	printf@f& (0+255),b
  2804  014054  0EFF               	movlw	high STR_10
  2805  014056  0100               	movlb	0	; () banked
  2806  014058  6FDA               	movwf	(printf@f+1)& (0+255),b
  2807  01405A  EC64  F08B         	call	_printf	;wreg free
  2808                           
  2809                           ;main.c: 179: Console_Render();
  2810  01405E  EC81  F088         	call	_Console_Render	;wreg free
  2811  014062  0012               	return		;funcret
  2812  014064                     __end_of_nullMode:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1h	equ	0xFE2
  2822                           fsr1l	equ	0xFE1
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _continuousMode *****************
  2826 ;; Defined at:
  2827 ;;		line 128 in file "main.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  speed           2   50[BANK0 ] int 
  2832 ;;  direction       2   48[BANK0 ] int 
  2833 ;;  mode            2   46[BANK0 ] int 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;Total ram usage:        6 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:   19
  2850 ;; This function calls:
  2851 ;;		_Console_Render
  2852 ;;		_Console_SetForecolour
  2853 ;;		_HMI_DIPSwitch
  2854 ;;		_HMI_DownSwitch
  2855 ;;		_HMI_LeftSwitch
  2856 ;;		_HMI_Poll
  2857 ;;		_HMI_RightSwitch
  2858 ;;		_HMI_UpSwitch
  2859 ;;		_MXK_DIPSwitch
  2860 ;;		_MXK_TestButton
  2861 ;;		_displayText
  2862 ;;		_getMode
  2863 ;;		_printf
  2864 ;; This function is called by:
  2865 ;;		_setMode
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text5
  2870  010EDC                     __ptext5:
  2871                           	opt stack 0
  2872  010EDC                     _continuousMode:
  2873                           	opt stack 10
  2874                           
  2875                           ;main.c: 130: int mode = getMode();
  2876                           
  2877                           ;incstack = 0
  2878  010EDC  EC1A  F099         	call	_getMode	;wreg free
  2879  010EE0  C0E8  F0F2         	movff	?_getMode,continuousMode@mode
  2880  010EE4  C0E9  F0F3         	movff	?_getMode+1,continuousMode@mode+1
  2881                           
  2882                           ;main.c: 132: int speed = 0;
  2883  010EE8  0E00               	movlw	0
  2884  010EEA  0100               	movlb	0	; () banked
  2885  010EEC  6FF7               	movwf	(continuousMode@speed+1)& (0+255),b
  2886  010EEE  0E00               	movlw	0
  2887  010EF0  6FF6               	movwf	continuousMode@speed& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 135: int direction = 0;
  2891  010EF2  0E00               	movlw	0
  2892  010EF4  0100               	movlb	0	; () banked
  2893  010EF6  6FF5               	movwf	(continuousMode@direction+1)& (0+255),b
  2894  010EF8  0E00               	movlw	0
  2895  010EFA  6FF4               	movwf	continuousMode@direction& (0+255),b
  2896                           
  2897                           ;main.c: 138: while (mode == 1) {
  2898  010EFC  D0FB               	goto	l11798
  2899  010EFE                     l11748:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 141: if ((int) HMIBoard.mUp.mGetState() == 1 && (int) HMIBoard.mDown.mGetState(
      +                          ) == 0 & speed <= 9) {
  2903  010EFE  EE21  F093         	lfsr	2,_HMIBoard+35
  2904  010F02  D801               	call	u8058
  2905  010F04  D00A               	goto	u8059
  2906  010F06                     u8058:
  2907  010F06  0005               	push	
  2908  010F08  6EFA               	movwf	pclath,c
  2909  010F0A  50DE               	movf	postinc2,w,c
  2910  010F0C  6EFD               	movwf	tosl,c
  2911  010F0E  50DE               	movf	postinc2,w,c
  2912  010F10  6EFE               	movwf	tosh,c
  2913  010F12  50DE               	movf	postinc2,w,c
  2914  010F14  6EFF               	movwf	tosu,c
  2915  010F16  50FA               	movf	pclath,w,c
  2916  010F18  0012               	return		;indir
  2917  010F1A                     u8059:
  2918  010F1A  06E8               	decf	wreg,f,c
  2919  010F1C  A4D8               	btfss	status,2,c
  2920  010F1E  D030               	goto	l11760
  2921  010F20  EE21  F09D         	lfsr	2,_HMIBoard+45
  2922  010F24  D801               	call	u8078
  2923  010F26  D00A               	goto	u8079
  2924  010F28                     u8078:
  2925  010F28  0005               	push	
  2926  010F2A  6EFA               	movwf	pclath,c
  2927  010F2C  50DE               	movf	postinc2,w,c
  2928  010F2E  6EFD               	movwf	tosl,c
  2929  010F30  50DE               	movf	postinc2,w,c
  2930  010F32  6EFE               	movwf	tosh,c
  2931  010F34  50DE               	movf	postinc2,w,c
  2932  010F36  6EFF               	movwf	tosu,c
  2933  010F38  50FA               	movf	pclath,w,c
  2934  010F3A  0012               	return		;indir
  2935  010F3C                     u8079:
  2936  010F3C  0900               	iorlw	0
  2937  010F3E  A4D8               	btfss	status,2,c
  2938  010F40  D01F               	goto	l11760
  2939  010F42  0100               	movlb	0	; () banked
  2940  010F44  BFF7               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  2941  010F46  D008               	goto	l11756
  2942  010F48  0100               	movlb	0	; () banked
  2943  010F4A  51F7               	movf	(continuousMode@speed+1)& (0+255),w,b
  2944  010F4C  E119               	bnz	l11760
  2945  010F4E  0E0A               	movlw	10
  2946  010F50  0100               	movlb	0	; () banked
  2947  010F52  5DF6               	subwf	continuousMode@speed& (0+255),w,b
  2948  010F54  B0D8               	btfsc	status,0,c
  2949  010F56  D014               	goto	l11760
  2950  010F58                     l11756:
  2951  010F58  EE21  F093         	lfsr	2,_HMIBoard+35
  2952  010F5C  D801               	call	u8108
  2953  010F5E  D00A               	goto	u8109
  2954  010F60                     u8108:
  2955  010F60  0005               	push	
  2956  010F62  6EFA               	movwf	pclath,c
  2957  010F64  50DE               	movf	postinc2,w,c
  2958  010F66  6EFD               	movwf	tosl,c
  2959  010F68  50DE               	movf	postinc2,w,c
  2960  010F6A  6EFE               	movwf	tosh,c
  2961  010F6C  50DE               	movf	postinc2,w,c
  2962  010F6E  6EFF               	movwf	tosu,c
  2963  010F70  50FA               	movf	pclath,w,c
  2964  010F72  0012               	return		;indir
  2965  010F74                     u8109:
  2966  010F74  06E8               	decf	wreg,f,c
  2967  010F76  B4D8               	btfsc	status,2,c
  2968  010F78  D7EF               	goto	l11756
  2969                           
  2970                           ;main.c: 143: speed++;
  2971  010F7A  0100               	movlb	0	; () banked
  2972  010F7C  4BF6               	infsnz	continuousMode@speed& (0+255),f,b
  2973  010F7E  2BF7               	incf	(continuousMode@speed+1)& (0+255),f,b
  2974  010F80                     l11760:
  2975                           
  2976                           ;main.c: 144: }
  2977                           ;main.c: 146: if ((int) HMIBoard.mDown.mGetState() == 1 && (int) HMIBoard.mUp.mGetState(
      +                          ) == 0 & speed > 0) {
  2978  010F80  EE21  F09D         	lfsr	2,_HMIBoard+45
  2979  010F84  D801               	call	u8128
  2980  010F86  D00A               	goto	u8129
  2981  010F88                     u8128:
  2982  010F88  0005               	push	
  2983  010F8A  6EFA               	movwf	pclath,c
  2984  010F8C  50DE               	movf	postinc2,w,c
  2985  010F8E  6EFD               	movwf	tosl,c
  2986  010F90  50DE               	movf	postinc2,w,c
  2987  010F92  6EFE               	movwf	tosh,c
  2988  010F94  50DE               	movf	postinc2,w,c
  2989  010F96  6EFF               	movwf	tosu,c
  2990  010F98  50FA               	movf	pclath,w,c
  2991  010F9A  0012               	return		;indir
  2992  010F9C                     u8129:
  2993  010F9C  06E8               	decf	wreg,f,c
  2994  010F9E  A4D8               	btfss	status,2,c
  2995  010FA0  D030               	goto	l11772
  2996  010FA2  EE21  F093         	lfsr	2,_HMIBoard+35
  2997  010FA6  D801               	call	u8148
  2998  010FA8  D00A               	goto	u8149
  2999  010FAA                     u8148:
  3000  010FAA  0005               	push	
  3001  010FAC  6EFA               	movwf	pclath,c
  3002  010FAE  50DE               	movf	postinc2,w,c
  3003  010FB0  6EFD               	movwf	tosl,c
  3004  010FB2  50DE               	movf	postinc2,w,c
  3005  010FB4  6EFE               	movwf	tosh,c
  3006  010FB6  50DE               	movf	postinc2,w,c
  3007  010FB8  6EFF               	movwf	tosu,c
  3008  010FBA  50FA               	movf	pclath,w,c
  3009  010FBC  0012               	return		;indir
  3010  010FBE                     u8149:
  3011  010FBE  0900               	iorlw	0
  3012  010FC0  A4D8               	btfss	status,2,c
  3013  010FC2  D01F               	goto	l11772
  3014  010FC4  0100               	movlb	0	; () banked
  3015  010FC6  BFF7               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3016  010FC8  D01C               	goto	l11772
  3017  010FCA  0100               	movlb	0	; () banked
  3018  010FCC  51F7               	movf	(continuousMode@speed+1)& (0+255),w,b
  3019  010FCE  E104               	bnz	l11768
  3020  010FD0  0100               	movlb	0	; () banked
  3021  010FD2  05F6               	decf	continuousMode@speed& (0+255),w,b
  3022  010FD4  A0D8               	btfss	status,0,c
  3023  010FD6  D015               	goto	l11772
  3024  010FD8                     l11768:
  3025  010FD8  EE21  F09D         	lfsr	2,_HMIBoard+45
  3026  010FDC  D801               	call	u8178
  3027  010FDE  D00A               	goto	u8179
  3028  010FE0                     u8178:
  3029  010FE0  0005               	push	
  3030  010FE2  6EFA               	movwf	pclath,c
  3031  010FE4  50DE               	movf	postinc2,w,c
  3032  010FE6  6EFD               	movwf	tosl,c
  3033  010FE8  50DE               	movf	postinc2,w,c
  3034  010FEA  6EFE               	movwf	tosh,c
  3035  010FEC  50DE               	movf	postinc2,w,c
  3036  010FEE  6EFF               	movwf	tosu,c
  3037  010FF0  50FA               	movf	pclath,w,c
  3038  010FF2  0012               	return		;indir
  3039  010FF4                     u8179:
  3040  010FF4  06E8               	decf	wreg,f,c
  3041  010FF6  B4D8               	btfsc	status,2,c
  3042  010FF8  D7EF               	goto	l11768
  3043                           
  3044                           ;main.c: 148: speed--;
  3045  010FFA  0100               	movlb	0	; () banked
  3046  010FFC  07F6               	decf	continuousMode@speed& (0+255),f,b
  3047  010FFE  A0D8               	btfss	status,0,c
  3048  011000  07F7               	decf	(continuousMode@speed+1)& (0+255),f,b
  3049  011002                     l11772:
  3050                           
  3051                           ;main.c: 149: }
  3052                           ;main.c: 151: if ((int) HMIBoard.mLeft.mGetState() == 1 && (int) HMIBoard.mRight.mGetSta
      +                          te() == 0) {
  3053  011002  EE21  F089         	lfsr	2,_HMIBoard+25
  3054  011006  D801               	call	u8198
  3055  011008  D00A               	goto	u8199
  3056  01100A                     u8198:
  3057  01100A  0005               	push	
  3058  01100C  6EFA               	movwf	pclath,c
  3059  01100E  50DE               	movf	postinc2,w,c
  3060  011010  6EFD               	movwf	tosl,c
  3061  011012  50DE               	movf	postinc2,w,c
  3062  011014  6EFE               	movwf	tosh,c
  3063  011016  50DE               	movf	postinc2,w,c
  3064  011018  6EFF               	movwf	tosu,c
  3065  01101A  50FA               	movf	pclath,w,c
  3066  01101C  0012               	return		;indir
  3067  01101E                     u8199:
  3068  01101E  06E8               	decf	wreg,f,c
  3069  011020  A4D8               	btfss	status,2,c
  3070  011022  D016               	goto	l11778
  3071  011024  EE21  F07F         	lfsr	2,_HMIBoard+15
  3072  011028  D801               	call	u8218
  3073  01102A  D00A               	goto	u8219
  3074  01102C                     u8218:
  3075  01102C  0005               	push	
  3076  01102E  6EFA               	movwf	pclath,c
  3077  011030  50DE               	movf	postinc2,w,c
  3078  011032  6EFD               	movwf	tosl,c
  3079  011034  50DE               	movf	postinc2,w,c
  3080  011036  6EFE               	movwf	tosh,c
  3081  011038  50DE               	movf	postinc2,w,c
  3082  01103A  6EFF               	movwf	tosu,c
  3083  01103C  50FA               	movf	pclath,w,c
  3084  01103E  0012               	return		;indir
  3085  011040                     u8219:
  3086  011040  0900               	iorlw	0
  3087  011042  A4D8               	btfss	status,2,c
  3088  011044  D005               	goto	l11778
  3089                           
  3090                           ;main.c: 152: direction = 1;
  3091  011046  0E00               	movlw	0
  3092  011048  0100               	movlb	0	; () banked
  3093  01104A  6FF5               	movwf	(continuousMode@direction+1)& (0+255),b
  3094  01104C  0E01               	movlw	1
  3095  01104E  6FF4               	movwf	continuousMode@direction& (0+255),b
  3096  011050                     l11778:
  3097                           
  3098                           ;main.c: 153: }
  3099                           ;main.c: 155: if ((int) HMIBoard.mRight.mGetState() == 1 && (int) HMIBoard.mLeft.mGetSta
      +                          te() == 0) {
  3100  011050  EE21  F07F         	lfsr	2,_HMIBoard+15
  3101  011054  D801               	call	u8238
  3102  011056  D00A               	goto	u8239
  3103  011058                     u8238:
  3104  011058  0005               	push	
  3105  01105A  6EFA               	movwf	pclath,c
  3106  01105C  50DE               	movf	postinc2,w,c
  3107  01105E  6EFD               	movwf	tosl,c
  3108  011060  50DE               	movf	postinc2,w,c
  3109  011062  6EFE               	movwf	tosh,c
  3110  011064  50DE               	movf	postinc2,w,c
  3111  011066  6EFF               	movwf	tosu,c
  3112  011068  50FA               	movf	pclath,w,c
  3113  01106A  0012               	return		;indir
  3114  01106C                     u8239:
  3115  01106C  06E8               	decf	wreg,f,c
  3116  01106E  A4D8               	btfss	status,2,c
  3117  011070  D016               	goto	l11784
  3118  011072  EE21  F089         	lfsr	2,_HMIBoard+25
  3119  011076  D801               	call	u8258
  3120  011078  D00A               	goto	u8259
  3121  01107A                     u8258:
  3122  01107A  0005               	push	
  3123  01107C  6EFA               	movwf	pclath,c
  3124  01107E  50DE               	movf	postinc2,w,c
  3125  011080  6EFD               	movwf	tosl,c
  3126  011082  50DE               	movf	postinc2,w,c
  3127  011084  6EFE               	movwf	tosh,c
  3128  011086  50DE               	movf	postinc2,w,c
  3129  011088  6EFF               	movwf	tosu,c
  3130  01108A  50FA               	movf	pclath,w,c
  3131  01108C  0012               	return		;indir
  3132  01108E                     u8259:
  3133  01108E  0900               	iorlw	0
  3134  011090  A4D8               	btfss	status,2,c
  3135  011092  D005               	goto	l11784
  3136                           
  3137                           ;main.c: 156: direction = 0;
  3138  011094  0E00               	movlw	0
  3139  011096  0100               	movlb	0	; () banked
  3140  011098  6FF5               	movwf	(continuousMode@direction+1)& (0+255),b
  3141  01109A  0E00               	movlw	0
  3142  01109C  6FF4               	movwf	continuousMode@direction& (0+255),b
  3143  01109E                     l11784:
  3144                           
  3145                           ;main.c: 157: }
  3146                           ;main.c: 158: displayText();
  3147  01109E  EC96  F0A1         	call	_displayText	;wreg free
  3148                           
  3149                           ;main.c: 159: Console_SetForecolour(0xFFE0);
  3150  0110A2  0EFF               	movlw	255
  3151  0110A4  0100               	movlb	0	; () banked
  3152  0110A6  6FC5               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3153  0110A8  0EE0               	movlw	224
  3154  0110AA  6FC4               	movwf	Console_SetForecolour@pColour& (0+255),b
  3155  0110AC  EC3B  F0A3         	call	_Console_SetForecolour	;wreg free
  3156                           
  3157                           ;main.c: 160: printf("Speed: %d\n", speed);
  3158  0110B0  0EE9               	movlw	low STR_8
  3159  0110B2  0100               	movlb	0	; () banked
  3160  0110B4  6FD9               	movwf	printf@f& (0+255),b
  3161  0110B6  0EFF               	movlw	high STR_8
  3162  0110B8  0100               	movlb	0	; () banked
  3163  0110BA  6FDA               	movwf	(printf@f+1)& (0+255),b
  3164  0110BC  C0F6  F0DB         	movff	continuousMode@speed,?_printf+2
  3165  0110C0  C0F7  F0DC         	movff	continuousMode@speed+1,?_printf+3
  3166  0110C4  EC64  F08B         	call	_printf	;wreg free
  3167                           
  3168                           ;main.c: 161: printf("Direction: %d\n", direction);
  3169  0110C8  0EB3               	movlw	low STR_9
  3170  0110CA  0100               	movlb	0	; () banked
  3171  0110CC  6FD9               	movwf	printf@f& (0+255),b
  3172  0110CE  0EFF               	movlw	high STR_9
  3173  0110D0  0100               	movlb	0	; () banked
  3174  0110D2  6FDA               	movwf	(printf@f+1)& (0+255),b
  3175  0110D4  C0F4  F0DB         	movff	continuousMode@direction,?_printf+2
  3176  0110D8  C0F5  F0DC         	movff	continuousMode@direction+1,?_printf+3
  3177  0110DC  EC64  F08B         	call	_printf	;wreg free
  3178                           
  3179                           ;main.c: 162: Console_Render();
  3180  0110E0  EC81  F088         	call	_Console_Render	;wreg free
  3181                           
  3182                           ;main.c: 163: mode = getMode();
  3183  0110E4  EC1A  F099         	call	_getMode	;wreg free
  3184  0110E8  C0E8  F0F2         	movff	?_getMode,continuousMode@mode
  3185  0110EC  C0E9  F0F3         	movff	?_getMode+1,continuousMode@mode+1
  3186                           
  3187                           ;main.c: 164: HMI_Poll();
  3188  0110F0  EC05  F09B         	call	_HMI_Poll	;wreg free
  3189  0110F4                     l11798:
  3190  0110F4  0100               	movlb	0	; () banked
  3191  0110F6  05F2               	decf	continuousMode@mode& (0+255),w,b
  3192  0110F8  0100               	movlb	0	; () banked
  3193  0110FA  11F3               	iorwf	(continuousMode@mode+1)& (0+255),w,b
  3194  0110FC  A4D8               	btfss	status,2,c
  3195  0110FE  0012               	return	
  3196  011100  D6FE               	goto	l11748
  3197  011102                     __end_of_continuousMode:
  3198                           	opt stack 0
  3199                           tosu	equ	0xFFF
  3200                           tosh	equ	0xFFE
  3201                           tosl	equ	0xFFD
  3202                           pclath	equ	0xFFA
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           postinc0	equ	0xFEE
  3208                           wreg	equ	0xFE8
  3209                           postdec1	equ	0xFE5
  3210                           fsr1h	equ	0xFE2
  3211                           fsr1l	equ	0xFE1
  3212                           postinc2	equ	0xFDE
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function _displayText *****************
  3216 ;; Defined at:
  3217 ;;		line 69 in file "main.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;Total ram usage:        0 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:   18
  3238 ;; This function calls:
  3239 ;;		_Console_Render
  3240 ;;		_displayMode
  3241 ;;		_displaySID
  3242 ;;		_printf
  3243 ;; This function is called by:
  3244 ;;		_continuousMode
  3245 ;;		_nullMode
  3246 ;;		_main
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text6
  3251  01432C                     __ptext6:
  3252                           	opt stack 0
  3253  01432C                     _displayText:
  3254                           	opt stack 10
  3255                           
  3256                           ;main.c: 71: printf("%c", (char)35);
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;incstack = 0
  3260  01432C  0EFC               	movlw	low STR_2
  3261  01432E  0100               	movlb	0	; () banked
  3262  014330  6FD9               	movwf	printf@f& (0+255),b
  3263  014332  0EFF               	movlw	high STR_2
  3264  014334  0100               	movlb	0	; () banked
  3265  014336  6FDA               	movwf	(printf@f+1)& (0+255),b
  3266  014338  0E00               	movlw	0
  3267  01433A  0100               	movlb	0	; () banked
  3268  01433C  6FDC               	movwf	(?_printf+3)& (0+255),b
  3269  01433E  0E23               	movlw	35
  3270  014340  6FDB               	movwf	(?_printf+2)& (0+255),b
  3271  014342  EC64  F08B         	call	_printf	;wreg free
  3272                           
  3273                           ;main.c: 74: displaySID();
  3274  014346  ECF1  F0A1         	call	_displaySID	;wreg free
  3275                           
  3276                           ;main.c: 77: displayMode();
  3277  01434A  EC5B  F097         	call	_displayMode	;wreg free
  3278                           
  3279                           ;main.c: 80: Console_Render();
  3280  01434E  EC81  F088         	call	_Console_Render	;wreg free
  3281  014352  0012               	return		;funcret
  3282  014354                     __end_of_displayText:
  3283                           	opt stack 0
  3284                           tosu	equ	0xFFF
  3285                           tosh	equ	0xFFE
  3286                           tosl	equ	0xFFD
  3287                           pclath	equ	0xFFA
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1h	equ	0xFE2
  3296                           fsr1l	equ	0xFE1
  3297                           postinc2	equ	0xFDE
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _displaySID *****************
  3301 ;; Defined at:
  3302 ;;		line 63 in file "main.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:   13
  3323 ;; This function calls:
  3324 ;;		_Console_SetForecolour
  3325 ;;		_printf
  3326 ;; This function is called by:
  3327 ;;		_displayText
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text7
  3332  0143E2                     __ptext7:
  3333                           	opt stack 0
  3334  0143E2                     _displaySID:
  3335                           	opt stack 14
  3336                           
  3337                           ;main.c: 64: Console_SetForecolour(0x07E0);
  3338                           
  3339                           ;incstack = 0
  3340  0143E2  0E07               	movlw	7
  3341  0143E4  0100               	movlb	0	; () banked
  3342  0143E6  6FC5               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3343  0143E8  0EE0               	movlw	224
  3344  0143EA  6FC4               	movwf	Console_SetForecolour@pColour& (0+255),b
  3345  0143EC  EC3B  F0A3         	call	_Console_SetForecolour	;wreg free
  3346                           
  3347                           ;main.c: 65: printf("Jamin Early 99133391\n");
  3348  0143F0  0E8D               	movlw	low STR_1
  3349  0143F2  0100               	movlb	0	; () banked
  3350  0143F4  6FD9               	movwf	printf@f& (0+255),b
  3351  0143F6  0EFF               	movlw	high STR_1
  3352  0143F8  0100               	movlb	0	; () banked
  3353  0143FA  6FDA               	movwf	(printf@f+1)& (0+255),b
  3354  0143FC  EC64  F08B         	call	_printf	;wreg free
  3355  014400  0012               	return		;funcret
  3356  014402                     __end_of_displaySID:
  3357                           	opt stack 0
  3358                           tosu	equ	0xFFF
  3359                           tosh	equ	0xFFE
  3360                           tosl	equ	0xFFD
  3361                           pclath	equ	0xFFA
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           postdec1	equ	0xFE5
  3369                           fsr1h	equ	0xFE2
  3370                           fsr1l	equ	0xFE1
  3371                           postinc2	equ	0xFDE
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _displayMode *****************
  3375 ;; Defined at:
  3376 ;;		line 108 in file "main.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  mode            2   44[BANK0 ] int 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        4 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:   17
  3397 ;; This function calls:
  3398 ;;		_Console_SetForecolour
  3399 ;;		_getMode
  3400 ;;		_printf
  3401 ;; This function is called by:
  3402 ;;		_displayText
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text8
  3407  012EB6                     __ptext8:
  3408                           	opt stack 0
  3409  012EB6                     _displayMode:
  3410                           	opt stack 10
  3411                           
  3412                           ;main.c: 109: Console_SetForecolour(0xF800);
  3413                           
  3414                           ;incstack = 0
  3415  012EB6  0EF8               	movlw	248
  3416  012EB8  0100               	movlb	0	; () banked
  3417  012EBA  6FC5               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3418  012EBC  0E00               	movlw	0
  3419  012EBE  6FC4               	movwf	Console_SetForecolour@pColour& (0+255),b
  3420  012EC0  EC3B  F0A3         	call	_Console_SetForecolour	;wreg free
  3421                           
  3422                           ;main.c: 110: int mode = getMode();
  3423  012EC4  EC1A  F099         	call	_getMode	;wreg free
  3424  012EC8  C0E8  F0F0         	movff	?_getMode,displayMode@mode
  3425  012ECC  C0E9  F0F1         	movff	?_getMode+1,displayMode@mode+1
  3426                           
  3427                           ;main.c: 111: printf("Current Mode:\n\n");
  3428  012ED0  0EA3               	movlw	low STR_3
  3429  012ED2  0100               	movlb	0	; () banked
  3430  012ED4  6FD9               	movwf	printf@f& (0+255),b
  3431  012ED6  0EFF               	movlw	high STR_3
  3432  012ED8  0100               	movlb	0	; () banked
  3433  012EDA  6FDA               	movwf	(printf@f+1)& (0+255),b
  3434  012EDC  EC64  F08B         	call	_printf	;wreg free
  3435                           
  3436                           ;main.c: 112: switch (mode) {
  3437  012EE0  D024               	goto	l11406
  3438  012EE2                     l11396:
  3439                           
  3440                           ;main.c: 114: printf(" Position\n\n");
  3441  012EE2  0EDD               	movlw	low STR_4
  3442  012EE4  0100               	movlb	0	; () banked
  3443  012EE6  6FD9               	movwf	printf@f& (0+255),b
  3444  012EE8  0EFF               	movlw	high STR_4
  3445  012EEA  0100               	movlb	0	; () banked
  3446  012EEC  6FDA               	movwf	(printf@f+1)& (0+255),b
  3447  012EEE  EC64  F08B         	call	_printf	;wreg free
  3448                           
  3449                           ;main.c: 115: break;
  3450  012EF2  0012               	return	
  3451  012EF4                     l11398:
  3452                           
  3453                           ;main.c: 117: printf(" Step\n\n");
  3454  012EF4  0EF4               	movlw	low STR_5
  3455  012EF6  0100               	movlb	0	; () banked
  3456  012EF8  6FD9               	movwf	printf@f& (0+255),b
  3457  012EFA  0EFF               	movlw	high STR_5
  3458  012EFC  0100               	movlb	0	; () banked
  3459  012EFE  6FDA               	movwf	(printf@f+1)& (0+255),b
  3460  012F00  EC64  F08B         	call	_printf	;wreg free
  3461                           
  3462                           ;main.c: 118: break;
  3463  012F04  0012               	return	
  3464  012F06                     l11400:
  3465                           
  3466                           ;main.c: 120: printf(" Continuous\n\n");
  3467  012F06  0EC2               	movlw	low STR_6
  3468  012F08  0100               	movlb	0	; () banked
  3469  012F0A  6FD9               	movwf	printf@f& (0+255),b
  3470  012F0C  0EFF               	movlw	high STR_6
  3471  012F0E  0100               	movlb	0	; () banked
  3472  012F10  6FDA               	movwf	(printf@f+1)& (0+255),b
  3473  012F12  EC64  F08B         	call	_printf	;wreg free
  3474                           
  3475                           ;main.c: 121: break;
  3476  012F16  0012               	return	
  3477  012F18                     l11402:
  3478                           
  3479                           ;main.c: 123: printf(" Undefined\n\n");
  3480  012F18  0ED0               	movlw	low STR_7
  3481  012F1A  0100               	movlb	0	; () banked
  3482  012F1C  6FD9               	movwf	printf@f& (0+255),b
  3483  012F1E  0EFF               	movlw	high STR_7
  3484  012F20  0100               	movlb	0	; () banked
  3485  012F22  6FDA               	movwf	(printf@f+1)& (0+255),b
  3486  012F24  EC64  F08B         	call	_printf	;wreg free
  3487                           
  3488                           ;main.c: 125: }
  3489                           
  3490                           ;main.c: 124: break;
  3491  012F28  0012               	return	
  3492  012F2A                     l11406:
  3493  012F2A  C0F0  F0EE         	movff	displayMode@mode,??_displayMode
  3494  012F2E  C0F1  F0EF         	movff	displayMode@mode+1,??_displayMode+1
  3495                           
  3496                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3497                           ; Switch size 1, requested type "space"
  3498                           ; Number of cases is 1, Range of values is 0 to 0
  3499                           ; switch strategies available:
  3500                           ; Name         Instructions Cycles
  3501                           ; simple_byte            4     3 (average)
  3502                           ;	Chosen strategy is simple_byte
  3503  012F32  0100               	movlb	0	; () banked
  3504  012F34  51EF               	movf	(??_displayMode+1)& (0+255),w,b
  3505  012F36  0A00               	xorlw	0	; case 0
  3506  012F38  A4D8               	btfss	status,2,c
  3507  012F3A  D7EE               	goto	l11402
  3508                           
  3509                           ; BSR set to: 0
  3510                           ; Switch size 1, requested type "space"
  3511                           ; Number of cases is 3, Range of values is 1 to 3
  3512                           ; switch strategies available:
  3513                           ; Name         Instructions Cycles
  3514                           ; simple_byte           10     6 (average)
  3515                           ;	Chosen strategy is simple_byte
  3516  012F3C  0100               	movlb	0	; () banked
  3517  012F3E  51EE               	movf	??_displayMode& (0+255),w,b
  3518  012F40  0A01               	xorlw	1	; case 1
  3519  012F42  B4D8               	btfsc	status,2,c
  3520  012F44  D7E0               	goto	l11400
  3521  012F46  0A03               	xorlw	3	; case 2
  3522  012F48  B4D8               	btfsc	status,2,c
  3523  012F4A  D7D4               	goto	l11398
  3524  012F4C  0A01               	xorlw	1	; case 3
  3525  012F4E  B4D8               	btfsc	status,2,c
  3526  012F50  D7C8               	goto	l11396
  3527  012F52  D7E2               	goto	l11402
  3528  012F54                     __end_of_displayMode:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           postinc2	equ	0xFDE
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _printf *****************
  3547 ;; Defined at:
  3548 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3551 ;;		 -> STR_12(24), STR_11(24), STR_10(24), STR_9(15), 
  3552 ;;		 -> STR_8(11), STR_7(13), STR_6(14), STR_5(8), 
  3553 ;;		 -> STR_4(12), STR_3(16), STR_2(3), STR_1(22), 
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  tmpval          4    0        struct .
  3556 ;;  cp              3    0        PTR const unsigned char 
  3557 ;;  val             2   30[BANK0 ] unsigned int 
  3558 ;;  ap              2   28[BANK0 ] PTR void [1]
  3559 ;;		 -> ?_printf(2), 
  3560 ;;  len             2    0        unsigned int 
  3561 ;;  c               1   32[BANK0 ] char 
  3562 ;;  prec            1   27[BANK0 ] char 
  3563 ;;  flag            1   26[BANK0 ] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  2   21[BANK0 ] int 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:       12 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:   12
  3580 ;; This function calls:
  3581 ;;		___lwdiv
  3582 ;;		___lwmod
  3583 ;;		_putch
  3584 ;; This function is called by:
  3585 ;;		_displaySID
  3586 ;;		_displayText
  3587 ;;		_displayMode
  3588 ;;		_continuousMode
  3589 ;;		_nullMode
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text9
  3594  0116C8                     __ptext9:
  3595                           	opt stack 0
  3596  0116C8                     _printf:
  3597                           	opt stack 16
  3598                           
  3599                           ;doprnt.c: 466: va_list ap;
  3600                           ;doprnt.c: 499: signed char c;
  3601                           ;doprnt.c: 506: signed char prec;
  3602                           ;doprnt.c: 508: unsigned char flag;
  3603                           ;doprnt.c: 523: union {
  3604                           ;doprnt.c: 524: unsigned long vd;
  3605                           ;doprnt.c: 525: double integ;
  3606                           ;doprnt.c: 526: } tmpval;
  3607                           ;doprnt.c: 528: unsigned int val;
  3608                           ;doprnt.c: 529: unsigned len;
  3609                           ;doprnt.c: 530: const char * cp;
  3610                           ;doprnt.c: 533: *ap = __va_start();
  3611                           
  3612                           ;incstack = 0
  3613  0116C8  0EDB               	movlw	low (?_printf+2)
  3614  0116CA  0100               	movlb	0	; () banked
  3615  0116CC  6FE0               	movwf	printf@ap& (0+255),b
  3616  0116CE  0E00               	movlw	high (?_printf+2)
  3617  0116D0  0100               	movlb	0	; () banked
  3618  0116D2  6FE1               	movwf	(printf@ap+1)& (0+255),b
  3619                           
  3620                           ;doprnt.c: 536: while(c = *f++) {
  3621  0116D4  D0B1               	goto	l10998
  3622  0116D6                     l10946:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;doprnt.c: 538: if(c != '%')
  3626  0116D6  0E25               	movlw	37
  3627  0116D8  0100               	movlb	0	; () banked
  3628  0116DA  19E4               	xorwf	printf@c& (0+255),w,b
  3629  0116DC  B4D8               	btfsc	status,2,c
  3630  0116DE  D005               	goto	l10950
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;doprnt.c: 540: {
  3634                           ;doprnt.c: 541: (putch(c) );
  3635  0116E0  0100               	movlb	0	; () banked
  3636  0116E2  51E4               	movf	printf@c& (0+255),w,b
  3637  0116E4  EC09  F0A3         	call	_putch
  3638                           
  3639                           ;doprnt.c: 542: continue;
  3640  0116E8  D0A7               	goto	l10998
  3641  0116EA                     l10950:
  3642                           
  3643                           ;doprnt.c: 543: }
  3644                           ;doprnt.c: 548: flag = 0;
  3645  0116EA  0E00               	movlw	0
  3646  0116EC  0100               	movlb	0	; () banked
  3647  0116EE  6FDE               	movwf	printf@flag& (0+255),b
  3648                           
  3649                           ;doprnt.c: 635: switch(c = *f++) {
  3650  0116F0  D011               	goto	l10960
  3651  0116F2                     l10952:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3655  0116F2  C0E0  FFD9         	movff	printf@ap,fsr2l
  3656  0116F6  C0E1  FFDA         	movff	printf@ap+1,fsr2h
  3657  0116FA  50DF               	movf	indf2,w,c
  3658  0116FC  0100               	movlb	0	; () banked
  3659  0116FE  6FE4               	movwf	printf@c& (0+255),b
  3660                           
  3661                           ; BSR set to: 0
  3662  011700  0E02               	movlw	2
  3663  011702  0100               	movlb	0	; () banked
  3664  011704  27E0               	addwf	printf@ap& (0+255),f,b
  3665  011706  0E00               	movlw	0
  3666  011708  23E1               	addwfc	(printf@ap+1)& (0+255),f,b
  3667  01170A                     l10956:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 809: (putch(c) );
  3671  01170A  0100               	movlb	0	; () banked
  3672  01170C  51E4               	movf	printf@c& (0+255),w,b
  3673  01170E  EC09  F0A3         	call	_putch
  3674                           
  3675                           ;doprnt.c: 810: continue;
  3676  011712  D092               	goto	l10998
  3677  011714                     l10960:
  3678  011714  C0D9  FFF6         	movff	printf@f,tblptrl
  3679  011718  C0DA  FFF7         	movff	printf@f+1,tblptrh
  3680  01171C  0100               	movlb	0	; () banked
  3681  01171E  4BD9               	infsnz	printf@f& (0+255),f,b
  3682  011720  2BDA               	incf	(printf@f+1)& (0+255),f,b
  3683  011722                     	if	0	;tblptru may be non-zero
  3684  011722                     	endif
  3685  011722                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3686  011722  0E00               	movlw	low (__mediumconst shr (0+16))
  3687  011724  6EF8               	movwf	tblptru,c
  3688  011726                     	endif
  3689  011726  0008               	tblrd		*
  3690  011728  CFF5 F0E4          	movff	tablat,printf@c
  3691  01172C  0100               	movlb	0	; () banked
  3692  01172E  51E4               	movf	printf@c& (0+255),w,b
  3693                           
  3694                           ; Switch size 1, requested type "space"
  3695                           ; Number of cases is 4, Range of values is 0 to 105
  3696                           ; switch strategies available:
  3697                           ; Name         Instructions Cycles
  3698                           ; simple_byte           13     7 (average)
  3699                           ;	Chosen strategy is simple_byte
  3700  011730  0A00               	xorlw	0	; case 0
  3701  011732  B4D8               	btfsc	status,2,c
  3702  011734  0012               	return	
  3703  011736  0A63               	xorlw	99	; case 99
  3704  011738  B4D8               	btfsc	status,2,c
  3705  01173A  D7DB               	goto	l10952
  3706  01173C  0A07               	xorlw	7	; case 100
  3707  01173E  B4D8               	btfsc	status,2,c
  3708  011740  D003               	goto	l10962
  3709  011742  0A0D               	xorlw	13	; case 105
  3710  011744  A4D8               	btfss	status,2,c
  3711  011746  D7E1               	goto	l10956
  3712  011748                     l10962:
  3713                           
  3714                           ;doprnt.c: 1253: {
  3715                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3716  011748  C0E0  FFD9         	movff	printf@ap,fsr2l
  3717  01174C  C0E1  FFDA         	movff	printf@ap+1,fsr2h
  3718  011750  CFDE F0E2          	movff	postinc2,printf@val
  3719  011754  CFDD F0E3          	movff	postdec2,printf@val+1
  3720  011758  0E02               	movlw	2
  3721  01175A  0100               	movlb	0	; () banked
  3722  01175C  27E0               	addwf	printf@ap& (0+255),f,b
  3723  01175E  0E00               	movlw	0
  3724  011760  23E1               	addwfc	(printf@ap+1)& (0+255),f,b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;doprnt.c: 1261: if((int)val < 0) {
  3728  011762  0100               	movlb	0	; () banked
  3729  011764  AFE3               	btfss	(printf@val+1)& (0+255),7,b
  3730  011766  D008               	goto	l10972
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;doprnt.c: 1262: flag |= 0x03;
  3734  011768  0E03               	movlw	3
  3735  01176A  0100               	movlb	0	; () banked
  3736  01176C  13DE               	iorwf	printf@flag& (0+255),f,b
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;doprnt.c: 1263: val = -val;
  3740  01176E  0100               	movlb	0	; () banked
  3741  011770  6DE2               	negf	printf@val& (0+255),b
  3742  011772  1FE3               	comf	(printf@val+1)& (0+255),f,b
  3743  011774  B0D8               	btfsc	status,0,c
  3744  011776  2BE3               	incf	(printf@val+1)& (0+255),f,b
  3745  011778                     l10972:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;doprnt.c: 1264: }
  3749                           ;doprnt.c: 1266: }
  3750                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3751  011778  0E01               	movlw	1
  3752  01177A  0100               	movlb	0	; () banked
  3753  01177C  6FE4               	movwf	printf@c& (0+255),b
  3754  01177E                     l10974:
  3755                           
  3756                           ; BSR set to: 0
  3757  01177E  0E05               	movlw	5
  3758  011780  0100               	movlb	0	; () banked
  3759  011782  19E4               	xorwf	printf@c& (0+255),w,b
  3760  011784  B4D8               	btfsc	status,2,c
  3761  011786  D019               	goto	l10986
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;doprnt.c: 1306: if(val < dpowers[c])
  3765                           
  3766                           ; BSR set to: 0
  3767                           
  3768                           ; BSR set to: 0
  3769  011788  0100               	movlb	0	; () banked
  3770  01178A  51E4               	movf	printf@c& (0+255),w,b
  3771  01178C  0D02               	mullw	2
  3772  01178E  0E6D               	movlw	low _dpowers
  3773  011790  24F3               	addwf	prodl,w,c
  3774  011792  6EF6               	movwf	tblptrl,c
  3775  011794  0EFD               	movlw	high _dpowers
  3776  011796  20F4               	addwfc	prodh,w,c
  3777  011798  6EF7               	movwf	tblptrh,c
  3778  01179A                     	if	1	;There are 3 active tblptr bytes
  3779  01179A  6AF8               	clrf	tblptru,c
  3780  01179C  0E00               	movlw	low (__mediumconst shr (0+16))
  3781  01179E  22F8               	addwfc	tblptru,f,c
  3782  0117A0                     	endif
  3783  0117A0  0009               	tblrd		*+
  3784  0117A2  50F5               	movf	tablat,w,c
  3785  0117A4  0100               	movlb	0	; () banked
  3786  0117A6  5DE2               	subwf	printf@val& (0+255),w,b
  3787  0117A8  0009               	tblrd		*+
  3788  0117AA  50F5               	movf	tablat,w,c
  3789  0117AC  0100               	movlb	0	; () banked
  3790  0117AE  59E3               	subwfb	(printf@val+1)& (0+255),w,b
  3791  0117B0  A0D8               	btfss	status,0,c
  3792  0117B2  D003               	goto	l10986
  3793                           
  3794                           ; BSR set to: 0
  3795                           
  3796                           ; BSR set to: 0
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 1307: break;
  3800  0117B4  0100               	movlb	0	; () banked
  3801  0117B6  2BE4               	incf	printf@c& (0+255),f,b
  3802  0117B8  D7E2               	goto	l10974
  3803  0117BA                     l10986:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;doprnt.c: 1422: {
  3807                           ;doprnt.c: 1438: if(flag & 0x03)
  3808  0117BA  C0DE  F0DD         	movff	printf@flag,??_printf
  3809  0117BE  0E03               	movlw	3
  3810  0117C0  0100               	movlb	0	; () banked
  3811  0117C2  17DD               	andwf	??_printf& (0+255),f,b
  3812  0117C4  B4D8               	btfsc	status,2,c
  3813  0117C6  D003               	goto	l10990
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;doprnt.c: 1439: (putch('-') );
  3817  0117C8  0E2D               	movlw	45
  3818  0117CA  EC09  F0A3         	call	_putch
  3819  0117CE                     l10990:
  3820                           
  3821                           ;doprnt.c: 1469: }
  3822                           ;doprnt.c: 1472: prec = c;
  3823  0117CE  C0E4  F0DF         	movff	printf@c,printf@prec
  3824                           
  3825                           ;doprnt.c: 1474: while(prec--) {
  3826  0117D2  D02C               	goto	l10996
  3827  0117D4                     l10992:
  3828                           
  3829                           ;doprnt.c: 1478: {
  3830                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3831  0117D4  0100               	movlb	0	; () banked
  3832  0117D6  51DF               	movf	printf@prec& (0+255),w,b
  3833  0117D8  0D02               	mullw	2
  3834  0117DA  0E6D               	movlw	low _dpowers
  3835  0117DC  24F3               	addwf	prodl,w,c
  3836  0117DE  6EF6               	movwf	tblptrl,c
  3837  0117E0  0EFD               	movlw	high _dpowers
  3838  0117E2  20F4               	addwfc	prodh,w,c
  3839  0117E4  6EF7               	movwf	tblptrh,c
  3840  0117E6                     	if	1	;There are 3 active tblptr bytes
  3841  0117E6  6AF8               	clrf	tblptru,c
  3842  0117E8  0E00               	movlw	low (__mediumconst shr (0+16))
  3843  0117EA  22F8               	addwfc	tblptru,f,c
  3844  0117EC                     	endif
  3845  0117EC  0009               	tblrd		*+
  3846  0117EE  CFF5 F0C6          	movff	tablat,___lwdiv@divisor
  3847  0117F2  000A               	tblrd		*-
  3848  0117F4  CFF5 F0C7          	movff	tablat,___lwdiv@divisor+1
  3849  0117F8  C0E2  F0C4         	movff	printf@val,___lwdiv@dividend
  3850  0117FC  C0E3  F0C5         	movff	printf@val+1,___lwdiv@dividend+1
  3851  011800  ECE0  F099         	call	___lwdiv	;wreg free
  3852  011804  C0C4  F0CB         	movff	?___lwdiv,___lwmod@dividend
  3853  011808  C0C5  F0CC         	movff	?___lwdiv+1,___lwmod@dividend+1
  3854  01180C  0E00               	movlw	0
  3855  01180E  0100               	movlb	0	; () banked
  3856  011810  6FCE               	movwf	(___lwmod@divisor+1)& (0+255),b
  3857  011812  0E0A               	movlw	10
  3858  011814  6FCD               	movwf	___lwmod@divisor& (0+255),b
  3859  011816  ECB0  F09C         	call	___lwmod	;wreg free
  3860  01181A  0100               	movlb	0	; () banked
  3861  01181C  51CB               	movf	?___lwmod& (0+255),w,b
  3862  01181E  0F30               	addlw	48
  3863  011820  0100               	movlb	0	; () banked
  3864  011822  6FE4               	movwf	printf@c& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;doprnt.c: 1523: }
  3868                           ;doprnt.c: 1524: (putch(c) );
  3869  011824  0100               	movlb	0	; () banked
  3870  011826  51E4               	movf	printf@c& (0+255),w,b
  3871  011828  EC09  F0A3         	call	_putch
  3872  01182C                     l10996:
  3873  01182C  0100               	movlb	0	; () banked
  3874  01182E  07DF               	decf	printf@prec& (0+255),f,b
  3875  011830  0100               	movlb	0	; () banked
  3876  011832  29DF               	incf	printf@prec& (0+255),w,b
  3877  011834  A4D8               	btfss	status,2,c
  3878  011836  D7CE               	goto	l10992
  3879  011838                     l10998:
  3880  011838  C0D9  FFF6         	movff	printf@f,tblptrl
  3881  01183C  C0DA  FFF7         	movff	printf@f+1,tblptrh
  3882  011840  0100               	movlb	0	; () banked
  3883  011842  4BD9               	infsnz	printf@f& (0+255),f,b
  3884  011844  2BDA               	incf	(printf@f+1)& (0+255),f,b
  3885  011846                     	if	0	;tblptru may be non-zero
  3886  011846                     	endif
  3887  011846                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3888  011846  0E00               	movlw	low (__mediumconst shr (0+16))
  3889  011848  6EF8               	movwf	tblptru,c
  3890  01184A                     	endif
  3891  01184A  0008               	tblrd		*
  3892  01184C  CFF5 F0E4          	movff	tablat,printf@c
  3893  011850  0100               	movlb	0	; () banked
  3894  011852  51E4               	movf	printf@c& (0+255),w,b
  3895  011854  B4D8               	btfsc	status,2,c
  3896  011856  0012               	return	
  3897  011858  D73E               	goto	l10946
  3898  01185A                     __end_of_printf:
  3899                           	opt stack 0
  3900                           tosu	equ	0xFFF
  3901                           tosh	equ	0xFFE
  3902                           tosl	equ	0xFFD
  3903                           pclath	equ	0xFFA
  3904                           tblptru	equ	0xFF8
  3905                           tblptrh	equ	0xFF7
  3906                           tblptrl	equ	0xFF6
  3907                           tablat	equ	0xFF5
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           postdec1	equ	0xFE5
  3913                           fsr1h	equ	0xFE2
  3914                           fsr1l	equ	0xFE1
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _putch *****************
  3923 ;; Defined at:
  3924 ;;		line 454 in file "Library/Console.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  c               1    wreg     unsigned char 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;  c               1   20[BANK0 ] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;Total ram usage:        1 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:   11
  3945 ;; This function calls:
  3946 ;;		_Console_PrintChar
  3947 ;; This function is called by:
  3948 ;;		_printf
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text10
  3953  014612                     __ptext10:
  3954                           	opt stack 0
  3955  014612                     _putch:
  3956                           	opt stack 16
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;incstack = 0
  3960                           ;putch@c stored from wreg
  3961  014612  0100               	movlb	0	; () banked
  3962  014614  6FD8               	movwf	putch@c& (0+255),b
  3963                           
  3964                           ;Console.c: 456: Console_PrintChar(c);
  3965  014616  0100               	movlb	0	; () banked
  3966  014618  51D8               	movf	putch@c& (0+255),w,b
  3967  01461A  ECF6  F08C         	call	_Console_PrintChar
  3968  01461E  0012               	return		;funcret
  3969  014620                     __end_of_putch:
  3970                           	opt stack 0
  3971                           tosu	equ	0xFFF
  3972                           tosh	equ	0xFFE
  3973                           tosl	equ	0xFFD
  3974                           pclath	equ	0xFFA
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           postdec1	equ	0xFE5
  3984                           fsr1h	equ	0xFE2
  3985                           fsr1l	equ	0xFE1
  3986                           indf2	equ	0xFDF
  3987                           postinc2	equ	0xFDE
  3988                           postdec2	equ	0xFDD
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _Console_PrintChar *****************
  3994 ;; Defined at:
  3995 ;;		line 322 in file "Library/Console.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  pInput          1    wreg     unsigned char 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  pInput          1   19[BANK0 ] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;Total ram usage:        4 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:   10
  4016 ;; This function calls:
  4017 ;;		_Console_Backspace
  4018 ;;		_Console_FormFeed
  4019 ;;		_Console_IncrementCursor
  4020 ;;		_Console_NewLine
  4021 ;;		_Console_ResetCursor
  4022 ;;		_Console_Tab
  4023 ;; This function is called by:
  4024 ;;		_putch
  4025 ;;		_Console_PrintString
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text11
  4030  0119EC                     __ptext11:
  4031                           	opt stack 0
  4032  0119EC                     _Console_PrintChar:
  4033                           	opt stack 16
  4034                           
  4035                           ;incstack = 0
  4036                           ;Console_PrintChar@pInput stored from wreg
  4037  0119EC  0100               	movlb	0	; () banked
  4038  0119EE  6FD7               	movwf	Console_PrintChar@pInput& (0+255),b
  4039                           
  4040                           ;Console.c: 324: switch(pInput)
  4041  0119F0  D0A8               	goto	l10628
  4042  0119F2                     l10584:
  4043                           
  4044                           ;Console.c: 327: case '\n':
  4045                           ;Console.c: 328: Console_NewLine();
  4046  0119F2  EC44  F098         	call	_Console_NewLine	;wreg free
  4047                           
  4048                           ;Console.c: 329: return;
  4049  0119F6  0012               	return	
  4050  0119F8                     l10588:
  4051                           
  4052                           ;Console.c: 331: Console_Backspace();
  4053  0119F8  EC38  F09E         	call	_Console_Backspace	;wreg free
  4054                           
  4055                           ;Console.c: 332: return;
  4056  0119FC  0012               	return	
  4057  0119FE                     l10592:
  4058                           
  4059                           ;Console.c: 334: Console_FormFeed();
  4060  0119FE  ECD5  F098         	call	_Console_FormFeed	;wreg free
  4061                           
  4062                           ;Console.c: 335: return;
  4063  011A02  0012               	return	
  4064  011A04                     l10596:
  4065                           
  4066                           ;Console.c: 337: Console_Tab();
  4067  011A04  EC3F  F093         	call	_Console_Tab	;wreg free
  4068                           
  4069                           ;Console.c: 338: return;
  4070  011A08  0012               	return	
  4071  011A0A                     l10600:
  4072                           
  4073                           ;Console.c: 340: Console_IncrementCursor();
  4074  011A0A  EC4C  F09C         	call	_Console_IncrementCursor	;wreg free
  4075                           
  4076                           ;Console.c: 341: return;
  4077  011A0E  0012               	return	
  4078  011A10                     l10604:
  4079                           
  4080                           ;Console.c: 343: Console_ResetCursor();
  4081  011A10  EC5B  F0A2         	call	_Console_ResetCursor	;wreg free
  4082                           
  4083                           ;Console.c: 344: return;
  4084  011A14  0012               	return	
  4085  011A16                     l10608:
  4086                           
  4087                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4088  011A16  C0D7  F0D4         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4089  011A1A  0E7F               	movlw	127
  4090  011A1C  0100               	movlb	0	; () banked
  4091  011A1E  17D4               	andwf	??_Console_PrintChar& (0+255),f,b
  4092  011A20  5036               	movf	_lBufferY,w,c
  4093  011A22  0D14               	mullw	20
  4094  011A24  0E16               	movlw	low _lBuffer
  4095  011A26  0100               	movlb	0	; () banked
  4096  011A28  6FD5               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4097  011A2A  0E02               	movlw	high _lBuffer
  4098  011A2C  0100               	movlb	0	; () banked
  4099  011A2E  6FD6               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4100  011A30  50F3               	movf	prodl,w,c
  4101  011A32  0100               	movlb	0	; () banked
  4102  011A34  27D5               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4103  011A36  50F4               	movf	prodh,w,c
  4104  011A38  0100               	movlb	0	; () banked
  4105  011A3A  23D6               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4106  011A3C  5037               	movf	_lBufferX,w,c
  4107  011A3E  0D01               	mullw	1
  4108  011A40  50F3               	movf	prodl,w,c
  4109  011A42  0100               	movlb	0	; () banked
  4110  011A44  25D5               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4111  011A46  6ED9               	movwf	fsr2l,c
  4112  011A48  50F4               	movf	prodh,w,c
  4113  011A4A  0100               	movlb	0	; () banked
  4114  011A4C  21D6               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4115  011A4E  6EDA               	movwf	fsr2h,c
  4116  011A50  50DF               	movf	indf2,w,c
  4117  011A52  0B7F               	andlw	127
  4118  011A54  0100               	movlb	0	; () banked
  4119  011A56  19D4               	xorwf	??_Console_PrintChar& (0+255),w,b
  4120  011A58  B4D8               	btfsc	status,2,c
  4121  011A5A  D02B               	goto	l10616
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;Console.c: 351: {
  4125                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4126  011A5C  0E01               	movlw	1
  4127  011A5E  0100               	movlb	0	; () banked
  4128  011A60  6FFF               	movwf	_change& (0+255),b
  4129                           
  4130                           ; BSR set to: 0
  4131  011A62  5036               	movf	_lBufferY,w,c
  4132  011A64  0D14               	mullw	20
  4133  011A66  0E16               	movlw	low _lBuffer
  4134  011A68  0100               	movlb	0	; () banked
  4135  011A6A  6FD4               	movwf	??_Console_PrintChar& (0+255),b
  4136  011A6C  0E02               	movlw	high _lBuffer
  4137  011A6E  0100               	movlb	0	; () banked
  4138  011A70  6FD5               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4139  011A72  50F3               	movf	prodl,w,c
  4140  011A74  0100               	movlb	0	; () banked
  4141  011A76  27D4               	addwf	??_Console_PrintChar& (0+255),f,b
  4142  011A78  50F4               	movf	prodh,w,c
  4143  011A7A  0100               	movlb	0	; () banked
  4144  011A7C  23D5               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4145  011A7E  5037               	movf	_lBufferX,w,c
  4146  011A80  0D01               	mullw	1
  4147  011A82  50F3               	movf	prodl,w,c
  4148  011A84  0100               	movlb	0	; () banked
  4149  011A86  25D4               	addwf	??_Console_PrintChar& (0+255),w,b
  4150  011A88  6ED9               	movwf	fsr2l,c
  4151  011A8A  50F4               	movf	prodh,w,c
  4152  011A8C  0100               	movlb	0	; () banked
  4153  011A8E  21D5               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4154  011A90  6EDA               	movwf	fsr2h,c
  4155  011A92  0100               	movlb	0	; () banked
  4156  011A94  51D7               	movf	Console_PrintChar@pInput& (0+255),w,b
  4157  011A96  0980               	iorlw	128
  4158  011A98  6EDF               	movwf	indf2,c
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4162  011A9A  5036               	movf	_lBufferY,w,c
  4163  011A9C  0D02               	mullw	2
  4164  011A9E  0E00               	movlw	low _lCBuffer
  4165  011AA0  24F3               	addwf	prodl,w,c
  4166  011AA2  6ED9               	movwf	fsr2l,c
  4167  011AA4  0E01               	movlw	high _lCBuffer
  4168  011AA6  20F4               	addwfc	prodh,w,c
  4169  011AA8  6EDA               	movwf	fsr2h,c
  4170  011AAA  C0FD  FFDE         	movff	_gForecolour,postinc2
  4171  011AAE  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4172  011AB2                     l10616:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;Console.c: 354: }
  4176                           ;Console.c: 368: if(Console_IncrementCursor())
  4177  011AB2  EC4C  F09C         	call	_Console_IncrementCursor	;wreg free
  4178  011AB6  0900               	iorlw	0
  4179  011AB8  B4D8               	btfsc	status,2,c
  4180  011ABA  0012               	return	
  4181                           
  4182                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4183  011ABC  C0D7  F0D4         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4184  011AC0  0E7F               	movlw	127
  4185  011AC2  0100               	movlb	0	; () banked
  4186  011AC4  17D4               	andwf	??_Console_PrintChar& (0+255),f,b
  4187  011AC6  5036               	movf	_lBufferY,w,c
  4188  011AC8  0D14               	mullw	20
  4189  011ACA  0E16               	movlw	low _lBuffer
  4190  011ACC  0100               	movlb	0	; () banked
  4191  011ACE  6FD5               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4192  011AD0  0E02               	movlw	high _lBuffer
  4193  011AD2  0100               	movlb	0	; () banked
  4194  011AD4  6FD6               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4195  011AD6  50F3               	movf	prodl,w,c
  4196  011AD8  0100               	movlb	0	; () banked
  4197  011ADA  27D5               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4198  011ADC  50F4               	movf	prodh,w,c
  4199  011ADE  0100               	movlb	0	; () banked
  4200  011AE0  23D6               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4201  011AE2  5037               	movf	_lBufferX,w,c
  4202  011AE4  0D01               	mullw	1
  4203  011AE6  50F3               	movf	prodl,w,c
  4204  011AE8  0100               	movlb	0	; () banked
  4205  011AEA  25D5               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4206  011AEC  6ED9               	movwf	fsr2l,c
  4207  011AEE  50F4               	movf	prodh,w,c
  4208  011AF0  0100               	movlb	0	; () banked
  4209  011AF2  21D6               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4210  011AF4  6EDA               	movwf	fsr2h,c
  4211  011AF6  50DF               	movf	indf2,w,c
  4212  011AF8  0B7F               	andlw	127
  4213  011AFA  0100               	movlb	0	; () banked
  4214  011AFC  19D4               	xorwf	??_Console_PrintChar& (0+255),w,b
  4215  011AFE  B4D8               	btfsc	status,2,c
  4216  011B00  0012               	return	
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4220  011B02  0E01               	movlw	1
  4221  011B04  0100               	movlb	0	; () banked
  4222  011B06  6FFF               	movwf	_change& (0+255),b
  4223                           
  4224                           ; BSR set to: 0
  4225  011B08  5036               	movf	_lBufferY,w,c
  4226  011B0A  0D14               	mullw	20
  4227  011B0C  0E16               	movlw	low _lBuffer
  4228  011B0E  0100               	movlb	0	; () banked
  4229  011B10  6FD4               	movwf	??_Console_PrintChar& (0+255),b
  4230  011B12  0E02               	movlw	high _lBuffer
  4231  011B14  0100               	movlb	0	; () banked
  4232  011B16  6FD5               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4233  011B18  50F3               	movf	prodl,w,c
  4234  011B1A  0100               	movlb	0	; () banked
  4235  011B1C  27D4               	addwf	??_Console_PrintChar& (0+255),f,b
  4236  011B1E  50F4               	movf	prodh,w,c
  4237  011B20  0100               	movlb	0	; () banked
  4238  011B22  23D5               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4239  011B24  5037               	movf	_lBufferX,w,c
  4240  011B26  0D01               	mullw	1
  4241  011B28  50F3               	movf	prodl,w,c
  4242  011B2A  0100               	movlb	0	; () banked
  4243  011B2C  25D4               	addwf	??_Console_PrintChar& (0+255),w,b
  4244  011B2E  6ED9               	movwf	fsr2l,c
  4245  011B30  50F4               	movf	prodh,w,c
  4246  011B32  0100               	movlb	0	; () banked
  4247  011B34  21D5               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4248  011B36  6EDA               	movwf	fsr2h,c
  4249  011B38  0100               	movlb	0	; () banked
  4250  011B3A  51D7               	movf	Console_PrintChar@pInput& (0+255),w,b
  4251  011B3C  0980               	iorlw	128
  4252  011B3E  6EDF               	movwf	indf2,c
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;Console.c: 372: };
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;Console.c: 371: return;
  4259                           
  4260                           ; BSR set to: 0
  4261                           
  4262                           ; BSR set to: 0
  4263  011B40  0012               	return	
  4264  011B42                     l10628:
  4265  011B42  0100               	movlb	0	; () banked
  4266  011B44  51D7               	movf	Console_PrintChar@pInput& (0+255),w,b
  4267                           
  4268                           ; Switch size 1, requested type "space"
  4269                           ; Number of cases is 8, Range of values is 7 to 35
  4270                           ; switch strategies available:
  4271                           ; Name         Instructions Cycles
  4272                           ; simple_byte           25    13 (average)
  4273                           ;	Chosen strategy is simple_byte
  4274  011B46  0A07               	xorlw	7	; case 7
  4275  011B48  B4D8               	btfsc	status,2,c
  4276  011B4A  D75F               	goto	l10600
  4277  011B4C  0A0F               	xorlw	15	; case 8
  4278  011B4E  B4D8               	btfsc	status,2,c
  4279  011B50  D753               	goto	l10588
  4280  011B52  0A01               	xorlw	1	; case 9
  4281  011B54  B4D8               	btfsc	status,2,c
  4282  011B56  D756               	goto	l10596
  4283  011B58  0A03               	xorlw	3	; case 10
  4284  011B5A  B4D8               	btfsc	status,2,c
  4285  011B5C  D74A               	goto	l10584
  4286  011B5E  0A06               	xorlw	6	; case 12
  4287  011B60  B4D8               	btfsc	status,2,c
  4288  011B62  D74D               	goto	l10592
  4289  011B64  0A01               	xorlw	1	; case 13
  4290  011B66  B4D8               	btfsc	status,2,c
  4291  011B68  D744               	goto	l10584
  4292  011B6A  0A2D               	xorlw	45	; case 32
  4293  011B6C  B4D8               	btfsc	status,2,c
  4294  011B6E  D753               	goto	l10608
  4295  011B70  0A03               	xorlw	3	; case 35
  4296  011B72  B4D8               	btfsc	status,2,c
  4297  011B74  D74D               	goto	l10604
  4298  011B76  D74F               	goto	l10608
  4299  011B78                     __end_of_Console_PrintChar:
  4300                           	opt stack 0
  4301                           tosu	equ	0xFFF
  4302                           tosh	equ	0xFFE
  4303                           tosl	equ	0xFFD
  4304                           pclath	equ	0xFFA
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           postdec1	equ	0xFE5
  4314                           fsr1h	equ	0xFE2
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _Console_Tab *****************
  4324 ;; Defined at:
  4325 ;;		line 260 in file "Library/Console.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  c               1   15[BANK0 ] unsigned char 
  4330 ;;  i               1   14[BANK0 ] unsigned char 
  4331 ;;  t               1   13[BANK0 ] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;Total ram usage:        8 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    9
  4348 ;; This function calls:
  4349 ;;		_Console_ClearCursor
  4350 ;;		_Console_IncrementCursor
  4351 ;;		___awdiv
  4352 ;; This function is called by:
  4353 ;;		_Console_PrintChar
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text12
  4358  01267E                     __ptext12:
  4359                           	opt stack 0
  4360  01267E                     _Console_Tab:
  4361                           	opt stack 16
  4362                           
  4363                           ;Console.c: 262: UINT8 i = 0;
  4364                           
  4365                           ;incstack = 0
  4366  01267E  0E00               	movlw	0
  4367  012680  0100               	movlb	0	; () banked
  4368  012682  6FD2               	movwf	Console_Tab@i& (0+255),b
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4372  012684  0EFA               	movlw	250
  4373  012686  243F               	addwf	_gCursor,w,c
  4374  012688  0100               	movlb	0	; () banked
  4375  01268A  6FC4               	movwf	___awdiv@dividend& (0+255),b
  4376  01268C  0EFF               	movlw	255
  4377  01268E  2040               	addwfc	_gCursor+1,w,c
  4378  012690  0100               	movlb	0	; () banked
  4379  012692  6FC5               	movwf	(___awdiv@dividend+1)& (0+255),b
  4380  012694  0E00               	movlw	0
  4381  012696  0100               	movlb	0	; () banked
  4382  012698  6FC7               	movwf	(___awdiv@divisor+1)& (0+255),b
  4383  01269A  0E06               	movlw	6
  4384  01269C  6FC6               	movwf	___awdiv@divisor& (0+255),b
  4385  01269E  ECA0  F093         	call	___awdiv	;wreg free
  4386  0126A2  0100               	movlb	0	; () banked
  4387  0126A4  51C4               	movf	?___awdiv& (0+255),w,b
  4388  0126A6  0100               	movlb	0	; () banked
  4389  0126A8  6FD3               	movwf	Console_Tab@c& (0+255),b
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;Console.c: 264: UINT8 t = c/4;
  4393  0126AA  C0D3  F0C4         	movff	Console_Tab@c,___awdiv@dividend
  4394  0126AE  0100               	movlb	0	; () banked
  4395  0126B0  6BC5               	clrf	(___awdiv@dividend+1)& (0+255),b
  4396  0126B2  0E00               	movlw	0
  4397  0126B4  0100               	movlb	0	; () banked
  4398  0126B6  6FC7               	movwf	(___awdiv@divisor+1)& (0+255),b
  4399  0126B8  0E04               	movlw	4
  4400  0126BA  6FC6               	movwf	___awdiv@divisor& (0+255),b
  4401  0126BC  ECA0  F093         	call	___awdiv	;wreg free
  4402  0126C0  0100               	movlb	0	; () banked
  4403  0126C2  51C4               	movf	?___awdiv& (0+255),w,b
  4404  0126C4  0100               	movlb	0	; () banked
  4405  0126C6  6FD1               	movwf	Console_Tab@t& (0+255),b
  4406                           
  4407                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4408  0126C8  0E00               	movlw	0
  4409  0126CA  0100               	movlb	0	; () banked
  4410  0126CC  6FD2               	movwf	Console_Tab@i& (0+255),b
  4411  0126CE  D006               	goto	l10420
  4412  0126D0                     l10416:
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;Console.c: 266: {
  4416                           ;Console.c: 267: Console_ClearCursor();
  4417  0126D0  ECD9  F09F         	call	_Console_ClearCursor	;wreg free
  4418                           
  4419                           ;Console.c: 268: Console_IncrementCursor();
  4420  0126D4  EC4C  F09C         	call	_Console_IncrementCursor	;wreg free
  4421  0126D8  0100               	movlb	0	; () banked
  4422  0126DA  2BD2               	incf	Console_Tab@i& (0+255),f,b
  4423  0126DC                     l10420:
  4424                           
  4425                           ; BSR set to: 0
  4426  0126DC  0100               	movlb	0	; () banked
  4427  0126DE  51D1               	movf	Console_Tab@t& (0+255),w,b
  4428  0126E0  0D04               	mullw	4
  4429  0126E2  1EF3               	comf	prodl,f,c
  4430  0126E4  1EF4               	comf	prodh,f,c
  4431  0126E6  4AF3               	infsnz	prodl,f,c
  4432  0126E8  2AF4               	incf	prodh,f,c
  4433  0126EA  0100               	movlb	0	; () banked
  4434  0126EC  51D3               	movf	Console_Tab@c& (0+255),w,b
  4435  0126EE  0100               	movlb	0	; () banked
  4436  0126F0  6FCC               	movwf	??_Console_Tab& (0+255),b
  4437  0126F2  6BCD               	clrf	(??_Console_Tab+1)& (0+255),b
  4438  0126F4  50F3               	movf	prodl,w,c
  4439  0126F6  0100               	movlb	0	; () banked
  4440  0126F8  27CC               	addwf	??_Console_Tab& (0+255),f,b
  4441  0126FA  50F4               	movf	prodh,w,c
  4442  0126FC  0100               	movlb	0	; () banked
  4443  0126FE  23CD               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4444  012700  0100               	movlb	0	; () banked
  4445  012702  1FCC               	comf	??_Console_Tab& (0+255),f,b
  4446  012704  1FCD               	comf	(??_Console_Tab+1)& (0+255),f,b
  4447  012706  4BCC               	infsnz	??_Console_Tab& (0+255),f,b
  4448  012708  2BCD               	incf	(??_Console_Tab+1)& (0+255),f,b
  4449  01270A  0E04               	movlw	4
  4450  01270C  0100               	movlb	0	; () banked
  4451  01270E  27CC               	addwf	??_Console_Tab& (0+255),f,b
  4452  012710  0E00               	movlw	0
  4453  012712  23CD               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4454  012714  0100               	movlb	0	; () banked
  4455  012716  51D2               	movf	Console_Tab@i& (0+255),w,b
  4456  012718  0100               	movlb	0	; () banked
  4457  01271A  6FCE               	movwf	(??_Console_Tab+2)& (0+255),b
  4458  01271C  6BCF               	clrf	(??_Console_Tab+3)& (0+255),b
  4459  01271E  0100               	movlb	0	; () banked
  4460  012720  51CC               	movf	??_Console_Tab& (0+255),w,b
  4461  012722  0100               	movlb	0	; () banked
  4462  012724  5DCE               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4463  012726  0100               	movlb	0	; () banked
  4464  012728  51CF               	movf	(??_Console_Tab+3)& (0+255),w,b
  4465  01272A  0A80               	xorlw	128
  4466  01272C  0100               	movlb	0	; () banked
  4467  01272E  6FD0               	movwf	(??_Console_Tab+4)& (0+255),b
  4468  012730  0100               	movlb	0	; () banked
  4469  012732  51CD               	movf	(??_Console_Tab+1)& (0+255),w,b
  4470  012734  0A80               	xorlw	128
  4471  012736  0100               	movlb	0	; () banked
  4472  012738  59D0               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4473  01273A  B0D8               	btfsc	status,0,c
  4474  01273C  0012               	return	
  4475  01273E  D7C8               	goto	l10416
  4476  012740                     __end_of_Console_Tab:
  4477                           	opt stack 0
  4478                           tosu	equ	0xFFF
  4479                           tosh	equ	0xFFE
  4480                           tosl	equ	0xFFD
  4481                           pclath	equ	0xFFA
  4482                           tblptru	equ	0xFF8
  4483                           tblptrh	equ	0xFF7
  4484                           tblptrl	equ	0xFF6
  4485                           tablat	equ	0xFF5
  4486                           prodh	equ	0xFF4
  4487                           prodl	equ	0xFF3
  4488                           postinc0	equ	0xFEE
  4489                           wreg	equ	0xFE8
  4490                           postdec1	equ	0xFE5
  4491                           fsr1h	equ	0xFE2
  4492                           fsr1l	equ	0xFE1
  4493                           indf2	equ	0xFDF
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function ___awdiv *****************
  4501 ;; Defined at:
  4502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  dividend        2    0[BANK0 ] int 
  4505 ;;  divisor         2    2[BANK0 ] int 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  quotient        2    6[BANK0 ] int 
  4508 ;;  sign            1    5[BANK0 ] unsigned char 
  4509 ;;  counter         1    4[BANK0 ] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  2    0[BANK0 ] int 
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;Total ram usage:        8 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    7
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_Console_Tab
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text13
  4534  012740                     __ptext13:
  4535                           	opt stack 0
  4536  012740                     ___awdiv:
  4537                           	opt stack 17
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;incstack = 0
  4541  012740  0E00               	movlw	0
  4542  012742  0100               	movlb	0	; () banked
  4543  012744  6FC9               	movwf	___awdiv@sign& (0+255),b
  4544                           
  4545                           ; BSR set to: 0
  4546  012746  0100               	movlb	0	; () banked
  4547  012748  AFC7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4548  01274A  D008               	goto	l10294
  4549                           
  4550                           ; BSR set to: 0
  4551  01274C  0100               	movlb	0	; () banked
  4552  01274E  6DC6               	negf	___awdiv@divisor& (0+255),b
  4553  012750  1FC7               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4554  012752  B0D8               	btfsc	status,0,c
  4555  012754  2BC7               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4556                           
  4557                           ; BSR set to: 0
  4558  012756  0E01               	movlw	1
  4559  012758  0100               	movlb	0	; () banked
  4560  01275A  6FC9               	movwf	___awdiv@sign& (0+255),b
  4561  01275C                     l10294:
  4562                           
  4563                           ; BSR set to: 0
  4564  01275C  0100               	movlb	0	; () banked
  4565  01275E  AFC5               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4566  012760  D008               	goto	l10300
  4567                           
  4568                           ; BSR set to: 0
  4569  012762  0100               	movlb	0	; () banked
  4570  012764  6DC4               	negf	___awdiv@dividend& (0+255),b
  4571  012766  1FC5               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4572  012768  B0D8               	btfsc	status,0,c
  4573  01276A  2BC5               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4574                           
  4575                           ; BSR set to: 0
  4576  01276C  0E01               	movlw	1
  4577  01276E  0100               	movlb	0	; () banked
  4578  012770  1BC9               	xorwf	___awdiv@sign& (0+255),f,b
  4579  012772                     l10300:
  4580                           
  4581                           ; BSR set to: 0
  4582  012772  0E00               	movlw	0
  4583  012774  0100               	movlb	0	; () banked
  4584  012776  6FCB               	movwf	(___awdiv@quotient+1)& (0+255),b
  4585  012778  0E00               	movlw	0
  4586  01277A  6FCA               	movwf	___awdiv@quotient& (0+255),b
  4587                           
  4588                           ; BSR set to: 0
  4589  01277C  0100               	movlb	0	; () banked
  4590  01277E  51C6               	movf	___awdiv@divisor& (0+255),w,b
  4591  012780  0100               	movlb	0	; () banked
  4592  012782  11C7               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4593  012784  B4D8               	btfsc	status,2,c
  4594  012786  D02C               	goto	l10322
  4595                           
  4596                           ; BSR set to: 0
  4597  012788  0E01               	movlw	1
  4598  01278A  0100               	movlb	0	; () banked
  4599  01278C  6FC8               	movwf	___awdiv@counter& (0+255),b
  4600  01278E  D006               	goto	l10308
  4601  012790                     l10306:
  4602                           
  4603                           ; BSR set to: 0
  4604  012790  0100               	movlb	0	; () banked
  4605  012792  90D8               	bcf	status,0,c
  4606  012794  37C6               	rlcf	___awdiv@divisor& (0+255),f,b
  4607  012796  37C7               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4608  012798  0100               	movlb	0	; () banked
  4609  01279A  2BC8               	incf	___awdiv@counter& (0+255),f,b
  4610  01279C                     l10308:
  4611                           
  4612                           ; BSR set to: 0
  4613  01279C  0100               	movlb	0	; () banked
  4614  01279E  AFC7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4615  0127A0  D7F7               	goto	l10306
  4616  0127A2                     l10310:
  4617                           
  4618                           ; BSR set to: 0
  4619  0127A2  0100               	movlb	0	; () banked
  4620  0127A4  90D8               	bcf	status,0,c
  4621  0127A6  37CA               	rlcf	___awdiv@quotient& (0+255),f,b
  4622  0127A8  37CB               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4623                           
  4624                           ; BSR set to: 0
  4625  0127AA  0100               	movlb	0	; () banked
  4626  0127AC  51C6               	movf	___awdiv@divisor& (0+255),w,b
  4627  0127AE  0100               	movlb	0	; () banked
  4628  0127B0  5DC4               	subwf	___awdiv@dividend& (0+255),w,b
  4629  0127B2  0100               	movlb	0	; () banked
  4630  0127B4  51C7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4631  0127B6  0100               	movlb	0	; () banked
  4632  0127B8  59C5               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4633  0127BA  A0D8               	btfss	status,0,c
  4634  0127BC  D00A               	goto	l10318
  4635                           
  4636                           ; BSR set to: 0
  4637  0127BE  0100               	movlb	0	; () banked
  4638  0127C0  51C6               	movf	___awdiv@divisor& (0+255),w,b
  4639  0127C2  0100               	movlb	0	; () banked
  4640  0127C4  5FC4               	subwf	___awdiv@dividend& (0+255),f,b
  4641  0127C6  0100               	movlb	0	; () banked
  4642  0127C8  51C7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4643  0127CA  0100               	movlb	0	; () banked
  4644  0127CC  5BC5               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4645                           
  4646                           ; BSR set to: 0
  4647  0127CE  0100               	movlb	0	; () banked
  4648  0127D0  81CA               	bsf	___awdiv@quotient& (0+255),0,b
  4649  0127D2                     l10318:
  4650                           
  4651                           ; BSR set to: 0
  4652  0127D2  0100               	movlb	0	; () banked
  4653  0127D4  90D8               	bcf	status,0,c
  4654  0127D6  33C7               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4655  0127D8  33C6               	rrcf	___awdiv@divisor& (0+255),f,b
  4656                           
  4657                           ; BSR set to: 0
  4658  0127DA  0100               	movlb	0	; () banked
  4659  0127DC  2FC8               	decfsz	___awdiv@counter& (0+255),f,b
  4660  0127DE  D7E1               	goto	l10310
  4661  0127E0                     l10322:
  4662                           
  4663                           ; BSR set to: 0
  4664  0127E0  0100               	movlb	0	; () banked
  4665  0127E2  51C9               	movf	___awdiv@sign& (0+255),w,b
  4666  0127E4  0100               	movlb	0	; () banked
  4667  0127E6  B4D8               	btfsc	status,2,c
  4668  0127E8  D005               	goto	l10326
  4669                           
  4670                           ; BSR set to: 0
  4671  0127EA  0100               	movlb	0	; () banked
  4672  0127EC  6DCA               	negf	___awdiv@quotient& (0+255),b
  4673  0127EE  1FCB               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4674  0127F0  B0D8               	btfsc	status,0,c
  4675  0127F2  2BCB               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4676  0127F4                     l10326:
  4677                           
  4678                           ; BSR set to: 0
  4679  0127F4  C0CA  F0C4         	movff	___awdiv@quotient,?___awdiv
  4680  0127F8  C0CB  F0C5         	movff	___awdiv@quotient+1,?___awdiv+1
  4681  0127FC  0012               	return	
  4682  0127FE                     __end_of___awdiv:
  4683                           	opt stack 0
  4684                           tosu	equ	0xFFF
  4685                           tosh	equ	0xFFE
  4686                           tosl	equ	0xFFD
  4687                           pclath	equ	0xFFA
  4688                           tblptru	equ	0xFF8
  4689                           tblptrh	equ	0xFF7
  4690                           tblptrl	equ	0xFF6
  4691                           tablat	equ	0xFF5
  4692                           prodh	equ	0xFF4
  4693                           prodl	equ	0xFF3
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           postdec1	equ	0xFE5
  4697                           fsr1h	equ	0xFE2
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _Console_IncrementCursor *****************
  4707 ;; Defined at:
  4708 ;;		line 243 in file "Library/Console.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      unsigned char 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;Total ram usage:        2 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    8
  4729 ;; This function calls:
  4730 ;;		_Console_FormFeed
  4731 ;;		_Console_NewLine
  4732 ;; This function is called by:
  4733 ;;		_Console_Tab
  4734 ;;		_Console_PrintChar
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           	psect	text14
  4739  013898                     __ptext14:
  4740                           	opt stack 0
  4741  013898                     _Console_IncrementCursor:
  4742                           	opt stack 16
  4743                           
  4744                           ;Console.c: 246: lBufferX += 1;
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;incstack = 0
  4748  013898  2A37               	incf	_lBufferX,f,c
  4749                           
  4750                           ;Console.c: 248: gCursor.x += 6;
  4751  01389A  0E06               	movlw	6
  4752  01389C  263F               	addwf	_gCursor,f,c
  4753  01389E  0E00               	movlw	0
  4754  0138A0  2240               	addwfc	_gCursor+1,f,c
  4755                           
  4756                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  4757  0138A2  0E06               	movlw	6
  4758  0138A4  243F               	addwf	_gCursor,w,c
  4759  0138A6  0100               	movlb	0	; () banked
  4760  0138A8  6FC8               	movwf	??_Console_IncrementCursor& (0+255),b
  4761  0138AA  0E00               	movlw	0
  4762  0138AC  2040               	addwfc	_gCursor+1,w,c
  4763  0138AE  0100               	movlb	0	; () banked
  4764  0138B0  6FC9               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4765  0138B2  0100               	movlb	0	; () banked
  4766  0138B4  BFC9               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4767  0138B6  D009               	goto	l10244
  4768  0138B8  0100               	movlb	0	; () banked
  4769  0138BA  51C9               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4770  0138BC  E104               	bnz	u6650
  4771  0138BE  0E80               	movlw	128
  4772  0138C0  0100               	movlb	0	; () banked
  4773  0138C2  5DC8               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4774  0138C4  B0D8               	btfsc	status,0,c
  4775  0138C6                     u6650:
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;Console.c: 250: Console_NewLine();
  4779  0138C6  EC44  F098         	call	_Console_NewLine	;wreg free
  4780  0138CA                     l10244:
  4781                           
  4782                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  4783  0138CA  0E08               	movlw	8
  4784  0138CC  2441               	addwf	_gCursor+2,w,c
  4785  0138CE  0100               	movlb	0	; () banked
  4786  0138D0  6FC8               	movwf	??_Console_IncrementCursor& (0+255),b
  4787  0138D2  0E00               	movlw	0
  4788  0138D4  2042               	addwfc	_gCursor+3,w,c
  4789  0138D6  0100               	movlb	0	; () banked
  4790  0138D8  6FC9               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4791  0138DA  0100               	movlb	0	; () banked
  4792  0138DC  BFC9               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4793  0138DE  D00C               	goto	l10252
  4794  0138E0  0100               	movlb	0	; () banked
  4795  0138E2  51C9               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4796  0138E4  E105               	bnz	u6660
  4797  0138E6  0E80               	movlw	128
  4798  0138E8  0100               	movlb	0	; () banked
  4799  0138EA  5DC8               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4800  0138EC  A0D8               	btfss	status,0,c
  4801  0138EE  D004               	goto	l10252
  4802  0138F0                     u6660:
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;Console.c: 252: {
  4806                           ;Console.c: 253: Console_FormFeed();
  4807  0138F0  ECD5  F098         	call	_Console_FormFeed	;wreg free
  4808                           
  4809                           ;Console.c: 254: return 1;
  4810  0138F4  0E01               	movlw	1
  4811  0138F6  0012               	return	
  4812  0138F8                     l10252:
  4813                           
  4814                           ;Console.c: 255: }
  4815                           ;Console.c: 257: return 0;
  4816  0138F8  0E00               	movlw	0
  4817  0138FA  0012               	return	
  4818  0138FC                     __end_of_Console_IncrementCursor:
  4819                           	opt stack 0
  4820                           tosu	equ	0xFFF
  4821                           tosh	equ	0xFFE
  4822                           tosl	equ	0xFFD
  4823                           pclath	equ	0xFFA
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           postinc0	equ	0xFEE
  4831                           wreg	equ	0xFE8
  4832                           postdec1	equ	0xFE5
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _Console_NewLine *****************
  4843 ;; Defined at:
  4844 ;;		line 175 in file "Library/Console.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;		None
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;		None
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        2 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    7
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		_Console_IncrementCursor
  4869 ;;		_Console_PrintChar
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text15
  4874  013088                     __ptext15:
  4875                           	opt stack 0
  4876  013088                     _Console_NewLine:
  4877                           	opt stack 16
  4878                           
  4879                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  4880                           
  4881                           ;incstack = 0
  4882  013088  D039               	goto	l10150
  4883  01308A                     l10142:
  4884                           
  4885                           ;Console.c: 179: {
  4886                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  4887  01308A  5036               	movf	_lBufferY,w,c
  4888  01308C  0D14               	mullw	20
  4889  01308E  0E16               	movlw	low _lBuffer
  4890  013090  0100               	movlb	0	; () banked
  4891  013092  6FC4               	movwf	??_Console_NewLine& (0+255),b
  4892  013094  0E02               	movlw	high _lBuffer
  4893  013096  0100               	movlb	0	; () banked
  4894  013098  6FC5               	movwf	(??_Console_NewLine+1)& (0+255),b
  4895  01309A  50F3               	movf	prodl,w,c
  4896  01309C  0100               	movlb	0	; () banked
  4897  01309E  27C4               	addwf	??_Console_NewLine& (0+255),f,b
  4898  0130A0  50F4               	movf	prodh,w,c
  4899  0130A2  0100               	movlb	0	; () banked
  4900  0130A4  23C5               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4901  0130A6  5037               	movf	_lBufferX,w,c
  4902  0130A8  0D01               	mullw	1
  4903  0130AA  50F3               	movf	prodl,w,c
  4904  0130AC  0100               	movlb	0	; () banked
  4905  0130AE  25C4               	addwf	??_Console_NewLine& (0+255),w,b
  4906  0130B0  6ED9               	movwf	fsr2l,c
  4907  0130B2  50F4               	movf	prodh,w,c
  4908  0130B4  0100               	movlb	0	; () banked
  4909  0130B6  21C5               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4910  0130B8  6EDA               	movwf	fsr2h,c
  4911  0130BA  50DF               	movf	indf2,w,c
  4912  0130BC  B4D8               	btfsc	status,2,c
  4913  0130BE  D01D               	goto	l10148
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  4917  0130C0  0E01               	movlw	1
  4918  0130C2  0100               	movlb	0	; () banked
  4919  0130C4  6FFF               	movwf	_change& (0+255),b
  4920                           
  4921                           ; BSR set to: 0
  4922  0130C6  5036               	movf	_lBufferY,w,c
  4923  0130C8  0D14               	mullw	20
  4924  0130CA  0E16               	movlw	low _lBuffer
  4925  0130CC  0100               	movlb	0	; () banked
  4926  0130CE  6FC4               	movwf	??_Console_NewLine& (0+255),b
  4927  0130D0  0E02               	movlw	high _lBuffer
  4928  0130D2  0100               	movlb	0	; () banked
  4929  0130D4  6FC5               	movwf	(??_Console_NewLine+1)& (0+255),b
  4930  0130D6  50F3               	movf	prodl,w,c
  4931  0130D8  0100               	movlb	0	; () banked
  4932  0130DA  27C4               	addwf	??_Console_NewLine& (0+255),f,b
  4933  0130DC  50F4               	movf	prodh,w,c
  4934  0130DE  0100               	movlb	0	; () banked
  4935  0130E0  23C5               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4936  0130E2  5037               	movf	_lBufferX,w,c
  4937  0130E4  0D01               	mullw	1
  4938  0130E6  50F3               	movf	prodl,w,c
  4939  0130E8  0100               	movlb	0	; () banked
  4940  0130EA  25C4               	addwf	??_Console_NewLine& (0+255),w,b
  4941  0130EC  6ED9               	movwf	fsr2l,c
  4942  0130EE  50F4               	movf	prodh,w,c
  4943  0130F0  0100               	movlb	0	; () banked
  4944  0130F2  21C5               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4945  0130F4  6EDA               	movwf	fsr2h,c
  4946  0130F6  0E80               	movlw	128
  4947  0130F8  6EDF               	movwf	indf2,c
  4948  0130FA                     l10148:
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;Console.c: 182: lBufferX ++;
  4952  0130FA  2A37               	incf	_lBufferX,f,c
  4953  0130FC                     l10150:
  4954  0130FC  0E13               	movlw	19
  4955  0130FE  6437               	cpfsgt	_lBufferX,c
  4956  013100  D7C4               	goto	l10142
  4957                           
  4958                           ;Console.c: 183: }
  4959                           ;Console.c: 185: lBufferX = 0;
  4960  013102  0E00               	movlw	0
  4961  013104  6E37               	movwf	_lBufferX,c
  4962                           
  4963                           ;Console.c: 186: lBufferY ++;
  4964  013106  2A36               	incf	_lBufferY,f,c
  4965                           
  4966                           ;Console.c: 188: gCursor.y += 8;
  4967  013108  0E08               	movlw	8
  4968  01310A  2641               	addwf	_gCursor+2,f,c
  4969  01310C  0E00               	movlw	0
  4970  01310E  2242               	addwfc	_gCursor+3,f,c
  4971                           
  4972                           ;Console.c: 189: gCursor.x = 6;
  4973  013110  0E00               	movlw	0
  4974  013112  6E40               	movwf	_gCursor+1,c
  4975  013114  0E06               	movlw	6
  4976  013116  6E3F               	movwf	_gCursor,c
  4977  013118  0012               	return		;funcret
  4978  01311A                     __end_of_Console_NewLine:
  4979                           	opt stack 0
  4980                           tosu	equ	0xFFF
  4981                           tosh	equ	0xFFE
  4982                           tosl	equ	0xFFD
  4983                           pclath	equ	0xFFA
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           postdec1	equ	0xFE5
  4993                           fsr1h	equ	0xFE2
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function _Console_FormFeed *****************
  5003 ;; Defined at:
  5004 ;;		line 192 in file "Library/Console.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  y               1    3[BANK0 ] unsigned char 
  5009 ;;  x               1    2[BANK0 ] unsigned char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      void 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;Total ram usage:        4 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    7
  5026 ;; This function calls:
  5027 ;;		Nothing
  5028 ;; This function is called by:
  5029 ;;		_Console_IncrementCursor
  5030 ;;		_Console_PrintChar
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text16
  5035  0131AA                     __ptext16:
  5036                           	opt stack 0
  5037  0131AA                     _Console_FormFeed:
  5038                           	opt stack 16
  5039                           
  5040                           ;Console.c: 195: lBufferX = 0;
  5041                           
  5042                           ;incstack = 0
  5043  0131AA  0E00               	movlw	0
  5044  0131AC  6E37               	movwf	_lBufferX,c
  5045                           
  5046                           ;Console.c: 196: lBufferY = 0;
  5047  0131AE  0E00               	movlw	0
  5048  0131B0  6E36               	movwf	_lBufferY,c
  5049                           
  5050                           ;Console.c: 197: UINT8 x, y;
  5051                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5052  0131B2  0E00               	movlw	0
  5053  0131B4  0100               	movlb	0	; () banked
  5054  0131B6  6FC7               	movwf	Console_FormFeed@y& (0+255),b
  5055  0131B8                     l10162:
  5056                           
  5057                           ; BSR set to: 0
  5058  0131B8  0E0E               	movlw	14
  5059  0131BA  0100               	movlb	0	; () banked
  5060  0131BC  65C7               	cpfsgt	Console_FormFeed@y& (0+255),b
  5061  0131BE  D001               	goto	l10166
  5062  0131C0  D02D               	goto	l10184
  5063  0131C2                     l10166:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5067  0131C2  0E00               	movlw	0
  5068  0131C4  0100               	movlb	0	; () banked
  5069  0131C6  6FC6               	movwf	Console_FormFeed@x& (0+255),b
  5070  0131C8                     l10168:
  5071                           
  5072                           ; BSR set to: 0
  5073  0131C8  0E13               	movlw	19
  5074  0131CA  0100               	movlb	0	; () banked
  5075  0131CC  65C6               	cpfsgt	Console_FormFeed@x& (0+255),b
  5076  0131CE  D001               	goto	l10172
  5077  0131D0  D022               	goto	l10180
  5078  0131D2                     l10172:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5082  0131D2  0E01               	movlw	1
  5083  0131D4  0100               	movlb	0	; () banked
  5084  0131D6  6FFF               	movwf	_change& (0+255),b
  5085                           
  5086                           ; BSR set to: 0
  5087  0131D8  0100               	movlb	0	; () banked
  5088  0131DA  51C7               	movf	Console_FormFeed@y& (0+255),w,b
  5089  0131DC  0D14               	mullw	20
  5090  0131DE  0E16               	movlw	low _lBuffer
  5091  0131E0  0100               	movlb	0	; () banked
  5092  0131E2  6FC4               	movwf	??_Console_FormFeed& (0+255),b
  5093  0131E4  0E02               	movlw	high _lBuffer
  5094  0131E6  0100               	movlb	0	; () banked
  5095  0131E8  6FC5               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5096  0131EA  50F3               	movf	prodl,w,c
  5097  0131EC  0100               	movlb	0	; () banked
  5098  0131EE  27C4               	addwf	??_Console_FormFeed& (0+255),f,b
  5099  0131F0  50F4               	movf	prodh,w,c
  5100  0131F2  0100               	movlb	0	; () banked
  5101  0131F4  23C5               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5102  0131F6  0100               	movlb	0	; () banked
  5103  0131F8  51C6               	movf	Console_FormFeed@x& (0+255),w,b
  5104  0131FA  0D01               	mullw	1
  5105  0131FC  50F3               	movf	prodl,w,c
  5106  0131FE  0100               	movlb	0	; () banked
  5107  013200  25C4               	addwf	??_Console_FormFeed& (0+255),w,b
  5108  013202  6ED9               	movwf	fsr2l,c
  5109  013204  50F4               	movf	prodh,w,c
  5110  013206  0100               	movlb	0	; () banked
  5111  013208  21C5               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5112  01320A  6EDA               	movwf	fsr2h,c
  5113  01320C  0E80               	movlw	128
  5114  01320E  6EDF               	movwf	indf2,c
  5115                           
  5116                           ; BSR set to: 0
  5117  013210  0100               	movlb	0	; () banked
  5118  013212  2BC6               	incf	Console_FormFeed@x& (0+255),f,b
  5119  013214  D7D9               	goto	l10168
  5120  013216                     l10180:
  5121                           
  5122                           ; BSR set to: 0
  5123  013216  0100               	movlb	0	; () banked
  5124  013218  2BC7               	incf	Console_FormFeed@y& (0+255),f,b
  5125  01321A  D7CE               	goto	l10162
  5126  01321C                     l10184:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;Console.c: 204: clearall = 1;
  5130  01321C  0E01               	movlw	1
  5131  01321E  0100               	movlb	0	; () banked
  5132  013220  6F7D               	movwf	_clearall& (0+255),b
  5133                           
  5134                           ;Console.c: 205: gCursor.x = 6;
  5135  013222  0E00               	movlw	0
  5136  013224  6E40               	movwf	_gCursor+1,c
  5137  013226  0E06               	movlw	6
  5138  013228  6E3F               	movwf	_gCursor,c
  5139                           
  5140                           ;Console.c: 206: gCursor.y = 6;
  5141  01322A  0E00               	movlw	0
  5142  01322C  6E42               	movwf	_gCursor+3,c
  5143  01322E  0E06               	movlw	6
  5144  013230  6E41               	movwf	_gCursor+2,c
  5145                           
  5146                           ; BSR set to: 0
  5147  013232  0012               	return		;funcret
  5148  013234                     __end_of_Console_FormFeed:
  5149                           	opt stack 0
  5150                           tosu	equ	0xFFF
  5151                           tosh	equ	0xFFE
  5152                           tosl	equ	0xFFD
  5153                           pclath	equ	0xFFA
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           postinc0	equ	0xFEE
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           fsr1h	equ	0xFE2
  5164                           fsr1l	equ	0xFE1
  5165                           indf2	equ	0xFDF
  5166                           postinc2	equ	0xFDE
  5167                           postdec2	equ	0xFDD
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _Console_ResetCursor *****************
  5173 ;; Defined at:
  5174 ;;		line 297 in file "Library/Console.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;		None
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:        0 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    7
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_Console_PrintChar
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text17
  5203  0144B6                     __ptext17:
  5204                           	opt stack 0
  5205  0144B6                     _Console_ResetCursor:
  5206                           	opt stack 18
  5207                           
  5208                           ;Console.c: 299: gCursor.x = 6;
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;incstack = 0
  5212  0144B6  0E00               	movlw	0
  5213  0144B8  6E40               	movwf	_gCursor+1,c
  5214  0144BA  0E06               	movlw	6
  5215  0144BC  6E3F               	movwf	_gCursor,c
  5216                           
  5217                           ;Console.c: 300: gCursor.y = 6;
  5218  0144BE  0E00               	movlw	0
  5219  0144C0  6E42               	movwf	_gCursor+3,c
  5220  0144C2  0E06               	movlw	6
  5221  0144C4  6E41               	movwf	_gCursor+2,c
  5222                           
  5223                           ;Console.c: 303: lBufferX = 0;
  5224  0144C6  0E00               	movlw	0
  5225  0144C8  6E37               	movwf	_lBufferX,c
  5226                           
  5227                           ;Console.c: 304: lBufferY = 0;
  5228  0144CA  0E00               	movlw	0
  5229  0144CC  6E36               	movwf	_lBufferY,c
  5230  0144CE  0012               	return		;funcret
  5231  0144D0                     __end_of_Console_ResetCursor:
  5232                           	opt stack 0
  5233                           tosu	equ	0xFFF
  5234                           tosh	equ	0xFFE
  5235                           tosl	equ	0xFFD
  5236                           pclath	equ	0xFFA
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           prodh	equ	0xFF4
  5242                           prodl	equ	0xFF3
  5243                           postinc0	equ	0xFEE
  5244                           wreg	equ	0xFE8
  5245                           postdec1	equ	0xFE5
  5246                           fsr1h	equ	0xFE2
  5247                           fsr1l	equ	0xFE1
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255 ;; *************** function _Console_Backspace *****************
  5256 ;; Defined at:
  5257 ;;		line 209 in file "Library/Console.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      void 
  5264 ;; Registers used:
  5265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;Total ram usage:        0 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    8
  5278 ;; This function calls:
  5279 ;;		_Console_ClearCursor
  5280 ;; This function is called by:
  5281 ;;		_Console_PrintChar
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text18
  5286  013C70                     __ptext18:
  5287                           	opt stack 0
  5288  013C70                     _Console_Backspace:
  5289                           	opt stack 17
  5290                           
  5291                           ;Console.c: 211: if (lBufferX > 0)
  5292                           
  5293                           ;incstack = 0
  5294  013C70  5037               	movf	_lBufferX,w,c
  5295  013C72  B4D8               	btfsc	status,2,c
  5296  013C74  D006               	goto	l10396
  5297                           
  5298                           ;Console.c: 212: {
  5299                           ;Console.c: 213: gCursor.x -= 6;
  5300  013C76  0EFA               	movlw	250
  5301  013C78  263F               	addwf	_gCursor,f,c
  5302  013C7A  0EFF               	movlw	255
  5303  013C7C  2240               	addwfc	_gCursor+1,f,c
  5304                           
  5305                           ;Console.c: 216: lBufferX --;
  5306  013C7E  0637               	decf	_lBufferX,f,c
  5307                           
  5308                           ;Console.c: 218: }
  5309  013C80  D01B               	goto	l10408
  5310  013C82                     l10396:
  5311                           
  5312                           ;Console.c: 219: else if (lBufferY > 0)
  5313  013C82  5036               	movf	_lBufferY,w,c
  5314  013C84  B4D8               	btfsc	status,2,c
  5315  013C86  D00C               	goto	l10406
  5316                           
  5317                           ;Console.c: 220: {
  5318                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5319  013C88  0E00               	movlw	0
  5320  013C8A  6E40               	movwf	_gCursor+1,c
  5321  013C8C  0E72               	movlw	114
  5322  013C8E  6E3F               	movwf	_gCursor,c
  5323                           
  5324                           ;Console.c: 222: gCursor.y -= 8;
  5325  013C90  0EF8               	movlw	248
  5326  013C92  2641               	addwf	_gCursor+2,f,c
  5327  013C94  0EFF               	movlw	255
  5328  013C96  2242               	addwfc	_gCursor+3,f,c
  5329                           
  5330                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5331  013C98  0E13               	movlw	19
  5332  013C9A  6E37               	movwf	_lBufferX,c
  5333                           
  5334                           ;Console.c: 226: lBufferY --;
  5335  013C9C  0636               	decf	_lBufferY,f,c
  5336                           
  5337                           ;Console.c: 228: }
  5338  013C9E  D00C               	goto	l10408
  5339  013CA0                     l10406:
  5340                           
  5341                           ;Console.c: 229: else
  5342                           ;Console.c: 230: {
  5343                           ;Console.c: 231: gCursor.x = 6;
  5344  013CA0  0E00               	movlw	0
  5345  013CA2  6E40               	movwf	_gCursor+1,c
  5346  013CA4  0E06               	movlw	6
  5347  013CA6  6E3F               	movwf	_gCursor,c
  5348                           
  5349                           ;Console.c: 232: gCursor.y = 6;
  5350  013CA8  0E00               	movlw	0
  5351  013CAA  6E42               	movwf	_gCursor+3,c
  5352  013CAC  0E06               	movlw	6
  5353  013CAE  6E41               	movwf	_gCursor+2,c
  5354                           
  5355                           ;Console.c: 235: lBufferX = 0;
  5356  013CB0  0E00               	movlw	0
  5357  013CB2  6E37               	movwf	_lBufferX,c
  5358                           
  5359                           ;Console.c: 236: lBufferY = 0;
  5360  013CB4  0E00               	movlw	0
  5361  013CB6  6E36               	movwf	_lBufferY,c
  5362  013CB8                     l10408:
  5363                           
  5364                           ;Console.c: 238: }
  5365                           ;Console.c: 240: Console_ClearCursor();
  5366  013CB8  ECD9  F09F         	call	_Console_ClearCursor	;wreg free
  5367  013CBC  0012               	return		;funcret
  5368  013CBE                     __end_of_Console_Backspace:
  5369                           	opt stack 0
  5370                           tosu	equ	0xFFF
  5371                           tosh	equ	0xFFE
  5372                           tosl	equ	0xFFD
  5373                           pclath	equ	0xFFA
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           prodh	equ	0xFF4
  5379                           prodl	equ	0xFF3
  5380                           postinc0	equ	0xFEE
  5381                           wreg	equ	0xFE8
  5382                           postdec1	equ	0xFE5
  5383                           fsr1h	equ	0xFE2
  5384                           fsr1l	equ	0xFE1
  5385                           indf2	equ	0xFDF
  5386                           postinc2	equ	0xFDE
  5387                           postdec2	equ	0xFDD
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _Console_ClearCursor *****************
  5393 ;; Defined at:
  5394 ;;		line 308 in file "Library/Console.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;		None
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;		None
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      void 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;Total ram usage:        2 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    7
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_Console_Backspace
  5419 ;;		_Console_Tab
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text19
  5424  013FB2                     __ptext19:
  5425                           	opt stack 0
  5426  013FB2                     _Console_ClearCursor:
  5427                           	opt stack 17
  5428                           
  5429                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5430                           
  5431                           ;incstack = 0
  5432  013FB2  0E01               	movlw	1
  5433  013FB4  0100               	movlb	0	; () banked
  5434  013FB6  6FFF               	movwf	_change& (0+255),b
  5435                           
  5436                           ; BSR set to: 0
  5437  013FB8  5036               	movf	_lBufferY,w,c
  5438  013FBA  0D14               	mullw	20
  5439  013FBC  0E16               	movlw	low _lBuffer
  5440  013FBE  0100               	movlb	0	; () banked
  5441  013FC0  6FC4               	movwf	??_Console_ClearCursor& (0+255),b
  5442  013FC2  0E02               	movlw	high _lBuffer
  5443  013FC4  0100               	movlb	0	; () banked
  5444  013FC6  6FC5               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5445  013FC8  50F3               	movf	prodl,w,c
  5446  013FCA  0100               	movlb	0	; () banked
  5447  013FCC  27C4               	addwf	??_Console_ClearCursor& (0+255),f,b
  5448  013FCE  50F4               	movf	prodh,w,c
  5449  013FD0  0100               	movlb	0	; () banked
  5450  013FD2  23C5               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5451  013FD4  5037               	movf	_lBufferX,w,c
  5452  013FD6  0D01               	mullw	1
  5453  013FD8  50F3               	movf	prodl,w,c
  5454  013FDA  0100               	movlb	0	; () banked
  5455  013FDC  25C4               	addwf	??_Console_ClearCursor& (0+255),w,b
  5456  013FDE  6ED9               	movwf	fsr2l,c
  5457  013FE0  50F4               	movf	prodh,w,c
  5458  013FE2  0100               	movlb	0	; () banked
  5459  013FE4  21C5               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5460  013FE6  6EDA               	movwf	fsr2h,c
  5461  013FE8  0E80               	movlw	128
  5462  013FEA  6EDF               	movwf	indf2,c
  5463                           
  5464                           ; BSR set to: 0
  5465  013FEC  0012               	return		;funcret
  5466  013FEE                     __end_of_Console_ClearCursor:
  5467                           	opt stack 0
  5468                           tosu	equ	0xFFF
  5469                           tosh	equ	0xFFE
  5470                           tosl	equ	0xFFD
  5471                           pclath	equ	0xFFA
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           postinc0	equ	0xFEE
  5479                           wreg	equ	0xFE8
  5480                           postdec1	equ	0xFE5
  5481                           fsr1h	equ	0xFE2
  5482                           fsr1l	equ	0xFE1
  5483                           indf2	equ	0xFDF
  5484                           postinc2	equ	0xFDE
  5485                           postdec2	equ	0xFDD
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _getMode *****************
  5491 ;; Defined at:
  5492 ;;		line 94 in file "main.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  dipState        2   40[BANK0 ] int 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  2   36[BANK0 ] int 
  5499 ;; Registers used:
  5500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5506 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;Total ram usage:        6 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:   16
  5513 ;; This function calls:
  5514 ;;		_HMI_DIPSwitch
  5515 ;;		_HMI_DownSwitch
  5516 ;;		_HMI_LeftSwitch
  5517 ;;		_HMI_Poll
  5518 ;;		_HMI_RightSwitch
  5519 ;;		_HMI_UpSwitch
  5520 ;;		_MXK_DIPSwitch
  5521 ;;		_MXK_TestButton
  5522 ;; This function is called by:
  5523 ;;		_displayMode
  5524 ;;		_continuousMode
  5525 ;;		_setMode
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text20
  5530  013234                     __ptext20:
  5531                           	opt stack 0
  5532  013234                     _getMode:
  5533                           	opt stack 10
  5534                           
  5535                           ;main.c: 95: HMI_Poll();
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;incstack = 0
  5539  013234  EC05  F09B         	call	_HMI_Poll	;wreg free
  5540                           
  5541                           ;main.c: 96: int dipState = HMIBoard.mDIP.mGetState();
  5542  013238  EE21  F0A7         	lfsr	2,_HMIBoard+55
  5543  01323C  D801               	call	u7498
  5544  01323E  D00A               	goto	u7499
  5545  013240                     u7498:
  5546  013240  0005               	push	
  5547  013242  6EFA               	movwf	pclath,c
  5548  013244  50DE               	movf	postinc2,w,c
  5549  013246  6EFD               	movwf	tosl,c
  5550  013248  50DE               	movf	postinc2,w,c
  5551  01324A  6EFE               	movwf	tosh,c
  5552  01324C  50DE               	movf	postinc2,w,c
  5553  01324E  6EFF               	movwf	tosu,c
  5554  013250  50FA               	movf	pclath,w,c
  5555  013252  0012               	return		;indir
  5556  013254                     u7499:
  5557  013254  0100               	movlb	0	; () banked
  5558  013256  6FEA               	movwf	??_getMode& (0+255),b
  5559  013258  0100               	movlb	0	; () banked
  5560  01325A  51EA               	movf	??_getMode& (0+255),w,b
  5561  01325C  0100               	movlb	0	; () banked
  5562  01325E  6FEC               	movwf	getMode@dipState& (0+255),b
  5563  013260  6BED               	clrf	(getMode@dipState+1)& (0+255),b
  5564                           
  5565                           ;main.c: 97: switch (dipState) {
  5566  013262  D018               	goto	l11022
  5567  013264                     l11004:
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;main.c: 99: return 3;
  5571  013264  0E00               	movlw	0
  5572  013266  0100               	movlb	0	; () banked
  5573  013268  6FE9               	movwf	(?_getMode+1)& (0+255),b
  5574  01326A  0E03               	movlw	3
  5575  01326C  6FE8               	movwf	?_getMode& (0+255),b
  5576                           
  5577                           ; BSR set to: 0
  5578  01326E  0012               	return	
  5579  013270                     l11008:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;main.c: 101: return 2;
  5583  013270  0E00               	movlw	0
  5584  013272  0100               	movlb	0	; () banked
  5585  013274  6FE9               	movwf	(?_getMode+1)& (0+255),b
  5586  013276  0E02               	movlw	2
  5587  013278  6FE8               	movwf	?_getMode& (0+255),b
  5588                           
  5589                           ; BSR set to: 0
  5590  01327A  0012               	return	
  5591  01327C                     l11012:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;main.c: 103: return 1;
  5595  01327C  0E00               	movlw	0
  5596  01327E  0100               	movlb	0	; () banked
  5597  013280  6FE9               	movwf	(?_getMode+1)& (0+255),b
  5598  013282  0E01               	movlw	1
  5599  013284  6FE8               	movwf	?_getMode& (0+255),b
  5600                           
  5601                           ; BSR set to: 0
  5602  013286  0012               	return	
  5603  013288                     l11016:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;main.c: 105: return 0;
  5607  013288  0E00               	movlw	0
  5608  01328A  0100               	movlb	0	; () banked
  5609  01328C  6FE9               	movwf	(?_getMode+1)& (0+255),b
  5610  01328E  0E00               	movlw	0
  5611  013290  6FE8               	movwf	?_getMode& (0+255),b
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;main.c: 106: }
  5615                           
  5616                           ; BSR set to: 0
  5617  013292  0012               	return	
  5618  013294                     l11022:
  5619                           
  5620                           ; BSR set to: 0
  5621  013294  C0EC  F0EA         	movff	getMode@dipState,??_getMode
  5622  013298  C0ED  F0EB         	movff	getMode@dipState+1,??_getMode+1
  5623                           
  5624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5625                           ; Switch size 1, requested type "space"
  5626                           ; Number of cases is 1, Range of values is 0 to 0
  5627                           ; switch strategies available:
  5628                           ; Name         Instructions Cycles
  5629                           ; simple_byte            4     3 (average)
  5630                           ;	Chosen strategy is simple_byte
  5631  01329C  0100               	movlb	0	; () banked
  5632  01329E  51EB               	movf	(??_getMode+1)& (0+255),w,b
  5633  0132A0  0A00               	xorlw	0	; case 0
  5634  0132A2  A4D8               	btfss	status,2,c
  5635  0132A4  D7F1               	goto	l11016
  5636                           
  5637                           ; BSR set to: 0
  5638                           ; Switch size 1, requested type "space"
  5639                           ; Number of cases is 3, Range of values is 2 to 8
  5640                           ; switch strategies available:
  5641                           ; Name         Instructions Cycles
  5642                           ; simple_byte           10     6 (average)
  5643                           ;	Chosen strategy is simple_byte
  5644  0132A6  0100               	movlb	0	; () banked
  5645  0132A8  51EA               	movf	??_getMode& (0+255),w,b
  5646  0132AA  0A02               	xorlw	2	; case 2
  5647  0132AC  B4D8               	btfsc	status,2,c
  5648  0132AE  D7DA               	goto	l11004
  5649  0132B0  0A06               	xorlw	6	; case 4
  5650  0132B2  B4D8               	btfsc	status,2,c
  5651  0132B4  D7DD               	goto	l11008
  5652  0132B6  0A0C               	xorlw	12	; case 8
  5653  0132B8  B4D8               	btfsc	status,2,c
  5654  0132BA  D7E0               	goto	l11012
  5655  0132BC  D7E5               	goto	l11016
  5656  0132BE                     __end_of_getMode:
  5657                           	opt stack 0
  5658                           tosu	equ	0xFFF
  5659                           tosh	equ	0xFFE
  5660                           tosl	equ	0xFFD
  5661                           pclath	equ	0xFFA
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           fsr1h	equ	0xFE2
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _HMI_Poll *****************
  5681 ;; Defined at:
  5682 ;;		line 252 in file "HMI.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        0 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:   15
  5703 ;; This function calls:
  5704 ;;		_Button_Poll
  5705 ;; This function is called by:
  5706 ;;		_getMode
  5707 ;;		_continuousMode
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text21
  5712  01360A                     __ptext21:
  5713                           	opt stack 0
  5714  01360A                     _HMI_Poll:
  5715                           	opt stack 10
  5716                           
  5717                           ;HMI.c: 254: TRISE = 0xFF;
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;incstack = 0
  5721  01360A  6896               	setf	3990,c	;volatile
  5722                           
  5723                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  5724  01360C  0EA0               	movlw	low (_HMIBoard+48)
  5725  01360E  0100               	movlb	0	; () banked
  5726  013610  6FDF               	movwf	Button_Poll@pButton& (0+255),b
  5727  013612  0E01               	movlw	high (_HMIBoard+48)
  5728  013614  0100               	movlb	0	; () banked
  5729  013616  6FE0               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5730  013618  0E01               	movlw	1
  5731  01361A  0100               	movlb	0	; () banked
  5732  01361C  6FE1               	movwf	Button_Poll@pIncrement& (0+255),b
  5733  01361E  EC32  F08F         	call	_Button_Poll	;wreg free
  5734                           
  5735                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  5736  013622  0E82               	movlw	low (_HMIBoard+18)
  5737  013624  0100               	movlb	0	; () banked
  5738  013626  6FDF               	movwf	Button_Poll@pButton& (0+255),b
  5739  013628  0E01               	movlw	high (_HMIBoard+18)
  5740  01362A  0100               	movlb	0	; () banked
  5741  01362C  6FE0               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5742  01362E  0E01               	movlw	1
  5743  013630  0100               	movlb	0	; () banked
  5744  013632  6FE1               	movwf	Button_Poll@pIncrement& (0+255),b
  5745  013634  EC32  F08F         	call	_Button_Poll	;wreg free
  5746                           
  5747                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  5748  013638  0E78               	movlw	low (_HMIBoard+8)
  5749  01363A  0100               	movlb	0	; () banked
  5750  01363C  6FDF               	movwf	Button_Poll@pButton& (0+255),b
  5751  01363E  0E01               	movlw	high (_HMIBoard+8)
  5752  013640  0100               	movlb	0	; () banked
  5753  013642  6FE0               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5754  013644  0E01               	movlw	1
  5755  013646  0100               	movlb	0	; () banked
  5756  013648  6FE1               	movwf	Button_Poll@pIncrement& (0+255),b
  5757  01364A  EC32  F08F         	call	_Button_Poll	;wreg free
  5758                           
  5759                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  5760  01364E  0E8C               	movlw	low (_HMIBoard+28)
  5761  013650  0100               	movlb	0	; () banked
  5762  013652  6FDF               	movwf	Button_Poll@pButton& (0+255),b
  5763  013654  0E01               	movlw	high (_HMIBoard+28)
  5764  013656  0100               	movlb	0	; () banked
  5765  013658  6FE0               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5766  01365A  0E01               	movlw	1
  5767  01365C  0100               	movlb	0	; () banked
  5768  01365E  6FE1               	movwf	Button_Poll@pIncrement& (0+255),b
  5769  013660  EC32  F08F         	call	_Button_Poll	;wreg free
  5770                           
  5771                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  5772  013664  0E96               	movlw	low (_HMIBoard+38)
  5773  013666  0100               	movlb	0	; () banked
  5774  013668  6FDF               	movwf	Button_Poll@pButton& (0+255),b
  5775  01366A  0E01               	movlw	high (_HMIBoard+38)
  5776  01366C  0100               	movlb	0	; () banked
  5777  01366E  6FE0               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5778  013670  0E01               	movlw	1
  5779  013672  0100               	movlb	0	; () banked
  5780  013674  6FE1               	movwf	Button_Poll@pIncrement& (0+255),b
  5781  013676  EC32  F08F         	call	_Button_Poll	;wreg free
  5782  01367A  0012               	return		;funcret
  5783  01367C                     __end_of_HMI_Poll:
  5784                           	opt stack 0
  5785                           tosu	equ	0xFFF
  5786                           tosh	equ	0xFFE
  5787                           tosl	equ	0xFFD
  5788                           pclath	equ	0xFFA
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           postinc0	equ	0xFEE
  5796                           wreg	equ	0xFE8
  5797                           postdec1	equ	0xFE5
  5798                           fsr1h	equ	0xFE2
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _Button_Poll *****************
  5808 ;; Defined at:
  5809 ;;		line 57 in file "Library/Button.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  5812 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  5813 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  Pin             1   35[BANK0 ] unsigned char 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      unsigned char 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;Total ram usage:        9 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:   14
  5832 ;; This function calls:
  5833 ;;		_Event_DIPSwitch
  5834 ;;		_Event_HMI_DIPSwitch
  5835 ;;		_Event_HMI_DownButton
  5836 ;;		_Event_HMI_LeftButton
  5837 ;;		_Event_HMI_RightButton
  5838 ;;		_Event_HMI_UpButton
  5839 ;;		_Event_TestButton
  5840 ;;		_HMI_DIPSwitch
  5841 ;;		_HMI_DownSwitch
  5842 ;;		_HMI_LeftSwitch
  5843 ;;		_HMI_RightSwitch
  5844 ;;		_HMI_UpSwitch
  5845 ;;		_MXK_DIPSwitch
  5846 ;;		_MXK_TestButton
  5847 ;; This function is called by:
  5848 ;;		_HMI_Poll
  5849 ;;		_MXK_Poll
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text22
  5854  011E64                     __ptext22:
  5855                           	opt stack 0
  5856  011E64                     _Button_Poll:
  5857                           	opt stack 10
  5858                           
  5859                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  5860                           
  5861                           ;incstack = 0
  5862  011E64  0100               	movlb	0	; () banked
  5863  011E66  EE20 F007          	lfsr	2,7
  5864  011E6A  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5865  011E6C  26D9               	addwf	fsr2l,f,c
  5866  011E6E  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5867  011E70  22DA               	addwfc	fsr2h,f,c
  5868  011E72  D801               	call	u6988
  5869  011E74  D00A               	goto	u6989
  5870  011E76                     u6988:
  5871  011E76  0005               	push	
  5872  011E78  6EFA               	movwf	pclath,c
  5873  011E7A  50DE               	movf	postinc2,w,c
  5874  011E7C  6EFD               	movwf	tosl,c
  5875  011E7E  50DE               	movf	postinc2,w,c
  5876  011E80  6EFE               	movwf	tosh,c
  5877  011E82  50DE               	movf	postinc2,w,c
  5878  011E84  6EFF               	movwf	tosu,c
  5879  011E86  50FA               	movf	pclath,w,c
  5880  011E88  0012               	return		;indir
  5881  011E8A                     u6989:
  5882  011E8A  0100               	movlb	0	; () banked
  5883  011E8C  6FE7               	movwf	Button_Poll@Pin& (0+255),b
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;Button.c: 61: if (pButton->mState == Pin)
  5887  011E8E  C0DF  FFD9         	movff	Button_Poll@pButton,fsr2l
  5888  011E92  C0E0  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  5889  011E96  0100               	movlb	0	; () banked
  5890  011E98  51E7               	movf	Button_Poll@Pin& (0+255),w,b
  5891  011E9A  18DE               	xorwf	postinc2,w,c
  5892  011E9C  A4D8               	btfss	status,2,c
  5893  011E9E  D021               	goto	l10546
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;Button.c: 62: {
  5897                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  5898  011EA0  0100               	movlb	0	; () banked
  5899  011EA2  EE20 F001          	lfsr	2,1
  5900  011EA6  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5901  011EA8  26D9               	addwf	fsr2l,f,c
  5902  011EAA  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5903  011EAC  22DA               	addwfc	fsr2h,f,c
  5904  011EAE  0100               	movlb	0	; () banked
  5905  011EB0  51E1               	movf	Button_Poll@pIncrement& (0+255),w,b
  5906  011EB2  5CDE               	subwf	postinc2,w,c
  5907  011EB4  B0D8               	btfsc	status,0,c
  5908  011EB6  D00A               	goto	l10544
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;Button.c: 66: pButton->mCount = 0;
  5912  011EB8  0100               	movlb	0	; () banked
  5913  011EBA  EE20 F001          	lfsr	2,1
  5914  011EBE  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5915  011EC0  26D9               	addwf	fsr2l,f,c
  5916  011EC2  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5917  011EC4  22DA               	addwfc	fsr2h,f,c
  5918  011EC6  0E00               	movlw	0
  5919  011EC8  6EDF               	movwf	indf2,c
  5920  011ECA  0012               	return	
  5921  011ECC                     l10544:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;Button.c: 67: else
  5925                           ;Button.c: 68: pButton->mCount -= pIncrement;
  5926  011ECC  0100               	movlb	0	; () banked
  5927  011ECE  EE20 F001          	lfsr	2,1
  5928  011ED2  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5929  011ED4  26D9               	addwf	fsr2l,f,c
  5930  011ED6  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5931  011ED8  22DA               	addwfc	fsr2h,f,c
  5932  011EDA  0100               	movlb	0	; () banked
  5933  011EDC  51E1               	movf	Button_Poll@pIncrement& (0+255),w,b
  5934  011EDE  5EDF               	subwf	indf2,f,c
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;Button.c: 69: }
  5938  011EE0  0012               	return	
  5939  011EE2                     l10546:
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  5943  011EE2  0100               	movlb	0	; () banked
  5944  011EE4  EE20 F001          	lfsr	2,1
  5945  011EE8  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5946  011EEA  26D9               	addwf	fsr2l,f,c
  5947  011EEC  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5948  011EEE  22DA               	addwfc	fsr2h,f,c
  5949  011EF0  50DF               	movf	indf2,w,c
  5950  011EF2  0100               	movlb	0	; () banked
  5951  011EF4  6FE2               	movwf	??_Button_Poll& (0+255),b
  5952  011EF6  6BE3               	clrf	(??_Button_Poll+1)& (0+255),b
  5953  011EF8  0100               	movlb	0	; () banked
  5954  011EFA  51E1               	movf	Button_Poll@pIncrement& (0+255),w,b
  5955  011EFC  0100               	movlb	0	; () banked
  5956  011EFE  27E2               	addwf	??_Button_Poll& (0+255),f,b
  5957  011F00  0E00               	movlw	0
  5958  011F02  23E3               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  5959  011F04  0100               	movlb	0	; () banked
  5960  011F06  EE20 F001          	lfsr	2,1
  5961  011F0A  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5962  011F0C  26D9               	addwf	fsr2l,f,c
  5963  011F0E  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5964  011F10  22DA               	addwfc	fsr2h,f,c
  5965  011F12  50DF               	movf	indf2,w,c
  5966  011F14  0100               	movlb	0	; () banked
  5967  011F16  6FE4               	movwf	(??_Button_Poll+2)& (0+255),b
  5968  011F18  6BE5               	clrf	(??_Button_Poll+3)& (0+255),b
  5969  011F1A  0100               	movlb	0	; () banked
  5970  011F1C  51E2               	movf	??_Button_Poll& (0+255),w,b
  5971  011F1E  0100               	movlb	0	; () banked
  5972  011F20  5DE4               	subwf	(??_Button_Poll+2)& (0+255),w,b
  5973  011F22  0100               	movlb	0	; () banked
  5974  011F24  51E5               	movf	(??_Button_Poll+3)& (0+255),w,b
  5975  011F26  0A80               	xorlw	128
  5976  011F28  0100               	movlb	0	; () banked
  5977  011F2A  6FE6               	movwf	(??_Button_Poll+4)& (0+255),b
  5978  011F2C  0100               	movlb	0	; () banked
  5979  011F2E  51E3               	movf	(??_Button_Poll+1)& (0+255),w,b
  5980  011F30  0A80               	xorlw	128
  5981  011F32  0100               	movlb	0	; () banked
  5982  011F34  59E6               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  5983  011F36  B0D8               	btfsc	status,0,c
  5984  011F38  0012               	return	
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;Button.c: 73: {
  5988                           ;Button.c: 75: pButton->mCount += pIncrement;
  5989  011F3A  0100               	movlb	0	; () banked
  5990  011F3C  EE20 F001          	lfsr	2,1
  5991  011F40  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  5992  011F42  26D9               	addwf	fsr2l,f,c
  5993  011F44  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5994  011F46  22DA               	addwfc	fsr2h,f,c
  5995  011F48  0100               	movlb	0	; () banked
  5996  011F4A  51E1               	movf	Button_Poll@pIncrement& (0+255),w,b
  5997  011F4C  26DF               	addwf	indf2,f,c
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6001  011F4E  0100               	movlb	0	; () banked
  6002  011F50  EE20 F002          	lfsr	2,2
  6003  011F54  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  6004  011F56  26D9               	addwf	fsr2l,f,c
  6005  011F58  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6006  011F5A  22DA               	addwfc	fsr2h,f,c
  6007  011F5C  0100               	movlb	0	; () banked
  6008  011F5E  EE10 F001          	lfsr	1,1
  6009  011F62  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  6010  011F64  26E1               	addwf	fsr1l,f,c
  6011  011F66  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6012  011F68  22E2               	addwfc	fsr1h,f,c
  6013  011F6A  50E7               	movf	indf1,w,c
  6014  011F6C  0100               	movlb	0	; () banked
  6015  011F6E  6FE4               	movwf	(??_Button_Poll+2)& (0+255),b
  6016  011F70  6BE5               	clrf	(??_Button_Poll+3)& (0+255),b
  6017  011F72  50DE               	movf	postinc2,w,c
  6018  011F74  0100               	movlb	0	; () banked
  6019  011F76  5DE4               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6020  011F78  50DE               	movf	postinc2,w,c
  6021  011F7A  0100               	movlb	0	; () banked
  6022  011F7C  59E5               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6023  011F7E  A0D8               	btfss	status,0,c
  6024  011F80  0012               	return	
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;Button.c: 77: {
  6028                           ;Button.c: 79: pButton->mState = Pin;
  6029  011F82  C0DF  FFD9         	movff	Button_Poll@pButton,fsr2l
  6030  011F86  C0E0  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6031  011F8A  C0E7  FFDF         	movff	Button_Poll@Pin,indf2
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;Button.c: 80: pButton->mCount = 0;
  6035  011F8E  0100               	movlb	0	; () banked
  6036  011F90  EE20 F001          	lfsr	2,1
  6037  011F94  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  6038  011F96  26D9               	addwf	fsr2l,f,c
  6039  011F98  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6040  011F9A  22DA               	addwfc	fsr2h,f,c
  6041  011F9C  0E00               	movlw	0
  6042  011F9E  6EDF               	movwf	indf2,c
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;Button.c: 83: pButton->mFunction(Pin);
  6046  011FA0  0100               	movlb	0	; () banked
  6047  011FA2  EE20 F004          	lfsr	2,4
  6048  011FA6  51DF               	movf	Button_Poll@pButton& (0+255),w,b
  6049  011FA8  26D9               	addwf	fsr2l,f,c
  6050  011FAA  51E0               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6051  011FAC  22DA               	addwfc	fsr2h,f,c
  6052  011FAE  D801               	call	u7038
  6053  011FB0  0012               	return	
  6054  011FB2                     u7038:
  6055  011FB2  0005               	push	
  6056  011FB4  6EFA               	movwf	pclath,c
  6057  011FB6  50DE               	movf	postinc2,w,c
  6058  011FB8  6EFD               	movwf	tosl,c
  6059  011FBA  50DE               	movf	postinc2,w,c
  6060  011FBC  6EFE               	movwf	tosh,c
  6061  011FBE  50DE               	movf	postinc2,w,c
  6062  011FC0  6EFF               	movwf	tosu,c
  6063  011FC2  50FA               	movf	pclath,w,c
  6064  011FC4  0100               	movlb	0	; () banked
  6065  011FC6  51E7               	movf	Button_Poll@Pin& (0+255),w,b
  6066  011FC8  0012               	return		;indir
  6067  011FCA                     __end_of_Button_Poll:
  6068                           	opt stack 0
  6069                           tosu	equ	0xFFF
  6070                           tosh	equ	0xFFE
  6071                           tosl	equ	0xFFD
  6072                           pclath	equ	0xFFA
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf1	equ	0xFE7
  6082                           postdec1	equ	0xFE5
  6083                           fsr1h	equ	0xFE2
  6084                           fsr1l	equ	0xFE1
  6085                           indf2	equ	0xFDF
  6086                           postinc2	equ	0xFDE
  6087                           postdec2	equ	0xFDD
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _MXK_DIPSwitch *****************
  6093 ;; Defined at:
  6094 ;;		line 24 in file "Library/MXK.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;		None
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  1    wreg      unsigned char 
  6101 ;; Registers used:
  6102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;Total ram usage:        0 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:    8
  6115 ;; This function calls:
  6116 ;;		_Port_GetQuad
  6117 ;; This function is called by:
  6118 ;;		_FunctInitButton
  6119 ;;		_Button_Poll
  6120 ;;		_getMode
  6121 ;;		_continuousMode
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text23
  6126  0144EA                     __ptext23:
  6127                           	opt stack 0
  6128  0144EA                     _MXK_DIPSwitch:
  6129                           	opt stack 17
  6130                           
  6131                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6132                           
  6133                           ;incstack = 0
  6134  0144EA  0E88               	movlw	low _PortD
  6135  0144EC  0100               	movlb	0	; () banked
  6136  0144EE  6FC4               	movwf	Port_GetQuad@pInput& (0+255),b
  6137  0144F0  0E00               	movlw	high _PortD
  6138  0144F2  0100               	movlb	0	; () banked
  6139  0144F4  6FC5               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6140  0144F6  0E00               	movlw	0
  6141  0144F8  0100               	movlb	0	; () banked
  6142  0144FA  6FC6               	movwf	Port_GetQuad@pQuad& (0+255),b
  6143  0144FC  EC85  F09E         	call	_Port_GetQuad
  6144  014500  0012               	return	
  6145  014502                     __end_of_MXK_DIPSwitch:
  6146                           	opt stack 0
  6147                           tosu	equ	0xFFF
  6148                           tosh	equ	0xFFE
  6149                           tosl	equ	0xFFD
  6150                           pclath	equ	0xFFA
  6151                           tblptru	equ	0xFF8
  6152                           tblptrh	equ	0xFF7
  6153                           tblptrl	equ	0xFF6
  6154                           tablat	equ	0xFF5
  6155                           prodh	equ	0xFF4
  6156                           prodl	equ	0xFF3
  6157                           postinc0	equ	0xFEE
  6158                           wreg	equ	0xFE8
  6159                           indf1	equ	0xFE7
  6160                           postdec1	equ	0xFE5
  6161                           fsr1h	equ	0xFE2
  6162                           fsr1l	equ	0xFE1
  6163                           indf2	equ	0xFDF
  6164                           postinc2	equ	0xFDE
  6165                           postdec2	equ	0xFDD
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function _HMI_DIPSwitch *****************
  6171 ;; Defined at:
  6172 ;;		line 47 in file "HMI.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      unsigned char 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;Total ram usage:        0 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    8
  6193 ;; This function calls:
  6194 ;;		_Port_GetQuad
  6195 ;; This function is called by:
  6196 ;;		_HMI_Init
  6197 ;;		_Button_Poll
  6198 ;;		_getMode
  6199 ;;		_continuousMode
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text24
  6204  014502                     __ptext24:
  6205                           	opt stack 0
  6206  014502                     _HMI_DIPSwitch:
  6207                           	opt stack 15
  6208                           
  6209                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6210                           
  6211                           ;incstack = 0
  6212  014502  0E7E               	movlw	low _PortE
  6213  014504  0100               	movlb	0	; () banked
  6214  014506  6FC4               	movwf	Port_GetQuad@pInput& (0+255),b
  6215  014508  0E00               	movlw	high _PortE
  6216  01450A  0100               	movlb	0	; () banked
  6217  01450C  6FC5               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6218  01450E  0E00               	movlw	0
  6219  014510  0100               	movlb	0	; () banked
  6220  014512  6FC6               	movwf	Port_GetQuad@pQuad& (0+255),b
  6221  014514  EC85  F09E         	call	_Port_GetQuad	;wreg free
  6222  014518  0012               	return	
  6223  01451A                     __end_of_HMI_DIPSwitch:
  6224                           	opt stack 0
  6225                           tosu	equ	0xFFF
  6226                           tosh	equ	0xFFE
  6227                           tosl	equ	0xFFD
  6228                           pclath	equ	0xFFA
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           postinc0	equ	0xFEE
  6236                           wreg	equ	0xFE8
  6237                           indf1	equ	0xFE7
  6238                           postdec1	equ	0xFE5
  6239                           fsr1h	equ	0xFE2
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8
  6247                           
  6248 ;; *************** function _HMI_DownSwitch *****************
  6249 ;; Defined at:
  6250 ;;		line 42 in file "HMI.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;		None
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      unsigned char 
  6257 ;; Registers used:
  6258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;Total ram usage:        0 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:    8
  6271 ;; This function calls:
  6272 ;;		_Port_GetPin
  6273 ;; This function is called by:
  6274 ;;		_HMI_Init
  6275 ;;		_Button_Poll
  6276 ;;		_getMode
  6277 ;;		_continuousMode
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text25
  6282  01451A                     __ptext25:
  6283                           	opt stack 0
  6284  01451A                     _HMI_DownSwitch:
  6285                           	opt stack 15
  6286                           
  6287                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  6288                           
  6289                           ;incstack = 0
  6290  01451A  0E7E               	movlw	low _PortE
  6291  01451C  0100               	movlb	0	; () banked
  6292  01451E  6FC4               	movwf	Port_GetPin@pInput& (0+255),b
  6293  014520  0E00               	movlw	high _PortE
  6294  014522  0100               	movlb	0	; () banked
  6295  014524  6FC5               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6296  014526  0E06               	movlw	6
  6297  014528  0100               	movlb	0	; () banked
  6298  01452A  6FC6               	movwf	Port_GetPin@pPin& (0+255),b
  6299  01452C  ECF2  F09E         	call	_Port_GetPin	;wreg free
  6300  014530  0012               	return	
  6301  014532                     __end_of_HMI_DownSwitch:
  6302                           	opt stack 0
  6303                           tosu	equ	0xFFF
  6304                           tosh	equ	0xFFE
  6305                           tosl	equ	0xFFD
  6306                           pclath	equ	0xFFA
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           postinc0	equ	0xFEE
  6314                           wreg	equ	0xFE8
  6315                           indf1	equ	0xFE7
  6316                           postdec1	equ	0xFE5
  6317                           fsr1h	equ	0xFE2
  6318                           fsr1l	equ	0xFE1
  6319                           indf2	equ	0xFDF
  6320                           postinc2	equ	0xFDE
  6321                           postdec2	equ	0xFDD
  6322                           fsr2h	equ	0xFDA
  6323                           fsr2l	equ	0xFD9
  6324                           status	equ	0xFD8
  6325                           
  6326 ;; *************** function _HMI_UpSwitch *****************
  6327 ;; Defined at:
  6328 ;;		line 37 in file "HMI.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;		None
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      unsigned char 
  6335 ;; Registers used:
  6336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;Total ram usage:        0 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    8
  6349 ;; This function calls:
  6350 ;;		_Port_GetPin
  6351 ;; This function is called by:
  6352 ;;		_HMI_Init
  6353 ;;		_Button_Poll
  6354 ;;		_getMode
  6355 ;;		_continuousMode
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text26
  6360  014532                     __ptext26:
  6361                           	opt stack 0
  6362  014532                     _HMI_UpSwitch:
  6363                           	opt stack 17
  6364                           
  6365                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  6366                           
  6367                           ;incstack = 0
  6368  014532  0E7E               	movlw	low _PortE
  6369  014534  0100               	movlb	0	; () banked
  6370  014536  6FC4               	movwf	Port_GetPin@pInput& (0+255),b
  6371  014538  0E00               	movlw	high _PortE
  6372  01453A  0100               	movlb	0	; () banked
  6373  01453C  6FC5               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6374  01453E  0E07               	movlw	7
  6375  014540  0100               	movlb	0	; () banked
  6376  014542  6FC6               	movwf	Port_GetPin@pPin& (0+255),b
  6377  014544  ECF2  F09E         	call	_Port_GetPin	;wreg free
  6378  014548  0012               	return	
  6379  01454A                     __end_of_HMI_UpSwitch:
  6380                           	opt stack 0
  6381                           tosu	equ	0xFFF
  6382                           tosh	equ	0xFFE
  6383                           tosl	equ	0xFFD
  6384                           pclath	equ	0xFFA
  6385                           tblptru	equ	0xFF8
  6386                           tblptrh	equ	0xFF7
  6387                           tblptrl	equ	0xFF6
  6388                           tablat	equ	0xFF5
  6389                           prodh	equ	0xFF4
  6390                           prodl	equ	0xFF3
  6391                           postinc0	equ	0xFEE
  6392                           wreg	equ	0xFE8
  6393                           indf1	equ	0xFE7
  6394                           postdec1	equ	0xFE5
  6395                           fsr1h	equ	0xFE2
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _HMI_RightSwitch *****************
  6405 ;; Defined at:
  6406 ;;		line 32 in file "HMI.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      unsigned char 
  6413 ;; Registers used:
  6414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    8
  6427 ;; This function calls:
  6428 ;;		_Port_GetPin
  6429 ;; This function is called by:
  6430 ;;		_HMI_Init
  6431 ;;		_Button_Poll
  6432 ;;		_getMode
  6433 ;;		_continuousMode
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text27
  6438  01454A                     __ptext27:
  6439                           	opt stack 0
  6440  01454A                     _HMI_RightSwitch:
  6441                           	opt stack 17
  6442                           
  6443                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  6444                           
  6445                           ;incstack = 0
  6446  01454A  0E7E               	movlw	low _PortE
  6447  01454C  0100               	movlb	0	; () banked
  6448  01454E  6FC4               	movwf	Port_GetPin@pInput& (0+255),b
  6449  014550  0E00               	movlw	high _PortE
  6450  014552  0100               	movlb	0	; () banked
  6451  014554  6FC5               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6452  014556  0E04               	movlw	4
  6453  014558  0100               	movlb	0	; () banked
  6454  01455A  6FC6               	movwf	Port_GetPin@pPin& (0+255),b
  6455  01455C  ECF2  F09E         	call	_Port_GetPin	;wreg free
  6456  014560  0012               	return	
  6457  014562                     __end_of_HMI_RightSwitch:
  6458                           	opt stack 0
  6459                           tosu	equ	0xFFF
  6460                           tosh	equ	0xFFE
  6461                           tosl	equ	0xFFD
  6462                           pclath	equ	0xFFA
  6463                           tblptru	equ	0xFF8
  6464                           tblptrh	equ	0xFF7
  6465                           tblptrl	equ	0xFF6
  6466                           tablat	equ	0xFF5
  6467                           prodh	equ	0xFF4
  6468                           prodl	equ	0xFF3
  6469                           postinc0	equ	0xFEE
  6470                           wreg	equ	0xFE8
  6471                           indf1	equ	0xFE7
  6472                           postdec1	equ	0xFE5
  6473                           fsr1h	equ	0xFE2
  6474                           fsr1l	equ	0xFE1
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8
  6481                           
  6482 ;; *************** function _HMI_LeftSwitch *****************
  6483 ;; Defined at:
  6484 ;;		line 27 in file "HMI.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      unsigned char 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    8
  6505 ;; This function calls:
  6506 ;;		_Port_GetPin
  6507 ;; This function is called by:
  6508 ;;		_HMI_Init
  6509 ;;		_Button_Poll
  6510 ;;		_getMode
  6511 ;;		_continuousMode
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text28
  6516  014562                     __ptext28:
  6517                           	opt stack 0
  6518  014562                     _HMI_LeftSwitch:
  6519                           	opt stack 15
  6520                           
  6521                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  6522                           
  6523                           ;incstack = 0
  6524  014562  0E7E               	movlw	low _PortE
  6525  014564  0100               	movlb	0	; () banked
  6526  014566  6FC4               	movwf	Port_GetPin@pInput& (0+255),b
  6527  014568  0E00               	movlw	high _PortE
  6528  01456A  0100               	movlb	0	; () banked
  6529  01456C  6FC5               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6530  01456E  0E05               	movlw	5
  6531  014570  0100               	movlb	0	; () banked
  6532  014572  6FC6               	movwf	Port_GetPin@pPin& (0+255),b
  6533  014574  ECF2  F09E         	call	_Port_GetPin	;wreg free
  6534  014578  0012               	return	
  6535  01457A                     __end_of_HMI_LeftSwitch:
  6536                           	opt stack 0
  6537                           tosu	equ	0xFFF
  6538                           tosh	equ	0xFFE
  6539                           tosl	equ	0xFFD
  6540                           pclath	equ	0xFFA
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           indf1	equ	0xFE7
  6550                           postdec1	equ	0xFE5
  6551                           fsr1h	equ	0xFE2
  6552                           fsr1l	equ	0xFE1
  6553                           indf2	equ	0xFDF
  6554                           postinc2	equ	0xFDE
  6555                           postdec2	equ	0xFDD
  6556                           fsr2h	equ	0xFDA
  6557                           fsr2l	equ	0xFD9
  6558                           status	equ	0xFD8
  6559                           
  6560 ;; *************** function _MXK_TestButton *****************
  6561 ;; Defined at:
  6562 ;;		line 14 in file "Library/MXK.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      unsigned char 
  6569 ;; Registers used:
  6570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;Total ram usage:        0 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    8
  6583 ;; This function calls:
  6584 ;;		_Port_GetPin
  6585 ;; This function is called by:
  6586 ;;		_FunctInitButton
  6587 ;;		_Button_Poll
  6588 ;;		_getMode
  6589 ;;		_continuousMode
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text29
  6594  01457A                     __ptext29:
  6595                           	opt stack 0
  6596  01457A                     _MXK_TestButton:
  6597                           	opt stack 17
  6598                           
  6599                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  6600                           
  6601                           ;incstack = 0
  6602  01457A  0EDE               	movlw	low _PortB
  6603  01457C  0100               	movlb	0	; () banked
  6604  01457E  6FC4               	movwf	Port_GetPin@pInput& (0+255),b
  6605  014580  0E01               	movlw	high _PortB
  6606  014582  0100               	movlb	0	; () banked
  6607  014584  6FC5               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6608  014586  0E04               	movlw	4
  6609  014588  0100               	movlb	0	; () banked
  6610  01458A  6FC6               	movwf	Port_GetPin@pPin& (0+255),b
  6611  01458C  ECF2  F09E         	call	_Port_GetPin	;wreg free
  6612  014590  0012               	return	
  6613  014592                     __end_of_MXK_TestButton:
  6614                           	opt stack 0
  6615                           tosu	equ	0xFFF
  6616                           tosh	equ	0xFFE
  6617                           tosl	equ	0xFFD
  6618                           pclath	equ	0xFFA
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           indf1	equ	0xFE7
  6628                           postdec1	equ	0xFE5
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638 ;; *************** function _Port_GetQuad *****************
  6639 ;; Defined at:
  6640 ;;		line 498 in file "Library/Port.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  6643 ;;		 -> PortE(10), PortD(10), 
  6644 ;;  pQuad           1    2[BANK0 ] enum E6776
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  Output          1    5[BANK0 ] unsigned char 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      unsigned char 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6656 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;Total ram usage:        6 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    7
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_HMI_DIPSwitch
  6667 ;;		_MXK_DIPSwitch
  6668 ;;		_Port_ToggleQuad
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text30
  6673  013D0A                     __ptext30:
  6674                           	opt stack 0
  6675  013D0A                     _Port_GetQuad:
  6676                           	opt stack 17
  6677                           
  6678                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  6679                           
  6680                           ;incstack = 0
  6681  013D0A  0100               	movlb	0	; () banked
  6682  013D0C  EE20 F006          	lfsr	2,6
  6683  013D10  51C4               	movf	Port_GetQuad@pInput& (0+255),w,b
  6684  013D12  26D9               	addwf	fsr2l,f,c
  6685  013D14  51C5               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  6686  013D16  22DA               	addwfc	fsr2h,f,c
  6687  013D18  CFDE F0C7          	movff	postinc2,??_Port_GetQuad
  6688  013D1C  CFDD F0C8          	movff	postdec2,??_Port_GetQuad+1
  6689  013D20  C0C7  FFD9         	movff	??_Port_GetQuad,fsr2l
  6690  013D24  C0C8  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  6691  013D28  50DF               	movf	indf2,w,c
  6692  013D2A  0100               	movlb	0	; () banked
  6693  013D2C  6FC9               	movwf	Port_GetQuad@Output& (0+255),b
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  6697  013D2E  0100               	movlb	0	; () banked
  6698  013D30  51C6               	movf	Port_GetQuad@pQuad& (0+255),w,b
  6699  013D32  0D04               	mullw	4
  6700  013D34  28F3               	incf	prodl,w,c
  6701  013D36  0100               	movlb	0	; () banked
  6702  013D38  6FC7               	movwf	??_Port_GetQuad& (0+255),b
  6703  013D3A  D003               	goto	u6640
  6704  013D3C                     u6645:
  6705  013D3C  0100               	movlb	0	; () banked
  6706  013D3E  90D8               	bcf	status,0,c
  6707  013D40  33C9               	rrcf	Port_GetQuad@Output& (0+255),f,b
  6708  013D42                     u6640:
  6709  013D42  0100               	movlb	0	; () banked
  6710  013D44  2FC7               	decfsz	??_Port_GetQuad& (0+255),f,b
  6711  013D46  D7FA               	goto	u6645
  6712                           
  6713                           ;Port.c: 502: Output &= 0xF;
  6714  013D48  0E0F               	movlw	15
  6715  013D4A  0100               	movlb	0	; () banked
  6716  013D4C  17C9               	andwf	Port_GetQuad@Output& (0+255),f,b
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;Port.c: 503: return Output;
  6720  013D4E  0100               	movlb	0	; () banked
  6721  013D50  51C9               	movf	Port_GetQuad@Output& (0+255),w,b
  6722  013D52  0012               	return	
  6723  013D54                     __end_of_Port_GetQuad:
  6724                           	opt stack 0
  6725                           tosu	equ	0xFFF
  6726                           tosh	equ	0xFFE
  6727                           tosl	equ	0xFFD
  6728                           pclath	equ	0xFFA
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           postinc0	equ	0xFEE
  6736                           wreg	equ	0xFE8
  6737                           indf1	equ	0xFE7
  6738                           postdec1	equ	0xFE5
  6739                           fsr1h	equ	0xFE2
  6740                           fsr1l	equ	0xFE1
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           postdec2	equ	0xFDD
  6744                           fsr2h	equ	0xFDA
  6745                           fsr2l	equ	0xFD9
  6746                           status	equ	0xFD8
  6747                           
  6748 ;; *************** function _Event_DIPSwitch *****************
  6749 ;; Defined at:
  6750 ;;		line 17 in file "Events.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  pState          1    wreg     unsigned char 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  pState          1   25[BANK0 ] unsigned char 
  6755 ;;  Bar             1   26[BANK0 ] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;Total ram usage:        2 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:   13
  6772 ;; This function calls:
  6773 ;;		_HMI_GetBar
  6774 ;;		_HMI_SetBar
  6775 ;;		_LED_Toggle
  6776 ;; This function is called by:
  6777 ;;		_FunctInitButton
  6778 ;;		_Button_Poll
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text31
  6783  014226                     __ptext31:
  6784                           	opt stack 0
  6785  014226                     _Event_DIPSwitch:
  6786                           	opt stack 10
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;incstack = 0
  6790                           ;Event_DIPSwitch@pState stored from wreg
  6791  014226  0100               	movlb	0	; () banked
  6792  014228  6FDD               	movwf	Event_DIPSwitch@pState& (0+255),b
  6793                           
  6794                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
  6795  01422A  EC4C  F0A3         	call	_HMI_GetBar	;wreg free
  6796  01422E  0100               	movlb	0	; () banked
  6797  014230  6FDE               	movwf	Event_DIPSwitch@Bar& (0+255),b
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;Events.c: 20: Bar &= 0x0F;
  6801  014232  0E0F               	movlw	15
  6802  014234  0100               	movlb	0	; () banked
  6803  014236  17DE               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;Events.c: 21: pState <<= 4;
  6807  014238  0100               	movlb	0	; () banked
  6808  01423A  3BDD               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  6809  01423C  0EF0               	movlw	240
  6810  01423E  17DD               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;Events.c: 24: HMI_SetBar(pState | Bar);
  6814  014240  0100               	movlb	0	; () banked
  6815  014242  51DD               	movf	Event_DIPSwitch@pState& (0+255),w,b
  6816  014244  0100               	movlb	0	; () banked
  6817  014246  11DE               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  6818  014248  EC36  F0A3         	call	_HMI_SetBar
  6819                           
  6820                           ;Events.c: 27: LED_Toggle(eLED1);
  6821  01424C  0E00               	movlw	0
  6822  01424E  ECCE  F09E         	call	_LED_Toggle
  6823  014252  0012               	return		;funcret
  6824  014254                     __end_of_Event_DIPSwitch:
  6825                           	opt stack 0
  6826                           tosu	equ	0xFFF
  6827                           tosh	equ	0xFFE
  6828                           tosl	equ	0xFFD
  6829                           pclath	equ	0xFFA
  6830                           tblptru	equ	0xFF8
  6831                           tblptrh	equ	0xFF7
  6832                           tblptrl	equ	0xFF6
  6833                           tablat	equ	0xFF5
  6834                           prodh	equ	0xFF4
  6835                           prodl	equ	0xFF3
  6836                           postinc0	equ	0xFEE
  6837                           wreg	equ	0xFE8
  6838                           indf1	equ	0xFE7
  6839                           postdec1	equ	0xFE5
  6840                           fsr1h	equ	0xFE2
  6841                           fsr1l	equ	0xFE1
  6842                           indf2	equ	0xFDF
  6843                           postinc2	equ	0xFDE
  6844                           postdec2	equ	0xFDD
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _Event_HMI_DownButton *****************
  6850 ;; Defined at:
  6851 ;;		line 123 in file "Events.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;  pState          1    wreg     unsigned char 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  pState          1   25[BANK0 ] unsigned char 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;Total ram usage:        1 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:   13
  6872 ;; This function calls:
  6873 ;;		_HMI_SetDown
  6874 ;;		_HMI_SetNumber
  6875 ;;		_LED_Toggle
  6876 ;; This function is called by:
  6877 ;;		_HMI_Init
  6878 ;;		_Button_Poll
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           	psect	text32
  6883  014104                     __ptext32:
  6884                           	opt stack 0
  6885  014104                     _Event_HMI_DownButton:
  6886                           	opt stack 10
  6887                           
  6888                           ;incstack = 0
  6889                           ;Event_HMI_DownButton@pState stored from wreg
  6890  014104  0100               	movlb	0	; () banked
  6891  014106  6FDD               	movwf	Event_HMI_DownButton@pState& (0+255),b
  6892                           
  6893                           ;Events.c: 126: HMI_SetDown(pState);
  6894  014108  0100               	movlb	0	; () banked
  6895  01410A  51DD               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  6896  01410C  ECEA  F0A2         	call	_HMI_SetDown
  6897                           
  6898                           ;Events.c: 128: if (pState == 0)
  6899  014110  0100               	movlb	0	; () banked
  6900  014112  51DD               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  6901  014114  0100               	movlb	0	; () banked
  6902  014116  A4D8               	btfss	status,2,c
  6903  014118  D00A               	goto	l10534
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;Events.c: 129: {
  6907                           ;Events.c: 130: val -= 1;
  6908  01411A  0100               	movlb	0	; () banked
  6909  01411C  0770               	decf	_val& (0+255),f,b
  6910  01411E  A0D8               	btfss	status,0,c
  6911  014120  0771               	decf	(_val+1)& (0+255),f,b
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;Events.c: 131: HMI_SetNumber(val);
  6915  014122  C070  F0DA         	movff	_val,HMI_SetNumber@pInput
  6916  014126  C071  F0DB         	movff	_val+1,HMI_SetNumber@pInput+1
  6917  01412A  EC6D  F0A1         	call	_HMI_SetNumber	;wreg free
  6918  01412E                     l10534:
  6919                           
  6920                           ;Events.c: 132: }
  6921                           ;Events.c: 135: LED_Toggle(eLED1);
  6922  01412E  0E00               	movlw	0
  6923  014130  ECCE  F09E         	call	_LED_Toggle
  6924  014134  0012               	return		;funcret
  6925  014136                     __end_of_Event_HMI_DownButton:
  6926                           	opt stack 0
  6927                           tosu	equ	0xFFF
  6928                           tosh	equ	0xFFE
  6929                           tosl	equ	0xFFD
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           postinc0	equ	0xFEE
  6938                           wreg	equ	0xFE8
  6939                           indf1	equ	0xFE7
  6940                           postdec1	equ	0xFE5
  6941                           fsr1h	equ	0xFE2
  6942                           fsr1l	equ	0xFE1
  6943                           indf2	equ	0xFDF
  6944                           postinc2	equ	0xFDE
  6945                           postdec2	equ	0xFDD
  6946                           fsr2h	equ	0xFDA
  6947                           fsr2l	equ	0xFD9
  6948                           status	equ	0xFD8
  6949                           
  6950 ;; *************** function _Event_HMI_UpButton *****************
  6951 ;; Defined at:
  6952 ;;		line 108 in file "Events.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  pState          1    wreg     unsigned char 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  pState          1   25[BANK0 ] unsigned char 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      void 
  6959 ;; Registers used:
  6960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;Total ram usage:        1 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:   13
  6973 ;; This function calls:
  6974 ;;		_HMI_SetNumber
  6975 ;;		_HMI_SetUp
  6976 ;;		_LED_Toggle
  6977 ;; This function is called by:
  6978 ;;		_HMI_Init
  6979 ;;		_Button_Poll
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text33
  6984  014136                     __ptext33:
  6985                           	opt stack 0
  6986  014136                     _Event_HMI_UpButton:
  6987                           	opt stack 10
  6988                           
  6989                           ;incstack = 0
  6990                           ;Event_HMI_UpButton@pState stored from wreg
  6991  014136  0100               	movlb	0	; () banked
  6992  014138  6FDD               	movwf	Event_HMI_UpButton@pState& (0+255),b
  6993                           
  6994                           ;Events.c: 111: HMI_SetUp(pState);
  6995  01413A  0100               	movlb	0	; () banked
  6996  01413C  51DD               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  6997  01413E  ECC9  F0A2         	call	_HMI_SetUp
  6998                           
  6999                           ;Events.c: 113: if (pState == 0)
  7000  014142  0100               	movlb	0	; () banked
  7001  014144  51DD               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7002  014146  0100               	movlb	0	; () banked
  7003  014148  A4D8               	btfss	status,2,c
  7004  01414A  D009               	goto	l10524
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;Events.c: 114: {
  7008                           ;Events.c: 115: val += 1;
  7009  01414C  0100               	movlb	0	; () banked
  7010  01414E  4B70               	infsnz	_val& (0+255),f,b
  7011  014150  2B71               	incf	(_val+1)& (0+255),f,b
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;Events.c: 116: HMI_SetNumber(val);
  7015  014152  C070  F0DA         	movff	_val,HMI_SetNumber@pInput
  7016  014156  C071  F0DB         	movff	_val+1,HMI_SetNumber@pInput+1
  7017  01415A  EC6D  F0A1         	call	_HMI_SetNumber	;wreg free
  7018  01415E                     l10524:
  7019                           
  7020                           ;Events.c: 117: }
  7021                           ;Events.c: 120: LED_Toggle(eLED1);
  7022  01415E  0E00               	movlw	0
  7023  014160  ECCE  F09E         	call	_LED_Toggle
  7024  014164  0012               	return		;funcret
  7025  014166                     __end_of_Event_HMI_UpButton:
  7026                           	opt stack 0
  7027                           tosu	equ	0xFFF
  7028                           tosh	equ	0xFFE
  7029                           tosl	equ	0xFFD
  7030                           pclath	equ	0xFFA
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           indf1	equ	0xFE7
  7040                           postdec1	equ	0xFE5
  7041                           fsr1h	equ	0xFE2
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           
  7050 ;; *************** function _Event_HMI_RightButton *****************
  7051 ;; Defined at:
  7052 ;;		line 91 in file "Events.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  pState          1    wreg     unsigned char 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  pState          1   25[BANK0 ] unsigned char 
  7057 ;; Return value:  Size  Location     Type
  7058 ;;                  1    wreg      void 
  7059 ;; Registers used:
  7060 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;Total ram usage:        1 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:   13
  7073 ;; This function calls:
  7074 ;;		_HMI_SetBar
  7075 ;;		_HMI_SetRight
  7076 ;;		_LED_Toggle
  7077 ;; This function is called by:
  7078 ;;		_HMI_Init
  7079 ;;		_Button_Poll
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text34
  7084  013E70                     __ptext34:
  7085                           	opt stack 0
  7086  013E70                     _Event_HMI_RightButton:
  7087                           	opt stack 10
  7088                           
  7089                           ;incstack = 0
  7090                           ;Event_HMI_RightButton@pState stored from wreg
  7091  013E70  0100               	movlb	0	; () banked
  7092  013E72  6FDD               	movwf	Event_HMI_RightButton@pState& (0+255),b
  7093                           
  7094                           ;Events.c: 94: HMI_SetRight(pState);
  7095  013E74  0100               	movlb	0	; () banked
  7096  013E76  51DD               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7097  013E78  ECD4  F0A2         	call	_HMI_SetRight
  7098                           
  7099                           ;Events.c: 96: if (pState == 0)
  7100  013E7C  0100               	movlb	0	; () banked
  7101  013E7E  51DD               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7102  013E80  0100               	movlb	0	; () banked
  7103  013E82  A4D8               	btfss	status,2,c
  7104  013E84  D013               	goto	l10514
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;Events.c: 97: {
  7108                           ;Events.c: 98: if (pShiftVal == 0)
  7109  013E86  0100               	movlb	0	; () banked
  7110  013E88  516E               	movf	_pShiftVal& (0+255),w,b
  7111  013E8A  0100               	movlb	0	; () banked
  7112  013E8C  116F               	iorwf	(_pShiftVal+1)& (0+255),w,b
  7113  013E8E  A4D8               	btfss	status,2,c
  7114  013E90  D005               	goto	l10510
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;Events.c: 99: pShiftVal = 0xFF00;
  7118  013E92  0EFF               	movlw	255
  7119  013E94  0100               	movlb	0	; () banked
  7120  013E96  6F6F               	movwf	(_pShiftVal+1)& (0+255),b
  7121  013E98  0E00               	movlw	0
  7122  013E9A  6F6E               	movwf	_pShiftVal& (0+255),b
  7123  013E9C                     l10510:
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;Events.c: 100: pShiftVal >>= 1;
  7127  013E9C  0100               	movlb	0	; () banked
  7128  013E9E  90D8               	bcf	status,0,c
  7129  013EA0  336F               	rrcf	(_pShiftVal+1)& (0+255),f,b
  7130  013EA2  336E               	rrcf	_pShiftVal& (0+255),f,b
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
  7134  013EA4  0100               	movlb	0	; () banked
  7135  013EA6  516E               	movf	_pShiftVal& (0+255),w,b
  7136  013EA8  EC36  F0A3         	call	_HMI_SetBar
  7137  013EAC                     l10514:
  7138                           
  7139                           ;Events.c: 103: }
  7140                           ;Events.c: 105: LED_Toggle(eLED1);
  7141  013EAC  0E00               	movlw	0
  7142  013EAE  ECCE  F09E         	call	_LED_Toggle
  7143  013EB2  0012               	return		;funcret
  7144  013EB4                     __end_of_Event_HMI_RightButton:
  7145                           	opt stack 0
  7146                           tosu	equ	0xFFF
  7147                           tosh	equ	0xFFE
  7148                           tosl	equ	0xFFD
  7149                           pclath	equ	0xFFA
  7150                           tblptru	equ	0xFF8
  7151                           tblptrh	equ	0xFF7
  7152                           tblptrl	equ	0xFF6
  7153                           tablat	equ	0xFF5
  7154                           prodh	equ	0xFF4
  7155                           prodl	equ	0xFF3
  7156                           postinc0	equ	0xFEE
  7157                           wreg	equ	0xFE8
  7158                           indf1	equ	0xFE7
  7159                           postdec1	equ	0xFE5
  7160                           fsr1h	equ	0xFE2
  7161                           fsr1l	equ	0xFE1
  7162                           indf2	equ	0xFDF
  7163                           postinc2	equ	0xFDE
  7164                           postdec2	equ	0xFDD
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function _Event_HMI_LeftButton *****************
  7170 ;; Defined at:
  7171 ;;		line 71 in file "Events.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  pState          1    wreg     unsigned char 
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;  pState          1   25[BANK0 ] unsigned char 
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  1    wreg      void 
  7178 ;; Registers used:
  7179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;Total ram usage:        1 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:   13
  7192 ;; This function calls:
  7193 ;;		_HMI_SetBar
  7194 ;;		_HMI_SetLeft
  7195 ;;		_LED_Toggle
  7196 ;; This function is called by:
  7197 ;;		_HMI_Init
  7198 ;;		_Button_Poll
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text35
  7203  013A7E                     __ptext35:
  7204                           	opt stack 0
  7205  013A7E                     _Event_HMI_LeftButton:
  7206                           	opt stack 10
  7207                           
  7208                           ;incstack = 0
  7209                           ;Event_HMI_LeftButton@pState stored from wreg
  7210  013A7E  0100               	movlb	0	; () banked
  7211  013A80  6FDD               	movwf	Event_HMI_LeftButton@pState& (0+255),b
  7212                           
  7213                           ;Events.c: 74: HMI_SetLeft(pState);
  7214  013A82  0100               	movlb	0	; () banked
  7215  013A84  51DD               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7216  013A86  ECDF  F0A2         	call	_HMI_SetLeft
  7217                           
  7218                           ;Events.c: 76: if (pState == 0)
  7219  013A8A  0100               	movlb	0	; () banked
  7220  013A8C  51DD               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7221  013A8E  0100               	movlb	0	; () banked
  7222  013A90  A4D8               	btfss	status,2,c
  7223  013A92  D01D               	goto	l10500
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;Events.c: 77: {
  7227                           ;Events.c: 78: pShiftVal <<= 1;
  7228  013A94  0100               	movlb	0	; () banked
  7229  013A96  90D8               	bcf	status,0,c
  7230  013A98  376E               	rlcf	_pShiftVal& (0+255),f,b
  7231  013A9A  376F               	rlcf	(_pShiftVal+1)& (0+255),f,b
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;Events.c: 79: if (pShiftVal == 0xFF00)
  7235  013A9C  0100               	movlb	0	; () banked
  7236  013A9E  296F               	incf	(_pShiftVal+1)& (0+255),w,b
  7237  013AA0  0100               	movlb	0	; () banked
  7238  013AA2  116E               	iorwf	_pShiftVal& (0+255),w,b
  7239  013AA4  A4D8               	btfss	status,2,c
  7240  013AA6  D006               	goto	l10494
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;Events.c: 80: pShiftVal = 0;
  7244  013AA8  0E00               	movlw	0
  7245  013AAA  0100               	movlb	0	; () banked
  7246  013AAC  6F6F               	movwf	(_pShiftVal+1)& (0+255),b
  7247  013AAE  0E00               	movlw	0
  7248  013AB0  6F6E               	movwf	_pShiftVal& (0+255),b
  7249  013AB2  D009               	goto	l10498
  7250  013AB4                     l10494:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;Events.c: 81: else if (pShiftVal < 0xFF)
  7254  013AB4  0100               	movlb	0	; () banked
  7255  013AB6  516F               	movf	(_pShiftVal+1)& (0+255),w,b
  7256  013AB8  E106               	bnz	l10498
  7257  013ABA  0100               	movlb	0	; () banked
  7258  013ABC  296E               	incf	_pShiftVal& (0+255),w,b
  7259  013ABE  B0D8               	btfsc	status,0,c
  7260  013AC0  D002               	goto	l10498
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;Events.c: 82: pShiftVal |= 1;
  7264  013AC2  0100               	movlb	0	; () banked
  7265  013AC4  816E               	bsf	_pShiftVal& (0+255),0,b
  7266  013AC6                     l10498:
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
  7270  013AC6  0100               	movlb	0	; () banked
  7271  013AC8  516E               	movf	_pShiftVal& (0+255),w,b
  7272  013ACA  EC36  F0A3         	call	_HMI_SetBar
  7273  013ACE                     l10500:
  7274                           
  7275                           ;Events.c: 85: }
  7276                           ;Events.c: 88: LED_Toggle(eLED1);
  7277  013ACE  0E00               	movlw	0
  7278  013AD0  ECCE  F09E         	call	_LED_Toggle
  7279  013AD4  0012               	return		;funcret
  7280  013AD6                     __end_of_Event_HMI_LeftButton:
  7281                           	opt stack 0
  7282                           tosu	equ	0xFFF
  7283                           tosh	equ	0xFFE
  7284                           tosl	equ	0xFFD
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           indf1	equ	0xFE7
  7295                           postdec1	equ	0xFE5
  7296                           fsr1h	equ	0xFE2
  7297                           fsr1l	equ	0xFE1
  7298                           indf2	equ	0xFDF
  7299                           postinc2	equ	0xFDE
  7300                           postdec2	equ	0xFDD
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305 ;; *************** function _Event_HMI_DIPSwitch *****************
  7306 ;; Defined at:
  7307 ;;		line 30 in file "Events.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  pState          1    wreg     unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  pState          1   25[BANK0 ] unsigned char 
  7312 ;;  Bar             1   26[BANK0 ] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;Total ram usage:        2 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:   13
  7329 ;; This function calls:
  7330 ;;		_HMI_GetBar
  7331 ;;		_HMI_SetBar
  7332 ;;		_LED_Toggle
  7333 ;; This function is called by:
  7334 ;;		_HMI_Init
  7335 ;;		_Button_Poll
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text36
  7340  014282                     __ptext36:
  7341                           	opt stack 0
  7342  014282                     _Event_HMI_DIPSwitch:
  7343                           	opt stack 10
  7344                           
  7345                           ;incstack = 0
  7346                           ;Event_HMI_DIPSwitch@pState stored from wreg
  7347  014282  0100               	movlb	0	; () banked
  7348  014284  6FDD               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
  7349                           
  7350                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
  7351  014286  EC4C  F0A3         	call	_HMI_GetBar	;wreg free
  7352  01428A  0100               	movlb	0	; () banked
  7353  01428C  6FDE               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;Events.c: 33: HMI_SetBar(pState | Bar);
  7357  01428E  0100               	movlb	0	; () banked
  7358  014290  51DD               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
  7359  014292  0100               	movlb	0	; () banked
  7360  014294  11DE               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
  7361  014296  EC36  F0A3         	call	_HMI_SetBar
  7362                           
  7363                           ;Events.c: 35: Bar &= 0xF0;
  7364  01429A  0EF0               	movlw	240
  7365  01429C  0100               	movlb	0	; () banked
  7366  01429E  17DE               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;Events.c: 36: pState &= 0x0F;
  7370  0142A0  0E0F               	movlw	15
  7371  0142A2  0100               	movlb	0	; () banked
  7372  0142A4  17DD               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;Events.c: 42: LED_Toggle(eLED1);
  7376  0142A6  0E00               	movlw	0
  7377  0142A8  ECCE  F09E         	call	_LED_Toggle
  7378  0142AC  0012               	return		;funcret
  7379  0142AE                     __end_of_Event_HMI_DIPSwitch:
  7380                           	opt stack 0
  7381                           tosu	equ	0xFFF
  7382                           tosh	equ	0xFFE
  7383                           tosl	equ	0xFFD
  7384                           pclath	equ	0xFFA
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           indf1	equ	0xFE7
  7394                           postdec1	equ	0xFE5
  7395                           fsr1h	equ	0xFE2
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           postinc2	equ	0xFDE
  7399                           postdec2	equ	0xFDD
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404 ;; *************** function _Event_TestButton *****************
  7405 ;; Defined at:
  7406 ;;		line 47 in file "Events.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;  pState          1    wreg     unsigned char 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  pState          1   25[BANK0 ] unsigned char 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;Total ram usage:        1 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:   13
  7427 ;; This function calls:
  7428 ;;		_HMI_SetButton
  7429 ;;		_HMI_SetNumber
  7430 ;;		_LED_Toggle
  7431 ;; This function is called by:
  7432 ;;		_FunctInitButton
  7433 ;;		_Button_Poll
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text37
  7438  013FEE                     __ptext37:
  7439                           	opt stack 0
  7440  013FEE                     _Event_TestButton:
  7441                           	opt stack 10
  7442                           
  7443                           ;incstack = 0
  7444                           ;Event_TestButton@pState stored from wreg
  7445  013FEE  0100               	movlb	0	; () banked
  7446  013FF0  6FDD               	movwf	Event_TestButton@pState& (0+255),b
  7447                           
  7448                           ;Events.c: 51: static UINT8 j = 0;
  7449                           ;Events.c: 55: if (pState == 0)
  7450  013FF2  0100               	movlb	0	; () banked
  7451  013FF4  51DD               	movf	Event_TestButton@pState& (0+255),w,b
  7452  013FF6  0100               	movlb	0	; () banked
  7453  013FF8  A4D8               	btfss	status,2,c
  7454  013FFA  D013               	goto	l10482
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;Events.c: 56: {
  7458                           ;Events.c: 57: j++;
  7459  013FFC  0100               	movlb	0	; () banked
  7460  013FFE  2B78               	incf	Event_TestButton@j& (0+255),f,b
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;Events.c: 58: val += j;
  7464  014000  0100               	movlb	0	; () banked
  7465  014002  5178               	movf	Event_TestButton@j& (0+255),w,b
  7466  014004  0100               	movlb	0	; () banked
  7467  014006  2770               	addwf	_val& (0+255),f,b
  7468  014008  0E00               	movlw	0
  7469  01400A  2371               	addwfc	(_val+1)& (0+255),f,b
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;Events.c: 59: HMI_SetNumber( val );
  7473  01400C  C070  F0DA         	movff	_val,HMI_SetNumber@pInput
  7474  014010  C071  F0DB         	movff	_val+1,HMI_SetNumber@pInput+1
  7475  014014  EC6D  F0A1         	call	_HMI_SetNumber	;wreg free
  7476                           
  7477                           ;Events.c: 62: HMI_SetButton( j & 3 );
  7478  014018  0100               	movlb	0	; () banked
  7479  01401A  5178               	movf	Event_TestButton@j& (0+255),w,b
  7480  01401C  0B03               	andlw	3
  7481  01401E  EC8D  F098         	call	_HMI_SetButton
  7482  014022                     l10482:
  7483                           
  7484                           ;Events.c: 63: }
  7485                           ;Events.c: 67: LED_Toggle(eLED1);
  7486  014022  0E00               	movlw	0
  7487  014024  ECCE  F09E         	call	_LED_Toggle
  7488  014028  0012               	return		;funcret
  7489  01402A                     __end_of_Event_TestButton:
  7490                           	opt stack 0
  7491                           tosu	equ	0xFFF
  7492                           tosh	equ	0xFFE
  7493                           tosl	equ	0xFFD
  7494                           pclath	equ	0xFFA
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           postinc0	equ	0xFEE
  7502                           wreg	equ	0xFE8
  7503                           indf1	equ	0xFE7
  7504                           postdec1	equ	0xFE5
  7505                           fsr1h	equ	0xFE2
  7506                           fsr1l	equ	0xFE1
  7507                           indf2	equ	0xFDF
  7508                           postinc2	equ	0xFDE
  7509                           postdec2	equ	0xFDD
  7510                           fsr2h	equ	0xFDA
  7511                           fsr2l	equ	0xFD9
  7512                           status	equ	0xFD8
  7513                           
  7514 ;; *************** function _HMI_SetButton *****************
  7515 ;; Defined at:
  7516 ;;		line 186 in file "HMI.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  pValue          1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  pValue          1    6[BANK0 ] unsigned char 
  7521 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  7522 ;;  v               1    7[BANK0 ] unsigned char 
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      void 
  7525 ;; Registers used:
  7526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;Total ram usage:        8 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; Hardware stack levels required when called:    7
  7539 ;; This function calls:
  7540 ;;		Nothing
  7541 ;; This function is called by:
  7542 ;;		_Event_TestButton
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text38
  7547  01311A                     __ptext38:
  7548                           	opt stack 0
  7549  01311A                     _HMI_SetButton:
  7550                           	opt stack 15
  7551                           
  7552                           ;incstack = 0
  7553                           ;HMI_SetButton@pValue stored from wreg
  7554  01311A  0100               	movlb	0	; () banked
  7555  01311C  6FCA               	movwf	HMI_SetButton@pValue& (0+255),b
  7556                           
  7557                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  7558  01311E  0E80               	movlw	low HMI_SetButton@F7211
  7559  013120  6EF6               	movwf	tblptrl,c
  7560  013122                     	if	1	;There is more than 1 active tblptr byte
  7561  013122  0EFD               	movlw	high HMI_SetButton@F7211
  7562  013124  6EF7               	movwf	tblptrh,c
  7563  013126                     	endif
  7564  013126                     	if	1	;There are 3 active tblptr bytes
  7565  013126  0E00               	movlw	low (HMI_SetButton@F7211 shr (0+16))
  7566  013128  6EF8               	movwf	tblptru,c
  7567  01312A                     	endif
  7568  01312A  0009               	tblrd		*+
  7569  01312C  CFF5 F0C6          	movff	tablat,HMI_SetButton@reindex
  7570  013130  0009               	tblrd		*+
  7571  013132  CFF5 F0C7          	movff	tablat,HMI_SetButton@reindex+1
  7572  013136  0009               	tblrd		*+
  7573  013138  CFF5 F0C8          	movff	tablat,HMI_SetButton@reindex+2
  7574  01313C  000A               	tblrd		*-
  7575  01313E  CFF5 F0C9          	movff	tablat,HMI_SetButton@reindex+3
  7576                           
  7577                           ;HMI.c: 189: UINT8 v = 0b00010001;
  7578  013142  0E11               	movlw	17
  7579  013144  0100               	movlb	0	; () banked
  7580  013146  6FCB               	movwf	HMI_SetButton@v& (0+255),b
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;HMI.c: 190: pValue &= 3;
  7584  013148  0E03               	movlw	3
  7585  01314A  0100               	movlb	0	; () banked
  7586  01314C  17CA               	andwf	HMI_SetButton@pValue& (0+255),f,b
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;HMI.c: 191: v = v << reindex[pValue];
  7590  01314E  0100               	movlb	0	; () banked
  7591  013150  51CA               	movf	HMI_SetButton@pValue& (0+255),w,b
  7592  013152  0D01               	mullw	1
  7593  013154  0EC6               	movlw	low HMI_SetButton@reindex
  7594  013156  24F3               	addwf	prodl,w,c
  7595  013158  6ED9               	movwf	fsr2l,c
  7596  01315A  0E00               	movlw	high HMI_SetButton@reindex
  7597  01315C  20F4               	addwfc	prodh,w,c
  7598  01315E  6EDA               	movwf	fsr2h,c
  7599  013160  50DF               	movf	indf2,w,c
  7600  013162  0100               	movlb	0	; () banked
  7601  013164  6FC4               	movwf	??_HMI_SetButton& (0+255),b
  7602  013166  C0CB  F0C5         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  7603  01316A  0100               	movlb	0	; () banked
  7604  01316C  2BC4               	incf	??_HMI_SetButton& (0+255),f,b
  7605  01316E  D003               	goto	u6714
  7606  013170                     u6715:
  7607  013170  0100               	movlb	0	; () banked
  7608  013172  90D8               	bcf	status,0,c
  7609  013174  37C5               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  7610  013176                     u6714:
  7611  013176  0100               	movlb	0	; () banked
  7612  013178  2FC4               	decfsz	??_HMI_SetButton& (0+255),f,b
  7613  01317A  D7FA               	goto	u6715
  7614  01317C  0100               	movlb	0	; () banked
  7615  01317E  51C5               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  7616  013180  0100               	movlb	0	; () banked
  7617  013182  6FCB               	movwf	HMI_SetButton@v& (0+255),b
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;HMI.c: 192: v = v >> 4;
  7621  013184  0100               	movlb	0	; () banked
  7622  013186  39CB               	swapf	HMI_SetButton@v& (0+255),w,b
  7623  013188  0B0F               	andlw	15
  7624  01318A  0100               	movlb	0	; () banked
  7625  01318C  6FCB               	movwf	HMI_SetButton@v& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;HMI.c: 193: v = v & 0x0F;
  7629  01318E  0100               	movlb	0	; () banked
  7630  013190  51CB               	movf	HMI_SetButton@v& (0+255),w,b
  7631  013192  0B0F               	andlw	15
  7632  013194  0100               	movlb	0	; () banked
  7633  013196  6FCB               	movwf	HMI_SetButton@v& (0+255),b
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;HMI.c: 194: HMIBoard.pButton = v;
  7637  013198  0101               	movlb	1	; () banked
  7638  01319A  5176               	movf	(_HMIBoard+6)& (0+255),w,b
  7639  01319C  0100               	movlb	0	; () banked
  7640  01319E  19CB               	xorwf	HMI_SetButton@v& (0+255),w,b
  7641  0131A0  0BF0               	andlw	-16
  7642  0131A2  19CB               	xorwf	HMI_SetButton@v& (0+255),w,b
  7643  0131A4  0101               	movlb	1	; () banked
  7644  0131A6  6F76               	movwf	(_HMIBoard+6)& (0+255),b
  7645                           
  7646                           ; BSR set to: 1
  7647  0131A8  0012               	return		;funcret
  7648  0131AA                     __end_of_HMI_SetButton:
  7649                           	opt stack 0
  7650                           tosu	equ	0xFFF
  7651                           tosh	equ	0xFFE
  7652                           tosl	equ	0xFFD
  7653                           pclath	equ	0xFFA
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           indf1	equ	0xFE7
  7663                           postdec1	equ	0xFE5
  7664                           fsr1h	equ	0xFE2
  7665                           fsr1l	equ	0xFE1
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           fsr2h	equ	0xFDA
  7670                           fsr2l	equ	0xFD9
  7671                           status	equ	0xFD8
  7672                           
  7673 ;; *************** function _HMI_SetUp *****************
  7674 ;; Defined at:
  7675 ;;		line 174 in file "HMI.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  pValue          1    wreg     unsigned char 
  7678 ;; Auto vars:     Size  Location     Type
  7679 ;;  pValue          1    0[BANK0 ] unsigned char 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      void 
  7682 ;; Registers used:
  7683 ;;		wreg
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;Total ram usage:        1 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    7
  7696 ;; This function calls:
  7697 ;;		Nothing
  7698 ;; This function is called by:
  7699 ;;		_Event_HMI_UpButton
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text39
  7704  014592                     __ptext39:
  7705                           	opt stack 0
  7706  014592                     _HMI_SetUp:
  7707                           	opt stack 15
  7708                           
  7709                           ; BSR set to: 1
  7710                           ;incstack = 0
  7711                           ;HMI_SetUp@pValue stored from wreg
  7712  014592  0100               	movlb	0	; () banked
  7713  014594  6FC4               	movwf	HMI_SetUp@pValue& (0+255),b
  7714                           
  7715                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
  7716  014596  0100               	movlb	0	; () banked
  7717  014598  B1C4               	btfsc	HMI_SetUp@pValue& (0+255),0,b
  7718  01459A  D003               	bra	u6695
  7719  01459C  0101               	movlb	1	; () banked
  7720  01459E  9176               	bcf	(_HMIBoard+6)& (0+255),0,b
  7721  0145A0  D002               	bra	u6696
  7722  0145A2                     u6695:
  7723  0145A2  0101               	movlb	1	; () banked
  7724  0145A4  8176               	bsf	(_HMIBoard+6)& (0+255),0,b
  7725  0145A6                     u6696:
  7726                           
  7727                           ; BSR set to: 1
  7728  0145A6  0012               	return		;funcret
  7729  0145A8                     __end_of_HMI_SetUp:
  7730                           	opt stack 0
  7731                           tosu	equ	0xFFF
  7732                           tosh	equ	0xFFE
  7733                           tosl	equ	0xFFD
  7734                           pclath	equ	0xFFA
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           postinc0	equ	0xFEE
  7742                           wreg	equ	0xFE8
  7743                           indf1	equ	0xFE7
  7744                           postdec1	equ	0xFE5
  7745                           fsr1h	equ	0xFE2
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function _HMI_SetRight *****************
  7755 ;; Defined at:
  7756 ;;		line 168 in file "HMI.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  pValue          1    wreg     unsigned char 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  pValue          1    0[BANK0 ] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      void 
  7763 ;; Registers used:
  7764 ;;		wreg
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;Total ram usage:        1 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    7
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_Event_HMI_RightButton
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text40
  7785  0145A8                     __ptext40:
  7786                           	opt stack 0
  7787  0145A8                     _HMI_SetRight:
  7788                           	opt stack 15
  7789                           
  7790                           ; BSR set to: 1
  7791                           ;incstack = 0
  7792                           ;HMI_SetRight@pValue stored from wreg
  7793  0145A8  0100               	movlb	0	; () banked
  7794  0145AA  6FC4               	movwf	HMI_SetRight@pValue& (0+255),b
  7795                           
  7796                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
  7797  0145AC  0100               	movlb	0	; () banked
  7798  0145AE  B1C4               	btfsc	HMI_SetRight@pValue& (0+255),0,b
  7799  0145B0  D003               	bra	u6685
  7800  0145B2  0101               	movlb	1	; () banked
  7801  0145B4  9776               	bcf	(_HMIBoard+6)& (0+255),3,b
  7802  0145B6  D002               	bra	u6686
  7803  0145B8                     u6685:
  7804  0145B8  0101               	movlb	1	; () banked
  7805  0145BA  8776               	bsf	(_HMIBoard+6)& (0+255),3,b
  7806  0145BC                     u6686:
  7807                           
  7808                           ; BSR set to: 1
  7809  0145BC  0012               	return		;funcret
  7810  0145BE                     __end_of_HMI_SetRight:
  7811                           	opt stack 0
  7812                           tosu	equ	0xFFF
  7813                           tosh	equ	0xFFE
  7814                           tosl	equ	0xFFD
  7815                           pclath	equ	0xFFA
  7816                           tblptru	equ	0xFF8
  7817                           tblptrh	equ	0xFF7
  7818                           tblptrl	equ	0xFF6
  7819                           tablat	equ	0xFF5
  7820                           prodh	equ	0xFF4
  7821                           prodl	equ	0xFF3
  7822                           postinc0	equ	0xFEE
  7823                           wreg	equ	0xFE8
  7824                           indf1	equ	0xFE7
  7825                           postdec1	equ	0xFE5
  7826                           fsr1h	equ	0xFE2
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function _HMI_SetLeft *****************
  7836 ;; Defined at:
  7837 ;;		line 162 in file "HMI.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  pValue          1    wreg     unsigned char 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  pValue          1    0[BANK0 ] unsigned char 
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  1    wreg      void 
  7844 ;; Registers used:
  7845 ;;		wreg
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;Total ram usage:        1 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; Hardware stack levels required when called:    7
  7858 ;; This function calls:
  7859 ;;		Nothing
  7860 ;; This function is called by:
  7861 ;;		_Event_HMI_LeftButton
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text41
  7866  0145BE                     __ptext41:
  7867                           	opt stack 0
  7868  0145BE                     _HMI_SetLeft:
  7869                           	opt stack 15
  7870                           
  7871                           ; BSR set to: 1
  7872                           ;incstack = 0
  7873                           ;HMI_SetLeft@pValue stored from wreg
  7874  0145BE  0100               	movlb	0	; () banked
  7875  0145C0  6FC4               	movwf	HMI_SetLeft@pValue& (0+255),b
  7876                           
  7877                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
  7878  0145C2  0100               	movlb	0	; () banked
  7879  0145C4  B1C4               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
  7880  0145C6  D003               	bra	u6675
  7881  0145C8  0101               	movlb	1	; () banked
  7882  0145CA  9576               	bcf	(_HMIBoard+6)& (0+255),2,b
  7883  0145CC  D002               	bra	u6676
  7884  0145CE                     u6675:
  7885  0145CE  0101               	movlb	1	; () banked
  7886  0145D0  8576               	bsf	(_HMIBoard+6)& (0+255),2,b
  7887  0145D2                     u6676:
  7888                           
  7889                           ; BSR set to: 1
  7890  0145D2  0012               	return		;funcret
  7891  0145D4                     __end_of_HMI_SetLeft:
  7892                           	opt stack 0
  7893                           tosu	equ	0xFFF
  7894                           tosh	equ	0xFFE
  7895                           tosl	equ	0xFFD
  7896                           pclath	equ	0xFFA
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           postinc0	equ	0xFEE
  7904                           wreg	equ	0xFE8
  7905                           indf1	equ	0xFE7
  7906                           postdec1	equ	0xFE5
  7907                           fsr1h	equ	0xFE2
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function _HMI_SetNumber *****************
  7917 ;; Defined at:
  7918 ;;		line 221 in file "HMI.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  pInput          2   22[BANK0 ] int 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;		None
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  1    wreg      void 
  7925 ;; Registers used:
  7926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;Total ram usage:        2 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    9
  7939 ;; This function calls:
  7940 ;;		_HMI_SetSegments
  7941 ;;		_itos
  7942 ;; This function is called by:
  7943 ;;		_Event_TestButton
  7944 ;;		_Event_HMI_UpButton
  7945 ;;		_Event_HMI_DownButton
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text42
  7950  0142DA                     __ptext42:
  7951                           	opt stack 0
  7952  0142DA                     _HMI_SetNumber:
  7953                           	opt stack 13
  7954                           
  7955                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  7956                           
  7957                           ; BSR set to: 1
  7958                           ;incstack = 0
  7959  0142DA  C0DA  F0D0         	movff	HMI_SetNumber@pInput,itos@input
  7960  0142DE  C0DB  F0D1         	movff	HMI_SetNumber@pInput+1,itos@input+1
  7961  0142E2  0E70               	movlw	low _HMIBoard
  7962  0142E4  0100               	movlb	0	; () banked
  7963  0142E6  6FD2               	movwf	itos@destination& (0+255),b
  7964  0142E8  0E01               	movlw	high _HMIBoard
  7965  0142EA  0100               	movlb	0	; () banked
  7966  0142EC  6FD3               	movwf	(itos@destination+1)& (0+255),b
  7967  0142EE  EC9F  F091         	call	_itos	;wreg free
  7968                           
  7969                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  7970  0142F2  0E70               	movlw	low _HMIBoard
  7971  0142F4  0100               	movlb	0	; () banked
  7972  0142F6  6FC5               	movwf	HMI_SetSegments@pString& (0+255),b
  7973  0142F8  0E01               	movlw	high _HMIBoard
  7974  0142FA  0100               	movlb	0	; () banked
  7975  0142FC  6FC6               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  7976  0142FE  EC5D  F094         	call	_HMI_SetSegments	;wreg free
  7977  014302  0012               	return		;funcret
  7978  014304                     __end_of_HMI_SetNumber:
  7979                           	opt stack 0
  7980                           tosu	equ	0xFFF
  7981                           tosh	equ	0xFFE
  7982                           tosl	equ	0xFFD
  7983                           pclath	equ	0xFFA
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           indf1	equ	0xFE7
  7993                           postdec1	equ	0xFE5
  7994                           fsr1h	equ	0xFE2
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _itos *****************
  8004 ;; Defined at:
  8005 ;;		line 369 in file "Library/Types.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  input           2   12[BANK0 ] unsigned short 
  8008 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  8009 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  Out             2   20[BANK0 ] unsigned short 
  8012 ;;  Length          2   18[BANK0 ] unsigned short 
  8013 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  8014 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8015 ;; Return value:  Size  Location     Type
  8016 ;;                  1    wreg      void 
  8017 ;; Registers used:
  8018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8028 ;;Total ram usage:       10 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; Hardware stack levels required when called:    8
  8031 ;; This function calls:
  8032 ;;		___lwdiv
  8033 ;;		___lwmod
  8034 ;;		_reverse
  8035 ;; This function is called by:
  8036 ;;		_HMI_SetNumber
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           	psect	text43
  8041  01233E                     __ptext43:
  8042                           	opt stack 0
  8043  01233E                     _itos:
  8044                           	opt stack 13
  8045                           
  8046                           ;Types.c: 371: UINT16 Out = input;
  8047                           
  8048                           ;incstack = 0
  8049  01233E  C0D0  F0D8         	movff	itos@input,itos@Out
  8050  012342  C0D1  F0D9         	movff	itos@input+1,itos@Out+1
  8051                           
  8052                           ;Types.c: 372: UINT16 Length = 0;
  8053  012346  0E00               	movlw	0
  8054  012348  0100               	movlb	0	; () banked
  8055  01234A  6FD7               	movwf	(itos@Length+1)& (0+255),b
  8056  01234C  0E00               	movlw	0
  8057  01234E  6FD6               	movwf	itos@Length& (0+255),b
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;Types.c: 373: char *Data = destination;
  8061  012350  C0D2  F0D4         	movff	itos@destination,itos@Data
  8062  012354  C0D3  F0D5         	movff	itos@destination+1,itos@Data+1
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;Types.c: 374: if(Out == 0)
  8066  012358  0100               	movlb	0	; () banked
  8067  01235A  51D8               	movf	itos@Out& (0+255),w,b
  8068  01235C  0100               	movlb	0	; () banked
  8069  01235E  11D9               	iorwf	(itos@Out+1)& (0+255),w,b
  8070  012360  A4D8               	btfss	status,2,c
  8071  012362  D034               	goto	l10132
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;Types.c: 375: {
  8075                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8076  012364  C0D4  FFD9         	movff	itos@Data,fsr2l
  8077  012368  C0D5  FFDA         	movff	itos@Data+1,fsr2h
  8078  01236C  0E30               	movlw	48
  8079  01236E  6EDF               	movwf	indf2,c
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;Types.c: 377: Length = 1;
  8083  012370  0E00               	movlw	0
  8084  012372  0100               	movlb	0	; () banked
  8085  012374  6FD7               	movwf	(itos@Length+1)& (0+255),b
  8086  012376  0E01               	movlw	1
  8087  012378  6FD6               	movwf	itos@Length& (0+255),b
  8088                           
  8089                           ;Types.c: 378: }
  8090  01237A  D040               	goto	l10138
  8091  01237C                     l10124:
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;Types.c: 382: {
  8095                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8096  01237C  C0D8  F0CB         	movff	itos@Out,___lwmod@dividend
  8097  012380  C0D9  F0CC         	movff	itos@Out+1,___lwmod@dividend+1
  8098  012384  0E00               	movlw	0
  8099  012386  0100               	movlb	0	; () banked
  8100  012388  6FCE               	movwf	(___lwmod@divisor+1)& (0+255),b
  8101  01238A  0E0A               	movlw	10
  8102  01238C  6FCD               	movwf	___lwmod@divisor& (0+255),b
  8103  01238E  ECB0  F09C         	call	___lwmod	;wreg free
  8104  012392  0100               	movlb	0	; () banked
  8105  012394  51CB               	movf	?___lwmod& (0+255),w,b
  8106  012396  0F30               	addlw	48
  8107  012398  C0D4  FFD9         	movff	itos@Data,fsr2l
  8108  01239C  C0D5  FFDA         	movff	itos@Data+1,fsr2h
  8109  0123A0  6EDF               	movwf	indf2,c
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;Types.c: 384: Out /= 10;
  8113  0123A2  C0D8  F0C4         	movff	itos@Out,___lwdiv@dividend
  8114  0123A6  C0D9  F0C5         	movff	itos@Out+1,___lwdiv@dividend+1
  8115  0123AA  0E00               	movlw	0
  8116  0123AC  0100               	movlb	0	; () banked
  8117  0123AE  6FC7               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8118  0123B0  0E0A               	movlw	10
  8119  0123B2  6FC6               	movwf	___lwdiv@divisor& (0+255),b
  8120  0123B4  ECE0  F099         	call	___lwdiv	;wreg free
  8121  0123B8  C0C4  F0D8         	movff	?___lwdiv,itos@Out
  8122  0123BC  C0C5  F0D9         	movff	?___lwdiv+1,itos@Out+1
  8123                           
  8124                           ;Types.c: 385: Length ++;
  8125  0123C0  0100               	movlb	0	; () banked
  8126  0123C2  4BD6               	infsnz	itos@Length& (0+255),f,b
  8127  0123C4  2BD7               	incf	(itos@Length+1)& (0+255),f,b
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;Types.c: 386: Data++;
  8131  0123C6  0100               	movlb	0	; () banked
  8132  0123C8  4BD4               	infsnz	itos@Data& (0+255),f,b
  8133  0123CA  2BD5               	incf	(itos@Data+1)& (0+255),f,b
  8134  0123CC                     l10132:
  8135                           
  8136                           ; BSR set to: 0
  8137  0123CC  0100               	movlb	0	; () banked
  8138  0123CE  51D8               	movf	itos@Out& (0+255),w,b
  8139  0123D0  0100               	movlb	0	; () banked
  8140  0123D2  11D9               	iorwf	(itos@Out+1)& (0+255),w,b
  8141  0123D4  B4D8               	btfsc	status,2,c
  8142  0123D6  D008               	goto	l10136
  8143                           
  8144                           ; BSR set to: 0
  8145  0123D8  0100               	movlb	0	; () banked
  8146  0123DA  51D7               	movf	(itos@Length+1)& (0+255),w,b
  8147  0123DC  E105               	bnz	l10136
  8148  0123DE  0E06               	movlw	6
  8149  0123E0  0100               	movlb	0	; () banked
  8150  0123E2  5DD6               	subwf	itos@Length& (0+255),w,b
  8151  0123E4  A0D8               	btfss	status,0,c
  8152  0123E6  D7CA               	goto	l10124
  8153  0123E8                     l10136:
  8154                           
  8155                           ; BSR set to: 0
  8156                           ;Types.c: 387: }
  8157                           ;Types.c: 388: reverse(destination, Length);
  8158  0123E8  C0D2  F0C4         	movff	itos@destination,reverse@input
  8159  0123EC  C0D3  F0C5         	movff	itos@destination+1,reverse@input+1
  8160  0123F0  C0D6  F0C6         	movff	itos@Length,reverse@length
  8161  0123F4  C0D7  F0C7         	movff	itos@Length+1,reverse@length+1
  8162  0123F8  EC76  F09B         	call	_reverse	;wreg free
  8163  0123FC                     l10138:
  8164                           
  8165                           ;Types.c: 389: }
  8166                           ;Types.c: 390: destination[Length] = '\0';
  8167  0123FC  0100               	movlb	0	; () banked
  8168  0123FE  51D6               	movf	itos@Length& (0+255),w,b
  8169  012400  0100               	movlb	0	; () banked
  8170  012402  25D2               	addwf	itos@destination& (0+255),w,b
  8171  012404  6ED9               	movwf	fsr2l,c
  8172  012406  0100               	movlb	0	; () banked
  8173  012408  51D7               	movf	(itos@Length+1)& (0+255),w,b
  8174  01240A  0100               	movlb	0	; () banked
  8175  01240C  21D3               	addwfc	(itos@destination+1)& (0+255),w,b
  8176  01240E  6EDA               	movwf	fsr2h,c
  8177  012410  0E00               	movlw	0
  8178  012412  6EDF               	movwf	indf2,c
  8179                           
  8180                           ; BSR set to: 0
  8181  012414  0012               	return		;funcret
  8182  012416                     __end_of_itos:
  8183                           	opt stack 0
  8184                           tosu	equ	0xFFF
  8185                           tosh	equ	0xFFE
  8186                           tosl	equ	0xFFD
  8187                           pclath	equ	0xFFA
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           postinc0	equ	0xFEE
  8195                           wreg	equ	0xFE8
  8196                           indf1	equ	0xFE7
  8197                           postdec1	equ	0xFE5
  8198                           fsr1h	equ	0xFE2
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           fsr2h	equ	0xFDA
  8204                           fsr2l	equ	0xFD9
  8205                           status	equ	0xFD8
  8206                           
  8207 ;; *************** function _reverse *****************
  8208 ;; Defined at:
  8209 ;;		line 357 in file "Library/Types.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8212 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8213 ;;  length          2    2[BANK0 ] unsigned short 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8216 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8217 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8218 ;; Return value:  Size  Location     Type
  8219 ;;                  1    wreg      void 
  8220 ;; Registers used:
  8221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;Total ram usage:        7 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; Hardware stack levels required when called:    7
  8234 ;; This function calls:
  8235 ;;		Nothing
  8236 ;; This function is called by:
  8237 ;;		_itos
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text44
  8242  0136EC                     __ptext44:
  8243                           	opt stack 0
  8244  0136EC                     _reverse:
  8245                           	opt stack 13
  8246                           
  8247                           ;Types.c: 359: char tempVar,
  8248                           ;Types.c: 360: *iterator = input + length;
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;incstack = 0
  8252  0136EC  0100               	movlb	0	; () banked
  8253  0136EE  51C6               	movf	reverse@length& (0+255),w,b
  8254  0136F0  0100               	movlb	0	; () banked
  8255  0136F2  25C4               	addwf	reverse@input& (0+255),w,b
  8256  0136F4  0100               	movlb	0	; () banked
  8257  0136F6  6FC9               	movwf	reverse@iterator& (0+255),b
  8258  0136F8  0100               	movlb	0	; () banked
  8259  0136FA  51C7               	movf	(reverse@length+1)& (0+255),w,b
  8260  0136FC  0100               	movlb	0	; () banked
  8261  0136FE  21C5               	addwfc	(reverse@input+1)& (0+255),w,b
  8262  013700  0100               	movlb	0	; () banked
  8263  013702  6FCA               	movwf	(reverse@iterator+1)& (0+255),b
  8264                           
  8265                           ;Types.c: 362: while ( --iterator > input )
  8266  013704  D01A               	goto	l10066
  8267  013706                     l10058:
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;Types.c: 363: {
  8271                           ;Types.c: 364: tempVar = *input;
  8272  013706  C0C4  FFD9         	movff	reverse@input,fsr2l
  8273  01370A  C0C5  FFDA         	movff	reverse@input+1,fsr2h
  8274  01370E  50DF               	movf	indf2,w,c
  8275  013710  0100               	movlb	0	; () banked
  8276  013712  6FC8               	movwf	reverse@tempVar& (0+255),b
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;Types.c: 365: *input++=*iterator;
  8280  013714  C0C9  FFD9         	movff	reverse@iterator,fsr2l
  8281  013718  C0CA  FFDA         	movff	reverse@iterator+1,fsr2h
  8282  01371C  C0C4  FFE1         	movff	reverse@input,fsr1l
  8283  013720  C0C5  FFE2         	movff	reverse@input+1,fsr1h
  8284  013724  CFDF FFE7          	movff	indf2,indf1
  8285                           
  8286                           ; BSR set to: 0
  8287  013728  0100               	movlb	0	; () banked
  8288  01372A  4BC4               	infsnz	reverse@input& (0+255),f,b
  8289  01372C  2BC5               	incf	(reverse@input+1)& (0+255),f,b
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;Types.c: 366: *iterator=tempVar;
  8293  01372E  C0C9  FFD9         	movff	reverse@iterator,fsr2l
  8294  013732  C0CA  FFDA         	movff	reverse@iterator+1,fsr2h
  8295  013736  C0C8  FFDF         	movff	reverse@tempVar,indf2
  8296  01373A                     l10066:
  8297                           
  8298                           ; BSR set to: 0
  8299  01373A  0100               	movlb	0	; () banked
  8300  01373C  07C9               	decf	reverse@iterator& (0+255),f,b
  8301  01373E  A0D8               	btfss	status,0,c
  8302  013740  07CA               	decf	(reverse@iterator+1)& (0+255),f,b
  8303  013742  0100               	movlb	0	; () banked
  8304  013744  51C9               	movf	reverse@iterator& (0+255),w,b
  8305  013746  0100               	movlb	0	; () banked
  8306  013748  5DC4               	subwf	reverse@input& (0+255),w,b
  8307  01374A  0100               	movlb	0	; () banked
  8308  01374C  51CA               	movf	(reverse@iterator+1)& (0+255),w,b
  8309  01374E  0100               	movlb	0	; () banked
  8310  013750  59C5               	subwfb	(reverse@input+1)& (0+255),w,b
  8311  013752  B0D8               	btfsc	status,0,c
  8312  013754  0012               	return	
  8313  013756  D7D7               	goto	l10058
  8314  013758                     __end_of_reverse:
  8315                           	opt stack 0
  8316                           tosu	equ	0xFFF
  8317                           tosh	equ	0xFFE
  8318                           tosl	equ	0xFFD
  8319                           pclath	equ	0xFFA
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           postinc0	equ	0xFEE
  8327                           wreg	equ	0xFE8
  8328                           indf1	equ	0xFE7
  8329                           postdec1	equ	0xFE5
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function ___lwmod *****************
  8340 ;; Defined at:
  8341 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  dividend        2    7[BANK0 ] unsigned int 
  8344 ;;  divisor         2    9[BANK0 ] unsigned int 
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;  counter         1   11[BANK0 ] unsigned char 
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  2    7[BANK0 ] unsigned int 
  8349 ;; Registers used:
  8350 ;;		wreg, status,2, status,0
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8356 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;Total ram usage:        5 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    7
  8363 ;; This function calls:
  8364 ;;		Nothing
  8365 ;; This function is called by:
  8366 ;;		_itos
  8367 ;;		_printf
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text45
  8372  013960                     __ptext45:
  8373                           	opt stack 0
  8374  013960                     ___lwmod:
  8375                           	opt stack 20
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;incstack = 0
  8379  013960  0100               	movlb	0	; () banked
  8380  013962  51CD               	movf	___lwmod@divisor& (0+255),w,b
  8381  013964  0100               	movlb	0	; () banked
  8382  013966  11CE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8383  013968  B4D8               	btfsc	status,2,c
  8384  01396A  D026               	goto	l2499
  8385                           
  8386                           ; BSR set to: 0
  8387  01396C  0E01               	movlw	1
  8388  01396E  0100               	movlb	0	; () banked
  8389  013970  6FCF               	movwf	___lwmod@counter& (0+255),b
  8390  013972  D006               	goto	l10096
  8391  013974                     l10094:
  8392                           
  8393                           ; BSR set to: 0
  8394  013974  0100               	movlb	0	; () banked
  8395  013976  90D8               	bcf	status,0,c
  8396  013978  37CD               	rlcf	___lwmod@divisor& (0+255),f,b
  8397  01397A  37CE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8398  01397C  0100               	movlb	0	; () banked
  8399  01397E  2BCF               	incf	___lwmod@counter& (0+255),f,b
  8400  013980                     l10096:
  8401                           
  8402                           ; BSR set to: 0
  8403  013980  0100               	movlb	0	; () banked
  8404  013982  AFCE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8405  013984  D7F7               	goto	l10094
  8406  013986                     l10098:
  8407                           
  8408                           ; BSR set to: 0
  8409  013986  0100               	movlb	0	; () banked
  8410  013988  51CD               	movf	___lwmod@divisor& (0+255),w,b
  8411  01398A  0100               	movlb	0	; () banked
  8412  01398C  5DCB               	subwf	___lwmod@dividend& (0+255),w,b
  8413  01398E  0100               	movlb	0	; () banked
  8414  013990  51CE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8415  013992  0100               	movlb	0	; () banked
  8416  013994  59CC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8417  013996  A0D8               	btfss	status,0,c
  8418  013998  D008               	goto	l10102
  8419                           
  8420                           ; BSR set to: 0
  8421  01399A  0100               	movlb	0	; () banked
  8422  01399C  51CD               	movf	___lwmod@divisor& (0+255),w,b
  8423  01399E  0100               	movlb	0	; () banked
  8424  0139A0  5FCB               	subwf	___lwmod@dividend& (0+255),f,b
  8425  0139A2  0100               	movlb	0	; () banked
  8426  0139A4  51CE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8427  0139A6  0100               	movlb	0	; () banked
  8428  0139A8  5BCC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8429  0139AA                     l10102:
  8430                           
  8431                           ; BSR set to: 0
  8432  0139AA  0100               	movlb	0	; () banked
  8433  0139AC  90D8               	bcf	status,0,c
  8434  0139AE  33CE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8435  0139B0  33CD               	rrcf	___lwmod@divisor& (0+255),f,b
  8436                           
  8437                           ; BSR set to: 0
  8438  0139B2  0100               	movlb	0	; () banked
  8439  0139B4  2FCF               	decfsz	___lwmod@counter& (0+255),f,b
  8440  0139B6  D7E7               	goto	l10098
  8441  0139B8                     l2499:
  8442                           
  8443                           ; BSR set to: 0
  8444  0139B8  C0CB  F0CB         	movff	___lwmod@dividend,?___lwmod
  8445  0139BC  C0CC  F0CC         	movff	___lwmod@dividend+1,?___lwmod+1
  8446                           
  8447                           ; BSR set to: 0
  8448  0139C0  0012               	return		;funcret
  8449  0139C2                     __end_of___lwmod:
  8450                           	opt stack 0
  8451                           tosu	equ	0xFFF
  8452                           tosh	equ	0xFFE
  8453                           tosl	equ	0xFFD
  8454                           pclath	equ	0xFFA
  8455                           tblptru	equ	0xFF8
  8456                           tblptrh	equ	0xFF7
  8457                           tblptrl	equ	0xFF6
  8458                           tablat	equ	0xFF5
  8459                           prodh	equ	0xFF4
  8460                           prodl	equ	0xFF3
  8461                           postinc0	equ	0xFEE
  8462                           wreg	equ	0xFE8
  8463                           indf1	equ	0xFE7
  8464                           postdec1	equ	0xFE5
  8465                           fsr1h	equ	0xFE2
  8466                           fsr1l	equ	0xFE1
  8467                           indf2	equ	0xFDF
  8468                           postinc2	equ	0xFDE
  8469                           postdec2	equ	0xFDD
  8470                           fsr2h	equ	0xFDA
  8471                           fsr2l	equ	0xFD9
  8472                           status	equ	0xFD8
  8473                           
  8474 ;; *************** function ___lwdiv *****************
  8475 ;; Defined at:
  8476 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;  dividend        2    0[BANK0 ] unsigned int 
  8479 ;;  divisor         2    2[BANK0 ] unsigned int 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  quotient        2    5[BANK0 ] unsigned int 
  8482 ;;  counter         1    4[BANK0 ] unsigned char 
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  2    0[BANK0 ] unsigned int 
  8485 ;; Registers used:
  8486 ;;		wreg, status,2, status,0
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8492 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;Total ram usage:        7 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; Hardware stack levels required when called:    7
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_itos
  8503 ;;		_printf
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text46
  8508  0133C0                     __ptext46:
  8509                           	opt stack 0
  8510  0133C0                     ___lwdiv:
  8511                           	opt stack 20
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;incstack = 0
  8515  0133C0  0E00               	movlw	0
  8516  0133C2  0100               	movlb	0	; () banked
  8517  0133C4  6FCA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8518  0133C6  0E00               	movlw	0
  8519  0133C8  6FC9               	movwf	___lwdiv@quotient& (0+255),b
  8520                           
  8521                           ; BSR set to: 0
  8522  0133CA  0100               	movlb	0	; () banked
  8523  0133CC  51C6               	movf	___lwdiv@divisor& (0+255),w,b
  8524  0133CE  0100               	movlb	0	; () banked
  8525  0133D0  11C7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8526  0133D2  B4D8               	btfsc	status,2,c
  8527  0133D4  D02C               	goto	l2489
  8528                           
  8529                           ; BSR set to: 0
  8530  0133D6  0E01               	movlw	1
  8531  0133D8  0100               	movlb	0	; () banked
  8532  0133DA  6FC8               	movwf	___lwdiv@counter& (0+255),b
  8533  0133DC  D006               	goto	l10076
  8534  0133DE                     l10074:
  8535                           
  8536                           ; BSR set to: 0
  8537  0133DE  0100               	movlb	0	; () banked
  8538  0133E0  90D8               	bcf	status,0,c
  8539  0133E2  37C6               	rlcf	___lwdiv@divisor& (0+255),f,b
  8540  0133E4  37C7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8541  0133E6  0100               	movlb	0	; () banked
  8542  0133E8  2BC8               	incf	___lwdiv@counter& (0+255),f,b
  8543  0133EA                     l10076:
  8544                           
  8545                           ; BSR set to: 0
  8546  0133EA  0100               	movlb	0	; () banked
  8547  0133EC  AFC7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8548  0133EE  D7F7               	goto	l10074
  8549  0133F0                     l10078:
  8550                           
  8551                           ; BSR set to: 0
  8552  0133F0  0100               	movlb	0	; () banked
  8553  0133F2  90D8               	bcf	status,0,c
  8554  0133F4  37C9               	rlcf	___lwdiv@quotient& (0+255),f,b
  8555  0133F6  37CA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8556                           
  8557                           ; BSR set to: 0
  8558  0133F8  0100               	movlb	0	; () banked
  8559  0133FA  51C6               	movf	___lwdiv@divisor& (0+255),w,b
  8560  0133FC  0100               	movlb	0	; () banked
  8561  0133FE  5DC4               	subwf	___lwdiv@dividend& (0+255),w,b
  8562  013400  0100               	movlb	0	; () banked
  8563  013402  51C7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8564  013404  0100               	movlb	0	; () banked
  8565  013406  59C5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8566  013408  A0D8               	btfss	status,0,c
  8567  01340A  D00A               	goto	l10086
  8568                           
  8569                           ; BSR set to: 0
  8570  01340C  0100               	movlb	0	; () banked
  8571  01340E  51C6               	movf	___lwdiv@divisor& (0+255),w,b
  8572  013410  0100               	movlb	0	; () banked
  8573  013412  5FC4               	subwf	___lwdiv@dividend& (0+255),f,b
  8574  013414  0100               	movlb	0	; () banked
  8575  013416  51C7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8576  013418  0100               	movlb	0	; () banked
  8577  01341A  5BC5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8578                           
  8579                           ; BSR set to: 0
  8580  01341C  0100               	movlb	0	; () banked
  8581  01341E  81C9               	bsf	___lwdiv@quotient& (0+255),0,b
  8582  013420                     l10086:
  8583                           
  8584                           ; BSR set to: 0
  8585  013420  0100               	movlb	0	; () banked
  8586  013422  90D8               	bcf	status,0,c
  8587  013424  33C7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8588  013426  33C6               	rrcf	___lwdiv@divisor& (0+255),f,b
  8589                           
  8590                           ; BSR set to: 0
  8591  013428  0100               	movlb	0	; () banked
  8592  01342A  2FC8               	decfsz	___lwdiv@counter& (0+255),f,b
  8593  01342C  D7E1               	goto	l10078
  8594  01342E                     l2489:
  8595                           
  8596                           ; BSR set to: 0
  8597  01342E  C0C9  F0C4         	movff	___lwdiv@quotient,?___lwdiv
  8598  013432  C0CA  F0C5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8599                           
  8600                           ; BSR set to: 0
  8601  013436  0012               	return		;funcret
  8602  013438                     __end_of___lwdiv:
  8603                           	opt stack 0
  8604                           tosu	equ	0xFFF
  8605                           tosh	equ	0xFFE
  8606                           tosl	equ	0xFFD
  8607                           pclath	equ	0xFFA
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           postinc0	equ	0xFEE
  8615                           wreg	equ	0xFE8
  8616                           indf1	equ	0xFE7
  8617                           postdec1	equ	0xFE5
  8618                           fsr1h	equ	0xFE2
  8619                           fsr1l	equ	0xFE1
  8620                           indf2	equ	0xFDF
  8621                           postinc2	equ	0xFDE
  8622                           postdec2	equ	0xFDD
  8623                           fsr2h	equ	0xFDA
  8624                           fsr2l	equ	0xFD9
  8625                           status	equ	0xFD8
  8626                           
  8627 ;; *************** function _HMI_SetSegments *****************
  8628 ;; Defined at:
  8629 ;;		line 226 in file "HMI.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  8632 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  in              2    4[BANK0 ] unsigned short 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      void 
  8637 ;; Registers used:
  8638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;Total ram usage:        5 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    8
  8651 ;; This function calls:
  8652 ;;		_ToSegment
  8653 ;; This function is called by:
  8654 ;;		_HMI_SetNumber
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           	psect	text47
  8659  0128BA                     __ptext47:
  8660                           	opt stack 0
  8661  0128BA                     _HMI_SetSegments:
  8662                           	opt stack 13
  8663                           
  8664                           ;HMI.c: 228: UINT16 in=0;
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;incstack = 0
  8668  0128BA  0E00               	movlw	0
  8669  0128BC  0100               	movlb	0	; () banked
  8670  0128BE  6FC9               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  8671  0128C0  0E00               	movlw	0
  8672  0128C2  6FC8               	movwf	HMI_SetSegments@in& (0+255),b
  8673                           
  8674                           ;HMI.c: 229: while(*pString)
  8675  0128C4  D038               	goto	l10204
  8676  0128C6                     l10188:
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;HMI.c: 230: {
  8680                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  8681  0128C6  0E70               	movlw	low _HMIBoard
  8682  0128C8  0100               	movlb	0	; () banked
  8683  0128CA  25C8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8684  0128CC  6ED9               	movwf	fsr2l,c
  8685  0128CE  0E01               	movlw	high _HMIBoard
  8686  0128D0  0100               	movlb	0	; () banked
  8687  0128D2  21C9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8688  0128D4  6EDA               	movwf	fsr2h,c
  8689  0128D6  C0C5  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  8690  0128DA  C0C6  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  8691  0128DE  50E7               	movf	indf1,w,c
  8692  0128E0  ECEC  F083         	call	_ToSegment
  8693  0128E4  6EDF               	movwf	indf2,c
  8694                           
  8695                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  8696  0128E6  0E70               	movlw	low _HMIBoard
  8697  0128E8  0100               	movlb	0	; () banked
  8698  0128EA  25C8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8699  0128EC  6ED9               	movwf	fsr2l,c
  8700  0128EE  0E01               	movlw	high _HMIBoard
  8701  0128F0  0100               	movlb	0	; () banked
  8702  0128F2  21C9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8703  0128F4  6EDA               	movwf	fsr2h,c
  8704  0128F6  0E80               	movlw	128
  8705  0128F8  18DE               	xorwf	postinc2,w,c
  8706  0128FA  A4D8               	btfss	status,2,c
  8707  0128FC  D00E               	goto	l10196
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;HMI.c: 234: {
  8711                           ;HMI.c: 235: in--;
  8712  0128FE  0100               	movlb	0	; () banked
  8713  012900  07C8               	decf	HMI_SetSegments@in& (0+255),f,b
  8714  012902  A0D8               	btfss	status,0,c
  8715  012904  07C9               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  8719  012906  0E70               	movlw	low _HMIBoard
  8720  012908  0100               	movlb	0	; () banked
  8721  01290A  25C8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8722  01290C  6ED9               	movwf	fsr2l,c
  8723  01290E  0E01               	movlw	high _HMIBoard
  8724  012910  0100               	movlb	0	; () banked
  8725  012912  21C9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8726  012914  6EDA               	movwf	fsr2h,c
  8727  012916  0E00               	movlw	0
  8728  012918  8EDB               	bsf	plusw2,7,c
  8729  01291A                     l10196:
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;HMI.c: 237: }
  8733                           ;HMI.c: 239: pString++;
  8734  01291A  0100               	movlb	0	; () banked
  8735  01291C  4BC5               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  8736  01291E  2BC6               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;HMI.c: 240: in++;
  8740  012920  0100               	movlb	0	; () banked
  8741  012922  4BC8               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8742  012924  2BC9               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;HMI.c: 241: if (in>=6)
  8746  012926  0100               	movlb	0	; () banked
  8747  012928  51C9               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8748  01292A  E11A               	bnz	l10210
  8749  01292C  0E06               	movlw	6
  8750  01292E  0100               	movlb	0	; () banked
  8751  012930  5DC8               	subwf	HMI_SetSegments@in& (0+255),w,b
  8752  012932  B0D8               	btfsc	status,0,c
  8753  012934  D015               	goto	l10210
  8754  012936                     l10204:
  8755                           
  8756                           ; BSR set to: 0
  8757  012936  C0C5  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  8758  01293A  C0C6  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  8759  01293E  50DF               	movf	indf2,w,c
  8760  012940  B4D8               	btfsc	status,2,c
  8761  012942  D00E               	goto	l10210
  8762  012944  D7C0               	goto	l10188
  8763  012946                     l10206:
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;HMI.c: 245: {
  8767                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  8768  012946  0E70               	movlw	low _HMIBoard
  8769  012948  0100               	movlb	0	; () banked
  8770  01294A  25C8               	addwf	HMI_SetSegments@in& (0+255),w,b
  8771  01294C  6ED9               	movwf	fsr2l,c
  8772  01294E  0E01               	movlw	high _HMIBoard
  8773  012950  0100               	movlb	0	; () banked
  8774  012952  21C9               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8775  012954  6EDA               	movwf	fsr2h,c
  8776  012956  0E00               	movlw	0
  8777  012958  6EDF               	movwf	indf2,c
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;HMI.c: 247: in++;
  8781  01295A  0100               	movlb	0	; () banked
  8782  01295C  4BC8               	infsnz	HMI_SetSegments@in& (0+255),f,b
  8783  01295E  2BC9               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8784  012960                     l10210:
  8785                           
  8786                           ; BSR set to: 0
  8787  012960  0100               	movlb	0	; () banked
  8788  012962  51C9               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8789  012964  E106               	bnz	l1215
  8790  012966  0E06               	movlw	6
  8791  012968  0100               	movlb	0	; () banked
  8792  01296A  5DC8               	subwf	HMI_SetSegments@in& (0+255),w,b
  8793  01296C  B0D8               	btfsc	status,0,c
  8794  01296E  0012               	return	
  8795  012970  D7EA               	goto	l10206
  8796  012972                     l1215:
  8797                           
  8798                           ; BSR set to: 0
  8799  012972  0012               	return		;funcret
  8800  012974                     __end_of_HMI_SetSegments:
  8801                           	opt stack 0
  8802                           tosu	equ	0xFFF
  8803                           tosh	equ	0xFFE
  8804                           tosl	equ	0xFFD
  8805                           pclath	equ	0xFFA
  8806                           tblptru	equ	0xFF8
  8807                           tblptrh	equ	0xFF7
  8808                           tblptrl	equ	0xFF6
  8809                           tablat	equ	0xFF5
  8810                           prodh	equ	0xFF4
  8811                           prodl	equ	0xFF3
  8812                           postinc0	equ	0xFEE
  8813                           wreg	equ	0xFE8
  8814                           indf1	equ	0xFE7
  8815                           postdec1	equ	0xFE5
  8816                           fsr1h	equ	0xFE2
  8817                           fsr1l	equ	0xFE1
  8818                           indf2	equ	0xFDF
  8819                           postinc2	equ	0xFDE
  8820                           postdec2	equ	0xFDD
  8821                           plusw2	equ	0xFDB
  8822                           fsr2h	equ	0xFDA
  8823                           fsr2l	equ	0xFD9
  8824                           status	equ	0xFD8
  8825                           
  8826 ;; *************** function _ToSegment *****************
  8827 ;; Defined at:
  8828 ;;		line 284 in file "Library/Types.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;  pCHR            1    wreg     unsigned char 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  pCHR            1    0[BANK0 ] unsigned char 
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      unsigned char 
  8835 ;; Registers used:
  8836 ;;		wreg, status,2, status,0
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;Total ram usage:        1 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    7
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_HMI_SetSegments
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text48
  8857  0107D8                     __ptext48:
  8858                           	opt stack 0
  8859  0107D8                     _ToSegment:
  8860                           	opt stack 13
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;incstack = 0
  8864                           ;ToSegment@pCHR stored from wreg
  8865  0107D8  0100               	movlb	0	; () banked
  8866  0107DA  6FC4               	movwf	ToSegment@pCHR& (0+255),b
  8867                           
  8868                           ;Types.c: 286: switch(pCHR)
  8869  0107DC  D07E               	goto	l10050
  8870  0107DE                     l9796:
  8871  0107DE  0E3F               	movlw	63
  8872  0107E0  0012               	return	
  8873  0107E2                     l9800:
  8874  0107E2  0E06               	movlw	6
  8875  0107E4  0012               	return	
  8876  0107E6                     l9804:
  8877  0107E6  0E5B               	movlw	91
  8878  0107E8  0012               	return	
  8879  0107EA                     l9808:
  8880  0107EA  0E4F               	movlw	79
  8881  0107EC  0012               	return	
  8882  0107EE                     l9812:
  8883  0107EE  0E66               	movlw	102
  8884  0107F0  0012               	return	
  8885  0107F2                     l9816:
  8886  0107F2  0E6D               	movlw	109
  8887  0107F4  0012               	return	
  8888  0107F6                     l9820:
  8889  0107F6  0E7D               	movlw	125
  8890  0107F8  0012               	return	
  8891  0107FA                     l9824:
  8892  0107FA  0E07               	movlw	7
  8893  0107FC  0012               	return	
  8894  0107FE                     l9828:
  8895  0107FE  0E7F               	movlw	127
  8896  010800  0012               	return	
  8897  010802                     l9832:
  8898  010802  0E6F               	movlw	111
  8899  010804  0012               	return	
  8900  010806                     l9836:
  8901  010806  0E5F               	movlw	95
  8902  010808  0012               	return	
  8903  01080A                     l9840:
  8904  01080A  0E7C               	movlw	124
  8905  01080C  0012               	return	
  8906  01080E                     l9844:
  8907  01080E  0E58               	movlw	88
  8908  010810  0012               	return	
  8909  010812                     l9848:
  8910  010812  0E5E               	movlw	94
  8911  010814  0012               	return	
  8912  010816                     l9852:
  8913  010816  0E7B               	movlw	123
  8914  010818  0012               	return	
  8915  01081A                     l9856:
  8916  01081A  0E71               	movlw	113
  8917  01081C  0012               	return	
  8918  01081E                     l9860:
  8919  01081E  0E6F               	movlw	111
  8920  010820  0012               	return	
  8921  010822                     l9864:
  8922  010822  0E74               	movlw	116
  8923  010824  0012               	return	
  8924  010826                     l9868:
  8925  010826  0E04               	movlw	4
  8926  010828  0012               	return	
  8927  01082A                     l9872:
  8928  01082A  0E0E               	movlw	14
  8929  01082C  0012               	return	
  8930  01082E                     l9876:
  8931  01082E  0E7A               	movlw	122
  8932  010830  0012               	return	
  8933  010832                     l9880:
  8934  010832  0E06               	movlw	6
  8935  010834  0012               	return	
  8936  010836                     l9884:
  8937  010836  0E14               	movlw	20
  8938  010838  0012               	return	
  8939  01083A                     l9888:
  8940  01083A  0E54               	movlw	84
  8941  01083C  0012               	return	
  8942  01083E                     l9892:
  8943  01083E  0E5C               	movlw	92
  8944  010840  0012               	return	
  8945  010842                     l9896:
  8946  010842  0E73               	movlw	115
  8947  010844  0012               	return	
  8948  010846                     l9900:
  8949  010846  0E67               	movlw	103
  8950  010848  0012               	return	
  8951  01084A                     l9904:
  8952  01084A  0E50               	movlw	80
  8953  01084C  0012               	return	
  8954  01084E                     l9908:
  8955  01084E  0E6D               	movlw	109
  8956  010850  0012               	return	
  8957  010852                     l9912:
  8958  010852  0E78               	movlw	120
  8959  010854  0012               	return	
  8960  010856                     l9916:
  8961  010856  0E1C               	movlw	28
  8962  010858  0012               	return	
  8963  01085A                     l9920:
  8964  01085A  0E62               	movlw	98
  8965  01085C  0012               	return	
  8966  01085E                     l9924:
  8967  01085E  0E2A               	movlw	42
  8968  010860  0012               	return	
  8969  010862                     l9928:
  8970  010862  0E64               	movlw	100
  8971  010864  0012               	return	
  8972  010866                     l9932:
  8973  010866  0E6E               	movlw	110
  8974  010868  0012               	return	
  8975  01086A                     l9936:
  8976  01086A  0E5B               	movlw	91
  8977  01086C  0012               	return	
  8978  01086E                     l9940:
  8979  01086E  0E77               	movlw	119
  8980  010870  0012               	return	
  8981  010872                     l9944:
  8982  010872  0E7F               	movlw	127
  8983  010874  0012               	return	
  8984  010876                     l9948:
  8985  010876  0E39               	movlw	57
  8986  010878  0012               	return	
  8987  01087A                     l9952:
  8988  01087A  0E3F               	movlw	63
  8989  01087C  0012               	return	
  8990  01087E                     l9956:
  8991  01087E  0E79               	movlw	121
  8992  010880  0012               	return	
  8993  010882                     l9960:
  8994  010882  0E71               	movlw	113
  8995  010884  0012               	return	
  8996  010886                     l9964:
  8997  010886  0E3D               	movlw	61
  8998  010888  0012               	return	
  8999  01088A                     l9968:
  9000  01088A  0E76               	movlw	118
  9001  01088C  0012               	return	
  9002  01088E                     l9972:
  9003  01088E  0E06               	movlw	6
  9004  010890  0012               	return	
  9005  010892                     l9976:
  9006  010892  0E1E               	movlw	30
  9007  010894  0012               	return	
  9008  010896                     l9980:
  9009  010896  0E57               	movlw	87
  9010  010898  0012               	return	
  9011  01089A                     l9984:
  9012  01089A  0E38               	movlw	56
  9013  01089C  0012               	return	
  9014  01089E                     l9988:
  9015  01089E  0E76               	movlw	118
  9016  0108A0  0012               	return	
  9017  0108A2                     l9992:
  9018  0108A2  0E76               	movlw	118
  9019  0108A4  0012               	return	
  9020  0108A6                     l9996:
  9021  0108A6  0E3F               	movlw	63
  9022  0108A8  0012               	return	
  9023  0108AA                     l10000:
  9024  0108AA  0E73               	movlw	115
  9025  0108AC  0012               	return	
  9026  0108AE                     l10004:
  9027  0108AE  0E3F               	movlw	63
  9028  0108B0  0012               	return	
  9029  0108B2                     l10008:
  9030  0108B2  0E77               	movlw	119
  9031  0108B4  0012               	return	
  9032  0108B6                     l10012:
  9033  0108B6  0E6D               	movlw	109
  9034  0108B8  0012               	return	
  9035  0108BA                     l10016:
  9036  0108BA  0E31               	movlw	49
  9037  0108BC  0012               	return	
  9038  0108BE                     l10020:
  9039  0108BE  0E3E               	movlw	62
  9040  0108C0  0012               	return	
  9041  0108C2                     l10024:
  9042  0108C2  0E3E               	movlw	62
  9043  0108C4  0012               	return	
  9044  0108C6                     l10028:
  9045  0108C6  0E7E               	movlw	126
  9046  0108C8  0012               	return	
  9047  0108CA                     l10032:
  9048  0108CA  0E76               	movlw	118
  9049  0108CC  0012               	return	
  9050  0108CE                     l10036:
  9051  0108CE  0E66               	movlw	102
  9052  0108D0  0012               	return	
  9053  0108D2                     l10040:
  9054  0108D2  0E5B               	movlw	91
  9055  0108D4  0012               	return	
  9056  0108D6                     l10044:
  9057  0108D6  0E80               	movlw	128
  9058  0108D8  0012               	return	
  9059  0108DA                     l10050:
  9060  0108DA  0100               	movlb	0	; () banked
  9061  0108DC  51C4               	movf	ToSegment@pCHR& (0+255),w,b
  9062                           
  9063                           ; Switch size 1, requested type "space"
  9064                           ; Number of cases is 63, Range of values is 46 to 122
  9065                           ; switch strategies available:
  9066                           ; Name         Instructions Cycles
  9067                           ; simple_byte          190    96 (average)
  9068                           ;	Chosen strategy is simple_byte
  9069  0108DE  0A2E               	xorlw	46	; case 46
  9070  0108E0  B4D8               	btfsc	status,2,c
  9071  0108E2  D7F9               	goto	l10044
  9072  0108E4  0A1E               	xorlw	30	; case 48
  9073  0108E6  B4D8               	btfsc	status,2,c
  9074  0108E8  D77A               	goto	l9796
  9075  0108EA  0A01               	xorlw	1	; case 49
  9076  0108EC  B4D8               	btfsc	status,2,c
  9077  0108EE  D779               	goto	l9800
  9078  0108F0  0A03               	xorlw	3	; case 50
  9079  0108F2  B4D8               	btfsc	status,2,c
  9080  0108F4  D778               	goto	l9804
  9081  0108F6  0A01               	xorlw	1	; case 51
  9082  0108F8  B4D8               	btfsc	status,2,c
  9083  0108FA  D777               	goto	l9808
  9084  0108FC  0A07               	xorlw	7	; case 52
  9085  0108FE  B4D8               	btfsc	status,2,c
  9086  010900  D776               	goto	l9812
  9087  010902  0A01               	xorlw	1	; case 53
  9088  010904  B4D8               	btfsc	status,2,c
  9089  010906  D775               	goto	l9816
  9090  010908  0A03               	xorlw	3	; case 54
  9091  01090A  B4D8               	btfsc	status,2,c
  9092  01090C  D774               	goto	l9820
  9093  01090E  0A01               	xorlw	1	; case 55
  9094  010910  B4D8               	btfsc	status,2,c
  9095  010912  D773               	goto	l9824
  9096  010914  0A0F               	xorlw	15	; case 56
  9097  010916  B4D8               	btfsc	status,2,c
  9098  010918  D772               	goto	l9828
  9099  01091A  0A01               	xorlw	1	; case 57
  9100  01091C  B4D8               	btfsc	status,2,c
  9101  01091E  D771               	goto	l9832
  9102  010920  0A78               	xorlw	120	; case 65
  9103  010922  B4D8               	btfsc	status,2,c
  9104  010924  D7A4               	goto	l9940
  9105  010926  0A03               	xorlw	3	; case 66
  9106  010928  B4D8               	btfsc	status,2,c
  9107  01092A  D7A3               	goto	l9944
  9108  01092C  0A01               	xorlw	1	; case 67
  9109  01092E  B4D8               	btfsc	status,2,c
  9110  010930  D7A2               	goto	l9948
  9111  010932  0A07               	xorlw	7	; case 68
  9112  010934  B4D8               	btfsc	status,2,c
  9113  010936  D7A1               	goto	l9952
  9114  010938  0A01               	xorlw	1	; case 69
  9115  01093A  B4D8               	btfsc	status,2,c
  9116  01093C  D7A0               	goto	l9956
  9117  01093E  0A03               	xorlw	3	; case 70
  9118  010940  B4D8               	btfsc	status,2,c
  9119  010942  D79F               	goto	l9960
  9120  010944  0A01               	xorlw	1	; case 71
  9121  010946  B4D8               	btfsc	status,2,c
  9122  010948  D79E               	goto	l9964
  9123  01094A  0A0F               	xorlw	15	; case 72
  9124  01094C  B4D8               	btfsc	status,2,c
  9125  01094E  D79D               	goto	l9968
  9126  010950  0A01               	xorlw	1	; case 73
  9127  010952  B4D8               	btfsc	status,2,c
  9128  010954  D79C               	goto	l9972
  9129  010956  0A03               	xorlw	3	; case 74
  9130  010958  B4D8               	btfsc	status,2,c
  9131  01095A  D79B               	goto	l9976
  9132  01095C  0A01               	xorlw	1	; case 75
  9133  01095E  B4D8               	btfsc	status,2,c
  9134  010960  D79A               	goto	l9980
  9135  010962  0A07               	xorlw	7	; case 76
  9136  010964  B4D8               	btfsc	status,2,c
  9137  010966  D799               	goto	l9984
  9138  010968  0A01               	xorlw	1	; case 77
  9139  01096A  B4D8               	btfsc	status,2,c
  9140  01096C  D798               	goto	l9988
  9141  01096E  0A03               	xorlw	3	; case 78
  9142  010970  B4D8               	btfsc	status,2,c
  9143  010972  D797               	goto	l9992
  9144  010974  0A01               	xorlw	1	; case 79
  9145  010976  B4D8               	btfsc	status,2,c
  9146  010978  D796               	goto	l9996
  9147  01097A  0A1F               	xorlw	31	; case 80
  9148  01097C  B4D8               	btfsc	status,2,c
  9149  01097E  D795               	goto	l10000
  9150  010980  0A01               	xorlw	1	; case 81
  9151  010982  B4D8               	btfsc	status,2,c
  9152  010984  D794               	goto	l10004
  9153  010986  0A03               	xorlw	3	; case 82
  9154  010988  B4D8               	btfsc	status,2,c
  9155  01098A  D793               	goto	l10008
  9156  01098C  0A01               	xorlw	1	; case 83
  9157  01098E  B4D8               	btfsc	status,2,c
  9158  010990  D792               	goto	l10012
  9159  010992  0A07               	xorlw	7	; case 84
  9160  010994  B4D8               	btfsc	status,2,c
  9161  010996  D791               	goto	l10016
  9162  010998  0A01               	xorlw	1	; case 85
  9163  01099A  B4D8               	btfsc	status,2,c
  9164  01099C  D790               	goto	l10020
  9165  01099E  0A03               	xorlw	3	; case 86
  9166  0109A0  B4D8               	btfsc	status,2,c
  9167  0109A2  D78F               	goto	l10024
  9168  0109A4  0A01               	xorlw	1	; case 87
  9169  0109A6  B4D8               	btfsc	status,2,c
  9170  0109A8  D78E               	goto	l10028
  9171  0109AA  0A0F               	xorlw	15	; case 88
  9172  0109AC  B4D8               	btfsc	status,2,c
  9173  0109AE  D78D               	goto	l10032
  9174  0109B0  0A01               	xorlw	1	; case 89
  9175  0109B2  B4D8               	btfsc	status,2,c
  9176  0109B4  D78C               	goto	l10036
  9177  0109B6  0A03               	xorlw	3	; case 90
  9178  0109B8  B4D8               	btfsc	status,2,c
  9179  0109BA  D78B               	goto	l10040
  9180  0109BC  0A3B               	xorlw	59	; case 97
  9181  0109BE  B4D8               	btfsc	status,2,c
  9182  0109C0  D722               	goto	l9836
  9183  0109C2  0A03               	xorlw	3	; case 98
  9184  0109C4  B4D8               	btfsc	status,2,c
  9185  0109C6  D721               	goto	l9840
  9186  0109C8  0A01               	xorlw	1	; case 99
  9187  0109CA  B4D8               	btfsc	status,2,c
  9188  0109CC  D720               	goto	l9844
  9189  0109CE  0A07               	xorlw	7	; case 100
  9190  0109D0  B4D8               	btfsc	status,2,c
  9191  0109D2  D71F               	goto	l9848
  9192  0109D4  0A01               	xorlw	1	; case 101
  9193  0109D6  B4D8               	btfsc	status,2,c
  9194  0109D8  D71E               	goto	l9852
  9195  0109DA  0A03               	xorlw	3	; case 102
  9196  0109DC  B4D8               	btfsc	status,2,c
  9197  0109DE  D71D               	goto	l9856
  9198  0109E0  0A01               	xorlw	1	; case 103
  9199  0109E2  B4D8               	btfsc	status,2,c
  9200  0109E4  D71C               	goto	l9860
  9201  0109E6  0A0F               	xorlw	15	; case 104
  9202  0109E8  B4D8               	btfsc	status,2,c
  9203  0109EA  D71B               	goto	l9864
  9204  0109EC  0A01               	xorlw	1	; case 105
  9205  0109EE  B4D8               	btfsc	status,2,c
  9206  0109F0  D71A               	goto	l9868
  9207  0109F2  0A03               	xorlw	3	; case 106
  9208  0109F4  B4D8               	btfsc	status,2,c
  9209  0109F6  D719               	goto	l9872
  9210  0109F8  0A01               	xorlw	1	; case 107
  9211  0109FA  B4D8               	btfsc	status,2,c
  9212  0109FC  D718               	goto	l9876
  9213  0109FE  0A07               	xorlw	7	; case 108
  9214  010A00  B4D8               	btfsc	status,2,c
  9215  010A02  D717               	goto	l9880
  9216  010A04  0A01               	xorlw	1	; case 109
  9217  010A06  B4D8               	btfsc	status,2,c
  9218  010A08  D716               	goto	l9884
  9219  010A0A  0A03               	xorlw	3	; case 110
  9220  010A0C  B4D8               	btfsc	status,2,c
  9221  010A0E  D715               	goto	l9888
  9222  010A10  0A01               	xorlw	1	; case 111
  9223  010A12  B4D8               	btfsc	status,2,c
  9224  010A14  D714               	goto	l9892
  9225  010A16  0A1F               	xorlw	31	; case 112
  9226  010A18  B4D8               	btfsc	status,2,c
  9227  010A1A  D713               	goto	l9896
  9228  010A1C  0A01               	xorlw	1	; case 113
  9229  010A1E  B4D8               	btfsc	status,2,c
  9230  010A20  D712               	goto	l9900
  9231  010A22  0A03               	xorlw	3	; case 114
  9232  010A24  B4D8               	btfsc	status,2,c
  9233  010A26  D711               	goto	l9904
  9234  010A28  0A01               	xorlw	1	; case 115
  9235  010A2A  B4D8               	btfsc	status,2,c
  9236  010A2C  D710               	goto	l9908
  9237  010A2E  0A07               	xorlw	7	; case 116
  9238  010A30  B4D8               	btfsc	status,2,c
  9239  010A32  D70F               	goto	l9912
  9240  010A34  0A01               	xorlw	1	; case 117
  9241  010A36  B4D8               	btfsc	status,2,c
  9242  010A38  D70E               	goto	l9916
  9243  010A3A  0A03               	xorlw	3	; case 118
  9244  010A3C  B4D8               	btfsc	status,2,c
  9245  010A3E  D70D               	goto	l9920
  9246  010A40  0A01               	xorlw	1	; case 119
  9247  010A42  B4D8               	btfsc	status,2,c
  9248  010A44  D70C               	goto	l9924
  9249  010A46  0A0F               	xorlw	15	; case 120
  9250  010A48  B4D8               	btfsc	status,2,c
  9251  010A4A  D70B               	goto	l9928
  9252  010A4C  0A01               	xorlw	1	; case 121
  9253  010A4E  B4D8               	btfsc	status,2,c
  9254  010A50  D70A               	goto	l9932
  9255  010A52  0A03               	xorlw	3	; case 122
  9256  010A54  B4D8               	btfsc	status,2,c
  9257  010A56  D709               	goto	l9936
  9258                           
  9259                           ;Types.c: 354: return 0;
  9260                           
  9261                           ; BSR set to: 0
  9262  010A58  0E00               	movlw	0
  9263  010A5A  0012               	return	
  9264  010A5C                     __end_of_ToSegment:
  9265                           	opt stack 0
  9266                           tosu	equ	0xFFF
  9267                           tosh	equ	0xFFE
  9268                           tosl	equ	0xFFD
  9269                           pclath	equ	0xFFA
  9270                           tblptru	equ	0xFF8
  9271                           tblptrh	equ	0xFF7
  9272                           tblptrl	equ	0xFF6
  9273                           tablat	equ	0xFF5
  9274                           prodh	equ	0xFF4
  9275                           prodl	equ	0xFF3
  9276                           postinc0	equ	0xFEE
  9277                           wreg	equ	0xFE8
  9278                           indf1	equ	0xFE7
  9279                           postdec1	equ	0xFE5
  9280                           fsr1h	equ	0xFE2
  9281                           fsr1l	equ	0xFE1
  9282                           indf2	equ	0xFDF
  9283                           postinc2	equ	0xFDE
  9284                           postdec2	equ	0xFDD
  9285                           plusw2	equ	0xFDB
  9286                           fsr2h	equ	0xFDA
  9287                           fsr2l	equ	0xFD9
  9288                           status	equ	0xFD8
  9289                           
  9290 ;; *************** function _HMI_SetDown *****************
  9291 ;; Defined at:
  9292 ;;		line 180 in file "HMI.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  pValue          1    wreg     unsigned char 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  pValue          1    0[BANK0 ] unsigned char 
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  1    wreg      void 
  9299 ;; Registers used:
  9300 ;;		wreg
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;Total ram usage:        1 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    7
  9313 ;; This function calls:
  9314 ;;		Nothing
  9315 ;; This function is called by:
  9316 ;;		_Event_HMI_DownButton
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           	psect	text49
  9321  0145D4                     __ptext49:
  9322                           	opt stack 0
  9323  0145D4                     _HMI_SetDown:
  9324                           	opt stack 15
  9325                           
  9326                           ;incstack = 0
  9327                           ;HMI_SetDown@pValue stored from wreg
  9328  0145D4  0100               	movlb	0	; () banked
  9329  0145D6  6FC4               	movwf	HMI_SetDown@pValue& (0+255),b
  9330                           
  9331                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
  9332  0145D8  0100               	movlb	0	; () banked
  9333  0145DA  B1C4               	btfsc	HMI_SetDown@pValue& (0+255),0,b
  9334  0145DC  D003               	bra	u6705
  9335  0145DE  0101               	movlb	1	; () banked
  9336  0145E0  9376               	bcf	(_HMIBoard+6)& (0+255),1,b
  9337  0145E2  D002               	bra	u6706
  9338  0145E4                     u6705:
  9339  0145E4  0101               	movlb	1	; () banked
  9340  0145E6  8376               	bsf	(_HMIBoard+6)& (0+255),1,b
  9341  0145E8                     u6706:
  9342                           
  9343                           ; BSR set to: 1
  9344  0145E8  0012               	return		;funcret
  9345  0145EA                     __end_of_HMI_SetDown:
  9346                           	opt stack 0
  9347                           tosu	equ	0xFFF
  9348                           tosh	equ	0xFFE
  9349                           tosl	equ	0xFFD
  9350                           pclath	equ	0xFFA
  9351                           tblptru	equ	0xFF8
  9352                           tblptrh	equ	0xFF7
  9353                           tblptrl	equ	0xFF6
  9354                           tablat	equ	0xFF5
  9355                           prodh	equ	0xFF4
  9356                           prodl	equ	0xFF3
  9357                           postinc0	equ	0xFEE
  9358                           wreg	equ	0xFE8
  9359                           indf1	equ	0xFE7
  9360                           postdec1	equ	0xFE5
  9361                           fsr1h	equ	0xFE2
  9362                           fsr1l	equ	0xFE1
  9363                           indf2	equ	0xFDF
  9364                           postinc2	equ	0xFDE
  9365                           postdec2	equ	0xFDD
  9366                           plusw2	equ	0xFDB
  9367                           fsr2h	equ	0xFDA
  9368                           fsr2l	equ	0xFD9
  9369                           status	equ	0xFD8
  9370                           
  9371 ;; *************** function _HMI_SetBar *****************
  9372 ;; Defined at:
  9373 ;;		line 205 in file "HMI.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;  pValue          1    wreg     unsigned char 
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;  pValue          1    0[BANK0 ] unsigned char 
  9378 ;; Return value:  Size  Location     Type
  9379 ;;                  1    wreg      void 
  9380 ;; Registers used:
  9381 ;;		wreg
  9382 ;; Tracked objects:
  9383 ;;		On entry : 0/0
  9384 ;;		On exit  : 0/0
  9385 ;;		Unchanged: 0/0
  9386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;Total ram usage:        1 bytes
  9392 ;; Hardware stack levels used:    1
  9393 ;; Hardware stack levels required when called:    7
  9394 ;; This function calls:
  9395 ;;		Nothing
  9396 ;; This function is called by:
  9397 ;;		_Event_DIPSwitch
  9398 ;;		_Event_HMI_DIPSwitch
  9399 ;;		_Event_HMI_LeftButton
  9400 ;;		_Event_HMI_RightButton
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           	psect	text50
  9405  01466C                     __ptext50:
  9406                           	opt stack 0
  9407  01466C                     _HMI_SetBar:
  9408                           	opt stack 15
  9409                           
  9410                           ; BSR set to: 1
  9411                           ;incstack = 0
  9412                           ;HMI_SetBar@pValue stored from wreg
  9413  01466C  0100               	movlb	0	; () banked
  9414  01466E  6FC4               	movwf	HMI_SetBar@pValue& (0+255),b
  9415                           
  9416                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9417  014670  C0C4  F177         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9418  014674  0012               	return		;funcret
  9419  014676                     __end_of_HMI_SetBar:
  9420                           	opt stack 0
  9421                           tosu	equ	0xFFF
  9422                           tosh	equ	0xFFE
  9423                           tosl	equ	0xFFD
  9424                           pclath	equ	0xFFA
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           postinc0	equ	0xFEE
  9432                           wreg	equ	0xFE8
  9433                           indf1	equ	0xFE7
  9434                           postdec1	equ	0xFE5
  9435                           fsr1h	equ	0xFE2
  9436                           fsr1l	equ	0xFE1
  9437                           indf2	equ	0xFDF
  9438                           postinc2	equ	0xFDE
  9439                           postdec2	equ	0xFDD
  9440                           plusw2	equ	0xFDB
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _HMI_GetBar *****************
  9446 ;; Defined at:
  9447 ;;		line 209 in file "HMI.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      unsigned char 
  9454 ;; Registers used:
  9455 ;;		wreg, status,2
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    7
  9468 ;; This function calls:
  9469 ;;		Nothing
  9470 ;; This function is called by:
  9471 ;;		_Event_DIPSwitch
  9472 ;;		_Event_HMI_DIPSwitch
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text51
  9477  014698                     __ptext51:
  9478                           	opt stack 0
  9479  014698                     _HMI_GetBar:
  9480                           	opt stack 15
  9481                           
  9482                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9483                           
  9484                           ;incstack = 0
  9485  014698  0101               	movlb	1	; () banked
  9486  01469A  5177               	movf	(_HMIBoard+7)& (0+255),w,b
  9487  01469C  0012               	return	
  9488  01469E                     __end_of_HMI_GetBar:
  9489                           	opt stack 0
  9490                           tosu	equ	0xFFF
  9491                           tosh	equ	0xFFE
  9492                           tosl	equ	0xFFD
  9493                           pclath	equ	0xFFA
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           postinc0	equ	0xFEE
  9501                           wreg	equ	0xFE8
  9502                           indf1	equ	0xFE7
  9503                           postdec1	equ	0xFE5
  9504                           fsr1h	equ	0xFE2
  9505                           fsr1l	equ	0xFE1
  9506                           indf2	equ	0xFDF
  9507                           postinc2	equ	0xFDE
  9508                           postdec2	equ	0xFDD
  9509                           plusw2	equ	0xFDB
  9510                           fsr2h	equ	0xFDA
  9511                           fsr2l	equ	0xFD9
  9512                           status	equ	0xFD8
  9513                           
  9514 ;; *************** function _Console_SetForecolour *****************
  9515 ;; Defined at:
  9516 ;;		line 286 in file "Library/Console.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;  pColour         2    0[BANK0 ] unsigned short 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  1    wreg      void 
  9523 ;; Registers used:
  9524 ;;		None
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9530 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;Total ram usage:        2 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    7
  9537 ;; This function calls:
  9538 ;;		Nothing
  9539 ;; This function is called by:
  9540 ;;		_displaySID
  9541 ;;		_displayMode
  9542 ;;		_continuousMode
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text52
  9547  014676                     __ptext52:
  9548                           	opt stack 0
  9549  014676                     _Console_SetForecolour:
  9550                           	opt stack 19
  9551                           
  9552                           ;Console.c: 289: gForecolour = pColour;
  9553                           
  9554                           ; BSR set to: 1
  9555                           ;incstack = 0
  9556  014676  C0C4  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
  9557  01467A  C0C5  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
  9558  01467E  0012               	return		;funcret
  9559  014680                     __end_of_Console_SetForecolour:
  9560                           	opt stack 0
  9561                           tosu	equ	0xFFF
  9562                           tosh	equ	0xFFE
  9563                           tosl	equ	0xFFD
  9564                           pclath	equ	0xFFA
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           postinc0	equ	0xFEE
  9572                           wreg	equ	0xFE8
  9573                           indf1	equ	0xFE7
  9574                           postdec1	equ	0xFE5
  9575                           fsr1h	equ	0xFE2
  9576                           fsr1l	equ	0xFE1
  9577                           indf2	equ	0xFDF
  9578                           postinc2	equ	0xFDE
  9579                           postdec2	equ	0xFDD
  9580                           plusw2	equ	0xFDB
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _Console_Render *****************
  9586 ;; Defined at:
  9587 ;;		line 377 in file "Library/Console.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  lCursor         4   38[BANK0 ] struct Point
  9592 ;;  y               1   43[BANK0 ] unsigned char 
  9593 ;;  x               1   42[BANK0 ] unsigned char 
  9594 ;;  temp            1   37[BANK0 ] unsigned char 
  9595 ;;  Temp            2    0        unsigned short 
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  1    wreg      void 
  9598 ;; Registers used:
  9599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;Total ram usage:        9 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:   11
  9612 ;; This function calls:
  9613 ;;		_Console_MakeField
  9614 ;;		_LCD_DrawField
  9615 ;;		_LCD_FillRectangle
  9616 ;; This function is called by:
  9617 ;;		_displayText
  9618 ;;		_continuousMode
  9619 ;;		_nullMode
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           	psect	text53
  9624  011102                     __ptext53:
  9625                           	opt stack 0
  9626  011102                     _Console_Render:
  9627                           	opt stack 16
  9628                           
  9629                           ;Console.c: 379: Colour Temp;
  9630                           ;Console.c: 380: if (change)
  9631                           
  9632                           ;incstack = 0
  9633  011102  0100               	movlb	0	; () banked
  9634  011104  51FF               	movf	_change& (0+255),w,b
  9635  011106  B4D8               	btfsc	status,2,c
  9636  011108  0012               	return	
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;Console.c: 381: {
  9640                           ;Console.c: 382: UINT8 x, y, temp;
  9641                           ;Console.c: 383: Point lCursor = {6,6};
  9642  01110A  C1F7  F0EA         	movff	Console_Render@F6956,Console_Render@lCursor
  9643  01110E  C1F8  F0EB         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9644  011112  C1F9  F0EC         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9645  011116  C1FA  F0ED         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;Console.c: 385: if (clearall)
  9649  01111A  0100               	movlb	0	; () banked
  9650  01111C  517D               	movf	_clearall& (0+255),w,b
  9651  01111E  B4D8               	btfsc	status,2,c
  9652  011120  D004               	goto	l1056
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;Console.c: 386: {
  9656                           ;Console.c: 389: temp = lBufferY;
  9657  011122  C036  F0E9         	movff	_lBufferY,Console_Render@temp
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9661  011126  0E0F               	movlw	15
  9662  011128  6E36               	movwf	_lBufferY,c
  9663  01112A                     l1056:
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;Console.c: 391: }
  9667                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9668  01112A  0E00               	movlw	0
  9669  01112C  0100               	movlb	0	; () banked
  9670  01112E  6FEF               	movwf	Console_Render@y& (0+255),b
  9671  011130  D0DF               	goto	l11334
  9672  011132                     l11304:
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;Console.c: 394: {
  9676                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9677  011132  0100               	movlb	0	; () banked
  9678  011134  51EF               	movf	Console_Render@y& (0+255),w,b
  9679  011136  0D02               	mullw	2
  9680  011138  0E00               	movlw	low _lCBuffer
  9681  01113A  24F3               	addwf	prodl,w,c
  9682  01113C  6ED9               	movwf	fsr2l,c
  9683  01113E  0E01               	movlw	high _lCBuffer
  9684  011140  20F4               	addwfc	prodh,w,c
  9685  011142  6EDA               	movwf	fsr2h,c
  9686  011144  CFDE F0FD          	movff	postinc2,_gForecolour
  9687  011148  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9688                           
  9689                           ; BSR set to: 0
  9690                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9691  01114C  0E00               	movlw	0
  9692  01114E  0100               	movlb	0	; () banked
  9693  011150  6FEE               	movwf	Console_Render@x& (0+255),b
  9694  011152                     l11308:
  9695                           
  9696                           ; BSR set to: 0
  9697  011152  0E13               	movlw	19
  9698  011154  0100               	movlb	0	; () banked
  9699  011156  65EE               	cpfsgt	Console_Render@x& (0+255),b
  9700  011158  D001               	goto	l11312
  9701  01115A  D0BE               	goto	l11328
  9702  01115C                     l11312:
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;Console.c: 397: {
  9706                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9707  01115C  0100               	movlb	0	; () banked
  9708  01115E  51EF               	movf	Console_Render@y& (0+255),w,b
  9709  011160  0D14               	mullw	20
  9710  011162  0E16               	movlw	low _lBuffer
  9711  011164  0100               	movlb	0	; () banked
  9712  011166  6FE7               	movwf	??_Console_Render& (0+255),b
  9713  011168  0E02               	movlw	high _lBuffer
  9714  01116A  0100               	movlb	0	; () banked
  9715  01116C  6FE8               	movwf	(??_Console_Render+1)& (0+255),b
  9716  01116E  50F3               	movf	prodl,w,c
  9717  011170  0100               	movlb	0	; () banked
  9718  011172  27E7               	addwf	??_Console_Render& (0+255),f,b
  9719  011174  50F4               	movf	prodh,w,c
  9720  011176  0100               	movlb	0	; () banked
  9721  011178  23E8               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9722  01117A  0100               	movlb	0	; () banked
  9723  01117C  51EE               	movf	Console_Render@x& (0+255),w,b
  9724  01117E  0D01               	mullw	1
  9725  011180  50F3               	movf	prodl,w,c
  9726  011182  0100               	movlb	0	; () banked
  9727  011184  25E7               	addwf	??_Console_Render& (0+255),w,b
  9728  011186  6ED9               	movwf	fsr2l,c
  9729  011188  50F4               	movf	prodh,w,c
  9730  01118A  0100               	movlb	0	; () banked
  9731  01118C  21E8               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9732  01118E  6EDA               	movwf	fsr2h,c
  9733  011190  AEDF               	btfss	indf2,7,c
  9734  011192  D09A               	goto	l11322
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;Console.c: 399: {
  9738                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9739  011194  0100               	movlb	0	; () banked
  9740  011196  51EF               	movf	Console_Render@y& (0+255),w,b
  9741  011198  0D14               	mullw	20
  9742  01119A  0E16               	movlw	low _lBuffer
  9743  01119C  0100               	movlb	0	; () banked
  9744  01119E  6FE7               	movwf	??_Console_Render& (0+255),b
  9745  0111A0  0E02               	movlw	high _lBuffer
  9746  0111A2  0100               	movlb	0	; () banked
  9747  0111A4  6FE8               	movwf	(??_Console_Render+1)& (0+255),b
  9748  0111A6  50F3               	movf	prodl,w,c
  9749  0111A8  0100               	movlb	0	; () banked
  9750  0111AA  27E7               	addwf	??_Console_Render& (0+255),f,b
  9751  0111AC  50F4               	movf	prodh,w,c
  9752  0111AE  0100               	movlb	0	; () banked
  9753  0111B0  23E8               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9754  0111B2  0100               	movlb	0	; () banked
  9755  0111B4  51EE               	movf	Console_Render@x& (0+255),w,b
  9756  0111B6  0D01               	mullw	1
  9757  0111B8  50F3               	movf	prodl,w,c
  9758  0111BA  0100               	movlb	0	; () banked
  9759  0111BC  25E7               	addwf	??_Console_Render& (0+255),w,b
  9760  0111BE  6ED9               	movwf	fsr2l,c
  9761  0111C0  50F4               	movf	prodh,w,c
  9762  0111C2  0100               	movlb	0	; () banked
  9763  0111C4  21E8               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9764  0111C6  6EDA               	movwf	fsr2h,c
  9765  0111C8  0E7F               	movlw	127
  9766  0111CA  16DF               	andwf	indf2,f,c
  9767                           
  9768                           ;Console.c: 401: if (lBuffer[y][x])
  9769  0111CC  0100               	movlb	0	; () banked
  9770  0111CE  51EF               	movf	Console_Render@y& (0+255),w,b
  9771  0111D0  0D14               	mullw	20
  9772  0111D2  0E16               	movlw	low _lBuffer
  9773  0111D4  0100               	movlb	0	; () banked
  9774  0111D6  6FE7               	movwf	??_Console_Render& (0+255),b
  9775  0111D8  0E02               	movlw	high _lBuffer
  9776  0111DA  0100               	movlb	0	; () banked
  9777  0111DC  6FE8               	movwf	(??_Console_Render+1)& (0+255),b
  9778  0111DE  50F3               	movf	prodl,w,c
  9779  0111E0  0100               	movlb	0	; () banked
  9780  0111E2  27E7               	addwf	??_Console_Render& (0+255),f,b
  9781  0111E4  50F4               	movf	prodh,w,c
  9782  0111E6  0100               	movlb	0	; () banked
  9783  0111E8  23E8               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9784  0111EA  0100               	movlb	0	; () banked
  9785  0111EC  51EE               	movf	Console_Render@x& (0+255),w,b
  9786  0111EE  0D01               	mullw	1
  9787  0111F0  50F3               	movf	prodl,w,c
  9788  0111F2  0100               	movlb	0	; () banked
  9789  0111F4  25E7               	addwf	??_Console_Render& (0+255),w,b
  9790  0111F6  6ED9               	movwf	fsr2l,c
  9791  0111F8  50F4               	movf	prodh,w,c
  9792  0111FA  0100               	movlb	0	; () banked
  9793  0111FC  21E8               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9794  0111FE  6EDA               	movwf	fsr2h,c
  9795  011200  50DF               	movf	indf2,w,c
  9796  011202  B4D8               	btfsc	status,2,c
  9797  011204  D04A               	goto	l11320
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;Console.c: 402: {
  9801                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9802  011206  C074  F0CD         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9803  01120A  C075  F0CE         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9804  01120E  C0EA  F0CF         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9805  011212  C0EB  F0D0         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9806  011216  C0EC  F0D1         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9807  01121A  C0ED  F0D2         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9808  01121E  C0F9  F0D3         	movff	_gCharSize,LCD_FillRectangle@pSize
  9809  011222  C0FA  F0D4         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9810  011226  C0FB  F0D5         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9811  01122A  C0FC  F0D6         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9812  01122E  EC57  F09A         	call	_LCD_FillRectangle	;wreg free
  9813                           
  9814                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9815  011232  0100               	movlb	0	; () banked
  9816  011234  51EF               	movf	Console_Render@y& (0+255),w,b
  9817  011236  0D14               	mullw	20
  9818  011238  0E16               	movlw	low _lBuffer
  9819  01123A  0100               	movlb	0	; () banked
  9820  01123C  6FE7               	movwf	??_Console_Render& (0+255),b
  9821  01123E  0E02               	movlw	high _lBuffer
  9822  011240  0100               	movlb	0	; () banked
  9823  011242  6FE8               	movwf	(??_Console_Render+1)& (0+255),b
  9824  011244  50F3               	movf	prodl,w,c
  9825  011246  0100               	movlb	0	; () banked
  9826  011248  27E7               	addwf	??_Console_Render& (0+255),f,b
  9827  01124A  50F4               	movf	prodh,w,c
  9828  01124C  0100               	movlb	0	; () banked
  9829  01124E  23E8               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9830  011250  0100               	movlb	0	; () banked
  9831  011252  51EE               	movf	Console_Render@x& (0+255),w,b
  9832  011254  0D01               	mullw	1
  9833  011256  50F3               	movf	prodl,w,c
  9834  011258  0100               	movlb	0	; () banked
  9835  01125A  25E7               	addwf	??_Console_Render& (0+255),w,b
  9836  01125C  6ED9               	movwf	fsr2l,c
  9837  01125E  50F4               	movf	prodh,w,c
  9838  011260  0100               	movlb	0	; () banked
  9839  011262  21E8               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9840  011264  6EDA               	movwf	fsr2h,c
  9841  011266  50DF               	movf	indf2,w,c
  9842  011268  EC75  F092         	call	_Console_MakeField
  9843  01126C  C0C9  F0D6         	movff	?_Console_MakeField,LCD_DrawField@pField
  9844  011270  C0CA  F0D7         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9845  011274  C0EA  F0D8         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9846  011278  C0EB  F0D9         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9847  01127C  C0EC  F0DA         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9848  011280  C0ED  F0DB         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9849  011284  C0F9  F0DC         	movff	_gCharSize,LCD_DrawField@pSize
  9850  011288  C0FA  F0DD         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9851  01128C  C0FB  F0DE         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9852  011290  C0FC  F0DF         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9853  011294  ECB8  F096         	call	_LCD_DrawField	;wreg free
  9854                           
  9855                           ;Console.c: 405: }
  9856  011298  D017               	goto	l11322
  9857  01129A                     l11320:
  9858                           
  9859                           ;Console.c: 406: else
  9860                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9861  01129A  0E00               	movlw	0
  9862  01129C  0100               	movlb	0	; () banked
  9863  01129E  6FCE               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9864  0112A0  0E00               	movlw	0
  9865  0112A2  6FCD               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9866  0112A4  C0EA  F0CF         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9867  0112A8  C0EB  F0D0         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9868  0112AC  C0EC  F0D1         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9869  0112B0  C0ED  F0D2         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9870  0112B4  C0F9  F0D3         	movff	_gCharSize,LCD_FillRectangle@pSize
  9871  0112B8  C0FA  F0D4         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9872  0112BC  C0FB  F0D5         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9873  0112C0  C0FC  F0D6         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9874  0112C4  EC57  F09A         	call	_LCD_FillRectangle	;wreg free
  9875  0112C8                     l11322:
  9876                           
  9877                           ;Console.c: 408: }
  9878                           ;Console.c: 409: lCursor.x += (5 + 1);
  9879  0112C8  0E06               	movlw	6
  9880  0112CA  0100               	movlb	0	; () banked
  9881  0112CC  27EA               	addwf	Console_Render@lCursor& (0+255),f,b
  9882  0112CE  0E00               	movlw	0
  9883  0112D0  23EB               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9884                           
  9885                           ; BSR set to: 0
  9886  0112D2  0100               	movlb	0	; () banked
  9887  0112D4  2BEE               	incf	Console_Render@x& (0+255),f,b
  9888  0112D6  D73D               	goto	l11308
  9889  0112D8                     l11328:
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;Console.c: 410: }
  9893                           ;Console.c: 411: lCursor.y += (7 + 1);
  9894  0112D8  0E08               	movlw	8
  9895  0112DA  0100               	movlb	0	; () banked
  9896  0112DC  27EC               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9897  0112DE  0E00               	movlw	0
  9898  0112E0  23ED               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;Console.c: 412: lCursor.x = 6;
  9902  0112E2  0E00               	movlw	0
  9903  0112E4  0100               	movlb	0	; () banked
  9904  0112E6  6FEB               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9905  0112E8  0E06               	movlw	6
  9906  0112EA  6FEA               	movwf	Console_Render@lCursor& (0+255),b
  9907                           
  9908                           ; BSR set to: 0
  9909  0112EC  0100               	movlb	0	; () banked
  9910  0112EE  2BEF               	incf	Console_Render@y& (0+255),f,b
  9911  0112F0                     l11334:
  9912                           
  9913                           ; BSR set to: 0
  9914  0112F0  0100               	movlb	0	; () banked
  9915  0112F2  51EF               	movf	Console_Render@y& (0+255),w,b
  9916  0112F4  5C36               	subwf	_lBufferY,w,c
  9917  0112F6  B0D8               	btfsc	status,0,c
  9918  0112F8  D71C               	goto	l11304
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;Console.c: 413: }
  9922                           ;Console.c: 415: if (clearall)
  9923                           
  9924                           ; BSR set to: 0
  9925  0112FA  0100               	movlb	0	; () banked
  9926  0112FC  517D               	movf	_clearall& (0+255),w,b
  9927  0112FE  B4D8               	btfsc	status,2,c
  9928  011300  0012               	return	
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;Console.c: 416: {
  9932                           ;Console.c: 417: clearall = 0;
  9933  011302  0E00               	movlw	0
  9934  011304  0100               	movlb	0	; () banked
  9935  011306  6F7D               	movwf	_clearall& (0+255),b
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;Console.c: 418: lBufferY = temp;
  9939  011308  C0E9  F036         	movff	Console_Render@temp,_lBufferY
  9940                           
  9941                           ; BSR set to: 0
  9942  01130C  0012               	return	
  9943  01130E                     __end_of_Console_Render:
  9944                           	opt stack 0
  9945                           tosu	equ	0xFFF
  9946                           tosh	equ	0xFFE
  9947                           tosl	equ	0xFFD
  9948                           pclath	equ	0xFFA
  9949                           tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           postinc0	equ	0xFEE
  9956                           wreg	equ	0xFE8
  9957                           indf1	equ	0xFE7
  9958                           postdec1	equ	0xFE5
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           postdec2	equ	0xFDD
  9964                           plusw2	equ	0xFDB
  9965                           fsr2h	equ	0xFDA
  9966                           fsr2l	equ	0xFD9
  9967                           status	equ	0xFD8
  9968                           
  9969 ;; *************** function _LCD_FillRectangle *****************
  9970 ;; Defined at:
  9971 ;;		line 318 in file "Library/LCD.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  pColour         2    9[BANK0 ] unsigned short 
  9974 ;;  pPoint          4   11[BANK0 ] struct Point
  9975 ;;  pSize           4   15[BANK0 ] struct Point
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;  j               1   22[BANK0 ] unsigned char 
  9978 ;;  i               1   21[BANK0 ] unsigned char 
  9979 ;; Return value:  Size  Location     Type
  9980 ;;                  1    wreg      void 
  9981 ;; Registers used:
  9982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9988 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;Total ram usage:       14 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:   10
  9995 ;; This function calls:
  9996 ;;		_LCD_Word_Write
  9997 ;;		_Set_Addr_Window
  9998 ;; This function is called by:
  9999 ;;		_Console_Render
 10000 ;;		_Console_ClearLine
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text54
 10005  0134AE                     __ptext54:
 10006                           	opt stack 0
 10007  0134AE                     _LCD_FillRectangle:
 10008                           	opt stack 16
 10009                           
 10010                           ;LCD.c: 320: UINT8 i = 0x00;
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;incstack = 0
 10014  0134AE  0E00               	movlw	0
 10015  0134B0  0100               	movlb	0	; () banked
 10016  0134B2  6FD9               	movwf	LCD_FillRectangle@i& (0+255),b
 10017                           
 10018                           ;LCD.c: 321: UINT8 j = 0x00;
 10019  0134B4  0E00               	movlw	0
 10020  0134B6  0100               	movlb	0	; () banked
 10021  0134B8  6FDA               	movwf	LCD_FillRectangle@j& (0+255),b
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10025  0134BA  C0D1  F0C9         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10026  0134BE  0100               	movlb	0	; () banked
 10027  0134C0  51CF               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10028  0134C2  0100               	movlb	0	; () banked
 10029  0134C4  25D3               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10030  0134C6  0100               	movlb	0	; () banked
 10031  0134C8  6FD7               	movwf	??_LCD_FillRectangle& (0+255),b
 10032  0134CA  0100               	movlb	0	; () banked
 10033  0134CC  05D7               	decf	??_LCD_FillRectangle& (0+255),w,b
 10034  0134CE  0100               	movlb	0	; () banked
 10035  0134D0  6FCA               	movwf	Set_Addr_Window@xe& (0+255),b
 10036  0134D2  0100               	movlb	0	; () banked
 10037  0134D4  51D1               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10038  0134D6  0100               	movlb	0	; () banked
 10039  0134D8  25D5               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10040  0134DA  0100               	movlb	0	; () banked
 10041  0134DC  6FD8               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10042  0134DE  0100               	movlb	0	; () banked
 10043  0134E0  05D8               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10044  0134E2  0100               	movlb	0	; () banked
 10045  0134E4  6FCB               	movwf	Set_Addr_Window@ye& (0+255),b
 10046  0134E6  0100               	movlb	0	; () banked
 10047  0134E8  51CF               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10048  0134EA  EC15  F095         	call	_Set_Addr_Window
 10049                           
 10050                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10051  0134EE  C0D5  F0DA         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10052  0134F2                     l10778:
 10053  0134F2  0100               	movlb	0	; () banked
 10054  0134F4  51DA               	movf	LCD_FillRectangle@j& (0+255),w,b
 10055  0134F6  0100               	movlb	0	; () banked
 10056  0134F8  B4D8               	btfsc	status,2,c
 10057  0134FA  0012               	return	
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10061                           
 10062                           ; BSR set to: 0
 10063  0134FC  C0D3  F0D9         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10064  013500                     l10782:
 10065                           
 10066                           ; BSR set to: 0
 10067  013500  0100               	movlb	0	; () banked
 10068  013502  51D9               	movf	LCD_FillRectangle@i& (0+255),w,b
 10069  013504  0100               	movlb	0	; () banked
 10070  013506  B4D8               	btfsc	status,2,c
 10071  013508  D009               	goto	l10792
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10075                           
 10076                           ; BSR set to: 0
 10077                           
 10078                           ; BSR set to: 0
 10079  01350A  C0CD  F0C9         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10080  01350E  C0CE  F0CA         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10081  013512  EC01  F0A2         	call	_LCD_Word_Write	;wreg free
 10082  013516  0100               	movlb	0	; () banked
 10083  013518  07D9               	decf	LCD_FillRectangle@i& (0+255),f,b
 10084  01351A  D7F2               	goto	l10782
 10085  01351C                     l10792:
 10086                           
 10087                           ; BSR set to: 0
 10088  01351C  0100               	movlb	0	; () banked
 10089  01351E  07DA               	decf	LCD_FillRectangle@j& (0+255),f,b
 10090  013520  D7E8               	goto	l10778
 10091  013522                     __end_of_LCD_FillRectangle:
 10092                           	opt stack 0
 10093                           tosu	equ	0xFFF
 10094                           tosh	equ	0xFFE
 10095                           tosl	equ	0xFFD
 10096                           pclath	equ	0xFFA
 10097                           tblptru	equ	0xFF8
 10098                           tblptrh	equ	0xFF7
 10099                           tblptrl	equ	0xFF6
 10100                           tablat	equ	0xFF5
 10101                           prodh	equ	0xFF4
 10102                           prodl	equ	0xFF3
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           indf1	equ	0xFE7
 10106                           postdec1	equ	0xFE5
 10107                           fsr1h	equ	0xFE2
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           plusw2	equ	0xFDB
 10113                           fsr2h	equ	0xFDA
 10114                           fsr2l	equ	0xFD9
 10115                           status	equ	0xFD8
 10116                           
 10117 ;; *************** function _LCD_DrawField *****************
 10118 ;; Defined at:
 10119 ;;		line 393 in file "Library/LCD.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10122 ;;		 -> Console_MakeField@Fill(70), 
 10123 ;;  pPoint          4   20[BANK0 ] struct Point
 10124 ;;  pSize           4   24[BANK0 ] struct Point
 10125 ;; Auto vars:     Size  Location     Type
 10126 ;;  count           2   30[BANK0 ] unsigned short 
 10127 ;;  i               1   34[BANK0 ] unsigned char 
 10128 ;;  ymax            1   33[BANK0 ] unsigned char 
 10129 ;;  xmax            1   32[BANK0 ] unsigned char 
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10139 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;Total ram usage:       17 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:   10
 10146 ;; This function calls:
 10147 ;;		_LCD_Word_Write
 10148 ;;		_Set_Addr_Window
 10149 ;;		___wmul
 10150 ;; This function is called by:
 10151 ;;		_Console_Render
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           	psect	text55
 10156  012D70                     __ptext55:
 10157                           	opt stack 0
 10158  012D70                     _LCD_DrawField:
 10159                           	opt stack 16
 10160                           
 10161                           ;LCD.c: 396: UINT8 i = 0x00;
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;incstack = 0
 10165  012D70  0E00               	movlw	0
 10166  012D72  0100               	movlb	0	; () banked
 10167  012D74  6FE6               	movwf	LCD_DrawField@i& (0+255),b
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10171  012D76  0100               	movlb	0	; () banked
 10172  012D78  51D8               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10173  012D7A  0100               	movlb	0	; () banked
 10174  012D7C  25DC               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10175  012D7E  0100               	movlb	0	; () banked
 10176  012D80  6FE4               	movwf	LCD_DrawField@xmax& (0+255),b
 10177                           
 10178                           ; BSR set to: 0
 10179                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10180  012D82  0100               	movlb	0	; () banked
 10181  012D84  51DA               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10182  012D86  0100               	movlb	0	; () banked
 10183  012D88  25DE               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10184  012D8A  0100               	movlb	0	; () banked
 10185  012D8C  6FE5               	movwf	LCD_DrawField@ymax& (0+255),b
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10189  012D8E  C0DE  F0C4         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10190  012D92  C0DF  F0C5         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10191  012D96  C0DC  F0C6         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10192  012D9A  C0DD  F0C7         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10193  012D9E  EC32  F0A0         	call	___wmul	;wreg free
 10194  012DA2  C0C4  F0E2         	movff	?___wmul,LCD_DrawField@count
 10195  012DA6  C0C5  F0E3         	movff	?___wmul+1,LCD_DrawField@count+1
 10196                           
 10197                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10198  012DAA  C0DA  F0C9         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10199  012DAE  0100               	movlb	0	; () banked
 10200  012DB0  05E4               	decf	LCD_DrawField@xmax& (0+255),w,b
 10201  012DB2  0100               	movlb	0	; () banked
 10202  012DB4  6FCA               	movwf	Set_Addr_Window@xe& (0+255),b
 10203  012DB6  0100               	movlb	0	; () banked
 10204  012DB8  05E5               	decf	LCD_DrawField@ymax& (0+255),w,b
 10205  012DBA  0100               	movlb	0	; () banked
 10206  012DBC  6FCB               	movwf	Set_Addr_Window@ye& (0+255),b
 10207  012DBE  0100               	movlb	0	; () banked
 10208  012DC0  51D8               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10209  012DC2  EC15  F095         	call	_Set_Addr_Window
 10210                           
 10211                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10212  012DC6  0E00               	movlw	0
 10213  012DC8  0100               	movlb	0	; () banked
 10214  012DCA  6FE6               	movwf	LCD_DrawField@i& (0+255),b
 10215  012DCC  D013               	goto	l10812
 10216  012DCE                     l10808:
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10220  012DCE  0100               	movlb	0	; () banked
 10221  012DD0  51E6               	movf	LCD_DrawField@i& (0+255),w,b
 10222  012DD2  0D02               	mullw	2
 10223  012DD4  50F3               	movf	prodl,w,c
 10224  012DD6  0100               	movlb	0	; () banked
 10225  012DD8  25D6               	addwf	LCD_DrawField@pField& (0+255),w,b
 10226  012DDA  6ED9               	movwf	fsr2l,c
 10227  012DDC  50F4               	movf	prodh,w,c
 10228  012DDE  0100               	movlb	0	; () banked
 10229  012DE0  21D7               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10230  012DE2  6EDA               	movwf	fsr2h,c
 10231  012DE4  CFDE F0C9          	movff	postinc2,LCD_Word_Write@value
 10232  012DE8  CFDD F0CA          	movff	postdec2,LCD_Word_Write@value+1
 10233  012DEC  EC01  F0A2         	call	_LCD_Word_Write	;wreg free
 10234  012DF0  0100               	movlb	0	; () banked
 10235  012DF2  2BE6               	incf	LCD_DrawField@i& (0+255),f,b
 10236  012DF4                     l10812:
 10237                           
 10238                           ; BSR set to: 0
 10239  012DF4  0100               	movlb	0	; () banked
 10240  012DF6  51E6               	movf	LCD_DrawField@i& (0+255),w,b
 10241  012DF8  0100               	movlb	0	; () banked
 10242  012DFA  6FE0               	movwf	??_LCD_DrawField& (0+255),b
 10243  012DFC  6BE1               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10244  012DFE  0100               	movlb	0	; () banked
 10245  012E00  51E2               	movf	LCD_DrawField@count& (0+255),w,b
 10246  012E02  0100               	movlb	0	; () banked
 10247  012E04  5DE0               	subwf	??_LCD_DrawField& (0+255),w,b
 10248  012E06  0100               	movlb	0	; () banked
 10249  012E08  51E3               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10250  012E0A  0100               	movlb	0	; () banked
 10251  012E0C  59E1               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10252  012E0E  B0D8               	btfsc	status,0,c
 10253  012E10  0012               	return	
 10254  012E12  D7DD               	goto	l10808
 10255  012E14                     __end_of_LCD_DrawField:
 10256                           	opt stack 0
 10257                           tosu	equ	0xFFF
 10258                           tosh	equ	0xFFE
 10259                           tosl	equ	0xFFD
 10260                           pclath	equ	0xFFA
 10261                           tblptru	equ	0xFF8
 10262                           tblptrh	equ	0xFF7
 10263                           tblptrl	equ	0xFF6
 10264                           tablat	equ	0xFF5
 10265                           prodh	equ	0xFF4
 10266                           prodl	equ	0xFF3
 10267                           postinc0	equ	0xFEE
 10268                           wreg	equ	0xFE8
 10269                           indf1	equ	0xFE7
 10270                           postdec1	equ	0xFE5
 10271                           fsr1h	equ	0xFE2
 10272                           fsr1l	equ	0xFE1
 10273                           indf2	equ	0xFDF
 10274                           postinc2	equ	0xFDE
 10275                           postdec2	equ	0xFDD
 10276                           plusw2	equ	0xFDB
 10277                           fsr2h	equ	0xFDA
 10278                           fsr2l	equ	0xFD9
 10279                           status	equ	0xFD8
 10280                           
 10281 ;; *************** function ___wmul *****************
 10282 ;; Defined at:
 10283 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10286 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  product         2    4[BANK0 ] unsigned int 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  2    0[BANK0 ] unsigned int 
 10291 ;; Registers used:
 10292 ;;		wreg, status,2, status,0, prodl, prodh
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10298 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;Total ram usage:        6 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    7
 10305 ;; This function calls:
 10306 ;;		Nothing
 10307 ;; This function is called by:
 10308 ;;		_LCD_DrawField
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           	psect	text56
 10313  014064                     __ptext56:
 10314                           	opt stack 0
 10315  014064                     ___wmul:
 10316                           	opt stack 18
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;incstack = 0
 10320  014064  0100               	movlb	0	; () banked
 10321  014066  51C4               	movf	___wmul@multiplier& (0+255),w,b
 10322  014068  0100               	movlb	0	; () banked
 10323  01406A  03C6               	mulwf	___wmul@multiplicand& (0+255),b
 10324  01406C  CFF3 F0C8          	movff	prodl,___wmul@product
 10325  014070  CFF4 F0C9          	movff	prodh,___wmul@product+1
 10326  014074  0100               	movlb	0	; () banked
 10327  014076  51C4               	movf	___wmul@multiplier& (0+255),w,b
 10328  014078  0100               	movlb	0	; () banked
 10329  01407A  03C7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10330  01407C  50F3               	movf	prodl,w,c
 10331  01407E  0100               	movlb	0	; () banked
 10332  014080  27C9               	addwf	(___wmul@product+1)& (0+255),f,b
 10333  014082  0100               	movlb	0	; () banked
 10334  014084  51C5               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10335  014086  0100               	movlb	0	; () banked
 10336  014088  03C6               	mulwf	___wmul@multiplicand& (0+255),b
 10337  01408A  50F3               	movf	prodl,w,c
 10338  01408C  0100               	movlb	0	; () banked
 10339  01408E  27C9               	addwf	(___wmul@product+1)& (0+255),f,b
 10340                           
 10341                           ; BSR set to: 0
 10342  014090  C0C8  F0C4         	movff	___wmul@product,?___wmul
 10343  014094  C0C9  F0C5         	movff	___wmul@product+1,?___wmul+1
 10344  014098  0012               	return	
 10345  01409A                     __end_of___wmul:
 10346                           	opt stack 0
 10347                           tosu	equ	0xFFF
 10348                           tosh	equ	0xFFE
 10349                           tosl	equ	0xFFD
 10350                           pclath	equ	0xFFA
 10351                           tblptru	equ	0xFF8
 10352                           tblptrh	equ	0xFF7
 10353                           tblptrl	equ	0xFF6
 10354                           tablat	equ	0xFF5
 10355                           prodh	equ	0xFF4
 10356                           prodl	equ	0xFF3
 10357                           postinc0	equ	0xFEE
 10358                           wreg	equ	0xFE8
 10359                           indf1	equ	0xFE7
 10360                           postdec1	equ	0xFE5
 10361                           fsr1h	equ	0xFE2
 10362                           fsr1l	equ	0xFE1
 10363                           indf2	equ	0xFDF
 10364                           postinc2	equ	0xFDE
 10365                           postdec2	equ	0xFDD
 10366                           plusw2	equ	0xFDB
 10367                           fsr2h	equ	0xFDA
 10368                           fsr2l	equ	0xFD9
 10369                           status	equ	0xFD8
 10370                           
 10371 ;; *************** function _Console_MakeField *****************
 10372 ;; Defined at:
 10373 ;;		line 435 in file "Library/Console.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;  pInput          1    wreg     unsigned char 
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  pInput          1   11[BANK0 ] unsigned char 
 10378 ;;  y               1   17[BANK0 ] unsigned char 
 10379 ;;  x               1   16[BANK0 ] unsigned char 
 10380 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10381 ;;		 -> Font5x7(480), 
 10382 ;;  Index           2    9[BANK0 ] unsigned short 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  2    5[BANK0 ] PTR unsigned short 
 10385 ;; Registers used:
 10386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10392 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;Total ram usage:       13 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    8
 10399 ;; This function calls:
 10400 ;;		_Byte_GetBit
 10401 ;; This function is called by:
 10402 ;;		_Console_Render
 10403 ;; This function uses a non-reentrant model
 10404 ;;
 10405                           
 10406                           	psect	text57
 10407  0124EA                     __ptext57:
 10408                           	opt stack 0
 10409  0124EA                     _Console_MakeField:
 10410                           	opt stack 18
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;incstack = 0
 10414                           ;Console_MakeField@pInput stored from wreg
 10415  0124EA  0100               	movlb	0	; () banked
 10416  0124EC  6FCF               	movwf	Console_MakeField@pInput& (0+255),b
 10417                           
 10418                           ;Console.c: 437: static Colour Fill[7][5];
 10419                           ;Console.c: 438: pInput -= 32;
 10420  0124EE  0E20               	movlw	32
 10421  0124F0  0100               	movlb	0	; () banked
 10422  0124F2  5FCF               	subwf	Console_MakeField@pInput& (0+255),f,b
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10426  0124F4  0100               	movlb	0	; () banked
 10427  0124F6  51CF               	movf	Console_MakeField@pInput& (0+255),w,b
 10428  0124F8  0D05               	mullw	5
 10429  0124FA  CFF3 F0CD          	movff	prodl,Console_MakeField@Index
 10430  0124FE  CFF4 F0CE          	movff	prodh,Console_MakeField@Index+1
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10434  012502  0E87               	movlw	low _Font5x7
 10435  012504  0100               	movlb	0	; () banked
 10436  012506  25CD               	addwf	Console_MakeField@Index& (0+255),w,b
 10437  012508  0100               	movlb	0	; () banked
 10438  01250A  6FD0               	movwf	Console_MakeField@Column& (0+255),b
 10439  01250C  0EFD               	movlw	high _Font5x7
 10440  01250E  0100               	movlb	0	; () banked
 10441  012510  21CE               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10442  012512  0100               	movlb	0	; () banked
 10443  012514  6FD1               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10447  012516  0E00               	movlw	0
 10448  012518  0100               	movlb	0	; () banked
 10449  01251A  6FD4               	movwf	Console_MakeField@x& (0+255),b
 10450  01251C                     l10916:
 10451                           
 10452                           ; BSR set to: 0
 10453  01251C  0E04               	movlw	4
 10454  01251E  0100               	movlb	0	; () banked
 10455  012520  65D4               	cpfsgt	Console_MakeField@x& (0+255),b
 10456  012522  D001               	goto	l10920
 10457  012524  D043               	goto	l10940
 10458  012526                     l10920:
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;Console.c: 444: {
 10462                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10463  012526  0E00               	movlw	0
 10464  012528  0100               	movlb	0	; () banked
 10465  01252A  6FD5               	movwf	Console_MakeField@y& (0+255),b
 10466  01252C                     l10922:
 10467                           
 10468                           ; BSR set to: 0
 10469  01252C  0E06               	movlw	6
 10470  01252E  0100               	movlb	0	; () banked
 10471  012530  65D5               	cpfsgt	Console_MakeField@y& (0+255),b
 10472  012532  D001               	goto	l10926
 10473  012534  D035               	goto	l10936
 10474  012536                     l10926:
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10478  012536  C0D0  F0C4         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10479  01253A  C0D1  F0C5         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10480  01253E  C0D5  F0C6         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10481  012542  EC68  F0A0         	call	_Byte_GetBit	;wreg free
 10482  012546  0900               	iorlw	0
 10483  012548  A4D8               	btfss	status,2,c
 10484  01254A  D005               	goto	l1082
 10485  01254C  C074  F0D2         	movff	_gBackcolour,_Console_MakeField$10974
 10486  012550  C075  F0D3         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10487  012554  D004               	goto	l10930
 10488  012556                     l1082:
 10489  012556  C0FD  F0D2         	movff	_gForecolour,_Console_MakeField$10974
 10490  01255A  C0FE  F0D3         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10491  01255E                     l10930:
 10492  01255E  0100               	movlb	0	; () banked
 10493  012560  51D5               	movf	Console_MakeField@y& (0+255),w,b
 10494  012562  0D0A               	mullw	10
 10495  012564  0E2A               	movlw	low Console_MakeField@Fill
 10496  012566  0100               	movlb	0	; () banked
 10497  012568  6FCB               	movwf	??_Console_MakeField& (0+255),b
 10498  01256A  0E01               	movlw	high Console_MakeField@Fill
 10499  01256C  0100               	movlb	0	; () banked
 10500  01256E  6FCC               	movwf	(??_Console_MakeField+1)& (0+255),b
 10501  012570  50F3               	movf	prodl,w,c
 10502  012572  0100               	movlb	0	; () banked
 10503  012574  27CB               	addwf	??_Console_MakeField& (0+255),f,b
 10504  012576  50F4               	movf	prodh,w,c
 10505  012578  0100               	movlb	0	; () banked
 10506  01257A  23CC               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10507  01257C  0100               	movlb	0	; () banked
 10508  01257E  51D4               	movf	Console_MakeField@x& (0+255),w,b
 10509  012580  0D02               	mullw	2
 10510  012582  50F3               	movf	prodl,w,c
 10511  012584  0100               	movlb	0	; () banked
 10512  012586  25CB               	addwf	??_Console_MakeField& (0+255),w,b
 10513  012588  6ED9               	movwf	fsr2l,c
 10514  01258A  50F4               	movf	prodh,w,c
 10515  01258C  0100               	movlb	0	; () banked
 10516  01258E  21CC               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10517  012590  6EDA               	movwf	fsr2h,c
 10518  012592  C0D2  FFDE         	movff	_Console_MakeField$10974,postinc2
 10519  012596  C0D3  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10520                           
 10521                           ; BSR set to: 0
 10522  01259A  0100               	movlb	0	; () banked
 10523  01259C  2BD5               	incf	Console_MakeField@y& (0+255),f,b
 10524  01259E  D7C6               	goto	l10922
 10525  0125A0                     l10936:
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;Console.c: 447: Column += 1;
 10529  0125A0  0100               	movlb	0	; () banked
 10530  0125A2  4BD0               	infsnz	Console_MakeField@Column& (0+255),f,b
 10531  0125A4  2BD1               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10532  0125A6  0100               	movlb	0	; () banked
 10533  0125A8  2BD4               	incf	Console_MakeField@x& (0+255),f,b
 10534  0125AA  D7B8               	goto	l10916
 10535  0125AC                     l10940:
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;Console.c: 448: }
 10539                           ;Console.c: 449: return (ColourPtr)Fill;
 10540  0125AC  0E2A               	movlw	low Console_MakeField@Fill
 10541  0125AE  0100               	movlb	0	; () banked
 10542  0125B0  6FC9               	movwf	?_Console_MakeField& (0+255),b
 10543  0125B2  0E01               	movlw	high Console_MakeField@Fill
 10544  0125B4  0100               	movlb	0	; () banked
 10545  0125B6  6FCA               	movwf	(?_Console_MakeField+1)& (0+255),b
 10546  0125B8  0012               	return	
 10547  0125BA                     __end_of_Console_MakeField:
 10548                           	opt stack 0
 10549                           tosu	equ	0xFFF
 10550                           tosh	equ	0xFFE
 10551                           tosl	equ	0xFFD
 10552                           pclath	equ	0xFFA
 10553                           tblptru	equ	0xFF8
 10554                           tblptrh	equ	0xFF7
 10555                           tblptrl	equ	0xFF6
 10556                           tablat	equ	0xFF5
 10557                           prodh	equ	0xFF4
 10558                           prodl	equ	0xFF3
 10559                           postinc0	equ	0xFEE
 10560                           wreg	equ	0xFE8
 10561                           indf1	equ	0xFE7
 10562                           postdec1	equ	0xFE5
 10563                           fsr1h	equ	0xFE2
 10564                           fsr1l	equ	0xFE1
 10565                           indf2	equ	0xFDF
 10566                           postinc2	equ	0xFDE
 10567                           postdec2	equ	0xFDD
 10568                           plusw2	equ	0xFDB
 10569                           fsr2h	equ	0xFDA
 10570                           fsr2l	equ	0xFD9
 10571                           status	equ	0xFD8
 10572                           
 10573 ;; *************** function _Byte_GetBit *****************
 10574 ;; Defined at:
 10575 ;;		line 38 in file "Library/Types.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10578 ;;		 -> Font5x7(480), 
 10579 ;;  pBit            1    2[BANK0 ] unsigned char 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  Output          1    4[BANK0 ] unsigned char 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      unsigned char 
 10584 ;; Registers used:
 10585 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10591 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;Total ram usage:        5 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    7
 10598 ;; This function calls:
 10599 ;;		Nothing
 10600 ;; This function is called by:
 10601 ;;		_Console_MakeField
 10602 ;;		_Word_GetBit
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           	psect	text58
 10607  0140D0                     __ptext58:
 10608                           	opt stack 0
 10609  0140D0                     _Byte_GetBit:
 10610                           	opt stack 18
 10611                           
 10612                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;incstack = 0
 10616  0140D0  C0C4  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10617  0140D4  C0C5  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10618  0140D8                     	if	0	;tblptru may be non-zero
 10619  0140D8                     	endif
 10620  0140D8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10621  0140D8  0E00               	movlw	low (__mediumconst shr (0+16))
 10622  0140DA  6EF8               	movwf	tblptru,c
 10623  0140DC                     	endif
 10624  0140DC  0008               	tblrd		*
 10625  0140DE  CFF5 F0C8          	movff	tablat,Byte_GetBit@Output
 10626                           
 10627                           ;Types.c: 42: Output >>= pBit;
 10628  0140E2  0100               	movlb	0	; () banked
 10629  0140E4  29C6               	incf	Byte_GetBit@pBit& (0+255),w,b
 10630  0140E6  0100               	movlb	0	; () banked
 10631  0140E8  6FC7               	movwf	??_Byte_GetBit& (0+255),b
 10632  0140EA  D003               	goto	u7100
 10633  0140EC                     u7105:
 10634  0140EC  0100               	movlb	0	; () banked
 10635  0140EE  90D8               	bcf	status,0,c
 10636  0140F0  33C8               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10637  0140F2                     u7100:
 10638  0140F2  0100               	movlb	0	; () banked
 10639  0140F4  2FC7               	decfsz	??_Byte_GetBit& (0+255),f,b
 10640  0140F6  D7FA               	goto	u7105
 10641                           
 10642                           ;Types.c: 43: Output &= 1;
 10643  0140F8  0E01               	movlw	1
 10644  0140FA  0100               	movlb	0	; () banked
 10645  0140FC  17C8               	andwf	Byte_GetBit@Output& (0+255),f,b
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;Types.c: 44: return Output;
 10649  0140FE  0100               	movlb	0	; () banked
 10650  014100  51C8               	movf	Byte_GetBit@Output& (0+255),w,b
 10651  014102  0012               	return	
 10652  014104                     __end_of_Byte_GetBit:
 10653                           	opt stack 0
 10654                           tosu	equ	0xFFF
 10655                           tosh	equ	0xFFE
 10656                           tosl	equ	0xFFD
 10657                           pclath	equ	0xFFA
 10658                           tblptru	equ	0xFF8
 10659                           tblptrh	equ	0xFF7
 10660                           tblptrl	equ	0xFF6
 10661                           tablat	equ	0xFF5
 10662                           prodh	equ	0xFF4
 10663                           prodl	equ	0xFF3
 10664                           postinc0	equ	0xFEE
 10665                           wreg	equ	0xFE8
 10666                           indf1	equ	0xFE7
 10667                           postdec1	equ	0xFE5
 10668                           fsr1h	equ	0xFE2
 10669                           fsr1l	equ	0xFE1
 10670                           indf2	equ	0xFDF
 10671                           postinc2	equ	0xFDE
 10672                           postdec2	equ	0xFDD
 10673                           plusw2	equ	0xFDB
 10674                           fsr2h	equ	0xFDA
 10675                           fsr2l	equ	0xFD9
 10676                           status	equ	0xFD8
 10677                           
 10678 ;; *************** function _initialise *****************
 10679 ;; Defined at:
 10680 ;;		line 35 in file "main.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;		None
 10685 ;; Return value:  Size  Location     Type
 10686 ;;                  1    wreg      void 
 10687 ;; Registers used:
 10688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;Total ram usage:        0 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; Hardware stack levels required when called:   17
 10701 ;; This function calls:
 10702 ;;		_Console_Init
 10703 ;;		_HMI_Init
 10704 ;;		_LCD_Init
 10705 ;;		_MXK_BlockSwitchTo
 10706 ;;		_MXK_Dequeue
 10707 ;;		_MXK_Init
 10708 ;;		_MXK_Release
 10709 ;; This function is called by:
 10710 ;;		_main
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           	psect	text59
 10715  0142AE                     __ptext59:
 10716                           	opt stack 0
 10717  0142AE                     _initialise:
 10718                           	opt stack 13
 10719                           
 10720                           ;main.c: 37: MXK_Init();
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;incstack = 0
 10724  0142AE  ECBC  F08D         	call	_MXK_Init	;wreg free
 10725                           
 10726                           ;main.c: 40: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 10727  0142B2  0E01               	movlw	1
 10728  0142B4  EC9B  F09F         	call	_MXK_BlockSwitchTo
 10729  0142B8  0900               	iorlw	0
 10730  0142BA  B4D8               	btfsc	status,2,c
 10731  0142BC  0012               	return	
 10732                           
 10733                           ;main.c: 42: LCD_Init();
 10734  0142BE  EC79  F08E         	call	_LCD_Init	;wreg free
 10735                           
 10736                           ;main.c: 43: Console_Init();
 10737  0142C2  EC5F  F099         	call	_Console_Init	;wreg free
 10738                           
 10739                           ;main.c: 44: HMI_Init();
 10740  0142C6  EC87  F089         	call	_HMI_Init	;wreg free
 10741                           
 10742                           ;main.c: 45: if (MXK_Release())
 10743  0142CA  ECF5  F0A2         	call	_MXK_Release	;wreg free
 10744  0142CE  0900               	iorlw	0
 10745  0142D0  B4D8               	btfsc	status,2,c
 10746  0142D2  0012               	return	
 10747                           
 10748                           ;main.c: 46: MXK_Dequeue();
 10749  0142D4  ECB3  F0A0         	call	_MXK_Dequeue	;wreg free
 10750  0142D8  0012               	return	
 10751  0142DA                     __end_of_initialise:
 10752                           	opt stack 0
 10753                           tosu	equ	0xFFF
 10754                           tosh	equ	0xFFE
 10755                           tosl	equ	0xFFD
 10756                           pclath	equ	0xFFA
 10757                           tblptru	equ	0xFF8
 10758                           tblptrh	equ	0xFF7
 10759                           tblptrl	equ	0xFF6
 10760                           tablat	equ	0xFF5
 10761                           prodh	equ	0xFF4
 10762                           prodl	equ	0xFF3
 10763                           postinc0	equ	0xFEE
 10764                           wreg	equ	0xFE8
 10765                           indf1	equ	0xFE7
 10766                           postdec1	equ	0xFE5
 10767                           fsr1h	equ	0xFE2
 10768                           fsr1l	equ	0xFE1
 10769                           indf2	equ	0xFDF
 10770                           postinc2	equ	0xFDE
 10771                           postdec2	equ	0xFDD
 10772                           plusw2	equ	0xFDB
 10773                           fsr2h	equ	0xFDA
 10774                           fsr2l	equ	0xFD9
 10775                           status	equ	0xFD8
 10776                           
 10777 ;; *************** function _MXK_Init *****************
 10778 ;; Defined at:
 10779 ;;		line 33 in file "Library/MXK.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;Total ram usage:        0 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:   16
 10800 ;; This function calls:
 10801 ;;		_LED_Init
 10802 ;;		_Port_Init
 10803 ;;		_Port_SetPin
 10804 ;;		_Port_SetPinType
 10805 ;;		_Port_SetQuadType
 10806 ;;		_Port_SetType
 10807 ;;		_delay_ms
 10808 ;; This function is called by:
 10809 ;;		_initialise
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text60
 10814  011B78                     __ptext60:
 10815                           	opt stack 0
 10816  011B78                     _MXK_Init:
 10817                           	opt stack 13
 10818                           
 10819                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 10820                           
 10821                           ;incstack = 0
 10822  011B78  0E01               	movlw	1
 10823  011B7A  6E43               	movwf	_Bus_State,c
 10824                           
 10825                           ;MXK.c: 36: lQueue = (Function)0;
 10826  011B7C  0E00               	movlw	0
 10827  011B7E  6E25               	movwf	_lQueue,c	;volatile
 10828  011B80  0E00               	movlw	0
 10829  011B82  6E26               	movwf	_lQueue+1,c	;volatile
 10830  011B84  0E00               	movlw	0
 10831  011B86  6E27               	movwf	_lQueue+2,c	;volatile
 10832                           
 10833                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 10834  011B88  0EE8               	movlw	low _PortA
 10835  011B8A  0102               	movlb	2	; () banked
 10836  011B8C  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10837  011B8E  0E01               	movlw	high _PortA
 10838  011B90  0102               	movlb	2	; () banked
 10839  011B92  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10840  011B94  0E00               	movlw	0
 10841  011B96  0102               	movlb	2	; () banked
 10842  011B98  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10843  011B9A  EC2D  F08C         	call	_Port_Init	;wreg free
 10844                           
 10845                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 10846  011B9E  0EDE               	movlw	low _PortB
 10847  011BA0  0102               	movlb	2	; () banked
 10848  011BA2  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10849  011BA4  0E01               	movlw	high _PortB
 10850  011BA6  0102               	movlb	2	; () banked
 10851  011BA8  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10852  011BAA  0E01               	movlw	1
 10853  011BAC  0102               	movlb	2	; () banked
 10854  011BAE  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10855  011BB0  EC2D  F08C         	call	_Port_Init	;wreg free
 10856                           
 10857                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 10858  011BB4  0E92               	movlw	low _PortC
 10859  011BB6  0102               	movlb	2	; () banked
 10860  011BB8  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10861  011BBA  0E00               	movlw	high _PortC
 10862  011BBC  0102               	movlb	2	; () banked
 10863  011BBE  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10864  011BC0  0E02               	movlw	2
 10865  011BC2  0102               	movlb	2	; () banked
 10866  011BC4  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10867  011BC6  EC2D  F08C         	call	_Port_Init	;wreg free
 10868                           
 10869                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 10870  011BCA  0E88               	movlw	low _PortD
 10871  011BCC  0102               	movlb	2	; () banked
 10872  011BCE  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10873  011BD0  0E00               	movlw	high _PortD
 10874  011BD2  0102               	movlb	2	; () banked
 10875  011BD4  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10876  011BD6  0E03               	movlw	3
 10877  011BD8  0102               	movlb	2	; () banked
 10878  011BDA  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10879  011BDC  EC2D  F08C         	call	_Port_Init	;wreg free
 10880                           
 10881                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 10882  011BE0  0E7E               	movlw	low _PortE
 10883  011BE2  0102               	movlb	2	; () banked
 10884  011BE4  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10885  011BE6  0E00               	movlw	high _PortE
 10886  011BE8  0102               	movlb	2	; () banked
 10887  011BEA  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10888  011BEC  0E04               	movlw	4
 10889  011BEE  0102               	movlb	2	; () banked
 10890  011BF0  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10891  011BF2  EC2D  F08C         	call	_Port_Init	;wreg free
 10892                           
 10893                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 10894  011BF6  0E9C               	movlw	low _PortF
 10895  011BF8  0102               	movlb	2	; () banked
 10896  011BFA  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10897  011BFC  0E00               	movlw	high _PortF
 10898  011BFE  0102               	movlb	2	; () banked
 10899  011C00  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10900  011C02  0E05               	movlw	5
 10901  011C04  0102               	movlb	2	; () banked
 10902  011C06  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10903  011C08  EC2D  F08C         	call	_Port_Init	;wreg free
 10904                           
 10905                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 10906  011C0C  0ED4               	movlw	low _PortG
 10907  011C0E  0102               	movlb	2	; () banked
 10908  011C10  6F0B               	movwf	Port_Init@pInput& (0+255),b
 10909  011C12  0E01               	movlw	high _PortG
 10910  011C14  0102               	movlb	2	; () banked
 10911  011C16  6F0C               	movwf	(Port_Init@pInput+1)& (0+255),b
 10912  011C18  0E06               	movlw	6
 10913  011C1A  0102               	movlb	2	; () banked
 10914  011C1C  6F0D               	movwf	Port_Init@pPort& (0+255),b
 10915  011C1E  EC2D  F08C         	call	_Port_Init	;wreg free
 10916                           
 10917                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 10918  011C22  0E9C               	movlw	low _PortF
 10919  011C24  0100               	movlb	0	; () banked
 10920  011C26  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 10921  011C28  0E00               	movlw	high _PortF
 10922  011C2A  0100               	movlb	0	; () banked
 10923  011C2C  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10924  011C2E  0E05               	movlw	5
 10925  011C30  0100               	movlb	0	; () banked
 10926  011C32  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 10927  011C34  0E00               	movlw	0
 10928  011C36  0100               	movlb	0	; () banked
 10929  011C38  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 10930  011C3A  EC84  F08A         	call	_Port_SetPinType	;wreg free
 10931                           
 10932                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 10933  011C3E  0EDE               	movlw	low _PortB
 10934  011C40  0102               	movlb	2	; () banked
 10935  011C42  6F03               	movwf	Port_SetQuadType@pInput& (0+255),b
 10936  011C44  0E01               	movlw	high _PortB
 10937  011C46  0102               	movlb	2	; () banked
 10938  011C48  6F04               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 10939  011C4A  0E00               	movlw	0
 10940  011C4C  0102               	movlb	2	; () banked
 10941  011C4E  6F05               	movwf	Port_SetQuadType@pQuad& (0+255),b
 10942  011C50  0E00               	movlw	0
 10943  011C52  0102               	movlb	2	; () banked
 10944  011C54  6F06               	movwf	Port_SetQuadType@pType& (0+255),b
 10945  011C56  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 10946                           
 10947                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 10948  011C5A  0E9C               	movlw	low _PortF
 10949  011C5C  0100               	movlb	0	; () banked
 10950  011C5E  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 10951  011C60  0E00               	movlw	high _PortF
 10952  011C62  0100               	movlb	0	; () banked
 10953  011C64  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10954  011C66  0E06               	movlw	6
 10955  011C68  0100               	movlb	0	; () banked
 10956  011C6A  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 10957  011C6C  0E03               	movlw	3
 10958  011C6E  0100               	movlb	0	; () banked
 10959  011C70  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 10960  011C72  EC84  F08A         	call	_Port_SetPinType	;wreg free
 10961                           
 10962                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 10963  011C76  0ED4               	movlw	low _PortG
 10964  011C78  0102               	movlb	2	; () banked
 10965  011C7A  6F06               	movwf	Port_SetType@pInput& (0+255),b
 10966  011C7C  0E01               	movlw	high _PortG
 10967  011C7E  0102               	movlb	2	; () banked
 10968  011C80  6F07               	movwf	(Port_SetType@pInput+1)& (0+255),b
 10969  011C82  0E03               	movlw	3
 10970  011C84  0102               	movlb	2	; () banked
 10971  011C86  6F08               	movwf	Port_SetType@pType& (0+255),b
 10972  011C88  EC59  F086         	call	_Port_SetType	;wreg free
 10973                           
 10974                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 10975  011C8C  0ED4               	movlw	low _PortG
 10976  011C8E  0100               	movlb	0	; () banked
 10977  011C90  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 10978  011C92  0E01               	movlw	high _PortG
 10979  011C94  0100               	movlb	0	; () banked
 10980  011C96  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10981  011C98  0E04               	movlw	4
 10982  011C9A  0100               	movlb	0	; () banked
 10983  011C9C  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 10984  011C9E  0E00               	movlw	0
 10985  011CA0  0100               	movlb	0	; () banked
 10986  011CA2  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 10987  011CA4  ECDD  F092         	call	_Port_SetPin	;wreg free
 10988                           
 10989                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 10990  011CA8  0E9C               	movlw	low _PortF
 10991  011CAA  0100               	movlb	0	; () banked
 10992  011CAC  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 10993  011CAE  0E00               	movlw	high _PortF
 10994  011CB0  0100               	movlb	0	; () banked
 10995  011CB2  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10996  011CB4  0E06               	movlw	6
 10997  011CB6  0100               	movlb	0	; () banked
 10998  011CB8  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 10999  011CBA  0E01               	movlw	1
 11000  011CBC  0100               	movlb	0	; () banked
 11001  011CBE  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 11002  011CC0  ECDD  F092         	call	_Port_SetPin	;wreg free
 11003                           
 11004                           ;MXK.c: 55: LED_Init(eLED1);
 11005  011CC4  0E00               	movlw	0
 11006  011CC6  ECE1  F09C         	call	_LED_Init
 11007                           
 11008                           ;MXK.c: 56: LED_Init(eLED2);
 11009  011CCA  0E01               	movlw	1
 11010  011CCC  ECE1  F09C         	call	_LED_Init
 11011                           
 11012                           ;MXK.c: 58: PIR1 = 0;
 11013  011CD0  0E00               	movlw	0
 11014  011CD2  6E9E               	movwf	3998,c	;volatile
 11015                           
 11016                           ;MXK.c: 59: PIR2 = 0;
 11017  011CD4  0E00               	movlw	0
 11018  011CD6  6EA1               	movwf	4001,c	;volatile
 11019                           
 11020                           ;MXK.c: 60: PIR3 = 0;
 11021  011CD8  0E00               	movlw	0
 11022  011CDA  6EA4               	movwf	4004,c	;volatile
 11023                           
 11024                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 11025  011CDC  8E9B               	bsf	3995,7,c	;volatile
 11026                           
 11027                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 11028  011CDE  8C9B               	bsf	3995,6,c	;volatile
 11029                           
 11030                           ;MXK.c: 66: delay_ms(100);
 11031  011CE0  0E00               	movlw	0
 11032  011CE2  0100               	movlb	0	; () banked
 11033  011CE4  6FC5               	movwf	(delay_ms@ms+1)& (0+255),b
 11034  011CE6  0E64               	movlw	100
 11035  011CE8  6FC4               	movwf	delay_ms@ms& (0+255),b
 11036  011CEA  ECE2  F09B         	call	_delay_ms	;wreg free
 11037                           
 11038                           ;MXK.c: 68: RCONbits.IPEN = 1;
 11039  011CEE  8ED0               	bsf	4048,7,c	;volatile
 11040  011CF0  0012               	return		;funcret
 11041  011CF2                     __end_of_MXK_Init:
 11042                           	opt stack 0
 11043                           tosu	equ	0xFFF
 11044                           tosh	equ	0xFFE
 11045                           tosl	equ	0xFFD
 11046                           pclath	equ	0xFFA
 11047                           tblptru	equ	0xFF8
 11048                           tblptrh	equ	0xFF7
 11049                           tblptrl	equ	0xFF6
 11050                           tablat	equ	0xFF5
 11051                           prodh	equ	0xFF4
 11052                           prodl	equ	0xFF3
 11053                           postinc0	equ	0xFEE
 11054                           wreg	equ	0xFE8
 11055                           indf1	equ	0xFE7
 11056                           postdec1	equ	0xFE5
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           plusw2	equ	0xFDB
 11063                           fsr2h	equ	0xFDA
 11064                           fsr2l	equ	0xFD9
 11065                           status	equ	0xFD8
 11066                           
 11067 ;; *************** function _Port_Init *****************
 11068 ;; Defined at:
 11069 ;;		line 150 in file "Library/Port.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;  pInput          2   11[BANK2 ] const PTR struct Port
 11072 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11073 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11074 ;;  pPort           1   13[BANK2 ] enum E6786
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;  i               1    0[BANK1 ] unsigned char 
 11077 ;; Return value:  Size  Location     Type
 11078 ;;                  1    wreg      void 
 11079 ;; Registers used:
 11080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11086 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;      Totals:         0       0       1       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;Total ram usage:        6 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:   15
 11093 ;; This function calls:
 11094 ;;		_GetPortPORT
 11095 ;;		_GetPortProperties
 11096 ;;		_GetPortTRIS
 11097 ;;		_Port_Set
 11098 ;;		_Port_SetPinType
 11099 ;;		_Port_SetType
 11100 ;;		_Word_GetPair
 11101 ;; This function is called by:
 11102 ;;		_MXK_Init
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           	psect	text61
 11107  01185A                     __ptext61:
 11108                           	opt stack 0
 11109  01185A                     _Port_Init:
 11110                           	opt stack 13
 11111                           
 11112                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 11113                           
 11114                           ;incstack = 0
 11115  01185A  0102               	movlb	2	; () banked
 11116  01185C  510D               	movf	Port_Init@pPort& (0+255),w,b
 11117  01185E  EC12  F096         	call	_GetPortProperties
 11118  011862  C20B  FFD9         	movff	Port_Init@pInput,fsr2l
 11119  011866  C20C  FFDA         	movff	Port_Init@pInput+1,fsr2h
 11120  01186A  0100               	movlb	0	; () banked
 11121  01186C  C0C4  FFDE         	movff	?_GetPortProperties,postinc2
 11122  011870  0100               	movlb	0	; () banked
 11123  011872  C0C5  FFDD         	movff	?_GetPortProperties+1,postdec2
 11124                           
 11125                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 11126  011876  0102               	movlb	2	; () banked
 11127  011878  510D               	movf	Port_Init@pPort& (0+255),w,b
 11128  01187A  EC65  F096         	call	_GetPortPORT
 11129  01187E  0102               	movlb	2	; () banked
 11130  011880  EE20 F006          	lfsr	2,6
 11131  011884  510B               	movf	Port_Init@pInput& (0+255),w,b
 11132  011886  26D9               	addwf	fsr2l,f,c
 11133  011888  510C               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11134  01188A  22DA               	addwfc	fsr2h,f,c
 11135  01188C  0100               	movlb	0	; () banked
 11136  01188E  C0C4  FFDE         	movff	?_GetPortPORT,postinc2
 11137  011892  0100               	movlb	0	; () banked
 11138  011894  C0C5  FFDD         	movff	?_GetPortPORT+1,postdec2
 11139                           
 11140                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 11141  011898  0102               	movlb	2	; () banked
 11142  01189A  510D               	movf	Port_Init@pPort& (0+255),w,b
 11143  01189C  EC65  F096         	call	_GetPortPORT
 11144  0118A0  0102               	movlb	2	; () banked
 11145  0118A2  EE20 F004          	lfsr	2,4
 11146  0118A6  510B               	movf	Port_Init@pInput& (0+255),w,b
 11147  0118A8  26D9               	addwf	fsr2l,f,c
 11148  0118AA  510C               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11149  0118AC  22DA               	addwfc	fsr2h,f,c
 11150  0118AE  0100               	movlb	0	; () banked
 11151  0118B0  C0C4  FFDE         	movff	?_GetPortPORT,postinc2
 11152  0118B4  0100               	movlb	0	; () banked
 11153  0118B6  C0C5  FFDD         	movff	?_GetPortPORT+1,postdec2
 11154                           
 11155                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 11156  0118BA  0102               	movlb	2	; () banked
 11157  0118BC  510D               	movf	Port_Init@pPort& (0+255),w,b
 11158  0118BE  ECBF  F095         	call	_GetPortTRIS
 11159  0118C2  0102               	movlb	2	; () banked
 11160  0118C4  EE20 F002          	lfsr	2,2
 11161  0118C8  510B               	movf	Port_Init@pInput& (0+255),w,b
 11162  0118CA  26D9               	addwf	fsr2l,f,c
 11163  0118CC  510C               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11164  0118CE  22DA               	addwfc	fsr2h,f,c
 11165  0118D0  0100               	movlb	0	; () banked
 11166  0118D2  C0C4  FFDE         	movff	?_GetPortTRIS,postinc2
 11167  0118D6  0100               	movlb	0	; () banked
 11168  0118D8  C0C5  FFDD         	movff	?_GetPortTRIS+1,postdec2
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 11172  0118DC  0102               	movlb	2	; () banked
 11173  0118DE  EE20 F004          	lfsr	2,4
 11174  0118E2  510B               	movf	Port_Init@pInput& (0+255),w,b
 11175  0118E4  26D9               	addwf	fsr2l,f,c
 11176  0118E6  510C               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11177  0118E8  22DA               	addwfc	fsr2h,f,c
 11178  0118EA  CFDE F20E          	movff	postinc2,??_Port_Init
 11179  0118EE  CFDD F20F          	movff	postdec2,??_Port_Init+1
 11180  0118F2  C20E  FFD9         	movff	??_Port_Init,fsr2l
 11181  0118F6  C20F  FFDA         	movff	??_Port_Init+1,fsr2h
 11182  0118FA  0E00               	movlw	0
 11183  0118FC  6EDF               	movwf	indf2,c
 11184                           
 11185                           ; BSR set to: 2
 11186                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 11187  0118FE  0102               	movlb	2	; () banked
 11188  011900  EE20 F002          	lfsr	2,2
 11189  011904  510B               	movf	Port_Init@pInput& (0+255),w,b
 11190  011906  26D9               	addwf	fsr2l,f,c
 11191  011908  510C               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11192  01190A  22DA               	addwfc	fsr2h,f,c
 11193  01190C  CFDE F20E          	movff	postinc2,??_Port_Init
 11194  011910  CFDD F20F          	movff	postdec2,??_Port_Init+1
 11195  011914  C20E  FFD9         	movff	??_Port_Init,fsr2l
 11196  011918  C20F  FFDA         	movff	??_Port_Init+1,fsr2h
 11197  01191C  0EFF               	movlw	255
 11198  01191E  6EDF               	movwf	indf2,c
 11199                           
 11200                           ; BSR set to: 2
 11201                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 11202  011920  C20B  F206         	movff	Port_Init@pInput,Port_SetType@pInput
 11203  011924  C20C  F207         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 11204  011928  0E00               	movlw	0
 11205  01192A  0102               	movlb	2	; () banked
 11206  01192C  6F08               	movwf	Port_SetType@pType& (0+255),b
 11207  01192E  EC59  F086         	call	_Port_SetType	;wreg free
 11208                           
 11209                           ;Port.c: 166: UINT8 i;
 11210                           ;Port.c: 167: for (i=0; i<8; i++)
 11211  011932  0E00               	movlw	0
 11212  011934  0101               	movlb	1	; () banked
 11213  011936  6FFF               	movwf	Port_Init@i& (0+255),b
 11214  011938                     l11528:
 11215                           
 11216                           ; BSR set to: 1
 11217  011938  0E07               	movlw	7
 11218  01193A  0101               	movlb	1	; () banked
 11219  01193C  65FF               	cpfsgt	Port_Init@i& (0+255),b
 11220  01193E  D031               	goto	l11542
 11221  011940  D04B               	goto	l11548
 11222  011942                     l11532:
 11223                           
 11224                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 11225  011942  C20B  F0EA         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11226  011946  C20C  F0EB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11227  01194A  C1FF  F0EC         	movff	Port_Init@i,Port_SetPinType@pPin
 11228  01194E  0E03               	movlw	3
 11229  011950  0100               	movlb	0	; () banked
 11230  011952  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 11231  011954  EC84  F08A         	call	_Port_SetPinType	;wreg free
 11232                           
 11233                           ;Port.c: 173: break;
 11234  011958  D03C               	goto	l11544
 11235  01195A                     l11534:
 11236                           
 11237                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 11238  01195A  C20B  F0EA         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11239  01195E  C20C  F0EB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11240  011962  C1FF  F0EC         	movff	Port_Init@i,Port_SetPinType@pPin
 11241  011966  0E02               	movlw	2
 11242  011968  0100               	movlb	0	; () banked
 11243  01196A  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 11244  01196C  EC84  F08A         	call	_Port_SetPinType	;wreg free
 11245                           
 11246                           ;Port.c: 176: break;
 11247  011970  D030               	goto	l11544
 11248  011972                     l11536:
 11249                           
 11250                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 11251  011972  C20B  F0EA         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11252  011976  C20C  F0EB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11253  01197A  C1FF  F0EC         	movff	Port_Init@i,Port_SetPinType@pPin
 11254  01197E  0E01               	movlw	1
 11255  011980  0100               	movlb	0	; () banked
 11256  011982  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 11257  011984  EC84  F08A         	call	_Port_SetPinType	;wreg free
 11258                           
 11259                           ;Port.c: 179: break;
 11260  011988  D024               	goto	l11544
 11261  01198A                     l11538:
 11262                           
 11263                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 11264  01198A  C20B  F0EA         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11265  01198E  C20C  F0EB         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11266  011992  C1FF  F0EC         	movff	Port_Init@i,Port_SetPinType@pPin
 11267  011996  0E00               	movlw	0
 11268  011998  0100               	movlb	0	; () banked
 11269  01199A  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 11270  01199C  EC84  F08A         	call	_Port_SetPinType	;wreg free
 11271                           
 11272                           ;Port.c: 183: }
 11273                           
 11274                           ;Port.c: 182: break;
 11275  0119A0  D018               	goto	l11544
 11276  0119A2                     l11542:
 11277  0119A2  C20B  FFD9         	movff	Port_Init@pInput,fsr2l
 11278  0119A6  C20C  FFDA         	movff	Port_Init@pInput+1,fsr2h
 11279  0119AA  CFDE F0D0          	movff	postinc2,Word_GetPair@pInput
 11280  0119AE  CFDD F0D1          	movff	postdec2,Word_GetPair@pInput+1
 11281  0119B2  C1FF  F0D2         	movff	Port_Init@i,Word_GetPair@pPair
 11282  0119B6  ECBA  F09F         	call	_Word_GetPair	;wreg free
 11283                           
 11284                           ; Switch size 1, requested type "space"
 11285                           ; Number of cases is 4, Range of values is 0 to 3
 11286                           ; switch strategies available:
 11287                           ; Name         Instructions Cycles
 11288                           ; simple_byte           13     7 (average)
 11289                           ;	Chosen strategy is simple_byte
 11290  0119BA  0A00               	xorlw	0	; case 0
 11291  0119BC  B4D8               	btfsc	status,2,c
 11292  0119BE  D7C1               	goto	l11532
 11293  0119C0  0A01               	xorlw	1	; case 1
 11294  0119C2  B4D8               	btfsc	status,2,c
 11295  0119C4  D7D6               	goto	l11536
 11296  0119C6  0A03               	xorlw	3	; case 2
 11297  0119C8  B4D8               	btfsc	status,2,c
 11298  0119CA  D7C7               	goto	l11534
 11299  0119CC  0A01               	xorlw	1	; case 3
 11300  0119CE  B4D8               	btfsc	status,2,c
 11301  0119D0  D7DC               	goto	l11538
 11302  0119D2                     l11544:
 11303  0119D2  0101               	movlb	1	; () banked
 11304  0119D4  2BFF               	incf	Port_Init@i& (0+255),f,b
 11305  0119D6  D7B0               	goto	l11528
 11306  0119D8                     l11548:
 11307                           
 11308                           ; BSR set to: 1
 11309                           ;Port.c: 184: }
 11310                           ;Port.c: 185: Port_Set(pInput, 0x00);
 11311  0119D8  C20B  F0D3         	movff	Port_Init@pInput,Port_Set@pInput
 11312  0119DC  C20C  F0D4         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 11313  0119E0  0E00               	movlw	0
 11314  0119E2  0100               	movlb	0	; () banked
 11315  0119E4  6FD5               	movwf	Port_Set@pValue& (0+255),b
 11316  0119E6  EC0F  F082         	call	_Port_Set	;wreg free
 11317  0119EA  0012               	return		;funcret
 11318  0119EC                     __end_of_Port_Init:
 11319                           	opt stack 0
 11320                           tosu	equ	0xFFF
 11321                           tosh	equ	0xFFE
 11322                           tosl	equ	0xFFD
 11323                           pclath	equ	0xFFA
 11324                           tblptru	equ	0xFF8
 11325                           tblptrh	equ	0xFF7
 11326                           tblptrl	equ	0xFF6
 11327                           tablat	equ	0xFF5
 11328                           prodh	equ	0xFF4
 11329                           prodl	equ	0xFF3
 11330                           postinc0	equ	0xFEE
 11331                           wreg	equ	0xFE8
 11332                           indf1	equ	0xFE7
 11333                           postdec1	equ	0xFE5
 11334                           fsr1h	equ	0xFE2
 11335                           fsr1l	equ	0xFE1
 11336                           indf2	equ	0xFDF
 11337                           postinc2	equ	0xFDE
 11338                           postdec2	equ	0xFDD
 11339                           plusw2	equ	0xFDB
 11340                           fsr2h	equ	0xFDA
 11341                           fsr2l	equ	0xFD9
 11342                           status	equ	0xFD8
 11343                           
 11344 ;; *************** function _Port_SetType *****************
 11345 ;; Defined at:
 11346 ;;		line 513 in file "Library/Port.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  pInput          2    6[BANK2 ] const PTR struct Port
 11349 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11350 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11351 ;;  pType           1    8[BANK2 ] enum E6795
 11352 ;; Auto vars:     Size  Location     Type
 11353 ;;  Output          1   52[BANK0 ] enum E6475
 11354 ;; Return value:  Size  Location     Type
 11355 ;;                  1    wreg      enum E6475
 11356 ;; Registers used:
 11357 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11363 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11365 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;      Totals:         0       1       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;Total ram usage:        6 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; Hardware stack levels required when called:   14
 11370 ;; This function calls:
 11371 ;;		_Port_CheckPortType
 11372 ;;		_Word_SetPair
 11373 ;; This function is called by:
 11374 ;;		_Port_Init
 11375 ;;		_MXK_Init
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           	psect	text62
 11380  010CB2                     __ptext62:
 11381                           	opt stack 0
 11382  010CB2                     _Port_SetType:
 11383                           	opt stack 14
 11384                           
 11385                           ;Port.c: 515: ePinError Output = ePinErrorState;
 11386                           
 11387                           ;incstack = 0
 11388  010CB2  0E05               	movlw	5
 11389  010CB4  0100               	movlb	0	; () banked
 11390  010CB6  6FF8               	movwf	Port_SetType@Output& (0+255),b
 11391                           
 11392                           ;Port.c: 517: switch (pType)
 11393  010CB8  D07A               	goto	l11254
 11394  010CBA                     l11238:
 11395                           
 11396                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 11397  010CBA  0102               	movlb	2	; () banked
 11398  010CBC  EE20 F002          	lfsr	2,2
 11399  010CC0  5106               	movf	Port_SetType@pInput& (0+255),w,b
 11400  010CC2  26D9               	addwf	fsr2l,f,c
 11401  010CC4  5107               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11402  010CC6  22DA               	addwfc	fsr2h,f,c
 11403  010CC8  CFDE F209          	movff	postinc2,??_Port_SetType
 11404  010CCC  CFDD F20A          	movff	postdec2,??_Port_SetType+1
 11405  010CD0  C209  FFD9         	movff	??_Port_SetType,fsr2l
 11406  010CD4  C20A  FFDA         	movff	??_Port_SetType+1,fsr2h
 11407  010CD8  0EFF               	movlw	255
 11408  010CDA  D067               	goto	L3
 11409  010CDC                     l11240:
 11410                           
 11411                           ; BSR set to: 2
 11412                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 11413  010CDC  C206  F203         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 11414  010CE0  C207  F204         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 11415  010CE4  0E01               	movlw	1
 11416  010CE6  0102               	movlb	2	; () banked
 11417  010CE8  6F05               	movwf	Port_CheckPortType@pDrive& (0+255),b
 11418  010CEA  ECAA  F09E         	call	_Port_CheckPortType	;wreg free
 11419  010CEE  0100               	movlb	0	; () banked
 11420  010CF0  6FF8               	movwf	Port_SetType@Output& (0+255),b
 11421  010CF2  0100               	movlb	0	; () banked
 11422  010CF4  51F8               	movf	Port_SetType@Output& (0+255),w,b
 11423  010CF6  A4D8               	btfss	status,2,c
 11424  010CF8  0012               	return	
 11425                           
 11426                           ; BSR set to: 0
 11427                           ;Port.c: 527: {
 11428                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 11429  010CFA  0102               	movlb	2	; () banked
 11430  010CFC  EE20 F002          	lfsr	2,2
 11431  010D00  5106               	movf	Port_SetType@pInput& (0+255),w,b
 11432  010D02  26D9               	addwf	fsr2l,f,c
 11433  010D04  5107               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11434  010D06  22DA               	addwfc	fsr2h,f,c
 11435  010D08  CFDE F209          	movff	postinc2,??_Port_SetType
 11436  010D0C  CFDD F20A          	movff	postdec2,??_Port_SetType+1
 11437  010D10  C209  FFD9         	movff	??_Port_SetType,fsr2l
 11438  010D14  C20A  FFDA         	movff	??_Port_SetType+1,fsr2h
 11439  010D18  0E00               	movlw	0
 11440  010D1A  6EDF               	movwf	indf2,c
 11441                           
 11442                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 11443  010D1C  0102               	movlb	2	; () banked
 11444  010D1E  EE20 F004          	lfsr	2,4
 11445  010D22  D036               	goto	L8
 11446  010D24                     l11244:
 11447                           
 11448                           ; BSR set to: 2
 11449                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 11450  010D24  C206  F203         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 11451  010D28  C207  F204         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 11452  010D2C  0E02               	movlw	2
 11453  010D2E  0102               	movlb	2	; () banked
 11454  010D30  6F05               	movwf	Port_CheckPortType@pDrive& (0+255),b
 11455  010D32  ECAA  F09E         	call	_Port_CheckPortType	;wreg free
 11456  010D36  0100               	movlb	0	; () banked
 11457  010D38  6FF8               	movwf	Port_SetType@Output& (0+255),b
 11458  010D3A  0100               	movlb	0	; () banked
 11459  010D3C  51F8               	movf	Port_SetType@Output& (0+255),w,b
 11460  010D3E  A4D8               	btfss	status,2,c
 11461  010D40  0012               	return	
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;Port.c: 538: {
 11465                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 11466  010D42  0102               	movlb	2	; () banked
 11467  010D44  EE20 F002          	lfsr	2,2
 11468  010D48  5106               	movf	Port_SetType@pInput& (0+255),w,b
 11469  010D4A  26D9               	addwf	fsr2l,f,c
 11470  010D4C  5107               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11471  010D4E  22DA               	addwfc	fsr2h,f,c
 11472  010D50  CFDE F209          	movff	postinc2,??_Port_SetType
 11473  010D54  CFDD F20A          	movff	postdec2,??_Port_SetType+1
 11474  010D58  C209  FFD9         	movff	??_Port_SetType,fsr2l
 11475  010D5C  C20A  FFDA         	movff	??_Port_SetType+1,fsr2h
 11476  010D60  0EFF               	movlw	255
 11477  010D62  6EDF               	movwf	indf2,c
 11478                           
 11479                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 11480  010D64  0102               	movlb	2	; () banked
 11481  010D66  EE20 F004          	lfsr	2,4
 11482  010D6A  D7AA               	goto	L4
 11483  010D6C                     l11248:
 11484                           
 11485                           ; BSR set to: 2
 11486                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 11487  010D6C  C206  F203         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 11488  010D70  C207  F204         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 11489  010D74  0E00               	movlw	0
 11490  010D76  0102               	movlb	2	; () banked
 11491  010D78  6F05               	movwf	Port_CheckPortType@pDrive& (0+255),b
 11492  010D7A  ECAA  F09E         	call	_Port_CheckPortType	;wreg free
 11493  010D7E  0100               	movlb	0	; () banked
 11494  010D80  6FF8               	movwf	Port_SetType@Output& (0+255),b
 11495  010D82  0100               	movlb	0	; () banked
 11496  010D84  51F8               	movf	Port_SetType@Output& (0+255),w,b
 11497  010D86  A4D8               	btfss	status,2,c
 11498  010D88  0012               	return	
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;Port.c: 549: {
 11502                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 11503  010D8A  0102               	movlb	2	; () banked
 11504  010D8C  EE20 F002          	lfsr	2,2
 11505  010D90                     L8:
 11506  010D90  5106               	movf	Port_SetType@pInput& (0+255),w,b
 11507  010D92  26D9               	addwf	fsr2l,f,c
 11508  010D94  5107               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11509  010D96  22DA               	addwfc	fsr2h,f,c
 11510  010D98  CFDE F209          	movff	postinc2,??_Port_SetType
 11511  010D9C  CFDD F20A          	movff	postdec2,??_Port_SetType+1
 11512  010DA0  C209  FFD9         	movff	??_Port_SetType,fsr2l
 11513  010DA4  C20A  FFDA         	movff	??_Port_SetType+1,fsr2h
 11514  010DA8  0E00               	movlw	0
 11515  010DAA                     L3:
 11516  010DAA  6EDF               	movwf	indf2,c
 11517                           
 11518                           ;Port.c: 552: }
 11519  010DAC  D00E               	goto	l11256
 11520  010DAE                     l11254:
 11521  010DAE  0102               	movlb	2	; () banked
 11522  010DB0  5108               	movf	Port_SetType@pType& (0+255),w,b
 11523                           
 11524                           ; Switch size 1, requested type "space"
 11525                           ; Number of cases is 4, Range of values is 0 to 3
 11526                           ; switch strategies available:
 11527                           ; Name         Instructions Cycles
 11528                           ; simple_byte           13     7 (average)
 11529                           ;	Chosen strategy is simple_byte
 11530  010DB2  0A00               	xorlw	0	; case 0
 11531  010DB4  B4D8               	btfsc	status,2,c
 11532  010DB6  D781               	goto	l11238
 11533  010DB8  0A01               	xorlw	1	; case 1
 11534  010DBA  B4D8               	btfsc	status,2,c
 11535  010DBC  D78F               	goto	l11240
 11536  010DBE  0A03               	xorlw	3	; case 2
 11537  010DC0  B4D8               	btfsc	status,2,c
 11538  010DC2  D7B0               	goto	l11244
 11539  010DC4  0A01               	xorlw	1	; case 3
 11540  010DC6  B4D8               	btfsc	status,2,c
 11541  010DC8  D7D1               	goto	l11248
 11542  010DCA                     l11256:
 11543                           
 11544                           ; BSR set to: 2
 11545                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 11546  010DCA  0E08               	movlw	8
 11547  010DCC  0102               	movlb	2	; () banked
 11548  010DCE  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11549  010DD0  0100               	movlb	0	; () banked
 11550  010DD2  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11551  010DD4  0E00               	movlw	0
 11552  010DD6  0102               	movlb	2	; () banked
 11553  010DD8  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11554  010DDA  0100               	movlb	0	; () banked
 11555  010DDC  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11556  010DDE  0E00               	movlw	0
 11557  010DE0  0100               	movlb	0	; () banked
 11558  010DE2  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11559  010DE4  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11560  010DE8  EC15  F09F         	call	_Word_SetPair	;wreg free
 11561                           
 11562                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 11563  010DEC  0E08               	movlw	8
 11564  010DEE  0102               	movlb	2	; () banked
 11565  010DF0  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11566  010DF2  0100               	movlb	0	; () banked
 11567  010DF4  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11568  010DF6  0E00               	movlw	0
 11569  010DF8  0102               	movlb	2	; () banked
 11570  010DFA  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11571  010DFC  0100               	movlb	0	; () banked
 11572  010DFE  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11573  010E00  0E01               	movlw	1
 11574  010E02  0100               	movlb	0	; () banked
 11575  010E04  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11576  010E06  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11577  010E0A  EC15  F09F         	call	_Word_SetPair	;wreg free
 11578                           
 11579                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 11580  010E0E  0E08               	movlw	8
 11581  010E10  0102               	movlb	2	; () banked
 11582  010E12  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11583  010E14  0100               	movlb	0	; () banked
 11584  010E16  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11585  010E18  0E00               	movlw	0
 11586  010E1A  0102               	movlb	2	; () banked
 11587  010E1C  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11588  010E1E  0100               	movlb	0	; () banked
 11589  010E20  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11590  010E22  0E02               	movlw	2
 11591  010E24  0100               	movlb	0	; () banked
 11592  010E26  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11593  010E28  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11594  010E2C  EC15  F09F         	call	_Word_SetPair	;wreg free
 11595                           
 11596                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 11597  010E30  0E08               	movlw	8
 11598  010E32  0102               	movlb	2	; () banked
 11599  010E34  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11600  010E36  0100               	movlb	0	; () banked
 11601  010E38  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11602  010E3A  0E00               	movlw	0
 11603  010E3C  0102               	movlb	2	; () banked
 11604  010E3E  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11605  010E40  0100               	movlb	0	; () banked
 11606  010E42  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11607  010E44  0E03               	movlw	3
 11608  010E46  0100               	movlb	0	; () banked
 11609  010E48  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11610  010E4A  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11611  010E4E  EC15  F09F         	call	_Word_SetPair	;wreg free
 11612                           
 11613                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 11614  010E52  0E08               	movlw	8
 11615  010E54  0102               	movlb	2	; () banked
 11616  010E56  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11617  010E58  0100               	movlb	0	; () banked
 11618  010E5A  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11619  010E5C  0E00               	movlw	0
 11620  010E5E  0102               	movlb	2	; () banked
 11621  010E60  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11622  010E62  0100               	movlb	0	; () banked
 11623  010E64  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11624  010E66  0E04               	movlw	4
 11625  010E68  0100               	movlb	0	; () banked
 11626  010E6A  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11627  010E6C  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11628  010E70  EC15  F09F         	call	_Word_SetPair	;wreg free
 11629                           
 11630                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 11631  010E74  0E08               	movlw	8
 11632  010E76  0102               	movlb	2	; () banked
 11633  010E78  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11634  010E7A  0100               	movlb	0	; () banked
 11635  010E7C  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11636  010E7E  0E00               	movlw	0
 11637  010E80  0102               	movlb	2	; () banked
 11638  010E82  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11639  010E84  0100               	movlb	0	; () banked
 11640  010E86  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11641  010E88  0E05               	movlw	5
 11642  010E8A  0100               	movlb	0	; () banked
 11643  010E8C  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11644  010E8E  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11645  010E92  EC15  F09F         	call	_Word_SetPair	;wreg free
 11646                           
 11647                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 11648  010E96  0E08               	movlw	8
 11649  010E98  0102               	movlb	2	; () banked
 11650  010E9A  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11651  010E9C  0100               	movlb	0	; () banked
 11652  010E9E  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11653  010EA0  0E00               	movlw	0
 11654  010EA2  0102               	movlb	2	; () banked
 11655  010EA4  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11656  010EA6  0100               	movlb	0	; () banked
 11657  010EA8  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11658  010EAA  0E06               	movlw	6
 11659  010EAC  0100               	movlb	0	; () banked
 11660  010EAE  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11661  010EB0  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11662  010EB4  EC15  F09F         	call	_Word_SetPair	;wreg free
 11663                           
 11664                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 11665  010EB8  0E08               	movlw	8
 11666  010EBA  0102               	movlb	2	; () banked
 11667  010EBC  2506               	addwf	Port_SetType@pInput& (0+255),w,b
 11668  010EBE  0100               	movlb	0	; () banked
 11669  010EC0  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 11670  010EC2  0E00               	movlw	0
 11671  010EC4  0102               	movlb	2	; () banked
 11672  010EC6  2107               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11673  010EC8  0100               	movlb	0	; () banked
 11674  010ECA  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11675  010ECC  0E07               	movlw	7
 11676  010ECE  0100               	movlb	0	; () banked
 11677  010ED0  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 11678  010ED2  C208  F0D6         	movff	Port_SetType@pType,Word_SetPair@pValue
 11679  010ED6  EC15  F09F         	call	_Word_SetPair	;wreg free
 11680  010EDA  0012               	return	
 11681  010EDC                     __end_of_Port_SetType:
 11682                           	opt stack 0
 11683                           tosu	equ	0xFFF
 11684                           tosh	equ	0xFFE
 11685                           tosl	equ	0xFFD
 11686                           pclath	equ	0xFFA
 11687                           tblptru	equ	0xFF8
 11688                           tblptrh	equ	0xFF7
 11689                           tblptrl	equ	0xFF6
 11690                           tablat	equ	0xFF5
 11691                           prodh	equ	0xFF4
 11692                           prodl	equ	0xFF3
 11693                           postinc0	equ	0xFEE
 11694                           wreg	equ	0xFE8
 11695                           indf1	equ	0xFE7
 11696                           postdec1	equ	0xFE5
 11697                           fsr1h	equ	0xFE2
 11698                           fsr1l	equ	0xFE1
 11699                           indf2	equ	0xFDF
 11700                           postinc2	equ	0xFDE
 11701                           postdec2	equ	0xFDD
 11702                           plusw2	equ	0xFDB
 11703                           fsr2h	equ	0xFDA
 11704                           fsr2l	equ	0xFD9
 11705                           status	equ	0xFD8
 11706                           
 11707 ;; *************** function _Port_CheckPortType *****************
 11708 ;; Defined at:
 11709 ;;		line 138 in file "Library/Port.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;  pInput          2    3[BANK2 ] const PTR struct Port
 11712 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11713 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11714 ;;  pDrive          1    5[BANK2 ] enum E6469
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  Output          1   51[BANK0 ] enum E6475
 11717 ;; Return value:  Size  Location     Type
 11718 ;;                  1    wreg      enum E6475
 11719 ;; Registers used:
 11720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11721 ;; Tracked objects:
 11722 ;;		On entry : 0/0
 11723 ;;		On exit  : 0/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11726 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11729 ;;      Totals:         0       1       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11730 ;;Total ram usage:        4 bytes
 11731 ;; Hardware stack levels used:    1
 11732 ;; Hardware stack levels required when called:   13
 11733 ;; This function calls:
 11734 ;;		_Port_CheckQuadType
 11735 ;; This function is called by:
 11736 ;;		_Port_SetType
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           	psect	text63
 11741  013D54                     __ptext63:
 11742                           	opt stack 0
 11743  013D54                     _Port_CheckPortType:
 11744                           	opt stack 14
 11745                           
 11746                           ;Port.c: 140: ePinError Output = ePinErrorState;
 11747                           
 11748                           ;incstack = 0
 11749  013D54  0E05               	movlw	5
 11750  013D56  0100               	movlb	0	; () banked
 11751  013D58  6FF7               	movwf	Port_CheckPortType@Output& (0+255),b
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 11755  013D5A  C203  F0F3         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 11756  013D5E  C204  F0F4         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 11757  013D62  0E00               	movlw	0
 11758  013D64  0100               	movlb	0	; () banked
 11759  013D66  6FF5               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 11760  013D68  C205  F0F6         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 11761  013D6C  EC12  F09D         	call	_Port_CheckQuadType	;wreg free
 11762  013D70  0100               	movlb	0	; () banked
 11763  013D72  6FF7               	movwf	Port_CheckPortType@Output& (0+255),b
 11764  013D74  0100               	movlb	0	; () banked
 11765  013D76  51F7               	movf	Port_CheckPortType@Output& (0+255),w,b
 11766  013D78  A4D8               	btfss	status,2,c
 11767  013D7A  D00D               	goto	l10820
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 11771  013D7C  C203  F0F3         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 11772  013D80  C204  F0F4         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 11773  013D84  0E01               	movlw	1
 11774  013D86  0100               	movlb	0	; () banked
 11775  013D88  6FF5               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 11776  013D8A  C205  F0F6         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 11777  013D8E  EC12  F09D         	call	_Port_CheckQuadType	;wreg free
 11778  013D92  0100               	movlb	0	; () banked
 11779  013D94  6FF7               	movwf	Port_CheckPortType@Output& (0+255),b
 11780  013D96                     l10820:
 11781                           
 11782                           ; BSR set to: 0
 11783                           ;Port.c: 146: return Output;
 11784  013D96  0100               	movlb	0	; () banked
 11785  013D98  51F7               	movf	Port_CheckPortType@Output& (0+255),w,b
 11786  013D9A  0012               	return	
 11787  013D9C                     __end_of_Port_CheckPortType:
 11788                           	opt stack 0
 11789                           tosu	equ	0xFFF
 11790                           tosh	equ	0xFFE
 11791                           tosl	equ	0xFFD
 11792                           pclath	equ	0xFFA
 11793                           tblptru	equ	0xFF8
 11794                           tblptrh	equ	0xFF7
 11795                           tblptrl	equ	0xFF6
 11796                           tablat	equ	0xFF5
 11797                           prodh	equ	0xFF4
 11798                           prodl	equ	0xFF3
 11799                           postinc0	equ	0xFEE
 11800                           wreg	equ	0xFE8
 11801                           indf1	equ	0xFE7
 11802                           postdec1	equ	0xFE5
 11803                           fsr1h	equ	0xFE2
 11804                           fsr1l	equ	0xFE1
 11805                           indf2	equ	0xFDF
 11806                           postinc2	equ	0xFDE
 11807                           postdec2	equ	0xFDD
 11808                           plusw2	equ	0xFDB
 11809                           fsr2h	equ	0xFDA
 11810                           fsr2l	equ	0xFD9
 11811                           status	equ	0xFD8
 11812                           
 11813 ;; *************** function _Port_Set *****************
 11814 ;; Defined at:
 11815 ;;		line 570 in file "Library/Port.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 11818 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11819 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11820 ;;  pValue          1   17[BANK0 ] unsigned char 
 11821 ;; Auto vars:     Size  Location     Type
 11822 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 11823 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 11824 ;;  Type            1   38[BANK0 ] enum E6795
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  1    wreg      void 
 11827 ;; Registers used:
 11828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11834 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11835 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11836 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11838 ;;Total ram usage:       24 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:   10
 11841 ;; This function calls:
 11842 ;;		_Byte_SetByte
 11843 ;;		_Word_GetPair
 11844 ;; This function is called by:
 11845 ;;		_Port_Init
 11846 ;;		_Port_Toggle
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           	psect	text64
 11851  01041E                     __ptext64:
 11852                           	opt stack 0
 11853  01041E                     _Port_Set:
 11854                           	opt stack 17
 11855                           
 11856                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;incstack = 0
 11860  01041E  0E08               	movlw	8
 11861  010420  0100               	movlb	0	; () banked
 11862  010422  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 11863  010424  0100               	movlb	0	; () banked
 11864  010426  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 11865  010428  0E00               	movlw	0
 11866  01042A  0100               	movlb	0	; () banked
 11867  01042C  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11868  01042E  0100               	movlb	0	; () banked
 11869  010430  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11870  010432  0E00               	movlw	0
 11871  010434  0100               	movlb	0	; () banked
 11872  010436  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 11873  010438  ECBA  F09F         	call	_Word_GetPair	;wreg free
 11874  01043C  0100               	movlb	0	; () banked
 11875  01043E  6FEA               	movwf	Port_Set@Type& (0+255),b
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 11879  010440  0100               	movlb	0	; () banked
 11880  010442  51EA               	movf	Port_Set@Type& (0+255),w,b
 11881  010444  0100               	movlb	0	; () banked
 11882  010446  6FD6               	movwf	??_Port_Set& (0+255),b
 11883  010448  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 11884  01044A  0E0E               	movlw	14
 11885  01044C                     u7535:
 11886  01044C  90D8               	bcf	status,0,c
 11887  01044E  0100               	movlb	0	; () banked
 11888  010450  37D6               	rlcf	??_Port_Set& (0+255),f,b
 11889  010452  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11890  010454  2EE8               	decfsz	wreg,f,c
 11891  010456  D7FA               	goto	u7535
 11892  010458  0100               	movlb	0	; () banked
 11893  01045A  51EA               	movf	Port_Set@Type& (0+255),w,b
 11894  01045C  0100               	movlb	0	; () banked
 11895  01045E  6FD8               	movwf	(??_Port_Set+2)& (0+255),b
 11896  010460  6BD9               	clrf	(??_Port_Set+3)& (0+255),b
 11897  010462  0E0C               	movlw	12
 11898  010464                     u7545:
 11899  010464  90D8               	bcf	status,0,c
 11900  010466  0100               	movlb	0	; () banked
 11901  010468  37D8               	rlcf	(??_Port_Set+2)& (0+255),f,b
 11902  01046A  37D9               	rlcf	(??_Port_Set+3)& (0+255),f,b
 11903  01046C  2EE8               	decfsz	wreg,f,c
 11904  01046E  D7FA               	goto	u7545
 11905  010470  0100               	movlb	0	; () banked
 11906  010472  51EA               	movf	Port_Set@Type& (0+255),w,b
 11907  010474  0100               	movlb	0	; () banked
 11908  010476  6FDA               	movwf	(??_Port_Set+4)& (0+255),b
 11909  010478  6BDB               	clrf	(??_Port_Set+5)& (0+255),b
 11910  01047A  0E0A               	movlw	10
 11911  01047C                     u7555:
 11912  01047C  90D8               	bcf	status,0,c
 11913  01047E  0100               	movlb	0	; () banked
 11914  010480  37DA               	rlcf	(??_Port_Set+4)& (0+255),f,b
 11915  010482  37DB               	rlcf	(??_Port_Set+5)& (0+255),f,b
 11916  010484  2EE8               	decfsz	wreg,f,c
 11917  010486  D7FA               	goto	u7555
 11918  010488  0100               	movlb	0	; () banked
 11919  01048A  51EA               	movf	Port_Set@Type& (0+255),w,b
 11920  01048C  0100               	movlb	0	; () banked
 11921  01048E  6FDD               	movwf	(??_Port_Set+7)& (0+255),b
 11922  010490  6BDC               	clrf	(??_Port_Set+6)& (0+255),b
 11923  010492  0100               	movlb	0	; () banked
 11924  010494  51EA               	movf	Port_Set@Type& (0+255),w,b
 11925  010496  0100               	movlb	0	; () banked
 11926  010498  6FDE               	movwf	(??_Port_Set+8)& (0+255),b
 11927  01049A  6BDF               	clrf	(??_Port_Set+9)& (0+255),b
 11928  01049C  0E06               	movlw	6
 11929  01049E                     u7565:
 11930  01049E  90D8               	bcf	status,0,c
 11931  0104A0  0100               	movlb	0	; () banked
 11932  0104A2  37DE               	rlcf	(??_Port_Set+8)& (0+255),f,b
 11933  0104A4  37DF               	rlcf	(??_Port_Set+9)& (0+255),f,b
 11934  0104A6  2EE8               	decfsz	wreg,f,c
 11935  0104A8  D7FA               	goto	u7565
 11936  0104AA  0100               	movlb	0	; () banked
 11937  0104AC  51EA               	movf	Port_Set@Type& (0+255),w,b
 11938  0104AE  0100               	movlb	0	; () banked
 11939  0104B0  6FE0               	movwf	(??_Port_Set+10)& (0+255),b
 11940  0104B2  6BE1               	clrf	(??_Port_Set+11)& (0+255),b
 11941  0104B4  0100               	movlb	0	; () banked
 11942  0104B6  3BE0               	swapf	(??_Port_Set+10)& (0+255),f,b
 11943  0104B8  3BE1               	swapf	(??_Port_Set+11)& (0+255),f,b
 11944  0104BA  0EF0               	movlw	240
 11945  0104BC  17E1               	andwf	(??_Port_Set+11)& (0+255),f,b
 11946  0104BE  51E0               	movf	(??_Port_Set+10)& (0+255),w,b
 11947  0104C0  0B0F               	andlw	15
 11948  0104C2  13E1               	iorwf	(??_Port_Set+11)& (0+255),f,b
 11949  0104C4  0EF0               	movlw	240
 11950  0104C6  17E0               	andwf	(??_Port_Set+10)& (0+255),f,b
 11951  0104C8  0100               	movlb	0	; () banked
 11952  0104CA  51EA               	movf	Port_Set@Type& (0+255),w,b
 11953  0104CC  0100               	movlb	0	; () banked
 11954  0104CE  6FE2               	movwf	(??_Port_Set+12)& (0+255),b
 11955  0104D0  6BE3               	clrf	(??_Port_Set+13)& (0+255),b
 11956  0104D2  0100               	movlb	0	; () banked
 11957  0104D4  90D8               	bcf	status,0,c
 11958  0104D6  37E2               	rlcf	(??_Port_Set+12)& (0+255),f,b
 11959  0104D8  37E3               	rlcf	(??_Port_Set+13)& (0+255),f,b
 11960  0104DA  0100               	movlb	0	; () banked
 11961  0104DC  90D8               	bcf	status,0,c
 11962  0104DE  37E2               	rlcf	(??_Port_Set+12)& (0+255),f,b
 11963  0104E0  37E3               	rlcf	(??_Port_Set+13)& (0+255),f,b
 11964  0104E2  0100               	movlb	0	; () banked
 11965  0104E4  51EA               	movf	Port_Set@Type& (0+255),w,b
 11966  0104E6  0100               	movlb	0	; () banked
 11967  0104E8  6FE4               	movwf	(??_Port_Set+14)& (0+255),b
 11968  0104EA  6BE5               	clrf	(??_Port_Set+15)& (0+255),b
 11969  0104EC  0100               	movlb	0	; () banked
 11970  0104EE  51E2               	movf	(??_Port_Set+12)& (0+255),w,b
 11971  0104F0  0100               	movlb	0	; () banked
 11972  0104F2  13E4               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11973  0104F4  0100               	movlb	0	; () banked
 11974  0104F6  51E3               	movf	(??_Port_Set+13)& (0+255),w,b
 11975  0104F8  0100               	movlb	0	; () banked
 11976  0104FA  13E5               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11977  0104FC  0100               	movlb	0	; () banked
 11978  0104FE  51E0               	movf	(??_Port_Set+10)& (0+255),w,b
 11979  010500  0100               	movlb	0	; () banked
 11980  010502  13E4               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11981  010504  0100               	movlb	0	; () banked
 11982  010506  51E1               	movf	(??_Port_Set+11)& (0+255),w,b
 11983  010508  0100               	movlb	0	; () banked
 11984  01050A  13E5               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11985  01050C  0100               	movlb	0	; () banked
 11986  01050E  51DE               	movf	(??_Port_Set+8)& (0+255),w,b
 11987  010510  0100               	movlb	0	; () banked
 11988  010512  13E4               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11989  010514  0100               	movlb	0	; () banked
 11990  010516  51DF               	movf	(??_Port_Set+9)& (0+255),w,b
 11991  010518  0100               	movlb	0	; () banked
 11992  01051A  13E5               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11993  01051C  0100               	movlb	0	; () banked
 11994  01051E  51DC               	movf	(??_Port_Set+6)& (0+255),w,b
 11995  010520  0100               	movlb	0	; () banked
 11996  010522  13E4               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11997  010524  0100               	movlb	0	; () banked
 11998  010526  51DD               	movf	(??_Port_Set+7)& (0+255),w,b
 11999  010528  0100               	movlb	0	; () banked
 12000  01052A  13E5               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12001  01052C  0100               	movlb	0	; () banked
 12002  01052E  51DA               	movf	(??_Port_Set+4)& (0+255),w,b
 12003  010530  0100               	movlb	0	; () banked
 12004  010532  13E4               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12005  010534  0100               	movlb	0	; () banked
 12006  010536  51DB               	movf	(??_Port_Set+5)& (0+255),w,b
 12007  010538  0100               	movlb	0	; () banked
 12008  01053A  13E5               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12009  01053C  0100               	movlb	0	; () banked
 12010  01053E  51D8               	movf	(??_Port_Set+2)& (0+255),w,b
 12011  010540  0100               	movlb	0	; () banked
 12012  010542  13E4               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12013  010544  0100               	movlb	0	; () banked
 12014  010546  51D9               	movf	(??_Port_Set+3)& (0+255),w,b
 12015  010548  0100               	movlb	0	; () banked
 12016  01054A  13E5               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12017  01054C  0100               	movlb	0	; () banked
 12018  01054E  51D6               	movf	??_Port_Set& (0+255),w,b
 12019  010550  0100               	movlb	0	; () banked
 12020  010552  11E4               	iorwf	(??_Port_Set+14)& (0+255),w,b
 12021  010554  0100               	movlb	0	; () banked
 12022  010556  6FE6               	movwf	Port_Set@TypeRequired& (0+255),b
 12023  010558  0100               	movlb	0	; () banked
 12024  01055A  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12025  01055C  0100               	movlb	0	; () banked
 12026  01055E  11E5               	iorwf	(??_Port_Set+15)& (0+255),w,b
 12027  010560  0100               	movlb	0	; () banked
 12028  010562  6FE7               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;Port.c: 574: UINT16 TypeActual = Type;
 12032  010564  C0EA  F0E8         	movff	Port_Set@Type,Port_Set@TypeActual
 12033  010568  0100               	movlb	0	; () banked
 12034  01056A  6BE9               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 12038  01056C  0E08               	movlw	8
 12039  01056E  0100               	movlb	0	; () banked
 12040  010570  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12041  010572  0100               	movlb	0	; () banked
 12042  010574  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12043  010576  0E00               	movlw	0
 12044  010578  0100               	movlb	0	; () banked
 12045  01057A  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12046  01057C  0100               	movlb	0	; () banked
 12047  01057E  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12048  010580  0E01               	movlw	1
 12049  010582  0100               	movlb	0	; () banked
 12050  010584  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12051  010586  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12052  01058A  0100               	movlb	0	; () banked
 12053  01058C  6FD6               	movwf	??_Port_Set& (0+255),b
 12054  01058E  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12055  010590  0100               	movlb	0	; () banked
 12056  010592  90D8               	bcf	status,0,c
 12057  010594  37D6               	rlcf	??_Port_Set& (0+255),f,b
 12058  010596  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12059  010598  0100               	movlb	0	; () banked
 12060  01059A  90D8               	bcf	status,0,c
 12061  01059C  37D6               	rlcf	??_Port_Set& (0+255),f,b
 12062  01059E  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12063  0105A0  0100               	movlb	0	; () banked
 12064  0105A2  51D6               	movf	??_Port_Set& (0+255),w,b
 12065  0105A4  0100               	movlb	0	; () banked
 12066  0105A6  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12067  0105A8  0100               	movlb	0	; () banked
 12068  0105AA  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12069  0105AC  0100               	movlb	0	; () banked
 12070  0105AE  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 12074  0105B0  0E08               	movlw	8
 12075  0105B2  0100               	movlb	0	; () banked
 12076  0105B4  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12077  0105B6  0100               	movlb	0	; () banked
 12078  0105B8  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12079  0105BA  0E00               	movlw	0
 12080  0105BC  0100               	movlb	0	; () banked
 12081  0105BE  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12082  0105C0  0100               	movlb	0	; () banked
 12083  0105C2  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12084  0105C4  0E02               	movlw	2
 12085  0105C6  0100               	movlb	0	; () banked
 12086  0105C8  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12087  0105CA  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12088  0105CE  0100               	movlb	0	; () banked
 12089  0105D0  6FD6               	movwf	??_Port_Set& (0+255),b
 12090  0105D2  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12091  0105D4  0100               	movlb	0	; () banked
 12092  0105D6  3BD6               	swapf	??_Port_Set& (0+255),f,b
 12093  0105D8  3BD7               	swapf	(??_Port_Set+1)& (0+255),f,b
 12094  0105DA  0EF0               	movlw	240
 12095  0105DC  17D7               	andwf	(??_Port_Set+1)& (0+255),f,b
 12096  0105DE  51D6               	movf	??_Port_Set& (0+255),w,b
 12097  0105E0  0B0F               	andlw	15
 12098  0105E2  13D7               	iorwf	(??_Port_Set+1)& (0+255),f,b
 12099  0105E4  0EF0               	movlw	240
 12100  0105E6  17D6               	andwf	??_Port_Set& (0+255),f,b
 12101  0105E8  0100               	movlb	0	; () banked
 12102  0105EA  51D6               	movf	??_Port_Set& (0+255),w,b
 12103  0105EC  0100               	movlb	0	; () banked
 12104  0105EE  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12105  0105F0  0100               	movlb	0	; () banked
 12106  0105F2  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12107  0105F4  0100               	movlb	0	; () banked
 12108  0105F6  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 12112  0105F8  0E08               	movlw	8
 12113  0105FA  0100               	movlb	0	; () banked
 12114  0105FC  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12115  0105FE  0100               	movlb	0	; () banked
 12116  010600  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12117  010602  0E00               	movlw	0
 12118  010604  0100               	movlb	0	; () banked
 12119  010606  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12120  010608  0100               	movlb	0	; () banked
 12121  01060A  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12122  01060C  0E03               	movlw	3
 12123  01060E  0100               	movlb	0	; () banked
 12124  010610  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12125  010612  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12126  010616  0100               	movlb	0	; () banked
 12127  010618  6FD6               	movwf	??_Port_Set& (0+255),b
 12128  01061A  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12129  01061C  0E06               	movlw	6
 12130  01061E                     u7575:
 12131  01061E  90D8               	bcf	status,0,c
 12132  010620  0100               	movlb	0	; () banked
 12133  010622  37D6               	rlcf	??_Port_Set& (0+255),f,b
 12134  010624  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12135  010626  2EE8               	decfsz	wreg,f,c
 12136  010628  D7FA               	goto	u7575
 12137  01062A  0100               	movlb	0	; () banked
 12138  01062C  51D6               	movf	??_Port_Set& (0+255),w,b
 12139  01062E  0100               	movlb	0	; () banked
 12140  010630  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12141  010632  0100               	movlb	0	; () banked
 12142  010634  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12143  010636  0100               	movlb	0	; () banked
 12144  010638  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 12148  01063A  0E08               	movlw	8
 12149  01063C  0100               	movlb	0	; () banked
 12150  01063E  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12151  010640  0100               	movlb	0	; () banked
 12152  010642  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12153  010644  0E00               	movlw	0
 12154  010646  0100               	movlb	0	; () banked
 12155  010648  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12156  01064A  0100               	movlb	0	; () banked
 12157  01064C  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12158  01064E  0E04               	movlw	4
 12159  010650  0100               	movlb	0	; () banked
 12160  010652  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12161  010654  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12162  010658  0100               	movlb	0	; () banked
 12163  01065A  6FD6               	movwf	??_Port_Set& (0+255),b
 12164  01065C  0100               	movlb	0	; () banked
 12165  01065E  51D6               	movf	??_Port_Set& (0+255),w,b
 12166  010660  0100               	movlb	0	; () banked
 12167  010662  6FD8               	movwf	(??_Port_Set+2)& (0+255),b
 12168  010664  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12169  010666  0100               	movlb	0	; () banked
 12170  010668  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12171  01066A  0100               	movlb	0	; () banked
 12172  01066C  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12173  01066E  0100               	movlb	0	; () banked
 12174  010670  51D8               	movf	(??_Port_Set+2)& (0+255),w,b
 12175  010672  0100               	movlb	0	; () banked
 12176  010674  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 12180  010676  0E08               	movlw	8
 12181  010678  0100               	movlb	0	; () banked
 12182  01067A  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12183  01067C  0100               	movlb	0	; () banked
 12184  01067E  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12185  010680  0E00               	movlw	0
 12186  010682  0100               	movlb	0	; () banked
 12187  010684  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12188  010686  0100               	movlb	0	; () banked
 12189  010688  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12190  01068A  0E05               	movlw	5
 12191  01068C  0100               	movlb	0	; () banked
 12192  01068E  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12193  010690  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12194  010694  0100               	movlb	0	; () banked
 12195  010696  6FD6               	movwf	??_Port_Set& (0+255),b
 12196  010698  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12197  01069A  0E0A               	movlw	10
 12198  01069C                     u7585:
 12199  01069C  90D8               	bcf	status,0,c
 12200  01069E  0100               	movlb	0	; () banked
 12201  0106A0  37D6               	rlcf	??_Port_Set& (0+255),f,b
 12202  0106A2  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12203  0106A4  2EE8               	decfsz	wreg,f,c
 12204  0106A6  D7FA               	goto	u7585
 12205  0106A8  0100               	movlb	0	; () banked
 12206  0106AA  51D6               	movf	??_Port_Set& (0+255),w,b
 12207  0106AC  0100               	movlb	0	; () banked
 12208  0106AE  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12209  0106B0  0100               	movlb	0	; () banked
 12210  0106B2  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12211  0106B4  0100               	movlb	0	; () banked
 12212  0106B6  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 12216  0106B8  0E08               	movlw	8
 12217  0106BA  0100               	movlb	0	; () banked
 12218  0106BC  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12219  0106BE  0100               	movlb	0	; () banked
 12220  0106C0  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12221  0106C2  0E00               	movlw	0
 12222  0106C4  0100               	movlb	0	; () banked
 12223  0106C6  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12224  0106C8  0100               	movlb	0	; () banked
 12225  0106CA  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12226  0106CC  0E06               	movlw	6
 12227  0106CE  0100               	movlb	0	; () banked
 12228  0106D0  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12229  0106D2  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12230  0106D6  0100               	movlb	0	; () banked
 12231  0106D8  6FD6               	movwf	??_Port_Set& (0+255),b
 12232  0106DA  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12233  0106DC  0E0C               	movlw	12
 12234  0106DE                     u7595:
 12235  0106DE  90D8               	bcf	status,0,c
 12236  0106E0  0100               	movlb	0	; () banked
 12237  0106E2  37D6               	rlcf	??_Port_Set& (0+255),f,b
 12238  0106E4  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12239  0106E6  2EE8               	decfsz	wreg,f,c
 12240  0106E8  D7FA               	goto	u7595
 12241  0106EA  0100               	movlb	0	; () banked
 12242  0106EC  51D6               	movf	??_Port_Set& (0+255),w,b
 12243  0106EE  0100               	movlb	0	; () banked
 12244  0106F0  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12245  0106F2  0100               	movlb	0	; () banked
 12246  0106F4  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12247  0106F6  0100               	movlb	0	; () banked
 12248  0106F8  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 12252  0106FA  0E08               	movlw	8
 12253  0106FC  0100               	movlb	0	; () banked
 12254  0106FE  25D3               	addwf	Port_Set@pInput& (0+255),w,b
 12255  010700  0100               	movlb	0	; () banked
 12256  010702  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 12257  010704  0E00               	movlw	0
 12258  010706  0100               	movlb	0	; () banked
 12259  010708  21D4               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12260  01070A  0100               	movlb	0	; () banked
 12261  01070C  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12262  01070E  0E07               	movlw	7
 12263  010710  0100               	movlb	0	; () banked
 12264  010712  6FD2               	movwf	Word_GetPair@pPair& (0+255),b
 12265  010714  ECBA  F09F         	call	_Word_GetPair	;wreg free
 12266  010718  0100               	movlb	0	; () banked
 12267  01071A  6FD6               	movwf	??_Port_Set& (0+255),b
 12268  01071C  6BD7               	clrf	(??_Port_Set+1)& (0+255),b
 12269  01071E  0E0E               	movlw	14
 12270  010720                     u7605:
 12271  010720  90D8               	bcf	status,0,c
 12272  010722  0100               	movlb	0	; () banked
 12273  010724  37D6               	rlcf	??_Port_Set& (0+255),f,b
 12274  010726  37D7               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12275  010728  2EE8               	decfsz	wreg,f,c
 12276  01072A  D7FA               	goto	u7605
 12277  01072C  0100               	movlb	0	; () banked
 12278  01072E  51D6               	movf	??_Port_Set& (0+255),w,b
 12279  010730  0100               	movlb	0	; () banked
 12280  010732  13E8               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12281  010734  0100               	movlb	0	; () banked
 12282  010736  51D7               	movf	(??_Port_Set+1)& (0+255),w,b
 12283  010738  0100               	movlb	0	; () banked
 12284  01073A  13E9               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12285                           
 12286                           ;Port.c: 584: if (TypeRequired == TypeActual)
 12287  01073C  0100               	movlb	0	; () banked
 12288  01073E  51E8               	movf	Port_Set@TypeActual& (0+255),w,b
 12289  010740  0100               	movlb	0	; () banked
 12290  010742  19E6               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 12291  010744  E148               	bnz	l528
 12292  010746  0100               	movlb	0	; () banked
 12293  010748  51E9               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 12294  01074A  0100               	movlb	0	; () banked
 12295  01074C  19E7               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 12296  01074E  A4D8               	btfss	status,2,c
 12297  010750  0012               	return	
 12298  010752  D032               	goto	l11292
 12299  010754                     l11282:
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 12303  010754  0100               	movlb	0	; () banked
 12304  010756  EE20 F002          	lfsr	2,2
 12305  01075A  51D3               	movf	Port_Set@pInput& (0+255),w,b
 12306  01075C  26D9               	addwf	fsr2l,f,c
 12307  01075E  51D4               	movf	(Port_Set@pInput+1)& (0+255),w,b
 12308  010760  22DA               	addwfc	fsr2h,f,c
 12309  010762  CFDE F0C4          	movff	postinc2,Byte_SetByte@pInput
 12310  010766  CFDD F0C5          	movff	postdec2,Byte_SetByte@pInput+1
 12311  01076A  C0D5  F0C6         	movff	Port_Set@pValue,Byte_SetByte@pValue
 12312  01076E  EC10  F0A3         	call	_Byte_SetByte	;wreg free
 12313                           
 12314                           ;Port.c: 594: break;
 12315  010772  0012               	return	
 12316  010774                     l11284:
 12317                           
 12318                           ;Port.c: 597: pValue = ~pValue;
 12319  010774  0100               	movlb	0	; () banked
 12320  010776  1FD5               	comf	Port_Set@pValue& (0+255),f,b
 12321                           
 12322                           ; BSR set to: 0
 12323                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 12324  010778  0100               	movlb	0	; () banked
 12325  01077A  EE20 F002          	lfsr	2,2
 12326  01077E  51D3               	movf	Port_Set@pInput& (0+255),w,b
 12327  010780  26D9               	addwf	fsr2l,f,c
 12328  010782  51D4               	movf	(Port_Set@pInput+1)& (0+255),w,b
 12329  010784  22DA               	addwfc	fsr2h,f,c
 12330  010786  CFDE F0C4          	movff	postinc2,Byte_SetByte@pInput
 12331  01078A  CFDD F0C5          	movff	postdec2,Byte_SetByte@pInput+1
 12332  01078E  C0D5  F0C6         	movff	Port_Set@pValue,Byte_SetByte@pValue
 12333  010792  EC10  F0A3         	call	_Byte_SetByte	;wreg free
 12334                           
 12335                           ;Port.c: 599: break;
 12336  010796  0012               	return	
 12337  010798                     l11288:
 12338                           
 12339                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 12340  010798  0100               	movlb	0	; () banked
 12341  01079A  EE20 F004          	lfsr	2,4
 12342  01079E  51D3               	movf	Port_Set@pInput& (0+255),w,b
 12343  0107A0  26D9               	addwf	fsr2l,f,c
 12344  0107A2  51D4               	movf	(Port_Set@pInput+1)& (0+255),w,b
 12345  0107A4  22DA               	addwfc	fsr2h,f,c
 12346  0107A6  CFDE F0C4          	movff	postinc2,Byte_SetByte@pInput
 12347  0107AA  CFDD F0C5          	movff	postdec2,Byte_SetByte@pInput+1
 12348  0107AE  C0D5  F0C6         	movff	Port_Set@pValue,Byte_SetByte@pValue
 12349  0107B2  EC10  F0A3         	call	_Byte_SetByte	;wreg free
 12350                           
 12351                           ;Port.c: 606: }
 12352                           
 12353                           ;Port.c: 605: break;
 12354                           
 12355                           ;Port.c: 604: default:
 12356                           
 12357                           ;Port.c: 603: break;
 12358  0107B6  0012               	return	
 12359  0107B8                     l11292:
 12360  0107B8  0100               	movlb	0	; () banked
 12361  0107BA  51EA               	movf	Port_Set@Type& (0+255),w,b
 12362                           
 12363                           ; Switch size 1, requested type "space"
 12364                           ; Number of cases is 4, Range of values is 0 to 3
 12365                           ; switch strategies available:
 12366                           ; Name         Instructions Cycles
 12367                           ; simple_byte           13     7 (average)
 12368                           ;	Chosen strategy is simple_byte
 12369  0107BC  0A00               	xorlw	0	; case 0
 12370  0107BE  B4D8               	btfsc	status,2,c
 12371  0107C0  0012               	return	
 12372  0107C2  0A01               	xorlw	1	; case 1
 12373  0107C4  B4D8               	btfsc	status,2,c
 12374  0107C6  D7C6               	goto	l11282
 12375  0107C8  0A03               	xorlw	3	; case 2
 12376  0107CA  B4D8               	btfsc	status,2,c
 12377  0107CC  D7D3               	goto	l11284
 12378  0107CE  0A01               	xorlw	1	; case 3
 12379  0107D0  A4D8               	btfss	status,2,c
 12380                           
 12381                           ; BSR set to: 0
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;Port.c: 607: }
 12385  0107D2  0012               	return	
 12386  0107D4  D7E1               	goto	l11288
 12387  0107D6                     l528:
 12388  0107D6  0012               	return		;funcret
 12389  0107D8                     __end_of_Port_Set:
 12390                           	opt stack 0
 12391                           tosu	equ	0xFFF
 12392                           tosh	equ	0xFFE
 12393                           tosl	equ	0xFFD
 12394                           pclath	equ	0xFFA
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           postinc0	equ	0xFEE
 12402                           wreg	equ	0xFE8
 12403                           indf1	equ	0xFE7
 12404                           postdec1	equ	0xFE5
 12405                           fsr1h	equ	0xFE2
 12406                           fsr1l	equ	0xFE1
 12407                           indf2	equ	0xFDF
 12408                           postinc2	equ	0xFDE
 12409                           postdec2	equ	0xFDD
 12410                           plusw2	equ	0xFDB
 12411                           fsr2h	equ	0xFDA
 12412                           fsr2l	equ	0xFD9
 12413                           status	equ	0xFD8
 12414                           
 12415 ;; *************** function _Byte_SetByte *****************
 12416 ;; Defined at:
 12417 ;;		line 110 in file "Library/Types.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12420 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 12421 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 12422 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 12423 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 12424 ;;		 -> NULL(0), 
 12425 ;;  pValue          1    2[BANK0 ] unsigned char 
 12426 ;; Auto vars:     Size  Location     Type
 12427 ;;		None
 12428 ;; Return value:  Size  Location     Type
 12429 ;;                  1    wreg      void 
 12430 ;; Registers used:
 12431 ;;		fsr2l, fsr2h
 12432 ;; Tracked objects:
 12433 ;;		On entry : 0/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12437 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12440 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;Total ram usage:        3 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; Hardware stack levels required when called:    7
 12444 ;; This function calls:
 12445 ;;		Nothing
 12446 ;; This function is called by:
 12447 ;;		_Port_Set
 12448 ;;		_I2C_Init
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text65
 12453  014620                     __ptext65:
 12454                           	opt stack 0
 12455  014620                     _Byte_SetByte:
 12456                           	opt stack 19
 12457                           
 12458                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 12459                           
 12460                           ;incstack = 0
 12461  014620  C0C4  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 12462  014624  C0C5  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 12463  014628  C0C6  FFDF         	movff	Byte_SetByte@pValue,indf2
 12464  01462C  0012               	return		;funcret
 12465  01462E                     __end_of_Byte_SetByte:
 12466                           	opt stack 0
 12467                           tosu	equ	0xFFF
 12468                           tosh	equ	0xFFE
 12469                           tosl	equ	0xFFD
 12470                           pclath	equ	0xFFA
 12471                           tblptru	equ	0xFF8
 12472                           tblptrh	equ	0xFF7
 12473                           tblptrl	equ	0xFF6
 12474                           tablat	equ	0xFF5
 12475                           prodh	equ	0xFF4
 12476                           prodl	equ	0xFF3
 12477                           postinc0	equ	0xFEE
 12478                           wreg	equ	0xFE8
 12479                           indf1	equ	0xFE7
 12480                           postdec1	equ	0xFE5
 12481                           fsr1h	equ	0xFE2
 12482                           fsr1l	equ	0xFE1
 12483                           indf2	equ	0xFDF
 12484                           postinc2	equ	0xFDE
 12485                           postdec2	equ	0xFDD
 12486                           plusw2	equ	0xFDB
 12487                           fsr2h	equ	0xFDA
 12488                           fsr2l	equ	0xFD9
 12489                           status	equ	0xFD8
 12490                           
 12491 ;; *************** function _GetPortTRIS *****************
 12492 ;; Defined at:
 12493 ;;		line 67 in file "Library/Port.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;  pInput          1    wreg     enum E6786
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;  pInput          1    2[BANK0 ] enum E6786
 12498 ;; Return value:  Size  Location     Type
 12499 ;;                  2    0[BANK0 ] PTR struct Byte
 12500 ;; Registers used:
 12501 ;;		wreg, status,2, status,0
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;Total ram usage:        3 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    7
 12514 ;; This function calls:
 12515 ;;		Nothing
 12516 ;; This function is called by:
 12517 ;;		_Port_Init
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           	psect	text66
 12522  012B7E                     __ptext66:
 12523                           	opt stack 0
 12524  012B7E                     _GetPortTRIS:
 12525                           	opt stack 20
 12526                           
 12527                           ;incstack = 0
 12528                           ;GetPortTRIS@pInput stored from wreg
 12529  012B7E  0100               	movlb	0	; () banked
 12530  012B80  6FC6               	movwf	GetPortTRIS@pInput& (0+255),b
 12531                           
 12532                           ;Port.c: 69: switch (pInput)
 12533  012B82  D038               	goto	l11234
 12534  012B84                     l11200:
 12535                           
 12536                           ;Port.c: 72: return (BytePtr)&TRISA;
 12537  012B84  0E92               	movlw	146
 12538  012B86  0100               	movlb	0	; () banked
 12539  012B88  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12540  012B8A  0E0F               	movlw	15
 12541  012B8C  0100               	movlb	0	; () banked
 12542  012B8E  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12543                           
 12544                           ; BSR set to: 0
 12545  012B90  0012               	return	
 12546  012B92                     l11204:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;Port.c: 74: return (BytePtr)&TRISB;
 12550  012B92  0E93               	movlw	147
 12551  012B94  0100               	movlb	0	; () banked
 12552  012B96  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12553  012B98  0E0F               	movlw	15
 12554  012B9A  0100               	movlb	0	; () banked
 12555  012B9C  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12556                           
 12557                           ; BSR set to: 0
 12558  012B9E  0012               	return	
 12559  012BA0                     l11208:
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;Port.c: 76: return (BytePtr)&TRISC;
 12563  012BA0  0E94               	movlw	148
 12564  012BA2  0100               	movlb	0	; () banked
 12565  012BA4  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12566  012BA6  0E0F               	movlw	15
 12567  012BA8  0100               	movlb	0	; () banked
 12568  012BAA  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12569                           
 12570                           ; BSR set to: 0
 12571  012BAC  0012               	return	
 12572  012BAE                     l11212:
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;Port.c: 78: return (BytePtr)&TRISD;
 12576  012BAE  0E95               	movlw	149
 12577  012BB0  0100               	movlb	0	; () banked
 12578  012BB2  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12579  012BB4  0E0F               	movlw	15
 12580  012BB6  0100               	movlb	0	; () banked
 12581  012BB8  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12582                           
 12583                           ; BSR set to: 0
 12584  012BBA  0012               	return	
 12585  012BBC                     l11216:
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;Port.c: 80: return (BytePtr)&TRISE;
 12589  012BBC  0E96               	movlw	150
 12590  012BBE  0100               	movlb	0	; () banked
 12591  012BC0  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12592  012BC2  0E0F               	movlw	15
 12593  012BC4  0100               	movlb	0	; () banked
 12594  012BC6  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12595                           
 12596                           ; BSR set to: 0
 12597  012BC8  0012               	return	
 12598  012BCA                     l11220:
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;Port.c: 82: return (BytePtr)&TRISF;
 12602  012BCA  0E97               	movlw	151
 12603  012BCC  0100               	movlb	0	; () banked
 12604  012BCE  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12605  012BD0  0E0F               	movlw	15
 12606  012BD2  0100               	movlb	0	; () banked
 12607  012BD4  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12608                           
 12609                           ; BSR set to: 0
 12610  012BD6  0012               	return	
 12611  012BD8                     l11224:
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;Port.c: 84: return (BytePtr)&TRISG;
 12615  012BD8  0E98               	movlw	152
 12616  012BDA  0100               	movlb	0	; () banked
 12617  012BDC  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12618  012BDE  0E0F               	movlw	15
 12619  012BE0  0100               	movlb	0	; () banked
 12620  012BE2  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12621                           
 12622                           ; BSR set to: 0
 12623  012BE4  0012               	return	
 12624  012BE6                     l11228:
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;Port.c: 86: return (void*)0;
 12628  012BE6  0E00               	movlw	0
 12629  012BE8  0100               	movlb	0	; () banked
 12630  012BEA  6FC4               	movwf	?_GetPortTRIS& (0+255),b
 12631  012BEC  0E00               	movlw	0
 12632  012BEE  0100               	movlb	0	; () banked
 12633  012BF0  6FC5               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;Port.c: 87: }
 12637                           
 12638                           ; BSR set to: 0
 12639  012BF2  0012               	return	
 12640  012BF4                     l11234:
 12641  012BF4  0100               	movlb	0	; () banked
 12642  012BF6  51C6               	movf	GetPortTRIS@pInput& (0+255),w,b
 12643                           
 12644                           ; Switch size 1, requested type "space"
 12645                           ; Number of cases is 7, Range of values is 0 to 6
 12646                           ; switch strategies available:
 12647                           ; Name         Instructions Cycles
 12648                           ; simple_byte           22    12 (average)
 12649                           ;	Chosen strategy is simple_byte
 12650  012BF8  0A00               	xorlw	0	; case 0
 12651  012BFA  B4D8               	btfsc	status,2,c
 12652  012BFC  D7C3               	goto	l11200
 12653  012BFE  0A01               	xorlw	1	; case 1
 12654  012C00  B4D8               	btfsc	status,2,c
 12655  012C02  D7C7               	goto	l11204
 12656  012C04  0A03               	xorlw	3	; case 2
 12657  012C06  B4D8               	btfsc	status,2,c
 12658  012C08  D7CB               	goto	l11208
 12659  012C0A  0A01               	xorlw	1	; case 3
 12660  012C0C  B4D8               	btfsc	status,2,c
 12661  012C0E  D7CF               	goto	l11212
 12662  012C10  0A07               	xorlw	7	; case 4
 12663  012C12  B4D8               	btfsc	status,2,c
 12664  012C14  D7D3               	goto	l11216
 12665  012C16  0A01               	xorlw	1	; case 5
 12666  012C18  B4D8               	btfsc	status,2,c
 12667  012C1A  D7D7               	goto	l11220
 12668  012C1C  0A03               	xorlw	3	; case 6
 12669  012C1E  B4D8               	btfsc	status,2,c
 12670  012C20  D7DB               	goto	l11224
 12671  012C22  D7E1               	goto	l11228
 12672  012C24                     __end_of_GetPortTRIS:
 12673                           	opt stack 0
 12674                           tosu	equ	0xFFF
 12675                           tosh	equ	0xFFE
 12676                           tosl	equ	0xFFD
 12677                           pclath	equ	0xFFA
 12678                           tblptru	equ	0xFF8
 12679                           tblptrh	equ	0xFF7
 12680                           tblptrl	equ	0xFF6
 12681                           tablat	equ	0xFF5
 12682                           prodh	equ	0xFF4
 12683                           prodl	equ	0xFF3
 12684                           postinc0	equ	0xFEE
 12685                           wreg	equ	0xFE8
 12686                           indf1	equ	0xFE7
 12687                           postdec1	equ	0xFE5
 12688                           fsr1h	equ	0xFE2
 12689                           fsr1l	equ	0xFE1
 12690                           indf2	equ	0xFDF
 12691                           postinc2	equ	0xFDE
 12692                           postdec2	equ	0xFDD
 12693                           plusw2	equ	0xFDB
 12694                           fsr2h	equ	0xFDA
 12695                           fsr2l	equ	0xFD9
 12696                           status	equ	0xFD8
 12697                           
 12698 ;; *************** function _GetPortProperties *****************
 12699 ;; Defined at:
 12700 ;;		line 21 in file "Library/Port.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  pInput          1    wreg     enum E6786
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  pInput          1    2[BANK0 ] enum E6786
 12705 ;; Return value:  Size  Location     Type
 12706 ;;                  2    0[BANK0 ] PTR struct PortProperty
 12707 ;; Registers used:
 12708 ;;		wreg, status,2, status,0
 12709 ;; Tracked objects:
 12710 ;;		On entry : 0/0
 12711 ;;		On exit  : 0/0
 12712 ;;		Unchanged: 0/0
 12713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12714 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12718 ;;Total ram usage:        3 bytes
 12719 ;; Hardware stack levels used:    1
 12720 ;; Hardware stack levels required when called:    7
 12721 ;; This function calls:
 12722 ;;		Nothing
 12723 ;; This function is called by:
 12724 ;;		_Port_Init
 12725 ;; This function uses a non-reentrant model
 12726 ;;
 12727                           
 12728                           	psect	text67
 12729  012C24                     __ptext67:
 12730                           	opt stack 0
 12731  012C24                     _GetPortProperties:
 12732                           	opt stack 20
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;incstack = 0
 12736                           ;GetPortProperties@pInput stored from wreg
 12737  012C24  0100               	movlb	0	; () banked
 12738  012C26  6FC6               	movwf	GetPortProperties@pInput& (0+255),b
 12739                           
 12740                           ;Port.c: 23: switch (pInput)
 12741  012C28  D038               	goto	l11158
 12742  012C2A                     l11124:
 12743                           
 12744                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 12745  012C2A  0E73               	movlw	low _PortA_Property
 12746  012C2C  0100               	movlb	0	; () banked
 12747  012C2E  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12748  012C30  0EFF               	movlw	high _PortA_Property
 12749  012C32  0100               	movlb	0	; () banked
 12750  012C34  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12751                           
 12752                           ; BSR set to: 0
 12753  012C36  0012               	return	
 12754  012C38                     l11128:
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 12758  012C38  0E71               	movlw	low _PortB_Property
 12759  012C3A  0100               	movlb	0	; () banked
 12760  012C3C  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12761  012C3E  0EFF               	movlw	high _PortB_Property
 12762  012C40  0100               	movlb	0	; () banked
 12763  012C42  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12764                           
 12765                           ; BSR set to: 0
 12766  012C44  0012               	return	
 12767  012C46                     l11132:
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 12771  012C46  0E6F               	movlw	low _PortC_Property
 12772  012C48  0100               	movlb	0	; () banked
 12773  012C4A  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12774  012C4C  0EFF               	movlw	high _PortC_Property
 12775  012C4E  0100               	movlb	0	; () banked
 12776  012C50  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12777                           
 12778                           ; BSR set to: 0
 12779  012C52  0012               	return	
 12780  012C54                     l11136:
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 12784  012C54  0E6D               	movlw	low _PortD_Property
 12785  012C56  0100               	movlb	0	; () banked
 12786  012C58  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12787  012C5A  0EFF               	movlw	high _PortD_Property
 12788  012C5C  0100               	movlb	0	; () banked
 12789  012C5E  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12790                           
 12791                           ; BSR set to: 0
 12792  012C60  0012               	return	
 12793  012C62                     l11140:
 12794                           
 12795                           ; BSR set to: 0
 12796                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 12797  012C62  0E6B               	movlw	low _PortE_Property
 12798  012C64  0100               	movlb	0	; () banked
 12799  012C66  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12800  012C68  0EFF               	movlw	high _PortE_Property
 12801  012C6A  0100               	movlb	0	; () banked
 12802  012C6C  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12803                           
 12804                           ; BSR set to: 0
 12805  012C6E  0012               	return	
 12806  012C70                     l11144:
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 12810  012C70  0E69               	movlw	low _PortF_Property
 12811  012C72  0100               	movlb	0	; () banked
 12812  012C74  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12813  012C76  0EFF               	movlw	high _PortF_Property
 12814  012C78  0100               	movlb	0	; () banked
 12815  012C7A  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12816                           
 12817                           ; BSR set to: 0
 12818  012C7C  0012               	return	
 12819  012C7E                     l11148:
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 12823  012C7E  0E67               	movlw	low _PortG_Property
 12824  012C80  0100               	movlb	0	; () banked
 12825  012C82  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12826  012C84  0EFF               	movlw	high _PortG_Property
 12827  012C86  0100               	movlb	0	; () banked
 12828  012C88  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12829                           
 12830                           ; BSR set to: 0
 12831  012C8A  0012               	return	
 12832  012C8C                     l11152:
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;Port.c: 40: return (void*)0;
 12836  012C8C  0E00               	movlw	0
 12837  012C8E  0100               	movlb	0	; () banked
 12838  012C90  6FC4               	movwf	?_GetPortProperties& (0+255),b
 12839  012C92  0E00               	movlw	0
 12840  012C94  0100               	movlb	0	; () banked
 12841  012C96  6FC5               	movwf	(?_GetPortProperties+1)& (0+255),b
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;Port.c: 41: }
 12845                           
 12846                           ; BSR set to: 0
 12847  012C98  0012               	return	
 12848  012C9A                     l11158:
 12849  012C9A  0100               	movlb	0	; () banked
 12850  012C9C  51C6               	movf	GetPortProperties@pInput& (0+255),w,b
 12851                           
 12852                           ; Switch size 1, requested type "space"
 12853                           ; Number of cases is 7, Range of values is 0 to 6
 12854                           ; switch strategies available:
 12855                           ; Name         Instructions Cycles
 12856                           ; simple_byte           22    12 (average)
 12857                           ;	Chosen strategy is simple_byte
 12858  012C9E  0A00               	xorlw	0	; case 0
 12859  012CA0  B4D8               	btfsc	status,2,c
 12860  012CA2  D7C3               	goto	l11124
 12861  012CA4  0A01               	xorlw	1	; case 1
 12862  012CA6  B4D8               	btfsc	status,2,c
 12863  012CA8  D7C7               	goto	l11128
 12864  012CAA  0A03               	xorlw	3	; case 2
 12865  012CAC  B4D8               	btfsc	status,2,c
 12866  012CAE  D7CB               	goto	l11132
 12867  012CB0  0A01               	xorlw	1	; case 3
 12868  012CB2  B4D8               	btfsc	status,2,c
 12869  012CB4  D7CF               	goto	l11136
 12870  012CB6  0A07               	xorlw	7	; case 4
 12871  012CB8  B4D8               	btfsc	status,2,c
 12872  012CBA  D7D3               	goto	l11140
 12873  012CBC  0A01               	xorlw	1	; case 5
 12874  012CBE  B4D8               	btfsc	status,2,c
 12875  012CC0  D7D7               	goto	l11144
 12876  012CC2  0A03               	xorlw	3	; case 6
 12877  012CC4  B4D8               	btfsc	status,2,c
 12878  012CC6  D7DB               	goto	l11148
 12879  012CC8  D7E1               	goto	l11152
 12880  012CCA                     __end_of_GetPortProperties:
 12881                           	opt stack 0
 12882                           tosu	equ	0xFFF
 12883                           tosh	equ	0xFFE
 12884                           tosl	equ	0xFFD
 12885                           pclath	equ	0xFFA
 12886                           tblptru	equ	0xFF8
 12887                           tblptrh	equ	0xFF7
 12888                           tblptrl	equ	0xFF6
 12889                           tablat	equ	0xFF5
 12890                           prodh	equ	0xFF4
 12891                           prodl	equ	0xFF3
 12892                           postinc0	equ	0xFEE
 12893                           wreg	equ	0xFE8
 12894                           indf1	equ	0xFE7
 12895                           postdec1	equ	0xFE5
 12896                           fsr1h	equ	0xFE2
 12897                           fsr1l	equ	0xFE1
 12898                           indf2	equ	0xFDF
 12899                           postinc2	equ	0xFDE
 12900                           postdec2	equ	0xFDD
 12901                           plusw2	equ	0xFDB
 12902                           fsr2h	equ	0xFDA
 12903                           fsr2l	equ	0xFD9
 12904                           status	equ	0xFD8
 12905                           
 12906 ;; *************** function _GetPortPORT *****************
 12907 ;; Defined at:
 12908 ;;		line 44 in file "Library/Port.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;  pInput          1    wreg     enum E6786
 12911 ;; Auto vars:     Size  Location     Type
 12912 ;;  pInput          1    2[BANK0 ] enum E6786
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  2    0[BANK0 ] PTR struct Byte
 12915 ;; Registers used:
 12916 ;;		wreg, status,2, status,0
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;Total ram usage:        3 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    7
 12929 ;; This function calls:
 12930 ;;		Nothing
 12931 ;; This function is called by:
 12932 ;;		_Port_Init
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text68
 12937  012CCA                     __ptext68:
 12938                           	opt stack 0
 12939  012CCA                     _GetPortPORT:
 12940                           	opt stack 20
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;incstack = 0
 12944                           ;GetPortPORT@pInput stored from wreg
 12945  012CCA  0100               	movlb	0	; () banked
 12946  012CCC  6FC6               	movwf	GetPortPORT@pInput& (0+255),b
 12947                           
 12948                           ;Port.c: 46: switch (pInput)
 12949  012CCE  D038               	goto	l11196
 12950  012CD0                     l11162:
 12951                           
 12952                           ;Port.c: 49: return (BytePtr)&PORTA;
 12953  012CD0  0E80               	movlw	128
 12954  012CD2  0100               	movlb	0	; () banked
 12955  012CD4  6FC4               	movwf	?_GetPortPORT& (0+255),b
 12956  012CD6  0E0F               	movlw	15
 12957  012CD8  0100               	movlb	0	; () banked
 12958  012CDA  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 12959                           
 12960                           ; BSR set to: 0
 12961  012CDC  0012               	return	
 12962  012CDE                     l11166:
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;Port.c: 51: return (BytePtr)&PORTB;
 12966  012CDE  0E81               	movlw	129
 12967  012CE0  0100               	movlb	0	; () banked
 12968  012CE2  6FC4               	movwf	?_GetPortPORT& (0+255),b
 12969  012CE4  0E0F               	movlw	15
 12970  012CE6  0100               	movlb	0	; () banked
 12971  012CE8  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 12972                           
 12973                           ; BSR set to: 0
 12974  012CEA  0012               	return	
 12975  012CEC                     l11170:
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;Port.c: 53: return (BytePtr)&PORTC;
 12979  012CEC  0E82               	movlw	130
 12980  012CEE  0100               	movlb	0	; () banked
 12981  012CF0  6FC4               	movwf	?_GetPortPORT& (0+255),b
 12982  012CF2  0E0F               	movlw	15
 12983  012CF4  0100               	movlb	0	; () banked
 12984  012CF6  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 12985                           
 12986                           ; BSR set to: 0
 12987  012CF8  0012               	return	
 12988  012CFA                     l11174:
 12989                           
 12990                           ; BSR set to: 0
 12991                           ;Port.c: 55: return (BytePtr)&PORTD;
 12992  012CFA  0E83               	movlw	131
 12993  012CFC  0100               	movlb	0	; () banked
 12994  012CFE  6FC4               	movwf	?_GetPortPORT& (0+255),b
 12995  012D00  0E0F               	movlw	15
 12996  012D02  0100               	movlb	0	; () banked
 12997  012D04  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 12998                           
 12999                           ; BSR set to: 0
 13000  012D06  0012               	return	
 13001  012D08                     l11178:
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;Port.c: 57: return (BytePtr)&PORTE;
 13005  012D08  0E84               	movlw	132
 13006  012D0A  0100               	movlb	0	; () banked
 13007  012D0C  6FC4               	movwf	?_GetPortPORT& (0+255),b
 13008  012D0E  0E0F               	movlw	15
 13009  012D10  0100               	movlb	0	; () banked
 13010  012D12  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 13011                           
 13012                           ; BSR set to: 0
 13013  012D14  0012               	return	
 13014  012D16                     l11182:
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;Port.c: 59: return (BytePtr)&PORTF;
 13018  012D16  0E85               	movlw	133
 13019  012D18  0100               	movlb	0	; () banked
 13020  012D1A  6FC4               	movwf	?_GetPortPORT& (0+255),b
 13021  012D1C  0E0F               	movlw	15
 13022  012D1E  0100               	movlb	0	; () banked
 13023  012D20  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 13024                           
 13025                           ; BSR set to: 0
 13026  012D22  0012               	return	
 13027  012D24                     l11186:
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;Port.c: 61: return (BytePtr)&PORTG;
 13031  012D24  0E86               	movlw	134
 13032  012D26  0100               	movlb	0	; () banked
 13033  012D28  6FC4               	movwf	?_GetPortPORT& (0+255),b
 13034  012D2A  0E0F               	movlw	15
 13035  012D2C  0100               	movlb	0	; () banked
 13036  012D2E  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 13037                           
 13038                           ; BSR set to: 0
 13039  012D30  0012               	return	
 13040  012D32                     l11190:
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;Port.c: 63: return (void*)0;
 13044  012D32  0E00               	movlw	0
 13045  012D34  0100               	movlb	0	; () banked
 13046  012D36  6FC4               	movwf	?_GetPortPORT& (0+255),b
 13047  012D38  0E00               	movlw	0
 13048  012D3A  0100               	movlb	0	; () banked
 13049  012D3C  6FC5               	movwf	(?_GetPortPORT+1)& (0+255),b
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;Port.c: 64: }
 13053                           
 13054                           ; BSR set to: 0
 13055  012D3E  0012               	return	
 13056  012D40                     l11196:
 13057  012D40  0100               	movlb	0	; () banked
 13058  012D42  51C6               	movf	GetPortPORT@pInput& (0+255),w,b
 13059                           
 13060                           ; Switch size 1, requested type "space"
 13061                           ; Number of cases is 7, Range of values is 0 to 6
 13062                           ; switch strategies available:
 13063                           ; Name         Instructions Cycles
 13064                           ; simple_byte           22    12 (average)
 13065                           ;	Chosen strategy is simple_byte
 13066  012D44  0A00               	xorlw	0	; case 0
 13067  012D46  B4D8               	btfsc	status,2,c
 13068  012D48  D7C3               	goto	l11162
 13069  012D4A  0A01               	xorlw	1	; case 1
 13070  012D4C  B4D8               	btfsc	status,2,c
 13071  012D4E  D7C7               	goto	l11166
 13072  012D50  0A03               	xorlw	3	; case 2
 13073  012D52  B4D8               	btfsc	status,2,c
 13074  012D54  D7CB               	goto	l11170
 13075  012D56  0A01               	xorlw	1	; case 3
 13076  012D58  B4D8               	btfsc	status,2,c
 13077  012D5A  D7CF               	goto	l11174
 13078  012D5C  0A07               	xorlw	7	; case 4
 13079  012D5E  B4D8               	btfsc	status,2,c
 13080  012D60  D7D3               	goto	l11178
 13081  012D62  0A01               	xorlw	1	; case 5
 13082  012D64  B4D8               	btfsc	status,2,c
 13083  012D66  D7D7               	goto	l11182
 13084  012D68  0A03               	xorlw	3	; case 6
 13085  012D6A  B4D8               	btfsc	status,2,c
 13086  012D6C  D7DB               	goto	l11186
 13087  012D6E  D7E1               	goto	l11190
 13088  012D70                     __end_of_GetPortPORT:
 13089                           	opt stack 0
 13090                           tosu	equ	0xFFF
 13091                           tosh	equ	0xFFE
 13092                           tosl	equ	0xFFD
 13093                           pclath	equ	0xFFA
 13094                           tblptru	equ	0xFF8
 13095                           tblptrh	equ	0xFF7
 13096                           tblptrl	equ	0xFF6
 13097                           tablat	equ	0xFF5
 13098                           prodh	equ	0xFF4
 13099                           prodl	equ	0xFF3
 13100                           postinc0	equ	0xFEE
 13101                           wreg	equ	0xFE8
 13102                           indf1	equ	0xFE7
 13103                           postdec1	equ	0xFE5
 13104                           fsr1h	equ	0xFE2
 13105                           fsr1l	equ	0xFE1
 13106                           indf2	equ	0xFDF
 13107                           postinc2	equ	0xFDE
 13108                           postdec2	equ	0xFDD
 13109                           plusw2	equ	0xFDB
 13110                           fsr2h	equ	0xFDA
 13111                           fsr2l	equ	0xFD9
 13112                           status	equ	0xFD8
 13113                           
 13114 ;; *************** function _LED_Init *****************
 13115 ;; Defined at:
 13116 ;;		line 15 in file "Library/LED.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;  pLED            1    wreg     enum E6739
 13119 ;; Auto vars:     Size  Location     Type
 13120 ;;  pLED            1   45[BANK0 ] enum E6739
 13121 ;; Return value:  Size  Location     Type
 13122 ;;                  1    wreg      void 
 13123 ;; Registers used:
 13124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13125 ;; Tracked objects:
 13126 ;;		On entry : 0/0
 13127 ;;		On exit  : 0/0
 13128 ;;		Unchanged: 0/0
 13129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13134 ;;Total ram usage:        1 bytes
 13135 ;; Hardware stack levels used:    1
 13136 ;; Hardware stack levels required when called:   12
 13137 ;; This function calls:
 13138 ;;		_LED_Set
 13139 ;;		_Port_SetPinType
 13140 ;; This function is called by:
 13141 ;;		_MXK_Init
 13142 ;; This function uses a non-reentrant model
 13143 ;;
 13144                           
 13145                           	psect	text69
 13146  0139C2                     __ptext69:
 13147                           	opt stack 0
 13148  0139C2                     _LED_Init:
 13149                           	opt stack 16
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;incstack = 0
 13153                           ;LED_Init@pLED stored from wreg
 13154  0139C2  0100               	movlb	0	; () banked
 13155  0139C4  6FF1               	movwf	LED_Init@pLED& (0+255),b
 13156                           
 13157                           ;LED.c: 17: switch (pLED)
 13158  0139C6  D01E               	goto	l11514
 13159  0139C8                     l11508:
 13160                           
 13161                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 13162  0139C8  0E92               	movlw	low _PortC
 13163  0139CA  0100               	movlb	0	; () banked
 13164  0139CC  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 13165  0139CE  0E00               	movlw	high _PortC
 13166  0139D0  0100               	movlb	0	; () banked
 13167  0139D2  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13168  0139D4  0E00               	movlw	0
 13169  0139D6  0100               	movlb	0	; () banked
 13170  0139D8  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 13171  0139DA  0E03               	movlw	3
 13172  0139DC  0100               	movlb	0	; () banked
 13173  0139DE  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 13174  0139E0  EC84  F08A         	call	_Port_SetPinType	;wreg free
 13175                           
 13176                           ;LED.c: 21: break;
 13177  0139E4  D017               	goto	l11516
 13178  0139E6                     l11510:
 13179                           
 13180                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 13181  0139E6  0E92               	movlw	low _PortC
 13182  0139E8  0100               	movlb	0	; () banked
 13183  0139EA  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 13184  0139EC  0E00               	movlw	high _PortC
 13185  0139EE  0100               	movlb	0	; () banked
 13186  0139F0  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13187  0139F2  0E01               	movlw	1
 13188  0139F4  0100               	movlb	0	; () banked
 13189  0139F6  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 13190  0139F8  0E03               	movlw	3
 13191  0139FA  0100               	movlb	0	; () banked
 13192  0139FC  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 13193  0139FE  EC84  F08A         	call	_Port_SetPinType	;wreg free
 13194                           
 13195                           ;LED.c: 25: }
 13196                           
 13197                           ;LED.c: 24: break;
 13198  013A02  D008               	goto	l11516
 13199  013A04                     l11514:
 13200  013A04  0100               	movlb	0	; () banked
 13201  013A06  51F1               	movf	LED_Init@pLED& (0+255),w,b
 13202                           
 13203                           ; Switch size 1, requested type "space"
 13204                           ; Number of cases is 2, Range of values is 0 to 1
 13205                           ; switch strategies available:
 13206                           ; Name         Instructions Cycles
 13207                           ; simple_byte            7     4 (average)
 13208                           ;	Chosen strategy is simple_byte
 13209  013A08  0A00               	xorlw	0	; case 0
 13210  013A0A  B4D8               	btfsc	status,2,c
 13211  013A0C  D7DD               	goto	l11508
 13212  013A0E  0A01               	xorlw	1	; case 1
 13213  013A10  B4D8               	btfsc	status,2,c
 13214  013A12  D7E9               	goto	l11510
 13215  013A14                     l11516:
 13216                           
 13217                           ;LED.c: 26: LED_Set(pLED, 0);
 13218  013A14  0E00               	movlw	0
 13219  013A16  0100               	movlb	0	; () banked
 13220  013A18  6FD8               	movwf	LED_Set@pValue& (0+255),b
 13221  013A1A  0100               	movlb	0	; () banked
 13222  013A1C  51F1               	movf	LED_Init@pLED& (0+255),w,b
 13223  013A1E  ECE8  F09D         	call	_LED_Set
 13224  013A22  0012               	return		;funcret
 13225  013A24                     __end_of_LED_Init:
 13226                           	opt stack 0
 13227                           tosu	equ	0xFFF
 13228                           tosh	equ	0xFFE
 13229                           tosl	equ	0xFFD
 13230                           pclath	equ	0xFFA
 13231                           tblptru	equ	0xFF8
 13232                           tblptrh	equ	0xFF7
 13233                           tblptrl	equ	0xFF6
 13234                           tablat	equ	0xFF5
 13235                           prodh	equ	0xFF4
 13236                           prodl	equ	0xFF3
 13237                           postinc0	equ	0xFEE
 13238                           wreg	equ	0xFE8
 13239                           indf1	equ	0xFE7
 13240                           postdec1	equ	0xFE5
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           plusw2	equ	0xFDB
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function _LED_Set *****************
 13252 ;; Defined at:
 13253 ;;		line 33 in file "Library/LED.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  pLED            1    wreg     enum E6739
 13256 ;;  pValue          1   20[BANK0 ] unsigned char 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  pLED            1   21[BANK0 ] enum E6739
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  1    wreg      void 
 13261 ;; Registers used:
 13262 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13268 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;Total ram usage:        2 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:   11
 13275 ;; This function calls:
 13276 ;;		_Port_SetPin
 13277 ;; This function is called by:
 13278 ;;		_LED_Init
 13279 ;;		_SYSTEM_Initialize
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text70
 13284  013BD0                     __ptext70:
 13285                           	opt stack 0
 13286  013BD0                     _LED_Set:
 13287                           	opt stack 16
 13288                           
 13289                           ;incstack = 0
 13290                           ;LED_Set@pLED stored from wreg
 13291  013BD0  0100               	movlb	0	; () banked
 13292  013BD2  6FD9               	movwf	LED_Set@pLED& (0+255),b
 13293                           
 13294                           ;LED.c: 35: switch (pLED)
 13295  013BD4  D01C               	goto	l11120
 13296  013BD6                     l11114:
 13297                           
 13298                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 13299  013BD6  0E92               	movlw	low _PortC
 13300  013BD8  0100               	movlb	0	; () banked
 13301  013BDA  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 13302  013BDC  0E00               	movlw	high _PortC
 13303  013BDE  0100               	movlb	0	; () banked
 13304  013BE0  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13305  013BE2  0E00               	movlw	0
 13306  013BE4  0100               	movlb	0	; () banked
 13307  013BE6  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 13308  013BE8  C0D8  F0D6         	movff	LED_Set@pValue,Port_SetPin@pValue
 13309  013BEC  ECDD  F092         	call	_Port_SetPin	;wreg free
 13310                           
 13311                           ;LED.c: 39: break;
 13312  013BF0  0012               	return	
 13313  013BF2                     l11116:
 13314                           
 13315                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 13316  013BF2  0E92               	movlw	low _PortC
 13317  013BF4  0100               	movlb	0	; () banked
 13318  013BF6  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 13319  013BF8  0E00               	movlw	high _PortC
 13320  013BFA  0100               	movlb	0	; () banked
 13321  013BFC  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13322  013BFE  0E01               	movlw	1
 13323  013C00  0100               	movlb	0	; () banked
 13324  013C02  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 13325  013C04  C0D8  F0D6         	movff	LED_Set@pValue,Port_SetPin@pValue
 13326  013C08  ECDD  F092         	call	_Port_SetPin	;wreg free
 13327                           
 13328                           ;LED.c: 43: }
 13329                           
 13330                           ;LED.c: 42: break;
 13331  013C0C  0012               	return	
 13332  013C0E                     l11120:
 13333  013C0E  0100               	movlb	0	; () banked
 13334  013C10  51D9               	movf	LED_Set@pLED& (0+255),w,b
 13335                           
 13336                           ; Switch size 1, requested type "space"
 13337                           ; Number of cases is 2, Range of values is 0 to 1
 13338                           ; switch strategies available:
 13339                           ; Name         Instructions Cycles
 13340                           ; simple_byte            7     4 (average)
 13341                           ;	Chosen strategy is simple_byte
 13342  013C12  0A00               	xorlw	0	; case 0
 13343  013C14  B4D8               	btfsc	status,2,c
 13344  013C16  D7DF               	goto	l11114
 13345  013C18  0A01               	xorlw	1	; case 1
 13346  013C1A  A4D8               	btfss	status,2,c
 13347  013C1C  0012               	return	
 13348  013C1E  D7E9               	goto	l11116
 13349  013C20                     __end_of_LED_Set:
 13350                           	opt stack 0
 13351                           tosu	equ	0xFFF
 13352                           tosh	equ	0xFFE
 13353                           tosl	equ	0xFFD
 13354                           pclath	equ	0xFFA
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           postinc0	equ	0xFEE
 13362                           wreg	equ	0xFE8
 13363                           indf1	equ	0xFE7
 13364                           postdec1	equ	0xFE5
 13365                           fsr1h	equ	0xFE2
 13366                           fsr1l	equ	0xFE1
 13367                           indf2	equ	0xFDF
 13368                           postinc2	equ	0xFDE
 13369                           postdec2	equ	0xFDD
 13370                           plusw2	equ	0xFDB
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8
 13374                           
 13375 ;; *************** function _MXK_Dequeue *****************
 13376 ;; Defined at:
 13377 ;;		line 153 in file "Library/MXK.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;		None
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;		None
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      void 
 13384 ;; Registers used:
 13385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;Total ram usage:        0 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:   12
 13398 ;; This function calls:
 13399 ;;		Absolute function
 13400 ;;		_Motor_Step
 13401 ;; This function is called by:
 13402 ;;		_initialise
 13403 ;;		_main
 13404 ;; This function uses a non-reentrant model
 13405 ;;
 13406                           
 13407                           	psect	text71
 13408  014166                     __ptext71:
 13409                           	opt stack 0
 13410  014166                     _MXK_Dequeue:
 13411                           	opt stack 17
 13412                           
 13413                           ;MXK.c: 155: if (lQueue)
 13414                           
 13415                           ;incstack = 0
 13416  014166  5025               	movf	_lQueue,w,c	;volatile
 13417  014168  1026               	iorwf	_lQueue+1,w,c	;volatile
 13418  01416A  1027               	iorwf	_lQueue+2,w,c	;volatile
 13419  01416C  B4D8               	btfsc	status,2,c
 13420  01416E  D00C               	goto	l12616
 13421                           
 13422                           ;MXK.c: 156: lQueue();
 13423  014170  D801               	call	u9048
 13424  014172  D00A               	goto	l12616
 13425  014174                     u9048:
 13426  014174  0005               	push	
 13427  014176  6EFA               	movwf	pclath,c
 13428  014178  5025               	movf	_lQueue,w,c	;volatile
 13429  01417A  6EFD               	movwf	tosl,c
 13430  01417C  5026               	movf	_lQueue+1,w,c	;volatile
 13431  01417E  6EFE               	movwf	tosh,c
 13432  014180  5027               	movf	_lQueue+2,w,c	;volatile
 13433  014182  6EFF               	movwf	tosu,c
 13434  014184  50FA               	movf	pclath,w,c
 13435  014186  0012               	return		;indir
 13436  014188                     l12616:
 13437                           
 13438                           ;MXK.c: 157: lQueue = 0;
 13439  014188  0E00               	movlw	0
 13440  01418A  6E25               	movwf	_lQueue,c	;volatile
 13441  01418C  0E00               	movlw	0
 13442  01418E  6E26               	movwf	_lQueue+1,c	;volatile
 13443  014190  0E00               	movlw	0
 13444  014192  6E27               	movwf	_lQueue+2,c	;volatile
 13445  014194  0012               	return		;funcret
 13446  014196                     __end_of_MXK_Dequeue:
 13447                           	opt stack 0
 13448                           tosu	equ	0xFFF
 13449                           tosh	equ	0xFFE
 13450                           tosl	equ	0xFFD
 13451                           pclath	equ	0xFFA
 13452                           tblptru	equ	0xFF8
 13453                           tblptrh	equ	0xFF7
 13454                           tblptrl	equ	0xFF6
 13455                           tablat	equ	0xFF5
 13456                           prodh	equ	0xFF4
 13457                           prodl	equ	0xFF3
 13458                           postinc0	equ	0xFEE
 13459                           wreg	equ	0xFE8
 13460                           indf1	equ	0xFE7
 13461                           postdec1	equ	0xFE5
 13462                           fsr1h	equ	0xFE2
 13463                           fsr1l	equ	0xFE1
 13464                           indf2	equ	0xFDF
 13465                           postinc2	equ	0xFDE
 13466                           postdec2	equ	0xFDD
 13467                           plusw2	equ	0xFDB
 13468                           fsr2h	equ	0xFDA
 13469                           fsr2l	equ	0xFD9
 13470                           status	equ	0xFD8
 13471                           
 13472 ;; *************** function _Motor_Step *****************
 13473 ;; Defined at:
 13474 ;;		line 75 in file "Library/Motor.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;		None
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;		None
 13479 ;; Return value:  Size  Location     Type
 13480 ;;                  1    wreg      void 
 13481 ;; Registers used:
 13482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13483 ;; Tracked objects:
 13484 ;;		On entry : 0/0
 13485 ;;		On exit  : 0/0
 13486 ;;		Unchanged: 0/0
 13487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13492 ;;Total ram usage:        2 bytes
 13493 ;; Hardware stack levels used:    1
 13494 ;; Hardware stack levels required when called:   11
 13495 ;; This function calls:
 13496 ;;		_MXK_Queue
 13497 ;;		_MXK_Release
 13498 ;;		_MXK_SwitchTo
 13499 ;;		_Port_SetPin
 13500 ;;		_Timer0_Restart
 13501 ;;		_Timer0_Stop
 13502 ;; This function is called by:
 13503 ;;		_Motor_Init
 13504 ;;		_MXK_Dequeue
 13505 ;;		_Timer0_ISR
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           	psect	text72
 13510  01211C                     __ptext72:
 13511                           	opt stack 0
 13512  01211C                     _Motor_Step:
 13513                           	opt stack 0
 13514                           
 13515                           ;Skip over the trampoline to the duplicate function for level 2
 13516  01211C  B249               	btfsc	btemp,1,c
 13517  01211E  EF20  F091         	goto	i2_Motor_Step
 13518  012122                     _Motor_Step$intlevel0:
 13519                           	opt stack 17
 13520                           
 13521                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 13522                           
 13523                           ;incstack = 0
 13524  012122  EE20 F004          	lfsr	2,4
 13525  012126  502A               	movf	_lMotor,w,c
 13526  012128  26D9               	addwf	fsr2l,f,c
 13527  01212A  502B               	movf	_lMotor+1,w,c
 13528  01212C  22DA               	addwfc	fsr2h,f,c
 13529  01212E  50DF               	movf	indf2,w,c
 13530  012130  EC5A  F09F         	call	_MXK_SwitchTo
 13531  012134  0900               	iorlw	0
 13532  012136  B4D8               	btfsc	status,2,c
 13533  012138  D07A               	goto	l11590
 13534                           
 13535                           ;Motor.c: 78: {
 13536                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 13537  01213A  C02A  FFD9         	movff	_lMotor,fsr2l
 13538  01213E  C02B  FFDA         	movff	_lMotor+1,fsr2h
 13539  012142  50DE               	movf	postinc2,w,c
 13540  012144  10DE               	iorwf	postinc2,w,c
 13541  012146  B4D8               	btfsc	status,2,c
 13542  012148  D06D               	goto	l11584
 13543                           
 13544                           ;Motor.c: 80: {
 13545                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 13546  01214A  C02A  FFD9         	movff	_lMotor,fsr2l
 13547  01214E  C02B  FFDA         	movff	_lMotor+1,fsr2h
 13548  012152  0E01               	movlw	1
 13549  012154  BEDB               	btfsc	plusw2,7,c
 13550  012156  D026               	goto	l11568
 13551  012158  0E01               	movlw	1
 13552  01215A  50DB               	movf	plusw2,w,c
 13553  01215C  E103               	bnz	u7870
 13554  01215E  04DE               	decf	postinc2,w,c
 13555  012160  A0D8               	btfss	status,0,c
 13556  012162  D020               	goto	l11568
 13557  012164                     u7870:
 13558                           
 13559                           ;Motor.c: 83: {
 13560                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 13561  012164  C02A  FFD9         	movff	_lMotor,fsr2l
 13562  012168  C02B  FFDA         	movff	_lMotor+1,fsr2h
 13563  01216C  28DE               	incf	postinc2,w,c
 13564  01216E  E104               	bnz	u7880
 13565  012170  0E7F               	movlw	127
 13566  012172  18DE               	xorwf	postinc2,w,c
 13567  012174  B4D8               	btfsc	status,2,c
 13568  012176  D007               	goto	l11566
 13569  012178                     u7880:
 13570                           
 13571                           ;Motor.c: 85: lMotor->mDelta --;
 13572  012178  C02A  FFD9         	movff	_lMotor,fsr2l
 13573  01217C  C02B  FFDA         	movff	_lMotor+1,fsr2h
 13574  012180  06DE               	decf	postinc2,f,c
 13575  012182  0E00               	movlw	0
 13576  012184  5ADD               	subwfb	postdec2,f,c
 13577  012186                     l11566:
 13578                           
 13579                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 13580  012186  0E7E               	movlw	low _PortE
 13581  012188  0100               	movlb	0	; () banked
 13582  01218A  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 13583  01218C  0E00               	movlw	high _PortE
 13584  01218E  0100               	movlb	0	; () banked
 13585  012190  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13586  012192  0E00               	movlw	0
 13587  012194  0100               	movlb	0	; () banked
 13588  012196  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 13589  012198  0E01               	movlw	1
 13590  01219A  0100               	movlb	0	; () banked
 13591  01219C  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 13592  01219E  ECDD  F092         	call	_Port_SetPin	;wreg free
 13593                           
 13594                           ;Motor.c: 88: }
 13595  0121A2  D01F               	goto	l11574
 13596  0121A4                     l11568:
 13597                           
 13598                           ;Motor.c: 89: else
 13599                           ;Motor.c: 90: {
 13600                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 13601  0121A4  C02A  FFD9         	movff	_lMotor,fsr2l
 13602  0121A8  C02B  FFDA         	movff	_lMotor+1,fsr2h
 13603  0121AC  04DE               	decf	postinc2,w,c
 13604  0121AE  E104               	bnz	u7890
 13605  0121B0  0E80               	movlw	128
 13606  0121B2  18DE               	xorwf	postinc2,w,c
 13607  0121B4  B4D8               	btfsc	status,2,c
 13608  0121B6  D007               	goto	l11572
 13609  0121B8                     u7890:
 13610                           
 13611                           ;Motor.c: 92: lMotor->mDelta ++;
 13612  0121B8  C02A  FFD9         	movff	_lMotor,fsr2l
 13613  0121BC  C02B  FFDA         	movff	_lMotor+1,fsr2h
 13614  0121C0  2ADE               	incf	postinc2,f,c
 13615  0121C2  0E00               	movlw	0
 13616  0121C4  22DD               	addwfc	postdec2,f,c
 13617  0121C6                     l11572:
 13618                           
 13619                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 13620  0121C6  0E7E               	movlw	low _PortE
 13621  0121C8  0100               	movlb	0	; () banked
 13622  0121CA  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 13623  0121CC  0E00               	movlw	high _PortE
 13624  0121CE  0100               	movlb	0	; () banked
 13625  0121D0  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13626  0121D2  0E00               	movlw	0
 13627  0121D4  0100               	movlb	0	; () banked
 13628  0121D6  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 13629  0121D8  0E00               	movlw	0
 13630  0121DA  0100               	movlb	0	; () banked
 13631  0121DC  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 13632  0121DE  ECDD  F092         	call	_Port_SetPin	;wreg free
 13633  0121E2                     l11574:
 13634                           
 13635                           ;Motor.c: 95: }
 13636                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 13637  0121E2  0E7E               	movlw	low _PortE
 13638  0121E4  0100               	movlb	0	; () banked
 13639  0121E6  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 13640  0121E8  0E00               	movlw	high _PortE
 13641  0121EA  0100               	movlb	0	; () banked
 13642  0121EC  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13643  0121EE  0E01               	movlw	1
 13644  0121F0  0100               	movlb	0	; () banked
 13645  0121F2  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 13646  0121F4  0E01               	movlw	1
 13647  0121F6  0100               	movlb	0	; () banked
 13648  0121F8  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 13649  0121FA  ECDD  F092         	call	_Port_SetPin	;wreg free
 13650                           
 13651                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 13652  0121FE  0E7E               	movlw	low _PortE
 13653  012200  0100               	movlb	0	; () banked
 13654  012202  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 13655  012204  0E00               	movlw	high _PortE
 13656  012206  0100               	movlb	0	; () banked
 13657  012208  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13658  01220A  0E01               	movlw	1
 13659  01220C  0100               	movlb	0	; () banked
 13660  01220E  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 13661  012210  0E00               	movlw	0
 13662  012212  0100               	movlb	0	; () banked
 13663  012214  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 13664  012216  ECDD  F092         	call	_Port_SetPin	;wreg free
 13665                           
 13666                           ;Motor.c: 101: MXK_Release();
 13667  01221A  ECF5  F0A2         	call	_MXK_Release	;wreg free
 13668                           
 13669                           ;Motor.c: 102: Timer0_Restart();
 13670  01221E  EC25  F0A3         	call	_Timer0_Restart	;wreg free
 13671                           
 13672                           ;Motor.c: 103: return;
 13673  012222  0012               	return	
 13674  012224                     l11584:
 13675                           
 13676                           ;Motor.c: 104: }
 13677                           ;Motor.c: 105: MXK_Release();
 13678  012224  ECF5  F0A2         	call	_MXK_Release	;wreg free
 13679                           
 13680                           ;Motor.c: 106: Timer0_Stop();
 13681  012228  EC4F  F0A3         	call	_Timer0_Stop	;wreg free
 13682                           
 13683                           ;Motor.c: 107: return;
 13684  01222C  0012               	return	
 13685  01222E                     l11590:
 13686                           
 13687                           ;Motor.c: 108: }
 13688                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 13689  01222E  C06B  F0C4         	movff	_lStepFunction,MXK_Queue@pCallback
 13690  012232  C06C  F0C5         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 13691  012236  C06D  F0C6         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 13692  01223A  EC17  F0A3         	call	_MXK_Queue	;wreg free
 13693  01223E  0012               	return		;funcret
 13694  012240                     __end_of_Motor_Step:
 13695                           	opt stack 0
 13696                           tosu	equ	0xFFF
 13697                           tosh	equ	0xFFE
 13698                           tosl	equ	0xFFD
 13699                           pclath	equ	0xFFA
 13700                           tblptru	equ	0xFF8
 13701                           tblptrh	equ	0xFF7
 13702                           tblptrl	equ	0xFF6
 13703                           tablat	equ	0xFF5
 13704                           prodh	equ	0xFF4
 13705                           prodl	equ	0xFF3
 13706                           postinc0	equ	0xFEE
 13707                           wreg	equ	0xFE8
 13708                           indf1	equ	0xFE7
 13709                           postdec1	equ	0xFE5
 13710                           fsr1h	equ	0xFE2
 13711                           fsr1l	equ	0xFE1
 13712                           indf2	equ	0xFDF
 13713                           postinc2	equ	0xFDE
 13714                           postdec2	equ	0xFDD
 13715                           plusw2	equ	0xFDB
 13716                           fsr2h	equ	0xFDA
 13717                           fsr2l	equ	0xFD9
 13718                           status	equ	0xFD8
 13719                           
 13720 ;; *************** function _Timer0_Stop *****************
 13721 ;; Defined at:
 13722 ;;		line 89 in file "Library/Timer0.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;		None
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;		None
 13727 ;; Return value:  Size  Location     Type
 13728 ;;                  1    wreg      void 
 13729 ;; Registers used:
 13730 ;;		None
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;Total ram usage:        0 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    7
 13743 ;; This function calls:
 13744 ;;		Nothing
 13745 ;; This function is called by:
 13746 ;;		_Motor_Step
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750                           	psect	text73
 13751  01469E                     __ptext73:
 13752                           	opt stack 0
 13753  01469E                     _Timer0_Stop:
 13754                           	opt stack 20
 13755                           
 13756                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 13757                           
 13758                           ;incstack = 0
 13759  01469E  9AF2               	bcf	intcon,5,c	;volatile
 13760                           
 13761                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 13762  0146A0  94F2               	bcf	intcon,2,c	;volatile
 13763  0146A2  0012               	return		;funcret
 13764  0146A4                     __end_of_Timer0_Stop:
 13765                           	opt stack 0
 13766                           tosu	equ	0xFFF
 13767                           tosh	equ	0xFFE
 13768                           tosl	equ	0xFFD
 13769                           pclath	equ	0xFFA
 13770                           tblptru	equ	0xFF8
 13771                           tblptrh	equ	0xFF7
 13772                           tblptrl	equ	0xFF6
 13773                           tablat	equ	0xFF5
 13774                           prodh	equ	0xFF4
 13775                           prodl	equ	0xFF3
 13776                           intcon	equ	0xFF2
 13777                           postinc0	equ	0xFEE
 13778                           wreg	equ	0xFE8
 13779                           indf1	equ	0xFE7
 13780                           postdec1	equ	0xFE5
 13781                           fsr1h	equ	0xFE2
 13782                           fsr1l	equ	0xFE1
 13783                           indf2	equ	0xFDF
 13784                           postinc2	equ	0xFDE
 13785                           postdec2	equ	0xFDD
 13786                           plusw2	equ	0xFDB
 13787                           fsr2h	equ	0xFDA
 13788                           fsr2l	equ	0xFD9
 13789                           status	equ	0xFD8
 13790                           
 13791 ;; *************** function _Timer0_Restart *****************
 13792 ;; Defined at:
 13793 ;;		line 83 in file "Library/Timer0.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;		None
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;		None
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		None
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;Total ram usage:        0 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    7
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_Motor_Step
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           	psect	text74
 13822  01464A                     __ptext74:
 13823                           	opt stack 0
 13824  01464A                     _Timer0_Restart:
 13825                           	opt stack 20
 13826                           
 13827                           ;Timer0.c: 85: TMR0 = COUNTER;
 13828                           
 13829                           ;incstack = 0
 13830  01464A  C028  FFD6         	movff	_COUNTER,4054	;volatile
 13831  01464E  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 13832                           
 13833                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 13834  014652  8AF2               	bsf	intcon,5,c	;volatile
 13835  014654  0012               	return		;funcret
 13836  014656                     __end_of_Timer0_Restart:
 13837                           	opt stack 0
 13838                           tosu	equ	0xFFF
 13839                           tosh	equ	0xFFE
 13840                           tosl	equ	0xFFD
 13841                           pclath	equ	0xFFA
 13842                           tblptru	equ	0xFF8
 13843                           tblptrh	equ	0xFF7
 13844                           tblptrl	equ	0xFF6
 13845                           tablat	equ	0xFF5
 13846                           prodh	equ	0xFF4
 13847                           prodl	equ	0xFF3
 13848                           intcon	equ	0xFF2
 13849                           postinc0	equ	0xFEE
 13850                           wreg	equ	0xFE8
 13851                           indf1	equ	0xFE7
 13852                           postdec1	equ	0xFE5
 13853                           fsr1h	equ	0xFE2
 13854                           fsr1l	equ	0xFE1
 13855                           indf2	equ	0xFDF
 13856                           postinc2	equ	0xFDE
 13857                           postdec2	equ	0xFDD
 13858                           plusw2	equ	0xFDB
 13859                           fsr2h	equ	0xFDA
 13860                           fsr2l	equ	0xFD9
 13861                           status	equ	0xFD8
 13862                           
 13863 ;; *************** function _MXK_SwitchTo *****************
 13864 ;; Defined at:
 13865 ;;		line 105 in file "Library/MXK.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  pModule         1    wreg     enum E6925
 13868 ;; Auto vars:     Size  Location     Type
 13869 ;;  pModule         1    7[BANK0 ] enum E6925
 13870 ;;  CUR             1    6[BANK0 ] unsigned char 
 13871 ;; Return value:  Size  Location     Type
 13872 ;;                  1    wreg      unsigned char 
 13873 ;; Registers used:
 13874 ;;		wreg, status,2, status,0, cstack
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;Total ram usage:        2 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; Hardware stack levels required when called:    8
 13887 ;; This function calls:
 13888 ;;		_delay_us
 13889 ;; This function is called by:
 13890 ;;		_Motor_Step
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           	psect	text75
 13895  013EB4                     __ptext75:
 13896                           	opt stack 0
 13897  013EB4                     _MXK_SwitchTo:
 13898                           	opt stack 19
 13899                           
 13900                           ;incstack = 0
 13901                           ;MXK_SwitchTo@pModule stored from wreg
 13902  013EB4  0100               	movlb	0	; () banked
 13903  013EB6  6FCB               	movwf	MXK_SwitchTo@pModule& (0+255),b
 13904                           
 13905                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 13906  013EB8  5086               	movf	3974,w,c	;volatile
 13907  013EBA  0B0F               	andlw	15
 13908  013EBC  0100               	movlb	0	; () banked
 13909  013EBE  6FCA               	movwf	MXK_SwitchTo@CUR& (0+255),b
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 13913  013EC0  5043               	movf	_Bus_State,w,c
 13914  013EC2  A4D8               	btfss	status,2,c
 13915  013EC4  D002               	goto	l11352
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;MXK.c: 110: return 0;
 13919  013EC6  0E00               	movlw	0
 13920                           
 13921                           ; BSR set to: 0
 13922  013EC8  0012               	return	
 13923  013ECA                     l11352:
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 13927  013ECA  0E00               	movlw	0
 13928  013ECC  6E43               	movwf	_Bus_State,c
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;MXK.c: 114: if (CUR != pModule)
 13932  013ECE  0100               	movlb	0	; () banked
 13933  013ED0  51CB               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 13934  013ED2  0100               	movlb	0	; () banked
 13935  013ED4  19CA               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 13936  013ED6  B4D8               	btfsc	status,2,c
 13937  013ED8  D00C               	goto	l11360
 13938                           
 13939                           ; BSR set to: 0
 13940                           ;MXK.c: 115: {
 13941                           ;MXK.c: 116: PORTG &= ~(0xF);
 13942  013EDA  0EF0               	movlw	240
 13943  013EDC  1686               	andwf	3974,f,c	;volatile
 13944                           
 13945                           ;MXK.c: 117: PORTG |= pModule;
 13946  013EDE  0100               	movlb	0	; () banked
 13947  013EE0  51CB               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 13948  013EE2  1286               	iorwf	3974,f,c	;volatile
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;MXK.c: 120: delay_us(10);
 13952  013EE4  0E00               	movlw	0
 13953  013EE6  0100               	movlb	0	; () banked
 13954  013EE8  6FC5               	movwf	(delay_us@us+1)& (0+255),b
 13955  013EEA  0E0A               	movlw	10
 13956  013EEC  6FC4               	movwf	delay_us@us& (0+255),b
 13957  013EEE  EC97  F09D         	call	_delay_us	;wreg free
 13958  013EF2                     l11360:
 13959                           
 13960                           ;MXK.c: 121: }
 13961                           ;MXK.c: 122: return 1;
 13962  013EF2  0E01               	movlw	1
 13963  013EF4  0012               	return	
 13964  013EF6                     __end_of_MXK_SwitchTo:
 13965                           	opt stack 0
 13966                           tosu	equ	0xFFF
 13967                           tosh	equ	0xFFE
 13968                           tosl	equ	0xFFD
 13969                           pclath	equ	0xFFA
 13970                           tblptru	equ	0xFF8
 13971                           tblptrh	equ	0xFF7
 13972                           tblptrl	equ	0xFF6
 13973                           tablat	equ	0xFF5
 13974                           prodh	equ	0xFF4
 13975                           prodl	equ	0xFF3
 13976                           intcon	equ	0xFF2
 13977                           postinc0	equ	0xFEE
 13978                           wreg	equ	0xFE8
 13979                           indf1	equ	0xFE7
 13980                           postdec1	equ	0xFE5
 13981                           fsr1h	equ	0xFE2
 13982                           fsr1l	equ	0xFE1
 13983                           indf2	equ	0xFDF
 13984                           postinc2	equ	0xFDE
 13985                           postdec2	equ	0xFDD
 13986                           plusw2	equ	0xFDB
 13987                           fsr2h	equ	0xFDA
 13988                           fsr2l	equ	0xFD9
 13989                           status	equ	0xFD8
 13990                           
 13991 ;; *************** function _MXK_Release *****************
 13992 ;; Defined at:
 13993 ;;		line 130 in file "Library/MXK.c"
 13994 ;; Parameters:    Size  Location     Type
 13995 ;;		None
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;		None
 13998 ;; Return value:  Size  Location     Type
 13999 ;;                  1    wreg      unsigned char 
 14000 ;; Registers used:
 14001 ;;		wreg, status,2, status,0
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14011 ;;Total ram usage:        0 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    7
 14014 ;; This function calls:
 14015 ;;		Nothing
 14016 ;; This function is called by:
 14017 ;;		_Motor_Step
 14018 ;;		_initialise
 14019 ;;		_main
 14020 ;; This function uses a non-reentrant model
 14021 ;;
 14022                           
 14023                           	psect	text76
 14024  0145EA                     __ptext76:
 14025                           	opt stack 0
 14026  0145EA                     _MXK_Release:
 14027                           	opt stack 22
 14028                           
 14029                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 14030                           
 14031                           ;incstack = 0
 14032  0145EA  0E01               	movlw	1
 14033  0145EC  6E43               	movwf	_Bus_State,c
 14034                           
 14035                           ;MXK.c: 134: if (lQueue != 0)
 14036  0145EE  5025               	movf	_lQueue,w,c	;volatile
 14037  0145F0  1026               	iorwf	_lQueue+1,w,c	;volatile
 14038  0145F2  1027               	iorwf	_lQueue+2,w,c	;volatile
 14039  0145F4  B4D8               	btfsc	status,2,c
 14040  0145F6  D002               	goto	l11372
 14041                           
 14042                           ;MXK.c: 135: return 1;
 14043  0145F8  0E01               	movlw	1
 14044  0145FA  0012               	return	
 14045  0145FC                     l11372:
 14046                           
 14047                           ;MXK.c: 137: return 0;
 14048  0145FC  0E00               	movlw	0
 14049  0145FE  0012               	return	
 14050  014600                     __end_of_MXK_Release:
 14051                           	opt stack 0
 14052                           tosu	equ	0xFFF
 14053                           tosh	equ	0xFFE
 14054                           tosl	equ	0xFFD
 14055                           pclath	equ	0xFFA
 14056                           tblptru	equ	0xFF8
 14057                           tblptrh	equ	0xFF7
 14058                           tblptrl	equ	0xFF6
 14059                           tablat	equ	0xFF5
 14060                           prodh	equ	0xFF4
 14061                           prodl	equ	0xFF3
 14062                           intcon	equ	0xFF2
 14063                           postinc0	equ	0xFEE
 14064                           wreg	equ	0xFE8
 14065                           indf1	equ	0xFE7
 14066                           postdec1	equ	0xFE5
 14067                           fsr1h	equ	0xFE2
 14068                           fsr1l	equ	0xFE1
 14069                           indf2	equ	0xFDF
 14070                           postinc2	equ	0xFDE
 14071                           postdec2	equ	0xFDD
 14072                           plusw2	equ	0xFDB
 14073                           fsr2h	equ	0xFDA
 14074                           fsr2l	equ	0xFD9
 14075                           status	equ	0xFD8
 14076                           
 14077 ;; *************** function _MXK_Queue *****************
 14078 ;; Defined at:
 14079 ;;		line 144 in file "Library/MXK.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 14082 ;;		 -> Absolute function(1), Motor_Step(1), 
 14083 ;; Auto vars:     Size  Location     Type
 14084 ;;		None
 14085 ;; Return value:  Size  Location     Type
 14086 ;;                  1    wreg      void 
 14087 ;; Registers used:
 14088 ;;		wreg, status,2, status,0
 14089 ;; Tracked objects:
 14090 ;;		On entry : 0/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14094 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14097 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14098 ;;Total ram usage:        3 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    7
 14101 ;; This function calls:
 14102 ;;		Nothing
 14103 ;; This function is called by:
 14104 ;;		_Motor_Step
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           	psect	text77
 14109  01462E                     __ptext77:
 14110                           	opt stack 0
 14111  01462E                     _MXK_Queue:
 14112                           	opt stack 20
 14113                           
 14114                           ;MXK.c: 146: lQueue = pCallback;
 14115                           
 14116                           ;incstack = 0
 14117  01462E  C0C4  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 14118  014632  C0C5  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 14119  014636  C0C6  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 14120  01463A  0012               	return		;funcret
 14121  01463C                     __end_of_MXK_Queue:
 14122                           	opt stack 0
 14123                           tosu	equ	0xFFF
 14124                           tosh	equ	0xFFE
 14125                           tosl	equ	0xFFD
 14126                           pclath	equ	0xFFA
 14127                           tblptru	equ	0xFF8
 14128                           tblptrh	equ	0xFF7
 14129                           tblptrl	equ	0xFF6
 14130                           tablat	equ	0xFF5
 14131                           prodh	equ	0xFF4
 14132                           prodl	equ	0xFF3
 14133                           intcon	equ	0xFF2
 14134                           postinc0	equ	0xFEE
 14135                           wreg	equ	0xFE8
 14136                           indf1	equ	0xFE7
 14137                           postdec1	equ	0xFE5
 14138                           fsr1h	equ	0xFE2
 14139                           fsr1l	equ	0xFE1
 14140                           indf2	equ	0xFDF
 14141                           postinc2	equ	0xFDE
 14142                           postdec2	equ	0xFDD
 14143                           plusw2	equ	0xFDB
 14144                           fsr2h	equ	0xFDA
 14145                           fsr2l	equ	0xFD9
 14146                           status	equ	0xFD8
 14147                           
 14148 ;; *************** function _MXK_BlockSwitchTo *****************
 14149 ;; Defined at:
 14150 ;;		line 82 in file "Library/MXK.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;  pModule         1    wreg     enum E6925
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;  pModule         1    7[BANK0 ] enum E6925
 14155 ;;  CUR             1    6[BANK0 ] unsigned char 
 14156 ;; Return value:  Size  Location     Type
 14157 ;;                  1    wreg      unsigned char 
 14158 ;; Registers used:
 14159 ;;		wreg, status,2, status,0, cstack
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14166 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14169 ;;Total ram usage:        2 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    8
 14172 ;; This function calls:
 14173 ;;		_delay_us
 14174 ;; This function is called by:
 14175 ;;		_initialise
 14176 ;;		_main
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           	psect	text78
 14181  013F36                     __ptext78:
 14182                           	opt stack 0
 14183  013F36                     _MXK_BlockSwitchTo:
 14184                           	opt stack 21
 14185                           
 14186                           ;incstack = 0
 14187                           ;MXK_BlockSwitchTo@pModule stored from wreg
 14188  013F36  0100               	movlb	0	; () banked
 14189  013F38  6FCB               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 14190                           
 14191                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 14192  013F3A  5086               	movf	3974,w,c	;volatile
 14193  013F3C  0B0F               	andlw	15
 14194  013F3E  0100               	movlb	0	; () banked
 14195  013F40  6FCA               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 14196  013F42                     l11722:
 14197  013F42  5043               	movf	_Bus_State,w,c
 14198  013F44  B4D8               	btfsc	status,2,c
 14199  013F46  D7FD               	goto	l11722
 14200                           
 14201                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 14202  013F48  0E00               	movlw	0
 14203  013F4A  6E43               	movwf	_Bus_State,c
 14204                           
 14205                           ;MXK.c: 90: if (CUR != pModule)
 14206  013F4C  0100               	movlb	0	; () banked
 14207  013F4E  51CB               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 14208  013F50  0100               	movlb	0	; () banked
 14209  013F52  19CA               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 14210  013F54  B4D8               	btfsc	status,2,c
 14211  013F56  D00C               	goto	l11732
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;MXK.c: 91: {
 14215                           ;MXK.c: 92: PORTG &= ~(0xF);
 14216  013F58  0EF0               	movlw	240
 14217  013F5A  1686               	andwf	3974,f,c	;volatile
 14218                           
 14219                           ;MXK.c: 93: PORTG |= pModule;
 14220  013F5C  0100               	movlb	0	; () banked
 14221  013F5E  51CB               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 14222  013F60  1286               	iorwf	3974,f,c	;volatile
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;MXK.c: 96: delay_us(10);
 14226  013F62  0E00               	movlw	0
 14227  013F64  0100               	movlb	0	; () banked
 14228  013F66  6FC5               	movwf	(delay_us@us+1)& (0+255),b
 14229  013F68  0E0A               	movlw	10
 14230  013F6A  6FC4               	movwf	delay_us@us& (0+255),b
 14231  013F6C  EC97  F09D         	call	_delay_us	;wreg free
 14232  013F70                     l11732:
 14233                           
 14234                           ;MXK.c: 97: }
 14235                           ;MXK.c: 98: return 1;
 14236  013F70  0E01               	movlw	1
 14237  013F72  0012               	return	
 14238  013F74                     __end_of_MXK_BlockSwitchTo:
 14239                           	opt stack 0
 14240                           tosu	equ	0xFFF
 14241                           tosh	equ	0xFFE
 14242                           tosl	equ	0xFFD
 14243                           pclath	equ	0xFFA
 14244                           tblptru	equ	0xFF8
 14245                           tblptrh	equ	0xFF7
 14246                           tblptrl	equ	0xFF6
 14247                           tablat	equ	0xFF5
 14248                           prodh	equ	0xFF4
 14249                           prodl	equ	0xFF3
 14250                           intcon	equ	0xFF2
 14251                           postinc0	equ	0xFEE
 14252                           wreg	equ	0xFE8
 14253                           indf1	equ	0xFE7
 14254                           postdec1	equ	0xFE5
 14255                           fsr1h	equ	0xFE2
 14256                           fsr1l	equ	0xFE1
 14257                           indf2	equ	0xFDF
 14258                           postinc2	equ	0xFDE
 14259                           postdec2	equ	0xFDD
 14260                           plusw2	equ	0xFDB
 14261                           fsr2h	equ	0xFDA
 14262                           fsr2l	equ	0xFD9
 14263                           status	equ	0xFD8
 14264                           
 14265 ;; *************** function _delay_us *****************
 14266 ;; Defined at:
 14267 ;;		line 255 in file "Library/Types.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;  us              2    0[BANK0 ] unsigned short 
 14270 ;; Auto vars:     Size  Location     Type
 14271 ;;  u               4    2[BANK0 ] unsigned long 
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  1    wreg      void 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14281 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14282 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14284 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14285 ;;Total ram usage:        6 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    7
 14288 ;; This function calls:
 14289 ;;		Nothing
 14290 ;; This function is called by:
 14291 ;;		_MXK_BlockSwitchTo
 14292 ;;		_MXK_SwitchTo
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296                           	psect	text79
 14297  013B2E                     __ptext79:
 14298                           	opt stack 0
 14299  013B2E                     _delay_us:
 14300                           	opt stack 19
 14301                           
 14302                           ;Types.c: 256: unsigned long u;
 14303                           ;Types.c: 257: while (us--) {
 14304                           
 14305                           ;incstack = 0
 14306  013B2E  D01C               	goto	l10904
 14307  013B30                     l10896:
 14308                           
 14309                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 14310  013B30  0E00               	movlw	0
 14311  013B32  0100               	movlb	0	; () banked
 14312  013B34  6FC6               	movwf	delay_us@u& (0+255),b
 14313  013B36  0E00               	movlw	0
 14314  013B38  6FC7               	movwf	(delay_us@u+1)& (0+255),b
 14315  013B3A  0E00               	movlw	0
 14316  013B3C  6FC8               	movwf	(delay_us@u+2)& (0+255),b
 14317  013B3E  0E00               	movlw	0
 14318  013B40  6FC9               	movwf	(delay_us@u+3)& (0+255),b
 14319  013B42                     l10898:
 14320                           
 14321                           ; BSR set to: 0
 14322  013B42  0100               	movlb	0	; () banked
 14323  013B44  51C6               	movf	delay_us@u& (0+255),w,b
 14324  013B46  0100               	movlb	0	; () banked
 14325  013B48  11C7               	iorwf	(delay_us@u+1)& (0+255),w,b
 14326  013B4A  0100               	movlb	0	; () banked
 14327  013B4C  11C8               	iorwf	(delay_us@u+2)& (0+255),w,b
 14328  013B4E  0100               	movlb	0	; () banked
 14329  013B50  11C9               	iorwf	(delay_us@u+3)& (0+255),w,b
 14330  013B52  A4D8               	btfss	status,2,c
 14331  013B54  D009               	goto	l10904
 14332                           
 14333                           ; BSR set to: 0
 14334                           
 14335                           ; BSR set to: 0
 14336  013B56  F000               	nop		; ;# 
 14337  013B58  0E01               	movlw	1
 14338  013B5A  0100               	movlb	0	; () banked
 14339  013B5C  27C6               	addwf	delay_us@u& (0+255),f,b
 14340  013B5E  0E00               	movlw	0
 14341  013B60  23C7               	addwfc	(delay_us@u+1)& (0+255),f,b
 14342  013B62  23C8               	addwfc	(delay_us@u+2)& (0+255),f,b
 14343  013B64  23C9               	addwfc	(delay_us@u+3)& (0+255),f,b
 14344  013B66  D7ED               	goto	l10898
 14345  013B68                     l10904:
 14346  013B68  0100               	movlb	0	; () banked
 14347  013B6A  07C4               	decf	delay_us@us& (0+255),f,b
 14348  013B6C  A0D8               	btfss	status,0,c
 14349  013B6E  07C5               	decf	(delay_us@us+1)& (0+255),f,b
 14350  013B70  0100               	movlb	0	; () banked
 14351  013B72  29C4               	incf	delay_us@us& (0+255),w,b
 14352  013B74  E1DD               	bnz	l10896
 14353  013B76  0100               	movlb	0	; () banked
 14354  013B78  29C5               	incf	(delay_us@us+1)& (0+255),w,b
 14355  013B7A  B4D8               	btfsc	status,2,c
 14356  013B7C  0012               	return	
 14357  013B7E  D7D8               	goto	l10896
 14358  013B80                     __end_of_delay_us:
 14359                           	opt stack 0
 14360                           tosu	equ	0xFFF
 14361                           tosh	equ	0xFFE
 14362                           tosl	equ	0xFFD
 14363                           pclath	equ	0xFFA
 14364                           tblptru	equ	0xFF8
 14365                           tblptrh	equ	0xFF7
 14366                           tblptrl	equ	0xFF6
 14367                           tablat	equ	0xFF5
 14368                           prodh	equ	0xFF4
 14369                           prodl	equ	0xFF3
 14370                           intcon	equ	0xFF2
 14371                           postinc0	equ	0xFEE
 14372                           wreg	equ	0xFE8
 14373                           indf1	equ	0xFE7
 14374                           postdec1	equ	0xFE5
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           plusw2	equ	0xFDB
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385 ;; *************** function _LCD_Init *****************
 14386 ;; Defined at:
 14387 ;;		line 172 in file "Library/LCD.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;		None
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  i               2    2[BANK2 ] unsigned short 
 14392 ;; Return value:  Size  Location     Type
 14393 ;;                  1    wreg      void 
 14394 ;; Registers used:
 14395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14402 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;Total ram usage:        4 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:   15
 14408 ;; This function calls:
 14409 ;;		_Configure_GPIOs
 14410 ;;		_LCD_Fill
 14411 ;;		_LCD_Write
 14412 ;;		_Set_Rotation
 14413 ;;		_delay_ms
 14414 ;; This function is called by:
 14415 ;;		_initialise
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           	psect	text80
 14420  011CF2                     __ptext80:
 14421                           	opt stack 0
 14422  011CF2                     _LCD_Init:
 14423                           	opt stack 14
 14424                           
 14425                           ;LCD.c: 174: UINT16 i;
 14426                           ;LCD.c: 175: Configure_GPIOs();
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;incstack = 0
 14430  011CF2  EC3E  F09B         	call	_Configure_GPIOs	;wreg free
 14431                           
 14432                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 14433  011CF6  0E00               	movlw	0
 14434  011CF8  0102               	movlb	2	; () banked
 14435  011CFA  6F03               	movwf	(LCD_Init@i+1)& (0+255),b
 14436  011CFC  0E00               	movlw	0
 14437  011CFE  6F02               	movwf	LCD_Init@i& (0+255),b
 14438                           
 14439                           ; BSR set to: 2
 14440  011D00  0102               	movlb	2	; () banked
 14441  011D02  5103               	movf	(LCD_Init@i+1)& (0+255),w,b
 14442  011D04  E106               	bnz	u7900
 14443  011D06  0E59               	movlw	89
 14444  011D08  0102               	movlb	2	; () banked
 14445  011D0A  5D02               	subwf	LCD_Init@i& (0+255),w,b
 14446  011D0C  B0D8               	btfsc	status,0,c
 14447  011D0E  D08B               	goto	l11622
 14448  011D10  D001               	goto	l11606
 14449  011D12                     u7900:
 14450                           
 14451                           ; BSR set to: 2
 14452  011D12  D089               	goto	l11622
 14453  011D14                     l11606:
 14454                           
 14455                           ; BSR set to: 2
 14456                           ;LCD.c: 178: {
 14457                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 14458  011D14  90D8               	bcf	status,0,c
 14459  011D16  0102               	movlb	2	; () banked
 14460  011D18  3502               	rlcf	LCD_Init@i& (0+255),w,b
 14461  011D1A  6EF6               	movwf	tblptrl,c
 14462  011D1C  0102               	movlb	2	; () banked
 14463  011D1E  3503               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14464  011D20  6EF7               	movwf	tblptrh,c
 14465  011D22  0E9B               	movlw	low _InitList
 14466  011D24  26F6               	addwf	tblptrl,f,c
 14467  011D26  0EFC               	movlw	high _InitList
 14468  011D28  22F7               	addwfc	tblptrh,f,c
 14469  011D2A                     	if	1	;There are 3 active tblptr bytes
 14470  011D2A  6AF8               	clrf	tblptru,c
 14471  011D2C  0E00               	movlw	low (__mediumconst shr (0+16))
 14472  011D2E  22F8               	addwfc	tblptru,f,c
 14473  011D30                     	endif
 14474  011D30  0009               	tblrd		*+
 14475  011D32  0E80               	movlw	128
 14476  011D34  18F5               	xorwf	tablat,w,c
 14477  011D36  0009               	tblrd		*+
 14478  011D38  10F5               	iorwf	tablat,w,c
 14479  011D3A  A4D8               	btfss	status,2,c
 14480  011D3C  D022               	goto	l11612
 14481                           
 14482                           ; BSR set to: 2
 14483  011D3E  0102               	movlb	2	; () banked
 14484  011D40  5103               	movf	(LCD_Init@i+1)& (0+255),w,b
 14485  011D42  E11F               	bnz	l11612
 14486  011D44  0E58               	movlw	88
 14487  011D46  0102               	movlb	2	; () banked
 14488  011D48  5D02               	subwf	LCD_Init@i& (0+255),w,b
 14489  011D4A  B0D8               	btfsc	status,0,c
 14490  011D4C  D01A               	goto	l11612
 14491                           
 14492                           ; BSR set to: 2
 14493                           ;LCD.c: 180: delay_ms(InitList[++i]);
 14494  011D4E  0102               	movlb	2	; () banked
 14495  011D50  4B02               	infsnz	LCD_Init@i& (0+255),f,b
 14496  011D52  2B03               	incf	(LCD_Init@i+1)& (0+255),f,b
 14497  011D54  90D8               	bcf	status,0,c
 14498  011D56  0102               	movlb	2	; () banked
 14499  011D58  3502               	rlcf	LCD_Init@i& (0+255),w,b
 14500  011D5A  6EF6               	movwf	tblptrl,c
 14501  011D5C  0102               	movlb	2	; () banked
 14502  011D5E  3503               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14503  011D60  6EF7               	movwf	tblptrh,c
 14504  011D62  0E9B               	movlw	low _InitList
 14505  011D64  26F6               	addwf	tblptrl,f,c
 14506  011D66  0EFC               	movlw	high _InitList
 14507  011D68  22F7               	addwfc	tblptrh,f,c
 14508  011D6A                     	if	1	;There are 3 active tblptr bytes
 14509  011D6A  6AF8               	clrf	tblptru,c
 14510  011D6C  0E00               	movlw	low (__mediumconst shr (0+16))
 14511  011D6E  22F8               	addwfc	tblptru,f,c
 14512  011D70                     	endif
 14513  011D70  0009               	tblrd		*+
 14514  011D72  CFF5 F0C4          	movff	tablat,delay_ms@ms
 14515  011D76  000A               	tblrd		*-
 14516  011D78  CFF5 F0C5          	movff	tablat,delay_ms@ms+1
 14517  011D7C  ECE2  F09B         	call	_delay_ms	;wreg free
 14518  011D80  D04B               	goto	l11618
 14519  011D82                     l11612:
 14520                           
 14521                           ;LCD.c: 181: else
 14522                           ;LCD.c: 182: {
 14523                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 14524  011D82  90D8               	bcf	status,0,c
 14525  011D84  0102               	movlb	2	; () banked
 14526  011D86  3502               	rlcf	LCD_Init@i& (0+255),w,b
 14527  011D88  6EF6               	movwf	tblptrl,c
 14528  011D8A  0102               	movlb	2	; () banked
 14529  011D8C  3503               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14530  011D8E  6EF7               	movwf	tblptrh,c
 14531  011D90  0E9B               	movlw	low _InitList
 14532  011D92  26F6               	addwf	tblptrl,f,c
 14533  011D94  0EFC               	movlw	high _InitList
 14534  011D96  22F7               	addwfc	tblptrh,f,c
 14535  011D98                     	if	1	;There are 3 active tblptr bytes
 14536  011D98  6AF8               	clrf	tblptru,c
 14537  011D9A  0E00               	movlw	low (__mediumconst shr (0+16))
 14538  011D9C  22F8               	addwfc	tblptru,f,c
 14539  011D9E                     	endif
 14540  011D9E  0009               	tblrd		*+
 14541  011DA0  0E00               	movlw	0
 14542  011DA2  5EF5               	subwf	tablat,f,c
 14543  011DA4  0009               	tblrd		*+
 14544  011DA6  0E01               	movlw	1
 14545  011DA8  5AF5               	subwfb	tablat,f,c
 14546  011DAA  A0D8               	btfss	status,0,c
 14547  011DAC  D020               	goto	l11616
 14548                           
 14549                           ; BSR set to: 2
 14550  011DAE  0E00               	movlw	0
 14551  011DB0  0100               	movlb	0	; () banked
 14552  011DB2  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14553  011DB4  90D8               	bcf	status,0,c
 14554  011DB6  0102               	movlb	2	; () banked
 14555  011DB8  3502               	rlcf	LCD_Init@i& (0+255),w,b
 14556  011DBA  6EF6               	movwf	tblptrl,c
 14557  011DBC  0102               	movlb	2	; () banked
 14558  011DBE  3503               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14559  011DC0  6EF7               	movwf	tblptrh,c
 14560  011DC2  0E9B               	movlw	low _InitList
 14561  011DC4  26F6               	addwf	tblptrl,f,c
 14562  011DC6  0EFC               	movlw	high _InitList
 14563  011DC8  22F7               	addwfc	tblptrh,f,c
 14564  011DCA                     	if	1	;There are 3 active tblptr bytes
 14565  011DCA  6AF8               	clrf	tblptru,c
 14566  011DCC  0E00               	movlw	low (__mediumconst shr (0+16))
 14567  011DCE  22F8               	addwfc	tblptru,f,c
 14568  011DD0                     	endif
 14569  011DD0  0009               	tblrd		*+
 14570  011DD2  CFF5 F200          	movff	tablat,??_LCD_Init
 14571  011DD6  0009               	tblrd		*+
 14572  011DD8  CFF5 F201          	movff	tablat,??_LCD_Init+1
 14573  011DDC  C201  F200         	movff	??_LCD_Init+1,??_LCD_Init
 14574  011DE0  0102               	movlb	2	; () banked
 14575  011DE2  6B01               	clrf	(??_LCD_Init+1)& (0+255),b
 14576  011DE4  0102               	movlb	2	; () banked
 14577  011DE6  5100               	movf	??_LCD_Init& (0+255),w,b
 14578  011DE8  ECBE  F0A1         	call	_LCD_Write
 14579  011DEC  D015               	goto	l11618
 14580  011DEE                     l11616:
 14581                           
 14582                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 14583  011DEE  0E01               	movlw	1
 14584  011DF0  0100               	movlb	0	; () banked
 14585  011DF2  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14586  011DF4  90D8               	bcf	status,0,c
 14587  011DF6  0102               	movlb	2	; () banked
 14588  011DF8  3502               	rlcf	LCD_Init@i& (0+255),w,b
 14589  011DFA  6EF6               	movwf	tblptrl,c
 14590  011DFC  0102               	movlb	2	; () banked
 14591  011DFE  3503               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14592  011E00  6EF7               	movwf	tblptrh,c
 14593  011E02  0E9B               	movlw	low _InitList
 14594  011E04  26F6               	addwf	tblptrl,f,c
 14595  011E06  0EFC               	movlw	high _InitList
 14596  011E08  22F7               	addwfc	tblptrh,f,c
 14597  011E0A                     	if	1	;There are 3 active tblptr bytes
 14598  011E0A  6AF8               	clrf	tblptru,c
 14599  011E0C  0E00               	movlw	low (__mediumconst shr (0+16))
 14600  011E0E  22F8               	addwfc	tblptru,f,c
 14601  011E10                     	endif
 14602  011E10  0008               	tblrd		*
 14603  011E12  50F5               	movf	tablat,w,c
 14604  011E14  ECBE  F0A1         	call	_LCD_Write
 14605  011E18                     l11618:
 14606  011E18  0102               	movlb	2	; () banked
 14607  011E1A  4B02               	infsnz	LCD_Init@i& (0+255),f,b
 14608  011E1C  2B03               	incf	(LCD_Init@i+1)& (0+255),f,b
 14609                           
 14610                           ; BSR set to: 2
 14611  011E1E  0102               	movlb	2	; () banked
 14612  011E20  5103               	movf	(LCD_Init@i+1)& (0+255),w,b
 14613  011E22  E101               	bnz	l11622
 14614  011E24  D770               	goto	L5
 14615  011E26                     l11622:
 14616                           
 14617                           ; BSR set to: 2
 14618                           ;LCD.c: 185: }
 14619                           ;LCD.c: 186: }
 14620                           ;LCD.c: 187: delay_ms(100);
 14621  011E26  0E00               	movlw	0
 14622  011E28  0100               	movlb	0	; () banked
 14623  011E2A  6FC5               	movwf	(delay_ms@ms+1)& (0+255),b
 14624  011E2C  0E64               	movlw	100
 14625  011E2E  6FC4               	movwf	delay_ms@ms& (0+255),b
 14626  011E30  ECE2  F09B         	call	_delay_ms	;wreg free
 14627                           
 14628                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 14629  011E34  0E00               	movlw	0
 14630  011E36  0100               	movlb	0	; () banked
 14631  011E38  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14632  011E3A  0E29               	movlw	41
 14633  011E3C  ECBE  F0A1         	call	_LCD_Write
 14634                           
 14635                           ;LCD.c: 189: Set_Rotation(1);
 14636  011E40  0E01               	movlw	1
 14637  011E42  ECF8  F097         	call	_Set_Rotation
 14638                           
 14639                           ;LCD.c: 191: delay_ms(100);
 14640  011E46  0E00               	movlw	0
 14641  011E48  0100               	movlb	0	; () banked
 14642  011E4A  6FC5               	movwf	(delay_ms@ms+1)& (0+255),b
 14643  011E4C  0E64               	movlw	100
 14644  011E4E  6FC4               	movwf	delay_ms@ms& (0+255),b
 14645  011E50  ECE2  F09B         	call	_delay_ms	;wreg free
 14646                           
 14647                           ;LCD.c: 192: LCD_Fill(0x0000);
 14648  011E54  0E00               	movlw	0
 14649  011E56  0100               	movlb	0	; () banked
 14650  011E58  6FCE               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 14651  011E5A  0E00               	movlw	0
 14652  011E5C  6FCD               	movwf	LCD_Fill@pColour& (0+255),b
 14653  011E5E  EC6B  F09D         	call	_LCD_Fill	;wreg free
 14654  011E62  0012               	return		;funcret
 14655  011E64                     __end_of_LCD_Init:
 14656                           	opt stack 0
 14657                           tosu	equ	0xFFF
 14658                           tosh	equ	0xFFE
 14659                           tosl	equ	0xFFD
 14660                           pclath	equ	0xFFA
 14661                           tblptru	equ	0xFF8
 14662                           tblptrh	equ	0xFF7
 14663                           tblptrl	equ	0xFF6
 14664                           tablat	equ	0xFF5
 14665                           prodh	equ	0xFF4
 14666                           prodl	equ	0xFF3
 14667                           intcon	equ	0xFF2
 14668                           postinc0	equ	0xFEE
 14669                           wreg	equ	0xFE8
 14670                           indf1	equ	0xFE7
 14671                           postdec1	equ	0xFE5
 14672                           fsr1h	equ	0xFE2
 14673                           fsr1l	equ	0xFE1
 14674                           indf2	equ	0xFDF
 14675                           postinc2	equ	0xFDE
 14676                           postdec2	equ	0xFDD
 14677                           plusw2	equ	0xFDB
 14678                           fsr2h	equ	0xFDA
 14679                           fsr2l	equ	0xFD9
 14680                           status	equ	0xFD8
 14681                           
 14682 ;; *************** function _Set_Rotation *****************
 14683 ;; Defined at:
 14684 ;;		line 248 in file "Library/LCD.c"
 14685 ;; Parameters:    Size  Location     Type
 14686 ;;  m               1    wreg     unsigned char 
 14687 ;; Auto vars:     Size  Location     Type
 14688 ;;  m               1    5[BANK0 ] unsigned char 
 14689 ;;  rotation        1    6[BANK0 ] unsigned char 
 14690 ;; Return value:  Size  Location     Type
 14691 ;;                  1    wreg      void 
 14692 ;; Registers used:
 14693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14694 ;; Tracked objects:
 14695 ;;		On entry : 0/0
 14696 ;;		On exit  : 0/0
 14697 ;;		Unchanged: 0/0
 14698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;Total ram usage:        2 bytes
 14704 ;; Hardware stack levels used:    1
 14705 ;; Hardware stack levels required when called:    9
 14706 ;; This function calls:
 14707 ;;		_LCD_Write
 14708 ;; This function is called by:
 14709 ;;		_LCD_Init
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           	psect	text81
 14714  012FF0                     __ptext81:
 14715                           	opt stack 0
 14716  012FF0                     _Set_Rotation:
 14717                           	opt stack 19
 14718                           
 14719                           ;incstack = 0
 14720                           ;Set_Rotation@m stored from wreg
 14721  012FF0  0100               	movlb	0	; () banked
 14722  012FF2  6FC9               	movwf	Set_Rotation@m& (0+255),b
 14723                           
 14724                           ;LCD.c: 250: UINT8 rotation = 0x00;
 14725  012FF4  0E00               	movlw	0
 14726  012FF6  0100               	movlb	0	; () banked
 14727  012FF8  6FCA               	movwf	Set_Rotation@rotation& (0+255),b
 14728                           
 14729                           ; BSR set to: 0
 14730                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 14731  012FFA  0E00               	movlw	0
 14732  012FFC  0100               	movlb	0	; () banked
 14733  012FFE  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14734  013000  0E36               	movlw	54
 14735  013002  ECBE  F0A1         	call	_LCD_Write
 14736                           
 14737                           ;LCD.c: 253: rotation = (m % 4);
 14738  013006  0100               	movlb	0	; () banked
 14739  013008  51C9               	movf	Set_Rotation@m& (0+255),w,b
 14740  01300A  0B03               	andlw	3
 14741  01300C  0100               	movlb	0	; () banked
 14742  01300E  6FCA               	movwf	Set_Rotation@rotation& (0+255),b
 14743                           
 14744                           ;LCD.c: 255: switch(rotation)
 14745  013010  D02C               	goto	l11480
 14746  013012                     l11454:
 14747                           
 14748                           ; BSR set to: 0
 14749                           ;LCD.c: 258: {
 14750                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 14751  013012  0E01               	movlw	1
 14752  013014  0100               	movlb	0	; () banked
 14753  013016  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14754  013018  0EC8               	movlw	200
 14755  01301A  ECBE  F0A1         	call	_LCD_Write
 14756                           
 14757                           ;LCD.c: 260: w = 128;
 14758  01301E  0E80               	movlw	128
 14759  013020  6E48               	movwf	_w,c
 14760                           
 14761                           ;LCD.c: 261: l = 128;
 14762  013022  0E80               	movlw	128
 14763  013024  6E47               	movwf	_l,c
 14764                           
 14765                           ;LCD.c: 262: break;
 14766  013026  0012               	return	
 14767  013028                     l11460:
 14768                           
 14769                           ;LCD.c: 265: {
 14770                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 14771  013028  0E01               	movlw	1
 14772  01302A  0100               	movlb	0	; () banked
 14773  01302C  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14774  01302E  0EA8               	movlw	168
 14775  013030  ECBE  F0A1         	call	_LCD_Write
 14776                           
 14777                           ;LCD.c: 267: w = 128;
 14778  013034  0E80               	movlw	128
 14779  013036  6E48               	movwf	_w,c
 14780                           
 14781                           ;LCD.c: 268: l = 128;
 14782  013038  0E80               	movlw	128
 14783  01303A  6E47               	movwf	_l,c
 14784                           
 14785                           ;LCD.c: 269: break;
 14786  01303C  0012               	return	
 14787  01303E                     l11466:
 14788                           
 14789                           ;LCD.c: 272: {
 14790                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 14791  01303E  0E01               	movlw	1
 14792  013040  0100               	movlb	0	; () banked
 14793  013042  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14794  013044  0E08               	movlw	8
 14795  013046  ECBE  F0A1         	call	_LCD_Write
 14796                           
 14797                           ;LCD.c: 274: w = 128;
 14798  01304A  0E80               	movlw	128
 14799  01304C  6E48               	movwf	_w,c
 14800                           
 14801                           ;LCD.c: 275: l = 128;
 14802  01304E  0E80               	movlw	128
 14803  013050  6E47               	movwf	_l,c
 14804                           
 14805                           ;LCD.c: 276: break;
 14806  013052  0012               	return	
 14807  013054                     l11472:
 14808                           
 14809                           ;LCD.c: 279: {
 14810                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 14811  013054  0E01               	movlw	1
 14812  013056  0100               	movlb	0	; () banked
 14813  013058  6FC7               	movwf	LCD_Write@mode& (0+255),b
 14814  01305A  0E68               	movlw	104
 14815  01305C  ECBE  F0A1         	call	_LCD_Write
 14816                           
 14817                           ;LCD.c: 281: w = 128;
 14818  013060  0E80               	movlw	128
 14819  013062  6E48               	movwf	_w,c
 14820                           
 14821                           ;LCD.c: 282: l = 128;
 14822  013064  0E80               	movlw	128
 14823  013066  6E47               	movwf	_l,c
 14824                           
 14825                           ;LCD.c: 284: }
 14826                           ;LCD.c: 285: }
 14827                           
 14828                           ;LCD.c: 283: break;
 14829  013068  0012               	return	
 14830  01306A                     l11480:
 14831  01306A  0100               	movlb	0	; () banked
 14832  01306C  51CA               	movf	Set_Rotation@rotation& (0+255),w,b
 14833                           
 14834                           ; Switch size 1, requested type "space"
 14835                           ; Number of cases is 4, Range of values is 0 to 3
 14836                           ; switch strategies available:
 14837                           ; Name         Instructions Cycles
 14838                           ; simple_byte           13     7 (average)
 14839                           ;	Chosen strategy is simple_byte
 14840  01306E  0A00               	xorlw	0	; case 0
 14841  013070  B4D8               	btfsc	status,2,c
 14842  013072  D7CF               	goto	l11454
 14843  013074  0A01               	xorlw	1	; case 1
 14844  013076  B4D8               	btfsc	status,2,c
 14845  013078  D7D7               	goto	l11460
 14846  01307A  0A03               	xorlw	3	; case 2
 14847  01307C  B4D8               	btfsc	status,2,c
 14848  01307E  D7DF               	goto	l11466
 14849  013080  0A01               	xorlw	1	; case 3
 14850  013082  A4D8               	btfss	status,2,c
 14851  013084  0012               	return	
 14852  013086  D7E6               	goto	l11472
 14853  013088                     __end_of_Set_Rotation:
 14854                           	opt stack 0
 14855                           tosu	equ	0xFFF
 14856                           tosh	equ	0xFFE
 14857                           tosl	equ	0xFFD
 14858                           pclath	equ	0xFFA
 14859                           tblptru	equ	0xFF8
 14860                           tblptrh	equ	0xFF7
 14861                           tblptrl	equ	0xFF6
 14862                           tablat	equ	0xFF5
 14863                           prodh	equ	0xFF4
 14864                           prodl	equ	0xFF3
 14865                           intcon	equ	0xFF2
 14866                           postinc0	equ	0xFEE
 14867                           wreg	equ	0xFE8
 14868                           indf1	equ	0xFE7
 14869                           postdec1	equ	0xFE5
 14870                           fsr1h	equ	0xFE2
 14871                           fsr1l	equ	0xFE1
 14872                           indf2	equ	0xFDF
 14873                           postinc2	equ	0xFDE
 14874                           postdec2	equ	0xFDD
 14875                           plusw2	equ	0xFDB
 14876                           fsr2h	equ	0xFDA
 14877                           fsr2l	equ	0xFD9
 14878                           status	equ	0xFD8
 14879                           
 14880 ;; *************** function _LCD_Fill *****************
 14881 ;; Defined at:
 14882 ;;		line 287 in file "Library/LCD.c"
 14883 ;; Parameters:    Size  Location     Type
 14884 ;;  pColour         2    9[BANK0 ] unsigned short 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  j               1   12[BANK0 ] unsigned char 
 14887 ;;  i               1   11[BANK0 ] unsigned char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  1    wreg      void 
 14890 ;; Registers used:
 14891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14897 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14901 ;;Total ram usage:        4 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:   10
 14904 ;; This function calls:
 14905 ;;		_LCD_Word_Write
 14906 ;;		_Set_Addr_Window
 14907 ;; This function is called by:
 14908 ;;		_LCD_Init
 14909 ;; This function uses a non-reentrant model
 14910 ;;
 14911                           
 14912                           	psect	text82
 14913  013AD6                     __ptext82:
 14914                           	opt stack 0
 14915  013AD6                     _LCD_Fill:
 14916                           	opt stack 18
 14917                           
 14918                           ;LCD.c: 296: UINT8 i = 0x00;
 14919                           
 14920                           ;incstack = 0
 14921  013AD6  0E00               	movlw	0
 14922  013AD8  0100               	movlb	0	; () banked
 14923  013ADA  6FCF               	movwf	LCD_Fill@i& (0+255),b
 14924                           
 14925                           ;LCD.c: 297: UINT8 j = 0x00;
 14926  013ADC  0E00               	movlw	0
 14927  013ADE  0100               	movlb	0	; () banked
 14928  013AE0  6FD0               	movwf	LCD_Fill@j& (0+255),b
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 14932  013AE2  0E00               	movlw	0
 14933  013AE4  0100               	movlb	0	; () banked
 14934  013AE6  6FC9               	movwf	Set_Addr_Window@ys& (0+255),b
 14935  013AE8  0448               	decf	_w,w,c
 14936  013AEA  0100               	movlb	0	; () banked
 14937  013AEC  6FCA               	movwf	Set_Addr_Window@xe& (0+255),b
 14938  013AEE  0447               	decf	_l,w,c
 14939  013AF0  0100               	movlb	0	; () banked
 14940  013AF2  6FCB               	movwf	Set_Addr_Window@ye& (0+255),b
 14941  013AF4  0E00               	movlw	0
 14942  013AF6  EC15  F095         	call	_Set_Addr_Window
 14943                           
 14944                           ;LCD.c: 299: for (j = l; j > 0; j--)
 14945  013AFA  C047  F0D0         	movff	_l,LCD_Fill@j
 14946  013AFE                     l11488:
 14947  013AFE  0100               	movlb	0	; () banked
 14948  013B00  51D0               	movf	LCD_Fill@j& (0+255),w,b
 14949  013B02  0100               	movlb	0	; () banked
 14950  013B04  B4D8               	btfsc	status,2,c
 14951  013B06  0012               	return	
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;LCD.c: 300: for (i = w; i > 0; i--)
 14955                           
 14956                           ; BSR set to: 0
 14957  013B08  C048  F0CF         	movff	_w,LCD_Fill@i
 14958  013B0C                     l11492:
 14959                           
 14960                           ; BSR set to: 0
 14961  013B0C  0100               	movlb	0	; () banked
 14962  013B0E  51CF               	movf	LCD_Fill@i& (0+255),w,b
 14963  013B10  0100               	movlb	0	; () banked
 14964  013B12  B4D8               	btfsc	status,2,c
 14965  013B14  D009               	goto	l11502
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;LCD.c: 301: LCD_Word_Write(pColour);
 14969                           
 14970                           ; BSR set to: 0
 14971                           
 14972                           ; BSR set to: 0
 14973  013B16  C0CD  F0C9         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 14974  013B1A  C0CE  F0CA         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 14975  013B1E  EC01  F0A2         	call	_LCD_Word_Write	;wreg free
 14976  013B22  0100               	movlb	0	; () banked
 14977  013B24  07CF               	decf	LCD_Fill@i& (0+255),f,b
 14978  013B26  D7F2               	goto	l11492
 14979  013B28                     l11502:
 14980                           
 14981                           ; BSR set to: 0
 14982  013B28  0100               	movlb	0	; () banked
 14983  013B2A  07D0               	decf	LCD_Fill@j& (0+255),f,b
 14984  013B2C  D7E8               	goto	l11488
 14985  013B2E                     __end_of_LCD_Fill:
 14986                           	opt stack 0
 14987                           tosu	equ	0xFFF
 14988                           tosh	equ	0xFFE
 14989                           tosl	equ	0xFFD
 14990                           pclath	equ	0xFFA
 14991                           tblptru	equ	0xFF8
 14992                           tblptrh	equ	0xFF7
 14993                           tblptrl	equ	0xFF6
 14994                           tablat	equ	0xFF5
 14995                           prodh	equ	0xFF4
 14996                           prodl	equ	0xFF3
 14997                           intcon	equ	0xFF2
 14998                           postinc0	equ	0xFEE
 14999                           wreg	equ	0xFE8
 15000                           indf1	equ	0xFE7
 15001                           postdec1	equ	0xFE5
 15002                           fsr1h	equ	0xFE2
 15003                           fsr1l	equ	0xFE1
 15004                           indf2	equ	0xFDF
 15005                           postinc2	equ	0xFDE
 15006                           postdec2	equ	0xFDD
 15007                           plusw2	equ	0xFDB
 15008                           fsr2h	equ	0xFDA
 15009                           fsr2l	equ	0xFD9
 15010                           status	equ	0xFD8
 15011                           
 15012 ;; *************** function _Set_Addr_Window *****************
 15013 ;; Defined at:
 15014 ;;		line 214 in file "Library/LCD.c"
 15015 ;; Parameters:    Size  Location     Type
 15016 ;;  xs              1    wreg     unsigned char 
 15017 ;;  ys              1    5[BANK0 ] unsigned char 
 15018 ;;  xe              1    6[BANK0 ] unsigned char 
 15019 ;;  ye              1    7[BANK0 ] unsigned char 
 15020 ;; Auto vars:     Size  Location     Type
 15021 ;;  xs              1    8[BANK0 ] unsigned char 
 15022 ;; Return value:  Size  Location     Type
 15023 ;;                  1    wreg      void 
 15024 ;; Registers used:
 15025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15026 ;; Tracked objects:
 15027 ;;		On entry : 0/0
 15028 ;;		On exit  : 0/0
 15029 ;;		Unchanged: 0/0
 15030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15031 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;Total ram usage:        4 bytes
 15036 ;; Hardware stack levels used:    1
 15037 ;; Hardware stack levels required when called:    9
 15038 ;; This function calls:
 15039 ;;		_LCD_Write
 15040 ;; This function is called by:
 15041 ;;		_LCD_Fill
 15042 ;;		_LCD_FillRectangle
 15043 ;;		_LCD_DrawField
 15044 ;;		_RAM_Address_Set
 15045 ;;		_LCD_DrawPixel
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           	psect	text83
 15050  012A2A                     __ptext83:
 15051                           	opt stack 0
 15052  012A2A                     _Set_Addr_Window:
 15053                           	opt stack 16
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;incstack = 0
 15057                           ;Set_Addr_Window@xs stored from wreg
 15058  012A2A  0100               	movlb	0	; () banked
 15059  012A2C  6FCC               	movwf	Set_Addr_Window@xs& (0+255),b
 15060                           
 15061                           ;LCD.c: 216: ys+=2;
 15062  012A2E  0E02               	movlw	2
 15063  012A30  0100               	movlb	0	; () banked
 15064  012A32  27C9               	addwf	Set_Addr_Window@ys& (0+255),f,b
 15065                           
 15066                           ;LCD.c: 217: ye+=2;
 15067  012A34  0E02               	movlw	2
 15068  012A36  0100               	movlb	0	; () banked
 15069  012A38  27CB               	addwf	Set_Addr_Window@ye& (0+255),f,b
 15070                           
 15071                           ;LCD.c: 218: xs+=3;
 15072  012A3A  0E03               	movlw	3
 15073  012A3C  0100               	movlb	0	; () banked
 15074  012A3E  27CC               	addwf	Set_Addr_Window@xs& (0+255),f,b
 15075                           
 15076                           ;LCD.c: 219: xe+=3;
 15077  012A40  0E03               	movlw	3
 15078  012A42  0100               	movlb	0	; () banked
 15079  012A44  27CA               	addwf	Set_Addr_Window@xe& (0+255),f,b
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 15083  012A46  0E00               	movlw	0
 15084  012A48  0100               	movlb	0	; () banked
 15085  012A4A  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15086  012A4C  0E2A               	movlw	42
 15087  012A4E  ECBE  F0A1         	call	_LCD_Write
 15088                           
 15089                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 15090  012A52  0E01               	movlw	1
 15091  012A54  0100               	movlb	0	; () banked
 15092  012A56  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15093  012A58  0E00               	movlw	0
 15094  012A5A  ECBE  F0A1         	call	_LCD_Write
 15095                           
 15096                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 15097  012A5E  0E01               	movlw	1
 15098  012A60  0100               	movlb	0	; () banked
 15099  012A62  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15100  012A64  0100               	movlb	0	; () banked
 15101  012A66  51CC               	movf	Set_Addr_Window@xs& (0+255),w,b
 15102  012A68  ECBE  F0A1         	call	_LCD_Write
 15103                           
 15104                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 15105  012A6C  0E01               	movlw	1
 15106  012A6E  0100               	movlb	0	; () banked
 15107  012A70  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15108  012A72  0E00               	movlw	0
 15109  012A74  ECBE  F0A1         	call	_LCD_Write
 15110                           
 15111                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 15112  012A78  0E01               	movlw	1
 15113  012A7A  0100               	movlb	0	; () banked
 15114  012A7C  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15115  012A7E  0100               	movlb	0	; () banked
 15116  012A80  51CA               	movf	Set_Addr_Window@xe& (0+255),w,b
 15117  012A82  ECBE  F0A1         	call	_LCD_Write
 15118                           
 15119                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 15120  012A86  0E00               	movlw	0
 15121  012A88  0100               	movlb	0	; () banked
 15122  012A8A  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15123  012A8C  0E2B               	movlw	43
 15124  012A8E  ECBE  F0A1         	call	_LCD_Write
 15125                           
 15126                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 15127  012A92  0E01               	movlw	1
 15128  012A94  0100               	movlb	0	; () banked
 15129  012A96  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15130  012A98  0E00               	movlw	0
 15131  012A9A  ECBE  F0A1         	call	_LCD_Write
 15132                           
 15133                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 15134  012A9E  0E01               	movlw	1
 15135  012AA0  0100               	movlb	0	; () banked
 15136  012AA2  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15137  012AA4  0100               	movlb	0	; () banked
 15138  012AA6  51C9               	movf	Set_Addr_Window@ys& (0+255),w,b
 15139  012AA8  ECBE  F0A1         	call	_LCD_Write
 15140                           
 15141                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 15142  012AAC  0E01               	movlw	1
 15143  012AAE  0100               	movlb	0	; () banked
 15144  012AB0  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15145  012AB2  0E00               	movlw	0
 15146  012AB4  ECBE  F0A1         	call	_LCD_Write
 15147                           
 15148                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 15149  012AB8  0E01               	movlw	1
 15150  012ABA  0100               	movlb	0	; () banked
 15151  012ABC  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15152  012ABE  0100               	movlb	0	; () banked
 15153  012AC0  51CB               	movf	Set_Addr_Window@ye& (0+255),w,b
 15154  012AC2  ECBE  F0A1         	call	_LCD_Write
 15155                           
 15156                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 15157  012AC6  0E00               	movlw	0
 15158  012AC8  0100               	movlb	0	; () banked
 15159  012ACA  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15160  012ACC  0E2C               	movlw	44
 15161  012ACE  ECBE  F0A1         	call	_LCD_Write
 15162  012AD2  0012               	return		;funcret
 15163  012AD4                     __end_of_Set_Addr_Window:
 15164                           	opt stack 0
 15165                           tosu	equ	0xFFF
 15166                           tosh	equ	0xFFE
 15167                           tosl	equ	0xFFD
 15168                           pclath	equ	0xFFA
 15169                           tblptru	equ	0xFF8
 15170                           tblptrh	equ	0xFF7
 15171                           tblptrl	equ	0xFF6
 15172                           tablat	equ	0xFF5
 15173                           prodh	equ	0xFF4
 15174                           prodl	equ	0xFF3
 15175                           intcon	equ	0xFF2
 15176                           postinc0	equ	0xFEE
 15177                           wreg	equ	0xFE8
 15178                           indf1	equ	0xFE7
 15179                           postdec1	equ	0xFE5
 15180                           fsr1h	equ	0xFE2
 15181                           fsr1l	equ	0xFE1
 15182                           indf2	equ	0xFDF
 15183                           postinc2	equ	0xFDE
 15184                           postdec2	equ	0xFDD
 15185                           plusw2	equ	0xFDB
 15186                           fsr2h	equ	0xFDA
 15187                           fsr2l	equ	0xFD9
 15188                           status	equ	0xFD8
 15189                           
 15190 ;; *************** function _LCD_Word_Write *****************
 15191 ;; Defined at:
 15192 ;;		line 198 in file "Library/LCD.c"
 15193 ;; Parameters:    Size  Location     Type
 15194 ;;  value           2    5[BANK0 ] unsigned short 
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;		None
 15197 ;; Return value:  Size  Location     Type
 15198 ;;                  1    wreg      void 
 15199 ;; Registers used:
 15200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15210 ;;Total ram usage:        2 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; Hardware stack levels required when called:    9
 15213 ;; This function calls:
 15214 ;;		_LCD_Write
 15215 ;; This function is called by:
 15216 ;;		_LCD_Fill
 15217 ;;		_LCD_FillRectangle
 15218 ;;		_LCD_DrawField
 15219 ;;		_LCD_DrawPixel
 15220 ;; This function uses a non-reentrant model
 15221 ;;
 15222                           
 15223                           	psect	text84
 15224  014402                     __ptext84:
 15225                           	opt stack 0
 15226  014402                     _LCD_Word_Write:
 15227                           	opt stack 16
 15228                           
 15229                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 15230                           
 15231                           ;incstack = 0
 15232  014402  0E01               	movlw	1
 15233  014404  0100               	movlb	0	; () banked
 15234  014406  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15235  014408  0100               	movlb	0	; () banked
 15236  01440A  51CA               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 15237  01440C  ECBE  F0A1         	call	_LCD_Write
 15238                           
 15239                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 15240  014410  0E01               	movlw	1
 15241  014412  0100               	movlb	0	; () banked
 15242  014414  6FC7               	movwf	LCD_Write@mode& (0+255),b
 15243  014416  0100               	movlb	0	; () banked
 15244  014418  51C9               	movf	LCD_Word_Write@value& (0+255),w,b
 15245  01441A  ECBE  F0A1         	call	_LCD_Write
 15246  01441E  0012               	return		;funcret
 15247  014420                     __end_of_LCD_Word_Write:
 15248                           	opt stack 0
 15249                           tosu	equ	0xFFF
 15250                           tosh	equ	0xFFE
 15251                           tosl	equ	0xFFD
 15252                           pclath	equ	0xFFA
 15253                           tblptru	equ	0xFF8
 15254                           tblptrh	equ	0xFF7
 15255                           tblptrl	equ	0xFF6
 15256                           tablat	equ	0xFF5
 15257                           prodh	equ	0xFF4
 15258                           prodl	equ	0xFF3
 15259                           intcon	equ	0xFF2
 15260                           postinc0	equ	0xFEE
 15261                           wreg	equ	0xFE8
 15262                           indf1	equ	0xFE7
 15263                           postdec1	equ	0xFE5
 15264                           fsr1h	equ	0xFE2
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           plusw2	equ	0xFDB
 15270                           fsr2h	equ	0xFDA
 15271                           fsr2l	equ	0xFD9
 15272                           status	equ	0xFD8
 15273                           
 15274 ;; *************** function _LCD_Write *****************
 15275 ;; Defined at:
 15276 ;;		line 67 in file "Library/LCD.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;  value           1    wreg     unsigned char 
 15279 ;;  mode            1    3[BANK0 ] enum E6761
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;  value           1    4[BANK0 ] unsigned char 
 15282 ;; Return value:  Size  Location     Type
 15283 ;;                  1    wreg      void 
 15284 ;; Registers used:
 15285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15291 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15295 ;;Total ram usage:        2 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:    8
 15298 ;; This function calls:
 15299 ;;		_Mode_Set
 15300 ;;		_SPI_Send
 15301 ;; This function is called by:
 15302 ;;		_LCD_Init
 15303 ;;		_LCD_Word_Write
 15304 ;;		_Set_Addr_Window
 15305 ;;		_Set_Rotation
 15306 ;;		_LCD_WriteCMD
 15307 ;;		_LCD_WriteData
 15308 ;;		_LCD_Data_Write
 15309 ;;		_LCD_Data_Write_4k
 15310 ;;		_Invert_Display
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           	psect	text85
 15315  01437C                     __ptext85:
 15316                           	opt stack 0
 15317  01437C                     _LCD_Write:
 15318                           	opt stack 16
 15319                           
 15320                           ;incstack = 0
 15321                           ;LCD_Write@value stored from wreg
 15322  01437C  0100               	movlb	0	; () banked
 15323  01437E  6FC8               	movwf	LCD_Write@value& (0+255),b
 15324                           
 15325                           ;LCD.c: 89: Mode_Set(mode);
 15326  014380  0100               	movlb	0	; () banked
 15327  014382  51C7               	movf	LCD_Write@mode& (0+255),w,b
 15328  014384  EC00  F0A3         	call	_Mode_Set
 15329                           
 15330                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 15331  014388  0EB5               	movlw	low _SPI2
 15332  01438A  0100               	movlb	0	; () banked
 15333  01438C  6FC4               	movwf	SPI_Send@pInput& (0+255),b
 15334  01438E  0E01               	movlw	high _SPI2
 15335  014390  0100               	movlb	0	; () banked
 15336  014392  6FC5               	movwf	(SPI_Send@pInput+1)& (0+255),b
 15337  014394  C0C8  F0C6         	movff	LCD_Write@value,SPI_Send@pData
 15338  014398  ECAC  F09B         	call	_SPI_Send	;wreg free
 15339  01439C  0012               	return		;funcret
 15340  01439E                     __end_of_LCD_Write:
 15341                           	opt stack 0
 15342                           tosu	equ	0xFFF
 15343                           tosh	equ	0xFFE
 15344                           tosl	equ	0xFFD
 15345                           pclath	equ	0xFFA
 15346                           tblptru	equ	0xFF8
 15347                           tblptrh	equ	0xFF7
 15348                           tblptrl	equ	0xFF6
 15349                           tablat	equ	0xFF5
 15350                           prodh	equ	0xFF4
 15351                           prodl	equ	0xFF3
 15352                           intcon	equ	0xFF2
 15353                           postinc0	equ	0xFEE
 15354                           wreg	equ	0xFE8
 15355                           indf1	equ	0xFE7
 15356                           postdec1	equ	0xFE5
 15357                           fsr1h	equ	0xFE2
 15358                           fsr1l	equ	0xFE1
 15359                           indf2	equ	0xFDF
 15360                           postinc2	equ	0xFDE
 15361                           postdec2	equ	0xFDD
 15362                           plusw2	equ	0xFDB
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function _SPI_Send *****************
 15368 ;; Defined at:
 15369 ;;		line 226 in file "Library/SPI.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15372 ;;		 -> SPI1(11), SPI2(11), 
 15373 ;;  pData           1    2[BANK0 ] unsigned char 
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;		None
 15376 ;; Return value:  Size  Location     Type
 15377 ;;                  1    wreg      unsigned char 
 15378 ;; Registers used:
 15379 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15380 ;; Tracked objects:
 15381 ;;		On entry : 0/0
 15382 ;;		On exit  : 0/0
 15383 ;;		Unchanged: 0/0
 15384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15385 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15388 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15389 ;;Total ram usage:        3 bytes
 15390 ;; Hardware stack levels used:    1
 15391 ;; Hardware stack levels required when called:    7
 15392 ;; This function calls:
 15393 ;;		Nothing
 15394 ;; This function is called by:
 15395 ;;		_LCD_Write
 15396 ;;		_OutSeg
 15397 ;; This function uses a non-reentrant model
 15398 ;;
 15399                           
 15400                           	psect	text86
 15401  013758                     __ptext86:
 15402                           	opt stack 0
 15403  013758                     _SPI_Send:
 15404                           	opt stack 16
 15405                           
 15406                           ;SPI.c: 253: switch (pInput->mChannel)
 15407                           
 15408                           ;incstack = 0
 15409  013758  D026               	goto	l10352
 15410  01375A                     l10334:
 15411                           
 15412                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 15413  01375A  C096  FFD9         	movff	_PortC+4,fsr2l
 15414  01375E  C097  FFDA         	movff	_PortC+5,fsr2h
 15415  013762  0100               	movlb	0	; () banked
 15416  013764  94DF               	bcf	indf2,2,c
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;SPI.c: 257: SSP1BUF = pData;
 15420  013766  C0C6  FFC9         	movff	SPI_Send@pData,4041	;volatile
 15421  01376A                     l680:
 15422  01376A  A0C7               	btfss	4039,0,c	;volatile
 15423  01376C  D7FE               	goto	l680
 15424                           
 15425                           ;SPI.c: 259: pData = SSP1BUF;
 15426  01376E  CFC9 F0C6          	movff	4041,SPI_Send@pData	;volatile
 15427                           
 15428                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 15429  013772  C096  FFD9         	movff	_PortC+4,fsr2l
 15430  013776  C097  FFDA         	movff	_PortC+5,fsr2h
 15431  01377A  0100               	movlb	0	; () banked
 15432  01377C  84DF               	bsf	indf2,2,c
 15433                           
 15434                           ; BSR set to: 0
 15435                           ;SPI.c: 261: return pData;
 15436                           ;	Return value of _SPI_Send is never used
 15437  01377E  0012               	return	
 15438  013780                     l10342:
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 15442  013780  C08C  FFD9         	movff	_PortD+4,fsr2l
 15443  013784  C08D  FFDA         	movff	_PortD+5,fsr2h
 15444  013788  0100               	movlb	0	; () banked
 15445  01378A  9EDF               	bcf	indf2,7,c
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;SPI.c: 264: SSP2BUF = pData;
 15449  01378C  C0C6  FF6F         	movff	SPI_Send@pData,3951	;volatile
 15450  013790                     l685:
 15451  013790  A06D               	btfss	3949,0,c	;volatile
 15452  013792  D7FE               	goto	l685
 15453                           
 15454                           ;SPI.c: 266: pData = SSP2BUF;
 15455  013794  CF6F F0C6          	movff	3951,SPI_Send@pData	;volatile
 15456                           
 15457                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 15458  013798  C08C  FFD9         	movff	_PortD+4,fsr2l
 15459  01379C  C08D  FFDA         	movff	_PortD+5,fsr2h
 15460  0137A0  0100               	movlb	0	; () banked
 15461  0137A2  8EDF               	bsf	indf2,7,c
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;SPI.c: 269: };
 15465                           
 15466                           ; BSR set to: 0
 15467                           ;SPI.c: 268: return pData;
 15468                           ;	Return value of _SPI_Send is never used
 15469  0137A4  0012               	return	
 15470  0137A6                     l10352:
 15471  0137A6  0100               	movlb	0	; () banked
 15472  0137A8  EE20 F002          	lfsr	2,2
 15473  0137AC  51C4               	movf	SPI_Send@pInput& (0+255),w,b
 15474  0137AE  26D9               	addwf	fsr2l,f,c
 15475  0137B0  51C5               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 15476  0137B2  22DA               	addwfc	fsr2h,f,c
 15477  0137B4  50DF               	movf	indf2,w,c
 15478                           
 15479                           ; Switch size 1, requested type "space"
 15480                           ; Number of cases is 2, Range of values is 0 to 1
 15481                           ; switch strategies available:
 15482                           ; Name         Instructions Cycles
 15483                           ; simple_byte            7     4 (average)
 15484                           ;	Chosen strategy is simple_byte
 15485  0137B6  0A00               	xorlw	0	; case 0
 15486  0137B8  B4D8               	btfsc	status,2,c
 15487  0137BA  D7CF               	goto	l10334
 15488  0137BC  0A01               	xorlw	1	; case 1
 15489  0137BE  A4D8               	btfss	status,2,c
 15490  0137C0  0012               	return	
 15491  0137C2  D7DE               	goto	l10342
 15492  0137C4                     __end_of_SPI_Send:
 15493                           	opt stack 0
 15494                           tosu	equ	0xFFF
 15495                           tosh	equ	0xFFE
 15496                           tosl	equ	0xFFD
 15497                           pclath	equ	0xFFA
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           postinc0	equ	0xFEE
 15506                           wreg	equ	0xFE8
 15507                           indf1	equ	0xFE7
 15508                           postdec1	equ	0xFE5
 15509                           fsr1h	equ	0xFE2
 15510                           fsr1l	equ	0xFE1
 15511                           indf2	equ	0xFDF
 15512                           postinc2	equ	0xFDE
 15513                           postdec2	equ	0xFDD
 15514                           plusw2	equ	0xFDB
 15515                           fsr2h	equ	0xFDA
 15516                           fsr2l	equ	0xFD9
 15517                           status	equ	0xFD8
 15518                           
 15519 ;; *************** function _Mode_Set *****************
 15520 ;; Defined at:
 15521 ;;		line 40 in file "Library/LCD.c"
 15522 ;; Parameters:    Size  Location     Type
 15523 ;;  pMode           1    wreg     enum E6761
 15524 ;; Auto vars:     Size  Location     Type
 15525 ;;  pMode           1    0[BANK0 ] enum E6761
 15526 ;; Return value:  Size  Location     Type
 15527 ;;                  1    wreg      void 
 15528 ;; Registers used:
 15529 ;;		wreg
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15539 ;;Total ram usage:        1 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    7
 15542 ;; This function calls:
 15543 ;;		Nothing
 15544 ;; This function is called by:
 15545 ;;		_LCD_Write
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           	psect	text87
 15550  014600                     __ptext87:
 15551                           	opt stack 0
 15552  014600                     _Mode_Set:
 15553                           	opt stack 16
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;incstack = 0
 15557                           ;Mode_Set@pMode stored from wreg
 15558  014600  0100               	movlb	0	; () banked
 15559  014602  6FC4               	movwf	Mode_Set@pMode& (0+255),b
 15560                           
 15561                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 15562  014604  0100               	movlb	0	; () banked
 15563  014606  B1C4               	btfsc	Mode_Set@pMode& (0+255),0,b
 15564  014608  D002               	bra	u6785
 15565  01460A  9E85               	bcf	3973,7,c	;volatile
 15566  01460C  D001               	bra	u6786
 15567  01460E                     u6785:
 15568  01460E  8E85               	bsf	3973,7,c	;volatile
 15569  014610                     u6786:
 15570  014610  0012               	return		;funcret
 15571  014612                     __end_of_Mode_Set:
 15572                           	opt stack 0
 15573                           tosu	equ	0xFFF
 15574                           tosh	equ	0xFFE
 15575                           tosl	equ	0xFFD
 15576                           pclath	equ	0xFFA
 15577                           tblptru	equ	0xFF8
 15578                           tblptrh	equ	0xFF7
 15579                           tblptrl	equ	0xFF6
 15580                           tablat	equ	0xFF5
 15581                           prodh	equ	0xFF4
 15582                           prodl	equ	0xFF3
 15583                           intcon	equ	0xFF2
 15584                           postinc0	equ	0xFEE
 15585                           wreg	equ	0xFE8
 15586                           indf1	equ	0xFE7
 15587                           postdec1	equ	0xFE5
 15588                           fsr1h	equ	0xFE2
 15589                           fsr1l	equ	0xFE1
 15590                           indf2	equ	0xFDF
 15591                           postinc2	equ	0xFDE
 15592                           postdec2	equ	0xFDD
 15593                           plusw2	equ	0xFDB
 15594                           fsr2h	equ	0xFDA
 15595                           fsr2l	equ	0xFD9
 15596                           status	equ	0xFD8
 15597                           
 15598 ;; *************** function _Configure_GPIOs *****************
 15599 ;; Defined at:
 15600 ;;		line 46 in file "Library/LCD.c"
 15601 ;; Parameters:    Size  Location     Type
 15602 ;;		None
 15603 ;; Auto vars:     Size  Location     Type
 15604 ;;		None
 15605 ;; Return value:  Size  Location     Type
 15606 ;;                  1    wreg      void 
 15607 ;; Registers used:
 15608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15609 ;; Tracked objects:
 15610 ;;		On entry : 0/0
 15611 ;;		On exit  : 0/0
 15612 ;;		Unchanged: 0/0
 15613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15618 ;;Total ram usage:        0 bytes
 15619 ;; Hardware stack levels used:    1
 15620 ;; Hardware stack levels required when called:   14
 15621 ;; This function calls:
 15622 ;;		_LCD_Reset
 15623 ;;		_Port_SetPinType
 15624 ;;		_SPI_Init
 15625 ;;		_SPI_MaxSpeed
 15626 ;; This function is called by:
 15627 ;;		_LCD_Init
 15628 ;; This function uses a non-reentrant model
 15629 ;;
 15630                           
 15631                           	psect	text88
 15632  01367C                     __ptext88:
 15633                           	opt stack 0
 15634  01367C                     _Configure_GPIOs:
 15635                           	opt stack 14
 15636                           
 15637                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 15638                           
 15639                           ;incstack = 0
 15640  01367C  0E9C               	movlw	low _PortF
 15641  01367E  0100               	movlb	0	; () banked
 15642  013680  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 15643  013682  0E00               	movlw	high _PortF
 15644  013684  0100               	movlb	0	; () banked
 15645  013686  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15646  013688  0E07               	movlw	7
 15647  01368A  0100               	movlb	0	; () banked
 15648  01368C  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 15649  01368E  0E03               	movlw	3
 15650  013690  0100               	movlb	0	; () banked
 15651  013692  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 15652  013694  EC84  F08A         	call	_Port_SetPinType	;wreg free
 15653                           
 15654                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 15655  013698  0E9C               	movlw	low _PortF
 15656  01369A  0100               	movlb	0	; () banked
 15657  01369C  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 15658  01369E  0E00               	movlw	high _PortF
 15659  0136A0  0100               	movlb	0	; () banked
 15660  0136A2  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15661  0136A4  0E06               	movlw	6
 15662  0136A6  0100               	movlb	0	; () banked
 15663  0136A8  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 15664  0136AA  0E03               	movlw	3
 15665  0136AC  0100               	movlb	0	; () banked
 15666  0136AE  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 15667  0136B0  EC84  F08A         	call	_Port_SetPinType	;wreg free
 15668                           
 15669                           ;LCD.c: 55: LCD_Reset();
 15670  0136B4  EC10  F09E         	call	_LCD_Reset	;wreg free
 15671                           
 15672                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 15673  0136B8  0EC0               	movlw	192
 15674  0136BA  0100               	movlb	0	; () banked
 15675  0136BC  6FF1               	movwf	SPI_Init@pClock& (0+255),b
 15676  0136BE  0EC6               	movlw	198
 15677  0136C0  6FF2               	movwf	(SPI_Init@pClock+1)& (0+255),b
 15678  0136C2  0E2D               	movlw	45
 15679  0136C4  6FF3               	movwf	(SPI_Init@pClock+2)& (0+255),b
 15680  0136C6  0E00               	movlw	0
 15681  0136C8  6FF4               	movwf	(SPI_Init@pClock+3)& (0+255),b
 15682  0136CA  0E01               	movlw	1
 15683  0136CC  0100               	movlb	0	; () banked
 15684  0136CE  6FF5               	movwf	SPI_Init@pChannel& (0+255),b
 15685  0136D0  0E01               	movlw	1
 15686  0136D2  0100               	movlb	0	; () banked
 15687  0136D4  6FF6               	movwf	SPI_Init@pMode& (0+255),b
 15688  0136D6  EC00  F080         	call	_SPI_Init	;wreg free
 15689                           
 15690                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 15691  0136DA  0EB5               	movlw	low _SPI2
 15692  0136DC  0100               	movlb	0	; () banked
 15693  0136DE  6FD3               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 15694  0136E0  0E01               	movlw	high _SPI2
 15695  0136E2  0100               	movlb	0	; () banked
 15696  0136E4  6FD4               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 15697  0136E6  EC91  F09A         	call	_SPI_MaxSpeed	;wreg free
 15698  0136EA  0012               	return		;funcret
 15699  0136EC                     __end_of_Configure_GPIOs:
 15700                           	opt stack 0
 15701                           tosu	equ	0xFFF
 15702                           tosh	equ	0xFFE
 15703                           tosl	equ	0xFFD
 15704                           pclath	equ	0xFFA
 15705                           tblptru	equ	0xFF8
 15706                           tblptrh	equ	0xFF7
 15707                           tblptrl	equ	0xFF6
 15708                           tablat	equ	0xFF5
 15709                           prodh	equ	0xFF4
 15710                           prodl	equ	0xFF3
 15711                           intcon	equ	0xFF2
 15712                           postinc0	equ	0xFEE
 15713                           wreg	equ	0xFE8
 15714                           indf1	equ	0xFE7
 15715                           postdec1	equ	0xFE5
 15716                           fsr1h	equ	0xFE2
 15717                           fsr1l	equ	0xFE1
 15718                           indf2	equ	0xFDF
 15719                           postinc2	equ	0xFDE
 15720                           postdec2	equ	0xFDD
 15721                           plusw2	equ	0xFDB
 15722                           fsr2h	equ	0xFDA
 15723                           fsr2l	equ	0xFD9
 15724                           status	equ	0xFD8
 15725                           
 15726 ;; *************** function _SPI_MaxSpeed *****************
 15727 ;; Defined at:
 15728 ;;		line 201 in file "Library/SPI.c"
 15729 ;; Parameters:    Size  Location     Type
 15730 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15731 ;;		 -> SPI2(11), 
 15732 ;; Auto vars:     Size  Location     Type
 15733 ;;		None
 15734 ;; Return value:  Size  Location     Type
 15735 ;;                  1    wreg      void 
 15736 ;; Registers used:
 15737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : 0/0
 15740 ;;		On exit  : 0/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15743 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15747 ;;Total ram usage:        2 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:    9
 15750 ;; This function calls:
 15751 ;;		_Byte_SetBit
 15752 ;;		_Byte_SetQuad
 15753 ;; This function is called by:
 15754 ;;		_Configure_GPIOs
 15755 ;; This function uses a non-reentrant model
 15756 ;;
 15757                           
 15758                           	psect	text89
 15759  013522                     __ptext89:
 15760                           	opt stack 0
 15761  013522                     _SPI_MaxSpeed:
 15762                           	opt stack 18
 15763                           
 15764                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15765                           
 15766                           ;incstack = 0
 15767  013522  0100               	movlb	0	; () banked
 15768  013524  EE20 F006          	lfsr	2,6
 15769  013528  51D3               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 15770  01352A  26D9               	addwf	fsr2l,f,c
 15771  01352C  51D4               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 15772  01352E  22DA               	addwfc	fsr2h,f,c
 15773  013530  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 15774  013534  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 15775  013538  0E05               	movlw	5
 15776  01353A  0100               	movlb	0	; () banked
 15777  01353C  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 15778  01353E  0E00               	movlw	0
 15779  013540  0100               	movlb	0	; () banked
 15780  013542  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 15781  013544  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 15782                           
 15783                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 15784  013548  0100               	movlb	0	; () banked
 15785  01354A  EE20 F006          	lfsr	2,6
 15786  01354E  51D3               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 15787  013550  26D9               	addwf	fsr2l,f,c
 15788  013552  51D4               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 15789  013554  22DA               	addwfc	fsr2h,f,c
 15790  013556  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 15791  01355A  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 15792  01355E  0E00               	movlw	0
 15793  013560  0100               	movlb	0	; () banked
 15794  013562  6FD1               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15795  013564  0E00               	movlw	0
 15796  013566  0100               	movlb	0	; () banked
 15797  013568  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 15798  01356A  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 15799                           
 15800                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15801  01356E  0100               	movlb	0	; () banked
 15802  013570  EE20 F006          	lfsr	2,6
 15803  013574  51D3               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 15804  013576  26D9               	addwf	fsr2l,f,c
 15805  013578  51D4               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 15806  01357A  22DA               	addwfc	fsr2h,f,c
 15807  01357C  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 15808  013580  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 15809  013584  0E05               	movlw	5
 15810  013586  0100               	movlb	0	; () banked
 15811  013588  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 15812  01358A  0E01               	movlw	1
 15813  01358C  0100               	movlb	0	; () banked
 15814  01358E  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 15815  013590  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 15816  013594  0012               	return		;funcret
 15817  013596                     __end_of_SPI_MaxSpeed:
 15818                           	opt stack 0
 15819                           tosu	equ	0xFFF
 15820                           tosh	equ	0xFFE
 15821                           tosl	equ	0xFFD
 15822                           pclath	equ	0xFFA
 15823                           tblptru	equ	0xFF8
 15824                           tblptrh	equ	0xFF7
 15825                           tblptrl	equ	0xFF6
 15826                           tablat	equ	0xFF5
 15827                           prodh	equ	0xFF4
 15828                           prodl	equ	0xFF3
 15829                           intcon	equ	0xFF2
 15830                           postinc0	equ	0xFEE
 15831                           wreg	equ	0xFE8
 15832                           indf1	equ	0xFE7
 15833                           postdec1	equ	0xFE5
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           plusw2	equ	0xFDB
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function _LCD_Reset *****************
 15845 ;; Defined at:
 15846 ;;		line 95 in file "Library/LCD.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;		None
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;		None
 15851 ;; Return value:  Size  Location     Type
 15852 ;;                  1    wreg      void 
 15853 ;; Registers used:
 15854 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15855 ;; Tracked objects:
 15856 ;;		On entry : 0/0
 15857 ;;		On exit  : 0/0
 15858 ;;		Unchanged: 0/0
 15859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;Total ram usage:        0 bytes
 15865 ;; Hardware stack levels used:    1
 15866 ;; Hardware stack levels required when called:   13
 15867 ;; This function calls:
 15868 ;;		_LED_Toggle
 15869 ;;		_Reset_High
 15870 ;;		_Reset_Low
 15871 ;;		_delay_ms
 15872 ;; This function is called by:
 15873 ;;		_Configure_GPIOs
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text90
 15878  013C20                     __ptext90:
 15879                           	opt stack 0
 15880  013C20                     _LCD_Reset:
 15881                           	opt stack 14
 15882                           
 15883                           ;LCD.c: 97: Reset_High();
 15884                           
 15885                           ;incstack = 0
 15886  013C20  EC1F  F0A2         	call	_Reset_High	;wreg free
 15887                           
 15888                           ;LCD.c: 98: LED_Toggle(eLED2);
 15889  013C24  0E01               	movlw	1
 15890  013C26  ECCE  F09E         	call	_LED_Toggle
 15891                           
 15892                           ;LCD.c: 99: delay_ms(0x80);
 15893  013C2A  0E00               	movlw	0
 15894  013C2C  0100               	movlb	0	; () banked
 15895  013C2E  6FC5               	movwf	(delay_ms@ms+1)& (0+255),b
 15896  013C30  0E80               	movlw	128
 15897  013C32  6FC4               	movwf	delay_ms@ms& (0+255),b
 15898  013C34  ECE2  F09B         	call	_delay_ms	;wreg free
 15899                           
 15900                           ;LCD.c: 100: LED_Toggle(eLED2);
 15901  013C38  0E01               	movlw	1
 15902  013C3A  ECCE  F09E         	call	_LED_Toggle
 15903                           
 15904                           ;LCD.c: 101: Reset_Low();
 15905  013C3E  EC10  F0A2         	call	_Reset_Low	;wreg free
 15906                           
 15907                           ;LCD.c: 102: delay_ms(0x80);
 15908  013C42  0E00               	movlw	0
 15909  013C44  0100               	movlb	0	; () banked
 15910  013C46  6FC5               	movwf	(delay_ms@ms+1)& (0+255),b
 15911  013C48  0E80               	movlw	128
 15912  013C4A  6FC4               	movwf	delay_ms@ms& (0+255),b
 15913  013C4C  ECE2  F09B         	call	_delay_ms	;wreg free
 15914                           
 15915                           ;LCD.c: 103: LED_Toggle(eLED2);
 15916  013C50  0E01               	movlw	1
 15917  013C52  ECCE  F09E         	call	_LED_Toggle
 15918                           
 15919                           ;LCD.c: 104: Reset_High();
 15920  013C56  EC1F  F0A2         	call	_Reset_High	;wreg free
 15921                           
 15922                           ;LCD.c: 105: delay_ms(0x80);
 15923  013C5A  0E00               	movlw	0
 15924  013C5C  0100               	movlb	0	; () banked
 15925  013C5E  6FC5               	movwf	(delay_ms@ms+1)& (0+255),b
 15926  013C60  0E80               	movlw	128
 15927  013C62  6FC4               	movwf	delay_ms@ms& (0+255),b
 15928  013C64  ECE2  F09B         	call	_delay_ms	;wreg free
 15929                           
 15930                           ;LCD.c: 106: LED_Toggle(eLED2);
 15931  013C68  0E01               	movlw	1
 15932  013C6A  ECCE  F09E         	call	_LED_Toggle
 15933  013C6E  0012               	return		;funcret
 15934  013C70                     __end_of_LCD_Reset:
 15935                           	opt stack 0
 15936                           tosu	equ	0xFFF
 15937                           tosh	equ	0xFFE
 15938                           tosl	equ	0xFFD
 15939                           pclath	equ	0xFFA
 15940                           tblptru	equ	0xFF8
 15941                           tblptrh	equ	0xFF7
 15942                           tblptrl	equ	0xFF6
 15943                           tablat	equ	0xFF5
 15944                           prodh	equ	0xFF4
 15945                           prodl	equ	0xFF3
 15946                           intcon	equ	0xFF2
 15947                           postinc0	equ	0xFEE
 15948                           wreg	equ	0xFE8
 15949                           indf1	equ	0xFE7
 15950                           postdec1	equ	0xFE5
 15951                           fsr1h	equ	0xFE2
 15952                           fsr1l	equ	0xFE1
 15953                           indf2	equ	0xFDF
 15954                           postinc2	equ	0xFDE
 15955                           postdec2	equ	0xFDD
 15956                           plusw2	equ	0xFDB
 15957                           fsr2h	equ	0xFDA
 15958                           fsr2l	equ	0xFD9
 15959                           status	equ	0xFD8
 15960                           
 15961 ;; *************** function _delay_ms *****************
 15962 ;; Defined at:
 15963 ;;		line 240 in file "Library/Types.c"
 15964 ;; Parameters:    Size  Location     Type
 15965 ;;  ms              2    0[BANK0 ] unsigned short 
 15966 ;; Auto vars:     Size  Location     Type
 15967 ;;  u               4    2[BANK0 ] volatile unsigned long 
 15968 ;; Return value:  Size  Location     Type
 15969 ;;                  1    wreg      void 
 15970 ;; Registers used:
 15971 ;;		wreg, status,2, status,0
 15972 ;; Tracked objects:
 15973 ;;		On entry : 0/0
 15974 ;;		On exit  : 0/0
 15975 ;;		Unchanged: 0/0
 15976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15978 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15981 ;;Total ram usage:        6 bytes
 15982 ;; Hardware stack levels used:    1
 15983 ;; Hardware stack levels required when called:    7
 15984 ;; This function calls:
 15985 ;;		Nothing
 15986 ;; This function is called by:
 15987 ;;		_LCD_Reset
 15988 ;;		_LCD_Init
 15989 ;;		_MXK_Init
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           	psect	text91
 15994  0137C4                     __ptext91:
 15995                           	opt stack 0
 15996  0137C4                     _delay_ms:
 15997                           	opt stack 21
 15998                           
 15999                           ;Types.c: 242: volatile unsigned long u;
 16000                           ;Types.c: 243: while (ms--)
 16001                           
 16002                           ;incstack = 0
 16003  0137C4  D01F               	goto	l10768
 16004  0137C6                     l10760:
 16005                           
 16006                           ;Types.c: 244: {
 16007                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 16008  0137C6  0E00               	movlw	0
 16009  0137C8  0100               	movlb	0	; () banked
 16010  0137CA  6FC6               	movwf	delay_ms@u& (0+255),b	;volatile
 16011  0137CC  0E00               	movlw	0
 16012  0137CE  6FC7               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 16013  0137D0  0E00               	movlw	0
 16014  0137D2  6FC8               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 16015  0137D4  0E00               	movlw	0
 16016  0137D6  6FC9               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 16017  0137D8                     l10762:
 16018                           
 16019                           ; BSR set to: 0
 16020  0137D8  0100               	movlb	0	; () banked
 16021  0137DA  51C9               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 16022  0137DC  0100               	movlb	0	; () banked
 16023  0137DE  11C8               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 16024  0137E0  E111               	bnz	l10768
 16025  0137E2  0EB0               	movlw	176
 16026  0137E4  0100               	movlb	0	; () banked
 16027  0137E6  5DC6               	subwf	delay_ms@u& (0+255),w,b	;volatile
 16028  0137E8  0E04               	movlw	4
 16029  0137EA  0100               	movlb	0	; () banked
 16030  0137EC  59C7               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 16031  0137EE  B0D8               	btfsc	status,0,c
 16032  0137F0  D009               	goto	l10768
 16033                           
 16034                           ; BSR set to: 0
 16035                           
 16036                           ; BSR set to: 0
 16037  0137F2  F000               	nop		; ;# 
 16038  0137F4  0E01               	movlw	1
 16039  0137F6  0100               	movlb	0	; () banked
 16040  0137F8  27C6               	addwf	delay_ms@u& (0+255),f,b	;volatile
 16041  0137FA  0E00               	movlw	0
 16042  0137FC  23C7               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 16043  0137FE  23C8               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 16044  013800  23C9               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 16045  013802  D7EA               	goto	l10762
 16046  013804                     l10768:
 16047  013804  0100               	movlb	0	; () banked
 16048  013806  07C4               	decf	delay_ms@ms& (0+255),f,b
 16049  013808  A0D8               	btfss	status,0,c
 16050  01380A  07C5               	decf	(delay_ms@ms+1)& (0+255),f,b
 16051  01380C  0100               	movlb	0	; () banked
 16052  01380E  29C4               	incf	delay_ms@ms& (0+255),w,b
 16053  013810  E1DA               	bnz	l10760
 16054  013812  0100               	movlb	0	; () banked
 16055  013814  29C5               	incf	(delay_ms@ms+1)& (0+255),w,b
 16056  013816  A4D8               	btfss	status,2,c
 16057  013818  D7D6               	goto	l10760
 16058                           
 16059                           ; BSR set to: 0
 16060                           ;Types.c: 251: }
 16061                           ;Types.c: 252: }
 16062                           ;Types.c: 253: u = 0x8008;
 16063                           
 16064                           ; BSR set to: 0
 16065  01381A  0E08               	movlw	8
 16066  01381C  0100               	movlb	0	; () banked
 16067  01381E  6FC6               	movwf	delay_ms@u& (0+255),b	;volatile
 16068  013820  0E80               	movlw	128
 16069  013822  6FC7               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 16070  013824  0E00               	movlw	0
 16071  013826  6FC8               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 16072  013828  0E00               	movlw	0
 16073  01382A  6FC9               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 16074                           
 16075                           ; BSR set to: 0
 16076  01382C  0012               	return		;funcret
 16077  01382E                     __end_of_delay_ms:
 16078                           	opt stack 0
 16079                           tosu	equ	0xFFF
 16080                           tosh	equ	0xFFE
 16081                           tosl	equ	0xFFD
 16082                           pclath	equ	0xFFA
 16083                           tblptru	equ	0xFF8
 16084                           tblptrh	equ	0xFF7
 16085                           tblptrl	equ	0xFF6
 16086                           tablat	equ	0xFF5
 16087                           prodh	equ	0xFF4
 16088                           prodl	equ	0xFF3
 16089                           intcon	equ	0xFF2
 16090                           postinc0	equ	0xFEE
 16091                           wreg	equ	0xFE8
 16092                           indf1	equ	0xFE7
 16093                           postdec1	equ	0xFE5
 16094                           fsr1h	equ	0xFE2
 16095                           fsr1l	equ	0xFE1
 16096                           indf2	equ	0xFDF
 16097                           postinc2	equ	0xFDE
 16098                           postdec2	equ	0xFDD
 16099                           plusw2	equ	0xFDB
 16100                           fsr2h	equ	0xFDA
 16101                           fsr2l	equ	0xFD9
 16102                           status	equ	0xFD8
 16103                           
 16104 ;; *************** function _Reset_Low *****************
 16105 ;; Defined at:
 16106 ;;		line 32 in file "Library/LCD.c"
 16107 ;; Parameters:    Size  Location     Type
 16108 ;;		None
 16109 ;; Auto vars:     Size  Location     Type
 16110 ;;		None
 16111 ;; Return value:  Size  Location     Type
 16112 ;;                  1    wreg      void 
 16113 ;; Registers used:
 16114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16115 ;; Tracked objects:
 16116 ;;		On entry : 0/0
 16117 ;;		On exit  : 0/0
 16118 ;;		Unchanged: 0/0
 16119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16124 ;;Total ram usage:        0 bytes
 16125 ;; Hardware stack levels used:    1
 16126 ;; Hardware stack levels required when called:   11
 16127 ;; This function calls:
 16128 ;;		_Port_SetPin
 16129 ;; This function is called by:
 16130 ;;		_LCD_Reset
 16131 ;; This function uses a non-reentrant model
 16132 ;;
 16133                           
 16134                           	psect	text92
 16135  014420                     __ptext92:
 16136                           	opt stack 0
 16137  014420                     _Reset_Low:
 16138                           	opt stack 15
 16139                           
 16140                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 16141                           
 16142                           ; BSR set to: 0
 16143                           ;incstack = 0
 16144  014420  0E9C               	movlw	low _PortF
 16145  014422  0100               	movlb	0	; () banked
 16146  014424  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 16147  014426  0E00               	movlw	high _PortF
 16148  014428  0100               	movlb	0	; () banked
 16149  01442A  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16150  01442C  0E06               	movlw	6
 16151  01442E  0100               	movlb	0	; () banked
 16152  014430  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 16153  014432  0E01               	movlw	1
 16154  014434  0100               	movlb	0	; () banked
 16155  014436  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 16156  014438  ECDD  F092         	call	_Port_SetPin	;wreg free
 16157  01443C  0012               	return		;funcret
 16158  01443E                     __end_of_Reset_Low:
 16159                           	opt stack 0
 16160                           tosu	equ	0xFFF
 16161                           tosh	equ	0xFFE
 16162                           tosl	equ	0xFFD
 16163                           pclath	equ	0xFFA
 16164                           tblptru	equ	0xFF8
 16165                           tblptrh	equ	0xFF7
 16166                           tblptrl	equ	0xFF6
 16167                           tablat	equ	0xFF5
 16168                           prodh	equ	0xFF4
 16169                           prodl	equ	0xFF3
 16170                           intcon	equ	0xFF2
 16171                           postinc0	equ	0xFEE
 16172                           wreg	equ	0xFE8
 16173                           indf1	equ	0xFE7
 16174                           postdec1	equ	0xFE5
 16175                           fsr1h	equ	0xFE2
 16176                           fsr1l	equ	0xFE1
 16177                           indf2	equ	0xFDF
 16178                           postinc2	equ	0xFDE
 16179                           postdec2	equ	0xFDD
 16180                           plusw2	equ	0xFDB
 16181                           fsr2h	equ	0xFDA
 16182                           fsr2l	equ	0xFD9
 16183                           status	equ	0xFD8
 16184                           
 16185 ;; *************** function _Reset_High *****************
 16186 ;; Defined at:
 16187 ;;		line 36 in file "Library/LCD.c"
 16188 ;; Parameters:    Size  Location     Type
 16189 ;;		None
 16190 ;; Auto vars:     Size  Location     Type
 16191 ;;		None
 16192 ;; Return value:  Size  Location     Type
 16193 ;;                  1    wreg      void 
 16194 ;; Registers used:
 16195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16196 ;; Tracked objects:
 16197 ;;		On entry : 0/0
 16198 ;;		On exit  : 0/0
 16199 ;;		Unchanged: 0/0
 16200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16205 ;;Total ram usage:        0 bytes
 16206 ;; Hardware stack levels used:    1
 16207 ;; Hardware stack levels required when called:   11
 16208 ;; This function calls:
 16209 ;;		_Port_SetPin
 16210 ;; This function is called by:
 16211 ;;		_LCD_Reset
 16212 ;; This function uses a non-reentrant model
 16213 ;;
 16214                           
 16215                           	psect	text93
 16216  01443E                     __ptext93:
 16217                           	opt stack 0
 16218  01443E                     _Reset_High:
 16219                           	opt stack 15
 16220                           
 16221                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 16222                           
 16223                           ;incstack = 0
 16224  01443E  0E9C               	movlw	low _PortF
 16225  014440  0100               	movlb	0	; () banked
 16226  014442  6FD3               	movwf	Port_SetPin@pInput& (0+255),b
 16227  014444  0E00               	movlw	high _PortF
 16228  014446  0100               	movlb	0	; () banked
 16229  014448  6FD4               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16230  01444A  0E06               	movlw	6
 16231  01444C  0100               	movlb	0	; () banked
 16232  01444E  6FD5               	movwf	Port_SetPin@pPin& (0+255),b
 16233  014450  0E00               	movlw	0
 16234  014452  0100               	movlb	0	; () banked
 16235  014454  6FD6               	movwf	Port_SetPin@pValue& (0+255),b
 16236  014456  ECDD  F092         	call	_Port_SetPin	;wreg free
 16237  01445A  0012               	return		;funcret
 16238  01445C                     __end_of_Reset_High:
 16239                           	opt stack 0
 16240                           tosu	equ	0xFFF
 16241                           tosh	equ	0xFFE
 16242                           tosl	equ	0xFFD
 16243                           pclath	equ	0xFFA
 16244                           tblptru	equ	0xFF8
 16245                           tblptrh	equ	0xFF7
 16246                           tblptrl	equ	0xFF6
 16247                           tablat	equ	0xFF5
 16248                           prodh	equ	0xFF4
 16249                           prodl	equ	0xFF3
 16250                           intcon	equ	0xFF2
 16251                           postinc0	equ	0xFEE
 16252                           wreg	equ	0xFE8
 16253                           indf1	equ	0xFE7
 16254                           postdec1	equ	0xFE5
 16255                           fsr1h	equ	0xFE2
 16256                           fsr1l	equ	0xFE1
 16257                           indf2	equ	0xFDF
 16258                           postinc2	equ	0xFDE
 16259                           postdec2	equ	0xFDD
 16260                           plusw2	equ	0xFDB
 16261                           fsr2h	equ	0xFDA
 16262                           fsr2l	equ	0xFD9
 16263                           status	equ	0xFD8
 16264                           
 16265 ;; *************** function _LED_Toggle *****************
 16266 ;; Defined at:
 16267 ;;		line 50 in file "Library/LED.c"
 16268 ;; Parameters:    Size  Location     Type
 16269 ;;  pLED            1    wreg     enum E6739
 16270 ;; Auto vars:     Size  Location     Type
 16271 ;;  pLED            1   24[BANK0 ] enum E6739
 16272 ;; Return value:  Size  Location     Type
 16273 ;;                  1    wreg      void 
 16274 ;; Registers used:
 16275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16276 ;; Tracked objects:
 16277 ;;		On entry : 0/0
 16278 ;;		On exit  : 0/0
 16279 ;;		Unchanged: 0/0
 16280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16285 ;;Total ram usage:        1 bytes
 16286 ;; Hardware stack levels used:    1
 16287 ;; Hardware stack levels required when called:   12
 16288 ;; This function calls:
 16289 ;;		_Port_TogglePin
 16290 ;; This function is called by:
 16291 ;;		_LCD_Reset
 16292 ;;		_Event_DIPSwitch
 16293 ;;		_Event_HMI_DIPSwitch
 16294 ;;		_Event_TestButton
 16295 ;;		_Event_HMI_LeftButton
 16296 ;;		_Event_HMI_RightButton
 16297 ;;		_Event_HMI_UpButton
 16298 ;;		_Event_HMI_DownButton
 16299 ;;		_Event_ADCSequenceComplete
 16300 ;; This function uses a non-reentrant model
 16301 ;;
 16302                           
 16303                           	psect	text94
 16304  013D9C                     __ptext94:
 16305                           	opt stack 0
 16306  013D9C                     _LED_Toggle:
 16307                           	opt stack 10
 16308                           
 16309                           ;incstack = 0
 16310                           ;LED_Toggle@pLED stored from wreg
 16311  013D9C  0100               	movlb	0	; () banked
 16312  013D9E  6FDC               	movwf	LED_Toggle@pLED& (0+255),b
 16313                           
 16314                           ;LED.c: 52: switch (pLED)
 16315  013DA0  D018               	goto	l10220
 16316  013DA2                     l10214:
 16317                           
 16318                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 16319  013DA2  0E92               	movlw	low _PortC
 16320  013DA4  0100               	movlb	0	; () banked
 16321  013DA6  6FD8               	movwf	Port_TogglePin@pInput& (0+255),b
 16322  013DA8  0E00               	movlw	high _PortC
 16323  013DAA  0100               	movlb	0	; () banked
 16324  013DAC  6FD9               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 16325  013DAE  0E00               	movlw	0
 16326  013DB0  0100               	movlb	0	; () banked
 16327  013DB2  6FDA               	movwf	Port_TogglePin@pPin& (0+255),b
 16328  013DB4  ECCB  F0A0         	call	_Port_TogglePin	;wreg free
 16329                           
 16330                           ;LED.c: 56: break;
 16331  013DB8  0012               	return	
 16332  013DBA                     l10216:
 16333                           
 16334                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 16335  013DBA  0E92               	movlw	low _PortC
 16336  013DBC  0100               	movlb	0	; () banked
 16337  013DBE  6FD8               	movwf	Port_TogglePin@pInput& (0+255),b
 16338  013DC0  0E00               	movlw	high _PortC
 16339  013DC2  0100               	movlb	0	; () banked
 16340  013DC4  6FD9               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 16341  013DC6  0E01               	movlw	1
 16342  013DC8  0100               	movlb	0	; () banked
 16343  013DCA  6FDA               	movwf	Port_TogglePin@pPin& (0+255),b
 16344  013DCC  ECCB  F0A0         	call	_Port_TogglePin	;wreg free
 16345                           
 16346                           ;LED.c: 60: }
 16347                           
 16348                           ;LED.c: 59: break;
 16349  013DD0  0012               	return	
 16350  013DD2                     l10220:
 16351  013DD2  0100               	movlb	0	; () banked
 16352  013DD4  51DC               	movf	LED_Toggle@pLED& (0+255),w,b
 16353                           
 16354                           ; Switch size 1, requested type "space"
 16355                           ; Number of cases is 2, Range of values is 0 to 1
 16356                           ; switch strategies available:
 16357                           ; Name         Instructions Cycles
 16358                           ; simple_byte            7     4 (average)
 16359                           ;	Chosen strategy is simple_byte
 16360  013DD6  0A00               	xorlw	0	; case 0
 16361  013DD8  B4D8               	btfsc	status,2,c
 16362  013DDA  D7E3               	goto	l10214
 16363  013DDC  0A01               	xorlw	1	; case 1
 16364  013DDE  A4D8               	btfss	status,2,c
 16365  013DE0  0012               	return	
 16366  013DE2  D7EB               	goto	l10216
 16367  013DE4                     __end_of_LED_Toggle:
 16368                           	opt stack 0
 16369                           tosu	equ	0xFFF
 16370                           tosh	equ	0xFFE
 16371                           tosl	equ	0xFFD
 16372                           pclath	equ	0xFFA
 16373                           tblptru	equ	0xFF8
 16374                           tblptrh	equ	0xFF7
 16375                           tblptrl	equ	0xFF6
 16376                           tablat	equ	0xFF5
 16377                           prodh	equ	0xFF4
 16378                           prodl	equ	0xFF3
 16379                           intcon	equ	0xFF2
 16380                           postinc0	equ	0xFEE
 16381                           wreg	equ	0xFE8
 16382                           indf1	equ	0xFE7
 16383                           postdec1	equ	0xFE5
 16384                           fsr1h	equ	0xFE2
 16385                           fsr1l	equ	0xFE1
 16386                           indf2	equ	0xFDF
 16387                           postinc2	equ	0xFDE
 16388                           postdec2	equ	0xFDD
 16389                           plusw2	equ	0xFDB
 16390                           fsr2h	equ	0xFDA
 16391                           fsr2l	equ	0xFD9
 16392                           status	equ	0xFD8
 16393                           
 16394 ;; *************** function _Port_TogglePin *****************
 16395 ;; Defined at:
 16396 ;;		line 278 in file "Library/Port.c"
 16397 ;; Parameters:    Size  Location     Type
 16398 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 16399 ;;		 -> PortC(10), 
 16400 ;;  pPin            1   22[BANK0 ] enum E6750
 16401 ;; Auto vars:     Size  Location     Type
 16402 ;;  Value           1   23[BANK0 ] unsigned char 
 16403 ;; Return value:  Size  Location     Type
 16404 ;;                  1    wreg      void 
 16405 ;; Registers used:
 16406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16407 ;; Tracked objects:
 16408 ;;		On entry : 0/0
 16409 ;;		On exit  : 0/0
 16410 ;;		Unchanged: 0/0
 16411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16412 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;Total ram usage:        4 bytes
 16417 ;; Hardware stack levels used:    1
 16418 ;; Hardware stack levels required when called:   11
 16419 ;; This function calls:
 16420 ;;		_Port_GetPin
 16421 ;;		_Port_SetPin
 16422 ;; This function is called by:
 16423 ;;		_LED_Toggle
 16424 ;; This function uses a non-reentrant model
 16425 ;;
 16426                           
 16427                           	psect	text95
 16428  014196                     __ptext95:
 16429                           	opt stack 0
 16430  014196                     _Port_TogglePin:
 16431                           	opt stack 10
 16432                           
 16433                           ;Port.c: 280: UINT8 Value;
 16434                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 16435                           
 16436                           ;incstack = 0
 16437  014196  C0D8  F0C4         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 16438  01419A  C0D9  F0C5         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 16439  01419E  C0DA  F0C6         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 16440  0141A2  ECF2  F09E         	call	_Port_GetPin	;wreg free
 16441  0141A6  0100               	movlb	0	; () banked
 16442  0141A8  6FDB               	movwf	Port_TogglePin@Value& (0+255),b
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;Port.c: 282: Value ^= 0x01;
 16446  0141AA  0E01               	movlw	1
 16447  0141AC  0100               	movlb	0	; () banked
 16448  0141AE  1BDB               	xorwf	Port_TogglePin@Value& (0+255),f,b
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 16452  0141B0  C0D8  F0D3         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 16453  0141B4  C0D9  F0D4         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 16454  0141B8  C0DA  F0D5         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 16455  0141BC  C0DB  F0D6         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 16456  0141C0  ECDD  F092         	call	_Port_SetPin	;wreg free
 16457  0141C4  0012               	return		;funcret
 16458  0141C6                     __end_of_Port_TogglePin:
 16459                           	opt stack 0
 16460                           tosu	equ	0xFFF
 16461                           tosh	equ	0xFFE
 16462                           tosl	equ	0xFFD
 16463                           pclath	equ	0xFFA
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           postinc0	equ	0xFEE
 16472                           wreg	equ	0xFE8
 16473                           indf1	equ	0xFE7
 16474                           postdec1	equ	0xFE5
 16475                           fsr1h	equ	0xFE2
 16476                           fsr1l	equ	0xFE1
 16477                           indf2	equ	0xFDF
 16478                           postinc2	equ	0xFDE
 16479                           postdec2	equ	0xFDD
 16480                           plusw2	equ	0xFDB
 16481                           fsr2h	equ	0xFDA
 16482                           fsr2l	equ	0xFD9
 16483                           status	equ	0xFD8
 16484                           
 16485 ;; *************** function _Port_SetPin *****************
 16486 ;; Defined at:
 16487 ;;		line 247 in file "Library/Port.c"
 16488 ;; Parameters:    Size  Location     Type
 16489 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16490 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 16491 ;;  pPin            1   17[BANK0 ] enum E6750
 16492 ;;  pValue          1   18[BANK0 ] unsigned char 
 16493 ;; Auto vars:     Size  Location     Type
 16494 ;;  Type            1   19[BANK0 ] enum E6795
 16495 ;; Return value:  Size  Location     Type
 16496 ;;                  1    wreg      void 
 16497 ;; Registers used:
 16498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16499 ;; Tracked objects:
 16500 ;;		On entry : 0/0
 16501 ;;		On exit  : 0/0
 16502 ;;		Unchanged: 0/0
 16503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16507 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16508 ;;Total ram usage:        5 bytes
 16509 ;; Hardware stack levels used:    1
 16510 ;; Hardware stack levels required when called:   10
 16511 ;; This function calls:
 16512 ;;		_Byte_SetBit
 16513 ;;		_Word_GetPair
 16514 ;; This function is called by:
 16515 ;;		_Reset_Low
 16516 ;;		_Reset_High
 16517 ;;		_LED_Set
 16518 ;;		_Port_TogglePin
 16519 ;;		_Motor_Step
 16520 ;;		_MXK_Init
 16521 ;;		_Motor_Init
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           	psect	text96
 16526  0125BA                     __ptext96:
 16527                           	opt stack 0
 16528  0125BA                     _Port_SetPin:
 16529                           	opt stack 10
 16530                           
 16531                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 16532                           
 16533                           ;incstack = 0
 16534  0125BA  0E08               	movlw	8
 16535  0125BC  0100               	movlb	0	; () banked
 16536  0125BE  25D3               	addwf	Port_SetPin@pInput& (0+255),w,b
 16537  0125C0  0100               	movlb	0	; () banked
 16538  0125C2  6FD0               	movwf	Word_GetPair@pInput& (0+255),b
 16539  0125C4  0E00               	movlw	0
 16540  0125C6  0100               	movlb	0	; () banked
 16541  0125C8  21D4               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 16542  0125CA  0100               	movlb	0	; () banked
 16543  0125CC  6FD1               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16544  0125CE  C0D5  F0D2         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 16545  0125D2  ECBA  F09F         	call	_Word_GetPair	;wreg free
 16546  0125D6  0100               	movlb	0	; () banked
 16547  0125D8  6FD7               	movwf	Port_SetPin@Type& (0+255),b
 16548                           
 16549                           ;Port.c: 250: switch (Type)
 16550  0125DA  D042               	goto	l9782
 16551  0125DC                     l9768:
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;Port.c: 256: pValue &= 1;
 16555  0125DC  0E01               	movlw	1
 16556  0125DE  0100               	movlb	0	; () banked
 16557  0125E0  17D6               	andwf	Port_SetPin@pValue& (0+255),f,b
 16558                           
 16559                           ; BSR set to: 0
 16560                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16561  0125E2  0100               	movlb	0	; () banked
 16562  0125E4  EE20 F002          	lfsr	2,2
 16563  0125E8  51D3               	movf	Port_SetPin@pInput& (0+255),w,b
 16564  0125EA  26D9               	addwf	fsr2l,f,c
 16565  0125EC  51D4               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16566  0125EE  22DA               	addwfc	fsr2h,f,c
 16567  0125F0  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 16568  0125F4  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 16569  0125F8  C0D5  F0C6         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16570  0125FC  C0D6  F0C7         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16571  012600  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 16572                           
 16573                           ;Port.c: 258: break;
 16574  012604  0012               	return	
 16575  012606                     l9772:
 16576                           
 16577                           ;Port.c: 261: pValue &= 1;
 16578  012606  0E01               	movlw	1
 16579  012608  0100               	movlb	0	; () banked
 16580  01260A  17D6               	andwf	Port_SetPin@pValue& (0+255),f,b
 16581                           
 16582                           ;Port.c: 262: pValue ^= 1;
 16583  01260C  0E01               	movlw	1
 16584  01260E  0100               	movlb	0	; () banked
 16585  012610  1BD6               	xorwf	Port_SetPin@pValue& (0+255),f,b
 16586                           
 16587                           ; BSR set to: 0
 16588                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16589  012612  0100               	movlb	0	; () banked
 16590  012614  EE20 F002          	lfsr	2,2
 16591  012618  51D3               	movf	Port_SetPin@pInput& (0+255),w,b
 16592  01261A  26D9               	addwf	fsr2l,f,c
 16593  01261C  51D4               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16594  01261E  22DA               	addwfc	fsr2h,f,c
 16595  012620  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 16596  012624  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 16597  012628  C0D5  F0C6         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16598  01262C  C0D6  F0C7         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16599  012630  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 16600                           
 16601                           ;Port.c: 264: break;
 16602  012634  0012               	return	
 16603  012636                     l9776:
 16604                           
 16605                           ;Port.c: 266: pValue &= 1;
 16606  012636  0E01               	movlw	1
 16607  012638  0100               	movlb	0	; () banked
 16608  01263A  17D6               	andwf	Port_SetPin@pValue& (0+255),f,b
 16609                           
 16610                           ; BSR set to: 0
 16611                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 16612  01263C  0100               	movlb	0	; () banked
 16613  01263E  EE20 F004          	lfsr	2,4
 16614  012642  51D3               	movf	Port_SetPin@pInput& (0+255),w,b
 16615  012644  26D9               	addwf	fsr2l,f,c
 16616  012646  51D4               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16617  012648  22DA               	addwfc	fsr2h,f,c
 16618  01264A  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 16619  01264E  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 16620  012652  C0D5  F0C6         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16621  012656  C0D6  F0C7         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16622  01265A  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 16623                           
 16624                           ;Port.c: 269: }
 16625                           
 16626                           ;Port.c: 268: break;
 16627  01265E  0012               	return	
 16628  012660                     l9782:
 16629  012660  0100               	movlb	0	; () banked
 16630  012662  51D7               	movf	Port_SetPin@Type& (0+255),w,b
 16631                           
 16632                           ; Switch size 1, requested type "space"
 16633                           ; Number of cases is 4, Range of values is 0 to 3
 16634                           ; switch strategies available:
 16635                           ; Name         Instructions Cycles
 16636                           ; simple_byte           13     7 (average)
 16637                           ;	Chosen strategy is simple_byte
 16638  012664  0A00               	xorlw	0	; case 0
 16639  012666  B4D8               	btfsc	status,2,c
 16640  012668  0012               	return	
 16641  01266A  0A01               	xorlw	1	; case 1
 16642  01266C  B4D8               	btfsc	status,2,c
 16643  01266E  D7B6               	goto	l9768
 16644  012670  0A03               	xorlw	3	; case 2
 16645  012672  B4D8               	btfsc	status,2,c
 16646  012674  D7C8               	goto	l9772
 16647  012676  0A01               	xorlw	1	; case 3
 16648  012678  A4D8               	btfss	status,2,c
 16649  01267A  0012               	return	
 16650  01267C  D7DC               	goto	l9776
 16651  01267E                     __end_of_Port_SetPin:
 16652                           	opt stack 0
 16653                           tosu	equ	0xFFF
 16654                           tosh	equ	0xFFE
 16655                           tosl	equ	0xFFD
 16656                           pclath	equ	0xFFA
 16657                           tblptru	equ	0xFF8
 16658                           tblptrh	equ	0xFF7
 16659                           tblptrl	equ	0xFF6
 16660                           tablat	equ	0xFF5
 16661                           prodh	equ	0xFF4
 16662                           prodl	equ	0xFF3
 16663                           intcon	equ	0xFF2
 16664                           postinc0	equ	0xFEE
 16665                           wreg	equ	0xFE8
 16666                           indf1	equ	0xFE7
 16667                           postdec1	equ	0xFE5
 16668                           fsr1h	equ	0xFE2
 16669                           fsr1l	equ	0xFE1
 16670                           indf2	equ	0xFDF
 16671                           postinc2	equ	0xFDE
 16672                           postdec2	equ	0xFDD
 16673                           plusw2	equ	0xFDB
 16674                           fsr2h	equ	0xFDA
 16675                           fsr2l	equ	0xFD9
 16676                           status	equ	0xFD8
 16677                           
 16678 ;; *************** function _Port_GetPin *****************
 16679 ;; Defined at:
 16680 ;;		line 271 in file "Library/Port.c"
 16681 ;; Parameters:    Size  Location     Type
 16682 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 16683 ;;		 -> PortB(10), PortE(10), PortC(10), 
 16684 ;;  pPin            1    2[BANK0 ] enum E6750
 16685 ;; Auto vars:     Size  Location     Type
 16686 ;;  Output          1    5[BANK0 ] unsigned char 
 16687 ;; Return value:  Size  Location     Type
 16688 ;;                  1    wreg      unsigned char 
 16689 ;; Registers used:
 16690 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16691 ;; Tracked objects:
 16692 ;;		On entry : 0/0
 16693 ;;		On exit  : 0/0
 16694 ;;		Unchanged: 0/0
 16695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16698 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16699 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16700 ;;Total ram usage:        6 bytes
 16701 ;; Hardware stack levels used:    1
 16702 ;; Hardware stack levels required when called:    7
 16703 ;; This function calls:
 16704 ;;		Nothing
 16705 ;; This function is called by:
 16706 ;;		_Port_TogglePin
 16707 ;;		_HMI_LeftSwitch
 16708 ;;		_HMI_RightSwitch
 16709 ;;		_HMI_UpSwitch
 16710 ;;		_HMI_DownSwitch
 16711 ;;		_MXK_TestButton
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715                           	psect	text97
 16716  013DE4                     __ptext97:
 16717                           	opt stack 0
 16718  013DE4                     _Port_GetPin:
 16719                           	opt stack 17
 16720                           
 16721                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 16722                           
 16723                           ;incstack = 0
 16724  013DE4  0100               	movlb	0	; () banked
 16725  013DE6  EE20 F006          	lfsr	2,6
 16726  013DEA  51C4               	movf	Port_GetPin@pInput& (0+255),w,b
 16727  013DEC  26D9               	addwf	fsr2l,f,c
 16728  013DEE  51C5               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 16729  013DF0  22DA               	addwfc	fsr2h,f,c
 16730  013DF2  CFDE F0C7          	movff	postinc2,??_Port_GetPin
 16731  013DF6  CFDD F0C8          	movff	postdec2,??_Port_GetPin+1
 16732  013DFA  C0C7  FFD9         	movff	??_Port_GetPin,fsr2l
 16733  013DFE  C0C8  FFDA         	movff	??_Port_GetPin+1,fsr2h
 16734  013E02  50DF               	movf	indf2,w,c
 16735  013E04  0100               	movlb	0	; () banked
 16736  013E06  6FC9               	movwf	Port_GetPin@Output& (0+255),b
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;Port.c: 274: Output >>= (UINT8)pPin;
 16740  013E08  0100               	movlb	0	; () banked
 16741  013E0A  29C6               	incf	Port_GetPin@pPin& (0+255),w,b
 16742  013E0C  0100               	movlb	0	; () banked
 16743  013E0E  6FC7               	movwf	??_Port_GetPin& (0+255),b
 16744  013E10  D003               	goto	u6430
 16745  013E12                     u6435:
 16746  013E12  0100               	movlb	0	; () banked
 16747  013E14  90D8               	bcf	status,0,c
 16748  013E16  33C9               	rrcf	Port_GetPin@Output& (0+255),f,b
 16749  013E18                     u6430:
 16750  013E18  0100               	movlb	0	; () banked
 16751  013E1A  2FC7               	decfsz	??_Port_GetPin& (0+255),f,b
 16752  013E1C  D7FA               	goto	u6435
 16753                           
 16754                           ;Port.c: 275: Output &= 1;
 16755  013E1E  0E01               	movlw	1
 16756  013E20  0100               	movlb	0	; () banked
 16757  013E22  17C9               	andwf	Port_GetPin@Output& (0+255),f,b
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;Port.c: 276: return Output;
 16761  013E24  0100               	movlb	0	; () banked
 16762  013E26  51C9               	movf	Port_GetPin@Output& (0+255),w,b
 16763  013E28  0012               	return	
 16764  013E2A                     __end_of_Port_GetPin:
 16765                           	opt stack 0
 16766                           tosu	equ	0xFFF
 16767                           tosh	equ	0xFFE
 16768                           tosl	equ	0xFFD
 16769                           pclath	equ	0xFFA
 16770                           tblptru	equ	0xFF8
 16771                           tblptrh	equ	0xFF7
 16772                           tblptrl	equ	0xFF6
 16773                           tablat	equ	0xFF5
 16774                           prodh	equ	0xFF4
 16775                           prodl	equ	0xFF3
 16776                           intcon	equ	0xFF2
 16777                           postinc0	equ	0xFEE
 16778                           wreg	equ	0xFE8
 16779                           indf1	equ	0xFE7
 16780                           postdec1	equ	0xFE5
 16781                           fsr1h	equ	0xFE2
 16782                           fsr1l	equ	0xFE1
 16783                           indf2	equ	0xFDF
 16784                           postinc2	equ	0xFDE
 16785                           postdec2	equ	0xFDD
 16786                           plusw2	equ	0xFDB
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791 ;; *************** function _HMI_Init *****************
 16792 ;; Defined at:
 16793 ;;		line 104 in file "HMI.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;		None
 16796 ;; Auto vars:     Size  Location     Type
 16797 ;;  in              2   20[BANK2 ] unsigned short 
 16798 ;; Return value:  Size  Location     Type
 16799 ;;                  1    wreg      void 
 16800 ;; Registers used:
 16801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16802 ;; Tracked objects:
 16803 ;;		On entry : 0/0
 16804 ;;		On exit  : 0/0
 16805 ;;		Unchanged: 0/0
 16806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;Total ram usage:        2 bytes
 16812 ;; Hardware stack levels used:    1
 16813 ;; Hardware stack levels required when called:   16
 16814 ;; This function calls:
 16815 ;;		_Button_Init
 16816 ;;		_SPI_Init
 16817 ;;		_SPI_MinSpeed
 16818 ;; This function is called by:
 16819 ;;		_initialise
 16820 ;; This function uses a non-reentrant model
 16821 ;;
 16822                           
 16823                           	psect	text98
 16824  01130E                     __ptext98:
 16825                           	opt stack 0
 16826  01130E                     _HMI_Init:
 16827                           	opt stack 13
 16828                           
 16829                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 16830                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;incstack = 0
 16834  01130E  0EA0               	movlw	low (_HMIBoard+48)
 16835  011310  0102               	movlb	2	; () banked
 16836  011312  6F07               	movwf	Button_Init@pInput& (0+255),b
 16837  011314  0E01               	movlw	high (_HMIBoard+48)
 16838  011316  0102               	movlb	2	; () banked
 16839  011318  6F08               	movwf	(Button_Init@pInput+1)& (0+255),b
 16840  01131A  0E00               	movlw	0
 16841  01131C  0102               	movlb	2	; () banked
 16842  01131E  6F0A               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16843  011320  0E02               	movlw	2
 16844  011322  6F09               	movwf	Button_Init@pThreshold& (0+255),b
 16845  011324  0EB0               	movlw	low _HMI_InitButtons
 16846  011326  0102               	movlb	2	; () banked
 16847  011328  6F0B               	movwf	Button_Init@pInitIO& (0+255),b
 16848  01132A  0E46               	movlw	high _HMI_InitButtons
 16849  01132C  0102               	movlb	2	; () banked
 16850  01132E  6F0C               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16851  011330  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16852  011332  0102               	movlb	2	; () banked
 16853  011334  6F0D               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16854  011336  0E02               	movlw	low _HMI_DIPSwitch
 16855  011338  0102               	movlb	2	; () banked
 16856  01133A  6F0E               	movwf	Button_Init@pGetState& (0+255),b
 16857  01133C  0E45               	movlw	high _HMI_DIPSwitch
 16858  01133E  0102               	movlb	2	; () banked
 16859  011340  6F0F               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16860  011342  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 16861  011344  0102               	movlb	2	; () banked
 16862  011346  6F10               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16863  011348  0E82               	movlw	low _Event_HMI_DIPSwitch
 16864  01134A  0102               	movlb	2	; () banked
 16865  01134C  6F11               	movwf	Button_Init@pFunction& (0+255),b
 16866  01134E  0E42               	movlw	high _Event_HMI_DIPSwitch
 16867  011350  0102               	movlb	2	; () banked
 16868  011352  6F12               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16869  011354  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 16870  011356  0102               	movlb	2	; () banked
 16871  011358  6F13               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16872  01135A  EC0B  F092         	call	_Button_Init	;wreg free
 16873                           
 16874                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 16875                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 16876  01135E  0E82               	movlw	low (_HMIBoard+18)
 16877  011360  0102               	movlb	2	; () banked
 16878  011362  6F07               	movwf	Button_Init@pInput& (0+255),b
 16879  011364  0E01               	movlw	high (_HMIBoard+18)
 16880  011366  0102               	movlb	2	; () banked
 16881  011368  6F08               	movwf	(Button_Init@pInput+1)& (0+255),b
 16882  01136A  0E00               	movlw	0
 16883  01136C  0102               	movlb	2	; () banked
 16884  01136E  6F0A               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16885  011370  0E02               	movlw	2
 16886  011372  6F09               	movwf	Button_Init@pThreshold& (0+255),b
 16887  011374  0EB0               	movlw	low _HMI_InitButtons
 16888  011376  0102               	movlb	2	; () banked
 16889  011378  6F0B               	movwf	Button_Init@pInitIO& (0+255),b
 16890  01137A  0E46               	movlw	high _HMI_InitButtons
 16891  01137C  0102               	movlb	2	; () banked
 16892  01137E  6F0C               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16893  011380  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16894  011382  0102               	movlb	2	; () banked
 16895  011384  6F0D               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16896  011386  0E62               	movlw	low _HMI_LeftSwitch
 16897  011388  0102               	movlb	2	; () banked
 16898  01138A  6F0E               	movwf	Button_Init@pGetState& (0+255),b
 16899  01138C  0E45               	movlw	high _HMI_LeftSwitch
 16900  01138E  0102               	movlb	2	; () banked
 16901  011390  6F0F               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16902  011392  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 16903  011394  0102               	movlb	2	; () banked
 16904  011396  6F10               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16905  011398  0E7E               	movlw	low _Event_HMI_LeftButton
 16906  01139A  0102               	movlb	2	; () banked
 16907  01139C  6F11               	movwf	Button_Init@pFunction& (0+255),b
 16908  01139E  0E3A               	movlw	high _Event_HMI_LeftButton
 16909  0113A0  0102               	movlb	2	; () banked
 16910  0113A2  6F12               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16911  0113A4  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 16912  0113A6  0102               	movlb	2	; () banked
 16913  0113A8  6F13               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16914  0113AA  EC0B  F092         	call	_Button_Init	;wreg free
 16915                           
 16916                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 16917                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 16918  0113AE  0E78               	movlw	low (_HMIBoard+8)
 16919  0113B0  0102               	movlb	2	; () banked
 16920  0113B2  6F07               	movwf	Button_Init@pInput& (0+255),b
 16921  0113B4  0E01               	movlw	high (_HMIBoard+8)
 16922  0113B6  0102               	movlb	2	; () banked
 16923  0113B8  6F08               	movwf	(Button_Init@pInput+1)& (0+255),b
 16924  0113BA  0E00               	movlw	0
 16925  0113BC  0102               	movlb	2	; () banked
 16926  0113BE  6F0A               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16927  0113C0  0E02               	movlw	2
 16928  0113C2  6F09               	movwf	Button_Init@pThreshold& (0+255),b
 16929  0113C4  0EB0               	movlw	low _HMI_InitButtons
 16930  0113C6  0102               	movlb	2	; () banked
 16931  0113C8  6F0B               	movwf	Button_Init@pInitIO& (0+255),b
 16932  0113CA  0E46               	movlw	high _HMI_InitButtons
 16933  0113CC  0102               	movlb	2	; () banked
 16934  0113CE  6F0C               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16935  0113D0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16936  0113D2  0102               	movlb	2	; () banked
 16937  0113D4  6F0D               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16938  0113D6  0E4A               	movlw	low _HMI_RightSwitch
 16939  0113D8  0102               	movlb	2	; () banked
 16940  0113DA  6F0E               	movwf	Button_Init@pGetState& (0+255),b
 16941  0113DC  0E45               	movlw	high _HMI_RightSwitch
 16942  0113DE  0102               	movlb	2	; () banked
 16943  0113E0  6F0F               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16944  0113E2  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 16945  0113E4  0102               	movlb	2	; () banked
 16946  0113E6  6F10               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16947  0113E8  0E70               	movlw	low _Event_HMI_RightButton
 16948  0113EA  0102               	movlb	2	; () banked
 16949  0113EC  6F11               	movwf	Button_Init@pFunction& (0+255),b
 16950  0113EE  0E3E               	movlw	high _Event_HMI_RightButton
 16951  0113F0  0102               	movlb	2	; () banked
 16952  0113F2  6F12               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16953  0113F4  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 16954  0113F6  0102               	movlb	2	; () banked
 16955  0113F8  6F13               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16956  0113FA  EC0B  F092         	call	_Button_Init	;wreg free
 16957                           
 16958                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 16959                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 16960  0113FE  0E8C               	movlw	low (_HMIBoard+28)
 16961  011400  0102               	movlb	2	; () banked
 16962  011402  6F07               	movwf	Button_Init@pInput& (0+255),b
 16963  011404  0E01               	movlw	high (_HMIBoard+28)
 16964  011406  0102               	movlb	2	; () banked
 16965  011408  6F08               	movwf	(Button_Init@pInput+1)& (0+255),b
 16966  01140A  0E00               	movlw	0
 16967  01140C  0102               	movlb	2	; () banked
 16968  01140E  6F0A               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16969  011410  0E02               	movlw	2
 16970  011412  6F09               	movwf	Button_Init@pThreshold& (0+255),b
 16971  011414  0EB0               	movlw	low _HMI_InitButtons
 16972  011416  0102               	movlb	2	; () banked
 16973  011418  6F0B               	movwf	Button_Init@pInitIO& (0+255),b
 16974  01141A  0E46               	movlw	high _HMI_InitButtons
 16975  01141C  0102               	movlb	2	; () banked
 16976  01141E  6F0C               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16977  011420  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16978  011422  0102               	movlb	2	; () banked
 16979  011424  6F0D               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16980  011426  0E32               	movlw	low _HMI_UpSwitch
 16981  011428  0102               	movlb	2	; () banked
 16982  01142A  6F0E               	movwf	Button_Init@pGetState& (0+255),b
 16983  01142C  0E45               	movlw	high _HMI_UpSwitch
 16984  01142E  0102               	movlb	2	; () banked
 16985  011430  6F0F               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16986  011432  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 16987  011434  0102               	movlb	2	; () banked
 16988  011436  6F10               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16989  011438  0E36               	movlw	low _Event_HMI_UpButton
 16990  01143A  0102               	movlb	2	; () banked
 16991  01143C  6F11               	movwf	Button_Init@pFunction& (0+255),b
 16992  01143E  0E41               	movlw	high _Event_HMI_UpButton
 16993  011440  0102               	movlb	2	; () banked
 16994  011442  6F12               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16995  011444  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 16996  011446  0102               	movlb	2	; () banked
 16997  011448  6F13               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16998  01144A  EC0B  F092         	call	_Button_Init	;wreg free
 16999                           
 17000                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 17001                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 17002  01144E  0E96               	movlw	low (_HMIBoard+38)
 17003  011450  0102               	movlb	2	; () banked
 17004  011452  6F07               	movwf	Button_Init@pInput& (0+255),b
 17005  011454  0E01               	movlw	high (_HMIBoard+38)
 17006  011456  0102               	movlb	2	; () banked
 17007  011458  6F08               	movwf	(Button_Init@pInput+1)& (0+255),b
 17008  01145A  0E00               	movlw	0
 17009  01145C  0102               	movlb	2	; () banked
 17010  01145E  6F0A               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17011  011460  0E02               	movlw	2
 17012  011462  6F09               	movwf	Button_Init@pThreshold& (0+255),b
 17013  011464  0EB0               	movlw	low _HMI_InitButtons
 17014  011466  0102               	movlb	2	; () banked
 17015  011468  6F0B               	movwf	Button_Init@pInitIO& (0+255),b
 17016  01146A  0E46               	movlw	high _HMI_InitButtons
 17017  01146C  0102               	movlb	2	; () banked
 17018  01146E  6F0C               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 17019  011470  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 17020  011472  0102               	movlb	2	; () banked
 17021  011474  6F0D               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 17022  011476  0E1A               	movlw	low _HMI_DownSwitch
 17023  011478  0102               	movlb	2	; () banked
 17024  01147A  6F0E               	movwf	Button_Init@pGetState& (0+255),b
 17025  01147C  0E45               	movlw	high _HMI_DownSwitch
 17026  01147E  0102               	movlb	2	; () banked
 17027  011480  6F0F               	movwf	(Button_Init@pGetState+1)& (0+255),b
 17028  011482  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 17029  011484  0102               	movlb	2	; () banked
 17030  011486  6F10               	movwf	(Button_Init@pGetState+2)& (0+255),b
 17031  011488  0E04               	movlw	low _Event_HMI_DownButton
 17032  01148A  0102               	movlb	2	; () banked
 17033  01148C  6F11               	movwf	Button_Init@pFunction& (0+255),b
 17034  01148E  0E41               	movlw	high _Event_HMI_DownButton
 17035  011490  0102               	movlb	2	; () banked
 17036  011492  6F12               	movwf	(Button_Init@pFunction+1)& (0+255),b
 17037  011494  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 17038  011496  0102               	movlb	2	; () banked
 17039  011498  6F13               	movwf	(Button_Init@pFunction+2)& (0+255),b
 17040  01149A  EC0B  F092         	call	_Button_Init	;wreg free
 17041                           
 17042                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 17043  01149E  0EA0               	movlw	160
 17044  0114A0  0100               	movlb	0	; () banked
 17045  0114A2  6FF1               	movwf	SPI_Init@pClock& (0+255),b
 17046  0114A4  0E86               	movlw	134
 17047  0114A6  6FF2               	movwf	(SPI_Init@pClock+1)& (0+255),b
 17048  0114A8  0E01               	movlw	1
 17049  0114AA  6FF3               	movwf	(SPI_Init@pClock+2)& (0+255),b
 17050  0114AC  0E00               	movlw	0
 17051  0114AE  6FF4               	movwf	(SPI_Init@pClock+3)& (0+255),b
 17052  0114B0  0E00               	movlw	0
 17053  0114B2  0100               	movlb	0	; () banked
 17054  0114B4  6FF5               	movwf	SPI_Init@pChannel& (0+255),b
 17055  0114B6  0E02               	movlw	2
 17056  0114B8  0100               	movlb	0	; () banked
 17057  0114BA  6FF6               	movwf	SPI_Init@pMode& (0+255),b
 17058  0114BC  EC00  F080         	call	_SPI_Init	;wreg free
 17059                           
 17060                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 17061  0114C0  0EAA               	movlw	low _SPI1
 17062  0114C2  0100               	movlb	0	; () banked
 17063  0114C4  6FD3               	movwf	SPI_MinSpeed@pInput& (0+255),b
 17064  0114C6  0E01               	movlw	high _SPI1
 17065  0114C8  0100               	movlb	0	; () banked
 17066  0114CA  6FD4               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 17067  0114CC  ECCB  F09A         	call	_SPI_MinSpeed	;wreg free
 17068                           
 17069                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 17070  0114D0  0E00               	movlw	0
 17071  0114D2  0102               	movlb	2	; () banked
 17072  0114D4  6F15               	movwf	(HMI_Init@in+1)& (0+255),b
 17073  0114D6  0E00               	movlw	0
 17074  0114D8  6F14               	movwf	HMI_Init@in& (0+255),b
 17075  0114DA                     l11662:
 17076                           
 17077                           ; BSR set to: 2
 17078  0114DA  0102               	movlb	2	; () banked
 17079  0114DC  5115               	movf	(HMI_Init@in+1)& (0+255),w,b
 17080  0114DE  E113               	bnz	l1161
 17081  0114E0  0E08               	movlw	8
 17082  0114E2  0102               	movlb	2	; () banked
 17083  0114E4  5D14               	subwf	HMI_Init@in& (0+255),w,b
 17084  0114E6  B0D8               	btfsc	status,0,c
 17085  0114E8  0012               	return	
 17086                           
 17087                           ; BSR set to: 2
 17088                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 17089                           
 17090                           ; BSR set to: 2
 17091                           
 17092                           ; BSR set to: 2
 17093  0114EA  0E70               	movlw	low _HMIBoard
 17094  0114EC  0102               	movlb	2	; () banked
 17095  0114EE  2514               	addwf	HMI_Init@in& (0+255),w,b
 17096  0114F0  6ED9               	movwf	fsr2l,c
 17097  0114F2  0E01               	movlw	high _HMIBoard
 17098  0114F4  0102               	movlb	2	; () banked
 17099  0114F6  2115               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 17100  0114F8  6EDA               	movwf	fsr2h,c
 17101  0114FA  0E00               	movlw	0
 17102  0114FC  6EDF               	movwf	indf2,c
 17103                           
 17104                           ; BSR set to: 2
 17105  0114FE  0102               	movlb	2	; () banked
 17106  011500  4B14               	infsnz	HMI_Init@in& (0+255),f,b
 17107  011502  2B15               	incf	(HMI_Init@in+1)& (0+255),f,b
 17108  011504  D7EA               	goto	l11662
 17109  011506                     l1161:
 17110                           
 17111                           ; BSR set to: 2
 17112  011506  0012               	return		;funcret
 17113  011508                     __end_of_HMI_Init:
 17114                           	opt stack 0
 17115                           tosu	equ	0xFFF
 17116                           tosh	equ	0xFFE
 17117                           tosl	equ	0xFFD
 17118                           pclath	equ	0xFFA
 17119                           tblptru	equ	0xFF8
 17120                           tblptrh	equ	0xFF7
 17121                           tblptrl	equ	0xFF6
 17122                           tablat	equ	0xFF5
 17123                           prodh	equ	0xFF4
 17124                           prodl	equ	0xFF3
 17125                           intcon	equ	0xFF2
 17126                           postinc0	equ	0xFEE
 17127                           wreg	equ	0xFE8
 17128                           indf1	equ	0xFE7
 17129                           postdec1	equ	0xFE5
 17130                           fsr1h	equ	0xFE2
 17131                           fsr1l	equ	0xFE1
 17132                           indf2	equ	0xFDF
 17133                           postinc2	equ	0xFDE
 17134                           postdec2	equ	0xFDD
 17135                           plusw2	equ	0xFDB
 17136                           fsr2h	equ	0xFDA
 17137                           fsr2l	equ	0xFD9
 17138                           status	equ	0xFD8
 17139                           
 17140 ;; *************** function _SPI_MinSpeed *****************
 17141 ;; Defined at:
 17142 ;;		line 190 in file "Library/SPI.c"
 17143 ;; Parameters:    Size  Location     Type
 17144 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 17145 ;;		 -> SPI1(11), 
 17146 ;; Auto vars:     Size  Location     Type
 17147 ;;		None
 17148 ;; Return value:  Size  Location     Type
 17149 ;;                  1    wreg      void 
 17150 ;; Registers used:
 17151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17152 ;; Tracked objects:
 17153 ;;		On entry : 0/0
 17154 ;;		On exit  : 0/0
 17155 ;;		Unchanged: 0/0
 17156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17157 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17161 ;;Total ram usage:        2 bytes
 17162 ;; Hardware stack levels used:    1
 17163 ;; Hardware stack levels required when called:    9
 17164 ;; This function calls:
 17165 ;;		_Byte_SetBit
 17166 ;;		_Byte_SetQuad
 17167 ;; This function is called by:
 17168 ;;		_HMI_Init
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           	psect	text99
 17173  013596                     __ptext99:
 17174                           	opt stack 0
 17175  013596                     _SPI_MinSpeed:
 17176                           	opt stack 19
 17177                           
 17178                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17179                           
 17180                           ; BSR set to: 2
 17181                           ;incstack = 0
 17182  013596  0100               	movlb	0	; () banked
 17183  013598  EE20 F006          	lfsr	2,6
 17184  01359C  51D3               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 17185  01359E  26D9               	addwf	fsr2l,f,c
 17186  0135A0  51D4               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 17187  0135A2  22DA               	addwfc	fsr2h,f,c
 17188  0135A4  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17189  0135A8  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17190  0135AC  0E05               	movlw	5
 17191  0135AE  0100               	movlb	0	; () banked
 17192  0135B0  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17193  0135B2  0E00               	movlw	0
 17194  0135B4  0100               	movlb	0	; () banked
 17195  0135B6  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17196  0135B8  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17197                           
 17198                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 17199  0135BC  0100               	movlb	0	; () banked
 17200  0135BE  EE20 F006          	lfsr	2,6
 17201  0135C2  51D3               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 17202  0135C4  26D9               	addwf	fsr2l,f,c
 17203  0135C6  51D4               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 17204  0135C8  22DA               	addwfc	fsr2h,f,c
 17205  0135CA  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 17206  0135CE  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 17207  0135D2  0E00               	movlw	0
 17208  0135D4  0100               	movlb	0	; () banked
 17209  0135D6  6FD1               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17210  0135D8  0E02               	movlw	2
 17211  0135DA  0100               	movlb	0	; () banked
 17212  0135DC  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 17213  0135DE  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 17214                           
 17215                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17216  0135E2  0100               	movlb	0	; () banked
 17217  0135E4  EE20 F006          	lfsr	2,6
 17218  0135E8  51D3               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 17219  0135EA  26D9               	addwf	fsr2l,f,c
 17220  0135EC  51D4               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 17221  0135EE  22DA               	addwfc	fsr2h,f,c
 17222  0135F0  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17223  0135F4  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17224  0135F8  0E05               	movlw	5
 17225  0135FA  0100               	movlb	0	; () banked
 17226  0135FC  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17227  0135FE  0E01               	movlw	1
 17228  013600  0100               	movlb	0	; () banked
 17229  013602  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17230  013604  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17231  013608  0012               	return		;funcret
 17232  01360A                     __end_of_SPI_MinSpeed:
 17233                           	opt stack 0
 17234                           tosu	equ	0xFFF
 17235                           tosh	equ	0xFFE
 17236                           tosl	equ	0xFFD
 17237                           pclath	equ	0xFFA
 17238                           tblptru	equ	0xFF8
 17239                           tblptrh	equ	0xFF7
 17240                           tblptrl	equ	0xFF6
 17241                           tablat	equ	0xFF5
 17242                           prodh	equ	0xFF4
 17243                           prodl	equ	0xFF3
 17244                           intcon	equ	0xFF2
 17245                           postinc0	equ	0xFEE
 17246                           wreg	equ	0xFE8
 17247                           indf1	equ	0xFE7
 17248                           postdec1	equ	0xFE5
 17249                           fsr1h	equ	0xFE2
 17250                           fsr1l	equ	0xFE1
 17251                           indf2	equ	0xFDF
 17252                           postinc2	equ	0xFDE
 17253                           postdec2	equ	0xFDD
 17254                           plusw2	equ	0xFDB
 17255                           fsr2h	equ	0xFDA
 17256                           fsr2l	equ	0xFD9
 17257                           status	equ	0xFD8
 17258                           
 17259 ;; *************** function _SPI_Init *****************
 17260 ;; Defined at:
 17261 ;;		line 12 in file "Library/SPI.c"
 17262 ;; Parameters:    Size  Location     Type
 17263 ;;  pClock          4   45[BANK0 ] unsigned long 
 17264 ;;  pChannel        1   49[BANK0 ] enum E6744
 17265 ;;  pMode           1   50[BANK0 ] enum E6748
 17266 ;; Auto vars:     Size  Location     Type
 17267 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 17268 ;;		 -> SPI1(11), SPI2(11), 
 17269 ;; Return value:  Size  Location     Type
 17270 ;;                  1    wreg      void 
 17271 ;; Registers used:
 17272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17273 ;; Tracked objects:
 17274 ;;		On entry : 0/0
 17275 ;;		On exit  : 0/0
 17276 ;;		Unchanged: 0/0
 17277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17278 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;Total ram usage:        8 bytes
 17283 ;; Hardware stack levels used:    1
 17284 ;; Hardware stack levels required when called:   12
 17285 ;; This function calls:
 17286 ;;		_Byte_SetBit
 17287 ;;		_Byte_SetQuad
 17288 ;;		_Port_SetPinType
 17289 ;;		_SPI_DCS
 17290 ;;		_SPI_DisableISR
 17291 ;;		_Timer2_Init
 17292 ;; This function is called by:
 17293 ;;		_Configure_GPIOs
 17294 ;;		_HMI_Init
 17295 ;; This function uses a non-reentrant model
 17296 ;;
 17297                           
 17298                           	psect	text100
 17299  010000                     __ptext100:
 17300                           	opt stack 0
 17301  010000                     _SPI_Init:
 17302                           	opt stack 15
 17303                           
 17304                           ;SPI.c: 14: SPIPtr pInput;
 17305                           ;SPI.c: 16: switch (pChannel)
 17306                           
 17307                           ;incstack = 0
 17308  010000  D00C               	goto	l11050
 17309  010002                     l11044:
 17310                           
 17311                           ;SPI.c: 19: pInput = &SPI1;
 17312  010002  0EAA               	movlw	low _SPI1
 17313  010004  0100               	movlb	0	; () banked
 17314  010006  6FF7               	movwf	SPI_Init@pInput& (0+255),b
 17315  010008  0E01               	movlw	high _SPI1
 17316  01000A  D004               	goto	L6
 17317  01000C                     l11046:
 17318                           
 17319                           ; BSR set to: 0
 17320                           ;SPI.c: 22: pInput = &SPI2;
 17321  01000C  0EB5               	movlw	low _SPI2
 17322  01000E  0100               	movlb	0	; () banked
 17323  010010  6FF7               	movwf	SPI_Init@pInput& (0+255),b
 17324  010012  0E01               	movlw	high _SPI2
 17325  010014                     L6:
 17326  010014  0100               	movlb	0	; () banked
 17327  010016  6FF8               	movwf	(SPI_Init@pInput+1)& (0+255),b
 17328                           
 17329                           ; BSR set to: 0
 17330                           ;SPI.c: 24: };
 17331                           
 17332                           ;SPI.c: 23: break;
 17333  010018  D008               	goto	l11052
 17334  01001A                     l11050:
 17335  01001A  0100               	movlb	0	; () banked
 17336  01001C  51F5               	movf	SPI_Init@pChannel& (0+255),w,b
 17337                           
 17338                           ; Switch size 1, requested type "space"
 17339                           ; Number of cases is 2, Range of values is 0 to 1
 17340                           ; switch strategies available:
 17341                           ; Name         Instructions Cycles
 17342                           ; simple_byte            7     4 (average)
 17343                           ;	Chosen strategy is simple_byte
 17344  01001E  0A00               	xorlw	0	; case 0
 17345  010020  B4D8               	btfsc	status,2,c
 17346  010022  D7EF               	goto	l11044
 17347  010024  0A01               	xorlw	1	; case 1
 17348  010026  B4D8               	btfsc	status,2,c
 17349  010028  D7F1               	goto	l11046
 17350  01002A                     l11052:
 17351                           
 17352                           ; BSR set to: 0
 17353                           ;SPI.c: 26: pInput->mChannel = pChannel;
 17354  01002A  0100               	movlb	0	; () banked
 17355  01002C  EE20 F002          	lfsr	2,2
 17356  010030  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17357  010032  26D9               	addwf	fsr2l,f,c
 17358  010034  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17359  010036  22DA               	addwfc	fsr2h,f,c
 17360  010038  C0F5  FFDF         	movff	SPI_Init@pChannel,indf2
 17361                           
 17362                           ;SPI.c: 35: switch (pChannel)
 17363  01003C  D0B1               	goto	l11072
 17364  01003E                     l11054:
 17365                           
 17366                           ; BSR set to: 0
 17367                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 17368  01003E  0E92               	movlw	low _PortC
 17369  010040  0100               	movlb	0	; () banked
 17370  010042  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17371  010044  0E00               	movlw	high _PortC
 17372  010046  0100               	movlb	0	; () banked
 17373  010048  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17374  01004A  0E02               	movlw	2
 17375  01004C  0100               	movlb	0	; () banked
 17376  01004E  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17377  010050  0E03               	movlw	3
 17378  010052  0100               	movlb	0	; () banked
 17379  010054  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17380  010056  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17381                           
 17382                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 17383  01005A  0E92               	movlw	low _PortC
 17384  01005C  0100               	movlb	0	; () banked
 17385  01005E  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17386  010060  0E00               	movlw	high _PortC
 17387  010062  0100               	movlb	0	; () banked
 17388  010064  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17389  010066  0E03               	movlw	3
 17390  010068  0100               	movlb	0	; () banked
 17391  01006A  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17392  01006C  0E03               	movlw	3
 17393  01006E  0100               	movlb	0	; () banked
 17394  010070  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17395  010072  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17396                           
 17397                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 17398  010076  0E92               	movlw	low _PortC
 17399  010078  0100               	movlb	0	; () banked
 17400  01007A  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17401  01007C  0E00               	movlw	high _PortC
 17402  01007E  0100               	movlb	0	; () banked
 17403  010080  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17404  010082  0E05               	movlw	5
 17405  010084  0100               	movlb	0	; () banked
 17406  010086  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17407  010088  0E03               	movlw	3
 17408  01008A  0100               	movlb	0	; () banked
 17409  01008C  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17410  01008E  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17411                           
 17412                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 17413  010092  0E92               	movlw	low _PortC
 17414  010094  0100               	movlb	0	; () banked
 17415  010096  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17416  010098  0E00               	movlw	high _PortC
 17417  01009A  0100               	movlb	0	; () banked
 17418  01009C  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17419  01009E  0E04               	movlw	4
 17420  0100A0  0100               	movlb	0	; () banked
 17421  0100A2  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17422  0100A4  0E00               	movlw	0
 17423  0100A6  0100               	movlb	0	; () banked
 17424  0100A8  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17425  0100AA  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17426                           
 17427                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 17428  0100AE  0100               	movlb	0	; () banked
 17429  0100B0  EE20 F003          	lfsr	2,3
 17430  0100B4  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17431  0100B6  26D9               	addwf	fsr2l,f,c
 17432  0100B8  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17433  0100BA  22DA               	addwfc	fsr2h,f,c
 17434  0100BC  0EC7               	movlw	199
 17435  0100BE  6EDE               	movwf	postinc2,c
 17436  0100C0  0E0F               	movlw	15
 17437  0100C2  6EDD               	movwf	postdec2,c
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 17441  0100C4  0100               	movlb	0	; () banked
 17442  0100C6  EE20 F006          	lfsr	2,6
 17443  0100CA  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17444  0100CC  26D9               	addwf	fsr2l,f,c
 17445  0100CE  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17446  0100D0  22DA               	addwfc	fsr2h,f,c
 17447  0100D2  0EC6               	movlw	198
 17448  0100D4  6EDE               	movwf	postinc2,c
 17449  0100D6  0E0F               	movlw	15
 17450  0100D8  6EDD               	movwf	postdec2,c
 17451                           
 17452                           ; BSR set to: 0
 17453                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 17454  0100DA  0100               	movlb	0	; () banked
 17455  0100DC  EE20 F009          	lfsr	2,9
 17456  0100E0  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17457  0100E2  26D9               	addwf	fsr2l,f,c
 17458  0100E4  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17459  0100E6  22DA               	addwfc	fsr2h,f,c
 17460  0100E8  0EC9               	movlw	201
 17461  0100EA  D056               	goto	L7
 17462  0100EC                     l11062:
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 17466  0100EC  0E88               	movlw	low _PortD
 17467  0100EE  0100               	movlb	0	; () banked
 17468  0100F0  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17469  0100F2  0E00               	movlw	high _PortD
 17470  0100F4  0100               	movlb	0	; () banked
 17471  0100F6  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17472  0100F8  0E07               	movlw	7
 17473  0100FA  0100               	movlb	0	; () banked
 17474  0100FC  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17475  0100FE  0E03               	movlw	3
 17476  010100  0100               	movlb	0	; () banked
 17477  010102  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17478  010104  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17479                           
 17480                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 17481  010108  0E88               	movlw	low _PortD
 17482  01010A  0100               	movlb	0	; () banked
 17483  01010C  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17484  01010E  0E00               	movlw	high _PortD
 17485  010110  0100               	movlb	0	; () banked
 17486  010112  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17487  010114  0E06               	movlw	6
 17488  010116  0100               	movlb	0	; () banked
 17489  010118  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17490  01011A  0E03               	movlw	3
 17491  01011C  0100               	movlb	0	; () banked
 17492  01011E  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17493  010120  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17494                           
 17495                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 17496  010124  0E88               	movlw	low _PortD
 17497  010126  0100               	movlb	0	; () banked
 17498  010128  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17499  01012A  0E00               	movlw	high _PortD
 17500  01012C  0100               	movlb	0	; () banked
 17501  01012E  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17502  010130  0E04               	movlw	4
 17503  010132  0100               	movlb	0	; () banked
 17504  010134  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17505  010136  0E03               	movlw	3
 17506  010138  0100               	movlb	0	; () banked
 17507  01013A  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17508  01013C  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17509                           
 17510                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 17511  010140  0E88               	movlw	low _PortD
 17512  010142  0100               	movlb	0	; () banked
 17513  010144  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 17514  010146  0E00               	movlw	high _PortD
 17515  010148  0100               	movlb	0	; () banked
 17516  01014A  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17517  01014C  0E05               	movlw	5
 17518  01014E  0100               	movlb	0	; () banked
 17519  010150  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 17520  010152  0E00               	movlw	0
 17521  010154  0100               	movlb	0	; () banked
 17522  010156  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 17523  010158  EC84  F08A         	call	_Port_SetPinType	;wreg free
 17524                           
 17525                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 17526  01015C  0100               	movlb	0	; () banked
 17527  01015E  EE20 F003          	lfsr	2,3
 17528  010162  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17529  010164  26D9               	addwf	fsr2l,f,c
 17530  010166  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17531  010168  22DA               	addwfc	fsr2h,f,c
 17532  01016A  0E6D               	movlw	109
 17533  01016C  6EDE               	movwf	postinc2,c
 17534  01016E  0E0F               	movlw	15
 17535  010170  6EDD               	movwf	postdec2,c
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 17539  010172  0100               	movlb	0	; () banked
 17540  010174  EE20 F006          	lfsr	2,6
 17541  010178  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17542  01017A  26D9               	addwf	fsr2l,f,c
 17543  01017C  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17544  01017E  22DA               	addwfc	fsr2h,f,c
 17545  010180  0E6C               	movlw	108
 17546  010182  6EDE               	movwf	postinc2,c
 17547  010184  0E0F               	movlw	15
 17548  010186  6EDD               	movwf	postdec2,c
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 17552  010188  0100               	movlb	0	; () banked
 17553  01018A  EE20 F009          	lfsr	2,9
 17554  01018E  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17555  010190  26D9               	addwf	fsr2l,f,c
 17556  010192  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17557  010194  22DA               	addwfc	fsr2h,f,c
 17558  010196  0E6F               	movlw	111
 17559  010198                     L7:
 17560  010198  6EDE               	movwf	postinc2,c
 17561  01019A  0E0F               	movlw	15
 17562  01019C  6EDD               	movwf	postdec2,c
 17563                           
 17564                           ;SPI.c: 68: break;
 17565  01019E  D009               	goto	l11074
 17566  0101A0                     l11072:
 17567                           
 17568                           ; BSR set to: 0
 17569  0101A0  0100               	movlb	0	; () banked
 17570  0101A2  51F5               	movf	SPI_Init@pChannel& (0+255),w,b
 17571                           
 17572                           ; Switch size 1, requested type "space"
 17573                           ; Number of cases is 2, Range of values is 0 to 1
 17574                           ; switch strategies available:
 17575                           ; Name         Instructions Cycles
 17576                           ; simple_byte            7     4 (average)
 17577                           ;	Chosen strategy is simple_byte
 17578  0101A4  0A00               	xorlw	0	; case 0
 17579  0101A6  B4D8               	btfsc	status,2,c
 17580  0101A8  D74A               	goto	l11054
 17581  0101AA  0A01               	xorlw	1	; case 1
 17582  0101AC  A4D8               	btfss	status,2,c
 17583  0101AE  0012               	return	
 17584  0101B0  D79D               	goto	l11062
 17585  0101B2                     l11074:
 17586                           
 17587                           ; BSR set to: 0
 17588                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17589  0101B2  0100               	movlb	0	; () banked
 17590  0101B4  EE20 F006          	lfsr	2,6
 17591  0101B8  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17592  0101BA  26D9               	addwf	fsr2l,f,c
 17593  0101BC  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17594  0101BE  22DA               	addwfc	fsr2h,f,c
 17595  0101C0  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17596  0101C4  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17597  0101C8  0E05               	movlw	5
 17598  0101CA  0100               	movlb	0	; () banked
 17599  0101CC  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17600  0101CE  0E00               	movlw	0
 17601  0101D0  0100               	movlb	0	; () banked
 17602  0101D2  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17603  0101D4  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17604                           
 17605                           ;SPI.c: 77: switch(pMode)
 17606  0101D8  D09C               	goto	l11086
 17607  0101DA                     l11076:
 17608                           
 17609                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 17610  0101DA  0100               	movlb	0	; () banked
 17611  0101DC  EE20 F006          	lfsr	2,6
 17612  0101E0  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17613  0101E2  26D9               	addwf	fsr2l,f,c
 17614  0101E4  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17615  0101E6  22DA               	addwfc	fsr2h,f,c
 17616  0101E8  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17617  0101EC  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17618  0101F0  0E04               	movlw	4
 17619  0101F2  0100               	movlb	0	; () banked
 17620  0101F4  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17621  0101F6  0E00               	movlw	0
 17622  0101F8  0100               	movlb	0	; () banked
 17623  0101FA  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17624  0101FC  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17625                           
 17626                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 17627  010200  0100               	movlb	0	; () banked
 17628  010202  EE20 F003          	lfsr	2,3
 17629  010206  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17630  010208  26D9               	addwf	fsr2l,f,c
 17631  01020A  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17632  01020C  22DA               	addwfc	fsr2h,f,c
 17633  01020E  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17634  010212  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17635  010216  0E06               	movlw	6
 17636  010218  0100               	movlb	0	; () banked
 17637  01021A  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17638  01021C  0E00               	movlw	0
 17639  01021E  0100               	movlb	0	; () banked
 17640  010220  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17641  010222  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17642                           
 17643                           ;SPI.c: 82: break;
 17644  010226  D084               	goto	l11088
 17645  010228                     l11078:
 17646                           
 17647                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 17648  010228  0100               	movlb	0	; () banked
 17649  01022A  EE20 F006          	lfsr	2,6
 17650  01022E  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17651  010230  26D9               	addwf	fsr2l,f,c
 17652  010232  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17653  010234  22DA               	addwfc	fsr2h,f,c
 17654  010236  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17655  01023A  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17656  01023E  0E04               	movlw	4
 17657  010240  0100               	movlb	0	; () banked
 17658  010242  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17659  010244  0E00               	movlw	0
 17660  010246  0100               	movlb	0	; () banked
 17661  010248  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17662  01024A  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17663                           
 17664                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 17665  01024E  0100               	movlb	0	; () banked
 17666  010250  EE20 F003          	lfsr	2,3
 17667  010254  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17668  010256  26D9               	addwf	fsr2l,f,c
 17669  010258  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17670  01025A  22DA               	addwfc	fsr2h,f,c
 17671  01025C  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17672  010260  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17673  010264  0E06               	movlw	6
 17674  010266  0100               	movlb	0	; () banked
 17675  010268  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17676  01026A  0E01               	movlw	1
 17677  01026C  0100               	movlb	0	; () banked
 17678  01026E  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17679  010270  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17680                           
 17681                           ;SPI.c: 86: break;
 17682  010274  D05D               	goto	l11088
 17683  010276                     l11080:
 17684                           
 17685                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 17686  010276  0100               	movlb	0	; () banked
 17687  010278  EE20 F006          	lfsr	2,6
 17688  01027C  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17689  01027E  26D9               	addwf	fsr2l,f,c
 17690  010280  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17691  010282  22DA               	addwfc	fsr2h,f,c
 17692  010284  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17693  010288  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17694  01028C  0E04               	movlw	4
 17695  01028E  0100               	movlb	0	; () banked
 17696  010290  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17697  010292  0E01               	movlw	1
 17698  010294  0100               	movlb	0	; () banked
 17699  010296  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17700  010298  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17701                           
 17702                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 17703  01029C  0100               	movlb	0	; () banked
 17704  01029E  EE20 F003          	lfsr	2,3
 17705  0102A2  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17706  0102A4  26D9               	addwf	fsr2l,f,c
 17707  0102A6  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17708  0102A8  22DA               	addwfc	fsr2h,f,c
 17709  0102AA  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17710  0102AE  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17711  0102B2  0E06               	movlw	6
 17712  0102B4  0100               	movlb	0	; () banked
 17713  0102B6  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17714  0102B8  0E00               	movlw	0
 17715  0102BA  0100               	movlb	0	; () banked
 17716  0102BC  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17717  0102BE  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17718                           
 17719                           ;SPI.c: 90: break;
 17720  0102C2  D036               	goto	l11088
 17721  0102C4                     l11082:
 17722                           
 17723                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 17724  0102C4  0100               	movlb	0	; () banked
 17725  0102C6  EE20 F006          	lfsr	2,6
 17726  0102CA  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17727  0102CC  26D9               	addwf	fsr2l,f,c
 17728  0102CE  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17729  0102D0  22DA               	addwfc	fsr2h,f,c
 17730  0102D2  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17731  0102D6  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17732  0102DA  0E04               	movlw	4
 17733  0102DC  0100               	movlb	0	; () banked
 17734  0102DE  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17735  0102E0  0E01               	movlw	1
 17736  0102E2  0100               	movlb	0	; () banked
 17737  0102E4  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17738  0102E6  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17739                           
 17740                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 17741  0102EA  0100               	movlb	0	; () banked
 17742  0102EC  EE20 F003          	lfsr	2,3
 17743  0102F0  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17744  0102F2  26D9               	addwf	fsr2l,f,c
 17745  0102F4  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17746  0102F6  22DA               	addwfc	fsr2h,f,c
 17747  0102F8  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17748  0102FC  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17749  010300  0E06               	movlw	6
 17750  010302  0100               	movlb	0	; () banked
 17751  010304  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17752  010306  0E01               	movlw	1
 17753  010308  0100               	movlb	0	; () banked
 17754  01030A  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17755  01030C  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17756                           
 17757                           ;SPI.c: 94: break;
 17758  010310  D00F               	goto	l11088
 17759  010312                     l11086:
 17760  010312  0100               	movlb	0	; () banked
 17761  010314  51F6               	movf	SPI_Init@pMode& (0+255),w,b
 17762                           
 17763                           ; Switch size 1, requested type "space"
 17764                           ; Number of cases is 4, Range of values is 0 to 3
 17765                           ; switch strategies available:
 17766                           ; Name         Instructions Cycles
 17767                           ; simple_byte           13     7 (average)
 17768                           ;	Chosen strategy is simple_byte
 17769  010316  0A00               	xorlw	0	; case 0
 17770  010318  B4D8               	btfsc	status,2,c
 17771  01031A  D75F               	goto	l11076
 17772  01031C  0A01               	xorlw	1	; case 1
 17773  01031E  B4D8               	btfsc	status,2,c
 17774  010320  D783               	goto	l11078
 17775  010322  0A03               	xorlw	3	; case 2
 17776  010324  B4D8               	btfsc	status,2,c
 17777  010326  D7A7               	goto	l11080
 17778  010328  0A01               	xorlw	1	; case 3
 17779  01032A  A4D8               	btfss	status,2,c
 17780  01032C  0012               	return	
 17781  01032E  D7CA               	goto	l11082
 17782  010330                     l11088:
 17783                           
 17784                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 17785  010330  0100               	movlb	0	; () banked
 17786  010332  EE20 F006          	lfsr	2,6
 17787  010336  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17788  010338  26D9               	addwf	fsr2l,f,c
 17789  01033A  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17790  01033C  22DA               	addwfc	fsr2h,f,c
 17791  01033E  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17792  010342  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17793  010346  0E07               	movlw	7
 17794  010348  0100               	movlb	0	; () banked
 17795  01034A  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17796  01034C  0E00               	movlw	0
 17797  01034E  0100               	movlb	0	; () banked
 17798  010350  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17799  010352  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17800                           
 17801                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 17802  010356  0100               	movlb	0	; () banked
 17803  010358  EE20 F006          	lfsr	2,6
 17804  01035C  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17805  01035E  26D9               	addwf	fsr2l,f,c
 17806  010360  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17807  010362  22DA               	addwfc	fsr2h,f,c
 17808  010364  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17809  010368  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17810  01036C  0E06               	movlw	6
 17811  01036E  0100               	movlb	0	; () banked
 17812  010370  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17813  010372  0E00               	movlw	0
 17814  010374  0100               	movlb	0	; () banked
 17815  010376  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17816  010378  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17817                           
 17818                           ;SPI.c: 106: Timer2_Init(pClock);
 17819  01037C  C0F1  F0D1         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 17820  010380  C0F2  F0D2         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 17821  010384  C0F3  F0D3         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 17822  010388  C0F4  F0D4         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 17823  01038C  ECE5  F08F         	call	_Timer2_Init	;wreg free
 17824                           
 17825                           ;SPI.c: 112: SPI_DisableISR(pInput);
 17826  010390  C0F7  F0C4         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 17827  010394  C0F8  F0C5         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 17828  010398  ECAA  F0A1         	call	_SPI_DisableISR	;wreg free
 17829                           
 17830                           ;SPI.c: 116: switch (pChannel)
 17831  01039C  D004               	goto	l11096
 17832  01039E                     l615:
 17833                           
 17834                           ; BSR set to: 0
 17835  01039E  869F               	bsf	3999,3,c	;volatile
 17836  0103A0  D00B               	goto	l11098
 17837  0103A2                     l617:
 17838                           
 17839                           ; BSR set to: 0
 17840  0103A2  8EA5               	bsf	4005,7,c	;volatile
 17841  0103A4  D009               	goto	l11098
 17842  0103A6                     l11096:
 17843  0103A6  0100               	movlb	0	; () banked
 17844  0103A8  51F5               	movf	SPI_Init@pChannel& (0+255),w,b
 17845                           
 17846                           ; Switch size 1, requested type "space"
 17847                           ; Number of cases is 2, Range of values is 0 to 1
 17848                           ; switch strategies available:
 17849                           ; Name         Instructions Cycles
 17850                           ; simple_byte            7     4 (average)
 17851                           ;	Chosen strategy is simple_byte
 17852  0103AA  0A00               	xorlw	0	; case 0
 17853  0103AC  B4D8               	btfsc	status,2,c
 17854  0103AE  D7F7               	goto	l615
 17855  0103B0  0A01               	xorlw	1	; case 1
 17856  0103B2  A4D8               	btfss	status,2,c
 17857  0103B4  0012               	return	
 17858  0103B6  D7F5               	goto	l617
 17859  0103B8                     l11098:
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;SPI.c: 124: SPI_DCS(pInput);
 17863  0103B8  C0F7  F0C4         	movff	SPI_Init@pInput,SPI_DCS@pInput
 17864  0103BC  C0F8  F0C5         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 17865  0103C0  ECE3  F0A0         	call	_SPI_DCS	;wreg free
 17866                           
 17867                           ;SPI.c: 126: pInput->mBusy = 0;
 17868  0103C4  C0F7  FFD9         	movff	SPI_Init@pInput,fsr2l
 17869  0103C8  C0F8  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 17870  0103CC  0E00               	movlw	0
 17871  0103CE  6EDF               	movwf	indf2,c
 17872                           
 17873                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 17874  0103D0  0100               	movlb	0	; () banked
 17875  0103D2  EE20 F006          	lfsr	2,6
 17876  0103D6  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17877  0103D8  26D9               	addwf	fsr2l,f,c
 17878  0103DA  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17879  0103DC  22DA               	addwfc	fsr2h,f,c
 17880  0103DE  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 17881  0103E2  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 17882  0103E6  0E00               	movlw	0
 17883  0103E8  0100               	movlb	0	; () banked
 17884  0103EA  6FD1               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17885  0103EC  0E03               	movlw	3
 17886  0103EE  0100               	movlb	0	; () banked
 17887  0103F0  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 17888  0103F2  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 17889                           
 17890                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17891  0103F6  0100               	movlb	0	; () banked
 17892  0103F8  EE20 F006          	lfsr	2,6
 17893  0103FC  51F7               	movf	SPI_Init@pInput& (0+255),w,b
 17894  0103FE  26D9               	addwf	fsr2l,f,c
 17895  010400  51F8               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17896  010402  22DA               	addwfc	fsr2h,f,c
 17897  010404  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 17898  010408  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 17899  01040C  0E05               	movlw	5
 17900  01040E  0100               	movlb	0	; () banked
 17901  010410  6FC6               	movwf	Byte_SetBit@pBit& (0+255),b
 17902  010412  0E01               	movlw	1
 17903  010414  0100               	movlb	0	; () banked
 17904  010416  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 17905  010418  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 17906  01041C  0012               	return		;funcret
 17907  01041E                     __end_of_SPI_Init:
 17908                           	opt stack 0
 17909                           tosu	equ	0xFFF
 17910                           tosh	equ	0xFFE
 17911                           tosl	equ	0xFFD
 17912                           pclath	equ	0xFFA
 17913                           tblptru	equ	0xFF8
 17914                           tblptrh	equ	0xFF7
 17915                           tblptrl	equ	0xFF6
 17916                           tablat	equ	0xFF5
 17917                           prodh	equ	0xFF4
 17918                           prodl	equ	0xFF3
 17919                           intcon	equ	0xFF2
 17920                           postinc0	equ	0xFEE
 17921                           wreg	equ	0xFE8
 17922                           indf1	equ	0xFE7
 17923                           postdec1	equ	0xFE5
 17924                           fsr1h	equ	0xFE2
 17925                           fsr1l	equ	0xFE1
 17926                           indf2	equ	0xFDF
 17927                           postinc2	equ	0xFDE
 17928                           postdec2	equ	0xFDD
 17929                           plusw2	equ	0xFDB
 17930                           fsr2h	equ	0xFDA
 17931                           fsr2l	equ	0xFD9
 17932                           status	equ	0xFD8
 17933                           
 17934 ;; *************** function _Timer2_Init *****************
 17935 ;; Defined at:
 17936 ;;		line 10 in file "Library/Timer2.c"
 17937 ;; Parameters:    Size  Location     Type
 17938 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 17941 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 17942 ;;  RDIV            4   18[BANK0 ] unsigned long 
 17943 ;; Return value:  Size  Location     Type
 17944 ;;                  1    wreg      void 
 17945 ;; Registers used:
 17946 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17947 ;; Tracked objects:
 17948 ;;		On entry : 0/0
 17949 ;;		On exit  : 0/0
 17950 ;;		Unchanged: 0/0
 17951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17952 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;Total ram usage:       17 bytes
 17957 ;; Hardware stack levels used:    1
 17958 ;; Hardware stack levels required when called:    8
 17959 ;; This function calls:
 17960 ;;		_Timer2_Clear
 17961 ;;		___lldiv
 17962 ;; This function is called by:
 17963 ;;		_SPI_Init
 17964 ;; This function uses a non-reentrant model
 17965 ;;
 17966                           
 17967                           	psect	text101
 17968  011FCA                     __ptext101:
 17969                           	opt stack 0
 17970  011FCA                     _Timer2_Init:
 17971                           	opt stack 18
 17972                           
 17973                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 17974                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 17975                           ;Timer2.c: 14: static UINT8 PRE = 0;
 17976                           ;Timer2.c: 15: static UINT32 DIV = 0;
 17977                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 17978                           
 17979                           ;incstack = 0
 17980  011FCA  0E00               	movlw	0
 17981  011FCC  0100               	movlb	0	; () banked
 17982  011FCE  6FDA               	movwf	Timer2_Init@pCPUClock& (0+255),b
 17983  011FD0  0E6C               	movlw	108
 17984  011FD2  6FDB               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 17985  011FD4  0EDC               	movlw	220
 17986  011FD6  6FDC               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 17987  011FD8  0E02               	movlw	2
 17988  011FDA  6FDD               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 17989                           
 17990                           ; BSR set to: 0
 17991                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 17992                           ;Timer2.c: 20: pFrequency *= 2;
 17993  011FDC  0100               	movlb	0	; () banked
 17994  011FDE  90D8               	bcf	status,0,c
 17995  011FE0  37D1               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 17996  011FE2  37D2               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 17997  011FE4  37D3               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 17998  011FE6  37D4               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;Timer2.c: 23: pCPUClock /= 4;
 18002  011FE8  0E02               	movlw	2
 18003  011FEA  0100               	movlb	0	; () banked
 18004  011FEC  6FD5               	movwf	??_Timer2_Init& (0+255),b
 18005  011FEE                     u7295:
 18006  011FEE  90D8               	bcf	status,0,c
 18007  011FF0  0100               	movlb	0	; () banked
 18008  011FF2  33DD               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 18009  011FF4  33DC               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 18010  011FF6  33DB               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 18011  011FF8  33DA               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 18012  011FFA  0100               	movlb	0	; () banked
 18013  011FFC  2FD5               	decfsz	??_Timer2_Init& (0+255),f,b
 18014  011FFE  D7F7               	goto	u7295
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 18018  012000  C0DA  F0C4         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 18019  012004  C0DB  F0C5         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 18020  012008  C0DC  F0C6         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 18021  01200C  C0DD  F0C7         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 18022  012010  C0D1  F0C8         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 18023  012014  C0D2  F0C9         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 18024  012018  C0D3  F0CA         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 18025  01201C  C0D4  F0CB         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 18026  012020  ECFF  F093         	call	___lldiv	;wreg free
 18027  012024  C0C4  F0DE         	movff	?___lldiv,Timer2_Init@DIVIDE
 18028  012028  C0C5  F0DF         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 18029  01202C  C0C6  F0E0         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 18030  012030  C0C7  F0E1         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 18031                           
 18032                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 18033  012034  D00E               	goto	l10866
 18034  012036                     l10858:
 18035                           
 18036                           ;Timer2.c: 28: {
 18037                           ;Timer2.c: 29: RDIV = 0;
 18038  012036  0E00               	movlw	0
 18039  012038  0100               	movlb	0	; () banked
 18040  01203A  6FD6               	movwf	Timer2_Init@RDIV& (0+255),b
 18041  01203C  0E00               	movlw	0
 18042  01203E  6FD7               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 18043  012040  0E00               	movlw	0
 18044  012042  6FD8               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 18045  012044  0E00               	movlw	0
 18046  012046  6FD9               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 18047                           
 18048                           ; BSR set to: 0
 18049                           ;Timer2.c: 30: INDEX ++;
 18050  012048  2A2F               	incf	Timer2_Init@INDEX,f,c
 18051                           
 18052                           ; BSR set to: 0
 18053                           ;Timer2.c: 31: if (INDEX >= 3)
 18054  01204A  0E02               	movlw	2
 18055  01204C  642F               	cpfsgt	Timer2_Init@INDEX,c
 18056  01204E  D001               	goto	l10866
 18057  012050  D025               	goto	l10868
 18058  012052                     l10866:
 18059  012052  C0DE  F0C4         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 18060  012056  C0DF  F0C5         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 18061  01205A  C0E0  F0C6         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 18062  01205E  C0E1  F0C7         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 18063  012062  502F               	movf	Timer2_Init@INDEX,w,c
 18064  012064  0D01               	mullw	1
 18065  012066  0E84               	movlw	low Timer2_Init@PRESCALE
 18066  012068  24F3               	addwf	prodl,w,c
 18067  01206A  6EF6               	movwf	tblptrl,c
 18068  01206C  0EFD               	movlw	high Timer2_Init@PRESCALE
 18069  01206E  20F4               	addwfc	prodh,w,c
 18070  012070  6EF7               	movwf	tblptrh,c
 18071  012072                     	if	1	;There are 3 active tblptr bytes
 18072  012072  6AF8               	clrf	tblptru,c
 18073  012074  0E00               	movlw	low (__mediumconst shr (0+16))
 18074  012076  22F8               	addwfc	tblptru,f,c
 18075  012078                     	endif
 18076  012078  0008               	tblrd		*
 18077  01207A  50F5               	movf	tablat,w,c
 18078  01207C  0100               	movlb	0	; () banked
 18079  01207E  6FC8               	movwf	___lldiv@divisor& (0+255),b
 18080  012080  6BC9               	clrf	(___lldiv@divisor+1)& (0+255),b
 18081  012082  6BCA               	clrf	(___lldiv@divisor+2)& (0+255),b
 18082  012084  6BCB               	clrf	(___lldiv@divisor+3)& (0+255),b
 18083  012086  ECFF  F093         	call	___lldiv	;wreg free
 18084  01208A  0100               	movlb	0	; () banked
 18085  01208C  51C7               	movf	(?___lldiv+3)& (0+255),w,b
 18086  01208E  0100               	movlb	0	; () banked
 18087  012090  11C6               	iorwf	(?___lldiv+2)& (0+255),w,b
 18088  012092  E1D1               	bnz	l10858
 18089  012094  0100               	movlb	0	; () banked
 18090  012096  05C5               	decf	(?___lldiv+1)& (0+255),w,b
 18091  012098  B0D8               	btfsc	status,0,c
 18092  01209A  D7CD               	goto	l10858
 18093  01209C                     l10868:
 18094                           
 18095                           ; BSR set to: 0
 18096                           ;Timer2.c: 33: }
 18097                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 18098  01209C  50CA               	movf	4042,w,c	;volatile
 18099  01209E  182F               	xorwf	Timer2_Init@INDEX,w,c
 18100  0120A0  0BFC               	andlw	-4
 18101  0120A2  182F               	xorwf	Timer2_Init@INDEX,w,c
 18102  0120A4  6ECA               	movwf	4042,c	;volatile
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 18106  0120A6  84CA               	bsf	4042,2,c	;volatile
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;Timer2.c: 44: Timer2_Clear();
 18110  0120A8  EC44  F0A3         	call	_Timer2_Clear	;wreg free
 18111                           
 18112                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 18113  0120AC  502F               	movf	Timer2_Init@INDEX,w,c
 18114  0120AE  0D01               	mullw	1
 18115  0120B0  0E84               	movlw	low Timer2_Init@PRESCALE
 18116  0120B2  24F3               	addwf	prodl,w,c
 18117  0120B4  6EF6               	movwf	tblptrl,c
 18118  0120B6  0EFD               	movlw	high Timer2_Init@PRESCALE
 18119  0120B8  20F4               	addwfc	prodh,w,c
 18120  0120BA  6EF7               	movwf	tblptrh,c
 18121  0120BC                     	if	1	;There are 3 active tblptr bytes
 18122  0120BC  6AF8               	clrf	tblptru,c
 18123  0120BE  0E00               	movlw	low (__mediumconst shr (0+16))
 18124  0120C0  22F8               	addwfc	tblptru,f,c
 18125  0120C2                     	endif
 18126  0120C2  0008               	tblrd		*
 18127  0120C4  CFF5 F02E          	movff	tablat,Timer2_Init@PRE
 18128                           
 18129                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 18130  0120C8  0EFF               	movlw	255
 18131  0120CA  0100               	movlb	0	; () banked
 18132  0120CC  25DE               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 18133  0120CE  0100               	movlb	0	; () banked
 18134  0120D0  6F60               	movwf	Timer2_Init@DIV& (0+255),b
 18135  0120D2  0EFF               	movlw	255
 18136  0120D4  0100               	movlb	0	; () banked
 18137  0120D6  21DF               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 18138  0120D8  0100               	movlb	0	; () banked
 18139  0120DA  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 18140  0120DC  0EFF               	movlw	255
 18141  0120DE  0100               	movlb	0	; () banked
 18142  0120E0  21E0               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 18143  0120E2  0100               	movlb	0	; () banked
 18144  0120E4  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 18145  0120E6  0EFF               	movlw	255
 18146  0120E8  0100               	movlb	0	; () banked
 18147  0120EA  21E1               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 18148  0120EC  0100               	movlb	0	; () banked
 18149  0120EE  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 18150                           
 18151                           ; BSR set to: 0
 18152                           ;Timer2.c: 48: INDEX = DIV/PRE;
 18153  0120F0  C060  F0C4         	movff	Timer2_Init@DIV,___lldiv@dividend
 18154  0120F4  C061  F0C5         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 18155  0120F8  C062  F0C6         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 18156  0120FC  C063  F0C7         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 18157  012100  502E               	movf	Timer2_Init@PRE,w,c
 18158  012102  0100               	movlb	0	; () banked
 18159  012104  6FC8               	movwf	___lldiv@divisor& (0+255),b
 18160  012106  6BC9               	clrf	(___lldiv@divisor+1)& (0+255),b
 18161  012108  6BCA               	clrf	(___lldiv@divisor+2)& (0+255),b
 18162  01210A  6BCB               	clrf	(___lldiv@divisor+3)& (0+255),b
 18163  01210C  ECFF  F093         	call	___lldiv	;wreg free
 18164  012110  0100               	movlb	0	; () banked
 18165  012112  51C4               	movf	?___lldiv& (0+255),w,b
 18166  012114  6E2F               	movwf	Timer2_Init@INDEX,c
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;Timer2.c: 49: PR2 = INDEX;
 18170  012116  C02F  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 18171                           
 18172                           ; BSR set to: 0
 18173  01211A  0012               	return		;funcret
 18174  01211C                     __end_of_Timer2_Init:
 18175                           	opt stack 0
 18176                           tosu	equ	0xFFF
 18177                           tosh	equ	0xFFE
 18178                           tosl	equ	0xFFD
 18179                           pclath	equ	0xFFA
 18180                           tblptru	equ	0xFF8
 18181                           tblptrh	equ	0xFF7
 18182                           tblptrl	equ	0xFF6
 18183                           tablat	equ	0xFF5
 18184                           prodh	equ	0xFF4
 18185                           prodl	equ	0xFF3
 18186                           intcon	equ	0xFF2
 18187                           postinc0	equ	0xFEE
 18188                           wreg	equ	0xFE8
 18189                           indf1	equ	0xFE7
 18190                           postdec1	equ	0xFE5
 18191                           fsr1h	equ	0xFE2
 18192                           fsr1l	equ	0xFE1
 18193                           indf2	equ	0xFDF
 18194                           postinc2	equ	0xFDE
 18195                           postdec2	equ	0xFDD
 18196                           plusw2	equ	0xFDB
 18197                           fsr2h	equ	0xFDA
 18198                           fsr2l	equ	0xFD9
 18199                           status	equ	0xFD8
 18200                           
 18201 ;; *************** function ___lldiv *****************
 18202 ;; Defined at:
 18203 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 18204 ;; Parameters:    Size  Location     Type
 18205 ;;  dividend        4    0[BANK0 ] unsigned long 
 18206 ;;  divisor         4    4[BANK0 ] unsigned long 
 18207 ;; Auto vars:     Size  Location     Type
 18208 ;;  quotient        4    8[BANK0 ] unsigned long 
 18209 ;;  counter         1   12[BANK0 ] unsigned char 
 18210 ;; Return value:  Size  Location     Type
 18211 ;;                  4    0[BANK0 ] unsigned long 
 18212 ;; Registers used:
 18213 ;;		wreg, status,2, status,0
 18214 ;; Tracked objects:
 18215 ;;		On entry : 0/0
 18216 ;;		On exit  : 0/0
 18217 ;;		Unchanged: 0/0
 18218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18219 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18220 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18222 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18223 ;;Total ram usage:       13 bytes
 18224 ;; Hardware stack levels used:    1
 18225 ;; Hardware stack levels required when called:    7
 18226 ;; This function calls:
 18227 ;;		Nothing
 18228 ;; This function is called by:
 18229 ;;		_Timer2_Init
 18230 ;;		_rand_between
 18231 ;;		_I2C_Init
 18232 ;;		_Timer0_Init
 18233 ;; This function uses a non-reentrant model
 18234 ;;
 18235                           
 18236                           	psect	text102
 18237  0127FE                     __ptext102:
 18238                           	opt stack 0
 18239  0127FE                     ___lldiv:
 18240                           	opt stack 18
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;incstack = 0
 18244  0127FE  0E00               	movlw	0
 18245  012800  0100               	movlb	0	; () banked
 18246  012802  6FCC               	movwf	___lldiv@quotient& (0+255),b
 18247  012804  0E00               	movlw	0
 18248  012806  6FCD               	movwf	(___lldiv@quotient+1)& (0+255),b
 18249  012808  0E00               	movlw	0
 18250  01280A  6FCE               	movwf	(___lldiv@quotient+2)& (0+255),b
 18251  01280C  0E00               	movlw	0
 18252  01280E  6FCF               	movwf	(___lldiv@quotient+3)& (0+255),b
 18253                           
 18254                           ; BSR set to: 0
 18255  012810  0100               	movlb	0	; () banked
 18256  012812  51C8               	movf	___lldiv@divisor& (0+255),w,b
 18257  012814  0100               	movlb	0	; () banked
 18258  012816  11C9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 18259  012818  0100               	movlb	0	; () banked
 18260  01281A  11CA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 18261  01281C  0100               	movlb	0	; () banked
 18262  01281E  11CB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 18263  012820  B4D8               	btfsc	status,2,c
 18264  012822  D042               	goto	l2436
 18265                           
 18266                           ; BSR set to: 0
 18267  012824  0E01               	movlw	1
 18268  012826  0100               	movlb	0	; () banked
 18269  012828  6FD0               	movwf	___lldiv@counter& (0+255),b
 18270  01282A  D008               	goto	l10710
 18271  01282C                     l10708:
 18272                           
 18273                           ; BSR set to: 0
 18274  01282C  0100               	movlb	0	; () banked
 18275  01282E  90D8               	bcf	status,0,c
 18276  012830  37C8               	rlcf	___lldiv@divisor& (0+255),f,b
 18277  012832  37C9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 18278  012834  37CA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 18279  012836  37CB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 18280  012838  0100               	movlb	0	; () banked
 18281  01283A  2BD0               	incf	___lldiv@counter& (0+255),f,b
 18282  01283C                     l10710:
 18283                           
 18284                           ; BSR set to: 0
 18285  01283C  0100               	movlb	0	; () banked
 18286  01283E  AFCB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 18287  012840  D7F5               	goto	l10708
 18288  012842                     l10712:
 18289                           
 18290                           ; BSR set to: 0
 18291  012842  0100               	movlb	0	; () banked
 18292  012844  90D8               	bcf	status,0,c
 18293  012846  37CC               	rlcf	___lldiv@quotient& (0+255),f,b
 18294  012848  37CD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 18295  01284A  37CE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 18296  01284C  37CF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 18297                           
 18298                           ; BSR set to: 0
 18299  01284E  0100               	movlb	0	; () banked
 18300  012850  51C8               	movf	___lldiv@divisor& (0+255),w,b
 18301  012852  0100               	movlb	0	; () banked
 18302  012854  5DC4               	subwf	___lldiv@dividend& (0+255),w,b
 18303  012856  0100               	movlb	0	; () banked
 18304  012858  51C9               	movf	(___lldiv@divisor+1)& (0+255),w,b
 18305  01285A  0100               	movlb	0	; () banked
 18306  01285C  59C5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 18307  01285E  0100               	movlb	0	; () banked
 18308  012860  51CA               	movf	(___lldiv@divisor+2)& (0+255),w,b
 18309  012862  0100               	movlb	0	; () banked
 18310  012864  59C6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 18311  012866  0100               	movlb	0	; () banked
 18312  012868  51CB               	movf	(___lldiv@divisor+3)& (0+255),w,b
 18313  01286A  0100               	movlb	0	; () banked
 18314  01286C  59C7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 18315  01286E  A0D8               	btfss	status,0,c
 18316  012870  D012               	goto	l10720
 18317                           
 18318                           ; BSR set to: 0
 18319  012872  0100               	movlb	0	; () banked
 18320  012874  51C8               	movf	___lldiv@divisor& (0+255),w,b
 18321  012876  0100               	movlb	0	; () banked
 18322  012878  5FC4               	subwf	___lldiv@dividend& (0+255),f,b
 18323  01287A  0100               	movlb	0	; () banked
 18324  01287C  51C9               	movf	(___lldiv@divisor+1)& (0+255),w,b
 18325  01287E  0100               	movlb	0	; () banked
 18326  012880  5BC5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 18327  012882  0100               	movlb	0	; () banked
 18328  012884  51CA               	movf	(___lldiv@divisor+2)& (0+255),w,b
 18329  012886  0100               	movlb	0	; () banked
 18330  012888  5BC6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 18331  01288A  0100               	movlb	0	; () banked
 18332  01288C  51CB               	movf	(___lldiv@divisor+3)& (0+255),w,b
 18333  01288E  0100               	movlb	0	; () banked
 18334  012890  5BC7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 18335                           
 18336                           ; BSR set to: 0
 18337  012892  0100               	movlb	0	; () banked
 18338  012894  81CC               	bsf	___lldiv@quotient& (0+255),0,b
 18339  012896                     l10720:
 18340                           
 18341                           ; BSR set to: 0
 18342  012896  0100               	movlb	0	; () banked
 18343  012898  90D8               	bcf	status,0,c
 18344  01289A  33CB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 18345  01289C  33CA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 18346  01289E  33C9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 18347  0128A0  33C8               	rrcf	___lldiv@divisor& (0+255),f,b
 18348                           
 18349                           ; BSR set to: 0
 18350  0128A2  0100               	movlb	0	; () banked
 18351  0128A4  2FD0               	decfsz	___lldiv@counter& (0+255),f,b
 18352  0128A6  D7CD               	goto	l10712
 18353  0128A8                     l2436:
 18354                           
 18355                           ; BSR set to: 0
 18356  0128A8  C0CC  F0C4         	movff	___lldiv@quotient,?___lldiv
 18357  0128AC  C0CD  F0C5         	movff	___lldiv@quotient+1,?___lldiv+1
 18358  0128B0  C0CE  F0C6         	movff	___lldiv@quotient+2,?___lldiv+2
 18359  0128B4  C0CF  F0C7         	movff	___lldiv@quotient+3,?___lldiv+3
 18360                           
 18361                           ; BSR set to: 0
 18362  0128B8  0012               	return		;funcret
 18363  0128BA                     __end_of___lldiv:
 18364                           	opt stack 0
 18365                           tosu	equ	0xFFF
 18366                           tosh	equ	0xFFE
 18367                           tosl	equ	0xFFD
 18368                           pclath	equ	0xFFA
 18369                           tblptru	equ	0xFF8
 18370                           tblptrh	equ	0xFF7
 18371                           tblptrl	equ	0xFF6
 18372                           tablat	equ	0xFF5
 18373                           prodh	equ	0xFF4
 18374                           prodl	equ	0xFF3
 18375                           intcon	equ	0xFF2
 18376                           postinc0	equ	0xFEE
 18377                           wreg	equ	0xFE8
 18378                           indf1	equ	0xFE7
 18379                           postdec1	equ	0xFE5
 18380                           fsr1h	equ	0xFE2
 18381                           fsr1l	equ	0xFE1
 18382                           indf2	equ	0xFDF
 18383                           postinc2	equ	0xFDE
 18384                           postdec2	equ	0xFDD
 18385                           plusw2	equ	0xFDB
 18386                           fsr2h	equ	0xFDA
 18387                           fsr2l	equ	0xFD9
 18388                           status	equ	0xFD8
 18389                           
 18390 ;; *************** function _Timer2_Clear *****************
 18391 ;; Defined at:
 18392 ;;		line 3 in file "Library/Timer2.c"
 18393 ;; Parameters:    Size  Location     Type
 18394 ;;		None
 18395 ;; Auto vars:     Size  Location     Type
 18396 ;;		None
 18397 ;; Return value:  Size  Location     Type
 18398 ;;                  1    wreg      void 
 18399 ;; Registers used:
 18400 ;;		None
 18401 ;; Tracked objects:
 18402 ;;		On entry : 0/0
 18403 ;;		On exit  : 0/0
 18404 ;;		Unchanged: 0/0
 18405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18410 ;;Total ram usage:        0 bytes
 18411 ;; Hardware stack levels used:    1
 18412 ;; Hardware stack levels required when called:    7
 18413 ;; This function calls:
 18414 ;;		Nothing
 18415 ;; This function is called by:
 18416 ;;		_Timer2_Init
 18417 ;; This function uses a non-reentrant model
 18418 ;;
 18419                           
 18420                           	psect	text103
 18421  014688                     __ptext103:
 18422                           	opt stack 0
 18423  014688                     _Timer2_Clear:
 18424                           	opt stack 18
 18425                           
 18426                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;incstack = 0
 18430  014688  929E               	bcf	3998,1,c	;volatile
 18431                           
 18432                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 18433  01468A  929D               	bcf	3997,1,c	;volatile
 18434                           
 18435                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 18436  01468C  929F               	bcf	3999,1,c	;volatile
 18437  01468E  0012               	return		;funcret
 18438  014690                     __end_of_Timer2_Clear:
 18439                           	opt stack 0
 18440                           tosu	equ	0xFFF
 18441                           tosh	equ	0xFFE
 18442                           tosl	equ	0xFFD
 18443                           pclath	equ	0xFFA
 18444                           tblptru	equ	0xFF8
 18445                           tblptrh	equ	0xFF7
 18446                           tblptrl	equ	0xFF6
 18447                           tablat	equ	0xFF5
 18448                           prodh	equ	0xFF4
 18449                           prodl	equ	0xFF3
 18450                           intcon	equ	0xFF2
 18451                           postinc0	equ	0xFEE
 18452                           wreg	equ	0xFE8
 18453                           indf1	equ	0xFE7
 18454                           postdec1	equ	0xFE5
 18455                           fsr1h	equ	0xFE2
 18456                           fsr1l	equ	0xFE1
 18457                           indf2	equ	0xFDF
 18458                           postinc2	equ	0xFDE
 18459                           postdec2	equ	0xFDD
 18460                           plusw2	equ	0xFDB
 18461                           fsr2h	equ	0xFDA
 18462                           fsr2l	equ	0xFD9
 18463                           status	equ	0xFD8
 18464                           
 18465 ;; *************** function _SPI_DisableISR *****************
 18466 ;; Defined at:
 18467 ;;		line 181 in file "Library/SPI.c"
 18468 ;; Parameters:    Size  Location     Type
 18469 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18470 ;;		 -> SPI1(11), SPI2(11), 
 18471 ;; Auto vars:     Size  Location     Type
 18472 ;;		None
 18473 ;; Return value:  Size  Location     Type
 18474 ;;                  1    wreg      void 
 18475 ;; Registers used:
 18476 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18477 ;; Tracked objects:
 18478 ;;		On entry : 0/0
 18479 ;;		On exit  : 0/0
 18480 ;;		Unchanged: 0/0
 18481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18482 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18486 ;;Total ram usage:        2 bytes
 18487 ;; Hardware stack levels used:    1
 18488 ;; Hardware stack levels required when called:    7
 18489 ;; This function calls:
 18490 ;;		Nothing
 18491 ;; This function is called by:
 18492 ;;		_SPI_Init
 18493 ;; This function uses a non-reentrant model
 18494 ;;
 18495                           
 18496                           	psect	text104
 18497  014354                     __ptext104:
 18498                           	opt stack 0
 18499  014354                     _SPI_DisableISR:
 18500                           	opt stack 19
 18501                           
 18502                           ;SPI.c: 183: switch (pInput->mChannel)
 18503                           
 18504                           ;incstack = 0
 18505  014354  D004               	goto	l10886
 18506  014356                     l655:
 18507                           
 18508                           ; BSR set to: 0
 18509  014356  969D               	bcf	3997,3,c	;volatile
 18510  014358  0012               	return	
 18511  01435A                     l657:
 18512                           
 18513                           ; BSR set to: 0
 18514  01435A  9EA3               	bcf	4003,7,c	;volatile
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;SPI.c: 188: };
 18518                           
 18519                           ; BSR set to: 0
 18520                           
 18521                           ;SPI.c: 187: default: return;
 18522  01435C  0012               	return	
 18523  01435E                     l10886:
 18524  01435E  0100               	movlb	0	; () banked
 18525  014360  EE20 F002          	lfsr	2,2
 18526  014364  51C4               	movf	SPI_DisableISR@pInput& (0+255),w,b
 18527  014366  26D9               	addwf	fsr2l,f,c
 18528  014368  51C5               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 18529  01436A  22DA               	addwfc	fsr2h,f,c
 18530  01436C  50DF               	movf	indf2,w,c
 18531                           
 18532                           ; Switch size 1, requested type "space"
 18533                           ; Number of cases is 2, Range of values is 0 to 1
 18534                           ; switch strategies available:
 18535                           ; Name         Instructions Cycles
 18536                           ; simple_byte            7     4 (average)
 18537                           ;	Chosen strategy is simple_byte
 18538  01436E  0A00               	xorlw	0	; case 0
 18539  014370  B4D8               	btfsc	status,2,c
 18540  014372  D7F1               	goto	l655
 18541  014374  0A01               	xorlw	1	; case 1
 18542  014376  A4D8               	btfss	status,2,c
 18543  014378  0012               	return	
 18544  01437A  D7EF               	goto	l657
 18545  01437C                     __end_of_SPI_DisableISR:
 18546                           	opt stack 0
 18547                           tosu	equ	0xFFF
 18548                           tosh	equ	0xFFE
 18549                           tosl	equ	0xFFD
 18550                           pclath	equ	0xFFA
 18551                           tblptru	equ	0xFF8
 18552                           tblptrh	equ	0xFF7
 18553                           tblptrl	equ	0xFF6
 18554                           tablat	equ	0xFF5
 18555                           prodh	equ	0xFF4
 18556                           prodl	equ	0xFF3
 18557                           intcon	equ	0xFF2
 18558                           postinc0	equ	0xFEE
 18559                           wreg	equ	0xFE8
 18560                           indf1	equ	0xFE7
 18561                           postdec1	equ	0xFE5
 18562                           fsr1h	equ	0xFE2
 18563                           fsr1l	equ	0xFE1
 18564                           indf2	equ	0xFDF
 18565                           postinc2	equ	0xFDE
 18566                           postdec2	equ	0xFDD
 18567                           plusw2	equ	0xFDB
 18568                           fsr2h	equ	0xFDA
 18569                           fsr2l	equ	0xFD9
 18570                           status	equ	0xFD8
 18571                           
 18572 ;; *************** function _SPI_DCS *****************
 18573 ;; Defined at:
 18574 ;;		line 219 in file "Library/SPI.c"
 18575 ;; Parameters:    Size  Location     Type
 18576 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18577 ;;		 -> SPI1(11), SPI2(11), 
 18578 ;; Auto vars:     Size  Location     Type
 18579 ;;		None
 18580 ;; Return value:  Size  Location     Type
 18581 ;;                  1    wreg      void 
 18582 ;; Registers used:
 18583 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18584 ;; Tracked objects:
 18585 ;;		On entry : 0/0
 18586 ;;		On exit  : 0/0
 18587 ;;		Unchanged: 0/0
 18588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18589 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18593 ;;Total ram usage:        2 bytes
 18594 ;; Hardware stack levels used:    1
 18595 ;; Hardware stack levels required when called:    7
 18596 ;; This function calls:
 18597 ;;		Nothing
 18598 ;; This function is called by:
 18599 ;;		_SPI_Init
 18600 ;; This function uses a non-reentrant model
 18601 ;;
 18602                           
 18603                           	psect	text105
 18604  0141C6                     __ptext105:
 18605                           	opt stack 0
 18606  0141C6                     _SPI_DCS:
 18607                           	opt stack 19
 18608                           
 18609                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 18610                           
 18611                           ; BSR set to: 0
 18612                           ;incstack = 0
 18613  0141C6  0100               	movlb	0	; () banked
 18614  0141C8  EE20 F002          	lfsr	2,2
 18615  0141CC  51C4               	movf	SPI_DCS@pInput& (0+255),w,b
 18616  0141CE  26D9               	addwf	fsr2l,f,c
 18617  0141D0  51C5               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 18618  0141D2  22DA               	addwfc	fsr2h,f,c
 18619  0141D4  50DF               	movf	indf2,w,c
 18620  0141D6  A4D8               	btfss	status,2,c
 18621  0141D8  D007               	goto	l10892
 18622                           
 18623                           ; BSR set to: 0
 18624                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 18625  0141DA  C096  FFD9         	movff	_PortC+4,fsr2l
 18626  0141DE  C097  FFDA         	movff	_PortC+5,fsr2h
 18627  0141E2  0100               	movlb	0	; () banked
 18628  0141E4  84DF               	bsf	indf2,2,c
 18629  0141E6  0012               	return	
 18630  0141E8                     l10892:
 18631                           
 18632                           ; BSR set to: 0
 18633                           ;SPI.c: 223: else
 18634                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 18635  0141E8  C08C  FFD9         	movff	_PortD+4,fsr2l
 18636  0141EC  C08D  FFDA         	movff	_PortD+5,fsr2h
 18637  0141F0  0100               	movlb	0	; () banked
 18638  0141F2  8EDF               	bsf	indf2,7,c
 18639  0141F4  0012               	return	
 18640  0141F6                     __end_of_SPI_DCS:
 18641                           	opt stack 0
 18642                           tosu	equ	0xFFF
 18643                           tosh	equ	0xFFE
 18644                           tosl	equ	0xFFD
 18645                           pclath	equ	0xFFA
 18646                           tblptru	equ	0xFF8
 18647                           tblptrh	equ	0xFF7
 18648                           tblptrl	equ	0xFF6
 18649                           tablat	equ	0xFF5
 18650                           prodh	equ	0xFF4
 18651                           prodl	equ	0xFF3
 18652                           intcon	equ	0xFF2
 18653                           postinc0	equ	0xFEE
 18654                           wreg	equ	0xFE8
 18655                           indf1	equ	0xFE7
 18656                           postdec1	equ	0xFE5
 18657                           fsr1h	equ	0xFE2
 18658                           fsr1l	equ	0xFE1
 18659                           indf2	equ	0xFDF
 18660                           postinc2	equ	0xFDE
 18661                           postdec2	equ	0xFDD
 18662                           plusw2	equ	0xFDB
 18663                           fsr2h	equ	0xFDA
 18664                           fsr2l	equ	0xFD9
 18665                           status	equ	0xFD8
 18666                           
 18667 ;; *************** function _Button_Init *****************
 18668 ;; Defined at:
 18669 ;;		line 18 in file "Library/Button.c"
 18670 ;; Parameters:    Size  Location     Type
 18671 ;;  pInput          2    7[BANK2 ] const PTR struct Button
 18672 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 18673 ;;  pThreshold      2    9[BANK2 ] unsigned short 
 18674 ;;  pInitIO         3   11[BANK2 ] PTR FTN()void 
 18675 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 18676 ;;  pGetState       3   14[BANK2 ] PTR FTN()unsigned char 
 18677 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 18678 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 18679 ;;  pFunction       3   17[BANK2 ] PTR FTN(unsigned char ,)
 18680 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 18681 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 18682 ;; Auto vars:     Size  Location     Type
 18683 ;;		None
 18684 ;; Return value:  Size  Location     Type
 18685 ;;                  1    wreg      void 
 18686 ;; Registers used:
 18687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18688 ;; Tracked objects:
 18689 ;;		On entry : 0/0
 18690 ;;		On exit  : 0/0
 18691 ;;		Unchanged: 0/0
 18692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18693 ;;      Params:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18696 ;;      Totals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18697 ;;Total ram usage:       13 bytes
 18698 ;; Hardware stack levels used:    1
 18699 ;; Hardware stack levels required when called:   15
 18700 ;; This function calls:
 18701 ;;		_HMI_InitButtons
 18702 ;;		_MXK_InitDIPSwitch
 18703 ;;		_MXK_InitTestButton
 18704 ;; This function is called by:
 18705 ;;		_HMI_Init
 18706 ;;		_FunctInitButton
 18707 ;; This function uses a non-reentrant model
 18708 ;;
 18709                           
 18710                           	psect	text106
 18711  012416                     __ptext106:
 18712                           	opt stack 0
 18713  012416                     _Button_Init:
 18714                           	opt stack 13
 18715                           
 18716                           ;Button.c: 21: if(pInput==(void*)0)
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;incstack = 0
 18720  012416  0102               	movlb	2	; () banked
 18721  012418  5107               	movf	Button_Init@pInput& (0+255),w,b
 18722  01241A  0102               	movlb	2	; () banked
 18723  01241C  1108               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 18724  01241E  B4D8               	btfsc	status,2,c
 18725  012420  0012               	return	
 18726                           
 18727                           ; BSR set to: 2
 18728                           ;Button.c: 23: if(pInitIO==(void*)0)
 18729                           
 18730                           ; BSR set to: 2
 18731                           
 18732                           ; BSR set to: 2
 18733                           ;Button.c: 22: return;
 18734  012422  0102               	movlb	2	; () banked
 18735  012424  510B               	movf	Button_Init@pInitIO& (0+255),w,b
 18736  012426  0102               	movlb	2	; () banked
 18737  012428  110C               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 18738  01242A  0102               	movlb	2	; () banked
 18739  01242C  110D               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 18740  01242E  B4D8               	btfsc	status,2,c
 18741  012430  0012               	return	
 18742                           
 18743                           ; BSR set to: 2
 18744                           ;Button.c: 25: if(pGetState==(void*)0)
 18745                           
 18746                           ; BSR set to: 2
 18747                           
 18748                           ; BSR set to: 2
 18749                           ;Button.c: 24: return;
 18750  012432  0102               	movlb	2	; () banked
 18751  012434  510E               	movf	Button_Init@pGetState& (0+255),w,b
 18752  012436  0102               	movlb	2	; () banked
 18753  012438  110F               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 18754  01243A  0102               	movlb	2	; () banked
 18755  01243C  1110               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 18756  01243E  B4D8               	btfsc	status,2,c
 18757  012440  0012               	return	
 18758                           
 18759                           ; BSR set to: 2
 18760                           ;Button.c: 27: if(pFunction==(void*)0)
 18761                           
 18762                           ; BSR set to: 2
 18763                           
 18764                           ; BSR set to: 2
 18765                           ;Button.c: 26: return;
 18766  012442  0102               	movlb	2	; () banked
 18767  012444  5111               	movf	Button_Init@pFunction& (0+255),w,b
 18768  012446  0102               	movlb	2	; () banked
 18769  012448  1112               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 18770  01244A  0102               	movlb	2	; () banked
 18771  01244C  1113               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 18772  01244E  B4D8               	btfsc	status,2,c
 18773  012450  0012               	return	
 18774                           
 18775                           ; BSR set to: 2
 18776                           ;Button.c: 30: if(pThreshold == 0)
 18777                           
 18778                           ; BSR set to: 2
 18779                           
 18780                           ; BSR set to: 2
 18781                           ;Button.c: 28: return;
 18782  012452  0102               	movlb	2	; () banked
 18783  012454  5109               	movf	Button_Init@pThreshold& (0+255),w,b
 18784  012456  0102               	movlb	2	; () banked
 18785  012458  110A               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 18786  01245A  A4D8               	btfss	status,2,c
 18787  01245C  D005               	goto	l11432
 18788                           
 18789                           ; BSR set to: 2
 18790                           ;Button.c: 31: pThreshold = 1;
 18791  01245E  0E00               	movlw	0
 18792  012460  0102               	movlb	2	; () banked
 18793  012462  6F0A               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18794  012464  0E01               	movlw	1
 18795  012466  6F09               	movwf	Button_Init@pThreshold& (0+255),b
 18796  012468                     l11432:
 18797                           
 18798                           ; BSR set to: 2
 18799                           ;Button.c: 34: pInput->mState = 0;
 18800  012468  C207  FFD9         	movff	Button_Init@pInput,fsr2l
 18801  01246C  C208  FFDA         	movff	Button_Init@pInput+1,fsr2h
 18802  012470  0E00               	movlw	0
 18803  012472  6EDF               	movwf	indf2,c
 18804                           
 18805                           ; BSR set to: 2
 18806                           ;Button.c: 35: pInput->mCount = 0;
 18807  012474  0102               	movlb	2	; () banked
 18808  012476  EE20 F001          	lfsr	2,1
 18809  01247A  5107               	movf	Button_Init@pInput& (0+255),w,b
 18810  01247C  26D9               	addwf	fsr2l,f,c
 18811  01247E  5108               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18812  012480  22DA               	addwfc	fsr2h,f,c
 18813  012482  0E00               	movlw	0
 18814  012484  6EDF               	movwf	indf2,c
 18815                           
 18816                           ; BSR set to: 2
 18817                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 18818  012486  0102               	movlb	2	; () banked
 18819  012488  EE20 F002          	lfsr	2,2
 18820  01248C  5107               	movf	Button_Init@pInput& (0+255),w,b
 18821  01248E  26D9               	addwf	fsr2l,f,c
 18822  012490  5108               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18823  012492  22DA               	addwfc	fsr2h,f,c
 18824  012494  C209  FFDE         	movff	Button_Init@pThreshold,postinc2
 18825  012498  C20A  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 18826                           
 18827                           ; BSR set to: 2
 18828                           ;Button.c: 37: pInput->mFunction = pFunction;
 18829  01249C  0102               	movlb	2	; () banked
 18830  01249E  EE20 F004          	lfsr	2,4
 18831  0124A2  5107               	movf	Button_Init@pInput& (0+255),w,b
 18832  0124A4  26D9               	addwf	fsr2l,f,c
 18833  0124A6  5108               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18834  0124A8  22DA               	addwfc	fsr2h,f,c
 18835  0124AA  C211  FFDE         	movff	Button_Init@pFunction,postinc2
 18836  0124AE  C212  FFDE         	movff	Button_Init@pFunction+1,postinc2
 18837  0124B2  C213  FFDE         	movff	Button_Init@pFunction+2,postinc2
 18838                           
 18839                           ; BSR set to: 2
 18840                           ;Button.c: 38: pInput->mGetState = pGetState;
 18841  0124B6  0102               	movlb	2	; () banked
 18842  0124B8  EE20 F007          	lfsr	2,7
 18843  0124BC  5107               	movf	Button_Init@pInput& (0+255),w,b
 18844  0124BE  26D9               	addwf	fsr2l,f,c
 18845  0124C0  5108               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18846  0124C2  22DA               	addwfc	fsr2h,f,c
 18847  0124C4  C20E  FFDE         	movff	Button_Init@pGetState,postinc2
 18848  0124C8  C20F  FFDE         	movff	Button_Init@pGetState+1,postinc2
 18849  0124CC  C210  FFDE         	movff	Button_Init@pGetState+2,postinc2
 18850                           
 18851                           ; BSR set to: 2
 18852                           ;Button.c: 41: pInitIO();
 18853  0124D0  D801               	call	u7788
 18854  0124D2  0012               	return	
 18855  0124D4                     u7788:
 18856  0124D4  0005               	push	
 18857  0124D6  6EFA               	movwf	pclath,c
 18858  0124D8  0102               	movlb	2	; () banked
 18859  0124DA  510B               	movf	Button_Init@pInitIO& (0+255),w,b
 18860  0124DC  6EFD               	movwf	tosl,c
 18861  0124DE  510C               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 18862  0124E0  6EFE               	movwf	tosh,c
 18863  0124E2  510D               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 18864  0124E4  6EFF               	movwf	tosu,c
 18865  0124E6  50FA               	movf	pclath,w,c
 18866  0124E8  0012               	return		;indir
 18867  0124EA                     __end_of_Button_Init:
 18868                           	opt stack 0
 18869                           tosu	equ	0xFFF
 18870                           tosh	equ	0xFFE
 18871                           tosl	equ	0xFFD
 18872                           pclath	equ	0xFFA
 18873                           tblptru	equ	0xFF8
 18874                           tblptrh	equ	0xFF7
 18875                           tblptrl	equ	0xFF6
 18876                           tablat	equ	0xFF5
 18877                           prodh	equ	0xFF4
 18878                           prodl	equ	0xFF3
 18879                           intcon	equ	0xFF2
 18880                           postinc0	equ	0xFEE
 18881                           wreg	equ	0xFE8
 18882                           indf1	equ	0xFE7
 18883                           postdec1	equ	0xFE5
 18884                           fsr1h	equ	0xFE2
 18885                           fsr1l	equ	0xFE1
 18886                           indf2	equ	0xFDF
 18887                           postinc2	equ	0xFDE
 18888                           postdec2	equ	0xFDD
 18889                           plusw2	equ	0xFDB
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function _MXK_InitDIPSwitch *****************
 18895 ;; Defined at:
 18896 ;;		line 20 in file "Library/MXK.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;		None
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;		None
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      void 
 18903 ;; Registers used:
 18904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18914 ;;Total ram usage:        0 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:   14
 18917 ;; This function calls:
 18918 ;;		_Port_SetQuadType
 18919 ;; This function is called by:
 18920 ;;		_FunctInitButton
 18921 ;;		_Button_Init
 18922 ;; This function uses a non-reentrant model
 18923 ;;
 18924                           
 18925                           	psect	text107
 18926  01445C                     __ptext107:
 18927                           	opt stack 0
 18928  01445C                     _MXK_InitDIPSwitch:
 18929                           	opt stack 13
 18930                           
 18931                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 18932                           
 18933                           ;incstack = 0
 18934  01445C  0E88               	movlw	low _PortD
 18935  01445E  0102               	movlb	2	; () banked
 18936  014460  6F03               	movwf	Port_SetQuadType@pInput& (0+255),b
 18937  014462  0E00               	movlw	high _PortD
 18938  014464  0102               	movlb	2	; () banked
 18939  014466  6F04               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 18940  014468  0E00               	movlw	0
 18941  01446A  0102               	movlb	2	; () banked
 18942  01446C  6F05               	movwf	Port_SetQuadType@pQuad& (0+255),b
 18943  01446E  0E00               	movlw	0
 18944  014470  0102               	movlb	2	; () banked
 18945  014472  6F06               	movwf	Port_SetQuadType@pType& (0+255),b
 18946  014474  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 18947  014478  0012               	return		;funcret
 18948  01447A                     __end_of_MXK_InitDIPSwitch:
 18949                           	opt stack 0
 18950                           tosu	equ	0xFFF
 18951                           tosh	equ	0xFFE
 18952                           tosl	equ	0xFFD
 18953                           pclath	equ	0xFFA
 18954                           tblptru	equ	0xFF8
 18955                           tblptrh	equ	0xFF7
 18956                           tblptrl	equ	0xFF6
 18957                           tablat	equ	0xFF5
 18958                           prodh	equ	0xFF4
 18959                           prodl	equ	0xFF3
 18960                           intcon	equ	0xFF2
 18961                           postinc0	equ	0xFEE
 18962                           wreg	equ	0xFE8
 18963                           indf1	equ	0xFE7
 18964                           postdec1	equ	0xFE5
 18965                           fsr1h	equ	0xFE2
 18966                           fsr1l	equ	0xFE1
 18967                           indf2	equ	0xFDF
 18968                           postinc2	equ	0xFDE
 18969                           postdec2	equ	0xFDD
 18970                           plusw2	equ	0xFDB
 18971                           fsr2h	equ	0xFDA
 18972                           fsr2l	equ	0xFD9
 18973                           status	equ	0xFD8
 18974                           
 18975 ;; *************** function _HMI_InitButtons *****************
 18976 ;; Defined at:
 18977 ;;		line 21 in file "HMI.c"
 18978 ;; Parameters:    Size  Location     Type
 18979 ;;		None
 18980 ;; Auto vars:     Size  Location     Type
 18981 ;;		None
 18982 ;; Return value:  Size  Location     Type
 18983 ;;                  1    wreg      void 
 18984 ;; Registers used:
 18985 ;;		None
 18986 ;; Tracked objects:
 18987 ;;		On entry : 0/0
 18988 ;;		On exit  : 0/0
 18989 ;;		Unchanged: 0/0
 18990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18995 ;;Total ram usage:        0 bytes
 18996 ;; Hardware stack levels used:    1
 18997 ;; Hardware stack levels required when called:    7
 18998 ;; This function calls:
 18999 ;;		Nothing
 19000 ;; This function is called by:
 19001 ;;		_HMI_Init
 19002 ;;		_Button_Init
 19003 ;; This function uses a non-reentrant model
 19004 ;;
 19005                           
 19006                           	psect	text108
 19007  0146B0                     __ptext108:
 19008                           	opt stack 0
 19009  0146B0                     _HMI_InitButtons:
 19010                           	opt stack 20
 19011                           
 19012                           ;HMI.c: 23: TRISE = 0xFF;
 19013                           
 19014                           ;incstack = 0
 19015  0146B0  6896               	setf	3990,c	;volatile
 19016  0146B2  0012               	return		;funcret
 19017  0146B4                     __end_of_HMI_InitButtons:
 19018                           	opt stack 0
 19019                           tosu	equ	0xFFF
 19020                           tosh	equ	0xFFE
 19021                           tosl	equ	0xFFD
 19022                           pclath	equ	0xFFA
 19023                           tblptru	equ	0xFF8
 19024                           tblptrh	equ	0xFF7
 19025                           tblptrl	equ	0xFF6
 19026                           tablat	equ	0xFF5
 19027                           prodh	equ	0xFF4
 19028                           prodl	equ	0xFF3
 19029                           intcon	equ	0xFF2
 19030                           postinc0	equ	0xFEE
 19031                           wreg	equ	0xFE8
 19032                           indf1	equ	0xFE7
 19033                           postdec1	equ	0xFE5
 19034                           fsr1h	equ	0xFE2
 19035                           fsr1l	equ	0xFE1
 19036                           indf2	equ	0xFDF
 19037                           postinc2	equ	0xFDE
 19038                           postdec2	equ	0xFDD
 19039                           plusw2	equ	0xFDB
 19040                           fsr2h	equ	0xFDA
 19041                           fsr2l	equ	0xFD9
 19042                           status	equ	0xFD8
 19043                           
 19044 ;; *************** function _MXK_InitTestButton *****************
 19045 ;; Defined at:
 19046 ;;		line 10 in file "Library/MXK.c"
 19047 ;; Parameters:    Size  Location     Type
 19048 ;;		None
 19049 ;; Auto vars:     Size  Location     Type
 19050 ;;		None
 19051 ;; Return value:  Size  Location     Type
 19052 ;;                  1    wreg      void 
 19053 ;; Registers used:
 19054 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19055 ;; Tracked objects:
 19056 ;;		On entry : 0/0
 19057 ;;		On exit  : 0/0
 19058 ;;		Unchanged: 0/0
 19059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19064 ;;Total ram usage:        0 bytes
 19065 ;; Hardware stack levels used:    1
 19066 ;; Hardware stack levels required when called:   12
 19067 ;; This function calls:
 19068 ;;		_Port_SetPinType
 19069 ;; This function is called by:
 19070 ;;		_FunctInitButton
 19071 ;;		_Button_Init
 19072 ;; This function uses a non-reentrant model
 19073 ;;
 19074                           
 19075                           	psect	text109
 19076  01447A                     __ptext109:
 19077                           	opt stack 0
 19078  01447A                     _MXK_InitTestButton:
 19079                           	opt stack 15
 19080                           
 19081                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 19082                           
 19083                           ;incstack = 0
 19084  01447A  0EDE               	movlw	low _PortB
 19085  01447C  0100               	movlb	0	; () banked
 19086  01447E  6FEA               	movwf	Port_SetPinType@pInput& (0+255),b
 19087  014480  0E01               	movlw	high _PortB
 19088  014482  0100               	movlb	0	; () banked
 19089  014484  6FEB               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19090  014486  0E04               	movlw	4
 19091  014488  0100               	movlb	0	; () banked
 19092  01448A  6FEC               	movwf	Port_SetPinType@pPin& (0+255),b
 19093  01448C  0E00               	movlw	0
 19094  01448E  0100               	movlb	0	; () banked
 19095  014490  6FED               	movwf	Port_SetPinType@pType& (0+255),b
 19096  014492  EC84  F08A         	call	_Port_SetPinType	;wreg free
 19097  014496  0012               	return		;funcret
 19098  014498                     __end_of_MXK_InitTestButton:
 19099                           	opt stack 0
 19100                           tosu	equ	0xFFF
 19101                           tosh	equ	0xFFE
 19102                           tosl	equ	0xFFD
 19103                           pclath	equ	0xFFA
 19104                           tblptru	equ	0xFF8
 19105                           tblptrh	equ	0xFF7
 19106                           tblptrl	equ	0xFF6
 19107                           tablat	equ	0xFF5
 19108                           prodh	equ	0xFF4
 19109                           prodl	equ	0xFF3
 19110                           intcon	equ	0xFF2
 19111                           postinc0	equ	0xFEE
 19112                           wreg	equ	0xFE8
 19113                           indf1	equ	0xFE7
 19114                           postdec1	equ	0xFE5
 19115                           fsr1h	equ	0xFE2
 19116                           fsr1l	equ	0xFE1
 19117                           indf2	equ	0xFDF
 19118                           postinc2	equ	0xFDE
 19119                           postdec2	equ	0xFDD
 19120                           plusw2	equ	0xFDB
 19121                           fsr2h	equ	0xFDA
 19122                           fsr2l	equ	0xFD9
 19123                           status	equ	0xFD8
 19124                           
 19125 ;; *************** function _Port_SetPinType *****************
 19126 ;; Defined at:
 19127 ;;		line 189 in file "Library/Port.c"
 19128 ;; Parameters:    Size  Location     Type
 19129 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 19130 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19131 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19132 ;;  pPin            1   40[BANK0 ] enum E6750
 19133 ;;  pType           1   41[BANK0 ] enum E6795
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 19136 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 19137 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 19138 ;;  Output          1   42[BANK0 ] enum E6475
 19139 ;; Return value:  Size  Location     Type
 19140 ;;                  1    wreg      enum E6475
 19141 ;; Registers used:
 19142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19143 ;; Tracked objects:
 19144 ;;		On entry : 0/0
 19145 ;;		On exit  : 0/0
 19146 ;;		Unchanged: 0/0
 19147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19148 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19149 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19151 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19152 ;;Total ram usage:        7 bytes
 19153 ;; Hardware stack levels used:    1
 19154 ;; Hardware stack levels required when called:   11
 19155 ;; This function calls:
 19156 ;;		_Byte_SetBit
 19157 ;;		_PortProperty_Valid
 19158 ;;		_Word_SetPair
 19159 ;; This function is called by:
 19160 ;;		_Configure_GPIOs
 19161 ;;		_LED_Init
 19162 ;;		_Port_Init
 19163 ;;		_SPI_Init
 19164 ;;		_MXK_InitTestButton
 19165 ;;		_MXK_Init
 19166 ;;		_I2C_Init
 19167 ;;		_Motor_Init
 19168 ;; This function uses a non-reentrant model
 19169 ;;
 19170                           
 19171                           	psect	text110
 19172  011508                     __ptext110:
 19173                           	opt stack 0
 19174  011508                     _Port_SetPinType:
 19175                           	opt stack 17
 19176                           
 19177                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 19178                           
 19179                           ;incstack = 0
 19180  011508  C0EA  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 19181  01150C  C0EB  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 19182  011510  CFDE F0EF          	movff	postinc2,Port_SetPinType@Props
 19183  011514  CFDD F0F0          	movff	postdec2,Port_SetPinType@Props+1
 19184                           
 19185                           ;Port.c: 192: ePinError Output = ePinErrorState;
 19186  011518  0E05               	movlw	5
 19187  01151A  0100               	movlb	0	; () banked
 19188  01151C  6FEE               	movwf	Port_SetPinType@Output& (0+255),b
 19189                           
 19190                           ;Port.c: 193: switch (pType)
 19191  01151E  D0B5               	goto	l10752
 19192  011520                     l10732:
 19193                           
 19194                           ; BSR set to: 0
 19195                           ;Port.c: 197: {
 19196                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 19197  011520  0100               	movlb	0	; () banked
 19198  011522  EE20 F002          	lfsr	2,2
 19199  011526  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19200  011528  26D9               	addwf	fsr2l,f,c
 19201  01152A  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19202  01152C  22DA               	addwfc	fsr2h,f,c
 19203  01152E  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19204  011532  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19205  011536  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19206  01153A  0E01               	movlw	1
 19207  01153C  0100               	movlb	0	; () banked
 19208  01153E  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19209  011540  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19210                           
 19211                           ;Port.c: 203: break;
 19212  011544  D0B0               	goto	l10754
 19213  011546                     l10734:
 19214                           
 19215                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 19216  011546  C0EF  F0D3         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 19217  01154A  C0F0  F0D4         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 19218  01154E  0E01               	movlw	1
 19219  011550  0100               	movlb	0	; () banked
 19220  011552  6FD5               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 19221  011554  C0EC  F0D6         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 19222  011558  ECA2  F099         	call	_PortProperty_Valid	;wreg free
 19223  01155C  0100               	movlb	0	; () banked
 19224  01155E  6FEE               	movwf	Port_SetPinType@Output& (0+255),b
 19225  011560  0100               	movlb	0	; () banked
 19226  011562  51EE               	movf	Port_SetPinType@Output& (0+255),w,b
 19227  011564  A4D8               	btfss	status,2,c
 19228  011566  0012               	return	
 19229                           
 19230                           ; BSR set to: 0
 19231                           ;Port.c: 208: {
 19232                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 19233  011568  0100               	movlb	0	; () banked
 19234  01156A  EE20 F002          	lfsr	2,2
 19235  01156E  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19236  011570  26D9               	addwf	fsr2l,f,c
 19237  011572  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19238  011574  22DA               	addwfc	fsr2h,f,c
 19239  011576  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19240  01157A  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19241  01157E  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19242  011582  0E00               	movlw	0
 19243  011584  0100               	movlb	0	; () banked
 19244  011586  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19245  011588  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19246                           
 19247                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 19248  01158C  0100               	movlb	0	; () banked
 19249  01158E  EE20 F004          	lfsr	2,4
 19250  011592  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19251  011594  26D9               	addwf	fsr2l,f,c
 19252  011596  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19253  011598  22DA               	addwfc	fsr2h,f,c
 19254  01159A  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19255  01159E  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19256  0115A2  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19257  0115A6  0E00               	movlw	0
 19258  0115A8  0100               	movlb	0	; () banked
 19259  0115AA  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19260  0115AC  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19261                           
 19262                           ;Port.c: 214: break;
 19263  0115B0  D07A               	goto	l10754
 19264  0115B2                     l10740:
 19265                           
 19266                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 19267  0115B2  C0EF  F0D3         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 19268  0115B6  C0F0  F0D4         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 19269  0115BA  0E02               	movlw	2
 19270  0115BC  0100               	movlb	0	; () banked
 19271  0115BE  6FD5               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 19272  0115C0  C0EC  F0D6         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 19273  0115C4  ECA2  F099         	call	_PortProperty_Valid	;wreg free
 19274  0115C8  0100               	movlb	0	; () banked
 19275  0115CA  6FEE               	movwf	Port_SetPinType@Output& (0+255),b
 19276  0115CC  0100               	movlb	0	; () banked
 19277  0115CE  51EE               	movf	Port_SetPinType@Output& (0+255),w,b
 19278  0115D0  A4D8               	btfss	status,2,c
 19279  0115D2  0012               	return	
 19280                           
 19281                           ; BSR set to: 0
 19282                           ;Port.c: 220: {
 19283                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 19284  0115D4  0100               	movlb	0	; () banked
 19285  0115D6  EE20 F002          	lfsr	2,2
 19286  0115DA  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19287  0115DC  26D9               	addwf	fsr2l,f,c
 19288  0115DE  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19289  0115E0  22DA               	addwfc	fsr2h,f,c
 19290  0115E2  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19291  0115E6  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19292  0115EA  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19293  0115EE  0E01               	movlw	1
 19294  0115F0  0100               	movlb	0	; () banked
 19295  0115F2  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19296  0115F4  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19297                           
 19298                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 19299  0115F8  0100               	movlb	0	; () banked
 19300  0115FA  EE20 F004          	lfsr	2,4
 19301  0115FE  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19302  011600  26D9               	addwf	fsr2l,f,c
 19303  011602  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19304  011604  22DA               	addwfc	fsr2h,f,c
 19305  011606  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19306  01160A  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19307  01160E  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19308  011612  0E01               	movlw	1
 19309  011614  0100               	movlb	0	; () banked
 19310  011616  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19311  011618  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19312                           
 19313                           ;Port.c: 226: break;
 19314  01161C  D044               	goto	l10754
 19315  01161E                     l10746:
 19316                           
 19317                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 19318  01161E  C0EF  F0D3         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 19319  011622  C0F0  F0D4         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 19320  011626  0E00               	movlw	0
 19321  011628  0100               	movlb	0	; () banked
 19322  01162A  6FD5               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 19323  01162C  C0EC  F0D6         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 19324  011630  ECA2  F099         	call	_PortProperty_Valid	;wreg free
 19325  011634  0100               	movlb	0	; () banked
 19326  011636  6FEE               	movwf	Port_SetPinType@Output& (0+255),b
 19327  011638  0100               	movlb	0	; () banked
 19328  01163A  51EE               	movf	Port_SetPinType@Output& (0+255),w,b
 19329  01163C  A4D8               	btfss	status,2,c
 19330  01163E  0012               	return	
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;Port.c: 232: {
 19334                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 19335  011640  0100               	movlb	0	; () banked
 19336  011642  EE20 F002          	lfsr	2,2
 19337  011646  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19338  011648  26D9               	addwf	fsr2l,f,c
 19339  01164A  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19340  01164C  22DA               	addwfc	fsr2h,f,c
 19341  01164E  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19342  011652  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19343  011656  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19344  01165A  0E00               	movlw	0
 19345  01165C  0100               	movlb	0	; () banked
 19346  01165E  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19347  011660  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19348                           
 19349                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 19350  011664  0100               	movlb	0	; () banked
 19351  011666  EE20 F004          	lfsr	2,4
 19352  01166A  51EA               	movf	Port_SetPinType@pInput& (0+255),w,b
 19353  01166C  26D9               	addwf	fsr2l,f,c
 19354  01166E  51EB               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 19355  011670  22DA               	addwfc	fsr2h,f,c
 19356  011672  CFDE F0C4          	movff	postinc2,Byte_SetBit@pInput
 19357  011676  CFDD F0C5          	movff	postdec2,Byte_SetBit@pInput+1
 19358  01167A  C0EC  F0C6         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 19359  01167E  0E00               	movlw	0
 19360  011680  0100               	movlb	0	; () banked
 19361  011682  6FC7               	movwf	Byte_SetBit@pValue& (0+255),b
 19362  011684  EC7E  F09C         	call	_Byte_SetBit	;wreg free
 19363                           
 19364                           ;Port.c: 239: }
 19365                           
 19366                           ;Port.c: 238: break;
 19367  011688  D00E               	goto	l10754
 19368  01168A                     l10752:
 19369  01168A  0100               	movlb	0	; () banked
 19370  01168C  51ED               	movf	Port_SetPinType@pType& (0+255),w,b
 19371                           
 19372                           ; Switch size 1, requested type "space"
 19373                           ; Number of cases is 4, Range of values is 0 to 3
 19374                           ; switch strategies available:
 19375                           ; Name         Instructions Cycles
 19376                           ; simple_byte           13     7 (average)
 19377                           ;	Chosen strategy is simple_byte
 19378  01168E  0A00               	xorlw	0	; case 0
 19379  011690  B4D8               	btfsc	status,2,c
 19380  011692  D746               	goto	l10732
 19381  011694  0A01               	xorlw	1	; case 1
 19382  011696  B4D8               	btfsc	status,2,c
 19383  011698  D756               	goto	l10734
 19384  01169A  0A03               	xorlw	3	; case 2
 19385  01169C  B4D8               	btfsc	status,2,c
 19386  01169E  D789               	goto	l10740
 19387  0116A0  0A01               	xorlw	1	; case 3
 19388  0116A2  B4D8               	btfsc	status,2,c
 19389  0116A4  D7BC               	goto	l10746
 19390  0116A6                     l10754:
 19391                           
 19392                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 19393  0116A6  0E08               	movlw	8
 19394  0116A8  0100               	movlb	0	; () banked
 19395  0116AA  25EA               	addwf	Port_SetPinType@pInput& (0+255),w,b
 19396  0116AC  0100               	movlb	0	; () banked
 19397  0116AE  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 19398  0116B0  0E00               	movlw	0
 19399  0116B2  0100               	movlb	0	; () banked
 19400  0116B4  21EB               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 19401  0116B6  0100               	movlb	0	; () banked
 19402  0116B8  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19403  0116BA  C0EC  F0D5         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 19404  0116BE  C0ED  F0D6         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 19405  0116C2  EC15  F09F         	call	_Word_SetPair	;wreg free
 19406  0116C6  0012               	return	
 19407  0116C8                     __end_of_Port_SetPinType:
 19408                           	opt stack 0
 19409                           tosu	equ	0xFFF
 19410                           tosh	equ	0xFFE
 19411                           tosl	equ	0xFFD
 19412                           pclath	equ	0xFFA
 19413                           tblptru	equ	0xFF8
 19414                           tblptrh	equ	0xFF7
 19415                           tblptrl	equ	0xFF6
 19416                           tablat	equ	0xFF5
 19417                           prodh	equ	0xFF4
 19418                           prodl	equ	0xFF3
 19419                           intcon	equ	0xFF2
 19420                           postinc0	equ	0xFEE
 19421                           wreg	equ	0xFE8
 19422                           indf1	equ	0xFE7
 19423                           postdec1	equ	0xFE5
 19424                           fsr1h	equ	0xFE2
 19425                           fsr1l	equ	0xFE1
 19426                           indf2	equ	0xFDF
 19427                           postinc2	equ	0xFDE
 19428                           postdec2	equ	0xFDD
 19429                           plusw2	equ	0xFDB
 19430                           fsr2h	equ	0xFDA
 19431                           fsr2l	equ	0xFD9
 19432                           status	equ	0xFD8
 19433                           
 19434 ;; *************** function _Byte_SetBit *****************
 19435 ;; Defined at:
 19436 ;;		line 32 in file "Library/Types.c"
 19437 ;; Parameters:    Size  Location     Type
 19438 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19439 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 19440 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 19441 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19442 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19443 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19444 ;;		 -> NULL(0), 
 19445 ;;  pBit            1    2[BANK0 ] unsigned char 
 19446 ;;  pValue          1    3[BANK0 ] unsigned char 
 19447 ;; Auto vars:     Size  Location     Type
 19448 ;;		None
 19449 ;; Return value:  Size  Location     Type
 19450 ;;                  1    wreg      void 
 19451 ;; Registers used:
 19452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19453 ;; Tracked objects:
 19454 ;;		On entry : 0/0
 19455 ;;		On exit  : 0/0
 19456 ;;		Unchanged: 0/0
 19457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19460 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19461 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19462 ;;Total ram usage:        7 bytes
 19463 ;; Hardware stack levels used:    1
 19464 ;; Hardware stack levels required when called:    7
 19465 ;; This function calls:
 19466 ;;		Nothing
 19467 ;; This function is called by:
 19468 ;;		_Port_SetPinType
 19469 ;;		_Port_SetPin
 19470 ;;		_SPI_Init
 19471 ;;		_SPI_MinSpeed
 19472 ;;		_SPI_MaxSpeed
 19473 ;;		_Word_SetBit
 19474 ;;		_I2C_Init
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text111
 19479  0138FC                     __ptext111:
 19480                           	opt stack 0
 19481  0138FC                     _Byte_SetBit:
 19482                           	opt stack 12
 19483                           
 19484                           ;Types.c: 34: pValue &= 1;
 19485                           
 19486                           ;incstack = 0
 19487  0138FC  0E01               	movlw	1
 19488  0138FE  0100               	movlb	0	; () banked
 19489  013900  17C7               	andwf	Byte_SetBit@pValue& (0+255),f,b
 19490                           
 19491                           ; BSR set to: 0
 19492                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 19493  013902  C0C6  F0C8         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 19494  013906  0E01               	movlw	1
 19495  013908  0100               	movlb	0	; () banked
 19496  01390A  6FC9               	movwf	(??_Byte_SetBit+1)& (0+255),b
 19497  01390C  0100               	movlb	0	; () banked
 19498  01390E  2BC8               	incf	??_Byte_SetBit& (0+255),f,b
 19499  013910  D003               	goto	u6414
 19500  013912                     u6415:
 19501  013912  0100               	movlb	0	; () banked
 19502  013914  90D8               	bcf	status,0,c
 19503  013916  37C9               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 19504  013918                     u6414:
 19505  013918  0100               	movlb	0	; () banked
 19506  01391A  2FC8               	decfsz	??_Byte_SetBit& (0+255),f,b
 19507  01391C  D7FA               	goto	u6415
 19508  01391E  0100               	movlb	0	; () banked
 19509  013920  51C9               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 19510  013922  0AFF               	xorlw	255
 19511  013924  0100               	movlb	0	; () banked
 19512  013926  6FCA               	movwf	(??_Byte_SetBit+2)& (0+255),b
 19513  013928  C0C4  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 19514  01392C  C0C5  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 19515  013930  0100               	movlb	0	; () banked
 19516  013932  51CA               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 19517  013934  16DF               	andwf	indf2,f,c
 19518                           
 19519                           ; BSR set to: 0
 19520                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 19521  013936  C0C6  F0C8         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 19522  01393A  C0C7  F0C9         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 19523  01393E  0100               	movlb	0	; () banked
 19524  013940  2BC8               	incf	??_Byte_SetBit& (0+255),f,b
 19525  013942  D003               	goto	u6424
 19526  013944                     u6425:
 19527  013944  0100               	movlb	0	; () banked
 19528  013946  90D8               	bcf	status,0,c
 19529  013948  37C9               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 19530  01394A                     u6424:
 19531  01394A  0100               	movlb	0	; () banked
 19532  01394C  2FC8               	decfsz	??_Byte_SetBit& (0+255),f,b
 19533  01394E  D7FA               	goto	u6425
 19534  013950  C0C4  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 19535  013954  C0C5  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 19536  013958  0100               	movlb	0	; () banked
 19537  01395A  51C9               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 19538  01395C  12DF               	iorwf	indf2,f,c
 19539                           
 19540                           ; BSR set to: 0
 19541  01395E  0012               	return		;funcret
 19542  013960                     __end_of_Byte_SetBit:
 19543                           	opt stack 0
 19544                           tosu	equ	0xFFF
 19545                           tosh	equ	0xFFE
 19546                           tosl	equ	0xFFD
 19547                           pclath	equ	0xFFA
 19548                           tblptru	equ	0xFF8
 19549                           tblptrh	equ	0xFF7
 19550                           tblptrl	equ	0xFF6
 19551                           tablat	equ	0xFF5
 19552                           prodh	equ	0xFF4
 19553                           prodl	equ	0xFF3
 19554                           intcon	equ	0xFF2
 19555                           postinc0	equ	0xFEE
 19556                           wreg	equ	0xFE8
 19557                           indf1	equ	0xFE7
 19558                           postdec1	equ	0xFE5
 19559                           fsr1h	equ	0xFE2
 19560                           fsr1l	equ	0xFE1
 19561                           indf2	equ	0xFDF
 19562                           postinc2	equ	0xFDE
 19563                           postdec2	equ	0xFDD
 19564                           plusw2	equ	0xFDB
 19565                           fsr2h	equ	0xFDA
 19566                           fsr2l	equ	0xFD9
 19567                           status	equ	0xFD8
 19568                           
 19569 ;; *************** function _Port_SetQuadType *****************
 19570 ;; Defined at:
 19571 ;;		line 399 in file "Library/Port.c"
 19572 ;; Parameters:    Size  Location     Type
 19573 ;;  pInput          2    3[BANK2 ] const PTR struct Port
 19574 ;;		 -> PortB(10), PortD(10), 
 19575 ;;  pQuad           1    5[BANK2 ] enum E6776
 19576 ;;  pType           1    6[BANK2 ] enum E6795
 19577 ;; Auto vars:     Size  Location     Type
 19578 ;;  Output          1   51[BANK0 ] enum E6475
 19579 ;; Return value:  Size  Location     Type
 19580 ;;                  1    wreg      enum E6475
 19581 ;; Registers used:
 19582 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19583 ;; Tracked objects:
 19584 ;;		On entry : 0/0
 19585 ;;		On exit  : 0/0
 19586 ;;		Unchanged: 0/0
 19587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19588 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Totals:         0       1       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;Total ram usage:        5 bytes
 19593 ;; Hardware stack levels used:    1
 19594 ;; Hardware stack levels required when called:   13
 19595 ;; This function calls:
 19596 ;;		_Byte_SetQuad
 19597 ;;		_Port_CheckQuadType
 19598 ;;		_Word_SetPair
 19599 ;; This function is called by:
 19600 ;;		_MXK_InitDIPSwitch
 19601 ;;		_MXK_Init
 19602 ;; This function uses a non-reentrant model
 19603 ;;
 19604                           
 19605                           	psect	text112
 19606  010A5C                     __ptext112:
 19607                           	opt stack 0
 19608  010A5C                     _Port_SetQuadType:
 19609                           	opt stack 15
 19610                           
 19611                           ;Port.c: 401: ePinError Output = ePinErrorState;
 19612                           
 19613                           ; BSR set to: 0
 19614                           ;incstack = 0
 19615  010A5C  0E05               	movlw	5
 19616  010A5E  0100               	movlb	0	; () banked
 19617  010A60  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 19618                           
 19619                           ;Port.c: 403: switch (pType)
 19620  010A62  D0C7               	goto	l10842
 19621  010A64                     l10826:
 19622                           
 19623                           ;Port.c: 407: {
 19624                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 19625  010A64  0102               	movlb	2	; () banked
 19626  010A66  EE20 F002          	lfsr	2,2
 19627  010A6A  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19628  010A6C  26D9               	addwf	fsr2l,f,c
 19629  010A6E  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19630  010A70  22DA               	addwfc	fsr2h,f,c
 19631  010A72  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19632  010A76  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19633  010A7A  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19634  010A7E  0E0F               	movlw	15
 19635  010A80  0100               	movlb	0	; () banked
 19636  010A82  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19637  010A84  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19638                           
 19639                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19640  010A88  0102               	movlb	2	; () banked
 19641  010A8A  EE20 F004          	lfsr	2,4
 19642  010A8E  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19643  010A90  26D9               	addwf	fsr2l,f,c
 19644  010A92  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19645  010A94  22DA               	addwfc	fsr2h,f,c
 19646  010A96  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19647  010A9A  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19648  010A9E  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19649  010AA2  0E00               	movlw	0
 19650  010AA4  0100               	movlb	0	; () banked
 19651  010AA6  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19652  010AA8  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19653                           
 19654                           ;Port.c: 413: }
 19655                           ;Port.c: 415: break;
 19656  010AAC  D0B0               	goto	l10844
 19657  010AAE                     l10828:
 19658                           
 19659                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19660  010AAE  C203  F0F3         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19661  010AB2  C204  F0F4         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19662  010AB6  C205  F0F5         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19663  010ABA  0E03               	movlw	3
 19664  010ABC  0100               	movlb	0	; () banked
 19665  010ABE  6FF6               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19666  010AC0  EC12  F09D         	call	_Port_CheckQuadType	;wreg free
 19667  010AC4  0100               	movlb	0	; () banked
 19668  010AC6  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 19669  010AC8  0100               	movlb	0	; () banked
 19670  010ACA  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
 19671  010ACC  A4D8               	btfss	status,2,c
 19672  010ACE  0012               	return	
 19673                           
 19674                           ; BSR set to: 0
 19675                           ;Port.c: 418: {
 19676                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 19677  010AD0  0102               	movlb	2	; () banked
 19678  010AD2  EE20 F002          	lfsr	2,2
 19679  010AD6  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19680  010AD8  26D9               	addwf	fsr2l,f,c
 19681  010ADA  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19682  010ADC  22DA               	addwfc	fsr2h,f,c
 19683  010ADE  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19684  010AE2  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19685  010AE6  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19686  010AEA  0E00               	movlw	0
 19687  010AEC  0100               	movlb	0	; () banked
 19688  010AEE  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19689  010AF0  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19690                           
 19691                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19692  010AF4  0102               	movlb	2	; () banked
 19693  010AF6  EE20 F004          	lfsr	2,4
 19694  010AFA  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19695  010AFC  26D9               	addwf	fsr2l,f,c
 19696  010AFE  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19697  010B00  22DA               	addwfc	fsr2h,f,c
 19698  010B02  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19699  010B06  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19700  010B0A  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19701  010B0E  0E00               	movlw	0
 19702  010B10  0100               	movlb	0	; () banked
 19703  010B12  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19704  010B14  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19705                           
 19706                           ;Port.c: 424: }
 19707  010B18  D07A               	goto	l10844
 19708  010B1A                     l10832:
 19709                           
 19710                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19711  010B1A  C203  F0F3         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19712  010B1E  C204  F0F4         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19713  010B22  C205  F0F5         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19714  010B26  0E03               	movlw	3
 19715  010B28  0100               	movlb	0	; () banked
 19716  010B2A  6FF6               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19717  010B2C  EC12  F09D         	call	_Port_CheckQuadType	;wreg free
 19718  010B30  0100               	movlb	0	; () banked
 19719  010B32  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 19720  010B34  0100               	movlb	0	; () banked
 19721  010B36  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
 19722  010B38  A4D8               	btfss	status,2,c
 19723  010B3A  0012               	return	
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;Port.c: 429: {
 19727                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 19728  010B3C  0102               	movlb	2	; () banked
 19729  010B3E  EE20 F002          	lfsr	2,2
 19730  010B42  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19731  010B44  26D9               	addwf	fsr2l,f,c
 19732  010B46  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19733  010B48  22DA               	addwfc	fsr2h,f,c
 19734  010B4A  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19735  010B4E  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19736  010B52  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19737  010B56  0E0F               	movlw	15
 19738  010B58  0100               	movlb	0	; () banked
 19739  010B5A  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19740  010B5C  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19741                           
 19742                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 19743  010B60  0102               	movlb	2	; () banked
 19744  010B62  EE20 F004          	lfsr	2,4
 19745  010B66  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19746  010B68  26D9               	addwf	fsr2l,f,c
 19747  010B6A  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19748  010B6C  22DA               	addwfc	fsr2h,f,c
 19749  010B6E  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19750  010B72  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19751  010B76  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19752  010B7A  0E0F               	movlw	15
 19753  010B7C  0100               	movlb	0	; () banked
 19754  010B7E  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19755  010B80  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19756                           
 19757                           ;Port.c: 435: }
 19758  010B84  D044               	goto	l10844
 19759  010B86                     l10836:
 19760                           
 19761                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19762  010B86  C203  F0F3         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19763  010B8A  C204  F0F4         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19764  010B8E  C205  F0F5         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19765  010B92  0E03               	movlw	3
 19766  010B94  0100               	movlb	0	; () banked
 19767  010B96  6FF6               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19768  010B98  EC12  F09D         	call	_Port_CheckQuadType	;wreg free
 19769  010B9C  0100               	movlb	0	; () banked
 19770  010B9E  6FF7               	movwf	Port_SetQuadType@Output& (0+255),b
 19771  010BA0  0100               	movlb	0	; () banked
 19772  010BA2  51F7               	movf	Port_SetQuadType@Output& (0+255),w,b
 19773  010BA4  A4D8               	btfss	status,2,c
 19774  010BA6  0012               	return	
 19775                           
 19776                           ; BSR set to: 0
 19777                           ;Port.c: 440: {
 19778                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 19779  010BA8  0102               	movlb	2	; () banked
 19780  010BAA  EE20 F002          	lfsr	2,2
 19781  010BAE  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19782  010BB0  26D9               	addwf	fsr2l,f,c
 19783  010BB2  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19784  010BB4  22DA               	addwfc	fsr2h,f,c
 19785  010BB6  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19786  010BBA  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19787  010BBE  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19788  010BC2  0E00               	movlw	0
 19789  010BC4  0100               	movlb	0	; () banked
 19790  010BC6  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19791  010BC8  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19792                           
 19793                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19794  010BCC  0102               	movlb	2	; () banked
 19795  010BCE  EE20 F004          	lfsr	2,4
 19796  010BD2  5103               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19797  010BD4  26D9               	addwf	fsr2l,f,c
 19798  010BD6  5104               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19799  010BD8  22DA               	addwfc	fsr2h,f,c
 19800  010BDA  CFDE F0CF          	movff	postinc2,Byte_SetQuad@pInput
 19801  010BDE  CFDD F0D0          	movff	postdec2,Byte_SetQuad@pInput+1
 19802  010BE2  C205  F0D1         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19803  010BE6  0E00               	movlw	0
 19804  010BE8  0100               	movlb	0	; () banked
 19805  010BEA  6FD2               	movwf	Byte_SetQuad@pValue& (0+255),b
 19806  010BEC  ECE0  F0A1         	call	_Byte_SetQuad	;wreg free
 19807                           
 19808                           ;Port.c: 446: }
 19809  010BF0  D00E               	goto	l10844
 19810  010BF2                     l10842:
 19811  010BF2  0102               	movlb	2	; () banked
 19812  010BF4  5106               	movf	Port_SetQuadType@pType& (0+255),w,b
 19813                           
 19814                           ; Switch size 1, requested type "space"
 19815                           ; Number of cases is 4, Range of values is 0 to 3
 19816                           ; switch strategies available:
 19817                           ; Name         Instructions Cycles
 19818                           ; simple_byte           13     7 (average)
 19819                           ;	Chosen strategy is simple_byte
 19820  010BF6  0A00               	xorlw	0	; case 0
 19821  010BF8  B4D8               	btfsc	status,2,c
 19822  010BFA  D734               	goto	l10826
 19823  010BFC  0A01               	xorlw	1	; case 1
 19824  010BFE  B4D8               	btfsc	status,2,c
 19825  010C00  D756               	goto	l10828
 19826  010C02  0A03               	xorlw	3	; case 2
 19827  010C04  B4D8               	btfsc	status,2,c
 19828  010C06  D789               	goto	l10832
 19829  010C08  0A01               	xorlw	1	; case 3
 19830  010C0A  B4D8               	btfsc	status,2,c
 19831  010C0C  D7BC               	goto	l10836
 19832  010C0E                     l10844:
 19833                           
 19834                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 19835  010C0E  0E08               	movlw	8
 19836  010C10  0102               	movlb	2	; () banked
 19837  010C12  2503               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19838  010C14  0100               	movlb	0	; () banked
 19839  010C16  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 19840  010C18  0E00               	movlw	0
 19841  010C1A  0102               	movlb	2	; () banked
 19842  010C1C  2104               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19843  010C1E  0100               	movlb	0	; () banked
 19844  010C20  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19845  010C22  0102               	movlb	2	; () banked
 19846  010C24  5105               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19847  010C26  0D04               	mullw	4
 19848  010C28  CFF3 F0D5          	movff	prodl,Word_SetPair@pPair
 19849  010C2C  C206  F0D6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19850  010C30  EC15  F09F         	call	_Word_SetPair	;wreg free
 19851                           
 19852                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 19853  010C34  0E08               	movlw	8
 19854  010C36  0102               	movlb	2	; () banked
 19855  010C38  2503               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19856  010C3A  0100               	movlb	0	; () banked
 19857  010C3C  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 19858  010C3E  0E00               	movlw	0
 19859  010C40  0102               	movlb	2	; () banked
 19860  010C42  2104               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19861  010C44  0100               	movlb	0	; () banked
 19862  010C46  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19863  010C48  0102               	movlb	2	; () banked
 19864  010C4A  5105               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19865  010C4C  0D04               	mullw	4
 19866  010C4E  28F3               	incf	prodl,w,c
 19867  010C50  0100               	movlb	0	; () banked
 19868  010C52  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 19869  010C54  C206  F0D6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19870  010C58  EC15  F09F         	call	_Word_SetPair	;wreg free
 19871                           
 19872                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 19873  010C5C  0E08               	movlw	8
 19874  010C5E  0102               	movlb	2	; () banked
 19875  010C60  2503               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19876  010C62  0100               	movlb	0	; () banked
 19877  010C64  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 19878  010C66  0E00               	movlw	0
 19879  010C68  0102               	movlb	2	; () banked
 19880  010C6A  2104               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19881  010C6C  0100               	movlb	0	; () banked
 19882  010C6E  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19883  010C70  0102               	movlb	2	; () banked
 19884  010C72  5105               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19885  010C74  0D04               	mullw	4
 19886  010C76  50F3               	movf	prodl,w,c
 19887  010C78  0F02               	addlw	2
 19888  010C7A  0100               	movlb	0	; () banked
 19889  010C7C  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 19890  010C7E  C206  F0D6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19891  010C82  EC15  F09F         	call	_Word_SetPair	;wreg free
 19892                           
 19893                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 19894  010C86  0E08               	movlw	8
 19895  010C88  0102               	movlb	2	; () banked
 19896  010C8A  2503               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19897  010C8C  0100               	movlb	0	; () banked
 19898  010C8E  6FD3               	movwf	Word_SetPair@pInput& (0+255),b
 19899  010C90  0E00               	movlw	0
 19900  010C92  0102               	movlb	2	; () banked
 19901  010C94  2104               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19902  010C96  0100               	movlb	0	; () banked
 19903  010C98  6FD4               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19904  010C9A  0102               	movlb	2	; () banked
 19905  010C9C  5105               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19906  010C9E  0D04               	mullw	4
 19907  010CA0  50F3               	movf	prodl,w,c
 19908  010CA2  0F03               	addlw	3
 19909  010CA4  0100               	movlb	0	; () banked
 19910  010CA6  6FD5               	movwf	Word_SetPair@pPair& (0+255),b
 19911  010CA8  C206  F0D6         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19912  010CAC  EC15  F09F         	call	_Word_SetPair	;wreg free
 19913  010CB0  0012               	return	
 19914  010CB2                     __end_of_Port_SetQuadType:
 19915                           	opt stack 0
 19916                           tosu	equ	0xFFF
 19917                           tosh	equ	0xFFE
 19918                           tosl	equ	0xFFD
 19919                           pclath	equ	0xFFA
 19920                           tblptru	equ	0xFF8
 19921                           tblptrh	equ	0xFF7
 19922                           tblptrl	equ	0xFF6
 19923                           tablat	equ	0xFF5
 19924                           prodh	equ	0xFF4
 19925                           prodl	equ	0xFF3
 19926                           intcon	equ	0xFF2
 19927                           postinc0	equ	0xFEE
 19928                           wreg	equ	0xFE8
 19929                           indf1	equ	0xFE7
 19930                           postdec1	equ	0xFE5
 19931                           fsr1h	equ	0xFE2
 19932                           fsr1l	equ	0xFE1
 19933                           indf2	equ	0xFDF
 19934                           postinc2	equ	0xFDE
 19935                           postdec2	equ	0xFDD
 19936                           plusw2	equ	0xFDB
 19937                           fsr2h	equ	0xFDA
 19938                           fsr2l	equ	0xFD9
 19939                           status	equ	0xFD8
 19940                           
 19941 ;; *************** function _Word_SetPair *****************
 19942 ;; Defined at:
 19943 ;;		line 149 in file "Library/Types.c"
 19944 ;; Parameters:    Size  Location     Type
 19945 ;;  pInput          2   15[BANK0 ] PTR struct Word
 19946 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19947 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19948 ;;  pPair           1   17[BANK0 ] unsigned char 
 19949 ;;  pValue          1   18[BANK0 ] unsigned char 
 19950 ;; Auto vars:     Size  Location     Type
 19951 ;;		None
 19952 ;; Return value:  Size  Location     Type
 19953 ;;                  1    wreg      void 
 19954 ;; Registers used:
 19955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19956 ;; Tracked objects:
 19957 ;;		On entry : 0/0
 19958 ;;		On exit  : 0/0
 19959 ;;		Unchanged: 0/0
 19960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19964 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19965 ;;Total ram usage:        4 bytes
 19966 ;; Hardware stack levels used:    1
 19967 ;; Hardware stack levels required when called:    9
 19968 ;; This function calls:
 19969 ;;		_Byte_SetPair
 19970 ;; This function is called by:
 19971 ;;		_Port_SetPinType
 19972 ;;		_Port_SetQuadType
 19973 ;;		_Port_SetType
 19974 ;;		_Port_SetPairType
 19975 ;;		_PortProperty_Init
 19976 ;; This function uses a non-reentrant model
 19977 ;;
 19978                           
 19979                           	psect	text113
 19980  013E2A                     __ptext113:
 19981                           	opt stack 0
 19982  013E2A                     _Word_SetPair:
 19983                           	opt stack 18
 19984                           
 19985                           ;Types.c: 151: if (pPair >= 4)
 19986                           
 19987                           ;incstack = 0
 19988  013E2A  0E03               	movlw	3
 19989  013E2C  0100               	movlb	0	; () banked
 19990  013E2E  65D5               	cpfsgt	Word_SetPair@pPair& (0+255),b
 19991  013E30  D014               	goto	l10674
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 19995  013E32  0E01               	movlw	1
 19996  013E34  0100               	movlb	0	; () banked
 19997  013E36  25D3               	addwf	Word_SetPair@pInput& (0+255),w,b
 19998  013E38  0100               	movlb	0	; () banked
 19999  013E3A  6FCF               	movwf	Byte_SetPair@pInput& (0+255),b
 20000  013E3C  0E00               	movlw	0
 20001  013E3E  0100               	movlb	0	; () banked
 20002  013E40  21D4               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 20003  013E42  0100               	movlb	0	; () banked
 20004  013E44  6FD0               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 20005  013E46  0100               	movlb	0	; () banked
 20006  013E48  51D5               	movf	Word_SetPair@pPair& (0+255),w,b
 20007  013E4A  0FFC               	addlw	252
 20008  013E4C  0100               	movlb	0	; () banked
 20009  013E4E  6FD1               	movwf	Byte_SetPair@pPair& (0+255),b
 20010  013E50  C0D6  F0D2         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 20011  013E54  ECCF  F0A1         	call	_Byte_SetPair	;wreg free
 20012  013E58  0012               	return	
 20013  013E5A                     l10674:
 20014                           
 20015                           ;Types.c: 153: else
 20016                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 20017  013E5A  C0D3  F0CF         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 20018  013E5E  C0D4  F0D0         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 20019  013E62  C0D5  F0D1         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 20020  013E66  C0D6  F0D2         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 20021  013E6A  ECCF  F0A1         	call	_Byte_SetPair	;wreg free
 20022  013E6E  0012               	return	
 20023  013E70                     __end_of_Word_SetPair:
 20024                           	opt stack 0
 20025                           tosu	equ	0xFFF
 20026                           tosh	equ	0xFFE
 20027                           tosl	equ	0xFFD
 20028                           pclath	equ	0xFFA
 20029                           tblptru	equ	0xFF8
 20030                           tblptrh	equ	0xFF7
 20031                           tblptrl	equ	0xFF6
 20032                           tablat	equ	0xFF5
 20033                           prodh	equ	0xFF4
 20034                           prodl	equ	0xFF3
 20035                           intcon	equ	0xFF2
 20036                           postinc0	equ	0xFEE
 20037                           wreg	equ	0xFE8
 20038                           indf1	equ	0xFE7
 20039                           postdec1	equ	0xFE5
 20040                           fsr1h	equ	0xFE2
 20041                           fsr1l	equ	0xFE1
 20042                           indf2	equ	0xFDF
 20043                           postinc2	equ	0xFDE
 20044                           postdec2	equ	0xFDD
 20045                           plusw2	equ	0xFDB
 20046                           fsr2h	equ	0xFDA
 20047                           fsr2l	equ	0xFD9
 20048                           status	equ	0xFD8
 20049                           
 20050 ;; *************** function _Byte_SetPair *****************
 20051 ;; Defined at:
 20052 ;;		line 83 in file "Library/Types.c"
 20053 ;; Parameters:    Size  Location     Type
 20054 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 20055 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 20056 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 20057 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 20058 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 20059 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 20060 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 20061 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 20062 ;;		 -> NULL(0), 
 20063 ;;  pPair           1   13[BANK0 ] unsigned char 
 20064 ;;  pValue          1   14[BANK0 ] unsigned char 
 20065 ;; Auto vars:     Size  Location     Type
 20066 ;;		None
 20067 ;; Return value:  Size  Location     Type
 20068 ;;                  1    wreg      void 
 20069 ;; Registers used:
 20070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20071 ;; Tracked objects:
 20072 ;;		On entry : 0/0
 20073 ;;		On exit  : 0/0
 20074 ;;		Unchanged: 0/0
 20075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20076 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20080 ;;Total ram usage:        4 bytes
 20081 ;; Hardware stack levels used:    1
 20082 ;; Hardware stack levels required when called:    8
 20083 ;; This function calls:
 20084 ;;		_Byte_SetZone
 20085 ;; This function is called by:
 20086 ;;		_Word_SetPair
 20087 ;;		_Port_SetPairType
 20088 ;;		_Port_SetPair
 20089 ;; This function uses a non-reentrant model
 20090 ;;
 20091                           
 20092                           	psect	text114
 20093  01439E                     __ptext114:
 20094                           	opt stack 0
 20095  01439E                     _Byte_SetPair:
 20096                           	opt stack 18
 20097                           
 20098                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 20099                           
 20100                           ;incstack = 0
 20101  01439E  C0CF  F0C4         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 20102  0143A2  C0D0  F0C5         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 20103  0143A6  0E04               	movlw	4
 20104  0143A8  0100               	movlb	0	; () banked
 20105  0143AA  6FC6               	movwf	Byte_SetZone@pMax& (0+255),b
 20106  0143AC  C0D1  F0C7         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 20107  0143B0  0E02               	movlw	2
 20108  0143B2  0100               	movlb	0	; () banked
 20109  0143B4  6FC8               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 20110  0143B6  C0D2  F0C9         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 20111  0143BA  ECBA  F094         	call	_Byte_SetZone	;wreg free
 20112  0143BE  0012               	return		;funcret
 20113  0143C0                     __end_of_Byte_SetPair:
 20114                           	opt stack 0
 20115                           tosu	equ	0xFFF
 20116                           tosh	equ	0xFFE
 20117                           tosl	equ	0xFFD
 20118                           pclath	equ	0xFFA
 20119                           tblptru	equ	0xFF8
 20120                           tblptrh	equ	0xFF7
 20121                           tblptrl	equ	0xFF6
 20122                           tablat	equ	0xFF5
 20123                           prodh	equ	0xFF4
 20124                           prodl	equ	0xFF3
 20125                           intcon	equ	0xFF2
 20126                           postinc0	equ	0xFEE
 20127                           wreg	equ	0xFE8
 20128                           indf1	equ	0xFE7
 20129                           postdec1	equ	0xFE5
 20130                           fsr1h	equ	0xFE2
 20131                           fsr1l	equ	0xFE1
 20132                           indf2	equ	0xFDF
 20133                           postinc2	equ	0xFDE
 20134                           postdec2	equ	0xFDD
 20135                           plusw2	equ	0xFDB
 20136                           fsr2h	equ	0xFDA
 20137                           fsr2l	equ	0xFD9
 20138                           status	equ	0xFD8
 20139                           
 20140 ;; *************** function _Port_CheckQuadType *****************
 20141 ;; Defined at:
 20142 ;;		line 126 in file "Library/Port.c"
 20143 ;; Parameters:    Size  Location     Type
 20144 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 20145 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20146 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20147 ;;  pQuad           1   49[BANK0 ] enum E6776
 20148 ;;  pDrive          1   50[BANK0 ] enum E6469
 20149 ;; Auto vars:     Size  Location     Type
 20150 ;;  Output          1    2[BANK2 ] enum E6475
 20151 ;;  Pair2           1    1[BANK2 ] enum E6760
 20152 ;;  Pair1           1    0[BANK2 ] enum E6760
 20153 ;; Return value:  Size  Location     Type
 20154 ;;                  1    wreg      enum E6475
 20155 ;; Registers used:
 20156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20157 ;; Tracked objects:
 20158 ;;		On entry : 0/0
 20159 ;;		On exit  : 0/0
 20160 ;;		Unchanged: 0/0
 20161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20162 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20163 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20165 ;;      Totals:         0       4       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20166 ;;Total ram usage:        7 bytes
 20167 ;; Hardware stack levels used:    1
 20168 ;; Hardware stack levels required when called:   12
 20169 ;; This function calls:
 20170 ;;		_Port_CheckPairType
 20171 ;; This function is called by:
 20172 ;;		_Port_CheckPortType
 20173 ;;		_Port_SetQuadType
 20174 ;; This function uses a non-reentrant model
 20175 ;;
 20176                           
 20177                           	psect	text115
 20178  013A24                     __ptext115:
 20179                           	opt stack 0
 20180  013A24                     _Port_CheckQuadType:
 20181                           	opt stack 14
 20182                           
 20183                           ;Port.c: 128: ePinError Output = ePinErrorState;
 20184                           
 20185                           ;incstack = 0
 20186  013A24  0E05               	movlw	5
 20187  013A26  0102               	movlb	2	; () banked
 20188  013A28  6F02               	movwf	Port_CheckQuadType@Output& (0+255),b
 20189                           
 20190                           ; BSR set to: 2
 20191                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 20192  013A2A  0100               	movlb	0	; () banked
 20193  013A2C  51F5               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 20194  013A2E  0D02               	mullw	2
 20195  013A30  CFF3 F200          	movff	prodl,Port_CheckQuadType@Pair1
 20196                           
 20197                           ; BSR set to: 0
 20198                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 20199  013A34  0100               	movlb	0	; () banked
 20200  013A36  51F5               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 20201  013A38  0D02               	mullw	2
 20202  013A3A  28F3               	incf	prodl,w,c
 20203  013A3C  0102               	movlb	2	; () banked
 20204  013A3E  6F01               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 20205                           
 20206                           ; BSR set to: 2
 20207                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 20208  013A40  C0F3  F0EA         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 20209  013A44  C0F4  F0EB         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 20210  013A48  C200  F0EC         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 20211  013A4C  C0F6  F0ED         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 20212  013A50  EC17  F09C         	call	_Port_CheckPairType	;wreg free
 20213  013A54  0102               	movlb	2	; () banked
 20214  013A56  6F02               	movwf	Port_CheckQuadType@Output& (0+255),b
 20215  013A58  0102               	movlb	2	; () banked
 20216  013A5A  5102               	movf	Port_CheckQuadType@Output& (0+255),w,b
 20217  013A5C  A4D8               	btfss	status,2,c
 20218  013A5E  D00C               	goto	l10666
 20219                           
 20220                           ; BSR set to: 2
 20221                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 20222  013A60  C0F3  F0EA         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 20223  013A64  C0F4  F0EB         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 20224  013A68  C201  F0EC         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 20225  013A6C  C0F6  F0ED         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 20226  013A70  EC17  F09C         	call	_Port_CheckPairType	;wreg free
 20227  013A74  0102               	movlb	2	; () banked
 20228  013A76  6F02               	movwf	Port_CheckQuadType@Output& (0+255),b
 20229  013A78                     l10666:
 20230                           
 20231                           ; BSR set to: 2
 20232                           ;Port.c: 136: return Output;
 20233  013A78  0102               	movlb	2	; () banked
 20234  013A7A  5102               	movf	Port_CheckQuadType@Output& (0+255),w,b
 20235  013A7C  0012               	return	
 20236  013A7E                     __end_of_Port_CheckQuadType:
 20237                           	opt stack 0
 20238                           tosu	equ	0xFFF
 20239                           tosh	equ	0xFFE
 20240                           tosl	equ	0xFFD
 20241                           pclath	equ	0xFFA
 20242                           tblptru	equ	0xFF8
 20243                           tblptrh	equ	0xFF7
 20244                           tblptrl	equ	0xFF6
 20245                           tablat	equ	0xFF5
 20246                           prodh	equ	0xFF4
 20247                           prodl	equ	0xFF3
 20248                           intcon	equ	0xFF2
 20249                           postinc0	equ	0xFEE
 20250                           wreg	equ	0xFE8
 20251                           indf1	equ	0xFE7
 20252                           postdec1	equ	0xFE5
 20253                           fsr1h	equ	0xFE2
 20254                           fsr1l	equ	0xFE1
 20255                           indf2	equ	0xFDF
 20256                           postinc2	equ	0xFDE
 20257                           postdec2	equ	0xFDD
 20258                           plusw2	equ	0xFDB
 20259                           fsr2h	equ	0xFDA
 20260                           fsr2l	equ	0xFD9
 20261                           status	equ	0xFD8
 20262                           
 20263 ;; *************** function _Port_CheckPairType *****************
 20264 ;; Defined at:
 20265 ;;		line 112 in file "Library/Port.c"
 20266 ;; Parameters:    Size  Location     Type
 20267 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20268 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20269 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20270 ;;  pPair           1   40[BANK0 ] enum E6760
 20271 ;;  pDrive          1   41[BANK0 ] enum E6469
 20272 ;; Auto vars:     Size  Location     Type
 20273 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 20274 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20275 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20276 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20277 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20278 ;;  Output          1   44[BANK0 ] enum E6475
 20279 ;;  Pin2            1   43[BANK0 ] enum E6750
 20280 ;;  Pin1            1   42[BANK0 ] enum E6750
 20281 ;; Return value:  Size  Location     Type
 20282 ;;                  1    wreg      enum E6475
 20283 ;; Registers used:
 20284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20285 ;; Tracked objects:
 20286 ;;		On entry : 0/0
 20287 ;;		On exit  : 0/0
 20288 ;;		Unchanged: 0/0
 20289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20290 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20291 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20293 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20294 ;;Total ram usage:        9 bytes
 20295 ;; Hardware stack levels used:    1
 20296 ;; Hardware stack levels required when called:   11
 20297 ;; This function calls:
 20298 ;;		_PortProperty_Valid
 20299 ;; This function is called by:
 20300 ;;		_Port_CheckQuadType
 20301 ;;		_Port_SetPairType
 20302 ;; This function uses a non-reentrant model
 20303 ;;
 20304                           
 20305                           	psect	text116
 20306  01382E                     __ptext116:
 20307                           	opt stack 0
 20308  01382E                     _Port_CheckPairType:
 20309                           	opt stack 14
 20310                           
 20311                           ;Port.c: 114: ePinError Output = ePinErrorState;
 20312                           
 20313                           ; BSR set to: 2
 20314                           ;incstack = 0
 20315  01382E  0E05               	movlw	5
 20316  013830  0100               	movlb	0	; () banked
 20317  013832  6FF0               	movwf	Port_CheckPairType@Output& (0+255),b
 20318                           
 20319                           ; BSR set to: 0
 20320                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 20321  013834  C0EA  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 20322  013838  C0EB  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 20323  01383C  CFDE F0F1          	movff	postinc2,Port_CheckPairType@Props
 20324  013840  CFDD F0F2          	movff	postdec2,Port_CheckPairType@Props+1
 20325                           
 20326                           ; BSR set to: 0
 20327                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 20328  013844  0100               	movlb	0	; () banked
 20329  013846  51EC               	movf	Port_CheckPairType@pPair& (0+255),w,b
 20330  013848  0D02               	mullw	2
 20331  01384A  CFF3 F0EE          	movff	prodl,Port_CheckPairType@Pin1
 20332                           
 20333                           ; BSR set to: 0
 20334                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 20335  01384E  0100               	movlb	0	; () banked
 20336  013850  51EC               	movf	Port_CheckPairType@pPair& (0+255),w,b
 20337  013852  0D02               	mullw	2
 20338  013854  28F3               	incf	prodl,w,c
 20339  013856  0100               	movlb	0	; () banked
 20340  013858  6FEF               	movwf	Port_CheckPairType@Pin2& (0+255),b
 20341                           
 20342                           ; BSR set to: 0
 20343                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 20344  01385A  C0F1  F0D3         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 20345  01385E  C0F2  F0D4         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 20346  013862  C0ED  F0D5         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 20347  013866  C0EE  F0D6         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 20348  01386A  ECA2  F099         	call	_PortProperty_Valid	;wreg free
 20349  01386E  0100               	movlb	0	; () banked
 20350  013870  6FF0               	movwf	Port_CheckPairType@Output& (0+255),b
 20351  013872  0100               	movlb	0	; () banked
 20352  013874  51F0               	movf	Port_CheckPairType@Output& (0+255),w,b
 20353  013876  A4D8               	btfss	status,2,c
 20354  013878  D00C               	goto	l10576
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 20358  01387A  C0F1  F0D3         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 20359  01387E  C0F2  F0D4         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 20360  013882  C0ED  F0D5         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 20361  013886  C0EF  F0D6         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 20362  01388A  ECA2  F099         	call	_PortProperty_Valid	;wreg free
 20363  01388E  0100               	movlb	0	; () banked
 20364  013890  6FF0               	movwf	Port_CheckPairType@Output& (0+255),b
 20365  013892                     l10576:
 20366                           
 20367                           ; BSR set to: 0
 20368                           ;Port.c: 124: return Output;
 20369  013892  0100               	movlb	0	; () banked
 20370  013894  51F0               	movf	Port_CheckPairType@Output& (0+255),w,b
 20371  013896  0012               	return	
 20372  013898                     __end_of_Port_CheckPairType:
 20373                           	opt stack 0
 20374                           tosu	equ	0xFFF
 20375                           tosh	equ	0xFFE
 20376                           tosl	equ	0xFFD
 20377                           pclath	equ	0xFFA
 20378                           tblptru	equ	0xFF8
 20379                           tblptrh	equ	0xFF7
 20380                           tblptrl	equ	0xFF6
 20381                           tablat	equ	0xFF5
 20382                           prodh	equ	0xFF4
 20383                           prodl	equ	0xFF3
 20384                           intcon	equ	0xFF2
 20385                           postinc0	equ	0xFEE
 20386                           wreg	equ	0xFE8
 20387                           indf1	equ	0xFE7
 20388                           postdec1	equ	0xFE5
 20389                           fsr1h	equ	0xFE2
 20390                           fsr1l	equ	0xFE1
 20391                           indf2	equ	0xFDF
 20392                           postinc2	equ	0xFDE
 20393                           postdec2	equ	0xFDD
 20394                           plusw2	equ	0xFDB
 20395                           fsr2h	equ	0xFDA
 20396                           fsr2l	equ	0xFD9
 20397                           status	equ	0xFD8
 20398                           
 20399 ;; *************** function _PortProperty_Valid *****************
 20400 ;; Defined at:
 20401 ;;		line 220 in file "Library/Types.c"
 20402 ;; Parameters:    Size  Location     Type
 20403 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 20404 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20405 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20406 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20407 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20408 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 20409 ;;  pPin            1   18[BANK0 ] unsigned char 
 20410 ;; Auto vars:     Size  Location     Type
 20411 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 20412 ;;  Pair            1   37[BANK0 ] enum E6469
 20413 ;; Return value:  Size  Location     Type
 20414 ;;                  1    wreg      enum E6475
 20415 ;; Registers used:
 20416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20417 ;; Tracked objects:
 20418 ;;		On entry : 0/0
 20419 ;;		On exit  : 0/0
 20420 ;;		Unchanged: 0/0
 20421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20423 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20425 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20426 ;;Total ram usage:       23 bytes
 20427 ;; Hardware stack levels used:    1
 20428 ;; Hardware stack levels required when called:   10
 20429 ;; This function calls:
 20430 ;;		_Word_GetPair
 20431 ;; This function is called by:
 20432 ;;		_Port_CheckPairType
 20433 ;;		_Port_SetPinType
 20434 ;; This function uses a non-reentrant model
 20435 ;;
 20436                           
 20437                           	psect	text117
 20438  013344                     __ptext117:
 20439                           	opt stack 0
 20440  013344                     _PortProperty_Valid:
 20441                           	opt stack 14
 20442                           
 20443                           ;Types.c: 222: ePinDrive Pair;
 20444                           ;Types.c: 223: const ePinError Errors[4][4] =
 20445                           ;Types.c: 224: {
 20446                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 20447                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 20448                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 20449                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 20450                           ;Types.c: 230: };
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;incstack = 0
 20454  013344  0E5D               	movlw	low PortProperty_Valid@F6830
 20455  013346  6EF6               	movwf	tblptrl,c
 20456  013348                     	if	1	;There is more than 1 active tblptr byte
 20457  013348  0EFD               	movlw	high PortProperty_Valid@F6830
 20458  01334A  6EF7               	movwf	tblptrh,c
 20459  01334C                     	endif
 20460  01334C                     	if	1	;There are 3 active tblptr bytes
 20461  01334C  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 20462  01334E  6EF8               	movwf	tblptru,c
 20463  013350                     	endif
 20464  013350  EE20  F0D9         	lfsr	2,PortProperty_Valid@Errors
 20465  013354  0E0F               	movlw	15
 20466  013356                     u6810:
 20467  013356  0009               	tblrd		*+
 20468  013358  CFF5 FFDE          	movff	tablat,postinc2
 20469  01335C  06E8               	decf	wreg,f,c
 20470  01335E  E2FB               	bc	u6810
 20471                           
 20472                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 20473  013360  C0D3  F0D0         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 20474  013364  C0D4  F0D1         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 20475  013368  C0D6  F0D2         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 20476  01336C  ECBA  F09F         	call	_Word_GetPair	;wreg free
 20477  013370  0100               	movlb	0	; () banked
 20478  013372  6FE9               	movwf	PortProperty_Valid@Pair& (0+255),b
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 20482  013374  0E04               	movlw	4
 20483  013376  0100               	movlb	0	; () banked
 20484  013378  61D5               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 20485  01337A  D020               	goto	l10366
 20486                           
 20487                           ; BSR set to: 0
 20488  01337C  0E04               	movlw	4
 20489  01337E  0100               	movlb	0	; () banked
 20490  013380  61E9               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 20491  013382  D01C               	goto	l10366
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 20495  013384  0100               	movlb	0	; () banked
 20496  013386  51D5               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 20497  013388  0D04               	mullw	4
 20498  01338A  0ED9               	movlw	low PortProperty_Valid@Errors
 20499  01338C  0100               	movlb	0	; () banked
 20500  01338E  6FD7               	movwf	??_PortProperty_Valid& (0+255),b
 20501  013390  0E00               	movlw	high PortProperty_Valid@Errors
 20502  013392  0100               	movlb	0	; () banked
 20503  013394  6FD8               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 20504  013396  50F3               	movf	prodl,w,c
 20505  013398  0100               	movlb	0	; () banked
 20506  01339A  27D7               	addwf	??_PortProperty_Valid& (0+255),f,b
 20507  01339C  50F4               	movf	prodh,w,c
 20508  01339E  0100               	movlb	0	; () banked
 20509  0133A0  23D8               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 20510  0133A2  0100               	movlb	0	; () banked
 20511  0133A4  51E9               	movf	PortProperty_Valid@Pair& (0+255),w,b
 20512  0133A6  0D01               	mullw	1
 20513  0133A8  50F3               	movf	prodl,w,c
 20514  0133AA  0100               	movlb	0	; () banked
 20515  0133AC  25D7               	addwf	??_PortProperty_Valid& (0+255),w,b
 20516  0133AE  6ED9               	movwf	fsr2l,c
 20517  0133B0  50F4               	movf	prodh,w,c
 20518  0133B2  0100               	movlb	0	; () banked
 20519  0133B4  21D8               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 20520  0133B6  6EDA               	movwf	fsr2h,c
 20521  0133B8  50DF               	movf	indf2,w,c
 20522                           
 20523                           ; BSR set to: 0
 20524  0133BA  0012               	return	
 20525  0133BC                     l10366:
 20526                           
 20527                           ; BSR set to: 0
 20528                           ;Types.c: 237: return ePinErrorState;
 20529  0133BC  0E05               	movlw	5
 20530  0133BE  0012               	return	
 20531  0133C0                     __end_of_PortProperty_Valid:
 20532                           	opt stack 0
 20533                           tosu	equ	0xFFF
 20534                           tosh	equ	0xFFE
 20535                           tosl	equ	0xFFD
 20536                           pclath	equ	0xFFA
 20537                           tblptru	equ	0xFF8
 20538                           tblptrh	equ	0xFF7
 20539                           tblptrl	equ	0xFF6
 20540                           tablat	equ	0xFF5
 20541                           prodh	equ	0xFF4
 20542                           prodl	equ	0xFF3
 20543                           intcon	equ	0xFF2
 20544                           postinc0	equ	0xFEE
 20545                           wreg	equ	0xFE8
 20546                           indf1	equ	0xFE7
 20547                           postdec1	equ	0xFE5
 20548                           fsr1h	equ	0xFE2
 20549                           fsr1l	equ	0xFE1
 20550                           indf2	equ	0xFDF
 20551                           postinc2	equ	0xFDE
 20552                           postdec2	equ	0xFDD
 20553                           plusw2	equ	0xFDB
 20554                           fsr2h	equ	0xFDA
 20555                           fsr2l	equ	0xFD9
 20556                           status	equ	0xFD8
 20557                           
 20558 ;; *************** function _Word_GetPair *****************
 20559 ;; Defined at:
 20560 ;;		line 156 in file "Library/Types.c"
 20561 ;; Parameters:    Size  Location     Type
 20562 ;;  pInput          2   12[BANK0 ] PTR struct Word
 20563 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20564 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20565 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20566 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20567 ;;  pPair           1   14[BANK0 ] unsigned char 
 20568 ;; Auto vars:     Size  Location     Type
 20569 ;;		None
 20570 ;; Return value:  Size  Location     Type
 20571 ;;                  1    wreg      unsigned char 
 20572 ;; Registers used:
 20573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20574 ;; Tracked objects:
 20575 ;;		On entry : 0/0
 20576 ;;		On exit  : 0/0
 20577 ;;		Unchanged: 0/0
 20578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20579 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20582 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20583 ;;Total ram usage:        3 bytes
 20584 ;; Hardware stack levels used:    1
 20585 ;; Hardware stack levels required when called:    9
 20586 ;; This function calls:
 20587 ;;		_Byte_GetPair
 20588 ;; This function is called by:
 20589 ;;		_Port_Init
 20590 ;;		_Port_SetPin
 20591 ;;		_Port_Set
 20592 ;;		_PortProperty_Valid
 20593 ;;		_Port_SetPair
 20594 ;;		_Port_SetQuad
 20595 ;; This function uses a non-reentrant model
 20596 ;;
 20597                           
 20598                           	psect	text118
 20599  013F74                     __ptext118:
 20600                           	opt stack 0
 20601  013F74                     _Word_GetPair:
 20602                           	opt stack 10
 20603                           
 20604                           ;Types.c: 158: if (pPair >= 4)
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;incstack = 0
 20608  013F74  0E03               	movlw	3
 20609  013F76  0100               	movlb	0	; () banked
 20610  013F78  65D2               	cpfsgt	Word_GetPair@pPair& (0+255),b
 20611  013F7A  D012               	goto	l9756
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20615  013F7C  0E01               	movlw	1
 20616  013F7E  0100               	movlb	0	; () banked
 20617  013F80  25D0               	addwf	Word_GetPair@pInput& (0+255),w,b
 20618  013F82  0100               	movlb	0	; () banked
 20619  013F84  6FCD               	movwf	Byte_GetPair@pInput& (0+255),b
 20620  013F86  0E00               	movlw	0
 20621  013F88  0100               	movlb	0	; () banked
 20622  013F8A  21D1               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 20623  013F8C  0100               	movlb	0	; () banked
 20624  013F8E  6FCE               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 20625  013F90  0100               	movlb	0	; () banked
 20626  013F92  51D2               	movf	Word_GetPair@pPair& (0+255),w,b
 20627  013F94  0FFC               	addlw	252
 20628  013F96  0100               	movlb	0	; () banked
 20629  013F98  6FCF               	movwf	Byte_GetPair@pPair& (0+255),b
 20630  013F9A  EC4C  F0A2         	call	_Byte_GetPair	;wreg free
 20631  013F9E  0012               	return	
 20632  013FA0                     l9756:
 20633                           
 20634                           ;Types.c: 160: else
 20635                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20636  013FA0  C0D0  F0CD         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 20637  013FA4  C0D1  F0CE         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 20638  013FA8  C0D2  F0CF         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 20639  013FAC  EC4C  F0A2         	call	_Byte_GetPair	;wreg free
 20640  013FB0  0012               	return	
 20641  013FB2                     __end_of_Word_GetPair:
 20642                           	opt stack 0
 20643                           tosu	equ	0xFFF
 20644                           tosh	equ	0xFFE
 20645                           tosl	equ	0xFFD
 20646                           pclath	equ	0xFFA
 20647                           tblptru	equ	0xFF8
 20648                           tblptrh	equ	0xFF7
 20649                           tblptrl	equ	0xFF6
 20650                           tablat	equ	0xFF5
 20651                           prodh	equ	0xFF4
 20652                           prodl	equ	0xFF3
 20653                           intcon	equ	0xFF2
 20654                           postinc0	equ	0xFEE
 20655                           wreg	equ	0xFE8
 20656                           indf1	equ	0xFE7
 20657                           postdec1	equ	0xFE5
 20658                           fsr1h	equ	0xFE2
 20659                           fsr1l	equ	0xFE1
 20660                           indf2	equ	0xFDF
 20661                           postinc2	equ	0xFDE
 20662                           postdec2	equ	0xFDD
 20663                           plusw2	equ	0xFDB
 20664                           fsr2h	equ	0xFDA
 20665                           fsr2l	equ	0xFD9
 20666                           status	equ	0xFD8
 20667                           
 20668 ;; *************** function _Byte_GetPair *****************
 20669 ;; Defined at:
 20670 ;;		line 87 in file "Library/Types.c"
 20671 ;; Parameters:    Size  Location     Type
 20672 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 20673 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20674 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20675 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20676 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20677 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20678 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20679 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20680 ;;		 -> NULL(0), 
 20681 ;;  pPair           1   11[BANK0 ] unsigned char 
 20682 ;; Auto vars:     Size  Location     Type
 20683 ;;		None
 20684 ;; Return value:  Size  Location     Type
 20685 ;;                  1    wreg      unsigned char 
 20686 ;; Registers used:
 20687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20688 ;; Tracked objects:
 20689 ;;		On entry : 0/0
 20690 ;;		On exit  : 0/0
 20691 ;;		Unchanged: 0/0
 20692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20693 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;Total ram usage:        3 bytes
 20698 ;; Hardware stack levels used:    1
 20699 ;; Hardware stack levels required when called:    8
 20700 ;; This function calls:
 20701 ;;		_Byte_GetZone
 20702 ;; This function is called by:
 20703 ;;		_Word_GetPair
 20704 ;; This function uses a non-reentrant model
 20705 ;;
 20706                           
 20707                           	psect	text119
 20708  014498                     __ptext119:
 20709                           	opt stack 0
 20710  014498                     _Byte_GetPair:
 20711                           	opt stack 10
 20712                           
 20713                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20714                           
 20715                           ;incstack = 0
 20716  014498  C0CD  F0C4         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 20717  01449C  C0CE  F0C5         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 20718  0144A0  0E04               	movlw	4
 20719  0144A2  0100               	movlb	0	; () banked
 20720  0144A4  6FC6               	movwf	Byte_GetZone@pMax& (0+255),b
 20721  0144A6  C0CF  F0C7         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 20722  0144AA  0E02               	movlw	2
 20723  0144AC  0100               	movlb	0	; () banked
 20724  0144AE  6FC8               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 20725  0144B0  ECAA  F097         	call	_Byte_GetZone	;wreg free
 20726  0144B4  0012               	return	
 20727  0144B6                     __end_of_Byte_GetPair:
 20728                           	opt stack 0
 20729                           tosu	equ	0xFFF
 20730                           tosh	equ	0xFFE
 20731                           tosl	equ	0xFFD
 20732                           pclath	equ	0xFFA
 20733                           tblptru	equ	0xFF8
 20734                           tblptrh	equ	0xFF7
 20735                           tblptrl	equ	0xFF6
 20736                           tablat	equ	0xFF5
 20737                           prodh	equ	0xFF4
 20738                           prodl	equ	0xFF3
 20739                           intcon	equ	0xFF2
 20740                           postinc0	equ	0xFEE
 20741                           wreg	equ	0xFE8
 20742                           indf1	equ	0xFE7
 20743                           postdec1	equ	0xFE5
 20744                           fsr1h	equ	0xFE2
 20745                           fsr1l	equ	0xFE1
 20746                           indf2	equ	0xFDF
 20747                           postinc2	equ	0xFDE
 20748                           postdec2	equ	0xFDD
 20749                           plusw2	equ	0xFDB
 20750                           fsr2h	equ	0xFDA
 20751                           fsr2l	equ	0xFD9
 20752                           status	equ	0xFD8
 20753                           
 20754 ;; *************** function _Byte_GetZone *****************
 20755 ;; Defined at:
 20756 ;;		line 64 in file "Library/Types.c"
 20757 ;; Parameters:    Size  Location     Type
 20758 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20759 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20760 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20761 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20762 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20763 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20764 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20765 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20766 ;;		 -> NULL(0), 
 20767 ;;  pMax            1    2[BANK0 ] unsigned char 
 20768 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20769 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20770 ;; Auto vars:     Size  Location     Type
 20771 ;;  Output          1    8[BANK0 ] unsigned char 
 20772 ;;  Offset          1    7[BANK0 ] unsigned char 
 20773 ;;  MASK            1    6[BANK0 ] unsigned char 
 20774 ;; Return value:  Size  Location     Type
 20775 ;;                  1    wreg      unsigned char 
 20776 ;; Registers used:
 20777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20778 ;; Tracked objects:
 20779 ;;		On entry : 0/0
 20780 ;;		On exit  : 0/0
 20781 ;;		Unchanged: 0/0
 20782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20783 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20786 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20787 ;;Total ram usage:        9 bytes
 20788 ;; Hardware stack levels used:    1
 20789 ;; Hardware stack levels required when called:    7
 20790 ;; This function calls:
 20791 ;;		Nothing
 20792 ;; This function is called by:
 20793 ;;		_Byte_GetPair
 20794 ;;		_Byte_GetTriple
 20795 ;;		_Byte_GetQuad
 20796 ;; This function uses a non-reentrant model
 20797 ;;
 20798                           
 20799                           	psect	text120
 20800  012F54                     __ptext120:
 20801                           	opt stack 0
 20802  012F54                     _Byte_GetZone:
 20803                           	opt stack 10
 20804                           
 20805                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20806                           
 20807                           ;incstack = 0
 20808  012F54  C0C4  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 20809  012F58  C0C5  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 20810  012F5C  0E00               	movlw	low (__mediumconst shr (0+16))
 20811  012F5E  6EF8               	movwf	tblptru,c
 20812  012F60  0E0F               	movlw	(high __ramtop+-1)
 20813  012F62  64F7               	cpfsgt	tblptrh,c
 20814  012F64  D003               	bra	u6377
 20815  012F66  0008               	tblrd		*
 20816  012F68  50F5               	movf	tablat,w,c
 20817  012F6A  D005               	bra	u6370
 20818  012F6C                     u6377:
 20819  012F6C  CFF6 FFE9          	movff	tblptrl,fsr0l
 20820  012F70  CFF7 FFEA          	movff	tblptrh,fsr0h
 20821  012F74  50EF               	movf	indf0,w,c
 20822  012F76                     u6370:
 20823  012F76  0100               	movlb	0	; () banked
 20824  012F78  6FCC               	movwf	Byte_GetZone@Output& (0+255),b
 20825                           
 20826                           ; BSR set to: 0
 20827                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20828  012F7A  0100               	movlb	0	; () banked
 20829  012F7C  51C8               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20830  012F7E  0D01               	mullw	1
 20831  012F80  0E77               	movlw	low _MASKS
 20832  012F82  24F3               	addwf	prodl,w,c
 20833  012F84  6EF6               	movwf	tblptrl,c
 20834  012F86  0EFD               	movlw	high _MASKS
 20835  012F88  20F4               	addwfc	prodh,w,c
 20836  012F8A  6EF7               	movwf	tblptrh,c
 20837  012F8C                     	if	1	;There are 3 active tblptr bytes
 20838  012F8C  6AF8               	clrf	tblptru,c
 20839  012F8E  0E00               	movlw	low (__mediumconst shr (0+16))
 20840  012F90  22F8               	addwfc	tblptru,f,c
 20841  012F92                     	endif
 20842  012F92  0008               	tblrd		*
 20843  012F94  CFF5 F0CA          	movff	tablat,Byte_GetZone@MASK
 20844                           
 20845                           ; BSR set to: 0
 20846                           ;Types.c: 68: UINT8 Offset = 0;
 20847  012F98  0E00               	movlw	0
 20848  012F9A  0100               	movlb	0	; () banked
 20849  012F9C  6FCB               	movwf	Byte_GetZone@Offset& (0+255),b
 20850                           
 20851                           ;Types.c: 70: while (pChunk >= pMax)
 20852  012F9E  D006               	goto	l9730
 20853  012FA0                     l9726:
 20854                           
 20855                           ; BSR set to: 0
 20856                           ;Types.c: 71: {
 20857                           ;Types.c: 72: pChunk -= pMax;
 20858  012FA0  0100               	movlb	0	; () banked
 20859  012FA2  51C6               	movf	Byte_GetZone@pMax& (0+255),w,b
 20860  012FA4  0100               	movlb	0	; () banked
 20861  012FA6  5FC7               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 20862                           
 20863                           ; BSR set to: 0
 20864                           ;Types.c: 73: Offset += 1;
 20865  012FA8  0100               	movlb	0	; () banked
 20866  012FAA  2BCB               	incf	Byte_GetZone@Offset& (0+255),f,b
 20867  012FAC                     l9730:
 20868                           
 20869                           ; BSR set to: 0
 20870  012FAC  0100               	movlb	0	; () banked
 20871  012FAE  51C6               	movf	Byte_GetZone@pMax& (0+255),w,b
 20872  012FB0  0100               	movlb	0	; () banked
 20873  012FB2  5DC7               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 20874  012FB4  B0D8               	btfsc	status,0,c
 20875  012FB6  D7F4               	goto	l9726
 20876                           
 20877                           ; BSR set to: 0
 20878                           ;Types.c: 74: }
 20879                           ;Types.c: 75: pChunk *= pChunkSize;
 20880                           
 20881                           ; BSR set to: 0
 20882  012FB8  0100               	movlb	0	; () banked
 20883  012FBA  51C8               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20884  012FBC  0100               	movlb	0	; () banked
 20885  012FBE  03C7               	mulwf	Byte_GetZone@pChunk& (0+255),b
 20886  012FC0  50F3               	movf	prodl,w,c
 20887  012FC2  6FC7               	movwf	Byte_GetZone@pChunk& (0+255),b
 20888                           
 20889                           ; BSR set to: 0
 20890                           ;Types.c: 76: pChunk += Offset;
 20891  012FC4  0100               	movlb	0	; () banked
 20892  012FC6  51CB               	movf	Byte_GetZone@Offset& (0+255),w,b
 20893  012FC8  0100               	movlb	0	; () banked
 20894  012FCA  27C7               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 20895                           
 20896                           ; BSR set to: 0
 20897                           ;Types.c: 78: Output >>= pChunk;
 20898  012FCC  0100               	movlb	0	; () banked
 20899  012FCE  29C7               	incf	Byte_GetZone@pChunk& (0+255),w,b
 20900  012FD0  0100               	movlb	0	; () banked
 20901  012FD2  6FC9               	movwf	??_Byte_GetZone& (0+255),b
 20902  012FD4  D003               	goto	u6390
 20903  012FD6                     u6395:
 20904  012FD6  0100               	movlb	0	; () banked
 20905  012FD8  90D8               	bcf	status,0,c
 20906  012FDA  33CC               	rrcf	Byte_GetZone@Output& (0+255),f,b
 20907  012FDC                     u6390:
 20908  012FDC  0100               	movlb	0	; () banked
 20909  012FDE  2FC9               	decfsz	??_Byte_GetZone& (0+255),f,b
 20910  012FE0  D7FA               	goto	u6395
 20911                           
 20912                           ;Types.c: 79: Output &= MASK;
 20913  012FE2  0100               	movlb	0	; () banked
 20914  012FE4  51CA               	movf	Byte_GetZone@MASK& (0+255),w,b
 20915  012FE6  0100               	movlb	0	; () banked
 20916  012FE8  17CC               	andwf	Byte_GetZone@Output& (0+255),f,b
 20917                           
 20918                           ; BSR set to: 0
 20919                           ;Types.c: 80: return Output;
 20920  012FEA  0100               	movlb	0	; () banked
 20921  012FEC  51CC               	movf	Byte_GetZone@Output& (0+255),w,b
 20922  012FEE  0012               	return	
 20923  012FF0                     __end_of_Byte_GetZone:
 20924                           	opt stack 0
 20925                           tosu	equ	0xFFF
 20926                           tosh	equ	0xFFE
 20927                           tosl	equ	0xFFD
 20928                           pclath	equ	0xFFA
 20929                           tblptru	equ	0xFF8
 20930                           tblptrh	equ	0xFF7
 20931                           tblptrl	equ	0xFF6
 20932                           tablat	equ	0xFF5
 20933                           prodh	equ	0xFF4
 20934                           prodl	equ	0xFF3
 20935                           intcon	equ	0xFF2
 20936                           indf0	equ	0xFEF
 20937                           postinc0	equ	0xFEE
 20938                           fsr0h	equ	0xFEA
 20939                           fsr0l	equ	0xFE9
 20940                           wreg	equ	0xFE8
 20941                           indf1	equ	0xFE7
 20942                           postdec1	equ	0xFE5
 20943                           fsr1h	equ	0xFE2
 20944                           fsr1l	equ	0xFE1
 20945                           indf2	equ	0xFDF
 20946                           postinc2	equ	0xFDE
 20947                           postdec2	equ	0xFDD
 20948                           plusw2	equ	0xFDB
 20949                           fsr2h	equ	0xFDA
 20950                           fsr2l	equ	0xFD9
 20951                           status	equ	0xFD8
 20952                           
 20953 ;; *************** function _Byte_SetQuad *****************
 20954 ;; Defined at:
 20955 ;;		line 101 in file "Library/Types.c"
 20956 ;; Parameters:    Size  Location     Type
 20957 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 20958 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 20959 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20960 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20961 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20962 ;;		 -> NULL(0), 
 20963 ;;  pQuad           1   13[BANK0 ] unsigned char 
 20964 ;;  pValue          1   14[BANK0 ] unsigned char 
 20965 ;; Auto vars:     Size  Location     Type
 20966 ;;		None
 20967 ;; Return value:  Size  Location     Type
 20968 ;;                  1    wreg      void 
 20969 ;; Registers used:
 20970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20971 ;; Tracked objects:
 20972 ;;		On entry : 0/0
 20973 ;;		On exit  : 0/0
 20974 ;;		Unchanged: 0/0
 20975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20976 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20980 ;;Total ram usage:        4 bytes
 20981 ;; Hardware stack levels used:    1
 20982 ;; Hardware stack levels required when called:    8
 20983 ;; This function calls:
 20984 ;;		_Byte_SetZone
 20985 ;; This function is called by:
 20986 ;;		_Port_SetQuadType
 20987 ;;		_SPI_Init
 20988 ;;		_SPI_MinSpeed
 20989 ;;		_SPI_MaxSpeed
 20990 ;;		_Port_SetQuad
 20991 ;;		_Word_SetQuad
 20992 ;;		_I2C_Init
 20993 ;; This function uses a non-reentrant model
 20994 ;;
 20995                           
 20996                           	psect	text121
 20997  0143C0                     __ptext121:
 20998                           	opt stack 0
 20999  0143C0                     _Byte_SetQuad:
 21000                           	opt stack 19
 21001                           
 21002                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 21003                           
 21004                           ; BSR set to: 0
 21005                           ;incstack = 0
 21006  0143C0  C0CF  F0C4         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 21007  0143C4  C0D0  F0C5         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 21008  0143C8  0E02               	movlw	2
 21009  0143CA  0100               	movlb	0	; () banked
 21010  0143CC  6FC6               	movwf	Byte_SetZone@pMax& (0+255),b
 21011  0143CE  C0D1  F0C7         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 21012  0143D2  0E04               	movlw	4
 21013  0143D4  0100               	movlb	0	; () banked
 21014  0143D6  6FC8               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21015  0143D8  C0D2  F0C9         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 21016  0143DC  ECBA  F094         	call	_Byte_SetZone	;wreg free
 21017  0143E0  0012               	return		;funcret
 21018  0143E2                     __end_of_Byte_SetQuad:
 21019                           	opt stack 0
 21020                           tosu	equ	0xFFF
 21021                           tosh	equ	0xFFE
 21022                           tosl	equ	0xFFD
 21023                           pclath	equ	0xFFA
 21024                           tblptru	equ	0xFF8
 21025                           tblptrh	equ	0xFF7
 21026                           tblptrl	equ	0xFF6
 21027                           tablat	equ	0xFF5
 21028                           prodh	equ	0xFF4
 21029                           prodl	equ	0xFF3
 21030                           intcon	equ	0xFF2
 21031                           indf0	equ	0xFEF
 21032                           postinc0	equ	0xFEE
 21033                           fsr0h	equ	0xFEA
 21034                           fsr0l	equ	0xFE9
 21035                           wreg	equ	0xFE8
 21036                           indf1	equ	0xFE7
 21037                           postdec1	equ	0xFE5
 21038                           fsr1h	equ	0xFE2
 21039                           fsr1l	equ	0xFE1
 21040                           indf2	equ	0xFDF
 21041                           postinc2	equ	0xFDE
 21042                           postdec2	equ	0xFDD
 21043                           plusw2	equ	0xFDB
 21044                           fsr2h	equ	0xFDA
 21045                           fsr2l	equ	0xFD9
 21046                           status	equ	0xFD8
 21047                           
 21048 ;; *************** function _Byte_SetZone *****************
 21049 ;; Defined at:
 21050 ;;		line 47 in file "Library/Types.c"
 21051 ;; Parameters:    Size  Location     Type
 21052 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21053 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21054 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21055 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 21056 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 21057 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 21058 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 21059 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 21060 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21061 ;;  pMax            1    2[BANK0 ] unsigned char 
 21062 ;;  pChunk          1    3[BANK0 ] unsigned char 
 21063 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 21064 ;;  pValue          1    5[BANK0 ] unsigned char 
 21065 ;; Auto vars:     Size  Location     Type
 21066 ;;  MASK            1   10[BANK0 ] unsigned char 
 21067 ;;  Offset          1    9[BANK0 ] unsigned char 
 21068 ;; Return value:  Size  Location     Type
 21069 ;;                  1    wreg      void 
 21070 ;; Registers used:
 21071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 21072 ;; Tracked objects:
 21073 ;;		On entry : 0/0
 21074 ;;		On exit  : 0/0
 21075 ;;		Unchanged: 0/0
 21076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21077 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21080 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;Total ram usage:       11 bytes
 21082 ;; Hardware stack levels used:    1
 21083 ;; Hardware stack levels required when called:    7
 21084 ;; This function calls:
 21085 ;;		Nothing
 21086 ;; This function is called by:
 21087 ;;		_Byte_SetPair
 21088 ;;		_Byte_SetQuad
 21089 ;;		_Byte_SetTriple
 21090 ;; This function uses a non-reentrant model
 21091 ;;
 21092                           
 21093                           	psect	text122
 21094  012974                     __ptext122:
 21095                           	opt stack 0
 21096  012974                     _Byte_SetZone:
 21097                           	opt stack 18
 21098                           
 21099                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 21100                           
 21101                           ;incstack = 0
 21102  012974  0100               	movlb	0	; () banked
 21103  012976  51C8               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 21104  012978  0D01               	mullw	1
 21105  01297A  0E77               	movlw	low _MASKS
 21106  01297C  24F3               	addwf	prodl,w,c
 21107  01297E  6EF6               	movwf	tblptrl,c
 21108  012980  0EFD               	movlw	high _MASKS
 21109  012982  20F4               	addwfc	prodh,w,c
 21110  012984  6EF7               	movwf	tblptrh,c
 21111  012986                     	if	1	;There are 3 active tblptr bytes
 21112  012986  6AF8               	clrf	tblptru,c
 21113  012988  0E00               	movlw	low (__mediumconst shr (0+16))
 21114  01298A  22F8               	addwfc	tblptru,f,c
 21115  01298C                     	endif
 21116  01298C  0008               	tblrd		*
 21117  01298E  CFF5 F0CE          	movff	tablat,Byte_SetZone@MASK
 21118                           
 21119                           ; BSR set to: 0
 21120                           ;Types.c: 50: UINT8 Offset = 0;
 21121  012992  0E00               	movlw	0
 21122  012994  0100               	movlb	0	; () banked
 21123  012996  6FCD               	movwf	Byte_SetZone@Offset& (0+255),b
 21124                           
 21125                           ;Types.c: 52: while (pChunk >= pMax)
 21126  012998  D006               	goto	l10378
 21127  01299A                     l10374:
 21128                           
 21129                           ; BSR set to: 0
 21130                           ;Types.c: 53: {
 21131                           ;Types.c: 54: pChunk -= pMax;
 21132  01299A  0100               	movlb	0	; () banked
 21133  01299C  51C6               	movf	Byte_SetZone@pMax& (0+255),w,b
 21134  01299E  0100               	movlb	0	; () banked
 21135  0129A0  5FC7               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 21136                           
 21137                           ; BSR set to: 0
 21138                           ;Types.c: 55: Offset += 1;
 21139  0129A2  0100               	movlb	0	; () banked
 21140  0129A4  2BCD               	incf	Byte_SetZone@Offset& (0+255),f,b
 21141  0129A6                     l10378:
 21142                           
 21143                           ; BSR set to: 0
 21144  0129A6  0100               	movlb	0	; () banked
 21145  0129A8  51C6               	movf	Byte_SetZone@pMax& (0+255),w,b
 21146  0129AA  0100               	movlb	0	; () banked
 21147  0129AC  5DC7               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 21148  0129AE  B0D8               	btfsc	status,0,c
 21149  0129B0  D7F4               	goto	l10374
 21150                           
 21151                           ; BSR set to: 0
 21152                           ;Types.c: 56: }
 21153                           ;Types.c: 57: pChunk *= pChunkSize;
 21154                           
 21155                           ; BSR set to: 0
 21156  0129B2  0100               	movlb	0	; () banked
 21157  0129B4  51C8               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 21158  0129B6  0100               	movlb	0	; () banked
 21159  0129B8  03C7               	mulwf	Byte_SetZone@pChunk& (0+255),b
 21160  0129BA  50F3               	movf	prodl,w,c
 21161  0129BC  6FC7               	movwf	Byte_SetZone@pChunk& (0+255),b
 21162                           
 21163                           ; BSR set to: 0
 21164                           ;Types.c: 58: pChunk += Offset;
 21165  0129BE  0100               	movlb	0	; () banked
 21166  0129C0  51CD               	movf	Byte_SetZone@Offset& (0+255),w,b
 21167  0129C2  0100               	movlb	0	; () banked
 21168  0129C4  27C7               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 21169                           
 21170                           ; BSR set to: 0
 21171                           ;Types.c: 60: pValue &= MASK;
 21172  0129C6  0100               	movlb	0	; () banked
 21173  0129C8  51CE               	movf	Byte_SetZone@MASK& (0+255),w,b
 21174  0129CA  0100               	movlb	0	; () banked
 21175  0129CC  17C9               	andwf	Byte_SetZone@pValue& (0+255),f,b
 21176                           
 21177                           ; BSR set to: 0
 21178                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 21179  0129CE  C0C7  F0CA         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 21180  0129D2  C0CE  F0CB         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 21181  0129D6  0100               	movlb	0	; () banked
 21182  0129D8  2BCA               	incf	??_Byte_SetZone& (0+255),f,b
 21183  0129DA  D003               	goto	u6854
 21184  0129DC                     u6855:
 21185  0129DC  0100               	movlb	0	; () banked
 21186  0129DE  90D8               	bcf	status,0,c
 21187  0129E0  37CB               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 21188  0129E2                     u6854:
 21189  0129E2  0100               	movlb	0	; () banked
 21190  0129E4  2FCA               	decfsz	??_Byte_SetZone& (0+255),f,b
 21191  0129E6  D7FA               	goto	u6855
 21192  0129E8  0100               	movlb	0	; () banked
 21193  0129EA  51CB               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 21194  0129EC  0AFF               	xorlw	255
 21195  0129EE  0100               	movlb	0	; () banked
 21196  0129F0  6FCC               	movwf	(??_Byte_SetZone+2)& (0+255),b
 21197  0129F2  C0C4  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 21198  0129F6  C0C5  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 21199  0129FA  0100               	movlb	0	; () banked
 21200  0129FC  51CC               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 21201  0129FE  16DF               	andwf	indf2,f,c
 21202                           
 21203                           ; BSR set to: 0
 21204                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 21205  012A00  C0C7  F0CA         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 21206  012A04  C0C9  F0CB         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 21207  012A08  0100               	movlb	0	; () banked
 21208  012A0A  2BCA               	incf	??_Byte_SetZone& (0+255),f,b
 21209  012A0C  D003               	goto	u6864
 21210  012A0E                     u6865:
 21211  012A0E  0100               	movlb	0	; () banked
 21212  012A10  90D8               	bcf	status,0,c
 21213  012A12  37CB               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 21214  012A14                     u6864:
 21215  012A14  0100               	movlb	0	; () banked
 21216  012A16  2FCA               	decfsz	??_Byte_SetZone& (0+255),f,b
 21217  012A18  D7FA               	goto	u6865
 21218  012A1A  C0C4  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 21219  012A1E  C0C5  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 21220  012A22  0100               	movlb	0	; () banked
 21221  012A24  51CB               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 21222  012A26  12DF               	iorwf	indf2,f,c
 21223                           
 21224                           ; BSR set to: 0
 21225  012A28  0012               	return		;funcret
 21226  012A2A                     __end_of_Byte_SetZone:
 21227                           	opt stack 0
 21228                           tosu	equ	0xFFF
 21229                           tosh	equ	0xFFE
 21230                           tosl	equ	0xFFD
 21231                           pclath	equ	0xFFA
 21232                           tblptru	equ	0xFF8
 21233                           tblptrh	equ	0xFF7
 21234                           tblptrl	equ	0xFF6
 21235                           tablat	equ	0xFF5
 21236                           prodh	equ	0xFF4
 21237                           prodl	equ	0xFF3
 21238                           intcon	equ	0xFF2
 21239                           indf0	equ	0xFEF
 21240                           postinc0	equ	0xFEE
 21241                           fsr0h	equ	0xFEA
 21242                           fsr0l	equ	0xFE9
 21243                           wreg	equ	0xFE8
 21244                           indf1	equ	0xFE7
 21245                           postdec1	equ	0xFE5
 21246                           fsr1h	equ	0xFE2
 21247                           fsr1l	equ	0xFE1
 21248                           indf2	equ	0xFDF
 21249                           postinc2	equ	0xFDE
 21250                           postdec2	equ	0xFDD
 21251                           plusw2	equ	0xFDB
 21252                           fsr2h	equ	0xFDA
 21253                           fsr2l	equ	0xFD9
 21254                           status	equ	0xFD8
 21255                           
 21256 ;; *************** function _Console_Init *****************
 21257 ;; Defined at:
 21258 ;;		line 157 in file "Library/Console.c"
 21259 ;; Parameters:    Size  Location     Type
 21260 ;;		None
 21261 ;; Auto vars:     Size  Location     Type
 21262 ;;  y               1    3[BANK0 ] unsigned char 
 21263 ;;  x               1    2[BANK0 ] unsigned char 
 21264 ;; Return value:  Size  Location     Type
 21265 ;;                  1    wreg      void 
 21266 ;; Registers used:
 21267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21268 ;; Tracked objects:
 21269 ;;		On entry : 0/0
 21270 ;;		On exit  : 0/0
 21271 ;;		Unchanged: 0/0
 21272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21277 ;;Total ram usage:        4 bytes
 21278 ;; Hardware stack levels used:    1
 21279 ;; Hardware stack levels required when called:    7
 21280 ;; This function calls:
 21281 ;;		Nothing
 21282 ;; This function is called by:
 21283 ;;		_initialise
 21284 ;; This function uses a non-reentrant model
 21285 ;;
 21286                           
 21287                           	psect	text123
 21288  0132BE                     __ptext123:
 21289                           	opt stack 0
 21290  0132BE                     _Console_Init:
 21291                           	opt stack 22
 21292                           
 21293                           ;Console.c: 160: lBufferX = 0;
 21294                           
 21295                           ; BSR set to: 0
 21296                           ;incstack = 0
 21297  0132BE  0E00               	movlw	0
 21298  0132C0  6E37               	movwf	_lBufferX,c
 21299                           
 21300                           ;Console.c: 161: lBufferY = 0;
 21301  0132C2  0E00               	movlw	0
 21302  0132C4  6E36               	movwf	_lBufferY,c
 21303                           
 21304                           ;Console.c: 163: UINT8 x, y;
 21305                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 21306  0132C6  0E00               	movlw	0
 21307  0132C8  0100               	movlb	0	; () banked
 21308  0132CA  6FC6               	movwf	Console_Init@x& (0+255),b
 21309  0132CC                     l11634:
 21310                           
 21311                           ; BSR set to: 0
 21312  0132CC  0E13               	movlw	19
 21313  0132CE  0100               	movlb	0	; () banked
 21314  0132D0  65C6               	cpfsgt	Console_Init@x& (0+255),b
 21315  0132D2  D001               	goto	l11638
 21316  0132D4  0012               	return	
 21317  0132D6                     l11638:
 21318                           
 21319                           ; BSR set to: 0
 21320                           ;Console.c: 165: {
 21321                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 21322  0132D6  0E00               	movlw	0
 21323  0132D8  0100               	movlb	0	; () banked
 21324  0132DA  6FC7               	movwf	Console_Init@y& (0+255),b
 21325  0132DC                     l11640:
 21326                           
 21327                           ; BSR set to: 0
 21328  0132DC  0E0E               	movlw	14
 21329  0132DE  0100               	movlb	0	; () banked
 21330  0132E0  65C7               	cpfsgt	Console_Init@y& (0+255),b
 21331  0132E2  D001               	goto	l11644
 21332  0132E4  D02C               	goto	l11650
 21333  0132E6                     l11644:
 21334                           
 21335                           ; BSR set to: 0
 21336                           ;Console.c: 167: {
 21337                           ;Console.c: 168: lBuffer[y][x] = '\0';
 21338  0132E6  0100               	movlb	0	; () banked
 21339  0132E8  51C7               	movf	Console_Init@y& (0+255),w,b
 21340  0132EA  0D14               	mullw	20
 21341  0132EC  0E16               	movlw	low _lBuffer
 21342  0132EE  0100               	movlb	0	; () banked
 21343  0132F0  6FC4               	movwf	??_Console_Init& (0+255),b
 21344  0132F2  0E02               	movlw	high _lBuffer
 21345  0132F4  0100               	movlb	0	; () banked
 21346  0132F6  6FC5               	movwf	(??_Console_Init+1)& (0+255),b
 21347  0132F8  50F3               	movf	prodl,w,c
 21348  0132FA  0100               	movlb	0	; () banked
 21349  0132FC  27C4               	addwf	??_Console_Init& (0+255),f,b
 21350  0132FE  50F4               	movf	prodh,w,c
 21351  013300  0100               	movlb	0	; () banked
 21352  013302  23C5               	addwfc	(??_Console_Init+1)& (0+255),f,b
 21353  013304  0100               	movlb	0	; () banked
 21354  013306  51C6               	movf	Console_Init@x& (0+255),w,b
 21355  013308  0D01               	mullw	1
 21356  01330A  50F3               	movf	prodl,w,c
 21357  01330C  0100               	movlb	0	; () banked
 21358  01330E  25C4               	addwf	??_Console_Init& (0+255),w,b
 21359  013310  6ED9               	movwf	fsr2l,c
 21360  013312  50F4               	movf	prodh,w,c
 21361  013314  0100               	movlb	0	; () banked
 21362  013316  21C5               	addwfc	(??_Console_Init+1)& (0+255),w,b
 21363  013318  6EDA               	movwf	fsr2h,c
 21364  01331A  0E00               	movlw	0
 21365  01331C  6EDF               	movwf	indf2,c
 21366                           
 21367                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 21368  01331E  0100               	movlb	0	; () banked
 21369  013320  51C7               	movf	Console_Init@y& (0+255),w,b
 21370  013322  0D02               	mullw	2
 21371  013324  0E00               	movlw	low _lCBuffer
 21372  013326  24F3               	addwf	prodl,w,c
 21373  013328  6ED9               	movwf	fsr2l,c
 21374  01332A  0E01               	movlw	high _lCBuffer
 21375  01332C  20F4               	addwfc	prodh,w,c
 21376  01332E  6EDA               	movwf	fsr2h,c
 21377  013330  0EFF               	movlw	255
 21378  013332  6EDE               	movwf	postinc2,c
 21379  013334  0EFF               	movlw	255
 21380  013336  6EDD               	movwf	postdec2,c
 21381                           
 21382                           ; BSR set to: 0
 21383  013338  0100               	movlb	0	; () banked
 21384  01333A  2BC7               	incf	Console_Init@y& (0+255),f,b
 21385  01333C  D7CF               	goto	l11640
 21386  01333E                     l11650:
 21387                           
 21388                           ; BSR set to: 0
 21389  01333E  0100               	movlb	0	; () banked
 21390  013340  2BC6               	incf	Console_Init@x& (0+255),f,b
 21391  013342  D7C4               	goto	l11634
 21392  013344                     __end_of_Console_Init:
 21393                           	opt stack 0
 21394                           tosu	equ	0xFFF
 21395                           tosh	equ	0xFFE
 21396                           tosl	equ	0xFFD
 21397                           pclath	equ	0xFFA
 21398                           tblptru	equ	0xFF8
 21399                           tblptrh	equ	0xFF7
 21400                           tblptrl	equ	0xFF6
 21401                           tablat	equ	0xFF5
 21402                           prodh	equ	0xFF4
 21403                           prodl	equ	0xFF3
 21404                           intcon	equ	0xFF2
 21405                           indf0	equ	0xFEF
 21406                           postinc0	equ	0xFEE
 21407                           fsr0h	equ	0xFEA
 21408                           fsr0l	equ	0xFE9
 21409                           wreg	equ	0xFE8
 21410                           indf1	equ	0xFE7
 21411                           postdec1	equ	0xFE5
 21412                           fsr1h	equ	0xFE2
 21413                           fsr1l	equ	0xFE1
 21414                           indf2	equ	0xFDF
 21415                           postinc2	equ	0xFDE
 21416                           postdec2	equ	0xFDD
 21417                           plusw2	equ	0xFDB
 21418                           fsr2h	equ	0xFDA
 21419                           fsr2l	equ	0xFD9
 21420                           status	equ	0xFD8
 21421                           
 21422 ;; *************** function _ISR_Function *****************
 21423 ;; Defined at:
 21424 ;;		line 38 in file "Library/ISR.c"
 21425 ;; Parameters:    Size  Location     Type
 21426 ;;		None
 21427 ;; Auto vars:     Size  Location     Type
 21428 ;;		None
 21429 ;; Return value:  Size  Location     Type
 21430 ;;                  1    wreg      void 
 21431 ;; Registers used:
 21432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21433 ;; Tracked objects:
 21434 ;;		On entry : 0/0
 21435 ;;		On exit  : 0/0
 21436 ;;		Unchanged: 0/0
 21437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21440 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21441 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21442 ;;Total ram usage:       14 bytes
 21443 ;; Hardware stack levels used:    1
 21444 ;; Hardware stack levels required when called:    6
 21445 ;; This function calls:
 21446 ;;		_Timer0_ISR
 21447 ;; This function is called by:
 21448 ;;		Interrupt level 2
 21449 ;; This function uses a non-reentrant model
 21450 ;;
 21451                           
 21452                           	psect	intcode
 21453  001408                     __pintcode:
 21454                           	opt stack 0
 21455  001408                     _ISR_Function:
 21456                           	opt stack 10
 21457                           
 21458                           ; BSR set to: 0
 21459                           ;incstack = 0
 21460  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21461  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 21462  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 21463  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 21464  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 21465  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 21466  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 21467  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 21468  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 21469  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 21470  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 21471  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 21472  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 21473  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 21474  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 21475                           
 21476                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 21477  001442  92F2               	bcf	intcon,1,c	;volatile
 21478                           
 21479                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 21480  001444  B4F2               	btfsc	intcon,2,c	;volatile
 21481  001446  AAF2               	btfss	intcon,5,c	;volatile
 21482  001448  D002               	goto	i2l1599
 21483                           
 21484                           ;ISR.c: 68: Timer0_ISR();
 21485  00144A  EC2A  F0A1         	call	_Timer0_ISR	;wreg free
 21486  00144E                     i2l1599:
 21487  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 21488  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 21489  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 21490  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 21491  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 21492  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 21493  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 21494  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 21495  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 21496  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 21497  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 21498  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 21499  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 21500  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 21501  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21502  001488  0011               	retfie		f
 21503  00148A                     __end_of_ISR_Function:
 21504                           	opt stack 0
 21505                           tosu	equ	0xFFF
 21506                           tosh	equ	0xFFE
 21507                           tosl	equ	0xFFD
 21508                           pclatu	equ	0xFFB
 21509                           pclath	equ	0xFFA
 21510                           tblptru	equ	0xFF8
 21511                           tblptrh	equ	0xFF7
 21512                           tblptrl	equ	0xFF6
 21513                           tablat	equ	0xFF5
 21514                           prodh	equ	0xFF4
 21515                           prodl	equ	0xFF3
 21516                           intcon	equ	0xFF2
 21517                           indf0	equ	0xFEF
 21518                           postinc0	equ	0xFEE
 21519                           fsr0h	equ	0xFEA
 21520                           fsr0l	equ	0xFE9
 21521                           wreg	equ	0xFE8
 21522                           indf1	equ	0xFE7
 21523                           postdec1	equ	0xFE5
 21524                           fsr1h	equ	0xFE2
 21525                           fsr1l	equ	0xFE1
 21526                           indf2	equ	0xFDF
 21527                           postinc2	equ	0xFDE
 21528                           postdec2	equ	0xFDD
 21529                           plusw2	equ	0xFDB
 21530                           fsr2h	equ	0xFDA
 21531                           fsr2l	equ	0xFD9
 21532                           status	equ	0xFD8
 21533                           
 21534 ;; *************** function _Timer0_ISR *****************
 21535 ;; Defined at:
 21536 ;;		line 94 in file "Library/Timer0.c"
 21537 ;; Parameters:    Size  Location     Type
 21538 ;;		None
 21539 ;; Auto vars:     Size  Location     Type
 21540 ;;		None
 21541 ;; Return value:  Size  Location     Type
 21542 ;;                  1    wreg      void 
 21543 ;; Registers used:
 21544 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21545 ;; Tracked objects:
 21546 ;;		On entry : 0/0
 21547 ;;		On exit  : 0/0
 21548 ;;		Unchanged: 0/0
 21549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21554 ;;Total ram usage:        0 bytes
 21555 ;; Hardware stack levels used:    1
 21556 ;; Hardware stack levels required when called:    5
 21557 ;; This function calls:
 21558 ;;		Absolute function
 21559 ;;		i2_Motor_Step
 21560 ;;		i2_Timer0_Stop
 21561 ;; This function is called by:
 21562 ;;		_ISR_Function
 21563 ;; This function uses a non-reentrant model
 21564 ;;
 21565                           
 21566                           	psect	text125
 21567  014254                     __ptext125:
 21568                           	opt stack 0
 21569  014254                     _Timer0_ISR:
 21570                           	opt stack 10
 21571                           
 21572                           ;Timer0.c: 96: Timer0_Stop();
 21573                           
 21574                           ;incstack = 0
 21575  014254  EC52  F0A3         	call	i2_Timer0_Stop	;wreg free
 21576                           
 21577                           ;Timer0.c: 99: if (gISR != 0)
 21578  014258  0100               	movlb	0	; () banked
 21579  01425A  5168               	movf	_gISR& (0+255),w,b
 21580  01425C  0100               	movlb	0	; () banked
 21581  01425E  1169               	iorwf	(_gISR+1)& (0+255),w,b
 21582  014260  0100               	movlb	0	; () banked
 21583  014262  116A               	iorwf	(_gISR+2)& (0+255),w,b
 21584  014264  B4D8               	btfsc	status,2,c
 21585  014266  0012               	return	
 21586                           
 21587                           ; BSR set to: 0
 21588                           ;Timer0.c: 100: gISR();
 21589  014268  D801               	call	i2u906_48
 21590  01426A  0012               	return	
 21591  01426C                     i2u906_48:
 21592  01426C  0005               	push	
 21593  01426E  6EFA               	movwf	pclath,c
 21594  014270  0100               	movlb	0	; () banked
 21595  014272  5168               	movf	_gISR& (0+255),w,b
 21596  014274  6EFD               	movwf	tosl,c
 21597  014276  5169               	movf	(_gISR+1)& (0+255),w,b
 21598  014278  6EFE               	movwf	tosh,c
 21599  01427A  516A               	movf	(_gISR+2)& (0+255),w,b
 21600  01427C  6EFF               	movwf	tosu,c
 21601  01427E  50FA               	movf	pclath,w,c
 21602  014280  0012               	return		;indir
 21603  014282                     __end_of_Timer0_ISR:
 21604                           	opt stack 0
 21605                           tosu	equ	0xFFF
 21606                           tosh	equ	0xFFE
 21607                           tosl	equ	0xFFD
 21608                           pclatu	equ	0xFFB
 21609                           pclath	equ	0xFFA
 21610                           tblptru	equ	0xFF8
 21611                           tblptrh	equ	0xFF7
 21612                           tblptrl	equ	0xFF6
 21613                           tablat	equ	0xFF5
 21614                           prodh	equ	0xFF4
 21615                           prodl	equ	0xFF3
 21616                           intcon	equ	0xFF2
 21617                           indf0	equ	0xFEF
 21618                           postinc0	equ	0xFEE
 21619                           fsr0h	equ	0xFEA
 21620                           fsr0l	equ	0xFE9
 21621                           wreg	equ	0xFE8
 21622                           indf1	equ	0xFE7
 21623                           postdec1	equ	0xFE5
 21624                           fsr1h	equ	0xFE2
 21625                           fsr1l	equ	0xFE1
 21626                           indf2	equ	0xFDF
 21627                           postinc2	equ	0xFDE
 21628                           postdec2	equ	0xFDD
 21629                           plusw2	equ	0xFDB
 21630                           fsr2h	equ	0xFDA
 21631                           fsr2l	equ	0xFD9
 21632                           status	equ	0xFD8
 21633                           
 21634 ;; *************** function i2_Motor_Step *****************
 21635 ;; Defined at:
 21636 ;;		line 75 in file "Library/Motor.c"
 21637 ;; Parameters:    Size  Location     Type
 21638 ;;		None
 21639 ;; Auto vars:     Size  Location     Type
 21640 ;;		None
 21641 ;; Return value:  Size  Location     Type
 21642 ;;                  1    wreg      void 
 21643 ;; Registers used:
 21644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21645 ;; Tracked objects:
 21646 ;;		On entry : 0/0
 21647 ;;		On exit  : 0/0
 21648 ;;		Unchanged: 0/0
 21649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21653 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21654 ;;Total ram usage:        2 bytes
 21655 ;; Hardware stack levels used:    1
 21656 ;; Hardware stack levels required when called:    4
 21657 ;; This function calls:
 21658 ;;		i2_MXK_Queue
 21659 ;;		i2_MXK_Release
 21660 ;;		i2_MXK_SwitchTo
 21661 ;;		i2_Port_SetPin
 21662 ;;		i2_Timer0_Restart
 21663 ;;		i2_Timer0_Stop
 21664 ;; This function is called by:
 21665 ;; This function uses a non-reentrant model
 21666 ;;
 21667                           
 21668                           	psect	text126
 21669  012240                     __ptext126:
 21670                           	opt stack 0
 21671  012240                     i2_Motor_Step:
 21672                           	opt stack 10
 21673                           
 21674                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 21675                           
 21676                           ;incstack = 0
 21677  012240  EE20 F004          	lfsr	2,4
 21678  012244  502A               	movf	_lMotor,w,c
 21679  012246  26D9               	addwf	fsr2l,f,c
 21680  012248  502B               	movf	_lMotor+1,w,c
 21681  01224A  22DA               	addwfc	fsr2h,f,c
 21682  01224C  50DF               	movf	indf2,w,c
 21683  01224E  EC4D  F0A0         	call	i2_MXK_SwitchTo
 21684  012252  0900               	iorlw	0
 21685  012254  B4D8               	btfsc	status,2,c
 21686  012256  D06A               	goto	i2l8630
 21687                           
 21688                           ;Motor.c: 78: {
 21689                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 21690  012258  C02A  FFD9         	movff	_lMotor,fsr2l
 21691  01225C  C02B  FFDA         	movff	_lMotor+1,fsr2h
 21692  012260  50DE               	movf	postinc2,w,c
 21693  012262  10DE               	iorwf	postinc2,w,c
 21694  012264  B4D8               	btfsc	status,2,c
 21695  012266  D05D               	goto	i2l8624
 21696                           
 21697                           ;Motor.c: 80: {
 21698                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 21699  012268  C02A  FFD9         	movff	_lMotor,fsr2l
 21700  01226C  C02B  FFDA         	movff	_lMotor+1,fsr2h
 21701  012270  0E01               	movlw	1
 21702  012272  BEDB               	btfsc	plusw2,7,c
 21703  012274  D022               	goto	i2l8608
 21704  012276  0E01               	movlw	1
 21705  012278  50DB               	movf	plusw2,w,c
 21706  01227A  E103               	bnz	i2u537_40
 21707  01227C  04DE               	decf	postinc2,w,c
 21708  01227E  A0D8               	btfss	status,0,c
 21709  012280  D01C               	goto	i2l8608
 21710  012282                     i2u537_40:
 21711                           
 21712                           ;Motor.c: 83: {
 21713                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 21714  012282  C02A  FFD9         	movff	_lMotor,fsr2l
 21715  012286  C02B  FFDA         	movff	_lMotor+1,fsr2h
 21716  01228A  28DE               	incf	postinc2,w,c
 21717  01228C  E104               	bnz	i2u538_40
 21718  01228E  0E7F               	movlw	127
 21719  012290  18DE               	xorwf	postinc2,w,c
 21720  012292  B4D8               	btfsc	status,2,c
 21721  012294  D007               	goto	i2l8606
 21722  012296                     i2u538_40:
 21723                           
 21724                           ;Motor.c: 85: lMotor->mDelta --;
 21725  012296  C02A  FFD9         	movff	_lMotor,fsr2l
 21726  01229A  C02B  FFDA         	movff	_lMotor+1,fsr2h
 21727  01229E  06DE               	decf	postinc2,f,c
 21728  0122A0  0E00               	movlw	0
 21729  0122A2  5ADD               	subwfb	postdec2,f,c
 21730  0122A4                     i2l8606:
 21731                           
 21732                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 21733  0122A4  0E7E               	movlw	low _PortE
 21734  0122A6  6E10               	movwf	i2Port_SetPin@pInput,c
 21735  0122A8  0E00               	movlw	high _PortE
 21736  0122AA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 21737  0122AC  0E00               	movlw	0
 21738  0122AE  6E12               	movwf	i2Port_SetPin@pPin,c
 21739  0122B0  0E01               	movlw	1
 21740  0122B2  6E13               	movwf	i2Port_SetPin@pValue,c
 21741  0122B4  EC6A  F095         	call	i2_Port_SetPin	;wreg free
 21742                           
 21743                           ;Motor.c: 88: }
 21744  0122B8  D01B               	goto	i2l8614
 21745  0122BA                     i2l8608:
 21746                           
 21747                           ;Motor.c: 89: else
 21748                           ;Motor.c: 90: {
 21749                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 21750  0122BA  C02A  FFD9         	movff	_lMotor,fsr2l
 21751  0122BE  C02B  FFDA         	movff	_lMotor+1,fsr2h
 21752  0122C2  04DE               	decf	postinc2,w,c
 21753  0122C4  E104               	bnz	i2u539_40
 21754  0122C6  0E80               	movlw	128
 21755  0122C8  18DE               	xorwf	postinc2,w,c
 21756  0122CA  B4D8               	btfsc	status,2,c
 21757  0122CC  D007               	goto	i2l8612
 21758  0122CE                     i2u539_40:
 21759                           
 21760                           ;Motor.c: 92: lMotor->mDelta ++;
 21761  0122CE  C02A  FFD9         	movff	_lMotor,fsr2l
 21762  0122D2  C02B  FFDA         	movff	_lMotor+1,fsr2h
 21763  0122D6  2ADE               	incf	postinc2,f,c
 21764  0122D8  0E00               	movlw	0
 21765  0122DA  22DD               	addwfc	postdec2,f,c
 21766  0122DC                     i2l8612:
 21767                           
 21768                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 21769  0122DC  0E7E               	movlw	low _PortE
 21770  0122DE  6E10               	movwf	i2Port_SetPin@pInput,c
 21771  0122E0  0E00               	movlw	high _PortE
 21772  0122E2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 21773  0122E4  0E00               	movlw	0
 21774  0122E6  6E12               	movwf	i2Port_SetPin@pPin,c
 21775  0122E8  0E00               	movlw	0
 21776  0122EA  6E13               	movwf	i2Port_SetPin@pValue,c
 21777  0122EC  EC6A  F095         	call	i2_Port_SetPin	;wreg free
 21778  0122F0                     i2l8614:
 21779                           
 21780                           ;Motor.c: 95: }
 21781                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 21782  0122F0  0E7E               	movlw	low _PortE
 21783  0122F2  6E10               	movwf	i2Port_SetPin@pInput,c
 21784  0122F4  0E00               	movlw	high _PortE
 21785  0122F6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 21786  0122F8  0E01               	movlw	1
 21787  0122FA  6E12               	movwf	i2Port_SetPin@pPin,c
 21788  0122FC  0E01               	movlw	1
 21789  0122FE  6E13               	movwf	i2Port_SetPin@pValue,c
 21790  012300  EC6A  F095         	call	i2_Port_SetPin	;wreg free
 21791                           
 21792                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 21793  012304  0E7E               	movlw	low _PortE
 21794  012306  6E10               	movwf	i2Port_SetPin@pInput,c
 21795  012308  0E00               	movlw	high _PortE
 21796  01230A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 21797  01230C  0E01               	movlw	1
 21798  01230E  6E12               	movwf	i2Port_SetPin@pPin,c
 21799  012310  0E00               	movlw	0
 21800  012312  6E13               	movwf	i2Port_SetPin@pValue,c
 21801  012314  EC6A  F095         	call	i2_Port_SetPin	;wreg free
 21802                           
 21803                           ;Motor.c: 101: MXK_Release();
 21804  012318  EC55  F0A3         	call	i2_MXK_Release	;wreg free
 21805                           
 21806                           ;Motor.c: 102: Timer0_Restart();
 21807  01231C  EC2B  F0A3         	call	i2_Timer0_Restart	;wreg free
 21808                           
 21809                           ;Motor.c: 103: return;
 21810  012320  0012               	return	
 21811  012322                     i2l8624:
 21812                           
 21813                           ;Motor.c: 104: }
 21814                           ;Motor.c: 105: MXK_Release();
 21815  012322  EC55  F0A3         	call	i2_MXK_Release	;wreg free
 21816                           
 21817                           ;Motor.c: 106: Timer0_Stop();
 21818  012326  EC52  F0A3         	call	i2_Timer0_Stop	;wreg free
 21819                           
 21820                           ;Motor.c: 107: return;
 21821  01232A  0012               	return	
 21822  01232C                     i2l8630:
 21823                           
 21824                           ;Motor.c: 108: }
 21825                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 21826  01232C  C06B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 21827  012330  C06C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 21828  012334  C06D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 21829  012338  EC1E  F0A3         	call	i2_MXK_Queue	;wreg free
 21830  01233C  0012               	return		;funcret
 21831  01233E                     __end_ofi2_Motor_Step:
 21832                           	opt stack 0
 21833                           tosu	equ	0xFFF
 21834                           tosh	equ	0xFFE
 21835                           tosl	equ	0xFFD
 21836                           pclatu	equ	0xFFB
 21837                           pclath	equ	0xFFA
 21838                           tblptru	equ	0xFF8
 21839                           tblptrh	equ	0xFF7
 21840                           tblptrl	equ	0xFF6
 21841                           tablat	equ	0xFF5
 21842                           prodh	equ	0xFF4
 21843                           prodl	equ	0xFF3
 21844                           intcon	equ	0xFF2
 21845                           indf0	equ	0xFEF
 21846                           postinc0	equ	0xFEE
 21847                           fsr0h	equ	0xFEA
 21848                           fsr0l	equ	0xFE9
 21849                           wreg	equ	0xFE8
 21850                           indf1	equ	0xFE7
 21851                           postdec1	equ	0xFE5
 21852                           fsr1h	equ	0xFE2
 21853                           fsr1l	equ	0xFE1
 21854                           indf2	equ	0xFDF
 21855                           postinc2	equ	0xFDE
 21856                           postdec2	equ	0xFDD
 21857                           plusw2	equ	0xFDB
 21858                           fsr2h	equ	0xFDA
 21859                           fsr2l	equ	0xFD9
 21860                           status	equ	0xFD8
 21861                           
 21862 ;; *************** function i2_Timer0_Stop *****************
 21863 ;; Defined at:
 21864 ;;		line 89 in file "Library/Timer0.c"
 21865 ;; Parameters:    Size  Location     Type
 21866 ;;		None
 21867 ;; Auto vars:     Size  Location     Type
 21868 ;;		None
 21869 ;; Return value:  Size  Location     Type
 21870 ;;                  1    wreg      void 
 21871 ;; Registers used:
 21872 ;;		None
 21873 ;; Tracked objects:
 21874 ;;		On entry : 0/0
 21875 ;;		On exit  : 0/0
 21876 ;;		Unchanged: 0/0
 21877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21882 ;;Total ram usage:        0 bytes
 21883 ;; Hardware stack levels used:    1
 21884 ;; This function calls:
 21885 ;;		Nothing
 21886 ;; This function is called by:
 21887 ;;		_Timer0_ISR
 21888 ;;		i2_Motor_Step
 21889 ;; This function uses a non-reentrant model
 21890 ;;
 21891                           
 21892                           	psect	text127
 21893  0146A4                     __ptext127:
 21894                           	opt stack 0
 21895  0146A4                     i2_Timer0_Stop:
 21896                           	opt stack 14
 21897                           
 21898                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 21899                           
 21900                           ;incstack = 0
 21901  0146A4  9AF2               	bcf	intcon,5,c	;volatile
 21902                           
 21903                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 21904  0146A6  94F2               	bcf	intcon,2,c	;volatile
 21905  0146A8  0012               	return		;funcret
 21906  0146AA                     __end_ofi2_Timer0_Stop:
 21907                           	opt stack 0
 21908                           tosu	equ	0xFFF
 21909                           tosh	equ	0xFFE
 21910                           tosl	equ	0xFFD
 21911                           pclatu	equ	0xFFB
 21912                           pclath	equ	0xFFA
 21913                           tblptru	equ	0xFF8
 21914                           tblptrh	equ	0xFF7
 21915                           tblptrl	equ	0xFF6
 21916                           tablat	equ	0xFF5
 21917                           prodh	equ	0xFF4
 21918                           prodl	equ	0xFF3
 21919                           intcon	equ	0xFF2
 21920                           indf0	equ	0xFEF
 21921                           postinc0	equ	0xFEE
 21922                           fsr0h	equ	0xFEA
 21923                           fsr0l	equ	0xFE9
 21924                           wreg	equ	0xFE8
 21925                           indf1	equ	0xFE7
 21926                           postdec1	equ	0xFE5
 21927                           fsr1h	equ	0xFE2
 21928                           fsr1l	equ	0xFE1
 21929                           indf2	equ	0xFDF
 21930                           postinc2	equ	0xFDE
 21931                           postdec2	equ	0xFDD
 21932                           plusw2	equ	0xFDB
 21933                           fsr2h	equ	0xFDA
 21934                           fsr2l	equ	0xFD9
 21935                           status	equ	0xFD8
 21936                           
 21937 ;; *************** function i2_Timer0_Restart *****************
 21938 ;; Defined at:
 21939 ;;		line 83 in file "Library/Timer0.c"
 21940 ;; Parameters:    Size  Location     Type
 21941 ;;		None
 21942 ;; Auto vars:     Size  Location     Type
 21943 ;;		None
 21944 ;; Return value:  Size  Location     Type
 21945 ;;                  1    wreg      void 
 21946 ;; Registers used:
 21947 ;;		None
 21948 ;; Tracked objects:
 21949 ;;		On entry : 0/0
 21950 ;;		On exit  : 0/0
 21951 ;;		Unchanged: 0/0
 21952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21957 ;;Total ram usage:        0 bytes
 21958 ;; Hardware stack levels used:    1
 21959 ;; This function calls:
 21960 ;;		Nothing
 21961 ;; This function is called by:
 21962 ;;		i2_Motor_Step
 21963 ;; This function uses a non-reentrant model
 21964 ;;
 21965                           
 21966                           	psect	text128
 21967  014656                     __ptext128:
 21968                           	opt stack 0
 21969  014656                     i2_Timer0_Restart:
 21970                           	opt stack 13
 21971                           
 21972                           ;Timer0.c: 85: TMR0 = COUNTER;
 21973                           
 21974                           ;incstack = 0
 21975  014656  C028  FFD6         	movff	_COUNTER,4054	;volatile
 21976  01465A  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 21977                           
 21978                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 21979  01465E  8AF2               	bsf	intcon,5,c	;volatile
 21980  014660  0012               	return		;funcret
 21981  014662                     __end_ofi2_Timer0_Restart:
 21982                           	opt stack 0
 21983                           tosu	equ	0xFFF
 21984                           tosh	equ	0xFFE
 21985                           tosl	equ	0xFFD
 21986                           pclatu	equ	0xFFB
 21987                           pclath	equ	0xFFA
 21988                           tblptru	equ	0xFF8
 21989                           tblptrh	equ	0xFF7
 21990                           tblptrl	equ	0xFF6
 21991                           tablat	equ	0xFF5
 21992                           prodh	equ	0xFF4
 21993                           prodl	equ	0xFF3
 21994                           intcon	equ	0xFF2
 21995                           indf0	equ	0xFEF
 21996                           postinc0	equ	0xFEE
 21997                           fsr0h	equ	0xFEA
 21998                           fsr0l	equ	0xFE9
 21999                           wreg	equ	0xFE8
 22000                           indf1	equ	0xFE7
 22001                           postdec1	equ	0xFE5
 22002                           fsr1h	equ	0xFE2
 22003                           fsr1l	equ	0xFE1
 22004                           indf2	equ	0xFDF
 22005                           postinc2	equ	0xFDE
 22006                           postdec2	equ	0xFDD
 22007                           plusw2	equ	0xFDB
 22008                           fsr2h	equ	0xFDA
 22009                           fsr2l	equ	0xFD9
 22010                           status	equ	0xFD8
 22011                           
 22012 ;; *************** function i2_Port_SetPin *****************
 22013 ;; Defined at:
 22014 ;;		line 247 in file "Library/Port.c"
 22015 ;; Parameters:    Size  Location     Type
 22016 ;;  pInput          2   15[COMRAM] const PTR struct Port
 22017 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22018 ;;  pPin            1   17[COMRAM] enum E6750
 22019 ;;  pValue          1   18[COMRAM] unsigned char 
 22020 ;; Auto vars:     Size  Location     Type
 22021 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 22022 ;; Return value:  Size  Location     Type
 22023 ;;                  1    wreg      void 
 22024 ;; Registers used:
 22025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22026 ;; Tracked objects:
 22027 ;;		On entry : 0/0
 22028 ;;		On exit  : 0/0
 22029 ;;		Unchanged: 0/0
 22030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22031 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22034 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22035 ;;Total ram usage:        5 bytes
 22036 ;; Hardware stack levels used:    1
 22037 ;; Hardware stack levels required when called:    3
 22038 ;; This function calls:
 22039 ;;		i2_Byte_SetBit
 22040 ;;		i2_Word_GetPair
 22041 ;; This function is called by:
 22042 ;;		i2_Motor_Step
 22043 ;; This function uses a non-reentrant model
 22044 ;;
 22045                           
 22046                           	psect	text129
 22047  012AD4                     __ptext129:
 22048                           	opt stack 0
 22049  012AD4                     i2_Port_SetPin:
 22050                           	opt stack 10
 22051                           
 22052                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22053                           
 22054                           ;incstack = 0
 22055  012AD4  0E08               	movlw	8
 22056  012AD6  2410               	addwf	i2Port_SetPin@pInput,w,c
 22057  012AD8  6E0D               	movwf	i2Word_GetPair@pInput,c
 22058  012ADA  0E00               	movlw	0
 22059  012ADC  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 22060  012ADE  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 22061  012AE0  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 22062  012AE4  ECFB  F0A0         	call	i2_Word_GetPair	;wreg free
 22063  012AE8  6E14               	movwf	i2Port_SetPin@Type,c
 22064                           
 22065                           ;Port.c: 250: switch (Type)
 22066  012AEA  D03B               	goto	i2l8276
 22067  012AEC                     i2l8262:
 22068                           
 22069                           ;Port.c: 256: pValue &= 1;
 22070  012AEC  0E01               	movlw	1
 22071  012AEE  1613               	andwf	i2Port_SetPin@pValue,f,c
 22072                           
 22073                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22074  012AF0  EE20 F002          	lfsr	2,2
 22075  012AF4  5010               	movf	i2Port_SetPin@pInput,w,c
 22076  012AF6  26D9               	addwf	fsr2l,f,c
 22077  012AF8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22078  012AFA  22DA               	addwfc	fsr2h,f,c
 22079  012AFC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22080  012B00  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22081  012B04  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22082  012B08  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22083  012B0C  EC5F  F09E         	call	i2_Byte_SetBit	;wreg free
 22084                           
 22085                           ;Port.c: 258: break;
 22086  012B10  0012               	return	
 22087  012B12                     i2l8266:
 22088                           
 22089                           ;Port.c: 261: pValue &= 1;
 22090  012B12  0E01               	movlw	1
 22091  012B14  1613               	andwf	i2Port_SetPin@pValue,f,c
 22092                           
 22093                           ;Port.c: 262: pValue ^= 1;
 22094  012B16  0E01               	movlw	1
 22095  012B18  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 22096                           
 22097                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22098  012B1A  EE20 F002          	lfsr	2,2
 22099  012B1E  5010               	movf	i2Port_SetPin@pInput,w,c
 22100  012B20  26D9               	addwf	fsr2l,f,c
 22101  012B22  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22102  012B24  22DA               	addwfc	fsr2h,f,c
 22103  012B26  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22104  012B2A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22105  012B2E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22106  012B32  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22107  012B36  EC5F  F09E         	call	i2_Byte_SetBit	;wreg free
 22108                           
 22109                           ;Port.c: 264: break;
 22110  012B3A  0012               	return	
 22111  012B3C                     i2l8270:
 22112                           
 22113                           ;Port.c: 266: pValue &= 1;
 22114  012B3C  0E01               	movlw	1
 22115  012B3E  1613               	andwf	i2Port_SetPin@pValue,f,c
 22116                           
 22117                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22118  012B40  EE20 F004          	lfsr	2,4
 22119  012B44  5010               	movf	i2Port_SetPin@pInput,w,c
 22120  012B46  26D9               	addwf	fsr2l,f,c
 22121  012B48  5011               	movf	i2Port_SetPin@pInput+1,w,c
 22122  012B4A  22DA               	addwfc	fsr2h,f,c
 22123  012B4C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 22124  012B50  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 22125  012B54  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 22126  012B58  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 22127  012B5C  EC5F  F09E         	call	i2_Byte_SetBit	;wreg free
 22128                           
 22129                           ;Port.c: 269: }
 22130                           
 22131                           ;Port.c: 268: break;
 22132  012B60  0012               	return	
 22133  012B62                     i2l8276:
 22134  012B62  5014               	movf	i2Port_SetPin@Type,w,c
 22135                           
 22136                           ; Switch size 1, requested type "space"
 22137                           ; Number of cases is 4, Range of values is 0 to 3
 22138                           ; switch strategies available:
 22139                           ; Name         Instructions Cycles
 22140                           ; simple_byte           13     7 (average)
 22141                           ;	Chosen strategy is simple_byte
 22142  012B64  0A00               	xorlw	0	; case 0
 22143  012B66  B4D8               	btfsc	status,2,c
 22144  012B68  0012               	return	
 22145  012B6A  0A01               	xorlw	1	; case 1
 22146  012B6C  B4D8               	btfsc	status,2,c
 22147  012B6E  D7BE               	goto	i2l8262
 22148  012B70  0A03               	xorlw	3	; case 2
 22149  012B72  B4D8               	btfsc	status,2,c
 22150  012B74  D7CE               	goto	i2l8266
 22151  012B76  0A01               	xorlw	1	; case 3
 22152  012B78  A4D8               	btfss	status,2,c
 22153  012B7A  0012               	return	
 22154  012B7C  D7DF               	goto	i2l8270
 22155  012B7E                     __end_ofi2_Port_SetPin:
 22156                           	opt stack 0
 22157                           tosu	equ	0xFFF
 22158                           tosh	equ	0xFFE
 22159                           tosl	equ	0xFFD
 22160                           pclatu	equ	0xFFB
 22161                           pclath	equ	0xFFA
 22162                           tblptru	equ	0xFF8
 22163                           tblptrh	equ	0xFF7
 22164                           tblptrl	equ	0xFF6
 22165                           tablat	equ	0xFF5
 22166                           prodh	equ	0xFF4
 22167                           prodl	equ	0xFF3
 22168                           intcon	equ	0xFF2
 22169                           indf0	equ	0xFEF
 22170                           postinc0	equ	0xFEE
 22171                           fsr0h	equ	0xFEA
 22172                           fsr0l	equ	0xFE9
 22173                           wreg	equ	0xFE8
 22174                           indf1	equ	0xFE7
 22175                           postdec1	equ	0xFE5
 22176                           fsr1h	equ	0xFE2
 22177                           fsr1l	equ	0xFE1
 22178                           indf2	equ	0xFDF
 22179                           postinc2	equ	0xFDE
 22180                           postdec2	equ	0xFDD
 22181                           plusw2	equ	0xFDB
 22182                           fsr2h	equ	0xFDA
 22183                           fsr2l	equ	0xFD9
 22184                           status	equ	0xFD8
 22185                           
 22186 ;; *************** function i2_Word_GetPair *****************
 22187 ;; Defined at:
 22188 ;;		line 156 in file "Library/Types.c"
 22189 ;; Parameters:    Size  Location     Type
 22190 ;;  pInput          2   12[COMRAM] PTR struct Word
 22191 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22192 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22193 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22194 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22195 ;;  pPair           1   14[COMRAM] unsigned char 
 22196 ;; Auto vars:     Size  Location     Type
 22197 ;;		None
 22198 ;; Return value:  Size  Location     Type
 22199 ;;                  1    wreg      unsigned char 
 22200 ;; Registers used:
 22201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22202 ;; Tracked objects:
 22203 ;;		On entry : 0/0
 22204 ;;		On exit  : 0/0
 22205 ;;		Unchanged: 0/0
 22206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22207 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;Total ram usage:        3 bytes
 22212 ;; Hardware stack levels used:    1
 22213 ;; Hardware stack levels required when called:    2
 22214 ;; This function calls:
 22215 ;;		i2_Byte_GetPair
 22216 ;; This function is called by:
 22217 ;;		i2_Port_SetPin
 22218 ;; This function uses a non-reentrant model
 22219 ;;
 22220                           
 22221                           	psect	text130
 22222  0141F6                     __ptext130:
 22223                           	opt stack 0
 22224  0141F6                     i2_Word_GetPair:
 22225                           	opt stack 10
 22226                           
 22227                           ;Types.c: 158: if (pPair >= 4)
 22228                           
 22229                           ;incstack = 0
 22230  0141F6  0E03               	movlw	3
 22231  0141F8  640F               	cpfsgt	i2Word_GetPair@pPair,c
 22232  0141FA  D00C               	goto	i2l8058
 22233                           
 22234                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22235  0141FC  0E01               	movlw	1
 22236  0141FE  240D               	addwf	i2Word_GetPair@pInput,w,c
 22237  014200  6E0A               	movwf	i2Byte_GetPair@pInput,c
 22238  014202  0E00               	movlw	0
 22239  014204  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 22240  014206  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 22241  014208  500F               	movf	i2Word_GetPair@pPair,w,c
 22242  01420A  0FFC               	addlw	252
 22243  01420C  6E0C               	movwf	i2Byte_GetPair@pPair,c
 22244  01420E  EC68  F0A2         	call	i2_Byte_GetPair	;wreg free
 22245  014212  0012               	return	
 22246  014214                     i2l8058:
 22247                           
 22248                           ;Types.c: 160: else
 22249                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22250  014214  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 22251  014218  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 22252  01421C  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 22253  014220  EC68  F0A2         	call	i2_Byte_GetPair	;wreg free
 22254  014224  0012               	return	
 22255  014226                     __end_ofi2_Word_GetPair:
 22256                           	opt stack 0
 22257                           tosu	equ	0xFFF
 22258                           tosh	equ	0xFFE
 22259                           tosl	equ	0xFFD
 22260                           pclatu	equ	0xFFB
 22261                           pclath	equ	0xFFA
 22262                           tblptru	equ	0xFF8
 22263                           tblptrh	equ	0xFF7
 22264                           tblptrl	equ	0xFF6
 22265                           tablat	equ	0xFF5
 22266                           prodh	equ	0xFF4
 22267                           prodl	equ	0xFF3
 22268                           intcon	equ	0xFF2
 22269                           indf0	equ	0xFEF
 22270                           postinc0	equ	0xFEE
 22271                           fsr0h	equ	0xFEA
 22272                           fsr0l	equ	0xFE9
 22273                           wreg	equ	0xFE8
 22274                           indf1	equ	0xFE7
 22275                           postdec1	equ	0xFE5
 22276                           fsr1h	equ	0xFE2
 22277                           fsr1l	equ	0xFE1
 22278                           indf2	equ	0xFDF
 22279                           postinc2	equ	0xFDE
 22280                           postdec2	equ	0xFDD
 22281                           plusw2	equ	0xFDB
 22282                           fsr2h	equ	0xFDA
 22283                           fsr2l	equ	0xFD9
 22284                           status	equ	0xFD8
 22285                           
 22286 ;; *************** function i2_Byte_GetPair *****************
 22287 ;; Defined at:
 22288 ;;		line 87 in file "Library/Types.c"
 22289 ;; Parameters:    Size  Location     Type
 22290 ;;  pInput          2    9[COMRAM] PTR struct Byte
 22291 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22292 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22293 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22294 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22295 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22296 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22297 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22298 ;;		 -> NULL(0), 
 22299 ;;  pPair           1   11[COMRAM] unsigned char 
 22300 ;; Auto vars:     Size  Location     Type
 22301 ;;		None
 22302 ;; Return value:  Size  Location     Type
 22303 ;;                  1    wreg      unsigned char 
 22304 ;; Registers used:
 22305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22306 ;; Tracked objects:
 22307 ;;		On entry : 0/0
 22308 ;;		On exit  : 0/0
 22309 ;;		Unchanged: 0/0
 22310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22315 ;;Total ram usage:        3 bytes
 22316 ;; Hardware stack levels used:    1
 22317 ;; Hardware stack levels required when called:    1
 22318 ;; This function calls:
 22319 ;;		i2_Byte_GetZone
 22320 ;; This function is called by:
 22321 ;;		i2_Word_GetPair
 22322 ;; This function uses a non-reentrant model
 22323 ;;
 22324                           
 22325                           	psect	text131
 22326  0144D0                     __ptext131:
 22327                           	opt stack 0
 22328  0144D0                     i2_Byte_GetPair:
 22329                           	opt stack 10
 22330                           
 22331                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22332                           
 22333                           ;incstack = 0
 22334  0144D0  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 22335  0144D4  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 22336  0144D8  0E04               	movlw	4
 22337  0144DA  6E03               	movwf	i2Byte_GetZone@pMax,c
 22338  0144DC  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 22339  0144E0  0E02               	movlw	2
 22340  0144E2  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 22341  0144E4  EC1C  F09A         	call	i2_Byte_GetZone	;wreg free
 22342  0144E8  0012               	return	
 22343  0144EA                     __end_ofi2_Byte_GetPair:
 22344                           	opt stack 0
 22345                           tosu	equ	0xFFF
 22346                           tosh	equ	0xFFE
 22347                           tosl	equ	0xFFD
 22348                           pclatu	equ	0xFFB
 22349                           pclath	equ	0xFFA
 22350                           tblptru	equ	0xFF8
 22351                           tblptrh	equ	0xFF7
 22352                           tblptrl	equ	0xFF6
 22353                           tablat	equ	0xFF5
 22354                           prodh	equ	0xFF4
 22355                           prodl	equ	0xFF3
 22356                           intcon	equ	0xFF2
 22357                           indf0	equ	0xFEF
 22358                           postinc0	equ	0xFEE
 22359                           fsr0h	equ	0xFEA
 22360                           fsr0l	equ	0xFE9
 22361                           wreg	equ	0xFE8
 22362                           indf1	equ	0xFE7
 22363                           postdec1	equ	0xFE5
 22364                           fsr1h	equ	0xFE2
 22365                           fsr1l	equ	0xFE1
 22366                           indf2	equ	0xFDF
 22367                           postinc2	equ	0xFDE
 22368                           postdec2	equ	0xFDD
 22369                           plusw2	equ	0xFDB
 22370                           fsr2h	equ	0xFDA
 22371                           fsr2l	equ	0xFD9
 22372                           status	equ	0xFD8
 22373                           
 22374 ;; *************** function i2_Byte_GetZone *****************
 22375 ;; Defined at:
 22376 ;;		line 64 in file "Library/Types.c"
 22377 ;; Parameters:    Size  Location     Type
 22378 ;;  pInput          2    0[COMRAM] PTR struct Byte
 22379 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22380 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22381 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22382 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22383 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22384 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22385 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22386 ;;		 -> NULL(0), 
 22387 ;;  pMax            1    2[COMRAM] unsigned char 
 22388 ;;  pChunk          1    3[COMRAM] unsigned char 
 22389 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 22390 ;; Auto vars:     Size  Location     Type
 22391 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 22392 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 22393 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 22394 ;; Return value:  Size  Location     Type
 22395 ;;                  1    wreg      unsigned char 
 22396 ;; Registers used:
 22397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22398 ;; Tracked objects:
 22399 ;;		On entry : 0/0
 22400 ;;		On exit  : 0/0
 22401 ;;		Unchanged: 0/0
 22402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22403 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22404 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22406 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22407 ;;Total ram usage:        9 bytes
 22408 ;; Hardware stack levels used:    1
 22409 ;; This function calls:
 22410 ;;		Nothing
 22411 ;; This function is called by:
 22412 ;;		i2_Byte_GetPair
 22413 ;; This function uses a non-reentrant model
 22414 ;;
 22415                           
 22416                           	psect	text132
 22417  013438                     __ptext132:
 22418                           	opt stack 0
 22419  013438                     i2_Byte_GetZone:
 22420                           	opt stack 10
 22421                           
 22422                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22423                           
 22424                           ;incstack = 0
 22425  013438  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 22426  01343C  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 22427  013440  0E00               	movlw	low (__mediumconst shr (0+16))
 22428  013442  6EF8               	movwf	tblptru,c
 22429  013444  0E0F               	movlw	(high __ramtop+-1)
 22430  013446  64F7               	cpfsgt	tblptrh,c
 22431  013448  D003               	bra	i2u400_47
 22432  01344A  0008               	tblrd		*
 22433  01344C  50F5               	movf	tablat,w,c
 22434  01344E  D005               	bra	i2u400_40
 22435  013450                     i2u400_47:
 22436  013450  CFF6 FFE9          	movff	tblptrl,fsr0l
 22437  013454  CFF7 FFEA          	movff	tblptrh,fsr0h
 22438  013458  50EF               	movf	indf0,w,c
 22439  01345A                     i2u400_40:
 22440  01345A  6E09               	movwf	i2Byte_GetZone@Output,c
 22441                           
 22442                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22443  01345C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 22444  01345E  0D01               	mullw	1
 22445  013460  0E77               	movlw	low _MASKS
 22446  013462  24F3               	addwf	prodl,w,c
 22447  013464  6EF6               	movwf	tblptrl,c
 22448  013466  0EFD               	movlw	high _MASKS
 22449  013468  20F4               	addwfc	prodh,w,c
 22450  01346A  6EF7               	movwf	tblptrh,c
 22451  01346C                     	if	1	;There are 3 active tblptr bytes
 22452  01346C  6AF8               	clrf	tblptru,c
 22453  01346E  0E00               	movlw	low (__mediumconst shr (0+16))
 22454  013470  22F8               	addwfc	tblptru,f,c
 22455  013472                     	endif
 22456  013472  0008               	tblrd		*
 22457  013474  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 22458                           
 22459                           ;Types.c: 68: UINT8 Offset = 0;
 22460  013478  0E00               	movlw	0
 22461  01347A  6E08               	movwf	i2Byte_GetZone@Offset,c
 22462                           
 22463                           ;Types.c: 70: while (pChunk >= pMax)
 22464  01347C  D003               	goto	i2l7338
 22465  01347E                     i2l7334:
 22466                           
 22467                           ;Types.c: 71: {
 22468                           ;Types.c: 72: pChunk -= pMax;
 22469  01347E  5003               	movf	i2Byte_GetZone@pMax,w,c
 22470  013480  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 22471                           
 22472                           ;Types.c: 73: Offset += 1;
 22473  013482  2A08               	incf	i2Byte_GetZone@Offset,f,c
 22474  013484                     i2l7338:
 22475  013484  5003               	movf	i2Byte_GetZone@pMax,w,c
 22476  013486  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 22477  013488  B0D8               	btfsc	status,0,c
 22478  01348A  D7F9               	goto	i2l7334
 22479                           
 22480                           ;Types.c: 74: }
 22481                           ;Types.c: 75: pChunk *= pChunkSize;
 22482  01348C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 22483  01348E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 22484  013490  50F3               	movf	prodl,w,c
 22485  013492  6E04               	movwf	i2Byte_GetZone@pChunk,c
 22486                           
 22487                           ;Types.c: 76: pChunk += Offset;
 22488  013494  5008               	movf	i2Byte_GetZone@Offset,w,c
 22489  013496  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 22490                           
 22491                           ;Types.c: 78: Output >>= pChunk;
 22492  013498  2804               	incf	i2Byte_GetZone@pChunk,w,c
 22493  01349A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 22494  01349C  D002               	goto	i2u402_40
 22495  01349E                     i2u402_45:
 22496  01349E  90D8               	bcf	status,0,c
 22497  0134A0  3209               	rrcf	i2Byte_GetZone@Output,f,c
 22498  0134A2                     i2u402_40:
 22499  0134A2  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 22500  0134A4  D7FC               	goto	i2u402_45
 22501                           
 22502                           ;Types.c: 79: Output &= MASK;
 22503  0134A6  5007               	movf	i2Byte_GetZone@MASK,w,c
 22504  0134A8  1609               	andwf	i2Byte_GetZone@Output,f,c
 22505                           
 22506                           ;Types.c: 80: return Output;
 22507  0134AA  5009               	movf	i2Byte_GetZone@Output,w,c
 22508  0134AC  0012               	return	
 22509  0134AE                     __end_ofi2_Byte_GetZone:
 22510                           	opt stack 0
 22511                           tosu	equ	0xFFF
 22512                           tosh	equ	0xFFE
 22513                           tosl	equ	0xFFD
 22514                           pclatu	equ	0xFFB
 22515                           pclath	equ	0xFFA
 22516                           tblptru	equ	0xFF8
 22517                           tblptrh	equ	0xFF7
 22518                           tblptrl	equ	0xFF6
 22519                           tablat	equ	0xFF5
 22520                           prodh	equ	0xFF4
 22521                           prodl	equ	0xFF3
 22522                           intcon	equ	0xFF2
 22523                           indf0	equ	0xFEF
 22524                           postinc0	equ	0xFEE
 22525                           fsr0h	equ	0xFEA
 22526                           fsr0l	equ	0xFE9
 22527                           wreg	equ	0xFE8
 22528                           indf1	equ	0xFE7
 22529                           postdec1	equ	0xFE5
 22530                           fsr1h	equ	0xFE2
 22531                           fsr1l	equ	0xFE1
 22532                           indf2	equ	0xFDF
 22533                           postinc2	equ	0xFDE
 22534                           postdec2	equ	0xFDD
 22535                           plusw2	equ	0xFDB
 22536                           fsr2h	equ	0xFDA
 22537                           fsr2l	equ	0xFD9
 22538                           status	equ	0xFD8
 22539                           
 22540 ;; *************** function i2_Byte_SetBit *****************
 22541 ;; Defined at:
 22542 ;;		line 32 in file "Library/Types.c"
 22543 ;; Parameters:    Size  Location     Type
 22544 ;;  pInput          2    0[COMRAM] PTR struct Byte
 22545 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 22546 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 22547 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22548 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22549 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22550 ;;		 -> NULL(0), 
 22551 ;;  pBit            1    2[COMRAM] unsigned char 
 22552 ;;  pValue          1    3[COMRAM] unsigned char 
 22553 ;; Auto vars:     Size  Location     Type
 22554 ;;		None
 22555 ;; Return value:  Size  Location     Type
 22556 ;;                  1    wreg      void 
 22557 ;; Registers used:
 22558 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22559 ;; Tracked objects:
 22560 ;;		On entry : 0/0
 22561 ;;		On exit  : 0/0
 22562 ;;		Unchanged: 0/0
 22563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22566 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22567 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22568 ;;Total ram usage:        7 bytes
 22569 ;; Hardware stack levels used:    1
 22570 ;; This function calls:
 22571 ;;		Nothing
 22572 ;; This function is called by:
 22573 ;;		i2_Port_SetPin
 22574 ;; This function uses a non-reentrant model
 22575 ;;
 22576                           
 22577                           	psect	text133
 22578  013CBE                     __ptext133:
 22579                           	opt stack 0
 22580  013CBE                     i2_Byte_SetBit:
 22581                           	opt stack 12
 22582                           
 22583                           ;Types.c: 34: pValue &= 1;
 22584                           
 22585                           ;incstack = 0
 22586  013CBE  0E01               	movlw	1
 22587  013CC0  1604               	andwf	i2Byte_SetBit@pValue,f,c
 22588                           
 22589                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 22590  013CC2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 22591  013CC6  0E01               	movlw	1
 22592  013CC8  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 22593  013CCA  2A05               	incf	??i2_Byte_SetBit,f,c
 22594  013CCC  D002               	goto	i2u462_44
 22595  013CCE                     i2u462_45:
 22596  013CCE  90D8               	bcf	status,0,c
 22597  013CD0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 22598  013CD2                     i2u462_44:
 22599  013CD2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 22600  013CD4  D7FC               	goto	i2u462_45
 22601  013CD6  5006               	movf	??i2_Byte_SetBit+1,w,c
 22602  013CD8  0AFF               	xorlw	255
 22603  013CDA  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 22604  013CDC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 22605  013CE0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 22606  013CE4  5007               	movf	??i2_Byte_SetBit+2,w,c
 22607  013CE6  16DF               	andwf	indf2,f,c
 22608                           
 22609                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 22610  013CE8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 22611  013CEC  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 22612  013CF0  2A05               	incf	??i2_Byte_SetBit,f,c
 22613  013CF2  D002               	goto	i2u463_44
 22614  013CF4                     i2u463_45:
 22615  013CF4  90D8               	bcf	status,0,c
 22616  013CF6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 22617  013CF8                     i2u463_44:
 22618  013CF8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 22619  013CFA  D7FC               	goto	i2u463_45
 22620  013CFC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 22621  013D00  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 22622  013D04  5006               	movf	??i2_Byte_SetBit+1,w,c
 22623  013D06  12DF               	iorwf	indf2,f,c
 22624  013D08  0012               	return		;funcret
 22625  013D0A                     __end_ofi2_Byte_SetBit:
 22626                           	opt stack 0
 22627                           tosu	equ	0xFFF
 22628                           tosh	equ	0xFFE
 22629                           tosl	equ	0xFFD
 22630                           pclatu	equ	0xFFB
 22631                           pclath	equ	0xFFA
 22632                           tblptru	equ	0xFF8
 22633                           tblptrh	equ	0xFF7
 22634                           tblptrl	equ	0xFF6
 22635                           tablat	equ	0xFF5
 22636                           prodh	equ	0xFF4
 22637                           prodl	equ	0xFF3
 22638                           intcon	equ	0xFF2
 22639                           indf0	equ	0xFEF
 22640                           postinc0	equ	0xFEE
 22641                           fsr0h	equ	0xFEA
 22642                           fsr0l	equ	0xFE9
 22643                           wreg	equ	0xFE8
 22644                           indf1	equ	0xFE7
 22645                           postdec1	equ	0xFE5
 22646                           fsr1h	equ	0xFE2
 22647                           fsr1l	equ	0xFE1
 22648                           indf2	equ	0xFDF
 22649                           postinc2	equ	0xFDE
 22650                           postdec2	equ	0xFDD
 22651                           plusw2	equ	0xFDB
 22652                           fsr2h	equ	0xFDA
 22653                           fsr2l	equ	0xFD9
 22654                           status	equ	0xFD8
 22655                           
 22656 ;; *************** function i2_MXK_SwitchTo *****************
 22657 ;; Defined at:
 22658 ;;		line 105 in file "Library/MXK.c"
 22659 ;; Parameters:    Size  Location     Type
 22660 ;;  pModule         1    wreg     enum E6925
 22661 ;; Auto vars:     Size  Location     Type
 22662 ;;  pModule         1    7[COMRAM] enum E6925
 22663 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 22664 ;; Return value:  Size  Location     Type
 22665 ;;                  1    wreg      unsigned char 
 22666 ;; Registers used:
 22667 ;;		wreg, status,2, status,0, cstack
 22668 ;; Tracked objects:
 22669 ;;		On entry : 0/0
 22670 ;;		On exit  : 0/0
 22671 ;;		Unchanged: 0/0
 22672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22674 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22677 ;;Total ram usage:        2 bytes
 22678 ;; Hardware stack levels used:    1
 22679 ;; Hardware stack levels required when called:    1
 22680 ;; This function calls:
 22681 ;;		i2_delay_us
 22682 ;; This function is called by:
 22683 ;;		i2_Motor_Step
 22684 ;; This function uses a non-reentrant model
 22685 ;;
 22686                           
 22687                           	psect	text134
 22688  01409A                     __ptext134:
 22689                           	opt stack 0
 22690  01409A                     i2_MXK_SwitchTo:
 22691                           	opt stack 12
 22692                           
 22693                           ;incstack = 0
 22694                           ;i2MXK_SwitchTo@pModule stored from wreg
 22695  01409A  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 22696                           
 22697                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 22698  01409C  5086               	movf	3974,w,c	;volatile
 22699  01409E  0B0F               	andlw	15
 22700  0140A0  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 22701                           
 22702                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 22703  0140A2  5043               	movf	_Bus_State,w,c
 22704  0140A4  A4D8               	btfss	status,2,c
 22705  0140A6  D002               	goto	i2l8286
 22706                           
 22707                           ;MXK.c: 110: return 0;
 22708  0140A8  0E00               	movlw	0
 22709  0140AA  0012               	return	
 22710  0140AC                     i2l8286:
 22711                           
 22712                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 22713  0140AC  0E00               	movlw	0
 22714  0140AE  6E43               	movwf	_Bus_State,c
 22715                           
 22716                           ;MXK.c: 114: if (CUR != pModule)
 22717  0140B0  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 22718  0140B2  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 22719  0140B4  B4D8               	btfsc	status,2,c
 22720  0140B6  D00A               	goto	i2l8294
 22721                           
 22722                           ;MXK.c: 115: {
 22723                           ;MXK.c: 116: PORTG &= ~(0xF);
 22724  0140B8  0EF0               	movlw	240
 22725  0140BA  1686               	andwf	3974,f,c	;volatile
 22726                           
 22727                           ;MXK.c: 117: PORTG |= pModule;
 22728  0140BC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 22729  0140BE  1286               	iorwf	3974,f,c	;volatile
 22730                           
 22731                           ;MXK.c: 120: delay_us(10);
 22732  0140C0  0E00               	movlw	0
 22733  0140C2  6E02               	movwf	i2delay_us@us+1,c
 22734  0140C4  0E0A               	movlw	10
 22735  0140C6  6E01               	movwf	i2delay_us@us,c
 22736  0140C8  EC7B  F09F         	call	i2_delay_us	;wreg free
 22737  0140CC                     i2l8294:
 22738                           
 22739                           ;MXK.c: 121: }
 22740                           ;MXK.c: 122: return 1;
 22741  0140CC  0E01               	movlw	1
 22742  0140CE  0012               	return	
 22743  0140D0                     __end_ofi2_MXK_SwitchTo:
 22744                           	opt stack 0
 22745                           tosu	equ	0xFFF
 22746                           tosh	equ	0xFFE
 22747                           tosl	equ	0xFFD
 22748                           pclatu	equ	0xFFB
 22749                           pclath	equ	0xFFA
 22750                           tblptru	equ	0xFF8
 22751                           tblptrh	equ	0xFF7
 22752                           tblptrl	equ	0xFF6
 22753                           tablat	equ	0xFF5
 22754                           prodh	equ	0xFF4
 22755                           prodl	equ	0xFF3
 22756                           intcon	equ	0xFF2
 22757                           indf0	equ	0xFEF
 22758                           postinc0	equ	0xFEE
 22759                           fsr0h	equ	0xFEA
 22760                           fsr0l	equ	0xFE9
 22761                           wreg	equ	0xFE8
 22762                           indf1	equ	0xFE7
 22763                           postdec1	equ	0xFE5
 22764                           fsr1h	equ	0xFE2
 22765                           fsr1l	equ	0xFE1
 22766                           indf2	equ	0xFDF
 22767                           postinc2	equ	0xFDE
 22768                           postdec2	equ	0xFDD
 22769                           plusw2	equ	0xFDB
 22770                           fsr2h	equ	0xFDA
 22771                           fsr2l	equ	0xFD9
 22772                           status	equ	0xFD8
 22773                           
 22774 ;; *************** function i2_delay_us *****************
 22775 ;; Defined at:
 22776 ;;		line 255 in file "Library/Types.c"
 22777 ;; Parameters:    Size  Location     Type
 22778 ;;  us              2    0[COMRAM] unsigned short 
 22779 ;; Auto vars:     Size  Location     Type
 22780 ;;  delay_us        4    2[COMRAM] unsigned long 
 22781 ;; Return value:  Size  Location     Type
 22782 ;;                  1    wreg      void 
 22783 ;; Registers used:
 22784 ;;		wreg, status,2, status,0
 22785 ;; Tracked objects:
 22786 ;;		On entry : 0/0
 22787 ;;		On exit  : 0/0
 22788 ;;		Unchanged: 0/0
 22789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22793 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22794 ;;Total ram usage:        6 bytes
 22795 ;; Hardware stack levels used:    1
 22796 ;; This function calls:
 22797 ;;		Nothing
 22798 ;; This function is called by:
 22799 ;;		i2_MXK_SwitchTo
 22800 ;; This function uses a non-reentrant model
 22801 ;;
 22802                           
 22803                           	psect	text135
 22804  013EF6                     __ptext135:
 22805                           	opt stack 0
 22806  013EF6                     i2_delay_us:
 22807                           	opt stack 12
 22808                           
 22809                           ;Types.c: 256: unsigned long u;
 22810                           ;Types.c: 257: while (us--) {
 22811                           
 22812                           ;incstack = 0
 22813  013EF6  D016               	goto	i2l8072
 22814  013EF8                     i2l8064:
 22815                           
 22816                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 22817  013EF8  0E00               	movlw	0
 22818  013EFA  6E03               	movwf	i2delay_us@u,c
 22819  013EFC  0E00               	movlw	0
 22820  013EFE  6E04               	movwf	i2delay_us@u+1,c
 22821  013F00  0E00               	movlw	0
 22822  013F02  6E05               	movwf	i2delay_us@u+2,c
 22823  013F04  0E00               	movlw	0
 22824  013F06  6E06               	movwf	i2delay_us@u+3,c
 22825  013F08                     i2l8066:
 22826  013F08  5003               	movf	i2delay_us@u,w,c
 22827  013F0A  1004               	iorwf	i2delay_us@u+1,w,c
 22828  013F0C  1005               	iorwf	i2delay_us@u+2,w,c
 22829  013F0E  1006               	iorwf	i2delay_us@u+3,w,c
 22830  013F10  A4D8               	btfss	status,2,c
 22831  013F12  D008               	goto	i2l8072
 22832  013F14  F000               	nop		; ;# 
 22833  013F16  0E01               	movlw	1
 22834  013F18  2603               	addwf	i2delay_us@u,f,c
 22835  013F1A  0E00               	movlw	0
 22836  013F1C  2204               	addwfc	i2delay_us@u+1,f,c
 22837  013F1E  2205               	addwfc	i2delay_us@u+2,f,c
 22838  013F20  2206               	addwfc	i2delay_us@u+3,f,c
 22839  013F22  D7F2               	goto	i2l8066
 22840  013F24                     i2l8072:
 22841  013F24  0601               	decf	i2delay_us@us,f,c
 22842  013F26  A0D8               	btfss	status,0,c
 22843  013F28  0602               	decf	i2delay_us@us+1,f,c
 22844  013F2A  2801               	incf	i2delay_us@us,w,c
 22845  013F2C  E1E5               	bnz	i2l8064
 22846  013F2E  2802               	incf	i2delay_us@us+1,w,c
 22847  013F30  B4D8               	btfsc	status,2,c
 22848  013F32  0012               	return	
 22849  013F34  D7E1               	goto	i2l8064
 22850  013F36                     __end_ofi2_delay_us:
 22851                           	opt stack 0
 22852                           tosu	equ	0xFFF
 22853                           tosh	equ	0xFFE
 22854                           tosl	equ	0xFFD
 22855                           pclatu	equ	0xFFB
 22856                           pclath	equ	0xFFA
 22857                           tblptru	equ	0xFF8
 22858                           tblptrh	equ	0xFF7
 22859                           tblptrl	equ	0xFF6
 22860                           tablat	equ	0xFF5
 22861                           prodh	equ	0xFF4
 22862                           prodl	equ	0xFF3
 22863                           intcon	equ	0xFF2
 22864                           indf0	equ	0xFEF
 22865                           postinc0	equ	0xFEE
 22866                           fsr0h	equ	0xFEA
 22867                           fsr0l	equ	0xFE9
 22868                           wreg	equ	0xFE8
 22869                           indf1	equ	0xFE7
 22870                           postdec1	equ	0xFE5
 22871                           fsr1h	equ	0xFE2
 22872                           fsr1l	equ	0xFE1
 22873                           indf2	equ	0xFDF
 22874                           postinc2	equ	0xFDE
 22875                           postdec2	equ	0xFDD
 22876                           plusw2	equ	0xFDB
 22877                           fsr2h	equ	0xFDA
 22878                           fsr2l	equ	0xFD9
 22879                           status	equ	0xFD8
 22880                           
 22881 ;; *************** function i2_MXK_Release *****************
 22882 ;; Defined at:
 22883 ;;		line 130 in file "Library/MXK.c"
 22884 ;; Parameters:    Size  Location     Type
 22885 ;;		None
 22886 ;; Auto vars:     Size  Location     Type
 22887 ;;		None
 22888 ;; Return value:  Size  Location     Type
 22889 ;;                  1    wreg      unsigned char 
 22890 ;; Registers used:
 22891 ;;		wreg, status,2, status,0
 22892 ;; Tracked objects:
 22893 ;;		On entry : 0/0
 22894 ;;		On exit  : 0/0
 22895 ;;		Unchanged: 0/0
 22896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22901 ;;Total ram usage:        0 bytes
 22902 ;; Hardware stack levels used:    1
 22903 ;; This function calls:
 22904 ;;		Nothing
 22905 ;; This function is called by:
 22906 ;;		i2_Motor_Step
 22907 ;; This function uses a non-reentrant model
 22908 ;;
 22909                           
 22910                           	psect	text136
 22911  0146AA                     __ptext136:
 22912                           	opt stack 0
 22913  0146AA                     i2_MXK_Release:
 22914                           	opt stack 13
 22915                           
 22916                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 22917                           
 22918                           ;incstack = 0
 22919  0146AA  0E01               	movlw	1
 22920  0146AC  6E43               	movwf	_Bus_State,c
 22921                           
 22922                           ;MXK.c: 135: return 1;
 22923                           ;	Return value of i2_MXK_Release is never used
 22924  0146AE  0012               	return	
 22925  0146B0                     __end_ofi2_MXK_Release:
 22926                           	opt stack 0
 22927                           tosu	equ	0xFFF
 22928                           tosh	equ	0xFFE
 22929                           tosl	equ	0xFFD
 22930                           pclatu	equ	0xFFB
 22931                           pclath	equ	0xFFA
 22932                           tblptru	equ	0xFF8
 22933                           tblptrh	equ	0xFF7
 22934                           tblptrl	equ	0xFF6
 22935                           tablat	equ	0xFF5
 22936                           prodh	equ	0xFF4
 22937                           prodl	equ	0xFF3
 22938                           intcon	equ	0xFF2
 22939                           indf0	equ	0xFEF
 22940                           postinc0	equ	0xFEE
 22941                           fsr0h	equ	0xFEA
 22942                           fsr0l	equ	0xFE9
 22943                           wreg	equ	0xFE8
 22944                           indf1	equ	0xFE7
 22945                           postdec1	equ	0xFE5
 22946                           fsr1h	equ	0xFE2
 22947                           fsr1l	equ	0xFE1
 22948                           indf2	equ	0xFDF
 22949                           postinc2	equ	0xFDE
 22950                           postdec2	equ	0xFDD
 22951                           plusw2	equ	0xFDB
 22952                           fsr2h	equ	0xFDA
 22953                           fsr2l	equ	0xFD9
 22954                           status	equ	0xFD8
 22955                           
 22956 ;; *************** function i2_MXK_Queue *****************
 22957 ;; Defined at:
 22958 ;;		line 144 in file "Library/MXK.c"
 22959 ;; Parameters:    Size  Location     Type
 22960 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 22961 ;;		 -> Absolute function(1), Motor_Step(1), 
 22962 ;; Auto vars:     Size  Location     Type
 22963 ;;		None
 22964 ;; Return value:  Size  Location     Type
 22965 ;;                  1    wreg      void 
 22966 ;; Registers used:
 22967 ;;		wreg, status,2, status,0
 22968 ;; Tracked objects:
 22969 ;;		On entry : 0/0
 22970 ;;		On exit  : 0/0
 22971 ;;		Unchanged: 0/0
 22972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22973 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22976 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22977 ;;Total ram usage:        3 bytes
 22978 ;; Hardware stack levels used:    1
 22979 ;; This function calls:
 22980 ;;		Nothing
 22981 ;; This function is called by:
 22982 ;;		i2_Motor_Step
 22983 ;; This function uses a non-reentrant model
 22984 ;;
 22985                           
 22986                           	psect	text137
 22987  01463C                     __ptext137:
 22988                           	opt stack 0
 22989  01463C                     i2_MXK_Queue:
 22990                           	opt stack 13
 22991                           
 22992                           ;MXK.c: 146: lQueue = pCallback;
 22993                           
 22994                           ;incstack = 0
 22995  01463C  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 22996  014640  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 22997  014644  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 22998  014648  0012               	return		;funcret
 22999  01464A                     __end_ofi2_MXK_Queue:
 23000                           	opt stack 0
 23001                           tosu	equ	0xFFF
 23002                           tosh	equ	0xFFE
 23003                           tosl	equ	0xFFD
 23004                           pclatu	equ	0xFFB
 23005                           pclath	equ	0xFFA
 23006                           tblptru	equ	0xFF8
 23007                           tblptrh	equ	0xFF7
 23008                           tblptrl	equ	0xFF6
 23009                           tablat	equ	0xFF5
 23010                           prodh	equ	0xFF4
 23011                           prodl	equ	0xFF3
 23012                           intcon	equ	0xFF2
 23013                           indf0	equ	0xFEF
 23014                           postinc0	equ	0xFEE
 23015                           fsr0h	equ	0xFEA
 23016                           fsr0l	equ	0xFE9
 23017                           wreg	equ	0xFE8
 23018                           indf1	equ	0xFE7
 23019                           postdec1	equ	0xFE5
 23020                           fsr1h	equ	0xFE2
 23021                           fsr1l	equ	0xFE1
 23022                           indf2	equ	0xFDF
 23023                           postinc2	equ	0xFDE
 23024                           postdec2	equ	0xFDD
 23025                           plusw2	equ	0xFDB
 23026                           fsr2h	equ	0xFDA
 23027                           fsr2l	equ	0xFD9
 23028                           status	equ	0xFD8
 23029                           tosu	equ	0xFFF
 23030                           tosh	equ	0xFFE
 23031                           tosl	equ	0xFFD
 23032                           pclatu	equ	0xFFB
 23033                           pclath	equ	0xFFA
 23034                           tblptru	equ	0xFF8
 23035                           tblptrh	equ	0xFF7
 23036                           tblptrl	equ	0xFF6
 23037                           tablat	equ	0xFF5
 23038                           prodh	equ	0xFF4
 23039                           prodl	equ	0xFF3
 23040                           intcon	equ	0xFF2
 23041                           indf0	equ	0xFEF
 23042                           postinc0	equ	0xFEE
 23043                           fsr0h	equ	0xFEA
 23044                           fsr0l	equ	0xFE9
 23045                           wreg	equ	0xFE8
 23046                           indf1	equ	0xFE7
 23047                           postdec1	equ	0xFE5
 23048                           fsr1h	equ	0xFE2
 23049                           fsr1l	equ	0xFE1
 23050                           indf2	equ	0xFDF
 23051                           postinc2	equ	0xFDE
 23052                           postdec2	equ	0xFDD
 23053                           plusw2	equ	0xFDB
 23054                           fsr2h	equ	0xFDA
 23055                           fsr2l	equ	0xFD9
 23056                           status	equ	0xFD8
 23057                           
 23058                           	psect	text138
 23059  000000                     __ptext138:
 23060                           	opt stack 0
 23061                           tosu	equ	0xFFF
 23062                           tosh	equ	0xFFE
 23063                           tosl	equ	0xFFD
 23064                           pclatu	equ	0xFFB
 23065                           pclath	equ	0xFFA
 23066                           tblptru	equ	0xFF8
 23067                           tblptrh	equ	0xFF7
 23068                           tblptrl	equ	0xFF6
 23069                           tablat	equ	0xFF5
 23070                           prodh	equ	0xFF4
 23071                           prodl	equ	0xFF3
 23072                           intcon	equ	0xFF2
 23073                           indf0	equ	0xFEF
 23074                           postinc0	equ	0xFEE
 23075                           fsr0h	equ	0xFEA
 23076                           fsr0l	equ	0xFE9
 23077                           wreg	equ	0xFE8
 23078                           indf1	equ	0xFE7
 23079                           postdec1	equ	0xFE5
 23080                           fsr1h	equ	0xFE2
 23081                           fsr1l	equ	0xFE1
 23082                           indf2	equ	0xFDF
 23083                           postinc2	equ	0xFDE
 23084                           postdec2	equ	0xFDD
 23085                           plusw2	equ	0xFDB
 23086                           fsr2h	equ	0xFDA
 23087                           fsr2l	equ	0xFD9
 23088                           status	equ	0xFD8
 23089                           
 23090                           	psect	rparam
 23091  0000                     tosu	equ	0xFFF
 23092                           tosh	equ	0xFFE
 23093                           tosl	equ	0xFFD
 23094                           pclatu	equ	0xFFB
 23095                           pclath	equ	0xFFA
 23096                           tblptru	equ	0xFF8
 23097                           tblptrh	equ	0xFF7
 23098                           tblptrl	equ	0xFF6
 23099                           tablat	equ	0xFF5
 23100                           prodh	equ	0xFF4
 23101                           prodl	equ	0xFF3
 23102                           intcon	equ	0xFF2
 23103                           indf0	equ	0xFEF
 23104                           postinc0	equ	0xFEE
 23105                           fsr0h	equ	0xFEA
 23106                           fsr0l	equ	0xFE9
 23107                           wreg	equ	0xFE8
 23108                           indf1	equ	0xFE7
 23109                           postdec1	equ	0xFE5
 23110                           fsr1h	equ	0xFE2
 23111                           fsr1l	equ	0xFE1
 23112                           indf2	equ	0xFDF
 23113                           postinc2	equ	0xFDE
 23114                           postdec2	equ	0xFDD
 23115                           plusw2	equ	0xFDB
 23116                           fsr2h	equ	0xFDA
 23117                           fsr2l	equ	0xFD9
 23118                           status	equ	0xFD8
 23119                           
 23120                           	psect	temp
 23121  000049                     btemp:
 23122                           	opt stack 0
 23123  000049                     	ds	1
 23124  0000                     int$flags	set	btemp
 23125                           tosu	equ	0xFFF
 23126                           tosh	equ	0xFFE
 23127                           tosl	equ	0xFFD
 23128                           pclatu	equ	0xFFB
 23129                           pclath	equ	0xFFA
 23130                           tblptru	equ	0xFF8
 23131                           tblptrh	equ	0xFF7
 23132                           tblptrl	equ	0xFF6
 23133                           tablat	equ	0xFF5
 23134                           prodh	equ	0xFF4
 23135                           prodl	equ	0xFF3
 23136                           intcon	equ	0xFF2
 23137                           indf0	equ	0xFEF
 23138                           postinc0	equ	0xFEE
 23139                           fsr0h	equ	0xFEA
 23140                           fsr0l	equ	0xFE9
 23141                           wreg	equ	0xFE8
 23142                           indf1	equ	0xFE7
 23143                           postdec1	equ	0xFE5
 23144                           fsr1h	equ	0xFE2
 23145                           fsr1l	equ	0xFE1
 23146                           indf2	equ	0xFDF
 23147                           postinc2	equ	0xFDE
 23148                           postdec2	equ	0xFDD
 23149                           plusw2	equ	0xFDB
 23150                           fsr2h	equ	0xFDA
 23151                           fsr2l	equ	0xFD9
 23152                           status	equ	0xFD8


Data Sizes:
    Strings     138
    Constant    730
    Data        25
    BSS         673
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160     53     160
    BANK1           256      1     256
    BANK2           256     22      22
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_12(CODE[24]), STR_11(CODE[24]), STR_10(CODE[24]), STR_9(CODE[15]), 
		 -> STR_8(CODE[11]), STR_7(CODE[13]), STR_6(CODE[14]), STR_5(CODE[8]), 
		 -> STR_4(CODE[12]), STR_3(CODE[16]), STR_2(CODE[3]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK1[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK0[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK0[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK0[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK0[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK0[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK0[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK1[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _setMode->_continuousMode
    _displayText->_displayMode
    _displaySID->_printf
    _displayMode->_getMode
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_SPI_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _MXK_Init->_Port_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _initialise->_HMI_Init
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _HMI_Init->_Button_Init
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 2793843
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                        _displayText
                         _initialise
                            _setMode
 ---------------------------------------------------------------------------------
 (1) _setMode                                              4     4      0 1536928
                                              0 BANK2      4     4      0
                     _continuousMode
                            _getMode
                           _nullMode
                       _positionMode
                           _stepMode
 ---------------------------------------------------------------------------------
 (2) _stepMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _positionMode                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nullMode                                             0     0      0  364928
                     _Console_Render
                        _displayText
                             _printf
 ---------------------------------------------------------------------------------
 (2) _continuousMode                                       6     6      0  903164
                                             46 BANK0      6     6      0
                     _Console_Render
              _Console_SetForecolour
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
                        _displayText
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _displayText                                          0     0      0  323485
                     _Console_Render
                        _displayMode
                         _displaySID
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displaySID                                           0     0      0    6603
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displayMode                                          4     4      0  275439
                                             42 BANK0      4     4      0
              _Console_SetForecolour
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    6116
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (5) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (6) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (7) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (8) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (8) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (7) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _getMode                                              6     4      2  268802
                                             36 BANK0      6     4      2
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _HMI_Poll                                             0     0      0  257110
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (7) _Button_Poll                                          9     6      3  257110
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (7) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (8) _Event_TestButton                                     1     1      0   37037
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_UpButton                                   1     1      0   36892
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DownButton                                 1     1      0   36892
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetNumber                                        2     0      2    3942
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (10) _itos                                               10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (11) _reverse                                             7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) _HMI_SetSegments                                     5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (11) _ToSegment                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (8) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_SetForecolour                                2     0      2     487
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (5) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (6) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0  902118
                       _Console_Init
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              0 BANK1      1     1      0
                                             11 BANK2      5     2      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             52 BANK0      1     1      0
                                              6 BANK2      5     2      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             51 BANK0      1     1      0
                                              3 BANK2      3     0      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290516
                                              0 BANK2      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (6) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (7) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (8) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (8) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (9) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (10) _Port_TogglePin                                      4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (11) _Port_SetPin                                         5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             20 BANK2      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              7 BANK2     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (12) _Byte_SetBit                                         7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             51 BANK0      1     1      0
                                              3 BANK2      4     0      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      4     0      4
                                              0 BANK2      3     3      0
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (7) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (12) _Word_GetPair                                        3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (13) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (14) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _ISR_Function                                       14    14      0    1778
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (16) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (19) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (20) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (21) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (19) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (18) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (19) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _displayText
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _displayMode
       _Console_SetForecolour
       _getMode
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _displaySID
       _Console_SetForecolour
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _initialise
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
   _setMode
     _continuousMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Console_SetForecolour
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
       _displayText *
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _getMode *
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                     ___lwdiv (ARG)
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf *
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _getMode
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
     _nullMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _displayText
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                         ___lwdiv (ARG)
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _positionMode
     _stepMode

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     16      16       9        8.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      1     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     35      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1FE      12        0.0%
DATA                 0      0     32A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Aug 10 14:02:43 2017

                   i2_Timer0_Stop 46A4                  SPI_Init@pChannel 00F5  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 2240  
                               _A 0044                                 _a 0045  
                               _i 007B                                 _j 007A  
                               _l 0047                                 _u 0079  
                               _w 0048                      ?_displayMode 0001  
                    ?_displayText 0001                      ___awdiv@sign 00C9  
             ___wmul@multiplicand 00C6                     _HMI_DIPSwitch 4502  
              LCD_DrawField@pSize 00DC                LCD_DrawField@count 00E2  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 4656  
                     ?_LED_Toggle 0001                     ??_Console_Tab 00CC  
                     ?_HMI_GetBar 0001                               l615 039E  
                             l528 07D6                               l617 03A2  
                             l655 4356                               l680 376A  
                             l657 435A                               l685 3790  
                             _PR2 000FCB                               _val 0070  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00DD  
                    _Word_GetPair 3F74                               prod 000FF3  
             MXK_SwitchTo@pModule 00CB                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 00D4  
              Console_MakeField@y 00D5                      Console_Tab@c 00D3  
                    Console_Tab@i 00D2               LCD_DrawField@pField 00D6  
                    Console_Tab@t 00D1      __end_of_Event_HMI_LeftButton 3AD6  
                      i2_delay_us 3EF6              Port_Set@TypeRequired 00E6  
               Console_FormFeed@x 00C6                 Console_FormFeed@y 00C7  
             LCD_DrawField@pPoint 00D8      __end_of_Event_HMI_DownButton 4136  
                  ?_LCD_DrawField 00D6             Port_SetPinType@Output 00EE  
                 Port_SetPin@Type 00D7                   Port_SetPin@pPin 00D5  
                   ?_Byte_GetPair 00CD                   __end_of_LED_Set 3C20  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 2AD4  
                    _Word_SetPair 3E2A                     ?_Byte_GetZone 00C4  
                            l1215 2972                              l1056 112A  
                            l1161 1506                              l1082 2556  
                            l2436 28A8                              l2489 342E  
                            l2499 39B8                    ??_Console_Init 00C4  
           Port_SetPinType@pInput 00EA                              l9800 07E2  
                            l9730 2FAC                              l9900 0846  
                            l9820 07F6                              l9812 07EE  
                            l9804 07E6                              l9726 2FA0  
                            l9920 085A                              l9912 0852  
                            l9904 084A                              l9840 080A  
                            l9832 0802                              l9824 07FA  
                            l9816 07F2                              l9808 07EA  
                            l9756 3FA0                              l9772 2606  
                            l9940 086E                              l9932 0866  
                            l9924 085E                              l9916 0856  
                            l9908 084E                              l9860 081E  
                            l9852 0816                              l9844 080E  
                            l9836 0806                              l9828 07FE  
                            l9782 2660                              STR_1 FF8D  
                            l9776 2636                              l9768 25DC  
                            l9960 0882                              l9952 087A  
                            l9944 0872                              l9936 086A  
                            l9928 0862                              l9880 0832  
                            l9872 082A                              l9864 0822  
                            l9856 081A                              l9848 0812  
                            STR_2 FFFC                              STR_3 FFA3  
                            STR_4 FFDD                              STR_5 FFF4  
                            l9980 0896                              l9972 088E  
                            l9964 0886                              l9956 087E  
                            l9948 0876                              l9892 083E  
                            l9884 0836                              l9876 082E  
                            l9868 0826                              l9796 07DE  
                            STR_6 FFC2                              STR_7 FFD0  
                            STR_8 FFE9                              STR_9 FFB3  
                            l9992 08A2                              l9984 089A  
                            l9976 0892                              l9968 088A  
                            l9896 0842                              l9888 083A  
                            l9996 08A6                              l9988 089E  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 2D70                              u7100 40F2  
                            u7105 40EC                              u6414 3918  
                            u6430 3E18                              u7038 1FB2  
                            u6415 3912                              u6424 394A  
                            u6425 3944                              _PIR1 000F9E  
                            u6370 2F76                              _PIR2 000FA1  
                            u6435 3E12                              _PIR3 000FA4  
                            u8108 0F60                              u8109 0F74  
                            u6390 2FDC               __end_of_GetPortTRIS 2C24  
                            u6640 3D42                              u8128 0F88  
                            u6377 2F6C                              u6705 45E4  
                            u8129 0F9C                              u6810 3356  
                            u6706 45E8                              u6714 3176  
                            u6650 38C6                              u8218 102C  
                            u8058 0F06                              u6395 2FD6  
                            u6715 3170                              u8219 1040  
                            u8059 0F1A                              u6660 38F0  
                            u8148 0FAA                              u7605 0720  
                            u6645 3D3C                              u8149 0FBE  
                            u8238 1058                              u8078 0F28  
                            u7295 1FEE                              u7535 044C  
                            u8239 106C                              u8079 0F3C  
                            u9048 4174                              u7545 0464  
                            u8258 107A                              u8178 0FE0  
                            u7555 047C                              u6675 45CE  
                            u8259 108E                              u8179 0FF4  
                            u7900 1D12                              u6676 45D2  
                            u7565 049E                              u6685 45B8  
                            u6854 29E2                              u6686 45BC  
                            u8198 100A                              u6855 29DC  
                            u7575 061E                              u6695 45A2  
                            u8199 101E                              u6864 2A14  
                            u6696 45A6                              u6865 2A0E  
                            u6785 460E                              u7585 069C  
                            u6786 4610                              u7498 3240  
                            u7595 06DE                              u7499 3254  
                            u7870 2164                              u7880 2178  
                            u7890 21B8                              _SPI1 01AA  
                            u7788 24D4                              u6988 1E76  
                            _SPI2 01B5                              u6989 1E8A  
                            _TMR0 000FD6                              _gISR 0068  
              Event_DIPSwitch@Bar 00DE                     ??_Byte_GetBit 00C7  
              SPI_MaxSpeed@pInput 00D3                     ?_Byte_SetByte 00C4  
                   ?_Byte_SetPair 00CF                   __end_of_SPI_DCS 41F6  
                            _main 4304                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00CF                              _itos 233E  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 00C4  
                            btemp 0049                              _zero 0046  
                   ??_Byte_SetBit 00C8                      ?_HMI_SetLeft 0001  
              __size_of_LCD_Reset 0050                      ?_HMI_SetDown 0001  
                            prodh 000FF4                              prodl 000FF3  
                            start 148A                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                   ?_SPI_DisableISR 00C4  
             HMI_SetButton@pValue 00CA                     Console_Init@x 00C6  
                   Console_Init@y 00C7                    ?i2_Timer0_Stop 0001  
              __size_of_HMI_SetUp 0016                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FF67  
            Set_Rotation@rotation 00CA            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 3B2E                  __end_of_LCD_Init 1E64  
                 getMode@dipState 00EC                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 3A24  
                   ??_Button_Init 00F8           GetPortProperties@pInput 00C6  
                   ??_Button_Poll 00E2                             l10000 08AA  
                           l10020 08BE                             l10012 08B6  
                           l10004 08AE                             l10102 39AA  
                           l10040 08D2                             l10032 08CA  
                           l10024 08C2                             l10016 08BA  
                           l10008 08B2                             l10050 08DA  
                           l10210 2960                  __end_of_HMI_Init 1508  
                           l10220 3DD2                             l10044 08D6  
                           l10036 08CE                             l10028 08C6  
                           l10204 2936                             l10124 237C  
                           l10132 23CC                             l11012 327C  
                           l11004 3264                             l10300 2772  
                           l10214 3DA2                             l10206 2946  
                           l11022 3294                             l10142 308A  
                           l10150 30FC                             l10310 27A2  
                           l10216 3DBA                             l11120 3C0E  
                           l11200 2B84                             l10136 23E8  
                           l11016 3288                             l11008 3270  
                           l12000 3BA6                             l11050 001A  
                           l11114 3BD6                             l10074 33DE  
                           l10058 3706                             l10066 373A  
                           l10138 23FC                             l10162 31B8  
                           l10306 2790                             l10322 27E0  
                           l11052 002A                             l11044 0002  
                           l11116 3BF2                             l11140 2C62  
                           l11132 2C46                             l11124 2C2A  
                           l11220 2BCA                             l11212 2BAE  
                           l11204 2B92                             l10076 33EA  
                           l10500 3ACE                             l10180 3216  
                           l10172 31D2                             l10148 30FA  
                           l10252 38F8                             l10244 38CA  
                           l10308 279C                             l10420 26DC  
                           l11062 00EC                             l11054 003E  
                           l11046 000C                             l10342 3780  
                           l10334 375A                             l10086 3420  
                           l10078 33F0                             l10094 3974  
                           l10510 3E9C                             l10406 3CA0  
                           l10166 31C2                             l10326 27F4  
                           l10318 27D2                             l11080 0276  
                           l11072 01A0                             l10352 37A6  
                           l11152 2C8C                             l11144 2C70  
                           l11136 2C54                             l11128 2C38  
                           l11224 2BD8                             l11216 2BBC  
                           l11208 2BA0                             l11240 0CDC  
                           l11320 129A                             l11312 115C  
                           l11304 1132                             l10096 3980  
                           l10408 3CB8                             l10168 31C8  
                           l10184 321C                             l10416 26D0  
                           l10600 1A0A                             l11400 2F06  
                           l11082 02C4                             l11074 01B2  
                           l11170 2CEC                             l11162 2CD0  
                           l11234 2BF4                             l11322 12C8  
                           l10098 3986                             l10514 3EAC  
                           l11402 2F18                             l11076 01DA  
                           l11148 2C7E                             l11228 2BE6  
                           l11244 0D24                             l11308 1152  
                           l10196 291A                             l10188 28C6  
                           l10524 415E                             l10604 1A10  
                           l10374 299A                             l10366 33BC  
                           l10710 283C                             l11078 0228  
                           l11086 0312                             l11502 3B28  
                           l11510 39E6                             l11190 2D32  
                           l11182 2D16                             l11174 2CFA  
                           l11166 2CDE                             l11158 2C9A  
                           l11238 0CBA                             l11254 0DAE  
                           l11334 12F0                             l10534 412E  
                           l10294 275C                             l11406 2F2A  
                           l11432 2468                             l10720 2896  
                           l10712 2842                             l11096 03A6  
                           l11088 0330                             l11360 3EF2  
                           l11352 3ECA                             l11248 0D6C  
                           l11256 0DCA                             l11328 12D8  
                           l10544 1ECC                             l10616 1AB2  
                           l10608 1A16                             l10378 29A6  
                           l11098 03B8                             l11514 3A04  
                           l11186 2D24                             l11178 2D08  
                           l11282 0754                             l10482 4022  
                           l10546 1EE2                             l10740 15B2  
                           l10732 1520                             l10708 282C  
                           l11460 3028                             l11612 1D82  
                           l11372 45FC                             l11516 3A14  
                           l11508 39C8                             l11196 2D40  
                           l11284 0774                             l11292 07B8  
                           l10820 3D96                             l11532 1942  
                           l10812 2DF4                             l10396 3C82  
                           l10628 1B42                             l10734 1546  
                           l11454 3012                             l11622 1E26  
                           l11606 1D14                             l11534 195A  
                           l11542 19A2                             l10494 3AB4  
                           l11640 32DC                             l10576 3892  
                           l10832 0B1A                             l10752 168A  
                           l10760 37C6                             l11472 3054  
                           l11480 306A                             l11616 1DEE  
                           l10904 3B68                             l11288 0798  
                           l11536 1972                             l11544 19D2  
                           l11528 1938                             l10920 2526  
                           l10808 2DCE                             l10592 19FE  
                           l10584 19F2                             l11650 333E  
                           l11634 32CC                             l10666 3A78  
                           l10674 3E5A                             l10826 0A64  
                           l10842 0BF2                             l10746 161E  
                           l10754 16A6                             l10762 37D8  
                           l11466 303E                             l11618 1E18  
                           l11722 3F42                             l11538 198A  
                           l10930 255E                             l10922 252C  
                           l10498 3AC6                             l11644 32E6  
                           l10836 0B86                             l10828 0AAE  
                           l10844 0C0E                             l11492 3B0C  
                           l11732 3F70                             l11572 21C6  
                           l11548 19D8                             l10940 25AC  
                           l10916 251C                             l10596 1A04  
                           l10588 19F8                             l11396 2EE2  
                           l11638 32D6                             l11662 14DA  
                           l11574 21E2                             l11566 2186  
                           l11590 222E                             l10926 2536  
                           l10782 3500                             l10950 16EA  
                           l11398 2EF4                             l10768 3804  
                           l11488 3AFE                             l11568 21A4  
                           l11584 2224                             l12616 4188  
                           l10936 25A0                             l10792 351C  
                           l10952 16F2                             l10960 1714  
                           l11760 0F80                             l10858 2036  
                           l10866 2052                             l10778 34F2  
                           l10962 1748                             l10946 16D6  
                           l10892 41E8                             l10868 209C  
                           l10972 1778                             l10956 170A  
                           l11772 1002                             l11756 0F58  
                           l11748 0EFE                             l10886 435E  
                           l10990 17CE                             l10974 177E  
                           l12646 4308                             l10896 3B30  
                           l10992 17D4                             l11784 109E  
                           l11768 0FD8                             l10898 3B42  
                           l10986 17BA                             l11778 1050  
                           l10996 182C                             l10998 1838  
                           l11798 10F4                             l11990 3B8E  
                           l11992 3B94                             l11994 3B9A  
                           l11996 3BA0                  __end_of_HMI_Poll 367C  
                           _I2C1T 0038                             _I2C2T 00A6  
                           ?_main 0001                   __end_of___awdiv 27FE  
                           ?_itos 00D0                             STR_10 FF75  
                           STR_11 FF75                             STR_12 FF75  
                 _Event_DIPSwitch 4226                   __end_of___lldiv 28BA  
         __size_of_HMI_LeftSwitch 0018                   ___awdiv@divisor 00C6  
                           _INDEX 0031                   __end_of___lwdiv 3438  
                           _MASKS FD77                   __end_of___lwmod 39C2  
                 ___awdiv@counter 00C8                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 00DA                   __end_of_getMode 32BE  
                  __CFG_FCMEN$OFF 000000                             _PortA 01E8  
                           _PortB 01DE                             _PortC 0092  
                           _PortD 0088                             _PortE 007E  
                           _PortF 009C                             _PortG 01D4  
         __end_of_Port_SetPinType 16C8                   _ADC_Initialised 007C  
                  ??_Byte_GetPair 00D0                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00D9                   __end_of_dpowers FD77  
                  ??_Byte_GetZone 00C9                    Button_Poll@Pin 00E7  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 2740  
                __end_of_MXK_Init 1CF2              i2Byte_GetPair@pInput 000A  
                           _putch 4612                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 37C4                   __end_of_setMode 3BD0  
           __end_ofi2_MXK_Release 46B0                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 3758  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00C7  
                  ??_Byte_SetPair 00D3                    ??_Byte_SetQuad 00D3  
                           plusw2 000FDB                    ??_Byte_SetZone 00CA  
                   ?_HMI_SetRight 0001                             status 000FD8  
                 _Configure_GPIOs 367C              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 4402  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001       __size_of_Port_CheckPairType 006A  
             __size_of_HMI_SetBar 000A                   __initialization 2E14  
             __end_of_Byte_GetBit 4104                      __end_of_main 432C  
                    __end_of_itos 2416              HMI_SetButton@reindex 00C6  
                    SPI_Send9@dat 0076               __end_of_Byte_SetBit 3960  
                __end_of_InitList FD4D       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 4612       __size_of_Port_CheckPortType 0048  
                          ??_main 00F9                            ??_itos 00D4  
         _Console_MakeField$10974 00D2                     __activetblptr 000003  
               Port_SetPin@pInput 00D3                 __end_of_LCD_Reset 3C70  
               Port_SetPin@pValue 00D6                         ??_LED_Set 00D9  
               _MXK_InitDIPSwitch 445C                 GetPortPORT@pInput 00C6  
          Port_CheckPairType@Pin1 00EE            Port_CheckPairType@Pin2 00EF  
               __end_of_LCD_Write 439E                       _GetPortPORT 2CCA  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 2B7E  
                 ??_LCD_DrawField 00E0        __end_of_PortProperty_Valid 33C0  
                __end_of_Port_Set 07D8                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0064               __end_of_Button_Init 24EA  
             __end_of_Button_Poll 1FCA                 Word_GetPair@pPair 00D2  
         LCD_FillRectangle@pPoint 00CF                 __end_of_HMI_SetUp 45A8  
              ?_MXK_InitDIPSwitch 0001                     _HMI_SetButton 311A  
                       ??_SPI_DCS 00C6                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 42DA  
          Port_SetQuadType@Output 00F7                            _ANCON0 000FC1  
                ___awdiv@dividend 00C4                    _continuousMode 0EDC  
                          ?_putch 0001                  ??_Console_Render 00E7  
                   ToSegment@pCHR 00C4             _Console_SetForecolour 4676  
                _Console_FormFeed 31AA            Port_SetQuadType@pInput 0203  
                  __CFG_WDTEN$OFF 000000                            i2l1599 144E  
                          i2l7334 347E                            i2l8064 3EF8  
                          i2l8072 3F24                            i2l8066 3F08  
                          i2l7338 3484                            i2l8058 4214  
                          i2l8270 2B3C                            i2l8262 2AEC  
                  ??_HMI_SetRight 00C4                            i2l8266 2B12  
                          i2l8276 2B62                            i2l8612 22DC  
                          i2l8294 40CC                            i2l8286 40AC  
                          i2l8614 22F0                            i2l8606 22A4  
                          i2l8630 232C                            i2l8608 22BA  
                          i2l8624 2322            __end_of_LCD_Word_Write 4420  
                  _Timer0_Restart 464A               ??_MXK_InitDIPSwitch 00F8  
                  i2_MXK_SwitchTo 409A                   Byte_GetBit@pBit 00C6  
    Console_SetForecolour@pColour 00C4                        _Reset_High 443E  
              Console_Render@temp 00E9                    ??_HMI_UpSwitch 00CA  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00DB  
                __end_of_delay_ms 382E                      LED_Init@pLED 00F1  
                __end_of_delay_us 3B80                     ??_Timer2_Init 00D5  
                   ??_Timer0_Stop 00C4                        _Timer0_ISR 4254  
        __size_of_Console_NewLine 0092                 Timer2_Init@DIVIDE 00DE  
                  __CFG_XINST$OFF 000000          __size_of_HMI_InitButtons 0004  
     __size_of_Event_HMI_UpButton 0030                        _Motor_Step 211C  
            _Event_HMI_LeftButton 3A7E           __end_of_Event_DIPSwitch 4254  
  __size_of_Event_HMI_RightButton 0044                            ___wmul 4064  
                 ??_HMI_DIPSwitch 00CA                         ??___awdiv 00C8  
                  __CFG_STVREN$ON 000000                            _change 00FF  
   __end_of_Event_HMI_RightButton 3EB4                            _lMotor 002A  
                       ??___lldiv 00CC                            _lQueue 0025  
                      _TestButton 01CA              _Event_HMI_DownButton 4104  
                       ??___lwdiv 00C8                __size_of_ToSegment 0284  
                       ??___lwmod 00CF          __end_of_Port_SetQuadType 0CB2  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002C  
            __end_of_Console_Init 3344                 GetPortTRIS@pInput 00C6  
              __size_of_Reset_Low 001E                            clear_0 2E7C  
                          clear_1 2E8E                            clear_2 2E9A  
                          clear_3 2EA6                  ___awdiv@quotient 00CA  
                      Port_Init@i 01FF                 __end_of_MXK_Queue 463C  
      __end_ofHMI_SetButton@F7211 FD84                         ??_getMode 00EA  
                          _printf 16C8              __size_of_displayMode 009E  
            __size_of_displayText 0028         __end_of_MXK_InitDIPSwitch 447A  
                  HMI_SetButton@v 00CB            HMI_SetSegments@pString 00C5  
                     _Console_Tab 267E               LCD_Word_Write@value 00C9  
                    __pdataCOMRAM 003F                __size_of_Port_Init 0192  
                   ??_Port_GetPin 00C7          Port_CheckPortType@Output 00F7  
                __end_of_nullMode 4064                   ??i2_Port_SetPin 0014  
                       ??_setMode 0200                      __mediumconst FC9A  
     __end_ofTimer2_Init@PRESCALE FD87          Port_CheckPortType@pDrive 0205  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0203  
                   ??_Port_SetPin 00D7                         ??_reverse 00C8  
          __end_of_continuousMode 1102                  __end_of_stepMode 1406  
           Console_MakeField@Fill 012A                  ?_Port_SetPinType 00EA  
                          putch@c 00D8                    ?_HMI_SetNumber 00DA  
                  i2_Word_GetPair 41F6           __end_of_Configure_GPIOs 36EC  
                ??_MXK_TestButton 00CA            __end_of_Timer0_Restart 4656  
                   Set_Rotation@m 00C9           continuousMode@direction 00F4  
                    ?_MXK_Release 0001      __size_of_Event_HMI_DIPSwitch 002C  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 40D0  
                    i2delay_us@us 0001         Event_HMI_DIPSwitch@pState 00DD  
                 ?_LCD_Word_Write 00C9                        __accesstop 0060  
         __end_of__initialization 2EAC                         ?_LCD_Fill 00CD  
                       ?_LCD_Init 0001                     SPI_Init@pMode 00F6  
                     _Byte_GetBit 40D0                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 4662                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 00CC                         ?_HMI_Poll 0001  
                   ___rparam_used 000001                continuousMode@mode 00F2  
                     _Byte_SetBit 38FC                     __end_of_MASKS FD80  
                  _PortA_Property FF73                         LCD_Fill@i 00CF  
                       LCD_Fill@j 00D0                         LCD_Init@i 0202  
            __size_of_HMI_SetLeft 0016              __size_of_HMI_SetDown 0016  
           ?_Event_HMI_LeftButton 0001                    __pcstackCOMRAM 0001  
                  _PortB_Property FF71               __size_ofi2_delay_us 0040  
                    __pidataBANK0 4690                      __pidataBANK1 4680  
           ?_Event_HMI_DownButton 0001               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 44B6                   Console_Render@x 00EE  
                 Console_Render@y 00EF               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FD4D  
            __end_of_Byte_GetZone 2FF0       Event_HMI_RightButton@pState 00DD  
                  _PortC_Property FF6F                     __end_of_putch 4620  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 211C  
             __end_of_Timer0_Stop 46A4                         ?_SPI_Init 00F1  
                       ?_SPI_Send 00C4                       _Button_Init 2416  
               Port_SetType@pType 0208                       _Button_Poll 1E64  
            __end_of_Byte_SetByte 462E              __end_of_Byte_SetPair 43C0  
                  _HMI_LeftSwitch 4562                    _PortD_Property FF6D  
            __end_of_Byte_SetQuad 43E2                      ??_LED_Toggle 00DC  
                    ??_HMI_GetBar 00C4              __end_of_Byte_SetZone 2A2A  
                  _HMI_DownSwitch 451A                     SPI_Send@pData 00C6  
           __end_of_MXK_DIPSwitch 4502                      ??_HMI_SetBar 00C4  
                  _PortE_Property FF6B          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 4226                   ?_continuousMode 0001  
                  _PortF_Property FF69           Port_CheckQuadType@Pair1 0200  
         Port_CheckQuadType@Pair2 0201          MXK_BlockSwitchTo@pModule 00CB  
          ?_Console_SetForecolour 00C4                 _Console_Backspace 3C70  
                 ?_Timer0_Restart 0001                           ??_putch 00D8  
        __size_of_HMI_RightSwitch 0018               _Console_ClearCursor 3FB2  
               __end_of_ToSegment 0A5C                    _PortG_Property FF67  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
             __end_of_Port_GetPin 3E2A           Port_CheckQuadType@pQuad 00F5  
                 reverse@iterator 00C9                  ??_SPI_DisableISR 00C6  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 443E         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00CF  
                      ??_LCD_Init 0200               __end_of_Port_SetPin 267E  
          __end_of_PortA_Property FF75                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00C4                        ??_LED_Init 00F1  
              Byte_SetByte@pValue 00C6                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                        ??_HMI_Init 00F9  
                      ??_HMI_Poll 00E8                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00F1            __end_of_PortB_Property FF73  
               __end_of_Port_Init 19EC                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 00EC                __end_of_LED_Toggle 3DE4  
              __end_of_HMI_GetBar 469E          LCD_FillRectangle@pColour 00CD  
             ??_Console_Backspace 00C6                 Set_Addr_Window@xe 00CA  
               Set_Addr_Window@ye 00CB                 Set_Addr_Window@xs 00CC  
               Set_Addr_Window@ys 00C9                Byte_SetPair@pInput 00CF  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00D2  
              __end_of_HMI_SetBar 4676            __end_of_PortC_Property FF71  
              Word_GetPair@pInput 00D0                    ??_Set_Rotation 00C9  
                       ?_Port_Set 00D3                           ?___wmul 00C4  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 00C9  
    __size_of_Console_ResetCursor 001A              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 457A            __end_of_PortD_Property FF6F  
                         _ADC_AN0 00B7                           _ADC_AN1 00B2  
                         _ADC_AN2 00AD                           _ADC_AN3 01F2  
      Event_HMI_DownButton@pState 00DD                        ??_MXK_Init 00F9  
               Port_GetPin@pInput 00C4                 _Console_MakeField 24EA  
               ??_Console_NewLine 00C4            __end_of_HMI_DownSwitch 4532  
                      ??_SPI_Init 00F7            Event_TestButton@pState 00DD  
                     setMode@mode 0202                        ??_SPI_Send 00C7  
            __end_of_HMI_SetRight 45BE                           ?_printf 00D9  
               ??_HMI_InitButtons 00C4        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FF6D               Console_Render@F6956 01F7  
              ?_Console_MakeField 00C9                           _COUNTER 0028  
                 ??_HMI_SetButton 00C4              __end_of_HMI_UpSwitch 454A  
                         _LED_Set 3BD0           _Console_IncrementCursor 3898  
          __end_of_PortF_Property FF6B                       _gBackcolour 0074  
                 ??_HMI_SetNumber 00DC                         _I2C1_Done 0127  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0124  
                       _I2C1_More 0121                         _I2C2_More 011E  
                       ?_delay_ms 00C4         __end_of_Console_Backspace 3CBE  
                       ?_delay_us 00C4        __end_of_MXK_InitTestButton 4498  
                         _SSP1ADD 000FC8                        _displaySID 43E2  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
          __end_of_PortG_Property FF69               ??_Console_MakeField 00CB  
                         _SPI_DCS 41C6              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001              i2Byte_GetZone@Offset 0008  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
               Event_TestButton@j 0078                        ??_Mode_Set 00C4  
                  ??_Timer2_Clear 00C4                           _Font5x7 FD87  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
            SPI_DisableISR@pInput 00C4                     ?_Port_GetQuad 00C4  
                 Byte_SetBit@pBit 00C6              Port_TogglePin@pInput 00D8  
           __end_ofi2_Byte_SetBit 3D0A            ??_Event_HMI_LeftButton 00DD  
                         __Hparam 0000                 Port_GetQuad@pQuad 00C6  
                     _Timer2_Init 1FCA                           __Lparam 0000  
                     _Timer0_Stop 469E             __size_of_Console_Init 0086  
                         OutSeg@a 0033   __end_ofPortProperty_Valid@F6830 FD6D  
          ??_Event_HMI_DownButton 00DD                     LCD_Write@mode 00C7  
                       ?_nullMode 0001                        ??_Port_Set 00D6  
       __end_of_Console_MakeField 25BA                 _Console_PrintChar 19EC  
                   ?_Port_SetType 0206                           _gCursor 003F  
                         ___awdiv 2740             ??_Console_ClearCursor 00C4  
                         _lBuffer 0216                           ___lldiv 27FE  
                 __size_of___wmul 0036                         ?_stepMode 0001  
                         ___lwdiv 33C0                           ___lwmod 3960  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 3234  
              ?_Console_PrintChar 0001                           __pcinit 2E14  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                      _initialise 42AE                           _getMode 3234  
                         __ptext0 4304                           __ptext1 3B80  
                         __ptext2 1404                           __ptext3 46B4  
                         __ptext4 402A                           __ptext5 0EDC  
                         __ptext6 432C                           __ptext7 43E2  
                         __ptext8 2EB6                           __ptext9 16C8  
                 __size_of_printf 0192                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FD6D  
                       _T2CONbits 000FCA                     LED_Set@pValue 00D8  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 00DD  
                    ?_GetPortPORT 00C4                      ?_GetPortTRIS 00C4  
             ??_Console_PrintChar 00D4                       _Port_GetPin 3DE4  
                         _setMode 3B80                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00C0               LCD_DrawRectangle@p4 00BC  
                    ??i2_delay_us 0003                        ??_delay_ms 00C6  
                      ??_delay_us 00C6                           _reverse 36EC  
                       _DIPSwitch 01C0               __size_of_Timer0_ISR 002E  
                     _Port_SetPin 25BA                    LCD_DrawField@i 00E6  
                       _LCD_Reset 3C20               __size_of_Motor_Step 0124  
                       _LCD_Write 437C              __size_of_MXK_Dequeue 0030  
                      delay_ms@ms 00C4              end_of_initialization 2EAC  
                      delay_us@us 00C4                 ??_HMI_SetSegments 00C7  
         Console_PrintChar@pInput 00D7                         _HMI_SetUp 4592  
                    _Console_Init 32BE                   HMI_SetUp@pValue 00C4  
            __size_of_MXK_Release 0016        __end_of_Port_CheckPairType 3898  
                         itos@Out 00D8                    ??_Port_GetQuad 00C7  
              _PortProperty_Valid 3344                Byte_SetQuad@pInput 00CF  
              SPI_MinSpeed@pInput 00D3                Byte_SetQuad@pValue 00D2  
           __size_of_Byte_GetPair 001E                   ___lldiv@divisor 00C8  
           __size_of_Byte_GetZone 009C                 ??_HMI_RightSwitch 00CA  
                 ___lldiv@counter 00D0         __end_of_Console_PrintChar 1B78  
                      ??_nullMode 00F2                    ??_Port_SetType 0209  
      __end_of_Port_CheckQuadType 3A7E                           printf@c 00E4  
                         printf@f 00D9                    Port_Init@pPort 020D  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 00CD                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00D3  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 3D9C  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 3F36  
                      ??_stepMode 00C4                Button_Init@pInitIO 020B  
             _Event_HMI_DIPSwitch 4282                 ?_Port_SetQuadType 0203  
                     _gForecolour 00FD         ??_Console_IncrementCursor 00C8  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 00F7                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 00CA             Console_Render@lCursor 00EA  
                       _MXK_Queue 462E                  __CFG_CPUDIV$OSC1 000000  
                Byte_GetZone@pMax 00C6        __size_of_Console_Backspace 004E  
                 _Set_Addr_Window 2A2A                    SPI_Init@pClock 00F1  
                ??_LCD_Word_Write 00CB                       ?_displaySID 0001  
           __end_of_LCD_DrawField 2E14                    Port_Set@pInput 00D3  
                  SPI_Init@pInput 00F7              ??_PortProperty_Valid 00D7  
                  Port_Set@pValue 00D5                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 3088                        ?_LCD_Write 00C7  
                    _Byte_GetPair 4498                HMI_SetButton@F7211 FD80  
                    _Byte_GetZone 2F54                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 00E4                 LCD_DrawField@ymax 00E5  
            ?_Event_HMI_DIPSwitch 0001                    _Port_TogglePin 4196  
                      ?_HMI_SetUp 0001                  _Event_TestButton 3FEE  
            Port_SetPinType@Props 00EF               continuousMode@speed 00F6  
                    ?_Byte_GetBit 00C4           __size_ofi2_Byte_GetPair 001A  
                   ?_positionMode 0001                      _Byte_SetByte 4620  
                    _Byte_SetPair 439E                      _Byte_SetQuad 43C0  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 2974  
            Port_SetPinType@pType 00ED                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 00C4        __end_of_Event_HMI_UpButton 4166  
                   ?_SPI_MaxSpeed 00D3                 __size_of_LCD_Fill 0058  
               __size_of_LCD_Init 0172                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 00D3             __end_ofi2_Timer0_Stop 46AA  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
               __size_of_HMI_Poll 0072                     ?i2_Motor_Step 0001  
           __size_of_HMI_SetRight 0016        __size_of_Console_MakeField 00D0  
                   ??_displayMode 00EE                     ??_displayText 00F2  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 409A  
           __end_of_HMI_DIPSwitch 451A                     __pidataCOMRAM 4662  
                     ?_initialise 0001             _Event_HMI_RightButton 3E70  
                    ?_Button_Init 0207                      ?_Button_Poll 00DF  
                       _Bus_State 0043                  ??_continuousMode 00F2  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
               __size_of_MXK_Init 017A              __end_of_Timer2_Clear 4690  
                  __end_of_printf 185A                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 00D0  
                ??_Timer0_Restart 00C4           ??_Console_SetForecolour 00C6  
              Port_SetType@Output 00F8               start_initialization 2E14  
                      ?_MXK_Queue 00C4          PortProperty_Valid@Errors 00D9  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 34AE  
              Port_SetType@pInput 0206                        HMI_Init@in 0214  
             HMI_SetNumber@pInput 00DA             __end_ofi2_Port_SetPin 2B7E  
          __end_of_Port_TogglePin 41C6                     ?_Word_SetPair 00D3  
               Byte_SetBit@pInput 00C4                    ??_MXK_SwitchTo 00CA  
               Byte_SetBit@pValue 00C7                ?_LCD_FillRectangle 00CD  
           ??_Event_HMI_DIPSwitch 00DD               _Console_ResetCursor 44B6  
     PortProperty_Valid@pPinDrive 00D5              MXK_BlockSwitchTo@CUR 00CA  
        PortProperty_Valid@pInput 00D3                     i2_MXK_Release 46AA  
                  ??_positionMode 00C4            LCD_FillRectangle@pSize 00D3  
                  SPI_Send@pInput 00C4                      _HMI_SetRight 45A8  
                    ??_Reset_High 00D8          __size_of_Port_SetPinType 01C0  
                   ??_HMI_SetLeft 00C4                     ??_HMI_SetDown 00C4  
                  ??_SPI_MaxSpeed 00D5             Port_SetQuadType@pQuad 0205  
                       _ToSegment 07D8               ??_LCD_FillRectangle 00D7  
           Port_SetQuadType@pType 0206                   _Console_NewLine 3088  
                  ??_SPI_MinSpeed 00D5                      _HMI_UpSwitch 4532  
                       _Reset_Low 4420                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 46B0                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 018C                         _gCharSize 00F9  
                Timer2_Init@INDEX 002F                         OutSeg@cur 0035  
                  ??i2_Motor_Step 0015           __size_of_Console_Render 020C  
                    ??_Motor_Step 00D8                Byte_SetZone@Offset 00CD  
                        ??___wmul 00C8               __size_of_displaySID 0020  
            ?_Console_ResetCursor 0001                         _Port_Init 185A  
                     __pdataBANK0 00F9                       __pdataBANK1 01F7  
               __size_of_Port_Set 03BA                Byte_SetZone@pChunk 00C7  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 00C4  
              Byte_SetZone@pValue 00C9                     Mode_Set@pMode 00C4  
                        ??_printf 00DD           __end_of_Set_Addr_Window 2AD4  
        Port_CheckQuadType@Output 0202                         _gLineSize 01FB  
        Port_CheckQuadType@pDrive 00F6                    ??_Word_GetPair 00D3  
        Port_CheckQuadType@pInput 00F3               __end_of_displayMode 2F54  
            __end_of_Port_GetQuad 3D54         __end_of_LCD_FillRectangle 3522  
                     __pbssBIGRAM 0216               __end_of_displayText 4354  
                        ?_LED_Set 00D8                       __pbssCOMRAM 0025  
              __end_of_Reset_High 445C                     __pcstackBANK0 00C4  
                   __pcstackBANK1 01FF                     __pcstackBANK2 0200  
                      itos@Length 00D6                    ??_Word_SetPair 00D7  
              __end_of_Timer0_ISR 4282              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 00DD              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 0EDC                          ?_SPI_DCS 00C4  
                 ?_Port_TogglePin 00D8                       ??_LCD_Write 00C8  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Step 2240  
           Timer2_Init@pFrequency 00D1                    ?i2_MXK_Release 0001  
                     ??_HMI_SetUp 00C4               __size_of_initialise 002C  
        Port_CheckPairType@Output 00F0                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00ED          Port_CheckPairType@pInput 00EA  
                  reverse@tempVar 00C8                _MXK_InitTestButton 447A  
                      ?_Reset_Low 0001            __size_of_MXK_DIPSwitch 0018  
                    ?_Timer2_Init 00D1                  ??_HMI_LeftSwitch 00CA  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 00C4  
                   _lStepFunction 006B           __size_of_MXK_TestButton 0018  
               Byte_SetPair@pPair 00D1                  ??_HMI_DownSwitch 00CA  
                       __pintcode 1408                     __pmediumconst FC9A  
           ??_Console_ResetCursor 00C4                          ?___awdiv 00C4  
                       __ptext100 0000                         __ptext101 1FCA  
                       __ptext110 1508                         __ptext102 27FE  
                       __ptext111 38FC                         __ptext103 4688  
                       __ptext120 2F54                         __ptext112 0A5C  
                       __ptext104 4354                         __ptext121 43C0  
                       __ptext113 3E2A                         __ptext105 41C6  
                       __ptext130 41F6                         __ptext122 2974  
                       __ptext114 439E                         __ptext106 2416  
                       __ptext131 44D0                         __ptext123 32BE  
                       __ptext115 3A24                         __ptext107 445C  
                       __ptext132 3438                         __ptext116 382E  
                       __ptext108 46B0                         __ptext133 3CBE  
                       __ptext125 4254                         __ptext117 3344  
                       __ptext109 447A                         __ptext134 409A  
                       __ptext126 2240                         __ptext118 3F74  
                       __ptext135 3EF6                         __ptext127 46A4  
                       __ptext119 4498                         __ptext136 46AA  
                       __ptext128 4656                         __ptext137 463C  
                       __ptext129 2AD4                         __ptext138 0000  
                       _pShiftVal 006E               __end_of_HMI_SetLeft 45D4  
             __end_of_HMI_SetDown 45EA                          ?___lldiv 00C4  
                      ?_Port_Init 020B                          ?___lwdiv 00C4  
                        ?___lwmod 00CB            ?_Event_HMI_RightButton 0001  
             ?_MXK_InitTestButton 0001                 __size_of_nullMode 003A  
               ?_Console_FormFeed 0001                 _GetPortProperties 2C24  
               __size_of_stepMode 0002                          ?_getMode 00E8  
     __end_ofTimer0_Init@PRESCALE FD5D                ??_Console_FormFeed 00C4  
                 _HMI_SetSegments 28BA                ?_GetPortProperties 00C4  
              HMI_SetRight@pValue 00C4          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                     ??i2_MXK_Queue 0004  
                     ??_MXK_Queue 00C7                      ?_Port_GetPin 00C4  
                        ?_setMode 0001                 HMI_SetLeft@pValue 00C4  
           __end_of_HMI_SetButton 31AA              __size_of_Console_Tab 00C2  
                        ?_reverse 00C4                      ?_Port_SetPin 00D3  
           __end_of_HMI_SetNumber 4304                  ___lwdiv@quotient 00C9  
                 _HMI_RightSwitch 454A                 HMI_SetDown@pValue 00C4  
             ??_GetPortProperties 00C6           __end_of_Console_NewLine 311A  
            ??_MXK_InitTestButton 00F1                Byte_GetPair@pInput 00CD  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 46B4  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 44D0                          _LCD_Fill 3AD6  
                        _LCD_Init 1CF2                    ___wmul@product 00C8  
                        _HMIBoard 0170                    i2_Byte_GetZone 3438  
                        _LED_Init 39C2                         delay_ms@u 00C6  
              Button_Poll@pButton 00DF                         delay_us@u 00C6  
                        _HMI_Init 130E                          _HMI_Poll 360A  
              MXK_Queue@pCallback 00C4                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 3FEE  
        __size_of_Configure_GPIOs 0070              __size_of_Byte_GetBit 0034  
               Byte_SetQuad@pQuad 00D1                          i2u400_40 345A  
                        i2u400_47 3450                          i2u402_40 34A2  
                        i2u402_45 349E                          _PIR1bits 000F9E  
                        _PIR3bits 000FA4                          i2u462_44 3CD2  
                        i2u462_45 3CCE                          i2u463_44 3CF8  
                        i2u463_45 3CF4                          i2u537_40 2282  
                        i2u538_40 2296                          i2u539_40 22CE  
                        i2u906_48 426C              __size_of_Byte_SetBit 0064  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000     __size_of_Event_HMI_LeftButton 0058  
                HMI_SetBar@pValue 00C4                 Button_Init@pInput 0207  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 00EE                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 0082     __size_of_Event_HMI_DownButton 0032  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 2CCA  
                        _SSP2STAT 000F6D                       _displayMode 2EB6  
                    _Set_Rotation 2FF0             __size_of_Timer2_Clear 0008  
                     _displayText 432C              __end_of_MXK_SwitchTo 3EF6  
              _Port_CheckPairType 382E                          _MXK_Init 1B78  
                 MXK_SwitchTo@CUR 00CA                          _SPI_Init 0000  
        __end_of_Event_TestButton 402A                          _SPI_Send 3758  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 00C9                 ___wmul@multiplier 00C4  
            __end_of_positionMode 46B6                 Byte_GetBit@Output 00C8  
                      printf@flag 00DE              Timer2_Init@pCPUClock 00DA  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 3596                        printf@prec 00DF  
               Byte_GetBit@pInput 00C4               Port_SetPinType@pPin 00EC  
            __size_of_Button_Poll 0166                _Port_CheckQuadType 3A24  
                   _MXK_DIPSwitch 44EA               ?_Port_CheckPairType 00EA  
            __end_of_SPI_MinSpeed 360A                     ??_MXK_Dequeue 00DA  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 3D54             Button_Poll@pIncrement 00E1  
                    ??_displaySID 00E5           PortProperty_Valid@F6830 FD5D  
            __end_ofi2_Motor_Step 233E                   ??i2_MXK_Release 0001  
                       copy_data0 2E28                         copy_data1 2E48  
                       copy_data2 2E68                     ??_MXK_Release 00C4  
          __end_ofi2_Byte_GetPair 44EA         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 00F3  
          __end_ofi2_Byte_GetZone 34AE               __end_ofi2_MXK_Queue 464A  
             ?_Port_CheckPortType 0203                   itos@destination 00D2  
                        _InitList FC9B              _Motor_Step$intlevel0 2122  
                        _Mode_Set 4600                Port_GetQuad@Output 00C9  
                     ??_ToSegment 00C4                      _ISR_Function 1408  
                     _HMI_SetLeft 45BE                       _HMI_SetDown 45D4  
              Port_GetQuad@pInput 00C4                      _Timer2_Clear 4688  
            __end_of_Word_GetPair 3FB2                          _lCBuffer 0100  
            ??_Port_CheckPairType 00EE                       ??_Reset_Low 00D8  
                        __Hrparam 0000                    _Console_Render 1102  
                        __Lrparam 0000                   Timer2_Init@RDIV 00D6  
      Event_HMI_LeftButton@pState 00DD                    LCD_Write@value 00C8  
                        _Port_Set 041E                      OutSeg@segset 0034  
                       rand@screw 0032              __end_of_Word_SetPair 3E70  
                     ??_Port_Init 020E           __end_of_HMI_SetSegments 2974  
            ??_Port_CheckQuadType 00F7                __end_of_displaySID 4402  
           __size_of_Port_GetQuad 004A                  __size_of___awdiv 00BE  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 3F36  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 00F7  
                __size_of___lwmod 0062                      ??_initialise 00F9  
                        _lBufferX 0037                          _lBufferY 0036  
             Timer2_Init@PRESCALE FD84                _Event_HMI_UpButton 4136  
                 LCD_Fill@pColour 00CD                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0072  
                __size_of_getMode 008A           __end_of_HMI_RightSwitch 4562  
          Byte_GetZone@pChunkSize 00C8                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 00C8             __size_of_Port_SetType 022A  
                   reverse@length 00C6                         itos@input 00D0  
           i2MXK_SwitchTo@pModule 0008                          _delay_ms 37C4  
                        _delay_us 3B2E                          _clearall 007D  
                 ___lwdiv@divisor 00C6    __size_of_Console_SetForecolour 000A  
             ?_Event_HMI_UpButton 0001                  __size_of_setMode 0050  
                 ___lwdiv@counter 00C8     __end_of_Console_SetForecolour 4680  
                 Port_GetPin@pPin 00C6                          __ptext10 4612  
                        __ptext11 19EC                          __ptext20 3234  
                        __ptext12 267E                          __ptext21 360A  
                        __ptext13 2740                          __ptext30 3D0A  
                        __ptext22 1E64                          __ptext14 3898  
                        __ptext31 4226                          __ptext23 44EA  
                        __ptext15 3088                          __ptext40 45A8  
                        __ptext32 4104                          __ptext24 4502  
                        __ptext16 31AA                          __ptext41 45BE  
                        __ptext33 4136                          __ptext25 451A  
                        __ptext17 44B6                          __ptext50 466C  
                        __ptext42 42DA                          __ptext34 3E70  
                        __ptext26 4532                          __ptext18 3C70  
                        __ptext51 4698                          __ptext43 233E  
                        __ptext35 3A7E                          __ptext27 454A  
                        __ptext19 3FB2                          __ptext60 1B78  
                        __ptext52 4676                          __ptext44 36EC  
                        __ptext36 4282                          __ptext28 4562  
                        __ptext61 185A                          __ptext53 1102  
                        __ptext45 3960                          __ptext37 3FEE  
                        __ptext29 457A                          __ptext70 3BD0  
                        __ptext62 0CB2                          __ptext54 34AE  
                        __ptext46 33C0                          __ptext38 311A  
                        __ptext71 4166                          __ptext63 3D54  
                        __ptext55 2D70                          __ptext47 28BA  
                        __ptext39 4592               ??_MXK_BlockSwitchTo 00CA  
                        __ptext80 1CF2                          __ptext72 211C  
                        __ptext64 041E                          __ptext56 4064  
                        __ptext48 07D8                          __ptext81 2FF0  
                        __ptext73 469E                          __ptext65 4620  
                        __ptext57 24EA                          __ptext49 45D4  
                        __ptext90 3C20                          __ptext82 3AD6  
                        __ptext74 464A                          __ptext66 2B7E  
                        __ptext58 40D0                          __ptext91 37C4  
                        __ptext83 2A2A                          __ptext75 3EB4  
                        __ptext67 2C24                          __ptext59 42AE  
                        __ptext92 4420                          __ptext84 4402  
                        __ptext76 45EA                          __ptext68 2CCA  
                        __ptext93 443E                          __ptext85 437C  
                        __ptext77 462E                          __ptext69 39C2  
                        __ptext94 3D9C                          __ptext86 3758  
                        __ptext78 3F36                          __ptext95 4196  
                        __ptext87 4600                          __ptext79 3B2E  
                        __ptext96 25BA                          __ptext88 367C  
                        __ptext97 3DE4                          __ptext89 3522  
                        __ptext98 130E                          __ptext99 3596  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 00DD  
                 ?i2_Byte_GetZone 0001                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 4196  
               HMI_SetSegments@in 00C8             Button_Init@pThreshold 0209  
                 displayMode@mode 00F0                     __size_of_main 0028  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 00CF  
          __end_of_Console_Render 130E                __end_of_initialise 42DA  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
                    _Port_GetQuad 3D0A               __end_of_MXK_Release 4600  
                  _MXK_TestButton 457A                     i2_Byte_SetBit 3CBE  
            ??_Event_HMI_UpButton 00DD               i2Word_GetPair@pPair 000F  
                        _nullMode 402A         __end_of_MXK_BlockSwitchTo 3F74  
        ?_Console_IncrementCursor 0001              __size_of_Timer2_Init 0152  
                        int$flags 0049              __size_of_Timer0_Stop 0006  
                    _Port_SetType 0CB2                      Port_Set@Type 00EA  
                        _stepMode 1404        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 00F9  
                       printf@val 00E2                      _SSP1STATbits 000FC7  
                  Timer0_Init@DIV 0064                    Timer0_Init@PRE 0030  
                    _SSP2STATbits 000F6D                        _LED_Toggle 3D9C  
                      _HMI_GetBar 4698              Button_Init@pGetState 020E  
          PortProperty_Valid@Pair 00E9                  ??_Port_TogglePin 00DB  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
     __end_of_Event_HMI_DIPSwitch 42AE            PortProperty_Valid@pPin 00D6  
                      _HMI_SetBar 466C                  Byte_SetZone@MASK 00CE  
                     i2_MXK_Queue 463C                    Timer2_Init@DIV 0060  
                  Timer2_Init@PRE 002E                  Byte_SetZone@pMax 00C6  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 0211                          itos@Data 00D4  
              LCD_FillRectangle@i 00D9                LCD_FillRectangle@j 00DA  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                    reverse@input 00C4            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 00CB                  ___lldiv@dividend 00C4  
          __end_of_MXK_TestButton 4592                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042           ??_Event_HMI_RightButton 00DD  
                  _SPI_DisableISR 4354                   Port_Init@pInput 020B  
                        printf@ap 00E0             __size_of_positionMode 0002  
        Event_HMI_UpButton@pState 00DD            __size_ofi2_Port_SetPin 00AA  
                ?_HMI_SetSegments 00C5           Console_MakeField@Column 00D0  
           __size_of_SPI_MaxSpeed 0074                     SPI_DCS@pInput 00C4  
           __size_of_SPI_MinSpeed 0074                   ??_MXK_DIPSwitch 00CA  
          Event_HMI_DIPSwitch@Bar 00DE             __size_ofi2_Motor_Step 00FE  
         Console_MakeField@pInput 00CF                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 00CC                     ??_GetPortPORT 00C6  
                 ___lwmod@divisor 00CD                     ??_GetPortTRIS 00C6  
              Word_SetPair@pInput 00D3                   ___lwmod@counter 00CF  
              Word_SetPair@pValue 00D6                       _MXK_Dequeue 4166  
                  LED_Toggle@pLED 00DC                     _LCD_DrawField 2D70  
                _Port_SetQuadType 0A5C           __size_of_continuousMode 0226  
                     _MXK_Release 45EA         __size_of_Console_FormFeed 008A  
                    _MXK_SwitchTo 3EB4             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 00CB                     ?_Console_Init 0001  
               Word_SetPair@pPair 00D5                   _Port_SetPinType 1508  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 00CC  
              Byte_GetZone@pChunk 00C7                      _positionMode 46B4  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 44D0  
              Byte_GetZone@pInput 00C4           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 38FC             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 437C                      _SPI_MaxSpeed 3522  
                    _SPI_MinSpeed 3596                Port_Set@TypeActual 00E8  
