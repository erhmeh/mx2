

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Aug 24 12:56:08 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1,inline
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1,inline
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1,inline
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1,inline
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	text147,global,reloc=2,class=CODE,delta=1
   170                           	psect	text148,global,reloc=2,class=CODE,delta=1
   171                           	psect	text149,global,reloc=2,class=CODE,delta=1
   172                           	psect	text150,global,reloc=2,class=CODE,delta=1,group=1
   173                           	psect	text151,global,reloc=2,class=CODE,delta=1
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	text153,global,reloc=2,class=CODE,delta=1
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1
   177                           	psect	text155,global,reloc=2,class=CODE,delta=1,inline
   178                           	psect	text156,global,reloc=2,class=CODE,delta=1
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	text158,global,reloc=2,class=CODE,delta=1
   181                           	psect	text159,global,reloc=2,class=CODE,delta=1,group=1
   182                           	psect	text160,global,reloc=2,class=CODE,delta=1,group=1
   183                           	psect	text161,global,reloc=2,class=CODE,delta=1,group=1
   184                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   185                           	psect	text163,global,reloc=2,class=CODE,delta=1
   186                           	psect	text164,global,reloc=2,class=CODE,delta=1
   187                           	psect	text165,global,reloc=2,class=CODE,delta=1
   188                           	psect	text166,global,reloc=2,class=CODE,delta=1
   189                           	psect	text167,global,reloc=2,class=CODE,delta=1
   190                           	psect	text168,global,reloc=2,class=CODE,delta=1
   191                           	psect	text169,global,reloc=2,class=CODE,delta=1
   192                           	psect	text170,global,reloc=2,class=CODE,delta=1,inline
   193                           	psect	text171,global,reloc=2,class=CODE,delta=1
   194                           	psect	text172,global,reloc=2,class=CODE,delta=1
   195                           	psect	text173,global,reloc=2,class=CODE,delta=1
   196                           	psect	text174,global,reloc=2,class=CODE,delta=1
   197                           	psect	text175,global,reloc=2,class=CODE,delta=1
   198                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   201                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   202  0000                     
   203                           ; Version 1.42
   204                           ; Generated 13/04/2017 GMT
   205                           ; 
   206                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   207                           ; All rights reserved.
   208                           ; 
   209                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   210                           ; 
   211                           ; Redistribution and use in source and binary forms, with or without modification, are
   212                           ; permitted provided that the following conditions are met:
   213                           ; 
   214                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   215                           ;        conditions and the following disclaimer.
   216                           ; 
   217                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   218                           ;        of conditions and the following disclaimer in the documentation and/or other
   219                           ;        materials provided with the distribution.
   220                           ; 
   221                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   222                           ;        software without specific prior written permission.
   223                           ; 
   224                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   225                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   226                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   227                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   228                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   229                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   230                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   231                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   232                           ; 
   233                           ; 
   234                           ; Code-generator required, PIC18F67J50 Definitions
   235                           ; 
   236                           ; SFR Addresses
   237  0000                     
   238                           	psect	idataCOMRAM
   239  017FA2                     __pidataCOMRAM:
   240                           	opt stack 0
   241                           
   242                           ;initializer for _gCursor
   243  017FA2  0006               	dw	6
   244  017FA4  0006               	dw	6
   245                           
   246                           ;initializer for _Bus_State
   247  017FA6  01                 	db	1
   248                           
   249                           ;initializer for _A
   250  017FA7  41                 	db	65
   251                           
   252                           ;initializer for _a
   253  017FA8  61                 	db	97
   254                           
   255                           ;initializer for _zero
   256  017FA9  30                 	db	48
   257                           
   258                           ;initializer for _l
   259  017FAA  80                 	db	128
   260                           
   261                           ;initializer for _w
   262  017FAB  80                 	db	128
   263                           
   264                           	psect	idataBANK0
   265  017FFE                     __pidataBANK0:
   266                           	opt stack 0
   267                           
   268                           ;initializer for _gForecolour
   269  017FFE  FFFF               	dw	65535
   270                           
   271                           ;initializer for _change
   272  018000  01                 	db	1
   273                           
   274                           	psect	idataBANK1
   275  017F36                     __pidataBANK1:
   276                           	opt stack 0
   277                           
   278                           ;initializer for Console_Render@F6956
   279  017F36  0006               	dw	6
   280  017F38  0006               	dw	6
   281                           
   282                           ;initializer for _gLineSize
   283  017F3A  0080               	dw	128
   284  017F3C  0007               	dw	7
   285                           
   286                           ;initializer for _gCharSize
   287  017F3E  0005               	dw	5
   288  017F40  0007               	dw	7
   289                           
   290                           ;initializer for _currentPos
   291  017F42  00C8               	dw	200
   292                           
   293                           ;initializer for _direction
   294  017F44  00C8               	dw	200
   295                           
   296                           	psect	mediumconst
   297  00FB5A                     __pmediumconst:
   298                           	opt stack 0
   299  00FB5A  00                 	db	0
   300  00FB5B                     _InitList:
   301                           	opt stack 0
   302  00FB5B  1100               	dw	4352
   303  00FB5D  0080               	dw	128
   304  00FB5F  012C               	dw	300
   305  00FB61  B100               	dw	45312
   306  00FB63  0002               	dw	2
   307  00FB65  0035               	dw	53
   308  00FB67  0036               	dw	54
   309  00FB69  B200               	dw	45568
   310  00FB6B  0002               	dw	2
   311  00FB6D  0035               	dw	53
   312  00FB6F  0036               	dw	54
   313  00FB71  B300               	dw	45824
   314  00FB73  0002               	dw	2
   315  00FB75  0035               	dw	53
   316  00FB77  0036               	dw	54
   317  00FB79  0002               	dw	2
   318  00FB7B  0035               	dw	53
   319  00FB7D  0036               	dw	54
   320  00FB7F  B400               	dw	46080
   321  00FB81  0000               	dw	0
   322  00FB83  C000               	dw	49152
   323  00FB85  00A2               	dw	162
   324  00FB87  0002               	dw	2
   325  00FB89  0084               	dw	132
   326  00FB8B  C100               	dw	49408
   327  00FB8D  00C5               	dw	197
   328  00FB8F  C200               	dw	49664
   329  00FB91  000D               	dw	13
   330  00FB93  0000               	dw	0
   331  00FB95  C300               	dw	49920
   332  00FB97  008D               	dw	141
   333  00FB99  002A               	dw	42
   334  00FB9B  C400               	dw	50176
   335  00FB9D  008D               	dw	141
   336  00FB9F  00EE               	dw	238
   337  00FBA1  C500               	dw	50432
   338  00FBA3  000A               	dw	10
   339  00FBA5  3600               	dw	13824
   340  00FBA7  00C8               	dw	200
   341  00FBA9  E000               	dw	57344
   342  00FBAB  0012               	dw	18
   343  00FBAD  001C               	dw	28
   344  00FBAF  0010               	dw	16
   345  00FBB1  0018               	dw	24
   346  00FBB3  0033               	dw	51
   347  00FBB5  002C               	dw	44
   348  00FBB7  0025               	dw	37
   349  00FBB9  0028               	dw	40
   350  00FBBB  0028               	dw	40
   351  00FBBD  0027               	dw	39
   352  00FBBF  002F               	dw	47
   353  00FBC1  003C               	dw	60
   354  00FBC3  0000               	dw	0
   355  00FBC5  0003               	dw	3
   356  00FBC7  0003               	dw	3
   357  00FBC9  0010               	dw	16
   358  00FBCB  0080               	dw	128
   359  00FBCD  0078               	dw	120
   360  00FBCF  E100               	dw	57600
   361  00FBD1  0012               	dw	18
   362  00FBD3  001C               	dw	28
   363  00FBD5  0010               	dw	16
   364  00FBD7  0018               	dw	24
   365  00FBD9  002D               	dw	45
   366  00FBDB  0028               	dw	40
   367  00FBDD  0023               	dw	35
   368  00FBDF  0028               	dw	40
   369  00FBE1  0028               	dw	40
   370  00FBE3  0026               	dw	38
   371  00FBE5  002F               	dw	47
   372  00FBE7  003B               	dw	59
   373  00FBE9  0000               	dw	0
   374  00FBEB  0003               	dw	3
   375  00FBED  0003               	dw	3
   376  00FBEF  0010               	dw	16
   377  00FBF1  3A00               	dw	14848
   378  00FBF3  0005               	dw	5
   379  00FBF5  2A00               	dw	10752
   380  00FBF7  0000               	dw	0
   381  00FBF9  0002               	dw	2
   382  00FBFB  0000               	dw	0
   383  00FBFD  0081               	dw	129
   384  00FBFF  2B00               	dw	11008
   385  00FC01  0000               	dw	0
   386  00FC03  0003               	dw	3
   387  00FC05  0000               	dw	0
   388  00FC07  00A2               	dw	162
   389  00FC09  2900               	dw	10496
   390  00FC0B  2C00               	dw	11264
   391  00FC0D                     __end_of_InitList:
   392                           	opt stack 0
   393  00FC0D                     __powers_:
   394                           	opt stack 0
   395  00FC0D  0000               	dw	0
   396  00FC0F  3F80               	dw	16256
   397  00FC11  0000               	dw	0
   398  00FC13  4120               	dw	16672
   399  00FC15  0000               	dw	0
   400  00FC17  42C8               	dw	17096
   401  00FC19  0000               	dw	0
   402  00FC1B  447A               	dw	17530
   403  00FC1D  4000               	dw	16384
   404  00FC1F  461C               	dw	17948
   405  00FC21  5000               	dw	20480
   406  00FC23  47C3               	dw	18371
   407  00FC25  2400               	dw	9216
   408  00FC27  4974               	dw	18804
   409  00FC29  9680               	dw	38528
   410  00FC2B  4B18               	dw	19224
   411  00FC2D  BC20               	dw	48160
   412  00FC2F  4CBE               	dw	19646
   413  00FC31  6B28               	dw	27432
   414  00FC33  4E6E               	dw	20078
   415  00FC35  02F9               	dw	761
   416  00FC37  5015               	dw	20501
   417  00FC39  78EC               	dw	30956
   418  00FC3B  60AD               	dw	24749
   419  00FC3D  F2CA               	dw	62154
   420  00FC3F  7149               	dw	29001
   421  00FC41                     __end_of__powers_:
   422                           	opt stack 0
   423  00FC41                     __npowers_:
   424                           	opt stack 0
   425  00FC41  0000               	dw	0
   426  00FC43  3F80               	dw	16256
   427  00FC45  CCCD               	dw	52429
   428  00FC47  3DCC               	dw	15820
   429  00FC49  D70A               	dw	55050
   430  00FC4B  3C23               	dw	15395
   431  00FC4D  126F               	dw	4719
   432  00FC4F  3A83               	dw	14979
   433  00FC51  B717               	dw	46871
   434  00FC53  38D1               	dw	14545
   435  00FC55  C5AC               	dw	50604
   436  00FC57  3727               	dw	14119
   437  00FC59  37BD               	dw	14269
   438  00FC5B  3586               	dw	13702
   439  00FC5D  BF95               	dw	49045
   440  00FC5F  33D6               	dw	13270
   441  00FC61  CC77               	dw	52343
   442  00FC63  322B               	dw	12843
   443  00FC65  705F               	dw	28767
   444  00FC67  3089               	dw	12425
   445  00FC69  E6FF               	dw	59135
   446  00FC6B  2EDB               	dw	11995
   447  00FC6D  E508               	dw	58632
   448  00FC6F  1E3C               	dw	7740
   449  00FC71  4260               	dw	16992
   450  00FC73  0DA2               	dw	3490
   451  00FC75                     __end_of__npowers_:
   452                           	opt stack 0
   453  00FC75                     _dpowers:
   454                           	opt stack 0
   455  00FC75  0001               	dw	1
   456  00FC77  0000               	dw	0
   457  00FC79  000A               	dw	10
   458  00FC7B  0000               	dw	0
   459  00FC7D  0064               	dw	100
   460  00FC7F  0000               	dw	0
   461  00FC81  03E8               	dw	1000
   462  00FC83  0000               	dw	0
   463  00FC85  2710               	dw	10000
   464  00FC87  0000               	dw	0
   465  00FC89  86A0               	dw	34464
   466  00FC8B  0001               	dw	1
   467  00FC8D  4240               	dw	16960
   468  00FC8F  000F               	dw	15
   469  00FC91  9680               	dw	38528
   470  00FC93  0098               	dw	152
   471  00FC95  E100               	dw	57600
   472  00FC97  05F5               	dw	1525
   473  00FC99  CA00               	dw	51712
   474  00FC9B  3B9A               	dw	15258
   475  00FC9D                     __end_of_dpowers:
   476                           	opt stack 0
   477  00FC9D                     Timer0_Init@PRESCALE:
   478                           	opt stack 0
   479  00FC9D  0002               	dw	2
   480  00FC9F  0004               	dw	4
   481  00FCA1  0008               	dw	8
   482  00FCA3  0010               	dw	16
   483  00FCA5  0020               	dw	32
   484  00FCA7  0040               	dw	64
   485  00FCA9  0080               	dw	128
   486  00FCAB  0100               	dw	256
   487  00FCAD                     __end_ofTimer0_Init@PRESCALE:
   488                           	opt stack 0
   489  00FCAD                     PortProperty_Valid@F6830:
   490                           	opt stack 0
   491  00FCAD  00                 	db	0
   492  00FCAE  01                 	db	1
   493  00FCAF  02                 	db	2
   494  00FCB0  00                 	db	0
   495  00FCB1  01                 	db	1
   496  00FCB2  00                 	db	0
   497  00FCB3  01                 	db	1
   498  00FCB4  00                 	db	0
   499  00FCB5  02                 	db	2
   500  00FCB6  02                 	db	2
   501  00FCB7  00                 	db	0
   502  00FCB8  00                 	db	0
   503  00FCB9  03                 	db	3
   504  00FCBA  03                 	db	3
   505  00FCBB  03                 	db	3
   506  00FCBC  00                 	db	0
   507  00FCBD                     __end_ofPortProperty_Valid@F6830:
   508                           	opt stack 0
   509  00FCBD                     _MASKS:
   510                           	opt stack 0
   511  00FCBD  00                 	db	0
   512  00FCBE  01                 	db	1
   513  00FCBF  03                 	db	3
   514  00FCC0  07                 	db	7
   515  00FCC1  0F                 	db	15
   516  00FCC2  1F                 	db	31
   517  00FCC3  3F                 	db	63
   518  00FCC4  7F                 	db	127
   519  00FCC5  FF                 	db	255
   520  00FCC6                     __end_of_MASKS:
   521                           	opt stack 0
   522  00FCC6                     HMI_SetButton@F7213:
   523                           	opt stack 0
   524  00FCC6  00                 	db	0
   525  00FCC7  02                 	db	2
   526  00FCC8  01                 	db	1
   527  00FCC9  03                 	db	3
   528  00FCCA                     __end_ofHMI_SetButton@F7213:
   529                           	opt stack 0
   530  00FCCA                     Timer2_Init@PRESCALE:
   531                           	opt stack 0
   532  00FCCA  01                 	db	1
   533  00FCCB  04                 	db	4
   534  00FCCC  10                 	db	16
   535  00FCCD                     __end_ofTimer2_Init@PRESCALE:
   536                           	opt stack 0
   537  00FCCD                     _Font5x7:
   538                           	opt stack 0
   539  00FCCD  00                 	db	0
   540  00FCCE  00                 	db	0
   541  00FCCF  00                 	db	0
   542  00FCD0  00                 	db	0
   543  00FCD1  00                 	db	0
   544  00FCD2  00                 	db	0
   545  00FCD3  00                 	db	0
   546  00FCD4  5F                 	db	95
   547  00FCD5  00                 	db	0
   548  00FCD6  00                 	db	0
   549  00FCD7  00                 	db	0
   550  00FCD8  07                 	db	7
   551  00FCD9  00                 	db	0
   552  00FCDA  07                 	db	7
   553  00FCDB  00                 	db	0
   554  00FCDC  14                 	db	20
   555  00FCDD  7F                 	db	127
   556  00FCDE  14                 	db	20
   557  00FCDF  7F                 	db	127
   558  00FCE0  14                 	db	20
   559  00FCE1  24                 	db	36
   560  00FCE2  2A                 	db	42
   561  00FCE3  7F                 	db	127
   562  00FCE4  2A                 	db	42
   563  00FCE5  12                 	db	18
   564  00FCE6  23                 	db	35
   565  00FCE7  13                 	db	19
   566  00FCE8  08                 	db	8
   567  00FCE9  64                 	db	100
   568  00FCEA  62                 	db	98
   569  00FCEB  36                 	db	54
   570  00FCEC  49                 	db	73
   571  00FCED  55                 	db	85
   572  00FCEE  22                 	db	34
   573  00FCEF  50                 	db	80
   574  00FCF0  00                 	db	0
   575  00FCF1  05                 	db	5
   576  00FCF2  03                 	db	3
   577  00FCF3  00                 	db	0
   578  00FCF4  00                 	db	0
   579  00FCF5  00                 	db	0
   580  00FCF6  1C                 	db	28
   581  00FCF7  22                 	db	34
   582  00FCF8  41                 	db	65
   583  00FCF9  00                 	db	0
   584  00FCFA  00                 	db	0
   585  00FCFB  41                 	db	65
   586  00FCFC  22                 	db	34
   587  00FCFD  1C                 	db	28
   588  00FCFE  00                 	db	0
   589  00FCFF  08                 	db	8
   590  00FD00  2A                 	db	42
   591  00FD01  1C                 	db	28
   592  00FD02  2A                 	db	42
   593  00FD03  08                 	db	8
   594  00FD04  08                 	db	8
   595  00FD05  08                 	db	8
   596  00FD06  3E                 	db	62
   597  00FD07  08                 	db	8
   598  00FD08  08                 	db	8
   599  00FD09  00                 	db	0
   600  00FD0A  50                 	db	80
   601  00FD0B  30                 	db	48
   602  00FD0C  00                 	db	0
   603  00FD0D  00                 	db	0
   604  00FD0E  08                 	db	8
   605  00FD0F  08                 	db	8
   606  00FD10  08                 	db	8
   607  00FD11  08                 	db	8
   608  00FD12  08                 	db	8
   609  00FD13  00                 	db	0
   610  00FD14  60                 	db	96
   611  00FD15  60                 	db	96
   612  00FD16  00                 	db	0
   613  00FD17  00                 	db	0
   614  00FD18  20                 	db	32
   615  00FD19  10                 	db	16
   616  00FD1A  08                 	db	8
   617  00FD1B  04                 	db	4
   618  00FD1C  02                 	db	2
   619  00FD1D  3E                 	db	62
   620  00FD1E  51                 	db	81
   621  00FD1F  49                 	db	73
   622  00FD20  45                 	db	69
   623  00FD21  3E                 	db	62
   624  00FD22  00                 	db	0
   625  00FD23  42                 	db	66
   626  00FD24  7F                 	db	127
   627  00FD25  40                 	db	64
   628  00FD26  00                 	db	0
   629  00FD27  42                 	db	66
   630  00FD28  61                 	db	97
   631  00FD29  51                 	db	81
   632  00FD2A  49                 	db	73
   633  00FD2B  46                 	db	70
   634  00FD2C  21                 	db	33
   635  00FD2D  41                 	db	65
   636  00FD2E  45                 	db	69
   637  00FD2F  4B                 	db	75
   638  00FD30  31                 	db	49
   639  00FD31  18                 	db	24
   640  00FD32  14                 	db	20
   641  00FD33  12                 	db	18
   642  00FD34  7F                 	db	127
   643  00FD35  10                 	db	16
   644  00FD36  27                 	db	39
   645  00FD37  45                 	db	69
   646  00FD38  45                 	db	69
   647  00FD39  45                 	db	69
   648  00FD3A  39                 	db	57
   649  00FD3B  3C                 	db	60
   650  00FD3C  4A                 	db	74
   651  00FD3D  49                 	db	73
   652  00FD3E  49                 	db	73
   653  00FD3F  30                 	db	48
   654  00FD40  01                 	db	1
   655  00FD41  71                 	db	113
   656  00FD42  09                 	db	9
   657  00FD43  05                 	db	5
   658  00FD44  03                 	db	3
   659  00FD45  36                 	db	54
   660  00FD46  49                 	db	73
   661  00FD47  49                 	db	73
   662  00FD48  49                 	db	73
   663  00FD49  36                 	db	54
   664  00FD4A  06                 	db	6
   665  00FD4B  49                 	db	73
   666  00FD4C  49                 	db	73
   667  00FD4D  29                 	db	41
   668  00FD4E  1E                 	db	30
   669  00FD4F  00                 	db	0
   670  00FD50  36                 	db	54
   671  00FD51  36                 	db	54
   672  00FD52  00                 	db	0
   673  00FD53  00                 	db	0
   674  00FD54  00                 	db	0
   675  00FD55  56                 	db	86
   676  00FD56  36                 	db	54
   677  00FD57  00                 	db	0
   678  00FD58  00                 	db	0
   679  00FD59  00                 	db	0
   680  00FD5A  08                 	db	8
   681  00FD5B  14                 	db	20
   682  00FD5C  22                 	db	34
   683  00FD5D  41                 	db	65
   684  00FD5E  14                 	db	20
   685  00FD5F  14                 	db	20
   686  00FD60  14                 	db	20
   687  00FD61  14                 	db	20
   688  00FD62  14                 	db	20
   689  00FD63  41                 	db	65
   690  00FD64  22                 	db	34
   691  00FD65  14                 	db	20
   692  00FD66  08                 	db	8
   693  00FD67  00                 	db	0
   694  00FD68  02                 	db	2
   695  00FD69  01                 	db	1
   696  00FD6A  51                 	db	81
   697  00FD6B  09                 	db	9
   698  00FD6C  06                 	db	6
   699  00FD6D  32                 	db	50
   700  00FD6E  49                 	db	73
   701  00FD6F  79                 	db	121
   702  00FD70  41                 	db	65
   703  00FD71  3E                 	db	62
   704  00FD72  7E                 	db	126
   705  00FD73  11                 	db	17
   706  00FD74  11                 	db	17
   707  00FD75  11                 	db	17
   708  00FD76  7E                 	db	126
   709  00FD77  7F                 	db	127
   710  00FD78  49                 	db	73
   711  00FD79  49                 	db	73
   712  00FD7A  49                 	db	73
   713  00FD7B  36                 	db	54
   714  00FD7C  3E                 	db	62
   715  00FD7D  41                 	db	65
   716  00FD7E  41                 	db	65
   717  00FD7F  41                 	db	65
   718  00FD80  22                 	db	34
   719  00FD81  7F                 	db	127
   720  00FD82  41                 	db	65
   721  00FD83  41                 	db	65
   722  00FD84  22                 	db	34
   723  00FD85  1C                 	db	28
   724  00FD86  7F                 	db	127
   725  00FD87  49                 	db	73
   726  00FD88  49                 	db	73
   727  00FD89  49                 	db	73
   728  00FD8A  41                 	db	65
   729  00FD8B  7F                 	db	127
   730  00FD8C  09                 	db	9
   731  00FD8D  09                 	db	9
   732  00FD8E  01                 	db	1
   733  00FD8F  01                 	db	1
   734  00FD90  3E                 	db	62
   735  00FD91  41                 	db	65
   736  00FD92  41                 	db	65
   737  00FD93  51                 	db	81
   738  00FD94  32                 	db	50
   739  00FD95  7F                 	db	127
   740  00FD96  08                 	db	8
   741  00FD97  08                 	db	8
   742  00FD98  08                 	db	8
   743  00FD99  7F                 	db	127
   744  00FD9A  00                 	db	0
   745  00FD9B  41                 	db	65
   746  00FD9C  7F                 	db	127
   747  00FD9D  41                 	db	65
   748  00FD9E  00                 	db	0
   749  00FD9F  20                 	db	32
   750  00FDA0  40                 	db	64
   751  00FDA1  41                 	db	65
   752  00FDA2  3F                 	db	63
   753  00FDA3  01                 	db	1
   754  00FDA4  7F                 	db	127
   755  00FDA5  08                 	db	8
   756  00FDA6  14                 	db	20
   757  00FDA7  22                 	db	34
   758  00FDA8  41                 	db	65
   759  00FDA9  7F                 	db	127
   760  00FDAA  40                 	db	64
   761  00FDAB  40                 	db	64
   762  00FDAC  40                 	db	64
   763  00FDAD  40                 	db	64
   764  00FDAE  7F                 	db	127
   765  00FDAF  02                 	db	2
   766  00FDB0  04                 	db	4
   767  00FDB1  02                 	db	2
   768  00FDB2  7F                 	db	127
   769  00FDB3  7F                 	db	127
   770  00FDB4  04                 	db	4
   771  00FDB5  08                 	db	8
   772  00FDB6  10                 	db	16
   773  00FDB7  7F                 	db	127
   774  00FDB8  3E                 	db	62
   775  00FDB9  41                 	db	65
   776  00FDBA  41                 	db	65
   777  00FDBB  41                 	db	65
   778  00FDBC  3E                 	db	62
   779  00FDBD  7F                 	db	127
   780  00FDBE  09                 	db	9
   781  00FDBF  09                 	db	9
   782  00FDC0  09                 	db	9
   783  00FDC1  06                 	db	6
   784  00FDC2  3E                 	db	62
   785  00FDC3  41                 	db	65
   786  00FDC4  51                 	db	81
   787  00FDC5  21                 	db	33
   788  00FDC6  5E                 	db	94
   789  00FDC7  7F                 	db	127
   790  00FDC8  09                 	db	9
   791  00FDC9  19                 	db	25
   792  00FDCA  29                 	db	41
   793  00FDCB  46                 	db	70
   794  00FDCC  46                 	db	70
   795  00FDCD  49                 	db	73
   796  00FDCE  49                 	db	73
   797  00FDCF  49                 	db	73
   798  00FDD0  31                 	db	49
   799  00FDD1  01                 	db	1
   800  00FDD2  01                 	db	1
   801  00FDD3  7F                 	db	127
   802  00FDD4  01                 	db	1
   803  00FDD5  01                 	db	1
   804  00FDD6  3F                 	db	63
   805  00FDD7  40                 	db	64
   806  00FDD8  40                 	db	64
   807  00FDD9  40                 	db	64
   808  00FDDA  3F                 	db	63
   809  00FDDB  1F                 	db	31
   810  00FDDC  20                 	db	32
   811  00FDDD  40                 	db	64
   812  00FDDE  20                 	db	32
   813  00FDDF  1F                 	db	31
   814  00FDE0  7F                 	db	127
   815  00FDE1  20                 	db	32
   816  00FDE2  18                 	db	24
   817  00FDE3  20                 	db	32
   818  00FDE4  7F                 	db	127
   819  00FDE5  63                 	db	99
   820  00FDE6  14                 	db	20
   821  00FDE7  08                 	db	8
   822  00FDE8  14                 	db	20
   823  00FDE9  63                 	db	99
   824  00FDEA  03                 	db	3
   825  00FDEB  04                 	db	4
   826  00FDEC  78                 	db	120
   827  00FDED  04                 	db	4
   828  00FDEE  03                 	db	3
   829  00FDEF  61                 	db	97
   830  00FDF0  51                 	db	81
   831  00FDF1  49                 	db	73
   832  00FDF2  45                 	db	69
   833  00FDF3  43                 	db	67
   834  00FDF4  00                 	db	0
   835  00FDF5  00                 	db	0
   836  00FDF6  7F                 	db	127
   837  00FDF7  41                 	db	65
   838  00FDF8  41                 	db	65
   839  00FDF9  02                 	db	2
   840  00FDFA  04                 	db	4
   841  00FDFB  08                 	db	8
   842  00FDFC  10                 	db	16
   843  00FDFD  20                 	db	32
   844  00FDFE  41                 	db	65
   845  00FDFF  41                 	db	65
   846  00FE00  7F                 	db	127
   847  00FE01  00                 	db	0
   848  00FE02  00                 	db	0
   849  00FE03  04                 	db	4
   850  00FE04  02                 	db	2
   851  00FE05  01                 	db	1
   852  00FE06  02                 	db	2
   853  00FE07  04                 	db	4
   854  00FE08  40                 	db	64
   855  00FE09  40                 	db	64
   856  00FE0A  40                 	db	64
   857  00FE0B  40                 	db	64
   858  00FE0C  40                 	db	64
   859  00FE0D  00                 	db	0
   860  00FE0E  01                 	db	1
   861  00FE0F  02                 	db	2
   862  00FE10  04                 	db	4
   863  00FE11  00                 	db	0
   864  00FE12  20                 	db	32
   865  00FE13  54                 	db	84
   866  00FE14  54                 	db	84
   867  00FE15  54                 	db	84
   868  00FE16  78                 	db	120
   869  00FE17  7F                 	db	127
   870  00FE18  48                 	db	72
   871  00FE19  44                 	db	68
   872  00FE1A  44                 	db	68
   873  00FE1B  38                 	db	56
   874  00FE1C  38                 	db	56
   875  00FE1D  44                 	db	68
   876  00FE1E  44                 	db	68
   877  00FE1F  44                 	db	68
   878  00FE20  20                 	db	32
   879  00FE21  38                 	db	56
   880  00FE22  44                 	db	68
   881  00FE23  44                 	db	68
   882  00FE24  48                 	db	72
   883  00FE25  7F                 	db	127
   884  00FE26  38                 	db	56
   885  00FE27  54                 	db	84
   886  00FE28  54                 	db	84
   887  00FE29  54                 	db	84
   888  00FE2A  18                 	db	24
   889  00FE2B  08                 	db	8
   890  00FE2C  7E                 	db	126
   891  00FE2D  09                 	db	9
   892  00FE2E  01                 	db	1
   893  00FE2F  02                 	db	2
   894  00FE30  08                 	db	8
   895  00FE31  14                 	db	20
   896  00FE32  54                 	db	84
   897  00FE33  54                 	db	84
   898  00FE34  3C                 	db	60
   899  00FE35  7F                 	db	127
   900  00FE36  08                 	db	8
   901  00FE37  04                 	db	4
   902  00FE38  04                 	db	4
   903  00FE39  78                 	db	120
   904  00FE3A  00                 	db	0
   905  00FE3B  44                 	db	68
   906  00FE3C  7D                 	db	125
   907  00FE3D  40                 	db	64
   908  00FE3E  00                 	db	0
   909  00FE3F  20                 	db	32
   910  00FE40  40                 	db	64
   911  00FE41  44                 	db	68
   912  00FE42  3D                 	db	61
   913  00FE43  00                 	db	0
   914  00FE44  00                 	db	0
   915  00FE45  7F                 	db	127
   916  00FE46  10                 	db	16
   917  00FE47  28                 	db	40
   918  00FE48  44                 	db	68
   919  00FE49  00                 	db	0
   920  00FE4A  41                 	db	65
   921  00FE4B  7F                 	db	127
   922  00FE4C  40                 	db	64
   923  00FE4D  00                 	db	0
   924  00FE4E  7C                 	db	124
   925  00FE4F  04                 	db	4
   926  00FE50  18                 	db	24
   927  00FE51  04                 	db	4
   928  00FE52  78                 	db	120
   929  00FE53  7C                 	db	124
   930  00FE54  08                 	db	8
   931  00FE55  04                 	db	4
   932  00FE56  04                 	db	4
   933  00FE57  78                 	db	120
   934  00FE58  38                 	db	56
   935  00FE59  44                 	db	68
   936  00FE5A  44                 	db	68
   937  00FE5B  44                 	db	68
   938  00FE5C  38                 	db	56
   939  00FE5D  7C                 	db	124
   940  00FE5E  14                 	db	20
   941  00FE5F  14                 	db	20
   942  00FE60  14                 	db	20
   943  00FE61  08                 	db	8
   944  00FE62  08                 	db	8
   945  00FE63  14                 	db	20
   946  00FE64  14                 	db	20
   947  00FE65  18                 	db	24
   948  00FE66  7C                 	db	124
   949  00FE67  7C                 	db	124
   950  00FE68  08                 	db	8
   951  00FE69  04                 	db	4
   952  00FE6A  04                 	db	4
   953  00FE6B  08                 	db	8
   954  00FE6C  48                 	db	72
   955  00FE6D  54                 	db	84
   956  00FE6E  54                 	db	84
   957  00FE6F  54                 	db	84
   958  00FE70  20                 	db	32
   959  00FE71  04                 	db	4
   960  00FE72  3F                 	db	63
   961  00FE73  44                 	db	68
   962  00FE74  40                 	db	64
   963  00FE75  20                 	db	32
   964  00FE76  3C                 	db	60
   965  00FE77  40                 	db	64
   966  00FE78  40                 	db	64
   967  00FE79  20                 	db	32
   968  00FE7A  7C                 	db	124
   969  00FE7B  1C                 	db	28
   970  00FE7C  20                 	db	32
   971  00FE7D  40                 	db	64
   972  00FE7E  20                 	db	32
   973  00FE7F  1C                 	db	28
   974  00FE80  3C                 	db	60
   975  00FE81  40                 	db	64
   976  00FE82  30                 	db	48
   977  00FE83  40                 	db	64
   978  00FE84  3C                 	db	60
   979  00FE85  44                 	db	68
   980  00FE86  28                 	db	40
   981  00FE87  10                 	db	16
   982  00FE88  28                 	db	40
   983  00FE89  44                 	db	68
   984  00FE8A  0C                 	db	12
   985  00FE8B  50                 	db	80
   986  00FE8C  50                 	db	80
   987  00FE8D  50                 	db	80
   988  00FE8E  3C                 	db	60
   989  00FE8F  44                 	db	68
   990  00FE90  64                 	db	100
   991  00FE91  54                 	db	84
   992  00FE92  4C                 	db	76
   993  00FE93  44                 	db	68
   994  00FE94  00                 	db	0
   995  00FE95  08                 	db	8
   996  00FE96  36                 	db	54
   997  00FE97  41                 	db	65
   998  00FE98  00                 	db	0
   999  00FE99  00                 	db	0
  1000  00FE9A  00                 	db	0
  1001  00FE9B  7F                 	db	127
  1002  00FE9C  00                 	db	0
  1003  00FE9D  00                 	db	0
  1004  00FE9E  00                 	db	0
  1005  00FE9F  41                 	db	65
  1006  00FEA0  36                 	db	54
  1007  00FEA1  08                 	db	8
  1008  00FEA2  00                 	db	0
  1009  00FEA3  08                 	db	8
  1010  00FEA4  08                 	db	8
  1011  00FEA5  2A                 	db	42
  1012  00FEA6  1C                 	db	28
  1013  00FEA7  08                 	db	8
  1014  00FEA8  08                 	db	8
  1015  00FEA9  1C                 	db	28
  1016  00FEAA  2A                 	db	42
  1017  00FEAB  08                 	db	8
  1018  00FEAC  08                 	db	8
  1019  00FEAD                     __end_of_Font5x7:
  1020                           	opt stack 0
  1021  00FEAD                     exp@coeff:
  1022                           	opt stack 0
  1023  00FEAD  0000               	dw	0
  1024  00FEAF  3F80               	dw	16256
  1025  00FEB1  7218               	dw	29208
  1026  00FEB3  3F31               	dw	16177
  1027  00FEB5  FDF0               	dw	65008
  1028  00FEB7  3E75               	dw	15989
  1029  00FEB9  5847               	dw	22599
  1030  00FEBB  3D63               	dw	15715
  1031  00FEBD  9558               	dw	38232
  1032  00FEBF  3C1D               	dw	15389
  1033  00FEC1  C482               	dw	50306
  1034  00FEC3  3AAE               	dw	15022
  1035  00FEC5  78A8               	dw	30888
  1036  00FEC7  3921               	dw	14625
  1037  00FEC9  93EF               	dw	37871
  1038  00FECB  3780               	dw	14208
  1039  00FECD  92A0               	dw	37536
  1040  00FECF  35A7               	dw	13735
  1041  00FED1  5646               	dw	22086
  1042  00FED3  3415               	dw	13333
  1043  00FED5                     __end_ofexp@coeff:
  1044                           	opt stack 0
  1045  00FED5                     log@coeff:
  1046                           	opt stack 0
  1047  00FED5  0000               	dw	0
  1048  00FED7  0000               	dw	0
  1049  00FED9  FFC4               	dw	65476
  1050  00FEDB  3F7F               	dw	16255
  1051  00FEDD  EF80               	dw	61312
  1052  00FEDF  BEFF               	dw	48895
  1053  00FEE1  E190               	dw	57744
  1054  00FEE3  3EA9               	dw	16041
  1055  00FEE5  82EC               	dw	33516
  1056  00FEE7  BE76               	dw	48758
  1057  00FEE9  AD82               	dw	44418
  1058  00FEEB  3E2B               	dw	15915
  1059  00FEED  3C0E               	dw	15374
  1060  00FEEF  BDC3               	dw	48579
  1061  00FEF1  D187               	dw	53639
  1062  00FEF3  3D13               	dw	15635
  1063  00FEF5  7841               	dw	30785
  1064  00FEF7  BBD3               	dw	48083
  1065  00FEF9                     __end_oflog@coeff:
  1066                           	opt stack 0
  1067  00FEF9                     _PortG_Property:
  1068                           	opt stack 0
  1069  00FEF9  FC00               	dw	64512
  1070  00FEFB                     __end_of_PortG_Property:
  1071                           	opt stack 0
  1072  00FEFB                     _PortF_Property:
  1073                           	opt stack 0
  1074  00FEFB  0FFF               	dw	4095
  1075  00FEFD                     __end_of_PortF_Property:
  1076                           	opt stack 0
  1077  00FEFD                     _PortE_Property:
  1078                           	opt stack 0
  1079  00FEFD  0000               	dw	0
  1080  00FEFF                     __end_of_PortE_Property:
  1081                           	opt stack 0
  1082  00FEFF                     _PortD_Property:
  1083                           	opt stack 0
  1084  00FEFF  FFFF               	dw	65535
  1085  00FF01                     __end_of_PortD_Property:
  1086                           	opt stack 0
  1087  00FF01                     _PortC_Property:
  1088                           	opt stack 0
  1089  00FF01  FFF0               	dw	65520
  1090  00FF03                     __end_of_PortC_Property:
  1091                           	opt stack 0
  1092  00FF03                     _PortB_Property:
  1093                           	opt stack 0
  1094  00FF03  FF00               	dw	65280
  1095  00FF05                     __end_of_PortB_Property:
  1096                           	opt stack 0
  1097  00FF05                     _PortA_Property:
  1098                           	opt stack 0
  1099  00FF05  00FF               	dw	255
  1100  00FF07                     __end_of_PortA_Property:
  1101                           	opt stack 0
  1102  0000                     _TMR0	set	4054
  1103  0000                     _PR2	set	4043
  1104  0000                     _T2CONbits	set	4042
  1105  0000                     _T0CONbits	set	4053
  1106  0000                     _RCONbits	set	4048
  1107  0000                     _OSCTUNEbits	set	3995
  1108  0000                     _PIR3	set	4004
  1109  0000                     _PIR2	set	4001
  1110  0000                     _PIR1	set	3998
  1111  0000                     _INTCONbits	set	4082
  1112  0000                     _SSP2CON2bits	set	3947
  1113  0000                     _SSP1CON2bits	set	4037
  1114  0000                     _SSP1ADD	set	4040
  1115  0000                     _ANCON0	set	4033
  1116  0000                     _ADRESL	set	4035
  1117  0000                     _ADRESH	set	4036
  1118  0000                     _ADCON1bits	set	4033
  1119  0000                     _ADCON0bits	set	4034
  1120  0000                     _SSP2CON1bits	set	3948
  1121  0000                     _SSP1CON1bits	set	4038
  1122  0000                     _SSP2STATbits	set	3949
  1123  0000                     _SSP1STATbits	set	4039
  1124  0000                     _PIE3bits	set	4003
  1125  0000                     _PIE1bits	set	3997
  1126  0000                     _PIR3bits	set	4004
  1127  0000                     _PIR1bits	set	3998
  1128  0000                     _IPR3bits	set	4005
  1129  0000                     _IPR1bits	set	3999
  1130  0000                     _PORTFbits	set	3973
  1131  0000                     _SSP2CON2	set	3947
  1132  0000                     _SSP1CON2	set	4037
  1133  0000                     _SSP2BUF	set	3951
  1134  0000                     _SSP2CON1	set	3948
  1135  0000                     _SSP2STAT	set	3949
  1136  0000                     _SSP1BUF	set	4041
  1137  0000                     _SSP1CON1	set	4038
  1138  0000                     _SSP1STAT	set	4039
  1139  0000                     _LATG	set	3983
  1140  0000                     _LATF	set	3982
  1141  0000                     _LATE	set	3981
  1142  0000                     _LATD	set	3980
  1143  0000                     _LATC	set	3979
  1144  0000                     _LATB	set	3978
  1145  0000                     _LATA	set	3977
  1146  0000                     _TRISG	set	3992
  1147  0000                     _TRISF	set	3991
  1148  0000                     _TRISE	set	3990
  1149  0000                     _TRISD	set	3989
  1150  0000                     _TRISC	set	3988
  1151  0000                     _TRISB	set	3987
  1152  0000                     _TRISA	set	3986
  1153  0000                     _PORTG	set	3974
  1154  0000                     _PORTF	set	3973
  1155  0000                     _PORTE	set	3972
  1156  0000                     _PORTD	set	3971
  1157  0000                     _PORTC	set	3970
  1158  0000                     _PORTB	set	3969
  1159  0000                     _PORTA	set	3968
  1160  00FF07                     STR_2:
  1161  00FF07  43                 	db	67	;'C'
  1162  00FF08  75                 	db	117	;'u'
  1163  00FF09  72                 	db	114	;'r'
  1164  00FF0A  72                 	db	114	;'r'
  1165  00FF0B  65                 	db	101	;'e'
  1166  00FF0C  6E                 	db	110	;'n'
  1167  00FF0D  74                 	db	116	;'t'
  1168  00FF0E  20                 	db	32
  1169  00FF0F  4D                 	db	77	;'M'
  1170  00FF10  6F                 	db	111	;'o'
  1171  00FF11  64                 	db	100	;'d'
  1172  00FF12  65                 	db	101	;'e'
  1173  00FF13  3A                 	db	58	;':'
  1174  00FF14  0A                 	db	10
  1175  00FF15  20                 	db	32
  1176  00FF16  43                 	db	67	;'C'
  1177  00FF17  6F                 	db	111	;'o'
  1178  00FF18  6E                 	db	110	;'n'
  1179  00FF19  74                 	db	116	;'t'
  1180  00FF1A  69                 	db	105	;'i'
  1181  00FF1B  6E                 	db	110	;'n'
  1182  00FF1C  75                 	db	117	;'u'
  1183  00FF1D  6F                 	db	111	;'o'
  1184  00FF1E  75                 	db	117	;'u'
  1185  00FF1F  73                 	db	115	;'s'
  1186  00FF20  20                 	db	32
  1187  00FF21  4D                 	db	77	;'M'
  1188  00FF22  6F                 	db	111	;'o'
  1189  00FF23  64                 	db	100	;'d'
  1190  00FF24  65                 	db	101	;'e'
  1191  00FF25  0A                 	db	10
  1192  00FF26  00                 	db	0
  1193  00FF27                     STR_10:
  1194  00FF27  43                 	db	67	;'C'
  1195  00FF28  75                 	db	117	;'u'
  1196  00FF29  72                 	db	114	;'r'
  1197  00FF2A  72                 	db	114	;'r'
  1198  00FF2B  65                 	db	101	;'e'
  1199  00FF2C  6E                 	db	110	;'n'
  1200  00FF2D  74                 	db	116	;'t'
  1201  00FF2E  20                 	db	32
  1202  00FF2F  4D                 	db	77	;'M'
  1203  00FF30  6F                 	db	111	;'o'
  1204  00FF31  64                 	db	100	;'d'
  1205  00FF32  65                 	db	101	;'e'
  1206  00FF33  3A                 	db	58	;':'
  1207  00FF34  0A                 	db	10
  1208  00FF35  20                 	db	32
  1209  00FF36  50                 	db	80	;'P'
  1210  00FF37  6F                 	db	111	;'o'
  1211  00FF38  73                 	db	115	;'s'
  1212  00FF39  69                 	db	105	;'i'
  1213  00FF3A  74                 	db	116	;'t'
  1214  00FF3B  69                 	db	105	;'i'
  1215  00FF3C  6F                 	db	111	;'o'
  1216  00FF3D  6E                 	db	110	;'n'
  1217  00FF3E  20                 	db	32
  1218  00FF3F  4D                 	db	77	;'M'
  1219  00FF40  6F                 	db	111	;'o'
  1220  00FF41  64                 	db	100	;'d'
  1221  00FF42  65                 	db	101	;'e'
  1222  00FF43  0A                 	db	10
  1223  00FF44  0A                 	db	10
  1224  00FF45  00                 	db	0
  1225  00FF46                     STR_12:
  1226  00FF46  43                 	db	67	;'C'
  1227  00FF47  75                 	db	117	;'u'
  1228  00FF48  72                 	db	114	;'r'
  1229  00FF49  72                 	db	114	;'r'
  1230  00FF4A  65                 	db	101	;'e'
  1231  00FF4B  6E                 	db	110	;'n'
  1232  00FF4C  74                 	db	116	;'t'
  1233  00FF4D  20                 	db	32
  1234  00FF4E  4D                 	db	77	;'M'
  1235  00FF4F  6F                 	db	111	;'o'
  1236  00FF50  64                 	db	100	;'d'
  1237  00FF51  65                 	db	101	;'e'
  1238  00FF52  3A                 	db	58	;':'
  1239  00FF53  0A                 	db	10
  1240  00FF54  20                 	db	32
  1241  00FF55  55                 	db	85	;'U'
  1242  00FF56  6E                 	db	110	;'n'
  1243  00FF57  64                 	db	100	;'d'
  1244  00FF58  65                 	db	101	;'e'
  1245  00FF59  66                 	db	102	;'f'
  1246  00FF5A  69                 	db	105	;'i'
  1247  00FF5B  6E                 	db	110	;'n'
  1248  00FF5C  65                 	db	101	;'e'
  1249  00FF5D  64                 	db	100	;'d'
  1250  00FF5E  0A                 	db	10
  1251  00FF5F  00                 	db	0
  1252  00FF60                     STR_7:
  1253  00FF60  43                 	db	67	;'C'
  1254  00FF61  75                 	db	117	;'u'
  1255  00FF62  72                 	db	114	;'r'
  1256  00FF63  72                 	db	114	;'r'
  1257  00FF64  65                 	db	101	;'e'
  1258  00FF65  6E                 	db	110	;'n'
  1259  00FF66  74                 	db	116	;'t'
  1260  00FF67  20                 	db	32
  1261  00FF68  4D                 	db	77	;'M'
  1262  00FF69  6F                 	db	111	;'o'
  1263  00FF6A  64                 	db	100	;'d'
  1264  00FF6B  65                 	db	101	;'e'
  1265  00FF6C  3A                 	db	58	;':'
  1266  00FF6D  0A                 	db	10
  1267  00FF6E  20                 	db	32
  1268  00FF6F  53                 	db	83	;'S'
  1269  00FF70  74                 	db	116	;'t'
  1270  00FF71  65                 	db	101	;'e'
  1271  00FF72  70                 	db	112	;'p'
  1272  00FF73  20                 	db	32
  1273  00FF74  4D                 	db	77	;'M'
  1274  00FF75  6F                 	db	111	;'o'
  1275  00FF76  64                 	db	100	;'d'
  1276  00FF77  65                 	db	101	;'e'
  1277  00FF78  0A                 	db	10
  1278  00FF79  00                 	db	0
  1279  00FF7A                     STR_13:
  1280  00FF7A  20                 	db	32
  1281  00FF7B  20                 	db	32
  1282  00FF7C  20                 	db	32
  1283  00FF7D  20                 	db	32
  1284  00FF7E  20                 	db	32
  1285  00FF7F  20                 	db	32
  1286  00FF80  20                 	db	32
  1287  00FF81  20                 	db	32
  1288  00FF82  20                 	db	32
  1289  00FF83  20                 	db	32
  1290  00FF84  20                 	db	32
  1291  00FF85  20                 	db	32
  1292  00FF86  20                 	db	32
  1293  00FF87  20                 	db	32
  1294  00FF88  20                 	db	32
  1295  00FF89  20                 	db	32
  1296  00FF8A  20                 	db	32
  1297  00FF8B  20                 	db	32
  1298  00FF8C  20                 	db	32
  1299  00FF8D  20                 	db	32
  1300  00FF8E  20                 	db	32
  1301  00FF8F  20                 	db	32
  1302  00FF90  0A                 	db	10
  1303  00FF91  00                 	db	0
  1304  00FF92                     STR_1:
  1305  00FF92  4A                 	db	74	;'J'
  1306  00FF93  61                 	db	97	;'a'
  1307  00FF94  6D                 	db	109	;'m'
  1308  00FF95  69                 	db	105	;'i'
  1309  00FF96  6E                 	db	110	;'n'
  1310  00FF97  20                 	db	32
  1311  00FF98  45                 	db	69	;'E'
  1312  00FF99  61                 	db	97	;'a'
  1313  00FF9A  72                 	db	114	;'r'
  1314  00FF9B  6C                 	db	108	;'l'
  1315  00FF9C  79                 	db	121	;'y'
  1316  00FF9D  20                 	db	32
  1317  00FF9E  39                 	db	57	;'9'
  1318  00FF9F  39                 	db	57	;'9'
  1319  00FFA0  31                 	db	49	;'1'
  1320  00FFA1  33                 	db	51	;'3'
  1321  00FFA2  33                 	db	51	;'3'
  1322  00FFA3  33                 	db	51	;'3'
  1323  00FFA4  39                 	db	57	;'9'
  1324  00FFA5  31                 	db	49	;'1'
  1325  00FFA6  0A                 	db	10
  1326  00FFA7  0A                 	db	10
  1327  00FFA8  00                 	db	0
  1328  00FFA9                     STR_9:
  1329  00FFA9  52                 	db	82	;'R'
  1330  00FFAA  65                 	db	101	;'e'
  1331  00FFAB  6D                 	db	109	;'m'
  1332  00FFAC  61                 	db	97	;'a'
  1333  00FFAD  69                 	db	105	;'i'
  1334  00FFAE  6E                 	db	110	;'n'
  1335  00FFAF  69                 	db	105	;'i'
  1336  00FFB0  6E                 	db	110	;'n'
  1337  00FFB1  67                 	db	103	;'g'
  1338  00FFB2  20                 	db	32
  1339  00FFB3  53                 	db	83	;'S'
  1340  00FFB4  74                 	db	116	;'t'
  1341  00FFB5  65                 	db	101	;'e'
  1342  00FFB6  70                 	db	112	;'p'
  1343  00FFB7  73                 	db	115	;'s'
  1344  00FFB8  3A                 	db	58	;':'
  1345  00FFB9  20                 	db	32
  1346  00FFBA  25                 	db	37
  1347  00FFBB  64                 	db	100	;'d'
  1348  00FFBC  0A                 	db	10
  1349  00FFBD  0A                 	db	10
  1350  00FFBE  00                 	db	0
  1351  00FFBF                     STR_11:
  1352  00FFBF  54                 	db	84	;'T'
  1353  00FFC0  61                 	db	97	;'a'
  1354  00FFC1  72                 	db	114	;'r'
  1355  00FFC2  67                 	db	103	;'g'
  1356  00FFC3  65                 	db	101	;'e'
  1357  00FFC4  74                 	db	116	;'t'
  1358  00FFC5  20                 	db	32
  1359  00FFC6  41                 	db	65	;'A'
  1360  00FFC7  6E                 	db	110	;'n'
  1361  00FFC8  67                 	db	103	;'g'
  1362  00FFC9  6C                 	db	108	;'l'
  1363  00FFCA  65                 	db	101	;'e'
  1364  00FFCB  3A                 	db	58	;':'
  1365  00FFCC  0A                 	db	10
  1366  00FFCD  20                 	db	32
  1367  00FFCE  25                 	db	37
  1368  00FFCF  66                 	db	102	;'f'
  1369  00FFD0  20                 	db	32
  1370  00FFD1  0A                 	db	10
  1371  00FFD2  00                 	db	0
  1372  00FFD3                     STR_6:
  1373  00FFD3  53                 	db	83	;'S'
  1374  00FFD4  70                 	db	112	;'p'
  1375  00FFD5  65                 	db	101	;'e'
  1376  00FFD6  65                 	db	101	;'e'
  1377  00FFD7  64                 	db	100	;'d'
  1378  00FFD8  3A                 	db	58	;':'
  1379  00FFD9  20                 	db	32
  1380  00FFDA  25                 	db	37
  1381  00FFDB  64                 	db	100	;'d'
  1382  00FFDC  48                 	db	72	;'H'
  1383  00FFDD  7A                 	db	122	;'z'
  1384  00FFDE  0A                 	db	10
  1385  00FFDF  00                 	db	0
  1386  00FFE0                     STR_3:
  1387  00FFE0  44                 	db	68	;'D'
  1388  00FFE1  69                 	db	105	;'i'
  1389  00FFE2  72                 	db	114	;'r'
  1390  00FFE3  65                 	db	101	;'e'
  1391  00FFE4  63                 	db	99	;'c'
  1392  00FFE5  74                 	db	116	;'t'
  1393  00FFE6  69                 	db	105	;'i'
  1394  00FFE7  6F                 	db	111	;'o'
  1395  00FFE8  6E                 	db	110	;'n'
  1396  00FFE9  3A                 	db	58	;':'
  1397  00FFEA  20                 	db	32
  1398  00FFEB  00                 	db	0
  1399  00FFEC                     STR_8:
  1400  00FFEC  53                 	db	83	;'S'
  1401  00FFED  74                 	db	116	;'t'
  1402  00FFEE  65                 	db	101	;'e'
  1403  00FFEF  70                 	db	112	;'p'
  1404  00FFF0  73                 	db	115	;'s'
  1405  00FFF1  3A                 	db	58	;':'
  1406  00FFF2  20                 	db	32
  1407  00FFF3  25                 	db	37
  1408  00FFF4  64                 	db	100	;'d'
  1409  00FFF5  0A                 	db	10
  1410  00FFF6  00                 	db	0
  1411  00FFF7                     STR_5:
  1412  00FFF7  43                 	db	67	;'C'
  1413  00FFF8  43                 	db	67	;'C'
  1414  00FFF9  57                 	db	87	;'W'
  1415  00FFFA  0A                 	db	10
  1416  00FFFB  00                 	db	0
  1417  00FFFC                     STR_16:
  1418  00FFFC  25                 	db	37
  1419  00FFFD  63                 	db	99	;'c'
  1420  00FFFE  00                 	db	0
  1421  0000                     
  1422                           ; #config settings
  1423  00FFFF  00                 	db	0	; dummy byte at the end
  1424  0000                     
  1425                           	psect	cinit
  1426  015E18                     __pcinit:
  1427                           	opt stack 0
  1428  015E18                     start_initialization:
  1429                           	opt stack 0
  1430  015E18                     __initialization:
  1431                           	opt stack 0
  1432                           
  1433                           ; Initialize objects allocated to BANK1 (16 bytes)
  1434                           ; load TBLPTR registers with __pidataBANK1
  1435  015E18  0E36               	movlw	low __pidataBANK1
  1436  015E1A  6EF6               	movwf	tblptrl,c
  1437  015E1C  0E7F               	movlw	high __pidataBANK1
  1438  015E1E  6EF7               	movwf	tblptrh,c
  1439  015E20  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1440  015E22  6EF8               	movwf	tblptru,c
  1441  015E24  EE01  F0EC         	lfsr	0,__pdataBANK1
  1442  015E28  EE10 F010          	lfsr	1,16
  1443  015E2C                     copy_data0:
  1444  015E2C  0009               	tblrd		*+
  1445  015E2E  CFF5 FFEE          	movff	tablat,postinc0
  1446  015E32  50E5               	movf	postdec1,w,c
  1447  015E34  50E1               	movf	fsr1l,w,c
  1448  015E36  E1FA               	bnz	copy_data0
  1449                           
  1450                           ; Initialize objects allocated to BANK0 (3 bytes)
  1451                           ; load TBLPTR registers with __pidataBANK0
  1452  015E38  0EFE               	movlw	low __pidataBANK0
  1453  015E3A  6EF6               	movwf	tblptrl,c
  1454  015E3C  0E7F               	movlw	high __pidataBANK0
  1455  015E3E  6EF7               	movwf	tblptrh,c
  1456  015E40  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1457  015E42  6EF8               	movwf	tblptru,c
  1458  015E44  0009               	tblrd		*+	;fetch initializer
  1459  015E46  CFF5 F0FA          	movff	tablat,__pdataBANK0
  1460  015E4A  0009               	tblrd		*+	;fetch initializer
  1461  015E4C  CFF5 F0FB          	movff	tablat,__pdataBANK0+1
  1462  015E50  0009               	tblrd		*+	;fetch initializer
  1463  015E52  CFF5 F0FC          	movff	tablat,__pdataBANK0+2
  1464                           
  1465                           ; Initialize objects allocated to COMRAM (10 bytes)
  1466                           ; load TBLPTR registers with __pidataCOMRAM
  1467  015E56  0EA2               	movlw	low __pidataCOMRAM
  1468  015E58  6EF6               	movwf	tblptrl,c
  1469  015E5A  0E7F               	movlw	high __pidataCOMRAM
  1470  015E5C  6EF7               	movwf	tblptrh,c
  1471  015E5E  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1472  015E60  6EF8               	movwf	tblptru,c
  1473  015E62  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1474  015E66  EE10 F00A          	lfsr	1,10
  1475  015E6A                     copy_data1:
  1476  015E6A  0009               	tblrd		*+
  1477  015E6C  CFF5 FFEE          	movff	tablat,postinc0
  1478  015E70  50E5               	movf	postdec1,w,c
  1479  015E72  50E1               	movf	fsr1l,w,c
  1480  015E74  E1FA               	bnz	copy_data1
  1481                           
  1482                           ; Clear objects allocated to BIGRAM (300 bytes)
  1483  015E76  EE02  F07D         	lfsr	0,__pbssBIGRAM
  1484  015E7A  EE11 F02C          	lfsr	1,300
  1485  015E7E                     clear_0:
  1486  015E7E  6AEE               	clrf	postinc0,c
  1487  015E80  50E5               	movf	postdec1,w,c
  1488  015E82  50E1               	movf	fsr1l,w,c
  1489  015E84  E1FC               	bnz	clear_0
  1490  015E86  50E2               	movf	fsr1h,w,c
  1491  015E88  E1FA               	bnz	clear_0
  1492                           
  1493                           ; Clear objects allocated to BANK2 (100 bytes)
  1494  015E8A  EE02  F000         	lfsr	0,__pbssBANK2
  1495  015E8E  0E64               	movlw	100
  1496  015E90                     clear_1:
  1497  015E90  6AEE               	clrf	postinc0,c
  1498  015E92  06E8               	decf	wreg,f,c
  1499  015E94  E1FD               	bnz	clear_1
  1500                           
  1501                           ; Clear objects allocated to BANK1 (236 bytes)
  1502  015E96  EE01  F000         	lfsr	0,__pbssBANK1
  1503  015E9A  0EEC               	movlw	236
  1504  015E9C                     clear_2:
  1505  015E9C  6AEE               	clrf	postinc0,c
  1506  015E9E  06E8               	decf	wreg,f,c
  1507  015EA0  E1FD               	bnz	clear_2
  1508                           
  1509                           ; Clear objects allocated to BANK0 (45 bytes)
  1510  015EA2  EE00  F0CD         	lfsr	0,__pbssBANK0
  1511  015EA6  0E2D               	movlw	45
  1512  015EA8                     clear_3:
  1513  015EA8  6AEE               	clrf	postinc0,c
  1514  015EAA  06E8               	decf	wreg,f,c
  1515  015EAC  E1FD               	bnz	clear_3
  1516                           
  1517                           ; Clear objects allocated to COMRAM (26 bytes)
  1518  015EAE  EE00  F025         	lfsr	0,__pbssCOMRAM
  1519  015EB2  0E1A               	movlw	26
  1520  015EB4                     clear_4:
  1521  015EB4  6AEE               	clrf	postinc0,c
  1522  015EB6  06E8               	decf	wreg,f,c
  1523  015EB8  E1FD               	bnz	clear_4
  1524  015EBA                     end_of_initialization:
  1525                           	opt stack 0
  1526  015EBA                     __end_of__initialization:
  1527                           	opt stack 0
  1528  015EBA  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1529  015EBC  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1530  015EBE  0100               	movlb	0
  1531  015EC0  EF7E  F096         	goto	_main	;jump to C main() function
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1h	equ	0xFE2
  1540                           fsr1l	equ	0xFE1
  1541                           
  1542                           	psect	bssCOMRAM
  1543  000025                     __pbssCOMRAM:
  1544                           	opt stack 0
  1545  000025                     _lQueue:
  1546                           	opt stack 0
  1547  000025                     	ds	3
  1548  000028                     _COUNTER:
  1549                           	opt stack 0
  1550  000028                     	ds	2
  1551  00002A                     _lMotor:
  1552                           	opt stack 0
  1553  00002A                     	ds	2
  1554  00002C                     HMI_GRender@a:
  1555                           	opt stack 0
  1556  00002C                     	ds	2
  1557  00002E                     Timer2_Init@PRE:
  1558                           	opt stack 0
  1559  00002E                     	ds	1
  1560  00002F                     Timer2_Init@INDEX:
  1561                           	opt stack 0
  1562  00002F                     	ds	1
  1563  000030                     Timer0_Init@PRE:
  1564                           	opt stack 0
  1565  000030                     	ds	1
  1566  000031                     _INDEX:
  1567                           	opt stack 0
  1568  000031                     	ds	1
  1569  000032                     rand@screw:
  1570                           	opt stack 0
  1571  000032                     	ds	1
  1572  000033                     OutSeg@a:
  1573                           	opt stack 0
  1574  000033                     	ds	1
  1575  000034                     OutSeg@segset:
  1576                           	opt stack 0
  1577  000034                     	ds	1
  1578  000035                     OutSeg@cur:
  1579                           	opt stack 0
  1580  000035                     	ds	1
  1581  000036                     _lBufferY:
  1582                           	opt stack 0
  1583  000036                     	ds	1
  1584  000037                     _lBufferX:
  1585                           	opt stack 0
  1586  000037                     	ds	1
  1587  000038                     _I2C1T:
  1588                           	opt stack 0
  1589  000038                     	ds	7
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           postdec1	equ	0xFE5
  1597                           fsr1h	equ	0xFE2
  1598                           fsr1l	equ	0xFE1
  1599                           
  1600                           	psect	dataCOMRAM
  1601  00003F                     __pdataCOMRAM:
  1602                           	opt stack 0
  1603  00003F                     _gCursor:
  1604                           	opt stack 0
  1605  00003F                     	ds	4
  1606  000043                     _Bus_State:
  1607                           	opt stack 0
  1608  000043                     	ds	1
  1609  000044                     	ds	1
  1610  000045                     	ds	1
  1611  000046                     	ds	1
  1612  000047                     _l:
  1613                           	opt stack 0
  1614  000047                     	ds	1
  1615  000048                     _w:
  1616                           	opt stack 0
  1617  000048                     	ds	1
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           postdec1	equ	0xFE5
  1625                           fsr1h	equ	0xFE2
  1626                           fsr1l	equ	0xFE1
  1627                           
  1628                           	psect	bssBANK0
  1629  0000CD                     __pbssBANK0:
  1630                           	opt stack 0
  1631  0000CD                     _lStepFunction:
  1632                           	opt stack 0
  1633  0000CD                     	ds	3
  1634  0000D0                     _diff:
  1635                           	opt stack 0
  1636  0000D0                     	ds	2
  1637  0000D2                     _angle:
  1638                           	opt stack 0
  1639  0000D2                     	ds	2
  1640  0000D4                     _steps:
  1641                           	opt stack 0
  1642  0000D4                     	ds	2
  1643  0000D6                     _speed:
  1644                           	opt stack 0
  1645  0000D6                     	ds	2
  1646  0000D8                     _pShiftVal:
  1647                           	opt stack 0
  1648  0000D8                     	ds	2
  1649  0000DA                     _val:
  1650                           	opt stack 0
  1651  0000DA                     	ds	2
  1652  0000DC                     _lCurrent:
  1653                           	opt stack 0
  1654  0000DC                     	ds	2
  1655  0000DE                     _gBackcolour:
  1656                           	opt stack 0
  1657  0000DE                     	ds	2
  1658  0000E0                     _rightState:
  1659                           	opt stack 0
  1660  0000E0                     	ds	1
  1661  0000E1                     _leftState:
  1662                           	opt stack 0
  1663  0000E1                     	ds	1
  1664  0000E2                     _downState:
  1665                           	opt stack 0
  1666  0000E2                     	ds	1
  1667  0000E3                     _upState:
  1668                           	opt stack 0
  1669  0000E3                     	ds	1
  1670  0000E4                     Event_TestButton@j:
  1671                           	opt stack 0
  1672  0000E4                     	ds	1
  1673  0000E5                     _u:
  1674                           	opt stack 0
  1675  0000E5                     	ds	1
  1676  0000E6                     _j:
  1677                           	opt stack 0
  1678  0000E6                     	ds	1
  1679  0000E7                     _i:
  1680                           	opt stack 0
  1681  0000E7                     	ds	1
  1682  0000E8                     _ADC_Initialised:
  1683                           	opt stack 0
  1684  0000E8                     	ds	1
  1685  0000E9                     _clearall:
  1686                           	opt stack 0
  1687  0000E9                     	ds	1
  1688  0000EA                     _PortC:
  1689                           	opt stack 0
  1690  0000EA                     	ds	10
  1691  0000F4                     _Stepper:
  1692                           	opt stack 0
  1693  0000F4                     	ds	6
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           postdec1	equ	0xFE5
  1701                           fsr1h	equ	0xFE2
  1702                           fsr1l	equ	0xFE1
  1703                           
  1704                           	psect	dataBANK0
  1705  0000FA                     __pdataBANK0:
  1706                           	opt stack 0
  1707  0000FA                     _gForecolour:
  1708                           	opt stack 0
  1709  0000FA                     	ds	2
  1710  0000FC                     _change:
  1711                           	opt stack 0
  1712  0000FC                     	ds	1
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1h	equ	0xFE2
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           	psect	bssBANK1
  1724  000100                     __pbssBANK1:
  1725                           	opt stack 0
  1726  000100                     _ADCVoltage:
  1727                           	opt stack 0
  1728  000100                     	ds	4
  1729  000104                     Timer2_Init@DIV:
  1730                           	opt stack 0
  1731  000104                     	ds	4
  1732  000108                     Timer0_Init@DIV:
  1733                           	opt stack 0
  1734  000108                     	ds	4
  1735  00010C                     _gISR:
  1736                           	opt stack 0
  1737  00010C                     	ds	3
  1738  00010F                     _I2C2_More:
  1739                           	opt stack 0
  1740  00010F                     	ds	3
  1741  000112                     _I2C1_More:
  1742                           	opt stack 0
  1743  000112                     	ds	3
  1744  000115                     _I2C2_Done:
  1745                           	opt stack 0
  1746  000115                     	ds	3
  1747  000118                     _I2C1_Done:
  1748                           	opt stack 0
  1749  000118                     	ds	3
  1750  00011B                     _errno:
  1751                           	opt stack 0
  1752  00011B                     	ds	2
  1753  00011D                     _IRDistance:
  1754                           	opt stack 0
  1755  00011D                     	ds	2
  1756  00011F                     _dip:
  1757                           	opt stack 0
  1758  00011F                     	ds	2
  1759  000121                     _mode:
  1760                           	opt stack 0
  1761  000121                     	ds	2
  1762  000123                     _locked:
  1763                           	opt stack 0
  1764  000123                     	ds	2
  1765  000125                     _remainingSteps:
  1766                           	opt stack 0
  1767  000125                     	ds	2
  1768  000127                     SPI_Send9@dat:
  1769                           	opt stack 0
  1770  000127                     	ds	2
  1771  000129                     _HMIBoard:
  1772                           	opt stack 0
  1773  000129                     	ds	58
  1774  000163                     _SPI1:
  1775                           	opt stack 0
  1776  000163                     	ds	11
  1777  00016E                     _SPI2:
  1778                           	opt stack 0
  1779  00016E                     	ds	11
  1780  000179                     _DIPSwitch:
  1781                           	opt stack 0
  1782  000179                     	ds	10
  1783  000183                     _TestButton:
  1784                           	opt stack 0
  1785  000183                     	ds	10
  1786  00018D                     _PortG:
  1787                           	opt stack 0
  1788  00018D                     	ds	10
  1789  000197                     _PortE:
  1790                           	opt stack 0
  1791  000197                     	ds	10
  1792  0001A1                     _PortD:
  1793                           	opt stack 0
  1794  0001A1                     	ds	10
  1795  0001AB                     _PortB:
  1796                           	opt stack 0
  1797  0001AB                     	ds	10
  1798  0001B5                     _PortA:
  1799                           	opt stack 0
  1800  0001B5                     	ds	10
  1801  0001BF                     _PortF:
  1802                           	opt stack 0
  1803  0001BF                     	ds	10
  1804  0001C9                     _I2C2T:
  1805                           	opt stack 0
  1806  0001C9                     	ds	7
  1807  0001D0                     _ADC_AN3:
  1808                           	opt stack 0
  1809  0001D0                     	ds	5
  1810  0001D5                     _ADC_AN2:
  1811                           	opt stack 0
  1812  0001D5                     	ds	5
  1813  0001DA                     _ADC_AN1:
  1814                           	opt stack 0
  1815  0001DA                     	ds	5
  1816  0001DF                     _ADC_AN0:
  1817                           	opt stack 0
  1818  0001DF                     	ds	5
  1819  0001E4                     LCD_DrawRectangle@p4:
  1820                           	opt stack 0
  1821  0001E4                     	ds	4
  1822  0001E8                     LCD_DrawRectangle@p2:
  1823                           	opt stack 0
  1824  0001E8                     	ds	4
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1h	equ	0xFE2
  1833                           fsr1l	equ	0xFE1
  1834                           
  1835                           	psect	dataBANK1
  1836  0001EC                     __pdataBANK1:
  1837                           	opt stack 0
  1838  0001EC                     Console_Render@F6956:
  1839                           	opt stack 0
  1840  0001EC                     	ds	4
  1841  0001F0                     _gLineSize:
  1842                           	opt stack 0
  1843  0001F0                     	ds	4
  1844  0001F4                     _gCharSize:
  1845                           	opt stack 0
  1846  0001F4                     	ds	4
  1847  0001F8                     _currentPos:
  1848                           	opt stack 0
  1849  0001F8                     	ds	2
  1850  0001FA                     _direction:
  1851                           	opt stack 0
  1852  0001FA                     	ds	2
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           postdec1	equ	0xFE5
  1860                           fsr1h	equ	0xFE2
  1861                           fsr1l	equ	0xFE1
  1862                           
  1863                           	psect	bssBANK2
  1864  000200                     __pbssBANK2:
  1865                           	opt stack 0
  1866  000200                     _lCBuffer:
  1867                           	opt stack 0
  1868  000200                     	ds	30
  1869  00021E                     Console_MakeField@Fill:
  1870                           	opt stack 0
  1871  00021E                     	ds	70
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           
  1882                           	psect	bssBIGRAM
  1883  00027D                     __pbssBIGRAM:
  1884                           	opt stack 0
  1885  00027D                     _lBuffer:
  1886                           	opt stack 0
  1887  00027D                     	ds	300
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1h	equ	0xFE2
  1896                           fsr1l	equ	0xFE1
  1897                           
  1898                           	psect	cstackBANK2
  1899  000264                     __pcstackBANK2:
  1900                           	opt stack 0
  1901  000264                     ?_pow:
  1902                           	opt stack 0
  1903  000264                     pow@x:
  1904                           	opt stack 0
  1905  000264                     _printf$15267:
  1906                           	opt stack 0
  1907                           
  1908                           ; 4 bytes @ 0x0
  1909  000264                     	ds	4
  1910  000268                     printf@ap:
  1911                           	opt stack 0
  1912  000268                     pow@y:
  1913                           	opt stack 0
  1914                           
  1915                           ; 4 bytes @ 0x4
  1916  000268                     	ds	2
  1917  00026A                     printf@flag:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x6
  1921  00026A                     	ds	2
  1922  00026C                     printf@prec:
  1923                           	opt stack 0
  1924  00026C                     _pow$15268:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x8
  1928  00026C                     	ds	2
  1929  00026E                     printf@val:
  1930                           	opt stack 0
  1931                           
  1932                           ; 4 bytes @ 0xA
  1933  00026E                     	ds	2
  1934  000270                     _pow$15269:
  1935                           	opt stack 0
  1936                           
  1937                           ; 4 bytes @ 0xC
  1938  000270                     	ds	2
  1939  000272                     printf@exp:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0xE
  1943  000272                     	ds	2
  1944  000274                     pow@sign:
  1945                           	opt stack 0
  1946  000274                     printf@tmpval:
  1947                           	opt stack 0
  1948                           
  1949                           ; 4 bytes @ 0x10
  1950  000274                     	ds	1
  1951  000275                     pow@yi:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x11
  1955  000275                     	ds	3
  1956  000278                     printf@fval:
  1957                           	opt stack 0
  1958                           
  1959                           ; 4 bytes @ 0x14
  1960  000278                     	ds	4
  1961  00027C                     printf@c:
  1962                           	opt stack 0
  1963                           
  1964                           ; 1 bytes @ 0x18
  1965  00027C                     	ds	1
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           postinc0	equ	0xFEE
  1971                           wreg	equ	0xFE8
  1972                           postdec1	equ	0xFE5
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           
  1976                           	psect	cstackBANK1
  1977  0001FC                     __pcstackBANK1:
  1978                           	opt stack 0
  1979  0001FC                     _main$15263:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x0
  1983  0001FC                     	ds	4
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1h	equ	0xFE2
  1992                           fsr1l	equ	0xFE1
  1993                           
  1994                           	psect	cstackBANK0
  1995  000060                     __pcstackBANK0:
  1996                           	opt stack 0
  1997  000060                     ??_Console_ClearCursor:
  1998  000060                     ??_ADC_SetChannel:
  1999  000060                     ??_ADC_ConversionTime:
  2000  000060                     ??_ADC_SetupIO:
  2001  000060                     ??_Console_Init:
  2002  000060                     ??_Console_NewLine:
  2003  000060                     ??_Console_FormFeed:
  2004  000060                     ??_HMI_SetButton:
  2005  000060                     ??_getMode:
  2006  000060                     ?_GetPortProperties:
  2007                           	opt stack 0
  2008  000060                     ?_GetPortPORT:
  2009                           	opt stack 0
  2010  000060                     ?_GetPortTRIS:
  2011                           	opt stack 0
  2012  000060                     ?___wmul:
  2013                           	opt stack 0
  2014  000060                     ?___awmod:
  2015                           	opt stack 0
  2016  000060                     ?___lwdiv:
  2017                           	opt stack 0
  2018  000060                     ?___lwmod:
  2019                           	opt stack 0
  2020  000060                     ?__tdiv_to_l_:
  2021                           	opt stack 0
  2022  000060                     ?__div_to_l_:
  2023                           	opt stack 0
  2024  000060                     ?___fldiv:
  2025                           	opt stack 0
  2026  000060                     ?_frexp:
  2027                           	opt stack 0
  2028  000060                     ?___flneg:
  2029                           	opt stack 0
  2030  000060                     ?___lldiv:
  2031                           	opt stack 0
  2032  000060                     ?___xxtofl:
  2033                           	opt stack 0
  2034  000060                     Mode_Set@pMode:
  2035                           	opt stack 0
  2036  000060                     ToSegment@pCHR:
  2037                           	opt stack 0
  2038  000060                     HMI_SetBar@pValue:
  2039                           	opt stack 0
  2040  000060                     ADC_ClockDivision@pDivide:
  2041                           	opt stack 0
  2042  000060                     Port_GetPin@pInput:
  2043                           	opt stack 0
  2044  000060                     Port_GetQuad@pInput:
  2045                           	opt stack 0
  2046  000060                     SPI_DisableISR@pInput:
  2047                           	opt stack 0
  2048  000060                     SPI_DCS@pInput:
  2049                           	opt stack 0
  2050  000060                     SPI_Send@pInput:
  2051                           	opt stack 0
  2052  000060                     Byte_SetBit@pInput:
  2053                           	opt stack 0
  2054  000060                     Byte_GetBit@pInput:
  2055                           	opt stack 0
  2056  000060                     Byte_SetZone@pInput:
  2057                           	opt stack 0
  2058  000060                     Byte_GetZone@pInput:
  2059                           	opt stack 0
  2060  000060                     Byte_SetByte@pInput:
  2061                           	opt stack 0
  2062  000060                     delay_ms@ms:
  2063                           	opt stack 0
  2064  000060                     delay_us@us:
  2065                           	opt stack 0
  2066  000060                     reverse@input:
  2067                           	opt stack 0
  2068  000060                     Console_SetForecolour@pColour:
  2069                           	opt stack 0
  2070  000060                     ADC_Sequence@pItemA:
  2071                           	opt stack 0
  2072  000060                     ___wmul@multiplier:
  2073                           	opt stack 0
  2074  000060                     ___awmod@dividend:
  2075                           	opt stack 0
  2076  000060                     ___lwdiv@dividend:
  2077                           	opt stack 0
  2078  000060                     ___lwmod@dividend:
  2079                           	opt stack 0
  2080  000060                     MXK_Queue@pCallback:
  2081                           	opt stack 0
  2082  000060                     Timer0_Start@pFunction:
  2083                           	opt stack 0
  2084  000060                     __div_to_l_@f1:
  2085                           	opt stack 0
  2086  000060                     ___flge@ff1:
  2087                           	opt stack 0
  2088  000060                     ___flneg@f1:
  2089                           	opt stack 0
  2090  000060                     __tdiv_to_l_@f1:
  2091                           	opt stack 0
  2092  000060                     ___lldiv@dividend:
  2093                           	opt stack 0
  2094  000060                     ___fldiv@b:
  2095                           	opt stack 0
  2096  000060                     ___xxtofl@val:
  2097                           	opt stack 0
  2098  000060                     frexp@value:
  2099                           	opt stack 0
  2100                           
  2101                           ; 4 bytes @ 0x0
  2102  000060                     	ds	1
  2103  000061                     ADC_SetChannel@pChannel:
  2104                           	opt stack 0
  2105  000061                     ADC_ClockDivision@reg:
  2106                           	opt stack 0
  2107  000061                     ADC_ConversionTime@pCount:
  2108                           	opt stack 0
  2109  000061                     HMI_SetSegments@pString:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x1
  2113  000061                     	ds	1
  2114  000062                     GetPortProperties@pInput:
  2115                           	opt stack 0
  2116  000062                     GetPortPORT@pInput:
  2117                           	opt stack 0
  2118  000062                     GetPortTRIS@pInput:
  2119                           	opt stack 0
  2120  000062                     Port_GetPin@pPin:
  2121                           	opt stack 0
  2122  000062                     Port_GetQuad@pQuad:
  2123                           	opt stack 0
  2124  000062                     SPI_Send@pData:
  2125                           	opt stack 0
  2126  000062                     Byte_SetBit@pBit:
  2127                           	opt stack 0
  2128  000062                     Byte_GetBit@pBit:
  2129                           	opt stack 0
  2130  000062                     Byte_SetZone@pMax:
  2131                           	opt stack 0
  2132  000062                     Byte_GetZone@pMax:
  2133                           	opt stack 0
  2134  000062                     Byte_SetByte@pValue:
  2135                           	opt stack 0
  2136  000062                     Console_Init@x:
  2137                           	opt stack 0
  2138  000062                     Console_FormFeed@x:
  2139                           	opt stack 0
  2140  000062                     ADC_SetupIO@pChannel:
  2141                           	opt stack 0
  2142  000062                     ADC_ClockDivision@unfound:
  2143                           	opt stack 0
  2144  000062                     reverse@length:
  2145                           	opt stack 0
  2146  000062                     ADC_Sequence@pItemB:
  2147                           	opt stack 0
  2148  000062                     ADC_Start@pInput:
  2149                           	opt stack 0
  2150  000062                     ___wmul@multiplicand:
  2151                           	opt stack 0
  2152  000062                     ___awmod@divisor:
  2153                           	opt stack 0
  2154  000062                     ___lwdiv@divisor:
  2155                           	opt stack 0
  2156  000062                     ___lwmod@divisor:
  2157                           	opt stack 0
  2158  000062                     delay_ms@u:
  2159                           	opt stack 0
  2160  000062                     delay_us@u:
  2161                           	opt stack 0
  2162  000062                     HMI_SetButton@reindex:
  2163                           	opt stack 0
  2164                           
  2165                           ; 4 bytes @ 0x2
  2166  000062                     	ds	1
  2167  000063                     ??_Port_GetPin:
  2168  000063                     ??_Port_GetQuad:
  2169  000063                     ??_Byte_GetBit:
  2170  000063                     LCD_Write@mode:
  2171                           	opt stack 0
  2172  000063                     Byte_SetBit@pValue:
  2173                           	opt stack 0
  2174  000063                     Byte_SetZone@pChunk:
  2175                           	opt stack 0
  2176  000063                     Byte_GetZone@pChunk:
  2177                           	opt stack 0
  2178  000063                     Console_Init@y:
  2179                           	opt stack 0
  2180  000063                     Console_FormFeed@y:
  2181                           	opt stack 0
  2182  000063                     OutSeg@pSegment:
  2183                           	opt stack 0
  2184  000063                     ADC_SetupIO@MASK:
  2185                           	opt stack 0
  2186  000063                     Motor_Move@pMotor:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x3
  2190  000063                     	ds	1
  2191  000064                     ??_Byte_SetBit:
  2192  000064                     ??_Console_IncrementCursor:
  2193  000064                     ??_OutSeg:
  2194  000064                     ??_ADC_Start:
  2195  000064                     ??___xxtofl:
  2196  000064                     LCD_Write@value:
  2197                           	opt stack 0
  2198  000064                     Byte_GetBit@Output:
  2199                           	opt stack 0
  2200  000064                     Byte_SetZone@pChunkSize:
  2201                           	opt stack 0
  2202  000064                     Byte_GetZone@pChunkSize:
  2203                           	opt stack 0
  2204  000064                     reverse@tempVar:
  2205                           	opt stack 0
  2206  000064                     ___awmod@counter:
  2207                           	opt stack 0
  2208  000064                     ___lwdiv@counter:
  2209                           	opt stack 0
  2210  000064                     ___lwmod@counter:
  2211                           	opt stack 0
  2212  000064                     HMI_SetSegments@in:
  2213                           	opt stack 0
  2214  000064                     ADC_Init@pInput:
  2215                           	opt stack 0
  2216  000064                     ___wmul@product:
  2217                           	opt stack 0
  2218  000064                     frexp@eptr:
  2219                           	opt stack 0
  2220  000064                     __div_to_l_@f2:
  2221                           	opt stack 0
  2222  000064                     ___flge@ff2:
  2223                           	opt stack 0
  2224  000064                     __tdiv_to_l_@f2:
  2225                           	opt stack 0
  2226  000064                     ___lldiv@divisor:
  2227                           	opt stack 0
  2228  000064                     ___fldiv@a:
  2229                           	opt stack 0
  2230                           
  2231                           ; 4 bytes @ 0x4
  2232  000064                     	ds	1
  2233  000065                     ??_Byte_GetZone:
  2234  000065                     ?_Console_MakeField:
  2235                           	opt stack 0
  2236  000065                     Set_Addr_Window@ys:
  2237                           	opt stack 0
  2238  000065                     Set_Rotation@m:
  2239                           	opt stack 0
  2240  000065                     Port_GetPin@Output:
  2241                           	opt stack 0
  2242  000065                     Port_GetQuad@Output:
  2243                           	opt stack 0
  2244  000065                     Byte_SetZone@pValue:
  2245                           	opt stack 0
  2246  000065                     ___awmod@sign:
  2247                           	opt stack 0
  2248  000065                     LCD_Word_Write@value:
  2249                           	opt stack 0
  2250  000065                     reverse@iterator:
  2251                           	opt stack 0
  2252  000065                     Motor_Move@pDelta:
  2253                           	opt stack 0
  2254  000065                     ___lwdiv@quotient:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x5
  2258  000065                     	ds	1
  2259  000066                     ??_frexp:
  2260  000066                     ??_Byte_SetZone:
  2261  000066                     ?___awdiv:
  2262                           	opt stack 0
  2263  000066                     Set_Addr_Window@xe:
  2264                           	opt stack 0
  2265  000066                     Set_Rotation@rotation:
  2266                           	opt stack 0
  2267  000066                     Byte_GetZone@MASK:
  2268                           	opt stack 0
  2269  000066                     OutSeg@pInput:
  2270                           	opt stack 0
  2271  000066                     HMI_SetButton@pValue:
  2272                           	opt stack 0
  2273  000066                     ADC_Init@pChannel:
  2274                           	opt stack 0
  2275  000066                     MXK_BlockSwitchTo@CUR:
  2276                           	opt stack 0
  2277  000066                     MXK_SwitchTo@CUR:
  2278                           	opt stack 0
  2279  000066                     ___awdiv@dividend:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x6
  2283  000066                     	ds	1
  2284  000067                     ??_Console_MakeField:
  2285  000067                     Set_Addr_Window@ye:
  2286                           	opt stack 0
  2287  000067                     Byte_GetZone@Offset:
  2288                           	opt stack 0
  2289  000067                     OutSeg@out:
  2290                           	opt stack 0
  2291  000067                     HMI_SetButton@v:
  2292                           	opt stack 0
  2293  000067                     MXK_BlockSwitchTo@pModule:
  2294                           	opt stack 0
  2295  000067                     MXK_SwitchTo@pModule:
  2296                           	opt stack 0
  2297  000067                     itos@input:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x7
  2301  000067                     	ds	1
  2302  000068                     ??__tdiv_to_l_:
  2303  000068                     ??___fldiv:
  2304  000068                     ??___flge:
  2305  000068                     Set_Addr_Window@xs:
  2306                           	opt stack 0
  2307  000068                     Byte_GetZone@Output:
  2308                           	opt stack 0
  2309  000068                     ___xxtofl@sign:
  2310                           	opt stack 0
  2311  000068                     HMI_Render@a:
  2312                           	opt stack 0
  2313  000068                     ___awdiv@divisor:
  2314                           	opt stack 0
  2315  000068                     __div_to_l_@quot:
  2316                           	opt stack 0
  2317  000068                     ___lldiv@quotient:
  2318                           	opt stack 0
  2319                           
  2320                           ; 4 bytes @ 0x8
  2321  000068                     	ds	1
  2322  000069                     Byte_SetZone@Offset:
  2323                           	opt stack 0
  2324  000069                     ___xxtofl@exp:
  2325                           	opt stack 0
  2326  000069                     LCD_Fill@pColour:
  2327                           	opt stack 0
  2328  000069                     LCD_FillRectangle@pColour:
  2329                           	opt stack 0
  2330  000069                     Byte_GetPair@pInput:
  2331                           	opt stack 0
  2332  000069                     itos@destination:
  2333                           	opt stack 0
  2334  000069                     Console_MakeField@Index:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x9
  2338  000069                     	ds	1
  2339  00006A                     Byte_SetZone@MASK:
  2340                           	opt stack 0
  2341  00006A                     ___awdiv@counter:
  2342                           	opt stack 0
  2343  00006A                     ___xxtofl@arg:
  2344                           	opt stack 0
  2345                           
  2346                           ; 4 bytes @ 0xA
  2347  00006A                     	ds	1
  2348  00006B                     LCD_Fill@i:
  2349                           	opt stack 0
  2350  00006B                     Byte_GetPair@pPair:
  2351                           	opt stack 0
  2352  00006B                     Console_MakeField@pInput:
  2353                           	opt stack 0
  2354  00006B                     ___awdiv@sign:
  2355                           	opt stack 0
  2356  00006B                     Byte_SetPair@pInput:
  2357                           	opt stack 0
  2358  00006B                     Byte_SetQuad@pInput:
  2359                           	opt stack 0
  2360  00006B                     itos@Data:
  2361                           	opt stack 0
  2362  00006B                     LCD_FillRectangle@pPoint:
  2363                           	opt stack 0
  2364  00006B                     __tdiv_to_l_@quot:
  2365                           	opt stack 0
  2366                           
  2367                           ; 4 bytes @ 0xB
  2368  00006B                     	ds	1
  2369  00006C                     LCD_Fill@j:
  2370                           	opt stack 0
  2371  00006C                     __div_to_l_@cntr:
  2372                           	opt stack 0
  2373  00006C                     ___lldiv@counter:
  2374                           	opt stack 0
  2375  00006C                     ___fldiv@sign:
  2376                           	opt stack 0
  2377  00006C                     Word_GetPair@pInput:
  2378                           	opt stack 0
  2379  00006C                     Console_MakeField@Column:
  2380                           	opt stack 0
  2381  00006C                     ___awdiv@quotient:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0xC
  2385  00006C                     	ds	1
  2386  00006D                     ?___llmod:
  2387                           	opt stack 0
  2388  00006D                     Byte_SetPair@pPair:
  2389                           	opt stack 0
  2390  00006D                     Byte_SetQuad@pQuad:
  2391                           	opt stack 0
  2392  00006D                     __div_to_l_@exp1:
  2393                           	opt stack 0
  2394  00006D                     itos@Length:
  2395                           	opt stack 0
  2396  00006D                     Timer0_Init@pFrequency:
  2397                           	opt stack 0
  2398  00006D                     Timer2_Init@pFrequency:
  2399                           	opt stack 0
  2400  00006D                     ___llmod@dividend:
  2401                           	opt stack 0
  2402  00006D                     ___fldiv@rem:
  2403                           	opt stack 0
  2404                           
  2405                           ; 4 bytes @ 0xD
  2406  00006D                     	ds	1
  2407  00006E                     ??_Console_Tab:
  2408  00006E                     ?___flmul:
  2409                           	opt stack 0
  2410  00006E                     Byte_SetPair@pValue:
  2411                           	opt stack 0
  2412  00006E                     Byte_SetQuad@pValue:
  2413                           	opt stack 0
  2414  00006E                     Word_GetPair@pPair:
  2415                           	opt stack 0
  2416  00006E                     _Console_MakeField$10974:
  2417                           	opt stack 0
  2418  00006E                     ___flmul@b:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0xE
  2422  00006E                     	ds	1
  2423  00006F                     __tdiv_to_l_@cntr:
  2424                           	opt stack 0
  2425  00006F                     Port_SetPin@pInput:
  2426                           	opt stack 0
  2427  00006F                     Port_Set@pInput:
  2428                           	opt stack 0
  2429  00006F                     SPI_MinSpeed@pInput:
  2430                           	opt stack 0
  2431  00006F                     SPI_MaxSpeed@pInput:
  2432                           	opt stack 0
  2433  00006F                     Word_SetPair@pInput:
  2434                           	opt stack 0
  2435  00006F                     PortProperty_Valid@pInput:
  2436                           	opt stack 0
  2437  00006F                     itos@Out:
  2438                           	opt stack 0
  2439  00006F                     LCD_FillRectangle@pSize:
  2440                           	opt stack 0
  2441                           
  2442                           ; 4 bytes @ 0xF
  2443  00006F                     	ds	1
  2444  000070                     Console_MakeField@x:
  2445                           	opt stack 0
  2446  000070                     __tdiv_to_l_@exp1:
  2447                           	opt stack 0
  2448                           
  2449                           ; 1 bytes @ 0x10
  2450  000070                     	ds	1
  2451  000071                     ??_Timer2_Init:
  2452  000071                     ??_Timer0_Init:
  2453  000071                     Port_SetPin@pPin:
  2454                           	opt stack 0
  2455  000071                     Port_Set@pValue:
  2456                           	opt stack 0
  2457  000071                     Word_SetPair@pPair:
  2458                           	opt stack 0
  2459  000071                     PortProperty_Valid@pPinDrive:
  2460                           	opt stack 0
  2461  000071                     Console_MakeField@y:
  2462                           	opt stack 0
  2463  000071                     HMI_SetNumber@pInput:
  2464                           	opt stack 0
  2465  000071                     ___fldiv@new_exp:
  2466                           	opt stack 0
  2467  000071                     ___llmod@divisor:
  2468                           	opt stack 0
  2469                           
  2470                           ; 4 bytes @ 0x11
  2471  000071                     	ds	1
  2472  000072                     ??_Port_Set:
  2473  000072                     Port_SetPin@pValue:
  2474                           	opt stack 0
  2475  000072                     Word_SetPair@pValue:
  2476                           	opt stack 0
  2477  000072                     PortProperty_Valid@pPin:
  2478                           	opt stack 0
  2479  000072                     LCD_DrawField@pField:
  2480                           	opt stack 0
  2481  000072                     Timer2_Init@RDIV:
  2482                           	opt stack 0
  2483  000072                     ___flmul@a:
  2484                           	opt stack 0
  2485                           
  2486                           ; 4 bytes @ 0x12
  2487  000072                     	ds	1
  2488  000073                     ??_PortProperty_Valid:
  2489  000073                     ??_LCD_FillRectangle:
  2490  000073                     Port_SetPin@Type:
  2491                           	opt stack 0
  2492  000073                     Console_Tab@t:
  2493                           	opt stack 0
  2494  000073                     Timer0_Init@pCPUClock:
  2495                           	opt stack 0
  2496  000073                     ___fldiv@grs:
  2497                           	opt stack 0
  2498                           
  2499                           ; 4 bytes @ 0x13
  2500  000073                     	ds	1
  2501  000074                     LED_Set@pValue:
  2502                           	opt stack 0
  2503  000074                     Console_Tab@i:
  2504                           	opt stack 0
  2505  000074                     Port_TogglePin@pInput:
  2506                           	opt stack 0
  2507  000074                     LCD_DrawField@pPoint:
  2508                           	opt stack 0
  2509                           
  2510                           ; 4 bytes @ 0x14
  2511  000074                     	ds	1
  2512  000075                     LCD_FillRectangle@i:
  2513                           	opt stack 0
  2514  000075                     LED_Set@pLED:
  2515                           	opt stack 0
  2516  000075                     Console_Tab@c:
  2517                           	opt stack 0
  2518  000075                     ___llmod@counter:
  2519                           	opt stack 0
  2520  000075                     PortProperty_Valid@Errors:
  2521                           	opt stack 0
  2522                           
  2523                           ; 16 bytes @ 0x15
  2524  000075                     	ds	1
  2525  000076                     ??___flmul:
  2526  000076                     ??_Console_PrintChar:
  2527  000076                     LCD_FillRectangle@j:
  2528                           	opt stack 0
  2529  000076                     Port_TogglePin@pPin:
  2530                           	opt stack 0
  2531  000076                     Timer2_Init@pCPUClock:
  2532                           	opt stack 0
  2533                           
  2534                           ; 4 bytes @ 0x16
  2535  000076                     	ds	1
  2536  000077                     Port_TogglePin@Value:
  2537                           	opt stack 0
  2538  000077                     ___fldiv@bexp:
  2539                           	opt stack 0
  2540  000077                     Timer0_Init@DIVIDE:
  2541                           	opt stack 0
  2542                           
  2543                           ; 4 bytes @ 0x17
  2544  000077                     	ds	1
  2545  000078                     LED_Toggle@pLED:
  2546                           	opt stack 0
  2547  000078                     ___fldiv@aexp:
  2548                           	opt stack 0
  2549  000078                     LCD_DrawField@pSize:
  2550                           	opt stack 0
  2551                           
  2552                           ; 4 bytes @ 0x18
  2553  000078                     	ds	1
  2554  000079                     Console_PrintChar@pInput:
  2555                           	opt stack 0
  2556  000079                     Event_DIPSwitch@pState:
  2557                           	opt stack 0
  2558  000079                     Event_TestButton@pState:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x19
  2562  000079                     	ds	1
  2563  00007A                     putch@c:
  2564                           	opt stack 0
  2565  00007A                     Event_DIPSwitch@Bar:
  2566                           	opt stack 0
  2567  00007A                     ___flmul@sign:
  2568                           	opt stack 0
  2569  00007A                     Timer2_Init@DIVIDE:
  2570                           	opt stack 0
  2571                           
  2572                           ; 4 bytes @ 0x1A
  2573  00007A                     	ds	1
  2574  00007B                     ___flmul@aexp:
  2575                           	opt stack 0
  2576  00007B                     Button_Poll@pButton:
  2577                           	opt stack 0
  2578  00007B                     Motor_Speed@pMotor:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x1B
  2582  00007B                     	ds	1
  2583  00007C                     ??_LCD_DrawField:
  2584  00007C                     ___flmul@grs:
  2585                           	opt stack 0
  2586                           
  2587                           ; 4 bytes @ 0x1C
  2588  00007C                     	ds	1
  2589  00007D                     Button_Poll@pIncrement:
  2590                           	opt stack 0
  2591  00007D                     Motor_Speed@pFrequency:
  2592                           	opt stack 0
  2593                           
  2594                           ; 2 bytes @ 0x1D
  2595  00007D                     	ds	1
  2596  00007E                     ??_Button_Poll:
  2597  00007E                     LCD_DrawField@count:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x1E
  2601  00007E                     	ds	1
  2602  00007F                     ??_positionMode:
  2603                           
  2604                           ; 1 bytes @ 0x1F
  2605  00007F                     	ds	1
  2606  000080                     LCD_DrawField@xmax:
  2607                           	opt stack 0
  2608  000080                     ___flmul@bexp:
  2609                           	opt stack 0
  2610                           
  2611                           ; 1 bytes @ 0x20
  2612  000080                     	ds	1
  2613  000081                     LCD_DrawField@ymax:
  2614                           	opt stack 0
  2615  000081                     ___flmul@prod:
  2616                           	opt stack 0
  2617                           
  2618                           ; 4 bytes @ 0x21
  2619  000081                     	ds	1
  2620  000082                     LCD_DrawField@i:
  2621                           	opt stack 0
  2622  000082                     Port_Set@TypeRequired:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x22
  2626  000082                     	ds	1
  2627  000083                     ??_Console_Render:
  2628  000083                     Button_Poll@Pin:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x23
  2632  000083                     	ds	1
  2633  000084                     ??_inputVar:
  2634  000084                     Port_Set@TypeActual:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x24
  2638  000084                     	ds	1
  2639  000085                     PortProperty_Valid@Pair:
  2640                           	opt stack 0
  2641  000085                     Console_Render@temp:
  2642                           	opt stack 0
  2643  000085                     ___flmul@temp:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x25
  2647  000085                     	ds	1
  2648  000086                     Port_Set@Type:
  2649                           	opt stack 0
  2650  000086                     Port_CheckPairType@pInput:
  2651                           	opt stack 0
  2652  000086                     Port_SetPinType@pInput:
  2653                           	opt stack 0
  2654  000086                     Console_Render@lCursor:
  2655                           	opt stack 0
  2656                           
  2657                           ; 4 bytes @ 0x26
  2658  000086                     	ds	1
  2659  000087                     ?_ADC_Voltage:
  2660                           	opt stack 0
  2661  000087                     ?_fround:
  2662                           	opt stack 0
  2663  000087                     ?_scale:
  2664                           	opt stack 0
  2665  000087                     ?___fltol:
  2666                           	opt stack 0
  2667  000087                     ADC_Voltage@pInput:
  2668                           	opt stack 0
  2669  000087                     ___fltol@f1:
  2670                           	opt stack 0
  2671                           
  2672                           ; 4 bytes @ 0x27
  2673  000087                     	ds	1
  2674  000088                     Port_CheckPairType@pPair:
  2675                           	opt stack 0
  2676  000088                     Port_SetPinType@pPin:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x28
  2680  000088                     	ds	1
  2681  000089                     Port_CheckPairType@pDrive:
  2682                           	opt stack 0
  2683  000089                     Port_SetPinType@pType:
  2684                           	opt stack 0
  2685                           
  2686                           ; 1 bytes @ 0x29
  2687  000089                     	ds	1
  2688  00008A                     Port_CheckPairType@Pin1:
  2689                           	opt stack 0
  2690  00008A                     Port_SetPinType@Output:
  2691                           	opt stack 0
  2692  00008A                     Console_Render@x:
  2693                           	opt stack 0
  2694                           
  2695                           ; 1 bytes @ 0x2A
  2696  00008A                     	ds	1
  2697  00008B                     ??_ADC_Voltage:
  2698  00008B                     ??___fltol:
  2699  00008B                     Port_CheckPairType@Pin2:
  2700                           	opt stack 0
  2701  00008B                     Console_Render@y:
  2702                           	opt stack 0
  2703  00008B                     Port_SetPinType@Props:
  2704                           	opt stack 0
  2705  00008B                     _fround$15265:
  2706                           	opt stack 0
  2707  00008B                     _scale$15266:
  2708                           	opt stack 0
  2709                           
  2710                           ; 4 bytes @ 0x2B
  2711  00008B                     	ds	1
  2712  00008C                     Port_CheckPairType@Output:
  2713                           	opt stack 0
  2714                           
  2715                           ; 1 bytes @ 0x2C
  2716  00008C                     	ds	1
  2717  00008D                     LED_Init@pLED:
  2718                           	opt stack 0
  2719  00008D                     Port_CheckPairType@Props:
  2720                           	opt stack 0
  2721  00008D                     Motor_Init@pMotor:
  2722                           	opt stack 0
  2723  00008D                     SPI_Init@pClock:
  2724                           	opt stack 0
  2725  00008D                     ADC_Voltage@max:
  2726                           	opt stack 0
  2727                           
  2728                           ; 4 bytes @ 0x2D
  2729  00008D                     	ds	2
  2730  00008F                     scale@scl:
  2731                           	opt stack 0
  2732  00008F                     ___fltol@sign1:
  2733                           	opt stack 0
  2734  00008F                     Port_CheckQuadType@pInput:
  2735                           	opt stack 0
  2736  00008F                     Motor_Init@pAddress:
  2737                           	opt stack 0
  2738  00008F                     _fround$15264:
  2739                           	opt stack 0
  2740                           
  2741                           ; 4 bytes @ 0x2F
  2742  00008F                     	ds	1
  2743  000090                     ___fltol@exp1:
  2744                           	opt stack 0
  2745                           
  2746                           ; 1 bytes @ 0x30
  2747  000090                     	ds	1
  2748  000091                     Port_CheckQuadType@pQuad:
  2749                           	opt stack 0
  2750  000091                     SPI_Init@pChannel:
  2751                           	opt stack 0
  2752  000091                     ADC_Voltage@ref:
  2753                           	opt stack 0
  2754                           
  2755                           ; 4 bytes @ 0x31
  2756  000091                     	ds	1
  2757  000092                     Port_CheckQuadType@pDrive:
  2758                           	opt stack 0
  2759  000092                     SPI_Init@pMode:
  2760                           	opt stack 0
  2761                           
  2762                           ; 1 bytes @ 0x32
  2763  000092                     	ds	1
  2764  000093                     Port_CheckQuadType@Pair1:
  2765                           	opt stack 0
  2766  000093                     fround@prec:
  2767                           	opt stack 0
  2768  000093                     SPI_Init@pInput:
  2769                           	opt stack 0
  2770                           
  2771                           ; 2 bytes @ 0x33
  2772  000093                     	ds	1
  2773  000094                     ?___fladd:
  2774                           	opt stack 0
  2775  000094                     Port_CheckQuadType@Pair2:
  2776                           	opt stack 0
  2777  000094                     ___fladd@b:
  2778                           	opt stack 0
  2779                           
  2780                           ; 4 bytes @ 0x34
  2781  000094                     	ds	1
  2782  000095                     ??_LCD_Init:
  2783  000095                     Port_CheckQuadType@Output:
  2784                           	opt stack 0
  2785  000095                     ADC_Voltage@output:
  2786                           	opt stack 0
  2787                           
  2788                           ; 4 bytes @ 0x35
  2789  000095                     	ds	1
  2790  000096                     Port_CheckPortType@pInput:
  2791                           	opt stack 0
  2792  000096                     Port_SetQuadType@pInput:
  2793                           	opt stack 0
  2794                           
  2795                           ; 2 bytes @ 0x36
  2796  000096                     	ds	1
  2797  000097                     LCD_Init@i:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x37
  2801  000097                     	ds	1
  2802  000098                     Port_CheckPortType@pDrive:
  2803                           	opt stack 0
  2804  000098                     Port_SetQuadType@pQuad:
  2805                           	opt stack 0
  2806  000098                     ___fladd@a:
  2807                           	opt stack 0
  2808                           
  2809                           ; 4 bytes @ 0x38
  2810  000098                     	ds	1
  2811  000099                     Port_CheckPortType@Output:
  2812                           	opt stack 0
  2813  000099                     Port_SetQuadType@pType:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x39
  2817  000099                     	ds	1
  2818  00009A                     Port_SetQuadType@Output:
  2819                           	opt stack 0
  2820  00009A                     Port_SetType@pInput:
  2821                           	opt stack 0
  2822                           
  2823                           ; 2 bytes @ 0x3A
  2824  00009A                     	ds	1
  2825  00009B                     Button_Init@pInput:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x3B
  2829  00009B                     	ds	1
  2830  00009C                     ??___fladd:
  2831  00009C                     Port_SetType@pType:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x3C
  2835  00009C                     	ds	1
  2836  00009D                     ??_Port_SetType:
  2837  00009D                     Button_Init@pThreshold:
  2838                           	opt stack 0
  2839                           
  2840                           ; 2 bytes @ 0x3D
  2841  00009D                     	ds	2
  2842  00009F                     Port_SetType@Output:
  2843                           	opt stack 0
  2844  00009F                     Button_Init@pInitIO:
  2845                           	opt stack 0
  2846                           
  2847                           ; 3 bytes @ 0x3F
  2848  00009F                     	ds	1
  2849  0000A0                     Port_Init@pInput:
  2850                           	opt stack 0
  2851                           
  2852                           ; 2 bytes @ 0x40
  2853  0000A0                     	ds	2
  2854  0000A2                     Port_Init@pPort:
  2855                           	opt stack 0
  2856  0000A2                     Button_Init@pGetState:
  2857                           	opt stack 0
  2858                           
  2859                           ; 3 bytes @ 0x42
  2860  0000A2                     	ds	1
  2861  0000A3                     ??_Port_Init:
  2862                           
  2863                           ; 1 bytes @ 0x43
  2864  0000A3                     	ds	1
  2865  0000A4                     ___fladd@signs:
  2866                           	opt stack 0
  2867                           
  2868                           ; 1 bytes @ 0x44
  2869  0000A4                     	ds	1
  2870  0000A5                     Port_Init@i:
  2871                           	opt stack 0
  2872  0000A5                     ___fladd@aexp:
  2873                           	opt stack 0
  2874  0000A5                     Button_Init@pFunction:
  2875                           	opt stack 0
  2876                           
  2877                           ; 3 bytes @ 0x45
  2878  0000A5                     	ds	1
  2879  0000A6                     ___fladd@bexp:
  2880                           	opt stack 0
  2881                           
  2882                           ; 1 bytes @ 0x46
  2883  0000A6                     	ds	1
  2884  0000A7                     ___fladd@grs:
  2885                           	opt stack 0
  2886                           
  2887                           ; 1 bytes @ 0x47
  2888  0000A7                     	ds	1
  2889  0000A8                     ?___flsub:
  2890                           	opt stack 0
  2891  0000A8                     ?_floor:
  2892                           	opt stack 0
  2893  0000A8                     ?_eval_poly:
  2894                           	opt stack 0
  2895  0000A8                     HMI_Init@in:
  2896                           	opt stack 0
  2897  0000A8                     ___flsub@b:
  2898                           	opt stack 0
  2899  0000A8                     floor@x:
  2900                           	opt stack 0
  2901  0000A8                     eval_poly@x:
  2902                           	opt stack 0
  2903                           
  2904                           ; 4 bytes @ 0x48
  2905  0000A8                     	ds	2
  2906  0000AA                     
  2907                           ; 1 bytes @ 0x4A
  2908  0000AA                     	ds	2
  2909  0000AC                     eval_poly@d:
  2910                           	opt stack 0
  2911  0000AC                     ___flsub@a:
  2912                           	opt stack 0
  2913  0000AC                     floor@i:
  2914                           	opt stack 0
  2915                           
  2916                           ; 4 bytes @ 0x4C
  2917  0000AC                     	ds	2
  2918  0000AE                     eval_poly@n:
  2919                           	opt stack 0
  2920                           
  2921                           ; 2 bytes @ 0x4E
  2922  0000AE                     	ds	2
  2923  0000B0                     ??_eval_poly:
  2924  0000B0                     ?_printf:
  2925                           	opt stack 0
  2926  0000B0                     printf@f:
  2927                           	opt stack 0
  2928  0000B0                     floor@expon:
  2929                           	opt stack 0
  2930                           
  2931                           ; 2 bytes @ 0x50
  2932  0000B0                     	ds	4
  2933  0000B4                     eval_poly@res:
  2934                           	opt stack 0
  2935                           
  2936                           ; 4 bytes @ 0x54
  2937  0000B4                     	ds	2
  2938  0000B6                     ??_printf:
  2939                           
  2940                           ; 1 bytes @ 0x56
  2941  0000B6                     	ds	2
  2942  0000B8                     ?_log:
  2943                           	opt stack 0
  2944  0000B8                     ?_ldexp:
  2945                           	opt stack 0
  2946  0000B8                     displayPositionMode@angleDegrees:
  2947                           	opt stack 0
  2948  0000B8                     ldexp@value:
  2949                           	opt stack 0
  2950  0000B8                     log@x:
  2951                           	opt stack 0
  2952                           
  2953                           ; 4 bytes @ 0x58
  2954  0000B8                     	ds	4
  2955  0000BC                     ldexp@newexp:
  2956                           	opt stack 0
  2957  0000BC                     log@exponent:
  2958                           	opt stack 0
  2959                           
  2960                           ; 2 bytes @ 0x5C
  2961  0000BC                     	ds	2
  2962  0000BE                     ??_ldexp:
  2963                           
  2964                           ; 1 bytes @ 0x5E
  2965  0000BE                     	ds	2
  2966  0000C0                     ?_exp:
  2967                           	opt stack 0
  2968  0000C0                     exp@x:
  2969                           	opt stack 0
  2970                           
  2971                           ; 4 bytes @ 0x60
  2972  0000C0                     	ds	4
  2973  0000C4                     _exp$15270:
  2974                           	opt stack 0
  2975                           
  2976                           ; 4 bytes @ 0x64
  2977  0000C4                     	ds	4
  2978  0000C8                     exp@exponent:
  2979                           	opt stack 0
  2980                           
  2981                           ; 2 bytes @ 0x68
  2982  0000C8                     	ds	2
  2983  0000CA                     exp@sign:
  2984                           	opt stack 0
  2985                           
  2986                           ; 1 bytes @ 0x6A
  2987  0000CA                     	ds	1
  2988  0000CB                     ??_main:
  2989                           
  2990                           ; 1 bytes @ 0x6B
  2991  0000CB                     	ds	2
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postdec1	equ	0xFE5
  2999                           fsr1h	equ	0xFE2
  3000                           fsr1l	equ	0xFE1
  3001                           
  3002                           	psect	cstackCOMRAM
  3003  000001                     __pcstackCOMRAM:
  3004                           	opt stack 0
  3005  000001                     i2Byte_SetBit@pInput:
  3006                           	opt stack 0
  3007  000001                     i2Byte_GetZone@pInput:
  3008                           	opt stack 0
  3009  000001                     i2delay_us@us:
  3010                           	opt stack 0
  3011  000001                     i2MXK_Queue@pCallback:
  3012                           	opt stack 0
  3013                           
  3014                           ; 3 bytes @ 0x0
  3015  000001                     	ds	2
  3016  000003                     i2Byte_SetBit@pBit:
  3017                           	opt stack 0
  3018  000003                     i2Byte_GetZone@pMax:
  3019                           	opt stack 0
  3020  000003                     i2delay_us@u:
  3021                           	opt stack 0
  3022                           
  3023                           ; 4 bytes @ 0x2
  3024  000003                     	ds	1
  3025  000004                     i2Byte_SetBit@pValue:
  3026                           	opt stack 0
  3027  000004                     i2Byte_GetZone@pChunk:
  3028                           	opt stack 0
  3029                           
  3030                           ; 1 bytes @ 0x3
  3031  000004                     	ds	1
  3032  000005                     ??i2_Byte_SetBit:
  3033  000005                     i2Byte_GetZone@pChunkSize:
  3034                           	opt stack 0
  3035                           
  3036                           ; 1 bytes @ 0x4
  3037  000005                     	ds	1
  3038  000006                     ??i2_Byte_GetZone:
  3039                           
  3040                           ; 1 bytes @ 0x5
  3041  000006                     	ds	1
  3042  000007                     i2Byte_GetZone@MASK:
  3043                           	opt stack 0
  3044  000007                     i2MXK_SwitchTo@CUR:
  3045                           	opt stack 0
  3046                           
  3047                           ; 1 bytes @ 0x6
  3048  000007                     	ds	1
  3049  000008                     i2Byte_GetZone@Offset:
  3050                           	opt stack 0
  3051  000008                     i2MXK_SwitchTo@pModule:
  3052                           	opt stack 0
  3053                           
  3054                           ; 1 bytes @ 0x7
  3055  000008                     	ds	1
  3056  000009                     i2Byte_GetZone@Output:
  3057                           	opt stack 0
  3058                           
  3059                           ; 1 bytes @ 0x8
  3060  000009                     	ds	1
  3061  00000A                     i2Byte_GetPair@pInput:
  3062                           	opt stack 0
  3063                           
  3064                           ; 2 bytes @ 0x9
  3065  00000A                     	ds	2
  3066  00000C                     i2Byte_GetPair@pPair:
  3067                           	opt stack 0
  3068                           
  3069                           ; 1 bytes @ 0xB
  3070  00000C                     	ds	1
  3071  00000D                     i2Word_GetPair@pInput:
  3072                           	opt stack 0
  3073                           
  3074                           ; 2 bytes @ 0xC
  3075  00000D                     	ds	2
  3076  00000F                     i2Word_GetPair@pPair:
  3077                           	opt stack 0
  3078                           
  3079                           ; 1 bytes @ 0xE
  3080  00000F                     	ds	1
  3081  000010                     i2Port_SetPin@pInput:
  3082                           	opt stack 0
  3083                           
  3084                           ; 2 bytes @ 0xF
  3085  000010                     	ds	2
  3086  000012                     i2Port_SetPin@pPin:
  3087                           	opt stack 0
  3088                           
  3089                           ; 1 bytes @ 0x11
  3090  000012                     	ds	1
  3091  000013                     i2Port_SetPin@pValue:
  3092                           	opt stack 0
  3093                           
  3094                           ; 1 bytes @ 0x12
  3095  000013                     	ds	1
  3096  000014                     i2Port_SetPin@Type:
  3097                           	opt stack 0
  3098                           
  3099                           ; 1 bytes @ 0x13
  3100  000014                     	ds	1
  3101  000015                     
  3102                           ; 1 bytes @ 0x14
  3103  000015                     	ds	2
  3104  000017                     ??_ISR_Function:
  3105                           
  3106                           ; 1 bytes @ 0x16
  3107  000017                     	ds	14
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1h	equ	0xFE2
  3116                           fsr1l	equ	0xFE1
  3117                           
  3118 ;;
  3119 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3120 ;;
  3121 ;; *************** function _main *****************
  3122 ;; Defined at:
  3123 ;;		line 229 in file "main.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;		None
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;Total ram usage:        6 bytes
  3142 ;; Hardware stack levels required when called:   18
  3143 ;; This function calls:
  3144 ;;		_ADC_Voltage
  3145 ;;		_Console_Render
  3146 ;;		_Console_SetForecolour
  3147 ;;		_HMI_Render
  3148 ;;		_HMI_SetNumber
  3149 ;;		_MXK_BlockSwitchTo
  3150 ;;		_MXK_Dequeue
  3151 ;;		_MXK_Release
  3152 ;;		___awdiv
  3153 ;;		___flmul
  3154 ;;		___fltol
  3155 ;;		___wmul
  3156 ;;		_continuousMode
  3157 ;;		_displayContinuousMode
  3158 ;;		_displayNullMode
  3159 ;;		_displayPositionMode
  3160 ;;		_displaySID
  3161 ;;		_displayStepMode
  3162 ;;		_getMode
  3163 ;;		_initialise
  3164 ;;		_inputVar
  3165 ;;		_nullMode
  3166 ;;		_positionMode
  3167 ;;		_pow
  3168 ;;		_printf
  3169 ;;		_stepMode
  3170 ;; This function is called by:
  3171 ;;		Startup code after reset
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text0
  3176  012CFC                     __ptext0:
  3177                           	opt stack 0
  3178  012CFC                     _main:
  3179                           	opt stack 13
  3180                           
  3181                           ;main.c: 230: initialise();
  3182                           
  3183                           ;incstack = 0
  3184  012CFC  EC30  F0B8         	call	_initialise	;wreg free
  3185  012D00                     l17043:
  3186                           
  3187                           ;main.c: 233: inputVar();
  3188  012D00  EC5B  F0AE         	call	_inputVar	;wreg free
  3189                           
  3190                           ;main.c: 240: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3191  012D04  0E01               	movlw	1
  3192  012D06  EC29  F0BC         	call	_MXK_BlockSwitchTo
  3193  012D0A  0900               	iorlw	0
  3194  012D0C  B4D8               	btfsc	status,2,c
  3195  012D0E  D0DA               	goto	l17095
  3196                           
  3197                           ;main.c: 241: getMode();
  3198  012D10  EC5C  F0B9         	call	_getMode	;wreg free
  3199                           
  3200                           ;main.c: 242: printf("%c", (char)35);
  3201  012D14  0EFC               	movlw	low STR_16
  3202  012D16  0100               	movlb	0	; () banked
  3203  012D18  6FB0               	movwf	printf@f& (0+255),b
  3204  012D1A  0EFF               	movlw	high STR_16
  3205  012D1C  0100               	movlb	0	; () banked
  3206  012D1E  6FB1               	movwf	(printf@f+1)& (0+255),b
  3207  012D20  0E00               	movlw	0
  3208  012D22  0100               	movlb	0	; () banked
  3209  012D24  6FB3               	movwf	(?_printf+3)& (0+255),b
  3210  012D26  0E23               	movlw	35
  3211  012D28  6FB2               	movwf	(?_printf+2)& (0+255),b
  3212  012D2A  EC00  F080         	call	_printf	;wreg free
  3213                           
  3214                           ;main.c: 243: printf("%d\n", angle);
  3215  012D2E  0EF3               	movlw	low (STR_8+7)
  3216  012D30  0100               	movlb	0	; () banked
  3217  012D32  6FB0               	movwf	printf@f& (0+255),b
  3218  012D34  0EFF               	movlw	high (STR_8+7)
  3219  012D36  0100               	movlb	0	; () banked
  3220  012D38  6FB1               	movwf	(printf@f+1)& (0+255),b
  3221  012D3A  C0D2  F0B2         	movff	_angle,?_printf+2
  3222  012D3E  C0D3  F0B3         	movff	_angle+1,?_printf+3
  3223  012D42  EC00  F080         	call	_printf	;wreg free
  3224                           
  3225                           ;main.c: 244: displaySID();
  3226  012D46  EC8E  F0BE         	call	_displaySID	;wreg free
  3227                           
  3228                           ;main.c: 245: Console_SetForecolour(0xF800);
  3229  012D4A  0EF8               	movlw	248
  3230  012D4C  0100               	movlb	0	; () banked
  3231  012D4E  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3232  012D50  0E00               	movlw	0
  3233  012D52  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
  3234  012D54  ECE0  F0BF         	call	_Console_SetForecolour	;wreg free
  3235                           
  3236                           ;main.c: 246: switch (mode) {
  3237  012D58  D090               	goto	l17083
  3238  012D5A                     l17057:
  3239                           
  3240                           ;main.c: 248: displayContinuousMode();
  3241  012D5A  EC62  F0AB         	call	_displayContinuousMode	;wreg free
  3242                           
  3243                           ;main.c: 249: break;
  3244  012D5E  D0A2               	goto	l17085
  3245  012D60                     l17059:
  3246                           
  3247                           ;main.c: 251: displayStepMode();
  3248  012D60  ECB6  F0B3         	call	_displayStepMode	;wreg free
  3249                           
  3250                           ;main.c: 252: break;
  3251  012D64  D09F               	goto	l17085
  3252  012D66                     l17061:
  3253                           
  3254                           ;main.c: 254: ADCVoltage = ADC_Voltage(&ADC_AN0);
  3255  012D66  0EDF               	movlw	low _ADC_AN0
  3256  012D68  0100               	movlb	0	; () banked
  3257  012D6A  6F87               	movwf	ADC_Voltage@pInput& (0+255),b
  3258  012D6C  0E01               	movlw	high _ADC_AN0
  3259  012D6E  0100               	movlb	0	; () banked
  3260  012D70  6F88               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3261  012D72  EC51  F0A9         	call	_ADC_Voltage	;wreg free
  3262  012D76  C087  F100         	movff	?_ADC_Voltage,_ADCVoltage
  3263  012D7A  C088  F101         	movff	?_ADC_Voltage+1,_ADCVoltage+1
  3264  012D7E  C089  F102         	movff	?_ADC_Voltage+2,_ADCVoltage+2
  3265  012D82  C08A  F103         	movff	?_ADC_Voltage+3,_ADCVoltage+3
  3266                           
  3267                           ;main.c: 255: IRDistance = 58 * pow(ADCVoltage, -1.10);
  3268  012D86  0ECD               	movlw	205
  3269  012D88  0102               	movlb	2	; () banked
  3270  012D8A  6F68               	movwf	pow@y& (0+255),b
  3271  012D8C  0ECC               	movlw	204
  3272  012D8E  6F69               	movwf	(pow@y+1)& (0+255),b
  3273  012D90  0E8C               	movlw	140
  3274  012D92  6F6A               	movwf	(pow@y+2)& (0+255),b
  3275  012D94  0EBF               	movlw	191
  3276  012D96  6F6B               	movwf	(pow@y+3)& (0+255),b
  3277  012D98  C100  F264         	movff	_ADCVoltage,pow@x
  3278  012D9C  C101  F265         	movff	_ADCVoltage+1,pow@x+1
  3279  012DA0  C102  F266         	movff	_ADCVoltage+2,pow@x+2
  3280  012DA4  C103  F267         	movff	_ADCVoltage+3,pow@x+3
  3281  012DA8  ECAF  F099         	call	_pow	;wreg free
  3282  012DAC  C264  F1FC         	movff	?_pow,_main$15263
  3283  012DB0  C265  F1FD         	movff	?_pow+1,_main$15263+1
  3284  012DB4  C266  F1FE         	movff	?_pow+2,_main$15263+2
  3285  012DB8  C267  F1FF         	movff	?_pow+3,_main$15263+3
  3286                           
  3287                           ;main.c: 255: IRDistance = 58 * pow(ADCVoltage, -1.10);
  3288  012DBC  0E00               	movlw	0
  3289  012DBE  0100               	movlb	0	; () banked
  3290  012DC0  6F72               	movwf	___flmul@a& (0+255),b
  3291  012DC2  0E00               	movlw	0
  3292  012DC4  6F73               	movwf	(___flmul@a+1)& (0+255),b
  3293  012DC6  0E68               	movlw	104
  3294  012DC8  6F74               	movwf	(___flmul@a+2)& (0+255),b
  3295  012DCA  0E42               	movlw	66
  3296  012DCC  6F75               	movwf	(___flmul@a+3)& (0+255),b
  3297  012DCE  C1FC  F06E         	movff	_main$15263,___flmul@b
  3298  012DD2  C1FD  F06F         	movff	_main$15263+1,___flmul@b+1
  3299  012DD6  C1FE  F070         	movff	_main$15263+2,___flmul@b+2
  3300  012DDA  C1FF  F071         	movff	_main$15263+3,___flmul@b+3
  3301  012DDE  EC2A  F089         	call	___flmul	;wreg free
  3302  012DE2  C06E  F087         	movff	?___flmul,___fltol@f1
  3303  012DE6  C06F  F088         	movff	?___flmul+1,___fltol@f1+1
  3304  012DEA  C070  F089         	movff	?___flmul+2,___fltol@f1+2
  3305  012DEE  C071  F08A         	movff	?___flmul+3,___fltol@f1+3
  3306  012DF2  ECE0  F0A7         	call	___fltol	;wreg free
  3307  012DF6  C087  F11D         	movff	?___fltol,_IRDistance
  3308  012DFA  C088  F11E         	movff	?___fltol+1,_IRDistance+1
  3309                           
  3310                           ;main.c: 256: angle = ((IRDistance - 17) * (200) / (117 - 17));
  3311  012DFE  0EEF               	movlw	239
  3312  012E00  0101               	movlb	1	; () banked
  3313  012E02  251D               	addwf	_IRDistance& (0+255),w,b
  3314  012E04  0100               	movlb	0	; () banked
  3315  012E06  6F60               	movwf	___wmul@multiplier& (0+255),b
  3316  012E08  0EFF               	movlw	255
  3317  012E0A  0101               	movlb	1	; () banked
  3318  012E0C  211E               	addwfc	(_IRDistance+1)& (0+255),w,b
  3319  012E0E  0100               	movlb	0	; () banked
  3320  012E10  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  3321  012E12  0E00               	movlw	0
  3322  012E14  0100               	movlb	0	; () banked
  3323  012E16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3324  012E18  0EC8               	movlw	200
  3325  012E1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3326  012E1C  ECFB  F0BC         	call	___wmul	;wreg free
  3327  012E20  C060  F066         	movff	?___wmul,___awdiv@dividend
  3328  012E24  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
  3329  012E28  0E00               	movlw	0
  3330  012E2A  0100               	movlb	0	; () banked
  3331  012E2C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3332  012E2E  0E64               	movlw	100
  3333  012E30  6F68               	movwf	___awdiv@divisor& (0+255),b
  3334  012E32  EC8B  F0AC         	call	___awdiv	;wreg free
  3335  012E36  C066  F0D2         	movff	?___awdiv,_angle
  3336  012E3A  C067  F0D3         	movff	?___awdiv+1,_angle+1
  3337                           
  3338                           ;main.c: 257: if (angle >= 200) {
  3339  012E3E  0100               	movlb	0	; () banked
  3340  012E40  BFD3               	btfsc	(_angle+1)& (0+255),7,b
  3341  012E42  D00D               	goto	l17073
  3342  012E44  0100               	movlb	0	; () banked
  3343  012E46  51D3               	movf	(_angle+1)& (0+255),w,b
  3344  012E48  E105               	bnz	u15090
  3345  012E4A  0EC8               	movlw	200
  3346  012E4C  0100               	movlb	0	; () banked
  3347  012E4E  5DD2               	subwf	_angle& (0+255),w,b
  3348  012E50  A0D8               	btfss	status,0,c
  3349  012E52  D005               	goto	l17073
  3350  012E54                     u15090:
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;main.c: 258: angle = 200;
  3354  012E54  0E00               	movlw	0
  3355  012E56  0100               	movlb	0	; () banked
  3356  012E58  6FD3               	movwf	(_angle+1)& (0+255),b
  3357  012E5A  0EC8               	movlw	200
  3358  012E5C  6FD2               	movwf	_angle& (0+255),b
  3359  012E5E                     l17073:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 259: }
  3363                           ;main.c: 260: if (angle < 0) {
  3364  012E5E  0100               	movlb	0	; () banked
  3365  012E60  AFD3               	btfss	(_angle+1)& (0+255),7,b
  3366  012E62  D005               	goto	l17077
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 261: angle = 0;
  3370  012E64  0E00               	movlw	0
  3371  012E66  0100               	movlb	0	; () banked
  3372  012E68  6FD3               	movwf	(_angle+1)& (0+255),b
  3373  012E6A  0E00               	movlw	0
  3374  012E6C  6FD2               	movwf	_angle& (0+255),b
  3375  012E6E                     l17077:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;main.c: 262: }
  3379                           ;main.c: 263: displayPositionMode();
  3380  012E6E  ECC5  F0B4         	call	_displayPositionMode	;wreg free
  3381                           
  3382                           ;main.c: 264: break;
  3383  012E72  D018               	goto	l17085
  3384  012E74                     l17079:
  3385                           
  3386                           ;main.c: 266: displayNullMode();
  3387  012E74  ECE8  F0BB         	call	_displayNullMode	;wreg free
  3388                           
  3389                           ;main.c: 268: }
  3390                           
  3391                           ;main.c: 267: break;
  3392  012E78  D015               	goto	l17085
  3393  012E7A                     l17083:
  3394  012E7A  C121  F0CB         	movff	_mode,??_main
  3395  012E7E  C122  F0CC         	movff	_mode+1,??_main+1
  3396                           
  3397                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3398                           ; Switch size 1, requested type "space"
  3399                           ; Number of cases is 1, Range of values is 0 to 0
  3400                           ; switch strategies available:
  3401                           ; Name         Instructions Cycles
  3402                           ; simple_byte            4     3 (average)
  3403                           ;	Chosen strategy is simple_byte
  3404  012E82  0100               	movlb	0	; () banked
  3405  012E84  51CC               	movf	(??_main+1)& (0+255),w,b
  3406  012E86  0A00               	xorlw	0	; case 0
  3407  012E88  A4D8               	btfss	status,2,c
  3408  012E8A  D7F4               	goto	l17079
  3409                           
  3410                           ; BSR set to: 0
  3411                           ; Switch size 1, requested type "space"
  3412                           ; Number of cases is 3, Range of values is 1 to 3
  3413                           ; switch strategies available:
  3414                           ; Name         Instructions Cycles
  3415                           ; simple_byte           10     6 (average)
  3416                           ;	Chosen strategy is simple_byte
  3417  012E8C  0100               	movlb	0	; () banked
  3418  012E8E  51CB               	movf	??_main& (0+255),w,b
  3419  012E90  0A01               	xorlw	1	; case 1
  3420  012E92  B4D8               	btfsc	status,2,c
  3421  012E94  D762               	goto	l17057
  3422  012E96  0A03               	xorlw	3	; case 2
  3423  012E98  B4D8               	btfsc	status,2,c
  3424  012E9A  D762               	goto	l17059
  3425  012E9C  0A01               	xorlw	1	; case 3
  3426  012E9E  B4D8               	btfsc	status,2,c
  3427  012EA0  D762               	goto	l17061
  3428  012EA2  D7E8               	goto	l17079
  3429  012EA4                     l17085:
  3430                           
  3431                           ;main.c: 272: Console_Render();
  3432  012EA4  ECA9  F098         	call	_Console_Render	;wreg free
  3433                           
  3434                           ;main.c: 273: HMI_SetNumber(IRDistance);
  3435  012EA8  C11D  F071         	movff	_IRDistance,HMI_SetNumber@pInput
  3436  012EAC  C11E  F072         	movff	_IRDistance+1,HMI_SetNumber@pInput+1
  3437  012EB0  EC0B  F0BE         	call	_HMI_SetNumber	;wreg free
  3438                           
  3439                           ;main.c: 274: HMI_Render();
  3440  012EB4  EC67  F0BC         	call	_HMI_Render	;wreg free
  3441                           
  3442                           ;main.c: 275: if (MXK_Release())
  3443  012EB8  EC74  F0BF         	call	_MXK_Release	;wreg free
  3444  012EBC  0900               	iorlw	0
  3445  012EBE  A4D8               	btfss	status,2,c
  3446                           
  3447                           ;main.c: 276: MXK_Dequeue();
  3448  012EC0  EC7D  F0BD         	call	_MXK_Dequeue	;wreg free
  3449  012EC4                     l17095:
  3450                           
  3451                           ;main.c: 277: }
  3452                           ;main.c: 280: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3453  012EC4  0E08               	movlw	8
  3454  012EC6  EC29  F0BC         	call	_MXK_BlockSwitchTo
  3455  012ECA  0900               	iorlw	0
  3456  012ECC  A4D8               	btfss	status,2,c
  3457  012ECE  D00D               	goto	l17109
  3458  012ED0  D717               	goto	l17043
  3459  012ED2                     l17099:
  3460                           
  3461                           ;main.c: 283: nullMode();
  3462  012ED2  EC02  F00A         	call	_nullMode	;wreg free
  3463                           
  3464                           ;main.c: 284: break;
  3465  012ED6  D020               	goto	l17111
  3466  012ED8                     l17101:
  3467                           
  3468                           ;main.c: 286: continuousMode();
  3469  012ED8  EC64  F0BD         	call	_continuousMode	;wreg free
  3470                           
  3471                           ;main.c: 287: break;
  3472  012EDC  D01D               	goto	l17111
  3473  012EDE                     l17103:
  3474                           
  3475                           ;main.c: 289: stepMode();
  3476  012EDE  EC64  F0B8         	call	_stepMode	;wreg free
  3477                           
  3478                           ;main.c: 290: break;
  3479  012EE2  D01A               	goto	l17111
  3480  012EE4                     l17105:
  3481                           
  3482                           ;main.c: 292: positionMode();
  3483  012EE4  EC92  F0AA         	call	_positionMode	;wreg free
  3484                           
  3485                           ;main.c: 294: }
  3486                           
  3487                           ;main.c: 293: break;
  3488  012EE8  D017               	goto	l17111
  3489  012EEA                     l17109:
  3490  012EEA  C121  F0CB         	movff	_mode,??_main
  3491  012EEE  C122  F0CC         	movff	_mode+1,??_main+1
  3492                           
  3493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3494                           ; Switch size 1, requested type "space"
  3495                           ; Number of cases is 1, Range of values is 0 to 0
  3496                           ; switch strategies available:
  3497                           ; Name         Instructions Cycles
  3498                           ; simple_byte            4     3 (average)
  3499                           ;	Chosen strategy is simple_byte
  3500  012EF2  0100               	movlb	0	; () banked
  3501  012EF4  51CC               	movf	(??_main+1)& (0+255),w,b
  3502  012EF6  0A00               	xorlw	0	; case 0
  3503  012EF8  A4D8               	btfss	status,2,c
  3504  012EFA  D00E               	goto	l17111
  3505                           
  3506                           ; BSR set to: 0
  3507                           ; Switch size 1, requested type "space"
  3508                           ; Number of cases is 4, Range of values is 0 to 3
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte           13     7 (average)
  3512                           ;	Chosen strategy is simple_byte
  3513  012EFC  0100               	movlb	0	; () banked
  3514  012EFE  51CB               	movf	??_main& (0+255),w,b
  3515  012F00  0A00               	xorlw	0	; case 0
  3516  012F02  B4D8               	btfsc	status,2,c
  3517  012F04  D7E6               	goto	l17099
  3518  012F06  0A01               	xorlw	1	; case 1
  3519  012F08  B4D8               	btfsc	status,2,c
  3520  012F0A  D7E6               	goto	l17101
  3521  012F0C  0A03               	xorlw	3	; case 2
  3522  012F0E  B4D8               	btfsc	status,2,c
  3523  012F10  D7E6               	goto	l17103
  3524  012F12  0A01               	xorlw	1	; case 3
  3525  012F14  B4D8               	btfsc	status,2,c
  3526  012F16  D7E6               	goto	l17105
  3527  012F18                     l17111:
  3528                           
  3529                           ;main.c: 295: if (MXK_Release())
  3530  012F18  EC74  F0BF         	call	_MXK_Release	;wreg free
  3531  012F1C  0900               	iorlw	0
  3532  012F1E  B4D8               	btfsc	status,2,c
  3533  012F20  D6EF               	goto	l17043
  3534                           
  3535                           ;main.c: 296: MXK_Dequeue();
  3536  012F22  EC7D  F0BD         	call	_MXK_Dequeue	;wreg free
  3537                           
  3538                           ;main.c: 297: }
  3539                           ;main.c: 298: }
  3540  012F26  D6EC               	goto	l17043
  3541  012F28                     __end_of_main:
  3542                           	opt stack 0
  3543                           tblptru	equ	0xFF8
  3544                           tblptrh	equ	0xFF7
  3545                           tblptrl	equ	0xFF6
  3546                           tablat	equ	0xFF5
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           postdec1	equ	0xFE5
  3550                           fsr1h	equ	0xFE2
  3551                           fsr1l	equ	0xFE1
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _stepMode *****************
  3555 ;; Defined at:
  3556 ;;		line 200 in file "main.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      void 
  3563 ;; Registers used:
  3564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;Total ram usage:        0 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:   10
  3577 ;; This function calls:
  3578 ;;		_Motor_Move
  3579 ;;		_Motor_Speed
  3580 ;; This function is called by:
  3581 ;;		_main
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text1
  3586  0170C8                     __ptext1:
  3587                           	opt stack 0
  3588  0170C8                     _stepMode:
  3589                           	opt stack 20
  3590                           
  3591                           ;main.c: 205: if (downState && Stepper.mDelta == 0) {
  3592                           
  3593                           ;incstack = 0
  3594  0170C8  0100               	movlb	0	; () banked
  3595  0170CA  51E2               	movf	_downState& (0+255),w,b
  3596  0170CC  B4D8               	btfsc	status,2,c
  3597  0170CE  D023               	goto	l16075
  3598                           
  3599                           ; BSR set to: 0
  3600  0170D0  0100               	movlb	0	; () banked
  3601  0170D2  51F4               	movf	_Stepper& (0+255),w,b
  3602  0170D4  0100               	movlb	0	; () banked
  3603  0170D6  11F5               	iorwf	(_Stepper+1)& (0+255),w,b
  3604  0170D8  A4D8               	btfss	status,2,c
  3605  0170DA  D01D               	goto	l16075
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 206: Motor_Speed(&Stepper, (1*1000L));
  3609  0170DC  0EF4               	movlw	low _Stepper
  3610  0170DE  0100               	movlb	0	; () banked
  3611  0170E0  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3612  0170E2  0E00               	movlw	high _Stepper
  3613  0170E4  0100               	movlb	0	; () banked
  3614  0170E6  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3615  0170E8  0E03               	movlw	3
  3616  0170EA  0100               	movlb	0	; () banked
  3617  0170EC  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3618  0170EE  0EE8               	movlw	232
  3619  0170F0  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3620  0170F2  EC20  F0BE         	call	_Motor_Speed	;wreg free
  3621                           
  3622                           ;main.c: 207: Motor_Move(&Stepper, steps);
  3623  0170F6  0EF4               	movlw	low _Stepper
  3624  0170F8  0100               	movlb	0	; () banked
  3625  0170FA  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3626  0170FC  0E00               	movlw	high _Stepper
  3627  0170FE  0100               	movlb	0	; () banked
  3628  017100  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3629  017102  C0D4  F065         	movff	_steps,Motor_Move@pDelta
  3630  017106  C0D5  F066         	movff	_steps+1,Motor_Move@pDelta+1
  3631  01710A  ECC2  F0BC         	call	_Motor_Move	;wreg free
  3632                           
  3633                           ;main.c: 208: remainingSteps = steps;
  3634  01710E  C0D4  F125         	movff	_steps,_remainingSteps
  3635  017112  C0D5  F126         	movff	_steps+1,_remainingSteps+1
  3636  017116                     l16075:
  3637                           
  3638                           ;main.c: 209: }
  3639                           ;main.c: 210: if (Stepper.mDelta != 0) {
  3640  017116  0100               	movlb	0	; () banked
  3641  017118  51F4               	movf	_Stepper& (0+255),w,b
  3642  01711A  0100               	movlb	0	; () banked
  3643  01711C  11F5               	iorwf	(_Stepper+1)& (0+255),w,b
  3644  01711E  B4D8               	btfsc	status,2,c
  3645  017120  0012               	return	
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;main.c: 211: remainingSteps--;
  3649  017122  0101               	movlb	1	; () banked
  3650  017124  0725               	decf	_remainingSteps& (0+255),f,b
  3651  017126  A0D8               	btfss	status,0,c
  3652  017128  0726               	decf	(_remainingSteps+1)& (0+255),f,b
  3653  01712A  0012               	return	
  3654  01712C                     __end_of_stepMode:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           postdec1	equ	0xFE5
  3663                           fsr1h	equ	0xFE2
  3664                           fsr1l	equ	0xFE1
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function _pow *****************
  3668 ;; Defined at:
  3669 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\pow.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  x               4    0[BANK2 ] void 
  3672 ;;  y               4    4[BANK2 ] void 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  yi              4   17[BANK2 ] unsigned long 
  3675 ;;  sign            1   16[BANK2 ] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  4    0[BANK2 ] unsigned char 
  3678 ;; Registers used:
  3679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3685 ;;      Params:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Locals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Totals:         0       0       0      21       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;Total ram usage:       21 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:   10
  3692 ;; This function calls:
  3693 ;;		___flge
  3694 ;;		___flmul
  3695 ;;		___flneg
  3696 ;;		___fltol
  3697 ;;		___xxtofl
  3698 ;;		_exp
  3699 ;;		_log
  3700 ;; This function is called by:
  3701 ;;		_main
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text2
  3706  01335E                     __ptext2:
  3707                           	opt stack 0
  3708  01335E                     _pow:
  3709                           	opt stack 20
  3710                           
  3711                           ;incstack = 0
  3712  01335E  0E00               	movlw	0
  3713  013360  0102               	movlb	2	; () banked
  3714  013362  6F74               	movwf	pow@sign& (0+255),b
  3715                           
  3716                           ; BSR set to: 2
  3717  013364  0102               	movlb	2	; () banked
  3718  013366  5164               	movf	pow@x& (0+255),w,b
  3719  013368  0102               	movlb	2	; () banked
  3720  01336A  1165               	iorwf	(pow@x+1)& (0+255),w,b
  3721  01336C  0102               	movlb	2	; () banked
  3722  01336E  1166               	iorwf	(pow@x+2)& (0+255),w,b
  3723  013370  0102               	movlb	2	; () banked
  3724  013372  1167               	iorwf	(pow@x+3)& (0+255),w,b
  3725  013374  A4D8               	btfss	status,2,c
  3726  013376  D025               	goto	l16109
  3727                           
  3728                           ; BSR set to: 2
  3729  013378  0E00               	movlw	0
  3730  01337A  0100               	movlb	0	; () banked
  3731  01337C  6F60               	movwf	___flge@ff1& (0+255),b
  3732  01337E  0E00               	movlw	0
  3733  013380  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3734  013382  0E00               	movlw	0
  3735  013384  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3736  013386  0E00               	movlw	0
  3737  013388  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3738  01338A  C268  F064         	movff	pow@y,___flge@ff2
  3739  01338E  C269  F065         	movff	pow@y+1,___flge@ff2+1
  3740  013392  C26A  F066         	movff	pow@y+2,___flge@ff2+2
  3741  013396  C26B  F067         	movff	pow@y+3,___flge@ff2+3
  3742  01339A  EC0B  F09F         	call	___flge	;wreg free
  3743  01339E  0100               	movlb	0	; () banked
  3744  0133A0  A0D8               	btfss	status,0,c
  3745  0133A2  D005               	goto	l2689
  3746                           
  3747                           ; BSR set to: 0
  3748  0133A4  0E00               	movlw	0
  3749  0133A6  0101               	movlb	1	; () banked
  3750  0133A8  6F1C               	movwf	(_errno+1)& (0+255),b
  3751  0133AA  0E21               	movlw	33
  3752  0133AC  6F1B               	movwf	_errno& (0+255),b
  3753  0133AE                     l2689:
  3754  0133AE  0E00               	movlw	0
  3755  0133B0  0102               	movlb	2	; () banked
  3756  0133B2  6F64               	movwf	?_pow& (0+255),b
  3757  0133B4  0E00               	movlw	0
  3758  0133B6  6F65               	movwf	(?_pow+1)& (0+255),b
  3759  0133B8  0E00               	movlw	0
  3760  0133BA  6F66               	movwf	(?_pow+2)& (0+255),b
  3761  0133BC  0E00               	movlw	0
  3762  0133BE  6F67               	movwf	(?_pow+3)& (0+255),b
  3763                           
  3764                           ; BSR set to: 2
  3765  0133C0  0012               	return	
  3766  0133C2                     l16109:
  3767                           
  3768                           ; BSR set to: 2
  3769  0133C2  0102               	movlb	2	; () banked
  3770  0133C4  5168               	movf	pow@y& (0+255),w,b
  3771  0133C6  0102               	movlb	2	; () banked
  3772  0133C8  1169               	iorwf	(pow@y+1)& (0+255),w,b
  3773  0133CA  0102               	movlb	2	; () banked
  3774  0133CC  116A               	iorwf	(pow@y+2)& (0+255),w,b
  3775  0133CE  0102               	movlb	2	; () banked
  3776  0133D0  116B               	iorwf	(pow@y+3)& (0+255),w,b
  3777  0133D2  A4D8               	btfss	status,2,c
  3778  0133D4  D00A               	goto	l16115
  3779                           
  3780                           ; BSR set to: 2
  3781  0133D6  0E00               	movlw	0
  3782  0133D8  0102               	movlb	2	; () banked
  3783  0133DA  6F64               	movwf	?_pow& (0+255),b
  3784  0133DC  0E00               	movlw	0
  3785  0133DE  6F65               	movwf	(?_pow+1)& (0+255),b
  3786  0133E0  0E80               	movlw	128
  3787  0133E2  6F66               	movwf	(?_pow+2)& (0+255),b
  3788  0133E4  0E3F               	movlw	63
  3789  0133E6  6F67               	movwf	(?_pow+3)& (0+255),b
  3790                           
  3791                           ; BSR set to: 2
  3792  0133E8  0012               	return	
  3793  0133EA                     l16115:
  3794                           
  3795                           ; BSR set to: 2
  3796  0133EA  0102               	movlb	2	; () banked
  3797  0133EC  AF67               	btfss	(pow@x+3)& (0+255),7,b
  3798  0133EE  D058               	goto	l16127
  3799                           
  3800                           ; BSR set to: 2
  3801  0133F0  C268  F087         	movff	pow@y,___fltol@f1
  3802  0133F4  C269  F088         	movff	pow@y+1,___fltol@f1+1
  3803  0133F8  C26A  F089         	movff	pow@y+2,___fltol@f1+2
  3804  0133FC  C26B  F08A         	movff	pow@y+3,___fltol@f1+3
  3805  013400  ECE0  F0A7         	call	___fltol	;wreg free
  3806  013404  C087  F275         	movff	?___fltol,pow@yi
  3807  013408  C088  F276         	movff	?___fltol+1,pow@yi+1
  3808  01340C  C089  F277         	movff	?___fltol+2,pow@yi+2
  3809  013410  C08A  F278         	movff	?___fltol+3,pow@yi+3
  3810  013414  C275  F060         	movff	pow@yi,___xxtofl@val
  3811  013418  C276  F061         	movff	pow@yi+1,___xxtofl@val+1
  3812  01341C  C277  F062         	movff	pow@yi+2,___xxtofl@val+2
  3813  013420  C278  F063         	movff	pow@yi+3,___xxtofl@val+3
  3814  013424  0E00               	movlw	0
  3815  013426  ECAC  F09B         	call	___xxtofl
  3816  01342A  0102               	movlb	2	; () banked
  3817  01342C  5168               	movf	pow@y& (0+255),w,b
  3818  01342E  0100               	movlb	0	; () banked
  3819  013430  1960               	xorwf	?___xxtofl& (0+255),w,b
  3820  013432  E110               	bnz	u14310
  3821  013434  0102               	movlb	2	; () banked
  3822  013436  5169               	movf	(pow@y+1)& (0+255),w,b
  3823  013438  0100               	movlb	0	; () banked
  3824  01343A  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
  3825  01343C  E10B               	bnz	u14310
  3826  01343E  0102               	movlb	2	; () banked
  3827  013440  516A               	movf	(pow@y+2)& (0+255),w,b
  3828  013442  0100               	movlb	0	; () banked
  3829  013444  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
  3830  013446  E106               	bnz	u14310
  3831  013448  0102               	movlb	2	; () banked
  3832  01344A  516B               	movf	(pow@y+3)& (0+255),w,b
  3833  01344C  0100               	movlb	0	; () banked
  3834  01344E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
  3835  013450  B4D8               	btfsc	status,2,c
  3836  013452  D00F               	goto	l16123
  3837  013454                     u14310:
  3838                           
  3839                           ; BSR set to: 0
  3840  013454  0E00               	movlw	0
  3841  013456  0101               	movlb	1	; () banked
  3842  013458  6F1C               	movwf	(_errno+1)& (0+255),b
  3843  01345A  0E21               	movlw	33
  3844  01345C  6F1B               	movwf	_errno& (0+255),b
  3845  01345E  0E00               	movlw	0
  3846  013460  0102               	movlb	2	; () banked
  3847  013462  6F64               	movwf	?_pow& (0+255),b
  3848  013464  0E00               	movlw	0
  3849  013466  6F65               	movwf	(?_pow+1)& (0+255),b
  3850  013468  0E00               	movlw	0
  3851  01346A  6F66               	movwf	(?_pow+2)& (0+255),b
  3852  01346C  0E00               	movlw	0
  3853  01346E  6F67               	movwf	(?_pow+3)& (0+255),b
  3854                           
  3855                           ; BSR set to: 2
  3856  013470  0012               	return	
  3857  013472                     l16123:
  3858  013472  0102               	movlb	2	; () banked
  3859  013474  5175               	movf	pow@yi& (0+255),w,b
  3860  013476  0B01               	andlw	1
  3861  013478  0102               	movlb	2	; () banked
  3862  01347A  6F74               	movwf	pow@sign& (0+255),b
  3863                           
  3864                           ; BSR set to: 2
  3865  01347C  C264  F060         	movff	pow@x,___flneg@f1
  3866  013480  C265  F061         	movff	pow@x+1,___flneg@f1+1
  3867  013484  C266  F062         	movff	pow@x+2,___flneg@f1+2
  3868  013488  C267  F063         	movff	pow@x+3,___flneg@f1+3
  3869  01348C  ECDF  F0BC         	call	___flneg	;wreg free
  3870  013490  C060  F264         	movff	?___flneg,pow@x
  3871  013494  C061  F265         	movff	?___flneg+1,pow@x+1
  3872  013498  C062  F266         	movff	?___flneg+2,pow@x+2
  3873  01349C  C063  F267         	movff	?___flneg+3,pow@x+3
  3874  0134A0                     l16127:
  3875  0134A0  C264  F0B8         	movff	pow@x,log@x
  3876  0134A4  C265  F0B9         	movff	pow@x+1,log@x+1
  3877  0134A8  C266  F0BA         	movff	pow@x+2,log@x+2
  3878  0134AC  C267  F0BB         	movff	pow@x+3,log@x+3
  3879  0134B0  EC99  F0A0         	call	_log	;wreg free
  3880  0134B4  C0B8  F26C         	movff	?_log,_pow$15268
  3881  0134B8  C0B9  F26D         	movff	?_log+1,_pow$15268+1
  3882  0134BC  C0BA  F26E         	movff	?_log+2,_pow$15268+2
  3883  0134C0  C0BB  F26F         	movff	?_log+3,_pow$15268+3
  3884  0134C4  C26C  F06E         	movff	_pow$15268,___flmul@b
  3885  0134C8  C26D  F06F         	movff	_pow$15268+1,___flmul@b+1
  3886  0134CC  C26E  F070         	movff	_pow$15268+2,___flmul@b+2
  3887  0134D0  C26F  F071         	movff	_pow$15268+3,___flmul@b+3
  3888  0134D4  C268  F072         	movff	pow@y,___flmul@a
  3889  0134D8  C269  F073         	movff	pow@y+1,___flmul@a+1
  3890  0134DC  C26A  F074         	movff	pow@y+2,___flmul@a+2
  3891  0134E0  C26B  F075         	movff	pow@y+3,___flmul@a+3
  3892  0134E4  EC2A  F089         	call	___flmul	;wreg free
  3893  0134E8  C06E  F270         	movff	?___flmul,_pow$15269
  3894  0134EC  C06F  F271         	movff	?___flmul+1,_pow$15269+1
  3895  0134F0  C070  F272         	movff	?___flmul+2,_pow$15269+2
  3896  0134F4  C071  F273         	movff	?___flmul+3,_pow$15269+3
  3897  0134F8  C270  F0C0         	movff	_pow$15269,exp@x
  3898  0134FC  C271  F0C1         	movff	_pow$15269+1,exp@x+1
  3899  013500  C272  F0C2         	movff	_pow$15269+2,exp@x+2
  3900  013504  C273  F0C3         	movff	_pow$15269+3,exp@x+3
  3901  013508  ECC4  F092         	call	_exp	;wreg free
  3902  01350C  C0C0  F264         	movff	?_exp,pow@x
  3903  013510  C0C1  F265         	movff	?_exp+1,pow@x+1
  3904  013514  C0C2  F266         	movff	?_exp+2,pow@x+2
  3905  013518  C0C3  F267         	movff	?_exp+3,pow@x+3
  3906  01351C  0102               	movlb	2	; () banked
  3907  01351E  5174               	movf	pow@sign& (0+255),w,b
  3908  013520  0102               	movlb	2	; () banked
  3909  013522  B4D8               	btfsc	status,2,c
  3910  013524  D013               	goto	l2694
  3911                           
  3912                           ; BSR set to: 2
  3913  013526  C264  F060         	movff	pow@x,___flneg@f1
  3914  01352A  C265  F061         	movff	pow@x+1,___flneg@f1+1
  3915  01352E  C266  F062         	movff	pow@x+2,___flneg@f1+2
  3916  013532  C267  F063         	movff	pow@x+3,___flneg@f1+3
  3917  013536  ECDF  F0BC         	call	___flneg	;wreg free
  3918  01353A  C060  F264         	movff	?___flneg,?_pow
  3919  01353E  C061  F265         	movff	?___flneg+1,?_pow+1
  3920  013542  C062  F266         	movff	?___flneg+2,?_pow+2
  3921  013546  C063  F267         	movff	?___flneg+3,?_pow+3
  3922  01354A  0012               	return	
  3923  01354C                     l2694:
  3924                           
  3925                           ; BSR set to: 2
  3926  01354C  C264  F264         	movff	pow@x,?_pow
  3927  013550  C265  F265         	movff	pow@x+1,?_pow+1
  3928  013554  C266  F266         	movff	pow@x+2,?_pow+2
  3929  013558  C267  F267         	movff	pow@x+3,?_pow+3
  3930  01355C  0012               	return		;funcret
  3931  01355E                     __end_of_pow:
  3932                           	opt stack 0
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postdec1	equ	0xFE5
  3940                           fsr1h	equ	0xFE2
  3941                           fsr1l	equ	0xFE1
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _log *****************
  3945 ;; Defined at:
  3946 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\log.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  x               4   88[BANK0 ] unsigned char 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;  exponent        2   92[BANK0 ] int 
  3951 ;; Return value:  Size  Location     Type
  3952 ;;                  4   88[BANK0 ] int 
  3953 ;; Registers used:
  3954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3960 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;Total ram usage:        6 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; Hardware stack levels required when called:    9
  3967 ;; This function calls:
  3968 ;;		___fladd
  3969 ;;		___flmul
  3970 ;;		___xxtofl
  3971 ;;		_eval_poly
  3972 ;;		_frexp
  3973 ;; This function is called by:
  3974 ;;		_pow
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text3
  3979  014132                     __ptext3:
  3980                           	opt stack 0
  3981  014132                     _log:
  3982                           	opt stack 20
  3983                           
  3984                           ;incstack = 0
  3985  014132  0100               	movlb	0	; () banked
  3986  014134  AFBB               	btfss	(log@x+3)& (0+255),7,b
  3987  014136  D00F               	goto	l15639
  3988                           
  3989                           ; BSR set to: 0
  3990  014138  0E00               	movlw	0
  3991  01413A  0101               	movlb	1	; () banked
  3992  01413C  6F1C               	movwf	(_errno+1)& (0+255),b
  3993  01413E  0E21               	movlw	33
  3994  014140  6F1B               	movwf	_errno& (0+255),b
  3995  014142  0E00               	movlw	0
  3996  014144  0100               	movlb	0	; () banked
  3997  014146  6FB8               	movwf	?_log& (0+255),b
  3998  014148  0E00               	movlw	0
  3999  01414A  6FB9               	movwf	(?_log+1)& (0+255),b
  4000  01414C  0E00               	movlw	0
  4001  01414E  6FBA               	movwf	(?_log+2)& (0+255),b
  4002  014150  0E00               	movlw	0
  4003  014152  6FBB               	movwf	(?_log+3)& (0+255),b
  4004                           
  4005                           ; BSR set to: 0
  4006  014154  0012               	return	
  4007  014156                     l15639:
  4008                           
  4009                           ; BSR set to: 0
  4010  014156  0100               	movlb	0	; () banked
  4011  014158  51B8               	movf	log@x& (0+255),w,b
  4012  01415A  0100               	movlb	0	; () banked
  4013  01415C  11B9               	iorwf	(log@x+1)& (0+255),w,b
  4014  01415E  0100               	movlb	0	; () banked
  4015  014160  11BA               	iorwf	(log@x+2)& (0+255),w,b
  4016  014162  0100               	movlb	0	; () banked
  4017  014164  11BB               	iorwf	(log@x+3)& (0+255),w,b
  4018  014166  A4D8               	btfss	status,2,c
  4019  014168  D00F               	goto	l15645
  4020                           
  4021                           ; BSR set to: 0
  4022  01416A  0E00               	movlw	0
  4023  01416C  0101               	movlb	1	; () banked
  4024  01416E  6F1C               	movwf	(_errno+1)& (0+255),b
  4025  014170  0E22               	movlw	34
  4026  014172  6F1B               	movwf	_errno& (0+255),b
  4027  014174  0E00               	movlw	0
  4028  014176  0100               	movlb	0	; () banked
  4029  014178  6FB8               	movwf	?_log& (0+255),b
  4030  01417A  0E00               	movlw	0
  4031  01417C  6FB9               	movwf	(?_log+1)& (0+255),b
  4032  01417E  0E00               	movlw	0
  4033  014180  6FBA               	movwf	(?_log+2)& (0+255),b
  4034  014182  0E00               	movlw	0
  4035  014184  6FBB               	movwf	(?_log+3)& (0+255),b
  4036                           
  4037                           ; BSR set to: 0
  4038  014186  0012               	return	
  4039  014188                     l15645:
  4040                           
  4041                           ; BSR set to: 0
  4042  014188  0E00               	movlw	0
  4043  01418A  0100               	movlb	0	; () banked
  4044  01418C  6F72               	movwf	___flmul@a& (0+255),b
  4045  01418E  0E00               	movlw	0
  4046  014190  6F73               	movwf	(___flmul@a+1)& (0+255),b
  4047  014192  0E00               	movlw	0
  4048  014194  6F74               	movwf	(___flmul@a+2)& (0+255),b
  4049  014196  0E40               	movlw	64
  4050  014198  6F75               	movwf	(___flmul@a+3)& (0+255),b
  4051  01419A  0EBC               	movlw	low log@exponent
  4052  01419C  0100               	movlb	0	; () banked
  4053  01419E  6F64               	movwf	frexp@eptr& (0+255),b
  4054  0141A0  0E00               	movlw	high log@exponent
  4055  0141A2  0100               	movlb	0	; () banked
  4056  0141A4  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  4057  0141A6  C0B8  F060         	movff	log@x,frexp@value
  4058  0141AA  C0B9  F061         	movff	log@x+1,frexp@value+1
  4059  0141AE  C0BA  F062         	movff	log@x+2,frexp@value+2
  4060  0141B2  C0BB  F063         	movff	log@x+3,frexp@value+3
  4061  0141B6  ECA5  F0AD         	call	_frexp	;wreg free
  4062  0141BA  C060  F06E         	movff	?_frexp,___flmul@b
  4063  0141BE  C061  F06F         	movff	?_frexp+1,___flmul@b+1
  4064  0141C2  C062  F070         	movff	?_frexp+2,___flmul@b+2
  4065  0141C6  C063  F071         	movff	?_frexp+3,___flmul@b+3
  4066  0141CA  EC2A  F089         	call	___flmul	;wreg free
  4067  0141CE  C06E  F094         	movff	?___flmul,___fladd@b
  4068  0141D2  C06F  F095         	movff	?___flmul+1,___fladd@b+1
  4069  0141D6  C070  F096         	movff	?___flmul+2,___fladd@b+2
  4070  0141DA  C071  F097         	movff	?___flmul+3,___fladd@b+3
  4071  0141DE  0E00               	movlw	0
  4072  0141E0  0100               	movlb	0	; () banked
  4073  0141E2  6F98               	movwf	___fladd@a& (0+255),b
  4074  0141E4  0E00               	movlw	0
  4075  0141E6  6F99               	movwf	(___fladd@a+1)& (0+255),b
  4076  0141E8  0E80               	movlw	128
  4077  0141EA  6F9A               	movwf	(___fladd@a+2)& (0+255),b
  4078  0141EC  0EBF               	movlw	191
  4079  0141EE  6F9B               	movwf	(___fladd@a+3)& (0+255),b
  4080  0141F0  ECD6  F086         	call	___fladd	;wreg free
  4081  0141F4  C094  F0B8         	movff	?___fladd,log@x
  4082  0141F8  C095  F0B9         	movff	?___fladd+1,log@x+1
  4083  0141FC  C096  F0BA         	movff	?___fladd+2,log@x+2
  4084  014200  C097  F0BB         	movff	?___fladd+3,log@x+3
  4085  014204  0100               	movlb	0	; () banked
  4086  014206  07BC               	decf	log@exponent& (0+255),f,b
  4087  014208  A0D8               	btfss	status,0,c
  4088  01420A  07BD               	decf	(log@exponent+1)& (0+255),f,b
  4089                           
  4090                           ; BSR set to: 0
  4091  01420C  C0B8  F0A8         	movff	log@x,eval_poly@x
  4092  014210  C0B9  F0A9         	movff	log@x+1,eval_poly@x+1
  4093  014214  C0BA  F0AA         	movff	log@x+2,eval_poly@x+2
  4094  014218  C0BB  F0AB         	movff	log@x+3,eval_poly@x+3
  4095  01421C  0ED5               	movlw	low log@coeff
  4096  01421E  0100               	movlb	0	; () banked
  4097  014220  6FAC               	movwf	eval_poly@d& (0+255),b
  4098  014222  0EFE               	movlw	high log@coeff
  4099  014224  0100               	movlb	0	; () banked
  4100  014226  6FAD               	movwf	(eval_poly@d+1)& (0+255),b
  4101  014228  0E00               	movlw	0
  4102  01422A  0100               	movlb	0	; () banked
  4103  01422C  6FAF               	movwf	(eval_poly@n+1)& (0+255),b
  4104  01422E  0E08               	movlw	8
  4105  014230  6FAE               	movwf	eval_poly@n& (0+255),b
  4106  014232  EC54  F0A7         	call	_eval_poly	;wreg free
  4107  014236  C0A8  F0B8         	movff	?_eval_poly,log@x
  4108  01423A  C0A9  F0B9         	movff	?_eval_poly+1,log@x+1
  4109  01423E  C0AA  F0BA         	movff	?_eval_poly+2,log@x+2
  4110  014242  C0AB  F0BB         	movff	?_eval_poly+3,log@x+3
  4111  014246  0E18               	movlw	24
  4112  014248  0100               	movlb	0	; () banked
  4113  01424A  6F72               	movwf	___flmul@a& (0+255),b
  4114  01424C  0E72               	movlw	114
  4115  01424E  6F73               	movwf	(___flmul@a+1)& (0+255),b
  4116  014250  0E31               	movlw	49
  4117  014252  6F74               	movwf	(___flmul@a+2)& (0+255),b
  4118  014254  0E3F               	movlw	63
  4119  014256  6F75               	movwf	(___flmul@a+3)& (0+255),b
  4120  014258  C0BC  F060         	movff	log@exponent,___xxtofl@val
  4121  01425C  C0BD  F061         	movff	log@exponent+1,___xxtofl@val+1
  4122  014260  0100               	movlb	0	; () banked
  4123  014262  0E00               	movlw	0
  4124  014264  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4125  014266  0EFF               	movlw	-1
  4126  014268  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  4127  01426A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  4128  01426C  0E01               	movlw	1
  4129  01426E  ECAC  F09B         	call	___xxtofl
  4130  014272  C060  F06E         	movff	?___xxtofl,___flmul@b
  4131  014276  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  4132  01427A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  4133  01427E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  4134  014282  EC2A  F089         	call	___flmul	;wreg free
  4135  014286  C06E  F094         	movff	?___flmul,___fladd@b
  4136  01428A  C06F  F095         	movff	?___flmul+1,___fladd@b+1
  4137  01428E  C070  F096         	movff	?___flmul+2,___fladd@b+2
  4138  014292  C071  F097         	movff	?___flmul+3,___fladd@b+3
  4139  014296  C0B8  F098         	movff	log@x,___fladd@a
  4140  01429A  C0B9  F099         	movff	log@x+1,___fladd@a+1
  4141  01429E  C0BA  F09A         	movff	log@x+2,___fladd@a+2
  4142  0142A2  C0BB  F09B         	movff	log@x+3,___fladd@a+3
  4143  0142A6  ECD6  F086         	call	___fladd	;wreg free
  4144  0142AA  C094  F0B8         	movff	?___fladd,?_log
  4145  0142AE  C095  F0B9         	movff	?___fladd+1,?_log+1
  4146  0142B2  C096  F0BA         	movff	?___fladd+2,?_log+2
  4147  0142B6  C097  F0BB         	movff	?___fladd+3,?_log+3
  4148  0142BA  0012               	return	
  4149  0142BC                     __end_of_log:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           postdec1	equ	0xFE5
  4158                           fsr1h	equ	0xFE2
  4159                           fsr1l	equ	0xFE1
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function _exp *****************
  4163 ;; Defined at:
  4164 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\exp.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  x               4   96[BANK0 ] int 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  exponent        2  104[BANK0 ] int 
  4169 ;;  sign            1  106[BANK0 ] unsigned char 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  4   96[BANK0 ] unsigned char 
  4172 ;; Registers used:
  4173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4179 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;Total ram usage:       11 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    9
  4186 ;; This function calls:
  4187 ;;		___fldiv
  4188 ;;		___flge
  4189 ;;		___flmul
  4190 ;;		___flneg
  4191 ;;		___flsub
  4192 ;;		___fltol
  4193 ;;		___xxtofl
  4194 ;;		_eval_poly
  4195 ;;		_floor
  4196 ;;		_ldexp
  4197 ;; This function is called by:
  4198 ;;		_pow
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text4
  4203  012588                     __ptext4:
  4204                           	opt stack 0
  4205  012588                     _exp:
  4206                           	opt stack 20
  4207                           
  4208                           ;incstack = 0
  4209  012588  0100               	movlb	0	; () banked
  4210  01258A  51C0               	movf	exp@x& (0+255),w,b
  4211  01258C  0100               	movlb	0	; () banked
  4212  01258E  11C1               	iorwf	(exp@x+1)& (0+255),w,b
  4213  012590  0100               	movlb	0	; () banked
  4214  012592  11C2               	iorwf	(exp@x+2)& (0+255),w,b
  4215  012594  0100               	movlb	0	; () banked
  4216  012596  11C3               	iorwf	(exp@x+3)& (0+255),w,b
  4217  012598  A4D8               	btfss	status,2,c
  4218  01259A  D00A               	goto	l15661
  4219                           
  4220                           ; BSR set to: 0
  4221  01259C  0E00               	movlw	0
  4222  01259E  0100               	movlb	0	; () banked
  4223  0125A0  6FC0               	movwf	?_exp& (0+255),b
  4224  0125A2  0E00               	movlw	0
  4225  0125A4  6FC1               	movwf	(?_exp+1)& (0+255),b
  4226  0125A6  0E80               	movlw	128
  4227  0125A8  6FC2               	movwf	(?_exp+2)& (0+255),b
  4228  0125AA  0E3F               	movlw	63
  4229  0125AC  6FC3               	movwf	(?_exp+3)& (0+255),b
  4230                           
  4231                           ; BSR set to: 0
  4232  0125AE  0012               	return	
  4233  0125B0                     l15661:
  4234                           
  4235                           ; BSR set to: 0
  4236  0125B0  0E18               	movlw	24
  4237  0125B2  0100               	movlb	0	; () banked
  4238  0125B4  6F60               	movwf	___flge@ff1& (0+255),b
  4239  0125B6  0E72               	movlw	114
  4240  0125B8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  4241  0125BA  0E31               	movlw	49
  4242  0125BC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  4243  0125BE  0E44               	movlw	68
  4244  0125C0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  4245  0125C2  C0C0  F064         	movff	exp@x,___flge@ff2
  4246  0125C6  C0C1  F065         	movff	exp@x+1,___flge@ff2+1
  4247  0125CA  C0C2  F066         	movff	exp@x+2,___flge@ff2+2
  4248  0125CE  C0C3  F067         	movff	exp@x+3,___flge@ff2+3
  4249  0125D2  EC0B  F09F         	call	___flge	;wreg free
  4250  0125D6  0100               	movlb	0	; () banked
  4251  0125D8  B0D8               	btfsc	status,0,c
  4252  0125DA  D00F               	goto	l15667
  4253                           
  4254                           ; BSR set to: 0
  4255  0125DC  0E00               	movlw	0
  4256  0125DE  0101               	movlb	1	; () banked
  4257  0125E0  6F1C               	movwf	(_errno+1)& (0+255),b
  4258  0125E2  0E22               	movlw	34
  4259  0125E4  6F1B               	movwf	_errno& (0+255),b
  4260  0125E6  0EFF               	movlw	255
  4261  0125E8  0100               	movlb	0	; () banked
  4262  0125EA  6FC0               	movwf	?_exp& (0+255),b
  4263  0125EC  0EFF               	movlw	255
  4264  0125EE  6FC1               	movwf	(?_exp+1)& (0+255),b
  4265  0125F0  0E7F               	movlw	127
  4266  0125F2  6FC2               	movwf	(?_exp+2)& (0+255),b
  4267  0125F4  0E7F               	movlw	127
  4268  0125F6  6FC3               	movwf	(?_exp+3)& (0+255),b
  4269                           
  4270                           ; BSR set to: 0
  4271  0125F8  0012               	return	
  4272  0125FA                     l15667:
  4273                           
  4274                           ; BSR set to: 0
  4275  0125FA  C0C0  F060         	movff	exp@x,___flge@ff1
  4276  0125FE  C0C1  F061         	movff	exp@x+1,___flge@ff1+1
  4277  012602  C0C2  F062         	movff	exp@x+2,___flge@ff1+2
  4278  012606  C0C3  F063         	movff	exp@x+3,___flge@ff1+3
  4279  01260A  0E87               	movlw	135
  4280  01260C  0100               	movlb	0	; () banked
  4281  01260E  6F64               	movwf	___flge@ff2& (0+255),b
  4282  012610  0E48               	movlw	72
  4283  012612  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  4284  012614  0E3A               	movlw	58
  4285  012616  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  4286  012618  0EC4               	movlw	196
  4287  01261A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  4288  01261C  EC0B  F09F         	call	___flge	;wreg free
  4289  012620  0100               	movlb	0	; () banked
  4290  012622  B0D8               	btfsc	status,0,c
  4291  012624  D00F               	goto	l15673
  4292                           
  4293                           ; BSR set to: 0
  4294  012626  0E00               	movlw	0
  4295  012628  0101               	movlb	1	; () banked
  4296  01262A  6F1C               	movwf	(_errno+1)& (0+255),b
  4297  01262C  0E22               	movlw	34
  4298  01262E  6F1B               	movwf	_errno& (0+255),b
  4299  012630  0E00               	movlw	0
  4300  012632  0100               	movlb	0	; () banked
  4301  012634  6FC0               	movwf	?_exp& (0+255),b
  4302  012636  0E00               	movlw	0
  4303  012638  6FC1               	movwf	(?_exp+1)& (0+255),b
  4304  01263A  0E00               	movlw	0
  4305  01263C  6FC2               	movwf	(?_exp+2)& (0+255),b
  4306  01263E  0E00               	movlw	0
  4307  012640  6FC3               	movwf	(?_exp+3)& (0+255),b
  4308                           
  4309                           ; BSR set to: 0
  4310  012642  0012               	return	
  4311  012644                     l15673:
  4312                           
  4313                           ; BSR set to: 0
  4314  012644  0100               	movlb	0	; () banked
  4315  012646  AFC3               	btfss	(exp@x+3)& (0+255),7,b
  4316  012648  D002               	goto	u13630
  4317  01264A  0E01               	movlw	1
  4318  01264C  D001               	goto	u13640
  4319  01264E                     u13630:
  4320  01264E  0E00               	movlw	0
  4321  012650                     u13640:
  4322  012650  0100               	movlb	0	; () banked
  4323  012652  6FCA               	movwf	exp@sign& (0+255),b
  4324                           
  4325                           ; BSR set to: 0
  4326  012654  0100               	movlb	0	; () banked
  4327  012656  51CA               	movf	exp@sign& (0+255),w,b
  4328  012658  0100               	movlb	0	; () banked
  4329  01265A  B4D8               	btfsc	status,2,c
  4330  01265C  D012               	goto	l15679
  4331                           
  4332                           ; BSR set to: 0
  4333  01265E  C0C0  F060         	movff	exp@x,___flneg@f1
  4334  012662  C0C1  F061         	movff	exp@x+1,___flneg@f1+1
  4335  012666  C0C2  F062         	movff	exp@x+2,___flneg@f1+2
  4336  01266A  C0C3  F063         	movff	exp@x+3,___flneg@f1+3
  4337  01266E  ECDF  F0BC         	call	___flneg	;wreg free
  4338  012672  C060  F0C0         	movff	?___flneg,exp@x
  4339  012676  C061  F0C1         	movff	?___flneg+1,exp@x+1
  4340  01267A  C062  F0C2         	movff	?___flneg+2,exp@x+2
  4341  01267E  C063  F0C3         	movff	?___flneg+3,exp@x+3
  4342  012682                     l15679:
  4343  012682  C0C0  F06E         	movff	exp@x,___flmul@b
  4344  012686  C0C1  F06F         	movff	exp@x+1,___flmul@b+1
  4345  01268A  C0C2  F070         	movff	exp@x+2,___flmul@b+2
  4346  01268E  C0C3  F071         	movff	exp@x+3,___flmul@b+3
  4347  012692  0E3B               	movlw	59
  4348  012694  0100               	movlb	0	; () banked
  4349  012696  6F72               	movwf	___flmul@a& (0+255),b
  4350  012698  0EAA               	movlw	170
  4351  01269A  6F73               	movwf	(___flmul@a+1)& (0+255),b
  4352  01269C  0EB8               	movlw	184
  4353  01269E  6F74               	movwf	(___flmul@a+2)& (0+255),b
  4354  0126A0  0E3F               	movlw	63
  4355  0126A2  6F75               	movwf	(___flmul@a+3)& (0+255),b
  4356  0126A4  EC2A  F089         	call	___flmul	;wreg free
  4357  0126A8  C06E  F0C0         	movff	?___flmul,exp@x
  4358  0126AC  C06F  F0C1         	movff	?___flmul+1,exp@x+1
  4359  0126B0  C070  F0C2         	movff	?___flmul+2,exp@x+2
  4360  0126B4  C071  F0C3         	movff	?___flmul+3,exp@x+3
  4361  0126B8  C0C0  F0A8         	movff	exp@x,floor@x
  4362  0126BC  C0C1  F0A9         	movff	exp@x+1,floor@x+1
  4363  0126C0  C0C2  F0AA         	movff	exp@x+2,floor@x+2
  4364  0126C4  C0C3  F0AB         	movff	exp@x+3,floor@x+3
  4365  0126C8  EC30  F0A6         	call	_floor	;wreg free
  4366  0126CC  C0A8  F0C4         	movff	?_floor,_exp$15270
  4367  0126D0  C0A9  F0C5         	movff	?_floor+1,_exp$15270+1
  4368  0126D4  C0AA  F0C6         	movff	?_floor+2,_exp$15270+2
  4369  0126D8  C0AB  F0C7         	movff	?_floor+3,_exp$15270+3
  4370  0126DC  C0C4  F087         	movff	_exp$15270,___fltol@f1
  4371  0126E0  C0C5  F088         	movff	_exp$15270+1,___fltol@f1+1
  4372  0126E4  C0C6  F089         	movff	_exp$15270+2,___fltol@f1+2
  4373  0126E8  C0C7  F08A         	movff	_exp$15270+3,___fltol@f1+3
  4374  0126EC  ECE0  F0A7         	call	___fltol	;wreg free
  4375  0126F0  C087  F0C8         	movff	?___fltol,exp@exponent
  4376  0126F4  C088  F0C9         	movff	?___fltol+1,exp@exponent+1
  4377  0126F8  C0C0  F0A8         	movff	exp@x,___flsub@b
  4378  0126FC  C0C1  F0A9         	movff	exp@x+1,___flsub@b+1
  4379  012700  C0C2  F0AA         	movff	exp@x+2,___flsub@b+2
  4380  012704  C0C3  F0AB         	movff	exp@x+3,___flsub@b+3
  4381  012708  C0C8  F060         	movff	exp@exponent,___xxtofl@val
  4382  01270C  C0C9  F061         	movff	exp@exponent+1,___xxtofl@val+1
  4383  012710  0100               	movlb	0	; () banked
  4384  012712  0E00               	movlw	0
  4385  012714  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4386  012716  0EFF               	movlw	-1
  4387  012718  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  4388  01271A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  4389  01271C  0E01               	movlw	1
  4390  01271E  ECAC  F09B         	call	___xxtofl
  4391  012722  C060  F0AC         	movff	?___xxtofl,___flsub@a
  4392  012726  C061  F0AD         	movff	?___xxtofl+1,___flsub@a+1
  4393  01272A  C062  F0AE         	movff	?___xxtofl+2,___flsub@a+2
  4394  01272E  C063  F0AF         	movff	?___xxtofl+3,___flsub@a+3
  4395  012732  EC3A  F0BB         	call	___flsub	;wreg free
  4396  012736  C0A8  F0C0         	movff	?___flsub,exp@x
  4397  01273A  C0A9  F0C1         	movff	?___flsub+1,exp@x+1
  4398  01273E  C0AA  F0C2         	movff	?___flsub+2,exp@x+2
  4399  012742  C0AB  F0C3         	movff	?___flsub+3,exp@x+3
  4400  012746  C0C0  F0A8         	movff	exp@x,eval_poly@x
  4401  01274A  C0C1  F0A9         	movff	exp@x+1,eval_poly@x+1
  4402  01274E  C0C2  F0AA         	movff	exp@x+2,eval_poly@x+2
  4403  012752  C0C3  F0AB         	movff	exp@x+3,eval_poly@x+3
  4404  012756  0EAD               	movlw	low exp@coeff
  4405  012758  0100               	movlb	0	; () banked
  4406  01275A  6FAC               	movwf	eval_poly@d& (0+255),b
  4407  01275C  0EFE               	movlw	high exp@coeff
  4408  01275E  0100               	movlb	0	; () banked
  4409  012760  6FAD               	movwf	(eval_poly@d+1)& (0+255),b
  4410  012762  0E00               	movlw	0
  4411  012764  0100               	movlb	0	; () banked
  4412  012766  6FAF               	movwf	(eval_poly@n+1)& (0+255),b
  4413  012768  0E09               	movlw	9
  4414  01276A  6FAE               	movwf	eval_poly@n& (0+255),b
  4415  01276C  EC54  F0A7         	call	_eval_poly	;wreg free
  4416  012770  C0A8  F0B8         	movff	?_eval_poly,ldexp@value
  4417  012774  C0A9  F0B9         	movff	?_eval_poly+1,ldexp@value+1
  4418  012778  C0AA  F0BA         	movff	?_eval_poly+2,ldexp@value+2
  4419  01277C  C0AB  F0BB         	movff	?_eval_poly+3,ldexp@value+3
  4420  012780  C0C8  F0BC         	movff	exp@exponent,ldexp@newexp
  4421  012784  C0C9  F0BD         	movff	exp@exponent+1,ldexp@newexp+1
  4422  012788  EC9E  F0A5         	call	_ldexp	;wreg free
  4423  01278C  C0B8  F0C0         	movff	?_ldexp,exp@x
  4424  012790  C0B9  F0C1         	movff	?_ldexp+1,exp@x+1
  4425  012794  C0BA  F0C2         	movff	?_ldexp+2,exp@x+2
  4426  012798  C0BB  F0C3         	movff	?_ldexp+3,exp@x+3
  4427  01279C  0100               	movlb	0	; () banked
  4428  01279E  51CA               	movf	exp@sign& (0+255),w,b
  4429  0127A0  0100               	movlb	0	; () banked
  4430  0127A2  B4D8               	btfsc	status,2,c
  4431  0127A4  D035               	goto	l2857
  4432                           
  4433                           ; BSR set to: 0
  4434  0127A6  0100               	movlb	0	; () banked
  4435  0127A8  29C0               	incf	exp@x& (0+255),w,b
  4436  0127AA  E116               	bnz	l15697
  4437  0127AC  0100               	movlb	0	; () banked
  4438  0127AE  29C1               	incf	(exp@x+1)& (0+255),w,b
  4439  0127B0  E113               	bnz	l15697
  4440  0127B2  0E7F               	movlw	127
  4441  0127B4  0100               	movlb	0	; () banked
  4442  0127B6  19C2               	xorwf	(exp@x+2)& (0+255),w,b
  4443  0127B8  E10F               	bnz	l15697
  4444  0127BA  0E7F               	movlw	127
  4445  0127BC  0100               	movlb	0	; () banked
  4446  0127BE  19C3               	xorwf	(exp@x+3)& (0+255),w,b
  4447  0127C0  A4D8               	btfss	status,2,c
  4448  0127C2  D00A               	goto	l15697
  4449                           
  4450                           ; BSR set to: 0
  4451  0127C4  0E00               	movlw	0
  4452  0127C6  0100               	movlb	0	; () banked
  4453  0127C8  6FC0               	movwf	?_exp& (0+255),b
  4454  0127CA  0E00               	movlw	0
  4455  0127CC  6FC1               	movwf	(?_exp+1)& (0+255),b
  4456  0127CE  0E00               	movlw	0
  4457  0127D0  6FC2               	movwf	(?_exp+2)& (0+255),b
  4458  0127D2  0E00               	movlw	0
  4459  0127D4  6FC3               	movwf	(?_exp+3)& (0+255),b
  4460                           
  4461                           ; BSR set to: 0
  4462  0127D6  0012               	return	
  4463  0127D8                     l15697:
  4464                           
  4465                           ; BSR set to: 0
  4466  0127D8  0E00               	movlw	0
  4467  0127DA  0100               	movlb	0	; () banked
  4468  0127DC  6F60               	movwf	___fldiv@b& (0+255),b
  4469  0127DE  0E00               	movlw	0
  4470  0127E0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  4471  0127E2  0E80               	movlw	128
  4472  0127E4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  4473  0127E6  0E3F               	movlw	63
  4474  0127E8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  4475  0127EA  C0C0  F064         	movff	exp@x,___fldiv@a
  4476  0127EE  C0C1  F065         	movff	exp@x+1,___fldiv@a+1
  4477  0127F2  C0C2  F066         	movff	exp@x+2,___fldiv@a+2
  4478  0127F6  C0C3  F067         	movff	exp@x+3,___fldiv@a+3
  4479  0127FA  EC8C  F08D         	call	___fldiv	;wreg free
  4480  0127FE  C060  F0C0         	movff	?___fldiv,?_exp
  4481  012802  C061  F0C1         	movff	?___fldiv+1,?_exp+1
  4482  012806  C062  F0C2         	movff	?___fldiv+2,?_exp+2
  4483  01280A  C063  F0C3         	movff	?___fldiv+3,?_exp+3
  4484  01280E  0012               	return	
  4485  012810                     l2857:
  4486                           
  4487                           ; BSR set to: 0
  4488  012810  C0C0  F0C0         	movff	exp@x,?_exp
  4489  012814  C0C1  F0C1         	movff	exp@x+1,?_exp+1
  4490  012818  C0C2  F0C2         	movff	exp@x+2,?_exp+2
  4491  01281C  C0C3  F0C3         	movff	exp@x+3,?_exp+3
  4492  012820  0012               	return		;funcret
  4493  012822                     __end_of_exp:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1h	equ	0xFE2
  4503                           fsr1l	equ	0xFE1
  4504                           status	equ	0xFD8
  4505                           
  4506 ;; *************** function _ldexp *****************
  4507 ;; Defined at:
  4508 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\frexp.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  value           4   88[BANK0 ] unsigned char 
  4511 ;;  newexp          2   92[BANK0 ] int 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  4   88[BANK0 ] int 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        8 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    7
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_exp
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text5
  4538  014B3C                     __ptext5:
  4539                           	opt stack 0
  4540  014B3C                     _ldexp:
  4541                           	opt stack 21
  4542                           
  4543                           ;incstack = 0
  4544  014B3C  0100               	movlb	0	; () banked
  4545  014B3E  51B8               	movf	ldexp@value& (0+255),w,b
  4546  014B40  0100               	movlb	0	; () banked
  4547  014B42  11B9               	iorwf	(ldexp@value+1)& (0+255),w,b
  4548  014B44  0100               	movlb	0	; () banked
  4549  014B46  11BA               	iorwf	(ldexp@value+2)& (0+255),w,b
  4550  014B48  0100               	movlb	0	; () banked
  4551  014B4A  11BB               	iorwf	(ldexp@value+3)& (0+255),w,b
  4552  014B4C  A4D8               	btfss	status,2,c
  4553  014B4E  D00A               	goto	l15099
  4554                           
  4555                           ; BSR set to: 0
  4556  014B50  0E00               	movlw	0
  4557  014B52  0100               	movlb	0	; () banked
  4558  014B54  6FB8               	movwf	?_ldexp& (0+255),b
  4559  014B56  0E00               	movlw	0
  4560  014B58  6FB9               	movwf	(?_ldexp+1)& (0+255),b
  4561  014B5A  0E00               	movlw	0
  4562  014B5C  6FBA               	movwf	(?_ldexp+2)& (0+255),b
  4563  014B5E  0E00               	movlw	0
  4564  014B60  6FBB               	movwf	(?_ldexp+3)& (0+255),b
  4565                           
  4566                           ; BSR set to: 0
  4567  014B62  0012               	return	
  4568  014B64                     l15099:
  4569                           
  4570                           ; BSR set to: 0
  4571  014B64  0100               	movlb	0	; () banked
  4572  014B66  51BB               	movf	(ldexp@value+3)& (0+255),w,b
  4573  014B68  0B7F               	andlw	127
  4574  014B6A  0100               	movlb	0	; () banked
  4575  014B6C  6FBE               	movwf	??_ldexp& (0+255),b
  4576  014B6E  6BBF               	clrf	(??_ldexp+1)& (0+255),b
  4577  014B70  90D8               	bcf	status,0,c
  4578  014B72  0100               	movlb	0	; () banked
  4579  014B74  37BE               	rlcf	??_ldexp& (0+255),f,b
  4580  014B76  37BF               	rlcf	(??_ldexp+1)& (0+255),f,b
  4581  014B78  0100               	movlb	0	; () banked
  4582  014B7A  51BE               	movf	??_ldexp& (0+255),w,b
  4583  014B7C  0100               	movlb	0	; () banked
  4584  014B7E  27BC               	addwf	ldexp@newexp& (0+255),f,b
  4585  014B80  0100               	movlb	0	; () banked
  4586  014B82  51BF               	movf	(??_ldexp+1)& (0+255),w,b
  4587  014B84  0100               	movlb	0	; () banked
  4588  014B86  23BD               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4589  014B88  0100               	movlb	0	; () banked
  4590  014B8A  AFBA               	btfss	(ldexp@value+2)& (0+255),7,b
  4591  014B8C  D004               	goto	u12930
  4592  014B8E  0100               	movlb	0	; () banked
  4593  014B90  6BBE               	clrf	??_ldexp& (0+255),b
  4594  014B92  2BBE               	incf	??_ldexp& (0+255),f,b
  4595  014B94  D002               	goto	u12938
  4596  014B96                     u12930:
  4597  014B96  0100               	movlb	0	; () banked
  4598  014B98  6BBE               	clrf	??_ldexp& (0+255),b
  4599  014B9A                     u12938:
  4600  014B9A  0100               	movlb	0	; () banked
  4601  014B9C  51BE               	movf	??_ldexp& (0+255),w,b
  4602  014B9E  0100               	movlb	0	; () banked
  4603  014BA0  27BC               	addwf	ldexp@newexp& (0+255),f,b
  4604  014BA2  0E00               	movlw	0
  4605  014BA4  23BD               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4606  014BA6  0100               	movlb	0	; () banked
  4607  014BA8  AFBD               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4608  014BAA  D00F               	goto	l15107
  4609                           
  4610                           ; BSR set to: 0
  4611  014BAC  0E00               	movlw	0
  4612  014BAE  0101               	movlb	1	; () banked
  4613  014BB0  6F1C               	movwf	(_errno+1)& (0+255),b
  4614  014BB2  0E22               	movlw	34
  4615  014BB4  6F1B               	movwf	_errno& (0+255),b
  4616  014BB6  0E00               	movlw	0
  4617  014BB8  0100               	movlb	0	; () banked
  4618  014BBA  6FB8               	movwf	?_ldexp& (0+255),b
  4619  014BBC  0E00               	movlw	0
  4620  014BBE  6FB9               	movwf	(?_ldexp+1)& (0+255),b
  4621  014BC0  0E00               	movlw	0
  4622  014BC2  6FBA               	movwf	(?_ldexp+2)& (0+255),b
  4623  014BC4  0E00               	movlw	0
  4624  014BC6                     L1:
  4625  014BC6  6FBB               	movwf	(?_ldexp+3)& (0+255),b
  4626                           
  4627                           ; BSR set to: 0
  4628  014BC8  0012               	return	
  4629  014BCA                     l15107:
  4630                           
  4631                           ; BSR set to: 0
  4632  014BCA  0100               	movlb	0	; () banked
  4633  014BCC  BFBD               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  4634  014BCE  D01E               	goto	l15123
  4635  014BD0  0100               	movlb	0	; () banked
  4636  014BD2  05BD               	decf	(ldexp@newexp+1)& (0+255),w,b
  4637  014BD4  A0D8               	btfss	status,0,c
  4638  014BD6  D01A               	goto	l15123
  4639                           
  4640                           ; BSR set to: 0
  4641  014BD8  0E00               	movlw	0
  4642  014BDA  0101               	movlb	1	; () banked
  4643  014BDC  6F1C               	movwf	(_errno+1)& (0+255),b
  4644  014BDE  0E22               	movlw	34
  4645  014BE0  6F1B               	movwf	_errno& (0+255),b
  4646                           
  4647                           ; BSR set to: 1
  4648  014BE2  0100               	movlb	0	; () banked
  4649  014BE4  AFBB               	btfss	(ldexp@value+3)& (0+255),7,b
  4650  014BE6  D009               	goto	l15119
  4651                           
  4652                           ; BSR set to: 0
  4653  014BE8  0EFF               	movlw	255
  4654  014BEA  0100               	movlb	0	; () banked
  4655  014BEC  6FB8               	movwf	?_ldexp& (0+255),b
  4656  014BEE  0EFF               	movlw	255
  4657  014BF0  6FB9               	movwf	(?_ldexp+1)& (0+255),b
  4658  014BF2  0E7F               	movlw	127
  4659  014BF4  6FBA               	movwf	(?_ldexp+2)& (0+255),b
  4660  014BF6  0EFF               	movlw	255
  4661  014BF8  D7E6               	goto	L1
  4662  014BFA                     l15119:
  4663                           
  4664                           ; BSR set to: 0
  4665  014BFA  0EFF               	movlw	255
  4666  014BFC  0100               	movlb	0	; () banked
  4667  014BFE  6FB8               	movwf	?_ldexp& (0+255),b
  4668  014C00  0EFF               	movlw	255
  4669  014C02  6FB9               	movwf	(?_ldexp+1)& (0+255),b
  4670  014C04  0E7F               	movlw	127
  4671  014C06  6FBA               	movwf	(?_ldexp+2)& (0+255),b
  4672  014C08  0E7F               	movlw	127
  4673  014C0A  D7DD               	goto	L1
  4674  014C0C                     l15123:
  4675                           
  4676                           ; BSR set to: 0
  4677  014C0C  0100               	movlb	0	; () banked
  4678  014C0E  35BD               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4679  014C10  31BD               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4680  014C12  0100               	movlb	0	; () banked
  4681  014C14  6FBF               	movwf	(??_ldexp+1)& (0+255),b
  4682  014C16  0100               	movlb	0	; () banked
  4683  014C18  31BC               	rrcf	ldexp@newexp& (0+255),w,b
  4684  014C1A  0100               	movlb	0	; () banked
  4685  014C1C  6FBE               	movwf	??_ldexp& (0+255),b
  4686  014C1E  0100               	movlb	0	; () banked
  4687  014C20  51BB               	movf	(ldexp@value+3)& (0+255),w,b
  4688  014C22  0100               	movlb	0	; () banked
  4689  014C24  19BE               	xorwf	??_ldexp& (0+255),w,b
  4690  014C26  0B80               	andlw	-128
  4691  014C28  19BE               	xorwf	??_ldexp& (0+255),w,b
  4692  014C2A  0100               	movlb	0	; () banked
  4693  014C2C  6FBB               	movwf	(ldexp@value+3)& (0+255),b
  4694  014C2E  C0BC  F0BE         	movff	ldexp@newexp,??_ldexp
  4695  014C32  0E01               	movlw	1
  4696  014C34  0100               	movlb	0	; () banked
  4697  014C36  17BE               	andwf	??_ldexp& (0+255),f,b
  4698  014C38  0100               	movlb	0	; () banked
  4699  014C3A  33BE               	rrcf	??_ldexp& (0+255),f,b
  4700  014C3C  33BE               	rrcf	??_ldexp& (0+255),f,b
  4701  014C3E  0100               	movlb	0	; () banked
  4702  014C40  51BA               	movf	(ldexp@value+2)& (0+255),w,b
  4703  014C42  0100               	movlb	0	; () banked
  4704  014C44  19BE               	xorwf	??_ldexp& (0+255),w,b
  4705  014C46  0B7F               	andlw	-129
  4706  014C48  19BE               	xorwf	??_ldexp& (0+255),w,b
  4707  014C4A  0100               	movlb	0	; () banked
  4708  014C4C  6FBA               	movwf	(ldexp@value+2)& (0+255),b
  4709                           
  4710                           ; BSR set to: 0
  4711                           
  4712                           ; BSR set to: 0
  4713                           
  4714                           ; BSR set to: 0
  4715  014C4E  C0B8  F0B8         	movff	ldexp@value,?_ldexp
  4716  014C52  C0B9  F0B9         	movff	ldexp@value+1,?_ldexp+1
  4717  014C56  C0BA  F0BA         	movff	ldexp@value+2,?_ldexp+2
  4718  014C5A  C0BB  F0BB         	movff	ldexp@value+3,?_ldexp+3
  4719  014C5E  0012               	return	
  4720  014C60                     __end_of_ldexp:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           postdec1	equ	0xFE5
  4729                           fsr1h	equ	0xFE2
  4730                           fsr1l	equ	0xFE1
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _floor *****************
  4734 ;; Defined at:
  4735 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\floor.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  x               4   72[BANK0 ] int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  i               4   76[BANK0 ] int 
  4740 ;;  expon           2   80[BANK0 ] int 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  4   72[BANK0 ] int 
  4743 ;; Registers used:
  4744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;Total ram usage:       10 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    8
  4757 ;; This function calls:
  4758 ;;		___fladd
  4759 ;;		___flge
  4760 ;;		___fltol
  4761 ;;		___xxtofl
  4762 ;;		_frexp
  4763 ;; This function is called by:
  4764 ;;		_exp
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text6
  4769  014C60                     __ptext6:
  4770                           	opt stack 0
  4771  014C60                     _floor:
  4772                           	opt stack 20
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;incstack = 0
  4776  014C60  C0A8  F060         	movff	floor@x,frexp@value
  4777  014C64  C0A9  F061         	movff	floor@x+1,frexp@value+1
  4778  014C68  C0AA  F062         	movff	floor@x+2,frexp@value+2
  4779  014C6C  C0AB  F063         	movff	floor@x+3,frexp@value+3
  4780  014C70  0EB0               	movlw	low floor@expon
  4781  014C72  0100               	movlb	0	; () banked
  4782  014C74  6F64               	movwf	frexp@eptr& (0+255),b
  4783  014C76  0E00               	movlw	high floor@expon
  4784  014C78  0100               	movlb	0	; () banked
  4785  014C7A  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  4786  014C7C  ECA5  F0AD         	call	_frexp	;wreg free
  4787  014C80  0100               	movlb	0	; () banked
  4788  014C82  AFB1               	btfss	(floor@expon+1)& (0+255),7,b
  4789  014C84  D017               	goto	l15077
  4790                           
  4791                           ; BSR set to: 0
  4792  014C86  0100               	movlb	0	; () banked
  4793  014C88  AFAB               	btfss	(floor@x+3)& (0+255),7,b
  4794  014C8A  D00A               	goto	l15073
  4795                           
  4796                           ; BSR set to: 0
  4797  014C8C  0E00               	movlw	0
  4798  014C8E  0100               	movlb	0	; () banked
  4799  014C90  6FA8               	movwf	?_floor& (0+255),b
  4800  014C92  0E00               	movlw	0
  4801  014C94  6FA9               	movwf	(?_floor+1)& (0+255),b
  4802  014C96  0E80               	movlw	128
  4803  014C98  6FAA               	movwf	(?_floor+2)& (0+255),b
  4804  014C9A  0EBF               	movlw	191
  4805  014C9C  6FAB               	movwf	(?_floor+3)& (0+255),b
  4806                           
  4807                           ; BSR set to: 0
  4808  014C9E  0012               	return	
  4809  014CA0                     l15073:
  4810                           
  4811                           ; BSR set to: 0
  4812  014CA0  0E00               	movlw	0
  4813  014CA2  0100               	movlb	0	; () banked
  4814  014CA4  6FA8               	movwf	?_floor& (0+255),b
  4815  014CA6  0E00               	movlw	0
  4816  014CA8  6FA9               	movwf	(?_floor+1)& (0+255),b
  4817  014CAA  0E00               	movlw	0
  4818  014CAC  6FAA               	movwf	(?_floor+2)& (0+255),b
  4819  014CAE  0E00               	movlw	0
  4820  014CB0  6FAB               	movwf	(?_floor+3)& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823  014CB2  0012               	return	
  4824  014CB4                     l15077:
  4825                           
  4826                           ; BSR set to: 0
  4827  014CB4  0100               	movlb	0	; () banked
  4828  014CB6  51B1               	movf	(floor@expon+1)& (0+255),w,b
  4829  014CB8  E105               	bnz	u12890
  4830  014CBA  0E1D               	movlw	29
  4831  014CBC  0100               	movlb	0	; () banked
  4832  014CBE  5DB0               	subwf	floor@expon& (0+255),w,b
  4833  014CC0  A0D8               	btfss	status,0,c
  4834  014CC2  D009               	goto	l15081
  4835  014CC4                     u12890:
  4836                           
  4837                           ; BSR set to: 0
  4838  014CC4  C0A8  F0A8         	movff	floor@x,?_floor
  4839  014CC8  C0A9  F0A9         	movff	floor@x+1,?_floor+1
  4840  014CCC  C0AA  F0AA         	movff	floor@x+2,?_floor+2
  4841  014CD0  C0AB  F0AB         	movff	floor@x+3,?_floor+3
  4842  014CD4  0012               	return	
  4843  014CD6                     l15081:
  4844                           
  4845                           ; BSR set to: 0
  4846  014CD6  C0A8  F087         	movff	floor@x,___fltol@f1
  4847  014CDA  C0A9  F088         	movff	floor@x+1,___fltol@f1+1
  4848  014CDE  C0AA  F089         	movff	floor@x+2,___fltol@f1+2
  4849  014CE2  C0AB  F08A         	movff	floor@x+3,___fltol@f1+3
  4850  014CE6  ECE0  F0A7         	call	___fltol	;wreg free
  4851  014CEA  C087  F060         	movff	?___fltol,___xxtofl@val
  4852  014CEE  C088  F061         	movff	?___fltol+1,___xxtofl@val+1
  4853  014CF2  C089  F062         	movff	?___fltol+2,___xxtofl@val+2
  4854  014CF6  C08A  F063         	movff	?___fltol+3,___xxtofl@val+3
  4855  014CFA  0E01               	movlw	1
  4856  014CFC  ECAC  F09B         	call	___xxtofl
  4857  014D00  C060  F0AC         	movff	?___xxtofl,floor@i
  4858  014D04  C061  F0AD         	movff	?___xxtofl+1,floor@i+1
  4859  014D08  C062  F0AE         	movff	?___xxtofl+2,floor@i+2
  4860  014D0C  C063  F0AF         	movff	?___xxtofl+3,floor@i+3
  4861  014D10  C0A8  F060         	movff	floor@x,___flge@ff1
  4862  014D14  C0A9  F061         	movff	floor@x+1,___flge@ff1+1
  4863  014D18  C0AA  F062         	movff	floor@x+2,___flge@ff1+2
  4864  014D1C  C0AB  F063         	movff	floor@x+3,___flge@ff1+3
  4865  014D20  C0AC  F064         	movff	floor@i,___flge@ff2
  4866  014D24  C0AD  F065         	movff	floor@i+1,___flge@ff2+1
  4867  014D28  C0AE  F066         	movff	floor@i+2,___flge@ff2+2
  4868  014D2C  C0AF  F067         	movff	floor@i+3,___flge@ff2+3
  4869  014D30  EC0B  F09F         	call	___flge	;wreg free
  4870  014D34  0100               	movlb	0	; () banked
  4871  014D36  B0D8               	btfsc	status,0,c
  4872  014D38  D01C               	goto	l2867
  4873                           
  4874                           ; BSR set to: 0
  4875  014D3A  C0AC  F094         	movff	floor@i,___fladd@b
  4876  014D3E  C0AD  F095         	movff	floor@i+1,___fladd@b+1
  4877  014D42  C0AE  F096         	movff	floor@i+2,___fladd@b+2
  4878  014D46  C0AF  F097         	movff	floor@i+3,___fladd@b+3
  4879  014D4A  0E00               	movlw	0
  4880  014D4C  0100               	movlb	0	; () banked
  4881  014D4E  6F98               	movwf	___fladd@a& (0+255),b
  4882  014D50  0E00               	movlw	0
  4883  014D52  6F99               	movwf	(___fladd@a+1)& (0+255),b
  4884  014D54  0E80               	movlw	128
  4885  014D56  6F9A               	movwf	(___fladd@a+2)& (0+255),b
  4886  014D58  0EBF               	movlw	191
  4887  014D5A  6F9B               	movwf	(___fladd@a+3)& (0+255),b
  4888  014D5C  ECD6  F086         	call	___fladd	;wreg free
  4889  014D60  C094  F0A8         	movff	?___fladd,?_floor
  4890  014D64  C095  F0A9         	movff	?___fladd+1,?_floor+1
  4891  014D68  C096  F0AA         	movff	?___fladd+2,?_floor+2
  4892  014D6C  C097  F0AB         	movff	?___fladd+3,?_floor+3
  4893  014D70  0012               	return	
  4894  014D72                     l2867:
  4895                           
  4896                           ; BSR set to: 0
  4897  014D72  C0AC  F0A8         	movff	floor@i,?_floor
  4898  014D76  C0AD  F0A9         	movff	floor@i+1,?_floor+1
  4899  014D7A  C0AE  F0AA         	movff	floor@i+2,?_floor+2
  4900  014D7E  C0AF  F0AB         	movff	floor@i+3,?_floor+3
  4901  014D82  0012               	return		;funcret
  4902  014D84                     __end_of_floor:
  4903                           	opt stack 0
  4904                           tblptru	equ	0xFF8
  4905                           tblptrh	equ	0xFF7
  4906                           tblptrl	equ	0xFF6
  4907                           tablat	equ	0xFF5
  4908                           postinc0	equ	0xFEE
  4909                           wreg	equ	0xFE8
  4910                           postdec1	equ	0xFE5
  4911                           fsr1h	equ	0xFE2
  4912                           fsr1l	equ	0xFE1
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function _frexp *****************
  4916 ;; Defined at:
  4917 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\frexp.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  value           4    0[BANK0 ] int 
  4920 ;;  eptr            2    4[BANK0 ] PTR int 
  4921 ;;		 -> log@exponent(2), floor@expon(2), 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  4    0[BANK0 ] PTR int 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4933 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;Total ram usage:        8 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    7
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_floor
  4944 ;;		_log
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text7
  4949  015B4A                     __ptext7:
  4950                           	opt stack 0
  4951  015B4A                     _frexp:
  4952                           	opt stack 21
  4953                           
  4954                           ;incstack = 0
  4955  015B4A  0100               	movlb	0	; () banked
  4956  015B4C  5160               	movf	frexp@value& (0+255),w,b
  4957  015B4E  0100               	movlb	0	; () banked
  4958  015B50  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  4959  015B52  0100               	movlb	0	; () banked
  4960  015B54  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  4961  015B56  0100               	movlb	0	; () banked
  4962  015B58  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  4963  015B5A  A4D8               	btfss	status,2,c
  4964  015B5C  D012               	goto	l14389
  4965                           
  4966                           ; BSR set to: 0
  4967  015B5E  C064  FFD9         	movff	frexp@eptr,fsr2l
  4968  015B62  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4969  015B66  0E00               	movlw	0
  4970  015B68  6EDE               	movwf	postinc2,c
  4971  015B6A  0E00               	movlw	0
  4972  015B6C  6EDD               	movwf	postdec2,c
  4973                           
  4974                           ; BSR set to: 0
  4975  015B6E  0E00               	movlw	0
  4976  015B70  0100               	movlb	0	; () banked
  4977  015B72  6F60               	movwf	?_frexp& (0+255),b
  4978  015B74  0E00               	movlw	0
  4979  015B76  6F61               	movwf	(?_frexp+1)& (0+255),b
  4980  015B78  0E00               	movlw	0
  4981  015B7A  6F62               	movwf	(?_frexp+2)& (0+255),b
  4982  015B7C  0E00               	movlw	0
  4983  015B7E  6F63               	movwf	(?_frexp+3)& (0+255),b
  4984                           
  4985                           ; BSR set to: 0
  4986  015B80  0012               	return	
  4987  015B82                     l14389:
  4988                           
  4989                           ; BSR set to: 0
  4990  015B82  0100               	movlb	0	; () banked
  4991  015B84  5163               	movf	(frexp@value+3)& (0+255),w,b
  4992  015B86  0B7F               	andlw	127
  4993  015B88  0100               	movlb	0	; () banked
  4994  015B8A  6F66               	movwf	??_frexp& (0+255),b
  4995  015B8C  6B67               	clrf	(??_frexp+1)& (0+255),b
  4996  015B8E  90D8               	bcf	status,0,c
  4997  015B90  0100               	movlb	0	; () banked
  4998  015B92  3766               	rlcf	??_frexp& (0+255),f,b
  4999  015B94  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  5000  015B96  C064  FFD9         	movff	frexp@eptr,fsr2l
  5001  015B9A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  5002  015B9E  C066  FFDE         	movff	??_frexp,postinc2
  5003  015BA2  C067  FFDD         	movff	??_frexp+1,postdec2
  5004  015BA6  0100               	movlb	0	; () banked
  5005  015BA8  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  5006  015BAA  D004               	goto	u12020
  5007  015BAC  0100               	movlb	0	; () banked
  5008  015BAE  6B66               	clrf	??_frexp& (0+255),b
  5009  015BB0  2B66               	incf	??_frexp& (0+255),f,b
  5010  015BB2  D002               	goto	u12028
  5011  015BB4                     u12020:
  5012  015BB4  0100               	movlb	0	; () banked
  5013  015BB6  6B66               	clrf	??_frexp& (0+255),b
  5014  015BB8                     u12028:
  5015  015BB8  0100               	movlb	0	; () banked
  5016  015BBA  5166               	movf	??_frexp& (0+255),w,b
  5017  015BBC  C064  FFD9         	movff	frexp@eptr,fsr2l
  5018  015BC0  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  5019  015BC4  12DE               	iorwf	postinc2,f,c
  5020  015BC6  0E00               	movlw	0
  5021  015BC8  12DD               	iorwf	postdec2,f,c
  5022                           
  5023                           ; BSR set to: 0
  5024  015BCA  C064  FFD9         	movff	frexp@eptr,fsr2l
  5025  015BCE  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  5026  015BD2  0E82               	movlw	130
  5027  015BD4  26DE               	addwf	postinc2,f,c
  5028  015BD6  0EFF               	movlw	255
  5029  015BD8  22DD               	addwfc	postdec2,f,c
  5030                           
  5031                           ; BSR set to: 0
  5032  015BDA  0100               	movlb	0	; () banked
  5033  015BDC  8163               	bsf	(frexp@value+3)& (0+255),0,b
  5034  015BDE  8363               	bsf	(frexp@value+3)& (0+255),1,b
  5035  015BE0  8563               	bsf	(frexp@value+3)& (0+255),2,b
  5036  015BE2  8763               	bsf	(frexp@value+3)& (0+255),3,b
  5037  015BE4  8963               	bsf	(frexp@value+3)& (0+255),4,b
  5038  015BE6  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  5039  015BE8  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  5040                           
  5041                           ; BSR set to: 0
  5042  015BEA  0100               	movlb	0	; () banked
  5043  015BEC  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  5044                           
  5045                           ; BSR set to: 0
  5046  015BEE  C060  F060         	movff	frexp@value,?_frexp
  5047  015BF2  C061  F061         	movff	frexp@value+1,?_frexp+1
  5048  015BF6  C062  F062         	movff	frexp@value+2,?_frexp+2
  5049  015BFA  C063  F063         	movff	frexp@value+3,?_frexp+3
  5050  015BFE  0012               	return	
  5051  015C00                     __end_of_frexp:
  5052                           	opt stack 0
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           postinc0	equ	0xFEE
  5058                           wreg	equ	0xFE8
  5059                           postdec1	equ	0xFE5
  5060                           fsr1h	equ	0xFE2
  5061                           fsr1l	equ	0xFE1
  5062                           postinc2	equ	0xFDE
  5063                           postdec2	equ	0xFDD
  5064                           fsr2h	equ	0xFDA
  5065                           fsr2l	equ	0xFD9
  5066                           status	equ	0xFD8
  5067                           
  5068 ;; *************** function _eval_poly *****************
  5069 ;; Defined at:
  5070 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\evalpoly.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  x               4   72[BANK0 ] PTR int 
  5073 ;;  d               2   76[BANK0 ] PTR const 
  5074 ;;		 -> log@coeff(36), exp@coeff(40), 
  5075 ;;  n               2   78[BANK0 ] int 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  res             4   84[BANK0 ] int 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  4   72[BANK0 ] int 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5087 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;Total ram usage:       16 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    8
  5094 ;; This function calls:
  5095 ;;		___fladd
  5096 ;;		___flmul
  5097 ;; This function is called by:
  5098 ;;		_exp
  5099 ;;		_log
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text8
  5104  014EA8                     __ptext8:
  5105                           	opt stack 0
  5106  014EA8                     _eval_poly:
  5107                           	opt stack 20
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;incstack = 0
  5111  014EA8  C0AE  F0B0         	movff	eval_poly@n,??_eval_poly
  5112  014EAC  C0AF  F0B1         	movff	eval_poly@n+1,??_eval_poly+1
  5113  014EB0  0100               	movlb	0	; () banked
  5114  014EB2  90D8               	bcf	status,0,c
  5115  014EB4  37B0               	rlcf	??_eval_poly& (0+255),f,b
  5116  014EB6  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
  5117  014EB8  0100               	movlb	0	; () banked
  5118  014EBA  90D8               	bcf	status,0,c
  5119  014EBC  37B0               	rlcf	??_eval_poly& (0+255),f,b
  5120  014EBE  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
  5121  014EC0  C0AC  F0B2         	movff	eval_poly@d,??_eval_poly+2
  5122  014EC4  C0AD  F0B3         	movff	eval_poly@d+1,??_eval_poly+3
  5123  014EC8  0100               	movlb	0	; () banked
  5124  014ECA  51B0               	movf	??_eval_poly& (0+255),w,b
  5125  014ECC  0100               	movlb	0	; () banked
  5126  014ECE  27B2               	addwf	(??_eval_poly+2)& (0+255),f,b
  5127  014ED0  0100               	movlb	0	; () banked
  5128  014ED2  51B1               	movf	(??_eval_poly+1)& (0+255),w,b
  5129  014ED4  0100               	movlb	0	; () banked
  5130  014ED6  23B3               	addwfc	(??_eval_poly+3)& (0+255),f,b
  5131  014ED8  C0B2  FFF6         	movff	??_eval_poly+2,tblptrl
  5132  014EDC  C0B3  FFF7         	movff	??_eval_poly+3,tblptrh
  5133  014EE0                     	if	0	;tblptru may be non-zero
  5134  014EE0                     	endif
  5135  014EE0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5136  014EE0  0E00               	movlw	low (__mediumconst shr (0+16))
  5137  014EE2  6EF8               	movwf	tblptru,c
  5138  014EE4                     	endif
  5139  014EE4  0009               	tblrd		*+
  5140  014EE6  CFF5 F0B4          	movff	tablat,eval_poly@res
  5141  014EEA  0009               	tblrd		*+
  5142  014EEC  CFF5 F0B5          	movff	tablat,eval_poly@res+1
  5143  014EF0  0009               	tblrd		*+
  5144  014EF2  CFF5 F0B6          	movff	tablat,eval_poly@res+2
  5145  014EF6  000A               	tblrd		*-
  5146  014EF8  CFF5 F0B7          	movff	tablat,eval_poly@res+3
  5147  014EFC  D052               	goto	l15091
  5148  014EFE                     l15089:
  5149                           
  5150                           ; BSR set to: 0
  5151  014EFE  C0B4  F072         	movff	eval_poly@res,___flmul@a
  5152  014F02  C0B5  F073         	movff	eval_poly@res+1,___flmul@a+1
  5153  014F06  C0B6  F074         	movff	eval_poly@res+2,___flmul@a+2
  5154  014F0A  C0B7  F075         	movff	eval_poly@res+3,___flmul@a+3
  5155  014F0E  C0A8  F06E         	movff	eval_poly@x,___flmul@b
  5156  014F12  C0A9  F06F         	movff	eval_poly@x+1,___flmul@b+1
  5157  014F16  C0AA  F070         	movff	eval_poly@x+2,___flmul@b+2
  5158  014F1A  C0AB  F071         	movff	eval_poly@x+3,___flmul@b+3
  5159  014F1E  EC2A  F089         	call	___flmul	;wreg free
  5160  014F22  C06E  F094         	movff	?___flmul,___fladd@b
  5161  014F26  C06F  F095         	movff	?___flmul+1,___fladd@b+1
  5162  014F2A  C070  F096         	movff	?___flmul+2,___fladd@b+2
  5163  014F2E  C071  F097         	movff	?___flmul+3,___fladd@b+3
  5164  014F32  0100               	movlb	0	; () banked
  5165  014F34  07AE               	decf	eval_poly@n& (0+255),f,b
  5166  014F36  A0D8               	btfss	status,0,c
  5167  014F38  07AF               	decf	(eval_poly@n+1)& (0+255),f,b
  5168  014F3A  C0AE  F0B0         	movff	eval_poly@n,??_eval_poly
  5169  014F3E  C0AF  F0B1         	movff	eval_poly@n+1,??_eval_poly+1
  5170  014F42  0100               	movlb	0	; () banked
  5171  014F44  90D8               	bcf	status,0,c
  5172  014F46  37B0               	rlcf	??_eval_poly& (0+255),f,b
  5173  014F48  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
  5174  014F4A  0100               	movlb	0	; () banked
  5175  014F4C  90D8               	bcf	status,0,c
  5176  014F4E  37B0               	rlcf	??_eval_poly& (0+255),f,b
  5177  014F50  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
  5178  014F52  C0AC  F0B2         	movff	eval_poly@d,??_eval_poly+2
  5179  014F56  C0AD  F0B3         	movff	eval_poly@d+1,??_eval_poly+3
  5180  014F5A  0100               	movlb	0	; () banked
  5181  014F5C  51B0               	movf	??_eval_poly& (0+255),w,b
  5182  014F5E  0100               	movlb	0	; () banked
  5183  014F60  27B2               	addwf	(??_eval_poly+2)& (0+255),f,b
  5184  014F62  0100               	movlb	0	; () banked
  5185  014F64  51B1               	movf	(??_eval_poly+1)& (0+255),w,b
  5186  014F66  0100               	movlb	0	; () banked
  5187  014F68  23B3               	addwfc	(??_eval_poly+3)& (0+255),f,b
  5188  014F6A  C0B2  FFF6         	movff	??_eval_poly+2,tblptrl
  5189  014F6E  C0B3  FFF7         	movff	??_eval_poly+3,tblptrh
  5190  014F72                     	if	0	;tblptru may be non-zero
  5191  014F72                     	endif
  5192  014F72                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5193  014F72  0E00               	movlw	low (__mediumconst shr (0+16))
  5194  014F74  6EF8               	movwf	tblptru,c
  5195  014F76                     	endif
  5196  014F76  0009               	tblrd		*+
  5197  014F78  CFF5 F098          	movff	tablat,___fladd@a
  5198  014F7C  0009               	tblrd		*+
  5199  014F7E  CFF5 F099          	movff	tablat,___fladd@a+1
  5200  014F82  0009               	tblrd		*+
  5201  014F84  CFF5 F09A          	movff	tablat,___fladd@a+2
  5202  014F88  000A               	tblrd		*-
  5203  014F8A  CFF5 F09B          	movff	tablat,___fladd@a+3
  5204  014F8E  ECD6  F086         	call	___fladd	;wreg free
  5205  014F92  C094  F0B4         	movff	?___fladd,eval_poly@res
  5206  014F96  C095  F0B5         	movff	?___fladd+1,eval_poly@res+1
  5207  014F9A  C096  F0B6         	movff	?___fladd+2,eval_poly@res+2
  5208  014F9E  C097  F0B7         	movff	?___fladd+3,eval_poly@res+3
  5209  014FA2                     l15091:
  5210  014FA2  0100               	movlb	0	; () banked
  5211  014FA4  51AE               	movf	eval_poly@n& (0+255),w,b
  5212  014FA6  0100               	movlb	0	; () banked
  5213  014FA8  11AF               	iorwf	(eval_poly@n+1)& (0+255),w,b
  5214  014FAA  A4D8               	btfss	status,2,c
  5215  014FAC  D7A8               	goto	l15089
  5216                           
  5217                           ; BSR set to: 0
  5218  014FAE  C0B4  F0A8         	movff	eval_poly@res,?_eval_poly
  5219  014FB2  C0B5  F0A9         	movff	eval_poly@res+1,?_eval_poly+1
  5220  014FB6  C0B6  F0AA         	movff	eval_poly@res+2,?_eval_poly+2
  5221  014FBA  C0B7  F0AB         	movff	eval_poly@res+3,?_eval_poly+3
  5222                           
  5223                           ; BSR set to: 0
  5224  014FBE  0012               	return		;funcret
  5225  014FC0                     __end_of_eval_poly:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           postdec1	equ	0xFE5
  5234                           fsr1h	equ	0xFE2
  5235                           fsr1l	equ	0xFE1
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           fsr2h	equ	0xFDA
  5239                           fsr2l	equ	0xFD9
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _positionMode *****************
  5243 ;; Defined at:
  5244 ;;		line 215 in file "main.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;Total ram usage:        2 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:   10
  5265 ;; This function calls:
  5266 ;;		_Motor_Move
  5267 ;;		_Motor_Speed
  5268 ;; This function is called by:
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text9
  5274  015524                     __ptext9:
  5275                           	opt stack 0
  5276  015524                     _positionMode:
  5277                           	opt stack 20
  5278                           
  5279                           ;main.c: 216: diff = angle - currentPos;
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;incstack = 0
  5283  015524  C1F8  F07F         	movff	_currentPos,??_positionMode
  5284  015528  C1F9  F080         	movff	_currentPos+1,??_positionMode+1
  5285  01552C  0100               	movlb	0	; () banked
  5286  01552E  1F7F               	comf	??_positionMode& (0+255),f,b
  5287  015530  1F80               	comf	(??_positionMode+1)& (0+255),f,b
  5288  015532  4B7F               	infsnz	??_positionMode& (0+255),f,b
  5289  015534  2B80               	incf	(??_positionMode+1)& (0+255),f,b
  5290  015536  0100               	movlb	0	; () banked
  5291  015538  51D2               	movf	_angle& (0+255),w,b
  5292  01553A  0100               	movlb	0	; () banked
  5293  01553C  257F               	addwf	??_positionMode& (0+255),w,b
  5294  01553E  0100               	movlb	0	; () banked
  5295  015540  6FD0               	movwf	_diff& (0+255),b
  5296  015542  0100               	movlb	0	; () banked
  5297  015544  51D3               	movf	(_angle+1)& (0+255),w,b
  5298  015546  0100               	movlb	0	; () banked
  5299  015548  2180               	addwfc	(??_positionMode+1)& (0+255),w,b
  5300  01554A  0100               	movlb	0	; () banked
  5301  01554C  6FD1               	movwf	(_diff+1)& (0+255),b
  5302                           
  5303                           ;main.c: 217: if (Stepper.mDelta == 0 && diff > 0) {
  5304  01554E  0100               	movlb	0	; () banked
  5305  015550  51F4               	movf	_Stepper& (0+255),w,b
  5306  015552  0100               	movlb	0	; () banked
  5307  015554  11F5               	iorwf	(_Stepper+1)& (0+255),w,b
  5308  015556  A4D8               	btfss	status,2,c
  5309  015558  D027               	goto	l16089
  5310                           
  5311                           ; BSR set to: 0
  5312  01555A  0100               	movlb	0	; () banked
  5313  01555C  BFD1               	btfsc	(_diff+1)& (0+255),7,b
  5314  01555E  D024               	goto	l16089
  5315  015560  0100               	movlb	0	; () banked
  5316  015562  51D1               	movf	(_diff+1)& (0+255),w,b
  5317  015564  E104               	bnz	u14240
  5318  015566  0100               	movlb	0	; () banked
  5319  015568  05D0               	decf	_diff& (0+255),w,b
  5320  01556A  A0D8               	btfss	status,0,c
  5321  01556C  D01D               	goto	l16089
  5322  01556E                     u14240:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;main.c: 218: Motor_Speed(&Stepper, (1*1000L));
  5326  01556E  0EF4               	movlw	low _Stepper
  5327  015570  0100               	movlb	0	; () banked
  5328  015572  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  5329  015574  0E00               	movlw	high _Stepper
  5330  015576  0100               	movlb	0	; () banked
  5331  015578  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5332  01557A  0E03               	movlw	3
  5333  01557C  0100               	movlb	0	; () banked
  5334  01557E  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5335  015580  0EE8               	movlw	232
  5336  015582  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  5337  015584  EC20  F0BE         	call	_Motor_Speed	;wreg free
  5338                           
  5339                           ;main.c: 219: Motor_Move(&Stepper, diff);
  5340  015588  0EF4               	movlw	low _Stepper
  5341  01558A  0100               	movlb	0	; () banked
  5342  01558C  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  5343  01558E  0E00               	movlw	high _Stepper
  5344  015590  0100               	movlb	0	; () banked
  5345  015592  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5346  015594  C0D0  F065         	movff	_diff,Motor_Move@pDelta
  5347  015598  C0D1  F066         	movff	_diff+1,Motor_Move@pDelta+1
  5348  01559C  ECC2  F0BC         	call	_Motor_Move	;wreg free
  5349                           
  5350                           ;main.c: 220: currentPos--;
  5351  0155A0  0101               	movlb	1	; () banked
  5352  0155A2  07F8               	decf	_currentPos& (0+255),f,b
  5353  0155A4  A0D8               	btfss	status,0,c
  5354  0155A6  07F9               	decf	(_currentPos+1)& (0+255),f,b
  5355  0155A8                     l16089:
  5356                           
  5357                           ;main.c: 221: }
  5358                           ;main.c: 222: if (Stepper.mDelta == 0 && diff < 0) {
  5359  0155A8  0100               	movlb	0	; () banked
  5360  0155AA  51F4               	movf	_Stepper& (0+255),w,b
  5361  0155AC  0100               	movlb	0	; () banked
  5362  0155AE  11F5               	iorwf	(_Stepper+1)& (0+255),w,b
  5363  0155B0  A4D8               	btfss	status,2,c
  5364  0155B2  0012               	return	
  5365                           
  5366                           ; BSR set to: 0
  5367  0155B4  0100               	movlb	0	; () banked
  5368  0155B6  AFD1               	btfss	(_diff+1)& (0+255),7,b
  5369  0155B8  0012               	return	
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;main.c: 223: Motor_Speed(&Stepper, (1*1000L));
  5373  0155BA  0EF4               	movlw	low _Stepper
  5374  0155BC  0100               	movlb	0	; () banked
  5375  0155BE  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  5376  0155C0  0E00               	movlw	high _Stepper
  5377  0155C2  0100               	movlb	0	; () banked
  5378  0155C4  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5379  0155C6  0E03               	movlw	3
  5380  0155C8  0100               	movlb	0	; () banked
  5381  0155CA  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5382  0155CC  0EE8               	movlw	232
  5383  0155CE  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  5384  0155D0  EC20  F0BE         	call	_Motor_Speed	;wreg free
  5385                           
  5386                           ;main.c: 224: Motor_Move(&Stepper, diff);
  5387  0155D4  0EF4               	movlw	low _Stepper
  5388  0155D6  0100               	movlb	0	; () banked
  5389  0155D8  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  5390  0155DA  0E00               	movlw	high _Stepper
  5391  0155DC  0100               	movlb	0	; () banked
  5392  0155DE  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5393  0155E0  C0D0  F065         	movff	_diff,Motor_Move@pDelta
  5394  0155E4  C0D1  F066         	movff	_diff+1,Motor_Move@pDelta+1
  5395  0155E8  ECC2  F0BC         	call	_Motor_Move	;wreg free
  5396                           
  5397                           ;main.c: 225: currentPos++;
  5398  0155EC  0101               	movlb	1	; () banked
  5399  0155EE  4BF8               	infsnz	_currentPos& (0+255),f,b
  5400  0155F0  2BF9               	incf	(_currentPos+1)& (0+255),f,b
  5401  0155F2  0012               	return	
  5402  0155F4                     __end_of_positionMode:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           postinc0	equ	0xFEE
  5409                           wreg	equ	0xFE8
  5410                           postdec1	equ	0xFE5
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _nullMode *****************
  5420 ;; Defined at:
  5421 ;;		line 191 in file "main.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;		None
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;		None
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		None
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;Total ram usage:        0 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    7
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_main
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text10
  5450  001404                     __ptext10:
  5451                           	opt stack 0
  5452  001404                     _nullMode:
  5453                           	opt stack 23
  5454                           
  5455                           ;incstack = 0
  5456  001404  0012               	return		;funcret
  5457  001406                     __end_of_nullMode:
  5458                           	opt stack 0
  5459                           tblptru	equ	0xFF8
  5460                           tblptrh	equ	0xFF7
  5461                           tblptrl	equ	0xFF6
  5462                           tablat	equ	0xFF5
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           postdec1	equ	0xFE5
  5466                           fsr1h	equ	0xFE2
  5467                           fsr1l	equ	0xFE1
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _inputVar *****************
  5475 ;; Defined at:
  5476 ;;		line 88 in file "main.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;Total ram usage:        1 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:   16
  5497 ;; This function calls:
  5498 ;;		_FunctADC
  5499 ;;		_HMI_DIPSwitch
  5500 ;;		_HMI_DownSwitch
  5501 ;;		_HMI_LeftSwitch
  5502 ;;		_HMI_Poll
  5503 ;;		_HMI_RightSwitch
  5504 ;;		_HMI_UpSwitch
  5505 ;;		_MXK_DIPSwitch
  5506 ;;		_MXK_TestButton
  5507 ;; This function is called by:
  5508 ;;		_main
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text11
  5513  015CB6                     __ptext11:
  5514                           	opt stack 0
  5515  015CB6                     _inputVar:
  5516                           	opt stack 14
  5517                           
  5518                           ;main.c: 89: FunctADC();
  5519                           
  5520                           ;incstack = 0
  5521  015CB6  EC89  F0BF         	call	_FunctADC	;wreg free
  5522                           
  5523                           ;main.c: 90: HMI_Poll();
  5524  015CBA  EC3A  F0B6         	call	_HMI_Poll	;wreg free
  5525                           
  5526                           ;main.c: 91: dip = DIPSwitch.mGetState();
  5527  015CBE  EE21  F080         	lfsr	2,_DIPSwitch+7
  5528  015CC2  D801               	call	u14058
  5529  015CC4  D00A               	goto	u14059
  5530  015CC6                     u14058:
  5531  015CC6  0005               	push	
  5532  015CC8  6EFA               	movwf	pclath,c
  5533  015CCA  50DE               	movf	postinc2,w,c
  5534  015CCC  6EFD               	movwf	tosl,c
  5535  015CCE  50DE               	movf	postinc2,w,c
  5536  015CD0  6EFE               	movwf	tosh,c
  5537  015CD2  50DE               	movf	postinc2,w,c
  5538  015CD4  6EFF               	movwf	tosu,c
  5539  015CD6  50FA               	movf	pclath,w,c
  5540  015CD8  0012               	return		;indir
  5541  015CDA                     u14059:
  5542  015CDA  0100               	movlb	0	; () banked
  5543  015CDC  6F84               	movwf	??_inputVar& (0+255),b
  5544  015CDE  0100               	movlb	0	; () banked
  5545  015CE0  5184               	movf	??_inputVar& (0+255),w,b
  5546  015CE2  0101               	movlb	1	; () banked
  5547  015CE4  6F1F               	movwf	_dip& (0+255),b
  5548  015CE6  6B20               	clrf	(_dip+1)& (0+255),b
  5549                           
  5550                           ; BSR set to: 1
  5551                           ;main.c: 92: upState = HMIBoard.mUp.mGetState();
  5552  015CE8  EE21  F04C         	lfsr	2,_HMIBoard+35
  5553  015CEC  D801               	call	u14068
  5554  015CEE  D00A               	goto	u14069
  5555  015CF0                     u14068:
  5556  015CF0  0005               	push	
  5557  015CF2  6EFA               	movwf	pclath,c
  5558  015CF4  50DE               	movf	postinc2,w,c
  5559  015CF6  6EFD               	movwf	tosl,c
  5560  015CF8  50DE               	movf	postinc2,w,c
  5561  015CFA  6EFE               	movwf	tosh,c
  5562  015CFC  50DE               	movf	postinc2,w,c
  5563  015CFE  6EFF               	movwf	tosu,c
  5564  015D00  50FA               	movf	pclath,w,c
  5565  015D02  0012               	return		;indir
  5566  015D04                     u14069:
  5567  015D04  0100               	movlb	0	; () banked
  5568  015D06  6FE3               	movwf	_upState& (0+255),b
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 93: downState = HMIBoard.mDown.mGetState();
  5572  015D08  EE21  F056         	lfsr	2,_HMIBoard+45
  5573  015D0C  D801               	call	u14078
  5574  015D0E  D00A               	goto	u14079
  5575  015D10                     u14078:
  5576  015D10  0005               	push	
  5577  015D12  6EFA               	movwf	pclath,c
  5578  015D14  50DE               	movf	postinc2,w,c
  5579  015D16  6EFD               	movwf	tosl,c
  5580  015D18  50DE               	movf	postinc2,w,c
  5581  015D1A  6EFE               	movwf	tosh,c
  5582  015D1C  50DE               	movf	postinc2,w,c
  5583  015D1E  6EFF               	movwf	tosu,c
  5584  015D20  50FA               	movf	pclath,w,c
  5585  015D22  0012               	return		;indir
  5586  015D24                     u14079:
  5587  015D24  0100               	movlb	0	; () banked
  5588  015D26  6FE2               	movwf	_downState& (0+255),b
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;main.c: 94: leftState = HMIBoard.mLeft.mGetState();
  5592  015D28  EE21  F042         	lfsr	2,_HMIBoard+25
  5593  015D2C  D801               	call	u14088
  5594  015D2E  D00A               	goto	u14089
  5595  015D30                     u14088:
  5596  015D30  0005               	push	
  5597  015D32  6EFA               	movwf	pclath,c
  5598  015D34  50DE               	movf	postinc2,w,c
  5599  015D36  6EFD               	movwf	tosl,c
  5600  015D38  50DE               	movf	postinc2,w,c
  5601  015D3A  6EFE               	movwf	tosh,c
  5602  015D3C  50DE               	movf	postinc2,w,c
  5603  015D3E  6EFF               	movwf	tosu,c
  5604  015D40  50FA               	movf	pclath,w,c
  5605  015D42  0012               	return		;indir
  5606  015D44                     u14089:
  5607  015D44  0100               	movlb	0	; () banked
  5608  015D46  6FE1               	movwf	_leftState& (0+255),b
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;main.c: 95: rightState = HMIBoard.mRight.mGetState();
  5612  015D48  EE21  F038         	lfsr	2,_HMIBoard+15
  5613  015D4C  D801               	call	u14098
  5614  015D4E  D00A               	goto	u14099
  5615  015D50                     u14098:
  5616  015D50  0005               	push	
  5617  015D52  6EFA               	movwf	pclath,c
  5618  015D54  50DE               	movf	postinc2,w,c
  5619  015D56  6EFD               	movwf	tosl,c
  5620  015D58  50DE               	movf	postinc2,w,c
  5621  015D5A  6EFE               	movwf	tosh,c
  5622  015D5C  50DE               	movf	postinc2,w,c
  5623  015D5E  6EFF               	movwf	tosu,c
  5624  015D60  50FA               	movf	pclath,w,c
  5625  015D62  0012               	return		;indir
  5626  015D64                     u14099:
  5627  015D64  0100               	movlb	0	; () banked
  5628  015D66  6FE0               	movwf	_rightState& (0+255),b
  5629                           
  5630                           ; BSR set to: 0
  5631  015D68  0012               	return		;funcret
  5632  015D6A                     __end_of_inputVar:
  5633                           	opt stack 0
  5634                           tosu	equ	0xFFF
  5635                           tosh	equ	0xFFE
  5636                           tosl	equ	0xFFD
  5637                           pclath	equ	0xFFA
  5638                           tblptru	equ	0xFF8
  5639                           tblptrh	equ	0xFF7
  5640                           tblptrl	equ	0xFF6
  5641                           tablat	equ	0xFF5
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           postdec1	equ	0xFE5
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _HMI_Poll *****************
  5654 ;; Defined at:
  5655 ;;		line 252 in file "HMI.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;		None
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;		None
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;Total ram usage:        0 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:   15
  5676 ;; This function calls:
  5677 ;;		_Button_Poll
  5678 ;; This function is called by:
  5679 ;;		_inputVar
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text12
  5684  016C74                     __ptext12:
  5685                           	opt stack 0
  5686  016C74                     _HMI_Poll:
  5687                           	opt stack 14
  5688                           
  5689                           ;HMI.c: 254: TRISE = 0xFC;
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;incstack = 0
  5693  016C74  0EFC               	movlw	252
  5694  016C76  6E96               	movwf	3990,c	;volatile
  5695                           
  5696                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  5697  016C78  0E59               	movlw	low (_HMIBoard+48)
  5698  016C7A  0100               	movlb	0	; () banked
  5699  016C7C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  5700  016C7E  0E01               	movlw	high (_HMIBoard+48)
  5701  016C80  0100               	movlb	0	; () banked
  5702  016C82  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5703  016C84  0E01               	movlw	1
  5704  016C86  0100               	movlb	0	; () banked
  5705  016C88  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  5706  016C8A  EC98  F0A3         	call	_Button_Poll	;wreg free
  5707                           
  5708                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  5709  016C8E  0E3B               	movlw	low (_HMIBoard+18)
  5710  016C90  0100               	movlb	0	; () banked
  5711  016C92  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  5712  016C94  0E01               	movlw	high (_HMIBoard+18)
  5713  016C96  0100               	movlb	0	; () banked
  5714  016C98  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5715  016C9A  0E01               	movlw	1
  5716  016C9C  0100               	movlb	0	; () banked
  5717  016C9E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  5718  016CA0  EC98  F0A3         	call	_Button_Poll	;wreg free
  5719                           
  5720                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  5721  016CA4  0E31               	movlw	low (_HMIBoard+8)
  5722  016CA6  0100               	movlb	0	; () banked
  5723  016CA8  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  5724  016CAA  0E01               	movlw	high (_HMIBoard+8)
  5725  016CAC  0100               	movlb	0	; () banked
  5726  016CAE  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5727  016CB0  0E01               	movlw	1
  5728  016CB2  0100               	movlb	0	; () banked
  5729  016CB4  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  5730  016CB6  EC98  F0A3         	call	_Button_Poll	;wreg free
  5731                           
  5732                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  5733  016CBA  0E45               	movlw	low (_HMIBoard+28)
  5734  016CBC  0100               	movlb	0	; () banked
  5735  016CBE  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  5736  016CC0  0E01               	movlw	high (_HMIBoard+28)
  5737  016CC2  0100               	movlb	0	; () banked
  5738  016CC4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5739  016CC6  0E01               	movlw	1
  5740  016CC8  0100               	movlb	0	; () banked
  5741  016CCA  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  5742  016CCC  EC98  F0A3         	call	_Button_Poll	;wreg free
  5743                           
  5744                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  5745  016CD0  0E4F               	movlw	low (_HMIBoard+38)
  5746  016CD2  0100               	movlb	0	; () banked
  5747  016CD4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  5748  016CD6  0E01               	movlw	high (_HMIBoard+38)
  5749  016CD8  0100               	movlb	0	; () banked
  5750  016CDA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  5751  016CDC  0E01               	movlw	1
  5752  016CDE  0100               	movlb	0	; () banked
  5753  016CE0  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  5754  016CE2  EC98  F0A3         	call	_Button_Poll	;wreg free
  5755  016CE6  0012               	return		;funcret
  5756  016CE8                     __end_of_HMI_Poll:
  5757                           	opt stack 0
  5758                           tosu	equ	0xFFF
  5759                           tosh	equ	0xFFE
  5760                           tosl	equ	0xFFD
  5761                           pclath	equ	0xFFA
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           postinc0	equ	0xFEE
  5767                           wreg	equ	0xFE8
  5768                           postdec1	equ	0xFE5
  5769                           fsr1h	equ	0xFE2
  5770                           fsr1l	equ	0xFE1
  5771                           postinc2	equ	0xFDE
  5772                           postdec2	equ	0xFDD
  5773                           fsr2h	equ	0xFDA
  5774                           fsr2l	equ	0xFD9
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function _Button_Poll *****************
  5778 ;; Defined at:
  5779 ;;		line 57 in file "Library/Button.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  5782 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  5783 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  Pin             1   35[BANK0 ] unsigned char 
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      unsigned char 
  5788 ;; Registers used:
  5789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5795 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;Total ram usage:        9 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:   14
  5802 ;; This function calls:
  5803 ;;		_Event_DIPSwitch
  5804 ;;		_Event_NULL
  5805 ;;		_Event_TestButton
  5806 ;;		_HMI_DIPSwitch
  5807 ;;		_HMI_DownSwitch
  5808 ;;		_HMI_LeftSwitch
  5809 ;;		_HMI_RightSwitch
  5810 ;;		_HMI_UpSwitch
  5811 ;;		_MXK_DIPSwitch
  5812 ;;		_MXK_TestButton
  5813 ;; This function is called by:
  5814 ;;		_HMI_Poll
  5815 ;;		_MXK_Poll
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text13
  5820  014730                     __ptext13:
  5821                           	opt stack 0
  5822  014730                     _Button_Poll:
  5823                           	opt stack 14
  5824                           
  5825                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  5826                           
  5827                           ;incstack = 0
  5828  014730  0100               	movlb	0	; () banked
  5829  014732  EE20 F007          	lfsr	2,7
  5830  014736  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5831  014738  26D9               	addwf	fsr2l,f,c
  5832  01473A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5833  01473C  22DA               	addwfc	fsr2h,f,c
  5834  01473E  D801               	call	u12098
  5835  014740  D00A               	goto	u12099
  5836  014742                     u12098:
  5837  014742  0005               	push	
  5838  014744  6EFA               	movwf	pclath,c
  5839  014746  50DE               	movf	postinc2,w,c
  5840  014748  6EFD               	movwf	tosl,c
  5841  01474A  50DE               	movf	postinc2,w,c
  5842  01474C  6EFE               	movwf	tosh,c
  5843  01474E  50DE               	movf	postinc2,w,c
  5844  014750  6EFF               	movwf	tosu,c
  5845  014752  50FA               	movf	pclath,w,c
  5846  014754  0012               	return		;indir
  5847  014756                     u12099:
  5848  014756  0100               	movlb	0	; () banked
  5849  014758  6F83               	movwf	Button_Poll@Pin& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;Button.c: 61: if (pButton->mState == Pin)
  5853  01475A  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  5854  01475E  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  5855  014762  0100               	movlb	0	; () banked
  5856  014764  5183               	movf	Button_Poll@Pin& (0+255),w,b
  5857  014766  18DE               	xorwf	postinc2,w,c
  5858  014768  A4D8               	btfss	status,2,c
  5859  01476A  D021               	goto	l14443
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;Button.c: 62: {
  5863                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  5864  01476C  0100               	movlb	0	; () banked
  5865  01476E  EE20 F001          	lfsr	2,1
  5866  014772  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5867  014774  26D9               	addwf	fsr2l,f,c
  5868  014776  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5869  014778  22DA               	addwfc	fsr2h,f,c
  5870  01477A  0100               	movlb	0	; () banked
  5871  01477C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  5872  01477E  5CDE               	subwf	postinc2,w,c
  5873  014780  B0D8               	btfsc	status,0,c
  5874  014782  D00A               	goto	l14441
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;Button.c: 66: pButton->mCount = 0;
  5878  014784  0100               	movlb	0	; () banked
  5879  014786  EE20 F001          	lfsr	2,1
  5880  01478A  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5881  01478C  26D9               	addwf	fsr2l,f,c
  5882  01478E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5883  014790  22DA               	addwfc	fsr2h,f,c
  5884  014792  0E00               	movlw	0
  5885  014794  6EDF               	movwf	indf2,c
  5886  014796  0012               	return	
  5887  014798                     l14441:
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;Button.c: 67: else
  5891                           ;Button.c: 68: pButton->mCount -= pIncrement;
  5892  014798  0100               	movlb	0	; () banked
  5893  01479A  EE20 F001          	lfsr	2,1
  5894  01479E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5895  0147A0  26D9               	addwf	fsr2l,f,c
  5896  0147A2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5897  0147A4  22DA               	addwfc	fsr2h,f,c
  5898  0147A6  0100               	movlb	0	; () banked
  5899  0147A8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  5900  0147AA  5EDF               	subwf	indf2,f,c
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;Button.c: 69: }
  5904  0147AC  0012               	return	
  5905  0147AE                     l14443:
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  5909  0147AE  0100               	movlb	0	; () banked
  5910  0147B0  EE20 F001          	lfsr	2,1
  5911  0147B4  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5912  0147B6  26D9               	addwf	fsr2l,f,c
  5913  0147B8  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5914  0147BA  22DA               	addwfc	fsr2h,f,c
  5915  0147BC  50DF               	movf	indf2,w,c
  5916  0147BE  0100               	movlb	0	; () banked
  5917  0147C0  6F7E               	movwf	??_Button_Poll& (0+255),b
  5918  0147C2  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  5919  0147C4  0100               	movlb	0	; () banked
  5920  0147C6  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  5921  0147C8  0100               	movlb	0	; () banked
  5922  0147CA  277E               	addwf	??_Button_Poll& (0+255),f,b
  5923  0147CC  0E00               	movlw	0
  5924  0147CE  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  5925  0147D0  0100               	movlb	0	; () banked
  5926  0147D2  EE20 F001          	lfsr	2,1
  5927  0147D6  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5928  0147D8  26D9               	addwf	fsr2l,f,c
  5929  0147DA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5930  0147DC  22DA               	addwfc	fsr2h,f,c
  5931  0147DE  50DF               	movf	indf2,w,c
  5932  0147E0  0100               	movlb	0	; () banked
  5933  0147E2  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  5934  0147E4  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  5935  0147E6  0100               	movlb	0	; () banked
  5936  0147E8  517E               	movf	??_Button_Poll& (0+255),w,b
  5937  0147EA  0100               	movlb	0	; () banked
  5938  0147EC  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  5939  0147EE  0100               	movlb	0	; () banked
  5940  0147F0  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  5941  0147F2  0A80               	xorlw	128
  5942  0147F4  0100               	movlb	0	; () banked
  5943  0147F6  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  5944  0147F8  0100               	movlb	0	; () banked
  5945  0147FA  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  5946  0147FC  0A80               	xorlw	128
  5947  0147FE  0100               	movlb	0	; () banked
  5948  014800  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  5949  014802  B0D8               	btfsc	status,0,c
  5950  014804  0012               	return	
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;Button.c: 73: {
  5954                           ;Button.c: 75: pButton->mCount += pIncrement;
  5955  014806  0100               	movlb	0	; () banked
  5956  014808  EE20 F001          	lfsr	2,1
  5957  01480C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5958  01480E  26D9               	addwf	fsr2l,f,c
  5959  014810  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5960  014812  22DA               	addwfc	fsr2h,f,c
  5961  014814  0100               	movlb	0	; () banked
  5962  014816  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  5963  014818  26DF               	addwf	indf2,f,c
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  5967  01481A  0100               	movlb	0	; () banked
  5968  01481C  EE20 F002          	lfsr	2,2
  5969  014820  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5970  014822  26D9               	addwf	fsr2l,f,c
  5971  014824  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5972  014826  22DA               	addwfc	fsr2h,f,c
  5973  014828  0100               	movlb	0	; () banked
  5974  01482A  EE10 F001          	lfsr	1,1
  5975  01482E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  5976  014830  26E1               	addwf	fsr1l,f,c
  5977  014832  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  5978  014834  22E2               	addwfc	fsr1h,f,c
  5979  014836  50E7               	movf	indf1,w,c
  5980  014838  0100               	movlb	0	; () banked
  5981  01483A  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  5982  01483C  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  5983  01483E  50DE               	movf	postinc2,w,c
  5984  014840  0100               	movlb	0	; () banked
  5985  014842  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  5986  014844  50DE               	movf	postinc2,w,c
  5987  014846  0100               	movlb	0	; () banked
  5988  014848  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  5989  01484A  A0D8               	btfss	status,0,c
  5990  01484C  0012               	return	
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;Button.c: 77: {
  5994                           ;Button.c: 79: pButton->mState = Pin;
  5995  01484E  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  5996  014852  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  5997  014856  C083  FFDF         	movff	Button_Poll@Pin,indf2
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;Button.c: 80: pButton->mCount = 0;
  6001  01485A  0100               	movlb	0	; () banked
  6002  01485C  EE20 F001          	lfsr	2,1
  6003  014860  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6004  014862  26D9               	addwf	fsr2l,f,c
  6005  014864  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6006  014866  22DA               	addwfc	fsr2h,f,c
  6007  014868  0E00               	movlw	0
  6008  01486A  6EDF               	movwf	indf2,c
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;Button.c: 83: pButton->mFunction(Pin);
  6012  01486C  0100               	movlb	0	; () banked
  6013  01486E  EE20 F004          	lfsr	2,4
  6014  014872  517B               	movf	Button_Poll@pButton& (0+255),w,b
  6015  014874  26D9               	addwf	fsr2l,f,c
  6016  014876  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6017  014878  22DA               	addwfc	fsr2h,f,c
  6018  01487A  D801               	call	u12148
  6019  01487C  0012               	return	
  6020  01487E                     u12148:
  6021  01487E  0005               	push	
  6022  014880  6EFA               	movwf	pclath,c
  6023  014882  50DE               	movf	postinc2,w,c
  6024  014884  6EFD               	movwf	tosl,c
  6025  014886  50DE               	movf	postinc2,w,c
  6026  014888  6EFE               	movwf	tosh,c
  6027  01488A  50DE               	movf	postinc2,w,c
  6028  01488C  6EFF               	movwf	tosu,c
  6029  01488E  50FA               	movf	pclath,w,c
  6030  014890  0100               	movlb	0	; () banked
  6031  014892  5183               	movf	Button_Poll@Pin& (0+255),w,b
  6032  014894  0012               	return		;indir
  6033  014896                     __end_of_Button_Poll:
  6034                           	opt stack 0
  6035                           tosu	equ	0xFFF
  6036                           tosh	equ	0xFFE
  6037                           tosl	equ	0xFFD
  6038                           pclath	equ	0xFFA
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           indf1	equ	0xFE7
  6046                           postdec1	equ	0xFE5
  6047                           fsr1h	equ	0xFE2
  6048                           fsr1l	equ	0xFE1
  6049                           indf2	equ	0xFDF
  6050                           postinc2	equ	0xFDE
  6051                           postdec2	equ	0xFDD
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function _MXK_DIPSwitch *****************
  6057 ;; Defined at:
  6058 ;;		line 24 in file "Library/MXK.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      unsigned char 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;Total ram usage:        0 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    8
  6079 ;; This function calls:
  6080 ;;		_Port_GetQuad
  6081 ;; This function is called by:
  6082 ;;		_FunctInitButton
  6083 ;;		_Button_Poll
  6084 ;;		_inputVar
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text14
  6089  017E40                     __ptext14:
  6090                           	opt stack 0
  6091  017E40                     _MXK_DIPSwitch:
  6092                           	opt stack 21
  6093                           
  6094                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6095                           
  6096                           ;incstack = 0
  6097  017E40  0EA1               	movlw	low _PortD
  6098  017E42  0100               	movlb	0	; () banked
  6099  017E44  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  6100  017E46  0E01               	movlw	high _PortD
  6101  017E48  0100               	movlb	0	; () banked
  6102  017E4A  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6103  017E4C  0E00               	movlw	0
  6104  017E4E  0100               	movlb	0	; () banked
  6105  017E50  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  6106  017E52  ECA9  F0BA         	call	_Port_GetQuad
  6107  017E56  0012               	return	
  6108  017E58                     __end_of_MXK_DIPSwitch:
  6109                           	opt stack 0
  6110                           tosu	equ	0xFFF
  6111                           tosh	equ	0xFFE
  6112                           tosl	equ	0xFFD
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           indf1	equ	0xFE7
  6121                           postdec1	equ	0xFE5
  6122                           fsr1h	equ	0xFE2
  6123                           fsr1l	equ	0xFE1
  6124                           indf2	equ	0xFDF
  6125                           postinc2	equ	0xFDE
  6126                           postdec2	equ	0xFDD
  6127                           fsr2h	equ	0xFDA
  6128                           fsr2l	equ	0xFD9
  6129                           status	equ	0xFD8
  6130                           
  6131 ;; *************** function _HMI_DIPSwitch *****************
  6132 ;; Defined at:
  6133 ;;		line 47 in file "HMI.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;		None
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      unsigned char 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;Total ram usage:        0 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    8
  6154 ;; This function calls:
  6155 ;;		_Port_GetQuad
  6156 ;; This function is called by:
  6157 ;;		_HMI_Init
  6158 ;;		_Button_Poll
  6159 ;;		_inputVar
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text15
  6164  017E58                     __ptext15:
  6165                           	opt stack 0
  6166  017E58                     _HMI_DIPSwitch:
  6167                           	opt stack 19
  6168                           
  6169                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6170                           
  6171                           ;incstack = 0
  6172  017E58  0E97               	movlw	low _PortE
  6173  017E5A  0100               	movlb	0	; () banked
  6174  017E5C  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  6175  017E5E  0E01               	movlw	high _PortE
  6176  017E60  0100               	movlb	0	; () banked
  6177  017E62  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6178  017E64  0E00               	movlw	0
  6179  017E66  0100               	movlb	0	; () banked
  6180  017E68  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  6181  017E6A  ECA9  F0BA         	call	_Port_GetQuad	;wreg free
  6182  017E6E  0012               	return	
  6183  017E70                     __end_of_HMI_DIPSwitch:
  6184                           	opt stack 0
  6185                           tosu	equ	0xFFF
  6186                           tosh	equ	0xFFE
  6187                           tosl	equ	0xFFD
  6188                           pclath	equ	0xFFA
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           postinc0	equ	0xFEE
  6194                           wreg	equ	0xFE8
  6195                           indf1	equ	0xFE7
  6196                           postdec1	equ	0xFE5
  6197                           fsr1h	equ	0xFE2
  6198                           fsr1l	equ	0xFE1
  6199                           indf2	equ	0xFDF
  6200                           postinc2	equ	0xFDE
  6201                           postdec2	equ	0xFDD
  6202                           fsr2h	equ	0xFDA
  6203                           fsr2l	equ	0xFD9
  6204                           status	equ	0xFD8
  6205                           
  6206 ;; *************** function _HMI_DownSwitch *****************
  6207 ;; Defined at:
  6208 ;;		line 42 in file "HMI.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;		None
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;		None
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      unsigned char 
  6215 ;; Registers used:
  6216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;Total ram usage:        0 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    8
  6229 ;; This function calls:
  6230 ;;		_Port_GetPin
  6231 ;; This function is called by:
  6232 ;;		_HMI_Init
  6233 ;;		_Button_Poll
  6234 ;;		_inputVar
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text16
  6239  017E70                     __ptext16:
  6240                           	opt stack 0
  6241  017E70                     _HMI_DownSwitch:
  6242                           	opt stack 19
  6243                           
  6244                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  6245                           
  6246                           ;incstack = 0
  6247  017E70  0E97               	movlw	low _PortE
  6248  017E72  0100               	movlb	0	; () banked
  6249  017E74  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  6250  017E76  0E01               	movlw	high _PortE
  6251  017E78  0100               	movlb	0	; () banked
  6252  017E7A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6253  017E7C  0E06               	movlw	6
  6254  017E7E  0100               	movlb	0	; () banked
  6255  017E80  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  6256  017E82  EC5E  F0BB         	call	_Port_GetPin	;wreg free
  6257  017E86  0012               	return	
  6258  017E88                     __end_of_HMI_DownSwitch:
  6259                           	opt stack 0
  6260                           tosu	equ	0xFFF
  6261                           tosh	equ	0xFFE
  6262                           tosl	equ	0xFFD
  6263                           pclath	equ	0xFFA
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           postinc0	equ	0xFEE
  6269                           wreg	equ	0xFE8
  6270                           indf1	equ	0xFE7
  6271                           postdec1	equ	0xFE5
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _HMI_UpSwitch *****************
  6282 ;; Defined at:
  6283 ;;		line 37 in file "HMI.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      unsigned char 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    8
  6304 ;; This function calls:
  6305 ;;		_Port_GetPin
  6306 ;; This function is called by:
  6307 ;;		_HMI_Init
  6308 ;;		_Button_Poll
  6309 ;;		_inputVar
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text17
  6314  017E88                     __ptext17:
  6315                           	opt stack 0
  6316  017E88                     _HMI_UpSwitch:
  6317                           	opt stack 21
  6318                           
  6319                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  6320                           
  6321                           ;incstack = 0
  6322  017E88  0E97               	movlw	low _PortE
  6323  017E8A  0100               	movlb	0	; () banked
  6324  017E8C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  6325  017E8E  0E01               	movlw	high _PortE
  6326  017E90  0100               	movlb	0	; () banked
  6327  017E92  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6328  017E94  0E07               	movlw	7
  6329  017E96  0100               	movlb	0	; () banked
  6330  017E98  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  6331  017E9A  EC5E  F0BB         	call	_Port_GetPin	;wreg free
  6332  017E9E  0012               	return	
  6333  017EA0                     __end_of_HMI_UpSwitch:
  6334                           	opt stack 0
  6335                           tosu	equ	0xFFF
  6336                           tosh	equ	0xFFE
  6337                           tosl	equ	0xFFD
  6338                           pclath	equ	0xFFA
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           postinc0	equ	0xFEE
  6344                           wreg	equ	0xFE8
  6345                           indf1	equ	0xFE7
  6346                           postdec1	equ	0xFE5
  6347                           fsr1h	equ	0xFE2
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _HMI_RightSwitch *****************
  6357 ;; Defined at:
  6358 ;;		line 32 in file "HMI.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      unsigned char 
  6365 ;; Registers used:
  6366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    8
  6379 ;; This function calls:
  6380 ;;		_Port_GetPin
  6381 ;; This function is called by:
  6382 ;;		_HMI_Init
  6383 ;;		_Button_Poll
  6384 ;;		_inputVar
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text18
  6389  017EA0                     __ptext18:
  6390                           	opt stack 0
  6391  017EA0                     _HMI_RightSwitch:
  6392                           	opt stack 21
  6393                           
  6394                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  6395                           
  6396                           ;incstack = 0
  6397  017EA0  0E97               	movlw	low _PortE
  6398  017EA2  0100               	movlb	0	; () banked
  6399  017EA4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  6400  017EA6  0E01               	movlw	high _PortE
  6401  017EA8  0100               	movlb	0	; () banked
  6402  017EAA  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6403  017EAC  0E04               	movlw	4
  6404  017EAE  0100               	movlb	0	; () banked
  6405  017EB0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  6406  017EB2  EC5E  F0BB         	call	_Port_GetPin	;wreg free
  6407  017EB6  0012               	return	
  6408  017EB8                     __end_of_HMI_RightSwitch:
  6409                           	opt stack 0
  6410                           tosu	equ	0xFFF
  6411                           tosh	equ	0xFFE
  6412                           tosl	equ	0xFFD
  6413                           pclath	equ	0xFFA
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           postinc0	equ	0xFEE
  6419                           wreg	equ	0xFE8
  6420                           indf1	equ	0xFE7
  6421                           postdec1	equ	0xFE5
  6422                           fsr1h	equ	0xFE2
  6423                           fsr1l	equ	0xFE1
  6424                           indf2	equ	0xFDF
  6425                           postinc2	equ	0xFDE
  6426                           postdec2	equ	0xFDD
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           
  6431 ;; *************** function _HMI_LeftSwitch *****************
  6432 ;; Defined at:
  6433 ;;		line 27 in file "HMI.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      unsigned char 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    8
  6454 ;; This function calls:
  6455 ;;		_Port_GetPin
  6456 ;; This function is called by:
  6457 ;;		_HMI_Init
  6458 ;;		_Button_Poll
  6459 ;;		_inputVar
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text19
  6464  017EB8                     __ptext19:
  6465                           	opt stack 0
  6466  017EB8                     _HMI_LeftSwitch:
  6467                           	opt stack 19
  6468                           
  6469                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  6470                           
  6471                           ;incstack = 0
  6472  017EB8  0E97               	movlw	low _PortE
  6473  017EBA  0100               	movlb	0	; () banked
  6474  017EBC  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  6475  017EBE  0E01               	movlw	high _PortE
  6476  017EC0  0100               	movlb	0	; () banked
  6477  017EC2  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6478  017EC4  0E05               	movlw	5
  6479  017EC6  0100               	movlb	0	; () banked
  6480  017EC8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  6481  017ECA  EC5E  F0BB         	call	_Port_GetPin	;wreg free
  6482  017ECE  0012               	return	
  6483  017ED0                     __end_of_HMI_LeftSwitch:
  6484                           	opt stack 0
  6485                           tosu	equ	0xFFF
  6486                           tosh	equ	0xFFE
  6487                           tosl	equ	0xFFD
  6488                           pclath	equ	0xFFA
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           indf1	equ	0xFE7
  6496                           postdec1	equ	0xFE5
  6497                           fsr1h	equ	0xFE2
  6498                           fsr1l	equ	0xFE1
  6499                           indf2	equ	0xFDF
  6500                           postinc2	equ	0xFDE
  6501                           postdec2	equ	0xFDD
  6502                           fsr2h	equ	0xFDA
  6503                           fsr2l	equ	0xFD9
  6504                           status	equ	0xFD8
  6505                           
  6506 ;; *************** function _MXK_TestButton *****************
  6507 ;; Defined at:
  6508 ;;		line 14 in file "Library/MXK.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;		None
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      unsigned char 
  6515 ;; Registers used:
  6516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;Total ram usage:        0 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    8
  6529 ;; This function calls:
  6530 ;;		_Port_GetPin
  6531 ;; This function is called by:
  6532 ;;		_FunctInitButton
  6533 ;;		_Button_Poll
  6534 ;;		_inputVar
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text20
  6539  017ED0                     __ptext20:
  6540                           	opt stack 0
  6541  017ED0                     _MXK_TestButton:
  6542                           	opt stack 21
  6543                           
  6544                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  6545                           
  6546                           ;incstack = 0
  6547  017ED0  0EAB               	movlw	low _PortB
  6548  017ED2  0100               	movlb	0	; () banked
  6549  017ED4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  6550  017ED6  0E01               	movlw	high _PortB
  6551  017ED8  0100               	movlb	0	; () banked
  6552  017EDA  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6553  017EDC  0E04               	movlw	4
  6554  017EDE  0100               	movlb	0	; () banked
  6555  017EE0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  6556  017EE2  EC5E  F0BB         	call	_Port_GetPin	;wreg free
  6557  017EE6  0012               	return	
  6558  017EE8                     __end_of_MXK_TestButton:
  6559                           	opt stack 0
  6560                           tosu	equ	0xFFF
  6561                           tosh	equ	0xFFE
  6562                           tosl	equ	0xFFD
  6563                           pclath	equ	0xFFA
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           postinc0	equ	0xFEE
  6569                           wreg	equ	0xFE8
  6570                           indf1	equ	0xFE7
  6571                           postdec1	equ	0xFE5
  6572                           fsr1h	equ	0xFE2
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function _Port_GetQuad *****************
  6582 ;; Defined at:
  6583 ;;		line 498 in file "Library/Port.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  6586 ;;		 -> PortE(10), PortD(10), 
  6587 ;;  pQuad           1    2[BANK0 ] enum E6776
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  Output          1    5[BANK0 ] unsigned char 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      unsigned char 
  6592 ;; Registers used:
  6593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6599 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;Total ram usage:        6 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    7
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_HMI_DIPSwitch
  6610 ;;		_MXK_DIPSwitch
  6611 ;;		_Port_ToggleQuad
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text21
  6616  017552                     __ptext21:
  6617                           	opt stack 0
  6618  017552                     _Port_GetQuad:
  6619                           	opt stack 21
  6620                           
  6621                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  6622                           
  6623                           ;incstack = 0
  6624  017552  0100               	movlb	0	; () banked
  6625  017554  EE20 F006          	lfsr	2,6
  6626  017558  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
  6627  01755A  26D9               	addwf	fsr2l,f,c
  6628  01755C  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  6629  01755E  22DA               	addwfc	fsr2h,f,c
  6630  017560  CFDE F063          	movff	postinc2,??_Port_GetQuad
  6631  017564  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
  6632  017568  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
  6633  01756C  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  6634  017570  50DF               	movf	indf2,w,c
  6635  017572  0100               	movlb	0	; () banked
  6636  017574  6F65               	movwf	Port_GetQuad@Output& (0+255),b
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  6640  017576  0100               	movlb	0	; () banked
  6641  017578  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
  6642  01757A  0D04               	mullw	4
  6643  01757C  28F3               	incf	prodl,w,c
  6644  01757E  0100               	movlb	0	; () banked
  6645  017580  6F63               	movwf	??_Port_GetQuad& (0+255),b
  6646  017582  D003               	goto	u10770
  6647  017584                     u10775:
  6648  017584  0100               	movlb	0	; () banked
  6649  017586  90D8               	bcf	status,0,c
  6650  017588  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
  6651  01758A                     u10770:
  6652  01758A  0100               	movlb	0	; () banked
  6653  01758C  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
  6654  01758E  D7FA               	goto	u10775
  6655                           
  6656                           ;Port.c: 502: Output &= 0xF;
  6657  017590  0E0F               	movlw	15
  6658  017592  0100               	movlb	0	; () banked
  6659  017594  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;Port.c: 503: return Output;
  6663  017596  0100               	movlb	0	; () banked
  6664  017598  5165               	movf	Port_GetQuad@Output& (0+255),w,b
  6665  01759A  0012               	return	
  6666  01759C                     __end_of_Port_GetQuad:
  6667                           	opt stack 0
  6668                           tosu	equ	0xFFF
  6669                           tosh	equ	0xFFE
  6670                           tosl	equ	0xFFD
  6671                           pclath	equ	0xFFA
  6672                           tblptru	equ	0xFF8
  6673                           tblptrh	equ	0xFF7
  6674                           tblptrl	equ	0xFF6
  6675                           tablat	equ	0xFF5
  6676                           prodl	equ	0xFF3
  6677                           postinc0	equ	0xFEE
  6678                           wreg	equ	0xFE8
  6679                           indf1	equ	0xFE7
  6680                           postdec1	equ	0xFE5
  6681                           fsr1h	equ	0xFE2
  6682                           fsr1l	equ	0xFE1
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           fsr2h	equ	0xFDA
  6687                           fsr2l	equ	0xFD9
  6688                           status	equ	0xFD8
  6689                           
  6690 ;; *************** function _Event_DIPSwitch *****************
  6691 ;; Defined at:
  6692 ;;		line 22 in file "Events.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;  pState          1    wreg     unsigned char 
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;  pState          1   25[BANK0 ] unsigned char 
  6697 ;;  Bar             1   26[BANK0 ] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      void 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;Total ram usage:        2 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:   13
  6714 ;; This function calls:
  6715 ;;		_HMI_GetBar
  6716 ;;		_HMI_SetBar
  6717 ;;		_LED_Toggle
  6718 ;; This function is called by:
  6719 ;;		_FunctInitButton
  6720 ;;		_Button_Poll
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text22
  6725  017BBA                     __ptext22:
  6726                           	opt stack 0
  6727  017BBA                     _Event_DIPSwitch:
  6728                           	opt stack 14
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;incstack = 0
  6732                           ;Event_DIPSwitch@pState stored from wreg
  6733  017BBA  0100               	movlb	0	; () banked
  6734  017BBC  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  6735                           
  6736                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  6737  017BBE  ECED  F0BF         	call	_HMI_GetBar	;wreg free
  6738  017BC2  0100               	movlb	0	; () banked
  6739  017BC4  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;Events.c: 25: Bar &= 0x0F;
  6743  017BC6  0E0F               	movlw	15
  6744  017BC8  0100               	movlb	0	; () banked
  6745  017BCA  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;Events.c: 26: pState <<= 4;
  6749  017BCC  0100               	movlb	0	; () banked
  6750  017BCE  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  6751  017BD0  0EF0               	movlw	240
  6752  017BD2  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  6756  017BD4  0100               	movlb	0	; () banked
  6757  017BD6  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  6758  017BD8  0100               	movlb	0	; () banked
  6759  017BDA  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  6760  017BDC  ECD6  F0BF         	call	_HMI_SetBar
  6761                           
  6762                           ;Events.c: 32: LED_Toggle(eLED1);
  6763  017BE0  0E00               	movlw	0
  6764  017BE2  ECF2  F0BA         	call	_LED_Toggle
  6765  017BE6  0012               	return		;funcret
  6766  017BE8                     __end_of_Event_DIPSwitch:
  6767                           	opt stack 0
  6768                           tosu	equ	0xFFF
  6769                           tosh	equ	0xFFE
  6770                           tosl	equ	0xFFD
  6771                           pclath	equ	0xFFA
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodl	equ	0xFF3
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           indf1	equ	0xFE7
  6780                           postdec1	equ	0xFE5
  6781                           fsr1h	equ	0xFE2
  6782                           fsr1l	equ	0xFE1
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function _Event_NULL *****************
  6791 ;; Defined at:
  6792 ;;		line 9 in file "Events.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;  pState          1    wreg     unsigned char 
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  pState          1    0[COMRAM] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    7
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		_HMI_Init
  6817 ;;		_Button_Poll
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text23
  6822  018002                     __ptext23:
  6823                           	opt stack 0
  6824  018002                     _Event_NULL:
  6825                           	opt stack 20
  6826                           
  6827                           ;incstack = 0
  6828  018002  0012               	return		;funcret
  6829  018004                     __end_of_Event_NULL:
  6830                           	opt stack 0
  6831                           tosu	equ	0xFFF
  6832                           tosh	equ	0xFFE
  6833                           tosl	equ	0xFFD
  6834                           pclath	equ	0xFFA
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodl	equ	0xFF3
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           indf1	equ	0xFE7
  6843                           postdec1	equ	0xFE5
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function _Event_TestButton *****************
  6854 ;; Defined at:
  6855 ;;		line 52 in file "Events.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  pState          1    wreg     unsigned char 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  pState          1   25[BANK0 ] unsigned char 
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;Total ram usage:        1 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:   13
  6876 ;; This function calls:
  6877 ;;		_HMI_SetButton
  6878 ;;		_HMI_SetNumber
  6879 ;;		_LED_Toggle
  6880 ;; This function is called by:
  6881 ;;		_FunctInitButton
  6882 ;;		_Button_Poll
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text24
  6887  01790C                     __ptext24:
  6888                           	opt stack 0
  6889  01790C                     _Event_TestButton:
  6890                           	opt stack 14
  6891                           
  6892                           ;incstack = 0
  6893                           ;Event_TestButton@pState stored from wreg
  6894  01790C  0100               	movlb	0	; () banked
  6895  01790E  6F79               	movwf	Event_TestButton@pState& (0+255),b
  6896                           
  6897                           ;Events.c: 56: static UINT8 j = 0;
  6898                           ;Events.c: 60: if (pState == 0)
  6899  017910  0100               	movlb	0	; () banked
  6900  017912  5179               	movf	Event_TestButton@pState& (0+255),w,b
  6901  017914  0100               	movlb	0	; () banked
  6902  017916  A4D8               	btfss	status,2,c
  6903  017918  D013               	goto	l13903
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;Events.c: 61: {
  6907                           ;Events.c: 62: j++;
  6908  01791A  0100               	movlb	0	; () banked
  6909  01791C  2BE4               	incf	Event_TestButton@j& (0+255),f,b
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;Events.c: 63: val += j;
  6913  01791E  0100               	movlb	0	; () banked
  6914  017920  51E4               	movf	Event_TestButton@j& (0+255),w,b
  6915  017922  0100               	movlb	0	; () banked
  6916  017924  27DA               	addwf	_val& (0+255),f,b
  6917  017926  0E00               	movlw	0
  6918  017928  23DB               	addwfc	(_val+1)& (0+255),f,b
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;Events.c: 64: HMI_SetNumber( val );
  6922  01792A  C0DA  F071         	movff	_val,HMI_SetNumber@pInput
  6923  01792E  C0DB  F072         	movff	_val+1,HMI_SetNumber@pInput+1
  6924  017932  EC0B  F0BE         	call	_HMI_SetNumber	;wreg free
  6925                           
  6926                           ;Events.c: 67: HMI_SetButton( j & 3 );
  6927  017936  0100               	movlb	0	; () banked
  6928  017938  51E4               	movf	Event_TestButton@j& (0+255),w,b
  6929  01793A  0B03               	andlw	3
  6930  01793C  EC29  F0B3         	call	_HMI_SetButton
  6931  017940                     l13903:
  6932                           
  6933                           ;Events.c: 68: }
  6934                           ;Events.c: 72: LED_Toggle(eLED1);
  6935  017940  0E00               	movlw	0
  6936  017942  ECF2  F0BA         	call	_LED_Toggle
  6937  017946  0012               	return		;funcret
  6938  017948                     __end_of_Event_TestButton:
  6939                           	opt stack 0
  6940                           tosu	equ	0xFFF
  6941                           tosh	equ	0xFFE
  6942                           tosl	equ	0xFFD
  6943                           pclath	equ	0xFFA
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodl	equ	0xFF3
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           indf1	equ	0xFE7
  6952                           postdec1	equ	0xFE5
  6953                           fsr1h	equ	0xFE2
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function _HMI_SetNumber *****************
  6963 ;; Defined at:
  6964 ;;		line 221 in file "HMI.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  pInput          2   17[BANK0 ] int 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      void 
  6971 ;; Registers used:
  6972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;Total ram usage:        2 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    9
  6985 ;; This function calls:
  6986 ;;		_HMI_SetSegments
  6987 ;;		_itos
  6988 ;; This function is called by:
  6989 ;;		_Event_TestButton
  6990 ;;		_main
  6991 ;;		_Event_HMI_UpButton
  6992 ;;		_Event_HMI_DownButton
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text25
  6997  017C16                     __ptext25:
  6998                           	opt stack 0
  6999  017C16                     _HMI_SetNumber:
  7000                           	opt stack 17
  7001                           
  7002                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  7003                           
  7004                           ;incstack = 0
  7005  017C16  C071  F067         	movff	HMI_SetNumber@pInput,itos@input
  7006  017C1A  C072  F068         	movff	HMI_SetNumber@pInput+1,itos@input+1
  7007  017C1E  0E29               	movlw	low _HMIBoard
  7008  017C20  0100               	movlb	0	; () banked
  7009  017C22  6F69               	movwf	itos@destination& (0+255),b
  7010  017C24  0E01               	movlw	high _HMIBoard
  7011  017C26  0100               	movlb	0	; () banked
  7012  017C28  6F6A               	movwf	(itos@destination+1)& (0+255),b
  7013  017C2A  ECE5  F0A8         	call	_itos	;wreg free
  7014                           
  7015                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  7016  017C2E  0E29               	movlw	low _HMIBoard
  7017  017C30  0100               	movlb	0	; () banked
  7018  017C32  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
  7019  017C34  0E01               	movlw	high _HMIBoard
  7020  017C36  0100               	movlb	0	; () banked
  7021  017C38  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  7022  017C3A  EC48  F0AD         	call	_HMI_SetSegments	;wreg free
  7023  017C3E  0012               	return		;funcret
  7024  017C40                     __end_of_HMI_SetNumber:
  7025                           	opt stack 0
  7026                           tosu	equ	0xFFF
  7027                           tosh	equ	0xFFE
  7028                           tosl	equ	0xFFD
  7029                           pclath	equ	0xFFA
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodl	equ	0xFF3
  7035                           postinc0	equ	0xFEE
  7036                           wreg	equ	0xFE8
  7037                           indf1	equ	0xFE7
  7038                           postdec1	equ	0xFE5
  7039                           fsr1h	equ	0xFE2
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8
  7047                           
  7048 ;; *************** function _itos *****************
  7049 ;; Defined at:
  7050 ;;		line 369 in file "Library/Types.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  input           2    7[BANK0 ] unsigned short 
  7053 ;;  destination     2    9[BANK0 ] PTR unsigned char 
  7054 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  Out             2   15[BANK0 ] unsigned short 
  7057 ;;  Length          2   13[BANK0 ] unsigned short 
  7058 ;;  Data            2   11[BANK0 ] PTR unsigned char 
  7059 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  1    wreg      void 
  7062 ;; Registers used:
  7063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;Total ram usage:       10 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    8
  7076 ;; This function calls:
  7077 ;;		___lwdiv
  7078 ;;		___lwmod
  7079 ;;		_reverse
  7080 ;; This function is called by:
  7081 ;;		_HMI_SetNumber
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text26
  7086  0151CA                     __ptext26:
  7087                           	opt stack 0
  7088  0151CA                     _itos:
  7089                           	opt stack 17
  7090                           
  7091                           ;Types.c: 371: UINT16 Out = input;
  7092                           
  7093                           ;incstack = 0
  7094  0151CA  C067  F06F         	movff	itos@input,itos@Out
  7095  0151CE  C068  F070         	movff	itos@input+1,itos@Out+1
  7096                           
  7097                           ;Types.c: 372: UINT16 Length = 0;
  7098  0151D2  0E00               	movlw	0
  7099  0151D4  0100               	movlb	0	; () banked
  7100  0151D6  6F6E               	movwf	(itos@Length+1)& (0+255),b
  7101  0151D8  0E00               	movlw	0
  7102  0151DA  6F6D               	movwf	itos@Length& (0+255),b
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;Types.c: 373: char *Data = destination;
  7106  0151DC  C069  F06B         	movff	itos@destination,itos@Data
  7107  0151E0  C06A  F06C         	movff	itos@destination+1,itos@Data+1
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;Types.c: 374: if(Out == 0)
  7111  0151E4  0100               	movlb	0	; () banked
  7112  0151E6  516F               	movf	itos@Out& (0+255),w,b
  7113  0151E8  0100               	movlb	0	; () banked
  7114  0151EA  1170               	iorwf	(itos@Out+1)& (0+255),w,b
  7115  0151EC  A4D8               	btfss	status,2,c
  7116  0151EE  D034               	goto	l13069
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;Types.c: 375: {
  7120                           ;Types.c: 376: Data[0] = (UINT16)'0';
  7121  0151F0  C06B  FFD9         	movff	itos@Data,fsr2l
  7122  0151F4  C06C  FFDA         	movff	itos@Data+1,fsr2h
  7123  0151F8  0E30               	movlw	48
  7124  0151FA  6EDF               	movwf	indf2,c
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;Types.c: 377: Length = 1;
  7128  0151FC  0E00               	movlw	0
  7129  0151FE  0100               	movlb	0	; () banked
  7130  015200  6F6E               	movwf	(itos@Length+1)& (0+255),b
  7131  015202  0E01               	movlw	1
  7132  015204  6F6D               	movwf	itos@Length& (0+255),b
  7133                           
  7134                           ;Types.c: 378: }
  7135  015206  D040               	goto	l13075
  7136  015208                     l13061:
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;Types.c: 382: {
  7140                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  7141  015208  C06F  F060         	movff	itos@Out,___lwmod@dividend
  7142  01520C  C070  F061         	movff	itos@Out+1,___lwmod@dividend+1
  7143  015210  0E00               	movlw	0
  7144  015212  0100               	movlb	0	; () banked
  7145  015214  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  7146  015216  0E0A               	movlw	10
  7147  015218  6F62               	movwf	___lwmod@divisor& (0+255),b
  7148  01521A  ECFA  F0B8         	call	___lwmod	;wreg free
  7149  01521E  0100               	movlb	0	; () banked
  7150  015220  5160               	movf	?___lwmod& (0+255),w,b
  7151  015222  0F30               	addlw	48
  7152  015224  C06B  FFD9         	movff	itos@Data,fsr2l
  7153  015228  C06C  FFDA         	movff	itos@Data+1,fsr2h
  7154  01522C  6EDF               	movwf	indf2,c
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;Types.c: 384: Out /= 10;
  7158  01522E  C06F  F060         	movff	itos@Out,___lwdiv@dividend
  7159  015232  C070  F061         	movff	itos@Out+1,___lwdiv@dividend+1
  7160  015236  0E00               	movlw	0
  7161  015238  0100               	movlb	0	; () banked
  7162  01523A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7163  01523C  0E0A               	movlw	10
  7164  01523E  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7165  015240  ECC3  F0B5         	call	___lwdiv	;wreg free
  7166  015244  C060  F06F         	movff	?___lwdiv,itos@Out
  7167  015248  C061  F070         	movff	?___lwdiv+1,itos@Out+1
  7168                           
  7169                           ;Types.c: 385: Length ++;
  7170  01524C  0100               	movlb	0	; () banked
  7171  01524E  4B6D               	infsnz	itos@Length& (0+255),f,b
  7172  015250  2B6E               	incf	(itos@Length+1)& (0+255),f,b
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;Types.c: 386: Data++;
  7176  015252  0100               	movlb	0	; () banked
  7177  015254  4B6B               	infsnz	itos@Data& (0+255),f,b
  7178  015256  2B6C               	incf	(itos@Data+1)& (0+255),f,b
  7179  015258                     l13069:
  7180                           
  7181                           ; BSR set to: 0
  7182  015258  0100               	movlb	0	; () banked
  7183  01525A  516F               	movf	itos@Out& (0+255),w,b
  7184  01525C  0100               	movlb	0	; () banked
  7185  01525E  1170               	iorwf	(itos@Out+1)& (0+255),w,b
  7186  015260  B4D8               	btfsc	status,2,c
  7187  015262  D008               	goto	l13073
  7188                           
  7189                           ; BSR set to: 0
  7190  015264  0100               	movlb	0	; () banked
  7191  015266  516E               	movf	(itos@Length+1)& (0+255),w,b
  7192  015268  E105               	bnz	l13073
  7193  01526A  0E06               	movlw	6
  7194  01526C  0100               	movlb	0	; () banked
  7195  01526E  5D6D               	subwf	itos@Length& (0+255),w,b
  7196  015270  A0D8               	btfss	status,0,c
  7197  015272  D7CA               	goto	l13061
  7198  015274                     l13073:
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;Types.c: 387: }
  7202                           ;Types.c: 388: reverse(destination, Length);
  7203  015274  C069  F060         	movff	itos@destination,reverse@input
  7204  015278  C06A  F061         	movff	itos@destination+1,reverse@input+1
  7205  01527C  C06D  F062         	movff	itos@Length,reverse@length
  7206  015280  C06E  F063         	movff	itos@Length+1,reverse@length+1
  7207  015284  EC5A  F0B7         	call	_reverse	;wreg free
  7208  015288                     l13075:
  7209                           
  7210                           ;Types.c: 389: }
  7211                           ;Types.c: 390: destination[Length] = '\0';
  7212  015288  0100               	movlb	0	; () banked
  7213  01528A  516D               	movf	itos@Length& (0+255),w,b
  7214  01528C  0100               	movlb	0	; () banked
  7215  01528E  2569               	addwf	itos@destination& (0+255),w,b
  7216  015290  6ED9               	movwf	fsr2l,c
  7217  015292  0100               	movlb	0	; () banked
  7218  015294  516E               	movf	(itos@Length+1)& (0+255),w,b
  7219  015296  0100               	movlb	0	; () banked
  7220  015298  216A               	addwfc	(itos@destination+1)& (0+255),w,b
  7221  01529A  6EDA               	movwf	fsr2h,c
  7222  01529C  0E00               	movlw	0
  7223  01529E  6EDF               	movwf	indf2,c
  7224                           
  7225                           ; BSR set to: 0
  7226  0152A0  0012               	return		;funcret
  7227  0152A2                     __end_of_itos:
  7228                           	opt stack 0
  7229                           tosu	equ	0xFFF
  7230                           tosh	equ	0xFFE
  7231                           tosl	equ	0xFFD
  7232                           pclath	equ	0xFFA
  7233                           tblptru	equ	0xFF8
  7234                           tblptrh	equ	0xFF7
  7235                           tblptrl	equ	0xFF6
  7236                           tablat	equ	0xFF5
  7237                           prodl	equ	0xFF3
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           indf1	equ	0xFE7
  7241                           postdec1	equ	0xFE5
  7242                           fsr1h	equ	0xFE2
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _reverse *****************
  7252 ;; Defined at:
  7253 ;;		line 357 in file "Library/Types.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  input           2    0[BANK0 ] PTR unsigned char 
  7256 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7257 ;;  length          2    2[BANK0 ] unsigned short 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  7260 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7261 ;;  tempVar         1    4[BANK0 ] unsigned char 
  7262 ;; Return value:  Size  Location     Type
  7263 ;;                  1    wreg      void 
  7264 ;; Registers used:
  7265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7271 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7272 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;Total ram usage:        7 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    7
  7278 ;; This function calls:
  7279 ;;		Nothing
  7280 ;; This function is called by:
  7281 ;;		_itos
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text27
  7286  016EB4                     __ptext27:
  7287                           	opt stack 0
  7288  016EB4                     _reverse:
  7289                           	opt stack 17
  7290                           
  7291                           ;Types.c: 359: char tempVar,
  7292                           ;Types.c: 360: *iterator = input + length;
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;incstack = 0
  7296  016EB4  0100               	movlb	0	; () banked
  7297  016EB6  5162               	movf	reverse@length& (0+255),w,b
  7298  016EB8  0100               	movlb	0	; () banked
  7299  016EBA  2560               	addwf	reverse@input& (0+255),w,b
  7300  016EBC  0100               	movlb	0	; () banked
  7301  016EBE  6F65               	movwf	reverse@iterator& (0+255),b
  7302  016EC0  0100               	movlb	0	; () banked
  7303  016EC2  5163               	movf	(reverse@length+1)& (0+255),w,b
  7304  016EC4  0100               	movlb	0	; () banked
  7305  016EC6  2161               	addwfc	(reverse@input+1)& (0+255),w,b
  7306  016EC8  0100               	movlb	0	; () banked
  7307  016ECA  6F66               	movwf	(reverse@iterator+1)& (0+255),b
  7308                           
  7309                           ;Types.c: 362: while ( --iterator > input )
  7310  016ECC  D01A               	goto	l12911
  7311  016ECE                     l12903:
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;Types.c: 363: {
  7315                           ;Types.c: 364: tempVar = *input;
  7316  016ECE  C060  FFD9         	movff	reverse@input,fsr2l
  7317  016ED2  C061  FFDA         	movff	reverse@input+1,fsr2h
  7318  016ED6  50DF               	movf	indf2,w,c
  7319  016ED8  0100               	movlb	0	; () banked
  7320  016EDA  6F64               	movwf	reverse@tempVar& (0+255),b
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;Types.c: 365: *input++=*iterator;
  7324  016EDC  C065  FFD9         	movff	reverse@iterator,fsr2l
  7325  016EE0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  7326  016EE4  C060  FFE1         	movff	reverse@input,fsr1l
  7327  016EE8  C061  FFE2         	movff	reverse@input+1,fsr1h
  7328  016EEC  CFDF FFE7          	movff	indf2,indf1
  7329                           
  7330                           ; BSR set to: 0
  7331  016EF0  0100               	movlb	0	; () banked
  7332  016EF2  4B60               	infsnz	reverse@input& (0+255),f,b
  7333  016EF4  2B61               	incf	(reverse@input+1)& (0+255),f,b
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;Types.c: 366: *iterator=tempVar;
  7337  016EF6  C065  FFD9         	movff	reverse@iterator,fsr2l
  7338  016EFA  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  7339  016EFE  C064  FFDF         	movff	reverse@tempVar,indf2
  7340  016F02                     l12911:
  7341                           
  7342                           ; BSR set to: 0
  7343  016F02  0100               	movlb	0	; () banked
  7344  016F04  0765               	decf	reverse@iterator& (0+255),f,b
  7345  016F06  A0D8               	btfss	status,0,c
  7346  016F08  0766               	decf	(reverse@iterator+1)& (0+255),f,b
  7347  016F0A  0100               	movlb	0	; () banked
  7348  016F0C  5165               	movf	reverse@iterator& (0+255),w,b
  7349  016F0E  0100               	movlb	0	; () banked
  7350  016F10  5D60               	subwf	reverse@input& (0+255),w,b
  7351  016F12  0100               	movlb	0	; () banked
  7352  016F14  5166               	movf	(reverse@iterator+1)& (0+255),w,b
  7353  016F16  0100               	movlb	0	; () banked
  7354  016F18  5961               	subwfb	(reverse@input+1)& (0+255),w,b
  7355  016F1A  B0D8               	btfsc	status,0,c
  7356  016F1C  0012               	return	
  7357  016F1E  D7D7               	goto	l12903
  7358  016F20                     __end_of_reverse:
  7359                           	opt stack 0
  7360                           tosu	equ	0xFFF
  7361                           tosh	equ	0xFFE
  7362                           tosl	equ	0xFFD
  7363                           pclath	equ	0xFFA
  7364                           tblptru	equ	0xFF8
  7365                           tblptrh	equ	0xFF7
  7366                           tblptrl	equ	0xFF6
  7367                           tablat	equ	0xFF5
  7368                           prodl	equ	0xFF3
  7369                           postinc0	equ	0xFEE
  7370                           wreg	equ	0xFE8
  7371                           indf1	equ	0xFE7
  7372                           postdec1	equ	0xFE5
  7373                           fsr1h	equ	0xFE2
  7374                           fsr1l	equ	0xFE1
  7375                           indf2	equ	0xFDF
  7376                           postinc2	equ	0xFDE
  7377                           postdec2	equ	0xFDD
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8
  7381                           
  7382 ;; *************** function ___lwmod *****************
  7383 ;; Defined at:
  7384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  dividend        2    0[BANK0 ] unsigned int 
  7387 ;;  divisor         2    2[BANK0 ] unsigned int 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  counter         1    4[BANK0 ] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  2    0[BANK0 ] unsigned int 
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;Total ram usage:        5 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    7
  7406 ;; This function calls:
  7407 ;;		Nothing
  7408 ;; This function is called by:
  7409 ;;		_itos
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text28
  7414  0171F4                     __ptext28:
  7415                           	opt stack 0
  7416  0171F4                     ___lwmod:
  7417                           	opt stack 17
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;incstack = 0
  7421  0171F4  0100               	movlb	0	; () banked
  7422  0171F6  5162               	movf	___lwmod@divisor& (0+255),w,b
  7423  0171F8  0100               	movlb	0	; () banked
  7424  0171FA  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7425  0171FC  B4D8               	btfsc	status,2,c
  7426  0171FE  D026               	goto	l2667
  7427                           
  7428                           ; BSR set to: 0
  7429  017200  0E01               	movlw	1
  7430  017202  0100               	movlb	0	; () banked
  7431  017204  6F64               	movwf	___lwmod@counter& (0+255),b
  7432  017206  D006               	goto	l12987
  7433  017208                     l12985:
  7434                           
  7435                           ; BSR set to: 0
  7436  017208  0100               	movlb	0	; () banked
  7437  01720A  90D8               	bcf	status,0,c
  7438  01720C  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  7439  01720E  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7440  017210  0100               	movlb	0	; () banked
  7441  017212  2B64               	incf	___lwmod@counter& (0+255),f,b
  7442  017214                     l12987:
  7443                           
  7444                           ; BSR set to: 0
  7445  017214  0100               	movlb	0	; () banked
  7446  017216  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7447  017218  D7F7               	goto	l12985
  7448  01721A                     l12989:
  7449                           
  7450                           ; BSR set to: 0
  7451  01721A  0100               	movlb	0	; () banked
  7452  01721C  5162               	movf	___lwmod@divisor& (0+255),w,b
  7453  01721E  0100               	movlb	0	; () banked
  7454  017220  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  7455  017222  0100               	movlb	0	; () banked
  7456  017224  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7457  017226  0100               	movlb	0	; () banked
  7458  017228  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7459  01722A  A0D8               	btfss	status,0,c
  7460  01722C  D008               	goto	l12993
  7461                           
  7462                           ; BSR set to: 0
  7463  01722E  0100               	movlb	0	; () banked
  7464  017230  5162               	movf	___lwmod@divisor& (0+255),w,b
  7465  017232  0100               	movlb	0	; () banked
  7466  017234  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  7467  017236  0100               	movlb	0	; () banked
  7468  017238  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7469  01723A  0100               	movlb	0	; () banked
  7470  01723C  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7471  01723E                     l12993:
  7472                           
  7473                           ; BSR set to: 0
  7474  01723E  0100               	movlb	0	; () banked
  7475  017240  90D8               	bcf	status,0,c
  7476  017242  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7477  017244  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  7478                           
  7479                           ; BSR set to: 0
  7480  017246  0100               	movlb	0	; () banked
  7481  017248  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  7482  01724A  D7E7               	goto	l12989
  7483  01724C                     l2667:
  7484                           
  7485                           ; BSR set to: 0
  7486  01724C  C060  F060         	movff	___lwmod@dividend,?___lwmod
  7487  017250  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  7488                           
  7489                           ; BSR set to: 0
  7490  017254  0012               	return		;funcret
  7491  017256                     __end_of___lwmod:
  7492                           	opt stack 0
  7493                           tosu	equ	0xFFF
  7494                           tosh	equ	0xFFE
  7495                           tosl	equ	0xFFD
  7496                           pclath	equ	0xFFA
  7497                           tblptru	equ	0xFF8
  7498                           tblptrh	equ	0xFF7
  7499                           tblptrl	equ	0xFF6
  7500                           tablat	equ	0xFF5
  7501                           prodl	equ	0xFF3
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           indf1	equ	0xFE7
  7505                           postdec1	equ	0xFE5
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function ___lwdiv *****************
  7516 ;; Defined at:
  7517 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  dividend        2    0[BANK0 ] unsigned int 
  7520 ;;  divisor         2    2[BANK0 ] unsigned int 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  quotient        2    5[BANK0 ] unsigned int 
  7523 ;;  counter         1    4[BANK0 ] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  2    0[BANK0 ] unsigned int 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        7 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    7
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_itos
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text29
  7548  016B86                     __ptext29:
  7549                           	opt stack 0
  7550  016B86                     ___lwdiv:
  7551                           	opt stack 17
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;incstack = 0
  7555  016B86  0E00               	movlw	0
  7556  016B88  0100               	movlb	0	; () banked
  7557  016B8A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7558  016B8C  0E00               	movlw	0
  7559  016B8E  6F65               	movwf	___lwdiv@quotient& (0+255),b
  7560                           
  7561                           ; BSR set to: 0
  7562  016B90  0100               	movlb	0	; () banked
  7563  016B92  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7564  016B94  0100               	movlb	0	; () banked
  7565  016B96  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7566  016B98  B4D8               	btfsc	status,2,c
  7567  016B9A  D02C               	goto	l2657
  7568                           
  7569                           ; BSR set to: 0
  7570  016B9C  0E01               	movlw	1
  7571  016B9E  0100               	movlb	0	; () banked
  7572  016BA0  6F64               	movwf	___lwdiv@counter& (0+255),b
  7573  016BA2  D006               	goto	l12967
  7574  016BA4                     l12965:
  7575                           
  7576                           ; BSR set to: 0
  7577  016BA4  0100               	movlb	0	; () banked
  7578  016BA6  90D8               	bcf	status,0,c
  7579  016BA8  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  7580  016BAA  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7581  016BAC  0100               	movlb	0	; () banked
  7582  016BAE  2B64               	incf	___lwdiv@counter& (0+255),f,b
  7583  016BB0                     l12967:
  7584                           
  7585                           ; BSR set to: 0
  7586  016BB0  0100               	movlb	0	; () banked
  7587  016BB2  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7588  016BB4  D7F7               	goto	l12965
  7589  016BB6                     l12969:
  7590                           
  7591                           ; BSR set to: 0
  7592  016BB6  0100               	movlb	0	; () banked
  7593  016BB8  90D8               	bcf	status,0,c
  7594  016BBA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  7595  016BBC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7596                           
  7597                           ; BSR set to: 0
  7598  016BBE  0100               	movlb	0	; () banked
  7599  016BC0  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7600  016BC2  0100               	movlb	0	; () banked
  7601  016BC4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  7602  016BC6  0100               	movlb	0	; () banked
  7603  016BC8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7604  016BCA  0100               	movlb	0	; () banked
  7605  016BCC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7606  016BCE  A0D8               	btfss	status,0,c
  7607  016BD0  D00A               	goto	l12977
  7608                           
  7609                           ; BSR set to: 0
  7610  016BD2  0100               	movlb	0	; () banked
  7611  016BD4  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7612  016BD6  0100               	movlb	0	; () banked
  7613  016BD8  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  7614  016BDA  0100               	movlb	0	; () banked
  7615  016BDC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7616  016BDE  0100               	movlb	0	; () banked
  7617  016BE0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7618                           
  7619                           ; BSR set to: 0
  7620  016BE2  0100               	movlb	0	; () banked
  7621  016BE4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  7622  016BE6                     l12977:
  7623                           
  7624                           ; BSR set to: 0
  7625  016BE6  0100               	movlb	0	; () banked
  7626  016BE8  90D8               	bcf	status,0,c
  7627  016BEA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7628  016BEC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  7629                           
  7630                           ; BSR set to: 0
  7631  016BEE  0100               	movlb	0	; () banked
  7632  016BF0  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  7633  016BF2  D7E1               	goto	l12969
  7634  016BF4                     l2657:
  7635                           
  7636                           ; BSR set to: 0
  7637  016BF4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  7638  016BF8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7639                           
  7640                           ; BSR set to: 0
  7641  016BFC  0012               	return		;funcret
  7642  016BFE                     __end_of___lwdiv:
  7643                           	opt stack 0
  7644                           tosu	equ	0xFFF
  7645                           tosh	equ	0xFFE
  7646                           tosl	equ	0xFFD
  7647                           pclath	equ	0xFFA
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodl	equ	0xFF3
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           indf1	equ	0xFE7
  7656                           postdec1	equ	0xFE5
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           postdec2	equ	0xFDD
  7662                           fsr2h	equ	0xFDA
  7663                           fsr2l	equ	0xFD9
  7664                           status	equ	0xFD8
  7665                           
  7666 ;; *************** function _HMI_SetSegments *****************
  7667 ;; Defined at:
  7668 ;;		line 226 in file "HMI.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  7671 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;  in              2    4[BANK0 ] unsigned short 
  7674 ;; Return value:  Size  Location     Type
  7675 ;;                  1    wreg      void 
  7676 ;; Registers used:
  7677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7683 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;Total ram usage:        5 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:    8
  7690 ;; This function calls:
  7691 ;;		_ToSegment
  7692 ;; This function is called by:
  7693 ;;		_HMI_SetNumber
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           	psect	text30
  7698  015A90                     __ptext30:
  7699                           	opt stack 0
  7700  015A90                     _HMI_SetSegments:
  7701                           	opt stack 17
  7702                           
  7703                           ;HMI.c: 228: UINT16 in=0;
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;incstack = 0
  7707  015A90  0E00               	movlw	0
  7708  015A92  0100               	movlb	0	; () banked
  7709  015A94  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  7710  015A96  0E00               	movlw	0
  7711  015A98  6F64               	movwf	HMI_SetSegments@in& (0+255),b
  7712                           
  7713                           ;HMI.c: 229: while(*pString)
  7714  015A9A  D038               	goto	l13119
  7715  015A9C                     l13103:
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;HMI.c: 230: {
  7719                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  7720  015A9C  0E29               	movlw	low _HMIBoard
  7721  015A9E  0100               	movlb	0	; () banked
  7722  015AA0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  7723  015AA2  6ED9               	movwf	fsr2l,c
  7724  015AA4  0E01               	movlw	high _HMIBoard
  7725  015AA6  0100               	movlb	0	; () banked
  7726  015AA8  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  7727  015AAA  6EDA               	movwf	fsr2h,c
  7728  015AAC  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  7729  015AB0  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  7730  015AB4  50E7               	movf	indf1,w,c
  7731  015AB6  EC11  F094         	call	_ToSegment
  7732  015ABA  6EDF               	movwf	indf2,c
  7733                           
  7734                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  7735  015ABC  0E29               	movlw	low _HMIBoard
  7736  015ABE  0100               	movlb	0	; () banked
  7737  015AC0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  7738  015AC2  6ED9               	movwf	fsr2l,c
  7739  015AC4  0E01               	movlw	high _HMIBoard
  7740  015AC6  0100               	movlb	0	; () banked
  7741  015AC8  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  7742  015ACA  6EDA               	movwf	fsr2h,c
  7743  015ACC  0E80               	movlw	128
  7744  015ACE  18DE               	xorwf	postinc2,w,c
  7745  015AD0  A4D8               	btfss	status,2,c
  7746  015AD2  D00E               	goto	l13111
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;HMI.c: 234: {
  7750                           ;HMI.c: 235: in--;
  7751  015AD4  0100               	movlb	0	; () banked
  7752  015AD6  0764               	decf	HMI_SetSegments@in& (0+255),f,b
  7753  015AD8  A0D8               	btfss	status,0,c
  7754  015ADA  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  7758  015ADC  0E29               	movlw	low _HMIBoard
  7759  015ADE  0100               	movlb	0	; () banked
  7760  015AE0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  7761  015AE2  6ED9               	movwf	fsr2l,c
  7762  015AE4  0E01               	movlw	high _HMIBoard
  7763  015AE6  0100               	movlb	0	; () banked
  7764  015AE8  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  7765  015AEA  6EDA               	movwf	fsr2h,c
  7766  015AEC  0E00               	movlw	0
  7767  015AEE  8EDB               	bsf	plusw2,7,c
  7768  015AF0                     l13111:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;HMI.c: 237: }
  7772                           ;HMI.c: 239: pString++;
  7773  015AF0  0100               	movlb	0	; () banked
  7774  015AF2  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  7775  015AF4  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;HMI.c: 240: in++;
  7779  015AF6  0100               	movlb	0	; () banked
  7780  015AF8  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  7781  015AFA  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;HMI.c: 241: if (in>=6)
  7785  015AFC  0100               	movlb	0	; () banked
  7786  015AFE  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  7787  015B00  E11A               	bnz	l13125
  7788  015B02  0E06               	movlw	6
  7789  015B04  0100               	movlb	0	; () banked
  7790  015B06  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  7791  015B08  B0D8               	btfsc	status,0,c
  7792  015B0A  D015               	goto	l13125
  7793  015B0C                     l13119:
  7794                           
  7795                           ; BSR set to: 0
  7796  015B0C  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  7797  015B10  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  7798  015B14  50DF               	movf	indf2,w,c
  7799  015B16  B4D8               	btfsc	status,2,c
  7800  015B18  D00E               	goto	l13125
  7801  015B1A  D7C0               	goto	l13103
  7802  015B1C                     l13121:
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;HMI.c: 245: {
  7806                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  7807  015B1C  0E29               	movlw	low _HMIBoard
  7808  015B1E  0100               	movlb	0	; () banked
  7809  015B20  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  7810  015B22  6ED9               	movwf	fsr2l,c
  7811  015B24  0E01               	movlw	high _HMIBoard
  7812  015B26  0100               	movlb	0	; () banked
  7813  015B28  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  7814  015B2A  6EDA               	movwf	fsr2h,c
  7815  015B2C  0E00               	movlw	0
  7816  015B2E  6EDF               	movwf	indf2,c
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;HMI.c: 247: in++;
  7820  015B30  0100               	movlb	0	; () banked
  7821  015B32  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  7822  015B34  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  7823  015B36                     l13125:
  7824                           
  7825                           ; BSR set to: 0
  7826  015B36  0100               	movlb	0	; () banked
  7827  015B38  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  7828  015B3A  E106               	bnz	l1207
  7829  015B3C  0E06               	movlw	6
  7830  015B3E  0100               	movlb	0	; () banked
  7831  015B40  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  7832  015B42  B0D8               	btfsc	status,0,c
  7833  015B44  0012               	return	
  7834  015B46  D7EA               	goto	l13121
  7835  015B48                     l1207:
  7836                           
  7837                           ; BSR set to: 0
  7838  015B48  0012               	return		;funcret
  7839  015B4A                     __end_of_HMI_SetSegments:
  7840                           	opt stack 0
  7841                           tosu	equ	0xFFF
  7842                           tosh	equ	0xFFE
  7843                           tosl	equ	0xFFD
  7844                           pclath	equ	0xFFA
  7845                           tblptru	equ	0xFF8
  7846                           tblptrh	equ	0xFF7
  7847                           tblptrl	equ	0xFF6
  7848                           tablat	equ	0xFF5
  7849                           prodl	equ	0xFF3
  7850                           postinc0	equ	0xFEE
  7851                           wreg	equ	0xFE8
  7852                           indf1	equ	0xFE7
  7853                           postdec1	equ	0xFE5
  7854                           fsr1h	equ	0xFE2
  7855                           fsr1l	equ	0xFE1
  7856                           indf2	equ	0xFDF
  7857                           postinc2	equ	0xFDE
  7858                           postdec2	equ	0xFDD
  7859                           plusw2	equ	0xFDB
  7860                           fsr2h	equ	0xFDA
  7861                           fsr2l	equ	0xFD9
  7862                           status	equ	0xFD8
  7863                           
  7864 ;; *************** function _ToSegment *****************
  7865 ;; Defined at:
  7866 ;;		line 284 in file "Library/Types.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  pCHR            1    wreg     unsigned char 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  pCHR            1    0[BANK0 ] unsigned char 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      unsigned char 
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, status,0
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;Total ram usage:        1 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    7
  7887 ;; This function calls:
  7888 ;;		Nothing
  7889 ;; This function is called by:
  7890 ;;		_HMI_SetSegments
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text31
  7895  012822                     __ptext31:
  7896                           	opt stack 0
  7897  012822                     _ToSegment:
  7898                           	opt stack 17
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;incstack = 0
  7902                           ;ToSegment@pCHR stored from wreg
  7903  012822  0100               	movlb	0	; () banked
  7904  012824  6F60               	movwf	ToSegment@pCHR& (0+255),b
  7905                           
  7906                           ;Types.c: 286: switch(pCHR)
  7907  012826  D07E               	goto	l12895
  7908  012828                     l12641:
  7909  012828  0E3F               	movlw	63
  7910  01282A  0012               	return	
  7911  01282C                     l12645:
  7912  01282C  0E06               	movlw	6
  7913  01282E  0012               	return	
  7914  012830                     l12649:
  7915  012830  0E5B               	movlw	91
  7916  012832  0012               	return	
  7917  012834                     l12653:
  7918  012834  0E4F               	movlw	79
  7919  012836  0012               	return	
  7920  012838                     l12657:
  7921  012838  0E66               	movlw	102
  7922  01283A  0012               	return	
  7923  01283C                     l12661:
  7924  01283C  0E6D               	movlw	109
  7925  01283E  0012               	return	
  7926  012840                     l12665:
  7927  012840  0E7D               	movlw	125
  7928  012842  0012               	return	
  7929  012844                     l12669:
  7930  012844  0E07               	movlw	7
  7931  012846  0012               	return	
  7932  012848                     l12673:
  7933  012848  0E7F               	movlw	127
  7934  01284A  0012               	return	
  7935  01284C                     l12677:
  7936  01284C  0E6F               	movlw	111
  7937  01284E  0012               	return	
  7938  012850                     l12681:
  7939  012850  0E5F               	movlw	95
  7940  012852  0012               	return	
  7941  012854                     l12685:
  7942  012854  0E7C               	movlw	124
  7943  012856  0012               	return	
  7944  012858                     l12689:
  7945  012858  0E58               	movlw	88
  7946  01285A  0012               	return	
  7947  01285C                     l12693:
  7948  01285C  0E5E               	movlw	94
  7949  01285E  0012               	return	
  7950  012860                     l12697:
  7951  012860  0E7B               	movlw	123
  7952  012862  0012               	return	
  7953  012864                     l12701:
  7954  012864  0E71               	movlw	113
  7955  012866  0012               	return	
  7956  012868                     l12705:
  7957  012868  0E6F               	movlw	111
  7958  01286A  0012               	return	
  7959  01286C                     l12709:
  7960  01286C  0E74               	movlw	116
  7961  01286E  0012               	return	
  7962  012870                     l12713:
  7963  012870  0E04               	movlw	4
  7964  012872  0012               	return	
  7965  012874                     l12717:
  7966  012874  0E0E               	movlw	14
  7967  012876  0012               	return	
  7968  012878                     l12721:
  7969  012878  0E7A               	movlw	122
  7970  01287A  0012               	return	
  7971  01287C                     l12725:
  7972  01287C  0E06               	movlw	6
  7973  01287E  0012               	return	
  7974  012880                     l12729:
  7975  012880  0E14               	movlw	20
  7976  012882  0012               	return	
  7977  012884                     l12733:
  7978  012884  0E54               	movlw	84
  7979  012886  0012               	return	
  7980  012888                     l12737:
  7981  012888  0E5C               	movlw	92
  7982  01288A  0012               	return	
  7983  01288C                     l12741:
  7984  01288C  0E73               	movlw	115
  7985  01288E  0012               	return	
  7986  012890                     l12745:
  7987  012890  0E67               	movlw	103
  7988  012892  0012               	return	
  7989  012894                     l12749:
  7990  012894  0E50               	movlw	80
  7991  012896  0012               	return	
  7992  012898                     l12753:
  7993  012898  0E6D               	movlw	109
  7994  01289A  0012               	return	
  7995  01289C                     l12757:
  7996  01289C  0E78               	movlw	120
  7997  01289E  0012               	return	
  7998  0128A0                     l12761:
  7999  0128A0  0E1C               	movlw	28
  8000  0128A2  0012               	return	
  8001  0128A4                     l12765:
  8002  0128A4  0E62               	movlw	98
  8003  0128A6  0012               	return	
  8004  0128A8                     l12769:
  8005  0128A8  0E2A               	movlw	42
  8006  0128AA  0012               	return	
  8007  0128AC                     l12773:
  8008  0128AC  0E64               	movlw	100
  8009  0128AE  0012               	return	
  8010  0128B0                     l12777:
  8011  0128B0  0E6E               	movlw	110
  8012  0128B2  0012               	return	
  8013  0128B4                     l12781:
  8014  0128B4  0E5B               	movlw	91
  8015  0128B6  0012               	return	
  8016  0128B8                     l12785:
  8017  0128B8  0E77               	movlw	119
  8018  0128BA  0012               	return	
  8019  0128BC                     l12789:
  8020  0128BC  0E7F               	movlw	127
  8021  0128BE  0012               	return	
  8022  0128C0                     l12793:
  8023  0128C0  0E39               	movlw	57
  8024  0128C2  0012               	return	
  8025  0128C4                     l12797:
  8026  0128C4  0E3F               	movlw	63
  8027  0128C6  0012               	return	
  8028  0128C8                     l12801:
  8029  0128C8  0E79               	movlw	121
  8030  0128CA  0012               	return	
  8031  0128CC                     l12805:
  8032  0128CC  0E71               	movlw	113
  8033  0128CE  0012               	return	
  8034  0128D0                     l12809:
  8035  0128D0  0E3D               	movlw	61
  8036  0128D2  0012               	return	
  8037  0128D4                     l12813:
  8038  0128D4  0E76               	movlw	118
  8039  0128D6  0012               	return	
  8040  0128D8                     l12817:
  8041  0128D8  0E06               	movlw	6
  8042  0128DA  0012               	return	
  8043  0128DC                     l12821:
  8044  0128DC  0E1E               	movlw	30
  8045  0128DE  0012               	return	
  8046  0128E0                     l12825:
  8047  0128E0  0E57               	movlw	87
  8048  0128E2  0012               	return	
  8049  0128E4                     l12829:
  8050  0128E4  0E38               	movlw	56
  8051  0128E6  0012               	return	
  8052  0128E8                     l12833:
  8053  0128E8  0E76               	movlw	118
  8054  0128EA  0012               	return	
  8055  0128EC                     l12837:
  8056  0128EC  0E76               	movlw	118
  8057  0128EE  0012               	return	
  8058  0128F0                     l12841:
  8059  0128F0  0E3F               	movlw	63
  8060  0128F2  0012               	return	
  8061  0128F4                     l12845:
  8062  0128F4  0E73               	movlw	115
  8063  0128F6  0012               	return	
  8064  0128F8                     l12849:
  8065  0128F8  0E3F               	movlw	63
  8066  0128FA  0012               	return	
  8067  0128FC                     l12853:
  8068  0128FC  0E77               	movlw	119
  8069  0128FE  0012               	return	
  8070  012900                     l12857:
  8071  012900  0E6D               	movlw	109
  8072  012902  0012               	return	
  8073  012904                     l12861:
  8074  012904  0E31               	movlw	49
  8075  012906  0012               	return	
  8076  012908                     l12865:
  8077  012908  0E3E               	movlw	62
  8078  01290A  0012               	return	
  8079  01290C                     l12869:
  8080  01290C  0E3E               	movlw	62
  8081  01290E  0012               	return	
  8082  012910                     l12873:
  8083  012910  0E7E               	movlw	126
  8084  012912  0012               	return	
  8085  012914                     l12877:
  8086  012914  0E76               	movlw	118
  8087  012916  0012               	return	
  8088  012918                     l12881:
  8089  012918  0E66               	movlw	102
  8090  01291A  0012               	return	
  8091  01291C                     l12885:
  8092  01291C  0E5B               	movlw	91
  8093  01291E  0012               	return	
  8094  012920                     l12889:
  8095  012920  0E80               	movlw	128
  8096  012922  0012               	return	
  8097  012924                     l12895:
  8098  012924  0100               	movlb	0	; () banked
  8099  012926  5160               	movf	ToSegment@pCHR& (0+255),w,b
  8100                           
  8101                           ; Switch size 1, requested type "space"
  8102                           ; Number of cases is 63, Range of values is 46 to 122
  8103                           ; switch strategies available:
  8104                           ; Name         Instructions Cycles
  8105                           ; simple_byte          190    96 (average)
  8106                           ;	Chosen strategy is simple_byte
  8107  012928  0A2E               	xorlw	46	; case 46
  8108  01292A  B4D8               	btfsc	status,2,c
  8109  01292C  D7F9               	goto	l12889
  8110  01292E  0A1E               	xorlw	30	; case 48
  8111  012930  B4D8               	btfsc	status,2,c
  8112  012932  D77A               	goto	l12641
  8113  012934  0A01               	xorlw	1	; case 49
  8114  012936  B4D8               	btfsc	status,2,c
  8115  012938  D779               	goto	l12645
  8116  01293A  0A03               	xorlw	3	; case 50
  8117  01293C  B4D8               	btfsc	status,2,c
  8118  01293E  D778               	goto	l12649
  8119  012940  0A01               	xorlw	1	; case 51
  8120  012942  B4D8               	btfsc	status,2,c
  8121  012944  D777               	goto	l12653
  8122  012946  0A07               	xorlw	7	; case 52
  8123  012948  B4D8               	btfsc	status,2,c
  8124  01294A  D776               	goto	l12657
  8125  01294C  0A01               	xorlw	1	; case 53
  8126  01294E  B4D8               	btfsc	status,2,c
  8127  012950  D775               	goto	l12661
  8128  012952  0A03               	xorlw	3	; case 54
  8129  012954  B4D8               	btfsc	status,2,c
  8130  012956  D774               	goto	l12665
  8131  012958  0A01               	xorlw	1	; case 55
  8132  01295A  B4D8               	btfsc	status,2,c
  8133  01295C  D773               	goto	l12669
  8134  01295E  0A0F               	xorlw	15	; case 56
  8135  012960  B4D8               	btfsc	status,2,c
  8136  012962  D772               	goto	l12673
  8137  012964  0A01               	xorlw	1	; case 57
  8138  012966  B4D8               	btfsc	status,2,c
  8139  012968  D771               	goto	l12677
  8140  01296A  0A78               	xorlw	120	; case 65
  8141  01296C  B4D8               	btfsc	status,2,c
  8142  01296E  D7A4               	goto	l12785
  8143  012970  0A03               	xorlw	3	; case 66
  8144  012972  B4D8               	btfsc	status,2,c
  8145  012974  D7A3               	goto	l12789
  8146  012976  0A01               	xorlw	1	; case 67
  8147  012978  B4D8               	btfsc	status,2,c
  8148  01297A  D7A2               	goto	l12793
  8149  01297C  0A07               	xorlw	7	; case 68
  8150  01297E  B4D8               	btfsc	status,2,c
  8151  012980  D7A1               	goto	l12797
  8152  012982  0A01               	xorlw	1	; case 69
  8153  012984  B4D8               	btfsc	status,2,c
  8154  012986  D7A0               	goto	l12801
  8155  012988  0A03               	xorlw	3	; case 70
  8156  01298A  B4D8               	btfsc	status,2,c
  8157  01298C  D79F               	goto	l12805
  8158  01298E  0A01               	xorlw	1	; case 71
  8159  012990  B4D8               	btfsc	status,2,c
  8160  012992  D79E               	goto	l12809
  8161  012994  0A0F               	xorlw	15	; case 72
  8162  012996  B4D8               	btfsc	status,2,c
  8163  012998  D79D               	goto	l12813
  8164  01299A  0A01               	xorlw	1	; case 73
  8165  01299C  B4D8               	btfsc	status,2,c
  8166  01299E  D79C               	goto	l12817
  8167  0129A0  0A03               	xorlw	3	; case 74
  8168  0129A2  B4D8               	btfsc	status,2,c
  8169  0129A4  D79B               	goto	l12821
  8170  0129A6  0A01               	xorlw	1	; case 75
  8171  0129A8  B4D8               	btfsc	status,2,c
  8172  0129AA  D79A               	goto	l12825
  8173  0129AC  0A07               	xorlw	7	; case 76
  8174  0129AE  B4D8               	btfsc	status,2,c
  8175  0129B0  D799               	goto	l12829
  8176  0129B2  0A01               	xorlw	1	; case 77
  8177  0129B4  B4D8               	btfsc	status,2,c
  8178  0129B6  D798               	goto	l12833
  8179  0129B8  0A03               	xorlw	3	; case 78
  8180  0129BA  B4D8               	btfsc	status,2,c
  8181  0129BC  D797               	goto	l12837
  8182  0129BE  0A01               	xorlw	1	; case 79
  8183  0129C0  B4D8               	btfsc	status,2,c
  8184  0129C2  D796               	goto	l12841
  8185  0129C4  0A1F               	xorlw	31	; case 80
  8186  0129C6  B4D8               	btfsc	status,2,c
  8187  0129C8  D795               	goto	l12845
  8188  0129CA  0A01               	xorlw	1	; case 81
  8189  0129CC  B4D8               	btfsc	status,2,c
  8190  0129CE  D794               	goto	l12849
  8191  0129D0  0A03               	xorlw	3	; case 82
  8192  0129D2  B4D8               	btfsc	status,2,c
  8193  0129D4  D793               	goto	l12853
  8194  0129D6  0A01               	xorlw	1	; case 83
  8195  0129D8  B4D8               	btfsc	status,2,c
  8196  0129DA  D792               	goto	l12857
  8197  0129DC  0A07               	xorlw	7	; case 84
  8198  0129DE  B4D8               	btfsc	status,2,c
  8199  0129E0  D791               	goto	l12861
  8200  0129E2  0A01               	xorlw	1	; case 85
  8201  0129E4  B4D8               	btfsc	status,2,c
  8202  0129E6  D790               	goto	l12865
  8203  0129E8  0A03               	xorlw	3	; case 86
  8204  0129EA  B4D8               	btfsc	status,2,c
  8205  0129EC  D78F               	goto	l12869
  8206  0129EE  0A01               	xorlw	1	; case 87
  8207  0129F0  B4D8               	btfsc	status,2,c
  8208  0129F2  D78E               	goto	l12873
  8209  0129F4  0A0F               	xorlw	15	; case 88
  8210  0129F6  B4D8               	btfsc	status,2,c
  8211  0129F8  D78D               	goto	l12877
  8212  0129FA  0A01               	xorlw	1	; case 89
  8213  0129FC  B4D8               	btfsc	status,2,c
  8214  0129FE  D78C               	goto	l12881
  8215  012A00  0A03               	xorlw	3	; case 90
  8216  012A02  B4D8               	btfsc	status,2,c
  8217  012A04  D78B               	goto	l12885
  8218  012A06  0A3B               	xorlw	59	; case 97
  8219  012A08  B4D8               	btfsc	status,2,c
  8220  012A0A  D722               	goto	l12681
  8221  012A0C  0A03               	xorlw	3	; case 98
  8222  012A0E  B4D8               	btfsc	status,2,c
  8223  012A10  D721               	goto	l12685
  8224  012A12  0A01               	xorlw	1	; case 99
  8225  012A14  B4D8               	btfsc	status,2,c
  8226  012A16  D720               	goto	l12689
  8227  012A18  0A07               	xorlw	7	; case 100
  8228  012A1A  B4D8               	btfsc	status,2,c
  8229  012A1C  D71F               	goto	l12693
  8230  012A1E  0A01               	xorlw	1	; case 101
  8231  012A20  B4D8               	btfsc	status,2,c
  8232  012A22  D71E               	goto	l12697
  8233  012A24  0A03               	xorlw	3	; case 102
  8234  012A26  B4D8               	btfsc	status,2,c
  8235  012A28  D71D               	goto	l12701
  8236  012A2A  0A01               	xorlw	1	; case 103
  8237  012A2C  B4D8               	btfsc	status,2,c
  8238  012A2E  D71C               	goto	l12705
  8239  012A30  0A0F               	xorlw	15	; case 104
  8240  012A32  B4D8               	btfsc	status,2,c
  8241  012A34  D71B               	goto	l12709
  8242  012A36  0A01               	xorlw	1	; case 105
  8243  012A38  B4D8               	btfsc	status,2,c
  8244  012A3A  D71A               	goto	l12713
  8245  012A3C  0A03               	xorlw	3	; case 106
  8246  012A3E  B4D8               	btfsc	status,2,c
  8247  012A40  D719               	goto	l12717
  8248  012A42  0A01               	xorlw	1	; case 107
  8249  012A44  B4D8               	btfsc	status,2,c
  8250  012A46  D718               	goto	l12721
  8251  012A48  0A07               	xorlw	7	; case 108
  8252  012A4A  B4D8               	btfsc	status,2,c
  8253  012A4C  D717               	goto	l12725
  8254  012A4E  0A01               	xorlw	1	; case 109
  8255  012A50  B4D8               	btfsc	status,2,c
  8256  012A52  D716               	goto	l12729
  8257  012A54  0A03               	xorlw	3	; case 110
  8258  012A56  B4D8               	btfsc	status,2,c
  8259  012A58  D715               	goto	l12733
  8260  012A5A  0A01               	xorlw	1	; case 111
  8261  012A5C  B4D8               	btfsc	status,2,c
  8262  012A5E  D714               	goto	l12737
  8263  012A60  0A1F               	xorlw	31	; case 112
  8264  012A62  B4D8               	btfsc	status,2,c
  8265  012A64  D713               	goto	l12741
  8266  012A66  0A01               	xorlw	1	; case 113
  8267  012A68  B4D8               	btfsc	status,2,c
  8268  012A6A  D712               	goto	l12745
  8269  012A6C  0A03               	xorlw	3	; case 114
  8270  012A6E  B4D8               	btfsc	status,2,c
  8271  012A70  D711               	goto	l12749
  8272  012A72  0A01               	xorlw	1	; case 115
  8273  012A74  B4D8               	btfsc	status,2,c
  8274  012A76  D710               	goto	l12753
  8275  012A78  0A07               	xorlw	7	; case 116
  8276  012A7A  B4D8               	btfsc	status,2,c
  8277  012A7C  D70F               	goto	l12757
  8278  012A7E  0A01               	xorlw	1	; case 117
  8279  012A80  B4D8               	btfsc	status,2,c
  8280  012A82  D70E               	goto	l12761
  8281  012A84  0A03               	xorlw	3	; case 118
  8282  012A86  B4D8               	btfsc	status,2,c
  8283  012A88  D70D               	goto	l12765
  8284  012A8A  0A01               	xorlw	1	; case 119
  8285  012A8C  B4D8               	btfsc	status,2,c
  8286  012A8E  D70C               	goto	l12769
  8287  012A90  0A0F               	xorlw	15	; case 120
  8288  012A92  B4D8               	btfsc	status,2,c
  8289  012A94  D70B               	goto	l12773
  8290  012A96  0A01               	xorlw	1	; case 121
  8291  012A98  B4D8               	btfsc	status,2,c
  8292  012A9A  D70A               	goto	l12777
  8293  012A9C  0A03               	xorlw	3	; case 122
  8294  012A9E  B4D8               	btfsc	status,2,c
  8295  012AA0  D709               	goto	l12781
  8296                           
  8297                           ;Types.c: 354: return 0;
  8298                           
  8299                           ; BSR set to: 0
  8300  012AA2  0E00               	movlw	0
  8301  012AA4  0012               	return	
  8302  012AA6                     __end_of_ToSegment:
  8303                           	opt stack 0
  8304                           tosu	equ	0xFFF
  8305                           tosh	equ	0xFFE
  8306                           tosl	equ	0xFFD
  8307                           pclath	equ	0xFFA
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodl	equ	0xFF3
  8313                           postinc0	equ	0xFEE
  8314                           wreg	equ	0xFE8
  8315                           indf1	equ	0xFE7
  8316                           postdec1	equ	0xFE5
  8317                           fsr1h	equ	0xFE2
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           plusw2	equ	0xFDB
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _HMI_SetButton *****************
  8328 ;; Defined at:
  8329 ;;		line 186 in file "HMI.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  pValue          1    wreg     unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  pValue          1    6[BANK0 ] unsigned char 
  8334 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  8335 ;;  v               1    7[BANK0 ] unsigned char 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      void 
  8338 ;; Registers used:
  8339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;Total ram usage:        8 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    7
  8352 ;; This function calls:
  8353 ;;		Nothing
  8354 ;; This function is called by:
  8355 ;;		_Event_TestButton
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text32
  8360  016652                     __ptext32:
  8361                           	opt stack 0
  8362  016652                     _HMI_SetButton:
  8363                           	opt stack 19
  8364                           
  8365                           ;incstack = 0
  8366                           ;HMI_SetButton@pValue stored from wreg
  8367  016652  0100               	movlb	0	; () banked
  8368  016654  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
  8369                           
  8370                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  8371  016656  0EC6               	movlw	low HMI_SetButton@F7213
  8372  016658  6EF6               	movwf	tblptrl,c
  8373  01665A                     	if	1	;There is more than 1 active tblptr byte
  8374  01665A  0EFC               	movlw	high HMI_SetButton@F7213
  8375  01665C  6EF7               	movwf	tblptrh,c
  8376  01665E                     	endif
  8377  01665E                     	if	1	;There are 3 active tblptr bytes
  8378  01665E  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
  8379  016660  6EF8               	movwf	tblptru,c
  8380  016662                     	endif
  8381  016662  0009               	tblrd		*+
  8382  016664  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
  8383  016668  0009               	tblrd		*+
  8384  01666A  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
  8385  01666E  0009               	tblrd		*+
  8386  016670  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
  8387  016674  000A               	tblrd		*-
  8388  016676  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
  8389                           
  8390                           ;HMI.c: 189: UINT8 v = 0b00010001;
  8391  01667A  0E11               	movlw	17
  8392  01667C  0100               	movlb	0	; () banked
  8393  01667E  6F67               	movwf	HMI_SetButton@v& (0+255),b
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;HMI.c: 190: pValue &= 3;
  8397  016680  0E03               	movlw	3
  8398  016682  0100               	movlb	0	; () banked
  8399  016684  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;HMI.c: 191: v = v << reindex[pValue];
  8403  016686  0100               	movlb	0	; () banked
  8404  016688  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
  8405  01668A  0D01               	mullw	1
  8406  01668C  0E62               	movlw	low HMI_SetButton@reindex
  8407  01668E  24F3               	addwf	prodl,w,c
  8408  016690  6ED9               	movwf	fsr2l,c
  8409  016692  0E00               	movlw	high HMI_SetButton@reindex
  8410  016694  20F4               	addwfc	prodh,w,c
  8411  016696  6EDA               	movwf	fsr2h,c
  8412  016698  50DF               	movf	indf2,w,c
  8413  01669A  0100               	movlb	0	; () banked
  8414  01669C  6F60               	movwf	??_HMI_SetButton& (0+255),b
  8415  01669E  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  8416  0166A2  0100               	movlb	0	; () banked
  8417  0166A4  2B60               	incf	??_HMI_SetButton& (0+255),f,b
  8418  0166A6  D003               	goto	u10884
  8419  0166A8                     u10885:
  8420  0166A8  0100               	movlb	0	; () banked
  8421  0166AA  90D8               	bcf	status,0,c
  8422  0166AC  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  8423  0166AE                     u10884:
  8424  0166AE  0100               	movlb	0	; () banked
  8425  0166B0  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
  8426  0166B2  D7FA               	goto	u10885
  8427  0166B4  0100               	movlb	0	; () banked
  8428  0166B6  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  8429  0166B8  0100               	movlb	0	; () banked
  8430  0166BA  6F67               	movwf	HMI_SetButton@v& (0+255),b
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;HMI.c: 192: v = v >> 4;
  8434  0166BC  0100               	movlb	0	; () banked
  8435  0166BE  3967               	swapf	HMI_SetButton@v& (0+255),w,b
  8436  0166C0  0B0F               	andlw	15
  8437  0166C2  0100               	movlb	0	; () banked
  8438  0166C4  6F67               	movwf	HMI_SetButton@v& (0+255),b
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;HMI.c: 193: v = v & 0x0F;
  8442  0166C6  0100               	movlb	0	; () banked
  8443  0166C8  5167               	movf	HMI_SetButton@v& (0+255),w,b
  8444  0166CA  0B0F               	andlw	15
  8445  0166CC  0100               	movlb	0	; () banked
  8446  0166CE  6F67               	movwf	HMI_SetButton@v& (0+255),b
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;HMI.c: 194: HMIBoard.pButton = v;
  8450  0166D0  0101               	movlb	1	; () banked
  8451  0166D2  512F               	movf	(_HMIBoard+6)& (0+255),w,b
  8452  0166D4  0100               	movlb	0	; () banked
  8453  0166D6  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
  8454  0166D8  0BF0               	andlw	-16
  8455  0166DA  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
  8456  0166DC  0101               	movlb	1	; () banked
  8457  0166DE  6F2F               	movwf	(_HMIBoard+6)& (0+255),b
  8458                           
  8459                           ; BSR set to: 1
  8460  0166E0  0012               	return		;funcret
  8461  0166E2                     __end_of_HMI_SetButton:
  8462                           	opt stack 0
  8463                           tosu	equ	0xFFF
  8464                           tosh	equ	0xFFE
  8465                           tosl	equ	0xFFD
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           postinc0	equ	0xFEE
  8474                           wreg	equ	0xFE8
  8475                           indf1	equ	0xFE7
  8476                           postdec1	equ	0xFE5
  8477                           fsr1h	equ	0xFE2
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           plusw2	equ	0xFDB
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function _HMI_SetBar *****************
  8488 ;; Defined at:
  8489 ;;		line 205 in file "HMI.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  pValue          1    wreg     unsigned char 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  pValue          1    0[BANK0 ] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;Total ram usage:        1 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    7
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_Event_DIPSwitch
  8514 ;;		_Event_HMI_DIPSwitch
  8515 ;;		_Event_HMI_LeftButton
  8516 ;;		_Event_HMI_RightButton
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text33
  8521  017FAC                     __ptext33:
  8522                           	opt stack 0
  8523  017FAC                     _HMI_SetBar:
  8524                           	opt stack 19
  8525                           
  8526                           ; BSR set to: 1
  8527                           ;incstack = 0
  8528                           ;HMI_SetBar@pValue stored from wreg
  8529  017FAC  0100               	movlb	0	; () banked
  8530  017FAE  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
  8531                           
  8532                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  8533  017FB0  C060  F130         	movff	HMI_SetBar@pValue,_HMIBoard+7
  8534  017FB4  0012               	return		;funcret
  8535  017FB6                     __end_of_HMI_SetBar:
  8536                           	opt stack 0
  8537                           tosu	equ	0xFFF
  8538                           tosh	equ	0xFFE
  8539                           tosl	equ	0xFFD
  8540                           pclath	equ	0xFFA
  8541                           tblptru	equ	0xFF8
  8542                           tblptrh	equ	0xFF7
  8543                           tblptrl	equ	0xFF6
  8544                           tablat	equ	0xFF5
  8545                           prodh	equ	0xFF4
  8546                           prodl	equ	0xFF3
  8547                           postinc0	equ	0xFEE
  8548                           wreg	equ	0xFE8
  8549                           indf1	equ	0xFE7
  8550                           postdec1	equ	0xFE5
  8551                           fsr1h	equ	0xFE2
  8552                           fsr1l	equ	0xFE1
  8553                           indf2	equ	0xFDF
  8554                           postinc2	equ	0xFDE
  8555                           postdec2	equ	0xFDD
  8556                           plusw2	equ	0xFDB
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function _HMI_GetBar *****************
  8562 ;; Defined at:
  8563 ;;		line 209 in file "HMI.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;		None
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;		None
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  1    wreg      unsigned char 
  8570 ;; Registers used:
  8571 ;;		wreg, status,2
  8572 ;; Tracked objects:
  8573 ;;		On entry : 0/0
  8574 ;;		On exit  : 0/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;Total ram usage:        0 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; Hardware stack levels required when called:    7
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		_Event_DIPSwitch
  8588 ;;		_Event_HMI_DIPSwitch
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text34
  8593  017FDA                     __ptext34:
  8594                           	opt stack 0
  8595  017FDA                     _HMI_GetBar:
  8596                           	opt stack 19
  8597                           
  8598                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  8599                           
  8600                           ;incstack = 0
  8601  017FDA  0101               	movlb	1	; () banked
  8602  017FDC  5130               	movf	(_HMIBoard+7)& (0+255),w,b
  8603  017FDE  0012               	return	
  8604  017FE0                     __end_of_HMI_GetBar:
  8605                           	opt stack 0
  8606                           tosu	equ	0xFFF
  8607                           tosh	equ	0xFFE
  8608                           tosl	equ	0xFFD
  8609                           pclath	equ	0xFFA
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           postinc0	equ	0xFEE
  8617                           wreg	equ	0xFE8
  8618                           indf1	equ	0xFE7
  8619                           postdec1	equ	0xFE5
  8620                           fsr1h	equ	0xFE2
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           plusw2	equ	0xFDB
  8626                           fsr2h	equ	0xFDA
  8627                           fsr2l	equ	0xFD9
  8628                           status	equ	0xFD8
  8629                           
  8630 ;; *************** function _FunctADC *****************
  8631 ;; Defined at:
  8632 ;;		line 57 in file "Functions.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;Total ram usage:        0 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    9
  8653 ;; This function calls:
  8654 ;;		_ADC_Start
  8655 ;; This function is called by:
  8656 ;;		_inputVar
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           	psect	text35
  8661  017F12                     __ptext35:
  8662                           	opt stack 0
  8663  017F12                     _FunctADC:
  8664                           	opt stack 20
  8665                           
  8666                           ;Functions.c: 58: ADC_Start(&ADC_AN0);
  8667                           
  8668                           ; BSR set to: 1
  8669                           ;incstack = 0
  8670  017F12  0EDF               	movlw	low _ADC_AN0
  8671  017F14  0100               	movlb	0	; () banked
  8672  017F16  6F62               	movwf	ADC_Start@pInput& (0+255),b
  8673  017F18  0E01               	movlw	high _ADC_AN0
  8674  017F1A  0100               	movlb	0	; () banked
  8675  017F1C  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  8676  017F1E  EC83  F0B4         	call	_ADC_Start	;wreg free
  8677  017F22  0012               	return		;funcret
  8678  017F24                     __end_of_FunctADC:
  8679                           	opt stack 0
  8680                           tosu	equ	0xFFF
  8681                           tosh	equ	0xFFE
  8682                           tosl	equ	0xFFD
  8683                           pclath	equ	0xFFA
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           prodh	equ	0xFF4
  8689                           prodl	equ	0xFF3
  8690                           postinc0	equ	0xFEE
  8691                           wreg	equ	0xFE8
  8692                           indf1	equ	0xFE7
  8693                           postdec1	equ	0xFE5
  8694                           fsr1h	equ	0xFE2
  8695                           fsr1l	equ	0xFE1
  8696                           indf2	equ	0xFDF
  8697                           postinc2	equ	0xFDE
  8698                           postdec2	equ	0xFDD
  8699                           plusw2	equ	0xFDB
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function _ADC_Start *****************
  8705 ;; Defined at:
  8706 ;;		line 114 in file "Library/ADC.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  pInput          2    2[BANK0 ] PTR struct ADC
  8709 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
  8710 ;;		 -> NULL(0), 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8722 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;Total ram usage:        4 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    8
  8729 ;; This function calls:
  8730 ;;		_ADC_Off
  8731 ;;		_ADC_On
  8732 ;;		_ADC_SetChannel
  8733 ;; This function is called by:
  8734 ;;		_FunctADC
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text36
  8739  016906                     __ptext36:
  8740                           	opt stack 0
  8741  016906                     _ADC_Start:
  8742                           	opt stack 20
  8743                           
  8744                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
  8745                           
  8746                           ;incstack = 0
  8747  016906  B2C2               	btfsc	4034,1,c	;volatile
  8748  016908  0012               	return	
  8749  01690A                     l14623:
  8750                           
  8751                           ;ADC.c: 128: {
  8752                           ;ADC.c: 129: ADC_Off();
  8753  01690A  ECE9  F0BF         	call	_ADC_Off	;wreg free
  8754                           
  8755                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
  8756  01690E  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
  8757  016912  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
  8758  016916  50DF               	movf	indf2,w,c
  8759  016918  ECF8  F0BE         	call	_ADC_SetChannel
  8760                           
  8761                           ;ADC.c: 131: ADC_On();
  8762  01691C  ECF6  F0BF         	call	_ADC_On	;wreg free
  8763                           
  8764                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
  8765  016920  82C2               	bsf	4034,1,c	;volatile
  8766  016922                     l1279:
  8767  016922  B2C2               	btfsc	4034,1,c	;volatile
  8768  016924  D7FE               	goto	l1279
  8769                           
  8770                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
  8771  016926  50C3               	movf	4035,w,c	;volatile
  8772  016928  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
  8773  01692C  0100               	movlb	0	; () banked
  8774  01692E  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
  8775  016930  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
  8776  016934  0100               	movlb	0	; () banked
  8777  016936  6B64               	clrf	??_ADC_Start& (0+255),b
  8778  016938  0100               	movlb	0	; () banked
  8779  01693A  1364               	iorwf	??_ADC_Start& (0+255),f,b
  8780  01693C  0E00               	movlw	0
  8781  01693E  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
  8782  016940  0100               	movlb	0	; () banked
  8783  016942  EE20 F001          	lfsr	2,1
  8784  016946  5162               	movf	ADC_Start@pInput& (0+255),w,b
  8785  016948  26D9               	addwf	fsr2l,f,c
  8786  01694A  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  8787  01694C  22DA               	addwfc	fsr2h,f,c
  8788  01694E  C064  FFDE         	movff	??_ADC_Start,postinc2
  8789  016952  C065  FFDD         	movff	??_ADC_Start+1,postdec2
  8790                           
  8791                           ;ADC.c: 141: if (pInput->mNext == 0)
  8792  016956  0100               	movlb	0	; () banked
  8793  016958  EE20 F003          	lfsr	2,3
  8794  01695C  5162               	movf	ADC_Start@pInput& (0+255),w,b
  8795  01695E  26D9               	addwf	fsr2l,f,c
  8796  016960  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  8797  016962  22DA               	addwfc	fsr2h,f,c
  8798  016964  50DE               	movf	postinc2,w,c
  8799  016966  10DE               	iorwf	postinc2,w,c
  8800  016968  B4D8               	btfsc	status,2,c
  8801  01696A  D00C               	goto	l14637
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;ADC.c: 145: pInput = pInput->mNext;
  8805                           
  8806                           ; BSR set to: 0
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;ADC.c: 142: break;
  8810  01696C  0100               	movlb	0	; () banked
  8811  01696E  EE20 F003          	lfsr	2,3
  8812  016972  5162               	movf	ADC_Start@pInput& (0+255),w,b
  8813  016974  26D9               	addwf	fsr2l,f,c
  8814  016976  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  8815  016978  22DA               	addwfc	fsr2h,f,c
  8816  01697A  CFDE F062          	movff	postinc2,ADC_Start@pInput
  8817  01697E  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
  8818                           
  8819                           ;ADC.c: 146: }
  8820  016982  D7C3               	goto	l14623
  8821  016984                     l14637:
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;ADC.c: 147: ADC_Off();
  8825  016984  ECE9  F0BF         	call	_ADC_Off	;wreg free
  8826  016988  0012               	return		;funcret
  8827  01698A                     __end_of_ADC_Start:
  8828                           	opt stack 0
  8829                           tosu	equ	0xFFF
  8830                           tosh	equ	0xFFE
  8831                           tosl	equ	0xFFD
  8832                           pclath	equ	0xFFA
  8833                           tblptru	equ	0xFF8
  8834                           tblptrh	equ	0xFF7
  8835                           tblptrl	equ	0xFF6
  8836                           tablat	equ	0xFF5
  8837                           prodh	equ	0xFF4
  8838                           prodl	equ	0xFF3
  8839                           postinc0	equ	0xFEE
  8840                           wreg	equ	0xFE8
  8841                           indf1	equ	0xFE7
  8842                           postdec1	equ	0xFE5
  8843                           fsr1h	equ	0xFE2
  8844                           fsr1l	equ	0xFE1
  8845                           indf2	equ	0xFDF
  8846                           postinc2	equ	0xFDE
  8847                           postdec2	equ	0xFDD
  8848                           plusw2	equ	0xFDB
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8
  8852                           
  8853 ;; *************** function _initialise *****************
  8854 ;; Defined at:
  8855 ;;		line 64 in file "main.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;		None
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;		None
  8860 ;; Return value:  Size  Location     Type
  8861 ;;                  1    wreg      void 
  8862 ;; Registers used:
  8863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;Total ram usage:        0 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:   17
  8876 ;; This function calls:
  8877 ;;		_Console_Init
  8878 ;;		_FunctInitADC
  8879 ;;		_FunctInitButton
  8880 ;;		_HMI_Init
  8881 ;;		_ISR_Enable
  8882 ;;		_LCD_Init
  8883 ;;		_MXK_BlockSwitchTo
  8884 ;;		_MXK_Dequeue
  8885 ;;		_MXK_Init
  8886 ;;		_MXK_Release
  8887 ;;		_Motor_Init
  8888 ;; This function is called by:
  8889 ;;		_main
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text37
  8894  017060                     __ptext37:
  8895                           	opt stack 0
  8896  017060                     _initialise:
  8897                           	opt stack 13
  8898                           
  8899                           ;main.c: 66: MXK_Init();
  8900                           
  8901                           ;incstack = 0
  8902  017060  EC22  F0A2         	call	_MXK_Init	;wreg free
  8903                           
  8904                           ;main.c: 69: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  8905  017064  0E01               	movlw	1
  8906  017066  EC29  F0BC         	call	_MXK_BlockSwitchTo
  8907  01706A  0900               	iorlw	0
  8908  01706C  B4D8               	btfsc	status,2,c
  8909  01706E  D00C               	goto	l17021
  8910                           
  8911                           ;main.c: 70: HMI_Init();
  8912  017070  ECAF  F09A         	call	_HMI_Init	;wreg free
  8913                           
  8914                           ;main.c: 71: LCD_Init();
  8915  017074  ECDF  F0A2         	call	_LCD_Init	;wreg free
  8916                           
  8917                           ;main.c: 72: Console_Init();
  8918  017078  EC40  F0B4         	call	_Console_Init	;wreg free
  8919                           
  8920                           ;main.c: 73: if (MXK_Release())
  8921  01707C  EC74  F0BF         	call	_MXK_Release	;wreg free
  8922  017080  0900               	iorlw	0
  8923  017082  A4D8               	btfss	status,2,c
  8924                           
  8925                           ;main.c: 74: MXK_Dequeue();
  8926  017084  EC7D  F0BD         	call	_MXK_Dequeue	;wreg free
  8927  017088                     l17021:
  8928                           
  8929                           ;main.c: 75: }
  8930                           ;main.c: 77: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  8931  017088  0E08               	movlw	8
  8932  01708A  EC29  F0BC         	call	_MXK_BlockSwitchTo
  8933  01708E  0900               	iorlw	0
  8934  017090  B4D8               	btfsc	status,2,c
  8935  017092  D013               	goto	l17029
  8936                           
  8937                           ;main.c: 78: Motor_Init(&Stepper, 0b1000);
  8938  017094  0EF4               	movlw	low _Stepper
  8939  017096  0100               	movlb	0	; () banked
  8940  017098  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
  8941  01709A  0E00               	movlw	high _Stepper
  8942  01709C  0100               	movlb	0	; () banked
  8943  01709E  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  8944  0170A0  0E00               	movlw	0
  8945  0170A2  0100               	movlb	0	; () banked
  8946  0170A4  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  8947  0170A6  0E08               	movlw	8
  8948  0170A8  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
  8949  0170AA  ECBD  F0A9         	call	_Motor_Init	;wreg free
  8950                           
  8951                           ;main.c: 79: if (MXK_Release())
  8952  0170AE  EC74  F0BF         	call	_MXK_Release	;wreg free
  8953  0170B2  0900               	iorlw	0
  8954  0170B4  A4D8               	btfss	status,2,c
  8955                           
  8956                           ;main.c: 80: MXK_Dequeue();
  8957  0170B6  EC7D  F0BD         	call	_MXK_Dequeue	;wreg free
  8958  0170BA                     l17029:
  8959                           
  8960                           ;main.c: 81: }
  8961                           ;main.c: 83: ISR_Enable();
  8962  0170BA  ECDB  F0BF         	call	_ISR_Enable	;wreg free
  8963                           
  8964                           ;main.c: 84: FunctInitADC();
  8965  0170BE  ECB5  F0AE         	call	_FunctInitADC	;wreg free
  8966                           
  8967                           ;main.c: 85: FunctInitButton();
  8968  0170C2  EC57  F0B1         	call	_FunctInitButton	;wreg free
  8969  0170C6  0012               	return		;funcret
  8970  0170C8                     __end_of_initialise:
  8971                           	opt stack 0
  8972                           tosu	equ	0xFFF
  8973                           tosh	equ	0xFFE
  8974                           tosl	equ	0xFFD
  8975                           pclath	equ	0xFFA
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           postinc0	equ	0xFEE
  8983                           wreg	equ	0xFE8
  8984                           indf1	equ	0xFE7
  8985                           postdec1	equ	0xFE5
  8986                           fsr1h	equ	0xFE2
  8987                           fsr1l	equ	0xFE1
  8988                           indf2	equ	0xFDF
  8989                           postinc2	equ	0xFDE
  8990                           postdec2	equ	0xFDD
  8991                           plusw2	equ	0xFDB
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996 ;; *************** function _Motor_Init *****************
  8997 ;; Defined at:
  8998 ;;		line 26 in file "Library/Motor.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  9001 ;;		 -> Stepper(6), 
  9002 ;;  pAddress        2   47[BANK0 ] unsigned short 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;		None
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9014 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;Total ram usage:        4 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:   12
  9021 ;; This function calls:
  9022 ;;		_Port_SetPin
  9023 ;;		_Port_SetPinType
  9024 ;;		_Timer0_Init
  9025 ;; This function is called by:
  9026 ;;		_initialise
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text38
  9031  01537A                     __ptext38:
  9032                           	opt stack 0
  9033  01537A                     _Motor_Init:
  9034                           	opt stack 17
  9035                           
  9036                           ;Motor.c: 28: pMotor->mDelta = 0;
  9037                           
  9038                           ;incstack = 0
  9039  01537A  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
  9040  01537E  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  9041  015382  0E00               	movlw	0
  9042  015384  6EDE               	movwf	postinc2,c
  9043  015386  0E00               	movlw	0
  9044  015388  6EDD               	movwf	postdec2,c
  9045                           
  9046                           ;Motor.c: 29: pMotor->mFrequency = 0;
  9047  01538A  0100               	movlb	0	; () banked
  9048  01538C  EE20 F002          	lfsr	2,2
  9049  015390  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  9050  015392  26D9               	addwf	fsr2l,f,c
  9051  015394  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9052  015396  22DA               	addwfc	fsr2h,f,c
  9053  015398  0E00               	movlw	0
  9054  01539A  6EDE               	movwf	postinc2,c
  9055  01539C  0E00               	movlw	0
  9056  01539E  6EDD               	movwf	postdec2,c
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  9060  0153A0  0100               	movlb	0	; () banked
  9061  0153A2  EE20 F004          	lfsr	2,4
  9062  0153A6  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  9063  0153A8  26D9               	addwf	fsr2l,f,c
  9064  0153AA  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9065  0153AC  22DA               	addwfc	fsr2h,f,c
  9066  0153AE  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
  9067  0153B2  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  9071  0153B6  0E97               	movlw	low _PortE
  9072  0153B8  0100               	movlb	0	; () banked
  9073  0153BA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9074  0153BC  0E01               	movlw	high _PortE
  9075  0153BE  0100               	movlb	0	; () banked
  9076  0153C0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9077  0153C2  0E00               	movlw	0
  9078  0153C4  0100               	movlb	0	; () banked
  9079  0153C6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9080  0153C8  0E03               	movlw	3
  9081  0153CA  0100               	movlb	0	; () banked
  9082  0153CC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9083  0153CE  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9084                           
  9085                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  9086  0153D2  0E97               	movlw	low _PortE
  9087  0153D4  0100               	movlb	0	; () banked
  9088  0153D6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9089  0153D8  0E01               	movlw	high _PortE
  9090  0153DA  0100               	movlb	0	; () banked
  9091  0153DC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9092  0153DE  0E01               	movlw	1
  9093  0153E0  0100               	movlb	0	; () banked
  9094  0153E2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9095  0153E4  0E03               	movlw	3
  9096  0153E6  0100               	movlb	0	; () banked
  9097  0153E8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9098  0153EA  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9099                           
  9100                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  9101  0153EE  0E97               	movlw	low _PortE
  9102  0153F0  0100               	movlb	0	; () banked
  9103  0153F2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9104  0153F4  0E01               	movlw	high _PortE
  9105  0153F6  0100               	movlb	0	; () banked
  9106  0153F8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9107  0153FA  0E00               	movlw	0
  9108  0153FC  0100               	movlb	0	; () banked
  9109  0153FE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9110  015400  0E00               	movlw	0
  9111  015402  0100               	movlb	0	; () banked
  9112  015404  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9113  015406  ECC8  F0AB         	call	_Port_SetPin	;wreg free
  9114                           
  9115                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  9116  01540A  0E97               	movlw	low _PortE
  9117  01540C  0100               	movlb	0	; () banked
  9118  01540E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9119  015410  0E01               	movlw	high _PortE
  9120  015412  0100               	movlb	0	; () banked
  9121  015414  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9122  015416  0E01               	movlw	1
  9123  015418  0100               	movlb	0	; () banked
  9124  01541A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9125  01541C  0E00               	movlw	0
  9126  01541E  0100               	movlb	0	; () banked
  9127  015420  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9128  015422  ECC8  F0AB         	call	_Port_SetPin	;wreg free
  9129                           
  9130                           ;Motor.c: 38: lStepFunction = Motor_Step;
  9131  015426  0E84               	movlw	low _Motor_Step
  9132  015428  0100               	movlb	0	; () banked
  9133  01542A  6FCD               	movwf	_lStepFunction& (0+255),b
  9134  01542C  0E4D               	movlw	high _Motor_Step
  9135  01542E  0100               	movlb	0	; () banked
  9136  015430  6FCE               	movwf	(_lStepFunction+1)& (0+255),b
  9137  015432  0E01               	movlw	low (_Motor_Step shr (0+16))
  9138  015434  0100               	movlb	0	; () banked
  9139  015436  6FCF               	movwf	(_lStepFunction+2)& (0+255),b
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;Motor.c: 39: Timer0_Init(1000);
  9143  015438  0EE8               	movlw	232
  9144  01543A  0100               	movlb	0	; () banked
  9145  01543C  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
  9146  01543E  0E03               	movlw	3
  9147  015440  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  9148  015442  0E00               	movlw	0
  9149  015444  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  9150  015446  0E00               	movlw	0
  9151  015448  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  9152  01544A  EC4B  F0A4         	call	_Timer0_Init	;wreg free
  9153  01544E  0012               	return		;funcret
  9154  015450                     __end_of_Motor_Init:
  9155                           	opt stack 0
  9156                           tosu	equ	0xFFF
  9157                           tosh	equ	0xFFE
  9158                           tosl	equ	0xFFD
  9159                           pclath	equ	0xFFA
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           postinc0	equ	0xFEE
  9167                           wreg	equ	0xFE8
  9168                           indf1	equ	0xFE7
  9169                           postdec1	equ	0xFE5
  9170                           fsr1h	equ	0xFE2
  9171                           fsr1l	equ	0xFE1
  9172                           indf2	equ	0xFDF
  9173                           postinc2	equ	0xFDE
  9174                           postdec2	equ	0xFDD
  9175                           plusw2	equ	0xFDB
  9176                           fsr2h	equ	0xFDA
  9177                           fsr2l	equ	0xFD9
  9178                           status	equ	0xFD8
  9179                           
  9180 ;; *************** function _MXK_Init *****************
  9181 ;; Defined at:
  9182 ;;		line 33 in file "Library/MXK.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      void 
  9189 ;; Registers used:
  9190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;Total ram usage:        0 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:   16
  9203 ;; This function calls:
  9204 ;;		_LED_Init
  9205 ;;		_Port_Init
  9206 ;;		_Port_SetPin
  9207 ;;		_Port_SetPinType
  9208 ;;		_Port_SetQuadType
  9209 ;;		_Port_SetType
  9210 ;;		_delay_ms
  9211 ;; This function is called by:
  9212 ;;		_initialise
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text39
  9217  014444                     __ptext39:
  9218                           	opt stack 0
  9219  014444                     _MXK_Init:
  9220                           	opt stack 13
  9221                           
  9222                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  9223                           
  9224                           ;incstack = 0
  9225  014444  0E01               	movlw	1
  9226  014446  6E43               	movwf	_Bus_State,c
  9227                           
  9228                           ;MXK.c: 36: lQueue = (Function)0;
  9229  014448  0E00               	movlw	0
  9230  01444A  6E25               	movwf	_lQueue,c	;volatile
  9231  01444C  0E00               	movlw	0
  9232  01444E  6E26               	movwf	_lQueue+1,c	;volatile
  9233  014450  0E00               	movlw	0
  9234  014452  6E27               	movwf	_lQueue+2,c	;volatile
  9235                           
  9236                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  9237  014454  0EB5               	movlw	low _PortA
  9238  014456  0100               	movlb	0	; () banked
  9239  014458  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9240  01445A  0E01               	movlw	high _PortA
  9241  01445C  0100               	movlb	0	; () banked
  9242  01445E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9243  014460  0E00               	movlw	0
  9244  014462  0100               	movlb	0	; () banked
  9245  014464  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9246  014466  EC42  F09E         	call	_Port_Init	;wreg free
  9247                           
  9248                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  9249  01446A  0EAB               	movlw	low _PortB
  9250  01446C  0100               	movlb	0	; () banked
  9251  01446E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9252  014470  0E01               	movlw	high _PortB
  9253  014472  0100               	movlb	0	; () banked
  9254  014474  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9255  014476  0E01               	movlw	1
  9256  014478  0100               	movlb	0	; () banked
  9257  01447A  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9258  01447C  EC42  F09E         	call	_Port_Init	;wreg free
  9259                           
  9260                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  9261  014480  0EEA               	movlw	low _PortC
  9262  014482  0100               	movlb	0	; () banked
  9263  014484  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9264  014486  0E00               	movlw	high _PortC
  9265  014488  0100               	movlb	0	; () banked
  9266  01448A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9267  01448C  0E02               	movlw	2
  9268  01448E  0100               	movlb	0	; () banked
  9269  014490  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9270  014492  EC42  F09E         	call	_Port_Init	;wreg free
  9271                           
  9272                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  9273  014496  0EA1               	movlw	low _PortD
  9274  014498  0100               	movlb	0	; () banked
  9275  01449A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9276  01449C  0E01               	movlw	high _PortD
  9277  01449E  0100               	movlb	0	; () banked
  9278  0144A0  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9279  0144A2  0E03               	movlw	3
  9280  0144A4  0100               	movlb	0	; () banked
  9281  0144A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9282  0144A8  EC42  F09E         	call	_Port_Init	;wreg free
  9283                           
  9284                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  9285  0144AC  0E97               	movlw	low _PortE
  9286  0144AE  0100               	movlb	0	; () banked
  9287  0144B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9288  0144B2  0E01               	movlw	high _PortE
  9289  0144B4  0100               	movlb	0	; () banked
  9290  0144B6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9291  0144B8  0E04               	movlw	4
  9292  0144BA  0100               	movlb	0	; () banked
  9293  0144BC  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9294  0144BE  EC42  F09E         	call	_Port_Init	;wreg free
  9295                           
  9296                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  9297  0144C2  0EBF               	movlw	low _PortF
  9298  0144C4  0100               	movlb	0	; () banked
  9299  0144C6  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9300  0144C8  0E01               	movlw	high _PortF
  9301  0144CA  0100               	movlb	0	; () banked
  9302  0144CC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9303  0144CE  0E05               	movlw	5
  9304  0144D0  0100               	movlb	0	; () banked
  9305  0144D2  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9306  0144D4  EC42  F09E         	call	_Port_Init	;wreg free
  9307                           
  9308                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  9309  0144D8  0E8D               	movlw	low _PortG
  9310  0144DA  0100               	movlb	0	; () banked
  9311  0144DC  6FA0               	movwf	Port_Init@pInput& (0+255),b
  9312  0144DE  0E01               	movlw	high _PortG
  9313  0144E0  0100               	movlb	0	; () banked
  9314  0144E2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  9315  0144E4  0E06               	movlw	6
  9316  0144E6  0100               	movlb	0	; () banked
  9317  0144E8  6FA2               	movwf	Port_Init@pPort& (0+255),b
  9318  0144EA  EC42  F09E         	call	_Port_Init	;wreg free
  9319                           
  9320                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  9321  0144EE  0EBF               	movlw	low _PortF
  9322  0144F0  0100               	movlb	0	; () banked
  9323  0144F2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9324  0144F4  0E01               	movlw	high _PortF
  9325  0144F6  0100               	movlb	0	; () banked
  9326  0144F8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9327  0144FA  0E05               	movlw	5
  9328  0144FC  0100               	movlb	0	; () banked
  9329  0144FE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9330  014500  0E00               	movlw	0
  9331  014502  0100               	movlb	0	; () banked
  9332  014504  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9333  014506  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9334                           
  9335                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  9336  01450A  0EAB               	movlw	low _PortB
  9337  01450C  0100               	movlb	0	; () banked
  9338  01450E  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  9339  014510  0E01               	movlw	high _PortB
  9340  014512  0100               	movlb	0	; () banked
  9341  014514  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  9342  014516  0E00               	movlw	0
  9343  014518  0100               	movlb	0	; () banked
  9344  01451A  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  9345  01451C  0E00               	movlw	0
  9346  01451E  0100               	movlb	0	; () banked
  9347  014520  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  9348  014522  EC53  F095         	call	_Port_SetQuadType	;wreg free
  9349                           
  9350                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  9351  014526  0EBF               	movlw	low _PortF
  9352  014528  0100               	movlb	0	; () banked
  9353  01452A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9354  01452C  0E01               	movlw	high _PortF
  9355  01452E  0100               	movlb	0	; () banked
  9356  014530  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9357  014532  0E06               	movlw	6
  9358  014534  0100               	movlb	0	; () banked
  9359  014536  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9360  014538  0E03               	movlw	3
  9361  01453A  0100               	movlb	0	; () banked
  9362  01453C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9363  01453E  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9364                           
  9365                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  9366  014542  0E8D               	movlw	low _PortG
  9367  014544  0100               	movlb	0	; () banked
  9368  014546  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  9369  014548  0E01               	movlw	high _PortG
  9370  01454A  0100               	movlb	0	; () banked
  9371  01454C  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  9372  01454E  0E03               	movlw	3
  9373  014550  0100               	movlb	0	; () banked
  9374  014552  6F9C               	movwf	Port_SetType@pType& (0+255),b
  9375  014554  EC94  F097         	call	_Port_SetType	;wreg free
  9376                           
  9377                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  9378  014558  0E8D               	movlw	low _PortG
  9379  01455A  0100               	movlb	0	; () banked
  9380  01455C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9381  01455E  0E01               	movlw	high _PortG
  9382  014560  0100               	movlb	0	; () banked
  9383  014562  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9384  014564  0E04               	movlw	4
  9385  014566  0100               	movlb	0	; () banked
  9386  014568  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9387  01456A  0E00               	movlw	0
  9388  01456C  0100               	movlb	0	; () banked
  9389  01456E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9390  014570  ECC8  F0AB         	call	_Port_SetPin	;wreg free
  9391                           
  9392                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  9393  014574  0EBF               	movlw	low _PortF
  9394  014576  0100               	movlb	0	; () banked
  9395  014578  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9396  01457A  0E01               	movlw	high _PortF
  9397  01457C  0100               	movlb	0	; () banked
  9398  01457E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9399  014580  0E06               	movlw	6
  9400  014582  0100               	movlb	0	; () banked
  9401  014584  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9402  014586  0E01               	movlw	1
  9403  014588  0100               	movlb	0	; () banked
  9404  01458A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9405  01458C  ECC8  F0AB         	call	_Port_SetPin	;wreg free
  9406                           
  9407                           ;MXK.c: 55: LED_Init(eLED1);
  9408  014590  0E00               	movlw	0
  9409  014592  EC2B  F0B9         	call	_LED_Init
  9410                           
  9411                           ;MXK.c: 56: LED_Init(eLED2);
  9412  014596  0E01               	movlw	1
  9413  014598  EC2B  F0B9         	call	_LED_Init
  9414                           
  9415                           ;MXK.c: 58: PIR1 = 0;
  9416  01459C  0E00               	movlw	0
  9417  01459E  6E9E               	movwf	3998,c	;volatile
  9418                           
  9419                           ;MXK.c: 59: PIR2 = 0;
  9420  0145A0  0E00               	movlw	0
  9421  0145A2  6EA1               	movwf	4001,c	;volatile
  9422                           
  9423                           ;MXK.c: 60: PIR3 = 0;
  9424  0145A4  0E00               	movlw	0
  9425  0145A6  6EA4               	movwf	4004,c	;volatile
  9426                           
  9427                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  9428  0145A8  8E9B               	bsf	3995,7,c	;volatile
  9429                           
  9430                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  9431  0145AA  8C9B               	bsf	3995,6,c	;volatile
  9432                           
  9433                           ;MXK.c: 66: delay_ms(100);
  9434  0145AC  0E00               	movlw	0
  9435  0145AE  0100               	movlb	0	; () banked
  9436  0145B0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9437  0145B2  0E64               	movlw	100
  9438  0145B4  6F60               	movwf	delay_ms@ms& (0+255),b
  9439  0145B6  ECC6  F0B7         	call	_delay_ms	;wreg free
  9440                           
  9441                           ;MXK.c: 68: RCONbits.IPEN = 1;
  9442  0145BA  8ED0               	bsf	4048,7,c	;volatile
  9443  0145BC  0012               	return		;funcret
  9444  0145BE                     __end_of_MXK_Init:
  9445                           	opt stack 0
  9446                           tosu	equ	0xFFF
  9447                           tosh	equ	0xFFE
  9448                           tosl	equ	0xFFD
  9449                           pclath	equ	0xFFA
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           postinc0	equ	0xFEE
  9457                           wreg	equ	0xFE8
  9458                           indf1	equ	0xFE7
  9459                           postdec1	equ	0xFE5
  9460                           fsr1h	equ	0xFE2
  9461                           fsr1l	equ	0xFE1
  9462                           indf2	equ	0xFDF
  9463                           postinc2	equ	0xFDE
  9464                           postdec2	equ	0xFDD
  9465                           plusw2	equ	0xFDB
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _Port_Init *****************
  9471 ;; Defined at:
  9472 ;;		line 150 in file "Library/Port.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  9475 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  9476 ;;		 -> PortD(10), PortC(10), PortF(10), 
  9477 ;;  pPort           1   66[BANK0 ] enum E6786
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  i               1   69[BANK0 ] unsigned char 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9489 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;Total ram usage:        6 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:   15
  9496 ;; This function calls:
  9497 ;;		_GetPortPORT
  9498 ;;		_GetPortProperties
  9499 ;;		_GetPortTRIS
  9500 ;;		_Port_Set
  9501 ;;		_Port_SetPinType
  9502 ;;		_Port_SetType
  9503 ;;		_Word_GetPair
  9504 ;; This function is called by:
  9505 ;;		_MXK_Init
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text40
  9510  013C84                     __ptext40:
  9511                           	opt stack 0
  9512  013C84                     _Port_Init:
  9513                           	opt stack 13
  9514                           
  9515                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  9516                           
  9517                           ;incstack = 0
  9518  013C84  0100               	movlb	0	; () banked
  9519  013C86  51A2               	movf	Port_Init@pPort& (0+255),w,b
  9520  013C88  EC5F  F0B0         	call	_GetPortProperties
  9521  013C8C  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  9522  013C90  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  9523  013C94  0100               	movlb	0	; () banked
  9524  013C96  C060  FFDE         	movff	?_GetPortProperties,postinc2
  9525  013C9A  0100               	movlb	0	; () banked
  9526  013C9C  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  9527                           
  9528                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  9529  013CA0  0100               	movlb	0	; () banked
  9530  013CA2  51A2               	movf	Port_Init@pPort& (0+255),w,b
  9531  013CA4  ECB2  F0B0         	call	_GetPortPORT
  9532  013CA8  0100               	movlb	0	; () banked
  9533  013CAA  EE20 F006          	lfsr	2,6
  9534  013CAE  51A0               	movf	Port_Init@pInput& (0+255),w,b
  9535  013CB0  26D9               	addwf	fsr2l,f,c
  9536  013CB2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  9537  013CB4  22DA               	addwfc	fsr2h,f,c
  9538  013CB6  0100               	movlb	0	; () banked
  9539  013CB8  C060  FFDE         	movff	?_GetPortPORT,postinc2
  9540  013CBC  0100               	movlb	0	; () banked
  9541  013CBE  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  9542                           
  9543                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  9544  013CC2  0100               	movlb	0	; () banked
  9545  013CC4  51A2               	movf	Port_Init@pPort& (0+255),w,b
  9546  013CC6  ECB2  F0B0         	call	_GetPortPORT
  9547  013CCA  0100               	movlb	0	; () banked
  9548  013CCC  EE20 F004          	lfsr	2,4
  9549  013CD0  51A0               	movf	Port_Init@pInput& (0+255),w,b
  9550  013CD2  26D9               	addwf	fsr2l,f,c
  9551  013CD4  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  9552  013CD6  22DA               	addwfc	fsr2h,f,c
  9553  013CD8  0100               	movlb	0	; () banked
  9554  013CDA  C060  FFDE         	movff	?_GetPortPORT,postinc2
  9555  013CDE  0100               	movlb	0	; () banked
  9556  013CE0  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  9557                           
  9558                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  9559  013CE4  0100               	movlb	0	; () banked
  9560  013CE6  51A2               	movf	Port_Init@pPort& (0+255),w,b
  9561  013CE8  EC0C  F0B0         	call	_GetPortTRIS
  9562  013CEC  0100               	movlb	0	; () banked
  9563  013CEE  EE20 F002          	lfsr	2,2
  9564  013CF2  51A0               	movf	Port_Init@pInput& (0+255),w,b
  9565  013CF4  26D9               	addwf	fsr2l,f,c
  9566  013CF6  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  9567  013CF8  22DA               	addwfc	fsr2h,f,c
  9568  013CFA  0100               	movlb	0	; () banked
  9569  013CFC  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  9570  013D00  0100               	movlb	0	; () banked
  9571  013D02  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  9575  013D06  0100               	movlb	0	; () banked
  9576  013D08  EE20 F004          	lfsr	2,4
  9577  013D0C  51A0               	movf	Port_Init@pInput& (0+255),w,b
  9578  013D0E  26D9               	addwf	fsr2l,f,c
  9579  013D10  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  9580  013D12  22DA               	addwfc	fsr2h,f,c
  9581  013D14  CFDE F0A3          	movff	postinc2,??_Port_Init
  9582  013D18  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  9583  013D1C  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  9584  013D20  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  9585  013D24  0E00               	movlw	0
  9586  013D26  6EDF               	movwf	indf2,c
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  9590  013D28  0100               	movlb	0	; () banked
  9591  013D2A  EE20 F002          	lfsr	2,2
  9592  013D2E  51A0               	movf	Port_Init@pInput& (0+255),w,b
  9593  013D30  26D9               	addwf	fsr2l,f,c
  9594  013D32  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  9595  013D34  22DA               	addwfc	fsr2h,f,c
  9596  013D36  CFDE F0A3          	movff	postinc2,??_Port_Init
  9597  013D3A  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  9598  013D3E  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  9599  013D42  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  9600  013D46  0EFF               	movlw	255
  9601  013D48  6EDF               	movwf	indf2,c
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  9605  013D4A  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  9606  013D4E  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  9607  013D52  0E00               	movlw	0
  9608  013D54  0100               	movlb	0	; () banked
  9609  013D56  6F9C               	movwf	Port_SetType@pType& (0+255),b
  9610  013D58  EC94  F097         	call	_Port_SetType	;wreg free
  9611                           
  9612                           ;Port.c: 166: UINT8 i;
  9613                           ;Port.c: 167: for (i=0; i<8; i++)
  9614  013D5C  0E00               	movlw	0
  9615  013D5E  0100               	movlb	0	; () banked
  9616  013D60  6FA5               	movwf	Port_Init@i& (0+255),b
  9617  013D62                     l14541:
  9618                           
  9619                           ; BSR set to: 0
  9620  013D62  0E07               	movlw	7
  9621  013D64  0100               	movlb	0	; () banked
  9622  013D66  65A5               	cpfsgt	Port_Init@i& (0+255),b
  9623  013D68  D031               	goto	l14555
  9624  013D6A  D04B               	goto	l14561
  9625  013D6C                     l14545:
  9626                           
  9627                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  9628  013D6C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  9629  013D70  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  9630  013D74  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  9631  013D78  0E03               	movlw	3
  9632  013D7A  0100               	movlb	0	; () banked
  9633  013D7C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9634  013D7E  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9635                           
  9636                           ;Port.c: 173: break;
  9637  013D82  D03C               	goto	l14557
  9638  013D84                     l14547:
  9639                           
  9640                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  9641  013D84  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  9642  013D88  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  9643  013D8C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  9644  013D90  0E02               	movlw	2
  9645  013D92  0100               	movlb	0	; () banked
  9646  013D94  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9647  013D96  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9648                           
  9649                           ;Port.c: 176: break;
  9650  013D9A  D030               	goto	l14557
  9651  013D9C                     l14549:
  9652                           
  9653                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  9654  013D9C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  9655  013DA0  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  9656  013DA4  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  9657  013DA8  0E01               	movlw	1
  9658  013DAA  0100               	movlb	0	; () banked
  9659  013DAC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9660  013DAE  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9661                           
  9662                           ;Port.c: 179: break;
  9663  013DB2  D024               	goto	l14557
  9664  013DB4                     l14551:
  9665                           
  9666                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  9667  013DB4  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  9668  013DB8  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  9669  013DBC  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  9670  013DC0  0E00               	movlw	0
  9671  013DC2  0100               	movlb	0	; () banked
  9672  013DC4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9673  013DC6  EC93  F09C         	call	_Port_SetPinType	;wreg free
  9674                           
  9675                           ;Port.c: 183: }
  9676                           
  9677                           ;Port.c: 182: break;
  9678  013DCA  D018               	goto	l14557
  9679  013DCC                     l14555:
  9680  013DCC  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  9681  013DD0  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  9682  013DD4  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  9683  013DD8  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  9684  013DDC  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  9685  013DE0  EC48  F0BC         	call	_Word_GetPair	;wreg free
  9686                           
  9687                           ; Switch size 1, requested type "space"
  9688                           ; Number of cases is 4, Range of values is 0 to 3
  9689                           ; switch strategies available:
  9690                           ; Name         Instructions Cycles
  9691                           ; simple_byte           13     7 (average)
  9692                           ;	Chosen strategy is simple_byte
  9693  013DE4  0A00               	xorlw	0	; case 0
  9694  013DE6  B4D8               	btfsc	status,2,c
  9695  013DE8  D7C1               	goto	l14545
  9696  013DEA  0A01               	xorlw	1	; case 1
  9697  013DEC  B4D8               	btfsc	status,2,c
  9698  013DEE  D7D6               	goto	l14549
  9699  013DF0  0A03               	xorlw	3	; case 2
  9700  013DF2  B4D8               	btfsc	status,2,c
  9701  013DF4  D7C7               	goto	l14547
  9702  013DF6  0A01               	xorlw	1	; case 3
  9703  013DF8  B4D8               	btfsc	status,2,c
  9704  013DFA  D7DC               	goto	l14551
  9705  013DFC                     l14557:
  9706  013DFC  0100               	movlb	0	; () banked
  9707  013DFE  2BA5               	incf	Port_Init@i& (0+255),f,b
  9708  013E00  D7B0               	goto	l14541
  9709  013E02                     l14561:
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;Port.c: 184: }
  9713                           ;Port.c: 185: Port_Set(pInput, 0x00);
  9714  013E02  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  9715  013E06  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  9716  013E0A  0E00               	movlw	0
  9717  013E0C  0100               	movlb	0	; () banked
  9718  013E0E  6F71               	movwf	Port_Set@pValue& (0+255),b
  9719  013E10  EC6C  F08F         	call	_Port_Set	;wreg free
  9720  013E14  0012               	return		;funcret
  9721  013E16                     __end_of_Port_Init:
  9722                           	opt stack 0
  9723                           tosu	equ	0xFFF
  9724                           tosh	equ	0xFFE
  9725                           tosl	equ	0xFFD
  9726                           pclath	equ	0xFFA
  9727                           tblptru	equ	0xFF8
  9728                           tblptrh	equ	0xFF7
  9729                           tblptrl	equ	0xFF6
  9730                           tablat	equ	0xFF5
  9731                           prodh	equ	0xFF4
  9732                           prodl	equ	0xFF3
  9733                           postinc0	equ	0xFEE
  9734                           wreg	equ	0xFE8
  9735                           indf1	equ	0xFE7
  9736                           postdec1	equ	0xFE5
  9737                           fsr1h	equ	0xFE2
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           plusw2	equ	0xFDB
  9743                           fsr2h	equ	0xFDA
  9744                           fsr2l	equ	0xFD9
  9745                           status	equ	0xFD8
  9746                           
  9747 ;; *************** function _Port_SetType *****************
  9748 ;; Defined at:
  9749 ;;		line 513 in file "Library/Port.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  9752 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  9753 ;;		 -> PortD(10), PortC(10), PortF(10), 
  9754 ;;  pType           1   60[BANK0 ] enum E6795
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  Output          1   63[BANK0 ] enum E6475
  9757 ;; Return value:  Size  Location     Type
  9758 ;;                  1    wreg      enum E6475
  9759 ;; Registers used:
  9760 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9766 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;Total ram usage:        6 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:   14
  9773 ;; This function calls:
  9774 ;;		_Port_CheckPortType
  9775 ;;		_Word_SetPair
  9776 ;; This function is called by:
  9777 ;;		_Port_Init
  9778 ;;		_MXK_Init
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text41
  9783  012F28                     __ptext41:
  9784                           	opt stack 0
  9785  012F28                     _Port_SetType:
  9786                           	opt stack 14
  9787                           
  9788                           ;Port.c: 515: ePinError Output = ePinErrorState;
  9789                           
  9790                           ;incstack = 0
  9791  012F28  0E05               	movlw	5
  9792  012F2A  0100               	movlb	0	; () banked
  9793  012F2C  6F9F               	movwf	Port_SetType@Output& (0+255),b
  9794                           
  9795                           ;Port.c: 517: switch (pType)
  9796  012F2E  D07A               	goto	l13671
  9797  012F30                     l13655:
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  9801  012F30  0100               	movlb	0	; () banked
  9802  012F32  EE20 F002          	lfsr	2,2
  9803  012F36  519A               	movf	Port_SetType@pInput& (0+255),w,b
  9804  012F38  26D9               	addwf	fsr2l,f,c
  9805  012F3A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  9806  012F3C  22DA               	addwfc	fsr2h,f,c
  9807  012F3E  CFDE F09D          	movff	postinc2,??_Port_SetType
  9808  012F42  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  9809  012F46  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  9810  012F4A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  9811  012F4E  0EFF               	movlw	255
  9812  012F50  D067               	goto	L4
  9813  012F52                     l13657:
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  9817  012F52  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  9818  012F56  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  9819  012F5A  0E01               	movlw	1
  9820  012F5C  0100               	movlb	0	; () banked
  9821  012F5E  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  9822  012F60  ECCE  F0BA         	call	_Port_CheckPortType	;wreg free
  9823  012F64  0100               	movlb	0	; () banked
  9824  012F66  6F9F               	movwf	Port_SetType@Output& (0+255),b
  9825  012F68  0100               	movlb	0	; () banked
  9826  012F6A  519F               	movf	Port_SetType@Output& (0+255),w,b
  9827  012F6C  A4D8               	btfss	status,2,c
  9828  012F6E  0012               	return	
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;Port.c: 527: {
  9832                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  9833  012F70  0100               	movlb	0	; () banked
  9834  012F72  EE20 F002          	lfsr	2,2
  9835  012F76  519A               	movf	Port_SetType@pInput& (0+255),w,b
  9836  012F78  26D9               	addwf	fsr2l,f,c
  9837  012F7A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  9838  012F7C  22DA               	addwfc	fsr2h,f,c
  9839  012F7E  CFDE F09D          	movff	postinc2,??_Port_SetType
  9840  012F82  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  9841  012F86  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  9842  012F8A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  9843  012F8E  0E00               	movlw	0
  9844  012F90  6EDF               	movwf	indf2,c
  9845                           
  9846                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  9847  012F92  0100               	movlb	0	; () banked
  9848  012F94  EE20 F004          	lfsr	2,4
  9849  012F98  D036               	goto	L25
  9850  012F9A                     l13661:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  9854  012F9A  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  9855  012F9E  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  9856  012FA2  0E02               	movlw	2
  9857  012FA4  0100               	movlb	0	; () banked
  9858  012FA6  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  9859  012FA8  ECCE  F0BA         	call	_Port_CheckPortType	;wreg free
  9860  012FAC  0100               	movlb	0	; () banked
  9861  012FAE  6F9F               	movwf	Port_SetType@Output& (0+255),b
  9862  012FB0  0100               	movlb	0	; () banked
  9863  012FB2  519F               	movf	Port_SetType@Output& (0+255),w,b
  9864  012FB4  A4D8               	btfss	status,2,c
  9865  012FB6  0012               	return	
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;Port.c: 538: {
  9869                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  9870  012FB8  0100               	movlb	0	; () banked
  9871  012FBA  EE20 F002          	lfsr	2,2
  9872  012FBE  519A               	movf	Port_SetType@pInput& (0+255),w,b
  9873  012FC0  26D9               	addwf	fsr2l,f,c
  9874  012FC2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  9875  012FC4  22DA               	addwfc	fsr2h,f,c
  9876  012FC6  CFDE F09D          	movff	postinc2,??_Port_SetType
  9877  012FCA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  9878  012FCE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  9879  012FD2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  9880  012FD6  0EFF               	movlw	255
  9881  012FD8  6EDF               	movwf	indf2,c
  9882                           
  9883                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  9884  012FDA  0100               	movlb	0	; () banked
  9885  012FDC  EE20 F004          	lfsr	2,4
  9886  012FE0  D7AA               	goto	L5
  9887  012FE2                     l13665:
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  9891  012FE2  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  9892  012FE6  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  9893  012FEA  0E00               	movlw	0
  9894  012FEC  0100               	movlb	0	; () banked
  9895  012FEE  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  9896  012FF0  ECCE  F0BA         	call	_Port_CheckPortType	;wreg free
  9897  012FF4  0100               	movlb	0	; () banked
  9898  012FF6  6F9F               	movwf	Port_SetType@Output& (0+255),b
  9899  012FF8  0100               	movlb	0	; () banked
  9900  012FFA  519F               	movf	Port_SetType@Output& (0+255),w,b
  9901  012FFC  A4D8               	btfss	status,2,c
  9902  012FFE  0012               	return	
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;Port.c: 549: {
  9906                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  9907  013000  0100               	movlb	0	; () banked
  9908  013002  EE20 F002          	lfsr	2,2
  9909  013006                     L25:
  9910  013006  519A               	movf	Port_SetType@pInput& (0+255),w,b
  9911  013008  26D9               	addwf	fsr2l,f,c
  9912  01300A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  9913  01300C  22DA               	addwfc	fsr2h,f,c
  9914  01300E  CFDE F09D          	movff	postinc2,??_Port_SetType
  9915  013012  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  9916  013016  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  9917  01301A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  9918  01301E  0E00               	movlw	0
  9919  013020                     L4:
  9920  013020  6EDF               	movwf	indf2,c
  9921                           
  9922                           ;Port.c: 552: }
  9923  013022  D00E               	goto	l13673
  9924  013024                     l13671:
  9925                           
  9926                           ; BSR set to: 0
  9927  013024  0100               	movlb	0	; () banked
  9928  013026  519C               	movf	Port_SetType@pType& (0+255),w,b
  9929                           
  9930                           ; Switch size 1, requested type "space"
  9931                           ; Number of cases is 4, Range of values is 0 to 3
  9932                           ; switch strategies available:
  9933                           ; Name         Instructions Cycles
  9934                           ; simple_byte           13     7 (average)
  9935                           ;	Chosen strategy is simple_byte
  9936  013028  0A00               	xorlw	0	; case 0
  9937  01302A  B4D8               	btfsc	status,2,c
  9938  01302C  D781               	goto	l13655
  9939  01302E  0A01               	xorlw	1	; case 1
  9940  013030  B4D8               	btfsc	status,2,c
  9941  013032  D78F               	goto	l13657
  9942  013034  0A03               	xorlw	3	; case 2
  9943  013036  B4D8               	btfsc	status,2,c
  9944  013038  D7B0               	goto	l13661
  9945  01303A  0A01               	xorlw	1	; case 3
  9946  01303C  B4D8               	btfsc	status,2,c
  9947  01303E  D7D1               	goto	l13665
  9948  013040                     l13673:
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  9952  013040  0E08               	movlw	8
  9953  013042  0100               	movlb	0	; () banked
  9954  013044  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  9955  013046  0100               	movlb	0	; () banked
  9956  013048  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  9957  01304A  0E00               	movlw	0
  9958  01304C  0100               	movlb	0	; () banked
  9959  01304E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  9960  013050  0100               	movlb	0	; () banked
  9961  013052  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  9962  013054  0E00               	movlw	0
  9963  013056  0100               	movlb	0	; () banked
  9964  013058  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  9965  01305A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  9966  01305E  EC81  F0BB         	call	_Word_SetPair	;wreg free
  9967                           
  9968                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  9969  013062  0E08               	movlw	8
  9970  013064  0100               	movlb	0	; () banked
  9971  013066  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  9972  013068  0100               	movlb	0	; () banked
  9973  01306A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  9974  01306C  0E00               	movlw	0
  9975  01306E  0100               	movlb	0	; () banked
  9976  013070  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  9977  013072  0100               	movlb	0	; () banked
  9978  013074  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  9979  013076  0E01               	movlw	1
  9980  013078  0100               	movlb	0	; () banked
  9981  01307A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  9982  01307C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  9983  013080  EC81  F0BB         	call	_Word_SetPair	;wreg free
  9984                           
  9985                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  9986  013084  0E08               	movlw	8
  9987  013086  0100               	movlb	0	; () banked
  9988  013088  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  9989  01308A  0100               	movlb	0	; () banked
  9990  01308C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  9991  01308E  0E00               	movlw	0
  9992  013090  0100               	movlb	0	; () banked
  9993  013092  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  9994  013094  0100               	movlb	0	; () banked
  9995  013096  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  9996  013098  0E02               	movlw	2
  9997  01309A  0100               	movlb	0	; () banked
  9998  01309C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  9999  01309E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10000  0130A2  EC81  F0BB         	call	_Word_SetPair	;wreg free
 10001                           
 10002                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 10003  0130A6  0E08               	movlw	8
 10004  0130A8  0100               	movlb	0	; () banked
 10005  0130AA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10006  0130AC  0100               	movlb	0	; () banked
 10007  0130AE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10008  0130B0  0E00               	movlw	0
 10009  0130B2  0100               	movlb	0	; () banked
 10010  0130B4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10011  0130B6  0100               	movlb	0	; () banked
 10012  0130B8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10013  0130BA  0E03               	movlw	3
 10014  0130BC  0100               	movlb	0	; () banked
 10015  0130BE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10016  0130C0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10017  0130C4  EC81  F0BB         	call	_Word_SetPair	;wreg free
 10018                           
 10019                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 10020  0130C8  0E08               	movlw	8
 10021  0130CA  0100               	movlb	0	; () banked
 10022  0130CC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10023  0130CE  0100               	movlb	0	; () banked
 10024  0130D0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10025  0130D2  0E00               	movlw	0
 10026  0130D4  0100               	movlb	0	; () banked
 10027  0130D6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10028  0130D8  0100               	movlb	0	; () banked
 10029  0130DA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10030  0130DC  0E04               	movlw	4
 10031  0130DE  0100               	movlb	0	; () banked
 10032  0130E0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10033  0130E2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10034  0130E6  EC81  F0BB         	call	_Word_SetPair	;wreg free
 10035                           
 10036                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 10037  0130EA  0E08               	movlw	8
 10038  0130EC  0100               	movlb	0	; () banked
 10039  0130EE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10040  0130F0  0100               	movlb	0	; () banked
 10041  0130F2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10042  0130F4  0E00               	movlw	0
 10043  0130F6  0100               	movlb	0	; () banked
 10044  0130F8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10045  0130FA  0100               	movlb	0	; () banked
 10046  0130FC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10047  0130FE  0E05               	movlw	5
 10048  013100  0100               	movlb	0	; () banked
 10049  013102  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10050  013104  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10051  013108  EC81  F0BB         	call	_Word_SetPair	;wreg free
 10052                           
 10053                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 10054  01310C  0E08               	movlw	8
 10055  01310E  0100               	movlb	0	; () banked
 10056  013110  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10057  013112  0100               	movlb	0	; () banked
 10058  013114  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10059  013116  0E00               	movlw	0
 10060  013118  0100               	movlb	0	; () banked
 10061  01311A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10062  01311C  0100               	movlb	0	; () banked
 10063  01311E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10064  013120  0E06               	movlw	6
 10065  013122  0100               	movlb	0	; () banked
 10066  013124  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10067  013126  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10068  01312A  EC81  F0BB         	call	_Word_SetPair	;wreg free
 10069                           
 10070                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 10071  01312E  0E08               	movlw	8
 10072  013130  0100               	movlb	0	; () banked
 10073  013132  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10074  013134  0100               	movlb	0	; () banked
 10075  013136  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10076  013138  0E00               	movlw	0
 10077  01313A  0100               	movlb	0	; () banked
 10078  01313C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10079  01313E  0100               	movlb	0	; () banked
 10080  013140  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10081  013142  0E07               	movlw	7
 10082  013144  0100               	movlb	0	; () banked
 10083  013146  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10084  013148  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10085  01314C  EC81  F0BB         	call	_Word_SetPair	;wreg free
 10086  013150  0012               	return	
 10087  013152                     __end_of_Port_SetType:
 10088                           	opt stack 0
 10089                           tosu	equ	0xFFF
 10090                           tosh	equ	0xFFE
 10091                           tosl	equ	0xFFD
 10092                           pclath	equ	0xFFA
 10093                           tblptru	equ	0xFF8
 10094                           tblptrh	equ	0xFF7
 10095                           tblptrl	equ	0xFF6
 10096                           tablat	equ	0xFF5
 10097                           prodh	equ	0xFF4
 10098                           prodl	equ	0xFF3
 10099                           postinc0	equ	0xFEE
 10100                           wreg	equ	0xFE8
 10101                           indf1	equ	0xFE7
 10102                           postdec1	equ	0xFE5
 10103                           fsr1h	equ	0xFE2
 10104                           fsr1l	equ	0xFE1
 10105                           indf2	equ	0xFDF
 10106                           postinc2	equ	0xFDE
 10107                           postdec2	equ	0xFDD
 10108                           plusw2	equ	0xFDB
 10109                           fsr2h	equ	0xFDA
 10110                           fsr2l	equ	0xFD9
 10111                           status	equ	0xFD8
 10112                           
 10113 ;; *************** function _Port_CheckPortType *****************
 10114 ;; Defined at:
 10115 ;;		line 138 in file "Library/Port.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 10118 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10119 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10120 ;;  pDrive          1   56[BANK0 ] enum E6469
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  Output          1   57[BANK0 ] enum E6475
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      enum E6475
 10125 ;; Registers used:
 10126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10132 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10135 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10136 ;;Total ram usage:        4 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:   13
 10139 ;; This function calls:
 10140 ;;		_Port_CheckQuadType
 10141 ;; This function is called by:
 10142 ;;		_Port_SetType
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           	psect	text42
 10147  01759C                     __ptext42:
 10148                           	opt stack 0
 10149  01759C                     _Port_CheckPortType:
 10150                           	opt stack 14
 10151                           
 10152                           ;Port.c: 140: ePinError Output = ePinErrorState;
 10153                           
 10154                           ;incstack = 0
 10155  01759C  0E05               	movlw	5
 10156  01759E  0100               	movlb	0	; () banked
 10157  0175A0  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 10161  0175A2  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 10162  0175A6  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 10163  0175AA  0E00               	movlw	0
 10164  0175AC  0100               	movlb	0	; () banked
 10165  0175AE  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 10166  0175B0  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 10167  0175B4  EC8A  F0B9         	call	_Port_CheckQuadType	;wreg free
 10168  0175B8  0100               	movlb	0	; () banked
 10169  0175BA  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 10170  0175BC  0100               	movlb	0	; () banked
 10171  0175BE  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 10172  0175C0  A4D8               	btfss	status,2,c
 10173  0175C2  D00D               	goto	l13263
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 10177  0175C4  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 10178  0175C8  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 10179  0175CC  0E01               	movlw	1
 10180  0175CE  0100               	movlb	0	; () banked
 10181  0175D0  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 10182  0175D2  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 10183  0175D6  EC8A  F0B9         	call	_Port_CheckQuadType	;wreg free
 10184  0175DA  0100               	movlb	0	; () banked
 10185  0175DC  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 10186  0175DE                     l13263:
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;Port.c: 146: return Output;
 10190  0175DE  0100               	movlb	0	; () banked
 10191  0175E0  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 10192  0175E2  0012               	return	
 10193  0175E4                     __end_of_Port_CheckPortType:
 10194                           	opt stack 0
 10195                           tosu	equ	0xFFF
 10196                           tosh	equ	0xFFE
 10197                           tosl	equ	0xFFD
 10198                           pclath	equ	0xFFA
 10199                           tblptru	equ	0xFF8
 10200                           tblptrh	equ	0xFF7
 10201                           tblptrl	equ	0xFF6
 10202                           tablat	equ	0xFF5
 10203                           prodh	equ	0xFF4
 10204                           prodl	equ	0xFF3
 10205                           postinc0	equ	0xFEE
 10206                           wreg	equ	0xFE8
 10207                           indf1	equ	0xFE7
 10208                           postdec1	equ	0xFE5
 10209                           fsr1h	equ	0xFE2
 10210                           fsr1l	equ	0xFE1
 10211                           indf2	equ	0xFDF
 10212                           postinc2	equ	0xFDE
 10213                           postdec2	equ	0xFDD
 10214                           plusw2	equ	0xFDB
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function _Port_Set *****************
 10220 ;; Defined at:
 10221 ;;		line 570 in file "Library/Port.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 10224 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10225 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10226 ;;  pValue          1   17[BANK0 ] unsigned char 
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 10229 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 10230 ;;  Type            1   38[BANK0 ] enum E6795
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      void 
 10233 ;; Registers used:
 10234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10240 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;Total ram usage:       24 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:   10
 10247 ;; This function calls:
 10248 ;;		_Byte_SetByte
 10249 ;;		_Word_GetPair
 10250 ;; This function is called by:
 10251 ;;		_Port_Init
 10252 ;;		_Port_Toggle
 10253 ;; This function uses a non-reentrant model
 10254 ;;
 10255                           
 10256                           	psect	text43
 10257  011ED8                     __ptext43:
 10258                           	opt stack 0
 10259  011ED8                     _Port_Set:
 10260                           	opt stack 17
 10261                           
 10262                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;incstack = 0
 10266  011ED8  0E08               	movlw	8
 10267  011EDA  0100               	movlb	0	; () banked
 10268  011EDC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10269  011EDE  0100               	movlb	0	; () banked
 10270  011EE0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10271  011EE2  0E00               	movlw	0
 10272  011EE4  0100               	movlb	0	; () banked
 10273  011EE6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10274  011EE8  0100               	movlb	0	; () banked
 10275  011EEA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10276  011EEC  0E00               	movlw	0
 10277  011EEE  0100               	movlb	0	; () banked
 10278  011EF0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10279  011EF2  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10280  011EF6  0100               	movlb	0	; () banked
 10281  011EF8  6F86               	movwf	Port_Set@Type& (0+255),b
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 10285  011EFA  0100               	movlb	0	; () banked
 10286  011EFC  5186               	movf	Port_Set@Type& (0+255),w,b
 10287  011EFE  0100               	movlb	0	; () banked
 10288  011F00  6F72               	movwf	??_Port_Set& (0+255),b
 10289  011F02  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10290  011F04  0E0E               	movlw	14
 10291  011F06                     u10925:
 10292  011F06  90D8               	bcf	status,0,c
 10293  011F08  0100               	movlb	0	; () banked
 10294  011F0A  3772               	rlcf	??_Port_Set& (0+255),f,b
 10295  011F0C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10296  011F0E  2EE8               	decfsz	wreg,f,c
 10297  011F10  D7FA               	goto	u10925
 10298  011F12  0100               	movlb	0	; () banked
 10299  011F14  5186               	movf	Port_Set@Type& (0+255),w,b
 10300  011F16  0100               	movlb	0	; () banked
 10301  011F18  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 10302  011F1A  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 10303  011F1C  0E0C               	movlw	12
 10304  011F1E                     u10935:
 10305  011F1E  90D8               	bcf	status,0,c
 10306  011F20  0100               	movlb	0	; () banked
 10307  011F22  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 10308  011F24  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 10309  011F26  2EE8               	decfsz	wreg,f,c
 10310  011F28  D7FA               	goto	u10935
 10311  011F2A  0100               	movlb	0	; () banked
 10312  011F2C  5186               	movf	Port_Set@Type& (0+255),w,b
 10313  011F2E  0100               	movlb	0	; () banked
 10314  011F30  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 10315  011F32  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 10316  011F34  0E0A               	movlw	10
 10317  011F36                     u10945:
 10318  011F36  90D8               	bcf	status,0,c
 10319  011F38  0100               	movlb	0	; () banked
 10320  011F3A  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 10321  011F3C  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 10322  011F3E  2EE8               	decfsz	wreg,f,c
 10323  011F40  D7FA               	goto	u10945
 10324  011F42  0100               	movlb	0	; () banked
 10325  011F44  5186               	movf	Port_Set@Type& (0+255),w,b
 10326  011F46  0100               	movlb	0	; () banked
 10327  011F48  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 10328  011F4A  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 10329  011F4C  0100               	movlb	0	; () banked
 10330  011F4E  5186               	movf	Port_Set@Type& (0+255),w,b
 10331  011F50  0100               	movlb	0	; () banked
 10332  011F52  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 10333  011F54  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 10334  011F56  0E06               	movlw	6
 10335  011F58                     u10955:
 10336  011F58  90D8               	bcf	status,0,c
 10337  011F5A  0100               	movlb	0	; () banked
 10338  011F5C  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 10339  011F5E  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 10340  011F60  2EE8               	decfsz	wreg,f,c
 10341  011F62  D7FA               	goto	u10955
 10342  011F64  0100               	movlb	0	; () banked
 10343  011F66  5186               	movf	Port_Set@Type& (0+255),w,b
 10344  011F68  0100               	movlb	0	; () banked
 10345  011F6A  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 10346  011F6C  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 10347  011F6E  0100               	movlb	0	; () banked
 10348  011F70  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 10349  011F72  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 10350  011F74  0EF0               	movlw	240
 10351  011F76  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 10352  011F78  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 10353  011F7A  0B0F               	andlw	15
 10354  011F7C  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 10355  011F7E  0EF0               	movlw	240
 10356  011F80  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 10357  011F82  0100               	movlb	0	; () banked
 10358  011F84  5186               	movf	Port_Set@Type& (0+255),w,b
 10359  011F86  0100               	movlb	0	; () banked
 10360  011F88  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 10361  011F8A  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 10362  011F8C  0100               	movlb	0	; () banked
 10363  011F8E  90D8               	bcf	status,0,c
 10364  011F90  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 10365  011F92  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 10366  011F94  0100               	movlb	0	; () banked
 10367  011F96  90D8               	bcf	status,0,c
 10368  011F98  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 10369  011F9A  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 10370  011F9C  0100               	movlb	0	; () banked
 10371  011F9E  5186               	movf	Port_Set@Type& (0+255),w,b
 10372  011FA0  0100               	movlb	0	; () banked
 10373  011FA2  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 10374  011FA4  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 10375  011FA6  0100               	movlb	0	; () banked
 10376  011FA8  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 10377  011FAA  0100               	movlb	0	; () banked
 10378  011FAC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10379  011FAE  0100               	movlb	0	; () banked
 10380  011FB0  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 10381  011FB2  0100               	movlb	0	; () banked
 10382  011FB4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10383  011FB6  0100               	movlb	0	; () banked
 10384  011FB8  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 10385  011FBA  0100               	movlb	0	; () banked
 10386  011FBC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10387  011FBE  0100               	movlb	0	; () banked
 10388  011FC0  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 10389  011FC2  0100               	movlb	0	; () banked
 10390  011FC4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10391  011FC6  0100               	movlb	0	; () banked
 10392  011FC8  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 10393  011FCA  0100               	movlb	0	; () banked
 10394  011FCC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10395  011FCE  0100               	movlb	0	; () banked
 10396  011FD0  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 10397  011FD2  0100               	movlb	0	; () banked
 10398  011FD4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10399  011FD6  0100               	movlb	0	; () banked
 10400  011FD8  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 10401  011FDA  0100               	movlb	0	; () banked
 10402  011FDC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10403  011FDE  0100               	movlb	0	; () banked
 10404  011FE0  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 10405  011FE2  0100               	movlb	0	; () banked
 10406  011FE4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10407  011FE6  0100               	movlb	0	; () banked
 10408  011FE8  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 10409  011FEA  0100               	movlb	0	; () banked
 10410  011FEC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10411  011FEE  0100               	movlb	0	; () banked
 10412  011FF0  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 10413  011FF2  0100               	movlb	0	; () banked
 10414  011FF4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10415  011FF6  0100               	movlb	0	; () banked
 10416  011FF8  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 10417  011FFA  0100               	movlb	0	; () banked
 10418  011FFC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 10419  011FFE  0100               	movlb	0	; () banked
 10420  012000  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 10421  012002  0100               	movlb	0	; () banked
 10422  012004  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 10423  012006  0100               	movlb	0	; () banked
 10424  012008  5172               	movf	??_Port_Set& (0+255),w,b
 10425  01200A  0100               	movlb	0	; () banked
 10426  01200C  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 10427  01200E  0100               	movlb	0	; () banked
 10428  012010  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 10429  012012  0100               	movlb	0	; () banked
 10430  012014  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10431  012016  0100               	movlb	0	; () banked
 10432  012018  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 10433  01201A  0100               	movlb	0	; () banked
 10434  01201C  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;Port.c: 574: UINT16 TypeActual = Type;
 10438  01201E  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 10439  012022  0100               	movlb	0	; () banked
 10440  012024  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 10444  012026  0E08               	movlw	8
 10445  012028  0100               	movlb	0	; () banked
 10446  01202A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10447  01202C  0100               	movlb	0	; () banked
 10448  01202E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10449  012030  0E00               	movlw	0
 10450  012032  0100               	movlb	0	; () banked
 10451  012034  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10452  012036  0100               	movlb	0	; () banked
 10453  012038  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10454  01203A  0E01               	movlw	1
 10455  01203C  0100               	movlb	0	; () banked
 10456  01203E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10457  012040  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10458  012044  0100               	movlb	0	; () banked
 10459  012046  6F72               	movwf	??_Port_Set& (0+255),b
 10460  012048  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10461  01204A  0100               	movlb	0	; () banked
 10462  01204C  90D8               	bcf	status,0,c
 10463  01204E  3772               	rlcf	??_Port_Set& (0+255),f,b
 10464  012050  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10465  012052  0100               	movlb	0	; () banked
 10466  012054  90D8               	bcf	status,0,c
 10467  012056  3772               	rlcf	??_Port_Set& (0+255),f,b
 10468  012058  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10469  01205A  0100               	movlb	0	; () banked
 10470  01205C  5172               	movf	??_Port_Set& (0+255),w,b
 10471  01205E  0100               	movlb	0	; () banked
 10472  012060  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10473  012062  0100               	movlb	0	; () banked
 10474  012064  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10475  012066  0100               	movlb	0	; () banked
 10476  012068  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10477                           
 10478                           ; BSR set to: 0
 10479                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 10480  01206A  0E08               	movlw	8
 10481  01206C  0100               	movlb	0	; () banked
 10482  01206E  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10483  012070  0100               	movlb	0	; () banked
 10484  012072  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10485  012074  0E00               	movlw	0
 10486  012076  0100               	movlb	0	; () banked
 10487  012078  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10488  01207A  0100               	movlb	0	; () banked
 10489  01207C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10490  01207E  0E02               	movlw	2
 10491  012080  0100               	movlb	0	; () banked
 10492  012082  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10493  012084  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10494  012088  0100               	movlb	0	; () banked
 10495  01208A  6F72               	movwf	??_Port_Set& (0+255),b
 10496  01208C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10497  01208E  0100               	movlb	0	; () banked
 10498  012090  3B72               	swapf	??_Port_Set& (0+255),f,b
 10499  012092  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 10500  012094  0EF0               	movlw	240
 10501  012096  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 10502  012098  5172               	movf	??_Port_Set& (0+255),w,b
 10503  01209A  0B0F               	andlw	15
 10504  01209C  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 10505  01209E  0EF0               	movlw	240
 10506  0120A0  1772               	andwf	??_Port_Set& (0+255),f,b
 10507  0120A2  0100               	movlb	0	; () banked
 10508  0120A4  5172               	movf	??_Port_Set& (0+255),w,b
 10509  0120A6  0100               	movlb	0	; () banked
 10510  0120A8  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10511  0120AA  0100               	movlb	0	; () banked
 10512  0120AC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10513  0120AE  0100               	movlb	0	; () banked
 10514  0120B0  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 10518  0120B2  0E08               	movlw	8
 10519  0120B4  0100               	movlb	0	; () banked
 10520  0120B6  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10521  0120B8  0100               	movlb	0	; () banked
 10522  0120BA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10523  0120BC  0E00               	movlw	0
 10524  0120BE  0100               	movlb	0	; () banked
 10525  0120C0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10526  0120C2  0100               	movlb	0	; () banked
 10527  0120C4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10528  0120C6  0E03               	movlw	3
 10529  0120C8  0100               	movlb	0	; () banked
 10530  0120CA  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10531  0120CC  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10532  0120D0  0100               	movlb	0	; () banked
 10533  0120D2  6F72               	movwf	??_Port_Set& (0+255),b
 10534  0120D4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10535  0120D6  0E06               	movlw	6
 10536  0120D8                     u10965:
 10537  0120D8  90D8               	bcf	status,0,c
 10538  0120DA  0100               	movlb	0	; () banked
 10539  0120DC  3772               	rlcf	??_Port_Set& (0+255),f,b
 10540  0120DE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10541  0120E0  2EE8               	decfsz	wreg,f,c
 10542  0120E2  D7FA               	goto	u10965
 10543  0120E4  0100               	movlb	0	; () banked
 10544  0120E6  5172               	movf	??_Port_Set& (0+255),w,b
 10545  0120E8  0100               	movlb	0	; () banked
 10546  0120EA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10547  0120EC  0100               	movlb	0	; () banked
 10548  0120EE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10549  0120F0  0100               	movlb	0	; () banked
 10550  0120F2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 10554  0120F4  0E08               	movlw	8
 10555  0120F6  0100               	movlb	0	; () banked
 10556  0120F8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10557  0120FA  0100               	movlb	0	; () banked
 10558  0120FC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10559  0120FE  0E00               	movlw	0
 10560  012100  0100               	movlb	0	; () banked
 10561  012102  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10562  012104  0100               	movlb	0	; () banked
 10563  012106  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10564  012108  0E04               	movlw	4
 10565  01210A  0100               	movlb	0	; () banked
 10566  01210C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10567  01210E  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10568  012112  0100               	movlb	0	; () banked
 10569  012114  6F72               	movwf	??_Port_Set& (0+255),b
 10570  012116  0100               	movlb	0	; () banked
 10571  012118  5172               	movf	??_Port_Set& (0+255),w,b
 10572  01211A  0100               	movlb	0	; () banked
 10573  01211C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 10574  01211E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10575  012120  0100               	movlb	0	; () banked
 10576  012122  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10577  012124  0100               	movlb	0	; () banked
 10578  012126  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10579  012128  0100               	movlb	0	; () banked
 10580  01212A  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 10581  01212C  0100               	movlb	0	; () banked
 10582  01212E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 10586  012130  0E08               	movlw	8
 10587  012132  0100               	movlb	0	; () banked
 10588  012134  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10589  012136  0100               	movlb	0	; () banked
 10590  012138  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10591  01213A  0E00               	movlw	0
 10592  01213C  0100               	movlb	0	; () banked
 10593  01213E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10594  012140  0100               	movlb	0	; () banked
 10595  012142  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10596  012144  0E05               	movlw	5
 10597  012146  0100               	movlb	0	; () banked
 10598  012148  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10599  01214A  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10600  01214E  0100               	movlb	0	; () banked
 10601  012150  6F72               	movwf	??_Port_Set& (0+255),b
 10602  012152  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10603  012154  0E0A               	movlw	10
 10604  012156                     u10975:
 10605  012156  90D8               	bcf	status,0,c
 10606  012158  0100               	movlb	0	; () banked
 10607  01215A  3772               	rlcf	??_Port_Set& (0+255),f,b
 10608  01215C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10609  01215E  2EE8               	decfsz	wreg,f,c
 10610  012160  D7FA               	goto	u10975
 10611  012162  0100               	movlb	0	; () banked
 10612  012164  5172               	movf	??_Port_Set& (0+255),w,b
 10613  012166  0100               	movlb	0	; () banked
 10614  012168  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10615  01216A  0100               	movlb	0	; () banked
 10616  01216C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10617  01216E  0100               	movlb	0	; () banked
 10618  012170  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 10622  012172  0E08               	movlw	8
 10623  012174  0100               	movlb	0	; () banked
 10624  012176  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10625  012178  0100               	movlb	0	; () banked
 10626  01217A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10627  01217C  0E00               	movlw	0
 10628  01217E  0100               	movlb	0	; () banked
 10629  012180  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10630  012182  0100               	movlb	0	; () banked
 10631  012184  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10632  012186  0E06               	movlw	6
 10633  012188  0100               	movlb	0	; () banked
 10634  01218A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10635  01218C  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10636  012190  0100               	movlb	0	; () banked
 10637  012192  6F72               	movwf	??_Port_Set& (0+255),b
 10638  012194  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10639  012196  0E0C               	movlw	12
 10640  012198                     u10985:
 10641  012198  90D8               	bcf	status,0,c
 10642  01219A  0100               	movlb	0	; () banked
 10643  01219C  3772               	rlcf	??_Port_Set& (0+255),f,b
 10644  01219E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10645  0121A0  2EE8               	decfsz	wreg,f,c
 10646  0121A2  D7FA               	goto	u10985
 10647  0121A4  0100               	movlb	0	; () banked
 10648  0121A6  5172               	movf	??_Port_Set& (0+255),w,b
 10649  0121A8  0100               	movlb	0	; () banked
 10650  0121AA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10651  0121AC  0100               	movlb	0	; () banked
 10652  0121AE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10653  0121B0  0100               	movlb	0	; () banked
 10654  0121B2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 10658  0121B4  0E08               	movlw	8
 10659  0121B6  0100               	movlb	0	; () banked
 10660  0121B8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 10661  0121BA  0100               	movlb	0	; () banked
 10662  0121BC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 10663  0121BE  0E00               	movlw	0
 10664  0121C0  0100               	movlb	0	; () banked
 10665  0121C2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 10666  0121C4  0100               	movlb	0	; () banked
 10667  0121C6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 10668  0121C8  0E07               	movlw	7
 10669  0121CA  0100               	movlb	0	; () banked
 10670  0121CC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 10671  0121CE  EC48  F0BC         	call	_Word_GetPair	;wreg free
 10672  0121D2  0100               	movlb	0	; () banked
 10673  0121D4  6F72               	movwf	??_Port_Set& (0+255),b
 10674  0121D6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 10675  0121D8  0E0E               	movlw	14
 10676  0121DA                     u10995:
 10677  0121DA  90D8               	bcf	status,0,c
 10678  0121DC  0100               	movlb	0	; () banked
 10679  0121DE  3772               	rlcf	??_Port_Set& (0+255),f,b
 10680  0121E0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 10681  0121E2  2EE8               	decfsz	wreg,f,c
 10682  0121E4  D7FA               	goto	u10995
 10683  0121E6  0100               	movlb	0	; () banked
 10684  0121E8  5172               	movf	??_Port_Set& (0+255),w,b
 10685  0121EA  0100               	movlb	0	; () banked
 10686  0121EC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 10687  0121EE  0100               	movlb	0	; () banked
 10688  0121F0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 10689  0121F2  0100               	movlb	0	; () banked
 10690  0121F4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 10691                           
 10692                           ;Port.c: 584: if (TypeRequired == TypeActual)
 10693  0121F6  0100               	movlb	0	; () banked
 10694  0121F8  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 10695  0121FA  0100               	movlb	0	; () banked
 10696  0121FC  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 10697  0121FE  E148               	bnz	l528
 10698  012200  0100               	movlb	0	; () banked
 10699  012202  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 10700  012204  0100               	movlb	0	; () banked
 10701  012206  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 10702  012208  A4D8               	btfss	status,2,c
 10703  01220A  0012               	return	
 10704  01220C  D032               	goto	l13709
 10705  01220E                     l13699:
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 10709  01220E  0100               	movlb	0	; () banked
 10710  012210  EE20 F002          	lfsr	2,2
 10711  012214  516F               	movf	Port_Set@pInput& (0+255),w,b
 10712  012216  26D9               	addwf	fsr2l,f,c
 10713  012218  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 10714  01221A  22DA               	addwfc	fsr2h,f,c
 10715  01221C  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 10716  012220  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 10717  012224  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 10718  012228  ECA3  F0BF         	call	_Byte_SetByte	;wreg free
 10719                           
 10720                           ;Port.c: 594: break;
 10721  01222C  0012               	return	
 10722  01222E                     l13701:
 10723                           
 10724                           ;Port.c: 597: pValue = ~pValue;
 10725  01222E  0100               	movlb	0	; () banked
 10726  012230  1F71               	comf	Port_Set@pValue& (0+255),f,b
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 10730  012232  0100               	movlb	0	; () banked
 10731  012234  EE20 F002          	lfsr	2,2
 10732  012238  516F               	movf	Port_Set@pInput& (0+255),w,b
 10733  01223A  26D9               	addwf	fsr2l,f,c
 10734  01223C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 10735  01223E  22DA               	addwfc	fsr2h,f,c
 10736  012240  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 10737  012244  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 10738  012248  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 10739  01224C  ECA3  F0BF         	call	_Byte_SetByte	;wreg free
 10740                           
 10741                           ;Port.c: 599: break;
 10742  012250  0012               	return	
 10743  012252                     l13705:
 10744                           
 10745                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 10746  012252  0100               	movlb	0	; () banked
 10747  012254  EE20 F004          	lfsr	2,4
 10748  012258  516F               	movf	Port_Set@pInput& (0+255),w,b
 10749  01225A  26D9               	addwf	fsr2l,f,c
 10750  01225C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 10751  01225E  22DA               	addwfc	fsr2h,f,c
 10752  012260  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 10753  012264  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 10754  012268  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 10755  01226C  ECA3  F0BF         	call	_Byte_SetByte	;wreg free
 10756                           
 10757                           ;Port.c: 606: }
 10758                           
 10759                           ;Port.c: 605: break;
 10760                           
 10761                           ;Port.c: 604: default:
 10762                           
 10763                           ;Port.c: 603: break;
 10764  012270  0012               	return	
 10765  012272                     l13709:
 10766  012272  0100               	movlb	0	; () banked
 10767  012274  5186               	movf	Port_Set@Type& (0+255),w,b
 10768                           
 10769                           ; Switch size 1, requested type "space"
 10770                           ; Number of cases is 4, Range of values is 0 to 3
 10771                           ; switch strategies available:
 10772                           ; Name         Instructions Cycles
 10773                           ; simple_byte           13     7 (average)
 10774                           ;	Chosen strategy is simple_byte
 10775  012276  0A00               	xorlw	0	; case 0
 10776  012278  B4D8               	btfsc	status,2,c
 10777  01227A  0012               	return	
 10778  01227C  0A01               	xorlw	1	; case 1
 10779  01227E  B4D8               	btfsc	status,2,c
 10780  012280  D7C6               	goto	l13699
 10781  012282  0A03               	xorlw	3	; case 2
 10782  012284  B4D8               	btfsc	status,2,c
 10783  012286  D7D3               	goto	l13701
 10784  012288  0A01               	xorlw	1	; case 3
 10785  01228A  A4D8               	btfss	status,2,c
 10786                           
 10787                           ; BSR set to: 0
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;Port.c: 607: }
 10791  01228C  0012               	return	
 10792  01228E  D7E1               	goto	l13705
 10793  012290                     l528:
 10794  012290  0012               	return		;funcret
 10795  012292                     __end_of_Port_Set:
 10796                           	opt stack 0
 10797                           tosu	equ	0xFFF
 10798                           tosh	equ	0xFFE
 10799                           tosl	equ	0xFFD
 10800                           pclath	equ	0xFFA
 10801                           tblptru	equ	0xFF8
 10802                           tblptrh	equ	0xFF7
 10803                           tblptrl	equ	0xFF6
 10804                           tablat	equ	0xFF5
 10805                           prodh	equ	0xFF4
 10806                           prodl	equ	0xFF3
 10807                           postinc0	equ	0xFEE
 10808                           wreg	equ	0xFE8
 10809                           indf1	equ	0xFE7
 10810                           postdec1	equ	0xFE5
 10811                           fsr1h	equ	0xFE2
 10812                           fsr1l	equ	0xFE1
 10813                           indf2	equ	0xFDF
 10814                           postinc2	equ	0xFDE
 10815                           postdec2	equ	0xFDD
 10816                           plusw2	equ	0xFDB
 10817                           fsr2h	equ	0xFDA
 10818                           fsr2l	equ	0xFD9
 10819                           status	equ	0xFD8
 10820                           
 10821 ;; *************** function _Byte_SetByte *****************
 10822 ;; Defined at:
 10823 ;;		line 110 in file "Library/Types.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10826 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 10827 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 10828 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 10829 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 10830 ;;		 -> NULL(0), 
 10831 ;;  pValue          1    2[BANK0 ] unsigned char 
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;		None
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  1    wreg      void 
 10836 ;; Registers used:
 10837 ;;		fsr2l, fsr2h
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10843 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10846 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;Total ram usage:        3 bytes
 10848 ;; Hardware stack levels used:    1
 10849 ;; Hardware stack levels required when called:    7
 10850 ;; This function calls:
 10851 ;;		Nothing
 10852 ;; This function is called by:
 10853 ;;		_Port_Set
 10854 ;;		_I2C_Init
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           	psect	text44
 10859  017F46                     __ptext44:
 10860                           	opt stack 0
 10861  017F46                     _Byte_SetByte:
 10862                           	opt stack 19
 10863                           
 10864                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 10865                           
 10866                           ;incstack = 0
 10867  017F46  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 10868  017F4A  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 10869  017F4E  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 10870  017F52  0012               	return		;funcret
 10871  017F54                     __end_of_Byte_SetByte:
 10872                           	opt stack 0
 10873                           tosu	equ	0xFFF
 10874                           tosh	equ	0xFFE
 10875                           tosl	equ	0xFFD
 10876                           pclath	equ	0xFFA
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           prodh	equ	0xFF4
 10882                           prodl	equ	0xFF3
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           indf1	equ	0xFE7
 10886                           postdec1	equ	0xFE5
 10887                           fsr1h	equ	0xFE2
 10888                           fsr1l	equ	0xFE1
 10889                           indf2	equ	0xFDF
 10890                           postinc2	equ	0xFDE
 10891                           postdec2	equ	0xFDD
 10892                           plusw2	equ	0xFDB
 10893                           fsr2h	equ	0xFDA
 10894                           fsr2l	equ	0xFD9
 10895                           status	equ	0xFD8
 10896                           
 10897 ;; *************** function _GetPortTRIS *****************
 10898 ;; Defined at:
 10899 ;;		line 67 in file "Library/Port.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;  pInput          1    wreg     enum E6786
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  pInput          1    2[BANK0 ] enum E6786
 10904 ;; Return value:  Size  Location     Type
 10905 ;;                  2    0[BANK0 ] PTR struct Byte
 10906 ;; Registers used:
 10907 ;;		wreg, status,2, status,0
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10913 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;Total ram usage:        3 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; Hardware stack levels required when called:    7
 10920 ;; This function calls:
 10921 ;;		Nothing
 10922 ;; This function is called by:
 10923 ;;		_Port_Init
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           	psect	text45
 10928  016018                     __ptext45:
 10929                           	opt stack 0
 10930  016018                     _GetPortTRIS:
 10931                           	opt stack 20
 10932                           
 10933                           ;incstack = 0
 10934                           ;GetPortTRIS@pInput stored from wreg
 10935  016018  0100               	movlb	0	; () banked
 10936  01601A  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 10937                           
 10938                           ;Port.c: 69: switch (pInput)
 10939  01601C  D038               	goto	l13651
 10940  01601E                     l13617:
 10941                           
 10942                           ;Port.c: 72: return (BytePtr)&TRISA;
 10943  01601E  0E92               	movlw	146
 10944  016020  0100               	movlb	0	; () banked
 10945  016022  6F60               	movwf	?_GetPortTRIS& (0+255),b
 10946  016024  0E0F               	movlw	15
 10947  016026  0100               	movlb	0	; () banked
 10948  016028  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 10949                           
 10950                           ; BSR set to: 0
 10951  01602A  0012               	return	
 10952  01602C                     l13621:
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;Port.c: 74: return (BytePtr)&TRISB;
 10956  01602C  0E93               	movlw	147
 10957  01602E  0100               	movlb	0	; () banked
 10958  016030  6F60               	movwf	?_GetPortTRIS& (0+255),b
 10959  016032  0E0F               	movlw	15
 10960  016034  0100               	movlb	0	; () banked
 10961  016036  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 10962                           
 10963                           ; BSR set to: 0
 10964  016038  0012               	return	
 10965  01603A                     l13625:
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;Port.c: 76: return (BytePtr)&TRISC;
 10969  01603A  0E94               	movlw	148
 10970  01603C  0100               	movlb	0	; () banked
 10971  01603E  6F60               	movwf	?_GetPortTRIS& (0+255),b
 10972  016040  0E0F               	movlw	15
 10973  016042  0100               	movlb	0	; () banked
 10974  016044  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 10975                           
 10976                           ; BSR set to: 0
 10977  016046  0012               	return	
 10978  016048                     l13629:
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;Port.c: 78: return (BytePtr)&TRISD;
 10982  016048  0E95               	movlw	149
 10983  01604A  0100               	movlb	0	; () banked
 10984  01604C  6F60               	movwf	?_GetPortTRIS& (0+255),b
 10985  01604E  0E0F               	movlw	15
 10986  016050  0100               	movlb	0	; () banked
 10987  016052  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 10988                           
 10989                           ; BSR set to: 0
 10990  016054  0012               	return	
 10991  016056                     l13633:
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;Port.c: 80: return (BytePtr)&TRISE;
 10995  016056  0E96               	movlw	150
 10996  016058  0100               	movlb	0	; () banked
 10997  01605A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 10998  01605C  0E0F               	movlw	15
 10999  01605E  0100               	movlb	0	; () banked
 11000  016060  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11001                           
 11002                           ; BSR set to: 0
 11003  016062  0012               	return	
 11004  016064                     l13637:
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;Port.c: 82: return (BytePtr)&TRISF;
 11008  016064  0E97               	movlw	151
 11009  016066  0100               	movlb	0	; () banked
 11010  016068  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11011  01606A  0E0F               	movlw	15
 11012  01606C  0100               	movlb	0	; () banked
 11013  01606E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11014                           
 11015                           ; BSR set to: 0
 11016  016070  0012               	return	
 11017  016072                     l13641:
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;Port.c: 84: return (BytePtr)&TRISG;
 11021  016072  0E98               	movlw	152
 11022  016074  0100               	movlb	0	; () banked
 11023  016076  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11024  016078  0E0F               	movlw	15
 11025  01607A  0100               	movlb	0	; () banked
 11026  01607C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11027                           
 11028                           ; BSR set to: 0
 11029  01607E  0012               	return	
 11030  016080                     l13645:
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;Port.c: 86: return (void*)0;
 11034  016080  0E00               	movlw	0
 11035  016082  0100               	movlb	0	; () banked
 11036  016084  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11037  016086  0E00               	movlw	0
 11038  016088  0100               	movlb	0	; () banked
 11039  01608A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;Port.c: 87: }
 11043                           
 11044                           ; BSR set to: 0
 11045  01608C  0012               	return	
 11046  01608E                     l13651:
 11047  01608E  0100               	movlb	0	; () banked
 11048  016090  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 11049                           
 11050                           ; Switch size 1, requested type "space"
 11051                           ; Number of cases is 7, Range of values is 0 to 6
 11052                           ; switch strategies available:
 11053                           ; Name         Instructions Cycles
 11054                           ; simple_byte           22    12 (average)
 11055                           ;	Chosen strategy is simple_byte
 11056  016092  0A00               	xorlw	0	; case 0
 11057  016094  B4D8               	btfsc	status,2,c
 11058  016096  D7C3               	goto	l13617
 11059  016098  0A01               	xorlw	1	; case 1
 11060  01609A  B4D8               	btfsc	status,2,c
 11061  01609C  D7C7               	goto	l13621
 11062  01609E  0A03               	xorlw	3	; case 2
 11063  0160A0  B4D8               	btfsc	status,2,c
 11064  0160A2  D7CB               	goto	l13625
 11065  0160A4  0A01               	xorlw	1	; case 3
 11066  0160A6  B4D8               	btfsc	status,2,c
 11067  0160A8  D7CF               	goto	l13629
 11068  0160AA  0A07               	xorlw	7	; case 4
 11069  0160AC  B4D8               	btfsc	status,2,c
 11070  0160AE  D7D3               	goto	l13633
 11071  0160B0  0A01               	xorlw	1	; case 5
 11072  0160B2  B4D8               	btfsc	status,2,c
 11073  0160B4  D7D7               	goto	l13637
 11074  0160B6  0A03               	xorlw	3	; case 6
 11075  0160B8  B4D8               	btfsc	status,2,c
 11076  0160BA  D7DB               	goto	l13641
 11077  0160BC  D7E1               	goto	l13645
 11078  0160BE                     __end_of_GetPortTRIS:
 11079                           	opt stack 0
 11080                           tosu	equ	0xFFF
 11081                           tosh	equ	0xFFE
 11082                           tosl	equ	0xFFD
 11083                           pclath	equ	0xFFA
 11084                           tblptru	equ	0xFF8
 11085                           tblptrh	equ	0xFF7
 11086                           tblptrl	equ	0xFF6
 11087                           tablat	equ	0xFF5
 11088                           prodh	equ	0xFF4
 11089                           prodl	equ	0xFF3
 11090                           postinc0	equ	0xFEE
 11091                           wreg	equ	0xFE8
 11092                           indf1	equ	0xFE7
 11093                           postdec1	equ	0xFE5
 11094                           fsr1h	equ	0xFE2
 11095                           fsr1l	equ	0xFE1
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           postdec2	equ	0xFDD
 11099                           plusw2	equ	0xFDB
 11100                           fsr2h	equ	0xFDA
 11101                           fsr2l	equ	0xFD9
 11102                           status	equ	0xFD8
 11103                           
 11104 ;; *************** function _GetPortProperties *****************
 11105 ;; Defined at:
 11106 ;;		line 21 in file "Library/Port.c"
 11107 ;; Parameters:    Size  Location     Type
 11108 ;;  pInput          1    wreg     enum E6786
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;  pInput          1    2[BANK0 ] enum E6786
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  2    0[BANK0 ] PTR struct PortProperty
 11113 ;; Registers used:
 11114 ;;		wreg, status,2, status,0
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;Total ram usage:        3 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    7
 11127 ;; This function calls:
 11128 ;;		Nothing
 11129 ;; This function is called by:
 11130 ;;		_Port_Init
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text46
 11135  0160BE                     __ptext46:
 11136                           	opt stack 0
 11137  0160BE                     _GetPortProperties:
 11138                           	opt stack 20
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;incstack = 0
 11142                           ;GetPortProperties@pInput stored from wreg
 11143  0160BE  0100               	movlb	0	; () banked
 11144  0160C0  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 11145                           
 11146                           ;Port.c: 23: switch (pInput)
 11147  0160C2  D038               	goto	l13575
 11148  0160C4                     l13541:
 11149                           
 11150                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 11151  0160C4  0E05               	movlw	low _PortA_Property
 11152  0160C6  0100               	movlb	0	; () banked
 11153  0160C8  6F60               	movwf	?_GetPortProperties& (0+255),b
 11154  0160CA  0EFF               	movlw	high _PortA_Property
 11155  0160CC  0100               	movlb	0	; () banked
 11156  0160CE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11157                           
 11158                           ; BSR set to: 0
 11159  0160D0  0012               	return	
 11160  0160D2                     l13545:
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 11164  0160D2  0E03               	movlw	low _PortB_Property
 11165  0160D4  0100               	movlb	0	; () banked
 11166  0160D6  6F60               	movwf	?_GetPortProperties& (0+255),b
 11167  0160D8  0EFF               	movlw	high _PortB_Property
 11168  0160DA  0100               	movlb	0	; () banked
 11169  0160DC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11170                           
 11171                           ; BSR set to: 0
 11172  0160DE  0012               	return	
 11173  0160E0                     l13549:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 11177  0160E0  0E01               	movlw	low _PortC_Property
 11178  0160E2  0100               	movlb	0	; () banked
 11179  0160E4  6F60               	movwf	?_GetPortProperties& (0+255),b
 11180  0160E6  0EFF               	movlw	high _PortC_Property
 11181  0160E8  0100               	movlb	0	; () banked
 11182  0160EA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11183                           
 11184                           ; BSR set to: 0
 11185  0160EC  0012               	return	
 11186  0160EE                     l13553:
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 11190  0160EE  0EFF               	movlw	low _PortD_Property
 11191  0160F0  0100               	movlb	0	; () banked
 11192  0160F2  6F60               	movwf	?_GetPortProperties& (0+255),b
 11193  0160F4  0EFE               	movlw	high _PortD_Property
 11194  0160F6  0100               	movlb	0	; () banked
 11195  0160F8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11196                           
 11197                           ; BSR set to: 0
 11198  0160FA  0012               	return	
 11199  0160FC                     l13557:
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 11203  0160FC  0EFD               	movlw	low _PortE_Property
 11204  0160FE  0100               	movlb	0	; () banked
 11205  016100  6F60               	movwf	?_GetPortProperties& (0+255),b
 11206  016102  0EFE               	movlw	high _PortE_Property
 11207  016104  0100               	movlb	0	; () banked
 11208  016106  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11209                           
 11210                           ; BSR set to: 0
 11211  016108  0012               	return	
 11212  01610A                     l13561:
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 11216  01610A  0EFB               	movlw	low _PortF_Property
 11217  01610C  0100               	movlb	0	; () banked
 11218  01610E  6F60               	movwf	?_GetPortProperties& (0+255),b
 11219  016110  0EFE               	movlw	high _PortF_Property
 11220  016112  0100               	movlb	0	; () banked
 11221  016114  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11222                           
 11223                           ; BSR set to: 0
 11224  016116  0012               	return	
 11225  016118                     l13565:
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 11229  016118  0EF9               	movlw	low _PortG_Property
 11230  01611A  0100               	movlb	0	; () banked
 11231  01611C  6F60               	movwf	?_GetPortProperties& (0+255),b
 11232  01611E  0EFE               	movlw	high _PortG_Property
 11233  016120  0100               	movlb	0	; () banked
 11234  016122  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11235                           
 11236                           ; BSR set to: 0
 11237  016124  0012               	return	
 11238  016126                     l13569:
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;Port.c: 40: return (void*)0;
 11242  016126  0E00               	movlw	0
 11243  016128  0100               	movlb	0	; () banked
 11244  01612A  6F60               	movwf	?_GetPortProperties& (0+255),b
 11245  01612C  0E00               	movlw	0
 11246  01612E  0100               	movlb	0	; () banked
 11247  016130  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;Port.c: 41: }
 11251                           
 11252                           ; BSR set to: 0
 11253  016132  0012               	return	
 11254  016134                     l13575:
 11255  016134  0100               	movlb	0	; () banked
 11256  016136  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 11257                           
 11258                           ; Switch size 1, requested type "space"
 11259                           ; Number of cases is 7, Range of values is 0 to 6
 11260                           ; switch strategies available:
 11261                           ; Name         Instructions Cycles
 11262                           ; simple_byte           22    12 (average)
 11263                           ;	Chosen strategy is simple_byte
 11264  016138  0A00               	xorlw	0	; case 0
 11265  01613A  B4D8               	btfsc	status,2,c
 11266  01613C  D7C3               	goto	l13541
 11267  01613E  0A01               	xorlw	1	; case 1
 11268  016140  B4D8               	btfsc	status,2,c
 11269  016142  D7C7               	goto	l13545
 11270  016144  0A03               	xorlw	3	; case 2
 11271  016146  B4D8               	btfsc	status,2,c
 11272  016148  D7CB               	goto	l13549
 11273  01614A  0A01               	xorlw	1	; case 3
 11274  01614C  B4D8               	btfsc	status,2,c
 11275  01614E  D7CF               	goto	l13553
 11276  016150  0A07               	xorlw	7	; case 4
 11277  016152  B4D8               	btfsc	status,2,c
 11278  016154  D7D3               	goto	l13557
 11279  016156  0A01               	xorlw	1	; case 5
 11280  016158  B4D8               	btfsc	status,2,c
 11281  01615A  D7D7               	goto	l13561
 11282  01615C  0A03               	xorlw	3	; case 6
 11283  01615E  B4D8               	btfsc	status,2,c
 11284  016160  D7DB               	goto	l13565
 11285  016162  D7E1               	goto	l13569
 11286  016164                     __end_of_GetPortProperties:
 11287                           	opt stack 0
 11288                           tosu	equ	0xFFF
 11289                           tosh	equ	0xFFE
 11290                           tosl	equ	0xFFD
 11291                           pclath	equ	0xFFA
 11292                           tblptru	equ	0xFF8
 11293                           tblptrh	equ	0xFF7
 11294                           tblptrl	equ	0xFF6
 11295                           tablat	equ	0xFF5
 11296                           prodh	equ	0xFF4
 11297                           prodl	equ	0xFF3
 11298                           postinc0	equ	0xFEE
 11299                           wreg	equ	0xFE8
 11300                           indf1	equ	0xFE7
 11301                           postdec1	equ	0xFE5
 11302                           fsr1h	equ	0xFE2
 11303                           fsr1l	equ	0xFE1
 11304                           indf2	equ	0xFDF
 11305                           postinc2	equ	0xFDE
 11306                           postdec2	equ	0xFDD
 11307                           plusw2	equ	0xFDB
 11308                           fsr2h	equ	0xFDA
 11309                           fsr2l	equ	0xFD9
 11310                           status	equ	0xFD8
 11311                           
 11312 ;; *************** function _GetPortPORT *****************
 11313 ;; Defined at:
 11314 ;;		line 44 in file "Library/Port.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;  pInput          1    wreg     enum E6786
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;  pInput          1    2[BANK0 ] enum E6786
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  2    0[BANK0 ] PTR struct Byte
 11321 ;; Registers used:
 11322 ;;		wreg, status,2, status,0
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11332 ;;Total ram usage:        3 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    7
 11335 ;; This function calls:
 11336 ;;		Nothing
 11337 ;; This function is called by:
 11338 ;;		_Port_Init
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           	psect	text47
 11343  016164                     __ptext47:
 11344                           	opt stack 0
 11345  016164                     _GetPortPORT:
 11346                           	opt stack 20
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;incstack = 0
 11350                           ;GetPortPORT@pInput stored from wreg
 11351  016164  0100               	movlb	0	; () banked
 11352  016166  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 11353                           
 11354                           ;Port.c: 46: switch (pInput)
 11355  016168  D038               	goto	l13613
 11356  01616A                     l13579:
 11357                           
 11358                           ;Port.c: 49: return (BytePtr)&PORTA;
 11359  01616A  0E80               	movlw	128
 11360  01616C  0100               	movlb	0	; () banked
 11361  01616E  6F60               	movwf	?_GetPortPORT& (0+255),b
 11362  016170  0E0F               	movlw	15
 11363  016172  0100               	movlb	0	; () banked
 11364  016174  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11365                           
 11366                           ; BSR set to: 0
 11367  016176  0012               	return	
 11368  016178                     l13583:
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;Port.c: 51: return (BytePtr)&PORTB;
 11372  016178  0E81               	movlw	129
 11373  01617A  0100               	movlb	0	; () banked
 11374  01617C  6F60               	movwf	?_GetPortPORT& (0+255),b
 11375  01617E  0E0F               	movlw	15
 11376  016180  0100               	movlb	0	; () banked
 11377  016182  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11378                           
 11379                           ; BSR set to: 0
 11380  016184  0012               	return	
 11381  016186                     l13587:
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;Port.c: 53: return (BytePtr)&PORTC;
 11385  016186  0E82               	movlw	130
 11386  016188  0100               	movlb	0	; () banked
 11387  01618A  6F60               	movwf	?_GetPortPORT& (0+255),b
 11388  01618C  0E0F               	movlw	15
 11389  01618E  0100               	movlb	0	; () banked
 11390  016190  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11391                           
 11392                           ; BSR set to: 0
 11393  016192  0012               	return	
 11394  016194                     l13591:
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;Port.c: 55: return (BytePtr)&PORTD;
 11398  016194  0E83               	movlw	131
 11399  016196  0100               	movlb	0	; () banked
 11400  016198  6F60               	movwf	?_GetPortPORT& (0+255),b
 11401  01619A  0E0F               	movlw	15
 11402  01619C  0100               	movlb	0	; () banked
 11403  01619E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11404                           
 11405                           ; BSR set to: 0
 11406  0161A0  0012               	return	
 11407  0161A2                     l13595:
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;Port.c: 57: return (BytePtr)&PORTE;
 11411  0161A2  0E84               	movlw	132
 11412  0161A4  0100               	movlb	0	; () banked
 11413  0161A6  6F60               	movwf	?_GetPortPORT& (0+255),b
 11414  0161A8  0E0F               	movlw	15
 11415  0161AA  0100               	movlb	0	; () banked
 11416  0161AC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11417                           
 11418                           ; BSR set to: 0
 11419  0161AE  0012               	return	
 11420  0161B0                     l13599:
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;Port.c: 59: return (BytePtr)&PORTF;
 11424  0161B0  0E85               	movlw	133
 11425  0161B2  0100               	movlb	0	; () banked
 11426  0161B4  6F60               	movwf	?_GetPortPORT& (0+255),b
 11427  0161B6  0E0F               	movlw	15
 11428  0161B8  0100               	movlb	0	; () banked
 11429  0161BA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11430                           
 11431                           ; BSR set to: 0
 11432  0161BC  0012               	return	
 11433  0161BE                     l13603:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;Port.c: 61: return (BytePtr)&PORTG;
 11437  0161BE  0E86               	movlw	134
 11438  0161C0  0100               	movlb	0	; () banked
 11439  0161C2  6F60               	movwf	?_GetPortPORT& (0+255),b
 11440  0161C4  0E0F               	movlw	15
 11441  0161C6  0100               	movlb	0	; () banked
 11442  0161C8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11443                           
 11444                           ; BSR set to: 0
 11445  0161CA  0012               	return	
 11446  0161CC                     l13607:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;Port.c: 63: return (void*)0;
 11450  0161CC  0E00               	movlw	0
 11451  0161CE  0100               	movlb	0	; () banked
 11452  0161D0  6F60               	movwf	?_GetPortPORT& (0+255),b
 11453  0161D2  0E00               	movlw	0
 11454  0161D4  0100               	movlb	0	; () banked
 11455  0161D6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;Port.c: 64: }
 11459                           
 11460                           ; BSR set to: 0
 11461  0161D8  0012               	return	
 11462  0161DA                     l13613:
 11463  0161DA  0100               	movlb	0	; () banked
 11464  0161DC  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 11465                           
 11466                           ; Switch size 1, requested type "space"
 11467                           ; Number of cases is 7, Range of values is 0 to 6
 11468                           ; switch strategies available:
 11469                           ; Name         Instructions Cycles
 11470                           ; simple_byte           22    12 (average)
 11471                           ;	Chosen strategy is simple_byte
 11472  0161DE  0A00               	xorlw	0	; case 0
 11473  0161E0  B4D8               	btfsc	status,2,c
 11474  0161E2  D7C3               	goto	l13579
 11475  0161E4  0A01               	xorlw	1	; case 1
 11476  0161E6  B4D8               	btfsc	status,2,c
 11477  0161E8  D7C7               	goto	l13583
 11478  0161EA  0A03               	xorlw	3	; case 2
 11479  0161EC  B4D8               	btfsc	status,2,c
 11480  0161EE  D7CB               	goto	l13587
 11481  0161F0  0A01               	xorlw	1	; case 3
 11482  0161F2  B4D8               	btfsc	status,2,c
 11483  0161F4  D7CF               	goto	l13591
 11484  0161F6  0A07               	xorlw	7	; case 4
 11485  0161F8  B4D8               	btfsc	status,2,c
 11486  0161FA  D7D3               	goto	l13595
 11487  0161FC  0A01               	xorlw	1	; case 5
 11488  0161FE  B4D8               	btfsc	status,2,c
 11489  016200  D7D7               	goto	l13599
 11490  016202  0A03               	xorlw	3	; case 6
 11491  016204  B4D8               	btfsc	status,2,c
 11492  016206  D7DB               	goto	l13603
 11493  016208  D7E1               	goto	l13607
 11494  01620A                     __end_of_GetPortPORT:
 11495                           	opt stack 0
 11496                           tosu	equ	0xFFF
 11497                           tosh	equ	0xFFE
 11498                           tosl	equ	0xFFD
 11499                           pclath	equ	0xFFA
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           postinc0	equ	0xFEE
 11507                           wreg	equ	0xFE8
 11508                           indf1	equ	0xFE7
 11509                           postdec1	equ	0xFE5
 11510                           fsr1h	equ	0xFE2
 11511                           fsr1l	equ	0xFE1
 11512                           indf2	equ	0xFDF
 11513                           postinc2	equ	0xFDE
 11514                           postdec2	equ	0xFDD
 11515                           plusw2	equ	0xFDB
 11516                           fsr2h	equ	0xFDA
 11517                           fsr2l	equ	0xFD9
 11518                           status	equ	0xFD8
 11519                           
 11520 ;; *************** function _LED_Init *****************
 11521 ;; Defined at:
 11522 ;;		line 15 in file "Library/LED.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;  pLED            1    wreg     enum E6739
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;  pLED            1   45[BANK0 ] enum E6739
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1    wreg      void 
 11529 ;; Registers used:
 11530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11540 ;;Total ram usage:        1 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:   12
 11543 ;; This function calls:
 11544 ;;		_LED_Set
 11545 ;;		_Port_SetPinType
 11546 ;; This function is called by:
 11547 ;;		_MXK_Init
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           	psect	text48
 11552  017256                     __ptext48:
 11553                           	opt stack 0
 11554  017256                     _LED_Init:
 11555                           	opt stack 16
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;incstack = 0
 11559                           ;LED_Init@pLED stored from wreg
 11560  017256  0100               	movlb	0	; () banked
 11561  017258  6F8D               	movwf	LED_Init@pLED& (0+255),b
 11562                           
 11563                           ;LED.c: 17: switch (pLED)
 11564  01725A  D01E               	goto	l14527
 11565  01725C                     l14521:
 11566                           
 11567                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 11568  01725C  0EEA               	movlw	low _PortC
 11569  01725E  0100               	movlb	0	; () banked
 11570  017260  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11571  017262  0E00               	movlw	high _PortC
 11572  017264  0100               	movlb	0	; () banked
 11573  017266  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11574  017268  0E00               	movlw	0
 11575  01726A  0100               	movlb	0	; () banked
 11576  01726C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11577  01726E  0E03               	movlw	3
 11578  017270  0100               	movlb	0	; () banked
 11579  017272  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11580  017274  EC93  F09C         	call	_Port_SetPinType	;wreg free
 11581                           
 11582                           ;LED.c: 21: break;
 11583  017278  D017               	goto	l14529
 11584  01727A                     l14523:
 11585                           
 11586                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 11587  01727A  0EEA               	movlw	low _PortC
 11588  01727C  0100               	movlb	0	; () banked
 11589  01727E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11590  017280  0E00               	movlw	high _PortC
 11591  017282  0100               	movlb	0	; () banked
 11592  017284  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11593  017286  0E01               	movlw	1
 11594  017288  0100               	movlb	0	; () banked
 11595  01728A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11596  01728C  0E03               	movlw	3
 11597  01728E  0100               	movlb	0	; () banked
 11598  017290  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11599  017292  EC93  F09C         	call	_Port_SetPinType	;wreg free
 11600                           
 11601                           ;LED.c: 25: }
 11602                           
 11603                           ;LED.c: 24: break;
 11604  017296  D008               	goto	l14529
 11605  017298                     l14527:
 11606  017298  0100               	movlb	0	; () banked
 11607  01729A  518D               	movf	LED_Init@pLED& (0+255),w,b
 11608                           
 11609                           ; Switch size 1, requested type "space"
 11610                           ; Number of cases is 2, Range of values is 0 to 1
 11611                           ; switch strategies available:
 11612                           ; Name         Instructions Cycles
 11613                           ; simple_byte            7     4 (average)
 11614                           ;	Chosen strategy is simple_byte
 11615  01729C  0A00               	xorlw	0	; case 0
 11616  01729E  B4D8               	btfsc	status,2,c
 11617  0172A0  D7DD               	goto	l14521
 11618  0172A2  0A01               	xorlw	1	; case 1
 11619  0172A4  B4D8               	btfsc	status,2,c
 11620  0172A6  D7E9               	goto	l14523
 11621  0172A8                     l14529:
 11622                           
 11623                           ;LED.c: 26: LED_Set(pLED, 0);
 11624  0172A8  0E00               	movlw	0
 11625  0172AA  0100               	movlb	0	; () banked
 11626  0172AC  6F74               	movwf	LED_Set@pValue& (0+255),b
 11627  0172AE  0100               	movlb	0	; () banked
 11628  0172B0  518D               	movf	LED_Init@pLED& (0+255),w,b
 11629  0172B2  EC0C  F0BA         	call	_LED_Set
 11630  0172B6  0012               	return		;funcret
 11631  0172B8                     __end_of_LED_Init:
 11632                           	opt stack 0
 11633                           tosu	equ	0xFFF
 11634                           tosh	equ	0xFFE
 11635                           tosl	equ	0xFFD
 11636                           pclath	equ	0xFFA
 11637                           tblptru	equ	0xFF8
 11638                           tblptrh	equ	0xFF7
 11639                           tblptrl	equ	0xFF6
 11640                           tablat	equ	0xFF5
 11641                           prodh	equ	0xFF4
 11642                           prodl	equ	0xFF3
 11643                           postinc0	equ	0xFEE
 11644                           wreg	equ	0xFE8
 11645                           indf1	equ	0xFE7
 11646                           postdec1	equ	0xFE5
 11647                           fsr1h	equ	0xFE2
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           plusw2	equ	0xFDB
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function _LED_Set *****************
 11658 ;; Defined at:
 11659 ;;		line 33 in file "Library/LED.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  pLED            1    wreg     enum E6739
 11662 ;;  pValue          1   20[BANK0 ] unsigned char 
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;  pLED            1   21[BANK0 ] enum E6739
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  1    wreg      void 
 11667 ;; Registers used:
 11668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11674 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;Total ram usage:        2 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:   11
 11681 ;; This function calls:
 11682 ;;		_Port_SetPin
 11683 ;; This function is called by:
 11684 ;;		_LED_Init
 11685 ;;		_SYSTEM_Initialize
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text49
 11690  017418                     __ptext49:
 11691                           	opt stack 0
 11692  017418                     _LED_Set:
 11693                           	opt stack 16
 11694                           
 11695                           ;incstack = 0
 11696                           ;LED_Set@pLED stored from wreg
 11697  017418  0100               	movlb	0	; () banked
 11698  01741A  6F75               	movwf	LED_Set@pLED& (0+255),b
 11699                           
 11700                           ;LED.c: 35: switch (pLED)
 11701  01741C  D01C               	goto	l13537
 11702  01741E                     l13531:
 11703                           
 11704                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 11705  01741E  0EEA               	movlw	low _PortC
 11706  017420  0100               	movlb	0	; () banked
 11707  017422  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 11708  017424  0E00               	movlw	high _PortC
 11709  017426  0100               	movlb	0	; () banked
 11710  017428  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11711  01742A  0E00               	movlw	0
 11712  01742C  0100               	movlb	0	; () banked
 11713  01742E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 11714  017430  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 11715  017434  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 11716                           
 11717                           ;LED.c: 39: break;
 11718  017438  0012               	return	
 11719  01743A                     l13533:
 11720                           
 11721                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 11722  01743A  0EEA               	movlw	low _PortC
 11723  01743C  0100               	movlb	0	; () banked
 11724  01743E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 11725  017440  0E00               	movlw	high _PortC
 11726  017442  0100               	movlb	0	; () banked
 11727  017444  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11728  017446  0E01               	movlw	1
 11729  017448  0100               	movlb	0	; () banked
 11730  01744A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 11731  01744C  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 11732  017450  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 11733                           
 11734                           ;LED.c: 43: }
 11735                           
 11736                           ;LED.c: 42: break;
 11737  017454  0012               	return	
 11738  017456                     l13537:
 11739  017456  0100               	movlb	0	; () banked
 11740  017458  5175               	movf	LED_Set@pLED& (0+255),w,b
 11741                           
 11742                           ; Switch size 1, requested type "space"
 11743                           ; Number of cases is 2, Range of values is 0 to 1
 11744                           ; switch strategies available:
 11745                           ; Name         Instructions Cycles
 11746                           ; simple_byte            7     4 (average)
 11747                           ;	Chosen strategy is simple_byte
 11748  01745A  0A00               	xorlw	0	; case 0
 11749  01745C  B4D8               	btfsc	status,2,c
 11750  01745E  D7DF               	goto	l13531
 11751  017460  0A01               	xorlw	1	; case 1
 11752  017462  A4D8               	btfss	status,2,c
 11753  017464  0012               	return	
 11754  017466  D7E9               	goto	l13533
 11755  017468                     __end_of_LED_Set:
 11756                           	opt stack 0
 11757                           tosu	equ	0xFFF
 11758                           tosh	equ	0xFFE
 11759                           tosl	equ	0xFFD
 11760                           pclath	equ	0xFFA
 11761                           tblptru	equ	0xFF8
 11762                           tblptrh	equ	0xFF7
 11763                           tblptrl	equ	0xFF6
 11764                           tablat	equ	0xFF5
 11765                           prodh	equ	0xFF4
 11766                           prodl	equ	0xFF3
 11767                           postinc0	equ	0xFEE
 11768                           wreg	equ	0xFE8
 11769                           indf1	equ	0xFE7
 11770                           postdec1	equ	0xFE5
 11771                           fsr1h	equ	0xFE2
 11772                           fsr1l	equ	0xFE1
 11773                           indf2	equ	0xFDF
 11774                           postinc2	equ	0xFDE
 11775                           postdec2	equ	0xFDD
 11776                           plusw2	equ	0xFDB
 11777                           fsr2h	equ	0xFDA
 11778                           fsr2l	equ	0xFD9
 11779                           status	equ	0xFD8
 11780                           
 11781 ;; *************** function _MXK_Dequeue *****************
 11782 ;; Defined at:
 11783 ;;		line 153 in file "Library/MXK.c"
 11784 ;; Parameters:    Size  Location     Type
 11785 ;;		None
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;		None
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  1    wreg      void 
 11790 ;; Registers used:
 11791 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;Total ram usage:        0 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:   12
 11804 ;; This function calls:
 11805 ;;		Absolute function
 11806 ;;		_Motor_Step
 11807 ;; This function is called by:
 11808 ;;		_initialise
 11809 ;;		_main
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           	psect	text50
 11814  017AFA                     __ptext50:
 11815                           	opt stack 0
 11816  017AFA                     _MXK_Dequeue:
 11817                           	opt stack 17
 11818                           
 11819                           ;MXK.c: 155: if (lQueue)
 11820                           
 11821                           ;incstack = 0
 11822  017AFA  5025               	movf	_lQueue,w,c	;volatile
 11823  017AFC  1026               	iorwf	_lQueue+1,w,c	;volatile
 11824  017AFE  1027               	iorwf	_lQueue+2,w,c	;volatile
 11825  017B00  B4D8               	btfsc	status,2,c
 11826  017B02  D00C               	goto	l16999
 11827                           
 11828                           ;MXK.c: 156: lQueue();
 11829  017B04  D801               	call	u14998
 11830  017B06  D00A               	goto	l16999
 11831  017B08                     u14998:
 11832  017B08  0005               	push	
 11833  017B0A  6EFA               	movwf	pclath,c
 11834  017B0C  5025               	movf	_lQueue,w,c	;volatile
 11835  017B0E  6EFD               	movwf	tosl,c
 11836  017B10  5026               	movf	_lQueue+1,w,c	;volatile
 11837  017B12  6EFE               	movwf	tosh,c
 11838  017B14  5027               	movf	_lQueue+2,w,c	;volatile
 11839  017B16  6EFF               	movwf	tosu,c
 11840  017B18  50FA               	movf	pclath,w,c
 11841  017B1A  0012               	return		;indir
 11842  017B1C                     l16999:
 11843                           
 11844                           ;MXK.c: 157: lQueue = 0;
 11845  017B1C  0E00               	movlw	0
 11846  017B1E  6E25               	movwf	_lQueue,c	;volatile
 11847  017B20  0E00               	movlw	0
 11848  017B22  6E26               	movwf	_lQueue+1,c	;volatile
 11849  017B24  0E00               	movlw	0
 11850  017B26  6E27               	movwf	_lQueue+2,c	;volatile
 11851  017B28  0012               	return		;funcret
 11852  017B2A                     __end_of_MXK_Dequeue:
 11853                           	opt stack 0
 11854                           tosu	equ	0xFFF
 11855                           tosh	equ	0xFFE
 11856                           tosl	equ	0xFFD
 11857                           pclath	equ	0xFFA
 11858                           tblptru	equ	0xFF8
 11859                           tblptrh	equ	0xFF7
 11860                           tblptrl	equ	0xFF6
 11861                           tablat	equ	0xFF5
 11862                           prodh	equ	0xFF4
 11863                           prodl	equ	0xFF3
 11864                           postinc0	equ	0xFEE
 11865                           wreg	equ	0xFE8
 11866                           indf1	equ	0xFE7
 11867                           postdec1	equ	0xFE5
 11868                           fsr1h	equ	0xFE2
 11869                           fsr1l	equ	0xFE1
 11870                           indf2	equ	0xFDF
 11871                           postinc2	equ	0xFDE
 11872                           postdec2	equ	0xFDD
 11873                           plusw2	equ	0xFDB
 11874                           fsr2h	equ	0xFDA
 11875                           fsr2l	equ	0xFD9
 11876                           status	equ	0xFD8
 11877                           
 11878 ;; *************** function _Motor_Step *****************
 11879 ;; Defined at:
 11880 ;;		line 75 in file "Library/Motor.c"
 11881 ;; Parameters:    Size  Location     Type
 11882 ;;		None
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;		None
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  1    wreg      void 
 11887 ;; Registers used:
 11888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;Total ram usage:        2 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:   11
 11901 ;; This function calls:
 11902 ;;		_MXK_Queue
 11903 ;;		_MXK_Release
 11904 ;;		_MXK_SwitchTo
 11905 ;;		_Port_SetPin
 11906 ;;		_Timer0_Restart
 11907 ;;		_Timer0_Stop
 11908 ;; This function is called by:
 11909 ;;		_Motor_Init
 11910 ;;		_MXK_Dequeue
 11911 ;;		_Timer0_ISR
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text51
 11916  014D84                     __ptext51:
 11917                           	opt stack 0
 11918  014D84                     _Motor_Step:
 11919                           	opt stack 0
 11920                           
 11921                           ;Skip over the trampoline to the duplicate function for level 2
 11922  014D84  B249               	btfsc	btemp,1,c
 11923  014D86  EF66  F0A8         	goto	i2_Motor_Step
 11924  014D8A                     _Motor_Step$intlevel0:
 11925                           	opt stack 17
 11926                           
 11927                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 11928                           
 11929                           ;incstack = 0
 11930  014D8A  EE20 F004          	lfsr	2,4
 11931  014D8E  502A               	movf	_lMotor,w,c
 11932  014D90  26D9               	addwf	fsr2l,f,c
 11933  014D92  502B               	movf	_lMotor+1,w,c
 11934  014D94  22DA               	addwfc	fsr2h,f,c
 11935  014D96  50DF               	movf	indf2,w,c
 11936  014D98  ECC7  F0BB         	call	_MXK_SwitchTo
 11937  014D9C  0900               	iorlw	0
 11938  014D9E  B4D8               	btfsc	status,2,c
 11939  014DA0  D07A               	goto	l14713
 11940                           
 11941                           ;Motor.c: 78: {
 11942                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 11943  014DA2  C02A  FFD9         	movff	_lMotor,fsr2l
 11944  014DA6  C02B  FFDA         	movff	_lMotor+1,fsr2h
 11945  014DAA  50DE               	movf	postinc2,w,c
 11946  014DAC  10DE               	iorwf	postinc2,w,c
 11947  014DAE  B4D8               	btfsc	status,2,c
 11948  014DB0  D06D               	goto	l14707
 11949                           
 11950                           ;Motor.c: 80: {
 11951                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 11952  014DB2  C02A  FFD9         	movff	_lMotor,fsr2l
 11953  014DB6  C02B  FFDA         	movff	_lMotor+1,fsr2h
 11954  014DBA  0E01               	movlw	1
 11955  014DBC  BEDB               	btfsc	plusw2,7,c
 11956  014DBE  D026               	goto	l14691
 11957  014DC0  0E01               	movlw	1
 11958  014DC2  50DB               	movf	plusw2,w,c
 11959  014DC4  E103               	bnz	u12340
 11960  014DC6  04DE               	decf	postinc2,w,c
 11961  014DC8  A0D8               	btfss	status,0,c
 11962  014DCA  D020               	goto	l14691
 11963  014DCC                     u12340:
 11964                           
 11965                           ;Motor.c: 83: {
 11966                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 11967  014DCC  C02A  FFD9         	movff	_lMotor,fsr2l
 11968  014DD0  C02B  FFDA         	movff	_lMotor+1,fsr2h
 11969  014DD4  28DE               	incf	postinc2,w,c
 11970  014DD6  E104               	bnz	u12350
 11971  014DD8  0E7F               	movlw	127
 11972  014DDA  18DE               	xorwf	postinc2,w,c
 11973  014DDC  B4D8               	btfsc	status,2,c
 11974  014DDE  D007               	goto	l14689
 11975  014DE0                     u12350:
 11976                           
 11977                           ;Motor.c: 85: lMotor->mDelta --;
 11978  014DE0  C02A  FFD9         	movff	_lMotor,fsr2l
 11979  014DE4  C02B  FFDA         	movff	_lMotor+1,fsr2h
 11980  014DE8  06DE               	decf	postinc2,f,c
 11981  014DEA  0E00               	movlw	0
 11982  014DEC  5ADD               	subwfb	postdec2,f,c
 11983  014DEE                     l14689:
 11984                           
 11985                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 11986  014DEE  0E97               	movlw	low _PortE
 11987  014DF0  0100               	movlb	0	; () banked
 11988  014DF2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 11989  014DF4  0E01               	movlw	high _PortE
 11990  014DF6  0100               	movlb	0	; () banked
 11991  014DF8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11992  014DFA  0E00               	movlw	0
 11993  014DFC  0100               	movlb	0	; () banked
 11994  014DFE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 11995  014E00  0E01               	movlw	1
 11996  014E02  0100               	movlb	0	; () banked
 11997  014E04  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 11998  014E06  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 11999                           
 12000                           ;Motor.c: 88: }
 12001  014E0A  D01F               	goto	l14697
 12002  014E0C                     l14691:
 12003                           
 12004                           ;Motor.c: 89: else
 12005                           ;Motor.c: 90: {
 12006                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 12007  014E0C  C02A  FFD9         	movff	_lMotor,fsr2l
 12008  014E10  C02B  FFDA         	movff	_lMotor+1,fsr2h
 12009  014E14  04DE               	decf	postinc2,w,c
 12010  014E16  E104               	bnz	u12360
 12011  014E18  0E80               	movlw	128
 12012  014E1A  18DE               	xorwf	postinc2,w,c
 12013  014E1C  B4D8               	btfsc	status,2,c
 12014  014E1E  D007               	goto	l14695
 12015  014E20                     u12360:
 12016                           
 12017                           ;Motor.c: 92: lMotor->mDelta ++;
 12018  014E20  C02A  FFD9         	movff	_lMotor,fsr2l
 12019  014E24  C02B  FFDA         	movff	_lMotor+1,fsr2h
 12020  014E28  2ADE               	incf	postinc2,f,c
 12021  014E2A  0E00               	movlw	0
 12022  014E2C  22DD               	addwfc	postdec2,f,c
 12023  014E2E                     l14695:
 12024                           
 12025                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 12026  014E2E  0E97               	movlw	low _PortE
 12027  014E30  0100               	movlb	0	; () banked
 12028  014E32  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12029  014E34  0E01               	movlw	high _PortE
 12030  014E36  0100               	movlb	0	; () banked
 12031  014E38  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12032  014E3A  0E00               	movlw	0
 12033  014E3C  0100               	movlb	0	; () banked
 12034  014E3E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12035  014E40  0E00               	movlw	0
 12036  014E42  0100               	movlb	0	; () banked
 12037  014E44  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12038  014E46  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 12039  014E4A                     l14697:
 12040                           
 12041                           ;Motor.c: 95: }
 12042                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 12043  014E4A  0E97               	movlw	low _PortE
 12044  014E4C  0100               	movlb	0	; () banked
 12045  014E4E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12046  014E50  0E01               	movlw	high _PortE
 12047  014E52  0100               	movlb	0	; () banked
 12048  014E54  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12049  014E56  0E01               	movlw	1
 12050  014E58  0100               	movlb	0	; () banked
 12051  014E5A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12052  014E5C  0E01               	movlw	1
 12053  014E5E  0100               	movlb	0	; () banked
 12054  014E60  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12055  014E62  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 12056                           
 12057                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 12058  014E66  0E97               	movlw	low _PortE
 12059  014E68  0100               	movlb	0	; () banked
 12060  014E6A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12061  014E6C  0E01               	movlw	high _PortE
 12062  014E6E  0100               	movlb	0	; () banked
 12063  014E70  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12064  014E72  0E01               	movlw	1
 12065  014E74  0100               	movlb	0	; () banked
 12066  014E76  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12067  014E78  0E00               	movlw	0
 12068  014E7A  0100               	movlb	0	; () banked
 12069  014E7C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12070  014E7E  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 12071                           
 12072                           ;Motor.c: 101: MXK_Release();
 12073  014E82  EC74  F0BF         	call	_MXK_Release	;wreg free
 12074                           
 12075                           ;Motor.c: 102: Timer0_Restart();
 12076  014E86  ECBF  F0BF         	call	_Timer0_Restart	;wreg free
 12077                           
 12078                           ;Motor.c: 103: return;
 12079  014E8A  0012               	return	
 12080  014E8C                     l14707:
 12081                           
 12082                           ;Motor.c: 104: }
 12083                           ;Motor.c: 105: MXK_Release();
 12084  014E8C  EC74  F0BF         	call	_MXK_Release	;wreg free
 12085                           
 12086                           ;Motor.c: 106: Timer0_Stop();
 12087  014E90  ECF0  F0BF         	call	_Timer0_Stop	;wreg free
 12088                           
 12089                           ;Motor.c: 107: return;
 12090  014E94  0012               	return	
 12091  014E96                     l14713:
 12092                           
 12093                           ;Motor.c: 108: }
 12094                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 12095  014E96  C0CD  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 12096  014E9A  C0CE  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 12097  014E9E  C0CF  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 12098  014EA2  ECAA  F0BF         	call	_MXK_Queue	;wreg free
 12099  014EA6  0012               	return		;funcret
 12100  014EA8                     __end_of_Motor_Step:
 12101                           	opt stack 0
 12102                           tosu	equ	0xFFF
 12103                           tosh	equ	0xFFE
 12104                           tosl	equ	0xFFD
 12105                           pclath	equ	0xFFA
 12106                           tblptru	equ	0xFF8
 12107                           tblptrh	equ	0xFF7
 12108                           tblptrl	equ	0xFF6
 12109                           tablat	equ	0xFF5
 12110                           prodh	equ	0xFF4
 12111                           prodl	equ	0xFF3
 12112                           postinc0	equ	0xFEE
 12113                           wreg	equ	0xFE8
 12114                           indf1	equ	0xFE7
 12115                           postdec1	equ	0xFE5
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           plusw2	equ	0xFDB
 12122                           fsr2h	equ	0xFDA
 12123                           fsr2l	equ	0xFD9
 12124                           status	equ	0xFD8
 12125                           
 12126 ;; *************** function _Timer0_Stop *****************
 12127 ;; Defined at:
 12128 ;;		line 89 in file "Library/Timer0.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;		None
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;		None
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      void 
 12135 ;; Registers used:
 12136 ;;		None
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12146 ;;Total ram usage:        0 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    7
 12149 ;; This function calls:
 12150 ;;		Nothing
 12151 ;; This function is called by:
 12152 ;;		_Motor_Step
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text52
 12157  017FE0                     __ptext52:
 12158                           	opt stack 0
 12159  017FE0                     _Timer0_Stop:
 12160                           	opt stack 20
 12161                           
 12162                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 12163                           
 12164                           ;incstack = 0
 12165  017FE0  9AF2               	bcf	intcon,5,c	;volatile
 12166                           
 12167                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 12168  017FE2  94F2               	bcf	intcon,2,c	;volatile
 12169  017FE4  0012               	return		;funcret
 12170  017FE6                     __end_of_Timer0_Stop:
 12171                           	opt stack 0
 12172                           tosu	equ	0xFFF
 12173                           tosh	equ	0xFFE
 12174                           tosl	equ	0xFFD
 12175                           pclath	equ	0xFFA
 12176                           tblptru	equ	0xFF8
 12177                           tblptrh	equ	0xFF7
 12178                           tblptrl	equ	0xFF6
 12179                           tablat	equ	0xFF5
 12180                           prodh	equ	0xFF4
 12181                           prodl	equ	0xFF3
 12182                           intcon	equ	0xFF2
 12183                           postinc0	equ	0xFEE
 12184                           wreg	equ	0xFE8
 12185                           indf1	equ	0xFE7
 12186                           postdec1	equ	0xFE5
 12187                           fsr1h	equ	0xFE2
 12188                           fsr1l	equ	0xFE1
 12189                           indf2	equ	0xFDF
 12190                           postinc2	equ	0xFDE
 12191                           postdec2	equ	0xFDD
 12192                           plusw2	equ	0xFDB
 12193                           fsr2h	equ	0xFDA
 12194                           fsr2l	equ	0xFD9
 12195                           status	equ	0xFD8
 12196                           
 12197 ;; *************** function _Timer0_Restart *****************
 12198 ;; Defined at:
 12199 ;;		line 83 in file "Library/Timer0.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;		None
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;		None
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  1    wreg      void 
 12206 ;; Registers used:
 12207 ;;		None
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;Total ram usage:        0 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    7
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		_Motor_Step
 12224 ;; This function uses a non-reentrant model
 12225 ;;
 12226                           
 12227                           	psect	text53
 12228  017F7E                     __ptext53:
 12229                           	opt stack 0
 12230  017F7E                     _Timer0_Restart:
 12231                           	opt stack 20
 12232                           
 12233                           ;Timer0.c: 85: TMR0 = COUNTER;
 12234                           
 12235                           ;incstack = 0
 12236  017F7E  C028  FFD6         	movff	_COUNTER,4054	;volatile
 12237  017F82  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 12238                           
 12239                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 12240  017F86  8AF2               	bsf	intcon,5,c	;volatile
 12241  017F88  0012               	return		;funcret
 12242  017F8A                     __end_of_Timer0_Restart:
 12243                           	opt stack 0
 12244                           tosu	equ	0xFFF
 12245                           tosh	equ	0xFFE
 12246                           tosl	equ	0xFFD
 12247                           pclath	equ	0xFFA
 12248                           tblptru	equ	0xFF8
 12249                           tblptrh	equ	0xFF7
 12250                           tblptrl	equ	0xFF6
 12251                           tablat	equ	0xFF5
 12252                           prodh	equ	0xFF4
 12253                           prodl	equ	0xFF3
 12254                           intcon	equ	0xFF2
 12255                           postinc0	equ	0xFEE
 12256                           wreg	equ	0xFE8
 12257                           indf1	equ	0xFE7
 12258                           postdec1	equ	0xFE5
 12259                           fsr1h	equ	0xFE2
 12260                           fsr1l	equ	0xFE1
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           plusw2	equ	0xFDB
 12265                           fsr2h	equ	0xFDA
 12266                           fsr2l	equ	0xFD9
 12267                           status	equ	0xFD8
 12268                           
 12269 ;; *************** function _MXK_SwitchTo *****************
 12270 ;; Defined at:
 12271 ;;		line 105 in file "Library/MXK.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;  pModule         1    wreg     enum E6927
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;  pModule         1    7[BANK0 ] enum E6927
 12276 ;;  CUR             1    6[BANK0 ] unsigned char 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;                  1    wreg      unsigned char 
 12279 ;; Registers used:
 12280 ;;		wreg, status,2, status,0, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;Total ram usage:        2 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    8
 12293 ;; This function calls:
 12294 ;;		_delay_us
 12295 ;; This function is called by:
 12296 ;;		_Motor_Step
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           	psect	text54
 12301  01778E                     __ptext54:
 12302                           	opt stack 0
 12303  01778E                     _MXK_SwitchTo:
 12304                           	opt stack 19
 12305                           
 12306                           ;incstack = 0
 12307                           ;MXK_SwitchTo@pModule stored from wreg
 12308  01778E  0100               	movlb	0	; () banked
 12309  017790  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 12310                           
 12311                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 12312  017792  5086               	movf	3974,w,c	;volatile
 12313  017794  0B0F               	andlw	15
 12314  017796  0100               	movlb	0	; () banked
 12315  017798  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 12319  01779A  5043               	movf	_Bus_State,w,c
 12320  01779C  A4D8               	btfss	status,2,c
 12321  01779E  D002               	goto	l13839
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;MXK.c: 110: return 0;
 12325  0177A0  0E00               	movlw	0
 12326                           
 12327                           ; BSR set to: 0
 12328  0177A2  0012               	return	
 12329  0177A4                     l13839:
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 12333  0177A4  0E00               	movlw	0
 12334  0177A6  6E43               	movwf	_Bus_State,c
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;MXK.c: 114: if (CUR != pModule)
 12338  0177A8  0100               	movlb	0	; () banked
 12339  0177AA  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 12340  0177AC  0100               	movlb	0	; () banked
 12341  0177AE  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 12342  0177B0  B4D8               	btfsc	status,2,c
 12343  0177B2  D00C               	goto	l13847
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;MXK.c: 115: {
 12347                           ;MXK.c: 116: PORTG &= ~(0xF);
 12348  0177B4  0EF0               	movlw	240
 12349  0177B6  1686               	andwf	3974,f,c	;volatile
 12350                           
 12351                           ;MXK.c: 117: PORTG |= pModule;
 12352  0177B8  0100               	movlb	0	; () banked
 12353  0177BA  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 12354  0177BC  1286               	iorwf	3974,f,c	;volatile
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;MXK.c: 120: delay_us(10);
 12358  0177BE  0E00               	movlw	0
 12359  0177C0  0100               	movlb	0	; () banked
 12360  0177C2  6F61               	movwf	(delay_us@us+1)& (0+255),b
 12361  0177C4  0E0A               	movlw	10
 12362  0177C6  6F60               	movwf	delay_us@us& (0+255),b
 12363  0177C8  ECE3  F0B9         	call	_delay_us	;wreg free
 12364  0177CC                     l13847:
 12365                           
 12366                           ;MXK.c: 121: }
 12367                           ;MXK.c: 122: return 1;
 12368  0177CC  0E01               	movlw	1
 12369  0177CE  0012               	return	
 12370  0177D0                     __end_of_MXK_SwitchTo:
 12371                           	opt stack 0
 12372                           tosu	equ	0xFFF
 12373                           tosh	equ	0xFFE
 12374                           tosl	equ	0xFFD
 12375                           pclath	equ	0xFFA
 12376                           tblptru	equ	0xFF8
 12377                           tblptrh	equ	0xFF7
 12378                           tblptrl	equ	0xFF6
 12379                           tablat	equ	0xFF5
 12380                           prodh	equ	0xFF4
 12381                           prodl	equ	0xFF3
 12382                           intcon	equ	0xFF2
 12383                           postinc0	equ	0xFEE
 12384                           wreg	equ	0xFE8
 12385                           indf1	equ	0xFE7
 12386                           postdec1	equ	0xFE5
 12387                           fsr1h	equ	0xFE2
 12388                           fsr1l	equ	0xFE1
 12389                           indf2	equ	0xFDF
 12390                           postinc2	equ	0xFDE
 12391                           postdec2	equ	0xFDD
 12392                           plusw2	equ	0xFDB
 12393                           fsr2h	equ	0xFDA
 12394                           fsr2l	equ	0xFD9
 12395                           status	equ	0xFD8
 12396                           
 12397 ;; *************** function _MXK_Release *****************
 12398 ;; Defined at:
 12399 ;;		line 130 in file "Library/MXK.c"
 12400 ;; Parameters:    Size  Location     Type
 12401 ;;		None
 12402 ;; Auto vars:     Size  Location     Type
 12403 ;;		None
 12404 ;; Return value:  Size  Location     Type
 12405 ;;                  1    wreg      unsigned char 
 12406 ;; Registers used:
 12407 ;;		wreg, status,2, status,0
 12408 ;; Tracked objects:
 12409 ;;		On entry : 0/0
 12410 ;;		On exit  : 0/0
 12411 ;;		Unchanged: 0/0
 12412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;Total ram usage:        0 bytes
 12418 ;; Hardware stack levels used:    1
 12419 ;; Hardware stack levels required when called:    7
 12420 ;; This function calls:
 12421 ;;		Nothing
 12422 ;; This function is called by:
 12423 ;;		_Motor_Step
 12424 ;;		_initialise
 12425 ;;		_main
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           	psect	text55
 12430  017EE8                     __ptext55:
 12431                           	opt stack 0
 12432  017EE8                     _MXK_Release:
 12433                           	opt stack 22
 12434                           
 12435                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 12436                           
 12437                           ;incstack = 0
 12438  017EE8  0E01               	movlw	1
 12439  017EEA  6E43               	movwf	_Bus_State,c
 12440                           
 12441                           ;MXK.c: 134: if (lQueue != 0)
 12442  017EEC  5025               	movf	_lQueue,w,c	;volatile
 12443  017EEE  1026               	iorwf	_lQueue+1,w,c	;volatile
 12444  017EF0  1027               	iorwf	_lQueue+2,w,c	;volatile
 12445  017EF2  B4D8               	btfsc	status,2,c
 12446  017EF4  D002               	goto	l13859
 12447                           
 12448                           ;MXK.c: 135: return 1;
 12449  017EF6  0E01               	movlw	1
 12450  017EF8  0012               	return	
 12451  017EFA                     l13859:
 12452                           
 12453                           ;MXK.c: 137: return 0;
 12454  017EFA  0E00               	movlw	0
 12455  017EFC  0012               	return	
 12456  017EFE                     __end_of_MXK_Release:
 12457                           	opt stack 0
 12458                           tosu	equ	0xFFF
 12459                           tosh	equ	0xFFE
 12460                           tosl	equ	0xFFD
 12461                           pclath	equ	0xFFA
 12462                           tblptru	equ	0xFF8
 12463                           tblptrh	equ	0xFF7
 12464                           tblptrl	equ	0xFF6
 12465                           tablat	equ	0xFF5
 12466                           prodh	equ	0xFF4
 12467                           prodl	equ	0xFF3
 12468                           intcon	equ	0xFF2
 12469                           postinc0	equ	0xFEE
 12470                           wreg	equ	0xFE8
 12471                           indf1	equ	0xFE7
 12472                           postdec1	equ	0xFE5
 12473                           fsr1h	equ	0xFE2
 12474                           fsr1l	equ	0xFE1
 12475                           indf2	equ	0xFDF
 12476                           postinc2	equ	0xFDE
 12477                           postdec2	equ	0xFDD
 12478                           plusw2	equ	0xFDB
 12479                           fsr2h	equ	0xFDA
 12480                           fsr2l	equ	0xFD9
 12481                           status	equ	0xFD8
 12482                           
 12483 ;; *************** function _MXK_Queue *****************
 12484 ;; Defined at:
 12485 ;;		line 144 in file "Library/MXK.c"
 12486 ;; Parameters:    Size  Location     Type
 12487 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 12488 ;;		 -> Absolute function(1), Motor_Step(1), 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;		None
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      void 
 12493 ;; Registers used:
 12494 ;;		wreg, status,2, status,0
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12500 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12503 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;Total ram usage:        3 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    7
 12507 ;; This function calls:
 12508 ;;		Nothing
 12509 ;; This function is called by:
 12510 ;;		_Motor_Step
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514                           	psect	text56
 12515  017F54                     __ptext56:
 12516                           	opt stack 0
 12517  017F54                     _MXK_Queue:
 12518                           	opt stack 20
 12519                           
 12520                           ;MXK.c: 146: lQueue = pCallback;
 12521                           
 12522                           ;incstack = 0
 12523  017F54  C060  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 12524  017F58  C061  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 12525  017F5C  C062  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 12526  017F60  0012               	return		;funcret
 12527  017F62                     __end_of_MXK_Queue:
 12528                           	opt stack 0
 12529                           tosu	equ	0xFFF
 12530                           tosh	equ	0xFFE
 12531                           tosl	equ	0xFFD
 12532                           pclath	equ	0xFFA
 12533                           tblptru	equ	0xFF8
 12534                           tblptrh	equ	0xFF7
 12535                           tblptrl	equ	0xFF6
 12536                           tablat	equ	0xFF5
 12537                           prodh	equ	0xFF4
 12538                           prodl	equ	0xFF3
 12539                           intcon	equ	0xFF2
 12540                           postinc0	equ	0xFEE
 12541                           wreg	equ	0xFE8
 12542                           indf1	equ	0xFE7
 12543                           postdec1	equ	0xFE5
 12544                           fsr1h	equ	0xFE2
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           postdec2	equ	0xFDD
 12549                           plusw2	equ	0xFDB
 12550                           fsr2h	equ	0xFDA
 12551                           fsr2l	equ	0xFD9
 12552                           status	equ	0xFD8
 12553                           
 12554 ;; *************** function _MXK_BlockSwitchTo *****************
 12555 ;; Defined at:
 12556 ;;		line 82 in file "Library/MXK.c"
 12557 ;; Parameters:    Size  Location     Type
 12558 ;;  pModule         1    wreg     enum E6927
 12559 ;; Auto vars:     Size  Location     Type
 12560 ;;  pModule         1    7[BANK0 ] enum E6927
 12561 ;;  CUR             1    6[BANK0 ] unsigned char 
 12562 ;; Return value:  Size  Location     Type
 12563 ;;                  1    wreg      unsigned char 
 12564 ;; Registers used:
 12565 ;;		wreg, status,2, status,0, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;Total ram usage:        2 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; Hardware stack levels required when called:    8
 12578 ;; This function calls:
 12579 ;;		_delay_us
 12580 ;; This function is called by:
 12581 ;;		_initialise
 12582 ;;		_main
 12583 ;; This function uses a non-reentrant model
 12584 ;;
 12585                           
 12586                           	psect	text57
 12587  017852                     __ptext57:
 12588                           	opt stack 0
 12589  017852                     _MXK_BlockSwitchTo:
 12590                           	opt stack 21
 12591                           
 12592                           ;incstack = 0
 12593                           ;MXK_BlockSwitchTo@pModule stored from wreg
 12594  017852  0100               	movlb	0	; () banked
 12595  017854  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 12596                           
 12597                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 12598  017856  5086               	movf	3974,w,c	;volatile
 12599  017858  0B0F               	andlw	15
 12600  01785A  0100               	movlb	0	; () banked
 12601  01785C  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 12602  01785E                     l15415:
 12603  01785E  5043               	movf	_Bus_State,w,c
 12604  017860  B4D8               	btfsc	status,2,c
 12605  017862  D7FD               	goto	l15415
 12606                           
 12607                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 12608  017864  0E00               	movlw	0
 12609  017866  6E43               	movwf	_Bus_State,c
 12610                           
 12611                           ;MXK.c: 90: if (CUR != pModule)
 12612  017868  0100               	movlb	0	; () banked
 12613  01786A  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 12614  01786C  0100               	movlb	0	; () banked
 12615  01786E  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 12616  017870  B4D8               	btfsc	status,2,c
 12617  017872  D00C               	goto	l15425
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;MXK.c: 91: {
 12621                           ;MXK.c: 92: PORTG &= ~(0xF);
 12622  017874  0EF0               	movlw	240
 12623  017876  1686               	andwf	3974,f,c	;volatile
 12624                           
 12625                           ;MXK.c: 93: PORTG |= pModule;
 12626  017878  0100               	movlb	0	; () banked
 12627  01787A  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 12628  01787C  1286               	iorwf	3974,f,c	;volatile
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;MXK.c: 96: delay_us(10);
 12632  01787E  0E00               	movlw	0
 12633  017880  0100               	movlb	0	; () banked
 12634  017882  6F61               	movwf	(delay_us@us+1)& (0+255),b
 12635  017884  0E0A               	movlw	10
 12636  017886  6F60               	movwf	delay_us@us& (0+255),b
 12637  017888  ECE3  F0B9         	call	_delay_us	;wreg free
 12638  01788C                     l15425:
 12639                           
 12640                           ;MXK.c: 97: }
 12641                           ;MXK.c: 98: return 1;
 12642  01788C  0E01               	movlw	1
 12643  01788E  0012               	return	
 12644  017890                     __end_of_MXK_BlockSwitchTo:
 12645                           	opt stack 0
 12646                           tosu	equ	0xFFF
 12647                           tosh	equ	0xFFE
 12648                           tosl	equ	0xFFD
 12649                           pclath	equ	0xFFA
 12650                           tblptru	equ	0xFF8
 12651                           tblptrh	equ	0xFF7
 12652                           tblptrl	equ	0xFF6
 12653                           tablat	equ	0xFF5
 12654                           prodh	equ	0xFF4
 12655                           prodl	equ	0xFF3
 12656                           intcon	equ	0xFF2
 12657                           postinc0	equ	0xFEE
 12658                           wreg	equ	0xFE8
 12659                           indf1	equ	0xFE7
 12660                           postdec1	equ	0xFE5
 12661                           fsr1h	equ	0xFE2
 12662                           fsr1l	equ	0xFE1
 12663                           indf2	equ	0xFDF
 12664                           postinc2	equ	0xFDE
 12665                           postdec2	equ	0xFDD
 12666                           plusw2	equ	0xFDB
 12667                           fsr2h	equ	0xFDA
 12668                           fsr2l	equ	0xFD9
 12669                           status	equ	0xFD8
 12670                           
 12671 ;; *************** function _delay_us *****************
 12672 ;; Defined at:
 12673 ;;		line 255 in file "Library/Types.c"
 12674 ;; Parameters:    Size  Location     Type
 12675 ;;  us              2    0[BANK0 ] unsigned short 
 12676 ;; Auto vars:     Size  Location     Type
 12677 ;;  u               4    2[BANK0 ] unsigned long 
 12678 ;; Return value:  Size  Location     Type
 12679 ;;                  1    wreg      void 
 12680 ;; Registers used:
 12681 ;;		wreg, status,2, status,0
 12682 ;; Tracked objects:
 12683 ;;		On entry : 0/0
 12684 ;;		On exit  : 0/0
 12685 ;;		Unchanged: 0/0
 12686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12687 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12688 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12690 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;Total ram usage:        6 bytes
 12692 ;; Hardware stack levels used:    1
 12693 ;; Hardware stack levels required when called:    7
 12694 ;; This function calls:
 12695 ;;		Nothing
 12696 ;; This function is called by:
 12697 ;;		_MXK_BlockSwitchTo
 12698 ;;		_MXK_SwitchTo
 12699 ;; This function uses a non-reentrant model
 12700 ;;
 12701                           
 12702                           	psect	text58
 12703  0173C6                     __ptext58:
 12704                           	opt stack 0
 12705  0173C6                     _delay_us:
 12706                           	opt stack 19
 12707                           
 12708                           ;Types.c: 256: unsigned long u;
 12709                           ;Types.c: 257: while (us--) {
 12710                           
 12711                           ;incstack = 0
 12712  0173C6  D01C               	goto	l13357
 12713  0173C8                     l13349:
 12714                           
 12715                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 12716  0173C8  0E00               	movlw	0
 12717  0173CA  0100               	movlb	0	; () banked
 12718  0173CC  6F62               	movwf	delay_us@u& (0+255),b
 12719  0173CE  0E00               	movlw	0
 12720  0173D0  6F63               	movwf	(delay_us@u+1)& (0+255),b
 12721  0173D2  0E00               	movlw	0
 12722  0173D4  6F64               	movwf	(delay_us@u+2)& (0+255),b
 12723  0173D6  0E00               	movlw	0
 12724  0173D8  6F65               	movwf	(delay_us@u+3)& (0+255),b
 12725  0173DA                     l13351:
 12726                           
 12727                           ; BSR set to: 0
 12728  0173DA  0100               	movlb	0	; () banked
 12729  0173DC  5162               	movf	delay_us@u& (0+255),w,b
 12730  0173DE  0100               	movlb	0	; () banked
 12731  0173E0  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 12732  0173E2  0100               	movlb	0	; () banked
 12733  0173E4  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 12734  0173E6  0100               	movlb	0	; () banked
 12735  0173E8  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 12736  0173EA  A4D8               	btfss	status,2,c
 12737  0173EC  D009               	goto	l13357
 12738                           
 12739                           ; BSR set to: 0
 12740                           
 12741                           ; BSR set to: 0
 12742  0173EE  F000               	nop		; ;# 
 12743  0173F0  0E01               	movlw	1
 12744  0173F2  0100               	movlb	0	; () banked
 12745  0173F4  2762               	addwf	delay_us@u& (0+255),f,b
 12746  0173F6  0E00               	movlw	0
 12747  0173F8  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 12748  0173FA  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 12749  0173FC  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 12750  0173FE  D7ED               	goto	l13351
 12751  017400                     l13357:
 12752  017400  0100               	movlb	0	; () banked
 12753  017402  0760               	decf	delay_us@us& (0+255),f,b
 12754  017404  A0D8               	btfss	status,0,c
 12755  017406  0761               	decf	(delay_us@us+1)& (0+255),f,b
 12756  017408  0100               	movlb	0	; () banked
 12757  01740A  2960               	incf	delay_us@us& (0+255),w,b
 12758  01740C  E1DD               	bnz	l13349
 12759  01740E  0100               	movlb	0	; () banked
 12760  017410  2961               	incf	(delay_us@us+1)& (0+255),w,b
 12761  017412  B4D8               	btfsc	status,2,c
 12762  017414  0012               	return	
 12763  017416  D7D8               	goto	l13349
 12764  017418                     __end_of_delay_us:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclath	equ	0xFFA
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           postinc0	equ	0xFEE
 12778                           wreg	equ	0xFE8
 12779                           indf1	equ	0xFE7
 12780                           postdec1	equ	0xFE5
 12781                           fsr1h	equ	0xFE2
 12782                           fsr1l	equ	0xFE1
 12783                           indf2	equ	0xFDF
 12784                           postinc2	equ	0xFDE
 12785                           postdec2	equ	0xFDD
 12786                           plusw2	equ	0xFDB
 12787                           fsr2h	equ	0xFDA
 12788                           fsr2l	equ	0xFD9
 12789                           status	equ	0xFD8
 12790                           
 12791 ;; *************** function _LCD_Init *****************
 12792 ;; Defined at:
 12793 ;;		line 172 in file "Library/LCD.c"
 12794 ;; Parameters:    Size  Location     Type
 12795 ;;		None
 12796 ;; Auto vars:     Size  Location     Type
 12797 ;;  i               2   55[BANK0 ] unsigned short 
 12798 ;; Return value:  Size  Location     Type
 12799 ;;                  1    wreg      void 
 12800 ;; Registers used:
 12801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12802 ;; Tracked objects:
 12803 ;;		On entry : 0/0
 12804 ;;		On exit  : 0/0
 12805 ;;		Unchanged: 0/0
 12806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;Total ram usage:        4 bytes
 12812 ;; Hardware stack levels used:    1
 12813 ;; Hardware stack levels required when called:   15
 12814 ;; This function calls:
 12815 ;;		_Configure_GPIOs
 12816 ;;		_LCD_Fill
 12817 ;;		_LCD_Write
 12818 ;;		_Set_Rotation
 12819 ;;		_delay_ms
 12820 ;; This function is called by:
 12821 ;;		_initialise
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           	psect	text59
 12826  0145BE                     __ptext59:
 12827                           	opt stack 0
 12828  0145BE                     _LCD_Init:
 12829                           	opt stack 14
 12830                           
 12831                           ;LCD.c: 174: UINT16 i;
 12832                           ;LCD.c: 175: Configure_GPIOs();
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;incstack = 0
 12836  0145BE  EC22  F0B7         	call	_Configure_GPIOs	;wreg free
 12837                           
 12838                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 12839  0145C2  0E00               	movlw	0
 12840  0145C4  0100               	movlb	0	; () banked
 12841  0145C6  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 12842  0145C8  0E00               	movlw	0
 12843  0145CA  6F97               	movwf	LCD_Init@i& (0+255),b
 12844                           
 12845                           ; BSR set to: 0
 12846  0145CC  0100               	movlb	0	; () banked
 12847  0145CE  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 12848  0145D0  E106               	bnz	u12970
 12849  0145D2  0E59               	movlw	89
 12850  0145D4  0100               	movlb	0	; () banked
 12851  0145D6  5D97               	subwf	LCD_Init@i& (0+255),w,b
 12852  0145D8  B0D8               	btfsc	status,0,c
 12853  0145DA  D08B               	goto	l15153
 12854  0145DC  D001               	goto	l15137
 12855  0145DE                     u12970:
 12856                           
 12857                           ; BSR set to: 0
 12858  0145DE  D089               	goto	l15153
 12859  0145E0                     l15137:
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;LCD.c: 178: {
 12863                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 12864  0145E0  90D8               	bcf	status,0,c
 12865  0145E2  0100               	movlb	0	; () banked
 12866  0145E4  3597               	rlcf	LCD_Init@i& (0+255),w,b
 12867  0145E6  6EF6               	movwf	tblptrl,c
 12868  0145E8  0100               	movlb	0	; () banked
 12869  0145EA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 12870  0145EC  6EF7               	movwf	tblptrh,c
 12871  0145EE  0E5B               	movlw	low _InitList
 12872  0145F0  26F6               	addwf	tblptrl,f,c
 12873  0145F2  0EFB               	movlw	high _InitList
 12874  0145F4  22F7               	addwfc	tblptrh,f,c
 12875  0145F6                     	if	1	;There are 3 active tblptr bytes
 12876  0145F6  6AF8               	clrf	tblptru,c
 12877  0145F8  0E00               	movlw	low (__mediumconst shr (0+16))
 12878  0145FA  22F8               	addwfc	tblptru,f,c
 12879  0145FC                     	endif
 12880  0145FC  0009               	tblrd		*+
 12881  0145FE  0E80               	movlw	128
 12882  014600  18F5               	xorwf	tablat,w,c
 12883  014602  0009               	tblrd		*+
 12884  014604  10F5               	iorwf	tablat,w,c
 12885  014606  A4D8               	btfss	status,2,c
 12886  014608  D022               	goto	l15143
 12887                           
 12888                           ; BSR set to: 0
 12889  01460A  0100               	movlb	0	; () banked
 12890  01460C  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 12891  01460E  E11F               	bnz	l15143
 12892  014610  0E58               	movlw	88
 12893  014612  0100               	movlb	0	; () banked
 12894  014614  5D97               	subwf	LCD_Init@i& (0+255),w,b
 12895  014616  B0D8               	btfsc	status,0,c
 12896  014618  D01A               	goto	l15143
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;LCD.c: 180: delay_ms(InitList[++i]);
 12900  01461A  0100               	movlb	0	; () banked
 12901  01461C  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 12902  01461E  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 12903  014620  90D8               	bcf	status,0,c
 12904  014622  0100               	movlb	0	; () banked
 12905  014624  3597               	rlcf	LCD_Init@i& (0+255),w,b
 12906  014626  6EF6               	movwf	tblptrl,c
 12907  014628  0100               	movlb	0	; () banked
 12908  01462A  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 12909  01462C  6EF7               	movwf	tblptrh,c
 12910  01462E  0E5B               	movlw	low _InitList
 12911  014630  26F6               	addwf	tblptrl,f,c
 12912  014632  0EFB               	movlw	high _InitList
 12913  014634  22F7               	addwfc	tblptrh,f,c
 12914  014636                     	if	1	;There are 3 active tblptr bytes
 12915  014636  6AF8               	clrf	tblptru,c
 12916  014638  0E00               	movlw	low (__mediumconst shr (0+16))
 12917  01463A  22F8               	addwfc	tblptru,f,c
 12918  01463C                     	endif
 12919  01463C  0009               	tblrd		*+
 12920  01463E  CFF5 F060          	movff	tablat,delay_ms@ms
 12921  014642  000A               	tblrd		*-
 12922  014644  CFF5 F061          	movff	tablat,delay_ms@ms+1
 12923  014648  ECC6  F0B7         	call	_delay_ms	;wreg free
 12924  01464C  D04B               	goto	l15149
 12925  01464E                     l15143:
 12926                           
 12927                           ;LCD.c: 181: else
 12928                           ;LCD.c: 182: {
 12929                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 12930  01464E  90D8               	bcf	status,0,c
 12931  014650  0100               	movlb	0	; () banked
 12932  014652  3597               	rlcf	LCD_Init@i& (0+255),w,b
 12933  014654  6EF6               	movwf	tblptrl,c
 12934  014656  0100               	movlb	0	; () banked
 12935  014658  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 12936  01465A  6EF7               	movwf	tblptrh,c
 12937  01465C  0E5B               	movlw	low _InitList
 12938  01465E  26F6               	addwf	tblptrl,f,c
 12939  014660  0EFB               	movlw	high _InitList
 12940  014662  22F7               	addwfc	tblptrh,f,c
 12941  014664                     	if	1	;There are 3 active tblptr bytes
 12942  014664  6AF8               	clrf	tblptru,c
 12943  014666  0E00               	movlw	low (__mediumconst shr (0+16))
 12944  014668  22F8               	addwfc	tblptru,f,c
 12945  01466A                     	endif
 12946  01466A  0009               	tblrd		*+
 12947  01466C  0E00               	movlw	0
 12948  01466E  5EF5               	subwf	tablat,f,c
 12949  014670  0009               	tblrd		*+
 12950  014672  0E01               	movlw	1
 12951  014674  5AF5               	subwfb	tablat,f,c
 12952  014676  A0D8               	btfss	status,0,c
 12953  014678  D020               	goto	l15147
 12954                           
 12955                           ; BSR set to: 0
 12956  01467A  0E00               	movlw	0
 12957  01467C  0100               	movlb	0	; () banked
 12958  01467E  6F63               	movwf	LCD_Write@mode& (0+255),b
 12959  014680  90D8               	bcf	status,0,c
 12960  014682  0100               	movlb	0	; () banked
 12961  014684  3597               	rlcf	LCD_Init@i& (0+255),w,b
 12962  014686  6EF6               	movwf	tblptrl,c
 12963  014688  0100               	movlb	0	; () banked
 12964  01468A  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 12965  01468C  6EF7               	movwf	tblptrh,c
 12966  01468E  0E5B               	movlw	low _InitList
 12967  014690  26F6               	addwf	tblptrl,f,c
 12968  014692  0EFB               	movlw	high _InitList
 12969  014694  22F7               	addwfc	tblptrh,f,c
 12970  014696                     	if	1	;There are 3 active tblptr bytes
 12971  014696  6AF8               	clrf	tblptru,c
 12972  014698  0E00               	movlw	low (__mediumconst shr (0+16))
 12973  01469A  22F8               	addwfc	tblptru,f,c
 12974  01469C                     	endif
 12975  01469C  0009               	tblrd		*+
 12976  01469E  CFF5 F095          	movff	tablat,??_LCD_Init
 12977  0146A2  0009               	tblrd		*+
 12978  0146A4  CFF5 F096          	movff	tablat,??_LCD_Init+1
 12979  0146A8  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 12980  0146AC  0100               	movlb	0	; () banked
 12981  0146AE  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 12982  0146B0  0100               	movlb	0	; () banked
 12983  0146B2  5195               	movf	??_LCD_Init& (0+255),w,b
 12984  0146B4  EC7D  F0BE         	call	_LCD_Write
 12985  0146B8  D015               	goto	l15149
 12986  0146BA                     l15147:
 12987                           
 12988                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 12989  0146BA  0E01               	movlw	1
 12990  0146BC  0100               	movlb	0	; () banked
 12991  0146BE  6F63               	movwf	LCD_Write@mode& (0+255),b
 12992  0146C0  90D8               	bcf	status,0,c
 12993  0146C2  0100               	movlb	0	; () banked
 12994  0146C4  3597               	rlcf	LCD_Init@i& (0+255),w,b
 12995  0146C6  6EF6               	movwf	tblptrl,c
 12996  0146C8  0100               	movlb	0	; () banked
 12997  0146CA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 12998  0146CC  6EF7               	movwf	tblptrh,c
 12999  0146CE  0E5B               	movlw	low _InitList
 13000  0146D0  26F6               	addwf	tblptrl,f,c
 13001  0146D2  0EFB               	movlw	high _InitList
 13002  0146D4  22F7               	addwfc	tblptrh,f,c
 13003  0146D6                     	if	1	;There are 3 active tblptr bytes
 13004  0146D6  6AF8               	clrf	tblptru,c
 13005  0146D8  0E00               	movlw	low (__mediumconst shr (0+16))
 13006  0146DA  22F8               	addwfc	tblptru,f,c
 13007  0146DC                     	endif
 13008  0146DC  0008               	tblrd		*
 13009  0146DE  50F5               	movf	tablat,w,c
 13010  0146E0  EC7D  F0BE         	call	_LCD_Write
 13011  0146E4                     l15149:
 13012  0146E4  0100               	movlb	0	; () banked
 13013  0146E6  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 13014  0146E8  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 13015                           
 13016                           ; BSR set to: 0
 13017  0146EA  0100               	movlb	0	; () banked
 13018  0146EC  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13019  0146EE  E101               	bnz	l15153
 13020  0146F0  D770               	goto	L6
 13021  0146F2                     l15153:
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;LCD.c: 185: }
 13025                           ;LCD.c: 186: }
 13026                           ;LCD.c: 187: delay_ms(100);
 13027  0146F2  0E00               	movlw	0
 13028  0146F4  0100               	movlb	0	; () banked
 13029  0146F6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13030  0146F8  0E64               	movlw	100
 13031  0146FA  6F60               	movwf	delay_ms@ms& (0+255),b
 13032  0146FC  ECC6  F0B7         	call	_delay_ms	;wreg free
 13033                           
 13034                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 13035  014700  0E00               	movlw	0
 13036  014702  0100               	movlb	0	; () banked
 13037  014704  6F63               	movwf	LCD_Write@mode& (0+255),b
 13038  014706  0E29               	movlw	41
 13039  014708  EC7D  F0BE         	call	_LCD_Write
 13040                           
 13041                           ;LCD.c: 189: Set_Rotation(1);
 13042  01470C  0E01               	movlw	1
 13043  01470E  EC94  F0B2         	call	_Set_Rotation
 13044                           
 13045                           ;LCD.c: 191: delay_ms(100);
 13046  014712  0E00               	movlw	0
 13047  014714  0100               	movlb	0	; () banked
 13048  014716  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13049  014718  0E64               	movlw	100
 13050  01471A  6F60               	movwf	delay_ms@ms& (0+255),b
 13051  01471C  ECC6  F0B7         	call	_delay_ms	;wreg free
 13052                           
 13053                           ;LCD.c: 192: LCD_Fill(0x0000);
 13054  014720  0E00               	movlw	0
 13055  014722  0100               	movlb	0	; () banked
 13056  014724  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 13057  014726  0E00               	movlw	0
 13058  014728  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 13059  01472A  ECB7  F0B9         	call	_LCD_Fill	;wreg free
 13060  01472E  0012               	return		;funcret
 13061  014730                     __end_of_LCD_Init:
 13062                           	opt stack 0
 13063                           tosu	equ	0xFFF
 13064                           tosh	equ	0xFFE
 13065                           tosl	equ	0xFFD
 13066                           pclath	equ	0xFFA
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           postinc0	equ	0xFEE
 13075                           wreg	equ	0xFE8
 13076                           indf1	equ	0xFE7
 13077                           postdec1	equ	0xFE5
 13078                           fsr1h	equ	0xFE2
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           postdec2	equ	0xFDD
 13083                           plusw2	equ	0xFDB
 13084                           fsr2h	equ	0xFDA
 13085                           fsr2l	equ	0xFD9
 13086                           status	equ	0xFD8
 13087                           
 13088 ;; *************** function _Set_Rotation *****************
 13089 ;; Defined at:
 13090 ;;		line 248 in file "Library/LCD.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  m               1    wreg     unsigned char 
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;  m               1    5[BANK0 ] unsigned char 
 13095 ;;  rotation        1    6[BANK0 ] unsigned char 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;Total ram usage:        2 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    9
 13112 ;; This function calls:
 13113 ;;		_LCD_Write
 13114 ;; This function is called by:
 13115 ;;		_LCD_Init
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text60
 13120  016528                     __ptext60:
 13121                           	opt stack 0
 13122  016528                     _Set_Rotation:
 13123                           	opt stack 19
 13124                           
 13125                           ;incstack = 0
 13126                           ;Set_Rotation@m stored from wreg
 13127  016528  0100               	movlb	0	; () banked
 13128  01652A  6F65               	movwf	Set_Rotation@m& (0+255),b
 13129                           
 13130                           ;LCD.c: 250: UINT8 rotation = 0x00;
 13131  01652C  0E00               	movlw	0
 13132  01652E  0100               	movlb	0	; () banked
 13133  016530  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 13137  016532  0E00               	movlw	0
 13138  016534  0100               	movlb	0	; () banked
 13139  016536  6F63               	movwf	LCD_Write@mode& (0+255),b
 13140  016538  0E36               	movlw	54
 13141  01653A  EC7D  F0BE         	call	_LCD_Write
 13142                           
 13143                           ;LCD.c: 253: rotation = (m % 4);
 13144  01653E  0100               	movlb	0	; () banked
 13145  016540  5165               	movf	Set_Rotation@m& (0+255),w,b
 13146  016542  0B03               	andlw	3
 13147  016544  0100               	movlb	0	; () banked
 13148  016546  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 13149                           
 13150                           ;LCD.c: 255: switch(rotation)
 13151  016548  D02C               	goto	l14493
 13152  01654A                     l14467:
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;LCD.c: 258: {
 13156                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 13157  01654A  0E01               	movlw	1
 13158  01654C  0100               	movlb	0	; () banked
 13159  01654E  6F63               	movwf	LCD_Write@mode& (0+255),b
 13160  016550  0EC8               	movlw	200
 13161  016552  EC7D  F0BE         	call	_LCD_Write
 13162                           
 13163                           ;LCD.c: 260: w = 128;
 13164  016556  0E80               	movlw	128
 13165  016558  6E48               	movwf	_w,c
 13166                           
 13167                           ;LCD.c: 261: l = 128;
 13168  01655A  0E80               	movlw	128
 13169  01655C  6E47               	movwf	_l,c
 13170                           
 13171                           ;LCD.c: 262: break;
 13172  01655E  0012               	return	
 13173  016560                     l14473:
 13174                           
 13175                           ;LCD.c: 265: {
 13176                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 13177  016560  0E01               	movlw	1
 13178  016562  0100               	movlb	0	; () banked
 13179  016564  6F63               	movwf	LCD_Write@mode& (0+255),b
 13180  016566  0EA8               	movlw	168
 13181  016568  EC7D  F0BE         	call	_LCD_Write
 13182                           
 13183                           ;LCD.c: 267: w = 128;
 13184  01656C  0E80               	movlw	128
 13185  01656E  6E48               	movwf	_w,c
 13186                           
 13187                           ;LCD.c: 268: l = 128;
 13188  016570  0E80               	movlw	128
 13189  016572  6E47               	movwf	_l,c
 13190                           
 13191                           ;LCD.c: 269: break;
 13192  016574  0012               	return	
 13193  016576                     l14479:
 13194                           
 13195                           ;LCD.c: 272: {
 13196                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 13197  016576  0E01               	movlw	1
 13198  016578  0100               	movlb	0	; () banked
 13199  01657A  6F63               	movwf	LCD_Write@mode& (0+255),b
 13200  01657C  0E08               	movlw	8
 13201  01657E  EC7D  F0BE         	call	_LCD_Write
 13202                           
 13203                           ;LCD.c: 274: w = 128;
 13204  016582  0E80               	movlw	128
 13205  016584  6E48               	movwf	_w,c
 13206                           
 13207                           ;LCD.c: 275: l = 128;
 13208  016586  0E80               	movlw	128
 13209  016588  6E47               	movwf	_l,c
 13210                           
 13211                           ;LCD.c: 276: break;
 13212  01658A  0012               	return	
 13213  01658C                     l14485:
 13214                           
 13215                           ;LCD.c: 279: {
 13216                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 13217  01658C  0E01               	movlw	1
 13218  01658E  0100               	movlb	0	; () banked
 13219  016590  6F63               	movwf	LCD_Write@mode& (0+255),b
 13220  016592  0E68               	movlw	104
 13221  016594  EC7D  F0BE         	call	_LCD_Write
 13222                           
 13223                           ;LCD.c: 281: w = 128;
 13224  016598  0E80               	movlw	128
 13225  01659A  6E48               	movwf	_w,c
 13226                           
 13227                           ;LCD.c: 282: l = 128;
 13228  01659C  0E80               	movlw	128
 13229  01659E  6E47               	movwf	_l,c
 13230                           
 13231                           ;LCD.c: 284: }
 13232                           ;LCD.c: 285: }
 13233                           
 13234                           ;LCD.c: 283: break;
 13235  0165A0  0012               	return	
 13236  0165A2                     l14493:
 13237  0165A2  0100               	movlb	0	; () banked
 13238  0165A4  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 13239                           
 13240                           ; Switch size 1, requested type "space"
 13241                           ; Number of cases is 4, Range of values is 0 to 3
 13242                           ; switch strategies available:
 13243                           ; Name         Instructions Cycles
 13244                           ; simple_byte           13     7 (average)
 13245                           ;	Chosen strategy is simple_byte
 13246  0165A6  0A00               	xorlw	0	; case 0
 13247  0165A8  B4D8               	btfsc	status,2,c
 13248  0165AA  D7CF               	goto	l14467
 13249  0165AC  0A01               	xorlw	1	; case 1
 13250  0165AE  B4D8               	btfsc	status,2,c
 13251  0165B0  D7D7               	goto	l14473
 13252  0165B2  0A03               	xorlw	3	; case 2
 13253  0165B4  B4D8               	btfsc	status,2,c
 13254  0165B6  D7DF               	goto	l14479
 13255  0165B8  0A01               	xorlw	1	; case 3
 13256  0165BA  A4D8               	btfss	status,2,c
 13257  0165BC  0012               	return	
 13258  0165BE  D7E6               	goto	l14485
 13259  0165C0                     __end_of_Set_Rotation:
 13260                           	opt stack 0
 13261                           tosu	equ	0xFFF
 13262                           tosh	equ	0xFFE
 13263                           tosl	equ	0xFFD
 13264                           pclath	equ	0xFFA
 13265                           tblptru	equ	0xFF8
 13266                           tblptrh	equ	0xFF7
 13267                           tblptrl	equ	0xFF6
 13268                           tablat	equ	0xFF5
 13269                           prodh	equ	0xFF4
 13270                           prodl	equ	0xFF3
 13271                           intcon	equ	0xFF2
 13272                           postinc0	equ	0xFEE
 13273                           wreg	equ	0xFE8
 13274                           indf1	equ	0xFE7
 13275                           postdec1	equ	0xFE5
 13276                           fsr1h	equ	0xFE2
 13277                           fsr1l	equ	0xFE1
 13278                           indf2	equ	0xFDF
 13279                           postinc2	equ	0xFDE
 13280                           postdec2	equ	0xFDD
 13281                           plusw2	equ	0xFDB
 13282                           fsr2h	equ	0xFDA
 13283                           fsr2l	equ	0xFD9
 13284                           status	equ	0xFD8
 13285                           
 13286 ;; *************** function _LCD_Fill *****************
 13287 ;; Defined at:
 13288 ;;		line 287 in file "Library/LCD.c"
 13289 ;; Parameters:    Size  Location     Type
 13290 ;;  pColour         2    9[BANK0 ] unsigned short 
 13291 ;; Auto vars:     Size  Location     Type
 13292 ;;  j               1   12[BANK0 ] unsigned char 
 13293 ;;  i               1   11[BANK0 ] unsigned char 
 13294 ;; Return value:  Size  Location     Type
 13295 ;;                  1    wreg      void 
 13296 ;; Registers used:
 13297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13303 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13306 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13307 ;;Total ram usage:        4 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; Hardware stack levels required when called:   10
 13310 ;; This function calls:
 13311 ;;		_LCD_Word_Write
 13312 ;;		_Set_Addr_Window
 13313 ;; This function is called by:
 13314 ;;		_LCD_Init
 13315 ;; This function uses a non-reentrant model
 13316 ;;
 13317                           
 13318                           	psect	text61
 13319  01736E                     __ptext61:
 13320                           	opt stack 0
 13321  01736E                     _LCD_Fill:
 13322                           	opt stack 18
 13323                           
 13324                           ;LCD.c: 296: UINT8 i = 0x00;
 13325                           
 13326                           ;incstack = 0
 13327  01736E  0E00               	movlw	0
 13328  017370  0100               	movlb	0	; () banked
 13329  017372  6F6B               	movwf	LCD_Fill@i& (0+255),b
 13330                           
 13331                           ;LCD.c: 297: UINT8 j = 0x00;
 13332  017374  0E00               	movlw	0
 13333  017376  0100               	movlb	0	; () banked
 13334  017378  6F6C               	movwf	LCD_Fill@j& (0+255),b
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 13338  01737A  0E00               	movlw	0
 13339  01737C  0100               	movlb	0	; () banked
 13340  01737E  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 13341  017380  0448               	decf	_w,w,c
 13342  017382  0100               	movlb	0	; () banked
 13343  017384  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 13344  017386  0447               	decf	_l,w,c
 13345  017388  0100               	movlb	0	; () banked
 13346  01738A  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 13347  01738C  0E00               	movlw	0
 13348  01738E  EC62  F0AF         	call	_Set_Addr_Window
 13349                           
 13350                           ;LCD.c: 299: for (j = l; j > 0; j--)
 13351  017392  C047  F06C         	movff	_l,LCD_Fill@j
 13352  017396                     l14501:
 13353  017396  0100               	movlb	0	; () banked
 13354  017398  516C               	movf	LCD_Fill@j& (0+255),w,b
 13355  01739A  0100               	movlb	0	; () banked
 13356  01739C  B4D8               	btfsc	status,2,c
 13357  01739E  0012               	return	
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;LCD.c: 300: for (i = w; i > 0; i--)
 13361                           
 13362                           ; BSR set to: 0
 13363  0173A0  C048  F06B         	movff	_w,LCD_Fill@i
 13364  0173A4                     l14505:
 13365                           
 13366                           ; BSR set to: 0
 13367  0173A4  0100               	movlb	0	; () banked
 13368  0173A6  516B               	movf	LCD_Fill@i& (0+255),w,b
 13369  0173A8  0100               	movlb	0	; () banked
 13370  0173AA  B4D8               	btfsc	status,2,c
 13371  0173AC  D009               	goto	l14515
 13372                           
 13373                           ; BSR set to: 0
 13374                           ;LCD.c: 301: LCD_Word_Write(pColour);
 13375                           
 13376                           ; BSR set to: 0
 13377                           
 13378                           ; BSR set to: 0
 13379  0173AE  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 13380  0173B2  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 13381  0173B6  ECE9  F0BE         	call	_LCD_Word_Write	;wreg free
 13382  0173BA  0100               	movlb	0	; () banked
 13383  0173BC  076B               	decf	LCD_Fill@i& (0+255),f,b
 13384  0173BE  D7F2               	goto	l14505
 13385  0173C0                     l14515:
 13386                           
 13387                           ; BSR set to: 0
 13388  0173C0  0100               	movlb	0	; () banked
 13389  0173C2  076C               	decf	LCD_Fill@j& (0+255),f,b
 13390  0173C4  D7E8               	goto	l14501
 13391  0173C6                     __end_of_LCD_Fill:
 13392                           	opt stack 0
 13393                           tosu	equ	0xFFF
 13394                           tosh	equ	0xFFE
 13395                           tosl	equ	0xFFD
 13396                           pclath	equ	0xFFA
 13397                           tblptru	equ	0xFF8
 13398                           tblptrh	equ	0xFF7
 13399                           tblptrl	equ	0xFF6
 13400                           tablat	equ	0xFF5
 13401                           prodh	equ	0xFF4
 13402                           prodl	equ	0xFF3
 13403                           intcon	equ	0xFF2
 13404                           postinc0	equ	0xFEE
 13405                           wreg	equ	0xFE8
 13406                           indf1	equ	0xFE7
 13407                           postdec1	equ	0xFE5
 13408                           fsr1h	equ	0xFE2
 13409                           fsr1l	equ	0xFE1
 13410                           indf2	equ	0xFDF
 13411                           postinc2	equ	0xFDE
 13412                           postdec2	equ	0xFDD
 13413                           plusw2	equ	0xFDB
 13414                           fsr2h	equ	0xFDA
 13415                           fsr2l	equ	0xFD9
 13416                           status	equ	0xFD8
 13417                           
 13418 ;; *************** function _Configure_GPIOs *****************
 13419 ;; Defined at:
 13420 ;;		line 46 in file "Library/LCD.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;		None
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;		None
 13425 ;; Return value:  Size  Location     Type
 13426 ;;                  1    wreg      void 
 13427 ;; Registers used:
 13428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13429 ;; Tracked objects:
 13430 ;;		On entry : 0/0
 13431 ;;		On exit  : 0/0
 13432 ;;		Unchanged: 0/0
 13433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;Total ram usage:        0 bytes
 13439 ;; Hardware stack levels used:    1
 13440 ;; Hardware stack levels required when called:   14
 13441 ;; This function calls:
 13442 ;;		_LCD_Reset
 13443 ;;		_Port_SetPinType
 13444 ;;		_SPI_Init
 13445 ;;		_SPI_MaxSpeed
 13446 ;; This function is called by:
 13447 ;;		_LCD_Init
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           	psect	text62
 13452  016E44                     __ptext62:
 13453                           	opt stack 0
 13454  016E44                     _Configure_GPIOs:
 13455                           	opt stack 14
 13456                           
 13457                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;incstack = 0
 13461  016E44  0EBF               	movlw	low _PortF
 13462  016E46  0100               	movlb	0	; () banked
 13463  016E48  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13464  016E4A  0E01               	movlw	high _PortF
 13465  016E4C  0100               	movlb	0	; () banked
 13466  016E4E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13467  016E50  0E07               	movlw	7
 13468  016E52  0100               	movlb	0	; () banked
 13469  016E54  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13470  016E56  0E03               	movlw	3
 13471  016E58  0100               	movlb	0	; () banked
 13472  016E5A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13473  016E5C  EC93  F09C         	call	_Port_SetPinType	;wreg free
 13474                           
 13475                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 13476  016E60  0EBF               	movlw	low _PortF
 13477  016E62  0100               	movlb	0	; () banked
 13478  016E64  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13479  016E66  0E01               	movlw	high _PortF
 13480  016E68  0100               	movlb	0	; () banked
 13481  016E6A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13482  016E6C  0E06               	movlw	6
 13483  016E6E  0100               	movlb	0	; () banked
 13484  016E70  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13485  016E72  0E03               	movlw	3
 13486  016E74  0100               	movlb	0	; () banked
 13487  016E76  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13488  016E78  EC93  F09C         	call	_Port_SetPinType	;wreg free
 13489                           
 13490                           ;LCD.c: 55: LCD_Reset();
 13491  016E7C  EC34  F0BA         	call	_LCD_Reset	;wreg free
 13492                           
 13493                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 13494  016E80  0EC0               	movlw	192
 13495  016E82  0100               	movlb	0	; () banked
 13496  016E84  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 13497  016E86  0EC6               	movlw	198
 13498  016E88  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 13499  016E8A  0E2D               	movlw	45
 13500  016E8C  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 13501  016E8E  0E00               	movlw	0
 13502  016E90  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 13503  016E92  0E01               	movlw	1
 13504  016E94  0100               	movlb	0	; () banked
 13505  016E96  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 13506  016E98  0E01               	movlw	1
 13507  016E9A  0100               	movlb	0	; () banked
 13508  016E9C  6F92               	movwf	SPI_Init@pMode& (0+255),b
 13509  016E9E  EC7D  F08B         	call	_SPI_Init	;wreg free
 13510                           
 13511                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 13512  016EA2  0E6E               	movlw	low _SPI2
 13513  016EA4  0100               	movlb	0	; () banked
 13514  016EA6  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 13515  016EA8  0E01               	movlw	high _SPI2
 13516  016EAA  0100               	movlb	0	; () banked
 13517  016EAC  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 13518  016EAE  EC74  F0B6         	call	_SPI_MaxSpeed	;wreg free
 13519  016EB2  0012               	return		;funcret
 13520  016EB4                     __end_of_Configure_GPIOs:
 13521                           	opt stack 0
 13522                           tosu	equ	0xFFF
 13523                           tosh	equ	0xFFE
 13524                           tosl	equ	0xFFD
 13525                           pclath	equ	0xFFA
 13526                           tblptru	equ	0xFF8
 13527                           tblptrh	equ	0xFF7
 13528                           tblptrl	equ	0xFF6
 13529                           tablat	equ	0xFF5
 13530                           prodh	equ	0xFF4
 13531                           prodl	equ	0xFF3
 13532                           intcon	equ	0xFF2
 13533                           postinc0	equ	0xFEE
 13534                           wreg	equ	0xFE8
 13535                           indf1	equ	0xFE7
 13536                           postdec1	equ	0xFE5
 13537                           fsr1h	equ	0xFE2
 13538                           fsr1l	equ	0xFE1
 13539                           indf2	equ	0xFDF
 13540                           postinc2	equ	0xFDE
 13541                           postdec2	equ	0xFDD
 13542                           plusw2	equ	0xFDB
 13543                           fsr2h	equ	0xFDA
 13544                           fsr2l	equ	0xFD9
 13545                           status	equ	0xFD8
 13546                           
 13547 ;; *************** function _SPI_MaxSpeed *****************
 13548 ;; Defined at:
 13549 ;;		line 201 in file "Library/SPI.c"
 13550 ;; Parameters:    Size  Location     Type
 13551 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 13552 ;;		 -> SPI2(11), 
 13553 ;; Auto vars:     Size  Location     Type
 13554 ;;		None
 13555 ;; Return value:  Size  Location     Type
 13556 ;;                  1    wreg      void 
 13557 ;; Registers used:
 13558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13559 ;; Tracked objects:
 13560 ;;		On entry : 0/0
 13561 ;;		On exit  : 0/0
 13562 ;;		Unchanged: 0/0
 13563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;Total ram usage:        2 bytes
 13569 ;; Hardware stack levels used:    1
 13570 ;; Hardware stack levels required when called:    9
 13571 ;; This function calls:
 13572 ;;		_Byte_SetBit
 13573 ;;		_Byte_SetQuad
 13574 ;; This function is called by:
 13575 ;;		_Configure_GPIOs
 13576 ;; This function uses a non-reentrant model
 13577 ;;
 13578                           
 13579                           	psect	text63
 13580  016CE8                     __ptext63:
 13581                           	opt stack 0
 13582  016CE8                     _SPI_MaxSpeed:
 13583                           	opt stack 18
 13584                           
 13585                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13586                           
 13587                           ;incstack = 0
 13588  016CE8  0100               	movlb	0	; () banked
 13589  016CEA  EE20 F006          	lfsr	2,6
 13590  016CEE  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 13591  016CF0  26D9               	addwf	fsr2l,f,c
 13592  016CF2  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 13593  016CF4  22DA               	addwfc	fsr2h,f,c
 13594  016CF6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13595  016CFA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13596  016CFE  0E05               	movlw	5
 13597  016D00  0100               	movlb	0	; () banked
 13598  016D02  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13599  016D04  0E00               	movlw	0
 13600  016D06  0100               	movlb	0	; () banked
 13601  016D08  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13602  016D0A  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 13603                           
 13604                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 13605  016D0E  0100               	movlb	0	; () banked
 13606  016D10  EE20 F006          	lfsr	2,6
 13607  016D14  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 13608  016D16  26D9               	addwf	fsr2l,f,c
 13609  016D18  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 13610  016D1A  22DA               	addwfc	fsr2h,f,c
 13611  016D1C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 13612  016D20  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 13613  016D24  0E00               	movlw	0
 13614  016D26  0100               	movlb	0	; () banked
 13615  016D28  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13616  016D2A  0E00               	movlw	0
 13617  016D2C  0100               	movlb	0	; () banked
 13618  016D2E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 13619  016D30  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 13620                           
 13621                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13622  016D34  0100               	movlb	0	; () banked
 13623  016D36  EE20 F006          	lfsr	2,6
 13624  016D3A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 13625  016D3C  26D9               	addwf	fsr2l,f,c
 13626  016D3E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 13627  016D40  22DA               	addwfc	fsr2h,f,c
 13628  016D42  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13629  016D46  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13630  016D4A  0E05               	movlw	5
 13631  016D4C  0100               	movlb	0	; () banked
 13632  016D4E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13633  016D50  0E01               	movlw	1
 13634  016D52  0100               	movlb	0	; () banked
 13635  016D54  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13636  016D56  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 13637  016D5A  0012               	return		;funcret
 13638  016D5C                     __end_of_SPI_MaxSpeed:
 13639                           	opt stack 0
 13640                           tosu	equ	0xFFF
 13641                           tosh	equ	0xFFE
 13642                           tosl	equ	0xFFD
 13643                           pclath	equ	0xFFA
 13644                           tblptru	equ	0xFF8
 13645                           tblptrh	equ	0xFF7
 13646                           tblptrl	equ	0xFF6
 13647                           tablat	equ	0xFF5
 13648                           prodh	equ	0xFF4
 13649                           prodl	equ	0xFF3
 13650                           intcon	equ	0xFF2
 13651                           postinc0	equ	0xFEE
 13652                           wreg	equ	0xFE8
 13653                           indf1	equ	0xFE7
 13654                           postdec1	equ	0xFE5
 13655                           fsr1h	equ	0xFE2
 13656                           fsr1l	equ	0xFE1
 13657                           indf2	equ	0xFDF
 13658                           postinc2	equ	0xFDE
 13659                           postdec2	equ	0xFDD
 13660                           plusw2	equ	0xFDB
 13661                           fsr2h	equ	0xFDA
 13662                           fsr2l	equ	0xFD9
 13663                           status	equ	0xFD8
 13664                           
 13665 ;; *************** function _LCD_Reset *****************
 13666 ;; Defined at:
 13667 ;;		line 95 in file "Library/LCD.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;		None
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      void 
 13674 ;; Registers used:
 13675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;Total ram usage:        0 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:   13
 13688 ;; This function calls:
 13689 ;;		_LED_Toggle
 13690 ;;		_Reset_High
 13691 ;;		_Reset_Low
 13692 ;;		_delay_ms
 13693 ;; This function is called by:
 13694 ;;		_Configure_GPIOs
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           	psect	text64
 13699  017468                     __ptext64:
 13700                           	opt stack 0
 13701  017468                     _LCD_Reset:
 13702                           	opt stack 14
 13703                           
 13704                           ;LCD.c: 97: Reset_High();
 13705                           
 13706                           ;incstack = 0
 13707  017468  ECAD  F0BE         	call	_Reset_High	;wreg free
 13708                           
 13709                           ;LCD.c: 98: LED_Toggle(eLED2);
 13710  01746C  0E01               	movlw	1
 13711  01746E  ECF2  F0BA         	call	_LED_Toggle
 13712                           
 13713                           ;LCD.c: 99: delay_ms(0x80);
 13714  017472  0E00               	movlw	0
 13715  017474  0100               	movlb	0	; () banked
 13716  017476  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13717  017478  0E80               	movlw	128
 13718  01747A  6F60               	movwf	delay_ms@ms& (0+255),b
 13719  01747C  ECC6  F0B7         	call	_delay_ms	;wreg free
 13720                           
 13721                           ;LCD.c: 100: LED_Toggle(eLED2);
 13722  017480  0E01               	movlw	1
 13723  017482  ECF2  F0BA         	call	_LED_Toggle
 13724                           
 13725                           ;LCD.c: 101: Reset_Low();
 13726  017486  EC9E  F0BE         	call	_Reset_Low	;wreg free
 13727                           
 13728                           ;LCD.c: 102: delay_ms(0x80);
 13729  01748A  0E00               	movlw	0
 13730  01748C  0100               	movlb	0	; () banked
 13731  01748E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13732  017490  0E80               	movlw	128
 13733  017492  6F60               	movwf	delay_ms@ms& (0+255),b
 13734  017494  ECC6  F0B7         	call	_delay_ms	;wreg free
 13735                           
 13736                           ;LCD.c: 103: LED_Toggle(eLED2);
 13737  017498  0E01               	movlw	1
 13738  01749A  ECF2  F0BA         	call	_LED_Toggle
 13739                           
 13740                           ;LCD.c: 104: Reset_High();
 13741  01749E  ECAD  F0BE         	call	_Reset_High	;wreg free
 13742                           
 13743                           ;LCD.c: 105: delay_ms(0x80);
 13744  0174A2  0E00               	movlw	0
 13745  0174A4  0100               	movlb	0	; () banked
 13746  0174A6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13747  0174A8  0E80               	movlw	128
 13748  0174AA  6F60               	movwf	delay_ms@ms& (0+255),b
 13749  0174AC  ECC6  F0B7         	call	_delay_ms	;wreg free
 13750                           
 13751                           ;LCD.c: 106: LED_Toggle(eLED2);
 13752  0174B0  0E01               	movlw	1
 13753  0174B2  ECF2  F0BA         	call	_LED_Toggle
 13754  0174B6  0012               	return		;funcret
 13755  0174B8                     __end_of_LCD_Reset:
 13756                           	opt stack 0
 13757                           tosu	equ	0xFFF
 13758                           tosh	equ	0xFFE
 13759                           tosl	equ	0xFFD
 13760                           pclath	equ	0xFFA
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           postinc0	equ	0xFEE
 13769                           wreg	equ	0xFE8
 13770                           indf1	equ	0xFE7
 13771                           postdec1	equ	0xFE5
 13772                           fsr1h	equ	0xFE2
 13773                           fsr1l	equ	0xFE1
 13774                           indf2	equ	0xFDF
 13775                           postinc2	equ	0xFDE
 13776                           postdec2	equ	0xFDD
 13777                           plusw2	equ	0xFDB
 13778                           fsr2h	equ	0xFDA
 13779                           fsr2l	equ	0xFD9
 13780                           status	equ	0xFD8
 13781                           
 13782 ;; *************** function _delay_ms *****************
 13783 ;; Defined at:
 13784 ;;		line 240 in file "Library/Types.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  ms              2    0[BANK0 ] unsigned short 
 13787 ;; Auto vars:     Size  Location     Type
 13788 ;;  u               4    2[BANK0 ] volatile unsigned long 
 13789 ;; Return value:  Size  Location     Type
 13790 ;;                  1    wreg      void 
 13791 ;; Registers used:
 13792 ;;		wreg, status,2, status,0
 13793 ;; Tracked objects:
 13794 ;;		On entry : 0/0
 13795 ;;		On exit  : 0/0
 13796 ;;		Unchanged: 0/0
 13797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13799 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13801 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13802 ;;Total ram usage:        6 bytes
 13803 ;; Hardware stack levels used:    1
 13804 ;; Hardware stack levels required when called:    7
 13805 ;; This function calls:
 13806 ;;		Nothing
 13807 ;; This function is called by:
 13808 ;;		_LCD_Reset
 13809 ;;		_LCD_Init
 13810 ;;		_MXK_Init
 13811 ;; This function uses a non-reentrant model
 13812 ;;
 13813                           
 13814                           	psect	text65
 13815  016F8C                     __ptext65:
 13816                           	opt stack 0
 13817  016F8C                     _delay_ms:
 13818                           	opt stack 21
 13819                           
 13820                           ;Types.c: 242: volatile unsigned long u;
 13821                           ;Types.c: 243: while (ms--)
 13822                           
 13823                           ;incstack = 0
 13824  016F8C  D01F               	goto	l13253
 13825  016F8E                     l13245:
 13826                           
 13827                           ;Types.c: 244: {
 13828                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 13829  016F8E  0E00               	movlw	0
 13830  016F90  0100               	movlb	0	; () banked
 13831  016F92  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 13832  016F94  0E00               	movlw	0
 13833  016F96  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 13834  016F98  0E00               	movlw	0
 13835  016F9A  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 13836  016F9C  0E00               	movlw	0
 13837  016F9E  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 13838  016FA0                     l13247:
 13839                           
 13840                           ; BSR set to: 0
 13841  016FA0  0100               	movlb	0	; () banked
 13842  016FA2  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 13843  016FA4  0100               	movlb	0	; () banked
 13844  016FA6  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 13845  016FA8  E111               	bnz	l13253
 13846  016FAA  0EB0               	movlw	176
 13847  016FAC  0100               	movlb	0	; () banked
 13848  016FAE  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 13849  016FB0  0E04               	movlw	4
 13850  016FB2  0100               	movlb	0	; () banked
 13851  016FB4  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 13852  016FB6  B0D8               	btfsc	status,0,c
 13853  016FB8  D009               	goto	l13253
 13854                           
 13855                           ; BSR set to: 0
 13856                           
 13857                           ; BSR set to: 0
 13858  016FBA  F000               	nop		; ;# 
 13859  016FBC  0E01               	movlw	1
 13860  016FBE  0100               	movlb	0	; () banked
 13861  016FC0  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 13862  016FC2  0E00               	movlw	0
 13863  016FC4  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 13864  016FC6  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 13865  016FC8  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 13866  016FCA  D7EA               	goto	l13247
 13867  016FCC                     l13253:
 13868  016FCC  0100               	movlb	0	; () banked
 13869  016FCE  0760               	decf	delay_ms@ms& (0+255),f,b
 13870  016FD0  A0D8               	btfss	status,0,c
 13871  016FD2  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 13872  016FD4  0100               	movlb	0	; () banked
 13873  016FD6  2960               	incf	delay_ms@ms& (0+255),w,b
 13874  016FD8  E1DA               	bnz	l13245
 13875  016FDA  0100               	movlb	0	; () banked
 13876  016FDC  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 13877  016FDE  A4D8               	btfss	status,2,c
 13878  016FE0  D7D6               	goto	l13245
 13879                           
 13880                           ; BSR set to: 0
 13881                           ;Types.c: 251: }
 13882                           ;Types.c: 252: }
 13883                           ;Types.c: 253: u = 0x8008;
 13884                           
 13885                           ; BSR set to: 0
 13886  016FE2  0E08               	movlw	8
 13887  016FE4  0100               	movlb	0	; () banked
 13888  016FE6  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 13889  016FE8  0E80               	movlw	128
 13890  016FEA  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 13891  016FEC  0E00               	movlw	0
 13892  016FEE  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 13893  016FF0  0E00               	movlw	0
 13894  016FF2  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 13895                           
 13896                           ; BSR set to: 0
 13897  016FF4  0012               	return		;funcret
 13898  016FF6                     __end_of_delay_ms:
 13899                           	opt stack 0
 13900                           tosu	equ	0xFFF
 13901                           tosh	equ	0xFFE
 13902                           tosl	equ	0xFFD
 13903                           pclath	equ	0xFFA
 13904                           tblptru	equ	0xFF8
 13905                           tblptrh	equ	0xFF7
 13906                           tblptrl	equ	0xFF6
 13907                           tablat	equ	0xFF5
 13908                           prodh	equ	0xFF4
 13909                           prodl	equ	0xFF3
 13910                           intcon	equ	0xFF2
 13911                           postinc0	equ	0xFEE
 13912                           wreg	equ	0xFE8
 13913                           indf1	equ	0xFE7
 13914                           postdec1	equ	0xFE5
 13915                           fsr1h	equ	0xFE2
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           postdec2	equ	0xFDD
 13920                           plusw2	equ	0xFDB
 13921                           fsr2h	equ	0xFDA
 13922                           fsr2l	equ	0xFD9
 13923                           status	equ	0xFD8
 13924                           
 13925 ;; *************** function _Reset_Low *****************
 13926 ;; Defined at:
 13927 ;;		line 32 in file "Library/LCD.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;		None
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;		None
 13932 ;; Return value:  Size  Location     Type
 13933 ;;                  1    wreg      void 
 13934 ;; Registers used:
 13935 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;Total ram usage:        0 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; Hardware stack levels required when called:   11
 13948 ;; This function calls:
 13949 ;;		_Port_SetPin
 13950 ;; This function is called by:
 13951 ;;		_LCD_Reset
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           	psect	text66
 13956  017D3C                     __ptext66:
 13957                           	opt stack 0
 13958  017D3C                     _Reset_Low:
 13959                           	opt stack 15
 13960                           
 13961                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;incstack = 0
 13965  017D3C  0EBF               	movlw	low _PortF
 13966  017D3E  0100               	movlb	0	; () banked
 13967  017D40  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13968  017D42  0E01               	movlw	high _PortF
 13969  017D44  0100               	movlb	0	; () banked
 13970  017D46  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13971  017D48  0E06               	movlw	6
 13972  017D4A  0100               	movlb	0	; () banked
 13973  017D4C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13974  017D4E  0E01               	movlw	1
 13975  017D50  0100               	movlb	0	; () banked
 13976  017D52  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13977  017D54  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 13978  017D58  0012               	return		;funcret
 13979  017D5A                     __end_of_Reset_Low:
 13980                           	opt stack 0
 13981                           tosu	equ	0xFFF
 13982                           tosh	equ	0xFFE
 13983                           tosl	equ	0xFFD
 13984                           pclath	equ	0xFFA
 13985                           tblptru	equ	0xFF8
 13986                           tblptrh	equ	0xFF7
 13987                           tblptrl	equ	0xFF6
 13988                           tablat	equ	0xFF5
 13989                           prodh	equ	0xFF4
 13990                           prodl	equ	0xFF3
 13991                           intcon	equ	0xFF2
 13992                           postinc0	equ	0xFEE
 13993                           wreg	equ	0xFE8
 13994                           indf1	equ	0xFE7
 13995                           postdec1	equ	0xFE5
 13996                           fsr1h	equ	0xFE2
 13997                           fsr1l	equ	0xFE1
 13998                           indf2	equ	0xFDF
 13999                           postinc2	equ	0xFDE
 14000                           postdec2	equ	0xFDD
 14001                           plusw2	equ	0xFDB
 14002                           fsr2h	equ	0xFDA
 14003                           fsr2l	equ	0xFD9
 14004                           status	equ	0xFD8
 14005                           
 14006 ;; *************** function _Reset_High *****************
 14007 ;; Defined at:
 14008 ;;		line 36 in file "Library/LCD.c"
 14009 ;; Parameters:    Size  Location     Type
 14010 ;;		None
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;		None
 14013 ;; Return value:  Size  Location     Type
 14014 ;;                  1    wreg      void 
 14015 ;; Registers used:
 14016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14017 ;; Tracked objects:
 14018 ;;		On entry : 0/0
 14019 ;;		On exit  : 0/0
 14020 ;;		Unchanged: 0/0
 14021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14026 ;;Total ram usage:        0 bytes
 14027 ;; Hardware stack levels used:    1
 14028 ;; Hardware stack levels required when called:   11
 14029 ;; This function calls:
 14030 ;;		_Port_SetPin
 14031 ;; This function is called by:
 14032 ;;		_LCD_Reset
 14033 ;; This function uses a non-reentrant model
 14034 ;;
 14035                           
 14036                           	psect	text67
 14037  017D5A                     __ptext67:
 14038                           	opt stack 0
 14039  017D5A                     _Reset_High:
 14040                           	opt stack 15
 14041                           
 14042                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 14043                           
 14044                           ;incstack = 0
 14045  017D5A  0EBF               	movlw	low _PortF
 14046  017D5C  0100               	movlb	0	; () banked
 14047  017D5E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14048  017D60  0E01               	movlw	high _PortF
 14049  017D62  0100               	movlb	0	; () banked
 14050  017D64  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14051  017D66  0E06               	movlw	6
 14052  017D68  0100               	movlb	0	; () banked
 14053  017D6A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14054  017D6C  0E00               	movlw	0
 14055  017D6E  0100               	movlb	0	; () banked
 14056  017D70  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14057  017D72  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 14058  017D76  0012               	return		;funcret
 14059  017D78                     __end_of_Reset_High:
 14060                           	opt stack 0
 14061                           tosu	equ	0xFFF
 14062                           tosh	equ	0xFFE
 14063                           tosl	equ	0xFFD
 14064                           pclath	equ	0xFFA
 14065                           tblptru	equ	0xFF8
 14066                           tblptrh	equ	0xFF7
 14067                           tblptrl	equ	0xFF6
 14068                           tablat	equ	0xFF5
 14069                           prodh	equ	0xFF4
 14070                           prodl	equ	0xFF3
 14071                           intcon	equ	0xFF2
 14072                           postinc0	equ	0xFEE
 14073                           wreg	equ	0xFE8
 14074                           indf1	equ	0xFE7
 14075                           postdec1	equ	0xFE5
 14076                           fsr1h	equ	0xFE2
 14077                           fsr1l	equ	0xFE1
 14078                           indf2	equ	0xFDF
 14079                           postinc2	equ	0xFDE
 14080                           postdec2	equ	0xFDD
 14081                           plusw2	equ	0xFDB
 14082                           fsr2h	equ	0xFDA
 14083                           fsr2l	equ	0xFD9
 14084                           status	equ	0xFD8
 14085                           
 14086 ;; *************** function _LED_Toggle *****************
 14087 ;; Defined at:
 14088 ;;		line 50 in file "Library/LED.c"
 14089 ;; Parameters:    Size  Location     Type
 14090 ;;  pLED            1    wreg     enum E6739
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;  pLED            1   24[BANK0 ] enum E6739
 14093 ;; Return value:  Size  Location     Type
 14094 ;;                  1    wreg      void 
 14095 ;; Registers used:
 14096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14097 ;; Tracked objects:
 14098 ;;		On entry : 0/0
 14099 ;;		On exit  : 0/0
 14100 ;;		Unchanged: 0/0
 14101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14106 ;;Total ram usage:        1 bytes
 14107 ;; Hardware stack levels used:    1
 14108 ;; Hardware stack levels required when called:   12
 14109 ;; This function calls:
 14110 ;;		_Port_TogglePin
 14111 ;; This function is called by:
 14112 ;;		_LCD_Reset
 14113 ;;		_Event_DIPSwitch
 14114 ;;		_Event_TestButton
 14115 ;;		_Event_ADCSequenceComplete
 14116 ;;		_Event_HMI_DIPSwitch
 14117 ;;		_Event_HMI_LeftButton
 14118 ;;		_Event_HMI_RightButton
 14119 ;;		_Event_HMI_UpButton
 14120 ;;		_Event_HMI_DownButton
 14121 ;; This function uses a non-reentrant model
 14122 ;;
 14123                           
 14124                           	psect	text68
 14125  0175E4                     __ptext68:
 14126                           	opt stack 0
 14127  0175E4                     _LED_Toggle:
 14128                           	opt stack 14
 14129                           
 14130                           ;incstack = 0
 14131                           ;LED_Toggle@pLED stored from wreg
 14132  0175E4  0100               	movlb	0	; () banked
 14133  0175E6  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 14134                           
 14135                           ;LED.c: 52: switch (pLED)
 14136  0175E8  D018               	goto	l13241
 14137  0175EA                     l13235:
 14138                           
 14139                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 14140  0175EA  0EEA               	movlw	low _PortC
 14141  0175EC  0100               	movlb	0	; () banked
 14142  0175EE  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 14143  0175F0  0E00               	movlw	high _PortC
 14144  0175F2  0100               	movlb	0	; () banked
 14145  0175F4  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14146  0175F6  0E00               	movlw	0
 14147  0175F8  0100               	movlb	0	; () banked
 14148  0175FA  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 14149  0175FC  EC95  F0BD         	call	_Port_TogglePin	;wreg free
 14150                           
 14151                           ;LED.c: 56: break;
 14152  017600  0012               	return	
 14153  017602                     l13237:
 14154                           
 14155                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 14156  017602  0EEA               	movlw	low _PortC
 14157  017604  0100               	movlb	0	; () banked
 14158  017606  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 14159  017608  0E00               	movlw	high _PortC
 14160  01760A  0100               	movlb	0	; () banked
 14161  01760C  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14162  01760E  0E01               	movlw	1
 14163  017610  0100               	movlb	0	; () banked
 14164  017612  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 14165  017614  EC95  F0BD         	call	_Port_TogglePin	;wreg free
 14166                           
 14167                           ;LED.c: 60: }
 14168                           
 14169                           ;LED.c: 59: break;
 14170  017618  0012               	return	
 14171  01761A                     l13241:
 14172  01761A  0100               	movlb	0	; () banked
 14173  01761C  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 14174                           
 14175                           ; Switch size 1, requested type "space"
 14176                           ; Number of cases is 2, Range of values is 0 to 1
 14177                           ; switch strategies available:
 14178                           ; Name         Instructions Cycles
 14179                           ; simple_byte            7     4 (average)
 14180                           ;	Chosen strategy is simple_byte
 14181  01761E  0A00               	xorlw	0	; case 0
 14182  017620  B4D8               	btfsc	status,2,c
 14183  017622  D7E3               	goto	l13235
 14184  017624  0A01               	xorlw	1	; case 1
 14185  017626  A4D8               	btfss	status,2,c
 14186  017628  0012               	return	
 14187  01762A  D7EB               	goto	l13237
 14188  01762C                     __end_of_LED_Toggle:
 14189                           	opt stack 0
 14190                           tosu	equ	0xFFF
 14191                           tosh	equ	0xFFE
 14192                           tosl	equ	0xFFD
 14193                           pclath	equ	0xFFA
 14194                           tblptru	equ	0xFF8
 14195                           tblptrh	equ	0xFF7
 14196                           tblptrl	equ	0xFF6
 14197                           tablat	equ	0xFF5
 14198                           prodh	equ	0xFF4
 14199                           prodl	equ	0xFF3
 14200                           intcon	equ	0xFF2
 14201                           postinc0	equ	0xFEE
 14202                           wreg	equ	0xFE8
 14203                           indf1	equ	0xFE7
 14204                           postdec1	equ	0xFE5
 14205                           fsr1h	equ	0xFE2
 14206                           fsr1l	equ	0xFE1
 14207                           indf2	equ	0xFDF
 14208                           postinc2	equ	0xFDE
 14209                           postdec2	equ	0xFDD
 14210                           plusw2	equ	0xFDB
 14211                           fsr2h	equ	0xFDA
 14212                           fsr2l	equ	0xFD9
 14213                           status	equ	0xFD8
 14214                           
 14215 ;; *************** function _Port_TogglePin *****************
 14216 ;; Defined at:
 14217 ;;		line 278 in file "Library/Port.c"
 14218 ;; Parameters:    Size  Location     Type
 14219 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 14220 ;;		 -> PortC(10), 
 14221 ;;  pPin            1   22[BANK0 ] enum E6750
 14222 ;; Auto vars:     Size  Location     Type
 14223 ;;  Value           1   23[BANK0 ] unsigned char 
 14224 ;; Return value:  Size  Location     Type
 14225 ;;                  1    wreg      void 
 14226 ;; Registers used:
 14227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14228 ;; Tracked objects:
 14229 ;;		On entry : 0/0
 14230 ;;		On exit  : 0/0
 14231 ;;		Unchanged: 0/0
 14232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14233 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14236 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14237 ;;Total ram usage:        4 bytes
 14238 ;; Hardware stack levels used:    1
 14239 ;; Hardware stack levels required when called:   11
 14240 ;; This function calls:
 14241 ;;		_Port_GetPin
 14242 ;;		_Port_SetPin
 14243 ;; This function is called by:
 14244 ;;		_LED_Toggle
 14245 ;; This function uses a non-reentrant model
 14246 ;;
 14247                           
 14248                           	psect	text69
 14249  017B2A                     __ptext69:
 14250                           	opt stack 0
 14251  017B2A                     _Port_TogglePin:
 14252                           	opt stack 14
 14253                           
 14254                           ;Port.c: 280: UINT8 Value;
 14255                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 14256                           
 14257                           ;incstack = 0
 14258  017B2A  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 14259  017B2E  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 14260  017B32  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 14261  017B36  EC5E  F0BB         	call	_Port_GetPin	;wreg free
 14262  017B3A  0100               	movlb	0	; () banked
 14263  017B3C  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;Port.c: 282: Value ^= 0x01;
 14267  017B3E  0E01               	movlw	1
 14268  017B40  0100               	movlb	0	; () banked
 14269  017B42  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 14273  017B44  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 14274  017B48  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 14275  017B4C  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 14276  017B50  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 14277  017B54  ECC8  F0AB         	call	_Port_SetPin	;wreg free
 14278  017B58  0012               	return		;funcret
 14279  017B5A                     __end_of_Port_TogglePin:
 14280                           	opt stack 0
 14281                           tosu	equ	0xFFF
 14282                           tosh	equ	0xFFE
 14283                           tosl	equ	0xFFD
 14284                           pclath	equ	0xFFA
 14285                           tblptru	equ	0xFF8
 14286                           tblptrh	equ	0xFF7
 14287                           tblptrl	equ	0xFF6
 14288                           tablat	equ	0xFF5
 14289                           prodh	equ	0xFF4
 14290                           prodl	equ	0xFF3
 14291                           intcon	equ	0xFF2
 14292                           postinc0	equ	0xFEE
 14293                           wreg	equ	0xFE8
 14294                           indf1	equ	0xFE7
 14295                           postdec1	equ	0xFE5
 14296                           fsr1h	equ	0xFE2
 14297                           fsr1l	equ	0xFE1
 14298                           indf2	equ	0xFDF
 14299                           postinc2	equ	0xFDE
 14300                           postdec2	equ	0xFDD
 14301                           plusw2	equ	0xFDB
 14302                           fsr2h	equ	0xFDA
 14303                           fsr2l	equ	0xFD9
 14304                           status	equ	0xFD8
 14305                           
 14306 ;; *************** function _Port_SetPin *****************
 14307 ;; Defined at:
 14308 ;;		line 247 in file "Library/Port.c"
 14309 ;; Parameters:    Size  Location     Type
 14310 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14311 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14312 ;;  pPin            1   17[BANK0 ] enum E6750
 14313 ;;  pValue          1   18[BANK0 ] unsigned char 
 14314 ;; Auto vars:     Size  Location     Type
 14315 ;;  Type            1   19[BANK0 ] enum E6795
 14316 ;; Return value:  Size  Location     Type
 14317 ;;                  1    wreg      void 
 14318 ;; Registers used:
 14319 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14320 ;; Tracked objects:
 14321 ;;		On entry : 0/0
 14322 ;;		On exit  : 0/0
 14323 ;;		Unchanged: 0/0
 14324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14325 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;Total ram usage:        5 bytes
 14330 ;; Hardware stack levels used:    1
 14331 ;; Hardware stack levels required when called:   10
 14332 ;; This function calls:
 14333 ;;		_Byte_SetBit
 14334 ;;		_Word_GetPair
 14335 ;; This function is called by:
 14336 ;;		_Reset_Low
 14337 ;;		_Reset_High
 14338 ;;		_LED_Set
 14339 ;;		_Port_TogglePin
 14340 ;;		_Motor_Init
 14341 ;;		_Motor_Step
 14342 ;;		_MXK_Init
 14343 ;; This function uses a non-reentrant model
 14344 ;;
 14345                           
 14346                           	psect	text70
 14347  015790                     __ptext70:
 14348                           	opt stack 0
 14349  015790                     _Port_SetPin:
 14350                           	opt stack 14
 14351                           
 14352                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 14353                           
 14354                           ;incstack = 0
 14355  015790  0E08               	movlw	8
 14356  015792  0100               	movlb	0	; () banked
 14357  015794  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 14358  015796  0100               	movlb	0	; () banked
 14359  015798  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14360  01579A  0E00               	movlw	0
 14361  01579C  0100               	movlb	0	; () banked
 14362  01579E  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 14363  0157A0  0100               	movlb	0	; () banked
 14364  0157A2  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14365  0157A4  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 14366  0157A8  EC48  F0BC         	call	_Word_GetPair	;wreg free
 14367  0157AC  0100               	movlb	0	; () banked
 14368  0157AE  6F73               	movwf	Port_SetPin@Type& (0+255),b
 14369                           
 14370                           ;Port.c: 250: switch (Type)
 14371  0157B0  D042               	goto	l12609
 14372  0157B2                     l12595:
 14373                           
 14374                           ; BSR set to: 0
 14375                           ;Port.c: 256: pValue &= 1;
 14376  0157B2  0E01               	movlw	1
 14377  0157B4  0100               	movlb	0	; () banked
 14378  0157B6  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14379                           
 14380                           ; BSR set to: 0
 14381                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14382  0157B8  0100               	movlb	0	; () banked
 14383  0157BA  EE20 F002          	lfsr	2,2
 14384  0157BE  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14385  0157C0  26D9               	addwf	fsr2l,f,c
 14386  0157C2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14387  0157C4  22DA               	addwfc	fsr2h,f,c
 14388  0157C6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14389  0157CA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14390  0157CE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14391  0157D2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14392  0157D6  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 14393                           
 14394                           ;Port.c: 258: break;
 14395  0157DA  0012               	return	
 14396  0157DC                     l12599:
 14397                           
 14398                           ;Port.c: 261: pValue &= 1;
 14399  0157DC  0E01               	movlw	1
 14400  0157DE  0100               	movlb	0	; () banked
 14401  0157E0  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14402                           
 14403                           ;Port.c: 262: pValue ^= 1;
 14404  0157E2  0E01               	movlw	1
 14405  0157E4  0100               	movlb	0	; () banked
 14406  0157E6  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14410  0157E8  0100               	movlb	0	; () banked
 14411  0157EA  EE20 F002          	lfsr	2,2
 14412  0157EE  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14413  0157F0  26D9               	addwf	fsr2l,f,c
 14414  0157F2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14415  0157F4  22DA               	addwfc	fsr2h,f,c
 14416  0157F6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14417  0157FA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14418  0157FE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14419  015802  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14420  015806  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 14421                           
 14422                           ;Port.c: 264: break;
 14423  01580A  0012               	return	
 14424  01580C                     l12603:
 14425                           
 14426                           ;Port.c: 266: pValue &= 1;
 14427  01580C  0E01               	movlw	1
 14428  01580E  0100               	movlb	0	; () banked
 14429  015810  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 14433  015812  0100               	movlb	0	; () banked
 14434  015814  EE20 F004          	lfsr	2,4
 14435  015818  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14436  01581A  26D9               	addwf	fsr2l,f,c
 14437  01581C  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14438  01581E  22DA               	addwfc	fsr2h,f,c
 14439  015820  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14440  015824  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14441  015828  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14442  01582C  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14443  015830  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 14444                           
 14445                           ;Port.c: 269: }
 14446                           
 14447                           ;Port.c: 268: break;
 14448  015834  0012               	return	
 14449  015836                     l12609:
 14450  015836  0100               	movlb	0	; () banked
 14451  015838  5173               	movf	Port_SetPin@Type& (0+255),w,b
 14452                           
 14453                           ; Switch size 1, requested type "space"
 14454                           ; Number of cases is 4, Range of values is 0 to 3
 14455                           ; switch strategies available:
 14456                           ; Name         Instructions Cycles
 14457                           ; simple_byte           13     7 (average)
 14458                           ;	Chosen strategy is simple_byte
 14459  01583A  0A00               	xorlw	0	; case 0
 14460  01583C  B4D8               	btfsc	status,2,c
 14461  01583E  0012               	return	
 14462  015840  0A01               	xorlw	1	; case 1
 14463  015842  B4D8               	btfsc	status,2,c
 14464  015844  D7B6               	goto	l12595
 14465  015846  0A03               	xorlw	3	; case 2
 14466  015848  B4D8               	btfsc	status,2,c
 14467  01584A  D7C8               	goto	l12599
 14468  01584C  0A01               	xorlw	1	; case 3
 14469  01584E  A4D8               	btfss	status,2,c
 14470  015850  0012               	return	
 14471  015852  D7DC               	goto	l12603
 14472  015854                     __end_of_Port_SetPin:
 14473                           	opt stack 0
 14474                           tosu	equ	0xFFF
 14475                           tosh	equ	0xFFE
 14476                           tosl	equ	0xFFD
 14477                           pclath	equ	0xFFA
 14478                           tblptru	equ	0xFF8
 14479                           tblptrh	equ	0xFF7
 14480                           tblptrl	equ	0xFF6
 14481                           tablat	equ	0xFF5
 14482                           prodh	equ	0xFF4
 14483                           prodl	equ	0xFF3
 14484                           intcon	equ	0xFF2
 14485                           postinc0	equ	0xFEE
 14486                           wreg	equ	0xFE8
 14487                           indf1	equ	0xFE7
 14488                           postdec1	equ	0xFE5
 14489                           fsr1h	equ	0xFE2
 14490                           fsr1l	equ	0xFE1
 14491                           indf2	equ	0xFDF
 14492                           postinc2	equ	0xFDE
 14493                           postdec2	equ	0xFDD
 14494                           plusw2	equ	0xFDB
 14495                           fsr2h	equ	0xFDA
 14496                           fsr2l	equ	0xFD9
 14497                           status	equ	0xFD8
 14498                           
 14499 ;; *************** function _Port_GetPin *****************
 14500 ;; Defined at:
 14501 ;;		line 271 in file "Library/Port.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 14504 ;;		 -> PortB(10), PortE(10), PortC(10), 
 14505 ;;  pPin            1    2[BANK0 ] enum E6750
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  Output          1    5[BANK0 ] unsigned char 
 14508 ;; Return value:  Size  Location     Type
 14509 ;;                  1    wreg      unsigned char 
 14510 ;; Registers used:
 14511 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14517 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14520 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;Total ram usage:        6 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    7
 14524 ;; This function calls:
 14525 ;;		Nothing
 14526 ;; This function is called by:
 14527 ;;		_Port_TogglePin
 14528 ;;		_HMI_LeftSwitch
 14529 ;;		_HMI_RightSwitch
 14530 ;;		_HMI_UpSwitch
 14531 ;;		_HMI_DownSwitch
 14532 ;;		_MXK_TestButton
 14533 ;; This function uses a non-reentrant model
 14534 ;;
 14535                           
 14536                           	psect	text71
 14537  0176BC                     __ptext71:
 14538                           	opt stack 0
 14539  0176BC                     _Port_GetPin:
 14540                           	opt stack 21
 14541                           
 14542                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 14543                           
 14544                           ;incstack = 0
 14545  0176BC  0100               	movlb	0	; () banked
 14546  0176BE  EE20 F006          	lfsr	2,6
 14547  0176C2  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 14548  0176C4  26D9               	addwf	fsr2l,f,c
 14549  0176C6  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 14550  0176C8  22DA               	addwfc	fsr2h,f,c
 14551  0176CA  CFDE F063          	movff	postinc2,??_Port_GetPin
 14552  0176CE  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 14553  0176D2  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 14554  0176D6  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 14555  0176DA  50DF               	movf	indf2,w,c
 14556  0176DC  0100               	movlb	0	; () banked
 14557  0176DE  6F65               	movwf	Port_GetPin@Output& (0+255),b
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;Port.c: 274: Output >>= (UINT8)pPin;
 14561  0176E0  0100               	movlb	0	; () banked
 14562  0176E2  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 14563  0176E4  0100               	movlb	0	; () banked
 14564  0176E6  6F63               	movwf	??_Port_GetPin& (0+255),b
 14565  0176E8  D003               	goto	u10300
 14566  0176EA                     u10305:
 14567  0176EA  0100               	movlb	0	; () banked
 14568  0176EC  90D8               	bcf	status,0,c
 14569  0176EE  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 14570  0176F0                     u10300:
 14571  0176F0  0100               	movlb	0	; () banked
 14572  0176F2  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 14573  0176F4  D7FA               	goto	u10305
 14574                           
 14575                           ;Port.c: 275: Output &= 1;
 14576  0176F6  0E01               	movlw	1
 14577  0176F8  0100               	movlb	0	; () banked
 14578  0176FA  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 14579                           
 14580                           ; BSR set to: 0
 14581                           ;Port.c: 276: return Output;
 14582  0176FC  0100               	movlb	0	; () banked
 14583  0176FE  5165               	movf	Port_GetPin@Output& (0+255),w,b
 14584  017700  0012               	return	
 14585  017702                     __end_of_Port_GetPin:
 14586                           	opt stack 0
 14587                           tosu	equ	0xFFF
 14588                           tosh	equ	0xFFE
 14589                           tosl	equ	0xFFD
 14590                           pclath	equ	0xFFA
 14591                           tblptru	equ	0xFF8
 14592                           tblptrh	equ	0xFF7
 14593                           tblptrl	equ	0xFF6
 14594                           tablat	equ	0xFF5
 14595                           prodh	equ	0xFF4
 14596                           prodl	equ	0xFF3
 14597                           intcon	equ	0xFF2
 14598                           postinc0	equ	0xFEE
 14599                           wreg	equ	0xFE8
 14600                           indf1	equ	0xFE7
 14601                           postdec1	equ	0xFE5
 14602                           fsr1h	equ	0xFE2
 14603                           fsr1l	equ	0xFE1
 14604                           indf2	equ	0xFDF
 14605                           postinc2	equ	0xFDE
 14606                           postdec2	equ	0xFDD
 14607                           plusw2	equ	0xFDB
 14608                           fsr2h	equ	0xFDA
 14609                           fsr2l	equ	0xFD9
 14610                           status	equ	0xFD8
 14611                           
 14612 ;; *************** function _ISR_Enable *****************
 14613 ;; Defined at:
 14614 ;;		line 27 in file "Library/ISR.c"
 14615 ;; Parameters:    Size  Location     Type
 14616 ;;		None
 14617 ;; Auto vars:     Size  Location     Type
 14618 ;;		None
 14619 ;; Return value:  Size  Location     Type
 14620 ;;                  1    wreg      void 
 14621 ;; Registers used:
 14622 ;;		None
 14623 ;; Tracked objects:
 14624 ;;		On entry : 0/0
 14625 ;;		On exit  : 0/0
 14626 ;;		Unchanged: 0/0
 14627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14632 ;;Total ram usage:        0 bytes
 14633 ;; Hardware stack levels used:    1
 14634 ;; Hardware stack levels required when called:    7
 14635 ;; This function calls:
 14636 ;;		Nothing
 14637 ;; This function is called by:
 14638 ;;		_initialise
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           	psect	text72
 14643  017FB6                     __ptext72:
 14644                           	opt stack 0
 14645  017FB6                     _ISR_Enable:
 14646                           	opt stack 22
 14647                           
 14648                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;incstack = 0
 14652  017FB6  8CF2               	bsf	intcon,6,c	;volatile
 14653                           
 14654                           ;ISR.c: 30: INTCONbits.GIE = 1;
 14655  017FB8  8EF2               	bsf	intcon,7,c	;volatile
 14656                           
 14657                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 14658  017FBA  88F2               	bsf	intcon,4,c	;volatile
 14659                           
 14660                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 14661  017FBC  92F2               	bcf	intcon,1,c	;volatile
 14662  017FBE  0012               	return		;funcret
 14663  017FC0                     __end_of_ISR_Enable:
 14664                           	opt stack 0
 14665                           tosu	equ	0xFFF
 14666                           tosh	equ	0xFFE
 14667                           tosl	equ	0xFFD
 14668                           pclath	equ	0xFFA
 14669                           tblptru	equ	0xFF8
 14670                           tblptrh	equ	0xFF7
 14671                           tblptrl	equ	0xFF6
 14672                           tablat	equ	0xFF5
 14673                           prodh	equ	0xFF4
 14674                           prodl	equ	0xFF3
 14675                           intcon	equ	0xFF2
 14676                           postinc0	equ	0xFEE
 14677                           wreg	equ	0xFE8
 14678                           indf1	equ	0xFE7
 14679                           postdec1	equ	0xFE5
 14680                           fsr1h	equ	0xFE2
 14681                           fsr1l	equ	0xFE1
 14682                           indf2	equ	0xFDF
 14683                           postinc2	equ	0xFDE
 14684                           postdec2	equ	0xFDD
 14685                           plusw2	equ	0xFDB
 14686                           fsr2h	equ	0xFDA
 14687                           fsr2l	equ	0xFD9
 14688                           status	equ	0xFD8
 14689                           
 14690 ;; *************** function _HMI_Init *****************
 14691 ;; Defined at:
 14692 ;;		line 104 in file "HMI.c"
 14693 ;; Parameters:    Size  Location     Type
 14694 ;;		None
 14695 ;; Auto vars:     Size  Location     Type
 14696 ;;  in              2   72[BANK0 ] unsigned short 
 14697 ;; Return value:  Size  Location     Type
 14698 ;;                  1    wreg      void 
 14699 ;; Registers used:
 14700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14701 ;; Tracked objects:
 14702 ;;		On entry : 0/0
 14703 ;;		On exit  : 0/0
 14704 ;;		Unchanged: 0/0
 14705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14710 ;;Total ram usage:        2 bytes
 14711 ;; Hardware stack levels used:    1
 14712 ;; Hardware stack levels required when called:   16
 14713 ;; This function calls:
 14714 ;;		_Button_Init
 14715 ;;		_SPI_Init
 14716 ;;		_SPI_MinSpeed
 14717 ;; This function is called by:
 14718 ;;		_initialise
 14719 ;; This function uses a non-reentrant model
 14720 ;;
 14721                           
 14722                           	psect	text73
 14723  01355E                     __ptext73:
 14724                           	opt stack 0
 14725  01355E                     _HMI_Init:
 14726                           	opt stack 13
 14727                           
 14728                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 14729                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 14730                           
 14731                           ;incstack = 0
 14732  01355E  0E59               	movlw	low (_HMIBoard+48)
 14733  013560  0100               	movlb	0	; () banked
 14734  013562  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14735  013564  0E01               	movlw	high (_HMIBoard+48)
 14736  013566  0100               	movlb	0	; () banked
 14737  013568  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14738  01356A  0E00               	movlw	0
 14739  01356C  0100               	movlb	0	; () banked
 14740  01356E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14741  013570  0E02               	movlw	2
 14742  013572  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14743  013574  0EE6               	movlw	low _HMI_InitButtons
 14744  013576  0100               	movlb	0	; () banked
 14745  013578  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14746  01357A  0E7F               	movlw	high _HMI_InitButtons
 14747  01357C  0100               	movlb	0	; () banked
 14748  01357E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14749  013580  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14750  013582  0100               	movlb	0	; () banked
 14751  013584  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14752  013586  0E58               	movlw	low _HMI_DIPSwitch
 14753  013588  0100               	movlb	0	; () banked
 14754  01358A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14755  01358C  0E7E               	movlw	high _HMI_DIPSwitch
 14756  01358E  0100               	movlb	0	; () banked
 14757  013590  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14758  013592  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 14759  013594  0100               	movlb	0	; () banked
 14760  013596  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14761  013598  0E02               	movlw	low _Event_NULL
 14762  01359A  0100               	movlb	0	; () banked
 14763  01359C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14764  01359E  0E80               	movlw	high _Event_NULL
 14765  0135A0  0100               	movlb	0	; () banked
 14766  0135A2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14767  0135A4  0E01               	movlw	low (_Event_NULL shr (0+16))
 14768  0135A6  0100               	movlb	0	; () banked
 14769  0135A8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14770  0135AA  EC28  F0AA         	call	_Button_Init	;wreg free
 14771                           
 14772                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 14773                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 14774  0135AE  0E3B               	movlw	low (_HMIBoard+18)
 14775  0135B0  0100               	movlb	0	; () banked
 14776  0135B2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14777  0135B4  0E01               	movlw	high (_HMIBoard+18)
 14778  0135B6  0100               	movlb	0	; () banked
 14779  0135B8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14780  0135BA  0E00               	movlw	0
 14781  0135BC  0100               	movlb	0	; () banked
 14782  0135BE  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14783  0135C0  0E02               	movlw	2
 14784  0135C2  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14785  0135C4  0EE6               	movlw	low _HMI_InitButtons
 14786  0135C6  0100               	movlb	0	; () banked
 14787  0135C8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14788  0135CA  0E7F               	movlw	high _HMI_InitButtons
 14789  0135CC  0100               	movlb	0	; () banked
 14790  0135CE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14791  0135D0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14792  0135D2  0100               	movlb	0	; () banked
 14793  0135D4  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14794  0135D6  0EB8               	movlw	low _HMI_LeftSwitch
 14795  0135D8  0100               	movlb	0	; () banked
 14796  0135DA  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14797  0135DC  0E7E               	movlw	high _HMI_LeftSwitch
 14798  0135DE  0100               	movlb	0	; () banked
 14799  0135E0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14800  0135E2  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 14801  0135E4  0100               	movlb	0	; () banked
 14802  0135E6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14803  0135E8  0E02               	movlw	low _Event_NULL
 14804  0135EA  0100               	movlb	0	; () banked
 14805  0135EC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14806  0135EE  0E80               	movlw	high _Event_NULL
 14807  0135F0  0100               	movlb	0	; () banked
 14808  0135F2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14809  0135F4  0E01               	movlw	low (_Event_NULL shr (0+16))
 14810  0135F6  0100               	movlb	0	; () banked
 14811  0135F8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14812  0135FA  EC28  F0AA         	call	_Button_Init	;wreg free
 14813                           
 14814                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 14815                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 14816  0135FE  0E31               	movlw	low (_HMIBoard+8)
 14817  013600  0100               	movlb	0	; () banked
 14818  013602  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14819  013604  0E01               	movlw	high (_HMIBoard+8)
 14820  013606  0100               	movlb	0	; () banked
 14821  013608  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14822  01360A  0E00               	movlw	0
 14823  01360C  0100               	movlb	0	; () banked
 14824  01360E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14825  013610  0E02               	movlw	2
 14826  013612  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14827  013614  0EE6               	movlw	low _HMI_InitButtons
 14828  013616  0100               	movlb	0	; () banked
 14829  013618  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14830  01361A  0E7F               	movlw	high _HMI_InitButtons
 14831  01361C  0100               	movlb	0	; () banked
 14832  01361E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14833  013620  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14834  013622  0100               	movlb	0	; () banked
 14835  013624  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14836  013626  0EA0               	movlw	low _HMI_RightSwitch
 14837  013628  0100               	movlb	0	; () banked
 14838  01362A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14839  01362C  0E7E               	movlw	high _HMI_RightSwitch
 14840  01362E  0100               	movlb	0	; () banked
 14841  013630  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14842  013632  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 14843  013634  0100               	movlb	0	; () banked
 14844  013636  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14845  013638  0E02               	movlw	low _Event_NULL
 14846  01363A  0100               	movlb	0	; () banked
 14847  01363C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14848  01363E  0E80               	movlw	high _Event_NULL
 14849  013640  0100               	movlb	0	; () banked
 14850  013642  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14851  013644  0E01               	movlw	low (_Event_NULL shr (0+16))
 14852  013646  0100               	movlb	0	; () banked
 14853  013648  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14854  01364A  EC28  F0AA         	call	_Button_Init	;wreg free
 14855                           
 14856                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 14857                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 14858  01364E  0E45               	movlw	low (_HMIBoard+28)
 14859  013650  0100               	movlb	0	; () banked
 14860  013652  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14861  013654  0E01               	movlw	high (_HMIBoard+28)
 14862  013656  0100               	movlb	0	; () banked
 14863  013658  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14864  01365A  0E00               	movlw	0
 14865  01365C  0100               	movlb	0	; () banked
 14866  01365E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14867  013660  0E02               	movlw	2
 14868  013662  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14869  013664  0EE6               	movlw	low _HMI_InitButtons
 14870  013666  0100               	movlb	0	; () banked
 14871  013668  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14872  01366A  0E7F               	movlw	high _HMI_InitButtons
 14873  01366C  0100               	movlb	0	; () banked
 14874  01366E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14875  013670  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14876  013672  0100               	movlb	0	; () banked
 14877  013674  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14878  013676  0E88               	movlw	low _HMI_UpSwitch
 14879  013678  0100               	movlb	0	; () banked
 14880  01367A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14881  01367C  0E7E               	movlw	high _HMI_UpSwitch
 14882  01367E  0100               	movlb	0	; () banked
 14883  013680  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14884  013682  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 14885  013684  0100               	movlb	0	; () banked
 14886  013686  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14887  013688  0E02               	movlw	low _Event_NULL
 14888  01368A  0100               	movlb	0	; () banked
 14889  01368C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14890  01368E  0E80               	movlw	high _Event_NULL
 14891  013690  0100               	movlb	0	; () banked
 14892  013692  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14893  013694  0E01               	movlw	low (_Event_NULL shr (0+16))
 14894  013696  0100               	movlb	0	; () banked
 14895  013698  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14896  01369A  EC28  F0AA         	call	_Button_Init	;wreg free
 14897                           
 14898                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 14899                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 14900  01369E  0E4F               	movlw	low (_HMIBoard+38)
 14901  0136A0  0100               	movlb	0	; () banked
 14902  0136A2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14903  0136A4  0E01               	movlw	high (_HMIBoard+38)
 14904  0136A6  0100               	movlb	0	; () banked
 14905  0136A8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14906  0136AA  0E00               	movlw	0
 14907  0136AC  0100               	movlb	0	; () banked
 14908  0136AE  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14909  0136B0  0E02               	movlw	2
 14910  0136B2  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14911  0136B4  0EE6               	movlw	low _HMI_InitButtons
 14912  0136B6  0100               	movlb	0	; () banked
 14913  0136B8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14914  0136BA  0E7F               	movlw	high _HMI_InitButtons
 14915  0136BC  0100               	movlb	0	; () banked
 14916  0136BE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14917  0136C0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14918  0136C2  0100               	movlb	0	; () banked
 14919  0136C4  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14920  0136C6  0E70               	movlw	low _HMI_DownSwitch
 14921  0136C8  0100               	movlb	0	; () banked
 14922  0136CA  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14923  0136CC  0E7E               	movlw	high _HMI_DownSwitch
 14924  0136CE  0100               	movlb	0	; () banked
 14925  0136D0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14926  0136D2  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 14927  0136D4  0100               	movlb	0	; () banked
 14928  0136D6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14929  0136D8  0E02               	movlw	low _Event_NULL
 14930  0136DA  0100               	movlb	0	; () banked
 14931  0136DC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14932  0136DE  0E80               	movlw	high _Event_NULL
 14933  0136E0  0100               	movlb	0	; () banked
 14934  0136E2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14935  0136E4  0E01               	movlw	low (_Event_NULL shr (0+16))
 14936  0136E6  0100               	movlb	0	; () banked
 14937  0136E8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14938  0136EA  EC28  F0AA         	call	_Button_Init	;wreg free
 14939                           
 14940                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 14941  0136EE  0EA0               	movlw	160
 14942  0136F0  0100               	movlb	0	; () banked
 14943  0136F2  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 14944  0136F4  0E86               	movlw	134
 14945  0136F6  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14946  0136F8  0E01               	movlw	1
 14947  0136FA  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14948  0136FC  0E00               	movlw	0
 14949  0136FE  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14950  013700  0E00               	movlw	0
 14951  013702  0100               	movlb	0	; () banked
 14952  013704  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 14953  013706  0E02               	movlw	2
 14954  013708  0100               	movlb	0	; () banked
 14955  01370A  6F92               	movwf	SPI_Init@pMode& (0+255),b
 14956  01370C  EC7D  F08B         	call	_SPI_Init	;wreg free
 14957                           
 14958                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 14959  013710  0E63               	movlw	low _SPI1
 14960  013712  0100               	movlb	0	; () banked
 14961  013714  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 14962  013716  0E01               	movlw	high _SPI1
 14963  013718  0100               	movlb	0	; () banked
 14964  01371A  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 14965  01371C  ECAE  F0B6         	call	_SPI_MinSpeed	;wreg free
 14966                           
 14967                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 14968  013720  0E00               	movlw	0
 14969  013722  0100               	movlb	0	; () banked
 14970  013724  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 14971  013726  0E00               	movlw	0
 14972  013728  6FA8               	movwf	HMI_Init@in& (0+255),b
 14973  01372A                     l15293:
 14974                           
 14975                           ; BSR set to: 0
 14976  01372A  0100               	movlb	0	; () banked
 14977  01372C  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 14978  01372E  E113               	bnz	l1153
 14979  013730  0E08               	movlw	8
 14980  013732  0100               	movlb	0	; () banked
 14981  013734  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 14982  013736  B0D8               	btfsc	status,0,c
 14983  013738  0012               	return	
 14984                           
 14985                           ; BSR set to: 0
 14986                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 14987                           
 14988                           ; BSR set to: 0
 14989                           
 14990                           ; BSR set to: 0
 14991  01373A  0E29               	movlw	low _HMIBoard
 14992  01373C  0100               	movlb	0	; () banked
 14993  01373E  25A8               	addwf	HMI_Init@in& (0+255),w,b
 14994  013740  6ED9               	movwf	fsr2l,c
 14995  013742  0E01               	movlw	high _HMIBoard
 14996  013744  0100               	movlb	0	; () banked
 14997  013746  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 14998  013748  6EDA               	movwf	fsr2h,c
 14999  01374A  0E00               	movlw	0
 15000  01374C  6EDF               	movwf	indf2,c
 15001                           
 15002                           ; BSR set to: 0
 15003  01374E  0100               	movlb	0	; () banked
 15004  013750  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 15005  013752  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 15006  013754  D7EA               	goto	l15293
 15007  013756                     l1153:
 15008                           
 15009                           ; BSR set to: 0
 15010  013756  0012               	return		;funcret
 15011  013758                     __end_of_HMI_Init:
 15012                           	opt stack 0
 15013                           tosu	equ	0xFFF
 15014                           tosh	equ	0xFFE
 15015                           tosl	equ	0xFFD
 15016                           pclath	equ	0xFFA
 15017                           tblptru	equ	0xFF8
 15018                           tblptrh	equ	0xFF7
 15019                           tblptrl	equ	0xFF6
 15020                           tablat	equ	0xFF5
 15021                           prodh	equ	0xFF4
 15022                           prodl	equ	0xFF3
 15023                           intcon	equ	0xFF2
 15024                           postinc0	equ	0xFEE
 15025                           wreg	equ	0xFE8
 15026                           indf1	equ	0xFE7
 15027                           postdec1	equ	0xFE5
 15028                           fsr1h	equ	0xFE2
 15029                           fsr1l	equ	0xFE1
 15030                           indf2	equ	0xFDF
 15031                           postinc2	equ	0xFDE
 15032                           postdec2	equ	0xFDD
 15033                           plusw2	equ	0xFDB
 15034                           fsr2h	equ	0xFDA
 15035                           fsr2l	equ	0xFD9
 15036                           status	equ	0xFD8
 15037                           
 15038 ;; *************** function _SPI_MinSpeed *****************
 15039 ;; Defined at:
 15040 ;;		line 190 in file "Library/SPI.c"
 15041 ;; Parameters:    Size  Location     Type
 15042 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15043 ;;		 -> SPI1(11), 
 15044 ;; Auto vars:     Size  Location     Type
 15045 ;;		None
 15046 ;; Return value:  Size  Location     Type
 15047 ;;                  1    wreg      void 
 15048 ;; Registers used:
 15049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : 0/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15055 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15059 ;;Total ram usage:        2 bytes
 15060 ;; Hardware stack levels used:    1
 15061 ;; Hardware stack levels required when called:    9
 15062 ;; This function calls:
 15063 ;;		_Byte_SetBit
 15064 ;;		_Byte_SetQuad
 15065 ;; This function is called by:
 15066 ;;		_HMI_Init
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           	psect	text74
 15071  016D5C                     __ptext74:
 15072                           	opt stack 0
 15073  016D5C                     _SPI_MinSpeed:
 15074                           	opt stack 19
 15075                           
 15076                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;incstack = 0
 15080  016D5C  0100               	movlb	0	; () banked
 15081  016D5E  EE20 F006          	lfsr	2,6
 15082  016D62  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15083  016D64  26D9               	addwf	fsr2l,f,c
 15084  016D66  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15085  016D68  22DA               	addwfc	fsr2h,f,c
 15086  016D6A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15087  016D6E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15088  016D72  0E05               	movlw	5
 15089  016D74  0100               	movlb	0	; () banked
 15090  016D76  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15091  016D78  0E00               	movlw	0
 15092  016D7A  0100               	movlb	0	; () banked
 15093  016D7C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15094  016D7E  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15095                           
 15096                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 15097  016D82  0100               	movlb	0	; () banked
 15098  016D84  EE20 F006          	lfsr	2,6
 15099  016D88  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15100  016D8A  26D9               	addwf	fsr2l,f,c
 15101  016D8C  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15102  016D8E  22DA               	addwfc	fsr2h,f,c
 15103  016D90  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15104  016D94  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15105  016D98  0E00               	movlw	0
 15106  016D9A  0100               	movlb	0	; () banked
 15107  016D9C  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15108  016D9E  0E02               	movlw	2
 15109  016DA0  0100               	movlb	0	; () banked
 15110  016DA2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15111  016DA4  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 15112                           
 15113                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15114  016DA8  0100               	movlb	0	; () banked
 15115  016DAA  EE20 F006          	lfsr	2,6
 15116  016DAE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15117  016DB0  26D9               	addwf	fsr2l,f,c
 15118  016DB2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15119  016DB4  22DA               	addwfc	fsr2h,f,c
 15120  016DB6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15121  016DBA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15122  016DBE  0E05               	movlw	5
 15123  016DC0  0100               	movlb	0	; () banked
 15124  016DC2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15125  016DC4  0E01               	movlw	1
 15126  016DC6  0100               	movlb	0	; () banked
 15127  016DC8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15128  016DCA  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15129  016DCE  0012               	return		;funcret
 15130  016DD0                     __end_of_SPI_MinSpeed:
 15131                           	opt stack 0
 15132                           tosu	equ	0xFFF
 15133                           tosh	equ	0xFFE
 15134                           tosl	equ	0xFFD
 15135                           pclath	equ	0xFFA
 15136                           tblptru	equ	0xFF8
 15137                           tblptrh	equ	0xFF7
 15138                           tblptrl	equ	0xFF6
 15139                           tablat	equ	0xFF5
 15140                           prodh	equ	0xFF4
 15141                           prodl	equ	0xFF3
 15142                           intcon	equ	0xFF2
 15143                           postinc0	equ	0xFEE
 15144                           wreg	equ	0xFE8
 15145                           indf1	equ	0xFE7
 15146                           postdec1	equ	0xFE5
 15147                           fsr1h	equ	0xFE2
 15148                           fsr1l	equ	0xFE1
 15149                           indf2	equ	0xFDF
 15150                           postinc2	equ	0xFDE
 15151                           postdec2	equ	0xFDD
 15152                           plusw2	equ	0xFDB
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function _SPI_Init *****************
 15158 ;; Defined at:
 15159 ;;		line 12 in file "Library/SPI.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;  pClock          4   45[BANK0 ] unsigned long 
 15162 ;;  pChannel        1   49[BANK0 ] enum E6744
 15163 ;;  pMode           1   50[BANK0 ] enum E6748
 15164 ;; Auto vars:     Size  Location     Type
 15165 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 15166 ;;		 -> SPI1(11), SPI2(11), 
 15167 ;; Return value:  Size  Location     Type
 15168 ;;                  1    wreg      void 
 15169 ;; Registers used:
 15170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15171 ;; Tracked objects:
 15172 ;;		On entry : 0/0
 15173 ;;		On exit  : 0/0
 15174 ;;		Unchanged: 0/0
 15175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15176 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;Total ram usage:        8 bytes
 15181 ;; Hardware stack levels used:    1
 15182 ;; Hardware stack levels required when called:   12
 15183 ;; This function calls:
 15184 ;;		_Byte_SetBit
 15185 ;;		_Byte_SetQuad
 15186 ;;		_Port_SetPinType
 15187 ;;		_SPI_DCS
 15188 ;;		_SPI_DisableISR
 15189 ;;		_Timer2_Init
 15190 ;; This function is called by:
 15191 ;;		_Configure_GPIOs
 15192 ;;		_HMI_Init
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           	psect	text75
 15197  0116FA                     __ptext75:
 15198                           	opt stack 0
 15199  0116FA                     _SPI_Init:
 15200                           	opt stack 15
 15201                           
 15202                           ;SPI.c: 14: SPIPtr pInput;
 15203                           ;SPI.c: 16: switch (pChannel)
 15204                           
 15205                           ;incstack = 0
 15206  0116FA  D00C               	goto	l13441
 15207  0116FC                     l13435:
 15208                           
 15209                           ;SPI.c: 19: pInput = &SPI1;
 15210  0116FC  0E63               	movlw	low _SPI1
 15211  0116FE  0100               	movlb	0	; () banked
 15212  011700  6F93               	movwf	SPI_Init@pInput& (0+255),b
 15213  011702  0E01               	movlw	high _SPI1
 15214  011704  D004               	goto	L7
 15215  011706                     l13437:
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;SPI.c: 22: pInput = &SPI2;
 15219  011706  0E6E               	movlw	low _SPI2
 15220  011708  0100               	movlb	0	; () banked
 15221  01170A  6F93               	movwf	SPI_Init@pInput& (0+255),b
 15222  01170C  0E01               	movlw	high _SPI2
 15223  01170E                     L7:
 15224  01170E  0100               	movlb	0	; () banked
 15225  011710  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 15226                           
 15227                           ; BSR set to: 0
 15228                           ;SPI.c: 24: };
 15229                           
 15230                           ;SPI.c: 23: break;
 15231  011712  D008               	goto	l13443
 15232  011714                     l13441:
 15233  011714  0100               	movlb	0	; () banked
 15234  011716  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15235                           
 15236                           ; Switch size 1, requested type "space"
 15237                           ; Number of cases is 2, Range of values is 0 to 1
 15238                           ; switch strategies available:
 15239                           ; Name         Instructions Cycles
 15240                           ; simple_byte            7     4 (average)
 15241                           ;	Chosen strategy is simple_byte
 15242  011718  0A00               	xorlw	0	; case 0
 15243  01171A  B4D8               	btfsc	status,2,c
 15244  01171C  D7EF               	goto	l13435
 15245  01171E  0A01               	xorlw	1	; case 1
 15246  011720  B4D8               	btfsc	status,2,c
 15247  011722  D7F1               	goto	l13437
 15248  011724                     l13443:
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;SPI.c: 26: pInput->mChannel = pChannel;
 15252  011724  0100               	movlb	0	; () banked
 15253  011726  EE20 F002          	lfsr	2,2
 15254  01172A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15255  01172C  26D9               	addwf	fsr2l,f,c
 15256  01172E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15257  011730  22DA               	addwfc	fsr2h,f,c
 15258  011732  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 15259                           
 15260                           ;SPI.c: 35: switch (pChannel)
 15261  011736  D0B1               	goto	l13463
 15262  011738                     l13445:
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 15266  011738  0EEA               	movlw	low _PortC
 15267  01173A  0100               	movlb	0	; () banked
 15268  01173C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15269  01173E  0E00               	movlw	high _PortC
 15270  011740  0100               	movlb	0	; () banked
 15271  011742  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15272  011744  0E02               	movlw	2
 15273  011746  0100               	movlb	0	; () banked
 15274  011748  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15275  01174A  0E03               	movlw	3
 15276  01174C  0100               	movlb	0	; () banked
 15277  01174E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15278  011750  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15279                           
 15280                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 15281  011754  0EEA               	movlw	low _PortC
 15282  011756  0100               	movlb	0	; () banked
 15283  011758  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15284  01175A  0E00               	movlw	high _PortC
 15285  01175C  0100               	movlb	0	; () banked
 15286  01175E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15287  011760  0E03               	movlw	3
 15288  011762  0100               	movlb	0	; () banked
 15289  011764  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15290  011766  0E03               	movlw	3
 15291  011768  0100               	movlb	0	; () banked
 15292  01176A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15293  01176C  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15294                           
 15295                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 15296  011770  0EEA               	movlw	low _PortC
 15297  011772  0100               	movlb	0	; () banked
 15298  011774  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15299  011776  0E00               	movlw	high _PortC
 15300  011778  0100               	movlb	0	; () banked
 15301  01177A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15302  01177C  0E05               	movlw	5
 15303  01177E  0100               	movlb	0	; () banked
 15304  011780  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15305  011782  0E03               	movlw	3
 15306  011784  0100               	movlb	0	; () banked
 15307  011786  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15308  011788  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15309                           
 15310                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 15311  01178C  0EEA               	movlw	low _PortC
 15312  01178E  0100               	movlb	0	; () banked
 15313  011790  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15314  011792  0E00               	movlw	high _PortC
 15315  011794  0100               	movlb	0	; () banked
 15316  011796  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15317  011798  0E04               	movlw	4
 15318  01179A  0100               	movlb	0	; () banked
 15319  01179C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15320  01179E  0E00               	movlw	0
 15321  0117A0  0100               	movlb	0	; () banked
 15322  0117A2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15323  0117A4  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15324                           
 15325                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 15326  0117A8  0100               	movlb	0	; () banked
 15327  0117AA  EE20 F003          	lfsr	2,3
 15328  0117AE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15329  0117B0  26D9               	addwf	fsr2l,f,c
 15330  0117B2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15331  0117B4  22DA               	addwfc	fsr2h,f,c
 15332  0117B6  0EC7               	movlw	199
 15333  0117B8  6EDE               	movwf	postinc2,c
 15334  0117BA  0E0F               	movlw	15
 15335  0117BC  6EDD               	movwf	postdec2,c
 15336                           
 15337                           ; BSR set to: 0
 15338                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 15339  0117BE  0100               	movlb	0	; () banked
 15340  0117C0  EE20 F006          	lfsr	2,6
 15341  0117C4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15342  0117C6  26D9               	addwf	fsr2l,f,c
 15343  0117C8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15344  0117CA  22DA               	addwfc	fsr2h,f,c
 15345  0117CC  0EC6               	movlw	198
 15346  0117CE  6EDE               	movwf	postinc2,c
 15347  0117D0  0E0F               	movlw	15
 15348  0117D2  6EDD               	movwf	postdec2,c
 15349                           
 15350                           ; BSR set to: 0
 15351                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 15352  0117D4  0100               	movlb	0	; () banked
 15353  0117D6  EE20 F009          	lfsr	2,9
 15354  0117DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15355  0117DC  26D9               	addwf	fsr2l,f,c
 15356  0117DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15357  0117E0  22DA               	addwfc	fsr2h,f,c
 15358  0117E2  0EC9               	movlw	201
 15359  0117E4  D056               	goto	L8
 15360  0117E6                     l13453:
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 15364  0117E6  0EA1               	movlw	low _PortD
 15365  0117E8  0100               	movlb	0	; () banked
 15366  0117EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15367  0117EC  0E01               	movlw	high _PortD
 15368  0117EE  0100               	movlb	0	; () banked
 15369  0117F0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15370  0117F2  0E07               	movlw	7
 15371  0117F4  0100               	movlb	0	; () banked
 15372  0117F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15373  0117F8  0E03               	movlw	3
 15374  0117FA  0100               	movlb	0	; () banked
 15375  0117FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15376  0117FE  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15377                           
 15378                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 15379  011802  0EA1               	movlw	low _PortD
 15380  011804  0100               	movlb	0	; () banked
 15381  011806  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15382  011808  0E01               	movlw	high _PortD
 15383  01180A  0100               	movlb	0	; () banked
 15384  01180C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15385  01180E  0E06               	movlw	6
 15386  011810  0100               	movlb	0	; () banked
 15387  011812  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15388  011814  0E03               	movlw	3
 15389  011816  0100               	movlb	0	; () banked
 15390  011818  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15391  01181A  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15392                           
 15393                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 15394  01181E  0EA1               	movlw	low _PortD
 15395  011820  0100               	movlb	0	; () banked
 15396  011822  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15397  011824  0E01               	movlw	high _PortD
 15398  011826  0100               	movlb	0	; () banked
 15399  011828  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15400  01182A  0E04               	movlw	4
 15401  01182C  0100               	movlb	0	; () banked
 15402  01182E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15403  011830  0E03               	movlw	3
 15404  011832  0100               	movlb	0	; () banked
 15405  011834  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15406  011836  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15407                           
 15408                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 15409  01183A  0EA1               	movlw	low _PortD
 15410  01183C  0100               	movlb	0	; () banked
 15411  01183E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15412  011840  0E01               	movlw	high _PortD
 15413  011842  0100               	movlb	0	; () banked
 15414  011844  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15415  011846  0E05               	movlw	5
 15416  011848  0100               	movlb	0	; () banked
 15417  01184A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15418  01184C  0E00               	movlw	0
 15419  01184E  0100               	movlb	0	; () banked
 15420  011850  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15421  011852  EC93  F09C         	call	_Port_SetPinType	;wreg free
 15422                           
 15423                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 15424  011856  0100               	movlb	0	; () banked
 15425  011858  EE20 F003          	lfsr	2,3
 15426  01185C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15427  01185E  26D9               	addwf	fsr2l,f,c
 15428  011860  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15429  011862  22DA               	addwfc	fsr2h,f,c
 15430  011864  0E6D               	movlw	109
 15431  011866  6EDE               	movwf	postinc2,c
 15432  011868  0E0F               	movlw	15
 15433  01186A  6EDD               	movwf	postdec2,c
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 15437  01186C  0100               	movlb	0	; () banked
 15438  01186E  EE20 F006          	lfsr	2,6
 15439  011872  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15440  011874  26D9               	addwf	fsr2l,f,c
 15441  011876  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15442  011878  22DA               	addwfc	fsr2h,f,c
 15443  01187A  0E6C               	movlw	108
 15444  01187C  6EDE               	movwf	postinc2,c
 15445  01187E  0E0F               	movlw	15
 15446  011880  6EDD               	movwf	postdec2,c
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 15450  011882  0100               	movlb	0	; () banked
 15451  011884  EE20 F009          	lfsr	2,9
 15452  011888  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15453  01188A  26D9               	addwf	fsr2l,f,c
 15454  01188C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15455  01188E  22DA               	addwfc	fsr2h,f,c
 15456  011890  0E6F               	movlw	111
 15457  011892                     L8:
 15458  011892  6EDE               	movwf	postinc2,c
 15459  011894  0E0F               	movlw	15
 15460  011896  6EDD               	movwf	postdec2,c
 15461                           
 15462                           ;SPI.c: 68: break;
 15463  011898  D009               	goto	l13465
 15464  01189A                     l13463:
 15465                           
 15466                           ; BSR set to: 0
 15467  01189A  0100               	movlb	0	; () banked
 15468  01189C  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15469                           
 15470                           ; Switch size 1, requested type "space"
 15471                           ; Number of cases is 2, Range of values is 0 to 1
 15472                           ; switch strategies available:
 15473                           ; Name         Instructions Cycles
 15474                           ; simple_byte            7     4 (average)
 15475                           ;	Chosen strategy is simple_byte
 15476  01189E  0A00               	xorlw	0	; case 0
 15477  0118A0  B4D8               	btfsc	status,2,c
 15478  0118A2  D74A               	goto	l13445
 15479  0118A4  0A01               	xorlw	1	; case 1
 15480  0118A6  A4D8               	btfss	status,2,c
 15481  0118A8  0012               	return	
 15482  0118AA  D79D               	goto	l13453
 15483  0118AC                     l13465:
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15487  0118AC  0100               	movlb	0	; () banked
 15488  0118AE  EE20 F006          	lfsr	2,6
 15489  0118B2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15490  0118B4  26D9               	addwf	fsr2l,f,c
 15491  0118B6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15492  0118B8  22DA               	addwfc	fsr2h,f,c
 15493  0118BA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15494  0118BE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15495  0118C2  0E05               	movlw	5
 15496  0118C4  0100               	movlb	0	; () banked
 15497  0118C6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15498  0118C8  0E00               	movlw	0
 15499  0118CA  0100               	movlb	0	; () banked
 15500  0118CC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15501  0118CE  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15502                           
 15503                           ;SPI.c: 77: switch(pMode)
 15504  0118D2  D09C               	goto	l13477
 15505  0118D4                     l13467:
 15506                           
 15507                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 15508  0118D4  0100               	movlb	0	; () banked
 15509  0118D6  EE20 F006          	lfsr	2,6
 15510  0118DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15511  0118DC  26D9               	addwf	fsr2l,f,c
 15512  0118DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15513  0118E0  22DA               	addwfc	fsr2h,f,c
 15514  0118E2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15515  0118E6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15516  0118EA  0E04               	movlw	4
 15517  0118EC  0100               	movlb	0	; () banked
 15518  0118EE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15519  0118F0  0E00               	movlw	0
 15520  0118F2  0100               	movlb	0	; () banked
 15521  0118F4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15522  0118F6  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15523                           
 15524                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 15525  0118FA  0100               	movlb	0	; () banked
 15526  0118FC  EE20 F003          	lfsr	2,3
 15527  011900  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15528  011902  26D9               	addwf	fsr2l,f,c
 15529  011904  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15530  011906  22DA               	addwfc	fsr2h,f,c
 15531  011908  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15532  01190C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15533  011910  0E06               	movlw	6
 15534  011912  0100               	movlb	0	; () banked
 15535  011914  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15536  011916  0E00               	movlw	0
 15537  011918  0100               	movlb	0	; () banked
 15538  01191A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15539  01191C  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15540                           
 15541                           ;SPI.c: 82: break;
 15542  011920  D084               	goto	l13479
 15543  011922                     l13469:
 15544                           
 15545                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 15546  011922  0100               	movlb	0	; () banked
 15547  011924  EE20 F006          	lfsr	2,6
 15548  011928  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15549  01192A  26D9               	addwf	fsr2l,f,c
 15550  01192C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15551  01192E  22DA               	addwfc	fsr2h,f,c
 15552  011930  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15553  011934  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15554  011938  0E04               	movlw	4
 15555  01193A  0100               	movlb	0	; () banked
 15556  01193C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15557  01193E  0E00               	movlw	0
 15558  011940  0100               	movlb	0	; () banked
 15559  011942  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15560  011944  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15561                           
 15562                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 15563  011948  0100               	movlb	0	; () banked
 15564  01194A  EE20 F003          	lfsr	2,3
 15565  01194E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15566  011950  26D9               	addwf	fsr2l,f,c
 15567  011952  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15568  011954  22DA               	addwfc	fsr2h,f,c
 15569  011956  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15570  01195A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15571  01195E  0E06               	movlw	6
 15572  011960  0100               	movlb	0	; () banked
 15573  011962  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15574  011964  0E01               	movlw	1
 15575  011966  0100               	movlb	0	; () banked
 15576  011968  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15577  01196A  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15578                           
 15579                           ;SPI.c: 86: break;
 15580  01196E  D05D               	goto	l13479
 15581  011970                     l13471:
 15582                           
 15583                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 15584  011970  0100               	movlb	0	; () banked
 15585  011972  EE20 F006          	lfsr	2,6
 15586  011976  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15587  011978  26D9               	addwf	fsr2l,f,c
 15588  01197A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15589  01197C  22DA               	addwfc	fsr2h,f,c
 15590  01197E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15591  011982  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15592  011986  0E04               	movlw	4
 15593  011988  0100               	movlb	0	; () banked
 15594  01198A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15595  01198C  0E01               	movlw	1
 15596  01198E  0100               	movlb	0	; () banked
 15597  011990  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15598  011992  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15599                           
 15600                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 15601  011996  0100               	movlb	0	; () banked
 15602  011998  EE20 F003          	lfsr	2,3
 15603  01199C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15604  01199E  26D9               	addwf	fsr2l,f,c
 15605  0119A0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15606  0119A2  22DA               	addwfc	fsr2h,f,c
 15607  0119A4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15608  0119A8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15609  0119AC  0E06               	movlw	6
 15610  0119AE  0100               	movlb	0	; () banked
 15611  0119B0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15612  0119B2  0E00               	movlw	0
 15613  0119B4  0100               	movlb	0	; () banked
 15614  0119B6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15615  0119B8  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15616                           
 15617                           ;SPI.c: 90: break;
 15618  0119BC  D036               	goto	l13479
 15619  0119BE                     l13473:
 15620                           
 15621                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 15622  0119BE  0100               	movlb	0	; () banked
 15623  0119C0  EE20 F006          	lfsr	2,6
 15624  0119C4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15625  0119C6  26D9               	addwf	fsr2l,f,c
 15626  0119C8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15627  0119CA  22DA               	addwfc	fsr2h,f,c
 15628  0119CC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15629  0119D0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15630  0119D4  0E04               	movlw	4
 15631  0119D6  0100               	movlb	0	; () banked
 15632  0119D8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15633  0119DA  0E01               	movlw	1
 15634  0119DC  0100               	movlb	0	; () banked
 15635  0119DE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15636  0119E0  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15637                           
 15638                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 15639  0119E4  0100               	movlb	0	; () banked
 15640  0119E6  EE20 F003          	lfsr	2,3
 15641  0119EA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15642  0119EC  26D9               	addwf	fsr2l,f,c
 15643  0119EE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15644  0119F0  22DA               	addwfc	fsr2h,f,c
 15645  0119F2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15646  0119F6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15647  0119FA  0E06               	movlw	6
 15648  0119FC  0100               	movlb	0	; () banked
 15649  0119FE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15650  011A00  0E01               	movlw	1
 15651  011A02  0100               	movlb	0	; () banked
 15652  011A04  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15653  011A06  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15654                           
 15655                           ;SPI.c: 94: break;
 15656  011A0A  D00F               	goto	l13479
 15657  011A0C                     l13477:
 15658  011A0C  0100               	movlb	0	; () banked
 15659  011A0E  5192               	movf	SPI_Init@pMode& (0+255),w,b
 15660                           
 15661                           ; Switch size 1, requested type "space"
 15662                           ; Number of cases is 4, Range of values is 0 to 3
 15663                           ; switch strategies available:
 15664                           ; Name         Instructions Cycles
 15665                           ; simple_byte           13     7 (average)
 15666                           ;	Chosen strategy is simple_byte
 15667  011A10  0A00               	xorlw	0	; case 0
 15668  011A12  B4D8               	btfsc	status,2,c
 15669  011A14  D75F               	goto	l13467
 15670  011A16  0A01               	xorlw	1	; case 1
 15671  011A18  B4D8               	btfsc	status,2,c
 15672  011A1A  D783               	goto	l13469
 15673  011A1C  0A03               	xorlw	3	; case 2
 15674  011A1E  B4D8               	btfsc	status,2,c
 15675  011A20  D7A7               	goto	l13471
 15676  011A22  0A01               	xorlw	1	; case 3
 15677  011A24  A4D8               	btfss	status,2,c
 15678  011A26  0012               	return	
 15679  011A28  D7CA               	goto	l13473
 15680  011A2A                     l13479:
 15681                           
 15682                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 15683  011A2A  0100               	movlb	0	; () banked
 15684  011A2C  EE20 F006          	lfsr	2,6
 15685  011A30  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15686  011A32  26D9               	addwf	fsr2l,f,c
 15687  011A34  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15688  011A36  22DA               	addwfc	fsr2h,f,c
 15689  011A38  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15690  011A3C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15691  011A40  0E07               	movlw	7
 15692  011A42  0100               	movlb	0	; () banked
 15693  011A44  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15694  011A46  0E00               	movlw	0
 15695  011A48  0100               	movlb	0	; () banked
 15696  011A4A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15697  011A4C  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15698                           
 15699                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 15700  011A50  0100               	movlb	0	; () banked
 15701  011A52  EE20 F006          	lfsr	2,6
 15702  011A56  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15703  011A58  26D9               	addwf	fsr2l,f,c
 15704  011A5A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15705  011A5C  22DA               	addwfc	fsr2h,f,c
 15706  011A5E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15707  011A62  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15708  011A66  0E06               	movlw	6
 15709  011A68  0100               	movlb	0	; () banked
 15710  011A6A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15711  011A6C  0E00               	movlw	0
 15712  011A6E  0100               	movlb	0	; () banked
 15713  011A70  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15714  011A72  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15715                           
 15716                           ;SPI.c: 106: Timer2_Init(pClock);
 15717  011A76  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 15718  011A7A  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 15719  011A7E  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 15720  011A82  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 15721  011A86  ECF5  F0A4         	call	_Timer2_Init	;wreg free
 15722                           
 15723                           ;SPI.c: 112: SPI_DisableISR(pInput);
 15724  011A8A  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 15725  011A8E  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 15726  011A92  EC35  F0BE         	call	_SPI_DisableISR	;wreg free
 15727                           
 15728                           ;SPI.c: 116: switch (pChannel)
 15729  011A96  D004               	goto	l13487
 15730  011A98                     l615:
 15731                           
 15732                           ; BSR set to: 0
 15733  011A98  869F               	bsf	3999,3,c	;volatile
 15734  011A9A  D00B               	goto	l13489
 15735  011A9C                     l617:
 15736                           
 15737                           ; BSR set to: 0
 15738  011A9C  8EA5               	bsf	4005,7,c	;volatile
 15739  011A9E  D009               	goto	l13489
 15740  011AA0                     l13487:
 15741  011AA0  0100               	movlb	0	; () banked
 15742  011AA2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15743                           
 15744                           ; Switch size 1, requested type "space"
 15745                           ; Number of cases is 2, Range of values is 0 to 1
 15746                           ; switch strategies available:
 15747                           ; Name         Instructions Cycles
 15748                           ; simple_byte            7     4 (average)
 15749                           ;	Chosen strategy is simple_byte
 15750  011AA4  0A00               	xorlw	0	; case 0
 15751  011AA6  B4D8               	btfsc	status,2,c
 15752  011AA8  D7F7               	goto	l615
 15753  011AAA  0A01               	xorlw	1	; case 1
 15754  011AAC  A4D8               	btfss	status,2,c
 15755  011AAE  0012               	return	
 15756  011AB0  D7F5               	goto	l617
 15757  011AB2                     l13489:
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;SPI.c: 124: SPI_DCS(pInput);
 15761  011AB2  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 15762  011AB6  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 15763  011ABA  ECAD  F0BD         	call	_SPI_DCS	;wreg free
 15764                           
 15765                           ;SPI.c: 126: pInput->mBusy = 0;
 15766  011ABE  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 15767  011AC2  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 15768  011AC6  0E00               	movlw	0
 15769  011AC8  6EDF               	movwf	indf2,c
 15770                           
 15771                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 15772  011ACA  0100               	movlb	0	; () banked
 15773  011ACC  EE20 F006          	lfsr	2,6
 15774  011AD0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15775  011AD2  26D9               	addwf	fsr2l,f,c
 15776  011AD4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15777  011AD6  22DA               	addwfc	fsr2h,f,c
 15778  011AD8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15779  011ADC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15780  011AE0  0E00               	movlw	0
 15781  011AE2  0100               	movlb	0	; () banked
 15782  011AE4  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15783  011AE6  0E03               	movlw	3
 15784  011AE8  0100               	movlb	0	; () banked
 15785  011AEA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15786  011AEC  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 15787                           
 15788                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15789  011AF0  0100               	movlb	0	; () banked
 15790  011AF2  EE20 F006          	lfsr	2,6
 15791  011AF6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15792  011AF8  26D9               	addwf	fsr2l,f,c
 15793  011AFA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15794  011AFC  22DA               	addwfc	fsr2h,f,c
 15795  011AFE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15796  011B02  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15797  011B06  0E05               	movlw	5
 15798  011B08  0100               	movlb	0	; () banked
 15799  011B0A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15800  011B0C  0E01               	movlw	1
 15801  011B0E  0100               	movlb	0	; () banked
 15802  011B10  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15803  011B12  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 15804  011B16  0012               	return		;funcret
 15805  011B18                     __end_of_SPI_Init:
 15806                           	opt stack 0
 15807                           tosu	equ	0xFFF
 15808                           tosh	equ	0xFFE
 15809                           tosl	equ	0xFFD
 15810                           pclath	equ	0xFFA
 15811                           tblptru	equ	0xFF8
 15812                           tblptrh	equ	0xFF7
 15813                           tblptrl	equ	0xFF6
 15814                           tablat	equ	0xFF5
 15815                           prodh	equ	0xFF4
 15816                           prodl	equ	0xFF3
 15817                           intcon	equ	0xFF2
 15818                           postinc0	equ	0xFEE
 15819                           wreg	equ	0xFE8
 15820                           indf1	equ	0xFE7
 15821                           postdec1	equ	0xFE5
 15822                           fsr1h	equ	0xFE2
 15823                           fsr1l	equ	0xFE1
 15824                           indf2	equ	0xFDF
 15825                           postinc2	equ	0xFDE
 15826                           postdec2	equ	0xFDD
 15827                           plusw2	equ	0xFDB
 15828                           fsr2h	equ	0xFDA
 15829                           fsr2l	equ	0xFD9
 15830                           status	equ	0xFD8
 15831                           
 15832 ;; *************** function _Timer2_Init *****************
 15833 ;; Defined at:
 15834 ;;		line 10 in file "Library/Timer2.c"
 15835 ;; Parameters:    Size  Location     Type
 15836 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15837 ;; Auto vars:     Size  Location     Type
 15838 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 15839 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 15840 ;;  RDIV            4   18[BANK0 ] unsigned long 
 15841 ;; Return value:  Size  Location     Type
 15842 ;;                  1    wreg      void 
 15843 ;; Registers used:
 15844 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15845 ;; Tracked objects:
 15846 ;;		On entry : 0/0
 15847 ;;		On exit  : 0/0
 15848 ;;		Unchanged: 0/0
 15849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15851 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15853 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15854 ;;Total ram usage:       17 bytes
 15855 ;; Hardware stack levels used:    1
 15856 ;; Hardware stack levels required when called:    8
 15857 ;; This function calls:
 15858 ;;		_Timer2_Clear
 15859 ;;		___lldiv
 15860 ;; This function is called by:
 15861 ;;		_SPI_Init
 15862 ;; This function uses a non-reentrant model
 15863 ;;
 15864                           
 15865                           	psect	text76
 15866  0149EA                     __ptext76:
 15867                           	opt stack 0
 15868  0149EA                     _Timer2_Init:
 15869                           	opt stack 18
 15870                           
 15871                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 15872                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 15873                           ;Timer2.c: 14: static UINT8 PRE = 0;
 15874                           ;Timer2.c: 15: static UINT32 DIV = 0;
 15875                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 15876                           
 15877                           ;incstack = 0
 15878  0149EA  0E00               	movlw	0
 15879  0149EC  0100               	movlb	0	; () banked
 15880  0149EE  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 15881  0149F0  0E6C               	movlw	108
 15882  0149F2  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 15883  0149F4  0EDC               	movlw	220
 15884  0149F6  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 15885  0149F8  0E02               	movlw	2
 15886  0149FA  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 15890                           ;Timer2.c: 20: pFrequency *= 2;
 15891  0149FC  0100               	movlb	0	; () banked
 15892  0149FE  90D8               	bcf	status,0,c
 15893  014A00  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 15894  014A02  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 15895  014A04  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 15896  014A06  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;Timer2.c: 23: pCPUClock /= 4;
 15900  014A08  0E02               	movlw	2
 15901  014A0A  0100               	movlb	0	; () banked
 15902  014A0C  6F71               	movwf	??_Timer2_Init& (0+255),b
 15903  014A0E                     u10785:
 15904  014A0E  90D8               	bcf	status,0,c
 15905  014A10  0100               	movlb	0	; () banked
 15906  014A12  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 15907  014A14  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 15908  014A16  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 15909  014A18  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 15910  014A1A  0100               	movlb	0	; () banked
 15911  014A1C  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 15912  014A1E  D7F7               	goto	u10785
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 15916  014A20  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 15917  014A24  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 15918  014A28  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 15919  014A2C  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 15920  014A30  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 15921  014A34  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 15922  014A38  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 15923  014A3C  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 15924  014A40  ECEA  F0AC         	call	___lldiv	;wreg free
 15925  014A44  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 15926  014A48  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 15927  014A4C  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 15928  014A50  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 15929                           
 15930                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 15931  014A54  D00E               	goto	l13319
 15932  014A56                     l13311:
 15933                           
 15934                           ;Timer2.c: 28: {
 15935                           ;Timer2.c: 29: RDIV = 0;
 15936  014A56  0E00               	movlw	0
 15937  014A58  0100               	movlb	0	; () banked
 15938  014A5A  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 15939  014A5C  0E00               	movlw	0
 15940  014A5E  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 15941  014A60  0E00               	movlw	0
 15942  014A62  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 15943  014A64  0E00               	movlw	0
 15944  014A66  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;Timer2.c: 30: INDEX ++;
 15948  014A68  2A2F               	incf	Timer2_Init@INDEX,f,c
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;Timer2.c: 31: if (INDEX >= 3)
 15952  014A6A  0E02               	movlw	2
 15953  014A6C  642F               	cpfsgt	Timer2_Init@INDEX,c
 15954  014A6E  D001               	goto	l13319
 15955  014A70  D025               	goto	l13321
 15956  014A72                     l13319:
 15957  014A72  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 15958  014A76  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 15959  014A7A  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 15960  014A7E  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 15961  014A82  502F               	movf	Timer2_Init@INDEX,w,c
 15962  014A84  0D01               	mullw	1
 15963  014A86  0ECA               	movlw	low Timer2_Init@PRESCALE
 15964  014A88  24F3               	addwf	prodl,w,c
 15965  014A8A  6EF6               	movwf	tblptrl,c
 15966  014A8C  0EFC               	movlw	high Timer2_Init@PRESCALE
 15967  014A8E  20F4               	addwfc	prodh,w,c
 15968  014A90  6EF7               	movwf	tblptrh,c
 15969  014A92                     	if	1	;There are 3 active tblptr bytes
 15970  014A92  6AF8               	clrf	tblptru,c
 15971  014A94  0E00               	movlw	low (__mediumconst shr (0+16))
 15972  014A96  22F8               	addwfc	tblptru,f,c
 15973  014A98                     	endif
 15974  014A98  0008               	tblrd		*
 15975  014A9A  50F5               	movf	tablat,w,c
 15976  014A9C  0100               	movlb	0	; () banked
 15977  014A9E  6F64               	movwf	___lldiv@divisor& (0+255),b
 15978  014AA0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15979  014AA2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15980  014AA4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15981  014AA6  ECEA  F0AC         	call	___lldiv	;wreg free
 15982  014AAA  0100               	movlb	0	; () banked
 15983  014AAC  5163               	movf	(?___lldiv+3)& (0+255),w,b
 15984  014AAE  0100               	movlb	0	; () banked
 15985  014AB0  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 15986  014AB2  E1D1               	bnz	l13311
 15987  014AB4  0100               	movlb	0	; () banked
 15988  014AB6  0561               	decf	(?___lldiv+1)& (0+255),w,b
 15989  014AB8  B0D8               	btfsc	status,0,c
 15990  014ABA  D7CD               	goto	l13311
 15991  014ABC                     l13321:
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;Timer2.c: 33: }
 15995                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 15996  014ABC  50CA               	movf	4042,w,c	;volatile
 15997  014ABE  182F               	xorwf	Timer2_Init@INDEX,w,c
 15998  014AC0  0BFC               	andlw	-4
 15999  014AC2  182F               	xorwf	Timer2_Init@INDEX,w,c
 16000  014AC4  6ECA               	movwf	4042,c	;volatile
 16001                           
 16002                           ; BSR set to: 0
 16003                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 16004  014AC6  84CA               	bsf	4042,2,c	;volatile
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;Timer2.c: 44: Timer2_Clear();
 16008  014AC8  ECE5  F0BF         	call	_Timer2_Clear	;wreg free
 16009                           
 16010                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 16011  014ACC  502F               	movf	Timer2_Init@INDEX,w,c
 16012  014ACE  0D01               	mullw	1
 16013  014AD0  0ECA               	movlw	low Timer2_Init@PRESCALE
 16014  014AD2  24F3               	addwf	prodl,w,c
 16015  014AD4  6EF6               	movwf	tblptrl,c
 16016  014AD6  0EFC               	movlw	high Timer2_Init@PRESCALE
 16017  014AD8  20F4               	addwfc	prodh,w,c
 16018  014ADA  6EF7               	movwf	tblptrh,c
 16019  014ADC                     	if	1	;There are 3 active tblptr bytes
 16020  014ADC  6AF8               	clrf	tblptru,c
 16021  014ADE  0E00               	movlw	low (__mediumconst shr (0+16))
 16022  014AE0  22F8               	addwfc	tblptru,f,c
 16023  014AE2                     	endif
 16024  014AE2  0008               	tblrd		*
 16025  014AE4  CFF5 F02E          	movff	tablat,Timer2_Init@PRE
 16026                           
 16027                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 16028  014AE8  0EFF               	movlw	255
 16029  014AEA  0100               	movlb	0	; () banked
 16030  014AEC  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 16031  014AEE  0101               	movlb	1	; () banked
 16032  014AF0  6F04               	movwf	Timer2_Init@DIV& (0+255),b
 16033  014AF2  0EFF               	movlw	255
 16034  014AF4  0100               	movlb	0	; () banked
 16035  014AF6  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 16036  014AF8  0101               	movlb	1	; () banked
 16037  014AFA  6F05               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 16038  014AFC  0EFF               	movlw	255
 16039  014AFE  0100               	movlb	0	; () banked
 16040  014B00  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 16041  014B02  0101               	movlb	1	; () banked
 16042  014B04  6F06               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 16043  014B06  0EFF               	movlw	255
 16044  014B08  0100               	movlb	0	; () banked
 16045  014B0A  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 16046  014B0C  0101               	movlb	1	; () banked
 16047  014B0E  6F07               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 16048                           
 16049                           ; BSR set to: 1
 16050                           ;Timer2.c: 48: INDEX = DIV/PRE;
 16051  014B10  C104  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 16052  014B14  C105  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 16053  014B18  C106  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 16054  014B1C  C107  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 16055  014B20  502E               	movf	Timer2_Init@PRE,w,c
 16056  014B22  0100               	movlb	0	; () banked
 16057  014B24  6F64               	movwf	___lldiv@divisor& (0+255),b
 16058  014B26  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16059  014B28  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16060  014B2A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16061  014B2C  ECEA  F0AC         	call	___lldiv	;wreg free
 16062  014B30  0100               	movlb	0	; () banked
 16063  014B32  5160               	movf	?___lldiv& (0+255),w,b
 16064  014B34  6E2F               	movwf	Timer2_Init@INDEX,c
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;Timer2.c: 49: PR2 = INDEX;
 16068  014B36  C02F  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 16069                           
 16070                           ; BSR set to: 0
 16071  014B3A  0012               	return		;funcret
 16072  014B3C                     __end_of_Timer2_Init:
 16073                           	opt stack 0
 16074                           tosu	equ	0xFFF
 16075                           tosh	equ	0xFFE
 16076                           tosl	equ	0xFFD
 16077                           pclath	equ	0xFFA
 16078                           tblptru	equ	0xFF8
 16079                           tblptrh	equ	0xFF7
 16080                           tblptrl	equ	0xFF6
 16081                           tablat	equ	0xFF5
 16082                           prodh	equ	0xFF4
 16083                           prodl	equ	0xFF3
 16084                           intcon	equ	0xFF2
 16085                           postinc0	equ	0xFEE
 16086                           wreg	equ	0xFE8
 16087                           indf1	equ	0xFE7
 16088                           postdec1	equ	0xFE5
 16089                           fsr1h	equ	0xFE2
 16090                           fsr1l	equ	0xFE1
 16091                           indf2	equ	0xFDF
 16092                           postinc2	equ	0xFDE
 16093                           postdec2	equ	0xFDD
 16094                           plusw2	equ	0xFDB
 16095                           fsr2h	equ	0xFDA
 16096                           fsr2l	equ	0xFD9
 16097                           status	equ	0xFD8
 16098                           
 16099 ;; *************** function _Timer2_Clear *****************
 16100 ;; Defined at:
 16101 ;;		line 3 in file "Library/Timer2.c"
 16102 ;; Parameters:    Size  Location     Type
 16103 ;;		None
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;		None
 16106 ;; Return value:  Size  Location     Type
 16107 ;;                  1    wreg      void 
 16108 ;; Registers used:
 16109 ;;		None
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16119 ;;Total ram usage:        0 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    7
 16122 ;; This function calls:
 16123 ;;		Nothing
 16124 ;; This function is called by:
 16125 ;;		_Timer2_Init
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           	psect	text77
 16130  017FCA                     __ptext77:
 16131                           	opt stack 0
 16132  017FCA                     _Timer2_Clear:
 16133                           	opt stack 18
 16134                           
 16135                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;incstack = 0
 16139  017FCA  929E               	bcf	3998,1,c	;volatile
 16140                           
 16141                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 16142  017FCC  929D               	bcf	3997,1,c	;volatile
 16143                           
 16144                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 16145  017FCE  929F               	bcf	3999,1,c	;volatile
 16146  017FD0  0012               	return		;funcret
 16147  017FD2                     __end_of_Timer2_Clear:
 16148                           	opt stack 0
 16149                           tosu	equ	0xFFF
 16150                           tosh	equ	0xFFE
 16151                           tosl	equ	0xFFD
 16152                           pclath	equ	0xFFA
 16153                           tblptru	equ	0xFF8
 16154                           tblptrh	equ	0xFF7
 16155                           tblptrl	equ	0xFF6
 16156                           tablat	equ	0xFF5
 16157                           prodh	equ	0xFF4
 16158                           prodl	equ	0xFF3
 16159                           intcon	equ	0xFF2
 16160                           postinc0	equ	0xFEE
 16161                           wreg	equ	0xFE8
 16162                           indf1	equ	0xFE7
 16163                           postdec1	equ	0xFE5
 16164                           fsr1h	equ	0xFE2
 16165                           fsr1l	equ	0xFE1
 16166                           indf2	equ	0xFDF
 16167                           postinc2	equ	0xFDE
 16168                           postdec2	equ	0xFDD
 16169                           plusw2	equ	0xFDB
 16170                           fsr2h	equ	0xFDA
 16171                           fsr2l	equ	0xFD9
 16172                           status	equ	0xFD8
 16173                           
 16174 ;; *************** function _SPI_DisableISR *****************
 16175 ;; Defined at:
 16176 ;;		line 181 in file "Library/SPI.c"
 16177 ;; Parameters:    Size  Location     Type
 16178 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16179 ;;		 -> SPI1(11), SPI2(11), 
 16180 ;; Auto vars:     Size  Location     Type
 16181 ;;		None
 16182 ;; Return value:  Size  Location     Type
 16183 ;;                  1    wreg      void 
 16184 ;; Registers used:
 16185 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16186 ;; Tracked objects:
 16187 ;;		On entry : 0/0
 16188 ;;		On exit  : 0/0
 16189 ;;		Unchanged: 0/0
 16190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16195 ;;Total ram usage:        2 bytes
 16196 ;; Hardware stack levels used:    1
 16197 ;; Hardware stack levels required when called:    7
 16198 ;; This function calls:
 16199 ;;		Nothing
 16200 ;; This function is called by:
 16201 ;;		_SPI_Init
 16202 ;; This function uses a non-reentrant model
 16203 ;;
 16204                           
 16205                           	psect	text78
 16206  017C6A                     __ptext78:
 16207                           	opt stack 0
 16208  017C6A                     _SPI_DisableISR:
 16209                           	opt stack 19
 16210                           
 16211                           ;SPI.c: 183: switch (pInput->mChannel)
 16212                           
 16213                           ;incstack = 0
 16214  017C6A  D004               	goto	l13339
 16215  017C6C                     l655:
 16216                           
 16217                           ; BSR set to: 0
 16218  017C6C  969D               	bcf	3997,3,c	;volatile
 16219  017C6E  0012               	return	
 16220  017C70                     l657:
 16221                           
 16222                           ; BSR set to: 0
 16223  017C70  9EA3               	bcf	4003,7,c	;volatile
 16224                           
 16225                           ; BSR set to: 0
 16226                           ;SPI.c: 188: };
 16227                           
 16228                           ; BSR set to: 0
 16229                           
 16230                           ;SPI.c: 187: default: return;
 16231  017C72  0012               	return	
 16232  017C74                     l13339:
 16233  017C74  0100               	movlb	0	; () banked
 16234  017C76  EE20 F002          	lfsr	2,2
 16235  017C7A  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 16236  017C7C  26D9               	addwf	fsr2l,f,c
 16237  017C7E  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 16238  017C80  22DA               	addwfc	fsr2h,f,c
 16239  017C82  50DF               	movf	indf2,w,c
 16240                           
 16241                           ; Switch size 1, requested type "space"
 16242                           ; Number of cases is 2, Range of values is 0 to 1
 16243                           ; switch strategies available:
 16244                           ; Name         Instructions Cycles
 16245                           ; simple_byte            7     4 (average)
 16246                           ;	Chosen strategy is simple_byte
 16247  017C84  0A00               	xorlw	0	; case 0
 16248  017C86  B4D8               	btfsc	status,2,c
 16249  017C88  D7F1               	goto	l655
 16250  017C8A  0A01               	xorlw	1	; case 1
 16251  017C8C  A4D8               	btfss	status,2,c
 16252  017C8E  0012               	return	
 16253  017C90  D7EF               	goto	l657
 16254  017C92                     __end_of_SPI_DisableISR:
 16255                           	opt stack 0
 16256                           tosu	equ	0xFFF
 16257                           tosh	equ	0xFFE
 16258                           tosl	equ	0xFFD
 16259                           pclath	equ	0xFFA
 16260                           tblptru	equ	0xFF8
 16261                           tblptrh	equ	0xFF7
 16262                           tblptrl	equ	0xFF6
 16263                           tablat	equ	0xFF5
 16264                           prodh	equ	0xFF4
 16265                           prodl	equ	0xFF3
 16266                           intcon	equ	0xFF2
 16267                           postinc0	equ	0xFEE
 16268                           wreg	equ	0xFE8
 16269                           indf1	equ	0xFE7
 16270                           postdec1	equ	0xFE5
 16271                           fsr1h	equ	0xFE2
 16272                           fsr1l	equ	0xFE1
 16273                           indf2	equ	0xFDF
 16274                           postinc2	equ	0xFDE
 16275                           postdec2	equ	0xFDD
 16276                           plusw2	equ	0xFDB
 16277                           fsr2h	equ	0xFDA
 16278                           fsr2l	equ	0xFD9
 16279                           status	equ	0xFD8
 16280                           
 16281 ;; *************** function _SPI_DCS *****************
 16282 ;; Defined at:
 16283 ;;		line 219 in file "Library/SPI.c"
 16284 ;; Parameters:    Size  Location     Type
 16285 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16286 ;;		 -> SPI1(11), SPI2(11), 
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;		None
 16289 ;; Return value:  Size  Location     Type
 16290 ;;                  1    wreg      void 
 16291 ;; Registers used:
 16292 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16293 ;; Tracked objects:
 16294 ;;		On entry : 0/0
 16295 ;;		On exit  : 0/0
 16296 ;;		Unchanged: 0/0
 16297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16298 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16302 ;;Total ram usage:        2 bytes
 16303 ;; Hardware stack levels used:    1
 16304 ;; Hardware stack levels required when called:    7
 16305 ;; This function calls:
 16306 ;;		Nothing
 16307 ;; This function is called by:
 16308 ;;		_SPI_Init
 16309 ;; This function uses a non-reentrant model
 16310 ;;
 16311                           
 16312                           	psect	text79
 16313  017B5A                     __ptext79:
 16314                           	opt stack 0
 16315  017B5A                     _SPI_DCS:
 16316                           	opt stack 19
 16317                           
 16318                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 16319                           
 16320                           ; BSR set to: 0
 16321                           ;incstack = 0
 16322  017B5A  0100               	movlb	0	; () banked
 16323  017B5C  EE20 F002          	lfsr	2,2
 16324  017B60  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 16325  017B62  26D9               	addwf	fsr2l,f,c
 16326  017B64  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 16327  017B66  22DA               	addwfc	fsr2h,f,c
 16328  017B68  50DF               	movf	indf2,w,c
 16329  017B6A  A4D8               	btfss	status,2,c
 16330  017B6C  D007               	goto	l13345
 16331                           
 16332                           ; BSR set to: 0
 16333                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 16334  017B6E  C0EE  FFD9         	movff	_PortC+4,fsr2l
 16335  017B72  C0EF  FFDA         	movff	_PortC+5,fsr2h
 16336  017B76  0100               	movlb	0	; () banked
 16337  017B78  84DF               	bsf	indf2,2,c
 16338  017B7A  0012               	return	
 16339  017B7C                     l13345:
 16340                           
 16341                           ; BSR set to: 0
 16342                           ;SPI.c: 223: else
 16343                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 16344  017B7C  C1A5  FFD9         	movff	_PortD+4,fsr2l
 16345  017B80  C1A6  FFDA         	movff	_PortD+5,fsr2h
 16346  017B84  0101               	movlb	1	; () banked
 16347  017B86  8EDF               	bsf	indf2,7,c
 16348  017B88  0012               	return	
 16349  017B8A                     __end_of_SPI_DCS:
 16350                           	opt stack 0
 16351                           tosu	equ	0xFFF
 16352                           tosh	equ	0xFFE
 16353                           tosl	equ	0xFFD
 16354                           pclath	equ	0xFFA
 16355                           tblptru	equ	0xFF8
 16356                           tblptrh	equ	0xFF7
 16357                           tblptrl	equ	0xFF6
 16358                           tablat	equ	0xFF5
 16359                           prodh	equ	0xFF4
 16360                           prodl	equ	0xFF3
 16361                           intcon	equ	0xFF2
 16362                           postinc0	equ	0xFEE
 16363                           wreg	equ	0xFE8
 16364                           indf1	equ	0xFE7
 16365                           postdec1	equ	0xFE5
 16366                           fsr1h	equ	0xFE2
 16367                           fsr1l	equ	0xFE1
 16368                           indf2	equ	0xFDF
 16369                           postinc2	equ	0xFDE
 16370                           postdec2	equ	0xFDD
 16371                           plusw2	equ	0xFDB
 16372                           fsr2h	equ	0xFDA
 16373                           fsr2l	equ	0xFD9
 16374                           status	equ	0xFD8
 16375                           
 16376 ;; *************** function _FunctInitButton *****************
 16377 ;; Defined at:
 16378 ;;		line 16 in file "Functions.c"
 16379 ;; Parameters:    Size  Location     Type
 16380 ;;		None
 16381 ;; Auto vars:     Size  Location     Type
 16382 ;;		None
 16383 ;; Return value:  Size  Location     Type
 16384 ;;                  1    wreg      void 
 16385 ;; Registers used:
 16386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16387 ;; Tracked objects:
 16388 ;;		On entry : 0/0
 16389 ;;		On exit  : 0/0
 16390 ;;		Unchanged: 0/0
 16391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16396 ;;Total ram usage:        0 bytes
 16397 ;; Hardware stack levels used:    1
 16398 ;; Hardware stack levels required when called:   16
 16399 ;; This function calls:
 16400 ;;		_Button_Init
 16401 ;; This function is called by:
 16402 ;;		_initialise
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           	psect	text80
 16407  0162AE                     __ptext80:
 16408                           	opt stack 0
 16409  0162AE                     _FunctInitButton:
 16410                           	opt stack 13
 16411                           
 16412                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 16413                           
 16414                           ;incstack = 0
 16415  0162AE  0E83               	movlw	low _TestButton
 16416  0162B0  0100               	movlb	0	; () banked
 16417  0162B2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16418  0162B4  0E01               	movlw	high _TestButton
 16419  0162B6  0100               	movlb	0	; () banked
 16420  0162B8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16421  0162BA  0E00               	movlw	0
 16422  0162BC  0100               	movlb	0	; () banked
 16423  0162BE  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16424  0162C0  0E02               	movlw	2
 16425  0162C2  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16426  0162C4  0E96               	movlw	low _MXK_InitTestButton
 16427  0162C6  0100               	movlb	0	; () banked
 16428  0162C8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16429  0162CA  0E7D               	movlw	high _MXK_InitTestButton
 16430  0162CC  0100               	movlb	0	; () banked
 16431  0162CE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16432  0162D0  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 16433  0162D2  0100               	movlb	0	; () banked
 16434  0162D4  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16435  0162D6  0ED0               	movlw	low _MXK_TestButton
 16436  0162D8  0100               	movlb	0	; () banked
 16437  0162DA  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16438  0162DC  0E7E               	movlw	high _MXK_TestButton
 16439  0162DE  0100               	movlb	0	; () banked
 16440  0162E0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16441  0162E2  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 16442  0162E4  0100               	movlb	0	; () banked
 16443  0162E6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16444  0162E8  0E0C               	movlw	low _Event_TestButton
 16445  0162EA  0100               	movlb	0	; () banked
 16446  0162EC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16447  0162EE  0E79               	movlw	high _Event_TestButton
 16448  0162F0  0100               	movlb	0	; () banked
 16449  0162F2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16450  0162F4  0E01               	movlw	low (_Event_TestButton shr (0+16))
 16451  0162F6  0100               	movlb	0	; () banked
 16452  0162F8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16453  0162FA  EC28  F0AA         	call	_Button_Init	;wreg free
 16454                           
 16455                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 16456  0162FE  0E79               	movlw	low _DIPSwitch
 16457  016300  0100               	movlb	0	; () banked
 16458  016302  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16459  016304  0E01               	movlw	high _DIPSwitch
 16460  016306  0100               	movlb	0	; () banked
 16461  016308  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16462  01630A  0E00               	movlw	0
 16463  01630C  0100               	movlb	0	; () banked
 16464  01630E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16465  016310  0E02               	movlw	2
 16466  016312  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16467  016314  0E78               	movlw	low _MXK_InitDIPSwitch
 16468  016316  0100               	movlb	0	; () banked
 16469  016318  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16470  01631A  0E7D               	movlw	high _MXK_InitDIPSwitch
 16471  01631C  0100               	movlb	0	; () banked
 16472  01631E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16473  016320  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 16474  016322  0100               	movlb	0	; () banked
 16475  016324  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16476  016326  0E40               	movlw	low _MXK_DIPSwitch
 16477  016328  0100               	movlb	0	; () banked
 16478  01632A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16479  01632C  0E7E               	movlw	high _MXK_DIPSwitch
 16480  01632E  0100               	movlb	0	; () banked
 16481  016330  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16482  016332  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 16483  016334  0100               	movlb	0	; () banked
 16484  016336  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16485  016338  0EBA               	movlw	low _Event_DIPSwitch
 16486  01633A  0100               	movlb	0	; () banked
 16487  01633C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16488  01633E  0E7B               	movlw	high _Event_DIPSwitch
 16489  016340  0100               	movlb	0	; () banked
 16490  016342  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16491  016344  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 16492  016346  0100               	movlb	0	; () banked
 16493  016348  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16494  01634A  EC28  F0AA         	call	_Button_Init	;wreg free
 16495  01634E  0012               	return		;funcret
 16496  016350                     __end_of_FunctInitButton:
 16497                           	opt stack 0
 16498                           tosu	equ	0xFFF
 16499                           tosh	equ	0xFFE
 16500                           tosl	equ	0xFFD
 16501                           pclath	equ	0xFFA
 16502                           tblptru	equ	0xFF8
 16503                           tblptrh	equ	0xFF7
 16504                           tblptrl	equ	0xFF6
 16505                           tablat	equ	0xFF5
 16506                           prodh	equ	0xFF4
 16507                           prodl	equ	0xFF3
 16508                           intcon	equ	0xFF2
 16509                           postinc0	equ	0xFEE
 16510                           wreg	equ	0xFE8
 16511                           indf1	equ	0xFE7
 16512                           postdec1	equ	0xFE5
 16513                           fsr1h	equ	0xFE2
 16514                           fsr1l	equ	0xFE1
 16515                           indf2	equ	0xFDF
 16516                           postinc2	equ	0xFDE
 16517                           postdec2	equ	0xFDD
 16518                           plusw2	equ	0xFDB
 16519                           fsr2h	equ	0xFDA
 16520                           fsr2l	equ	0xFD9
 16521                           status	equ	0xFD8
 16522                           
 16523 ;; *************** function _Button_Init *****************
 16524 ;; Defined at:
 16525 ;;		line 18 in file "Library/Button.c"
 16526 ;; Parameters:    Size  Location     Type
 16527 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 16528 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 16529 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 16530 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 16531 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 16532 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 16533 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 16534 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 16535 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 16536 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 16537 ;; Auto vars:     Size  Location     Type
 16538 ;;		None
 16539 ;; Return value:  Size  Location     Type
 16540 ;;                  1    wreg      void 
 16541 ;; Registers used:
 16542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16543 ;; Tracked objects:
 16544 ;;		On entry : 0/0
 16545 ;;		On exit  : 0/0
 16546 ;;		Unchanged: 0/0
 16547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16548 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16552 ;;Total ram usage:       13 bytes
 16553 ;; Hardware stack levels used:    1
 16554 ;; Hardware stack levels required when called:   15
 16555 ;; This function calls:
 16556 ;;		_HMI_InitButtons
 16557 ;;		_MXK_InitDIPSwitch
 16558 ;;		_MXK_InitTestButton
 16559 ;; This function is called by:
 16560 ;;		_HMI_Init
 16561 ;;		_FunctInitButton
 16562 ;; This function uses a non-reentrant model
 16563 ;;
 16564                           
 16565                           	psect	text81
 16566  015450                     __ptext81:
 16567                           	opt stack 0
 16568  015450                     _Button_Init:
 16569                           	opt stack 13
 16570                           
 16571                           ;Button.c: 21: if(pInput==(void*)0)
 16572                           
 16573                           ;incstack = 0
 16574  015450  0100               	movlb	0	; () banked
 16575  015452  519B               	movf	Button_Init@pInput& (0+255),w,b
 16576  015454  0100               	movlb	0	; () banked
 16577  015456  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 16578  015458  B4D8               	btfsc	status,2,c
 16579  01545A  0012               	return	
 16580                           
 16581                           ; BSR set to: 0
 16582                           ;Button.c: 23: if(pInitIO==(void*)0)
 16583                           
 16584                           ; BSR set to: 0
 16585                           
 16586                           ; BSR set to: 0
 16587                           ;Button.c: 22: return;
 16588  01545C  0100               	movlb	0	; () banked
 16589  01545E  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16590  015460  0100               	movlb	0	; () banked
 16591  015462  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 16592  015464  0100               	movlb	0	; () banked
 16593  015466  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 16594  015468  B4D8               	btfsc	status,2,c
 16595  01546A  0012               	return	
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;Button.c: 25: if(pGetState==(void*)0)
 16599                           
 16600                           ; BSR set to: 0
 16601                           
 16602                           ; BSR set to: 0
 16603                           ;Button.c: 24: return;
 16604  01546C  0100               	movlb	0	; () banked
 16605  01546E  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 16606  015470  0100               	movlb	0	; () banked
 16607  015472  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 16608  015474  0100               	movlb	0	; () banked
 16609  015476  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 16610  015478  B4D8               	btfsc	status,2,c
 16611  01547A  0012               	return	
 16612                           
 16613                           ; BSR set to: 0
 16614                           ;Button.c: 27: if(pFunction==(void*)0)
 16615                           
 16616                           ; BSR set to: 0
 16617                           
 16618                           ; BSR set to: 0
 16619                           ;Button.c: 26: return;
 16620  01547C  0100               	movlb	0	; () banked
 16621  01547E  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 16622  015480  0100               	movlb	0	; () banked
 16623  015482  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 16624  015484  0100               	movlb	0	; () banked
 16625  015486  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 16626  015488  B4D8               	btfsc	status,2,c
 16627  01548A  0012               	return	
 16628                           
 16629                           ; BSR set to: 0
 16630                           ;Button.c: 30: if(pThreshold == 0)
 16631                           
 16632                           ; BSR set to: 0
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;Button.c: 28: return;
 16636  01548C  0100               	movlb	0	; () banked
 16637  01548E  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 16638  015490  0100               	movlb	0	; () banked
 16639  015492  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 16640  015494  A4D8               	btfss	status,2,c
 16641  015496  D005               	goto	l14421
 16642                           
 16643                           ; BSR set to: 0
 16644                           ;Button.c: 31: pThreshold = 1;
 16645  015498  0E00               	movlw	0
 16646  01549A  0100               	movlb	0	; () banked
 16647  01549C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16648  01549E  0E01               	movlw	1
 16649  0154A0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16650  0154A2                     l14421:
 16651                           
 16652                           ; BSR set to: 0
 16653                           ;Button.c: 34: pInput->mState = 0;
 16654  0154A2  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 16655  0154A6  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 16656  0154AA  0E00               	movlw	0
 16657  0154AC  6EDF               	movwf	indf2,c
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;Button.c: 35: pInput->mCount = 0;
 16661  0154AE  0100               	movlb	0	; () banked
 16662  0154B0  EE20 F001          	lfsr	2,1
 16663  0154B4  519B               	movf	Button_Init@pInput& (0+255),w,b
 16664  0154B6  26D9               	addwf	fsr2l,f,c
 16665  0154B8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16666  0154BA  22DA               	addwfc	fsr2h,f,c
 16667  0154BC  0E00               	movlw	0
 16668  0154BE  6EDF               	movwf	indf2,c
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 16672  0154C0  0100               	movlb	0	; () banked
 16673  0154C2  EE20 F002          	lfsr	2,2
 16674  0154C6  519B               	movf	Button_Init@pInput& (0+255),w,b
 16675  0154C8  26D9               	addwf	fsr2l,f,c
 16676  0154CA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16677  0154CC  22DA               	addwfc	fsr2h,f,c
 16678  0154CE  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 16679  0154D2  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 16680                           
 16681                           ; BSR set to: 0
 16682                           ;Button.c: 37: pInput->mFunction = pFunction;
 16683  0154D6  0100               	movlb	0	; () banked
 16684  0154D8  EE20 F004          	lfsr	2,4
 16685  0154DC  519B               	movf	Button_Init@pInput& (0+255),w,b
 16686  0154DE  26D9               	addwf	fsr2l,f,c
 16687  0154E0  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16688  0154E2  22DA               	addwfc	fsr2h,f,c
 16689  0154E4  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 16690  0154E8  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 16691  0154EC  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 16692                           
 16693                           ; BSR set to: 0
 16694                           ;Button.c: 38: pInput->mGetState = pGetState;
 16695  0154F0  0100               	movlb	0	; () banked
 16696  0154F2  EE20 F007          	lfsr	2,7
 16697  0154F6  519B               	movf	Button_Init@pInput& (0+255),w,b
 16698  0154F8  26D9               	addwf	fsr2l,f,c
 16699  0154FA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16700  0154FC  22DA               	addwfc	fsr2h,f,c
 16701  0154FE  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 16702  015502  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 16703  015506  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 16704                           
 16705                           ; BSR set to: 0
 16706                           ;Button.c: 41: pInitIO();
 16707  01550A  D801               	call	u12088
 16708  01550C  0012               	return	
 16709  01550E                     u12088:
 16710  01550E  0005               	push	
 16711  015510  6EFA               	movwf	pclath,c
 16712  015512  0100               	movlb	0	; () banked
 16713  015514  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16714  015516  6EFD               	movwf	tosl,c
 16715  015518  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 16716  01551A  6EFE               	movwf	tosh,c
 16717  01551C  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 16718  01551E  6EFF               	movwf	tosu,c
 16719  015520  50FA               	movf	pclath,w,c
 16720  015522  0012               	return		;indir
 16721  015524                     __end_of_Button_Init:
 16722                           	opt stack 0
 16723                           tosu	equ	0xFFF
 16724                           tosh	equ	0xFFE
 16725                           tosl	equ	0xFFD
 16726                           pclath	equ	0xFFA
 16727                           tblptru	equ	0xFF8
 16728                           tblptrh	equ	0xFF7
 16729                           tblptrl	equ	0xFF6
 16730                           tablat	equ	0xFF5
 16731                           prodh	equ	0xFF4
 16732                           prodl	equ	0xFF3
 16733                           intcon	equ	0xFF2
 16734                           postinc0	equ	0xFEE
 16735                           wreg	equ	0xFE8
 16736                           indf1	equ	0xFE7
 16737                           postdec1	equ	0xFE5
 16738                           fsr1h	equ	0xFE2
 16739                           fsr1l	equ	0xFE1
 16740                           indf2	equ	0xFDF
 16741                           postinc2	equ	0xFDE
 16742                           postdec2	equ	0xFDD
 16743                           plusw2	equ	0xFDB
 16744                           fsr2h	equ	0xFDA
 16745                           fsr2l	equ	0xFD9
 16746                           status	equ	0xFD8
 16747                           
 16748 ;; *************** function _MXK_InitDIPSwitch *****************
 16749 ;; Defined at:
 16750 ;;		line 20 in file "Library/MXK.c"
 16751 ;; Parameters:    Size  Location     Type
 16752 ;;		None
 16753 ;; Auto vars:     Size  Location     Type
 16754 ;;		None
 16755 ;; Return value:  Size  Location     Type
 16756 ;;                  1    wreg      void 
 16757 ;; Registers used:
 16758 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16759 ;; Tracked objects:
 16760 ;;		On entry : 0/0
 16761 ;;		On exit  : 0/0
 16762 ;;		Unchanged: 0/0
 16763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16768 ;;Total ram usage:        0 bytes
 16769 ;; Hardware stack levels used:    1
 16770 ;; Hardware stack levels required when called:   14
 16771 ;; This function calls:
 16772 ;;		_Port_SetQuadType
 16773 ;; This function is called by:
 16774 ;;		_FunctInitButton
 16775 ;;		_Button_Init
 16776 ;; This function uses a non-reentrant model
 16777 ;;
 16778                           
 16779                           	psect	text82
 16780  017D78                     __ptext82:
 16781                           	opt stack 0
 16782  017D78                     _MXK_InitDIPSwitch:
 16783                           	opt stack 13
 16784                           
 16785                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16786                           
 16787                           ;incstack = 0
 16788  017D78  0EA1               	movlw	low _PortD
 16789  017D7A  0100               	movlb	0	; () banked
 16790  017D7C  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16791  017D7E  0E01               	movlw	high _PortD
 16792  017D80  0100               	movlb	0	; () banked
 16793  017D82  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16794  017D84  0E00               	movlw	0
 16795  017D86  0100               	movlb	0	; () banked
 16796  017D88  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16797  017D8A  0E00               	movlw	0
 16798  017D8C  0100               	movlb	0	; () banked
 16799  017D8E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16800  017D90  EC53  F095         	call	_Port_SetQuadType	;wreg free
 16801  017D94  0012               	return		;funcret
 16802  017D96                     __end_of_MXK_InitDIPSwitch:
 16803                           	opt stack 0
 16804                           tosu	equ	0xFFF
 16805                           tosh	equ	0xFFE
 16806                           tosl	equ	0xFFD
 16807                           pclath	equ	0xFFA
 16808                           tblptru	equ	0xFF8
 16809                           tblptrh	equ	0xFF7
 16810                           tblptrl	equ	0xFF6
 16811                           tablat	equ	0xFF5
 16812                           prodh	equ	0xFF4
 16813                           prodl	equ	0xFF3
 16814                           intcon	equ	0xFF2
 16815                           postinc0	equ	0xFEE
 16816                           wreg	equ	0xFE8
 16817                           indf1	equ	0xFE7
 16818                           postdec1	equ	0xFE5
 16819                           fsr1h	equ	0xFE2
 16820                           fsr1l	equ	0xFE1
 16821                           indf2	equ	0xFDF
 16822                           postinc2	equ	0xFDE
 16823                           postdec2	equ	0xFDD
 16824                           plusw2	equ	0xFDB
 16825                           fsr2h	equ	0xFDA
 16826                           fsr2l	equ	0xFD9
 16827                           status	equ	0xFD8
 16828                           
 16829 ;; *************** function _HMI_InitButtons *****************
 16830 ;; Defined at:
 16831 ;;		line 21 in file "HMI.c"
 16832 ;; Parameters:    Size  Location     Type
 16833 ;;		None
 16834 ;; Auto vars:     Size  Location     Type
 16835 ;;		None
 16836 ;; Return value:  Size  Location     Type
 16837 ;;                  1    wreg      void 
 16838 ;; Registers used:
 16839 ;;		wreg, status,2
 16840 ;; Tracked objects:
 16841 ;;		On entry : 0/0
 16842 ;;		On exit  : 0/0
 16843 ;;		Unchanged: 0/0
 16844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;Total ram usage:        0 bytes
 16850 ;; Hardware stack levels used:    1
 16851 ;; Hardware stack levels required when called:    7
 16852 ;; This function calls:
 16853 ;;		Nothing
 16854 ;; This function is called by:
 16855 ;;		_HMI_Init
 16856 ;;		_Button_Init
 16857 ;; This function uses a non-reentrant model
 16858 ;;
 16859                           
 16860                           	psect	text83
 16861  017FE6                     __ptext83:
 16862                           	opt stack 0
 16863  017FE6                     _HMI_InitButtons:
 16864                           	opt stack 20
 16865                           
 16866                           ;HMI.c: 23: TRISE = 0xFC;
 16867                           
 16868                           ;incstack = 0
 16869  017FE6  0EFC               	movlw	252
 16870  017FE8  6E96               	movwf	3990,c	;volatile
 16871  017FEA  0012               	return		;funcret
 16872  017FEC                     __end_of_HMI_InitButtons:
 16873                           	opt stack 0
 16874                           tosu	equ	0xFFF
 16875                           tosh	equ	0xFFE
 16876                           tosl	equ	0xFFD
 16877                           pclath	equ	0xFFA
 16878                           tblptru	equ	0xFF8
 16879                           tblptrh	equ	0xFF7
 16880                           tblptrl	equ	0xFF6
 16881                           tablat	equ	0xFF5
 16882                           prodh	equ	0xFF4
 16883                           prodl	equ	0xFF3
 16884                           intcon	equ	0xFF2
 16885                           postinc0	equ	0xFEE
 16886                           wreg	equ	0xFE8
 16887                           indf1	equ	0xFE7
 16888                           postdec1	equ	0xFE5
 16889                           fsr1h	equ	0xFE2
 16890                           fsr1l	equ	0xFE1
 16891                           indf2	equ	0xFDF
 16892                           postinc2	equ	0xFDE
 16893                           postdec2	equ	0xFDD
 16894                           plusw2	equ	0xFDB
 16895                           fsr2h	equ	0xFDA
 16896                           fsr2l	equ	0xFD9
 16897                           status	equ	0xFD8
 16898                           
 16899 ;; *************** function _MXK_InitTestButton *****************
 16900 ;; Defined at:
 16901 ;;		line 10 in file "Library/MXK.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;		None
 16904 ;; Auto vars:     Size  Location     Type
 16905 ;;		None
 16906 ;; Return value:  Size  Location     Type
 16907 ;;                  1    wreg      void 
 16908 ;; Registers used:
 16909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16910 ;; Tracked objects:
 16911 ;;		On entry : 0/0
 16912 ;;		On exit  : 0/0
 16913 ;;		Unchanged: 0/0
 16914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16919 ;;Total ram usage:        0 bytes
 16920 ;; Hardware stack levels used:    1
 16921 ;; Hardware stack levels required when called:   12
 16922 ;; This function calls:
 16923 ;;		_Port_SetPinType
 16924 ;; This function is called by:
 16925 ;;		_FunctInitButton
 16926 ;;		_Button_Init
 16927 ;; This function uses a non-reentrant model
 16928 ;;
 16929                           
 16930                           	psect	text84
 16931  017D96                     __ptext84:
 16932                           	opt stack 0
 16933  017D96                     _MXK_InitTestButton:
 16934                           	opt stack 15
 16935                           
 16936                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16937                           
 16938                           ;incstack = 0
 16939  017D96  0EAB               	movlw	low _PortB
 16940  017D98  0100               	movlb	0	; () banked
 16941  017D9A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16942  017D9C  0E01               	movlw	high _PortB
 16943  017D9E  0100               	movlb	0	; () banked
 16944  017DA0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16945  017DA2  0E04               	movlw	4
 16946  017DA4  0100               	movlb	0	; () banked
 16947  017DA6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16948  017DA8  0E00               	movlw	0
 16949  017DAA  0100               	movlb	0	; () banked
 16950  017DAC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16951  017DAE  EC93  F09C         	call	_Port_SetPinType	;wreg free
 16952  017DB2  0012               	return		;funcret
 16953  017DB4                     __end_of_MXK_InitTestButton:
 16954                           	opt stack 0
 16955                           tosu	equ	0xFFF
 16956                           tosh	equ	0xFFE
 16957                           tosl	equ	0xFFD
 16958                           pclath	equ	0xFFA
 16959                           tblptru	equ	0xFF8
 16960                           tblptrh	equ	0xFF7
 16961                           tblptrl	equ	0xFF6
 16962                           tablat	equ	0xFF5
 16963                           prodh	equ	0xFF4
 16964                           prodl	equ	0xFF3
 16965                           intcon	equ	0xFF2
 16966                           postinc0	equ	0xFEE
 16967                           wreg	equ	0xFE8
 16968                           indf1	equ	0xFE7
 16969                           postdec1	equ	0xFE5
 16970                           fsr1h	equ	0xFE2
 16971                           fsr1l	equ	0xFE1
 16972                           indf2	equ	0xFDF
 16973                           postinc2	equ	0xFDE
 16974                           postdec2	equ	0xFDD
 16975                           plusw2	equ	0xFDB
 16976                           fsr2h	equ	0xFDA
 16977                           fsr2l	equ	0xFD9
 16978                           status	equ	0xFD8
 16979                           
 16980 ;; *************** function _Port_SetPinType *****************
 16981 ;; Defined at:
 16982 ;;		line 189 in file "Library/Port.c"
 16983 ;; Parameters:    Size  Location     Type
 16984 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16985 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16986 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16987 ;;  pPin            1   40[BANK0 ] enum E6750
 16988 ;;  pType           1   41[BANK0 ] enum E6795
 16989 ;; Auto vars:     Size  Location     Type
 16990 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16991 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16992 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16993 ;;  Output          1   42[BANK0 ] enum E6475
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  1    wreg      enum E6475
 16996 ;; Registers used:
 16997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16998 ;; Tracked objects:
 16999 ;;		On entry : 0/0
 17000 ;;		On exit  : 0/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;Total ram usage:        7 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:   11
 17010 ;; This function calls:
 17011 ;;		_Byte_SetBit
 17012 ;;		_PortProperty_Valid
 17013 ;;		_Word_SetPair
 17014 ;; This function is called by:
 17015 ;;		_Configure_GPIOs
 17016 ;;		_LED_Init
 17017 ;;		_Port_Init
 17018 ;;		_SPI_Init
 17019 ;;		_Motor_Init
 17020 ;;		_MXK_InitTestButton
 17021 ;;		_MXK_Init
 17022 ;;		_I2C_Init
 17023 ;; This function uses a non-reentrant model
 17024 ;;
 17025                           
 17026                           	psect	text85
 17027  013926                     __ptext85:
 17028                           	opt stack 0
 17029  013926                     _Port_SetPinType:
 17030                           	opt stack 17
 17031                           
 17032                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17033                           
 17034                           ;incstack = 0
 17035  013926  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17036  01392A  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17037  01392E  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 17038  013932  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 17039                           
 17040                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17041  013936  0E05               	movlw	5
 17042  013938  0100               	movlb	0	; () banked
 17043  01393A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17044                           
 17045                           ;Port.c: 193: switch (pType)
 17046  01393C  D0B5               	goto	l13223
 17047  01393E                     l13203:
 17048                           
 17049                           ; BSR set to: 0
 17050                           ;Port.c: 197: {
 17051                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17052  01393E  0100               	movlb	0	; () banked
 17053  013940  EE20 F002          	lfsr	2,2
 17054  013944  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17055  013946  26D9               	addwf	fsr2l,f,c
 17056  013948  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17057  01394A  22DA               	addwfc	fsr2h,f,c
 17058  01394C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17059  013950  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17060  013954  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17061  013958  0E01               	movlw	1
 17062  01395A  0100               	movlb	0	; () banked
 17063  01395C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17064  01395E  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17065                           
 17066                           ;Port.c: 203: break;
 17067  013962  D0B0               	goto	l13225
 17068  013964                     l13205:
 17069                           
 17070                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17071  013964  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17072  013968  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17073  01396C  0E01               	movlw	1
 17074  01396E  0100               	movlb	0	; () banked
 17075  013970  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17076  013972  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17077  013976  EC47  F0B5         	call	_PortProperty_Valid	;wreg free
 17078  01397A  0100               	movlb	0	; () banked
 17079  01397C  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17080  01397E  0100               	movlb	0	; () banked
 17081  013980  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17082  013982  A4D8               	btfss	status,2,c
 17083  013984  0012               	return	
 17084                           
 17085                           ; BSR set to: 0
 17086                           ;Port.c: 208: {
 17087                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17088  013986  0100               	movlb	0	; () banked
 17089  013988  EE20 F002          	lfsr	2,2
 17090  01398C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17091  01398E  26D9               	addwf	fsr2l,f,c
 17092  013990  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17093  013992  22DA               	addwfc	fsr2h,f,c
 17094  013994  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17095  013998  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17096  01399C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17097  0139A0  0E00               	movlw	0
 17098  0139A2  0100               	movlb	0	; () banked
 17099  0139A4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17100  0139A6  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17101                           
 17102                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17103  0139AA  0100               	movlb	0	; () banked
 17104  0139AC  EE20 F004          	lfsr	2,4
 17105  0139B0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17106  0139B2  26D9               	addwf	fsr2l,f,c
 17107  0139B4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17108  0139B6  22DA               	addwfc	fsr2h,f,c
 17109  0139B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17110  0139BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17111  0139C0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17112  0139C4  0E00               	movlw	0
 17113  0139C6  0100               	movlb	0	; () banked
 17114  0139C8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17115  0139CA  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17116                           
 17117                           ;Port.c: 214: break;
 17118  0139CE  D07A               	goto	l13225
 17119  0139D0                     l13211:
 17120                           
 17121                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17122  0139D0  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17123  0139D4  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17124  0139D8  0E02               	movlw	2
 17125  0139DA  0100               	movlb	0	; () banked
 17126  0139DC  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17127  0139DE  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17128  0139E2  EC47  F0B5         	call	_PortProperty_Valid	;wreg free
 17129  0139E6  0100               	movlb	0	; () banked
 17130  0139E8  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17131  0139EA  0100               	movlb	0	; () banked
 17132  0139EC  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17133  0139EE  A4D8               	btfss	status,2,c
 17134  0139F0  0012               	return	
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;Port.c: 220: {
 17138                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17139  0139F2  0100               	movlb	0	; () banked
 17140  0139F4  EE20 F002          	lfsr	2,2
 17141  0139F8  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17142  0139FA  26D9               	addwf	fsr2l,f,c
 17143  0139FC  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17144  0139FE  22DA               	addwfc	fsr2h,f,c
 17145  013A00  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17146  013A04  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17147  013A08  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17148  013A0C  0E01               	movlw	1
 17149  013A0E  0100               	movlb	0	; () banked
 17150  013A10  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17151  013A12  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17152                           
 17153                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17154  013A16  0100               	movlb	0	; () banked
 17155  013A18  EE20 F004          	lfsr	2,4
 17156  013A1C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17157  013A1E  26D9               	addwf	fsr2l,f,c
 17158  013A20  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17159  013A22  22DA               	addwfc	fsr2h,f,c
 17160  013A24  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17161  013A28  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17162  013A2C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17163  013A30  0E01               	movlw	1
 17164  013A32  0100               	movlb	0	; () banked
 17165  013A34  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17166  013A36  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17167                           
 17168                           ;Port.c: 226: break;
 17169  013A3A  D044               	goto	l13225
 17170  013A3C                     l13217:
 17171                           
 17172                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17173  013A3C  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17174  013A40  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17175  013A44  0E00               	movlw	0
 17176  013A46  0100               	movlb	0	; () banked
 17177  013A48  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17178  013A4A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17179  013A4E  EC47  F0B5         	call	_PortProperty_Valid	;wreg free
 17180  013A52  0100               	movlb	0	; () banked
 17181  013A54  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17182  013A56  0100               	movlb	0	; () banked
 17183  013A58  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17184  013A5A  A4D8               	btfss	status,2,c
 17185  013A5C  0012               	return	
 17186                           
 17187                           ; BSR set to: 0
 17188                           ;Port.c: 232: {
 17189                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17190  013A5E  0100               	movlb	0	; () banked
 17191  013A60  EE20 F002          	lfsr	2,2
 17192  013A64  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17193  013A66  26D9               	addwf	fsr2l,f,c
 17194  013A68  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17195  013A6A  22DA               	addwfc	fsr2h,f,c
 17196  013A6C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17197  013A70  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17198  013A74  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17199  013A78  0E00               	movlw	0
 17200  013A7A  0100               	movlb	0	; () banked
 17201  013A7C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17202  013A7E  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17203                           
 17204                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17205  013A82  0100               	movlb	0	; () banked
 17206  013A84  EE20 F004          	lfsr	2,4
 17207  013A88  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17208  013A8A  26D9               	addwf	fsr2l,f,c
 17209  013A8C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17210  013A8E  22DA               	addwfc	fsr2h,f,c
 17211  013A90  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17212  013A94  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17213  013A98  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17214  013A9C  0E00               	movlw	0
 17215  013A9E  0100               	movlb	0	; () banked
 17216  013AA0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17217  013AA2  EC96  F0B8         	call	_Byte_SetBit	;wreg free
 17218                           
 17219                           ;Port.c: 239: }
 17220                           
 17221                           ;Port.c: 238: break;
 17222  013AA6  D00E               	goto	l13225
 17223  013AA8                     l13223:
 17224  013AA8  0100               	movlb	0	; () banked
 17225  013AAA  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 17226                           
 17227                           ; Switch size 1, requested type "space"
 17228                           ; Number of cases is 4, Range of values is 0 to 3
 17229                           ; switch strategies available:
 17230                           ; Name         Instructions Cycles
 17231                           ; simple_byte           13     7 (average)
 17232                           ;	Chosen strategy is simple_byte
 17233  013AAC  0A00               	xorlw	0	; case 0
 17234  013AAE  B4D8               	btfsc	status,2,c
 17235  013AB0  D746               	goto	l13203
 17236  013AB2  0A01               	xorlw	1	; case 1
 17237  013AB4  B4D8               	btfsc	status,2,c
 17238  013AB6  D756               	goto	l13205
 17239  013AB8  0A03               	xorlw	3	; case 2
 17240  013ABA  B4D8               	btfsc	status,2,c
 17241  013ABC  D789               	goto	l13211
 17242  013ABE  0A01               	xorlw	1	; case 3
 17243  013AC0  B4D8               	btfsc	status,2,c
 17244  013AC2  D7BC               	goto	l13217
 17245  013AC4                     l13225:
 17246                           
 17247                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17248  013AC4  0E08               	movlw	8
 17249  013AC6  0100               	movlb	0	; () banked
 17250  013AC8  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17251  013ACA  0100               	movlb	0	; () banked
 17252  013ACC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17253  013ACE  0E00               	movlw	0
 17254  013AD0  0100               	movlb	0	; () banked
 17255  013AD2  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17256  013AD4  0100               	movlb	0	; () banked
 17257  013AD6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17258  013AD8  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17259  013ADC  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17260  013AE0  EC81  F0BB         	call	_Word_SetPair	;wreg free
 17261  013AE4  0012               	return	
 17262  013AE6                     __end_of_Port_SetPinType:
 17263                           	opt stack 0
 17264                           tosu	equ	0xFFF
 17265                           tosh	equ	0xFFE
 17266                           tosl	equ	0xFFD
 17267                           pclath	equ	0xFFA
 17268                           tblptru	equ	0xFF8
 17269                           tblptrh	equ	0xFF7
 17270                           tblptrl	equ	0xFF6
 17271                           tablat	equ	0xFF5
 17272                           prodh	equ	0xFF4
 17273                           prodl	equ	0xFF3
 17274                           intcon	equ	0xFF2
 17275                           postinc0	equ	0xFEE
 17276                           wreg	equ	0xFE8
 17277                           indf1	equ	0xFE7
 17278                           postdec1	equ	0xFE5
 17279                           fsr1h	equ	0xFE2
 17280                           fsr1l	equ	0xFE1
 17281                           indf2	equ	0xFDF
 17282                           postinc2	equ	0xFDE
 17283                           postdec2	equ	0xFDD
 17284                           plusw2	equ	0xFDB
 17285                           fsr2h	equ	0xFDA
 17286                           fsr2l	equ	0xFD9
 17287                           status	equ	0xFD8
 17288                           
 17289 ;; *************** function _Byte_SetBit *****************
 17290 ;; Defined at:
 17291 ;;		line 32 in file "Library/Types.c"
 17292 ;; Parameters:    Size  Location     Type
 17293 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17294 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17295 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17296 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17297 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17298 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17299 ;;		 -> NULL(0), 
 17300 ;;  pBit            1    2[BANK0 ] unsigned char 
 17301 ;;  pValue          1    3[BANK0 ] unsigned char 
 17302 ;; Auto vars:     Size  Location     Type
 17303 ;;		None
 17304 ;; Return value:  Size  Location     Type
 17305 ;;                  1    wreg      void 
 17306 ;; Registers used:
 17307 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17308 ;; Tracked objects:
 17309 ;;		On entry : 0/0
 17310 ;;		On exit  : 0/0
 17311 ;;		Unchanged: 0/0
 17312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17313 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17315 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17316 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17317 ;;Total ram usage:        7 bytes
 17318 ;; Hardware stack levels used:    1
 17319 ;; Hardware stack levels required when called:    7
 17320 ;; This function calls:
 17321 ;;		Nothing
 17322 ;; This function is called by:
 17323 ;;		_Port_SetPinType
 17324 ;;		_Port_SetPin
 17325 ;;		_SPI_Init
 17326 ;;		_SPI_MinSpeed
 17327 ;;		_SPI_MaxSpeed
 17328 ;;		_Word_SetBit
 17329 ;;		_I2C_Init
 17330 ;; This function uses a non-reentrant model
 17331 ;;
 17332                           
 17333                           	psect	text86
 17334  01712C                     __ptext86:
 17335                           	opt stack 0
 17336  01712C                     _Byte_SetBit:
 17337                           	opt stack 16
 17338                           
 17339                           ;Types.c: 34: pValue &= 1;
 17340                           
 17341                           ;incstack = 0
 17342  01712C  0E01               	movlw	1
 17343  01712E  0100               	movlb	0	; () banked
 17344  017130  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17348  017132  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17349  017136  0E01               	movlw	1
 17350  017138  0100               	movlb	0	; () banked
 17351  01713A  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17352  01713C  0100               	movlb	0	; () banked
 17353  01713E  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17354  017140  D003               	goto	u10244
 17355  017142                     u10245:
 17356  017142  0100               	movlb	0	; () banked
 17357  017144  90D8               	bcf	status,0,c
 17358  017146  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17359  017148                     u10244:
 17360  017148  0100               	movlb	0	; () banked
 17361  01714A  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17362  01714C  D7FA               	goto	u10245
 17363  01714E  0100               	movlb	0	; () banked
 17364  017150  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17365  017152  0AFF               	xorlw	255
 17366  017154  0100               	movlb	0	; () banked
 17367  017156  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17368  017158  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17369  01715C  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17370  017160  0100               	movlb	0	; () banked
 17371  017162  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17372  017164  16DF               	andwf	indf2,f,c
 17373                           
 17374                           ; BSR set to: 0
 17375                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17376  017166  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17377  01716A  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 17378  01716E  0100               	movlb	0	; () banked
 17379  017170  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17380  017172  D003               	goto	u10254
 17381  017174                     u10255:
 17382  017174  0100               	movlb	0	; () banked
 17383  017176  90D8               	bcf	status,0,c
 17384  017178  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17385  01717A                     u10254:
 17386  01717A  0100               	movlb	0	; () banked
 17387  01717C  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17388  01717E  D7FA               	goto	u10255
 17389  017180  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17390  017184  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17391  017188  0100               	movlb	0	; () banked
 17392  01718A  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17393  01718C  12DF               	iorwf	indf2,f,c
 17394                           
 17395                           ; BSR set to: 0
 17396  01718E  0012               	return		;funcret
 17397  017190                     __end_of_Byte_SetBit:
 17398                           	opt stack 0
 17399                           tosu	equ	0xFFF
 17400                           tosh	equ	0xFFE
 17401                           tosl	equ	0xFFD
 17402                           pclath	equ	0xFFA
 17403                           tblptru	equ	0xFF8
 17404                           tblptrh	equ	0xFF7
 17405                           tblptrl	equ	0xFF6
 17406                           tablat	equ	0xFF5
 17407                           prodh	equ	0xFF4
 17408                           prodl	equ	0xFF3
 17409                           intcon	equ	0xFF2
 17410                           postinc0	equ	0xFEE
 17411                           wreg	equ	0xFE8
 17412                           indf1	equ	0xFE7
 17413                           postdec1	equ	0xFE5
 17414                           fsr1h	equ	0xFE2
 17415                           fsr1l	equ	0xFE1
 17416                           indf2	equ	0xFDF
 17417                           postinc2	equ	0xFDE
 17418                           postdec2	equ	0xFDD
 17419                           plusw2	equ	0xFDB
 17420                           fsr2h	equ	0xFDA
 17421                           fsr2l	equ	0xFD9
 17422                           status	equ	0xFD8
 17423                           
 17424 ;; *************** function _Port_SetQuadType *****************
 17425 ;; Defined at:
 17426 ;;		line 399 in file "Library/Port.c"
 17427 ;; Parameters:    Size  Location     Type
 17428 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17429 ;;		 -> PortB(10), PortD(10), 
 17430 ;;  pQuad           1   56[BANK0 ] enum E6776
 17431 ;;  pType           1   57[BANK0 ] enum E6795
 17432 ;; Auto vars:     Size  Location     Type
 17433 ;;  Output          1   58[BANK0 ] enum E6475
 17434 ;; Return value:  Size  Location     Type
 17435 ;;                  1    wreg      enum E6475
 17436 ;; Registers used:
 17437 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17438 ;; Tracked objects:
 17439 ;;		On entry : 0/0
 17440 ;;		On exit  : 0/0
 17441 ;;		Unchanged: 0/0
 17442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17446 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;Total ram usage:        5 bytes
 17448 ;; Hardware stack levels used:    1
 17449 ;; Hardware stack levels required when called:   13
 17450 ;; This function calls:
 17451 ;;		_Byte_SetQuad
 17452 ;;		_Port_CheckQuadType
 17453 ;;		_Word_SetPair
 17454 ;; This function is called by:
 17455 ;;		_MXK_InitDIPSwitch
 17456 ;;		_MXK_Init
 17457 ;; This function uses a non-reentrant model
 17458 ;;
 17459                           
 17460                           	psect	text87
 17461  012AA6                     __ptext87:
 17462                           	opt stack 0
 17463  012AA6                     _Port_SetQuadType:
 17464                           	opt stack 15
 17465                           
 17466                           ;Port.c: 401: ePinError Output = ePinErrorState;
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;incstack = 0
 17470  012AA6  0E05               	movlw	5
 17471  012AA8  0100               	movlb	0	; () banked
 17472  012AAA  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17473                           
 17474                           ;Port.c: 403: switch (pType)
 17475  012AAC  D0C7               	goto	l13285
 17476  012AAE                     l13269:
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;Port.c: 407: {
 17480                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17481  012AAE  0100               	movlb	0	; () banked
 17482  012AB0  EE20 F002          	lfsr	2,2
 17483  012AB4  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17484  012AB6  26D9               	addwf	fsr2l,f,c
 17485  012AB8  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17486  012ABA  22DA               	addwfc	fsr2h,f,c
 17487  012ABC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17488  012AC0  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17489  012AC4  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17490  012AC8  0E0F               	movlw	15
 17491  012ACA  0100               	movlb	0	; () banked
 17492  012ACC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17493  012ACE  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17494                           
 17495                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17496  012AD2  0100               	movlb	0	; () banked
 17497  012AD4  EE20 F004          	lfsr	2,4
 17498  012AD8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17499  012ADA  26D9               	addwf	fsr2l,f,c
 17500  012ADC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17501  012ADE  22DA               	addwfc	fsr2h,f,c
 17502  012AE0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17503  012AE4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17504  012AE8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17505  012AEC  0E00               	movlw	0
 17506  012AEE  0100               	movlb	0	; () banked
 17507  012AF0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17508  012AF2  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17509                           
 17510                           ;Port.c: 413: }
 17511                           ;Port.c: 415: break;
 17512  012AF6  D0B0               	goto	l13287
 17513  012AF8                     l13271:
 17514                           
 17515                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17516  012AF8  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17517  012AFC  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17518  012B00  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17519  012B04  0E03               	movlw	3
 17520  012B06  0100               	movlb	0	; () banked
 17521  012B08  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17522  012B0A  EC8A  F0B9         	call	_Port_CheckQuadType	;wreg free
 17523  012B0E  0100               	movlb	0	; () banked
 17524  012B10  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17525  012B12  0100               	movlb	0	; () banked
 17526  012B14  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17527  012B16  A4D8               	btfss	status,2,c
 17528  012B18  0012               	return	
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;Port.c: 418: {
 17532                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17533  012B1A  0100               	movlb	0	; () banked
 17534  012B1C  EE20 F002          	lfsr	2,2
 17535  012B20  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17536  012B22  26D9               	addwf	fsr2l,f,c
 17537  012B24  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17538  012B26  22DA               	addwfc	fsr2h,f,c
 17539  012B28  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17540  012B2C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17541  012B30  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17542  012B34  0E00               	movlw	0
 17543  012B36  0100               	movlb	0	; () banked
 17544  012B38  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17545  012B3A  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17546                           
 17547                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17548  012B3E  0100               	movlb	0	; () banked
 17549  012B40  EE20 F004          	lfsr	2,4
 17550  012B44  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17551  012B46  26D9               	addwf	fsr2l,f,c
 17552  012B48  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17553  012B4A  22DA               	addwfc	fsr2h,f,c
 17554  012B4C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17555  012B50  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17556  012B54  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17557  012B58  0E00               	movlw	0
 17558  012B5A  0100               	movlb	0	; () banked
 17559  012B5C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17560  012B5E  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17561                           
 17562                           ;Port.c: 424: }
 17563  012B62  D07A               	goto	l13287
 17564  012B64                     l13275:
 17565                           
 17566                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17567  012B64  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17568  012B68  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17569  012B6C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17570  012B70  0E03               	movlw	3
 17571  012B72  0100               	movlb	0	; () banked
 17572  012B74  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17573  012B76  EC8A  F0B9         	call	_Port_CheckQuadType	;wreg free
 17574  012B7A  0100               	movlb	0	; () banked
 17575  012B7C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17576  012B7E  0100               	movlb	0	; () banked
 17577  012B80  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17578  012B82  A4D8               	btfss	status,2,c
 17579  012B84  0012               	return	
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;Port.c: 429: {
 17583                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17584  012B86  0100               	movlb	0	; () banked
 17585  012B88  EE20 F002          	lfsr	2,2
 17586  012B8C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17587  012B8E  26D9               	addwf	fsr2l,f,c
 17588  012B90  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17589  012B92  22DA               	addwfc	fsr2h,f,c
 17590  012B94  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17591  012B98  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17592  012B9C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17593  012BA0  0E0F               	movlw	15
 17594  012BA2  0100               	movlb	0	; () banked
 17595  012BA4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17596  012BA6  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17597                           
 17598                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 17599  012BAA  0100               	movlb	0	; () banked
 17600  012BAC  EE20 F004          	lfsr	2,4
 17601  012BB0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17602  012BB2  26D9               	addwf	fsr2l,f,c
 17603  012BB4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17604  012BB6  22DA               	addwfc	fsr2h,f,c
 17605  012BB8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17606  012BBC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17607  012BC0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17608  012BC4  0E0F               	movlw	15
 17609  012BC6  0100               	movlb	0	; () banked
 17610  012BC8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17611  012BCA  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17612                           
 17613                           ;Port.c: 435: }
 17614  012BCE  D044               	goto	l13287
 17615  012BD0                     l13279:
 17616                           
 17617                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17618  012BD0  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17619  012BD4  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17620  012BD8  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17621  012BDC  0E03               	movlw	3
 17622  012BDE  0100               	movlb	0	; () banked
 17623  012BE0  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17624  012BE2  EC8A  F0B9         	call	_Port_CheckQuadType	;wreg free
 17625  012BE6  0100               	movlb	0	; () banked
 17626  012BE8  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17627  012BEA  0100               	movlb	0	; () banked
 17628  012BEC  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17629  012BEE  A4D8               	btfss	status,2,c
 17630  012BF0  0012               	return	
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;Port.c: 440: {
 17634                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17635  012BF2  0100               	movlb	0	; () banked
 17636  012BF4  EE20 F002          	lfsr	2,2
 17637  012BF8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17638  012BFA  26D9               	addwf	fsr2l,f,c
 17639  012BFC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17640  012BFE  22DA               	addwfc	fsr2h,f,c
 17641  012C00  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17642  012C04  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17643  012C08  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17644  012C0C  0E00               	movlw	0
 17645  012C0E  0100               	movlb	0	; () banked
 17646  012C10  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17647  012C12  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17648                           
 17649                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17650  012C16  0100               	movlb	0	; () banked
 17651  012C18  EE20 F004          	lfsr	2,4
 17652  012C1C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17653  012C1E  26D9               	addwf	fsr2l,f,c
 17654  012C20  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17655  012C22  22DA               	addwfc	fsr2h,f,c
 17656  012C24  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17657  012C28  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17658  012C2C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17659  012C30  0E00               	movlw	0
 17660  012C32  0100               	movlb	0	; () banked
 17661  012C34  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17662  012C36  EC6C  F0BE         	call	_Byte_SetQuad	;wreg free
 17663                           
 17664                           ;Port.c: 446: }
 17665  012C3A  D00E               	goto	l13287
 17666  012C3C                     l13285:
 17667  012C3C  0100               	movlb	0	; () banked
 17668  012C3E  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 17669                           
 17670                           ; Switch size 1, requested type "space"
 17671                           ; Number of cases is 4, Range of values is 0 to 3
 17672                           ; switch strategies available:
 17673                           ; Name         Instructions Cycles
 17674                           ; simple_byte           13     7 (average)
 17675                           ;	Chosen strategy is simple_byte
 17676  012C40  0A00               	xorlw	0	; case 0
 17677  012C42  B4D8               	btfsc	status,2,c
 17678  012C44  D734               	goto	l13269
 17679  012C46  0A01               	xorlw	1	; case 1
 17680  012C48  B4D8               	btfsc	status,2,c
 17681  012C4A  D756               	goto	l13271
 17682  012C4C  0A03               	xorlw	3	; case 2
 17683  012C4E  B4D8               	btfsc	status,2,c
 17684  012C50  D789               	goto	l13275
 17685  012C52  0A01               	xorlw	1	; case 3
 17686  012C54  B4D8               	btfsc	status,2,c
 17687  012C56  D7BC               	goto	l13279
 17688  012C58                     l13287:
 17689                           
 17690                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 17691  012C58  0E08               	movlw	8
 17692  012C5A  0100               	movlb	0	; () banked
 17693  012C5C  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17694  012C5E  0100               	movlb	0	; () banked
 17695  012C60  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17696  012C62  0E00               	movlw	0
 17697  012C64  0100               	movlb	0	; () banked
 17698  012C66  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17699  012C68  0100               	movlb	0	; () banked
 17700  012C6A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17701  012C6C  0100               	movlb	0	; () banked
 17702  012C6E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17703  012C70  0D04               	mullw	4
 17704  012C72  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 17705  012C76  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17706  012C7A  EC81  F0BB         	call	_Word_SetPair	;wreg free
 17707                           
 17708                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 17709  012C7E  0E08               	movlw	8
 17710  012C80  0100               	movlb	0	; () banked
 17711  012C82  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17712  012C84  0100               	movlb	0	; () banked
 17713  012C86  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17714  012C88  0E00               	movlw	0
 17715  012C8A  0100               	movlb	0	; () banked
 17716  012C8C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17717  012C8E  0100               	movlb	0	; () banked
 17718  012C90  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17719  012C92  0100               	movlb	0	; () banked
 17720  012C94  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17721  012C96  0D04               	mullw	4
 17722  012C98  28F3               	incf	prodl,w,c
 17723  012C9A  0100               	movlb	0	; () banked
 17724  012C9C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17725  012C9E  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17726  012CA2  EC81  F0BB         	call	_Word_SetPair	;wreg free
 17727                           
 17728                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 17729  012CA6  0E08               	movlw	8
 17730  012CA8  0100               	movlb	0	; () banked
 17731  012CAA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17732  012CAC  0100               	movlb	0	; () banked
 17733  012CAE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17734  012CB0  0E00               	movlw	0
 17735  012CB2  0100               	movlb	0	; () banked
 17736  012CB4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17737  012CB6  0100               	movlb	0	; () banked
 17738  012CB8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17739  012CBA  0100               	movlb	0	; () banked
 17740  012CBC  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17741  012CBE  0D04               	mullw	4
 17742  012CC0  50F3               	movf	prodl,w,c
 17743  012CC2  0F02               	addlw	2
 17744  012CC4  0100               	movlb	0	; () banked
 17745  012CC6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17746  012CC8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17747  012CCC  EC81  F0BB         	call	_Word_SetPair	;wreg free
 17748                           
 17749                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 17750  012CD0  0E08               	movlw	8
 17751  012CD2  0100               	movlb	0	; () banked
 17752  012CD4  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17753  012CD6  0100               	movlb	0	; () banked
 17754  012CD8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17755  012CDA  0E00               	movlw	0
 17756  012CDC  0100               	movlb	0	; () banked
 17757  012CDE  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17758  012CE0  0100               	movlb	0	; () banked
 17759  012CE2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17760  012CE4  0100               	movlb	0	; () banked
 17761  012CE6  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17762  012CE8  0D04               	mullw	4
 17763  012CEA  50F3               	movf	prodl,w,c
 17764  012CEC  0F03               	addlw	3
 17765  012CEE  0100               	movlb	0	; () banked
 17766  012CF0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17767  012CF2  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17768  012CF6  EC81  F0BB         	call	_Word_SetPair	;wreg free
 17769  012CFA  0012               	return	
 17770  012CFC                     __end_of_Port_SetQuadType:
 17771                           	opt stack 0
 17772                           tosu	equ	0xFFF
 17773                           tosh	equ	0xFFE
 17774                           tosl	equ	0xFFD
 17775                           pclath	equ	0xFFA
 17776                           tblptru	equ	0xFF8
 17777                           tblptrh	equ	0xFF7
 17778                           tblptrl	equ	0xFF6
 17779                           tablat	equ	0xFF5
 17780                           prodh	equ	0xFF4
 17781                           prodl	equ	0xFF3
 17782                           intcon	equ	0xFF2
 17783                           postinc0	equ	0xFEE
 17784                           wreg	equ	0xFE8
 17785                           indf1	equ	0xFE7
 17786                           postdec1	equ	0xFE5
 17787                           fsr1h	equ	0xFE2
 17788                           fsr1l	equ	0xFE1
 17789                           indf2	equ	0xFDF
 17790                           postinc2	equ	0xFDE
 17791                           postdec2	equ	0xFDD
 17792                           plusw2	equ	0xFDB
 17793                           fsr2h	equ	0xFDA
 17794                           fsr2l	equ	0xFD9
 17795                           status	equ	0xFD8
 17796                           
 17797 ;; *************** function _Word_SetPair *****************
 17798 ;; Defined at:
 17799 ;;		line 149 in file "Library/Types.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;  pInput          2   15[BANK0 ] PTR struct Word
 17802 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17803 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17804 ;;  pPair           1   17[BANK0 ] unsigned char 
 17805 ;;  pValue          1   18[BANK0 ] unsigned char 
 17806 ;; Auto vars:     Size  Location     Type
 17807 ;;		None
 17808 ;; Return value:  Size  Location     Type
 17809 ;;                  1    wreg      void 
 17810 ;; Registers used:
 17811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17812 ;; Tracked objects:
 17813 ;;		On entry : 0/0
 17814 ;;		On exit  : 0/0
 17815 ;;		Unchanged: 0/0
 17816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17817 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17820 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17821 ;;Total ram usage:        4 bytes
 17822 ;; Hardware stack levels used:    1
 17823 ;; Hardware stack levels required when called:    9
 17824 ;; This function calls:
 17825 ;;		_Byte_SetPair
 17826 ;; This function is called by:
 17827 ;;		_Port_SetPinType
 17828 ;;		_Port_SetQuadType
 17829 ;;		_Port_SetType
 17830 ;;		_Port_SetPairType
 17831 ;;		_PortProperty_Init
 17832 ;; This function uses a non-reentrant model
 17833 ;;
 17834                           
 17835                           	psect	text88
 17836  017702                     __ptext88:
 17837                           	opt stack 0
 17838  017702                     _Word_SetPair:
 17839                           	opt stack 18
 17840                           
 17841                           ;Types.c: 151: if (pPair >= 4)
 17842                           
 17843                           ;incstack = 0
 17844  017702  0E03               	movlw	3
 17845  017704  0100               	movlb	0	; () banked
 17846  017706  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17847  017708  D014               	goto	l13045
 17848                           
 17849                           ; BSR set to: 0
 17850                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17851  01770A  0E01               	movlw	1
 17852  01770C  0100               	movlb	0	; () banked
 17853  01770E  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 17854  017710  0100               	movlb	0	; () banked
 17855  017712  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 17856  017714  0E00               	movlw	0
 17857  017716  0100               	movlb	0	; () banked
 17858  017718  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17859  01771A  0100               	movlb	0	; () banked
 17860  01771C  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17861  01771E  0100               	movlb	0	; () banked
 17862  017720  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 17863  017722  0FFC               	addlw	252
 17864  017724  0100               	movlb	0	; () banked
 17865  017726  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 17866  017728  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17867  01772C  EC5B  F0BE         	call	_Byte_SetPair	;wreg free
 17868  017730  0012               	return	
 17869  017732                     l13045:
 17870                           
 17871                           ;Types.c: 153: else
 17872                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17873  017732  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17874  017736  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17875  01773A  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17876  01773E  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17877  017742  EC5B  F0BE         	call	_Byte_SetPair	;wreg free
 17878  017746  0012               	return	
 17879  017748                     __end_of_Word_SetPair:
 17880                           	opt stack 0
 17881                           tosu	equ	0xFFF
 17882                           tosh	equ	0xFFE
 17883                           tosl	equ	0xFFD
 17884                           pclath	equ	0xFFA
 17885                           tblptru	equ	0xFF8
 17886                           tblptrh	equ	0xFF7
 17887                           tblptrl	equ	0xFF6
 17888                           tablat	equ	0xFF5
 17889                           prodh	equ	0xFF4
 17890                           prodl	equ	0xFF3
 17891                           intcon	equ	0xFF2
 17892                           postinc0	equ	0xFEE
 17893                           wreg	equ	0xFE8
 17894                           indf1	equ	0xFE7
 17895                           postdec1	equ	0xFE5
 17896                           fsr1h	equ	0xFE2
 17897                           fsr1l	equ	0xFE1
 17898                           indf2	equ	0xFDF
 17899                           postinc2	equ	0xFDE
 17900                           postdec2	equ	0xFDD
 17901                           plusw2	equ	0xFDB
 17902                           fsr2h	equ	0xFDA
 17903                           fsr2l	equ	0xFD9
 17904                           status	equ	0xFD8
 17905                           
 17906 ;; *************** function _Byte_SetPair *****************
 17907 ;; Defined at:
 17908 ;;		line 83 in file "Library/Types.c"
 17909 ;; Parameters:    Size  Location     Type
 17910 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17911 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17912 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17913 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17914 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17915 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17916 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17917 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17918 ;;		 -> NULL(0), 
 17919 ;;  pPair           1   13[BANK0 ] unsigned char 
 17920 ;;  pValue          1   14[BANK0 ] unsigned char 
 17921 ;; Auto vars:     Size  Location     Type
 17922 ;;		None
 17923 ;; Return value:  Size  Location     Type
 17924 ;;                  1    wreg      void 
 17925 ;; Registers used:
 17926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17927 ;; Tracked objects:
 17928 ;;		On entry : 0/0
 17929 ;;		On exit  : 0/0
 17930 ;;		Unchanged: 0/0
 17931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17932 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17935 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17936 ;;Total ram usage:        4 bytes
 17937 ;; Hardware stack levels used:    1
 17938 ;; Hardware stack levels required when called:    8
 17939 ;; This function calls:
 17940 ;;		_Byte_SetZone
 17941 ;; This function is called by:
 17942 ;;		_Word_SetPair
 17943 ;;		_Port_SetPairType
 17944 ;;		_Port_SetPair
 17945 ;; This function uses a non-reentrant model
 17946 ;;
 17947                           
 17948                           	psect	text89
 17949  017CB6                     __ptext89:
 17950                           	opt stack 0
 17951  017CB6                     _Byte_SetPair:
 17952                           	opt stack 18
 17953                           
 17954                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17955                           
 17956                           ;incstack = 0
 17957  017CB6  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17958  017CBA  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17959  017CBE  0E04               	movlw	4
 17960  017CC0  0100               	movlb	0	; () banked
 17961  017CC2  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 17962  017CC4  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17963  017CC8  0E02               	movlw	2
 17964  017CCA  0100               	movlb	0	; () banked
 17965  017CCC  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17966  017CCE  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17967  017CD2  EC00  F0AE         	call	_Byte_SetZone	;wreg free
 17968  017CD6  0012               	return		;funcret
 17969  017CD8                     __end_of_Byte_SetPair:
 17970                           	opt stack 0
 17971                           tosu	equ	0xFFF
 17972                           tosh	equ	0xFFE
 17973                           tosl	equ	0xFFD
 17974                           pclath	equ	0xFFA
 17975                           tblptru	equ	0xFF8
 17976                           tblptrh	equ	0xFF7
 17977                           tblptrl	equ	0xFF6
 17978                           tablat	equ	0xFF5
 17979                           prodh	equ	0xFF4
 17980                           prodl	equ	0xFF3
 17981                           intcon	equ	0xFF2
 17982                           postinc0	equ	0xFEE
 17983                           wreg	equ	0xFE8
 17984                           indf1	equ	0xFE7
 17985                           postdec1	equ	0xFE5
 17986                           fsr1h	equ	0xFE2
 17987                           fsr1l	equ	0xFE1
 17988                           indf2	equ	0xFDF
 17989                           postinc2	equ	0xFDE
 17990                           postdec2	equ	0xFDD
 17991                           plusw2	equ	0xFDB
 17992                           fsr2h	equ	0xFDA
 17993                           fsr2l	equ	0xFD9
 17994                           status	equ	0xFD8
 17995                           
 17996 ;; *************** function _Port_CheckQuadType *****************
 17997 ;; Defined at:
 17998 ;;		line 126 in file "Library/Port.c"
 17999 ;; Parameters:    Size  Location     Type
 18000 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 18001 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18002 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18003 ;;  pQuad           1   49[BANK0 ] enum E6776
 18004 ;;  pDrive          1   50[BANK0 ] enum E6469
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;  Output          1   53[BANK0 ] enum E6475
 18007 ;;  Pair2           1   52[BANK0 ] enum E6760
 18008 ;;  Pair1           1   51[BANK0 ] enum E6760
 18009 ;; Return value:  Size  Location     Type
 18010 ;;                  1    wreg      enum E6475
 18011 ;; Registers used:
 18012 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18018 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;Total ram usage:        7 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:   12
 18025 ;; This function calls:
 18026 ;;		_Port_CheckPairType
 18027 ;; This function is called by:
 18028 ;;		_Port_CheckPortType
 18029 ;;		_Port_SetQuadType
 18030 ;; This function uses a non-reentrant model
 18031 ;;
 18032                           
 18033                           	psect	text90
 18034  017314                     __ptext90:
 18035                           	opt stack 0
 18036  017314                     _Port_CheckQuadType:
 18037                           	opt stack 14
 18038                           
 18039                           ;Port.c: 128: ePinError Output = ePinErrorState;
 18040                           
 18041                           ;incstack = 0
 18042  017314  0E05               	movlw	5
 18043  017316  0100               	movlb	0	; () banked
 18044  017318  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18045                           
 18046                           ; BSR set to: 0
 18047                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 18048  01731A  0100               	movlb	0	; () banked
 18049  01731C  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18050  01731E  0D02               	mullw	2
 18051  017320  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 18052                           
 18053                           ; BSR set to: 0
 18054                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 18055  017324  0100               	movlb	0	; () banked
 18056  017326  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18057  017328  0D02               	mullw	2
 18058  01732A  28F3               	incf	prodl,w,c
 18059  01732C  0100               	movlb	0	; () banked
 18060  01732E  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 18064  017330  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18065  017334  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18066  017338  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 18067  01733C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18068  017340  ECFB  F0B7         	call	_Port_CheckPairType	;wreg free
 18069  017344  0100               	movlb	0	; () banked
 18070  017346  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18071  017348  0100               	movlb	0	; () banked
 18072  01734A  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18073  01734C  A4D8               	btfss	status,2,c
 18074  01734E  D00C               	goto	l13037
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18078  017350  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18079  017354  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18080  017358  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18081  01735C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18082  017360  ECFB  F0B7         	call	_Port_CheckPairType	;wreg free
 18083  017364  0100               	movlb	0	; () banked
 18084  017366  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18085  017368                     l13037:
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;Port.c: 136: return Output;
 18089  017368  0100               	movlb	0	; () banked
 18090  01736A  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18091  01736C  0012               	return	
 18092  01736E                     __end_of_Port_CheckQuadType:
 18093                           	opt stack 0
 18094                           tosu	equ	0xFFF
 18095                           tosh	equ	0xFFE
 18096                           tosl	equ	0xFFD
 18097                           pclath	equ	0xFFA
 18098                           tblptru	equ	0xFF8
 18099                           tblptrh	equ	0xFF7
 18100                           tblptrl	equ	0xFF6
 18101                           tablat	equ	0xFF5
 18102                           prodh	equ	0xFF4
 18103                           prodl	equ	0xFF3
 18104                           intcon	equ	0xFF2
 18105                           postinc0	equ	0xFEE
 18106                           wreg	equ	0xFE8
 18107                           indf1	equ	0xFE7
 18108                           postdec1	equ	0xFE5
 18109                           fsr1h	equ	0xFE2
 18110                           fsr1l	equ	0xFE1
 18111                           indf2	equ	0xFDF
 18112                           postinc2	equ	0xFDE
 18113                           postdec2	equ	0xFDD
 18114                           plusw2	equ	0xFDB
 18115                           fsr2h	equ	0xFDA
 18116                           fsr2l	equ	0xFD9
 18117                           status	equ	0xFD8
 18118                           
 18119 ;; *************** function _Port_CheckPairType *****************
 18120 ;; Defined at:
 18121 ;;		line 112 in file "Library/Port.c"
 18122 ;; Parameters:    Size  Location     Type
 18123 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18124 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18125 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18126 ;;  pPair           1   40[BANK0 ] enum E6760
 18127 ;;  pDrive          1   41[BANK0 ] enum E6469
 18128 ;; Auto vars:     Size  Location     Type
 18129 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18130 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18131 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18132 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18133 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18134 ;;  Output          1   44[BANK0 ] enum E6475
 18135 ;;  Pin2            1   43[BANK0 ] enum E6750
 18136 ;;  Pin1            1   42[BANK0 ] enum E6750
 18137 ;; Return value:  Size  Location     Type
 18138 ;;                  1    wreg      enum E6475
 18139 ;; Registers used:
 18140 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18141 ;; Tracked objects:
 18142 ;;		On entry : 0/0
 18143 ;;		On exit  : 0/0
 18144 ;;		Unchanged: 0/0
 18145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18146 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18147 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18149 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18150 ;;Total ram usage:        9 bytes
 18151 ;; Hardware stack levels used:    1
 18152 ;; Hardware stack levels required when called:   11
 18153 ;; This function calls:
 18154 ;;		_PortProperty_Valid
 18155 ;; This function is called by:
 18156 ;;		_Port_CheckQuadType
 18157 ;;		_Port_SetPairType
 18158 ;; This function uses a non-reentrant model
 18159 ;;
 18160                           
 18161                           	psect	text91
 18162  016FF6                     __ptext91:
 18163                           	opt stack 0
 18164  016FF6                     _Port_CheckPairType:
 18165                           	opt stack 14
 18166                           
 18167                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;incstack = 0
 18171  016FF6  0E05               	movlw	5
 18172  016FF8  0100               	movlb	0	; () banked
 18173  016FFA  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18174                           
 18175                           ; BSR set to: 0
 18176                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18177  016FFC  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18178  017000  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18179  017004  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 18180  017008  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 18181                           
 18182                           ; BSR set to: 0
 18183                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18184  01700C  0100               	movlb	0	; () banked
 18185  01700E  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18186  017010  0D02               	mullw	2
 18187  017012  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 18188                           
 18189                           ; BSR set to: 0
 18190                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18191  017016  0100               	movlb	0	; () banked
 18192  017018  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18193  01701A  0D02               	mullw	2
 18194  01701C  28F3               	incf	prodl,w,c
 18195  01701E  0100               	movlb	0	; () banked
 18196  017020  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18197                           
 18198                           ; BSR set to: 0
 18199                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18200  017022  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18201  017026  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18202  01702A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18203  01702E  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18204  017032  EC47  F0B5         	call	_PortProperty_Valid	;wreg free
 18205  017036  0100               	movlb	0	; () banked
 18206  017038  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18207  01703A  0100               	movlb	0	; () banked
 18208  01703C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18209  01703E  A4D8               	btfss	status,2,c
 18210  017040  D00C               	goto	l12623
 18211                           
 18212                           ; BSR set to: 0
 18213                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18214  017042  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18215  017046  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18216  01704A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18217  01704E  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18218  017052  EC47  F0B5         	call	_PortProperty_Valid	;wreg free
 18219  017056  0100               	movlb	0	; () banked
 18220  017058  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18221  01705A                     l12623:
 18222                           
 18223                           ; BSR set to: 0
 18224                           ;Port.c: 124: return Output;
 18225  01705A  0100               	movlb	0	; () banked
 18226  01705C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18227  01705E  0012               	return	
 18228  017060                     __end_of_Port_CheckPairType:
 18229                           	opt stack 0
 18230                           tosu	equ	0xFFF
 18231                           tosh	equ	0xFFE
 18232                           tosl	equ	0xFFD
 18233                           pclath	equ	0xFFA
 18234                           tblptru	equ	0xFF8
 18235                           tblptrh	equ	0xFF7
 18236                           tblptrl	equ	0xFF6
 18237                           tablat	equ	0xFF5
 18238                           prodh	equ	0xFF4
 18239                           prodl	equ	0xFF3
 18240                           intcon	equ	0xFF2
 18241                           postinc0	equ	0xFEE
 18242                           wreg	equ	0xFE8
 18243                           indf1	equ	0xFE7
 18244                           postdec1	equ	0xFE5
 18245                           fsr1h	equ	0xFE2
 18246                           fsr1l	equ	0xFE1
 18247                           indf2	equ	0xFDF
 18248                           postinc2	equ	0xFDE
 18249                           postdec2	equ	0xFDD
 18250                           plusw2	equ	0xFDB
 18251                           fsr2h	equ	0xFDA
 18252                           fsr2l	equ	0xFD9
 18253                           status	equ	0xFD8
 18254                           
 18255 ;; *************** function _PortProperty_Valid *****************
 18256 ;; Defined at:
 18257 ;;		line 220 in file "Library/Types.c"
 18258 ;; Parameters:    Size  Location     Type
 18259 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18260 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18261 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18262 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18263 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18264 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18265 ;;  pPin            1   18[BANK0 ] unsigned char 
 18266 ;; Auto vars:     Size  Location     Type
 18267 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18268 ;;  Pair            1   37[BANK0 ] enum E6469
 18269 ;; Return value:  Size  Location     Type
 18270 ;;                  1    wreg      enum E6475
 18271 ;; Registers used:
 18272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18273 ;; Tracked objects:
 18274 ;;		On entry : 0/0
 18275 ;;		On exit  : 0/0
 18276 ;;		Unchanged: 0/0
 18277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18278 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18279 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18281 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18282 ;;Total ram usage:       23 bytes
 18283 ;; Hardware stack levels used:    1
 18284 ;; Hardware stack levels required when called:   10
 18285 ;; This function calls:
 18286 ;;		_Word_GetPair
 18287 ;; This function is called by:
 18288 ;;		_Port_CheckPairType
 18289 ;;		_Port_SetPinType
 18290 ;; This function uses a non-reentrant model
 18291 ;;
 18292                           
 18293                           	psect	text92
 18294  016A8E                     __ptext92:
 18295                           	opt stack 0
 18296  016A8E                     _PortProperty_Valid:
 18297                           	opt stack 17
 18298                           
 18299                           ;Types.c: 222: ePinDrive Pair;
 18300                           ;Types.c: 223: const ePinError Errors[4][4] =
 18301                           ;Types.c: 224: {
 18302                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18303                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18304                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18305                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18306                           ;Types.c: 230: };
 18307                           
 18308                           ; BSR set to: 0
 18309                           ;incstack = 0
 18310  016A8E  0EAD               	movlw	low PortProperty_Valid@F6830
 18311  016A90  6EF6               	movwf	tblptrl,c
 18312  016A92                     	if	1	;There is more than 1 active tblptr byte
 18313  016A92  0EFC               	movlw	high PortProperty_Valid@F6830
 18314  016A94  6EF7               	movwf	tblptrh,c
 18315  016A96                     	endif
 18316  016A96                     	if	1	;There are 3 active tblptr bytes
 18317  016A96  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 18318  016A98  6EF8               	movwf	tblptru,c
 18319  016A9A                     	endif
 18320  016A9A  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 18321  016A9E  0E0F               	movlw	15
 18322  016AA0                     u10210:
 18323  016AA0  0009               	tblrd		*+
 18324  016AA2  CFF5 FFDE          	movff	tablat,postinc2
 18325  016AA6  06E8               	decf	wreg,f,c
 18326  016AA8  E2FB               	bc	u10210
 18327                           
 18328                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18329  016AAA  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18330  016AAE  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18331  016AB2  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18332  016AB6  EC48  F0BC         	call	_Word_GetPair	;wreg free
 18333  016ABA  0100               	movlb	0	; () banked
 18334  016ABC  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18338  016ABE  0E04               	movlw	4
 18339  016AC0  0100               	movlb	0	; () banked
 18340  016AC2  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18341  016AC4  D020               	goto	l12563
 18342                           
 18343                           ; BSR set to: 0
 18344  016AC6  0E04               	movlw	4
 18345  016AC8  0100               	movlb	0	; () banked
 18346  016ACA  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18347  016ACC  D01C               	goto	l12563
 18348                           
 18349                           ; BSR set to: 0
 18350                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18351  016ACE  0100               	movlb	0	; () banked
 18352  016AD0  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 18353  016AD2  0D04               	mullw	4
 18354  016AD4  0E75               	movlw	low PortProperty_Valid@Errors
 18355  016AD6  0100               	movlb	0	; () banked
 18356  016AD8  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 18357  016ADA  0E00               	movlw	high PortProperty_Valid@Errors
 18358  016ADC  0100               	movlb	0	; () banked
 18359  016ADE  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 18360  016AE0  50F3               	movf	prodl,w,c
 18361  016AE2  0100               	movlb	0	; () banked
 18362  016AE4  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 18363  016AE6  50F4               	movf	prodh,w,c
 18364  016AE8  0100               	movlb	0	; () banked
 18365  016AEA  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 18366  016AEC  0100               	movlb	0	; () banked
 18367  016AEE  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 18368  016AF0  0D01               	mullw	1
 18369  016AF2  50F3               	movf	prodl,w,c
 18370  016AF4  0100               	movlb	0	; () banked
 18371  016AF6  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 18372  016AF8  6ED9               	movwf	fsr2l,c
 18373  016AFA  50F4               	movf	prodh,w,c
 18374  016AFC  0100               	movlb	0	; () banked
 18375  016AFE  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 18376  016B00  6EDA               	movwf	fsr2h,c
 18377  016B02  50DF               	movf	indf2,w,c
 18378                           
 18379                           ; BSR set to: 0
 18380  016B04  0012               	return	
 18381  016B06                     l12563:
 18382                           
 18383                           ; BSR set to: 0
 18384                           ;Types.c: 237: return ePinErrorState;
 18385  016B06  0E05               	movlw	5
 18386  016B08  0012               	return	
 18387  016B0A                     __end_of_PortProperty_Valid:
 18388                           	opt stack 0
 18389                           tosu	equ	0xFFF
 18390                           tosh	equ	0xFFE
 18391                           tosl	equ	0xFFD
 18392                           pclath	equ	0xFFA
 18393                           tblptru	equ	0xFF8
 18394                           tblptrh	equ	0xFF7
 18395                           tblptrl	equ	0xFF6
 18396                           tablat	equ	0xFF5
 18397                           prodh	equ	0xFF4
 18398                           prodl	equ	0xFF3
 18399                           intcon	equ	0xFF2
 18400                           postinc0	equ	0xFEE
 18401                           wreg	equ	0xFE8
 18402                           indf1	equ	0xFE7
 18403                           postdec1	equ	0xFE5
 18404                           fsr1h	equ	0xFE2
 18405                           fsr1l	equ	0xFE1
 18406                           indf2	equ	0xFDF
 18407                           postinc2	equ	0xFDE
 18408                           postdec2	equ	0xFDD
 18409                           plusw2	equ	0xFDB
 18410                           fsr2h	equ	0xFDA
 18411                           fsr2l	equ	0xFD9
 18412                           status	equ	0xFD8
 18413                           
 18414 ;; *************** function _Word_GetPair *****************
 18415 ;; Defined at:
 18416 ;;		line 156 in file "Library/Types.c"
 18417 ;; Parameters:    Size  Location     Type
 18418 ;;  pInput          2   12[BANK0 ] PTR struct Word
 18419 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18420 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18421 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18422 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18423 ;;  pPair           1   14[BANK0 ] unsigned char 
 18424 ;; Auto vars:     Size  Location     Type
 18425 ;;		None
 18426 ;; Return value:  Size  Location     Type
 18427 ;;                  1    wreg      unsigned char 
 18428 ;; Registers used:
 18429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18430 ;; Tracked objects:
 18431 ;;		On entry : 0/0
 18432 ;;		On exit  : 0/0
 18433 ;;		Unchanged: 0/0
 18434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18435 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18439 ;;Total ram usage:        3 bytes
 18440 ;; Hardware stack levels used:    1
 18441 ;; Hardware stack levels required when called:    9
 18442 ;; This function calls:
 18443 ;;		_Byte_GetPair
 18444 ;; This function is called by:
 18445 ;;		_Port_Init
 18446 ;;		_Port_SetPin
 18447 ;;		_Port_Set
 18448 ;;		_PortProperty_Valid
 18449 ;;		_Port_SetPair
 18450 ;;		_Port_SetQuad
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           	psect	text93
 18455  017890                     __ptext93:
 18456                           	opt stack 0
 18457  017890                     _Word_GetPair:
 18458                           	opt stack 14
 18459                           
 18460                           ;Types.c: 158: if (pPair >= 4)
 18461                           
 18462                           ; BSR set to: 0
 18463                           ;incstack = 0
 18464  017890  0E03               	movlw	3
 18465  017892  0100               	movlb	0	; () banked
 18466  017894  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 18467  017896  D012               	goto	l12547
 18468                           
 18469                           ; BSR set to: 0
 18470                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 18471  017898  0E01               	movlw	1
 18472  01789A  0100               	movlb	0	; () banked
 18473  01789C  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 18474  01789E  0100               	movlb	0	; () banked
 18475  0178A0  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 18476  0178A2  0E00               	movlw	0
 18477  0178A4  0100               	movlb	0	; () banked
 18478  0178A6  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 18479  0178A8  0100               	movlb	0	; () banked
 18480  0178AA  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 18481  0178AC  0100               	movlb	0	; () banked
 18482  0178AE  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 18483  0178B0  0FFC               	addlw	252
 18484  0178B2  0100               	movlb	0	; () banked
 18485  0178B4  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 18486  0178B6  ECDA  F0BE         	call	_Byte_GetPair	;wreg free
 18487  0178BA  0012               	return	
 18488  0178BC                     l12547:
 18489                           
 18490                           ;Types.c: 160: else
 18491                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 18492  0178BC  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 18493  0178C0  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 18494  0178C4  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 18495  0178C8  ECDA  F0BE         	call	_Byte_GetPair	;wreg free
 18496  0178CC  0012               	return	
 18497  0178CE                     __end_of_Word_GetPair:
 18498                           	opt stack 0
 18499                           tosu	equ	0xFFF
 18500                           tosh	equ	0xFFE
 18501                           tosl	equ	0xFFD
 18502                           pclath	equ	0xFFA
 18503                           tblptru	equ	0xFF8
 18504                           tblptrh	equ	0xFF7
 18505                           tblptrl	equ	0xFF6
 18506                           tablat	equ	0xFF5
 18507                           prodh	equ	0xFF4
 18508                           prodl	equ	0xFF3
 18509                           intcon	equ	0xFF2
 18510                           postinc0	equ	0xFEE
 18511                           wreg	equ	0xFE8
 18512                           indf1	equ	0xFE7
 18513                           postdec1	equ	0xFE5
 18514                           fsr1h	equ	0xFE2
 18515                           fsr1l	equ	0xFE1
 18516                           indf2	equ	0xFDF
 18517                           postinc2	equ	0xFDE
 18518                           postdec2	equ	0xFDD
 18519                           plusw2	equ	0xFDB
 18520                           fsr2h	equ	0xFDA
 18521                           fsr2l	equ	0xFD9
 18522                           status	equ	0xFD8
 18523                           
 18524 ;; *************** function _Byte_GetPair *****************
 18525 ;; Defined at:
 18526 ;;		line 87 in file "Library/Types.c"
 18527 ;; Parameters:    Size  Location     Type
 18528 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 18529 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18530 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18531 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18532 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18533 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18534 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18535 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18536 ;;		 -> NULL(0), 
 18537 ;;  pPair           1   11[BANK0 ] unsigned char 
 18538 ;; Auto vars:     Size  Location     Type
 18539 ;;		None
 18540 ;; Return value:  Size  Location     Type
 18541 ;;                  1    wreg      unsigned char 
 18542 ;; Registers used:
 18543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18544 ;; Tracked objects:
 18545 ;;		On entry : 0/0
 18546 ;;		On exit  : 0/0
 18547 ;;		Unchanged: 0/0
 18548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;Total ram usage:        3 bytes
 18554 ;; Hardware stack levels used:    1
 18555 ;; Hardware stack levels required when called:    8
 18556 ;; This function calls:
 18557 ;;		_Byte_GetZone
 18558 ;; This function is called by:
 18559 ;;		_Word_GetPair
 18560 ;; This function uses a non-reentrant model
 18561 ;;
 18562                           
 18563                           	psect	text94
 18564  017DB4                     __ptext94:
 18565                           	opt stack 0
 18566  017DB4                     _Byte_GetPair:
 18567                           	opt stack 14
 18568                           
 18569                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 18570                           
 18571                           ;incstack = 0
 18572  017DB4  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 18573  017DB8  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 18574  017DBC  0E04               	movlw	4
 18575  017DBE  0100               	movlb	0	; () banked
 18576  017DC0  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 18577  017DC2  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 18578  017DC6  0E02               	movlw	2
 18579  017DC8  0100               	movlb	0	; () banked
 18580  017DCA  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 18581  017DCC  ECF9  F0B1         	call	_Byte_GetZone	;wreg free
 18582  017DD0  0012               	return	
 18583  017DD2                     __end_of_Byte_GetPair:
 18584                           	opt stack 0
 18585                           tosu	equ	0xFFF
 18586                           tosh	equ	0xFFE
 18587                           tosl	equ	0xFFD
 18588                           pclath	equ	0xFFA
 18589                           tblptru	equ	0xFF8
 18590                           tblptrh	equ	0xFF7
 18591                           tblptrl	equ	0xFF6
 18592                           tablat	equ	0xFF5
 18593                           prodh	equ	0xFF4
 18594                           prodl	equ	0xFF3
 18595                           intcon	equ	0xFF2
 18596                           postinc0	equ	0xFEE
 18597                           wreg	equ	0xFE8
 18598                           indf1	equ	0xFE7
 18599                           postdec1	equ	0xFE5
 18600                           fsr1h	equ	0xFE2
 18601                           fsr1l	equ	0xFE1
 18602                           indf2	equ	0xFDF
 18603                           postinc2	equ	0xFDE
 18604                           postdec2	equ	0xFDD
 18605                           plusw2	equ	0xFDB
 18606                           fsr2h	equ	0xFDA
 18607                           fsr2l	equ	0xFD9
 18608                           status	equ	0xFD8
 18609                           
 18610 ;; *************** function _Byte_GetZone *****************
 18611 ;; Defined at:
 18612 ;;		line 64 in file "Library/Types.c"
 18613 ;; Parameters:    Size  Location     Type
 18614 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18615 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18616 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18617 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18618 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18619 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18620 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18621 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18622 ;;		 -> NULL(0), 
 18623 ;;  pMax            1    2[BANK0 ] unsigned char 
 18624 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18625 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18626 ;; Auto vars:     Size  Location     Type
 18627 ;;  Output          1    8[BANK0 ] unsigned char 
 18628 ;;  Offset          1    7[BANK0 ] unsigned char 
 18629 ;;  MASK            1    6[BANK0 ] unsigned char 
 18630 ;; Return value:  Size  Location     Type
 18631 ;;                  1    wreg      unsigned char 
 18632 ;; Registers used:
 18633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18634 ;; Tracked objects:
 18635 ;;		On entry : 0/0
 18636 ;;		On exit  : 0/0
 18637 ;;		Unchanged: 0/0
 18638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18639 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18640 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;Total ram usage:        9 bytes
 18644 ;; Hardware stack levels used:    1
 18645 ;; Hardware stack levels required when called:    7
 18646 ;; This function calls:
 18647 ;;		Nothing
 18648 ;; This function is called by:
 18649 ;;		_Byte_GetPair
 18650 ;;		_Byte_GetTriple
 18651 ;;		_Byte_GetQuad
 18652 ;; This function uses a non-reentrant model
 18653 ;;
 18654                           
 18655                           	psect	text95
 18656  0163F2                     __ptext95:
 18657                           	opt stack 0
 18658  0163F2                     _Byte_GetZone:
 18659                           	opt stack 14
 18660                           
 18661                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 18662                           
 18663                           ;incstack = 0
 18664  0163F2  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 18665  0163F6  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 18666  0163FA  0E00               	movlw	low (__mediumconst shr (0+16))
 18667  0163FC  6EF8               	movwf	tblptru,c
 18668  0163FE  0E0F               	movlw	(high __ramtop+-1)
 18669  016400  64F7               	cpfsgt	tblptrh,c
 18670  016402  D003               	bra	u10177
 18671  016404  0008               	tblrd		*
 18672  016406  50F5               	movf	tablat,w,c
 18673  016408  D005               	bra	u10170
 18674  01640A                     u10177:
 18675  01640A  CFF6 FFE9          	movff	tblptrl,fsr0l
 18676  01640E  CFF7 FFEA          	movff	tblptrh,fsr0h
 18677  016412  50EF               	movf	indf0,w,c
 18678  016414                     u10170:
 18679  016414  0100               	movlb	0	; () banked
 18680  016416  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 18681                           
 18682                           ; BSR set to: 0
 18683                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 18684  016418  0100               	movlb	0	; () banked
 18685  01641A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18686  01641C  0D01               	mullw	1
 18687  01641E  0EBD               	movlw	low _MASKS
 18688  016420  24F3               	addwf	prodl,w,c
 18689  016422  6EF6               	movwf	tblptrl,c
 18690  016424  0EFC               	movlw	high _MASKS
 18691  016426  20F4               	addwfc	prodh,w,c
 18692  016428  6EF7               	movwf	tblptrh,c
 18693  01642A                     	if	1	;There are 3 active tblptr bytes
 18694  01642A  6AF8               	clrf	tblptru,c
 18695  01642C  0E00               	movlw	low (__mediumconst shr (0+16))
 18696  01642E  22F8               	addwfc	tblptru,f,c
 18697  016430                     	endif
 18698  016430  0008               	tblrd		*
 18699  016432  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 18700                           
 18701                           ; BSR set to: 0
 18702                           ;Types.c: 68: UINT8 Offset = 0;
 18703  016436  0E00               	movlw	0
 18704  016438  0100               	movlb	0	; () banked
 18705  01643A  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 18706                           
 18707                           ;Types.c: 70: while (pChunk >= pMax)
 18708  01643C  D006               	goto	l12521
 18709  01643E                     l12517:
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;Types.c: 71: {
 18713                           ;Types.c: 72: pChunk -= pMax;
 18714  01643E  0100               	movlb	0	; () banked
 18715  016440  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18716  016442  0100               	movlb	0	; () banked
 18717  016444  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 18718                           
 18719                           ; BSR set to: 0
 18720                           ;Types.c: 73: Offset += 1;
 18721  016446  0100               	movlb	0	; () banked
 18722  016448  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 18723  01644A                     l12521:
 18724                           
 18725                           ; BSR set to: 0
 18726  01644A  0100               	movlb	0	; () banked
 18727  01644C  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18728  01644E  0100               	movlb	0	; () banked
 18729  016450  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 18730  016452  B0D8               	btfsc	status,0,c
 18731  016454  D7F4               	goto	l12517
 18732                           
 18733                           ; BSR set to: 0
 18734                           ;Types.c: 74: }
 18735                           ;Types.c: 75: pChunk *= pChunkSize;
 18736                           
 18737                           ; BSR set to: 0
 18738  016456  0100               	movlb	0	; () banked
 18739  016458  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18740  01645A  0100               	movlb	0	; () banked
 18741  01645C  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 18742  01645E  50F3               	movf	prodl,w,c
 18743  016460  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 18744                           
 18745                           ; BSR set to: 0
 18746                           ;Types.c: 76: pChunk += Offset;
 18747  016462  0100               	movlb	0	; () banked
 18748  016464  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 18749  016466  0100               	movlb	0	; () banked
 18750  016468  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;Types.c: 78: Output >>= pChunk;
 18754  01646A  0100               	movlb	0	; () banked
 18755  01646C  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 18756  01646E  0100               	movlb	0	; () banked
 18757  016470  6F65               	movwf	??_Byte_GetZone& (0+255),b
 18758  016472  D003               	goto	u10190
 18759  016474                     u10195:
 18760  016474  0100               	movlb	0	; () banked
 18761  016476  90D8               	bcf	status,0,c
 18762  016478  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 18763  01647A                     u10190:
 18764  01647A  0100               	movlb	0	; () banked
 18765  01647C  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 18766  01647E  D7FA               	goto	u10195
 18767                           
 18768                           ;Types.c: 79: Output &= MASK;
 18769  016480  0100               	movlb	0	; () banked
 18770  016482  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 18771  016484  0100               	movlb	0	; () banked
 18772  016486  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 18773                           
 18774                           ; BSR set to: 0
 18775                           ;Types.c: 80: return Output;
 18776  016488  0100               	movlb	0	; () banked
 18777  01648A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 18778  01648C  0012               	return	
 18779  01648E                     __end_of_Byte_GetZone:
 18780                           	opt stack 0
 18781                           tosu	equ	0xFFF
 18782                           tosh	equ	0xFFE
 18783                           tosl	equ	0xFFD
 18784                           pclath	equ	0xFFA
 18785                           tblptru	equ	0xFF8
 18786                           tblptrh	equ	0xFF7
 18787                           tblptrl	equ	0xFF6
 18788                           tablat	equ	0xFF5
 18789                           prodh	equ	0xFF4
 18790                           prodl	equ	0xFF3
 18791                           intcon	equ	0xFF2
 18792                           indf0	equ	0xFEF
 18793                           postinc0	equ	0xFEE
 18794                           fsr0h	equ	0xFEA
 18795                           fsr0l	equ	0xFE9
 18796                           wreg	equ	0xFE8
 18797                           indf1	equ	0xFE7
 18798                           postdec1	equ	0xFE5
 18799                           fsr1h	equ	0xFE2
 18800                           fsr1l	equ	0xFE1
 18801                           indf2	equ	0xFDF
 18802                           postinc2	equ	0xFDE
 18803                           postdec2	equ	0xFDD
 18804                           plusw2	equ	0xFDB
 18805                           fsr2h	equ	0xFDA
 18806                           fsr2l	equ	0xFD9
 18807                           status	equ	0xFD8
 18808                           
 18809 ;; *************** function _Byte_SetQuad *****************
 18810 ;; Defined at:
 18811 ;;		line 101 in file "Library/Types.c"
 18812 ;; Parameters:    Size  Location     Type
 18813 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18814 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 18815 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18816 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18817 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18818 ;;		 -> NULL(0), 
 18819 ;;  pQuad           1   13[BANK0 ] unsigned char 
 18820 ;;  pValue          1   14[BANK0 ] unsigned char 
 18821 ;; Auto vars:     Size  Location     Type
 18822 ;;		None
 18823 ;; Return value:  Size  Location     Type
 18824 ;;                  1    wreg      void 
 18825 ;; Registers used:
 18826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;Total ram usage:        4 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; Hardware stack levels required when called:    8
 18839 ;; This function calls:
 18840 ;;		_Byte_SetZone
 18841 ;; This function is called by:
 18842 ;;		_Port_SetQuadType
 18843 ;;		_SPI_Init
 18844 ;;		_SPI_MinSpeed
 18845 ;;		_SPI_MaxSpeed
 18846 ;;		_Port_SetQuad
 18847 ;;		_Word_SetQuad
 18848 ;;		_I2C_Init
 18849 ;; This function uses a non-reentrant model
 18850 ;;
 18851                           
 18852                           	psect	text96
 18853  017CD8                     __ptext96:
 18854                           	opt stack 0
 18855  017CD8                     _Byte_SetQuad:
 18856                           	opt stack 19
 18857                           
 18858                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;incstack = 0
 18862  017CD8  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 18863  017CDC  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 18864  017CE0  0E02               	movlw	2
 18865  017CE2  0100               	movlb	0	; () banked
 18866  017CE4  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18867  017CE6  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 18868  017CEA  0E04               	movlw	4
 18869  017CEC  0100               	movlb	0	; () banked
 18870  017CEE  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18871  017CF0  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 18872  017CF4  EC00  F0AE         	call	_Byte_SetZone	;wreg free
 18873  017CF8  0012               	return		;funcret
 18874  017CFA                     __end_of_Byte_SetQuad:
 18875                           	opt stack 0
 18876                           tosu	equ	0xFFF
 18877                           tosh	equ	0xFFE
 18878                           tosl	equ	0xFFD
 18879                           pclath	equ	0xFFA
 18880                           tblptru	equ	0xFF8
 18881                           tblptrh	equ	0xFF7
 18882                           tblptrl	equ	0xFF6
 18883                           tablat	equ	0xFF5
 18884                           prodh	equ	0xFF4
 18885                           prodl	equ	0xFF3
 18886                           intcon	equ	0xFF2
 18887                           indf0	equ	0xFEF
 18888                           postinc0	equ	0xFEE
 18889                           fsr0h	equ	0xFEA
 18890                           fsr0l	equ	0xFE9
 18891                           wreg	equ	0xFE8
 18892                           indf1	equ	0xFE7
 18893                           postdec1	equ	0xFE5
 18894                           fsr1h	equ	0xFE2
 18895                           fsr1l	equ	0xFE1
 18896                           indf2	equ	0xFDF
 18897                           postinc2	equ	0xFDE
 18898                           postdec2	equ	0xFDD
 18899                           plusw2	equ	0xFDB
 18900                           fsr2h	equ	0xFDA
 18901                           fsr2l	equ	0xFD9
 18902                           status	equ	0xFD8
 18903                           
 18904 ;; *************** function _Byte_SetZone *****************
 18905 ;; Defined at:
 18906 ;;		line 47 in file "Library/Types.c"
 18907 ;; Parameters:    Size  Location     Type
 18908 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18909 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18910 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18911 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18912 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18913 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18914 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18915 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18916 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18917 ;;  pMax            1    2[BANK0 ] unsigned char 
 18918 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18919 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18920 ;;  pValue          1    5[BANK0 ] unsigned char 
 18921 ;; Auto vars:     Size  Location     Type
 18922 ;;  MASK            1   10[BANK0 ] unsigned char 
 18923 ;;  Offset          1    9[BANK0 ] unsigned char 
 18924 ;; Return value:  Size  Location     Type
 18925 ;;                  1    wreg      void 
 18926 ;; Registers used:
 18927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18933 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18936 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18937 ;;Total ram usage:       11 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    7
 18940 ;; This function calls:
 18941 ;;		Nothing
 18942 ;; This function is called by:
 18943 ;;		_Byte_SetPair
 18944 ;;		_Byte_SetQuad
 18945 ;;		_Byte_SetTriple
 18946 ;; This function uses a non-reentrant model
 18947 ;;
 18948                           
 18949                           	psect	text97
 18950  015C00                     __ptext97:
 18951                           	opt stack 0
 18952  015C00                     _Byte_SetZone:
 18953                           	opt stack 18
 18954                           
 18955                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18956                           
 18957                           ;incstack = 0
 18958  015C00  0100               	movlb	0	; () banked
 18959  015C02  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18960  015C04  0D01               	mullw	1
 18961  015C06  0EBD               	movlw	low _MASKS
 18962  015C08  24F3               	addwf	prodl,w,c
 18963  015C0A  6EF6               	movwf	tblptrl,c
 18964  015C0C  0EFC               	movlw	high _MASKS
 18965  015C0E  20F4               	addwfc	prodh,w,c
 18966  015C10  6EF7               	movwf	tblptrh,c
 18967  015C12                     	if	1	;There are 3 active tblptr bytes
 18968  015C12  6AF8               	clrf	tblptru,c
 18969  015C14  0E00               	movlw	low (__mediumconst shr (0+16))
 18970  015C16  22F8               	addwfc	tblptru,f,c
 18971  015C18                     	endif
 18972  015C18  0008               	tblrd		*
 18973  015C1A  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;Types.c: 50: UINT8 Offset = 0;
 18977  015C1E  0E00               	movlw	0
 18978  015C20  0100               	movlb	0	; () banked
 18979  015C22  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 18980                           
 18981                           ;Types.c: 52: while (pChunk >= pMax)
 18982  015C24  D006               	goto	l12581
 18983  015C26                     l12577:
 18984                           
 18985                           ; BSR set to: 0
 18986                           ;Types.c: 53: {
 18987                           ;Types.c: 54: pChunk -= pMax;
 18988  015C26  0100               	movlb	0	; () banked
 18989  015C28  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18990  015C2A  0100               	movlb	0	; () banked
 18991  015C2C  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18992                           
 18993                           ; BSR set to: 0
 18994                           ;Types.c: 55: Offset += 1;
 18995  015C2E  0100               	movlb	0	; () banked
 18996  015C30  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 18997  015C32                     l12581:
 18998                           
 18999                           ; BSR set to: 0
 19000  015C32  0100               	movlb	0	; () banked
 19001  015C34  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 19002  015C36  0100               	movlb	0	; () banked
 19003  015C38  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 19004  015C3A  B0D8               	btfsc	status,0,c
 19005  015C3C  D7F4               	goto	l12577
 19006                           
 19007                           ; BSR set to: 0
 19008                           ;Types.c: 56: }
 19009                           ;Types.c: 57: pChunk *= pChunkSize;
 19010                           
 19011                           ; BSR set to: 0
 19012  015C3E  0100               	movlb	0	; () banked
 19013  015C40  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19014  015C42  0100               	movlb	0	; () banked
 19015  015C44  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 19016  015C46  50F3               	movf	prodl,w,c
 19017  015C48  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;Types.c: 58: pChunk += Offset;
 19021  015C4A  0100               	movlb	0	; () banked
 19022  015C4C  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 19023  015C4E  0100               	movlb	0	; () banked
 19024  015C50  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 19025                           
 19026                           ; BSR set to: 0
 19027                           ;Types.c: 60: pValue &= MASK;
 19028  015C52  0100               	movlb	0	; () banked
 19029  015C54  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 19030  015C56  0100               	movlb	0	; () banked
 19031  015C58  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 19035  015C5A  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19036  015C5E  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 19037  015C62  0100               	movlb	0	; () banked
 19038  015C64  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 19039  015C66  D003               	goto	u10274
 19040  015C68                     u10275:
 19041  015C68  0100               	movlb	0	; () banked
 19042  015C6A  90D8               	bcf	status,0,c
 19043  015C6C  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19044  015C6E                     u10274:
 19045  015C6E  0100               	movlb	0	; () banked
 19046  015C70  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 19047  015C72  D7FA               	goto	u10275
 19048  015C74  0100               	movlb	0	; () banked
 19049  015C76  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19050  015C78  0AFF               	xorlw	255
 19051  015C7A  0100               	movlb	0	; () banked
 19052  015C7C  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 19053  015C7E  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19054  015C82  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19055  015C86  0100               	movlb	0	; () banked
 19056  015C88  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 19057  015C8A  16DF               	andwf	indf2,f,c
 19058                           
 19059                           ; BSR set to: 0
 19060                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 19061  015C8C  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19062  015C90  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 19063  015C94  0100               	movlb	0	; () banked
 19064  015C96  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 19065  015C98  D003               	goto	u10284
 19066  015C9A                     u10285:
 19067  015C9A  0100               	movlb	0	; () banked
 19068  015C9C  90D8               	bcf	status,0,c
 19069  015C9E  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19070  015CA0                     u10284:
 19071  015CA0  0100               	movlb	0	; () banked
 19072  015CA2  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 19073  015CA4  D7FA               	goto	u10285
 19074  015CA6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19075  015CAA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19076  015CAE  0100               	movlb	0	; () banked
 19077  015CB0  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19078  015CB2  12DF               	iorwf	indf2,f,c
 19079                           
 19080                           ; BSR set to: 0
 19081  015CB4  0012               	return		;funcret
 19082  015CB6                     __end_of_Byte_SetZone:
 19083                           	opt stack 0
 19084                           tosu	equ	0xFFF
 19085                           tosh	equ	0xFFE
 19086                           tosl	equ	0xFFD
 19087                           pclath	equ	0xFFA
 19088                           tblptru	equ	0xFF8
 19089                           tblptrh	equ	0xFF7
 19090                           tblptrl	equ	0xFF6
 19091                           tablat	equ	0xFF5
 19092                           prodh	equ	0xFF4
 19093                           prodl	equ	0xFF3
 19094                           intcon	equ	0xFF2
 19095                           indf0	equ	0xFEF
 19096                           postinc0	equ	0xFEE
 19097                           fsr0h	equ	0xFEA
 19098                           fsr0l	equ	0xFE9
 19099                           wreg	equ	0xFE8
 19100                           indf1	equ	0xFE7
 19101                           postdec1	equ	0xFE5
 19102                           fsr1h	equ	0xFE2
 19103                           fsr1l	equ	0xFE1
 19104                           indf2	equ	0xFDF
 19105                           postinc2	equ	0xFDE
 19106                           postdec2	equ	0xFDD
 19107                           plusw2	equ	0xFDB
 19108                           fsr2h	equ	0xFDA
 19109                           fsr2l	equ	0xFD9
 19110                           status	equ	0xFD8
 19111                           
 19112 ;; *************** function _FunctInitADC *****************
 19113 ;; Defined at:
 19114 ;;		line 31 in file "Functions.c"
 19115 ;; Parameters:    Size  Location     Type
 19116 ;;		None
 19117 ;; Auto vars:     Size  Location     Type
 19118 ;;		None
 19119 ;; Return value:  Size  Location     Type
 19120 ;;                  1    wreg      void 
 19121 ;; Registers used:
 19122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19123 ;; Tracked objects:
 19124 ;;		On entry : 0/0
 19125 ;;		On exit  : 0/0
 19126 ;;		Unchanged: 0/0
 19127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19132 ;;Total ram usage:        0 bytes
 19133 ;; Hardware stack levels used:    1
 19134 ;; Hardware stack levels required when called:   10
 19135 ;; This function calls:
 19136 ;;		_ADC_Init
 19137 ;;		_ADC_Sequence
 19138 ;; This function is called by:
 19139 ;;		_initialise
 19140 ;; This function uses a non-reentrant model
 19141 ;;
 19142                           
 19143                           	psect	text98
 19144  015D6A                     __ptext98:
 19145                           	opt stack 0
 19146  015D6A                     _FunctInitADC:
 19147                           	opt stack 19
 19148                           
 19149                           ;Functions.c: 33: ADC_Init(&ADC_AN0, eADC_Ch0);
 19150                           
 19151                           ; BSR set to: 0
 19152                           ;incstack = 0
 19153  015D6A  0EDF               	movlw	low _ADC_AN0
 19154  015D6C  0100               	movlb	0	; () banked
 19155  015D6E  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19156  015D70  0E01               	movlw	high _ADC_AN0
 19157  015D72  0100               	movlb	0	; () banked
 19158  015D74  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19159  015D76  0E00               	movlw	0
 19160  015D78  0100               	movlb	0	; () banked
 19161  015D7A  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19162  015D7C  EC85  F0B5         	call	_ADC_Init	;wreg free
 19163                           
 19164                           ;Functions.c: 34: ADC_Init(&ADC_AN1, eADC_Ch1);
 19165  015D80  0EDA               	movlw	low _ADC_AN1
 19166  015D82  0100               	movlb	0	; () banked
 19167  015D84  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19168  015D86  0E01               	movlw	high _ADC_AN1
 19169  015D88  0100               	movlb	0	; () banked
 19170  015D8A  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19171  015D8C  0E01               	movlw	1
 19172  015D8E  0100               	movlb	0	; () banked
 19173  015D90  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19174  015D92  EC85  F0B5         	call	_ADC_Init	;wreg free
 19175                           
 19176                           ;Functions.c: 35: ADC_Init(&ADC_AN2, eADC_Ch2);
 19177  015D96  0ED5               	movlw	low _ADC_AN2
 19178  015D98  0100               	movlb	0	; () banked
 19179  015D9A  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19180  015D9C  0E01               	movlw	high _ADC_AN2
 19181  015D9E  0100               	movlb	0	; () banked
 19182  015DA0  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19183  015DA2  0E02               	movlw	2
 19184  015DA4  0100               	movlb	0	; () banked
 19185  015DA6  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19186  015DA8  EC85  F0B5         	call	_ADC_Init	;wreg free
 19187                           
 19188                           ;Functions.c: 36: ADC_Init(&ADC_AN3, eADC_Ch3);
 19189  015DAC  0ED0               	movlw	low _ADC_AN3
 19190  015DAE  0100               	movlb	0	; () banked
 19191  015DB0  6F64               	movwf	ADC_Init@pInput& (0+255),b
 19192  015DB2  0E01               	movlw	high _ADC_AN3
 19193  015DB4  0100               	movlb	0	; () banked
 19194  015DB6  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 19195  015DB8  0E03               	movlw	3
 19196  015DBA  0100               	movlb	0	; () banked
 19197  015DBC  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 19198  015DBE  EC85  F0B5         	call	_ADC_Init	;wreg free
 19199                           
 19200                           ;Functions.c: 39: ADC_Sequence(&ADC_AN0, &ADC_AN1);
 19201  015DC2  0EDF               	movlw	low _ADC_AN0
 19202  015DC4  0100               	movlb	0	; () banked
 19203  015DC6  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 19204  015DC8  0E01               	movlw	high _ADC_AN0
 19205  015DCA  0100               	movlb	0	; () banked
 19206  015DCC  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 19207  015DCE  0EDA               	movlw	low _ADC_AN1
 19208  015DD0  0100               	movlb	0	; () banked
 19209  015DD2  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 19210  015DD4  0E01               	movlw	high _ADC_AN1
 19211  015DD6  0100               	movlb	0	; () banked
 19212  015DD8  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 19213  015DDA  ECA4  F0BB         	call	_ADC_Sequence	;wreg free
 19214                           
 19215                           ;Functions.c: 40: ADC_Sequence(&ADC_AN1, &ADC_AN2);
 19216  015DDE  0EDA               	movlw	low _ADC_AN1
 19217  015DE0  0100               	movlb	0	; () banked
 19218  015DE2  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 19219  015DE4  0E01               	movlw	high _ADC_AN1
 19220  015DE6  0100               	movlb	0	; () banked
 19221  015DE8  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 19222  015DEA  0ED5               	movlw	low _ADC_AN2
 19223  015DEC  0100               	movlb	0	; () banked
 19224  015DEE  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 19225  015DF0  0E01               	movlw	high _ADC_AN2
 19226  015DF2  0100               	movlb	0	; () banked
 19227  015DF4  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 19228  015DF6  ECA4  F0BB         	call	_ADC_Sequence	;wreg free
 19229                           
 19230                           ;Functions.c: 41: ADC_Sequence(&ADC_AN2, &ADC_AN3);
 19231  015DFA  0ED5               	movlw	low _ADC_AN2
 19232  015DFC  0100               	movlb	0	; () banked
 19233  015DFE  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 19234  015E00  0E01               	movlw	high _ADC_AN2
 19235  015E02  0100               	movlb	0	; () banked
 19236  015E04  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 19237  015E06  0ED0               	movlw	low _ADC_AN3
 19238  015E08  0100               	movlb	0	; () banked
 19239  015E0A  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 19240  015E0C  0E01               	movlw	high _ADC_AN3
 19241  015E0E  0100               	movlb	0	; () banked
 19242  015E10  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 19243  015E12  ECA4  F0BB         	call	_ADC_Sequence	;wreg free
 19244  015E16  0012               	return		;funcret
 19245  015E18                     __end_of_FunctInitADC:
 19246                           	opt stack 0
 19247                           tosu	equ	0xFFF
 19248                           tosh	equ	0xFFE
 19249                           tosl	equ	0xFFD
 19250                           pclath	equ	0xFFA
 19251                           tblptru	equ	0xFF8
 19252                           tblptrh	equ	0xFF7
 19253                           tblptrl	equ	0xFF6
 19254                           tablat	equ	0xFF5
 19255                           prodh	equ	0xFF4
 19256                           prodl	equ	0xFF3
 19257                           intcon	equ	0xFF2
 19258                           indf0	equ	0xFEF
 19259                           postinc0	equ	0xFEE
 19260                           fsr0h	equ	0xFEA
 19261                           fsr0l	equ	0xFE9
 19262                           wreg	equ	0xFE8
 19263                           indf1	equ	0xFE7
 19264                           postdec1	equ	0xFE5
 19265                           fsr1h	equ	0xFE2
 19266                           fsr1l	equ	0xFE1
 19267                           indf2	equ	0xFDF
 19268                           postinc2	equ	0xFDE
 19269                           postdec2	equ	0xFDD
 19270                           plusw2	equ	0xFDB
 19271                           fsr2h	equ	0xFDA
 19272                           fsr2l	equ	0xFD9
 19273                           status	equ	0xFD8
 19274                           
 19275 ;; *************** function _ADC_Sequence *****************
 19276 ;; Defined at:
 19277 ;;		line 101 in file "Library/ADC.c"
 19278 ;; Parameters:    Size  Location     Type
 19279 ;;  pItemA          2    0[BANK0 ] PTR struct ADC
 19280 ;;		 -> ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 19281 ;;  pItemB          2    2[BANK0 ] PTR struct ADC
 19282 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), 
 19283 ;; Auto vars:     Size  Location     Type
 19284 ;;		None
 19285 ;; Return value:  Size  Location     Type
 19286 ;;                  1    wreg      void 
 19287 ;; Registers used:
 19288 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19289 ;; Tracked objects:
 19290 ;;		On entry : 0/0
 19291 ;;		On exit  : 0/0
 19292 ;;		Unchanged: 0/0
 19293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19298 ;;Total ram usage:        4 bytes
 19299 ;; Hardware stack levels used:    1
 19300 ;; Hardware stack levels required when called:    7
 19301 ;; This function calls:
 19302 ;;		Nothing
 19303 ;; This function is called by:
 19304 ;;		_FunctInitADC
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           	psect	text99
 19309  017748                     __ptext99:
 19310                           	opt stack 0
 19311  017748                     _ADC_Sequence:
 19312                           	opt stack 21
 19313                           
 19314                           ;ADC.c: 103: if(pItemA==(void*)0)
 19315                           
 19316                           ;incstack = 0
 19317  017748  0100               	movlb	0	; () banked
 19318  01774A  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 19319  01774C  0100               	movlb	0	; () banked
 19320  01774E  1161               	iorwf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 19321  017750  B4D8               	btfsc	status,2,c
 19322  017752  0012               	return	
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;ADC.c: 105: if(pItemB==(void*)0)
 19326                           
 19327                           ; BSR set to: 0
 19328                           
 19329                           ; BSR set to: 0
 19330                           ;ADC.c: 104: return;
 19331  017754  0100               	movlb	0	; () banked
 19332  017756  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 19333  017758  0100               	movlb	0	; () banked
 19334  01775A  1163               	iorwf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 19335  01775C  B4D8               	btfsc	status,2,c
 19336  01775E  0012               	return	
 19337                           
 19338                           ; BSR set to: 0
 19339                           ;ADC.c: 109: pItemA->mNext = pItemB;
 19340                           
 19341                           ; BSR set to: 0
 19342                           
 19343                           ; BSR set to: 0
 19344                           ;ADC.c: 106: return;
 19345  017760  0100               	movlb	0	; () banked
 19346  017762  EE20 F003          	lfsr	2,3
 19347  017766  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 19348  017768  26D9               	addwf	fsr2l,f,c
 19349  01776A  5161               	movf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 19350  01776C  22DA               	addwfc	fsr2h,f,c
 19351  01776E  C062  FFDE         	movff	ADC_Sequence@pItemB,postinc2
 19352  017772  C063  FFDD         	movff	ADC_Sequence@pItemB+1,postdec2
 19353                           
 19354                           ;ADC.c: 110: pItemB->mNext = 0;
 19355  017776  0100               	movlb	0	; () banked
 19356  017778  EE20 F003          	lfsr	2,3
 19357  01777C  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 19358  01777E  26D9               	addwf	fsr2l,f,c
 19359  017780  5163               	movf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 19360  017782  22DA               	addwfc	fsr2h,f,c
 19361  017784  0E00               	movlw	0
 19362  017786  6EDE               	movwf	postinc2,c
 19363  017788  0E00               	movlw	0
 19364  01778A  6EDD               	movwf	postdec2,c
 19365                           
 19366                           ; BSR set to: 0
 19367  01778C  0012               	return		;funcret
 19368  01778E                     __end_of_ADC_Sequence:
 19369                           	opt stack 0
 19370                           tosu	equ	0xFFF
 19371                           tosh	equ	0xFFE
 19372                           tosl	equ	0xFFD
 19373                           pclath	equ	0xFFA
 19374                           tblptru	equ	0xFF8
 19375                           tblptrh	equ	0xFF7
 19376                           tblptrl	equ	0xFF6
 19377                           tablat	equ	0xFF5
 19378                           prodh	equ	0xFF4
 19379                           prodl	equ	0xFF3
 19380                           intcon	equ	0xFF2
 19381                           indf0	equ	0xFEF
 19382                           postinc0	equ	0xFEE
 19383                           fsr0h	equ	0xFEA
 19384                           fsr0l	equ	0xFE9
 19385                           wreg	equ	0xFE8
 19386                           indf1	equ	0xFE7
 19387                           postdec1	equ	0xFE5
 19388                           fsr1h	equ	0xFE2
 19389                           fsr1l	equ	0xFE1
 19390                           indf2	equ	0xFDF
 19391                           postinc2	equ	0xFDE
 19392                           postdec2	equ	0xFDD
 19393                           plusw2	equ	0xFDB
 19394                           fsr2h	equ	0xFDA
 19395                           fsr2l	equ	0xFD9
 19396                           status	equ	0xFD8
 19397                           
 19398 ;; *************** function _ADC_Init *****************
 19399 ;; Defined at:
 19400 ;;		line 19 in file "Library/ADC.c"
 19401 ;; Parameters:    Size  Location     Type
 19402 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 19403 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 19404 ;;  pChannel        1    6[BANK0 ] enum E6742
 19405 ;; Auto vars:     Size  Location     Type
 19406 ;;		None
 19407 ;; Return value:  Size  Location     Type
 19408 ;;                  1    wreg      void 
 19409 ;; Registers used:
 19410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19411 ;; Tracked objects:
 19412 ;;		On entry : 0/0
 19413 ;;		On exit  : 0/0
 19414 ;;		Unchanged: 0/0
 19415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19416 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;Total ram usage:        3 bytes
 19421 ;; Hardware stack levels used:    1
 19422 ;; Hardware stack levels required when called:    9
 19423 ;; This function calls:
 19424 ;;		_ADC_Calibrate
 19425 ;;		_ADC_ClockDivision
 19426 ;;		_ADC_ConversionTime
 19427 ;;		_ADC_SetChannel
 19428 ;;		_ADC_SetupIO
 19429 ;; This function is called by:
 19430 ;;		_FunctInitADC
 19431 ;; This function uses a non-reentrant model
 19432 ;;
 19433                           
 19434                           	psect	text100
 19435  016B0A                     __ptext100:
 19436                           	opt stack 0
 19437  016B0A                     _ADC_Init:
 19438                           	opt stack 19
 19439                           
 19440                           ;ADC.c: 21: if(pInput==(void*)0)
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;incstack = 0
 19444  016B0A  0100               	movlb	0	; () banked
 19445  016B0C  5164               	movf	ADC_Init@pInput& (0+255),w,b
 19446  016B0E  0100               	movlb	0	; () banked
 19447  016B10  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 19448  016B12  B4D8               	btfsc	status,2,c
 19449  016B14  0012               	return	
 19450                           
 19451                           ; BSR set to: 0
 19452                           ;ADC.c: 25: lCurrent = pInput;
 19453                           
 19454                           ; BSR set to: 0
 19455                           
 19456                           ; BSR set to: 0
 19457                           ;ADC.c: 22: return;
 19458  016B16  C064  F0DC         	movff	ADC_Init@pInput,_lCurrent
 19459  016B1A  C065  F0DD         	movff	ADC_Init@pInput+1,_lCurrent+1
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;ADC.c: 27: pInput->mChannel = pChannel;
 19463  016B1E  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 19464  016B22  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 19465  016B26  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 19466                           
 19467                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 19468  016B2A  0100               	movlb	0	; () banked
 19469  016B2C  EE20 F003          	lfsr	2,3
 19470  016B30  5164               	movf	ADC_Init@pInput& (0+255),w,b
 19471  016B32  26D9               	addwf	fsr2l,f,c
 19472  016B34  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 19473  016B36  22DA               	addwfc	fsr2h,f,c
 19474  016B38  0E00               	movlw	0
 19475  016B3A  6EDE               	movwf	postinc2,c
 19476  016B3C  0E00               	movlw	0
 19477  016B3E  6EDD               	movwf	postdec2,c
 19478                           
 19479                           ;ADC.c: 29: pInput->mValue = 0;
 19480  016B40  0100               	movlb	0	; () banked
 19481  016B42  EE20 F001          	lfsr	2,1
 19482  016B46  5164               	movf	ADC_Init@pInput& (0+255),w,b
 19483  016B48  26D9               	addwf	fsr2l,f,c
 19484  016B4A  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 19485  016B4C  22DA               	addwfc	fsr2h,f,c
 19486  016B4E  0E00               	movlw	0
 19487  016B50  6EDE               	movwf	postinc2,c
 19488  016B52  0E00               	movlw	0
 19489  016B54  6EDD               	movwf	postdec2,c
 19490                           
 19491                           ; BSR set to: 0
 19492                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 19493  016B56  0100               	movlb	0	; () banked
 19494  016B58  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 19495  016B5A  ECF8  F0BE         	call	_ADC_SetChannel
 19496                           
 19497                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 19498  016B5E  9EC2               	bcf	4034,7,c	;volatile
 19499                           
 19500                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 19501  016B60  9CC2               	bcf	4034,6,c	;volatile
 19502                           
 19503                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 19504  016B62  8EC1               	bsf	4033,7,c	;volatile
 19505                           
 19506                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 19507  016B64  8CC1               	bsf	4033,6,c	;volatile
 19508                           
 19509                           ;ADC.c: 43: ADC_ConversionTime(12);
 19510  016B66  0E0C               	movlw	12
 19511  016B68  EC16  F0BB         	call	_ADC_ConversionTime
 19512                           
 19513                           ;ADC.c: 47: ADC_ClockDivision(16);
 19514  016B6C  0E10               	movlw	16
 19515  016B6E  EC71  F0B3         	call	_ADC_ClockDivision
 19516                           
 19517                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 19518  016B72  0100               	movlb	0	; () banked
 19519  016B74  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 19520  016B76  EC4B  F0BD         	call	_ADC_SetupIO
 19521                           
 19522                           ;ADC.c: 58: ADC_Initialised = 1;
 19523  016B7A  0E01               	movlw	1
 19524  016B7C  0100               	movlb	0	; () banked
 19525  016B7E  6FE8               	movwf	_ADC_Initialised& (0+255),b
 19526                           
 19527                           ; BSR set to: 0
 19528                           ;ADC.c: 61: ADC_Calibrate();
 19529  016B80  EC7F  F0BF         	call	_ADC_Calibrate	;wreg free
 19530  016B84  0012               	return		;funcret
 19531  016B86                     __end_of_ADC_Init:
 19532                           	opt stack 0
 19533                           tosu	equ	0xFFF
 19534                           tosh	equ	0xFFE
 19535                           tosl	equ	0xFFD
 19536                           pclath	equ	0xFFA
 19537                           tblptru	equ	0xFF8
 19538                           tblptrh	equ	0xFF7
 19539                           tblptrl	equ	0xFF6
 19540                           tablat	equ	0xFF5
 19541                           prodh	equ	0xFF4
 19542                           prodl	equ	0xFF3
 19543                           intcon	equ	0xFF2
 19544                           indf0	equ	0xFEF
 19545                           postinc0	equ	0xFEE
 19546                           fsr0h	equ	0xFEA
 19547                           fsr0l	equ	0xFE9
 19548                           wreg	equ	0xFE8
 19549                           indf1	equ	0xFE7
 19550                           postdec1	equ	0xFE5
 19551                           fsr1h	equ	0xFE2
 19552                           fsr1l	equ	0xFE1
 19553                           indf2	equ	0xFDF
 19554                           postinc2	equ	0xFDE
 19555                           postdec2	equ	0xFDD
 19556                           plusw2	equ	0xFDB
 19557                           fsr2h	equ	0xFDA
 19558                           fsr2l	equ	0xFD9
 19559                           status	equ	0xFD8
 19560                           
 19561 ;; *************** function _ADC_SetupIO *****************
 19562 ;; Defined at:
 19563 ;;		line 150 in file "Library/ADC.c"
 19564 ;; Parameters:    Size  Location     Type
 19565 ;;  pChannel        1    wreg     enum E6742
 19566 ;; Auto vars:     Size  Location     Type
 19567 ;;  pChannel        1    2[BANK0 ] enum E6742
 19568 ;;  MASK            1    3[BANK0 ] unsigned char 
 19569 ;; Return value:  Size  Location     Type
 19570 ;;                  1    wreg      void 
 19571 ;; Registers used:
 19572 ;;		wreg, status,2, status,0
 19573 ;; Tracked objects:
 19574 ;;		On entry : 0/0
 19575 ;;		On exit  : 0/0
 19576 ;;		Unchanged: 0/0
 19577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19581 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;Total ram usage:        4 bytes
 19583 ;; Hardware stack levels used:    1
 19584 ;; Hardware stack levels required when called:    7
 19585 ;; This function calls:
 19586 ;;		Nothing
 19587 ;; This function is called by:
 19588 ;;		_ADC_Init
 19589 ;; This function uses a non-reentrant model
 19590 ;;
 19591                           
 19592                           	psect	text101
 19593  017A96                     __ptext101:
 19594                           	opt stack 0
 19595  017A96                     _ADC_SetupIO:
 19596                           	opt stack 20
 19597                           
 19598                           ;incstack = 0
 19599                           ;ADC_SetupIO@pChannel stored from wreg
 19600  017A96  0100               	movlb	0	; () banked
 19601  017A98  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 19602                           
 19603                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 19604  017A9A  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 19605  017A9E  0E01               	movlw	1
 19606  017AA0  0100               	movlb	0	; () banked
 19607  017AA2  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 19608  017AA4  0100               	movlb	0	; () banked
 19609  017AA6  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 19610  017AA8  D003               	goto	u11094
 19611  017AAA                     u11095:
 19612  017AAA  0100               	movlb	0	; () banked
 19613  017AAC  90D8               	bcf	status,0,c
 19614  017AAE  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 19615  017AB0                     u11094:
 19616  017AB0  0100               	movlb	0	; () banked
 19617  017AB2  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 19618  017AB4  D7FA               	goto	u11095
 19619  017AB6  0100               	movlb	0	; () banked
 19620  017AB8  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 19621  017ABA  0AFF               	xorlw	255
 19622  017ABC  0100               	movlb	0	; () banked
 19623  017ABE  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 19624                           
 19625                           ;ADC.c: 153: ANCON0 &= MASK;
 19626  017AC0  0100               	movlb	0	; () banked
 19627  017AC2  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 19628  017AC4  16C1               	andwf	4033,f,c	;volatile
 19629                           
 19630                           ; BSR set to: 0
 19631  017AC6  0012               	return		;funcret
 19632  017AC8                     __end_of_ADC_SetupIO:
 19633                           	opt stack 0
 19634                           tosu	equ	0xFFF
 19635                           tosh	equ	0xFFE
 19636                           tosl	equ	0xFFD
 19637                           pclath	equ	0xFFA
 19638                           tblptru	equ	0xFF8
 19639                           tblptrh	equ	0xFF7
 19640                           tblptrl	equ	0xFF6
 19641                           tablat	equ	0xFF5
 19642                           prodh	equ	0xFF4
 19643                           prodl	equ	0xFF3
 19644                           intcon	equ	0xFF2
 19645                           indf0	equ	0xFEF
 19646                           postinc0	equ	0xFEE
 19647                           fsr0h	equ	0xFEA
 19648                           fsr0l	equ	0xFE9
 19649                           wreg	equ	0xFE8
 19650                           indf1	equ	0xFE7
 19651                           postdec1	equ	0xFE5
 19652                           fsr1h	equ	0xFE2
 19653                           fsr1l	equ	0xFE1
 19654                           indf2	equ	0xFDF
 19655                           postinc2	equ	0xFDE
 19656                           postdec2	equ	0xFDD
 19657                           plusw2	equ	0xFDB
 19658                           fsr2h	equ	0xFDA
 19659                           fsr2l	equ	0xFD9
 19660                           status	equ	0xFD8
 19661                           
 19662 ;; *************** function _ADC_SetChannel *****************
 19663 ;; Defined at:
 19664 ;;		line 155 in file "Library/ADC.c"
 19665 ;; Parameters:    Size  Location     Type
 19666 ;;  pChannel        1    wreg     enum E6742
 19667 ;; Auto vars:     Size  Location     Type
 19668 ;;  pChannel        1    1[BANK0 ] enum E6742
 19669 ;; Return value:  Size  Location     Type
 19670 ;;                  1    wreg      void 
 19671 ;; Registers used:
 19672 ;;		wreg, status,2, status,0
 19673 ;; Tracked objects:
 19674 ;;		On entry : 0/0
 19675 ;;		On exit  : 0/0
 19676 ;;		Unchanged: 0/0
 19677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19682 ;;Total ram usage:        2 bytes
 19683 ;; Hardware stack levels used:    1
 19684 ;; Hardware stack levels required when called:    7
 19685 ;; This function calls:
 19686 ;;		Nothing
 19687 ;; This function is called by:
 19688 ;;		_ADC_Init
 19689 ;;		_ADC_Start
 19690 ;;		_ADC_ISR
 19691 ;;		_ADC_Sample
 19692 ;; This function uses a non-reentrant model
 19693 ;;
 19694                           
 19695                           	psect	text102
 19696  017DF0                     __ptext102:
 19697                           	opt stack 0
 19698  017DF0                     _ADC_SetChannel:
 19699                           	opt stack 20
 19700                           
 19701                           ; BSR set to: 0
 19702                           ;incstack = 0
 19703                           ;ADC_SetChannel@pChannel stored from wreg
 19704  017DF0  0100               	movlb	0	; () banked
 19705  017DF2  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 19706                           
 19707                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 19708  017DF4  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 19709  017DF8  0100               	movlb	0	; () banked
 19710  017DFA  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 19711  017DFC  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 19712  017DFE  50C2               	movf	4034,w,c	;volatile
 19713  017E00  0100               	movlb	0	; () banked
 19714  017E02  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 19715  017E04  0BC3               	andlw	-61
 19716  017E06  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 19717  017E08  6EC2               	movwf	4034,c	;volatile
 19718                           
 19719                           ; BSR set to: 0
 19720  017E0A  0012               	return		;funcret
 19721  017E0C                     __end_of_ADC_SetChannel:
 19722                           	opt stack 0
 19723                           tosu	equ	0xFFF
 19724                           tosh	equ	0xFFE
 19725                           tosl	equ	0xFFD
 19726                           pclath	equ	0xFFA
 19727                           tblptru	equ	0xFF8
 19728                           tblptrh	equ	0xFF7
 19729                           tblptrl	equ	0xFF6
 19730                           tablat	equ	0xFF5
 19731                           prodh	equ	0xFF4
 19732                           prodl	equ	0xFF3
 19733                           intcon	equ	0xFF2
 19734                           indf0	equ	0xFEF
 19735                           postinc0	equ	0xFEE
 19736                           fsr0h	equ	0xFEA
 19737                           fsr0l	equ	0xFE9
 19738                           wreg	equ	0xFE8
 19739                           indf1	equ	0xFE7
 19740                           postdec1	equ	0xFE5
 19741                           fsr1h	equ	0xFE2
 19742                           fsr1l	equ	0xFE1
 19743                           indf2	equ	0xFDF
 19744                           postinc2	equ	0xFDE
 19745                           postdec2	equ	0xFDD
 19746                           plusw2	equ	0xFDB
 19747                           fsr2h	equ	0xFDA
 19748                           fsr2l	equ	0xFD9
 19749                           status	equ	0xFD8
 19750                           
 19751 ;; *************** function _ADC_ConversionTime *****************
 19752 ;; Defined at:
 19753 ;;		line 199 in file "Library/ADC.c"
 19754 ;; Parameters:    Size  Location     Type
 19755 ;;  pCount          1    wreg     unsigned char 
 19756 ;; Auto vars:     Size  Location     Type
 19757 ;;  pCount          1    1[BANK0 ] unsigned char 
 19758 ;; Return value:  Size  Location     Type
 19759 ;;                  1    wreg      void 
 19760 ;; Registers used:
 19761 ;;		wreg, status,2, status,0
 19762 ;; Tracked objects:
 19763 ;;		On entry : 0/0
 19764 ;;		On exit  : 0/0
 19765 ;;		Unchanged: 0/0
 19766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19771 ;;Total ram usage:        2 bytes
 19772 ;; Hardware stack levels used:    1
 19773 ;; Hardware stack levels required when called:    7
 19774 ;; This function calls:
 19775 ;;		Nothing
 19776 ;; This function is called by:
 19777 ;;		_ADC_Init
 19778 ;; This function uses a non-reentrant model
 19779 ;;
 19780                           
 19781                           	psect	text103
 19782  01762C                     __ptext103:
 19783                           	opt stack 0
 19784  01762C                     _ADC_ConversionTime:
 19785                           	opt stack 20
 19786                           
 19787                           ; BSR set to: 0
 19788                           ;incstack = 0
 19789                           ;ADC_ConversionTime@pCount stored from wreg
 19790  01762C  0100               	movlb	0	; () banked
 19791  01762E  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 19792                           
 19793                           ;ADC.c: 201: if (pCount == 10)
 19794  017630  0E0A               	movlw	10
 19795  017632  0100               	movlb	0	; () banked
 19796  017634  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 19797  017636  B4D8               	btfsc	status,2,c
 19798  017638  D00A               	goto	l13793
 19799                           
 19800                           ; BSR set to: 0
 19801                           ;ADC.c: 203: else if (pCount == 14)
 19802                           
 19803                           ; BSR set to: 0
 19804                           
 19805                           ; BSR set to: 0
 19806                           ;ADC.c: 202: pCount -= 2;
 19807  01763A  0E0E               	movlw	14
 19808  01763C  0100               	movlb	0	; () banked
 19809  01763E  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 19810  017640  B4D8               	btfsc	status,2,c
 19811  017642  D005               	goto	l13793
 19812                           
 19813                           ; BSR set to: 0
 19814                           ;ADC.c: 205: else if (pCount == 18)
 19815                           
 19816                           ; BSR set to: 0
 19817                           
 19818                           ; BSR set to: 0
 19819                           ;ADC.c: 204: pCount -= 2;
 19820  017644  0E12               	movlw	18
 19821  017646  0100               	movlb	0	; () banked
 19822  017648  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 19823  01764A  A4D8               	btfss	status,2,c
 19824  01764C  D003               	goto	l1310
 19825  01764E                     l13793:
 19826                           
 19827                           ; BSR set to: 0
 19828                           ;ADC.c: 206: pCount -= 2;
 19829  01764E  0E02               	movlw	2
 19830  017650  0100               	movlb	0	; () banked
 19831  017652  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 19832  017654                     l1310:
 19833                           
 19834                           ; BSR set to: 0
 19835                           ;ADC.c: 208: pCount <<= 1;
 19836  017654  0100               	movlb	0	; () banked
 19837  017656  90D8               	bcf	status,0,c
 19838  017658  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 19839                           
 19840                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 19841  01765A  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 19842  01765E  0100               	movlb	0	; () banked
 19843  017660  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 19844  017662  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 19845  017664  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 19846  017666  50C1               	movf	4033,w,c	;volatile
 19847  017668  0100               	movlb	0	; () banked
 19848  01766A  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 19849  01766C  0BC7               	andlw	-57
 19850  01766E  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 19851  017670  6EC1               	movwf	4033,c	;volatile
 19852                           
 19853                           ; BSR set to: 0
 19854  017672  0012               	return		;funcret
 19855  017674                     __end_of_ADC_ConversionTime:
 19856                           	opt stack 0
 19857                           tosu	equ	0xFFF
 19858                           tosh	equ	0xFFE
 19859                           tosl	equ	0xFFD
 19860                           pclath	equ	0xFFA
 19861                           tblptru	equ	0xFF8
 19862                           tblptrh	equ	0xFF7
 19863                           tblptrl	equ	0xFF6
 19864                           tablat	equ	0xFF5
 19865                           prodh	equ	0xFF4
 19866                           prodl	equ	0xFF3
 19867                           intcon	equ	0xFF2
 19868                           indf0	equ	0xFEF
 19869                           postinc0	equ	0xFEE
 19870                           fsr0h	equ	0xFEA
 19871                           fsr0l	equ	0xFE9
 19872                           wreg	equ	0xFE8
 19873                           indf1	equ	0xFE7
 19874                           postdec1	equ	0xFE5
 19875                           fsr1h	equ	0xFE2
 19876                           fsr1l	equ	0xFE1
 19877                           indf2	equ	0xFDF
 19878                           postinc2	equ	0xFDE
 19879                           postdec2	equ	0xFDD
 19880                           plusw2	equ	0xFDB
 19881                           fsr2h	equ	0xFDA
 19882                           fsr2l	equ	0xFD9
 19883                           status	equ	0xFD8
 19884                           
 19885 ;; *************** function _ADC_ClockDivision *****************
 19886 ;; Defined at:
 19887 ;;		line 159 in file "Library/ADC.c"
 19888 ;; Parameters:    Size  Location     Type
 19889 ;;  pDivide         1    wreg     unsigned char 
 19890 ;; Auto vars:     Size  Location     Type
 19891 ;;  pDivide         1    0[BANK0 ] unsigned char 
 19892 ;;  unfound         1    2[BANK0 ] unsigned char 
 19893 ;;  reg             1    1[BANK0 ] unsigned char 
 19894 ;; Return value:  Size  Location     Type
 19895 ;;                  1    wreg      void 
 19896 ;; Registers used:
 19897 ;;		wreg, status,2, status,0
 19898 ;; Tracked objects:
 19899 ;;		On entry : 0/0
 19900 ;;		On exit  : 0/0
 19901 ;;		Unchanged: 0/0
 19902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19904 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19906 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;Total ram usage:        3 bytes
 19908 ;; Hardware stack levels used:    1
 19909 ;; Hardware stack levels required when called:    7
 19910 ;; This function calls:
 19911 ;;		Nothing
 19912 ;; This function is called by:
 19913 ;;		_ADC_Init
 19914 ;; This function uses a non-reentrant model
 19915 ;;
 19916                           
 19917                           	psect	text104
 19918  0166E2                     __ptext104:
 19919                           	opt stack 0
 19920  0166E2                     _ADC_ClockDivision:
 19921                           	opt stack 20
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;incstack = 0
 19925                           ;ADC_ClockDivision@pDivide stored from wreg
 19926  0166E2  0100               	movlb	0	; () banked
 19927  0166E4  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 19928                           
 19929                           ;ADC.c: 161: UINT8 reg = 0;
 19930  0166E6  0E00               	movlw	0
 19931  0166E8  0100               	movlb	0	; () banked
 19932  0166EA  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 19933                           
 19934                           ;ADC.c: 162: bool unfound = 1;
 19935  0166EC  0E01               	movlw	1
 19936  0166EE  D002               	goto	L9
 19937  0166F0                     l13797:
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;ADC.c: 167: reg = 0;
 19941  0166F0  0E00               	movlw	0
 19942  0166F2  D00C               	goto	L14
 19943  0166F4                     L9:
 19944  0166F4  0100               	movlb	0	; () banked
 19945  0166F6  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 19946                           
 19947                           ;ADC.c: 169: break;
 19948  0166F8  D02D               	goto	l13817
 19949  0166FA                     l13799:
 19950                           
 19951                           ; BSR set to: 0
 19952                           ;ADC.c: 171: reg = 0b100;
 19953  0166FA  0E04               	movlw	4
 19954  0166FC  D007               	goto	L14
 19955  0166FE                     l13801:
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;ADC.c: 175: reg = 0b001;
 19959  0166FE  0E01               	movlw	1
 19960  016700  D005               	goto	L14
 19961  016702                     l13803:
 19962                           
 19963                           ; BSR set to: 0
 19964                           ;ADC.c: 179: reg = 0b101;
 19965  016702  0E05               	movlw	5
 19966  016704  D003               	goto	L14
 19967  016706                     l13805:
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;ADC.c: 183: reg = 0b010;
 19971  016706  0E02               	movlw	2
 19972  016708  D001               	goto	L14
 19973  01670A                     l13807:
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;ADC.c: 187: reg = 0b110;
 19977  01670A  0E06               	movlw	6
 19978  01670C                     L14:
 19979  01670C  0100               	movlb	0	; () banked
 19980  01670E  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 19981                           
 19982                           ;ADC.c: 188: unfound = 0;
 19983  016710  0E00               	movlw	0
 19984  016712  D7F0               	goto	L9
 19985  016714                     l13809:
 19986                           
 19987                           ; BSR set to: 0
 19988                           ;ADC.c: 191: if (pDivide > 2)
 19989  016714  0E02               	movlw	2
 19990  016716  0100               	movlb	0	; () banked
 19991  016718  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 19992  01671A  D003               	goto	l13813
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;ADC.c: 192: pDivide --;
 19996  01671C  0100               	movlb	0	; () banked
 19997  01671E  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 19998  016720  D019               	goto	l13817
 19999  016722                     l13813:
 20000                           
 20001                           ; BSR set to: 0
 20002                           ;ADC.c: 193: else
 20003                           ;ADC.c: 194: pDivide = 2;
 20004  016722  0E02               	movlw	2
 20005  016724  0100               	movlb	0	; () banked
 20006  016726  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 20007                           
 20008                           ; BSR set to: 0
 20009                           ;ADC.c: 195: };
 20010  016728  D015               	goto	l13817
 20011  01672A                     l13815:
 20012                           
 20013                           ; BSR set to: 0
 20014  01672A  0100               	movlb	0	; () banked
 20015  01672C  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 20016                           
 20017                           ; Switch size 1, requested type "space"
 20018                           ; Number of cases is 6, Range of values is 2 to 64
 20019                           ; switch strategies available:
 20020                           ; Name         Instructions Cycles
 20021                           ; simple_byte           19    10 (average)
 20022                           ;	Chosen strategy is simple_byte
 20023  01672E  0A02               	xorlw	2	; case 2
 20024  016730  B4D8               	btfsc	status,2,c
 20025  016732  D7DE               	goto	l13797
 20026  016734  0A06               	xorlw	6	; case 4
 20027  016736  B4D8               	btfsc	status,2,c
 20028  016738  D7E0               	goto	l13799
 20029  01673A  0A0C               	xorlw	12	; case 8
 20030  01673C  B4D8               	btfsc	status,2,c
 20031  01673E  D7DF               	goto	l13801
 20032  016740  0A18               	xorlw	24	; case 16
 20033  016742  B4D8               	btfsc	status,2,c
 20034  016744  D7DE               	goto	l13803
 20035  016746  0A30               	xorlw	48	; case 32
 20036  016748  B4D8               	btfsc	status,2,c
 20037  01674A  D7DD               	goto	l13805
 20038  01674C  0A60               	xorlw	96	; case 64
 20039  01674E  B4D8               	btfsc	status,2,c
 20040  016750  D7DC               	goto	l13807
 20041  016752  D7E0               	goto	l13809
 20042  016754                     l13817:
 20043                           
 20044                           ; BSR set to: 0
 20045  016754  0100               	movlb	0	; () banked
 20046  016756  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 20047  016758  0100               	movlb	0	; () banked
 20048  01675A  A4D8               	btfss	status,2,c
 20049  01675C  D7E6               	goto	l13815
 20050                           
 20051                           ; BSR set to: 0
 20052                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 20053                           
 20054                           ; BSR set to: 0
 20055  01675E  50C1               	movf	4033,w,c	;volatile
 20056  016760  0100               	movlb	0	; () banked
 20057  016762  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 20058  016764  0BF8               	andlw	-8
 20059  016766  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 20060  016768  6EC1               	movwf	4033,c	;volatile
 20061                           
 20062                           ; BSR set to: 0
 20063  01676A  0012               	return		;funcret
 20064  01676C                     __end_of_ADC_ClockDivision:
 20065                           	opt stack 0
 20066                           tosu	equ	0xFFF
 20067                           tosh	equ	0xFFE
 20068                           tosl	equ	0xFFD
 20069                           pclath	equ	0xFFA
 20070                           tblptru	equ	0xFF8
 20071                           tblptrh	equ	0xFF7
 20072                           tblptrl	equ	0xFF6
 20073                           tablat	equ	0xFF5
 20074                           prodh	equ	0xFF4
 20075                           prodl	equ	0xFF3
 20076                           intcon	equ	0xFF2
 20077                           indf0	equ	0xFEF
 20078                           postinc0	equ	0xFEE
 20079                           fsr0h	equ	0xFEA
 20080                           fsr0l	equ	0xFE9
 20081                           wreg	equ	0xFE8
 20082                           indf1	equ	0xFE7
 20083                           postdec1	equ	0xFE5
 20084                           fsr1h	equ	0xFE2
 20085                           fsr1l	equ	0xFE1
 20086                           indf2	equ	0xFDF
 20087                           postinc2	equ	0xFDE
 20088                           postdec2	equ	0xFDD
 20089                           plusw2	equ	0xFDB
 20090                           fsr2h	equ	0xFDA
 20091                           fsr2l	equ	0xFD9
 20092                           status	equ	0xFD8
 20093                           
 20094 ;; *************** function _ADC_Calibrate *****************
 20095 ;; Defined at:
 20096 ;;		line 63 in file "Library/ADC.c"
 20097 ;; Parameters:    Size  Location     Type
 20098 ;;		None
 20099 ;; Auto vars:     Size  Location     Type
 20100 ;;		None
 20101 ;; Return value:  Size  Location     Type
 20102 ;;                  1    wreg      void 
 20103 ;; Registers used:
 20104 ;;		cstack
 20105 ;; Tracked objects:
 20106 ;;		On entry : 0/0
 20107 ;;		On exit  : 0/0
 20108 ;;		Unchanged: 0/0
 20109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20114 ;;Total ram usage:        0 bytes
 20115 ;; Hardware stack levels used:    1
 20116 ;; Hardware stack levels required when called:    8
 20117 ;; This function calls:
 20118 ;;		_ADC_Off
 20119 ;;		_ADC_On
 20120 ;; This function is called by:
 20121 ;;		_ADC_Init
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           	psect	text105
 20126  017EFE                     __ptext105:
 20127                           	opt stack 0
 20128  017EFE                     _ADC_Calibrate:
 20129                           	opt stack 19
 20130                           
 20131                           ;ADC.c: 65: ADC_On();
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;incstack = 0
 20135  017EFE  ECF6  F0BF         	call	_ADC_On	;wreg free
 20136                           
 20137                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 20138  017F02  8CC1               	bsf	4033,6,c	;volatile
 20139                           
 20140                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 20141  017F04  82C2               	bsf	4034,1,c	;volatile
 20142  017F06                     l1253:
 20143  017F06  B2C2               	btfsc	4034,1,c	;volatile
 20144  017F08  D7FE               	goto	l1253
 20145                           
 20146                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 20147  017F0A  9CC1               	bcf	4033,6,c	;volatile
 20148                           
 20149                           ;ADC.c: 73: ADC_Off();
 20150  017F0C  ECE9  F0BF         	call	_ADC_Off	;wreg free
 20151  017F10  0012               	return		;funcret
 20152  017F12                     __end_of_ADC_Calibrate:
 20153                           	opt stack 0
 20154                           tosu	equ	0xFFF
 20155                           tosh	equ	0xFFE
 20156                           tosl	equ	0xFFD
 20157                           pclath	equ	0xFFA
 20158                           tblptru	equ	0xFF8
 20159                           tblptrh	equ	0xFF7
 20160                           tblptrl	equ	0xFF6
 20161                           tablat	equ	0xFF5
 20162                           prodh	equ	0xFF4
 20163                           prodl	equ	0xFF3
 20164                           intcon	equ	0xFF2
 20165                           indf0	equ	0xFEF
 20166                           postinc0	equ	0xFEE
 20167                           fsr0h	equ	0xFEA
 20168                           fsr0l	equ	0xFE9
 20169                           wreg	equ	0xFE8
 20170                           indf1	equ	0xFE7
 20171                           postdec1	equ	0xFE5
 20172                           fsr1h	equ	0xFE2
 20173                           fsr1l	equ	0xFE1
 20174                           indf2	equ	0xFDF
 20175                           postinc2	equ	0xFDE
 20176                           postdec2	equ	0xFDD
 20177                           plusw2	equ	0xFDB
 20178                           fsr2h	equ	0xFDA
 20179                           fsr2l	equ	0xFD9
 20180                           status	equ	0xFD8
 20181                           
 20182 ;; *************** function _ADC_On *****************
 20183 ;; Defined at:
 20184 ;;		line 85 in file "Library/ADC.c"
 20185 ;; Parameters:    Size  Location     Type
 20186 ;;		None
 20187 ;; Auto vars:     Size  Location     Type
 20188 ;;		None
 20189 ;; Return value:  Size  Location     Type
 20190 ;;                  1    wreg      void 
 20191 ;; Registers used:
 20192 ;;		None
 20193 ;; Tracked objects:
 20194 ;;		On entry : 0/0
 20195 ;;		On exit  : 0/0
 20196 ;;		Unchanged: 0/0
 20197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20202 ;;Total ram usage:        0 bytes
 20203 ;; Hardware stack levels used:    1
 20204 ;; Hardware stack levels required when called:    7
 20205 ;; This function calls:
 20206 ;;		Nothing
 20207 ;; This function is called by:
 20208 ;;		_ADC_Calibrate
 20209 ;;		_ADC_Start
 20210 ;;		_ADC_ISR
 20211 ;;		_ADC_Sample
 20212 ;; This function uses a non-reentrant model
 20213 ;;
 20214                           
 20215                           	psect	text106
 20216  017FEC                     __ptext106:
 20217                           	opt stack 0
 20218  017FEC                     _ADC_On:
 20219                           	opt stack 20
 20220                           
 20221                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 20222                           
 20223                           ;incstack = 0
 20224  017FEC  80C2               	bsf	4034,0,c	;volatile
 20225                           
 20226                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 20227  017FEE  9C9E               	bcf	3998,6,c	;volatile
 20228  017FF0  0012               	return		;funcret
 20229  017FF2                     __end_of_ADC_On:
 20230                           	opt stack 0
 20231                           tosu	equ	0xFFF
 20232                           tosh	equ	0xFFE
 20233                           tosl	equ	0xFFD
 20234                           pclath	equ	0xFFA
 20235                           tblptru	equ	0xFF8
 20236                           tblptrh	equ	0xFF7
 20237                           tblptrl	equ	0xFF6
 20238                           tablat	equ	0xFF5
 20239                           prodh	equ	0xFF4
 20240                           prodl	equ	0xFF3
 20241                           intcon	equ	0xFF2
 20242                           indf0	equ	0xFEF
 20243                           postinc0	equ	0xFEE
 20244                           fsr0h	equ	0xFEA
 20245                           fsr0l	equ	0xFE9
 20246                           wreg	equ	0xFE8
 20247                           indf1	equ	0xFE7
 20248                           postdec1	equ	0xFE5
 20249                           fsr1h	equ	0xFE2
 20250                           fsr1l	equ	0xFE1
 20251                           indf2	equ	0xFDF
 20252                           postinc2	equ	0xFDE
 20253                           postdec2	equ	0xFDD
 20254                           plusw2	equ	0xFDB
 20255                           fsr2h	equ	0xFDA
 20256                           fsr2l	equ	0xFD9
 20257                           status	equ	0xFD8
 20258                           
 20259 ;; *************** function _ADC_Off *****************
 20260 ;; Defined at:
 20261 ;;		line 94 in file "Library/ADC.c"
 20262 ;; Parameters:    Size  Location     Type
 20263 ;;		None
 20264 ;; Auto vars:     Size  Location     Type
 20265 ;;		None
 20266 ;; Return value:  Size  Location     Type
 20267 ;;                  1    wreg      void 
 20268 ;; Registers used:
 20269 ;;		None
 20270 ;; Tracked objects:
 20271 ;;		On entry : 0/0
 20272 ;;		On exit  : 0/0
 20273 ;;		Unchanged: 0/0
 20274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20279 ;;Total ram usage:        0 bytes
 20280 ;; Hardware stack levels used:    1
 20281 ;; Hardware stack levels required when called:    7
 20282 ;; This function calls:
 20283 ;;		Nothing
 20284 ;; This function is called by:
 20285 ;;		_ADC_Calibrate
 20286 ;;		_ADC_Start
 20287 ;;		_ADC_ISR
 20288 ;;		_ADC_Sample
 20289 ;; This function uses a non-reentrant model
 20290 ;;
 20291                           
 20292                           	psect	text107
 20293  017FD2                     __ptext107:
 20294                           	opt stack 0
 20295  017FD2                     _ADC_Off:
 20296                           	opt stack 20
 20297                           
 20298                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 20299                           
 20300                           ;incstack = 0
 20301  017FD2  90C2               	bcf	4034,0,c	;volatile
 20302                           
 20303                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 20304  017FD4  9C9E               	bcf	3998,6,c	;volatile
 20305                           
 20306                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 20307  017FD6  9C9D               	bcf	3997,6,c	;volatile
 20308  017FD8  0012               	return		;funcret
 20309  017FDA                     __end_of_ADC_Off:
 20310                           	opt stack 0
 20311                           tosu	equ	0xFFF
 20312                           tosh	equ	0xFFE
 20313                           tosl	equ	0xFFD
 20314                           pclath	equ	0xFFA
 20315                           tblptru	equ	0xFF8
 20316                           tblptrh	equ	0xFF7
 20317                           tblptrl	equ	0xFF6
 20318                           tablat	equ	0xFF5
 20319                           prodh	equ	0xFF4
 20320                           prodl	equ	0xFF3
 20321                           intcon	equ	0xFF2
 20322                           indf0	equ	0xFEF
 20323                           postinc0	equ	0xFEE
 20324                           fsr0h	equ	0xFEA
 20325                           fsr0l	equ	0xFE9
 20326                           wreg	equ	0xFE8
 20327                           indf1	equ	0xFE7
 20328                           postdec1	equ	0xFE5
 20329                           fsr1h	equ	0xFE2
 20330                           fsr1l	equ	0xFE1
 20331                           indf2	equ	0xFDF
 20332                           postinc2	equ	0xFDE
 20333                           postdec2	equ	0xFDD
 20334                           plusw2	equ	0xFDB
 20335                           fsr2h	equ	0xFDA
 20336                           fsr2l	equ	0xFD9
 20337                           status	equ	0xFD8
 20338                           
 20339 ;; *************** function _Console_Init *****************
 20340 ;; Defined at:
 20341 ;;		line 157 in file "Library/Console.c"
 20342 ;; Parameters:    Size  Location     Type
 20343 ;;		None
 20344 ;; Auto vars:     Size  Location     Type
 20345 ;;  y               1    3[BANK0 ] unsigned char 
 20346 ;;  x               1    2[BANK0 ] unsigned char 
 20347 ;; Return value:  Size  Location     Type
 20348 ;;                  1    wreg      void 
 20349 ;; Registers used:
 20350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20351 ;; Tracked objects:
 20352 ;;		On entry : 0/0
 20353 ;;		On exit  : 0/0
 20354 ;;		Unchanged: 0/0
 20355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20359 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20360 ;;Total ram usage:        4 bytes
 20361 ;; Hardware stack levels used:    1
 20362 ;; Hardware stack levels required when called:    7
 20363 ;; This function calls:
 20364 ;;		Nothing
 20365 ;; This function is called by:
 20366 ;;		_initialise
 20367 ;; This function uses a non-reentrant model
 20368 ;;
 20369                           
 20370                           	psect	text108
 20371  016880                     __ptext108:
 20372                           	opt stack 0
 20373  016880                     _Console_Init:
 20374                           	opt stack 22
 20375                           
 20376                           ;Console.c: 160: lBufferX = 0;
 20377                           
 20378                           ;incstack = 0
 20379  016880  0E00               	movlw	0
 20380  016882  6E37               	movwf	_lBufferX,c
 20381                           
 20382                           ;Console.c: 161: lBufferY = 0;
 20383  016884  0E00               	movlw	0
 20384  016886  6E36               	movwf	_lBufferY,c
 20385                           
 20386                           ;Console.c: 163: UINT8 x, y;
 20387                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20388  016888  0E00               	movlw	0
 20389  01688A  0100               	movlb	0	; () banked
 20390  01688C  6F62               	movwf	Console_Init@x& (0+255),b
 20391  01688E                     l15207:
 20392                           
 20393                           ; BSR set to: 0
 20394  01688E  0E13               	movlw	19
 20395  016890  0100               	movlb	0	; () banked
 20396  016892  6562               	cpfsgt	Console_Init@x& (0+255),b
 20397  016894  D001               	goto	l15211
 20398  016896  0012               	return	
 20399  016898                     l15211:
 20400                           
 20401                           ; BSR set to: 0
 20402                           ;Console.c: 165: {
 20403                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 20404  016898  0E00               	movlw	0
 20405  01689A  0100               	movlb	0	; () banked
 20406  01689C  6F63               	movwf	Console_Init@y& (0+255),b
 20407  01689E                     l15213:
 20408                           
 20409                           ; BSR set to: 0
 20410  01689E  0E0E               	movlw	14
 20411  0168A0  0100               	movlb	0	; () banked
 20412  0168A2  6563               	cpfsgt	Console_Init@y& (0+255),b
 20413  0168A4  D001               	goto	l15217
 20414  0168A6  D02C               	goto	l15223
 20415  0168A8                     l15217:
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;Console.c: 167: {
 20419                           ;Console.c: 168: lBuffer[y][x] = '\0';
 20420  0168A8  0100               	movlb	0	; () banked
 20421  0168AA  5163               	movf	Console_Init@y& (0+255),w,b
 20422  0168AC  0D14               	mullw	20
 20423  0168AE  0E7D               	movlw	low _lBuffer
 20424  0168B0  0100               	movlb	0	; () banked
 20425  0168B2  6F60               	movwf	??_Console_Init& (0+255),b
 20426  0168B4  0E02               	movlw	high _lBuffer
 20427  0168B6  0100               	movlb	0	; () banked
 20428  0168B8  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 20429  0168BA  50F3               	movf	prodl,w,c
 20430  0168BC  0100               	movlb	0	; () banked
 20431  0168BE  2760               	addwf	??_Console_Init& (0+255),f,b
 20432  0168C0  50F4               	movf	prodh,w,c
 20433  0168C2  0100               	movlb	0	; () banked
 20434  0168C4  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 20435  0168C6  0100               	movlb	0	; () banked
 20436  0168C8  5162               	movf	Console_Init@x& (0+255),w,b
 20437  0168CA  0D01               	mullw	1
 20438  0168CC  50F3               	movf	prodl,w,c
 20439  0168CE  0100               	movlb	0	; () banked
 20440  0168D0  2560               	addwf	??_Console_Init& (0+255),w,b
 20441  0168D2  6ED9               	movwf	fsr2l,c
 20442  0168D4  50F4               	movf	prodh,w,c
 20443  0168D6  0100               	movlb	0	; () banked
 20444  0168D8  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 20445  0168DA  6EDA               	movwf	fsr2h,c
 20446  0168DC  0E00               	movlw	0
 20447  0168DE  6EDF               	movwf	indf2,c
 20448                           
 20449                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 20450  0168E0  0100               	movlb	0	; () banked
 20451  0168E2  5163               	movf	Console_Init@y& (0+255),w,b
 20452  0168E4  0D02               	mullw	2
 20453  0168E6  0E00               	movlw	low _lCBuffer
 20454  0168E8  24F3               	addwf	prodl,w,c
 20455  0168EA  6ED9               	movwf	fsr2l,c
 20456  0168EC  0E02               	movlw	high _lCBuffer
 20457  0168EE  20F4               	addwfc	prodh,w,c
 20458  0168F0  6EDA               	movwf	fsr2h,c
 20459  0168F2  0EFF               	movlw	255
 20460  0168F4  6EDE               	movwf	postinc2,c
 20461  0168F6  0EFF               	movlw	255
 20462  0168F8  6EDD               	movwf	postdec2,c
 20463                           
 20464                           ; BSR set to: 0
 20465  0168FA  0100               	movlb	0	; () banked
 20466  0168FC  2B63               	incf	Console_Init@y& (0+255),f,b
 20467  0168FE  D7CF               	goto	l15213
 20468  016900                     l15223:
 20469                           
 20470                           ; BSR set to: 0
 20471  016900  0100               	movlb	0	; () banked
 20472  016902  2B62               	incf	Console_Init@x& (0+255),f,b
 20473  016904  D7C4               	goto	l15207
 20474  016906                     __end_of_Console_Init:
 20475                           	opt stack 0
 20476                           tosu	equ	0xFFF
 20477                           tosh	equ	0xFFE
 20478                           tosl	equ	0xFFD
 20479                           pclath	equ	0xFFA
 20480                           tblptru	equ	0xFF8
 20481                           tblptrh	equ	0xFF7
 20482                           tblptrl	equ	0xFF6
 20483                           tablat	equ	0xFF5
 20484                           prodh	equ	0xFF4
 20485                           prodl	equ	0xFF3
 20486                           intcon	equ	0xFF2
 20487                           indf0	equ	0xFEF
 20488                           postinc0	equ	0xFEE
 20489                           fsr0h	equ	0xFEA
 20490                           fsr0l	equ	0xFE9
 20491                           wreg	equ	0xFE8
 20492                           indf1	equ	0xFE7
 20493                           postdec1	equ	0xFE5
 20494                           fsr1h	equ	0xFE2
 20495                           fsr1l	equ	0xFE1
 20496                           indf2	equ	0xFDF
 20497                           postinc2	equ	0xFDE
 20498                           postdec2	equ	0xFDD
 20499                           plusw2	equ	0xFDB
 20500                           fsr2h	equ	0xFDA
 20501                           fsr2l	equ	0xFD9
 20502                           status	equ	0xFD8
 20503                           
 20504 ;; *************** function _getMode *****************
 20505 ;; Defined at:
 20506 ;;		line 109 in file "main.c"
 20507 ;; Parameters:    Size  Location     Type
 20508 ;;		None
 20509 ;; Auto vars:     Size  Location     Type
 20510 ;;		None
 20511 ;; Return value:  Size  Location     Type
 20512 ;;                  1    wreg      void 
 20513 ;; Registers used:
 20514 ;;		wreg, status,2, status,0
 20515 ;; Tracked objects:
 20516 ;;		On entry : 0/0
 20517 ;;		On exit  : 0/0
 20518 ;;		Unchanged: 0/0
 20519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20524 ;;Total ram usage:        2 bytes
 20525 ;; Hardware stack levels used:    1
 20526 ;; Hardware stack levels required when called:    7
 20527 ;; This function calls:
 20528 ;;		Nothing
 20529 ;; This function is called by:
 20530 ;;		_main
 20531 ;; This function uses a non-reentrant model
 20532 ;;
 20533                           
 20534                           	psect	text109
 20535  0172B8                     __ptext109:
 20536                           	opt stack 0
 20537  0172B8                     _getMode:
 20538                           	opt stack 23
 20539                           
 20540                           ;main.c: 110: switch (dip) {
 20541                           
 20542                           ; BSR set to: 0
 20543                           ;incstack = 0
 20544  0172B8  D018               	goto	l15999
 20545  0172BA                     l15981:
 20546                           
 20547                           ;main.c: 113: mode = 2;
 20548  0172BA  0E00               	movlw	0
 20549  0172BC  0101               	movlb	1	; () banked
 20550  0172BE  6F22               	movwf	(_mode+1)& (0+255),b
 20551  0172C0  0E02               	movlw	2
 20552  0172C2  6F21               	movwf	_mode& (0+255),b
 20553                           
 20554                           ; BSR set to: 1
 20555                           ;main.c: 114: return;
 20556  0172C4  0012               	return	
 20557  0172C6                     l15985:
 20558                           
 20559                           ;main.c: 116: mode = 3;
 20560  0172C6  0E00               	movlw	0
 20561  0172C8  0101               	movlb	1	; () banked
 20562  0172CA  6F22               	movwf	(_mode+1)& (0+255),b
 20563  0172CC  0E03               	movlw	3
 20564  0172CE  6F21               	movwf	_mode& (0+255),b
 20565                           
 20566                           ; BSR set to: 1
 20567                           ;main.c: 117: return;
 20568  0172D0  0012               	return	
 20569  0172D2                     l15989:
 20570                           
 20571                           ;main.c: 119: mode = 1;
 20572  0172D2  0E00               	movlw	0
 20573  0172D4  0101               	movlb	1	; () banked
 20574  0172D6  6F22               	movwf	(_mode+1)& (0+255),b
 20575  0172D8  0E01               	movlw	1
 20576  0172DA  6F21               	movwf	_mode& (0+255),b
 20577                           
 20578                           ; BSR set to: 1
 20579                           ;main.c: 120: return;
 20580  0172DC  0012               	return	
 20581  0172DE                     l15993:
 20582                           
 20583                           ;main.c: 122: mode = 0;
 20584  0172DE  0E00               	movlw	0
 20585  0172E0  0101               	movlb	1	; () banked
 20586  0172E2  6F22               	movwf	(_mode+1)& (0+255),b
 20587  0172E4  0E00               	movlw	0
 20588  0172E6  6F21               	movwf	_mode& (0+255),b
 20589                           
 20590                           ; BSR set to: 1
 20591                           ;main.c: 124: }
 20592                           
 20593                           ; BSR set to: 1
 20594                           ;main.c: 123: return;
 20595  0172E8  0012               	return	
 20596  0172EA                     l15999:
 20597  0172EA  C11F  F060         	movff	_dip,??_getMode
 20598  0172EE  C120  F061         	movff	_dip+1,??_getMode+1
 20599                           
 20600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20601                           ; Switch size 1, requested type "space"
 20602                           ; Number of cases is 1, Range of values is 0 to 0
 20603                           ; switch strategies available:
 20604                           ; Name         Instructions Cycles
 20605                           ; simple_byte            4     3 (average)
 20606                           ;	Chosen strategy is simple_byte
 20607  0172F2  0100               	movlb	0	; () banked
 20608  0172F4  5161               	movf	(??_getMode+1)& (0+255),w,b
 20609  0172F6  0A00               	xorlw	0	; case 0
 20610  0172F8  A4D8               	btfss	status,2,c
 20611  0172FA  D7F1               	goto	l15993
 20612                           
 20613                           ; BSR set to: 0
 20614                           ; Switch size 1, requested type "space"
 20615                           ; Number of cases is 3, Range of values is 1 to 4
 20616                           ; switch strategies available:
 20617                           ; Name         Instructions Cycles
 20618                           ; simple_byte           10     6 (average)
 20619                           ;	Chosen strategy is simple_byte
 20620  0172FC  0100               	movlb	0	; () banked
 20621  0172FE  5160               	movf	??_getMode& (0+255),w,b
 20622  017300  0A01               	xorlw	1	; case 1
 20623  017302  B4D8               	btfsc	status,2,c
 20624  017304  D7E6               	goto	l15989
 20625  017306  0A03               	xorlw	3	; case 2
 20626  017308  B4D8               	btfsc	status,2,c
 20627  01730A  D7D7               	goto	l15981
 20628  01730C  0A06               	xorlw	6	; case 4
 20629  01730E  B4D8               	btfsc	status,2,c
 20630  017310  D7DA               	goto	l15985
 20631  017312  D7E5               	goto	l15993
 20632  017314                     __end_of_getMode:
 20633                           	opt stack 0
 20634                           tosu	equ	0xFFF
 20635                           tosh	equ	0xFFE
 20636                           tosl	equ	0xFFD
 20637                           pclath	equ	0xFFA
 20638                           tblptru	equ	0xFF8
 20639                           tblptrh	equ	0xFF7
 20640                           tblptrl	equ	0xFF6
 20641                           tablat	equ	0xFF5
 20642                           prodh	equ	0xFF4
 20643                           prodl	equ	0xFF3
 20644                           intcon	equ	0xFF2
 20645                           indf0	equ	0xFEF
 20646                           postinc0	equ	0xFEE
 20647                           fsr0h	equ	0xFEA
 20648                           fsr0l	equ	0xFE9
 20649                           wreg	equ	0xFE8
 20650                           indf1	equ	0xFE7
 20651                           postdec1	equ	0xFE5
 20652                           fsr1h	equ	0xFE2
 20653                           fsr1l	equ	0xFE1
 20654                           indf2	equ	0xFDF
 20655                           postinc2	equ	0xFDE
 20656                           postdec2	equ	0xFDD
 20657                           plusw2	equ	0xFDB
 20658                           fsr2h	equ	0xFDA
 20659                           fsr2l	equ	0xFD9
 20660                           status	equ	0xFD8
 20661                           
 20662 ;; *************** function _displayStepMode *****************
 20663 ;; Defined at:
 20664 ;;		line 158 in file "main.c"
 20665 ;; Parameters:    Size  Location     Type
 20666 ;;		None
 20667 ;; Auto vars:     Size  Location     Type
 20668 ;;		None
 20669 ;; Return value:  Size  Location     Type
 20670 ;;                  1    wreg      void 
 20671 ;; Registers used:
 20672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20673 ;; Tracked objects:
 20674 ;;		On entry : 0/0
 20675 ;;		On exit  : 0/0
 20676 ;;		Unchanged: 0/0
 20677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20682 ;;Total ram usage:        0 bytes
 20683 ;; Hardware stack levels used:    1
 20684 ;; Hardware stack levels required when called:   13
 20685 ;; This function calls:
 20686 ;;		_printf
 20687 ;; This function is called by:
 20688 ;;		_main
 20689 ;; This function uses a non-reentrant model
 20690 ;;
 20691                           
 20692                           	psect	text110
 20693  01676C                     __ptext110:
 20694                           	opt stack 0
 20695  01676C                     _displayStepMode:
 20696                           	opt stack 17
 20697                           
 20698                           ;main.c: 159: printf("Current Mode:\n Step Mode\n");
 20699                           
 20700                           ;incstack = 0
 20701  01676C  0E60               	movlw	low STR_7
 20702  01676E  0100               	movlb	0	; () banked
 20703  016770  6FB0               	movwf	printf@f& (0+255),b
 20704  016772  0EFF               	movlw	high STR_7
 20705  016774  0100               	movlb	0	; () banked
 20706  016776  6FB1               	movwf	(printf@f+1)& (0+255),b
 20707  016778  EC00  F080         	call	_printf	;wreg free
 20708                           
 20709                           ;main.c: 160: printf("Steps: %d\n", steps);
 20710  01677C  0EEC               	movlw	low STR_8
 20711  01677E  0100               	movlb	0	; () banked
 20712  016780  6FB0               	movwf	printf@f& (0+255),b
 20713  016782  0EFF               	movlw	high STR_8
 20714  016784  0100               	movlb	0	; () banked
 20715  016786  6FB1               	movwf	(printf@f+1)& (0+255),b
 20716  016788  C0D4  F0B2         	movff	_steps,?_printf+2
 20717  01678C  C0D5  F0B3         	movff	_steps+1,?_printf+3
 20718  016790  EC00  F080         	call	_printf	;wreg free
 20719                           
 20720                           ;main.c: 161: printf("Remaining Steps: %d\n\n", remainingSteps);
 20721  016794  0EA9               	movlw	low STR_9
 20722  016796  0100               	movlb	0	; () banked
 20723  016798  6FB0               	movwf	printf@f& (0+255),b
 20724  01679A  0EFF               	movlw	high STR_9
 20725  01679C  0100               	movlb	0	; () banked
 20726  01679E  6FB1               	movwf	(printf@f+1)& (0+255),b
 20727  0167A0  C125  F0B2         	movff	_remainingSteps,?_printf+2
 20728  0167A4  C126  F0B3         	movff	_remainingSteps+1,?_printf+3
 20729  0167A8  EC00  F080         	call	_printf	;wreg free
 20730                           
 20731                           ;main.c: 162: if (leftState == 1 && steps > 0) {
 20732  0167AC  0100               	movlb	0	; () banked
 20733  0167AE  05E1               	decf	_leftState& (0+255),w,b
 20734  0167B0  A4D8               	btfss	status,2,c
 20735  0167B2  D00F               	goto	l16043
 20736                           
 20737                           ; BSR set to: 0
 20738  0167B4  0100               	movlb	0	; () banked
 20739  0167B6  BFD5               	btfsc	(_steps+1)& (0+255),7,b
 20740  0167B8  D00C               	goto	l16043
 20741  0167BA  0100               	movlb	0	; () banked
 20742  0167BC  51D5               	movf	(_steps+1)& (0+255),w,b
 20743  0167BE  E104               	bnz	u14170
 20744  0167C0  0100               	movlb	0	; () banked
 20745  0167C2  05D4               	decf	_steps& (0+255),w,b
 20746  0167C4  A0D8               	btfss	status,0,c
 20747  0167C6  D005               	goto	l16043
 20748  0167C8                     u14170:
 20749                           
 20750                           ; BSR set to: 0
 20751                           ;main.c: 163: steps--;
 20752  0167C8  0100               	movlb	0	; () banked
 20753  0167CA  07D4               	decf	_steps& (0+255),f,b
 20754  0167CC  A0D8               	btfss	status,0,c
 20755  0167CE  07D5               	decf	(_steps+1)& (0+255),f,b
 20756                           
 20757                           ;main.c: 164: } else if (rightState) {
 20758  0167D0  0012               	return	
 20759  0167D2                     l16043:
 20760                           
 20761                           ; BSR set to: 0
 20762  0167D2  0100               	movlb	0	; () banked
 20763  0167D4  51E0               	movf	_rightState& (0+255),w,b
 20764  0167D6  B4D8               	btfsc	status,2,c
 20765  0167D8  D004               	goto	l16047
 20766                           
 20767                           ; BSR set to: 0
 20768                           ;main.c: 165: steps++;
 20769  0167DA  0100               	movlb	0	; () banked
 20770  0167DC  4BD4               	infsnz	_steps& (0+255),f,b
 20771  0167DE  2BD5               	incf	(_steps+1)& (0+255),f,b
 20772                           
 20773                           ;main.c: 166: } else if (upState) {
 20774  0167E0  0012               	return	
 20775  0167E2                     l16047:
 20776                           
 20777                           ; BSR set to: 0
 20778  0167E2  0100               	movlb	0	; () banked
 20779  0167E4  51E3               	movf	_upState& (0+255),w,b
 20780  0167E6  B4D8               	btfsc	status,2,c
 20781  0167E8  0012               	return	
 20782                           
 20783                           ; BSR set to: 0
 20784                           ;main.c: 167: steps = 0;
 20785  0167EA  0E00               	movlw	0
 20786  0167EC  0100               	movlb	0	; () banked
 20787  0167EE  6FD5               	movwf	(_steps+1)& (0+255),b
 20788  0167F0  0E00               	movlw	0
 20789  0167F2  6FD4               	movwf	_steps& (0+255),b
 20790                           
 20791                           ; BSR set to: 0
 20792                           
 20793                           ; BSR set to: 0
 20794                           
 20795                           ; BSR set to: 0
 20796                           
 20797                           ; BSR set to: 0
 20798                           
 20799                           ; BSR set to: 0
 20800                           
 20801                           ;main.c: 168: } else if (downState) {
 20802  0167F4  0012               	return	
 20803  0167F6                     __end_of_displayStepMode:
 20804                           	opt stack 0
 20805                           tosu	equ	0xFFF
 20806                           tosh	equ	0xFFE
 20807                           tosl	equ	0xFFD
 20808                           pclath	equ	0xFFA
 20809                           tblptru	equ	0xFF8
 20810                           tblptrh	equ	0xFF7
 20811                           tblptrl	equ	0xFF6
 20812                           tablat	equ	0xFF5
 20813                           prodh	equ	0xFF4
 20814                           prodl	equ	0xFF3
 20815                           intcon	equ	0xFF2
 20816                           indf0	equ	0xFEF
 20817                           postinc0	equ	0xFEE
 20818                           fsr0h	equ	0xFEA
 20819                           fsr0l	equ	0xFE9
 20820                           wreg	equ	0xFE8
 20821                           indf1	equ	0xFE7
 20822                           postdec1	equ	0xFE5
 20823                           fsr1h	equ	0xFE2
 20824                           fsr1l	equ	0xFE1
 20825                           indf2	equ	0xFDF
 20826                           postinc2	equ	0xFDE
 20827                           postdec2	equ	0xFDD
 20828                           plusw2	equ	0xFDB
 20829                           fsr2h	equ	0xFDA
 20830                           fsr2l	equ	0xFD9
 20831                           status	equ	0xFD8
 20832                           
 20833 ;; *************** function _displaySID *****************
 20834 ;; Defined at:
 20835 ;;		line 129 in file "main.c"
 20836 ;; Parameters:    Size  Location     Type
 20837 ;;		None
 20838 ;; Auto vars:     Size  Location     Type
 20839 ;;		None
 20840 ;; Return value:  Size  Location     Type
 20841 ;;                  1    wreg      void 
 20842 ;; Registers used:
 20843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20844 ;; Tracked objects:
 20845 ;;		On entry : 0/0
 20846 ;;		On exit  : 0/0
 20847 ;;		Unchanged: 0/0
 20848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;Total ram usage:        0 bytes
 20854 ;; Hardware stack levels used:    1
 20855 ;; Hardware stack levels required when called:   13
 20856 ;; This function calls:
 20857 ;;		_Console_SetForecolour
 20858 ;;		_printf
 20859 ;; This function is called by:
 20860 ;;		_main
 20861 ;; This function uses a non-reentrant model
 20862 ;;
 20863                           
 20864                           	psect	text111
 20865  017D1C                     __ptext111:
 20866                           	opt stack 0
 20867  017D1C                     _displaySID:
 20868                           	opt stack 17
 20869                           
 20870                           ;main.c: 130: Console_SetForecolour(0x07E0);
 20871                           
 20872                           ; BSR set to: 0
 20873                           ;incstack = 0
 20874  017D1C  0E07               	movlw	7
 20875  017D1E  0100               	movlb	0	; () banked
 20876  017D20  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
 20877  017D22  0EE0               	movlw	224
 20878  017D24  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
 20879  017D26  ECE0  F0BF         	call	_Console_SetForecolour	;wreg free
 20880                           
 20881                           ;main.c: 131: printf("Jamin Early 99133391\n\n");
 20882  017D2A  0E92               	movlw	low STR_1
 20883  017D2C  0100               	movlb	0	; () banked
 20884  017D2E  6FB0               	movwf	printf@f& (0+255),b
 20885  017D30  0EFF               	movlw	high STR_1
 20886  017D32  0100               	movlb	0	; () banked
 20887  017D34  6FB1               	movwf	(printf@f+1)& (0+255),b
 20888  017D36  EC00  F080         	call	_printf	;wreg free
 20889  017D3A  0012               	return		;funcret
 20890  017D3C                     __end_of_displaySID:
 20891                           	opt stack 0
 20892                           tosu	equ	0xFFF
 20893                           tosh	equ	0xFFE
 20894                           tosl	equ	0xFFD
 20895                           pclath	equ	0xFFA
 20896                           tblptru	equ	0xFF8
 20897                           tblptrh	equ	0xFF7
 20898                           tblptrl	equ	0xFF6
 20899                           tablat	equ	0xFF5
 20900                           prodh	equ	0xFF4
 20901                           prodl	equ	0xFF3
 20902                           intcon	equ	0xFF2
 20903                           indf0	equ	0xFEF
 20904                           postinc0	equ	0xFEE
 20905                           fsr0h	equ	0xFEA
 20906                           fsr0l	equ	0xFE9
 20907                           wreg	equ	0xFE8
 20908                           indf1	equ	0xFE7
 20909                           postdec1	equ	0xFE5
 20910                           fsr1h	equ	0xFE2
 20911                           fsr1l	equ	0xFE1
 20912                           indf2	equ	0xFDF
 20913                           postinc2	equ	0xFDE
 20914                           postdec2	equ	0xFDD
 20915                           plusw2	equ	0xFDB
 20916                           fsr2h	equ	0xFDA
 20917                           fsr2l	equ	0xFD9
 20918                           status	equ	0xFD8
 20919                           
 20920 ;; *************** function _Console_SetForecolour *****************
 20921 ;; Defined at:
 20922 ;;		line 286 in file "Library/Console.c"
 20923 ;; Parameters:    Size  Location     Type
 20924 ;;  pColour         2    0[BANK0 ] unsigned short 
 20925 ;; Auto vars:     Size  Location     Type
 20926 ;;		None
 20927 ;; Return value:  Size  Location     Type
 20928 ;;                  1    wreg      void 
 20929 ;; Registers used:
 20930 ;;		None
 20931 ;; Tracked objects:
 20932 ;;		On entry : 0/0
 20933 ;;		On exit  : 0/0
 20934 ;;		Unchanged: 0/0
 20935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20940 ;;Total ram usage:        2 bytes
 20941 ;; Hardware stack levels used:    1
 20942 ;; Hardware stack levels required when called:    7
 20943 ;; This function calls:
 20944 ;;		Nothing
 20945 ;; This function is called by:
 20946 ;;		_displaySID
 20947 ;;		_main
 20948 ;; This function uses a non-reentrant model
 20949 ;;
 20950                           
 20951                           	psect	text112
 20952  017FC0                     __ptext112:
 20953                           	opt stack 0
 20954  017FC0                     _Console_SetForecolour:
 20955                           	opt stack 22
 20956                           
 20957                           ;Console.c: 289: gForecolour = pColour;
 20958                           
 20959                           ;incstack = 0
 20960  017FC0  C060  F0FA         	movff	Console_SetForecolour@pColour,_gForecolour
 20961  017FC4  C061  F0FB         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 20962  017FC8  0012               	return		;funcret
 20963  017FCA                     __end_of_Console_SetForecolour:
 20964                           	opt stack 0
 20965                           tosu	equ	0xFFF
 20966                           tosh	equ	0xFFE
 20967                           tosl	equ	0xFFD
 20968                           pclath	equ	0xFFA
 20969                           tblptru	equ	0xFF8
 20970                           tblptrh	equ	0xFF7
 20971                           tblptrl	equ	0xFF6
 20972                           tablat	equ	0xFF5
 20973                           prodh	equ	0xFF4
 20974                           prodl	equ	0xFF3
 20975                           intcon	equ	0xFF2
 20976                           indf0	equ	0xFEF
 20977                           postinc0	equ	0xFEE
 20978                           fsr0h	equ	0xFEA
 20979                           fsr0l	equ	0xFE9
 20980                           wreg	equ	0xFE8
 20981                           indf1	equ	0xFE7
 20982                           postdec1	equ	0xFE5
 20983                           fsr1h	equ	0xFE2
 20984                           fsr1l	equ	0xFE1
 20985                           indf2	equ	0xFDF
 20986                           postinc2	equ	0xFDE
 20987                           postdec2	equ	0xFDD
 20988                           plusw2	equ	0xFDB
 20989                           fsr2h	equ	0xFDA
 20990                           fsr2l	equ	0xFD9
 20991                           status	equ	0xFD8
 20992                           
 20993 ;; *************** function _displayPositionMode *****************
 20994 ;; Defined at:
 20995 ;;		line 175 in file "main.c"
 20996 ;; Parameters:    Size  Location     Type
 20997 ;;		None
 20998 ;; Auto vars:     Size  Location     Type
 20999 ;;  angleDegrees    4   88[BANK0 ] float 
 21000 ;; Return value:  Size  Location     Type
 21001 ;;                  1    wreg      void 
 21002 ;; Registers used:
 21003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21004 ;; Tracked objects:
 21005 ;;		On entry : 0/0
 21006 ;;		On exit  : 0/0
 21007 ;;		Unchanged: 0/0
 21008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21010 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21013 ;;Total ram usage:        4 bytes
 21014 ;; Hardware stack levels used:    1
 21015 ;; Hardware stack levels required when called:   13
 21016 ;; This function calls:
 21017 ;;		___flmul
 21018 ;;		___xxtofl
 21019 ;;		_printf
 21020 ;; This function is called by:
 21021 ;;		_main
 21022 ;; This function uses a non-reentrant model
 21023 ;;
 21024                           
 21025                           	psect	text113
 21026  01698A                     __ptext113:
 21027                           	opt stack 0
 21028  01698A                     _displayPositionMode:
 21029                           	opt stack 17
 21030                           
 21031                           ;main.c: 176: printf("Current Mode:\n Position Mode\n\n");
 21032                           
 21033                           ;incstack = 0
 21034  01698A  0E27               	movlw	low STR_10
 21035  01698C  0100               	movlb	0	; () banked
 21036  01698E  6FB0               	movwf	printf@f& (0+255),b
 21037  016990  0EFF               	movlw	high STR_10
 21038  016992  0100               	movlb	0	; () banked
 21039  016994  6FB1               	movwf	(printf@f+1)& (0+255),b
 21040  016996  EC00  F080         	call	_printf	;wreg free
 21041                           
 21042                           ;main.c: 177: float angleDegrees = ((float) angle * 1.8);
 21043  01699A  C0D2  F060         	movff	_angle,___xxtofl@val
 21044  01699E  C0D3  F061         	movff	_angle+1,___xxtofl@val+1
 21045  0169A2  0100               	movlb	0	; () banked
 21046  0169A4  0E00               	movlw	0
 21047  0169A6  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21048  0169A8  0EFF               	movlw	-1
 21049  0169AA  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21050  0169AC  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21051  0169AE  0E01               	movlw	1
 21052  0169B0  ECAC  F09B         	call	___xxtofl
 21053  0169B4  C060  F06E         	movff	?___xxtofl,___flmul@b
 21054  0169B8  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 21055  0169BC  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 21056  0169C0  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 21057  0169C4  0E66               	movlw	102
 21058  0169C6  0100               	movlb	0	; () banked
 21059  0169C8  6F72               	movwf	___flmul@a& (0+255),b
 21060  0169CA  0E66               	movlw	102
 21061  0169CC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21062  0169CE  0EE6               	movlw	230
 21063  0169D0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21064  0169D2  0E3F               	movlw	63
 21065  0169D4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21066  0169D6  EC2A  F089         	call	___flmul	;wreg free
 21067  0169DA  C06E  F0B8         	movff	?___flmul,displayPositionMode@angleDegrees
 21068  0169DE  C06F  F0B9         	movff	?___flmul+1,displayPositionMode@angleDegrees+1
 21069  0169E2  C070  F0BA         	movff	?___flmul+2,displayPositionMode@angleDegrees+2
 21070  0169E6  C071  F0BB         	movff	?___flmul+3,displayPositionMode@angleDegrees+3
 21071                           
 21072                           ;main.c: 178: printf("Target Angle:\n %f \n", angleDegrees);
 21073  0169EA  0EBF               	movlw	low STR_11
 21074  0169EC  0100               	movlb	0	; () banked
 21075  0169EE  6FB0               	movwf	printf@f& (0+255),b
 21076  0169F0  0EFF               	movlw	high STR_11
 21077  0169F2  0100               	movlb	0	; () banked
 21078  0169F4  6FB1               	movwf	(printf@f+1)& (0+255),b
 21079  0169F6  C0B8  F0B2         	movff	displayPositionMode@angleDegrees,?_printf+2
 21080  0169FA  C0B9  F0B3         	movff	displayPositionMode@angleDegrees+1,?_printf+3
 21081  0169FE  C0BA  F0B4         	movff	displayPositionMode@angleDegrees+2,?_printf+4
 21082  016A02  C0BB  F0B5         	movff	displayPositionMode@angleDegrees+3,?_printf+5
 21083  016A06  EC00  F080         	call	_printf	;wreg free
 21084  016A0A  0012               	return		;funcret
 21085  016A0C                     __end_of_displayPositionMode:
 21086                           	opt stack 0
 21087                           tosu	equ	0xFFF
 21088                           tosh	equ	0xFFE
 21089                           tosl	equ	0xFFD
 21090                           pclath	equ	0xFFA
 21091                           tblptru	equ	0xFF8
 21092                           tblptrh	equ	0xFF7
 21093                           tblptrl	equ	0xFF6
 21094                           tablat	equ	0xFF5
 21095                           prodh	equ	0xFF4
 21096                           prodl	equ	0xFF3
 21097                           intcon	equ	0xFF2
 21098                           indf0	equ	0xFEF
 21099                           postinc0	equ	0xFEE
 21100                           fsr0h	equ	0xFEA
 21101                           fsr0l	equ	0xFE9
 21102                           wreg	equ	0xFE8
 21103                           indf1	equ	0xFE7
 21104                           postdec1	equ	0xFE5
 21105                           fsr1h	equ	0xFE2
 21106                           fsr1l	equ	0xFE1
 21107                           indf2	equ	0xFDF
 21108                           postinc2	equ	0xFDE
 21109                           postdec2	equ	0xFDD
 21110                           plusw2	equ	0xFDB
 21111                           fsr2h	equ	0xFDA
 21112                           fsr2l	equ	0xFD9
 21113                           status	equ	0xFD8
 21114                           
 21115 ;; *************** function _displayNullMode *****************
 21116 ;; Defined at:
 21117 ;;		line 184 in file "main.c"
 21118 ;; Parameters:    Size  Location     Type
 21119 ;;		None
 21120 ;; Auto vars:     Size  Location     Type
 21121 ;;		None
 21122 ;; Return value:  Size  Location     Type
 21123 ;;                  1    wreg      void 
 21124 ;; Registers used:
 21125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21126 ;; Tracked objects:
 21127 ;;		On entry : 0/0
 21128 ;;		On exit  : 0/0
 21129 ;;		Unchanged: 0/0
 21130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21135 ;;Total ram usage:        0 bytes
 21136 ;; Hardware stack levels used:    1
 21137 ;; Hardware stack levels required when called:   13
 21138 ;; This function calls:
 21139 ;;		_printf
 21140 ;; This function is called by:
 21141 ;;		_main
 21142 ;; This function uses a non-reentrant model
 21143 ;;
 21144                           
 21145                           	psect	text114
 21146  0177D0                     __ptext114:
 21147                           	opt stack 0
 21148  0177D0                     _displayNullMode:
 21149                           	opt stack 17
 21150                           
 21151                           ;main.c: 185: printf("Current Mode:\n Undefined\n");
 21152                           
 21153                           ;incstack = 0
 21154  0177D0  0E46               	movlw	low STR_12
 21155  0177D2  0100               	movlb	0	; () banked
 21156  0177D4  6FB0               	movwf	printf@f& (0+255),b
 21157  0177D6  0EFF               	movlw	high STR_12
 21158  0177D8  0100               	movlb	0	; () banked
 21159  0177DA  6FB1               	movwf	(printf@f+1)& (0+255),b
 21160  0177DC  EC00  F080         	call	_printf	;wreg free
 21161                           
 21162                           ;main.c: 186: printf("                      \n");
 21163  0177E0  0E7A               	movlw	low STR_13
 21164  0177E2  0100               	movlb	0	; () banked
 21165  0177E4  6FB0               	movwf	printf@f& (0+255),b
 21166  0177E6  0EFF               	movlw	high STR_13
 21167  0177E8  0100               	movlb	0	; () banked
 21168  0177EA  6FB1               	movwf	(printf@f+1)& (0+255),b
 21169  0177EC  EC00  F080         	call	_printf	;wreg free
 21170                           
 21171                           ;main.c: 187: printf("                      \n");
 21172  0177F0  0E7A               	movlw	low STR_13
 21173  0177F2  0100               	movlb	0	; () banked
 21174  0177F4  6FB0               	movwf	printf@f& (0+255),b
 21175  0177F6  0EFF               	movlw	high STR_13
 21176  0177F8  0100               	movlb	0	; () banked
 21177  0177FA  6FB1               	movwf	(printf@f+1)& (0+255),b
 21178  0177FC  EC00  F080         	call	_printf	;wreg free
 21179                           
 21180                           ;main.c: 188: printf("                      \n");
 21181  017800  0E7A               	movlw	low STR_13
 21182  017802  0100               	movlb	0	; () banked
 21183  017804  6FB0               	movwf	printf@f& (0+255),b
 21184  017806  0EFF               	movlw	high STR_13
 21185  017808  0100               	movlb	0	; () banked
 21186  01780A  6FB1               	movwf	(printf@f+1)& (0+255),b
 21187  01780C  EC00  F080         	call	_printf	;wreg free
 21188  017810  0012               	return		;funcret
 21189  017812                     __end_of_displayNullMode:
 21190                           	opt stack 0
 21191                           tosu	equ	0xFFF
 21192                           tosh	equ	0xFFE
 21193                           tosl	equ	0xFFD
 21194                           pclath	equ	0xFFA
 21195                           tblptru	equ	0xFF8
 21196                           tblptrh	equ	0xFF7
 21197                           tblptrl	equ	0xFF6
 21198                           tablat	equ	0xFF5
 21199                           prodh	equ	0xFF4
 21200                           prodl	equ	0xFF3
 21201                           intcon	equ	0xFF2
 21202                           indf0	equ	0xFEF
 21203                           postinc0	equ	0xFEE
 21204                           fsr0h	equ	0xFEA
 21205                           fsr0l	equ	0xFE9
 21206                           wreg	equ	0xFE8
 21207                           indf1	equ	0xFE7
 21208                           postdec1	equ	0xFE5
 21209                           fsr1h	equ	0xFE2
 21210                           fsr1l	equ	0xFE1
 21211                           indf2	equ	0xFDF
 21212                           postinc2	equ	0xFDE
 21213                           postdec2	equ	0xFDD
 21214                           plusw2	equ	0xFDB
 21215                           fsr2h	equ	0xFDA
 21216                           fsr2l	equ	0xFD9
 21217                           status	equ	0xFD8
 21218                           
 21219 ;; *************** function _displayContinuousMode *****************
 21220 ;; Defined at:
 21221 ;;		line 136 in file "main.c"
 21222 ;; Parameters:    Size  Location     Type
 21223 ;;		None
 21224 ;; Auto vars:     Size  Location     Type
 21225 ;;		None
 21226 ;; Return value:  Size  Location     Type
 21227 ;;                  1    wreg      void 
 21228 ;; Registers used:
 21229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21230 ;; Tracked objects:
 21231 ;;		On entry : 0/0
 21232 ;;		On exit  : 0/0
 21233 ;;		Unchanged: 0/0
 21234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21239 ;;Total ram usage:        0 bytes
 21240 ;; Hardware stack levels used:    1
 21241 ;; Hardware stack levels required when called:   13
 21242 ;; This function calls:
 21243 ;;		_printf
 21244 ;; This function is called by:
 21245 ;;		_main
 21246 ;; This function uses a non-reentrant model
 21247 ;;
 21248                           
 21249                           	psect	text115
 21250  0156C4                     __ptext115:
 21251                           	opt stack 0
 21252  0156C4                     _displayContinuousMode:
 21253                           	opt stack 17
 21254                           
 21255                           ;main.c: 137: printf("Current Mode:\n Continuous Mode\n");
 21256                           
 21257                           ;incstack = 0
 21258  0156C4  0E07               	movlw	low STR_2
 21259  0156C6  0100               	movlb	0	; () banked
 21260  0156C8  6FB0               	movwf	printf@f& (0+255),b
 21261  0156CA  0EFF               	movlw	high STR_2
 21262  0156CC  0100               	movlb	0	; () banked
 21263  0156CE  6FB1               	movwf	(printf@f+1)& (0+255),b
 21264  0156D0  EC00  F080         	call	_printf	;wreg free
 21265                           
 21266                           ;main.c: 138: printf("Direction: ");
 21267  0156D4  0EE0               	movlw	low STR_3
 21268  0156D6  0100               	movlb	0	; () banked
 21269  0156D8  6FB0               	movwf	printf@f& (0+255),b
 21270  0156DA  0EFF               	movlw	high STR_3
 21271  0156DC  0100               	movlb	0	; () banked
 21272  0156DE  6FB1               	movwf	(printf@f+1)& (0+255),b
 21273  0156E0  EC00  F080         	call	_printf	;wreg free
 21274                           
 21275                           ;main.c: 139: if (direction > 0) {
 21276  0156E4  0101               	movlb	1	; () banked
 21277  0156E6  BFFB               	btfsc	(_direction+1)& (0+255),7,b
 21278  0156E8  D010               	goto	l16015
 21279  0156EA  0101               	movlb	1	; () banked
 21280  0156EC  51FB               	movf	(_direction+1)& (0+255),w,b
 21281  0156EE  E104               	bnz	u14100
 21282  0156F0  0101               	movlb	1	; () banked
 21283  0156F2  05FA               	decf	_direction& (0+255),w,b
 21284  0156F4  A0D8               	btfss	status,0,c
 21285  0156F6  D009               	goto	l16015
 21286  0156F8                     u14100:
 21287                           
 21288                           ; BSR set to: 1
 21289                           ;main.c: 140: printf("CW\n");
 21290  0156F8  0EF8               	movlw	low (STR_5+1)
 21291  0156FA  0100               	movlb	0	; () banked
 21292  0156FC  6FB0               	movwf	printf@f& (0+255),b
 21293  0156FE  0EFF               	movlw	high (STR_5+1)
 21294  015700  0100               	movlb	0	; () banked
 21295  015702  6FB1               	movwf	(printf@f+1)& (0+255),b
 21296  015704  EC00  F080         	call	_printf	;wreg free
 21297                           
 21298                           ;main.c: 141: } else {
 21299  015708  D008               	goto	l2062
 21300  01570A                     l16015:
 21301                           
 21302                           ;main.c: 142: printf("CCW\n");
 21303  01570A  0EF7               	movlw	low STR_5
 21304  01570C  0100               	movlb	0	; () banked
 21305  01570E  6FB0               	movwf	printf@f& (0+255),b
 21306  015710  0EFF               	movlw	high STR_5
 21307  015712  0100               	movlb	0	; () banked
 21308  015714  6FB1               	movwf	(printf@f+1)& (0+255),b
 21309  015716  EC00  F080         	call	_printf	;wreg free
 21310  01571A                     l2062:
 21311                           
 21312                           ;main.c: 143: }
 21313                           ;main.c: 144: printf("Speed: %dHz\n", speed);
 21314  01571A  0ED3               	movlw	low STR_6
 21315  01571C  0100               	movlb	0	; () banked
 21316  01571E  6FB0               	movwf	printf@f& (0+255),b
 21317  015720  0EFF               	movlw	high STR_6
 21318  015722  0100               	movlb	0	; () banked
 21319  015724  6FB1               	movwf	(printf@f+1)& (0+255),b
 21320  015726  C0D6  F0B2         	movff	_speed,?_printf+2
 21321  01572A  C0D7  F0B3         	movff	_speed+1,?_printf+3
 21322  01572E  EC00  F080         	call	_printf	;wreg free
 21323                           
 21324                           ;main.c: 145: if (leftState) {
 21325  015732  0100               	movlb	0	; () banked
 21326  015734  51E1               	movf	_leftState& (0+255),w,b
 21327  015736  B4D8               	btfsc	status,2,c
 21328  015738  D006               	goto	l16021
 21329                           
 21330                           ; BSR set to: 0
 21331                           ;main.c: 146: direction = -200;
 21332  01573A  0EFF               	movlw	255
 21333  01573C  0101               	movlb	1	; () banked
 21334  01573E  6FFB               	movwf	(_direction+1)& (0+255),b
 21335  015740  0E38               	movlw	56
 21336  015742  6FFA               	movwf	_direction& (0+255),b
 21337                           
 21338                           ;main.c: 147: } else if (rightState) {
 21339  015744  0012               	return	
 21340  015746                     l16021:
 21341  015746  0100               	movlb	0	; () banked
 21342  015748  51E0               	movf	_rightState& (0+255),w,b
 21343  01574A  B4D8               	btfsc	status,2,c
 21344  01574C  D006               	goto	l16025
 21345                           
 21346                           ; BSR set to: 0
 21347                           ;main.c: 148: direction = 200;
 21348  01574E  0E00               	movlw	0
 21349  015750  0101               	movlb	1	; () banked
 21350  015752  6FFB               	movwf	(_direction+1)& (0+255),b
 21351  015754  0EC8               	movlw	200
 21352  015756  6FFA               	movwf	_direction& (0+255),b
 21353                           
 21354                           ;main.c: 149: } else if (upState) {
 21355  015758  0012               	return	
 21356  01575A                     l16025:
 21357  01575A  0100               	movlb	0	; () banked
 21358  01575C  51E3               	movf	_upState& (0+255),w,b
 21359  01575E  B4D8               	btfsc	status,2,c
 21360  015760  D004               	goto	l16029
 21361                           
 21362                           ; BSR set to: 0
 21363                           ;main.c: 150: speed++;
 21364  015762  0100               	movlb	0	; () banked
 21365  015764  4BD6               	infsnz	_speed& (0+255),f,b
 21366  015766  2BD7               	incf	(_speed+1)& (0+255),f,b
 21367                           
 21368                           ;main.c: 151: } else if (downState && speed > 0) {
 21369  015768  0012               	return	
 21370  01576A                     l16029:
 21371                           
 21372                           ; BSR set to: 0
 21373  01576A  0100               	movlb	0	; () banked
 21374  01576C  51E2               	movf	_downState& (0+255),w,b
 21375  01576E  B4D8               	btfsc	status,2,c
 21376  015770  0012               	return	
 21377                           
 21378                           ; BSR set to: 0
 21379  015772  0100               	movlb	0	; () banked
 21380  015774  BFD7               	btfsc	(_speed+1)& (0+255),7,b
 21381  015776  0012               	return	
 21382  015778  0100               	movlb	0	; () banked
 21383  01577A  51D7               	movf	(_speed+1)& (0+255),w,b
 21384  01577C  E104               	bnz	u14150
 21385  01577E  0100               	movlb	0	; () banked
 21386  015780  05D6               	decf	_speed& (0+255),w,b
 21387  015782  A0D8               	btfss	status,0,c
 21388  015784  0012               	return	
 21389  015786                     u14150:
 21390                           
 21391                           ; BSR set to: 0
 21392                           ;main.c: 152: speed--;
 21393  015786  0100               	movlb	0	; () banked
 21394  015788  07D6               	decf	_speed& (0+255),f,b
 21395  01578A  A0D8               	btfss	status,0,c
 21396  01578C  07D7               	decf	(_speed+1)& (0+255),f,b
 21397                           
 21398                           ; BSR set to: 0
 21399                           
 21400                           ; BSR set to: 0
 21401                           
 21402                           ; BSR set to: 0
 21403  01578E  0012               	return	
 21404  015790                     __end_of_displayContinuousMode:
 21405                           	opt stack 0
 21406                           tosu	equ	0xFFF
 21407                           tosh	equ	0xFFE
 21408                           tosl	equ	0xFFD
 21409                           pclath	equ	0xFFA
 21410                           tblptru	equ	0xFF8
 21411                           tblptrh	equ	0xFF7
 21412                           tblptrl	equ	0xFF6
 21413                           tablat	equ	0xFF5
 21414                           prodh	equ	0xFF4
 21415                           prodl	equ	0xFF3
 21416                           intcon	equ	0xFF2
 21417                           indf0	equ	0xFEF
 21418                           postinc0	equ	0xFEE
 21419                           fsr0h	equ	0xFEA
 21420                           fsr0l	equ	0xFE9
 21421                           wreg	equ	0xFE8
 21422                           indf1	equ	0xFE7
 21423                           postdec1	equ	0xFE5
 21424                           fsr1h	equ	0xFE2
 21425                           fsr1l	equ	0xFE1
 21426                           indf2	equ	0xFDF
 21427                           postinc2	equ	0xFDE
 21428                           postdec2	equ	0xFDD
 21429                           plusw2	equ	0xFDB
 21430                           fsr2h	equ	0xFDA
 21431                           fsr2l	equ	0xFD9
 21432                           status	equ	0xFD8
 21433                           
 21434 ;; *************** function _printf *****************
 21435 ;; Defined at:
 21436 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
 21437 ;; Parameters:    Size  Location     Type
 21438 ;;  f               2   80[BANK0 ] PTR const unsigned char 
 21439 ;;		 -> STR_17(4), STR_16(3), STR_15(24), STR_14(24), 
 21440 ;;		 -> STR_13(24), STR_12(26), STR_11(20), STR_10(31), 
 21441 ;;		 -> STR_9(22), STR_8(11), STR_7(26), STR_6(13), 
 21442 ;;		 -> STR_5(5), STR_4(4), STR_3(12), STR_2(32), 
 21443 ;;		 -> STR_1(23), 
 21444 ;; Auto vars:     Size  Location     Type
 21445 ;;  fval            4   20[BANK2 ] PTR const unsigned char 
 21446 ;;  tmpval          4   16[BANK2 ] struct .
 21447 ;;  val             4   10[BANK2 ] unsigned long 
 21448 ;;  cp              3    0        PTR const unsigned char 
 21449 ;;  exp             2   14[BANK2 ] int 
 21450 ;;  prec            2    8[BANK2 ] int 
 21451 ;;  flag            2    6[BANK2 ] unsigned short 
 21452 ;;  ap              2    4[BANK2 ] PTR void [1]
 21453 ;;		 -> ?_printf(2), 
 21454 ;;  len             2    0        unsigned int 
 21455 ;;  width           2    0        int 
 21456 ;;  c               1   24[BANK2 ] char 
 21457 ;;  d               1    0        unsigned char 
 21458 ;; Return value:  Size  Location     Type
 21459 ;;                  2   80[BANK0 ] int 
 21460 ;; Registers used:
 21461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21462 ;; Tracked objects:
 21463 ;;		On entry : 0/0
 21464 ;;		On exit  : 0/0
 21465 ;;		Unchanged: 0/0
 21466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21467 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21468 ;;      Locals:         0       0       0      25       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21469 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21470 ;;      Totals:         0       8       0      25       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21471 ;;Total ram usage:       33 bytes
 21472 ;; Hardware stack levels used:    1
 21473 ;; Hardware stack levels required when called:   12
 21474 ;; This function calls:
 21475 ;;		___awdiv
 21476 ;;		___fladd
 21477 ;;		___flge
 21478 ;;		___flmul
 21479 ;;		___flneg
 21480 ;;		___flsub
 21481 ;;		___fltol
 21482 ;;		___lldiv
 21483 ;;		___llmod
 21484 ;;		___wmul
 21485 ;;		___xxtofl
 21486 ;;		__div_to_l_
 21487 ;;		__tdiv_to_l_
 21488 ;;		_fround
 21489 ;;		_putch
 21490 ;;		_scale
 21491 ;; This function is called by:
 21492 ;;		_displaySID
 21493 ;;		_displayContinuousMode
 21494 ;;		_displayStepMode
 21495 ;;		_displayPositionMode
 21496 ;;		_displayNullMode
 21497 ;;		_main
 21498 ;; This function uses a non-reentrant model
 21499 ;;
 21500                           
 21501                           	psect	text116
 21502  010000                     __ptext116:
 21503                           	opt stack 0
 21504  010000                     _printf:
 21505                           	opt stack 18
 21506                           
 21507                           ;doprnt.c: 466: va_list ap;
 21508                           ;doprnt.c: 499: signed char c;
 21509                           ;doprnt.c: 501: int width;
 21510                           ;doprnt.c: 504: int prec;
 21511                           ;doprnt.c: 508: unsigned short flag;
 21512                           ;doprnt.c: 515: char d;
 21513                           ;doprnt.c: 516: double fval;
 21514                           ;doprnt.c: 517: int exp;
 21515                           ;doprnt.c: 523: union {
 21516                           ;doprnt.c: 524: unsigned long vd;
 21517                           ;doprnt.c: 525: double integ;
 21518                           ;doprnt.c: 526: } tmpval;
 21519                           ;doprnt.c: 528: unsigned long val;
 21520                           ;doprnt.c: 529: unsigned len;
 21521                           ;doprnt.c: 530: const char * cp;
 21522                           ;doprnt.c: 533: *ap = __va_start();
 21523                           
 21524                           ;incstack = 0
 21525  010000  0EB2               	movlw	low (?_printf+2)
 21526  010002  0102               	movlb	2	; () banked
 21527  010004  6F68               	movwf	printf@ap& (0+255),b
 21528  010006  0E00               	movlw	high (?_printf+2)
 21529  010008  0102               	movlb	2	; () banked
 21530  01000A  6F69               	movwf	(printf@ap+1)& (0+255),b
 21531                           
 21532                           ;doprnt.c: 536: while(c = *f++) {
 21533  01000C  EF37  F084         	goto	l15631
 21534  010010                     l15443:
 21535                           
 21536                           ; BSR set to: 2
 21537                           ;doprnt.c: 538: if(c != '%')
 21538  010010  0E25               	movlw	37
 21539  010012  0102               	movlb	2	; () banked
 21540  010014  197C               	xorwf	printf@c& (0+255),w,b
 21541  010016  B4D8               	btfsc	status,2,c
 21542  010018  D006               	goto	l15447
 21543                           
 21544                           ; BSR set to: 2
 21545                           ;doprnt.c: 540: {
 21546                           ;doprnt.c: 541: (putch(c) );
 21547  01001A  0102               	movlb	2	; () banked
 21548  01001C  517C               	movf	printf@c& (0+255),w,b
 21549  01001E  ECB1  F0BF         	call	_putch
 21550                           
 21551                           ;doprnt.c: 542: continue;
 21552  010022  EF37  F084         	goto	l15631
 21553  010026                     l15447:
 21554                           
 21555                           ;doprnt.c: 543: }
 21556                           ;doprnt.c: 548: flag = 0;
 21557  010026  0E00               	movlw	0
 21558  010028  0102               	movlb	2	; () banked
 21559  01002A  6F6B               	movwf	(printf@flag+1)& (0+255),b
 21560  01002C  0E00               	movlw	0
 21561  01002E  6F6A               	movwf	printf@flag& (0+255),b
 21562                           
 21563                           ;doprnt.c: 635: switch(c = *f++) {
 21564  010030  D015               	goto	l15459
 21565  010032                     l15449:
 21566                           
 21567                           ; BSR set to: 2
 21568                           ;doprnt.c: 663: flag |= 0x400;
 21569  010032  0102               	movlb	2	; () banked
 21570  010034  856B               	bsf	(printf@flag+1)& (0+255),2,b
 21571                           
 21572                           ; BSR set to: 2
 21573                           ;doprnt.c: 698: case 'i':
 21574                           ;doprnt.c: 699: break;
 21575                           
 21576                           ; BSR set to: 2
 21577                           
 21578                           ;doprnt.c: 697: case 'd':
 21579                           
 21580                           ;doprnt.c: 664: break;
 21581  010036  D02F               	goto	l15461
 21582  010038                     l15451:
 21583                           
 21584                           ; BSR set to: 2
 21585                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 21586  010038  C268  FFD9         	movff	printf@ap,fsr2l
 21587  01003C  C269  FFDA         	movff	printf@ap+1,fsr2h
 21588  010040  50DF               	movf	indf2,w,c
 21589  010042  0102               	movlb	2	; () banked
 21590  010044  6F7C               	movwf	printf@c& (0+255),b
 21591                           
 21592                           ; BSR set to: 2
 21593  010046  0E02               	movlw	2
 21594  010048  0102               	movlb	2	; () banked
 21595  01004A  2768               	addwf	printf@ap& (0+255),f,b
 21596  01004C  0E00               	movlw	0
 21597  01004E  2369               	addwfc	(printf@ap+1)& (0+255),f,b
 21598  010050                     l15455:
 21599                           
 21600                           ; BSR set to: 2
 21601                           ;doprnt.c: 809: (putch(c) );
 21602  010050  0102               	movlb	2	; () banked
 21603  010052  517C               	movf	printf@c& (0+255),w,b
 21604  010054  ECB1  F0BF         	call	_putch
 21605                           
 21606                           ;doprnt.c: 810: continue;
 21607  010058  EF37  F084         	goto	l15631
 21608  01005C                     l15459:
 21609  01005C  C0B0  FFF6         	movff	printf@f,tblptrl
 21610  010060  C0B1  FFF7         	movff	printf@f+1,tblptrh
 21611  010064  0100               	movlb	0	; () banked
 21612  010066  4BB0               	infsnz	printf@f& (0+255),f,b
 21613  010068  2BB1               	incf	(printf@f+1)& (0+255),f,b
 21614  01006A                     	if	0	;tblptru may be non-zero
 21615  01006A                     	endif
 21616  01006A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21617  01006A  0E00               	movlw	low (__mediumconst shr (0+16))
 21618  01006C  6EF8               	movwf	tblptru,c
 21619  01006E                     	endif
 21620  01006E  0008               	tblrd		*
 21621  010070  CFF5 F27C          	movff	tablat,printf@c
 21622  010074  0102               	movlb	2	; () banked
 21623  010076  517C               	movf	printf@c& (0+255),w,b
 21624                           
 21625                           ; Switch size 1, requested type "space"
 21626                           ; Number of cases is 5, Range of values is 0 to 105
 21627                           ; switch strategies available:
 21628                           ; Name         Instructions Cycles
 21629                           ; simple_byte           16     9 (average)
 21630                           ;	Chosen strategy is simple_byte
 21631  010078  0A00               	xorlw	0	; case 0
 21632  01007A  B4D8               	btfsc	status,2,c
 21633  01007C  0012               	return	
 21634  01007E  0A63               	xorlw	99	; case 99
 21635  010080  B4D8               	btfsc	status,2,c
 21636  010082  D7DA               	goto	l15451
 21637  010084  0A07               	xorlw	7	; case 100
 21638  010086  B4D8               	btfsc	status,2,c
 21639  010088  D006               	goto	l15461
 21640  01008A  0A02               	xorlw	2	; case 102
 21641  01008C  B4D8               	btfsc	status,2,c
 21642  01008E  D7D1               	goto	l15449
 21643  010090  0A0F               	xorlw	15	; case 105
 21644  010092  A4D8               	btfss	status,2,c
 21645  010094  D7DD               	goto	l15455
 21646  010096                     l15461:
 21647                           
 21648                           ;doprnt.c: 825: if(flag & (0x700)) {
 21649  010096  0E07               	movlw	7
 21650  010098  0102               	movlb	2	; () banked
 21651  01009A  156B               	andwf	(printf@flag+1)& (0+255),w,b
 21652  01009C  B4D8               	btfsc	status,2,c
 21653  01009E  D32E               	goto	l15595
 21654                           
 21655                           ; BSR set to: 2
 21656                           ;doprnt.c: 829: prec = 6;
 21657  0100A0  0E00               	movlw	0
 21658  0100A2  0102               	movlb	2	; () banked
 21659  0100A4  6F6D               	movwf	(printf@prec+1)& (0+255),b
 21660  0100A6  0E06               	movlw	6
 21661  0100A8  6F6C               	movwf	printf@prec& (0+255),b
 21662                           
 21663                           ; BSR set to: 2
 21664                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 21665  0100AA  C268  FFD9         	movff	printf@ap,fsr2l
 21666  0100AE  C269  FFDA         	movff	printf@ap+1,fsr2h
 21667  0100B2  CFDE F278          	movff	postinc2,printf@fval
 21668  0100B6  CFDE F279          	movff	postinc2,printf@fval+1
 21669  0100BA  CFDE F27A          	movff	postinc2,printf@fval+2
 21670  0100BE  CFDE F27B          	movff	postinc2,printf@fval+3
 21671                           
 21672                           ; BSR set to: 2
 21673  0100C2  0E04               	movlw	4
 21674  0100C4  0102               	movlb	2	; () banked
 21675  0100C6  2768               	addwf	printf@ap& (0+255),f,b
 21676  0100C8  0E00               	movlw	0
 21677  0100CA  2369               	addwfc	(printf@ap+1)& (0+255),f,b
 21678                           
 21679                           ; BSR set to: 2
 21680                           ;doprnt.c: 831: if(fval < 0.0) {
 21681  0100CC  0102               	movlb	2	; () banked
 21682  0100CE  AF7B               	btfss	(printf@fval+3)& (0+255),7,b
 21683  0100D0  D015               	goto	l15475
 21684                           
 21685                           ; BSR set to: 2
 21686                           ;doprnt.c: 832: fval = -fval;
 21687  0100D2  C278  F060         	movff	printf@fval,___flneg@f1
 21688  0100D6  C279  F061         	movff	printf@fval+1,___flneg@f1+1
 21689  0100DA  C27A  F062         	movff	printf@fval+2,___flneg@f1+2
 21690  0100DE  C27B  F063         	movff	printf@fval+3,___flneg@f1+3
 21691  0100E2  ECDF  F0BC         	call	___flneg	;wreg free
 21692  0100E6  C060  F278         	movff	?___flneg,printf@fval
 21693  0100EA  C061  F279         	movff	?___flneg+1,printf@fval+1
 21694  0100EE  C062  F27A         	movff	?___flneg+2,printf@fval+2
 21695  0100F2  C063  F27B         	movff	?___flneg+3,printf@fval+3
 21696                           
 21697                           ;doprnt.c: 833: flag |= 0x03;
 21698  0100F6  0E03               	movlw	3
 21699  0100F8  0102               	movlb	2	; () banked
 21700  0100FA  136A               	iorwf	printf@flag& (0+255),f,b
 21701  0100FC                     l15475:
 21702                           
 21703                           ; BSR set to: 2
 21704                           ;doprnt.c: 834: }
 21705                           ;doprnt.c: 835: exp = 0;
 21706  0100FC  0E00               	movlw	0
 21707  0100FE  0102               	movlb	2	; () banked
 21708  010100  6F73               	movwf	(printf@exp+1)& (0+255),b
 21709  010102  0E00               	movlw	0
 21710  010104  6F72               	movwf	printf@exp& (0+255),b
 21711                           
 21712                           ; BSR set to: 2
 21713                           ;doprnt.c: 836: if( fval!=0) {
 21714  010106  0102               	movlb	2	; () banked
 21715  010108  5178               	movf	printf@fval& (0+255),w,b
 21716  01010A  0102               	movlb	2	; () banked
 21717  01010C  1179               	iorwf	(printf@fval+1)& (0+255),w,b
 21718  01010E  0102               	movlb	2	; () banked
 21719  010110  117A               	iorwf	(printf@fval+2)& (0+255),w,b
 21720  010112  0102               	movlb	2	; () banked
 21721  010114  117B               	iorwf	(printf@fval+3)& (0+255),w,b
 21722  010116  B4D8               	btfsc	status,2,c
 21723  010118  D08E               	goto	l15503
 21724                           
 21725                           ; BSR set to: 2
 21726                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
 21727  01011A  0102               	movlb	2	; () banked
 21728  01011C  357A               	rlcf	(printf@fval+2)& (0+255),w,b
 21729  01011E  357B               	rlcf	(printf@fval+3)& (0+255),w,b
 21730  010120  0F82               	addlw	130
 21731  010122  0102               	movlb	2	; () banked
 21732  010124  6F72               	movwf	printf@exp& (0+255),b
 21733  010126  0102               	movlb	2	; () banked
 21734  010128  6B73               	clrf	(printf@exp+1)& (0+255),b
 21735  01012A  0EFF               	movlw	255
 21736  01012C  2373               	addwfc	(printf@exp+1)& (0+255),f,b
 21737                           
 21738                           ; BSR set to: 2
 21739                           ;doprnt.c: 838: exp--;
 21740  01012E  0102               	movlb	2	; () banked
 21741  010130  0772               	decf	printf@exp& (0+255),f,b
 21742  010132  A0D8               	btfss	status,0,c
 21743  010134  0773               	decf	(printf@exp+1)& (0+255),f,b
 21744                           
 21745                           ; BSR set to: 2
 21746                           ;doprnt.c: 839: exp *= 3;
 21747  010136  C272  F060         	movff	printf@exp,___wmul@multiplier
 21748  01013A  C273  F061         	movff	printf@exp+1,___wmul@multiplier+1
 21749  01013E  0E00               	movlw	0
 21750  010140  0100               	movlb	0	; () banked
 21751  010142  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21752  010144  0E03               	movlw	3
 21753  010146  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21754  010148  ECFB  F0BC         	call	___wmul	;wreg free
 21755  01014C  C060  F272         	movff	?___wmul,printf@exp
 21756  010150  C061  F273         	movff	?___wmul+1,printf@exp+1
 21757                           
 21758                           ;doprnt.c: 840: exp /= 10;
 21759  010154  C272  F066         	movff	printf@exp,___awdiv@dividend
 21760  010158  C273  F067         	movff	printf@exp+1,___awdiv@dividend+1
 21761  01015C  0E00               	movlw	0
 21762  01015E  0100               	movlb	0	; () banked
 21763  010160  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 21764  010162  0E0A               	movlw	10
 21765  010164  6F68               	movwf	___awdiv@divisor& (0+255),b
 21766  010166  EC8B  F0AC         	call	___awdiv	;wreg free
 21767  01016A  C066  F272         	movff	?___awdiv,printf@exp
 21768  01016E  C067  F273         	movff	?___awdiv+1,printf@exp+1
 21769                           
 21770                           ;doprnt.c: 841: if(exp < 0)
 21771  010172  0102               	movlb	2	; () banked
 21772  010174  AF73               	btfss	(printf@exp+1)& (0+255),7,b
 21773  010176  D004               	goto	l15491
 21774                           
 21775                           ; BSR set to: 2
 21776                           ;doprnt.c: 842: exp--;
 21777  010178  0102               	movlb	2	; () banked
 21778  01017A  0772               	decf	printf@exp& (0+255),f,b
 21779  01017C  A0D8               	btfss	status,0,c
 21780  01017E  0773               	decf	(printf@exp+1)& (0+255),f,b
 21781  010180                     l15491:
 21782                           
 21783                           ; BSR set to: 2
 21784                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 21785  010180  0102               	movlb	2	; () banked
 21786  010182  5172               	movf	printf@exp& (0+255),w,b
 21787  010184  0800               	sublw	0
 21788  010186  EC49  F084         	call	_scale
 21789  01018A  C087  F274         	movff	?_scale,printf@tmpval
 21790  01018E  C088  F275         	movff	?_scale+1,printf@tmpval+1
 21791  010192  C089  F276         	movff	?_scale+2,printf@tmpval+2
 21792  010196  C08A  F277         	movff	?_scale+3,printf@tmpval+3
 21793                           
 21794                           ;doprnt.c: 847: tmpval.integ *= fval;
 21795  01019A  C274  F06E         	movff	printf@tmpval,___flmul@b
 21796  01019E  C275  F06F         	movff	printf@tmpval+1,___flmul@b+1
 21797  0101A2  C276  F070         	movff	printf@tmpval+2,___flmul@b+2
 21798  0101A6  C277  F071         	movff	printf@tmpval+3,___flmul@b+3
 21799  0101AA  C278  F072         	movff	printf@fval,___flmul@a
 21800  0101AE  C279  F073         	movff	printf@fval+1,___flmul@a+1
 21801  0101B2  C27A  F074         	movff	printf@fval+2,___flmul@a+2
 21802  0101B6  C27B  F075         	movff	printf@fval+3,___flmul@a+3
 21803  0101BA  EC2A  F089         	call	___flmul	;wreg free
 21804  0101BE  C06E  F274         	movff	?___flmul,printf@tmpval
 21805  0101C2  C06F  F275         	movff	?___flmul+1,printf@tmpval+1
 21806  0101C6  C070  F276         	movff	?___flmul+2,printf@tmpval+2
 21807  0101CA  C071  F277         	movff	?___flmul+3,printf@tmpval+3
 21808                           
 21809                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 21810  0101CE  C274  F060         	movff	printf@tmpval,___flge@ff1
 21811  0101D2  C275  F061         	movff	printf@tmpval+1,___flge@ff1+1
 21812  0101D6  C276  F062         	movff	printf@tmpval+2,___flge@ff1+2
 21813  0101DA  C277  F063         	movff	printf@tmpval+3,___flge@ff1+3
 21814  0101DE  0E00               	movlw	0
 21815  0101E0  0100               	movlb	0	; () banked
 21816  0101E2  6F64               	movwf	___flge@ff2& (0+255),b
 21817  0101E4  0E00               	movlw	0
 21818  0101E6  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 21819  0101E8  0E80               	movlw	128
 21820  0101EA  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 21821  0101EC  0E3F               	movlw	63
 21822  0101EE  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 21823  0101F0  EC0B  F09F         	call	___flge	;wreg free
 21824  0101F4  0100               	movlb	0	; () banked
 21825  0101F6  B0D8               	btfsc	status,0,c
 21826  0101F8  D005               	goto	l15499
 21827                           
 21828                           ; BSR set to: 0
 21829                           ;doprnt.c: 849: exp--;
 21830  0101FA  0102               	movlb	2	; () banked
 21831  0101FC  0772               	decf	printf@exp& (0+255),f,b
 21832  0101FE  A0D8               	btfss	status,0,c
 21833  010200  0773               	decf	(printf@exp+1)& (0+255),f,b
 21834  010202  D019               	goto	l15503
 21835  010204                     l15499:
 21836                           
 21837                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 21838  010204  C274  F060         	movff	printf@tmpval,___flge@ff1
 21839  010208  C275  F061         	movff	printf@tmpval+1,___flge@ff1+1
 21840  01020C  C276  F062         	movff	printf@tmpval+2,___flge@ff1+2
 21841  010210  C277  F063         	movff	printf@tmpval+3,___flge@ff1+3
 21842  010214  0E00               	movlw	0
 21843  010216  0100               	movlb	0	; () banked
 21844  010218  6F64               	movwf	___flge@ff2& (0+255),b
 21845  01021A  0E00               	movlw	0
 21846  01021C  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 21847  01021E  0E20               	movlw	32
 21848  010220  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 21849  010222  0E41               	movlw	65
 21850  010224  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 21851  010226  EC0B  F09F         	call	___flge	;wreg free
 21852  01022A  0100               	movlb	0	; () banked
 21853  01022C  A0D8               	btfss	status,0,c
 21854  01022E  D003               	goto	l15503
 21855                           
 21856                           ; BSR set to: 0
 21857                           ;doprnt.c: 851: exp++;
 21858  010230  0102               	movlb	2	; () banked
 21859  010232  4B72               	infsnz	printf@exp& (0+255),f,b
 21860  010234  2B73               	incf	(printf@exp+1)& (0+255),f,b
 21861  010236                     l15503:
 21862                           
 21863                           ;doprnt.c: 852: }
 21864                           ;doprnt.c: 1112: if(prec <= 12)
 21865  010236  0102               	movlb	2	; () banked
 21866  010238  BF6D               	btfsc	(printf@prec+1)& (0+255),7,b
 21867  01023A  D008               	goto	l15505
 21868  01023C  0102               	movlb	2	; () banked
 21869  01023E  516D               	movf	(printf@prec+1)& (0+255),w,b
 21870  010240  E123               	bnz	l15507
 21871  010242  0E0D               	movlw	13
 21872  010244  0102               	movlb	2	; () banked
 21873  010246  5D6C               	subwf	printf@prec& (0+255),w,b
 21874  010248  B0D8               	btfsc	status,0,c
 21875  01024A  D01E               	goto	l15507
 21876  01024C                     l15505:
 21877                           
 21878                           ; BSR set to: 2
 21879                           ;doprnt.c: 1113: fval += fround(prec);
 21880  01024C  C278  F094         	movff	printf@fval,___fladd@b
 21881  010250  C279  F095         	movff	printf@fval+1,___fladd@b+1
 21882  010254  C27A  F096         	movff	printf@fval+2,___fladd@b+2
 21883  010258  C27B  F097         	movff	printf@fval+3,___fladd@b+3
 21884  01025C  0102               	movlb	2	; () banked
 21885  01025E  516C               	movf	printf@prec& (0+255),w,b
 21886  010260  EC49  F091         	call	_fround
 21887  010264  C087  F098         	movff	?_fround,___fladd@a
 21888  010268  C088  F099         	movff	?_fround+1,___fladd@a+1
 21889  01026C  C089  F09A         	movff	?_fround+2,___fladd@a+2
 21890  010270  C08A  F09B         	movff	?_fround+3,___fladd@a+3
 21891  010274  ECD6  F086         	call	___fladd	;wreg free
 21892  010278  C094  F278         	movff	?___fladd,printf@fval
 21893  01027C  C095  F279         	movff	?___fladd+1,printf@fval+1
 21894  010280  C096  F27A         	movff	?___fladd+2,printf@fval+2
 21895  010284  C097  F27B         	movff	?___fladd+3,printf@fval+3
 21896  010288                     l15507:
 21897                           
 21898                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 21899  010288  0102               	movlb	2	; () banked
 21900  01028A  BF73               	btfsc	(printf@exp+1)& (0+255),7,b
 21901  01028C  D008               	goto	l15509
 21902  01028E  0102               	movlb	2	; () banked
 21903  010290  5173               	movf	(printf@exp+1)& (0+255),w,b
 21904  010292  E12E               	bnz	l15515
 21905  010294  0E0A               	movlw	10
 21906  010296  0102               	movlb	2	; () banked
 21907  010298  5D72               	subwf	printf@exp& (0+255),w,b
 21908  01029A  B0D8               	btfsc	status,0,c
 21909  01029C  D029               	goto	l15515
 21910  01029E                     l15509:
 21911                           
 21912                           ; BSR set to: 2
 21913  01029E  0102               	movlb	2	; () banked
 21914  0102A0  5178               	movf	printf@fval& (0+255),w,b
 21915  0102A2  0102               	movlb	2	; () banked
 21916  0102A4  1179               	iorwf	(printf@fval+1)& (0+255),w,b
 21917  0102A6  0102               	movlb	2	; () banked
 21918  0102A8  117A               	iorwf	(printf@fval+2)& (0+255),w,b
 21919  0102AA  0102               	movlb	2	; () banked
 21920  0102AC  117B               	iorwf	(printf@fval+3)& (0+255),w,b
 21921  0102AE  B4D8               	btfsc	status,2,c
 21922  0102B0  D06D               	goto	l15529
 21923                           
 21924                           ; BSR set to: 2
 21925  0102B2  C278  F087         	movff	printf@fval,___fltol@f1
 21926  0102B6  C279  F088         	movff	printf@fval+1,___fltol@f1+1
 21927  0102BA  C27A  F089         	movff	printf@fval+2,___fltol@f1+2
 21928  0102BE  C27B  F08A         	movff	printf@fval+3,___fltol@f1+3
 21929  0102C2  ECE0  F0A7         	call	___fltol	;wreg free
 21930  0102C6  0100               	movlb	0	; () banked
 21931  0102C8  5187               	movf	?___fltol& (0+255),w,b
 21932  0102CA  0100               	movlb	0	; () banked
 21933  0102CC  1188               	iorwf	(?___fltol+1)& (0+255),w,b
 21934  0102CE  0100               	movlb	0	; () banked
 21935  0102D0  1189               	iorwf	(?___fltol+2)& (0+255),w,b
 21936  0102D2  0100               	movlb	0	; () banked
 21937  0102D4  118A               	iorwf	(?___fltol+3)& (0+255),w,b
 21938  0102D6  A4D8               	btfss	status,2,c
 21939  0102D8  D059               	goto	l15529
 21940                           
 21941                           ; BSR set to: 0
 21942  0102DA  0102               	movlb	2	; () banked
 21943  0102DC  BF73               	btfsc	(printf@exp+1)& (0+255),7,b
 21944  0102DE  D056               	goto	l15529
 21945  0102E0  0102               	movlb	2	; () banked
 21946  0102E2  5173               	movf	(printf@exp+1)& (0+255),w,b
 21947  0102E4  E105               	bnz	l15515
 21948  0102E6  0E02               	movlw	2
 21949  0102E8  0102               	movlb	2	; () banked
 21950  0102EA  5D72               	subwf	printf@exp& (0+255),w,b
 21951  0102EC  A0D8               	btfss	status,0,c
 21952  0102EE  D04E               	goto	l15529
 21953  0102F0                     l15515:
 21954                           
 21955                           ; BSR set to: 2
 21956                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 21957  0102F0  C274  F060         	movff	printf@tmpval,___flge@ff1
 21958  0102F4  C275  F061         	movff	printf@tmpval+1,___flge@ff1+1
 21959  0102F8  C276  F062         	movff	printf@tmpval+2,___flge@ff1+2
 21960  0102FC  C277  F063         	movff	printf@tmpval+3,___flge@ff1+3
 21961  010300  0E5F               	movlw	95
 21962  010302  0100               	movlb	0	; () banked
 21963  010304  6F64               	movwf	___flge@ff2& (0+255),b
 21964  010306  0E70               	movlw	112
 21965  010308  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 21966  01030A  0E89               	movlw	137
 21967  01030C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 21968  01030E  0E40               	movlw	64
 21969  010310  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 21970  010312  EC0B  F09F         	call	___flge	;wreg free
 21971  010316  0100               	movlb	0	; () banked
 21972  010318  B0D8               	btfsc	status,0,c
 21973  01031A  D003               	goto	l15519
 21974                           
 21975                           ; BSR set to: 0
 21976                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 21977  01031C  0102               	movlb	2	; () banked
 21978  01031E  0EF7               	movlw	247
 21979  010320  D002               	goto	L15
 21980  010322                     l15519:
 21981                           
 21982                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 21983  010322  0102               	movlb	2	; () banked
 21984  010324  0EF8               	movlw	248
 21985  010326                     L15:
 21986  010326  2772               	addwf	printf@exp& (0+255),f,b
 21987  010328  0EFF               	movlw	255
 21988  01032A  2373               	addwfc	(printf@exp+1)& (0+255),f,b
 21989                           
 21990                           ; BSR set to: 2
 21991                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 21992                           
 21993                           ; BSR set to: 2
 21994  01032C  0102               	movlb	2	; () banked
 21995  01032E  5172               	movf	printf@exp& (0+255),w,b
 21996  010330  EC49  F084         	call	_scale
 21997  010334  C087  F274         	movff	?_scale,printf@tmpval
 21998  010338  C088  F275         	movff	?_scale+1,printf@tmpval+1
 21999  01033C  C089  F276         	movff	?_scale+2,printf@tmpval+2
 22000  010340  C08A  F277         	movff	?_scale+3,printf@tmpval+3
 22001  010344  C278  F060         	movff	printf@fval,__div_to_l_@f1
 22002  010348  C279  F061         	movff	printf@fval+1,__div_to_l_@f1+1
 22003  01034C  C27A  F062         	movff	printf@fval+2,__div_to_l_@f1+2
 22004  010350  C27B  F063         	movff	printf@fval+3,__div_to_l_@f1+3
 22005  010354  C274  F064         	movff	printf@tmpval,__div_to_l_@f2
 22006  010358  C275  F065         	movff	printf@tmpval+1,__div_to_l_@f2+1
 22007  01035C  C276  F066         	movff	printf@tmpval+2,__div_to_l_@f2+2
 22008  010360  C277  F067         	movff	printf@tmpval+3,__div_to_l_@f2+3
 22009  010364  EC5E  F0A1         	call	__div_to_l_	;wreg free
 22010  010368  C060  F26E         	movff	?__div_to_l_,printf@val
 22011  01036C  C061  F26F         	movff	?__div_to_l_+1,printf@val+1
 22012  010370  C062  F270         	movff	?__div_to_l_+2,printf@val+2
 22013  010374  C063  F271         	movff	?__div_to_l_+3,printf@val+3
 22014                           
 22015                           ;doprnt.c: 1129: fval = 0.0;
 22016  010378  0E00               	movlw	0
 22017  01037A  0102               	movlb	2	; () banked
 22018  01037C  6F78               	movwf	printf@fval& (0+255),b
 22019  01037E  0E00               	movlw	0
 22020  010380  6F79               	movwf	(printf@fval+1)& (0+255),b
 22021  010382  0E00               	movlw	0
 22022  010384  6F7A               	movwf	(printf@fval+2)& (0+255),b
 22023  010386  0E00               	movlw	0
 22024  010388  6F7B               	movwf	(printf@fval+3)& (0+255),b
 22025                           
 22026                           ;doprnt.c: 1130: } else {
 22027  01038A  D03C               	goto	l15533
 22028  01038C                     l15529:
 22029                           
 22030                           ;doprnt.c: 1131: val = (unsigned long)fval;
 22031  01038C  C278  F087         	movff	printf@fval,___fltol@f1
 22032  010390  C279  F088         	movff	printf@fval+1,___fltol@f1+1
 22033  010394  C27A  F089         	movff	printf@fval+2,___fltol@f1+2
 22034  010398  C27B  F08A         	movff	printf@fval+3,___fltol@f1+3
 22035  01039C  ECE0  F0A7         	call	___fltol	;wreg free
 22036  0103A0  C087  F26E         	movff	?___fltol,printf@val
 22037  0103A4  C088  F26F         	movff	?___fltol+1,printf@val+1
 22038  0103A8  C089  F270         	movff	?___fltol+2,printf@val+2
 22039  0103AC  C08A  F271         	movff	?___fltol+3,printf@val+3
 22040                           
 22041                           ;doprnt.c: 1132: fval -= (double)val;
 22042  0103B0  C278  F0A8         	movff	printf@fval,___flsub@b
 22043  0103B4  C279  F0A9         	movff	printf@fval+1,___flsub@b+1
 22044  0103B8  C27A  F0AA         	movff	printf@fval+2,___flsub@b+2
 22045  0103BC  C27B  F0AB         	movff	printf@fval+3,___flsub@b+3
 22046  0103C0  C26E  F060         	movff	printf@val,___xxtofl@val
 22047  0103C4  C26F  F061         	movff	printf@val+1,___xxtofl@val+1
 22048  0103C8  C270  F062         	movff	printf@val+2,___xxtofl@val+2
 22049  0103CC  C271  F063         	movff	printf@val+3,___xxtofl@val+3
 22050  0103D0  0E00               	movlw	0
 22051  0103D2  ECAC  F09B         	call	___xxtofl
 22052  0103D6  C060  F0AC         	movff	?___xxtofl,___flsub@a
 22053  0103DA  C061  F0AD         	movff	?___xxtofl+1,___flsub@a+1
 22054  0103DE  C062  F0AE         	movff	?___xxtofl+2,___flsub@a+2
 22055  0103E2  C063  F0AF         	movff	?___xxtofl+3,___flsub@a+3
 22056  0103E6  EC3A  F0BB         	call	___flsub	;wreg free
 22057  0103EA  C0A8  F278         	movff	?___flsub,printf@fval
 22058  0103EE  C0A9  F279         	movff	?___flsub+1,printf@fval+1
 22059  0103F2  C0AA  F27A         	movff	?___flsub+2,printf@fval+2
 22060  0103F6  C0AB  F27B         	movff	?___flsub+3,printf@fval+3
 22061                           
 22062                           ;doprnt.c: 1133: exp = 0;
 22063  0103FA  0E00               	movlw	0
 22064  0103FC  0102               	movlb	2	; () banked
 22065  0103FE  6F73               	movwf	(printf@exp+1)& (0+255),b
 22066  010400  0E00               	movlw	0
 22067  010402  6F72               	movwf	printf@exp& (0+255),b
 22068  010404                     l15533:
 22069                           
 22070                           ; BSR set to: 2
 22071                           ;doprnt.c: 1134: }
 22072                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 22073  010404  0E01               	movlw	1
 22074  010406  0102               	movlb	2	; () banked
 22075  010408  6F7C               	movwf	printf@c& (0+255),b
 22076  01040A                     l15535:
 22077                           
 22078                           ; BSR set to: 2
 22079  01040A  0E0A               	movlw	10
 22080  01040C  0102               	movlb	2	; () banked
 22081  01040E  197C               	xorwf	printf@c& (0+255),w,b
 22082  010410  B4D8               	btfsc	status,2,c
 22083  010412  D021               	goto	l15547
 22084                           
 22085                           ; BSR set to: 2
 22086                           ;doprnt.c: 1137: if(val < dpowers[c])
 22087                           
 22088                           ; BSR set to: 2
 22089                           
 22090                           ; BSR set to: 2
 22091  010414  0102               	movlb	2	; () banked
 22092  010416  517C               	movf	printf@c& (0+255),w,b
 22093  010418  0D04               	mullw	4
 22094  01041A  0E75               	movlw	low _dpowers
 22095  01041C  24F3               	addwf	prodl,w,c
 22096  01041E  6EF6               	movwf	tblptrl,c
 22097  010420  0EFC               	movlw	high _dpowers
 22098  010422  20F4               	addwfc	prodh,w,c
 22099  010424  6EF7               	movwf	tblptrh,c
 22100  010426                     	if	1	;There are 3 active tblptr bytes
 22101  010426  6AF8               	clrf	tblptru,c
 22102  010428  0E00               	movlw	low (__mediumconst shr (0+16))
 22103  01042A  22F8               	addwfc	tblptru,f,c
 22104  01042C                     	endif
 22105  01042C  0009               	tblrd		*+
 22106  01042E  50F5               	movf	tablat,w,c
 22107  010430  0102               	movlb	2	; () banked
 22108  010432  5D6E               	subwf	printf@val& (0+255),w,b
 22109  010434  0009               	tblrd		*+
 22110  010436  50F5               	movf	tablat,w,c
 22111  010438  0102               	movlb	2	; () banked
 22112  01043A  596F               	subwfb	(printf@val+1)& (0+255),w,b
 22113  01043C  0009               	tblrd		*+
 22114  01043E  50F5               	movf	tablat,w,c
 22115  010440  0102               	movlb	2	; () banked
 22116  010442  5970               	subwfb	(printf@val+2)& (0+255),w,b
 22117  010444  0009               	tblrd		*+
 22118  010446  50F5               	movf	tablat,w,c
 22119  010448  0102               	movlb	2	; () banked
 22120  01044A  5971               	subwfb	(printf@val+3)& (0+255),w,b
 22121  01044C  A0D8               	btfss	status,0,c
 22122  01044E  D003               	goto	l15547
 22123                           
 22124                           ; BSR set to: 2
 22125                           
 22126                           ; BSR set to: 2
 22127                           
 22128                           ; BSR set to: 2
 22129                           ;doprnt.c: 1138: break;
 22130  010450  0102               	movlb	2	; () banked
 22131  010452  2B7C               	incf	printf@c& (0+255),f,b
 22132  010454  D7DA               	goto	l15535
 22133  010456                     l15547:
 22134                           
 22135                           ; BSR set to: 2
 22136                           ;doprnt.c: 1175: {
 22137                           ;doprnt.c: 1188: if(flag & 0x03)
 22138  010456  0E03               	movlw	3
 22139  010458  0102               	movlb	2	; () banked
 22140  01045A  156A               	andwf	printf@flag& (0+255),w,b
 22141  01045C  0100               	movlb	0	; () banked
 22142  01045E  6FB6               	movwf	??_printf& (0+255),b
 22143  010460  0E00               	movlw	0
 22144  010462  0102               	movlb	2	; () banked
 22145  010464  156B               	andwf	(printf@flag+1)& (0+255),w,b
 22146  010466  0100               	movlb	0	; () banked
 22147  010468  6FB7               	movwf	(??_printf+1)& (0+255),b
 22148  01046A  0100               	movlb	0	; () banked
 22149  01046C  51B6               	movf	??_printf& (0+255),w,b
 22150  01046E  0100               	movlb	0	; () banked
 22151  010470  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 22152  010472  B4D8               	btfsc	status,2,c
 22153  010474  D04E               	goto	l15557
 22154                           
 22155                           ; BSR set to: 0
 22156                           ;doprnt.c: 1190: (putch('-') );
 22157  010476  0E2D               	movlw	45
 22158  010478  ECB1  F0BF         	call	_putch
 22159                           
 22160                           ;doprnt.c: 1195: }
 22161                           ;doprnt.c: 1196: while(c--) {
 22162  01047C  D04A               	goto	l15557
 22163  01047E                     l15551:
 22164                           
 22165                           ;doprnt.c: 1200: {
 22166                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 22167  01047E  C26E  F060         	movff	printf@val,___lldiv@dividend
 22168  010482  C26F  F061         	movff	printf@val+1,___lldiv@dividend+1
 22169  010486  C270  F062         	movff	printf@val+2,___lldiv@dividend+2
 22170  01048A  C271  F063         	movff	printf@val+3,___lldiv@dividend+3
 22171  01048E  0102               	movlb	2	; () banked
 22172  010490  517C               	movf	printf@c& (0+255),w,b
 22173  010492  0D04               	mullw	4
 22174  010494  0E75               	movlw	low _dpowers
 22175  010496  24F3               	addwf	prodl,w,c
 22176  010498  6EF6               	movwf	tblptrl,c
 22177  01049A  0EFC               	movlw	high _dpowers
 22178  01049C  20F4               	addwfc	prodh,w,c
 22179  01049E  6EF7               	movwf	tblptrh,c
 22180  0104A0                     	if	1	;There are 3 active tblptr bytes
 22181  0104A0  6AF8               	clrf	tblptru,c
 22182  0104A2  0E00               	movlw	low (__mediumconst shr (0+16))
 22183  0104A4  22F8               	addwfc	tblptru,f,c
 22184  0104A6                     	endif
 22185  0104A6  0009               	tblrd		*+
 22186  0104A8  CFF5 F064          	movff	tablat,___lldiv@divisor
 22187  0104AC  0009               	tblrd		*+
 22188  0104AE  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 22189  0104B2  0009               	tblrd		*+
 22190  0104B4  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 22191  0104B8  000A               	tblrd		*-
 22192  0104BA  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 22193  0104BE  ECEA  F0AC         	call	___lldiv	;wreg free
 22194  0104C2  C060  F274         	movff	?___lldiv,printf@tmpval
 22195  0104C6  C061  F275         	movff	?___lldiv+1,printf@tmpval+1
 22196  0104CA  C062  F276         	movff	?___lldiv+2,printf@tmpval+2
 22197  0104CE  C063  F277         	movff	?___lldiv+3,printf@tmpval+3
 22198                           
 22199                           ;doprnt.c: 1202: tmpval.vd %= 10;
 22200  0104D2  C274  F06D         	movff	printf@tmpval,___llmod@dividend
 22201  0104D6  C275  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 22202  0104DA  C276  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 22203  0104DE  C277  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 22204  0104E2  0E0A               	movlw	10
 22205  0104E4  0100               	movlb	0	; () banked
 22206  0104E6  6F71               	movwf	___llmod@divisor& (0+255),b
 22207  0104E8  0E00               	movlw	0
 22208  0104EA  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 22209  0104EC  0E00               	movlw	0
 22210  0104EE  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 22211  0104F0  0E00               	movlw	0
 22212  0104F2  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 22213  0104F4  EC47  F0B2         	call	___llmod	;wreg free
 22214  0104F8  C06D  F274         	movff	?___llmod,printf@tmpval
 22215  0104FC  C06E  F275         	movff	?___llmod+1,printf@tmpval+1
 22216  010500  C06F  F276         	movff	?___llmod+2,printf@tmpval+2
 22217  010504  C070  F277         	movff	?___llmod+3,printf@tmpval+3
 22218                           
 22219                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 22220  010508  0102               	movlb	2	; () banked
 22221  01050A  5174               	movf	printf@tmpval& (0+255),w,b
 22222  01050C  0F30               	addlw	48
 22223  01050E  ECB1  F0BF         	call	_putch
 22224  010512                     l15557:
 22225  010512  0102               	movlb	2	; () banked
 22226  010514  077C               	decf	printf@c& (0+255),f,b
 22227  010516  0102               	movlb	2	; () banked
 22228  010518  297C               	incf	printf@c& (0+255),w,b
 22229  01051A  B4D8               	btfsc	status,2,c
 22230  01051C  D008               	goto	l15563
 22231  01051E  D7AF               	goto	l15551
 22232  010520                     l15559:
 22233                           
 22234                           ; BSR set to: 2
 22235                           ;doprnt.c: 1208: (putch('0') );
 22236  010520  0E30               	movlw	48
 22237  010522  ECB1  F0BF         	call	_putch
 22238                           
 22239                           ;doprnt.c: 1209: exp--;
 22240  010526  0102               	movlb	2	; () banked
 22241  010528  0772               	decf	printf@exp& (0+255),f,b
 22242  01052A  A0D8               	btfss	status,0,c
 22243  01052C  0773               	decf	(printf@exp+1)& (0+255),f,b
 22244  01052E                     l15563:
 22245                           
 22246                           ; BSR set to: 2
 22247  01052E  0102               	movlb	2	; () banked
 22248  010530  BF73               	btfsc	(printf@exp+1)& (0+255),7,b
 22249  010532  D007               	goto	l15565
 22250  010534  0102               	movlb	2	; () banked
 22251  010536  5173               	movf	(printf@exp+1)& (0+255),w,b
 22252  010538  E1F3               	bnz	l15559
 22253  01053A  0102               	movlb	2	; () banked
 22254  01053C  0572               	decf	printf@exp& (0+255),w,b
 22255  01053E  B0D8               	btfsc	status,0,c
 22256  010540  D7EF               	goto	l15559
 22257  010542                     l15565:
 22258                           
 22259                           ; BSR set to: 2
 22260                           ;doprnt.c: 1210: }
 22261                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 22262  010542  0102               	movlb	2	; () banked
 22263  010544  BF6D               	btfsc	(printf@prec+1)& (0+255),7,b
 22264  010546  D00C               	goto	l2202
 22265  010548  0102               	movlb	2	; () banked
 22266  01054A  516D               	movf	(printf@prec+1)& (0+255),w,b
 22267  01054C  E105               	bnz	u13470
 22268  01054E  0E09               	movlw	9
 22269  010550  0102               	movlb	2	; () banked
 22270  010552  5D6C               	subwf	printf@prec& (0+255),w,b
 22271  010554  A0D8               	btfss	status,0,c
 22272  010556  D004               	goto	l2202
 22273  010558                     u13470:
 22274                           
 22275                           ; BSR set to: 2
 22276                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 22277  010558  0E08               	movlw	8
 22278  01055A  0102               	movlb	2	; () banked
 22279  01055C  6F7C               	movwf	printf@c& (0+255),b
 22280  01055E  D002               	goto	l15569
 22281  010560                     l2202:
 22282                           
 22283                           ; BSR set to: 2
 22284                           ;doprnt.c: 1213: else
 22285                           ;doprnt.c: 1214: c = prec;
 22286  010560  C26C  F27C         	movff	printf@prec,printf@c
 22287  010564                     l15569:
 22288                           
 22289                           ; BSR set to: 2
 22290                           ;doprnt.c: 1215: prec -= c;
 22291  010564  0102               	movlb	2	; () banked
 22292  010566  517C               	movf	printf@c& (0+255),w,b
 22293  010568  0102               	movlb	2	; () banked
 22294  01056A  5F6C               	subwf	printf@prec& (0+255),f,b
 22295  01056C  0E00               	movlw	0
 22296  01056E  0102               	movlb	2	; () banked
 22297  010570  BF7C               	btfsc	printf@c& (0+255),7,b
 22298  010572  0EFF               	movlw	255
 22299  010574  0102               	movlb	2	; () banked
 22300  010576  5B6D               	subwfb	(printf@prec+1)& (0+255),f,b
 22301                           
 22302                           ; BSR set to: 2
 22303                           ;doprnt.c: 1219: if(c)
 22304  010578  0102               	movlb	2	; () banked
 22305  01057A  517C               	movf	printf@c& (0+255),w,b
 22306  01057C  0102               	movlb	2	; () banked
 22307  01057E  B4D8               	btfsc	status,2,c
 22308  010580  D003               	goto	l15575
 22309                           
 22310                           ; BSR set to: 2
 22311                           ;doprnt.c: 1221: (putch('.') );
 22312  010582  0E2E               	movlw	46
 22313  010584  ECB1  F0BF         	call	_putch
 22314  010588                     l15575:
 22315                           
 22316                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 22317  010588  0102               	movlb	2	; () banked
 22318  01058A  517C               	movf	printf@c& (0+255),w,b
 22319  01058C  EC49  F084         	call	_scale
 22320  010590  C087  F264         	movff	?_scale,_printf$15267
 22321  010594  C088  F265         	movff	?_scale+1,_printf$15267+1
 22322  010598  C089  F266         	movff	?_scale+2,_printf$15267+2
 22323  01059C  C08A  F267         	movff	?_scale+3,_printf$15267+3
 22324                           
 22325                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 22326  0105A0  C278  F072         	movff	printf@fval,___flmul@a
 22327  0105A4  C279  F073         	movff	printf@fval+1,___flmul@a+1
 22328  0105A8  C27A  F074         	movff	printf@fval+2,___flmul@a+2
 22329  0105AC  C27B  F075         	movff	printf@fval+3,___flmul@a+3
 22330  0105B0  C264  F06E         	movff	_printf$15267,___flmul@b
 22331  0105B4  C265  F06F         	movff	_printf$15267+1,___flmul@b+1
 22332  0105B8  C266  F070         	movff	_printf$15267+2,___flmul@b+2
 22333  0105BC  C267  F071         	movff	_printf$15267+3,___flmul@b+3
 22334  0105C0  EC2A  F089         	call	___flmul	;wreg free
 22335  0105C4  C06E  F087         	movff	?___flmul,___fltol@f1
 22336  0105C8  C06F  F088         	movff	?___flmul+1,___fltol@f1+1
 22337  0105CC  C070  F089         	movff	?___flmul+2,___fltol@f1+2
 22338  0105D0  C071  F08A         	movff	?___flmul+3,___fltol@f1+3
 22339  0105D4  ECE0  F0A7         	call	___fltol	;wreg free
 22340  0105D8  C087  F26E         	movff	?___fltol,printf@val
 22341  0105DC  C088  F26F         	movff	?___fltol+1,printf@val+1
 22342  0105E0  C089  F270         	movff	?___fltol+2,printf@val+2
 22343  0105E4  C08A  F271         	movff	?___fltol+3,printf@val+3
 22344                           
 22345                           ;doprnt.c: 1228: while(c--) {
 22346  0105E8  D074               	goto	l15587
 22347  0105EA                     l15579:
 22348                           
 22349                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 22350  0105EA  C26E  F060         	movff	printf@val,___lldiv@dividend
 22351  0105EE  C26F  F061         	movff	printf@val+1,___lldiv@dividend+1
 22352  0105F2  C270  F062         	movff	printf@val+2,___lldiv@dividend+2
 22353  0105F6  C271  F063         	movff	printf@val+3,___lldiv@dividend+3
 22354  0105FA  0102               	movlb	2	; () banked
 22355  0105FC  517C               	movf	printf@c& (0+255),w,b
 22356  0105FE  0D04               	mullw	4
 22357  010600  0E75               	movlw	low _dpowers
 22358  010602  24F3               	addwf	prodl,w,c
 22359  010604  6EF6               	movwf	tblptrl,c
 22360  010606  0EFC               	movlw	high _dpowers
 22361  010608  20F4               	addwfc	prodh,w,c
 22362  01060A  6EF7               	movwf	tblptrh,c
 22363  01060C                     	if	1	;There are 3 active tblptr bytes
 22364  01060C  6AF8               	clrf	tblptru,c
 22365  01060E  0E00               	movlw	low (__mediumconst shr (0+16))
 22366  010610  22F8               	addwfc	tblptru,f,c
 22367  010612                     	endif
 22368  010612  0009               	tblrd		*+
 22369  010614  CFF5 F064          	movff	tablat,___lldiv@divisor
 22370  010618  0009               	tblrd		*+
 22371  01061A  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 22372  01061E  0009               	tblrd		*+
 22373  010620  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 22374  010624  000A               	tblrd		*-
 22375  010626  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 22376  01062A  ECEA  F0AC         	call	___lldiv	;wreg free
 22377  01062E  C060  F274         	movff	?___lldiv,printf@tmpval
 22378  010632  C061  F275         	movff	?___lldiv+1,printf@tmpval+1
 22379  010636  C062  F276         	movff	?___lldiv+2,printf@tmpval+2
 22380  01063A  C063  F277         	movff	?___lldiv+3,printf@tmpval+3
 22381                           
 22382                           ;doprnt.c: 1230: tmpval.vd %= 10;
 22383  01063E  C274  F06D         	movff	printf@tmpval,___llmod@dividend
 22384  010642  C275  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 22385  010646  C276  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 22386  01064A  C277  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 22387  01064E  0E0A               	movlw	10
 22388  010650  0100               	movlb	0	; () banked
 22389  010652  6F71               	movwf	___llmod@divisor& (0+255),b
 22390  010654  0E00               	movlw	0
 22391  010656  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 22392  010658  0E00               	movlw	0
 22393  01065A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 22394  01065C  0E00               	movlw	0
 22395  01065E  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 22396  010660  EC47  F0B2         	call	___llmod	;wreg free
 22397  010664  C06D  F274         	movff	?___llmod,printf@tmpval
 22398  010668  C06E  F275         	movff	?___llmod+1,printf@tmpval+1
 22399  01066C  C06F  F276         	movff	?___llmod+2,printf@tmpval+2
 22400  010670  C070  F277         	movff	?___llmod+3,printf@tmpval+3
 22401                           
 22402                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 22403  010674  0102               	movlb	2	; () banked
 22404  010676  5174               	movf	printf@tmpval& (0+255),w,b
 22405  010678  0F30               	addlw	48
 22406  01067A  ECB1  F0BF         	call	_putch
 22407                           
 22408                           ;doprnt.c: 1232: val %= dpowers[c];
 22409  01067E  C26E  F06D         	movff	printf@val,___llmod@dividend
 22410  010682  C26F  F06E         	movff	printf@val+1,___llmod@dividend+1
 22411  010686  C270  F06F         	movff	printf@val+2,___llmod@dividend+2
 22412  01068A  C271  F070         	movff	printf@val+3,___llmod@dividend+3
 22413  01068E  0102               	movlb	2	; () banked
 22414  010690  517C               	movf	printf@c& (0+255),w,b
 22415  010692  0D04               	mullw	4
 22416  010694  0E75               	movlw	low _dpowers
 22417  010696  24F3               	addwf	prodl,w,c
 22418  010698  6EF6               	movwf	tblptrl,c
 22419  01069A  0EFC               	movlw	high _dpowers
 22420  01069C  20F4               	addwfc	prodh,w,c
 22421  01069E  6EF7               	movwf	tblptrh,c
 22422  0106A0                     	if	1	;There are 3 active tblptr bytes
 22423  0106A0  6AF8               	clrf	tblptru,c
 22424  0106A2  0E00               	movlw	low (__mediumconst shr (0+16))
 22425  0106A4  22F8               	addwfc	tblptru,f,c
 22426  0106A6                     	endif
 22427  0106A6  0009               	tblrd		*+
 22428  0106A8  CFF5 F071          	movff	tablat,___llmod@divisor
 22429  0106AC  0009               	tblrd		*+
 22430  0106AE  CFF5 F072          	movff	tablat,___llmod@divisor+1
 22431  0106B2  0009               	tblrd		*+
 22432  0106B4  CFF5 F073          	movff	tablat,___llmod@divisor+2
 22433  0106B8  000A               	tblrd		*-
 22434  0106BA  CFF5 F074          	movff	tablat,___llmod@divisor+3
 22435  0106BE  EC47  F0B2         	call	___llmod	;wreg free
 22436  0106C2  C06D  F26E         	movff	?___llmod,printf@val
 22437  0106C6  C06E  F26F         	movff	?___llmod+1,printf@val+1
 22438  0106CA  C06F  F270         	movff	?___llmod+2,printf@val+2
 22439  0106CE  C070  F271         	movff	?___llmod+3,printf@val+3
 22440  0106D2                     l15587:
 22441  0106D2  0102               	movlb	2	; () banked
 22442  0106D4  077C               	decf	printf@c& (0+255),f,b
 22443  0106D6  0102               	movlb	2	; () banked
 22444  0106D8  297C               	incf	printf@c& (0+255),w,b
 22445  0106DA  B4D8               	btfsc	status,2,c
 22446  0106DC  D008               	goto	l15593
 22447  0106DE  D785               	goto	l15579
 22448  0106E0                     l15589:
 22449                           
 22450                           ; BSR set to: 2
 22451                           ;doprnt.c: 1236: (putch('0') );
 22452  0106E0  0E30               	movlw	48
 22453  0106E2  ECB1  F0BF         	call	_putch
 22454                           
 22455                           ;doprnt.c: 1237: prec--;
 22456  0106E6  0102               	movlb	2	; () banked
 22457  0106E8  076C               	decf	printf@prec& (0+255),f,b
 22458  0106EA  A0D8               	btfss	status,0,c
 22459  0106EC  076D               	decf	(printf@prec+1)& (0+255),f,b
 22460  0106EE                     l15593:
 22461                           
 22462                           ; BSR set to: 2
 22463  0106EE  0102               	movlb	2	; () banked
 22464  0106F0  516C               	movf	printf@prec& (0+255),w,b
 22465  0106F2  0102               	movlb	2	; () banked
 22466  0106F4  116D               	iorwf	(printf@prec+1)& (0+255),w,b
 22467  0106F6  B4D8               	btfsc	status,2,c
 22468  0106F8  D0BA               	goto	l15631
 22469  0106FA  D7F2               	goto	l15589
 22470  0106FC                     l15595:
 22471                           
 22472                           ; BSR set to: 2
 22473                           ;doprnt.c: 1246: }
 22474                           ;doprnt.c: 1253: {
 22475                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22476  0106FC  C268  FFD9         	movff	printf@ap,fsr2l
 22477  010700  C269  FFDA         	movff	printf@ap+1,fsr2h
 22478  010704  CFDE F26E          	movff	postinc2,printf@val
 22479  010708  CFDD F26F          	movff	postdec2,printf@val+1
 22480  01070C  0102               	movlb	2	; () banked
 22481  01070E  0E00               	movlw	0
 22482  010710  BF6F               	btfsc	(printf@val+1)& (0+255),7,b
 22483  010712  0EFF               	movlw	-1
 22484  010714  6F70               	movwf	(printf@val+2)& (0+255),b
 22485  010716  6F71               	movwf	(printf@val+3)& (0+255),b
 22486                           
 22487                           ; BSR set to: 2
 22488  010718  0E02               	movlw	2
 22489  01071A  0102               	movlb	2	; () banked
 22490  01071C  2768               	addwf	printf@ap& (0+255),f,b
 22491  01071E  0E00               	movlw	0
 22492  010720  2369               	addwfc	(printf@ap+1)& (0+255),f,b
 22493                           
 22494                           ; BSR set to: 2
 22495                           ;doprnt.c: 1261: if((long)val < 0) {
 22496  010722  0102               	movlb	2	; () banked
 22497  010724  AF71               	btfss	(printf@val+3)& (0+255),7,b
 22498  010726  D00C               	goto	l15605
 22499                           
 22500                           ; BSR set to: 2
 22501                           ;doprnt.c: 1262: flag |= 0x03;
 22502  010728  0E03               	movlw	3
 22503  01072A  0102               	movlb	2	; () banked
 22504  01072C  136A               	iorwf	printf@flag& (0+255),f,b
 22505                           
 22506                           ; BSR set to: 2
 22507                           ;doprnt.c: 1263: val = -val;
 22508  01072E  0102               	movlb	2	; () banked
 22509  010730  1F71               	comf	(printf@val+3)& (0+255),f,b
 22510  010732  1F70               	comf	(printf@val+2)& (0+255),f,b
 22511  010734  1F6F               	comf	(printf@val+1)& (0+255),f,b
 22512  010736  6D6E               	negf	printf@val& (0+255),b
 22513  010738  0E00               	movlw	0
 22514  01073A  236F               	addwfc	(printf@val+1)& (0+255),f,b
 22515  01073C  2370               	addwfc	(printf@val+2)& (0+255),f,b
 22516  01073E  2371               	addwfc	(printf@val+3)& (0+255),f,b
 22517  010740                     l15605:
 22518                           
 22519                           ; BSR set to: 2
 22520                           ;doprnt.c: 1264: }
 22521                           ;doprnt.c: 1266: }
 22522                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22523  010740  0E01               	movlw	1
 22524  010742  0102               	movlb	2	; () banked
 22525  010744  6F7C               	movwf	printf@c& (0+255),b
 22526  010746                     l15607:
 22527                           
 22528                           ; BSR set to: 2
 22529  010746  0E0A               	movlw	10
 22530  010748  0102               	movlb	2	; () banked
 22531  01074A  197C               	xorwf	printf@c& (0+255),w,b
 22532  01074C  B4D8               	btfsc	status,2,c
 22533  01074E  D021               	goto	l15619
 22534                           
 22535                           ; BSR set to: 2
 22536                           ;doprnt.c: 1306: if(val < dpowers[c])
 22537                           
 22538                           ; BSR set to: 2
 22539                           
 22540                           ; BSR set to: 2
 22541  010750  0102               	movlb	2	; () banked
 22542  010752  517C               	movf	printf@c& (0+255),w,b
 22543  010754  0D04               	mullw	4
 22544  010756  0E75               	movlw	low _dpowers
 22545  010758  24F3               	addwf	prodl,w,c
 22546  01075A  6EF6               	movwf	tblptrl,c
 22547  01075C  0EFC               	movlw	high _dpowers
 22548  01075E  20F4               	addwfc	prodh,w,c
 22549  010760  6EF7               	movwf	tblptrh,c
 22550  010762                     	if	1	;There are 3 active tblptr bytes
 22551  010762  6AF8               	clrf	tblptru,c
 22552  010764  0E00               	movlw	low (__mediumconst shr (0+16))
 22553  010766  22F8               	addwfc	tblptru,f,c
 22554  010768                     	endif
 22555  010768  0009               	tblrd		*+
 22556  01076A  50F5               	movf	tablat,w,c
 22557  01076C  0102               	movlb	2	; () banked
 22558  01076E  5D6E               	subwf	printf@val& (0+255),w,b
 22559  010770  0009               	tblrd		*+
 22560  010772  50F5               	movf	tablat,w,c
 22561  010774  0102               	movlb	2	; () banked
 22562  010776  596F               	subwfb	(printf@val+1)& (0+255),w,b
 22563  010778  0009               	tblrd		*+
 22564  01077A  50F5               	movf	tablat,w,c
 22565  01077C  0102               	movlb	2	; () banked
 22566  01077E  5970               	subwfb	(printf@val+2)& (0+255),w,b
 22567  010780  0009               	tblrd		*+
 22568  010782  50F5               	movf	tablat,w,c
 22569  010784  0102               	movlb	2	; () banked
 22570  010786  5971               	subwfb	(printf@val+3)& (0+255),w,b
 22571  010788  A0D8               	btfss	status,0,c
 22572  01078A  D003               	goto	l15619
 22573                           
 22574                           ; BSR set to: 2
 22575                           
 22576                           ; BSR set to: 2
 22577                           
 22578                           ; BSR set to: 2
 22579                           ;doprnt.c: 1307: break;
 22580  01078C  0102               	movlb	2	; () banked
 22581  01078E  2B7C               	incf	printf@c& (0+255),f,b
 22582  010790  D7DA               	goto	l15607
 22583  010792                     l15619:
 22584                           
 22585                           ; BSR set to: 2
 22586                           ;doprnt.c: 1422: {
 22587                           ;doprnt.c: 1438: if(flag & 0x03)
 22588  010792  0E03               	movlw	3
 22589  010794  0102               	movlb	2	; () banked
 22590  010796  156A               	andwf	printf@flag& (0+255),w,b
 22591  010798  0100               	movlb	0	; () banked
 22592  01079A  6FB6               	movwf	??_printf& (0+255),b
 22593  01079C  0E00               	movlw	0
 22594  01079E  0102               	movlb	2	; () banked
 22595  0107A0  156B               	andwf	(printf@flag+1)& (0+255),w,b
 22596  0107A2  0100               	movlb	0	; () banked
 22597  0107A4  6FB7               	movwf	(??_printf+1)& (0+255),b
 22598  0107A6  0100               	movlb	0	; () banked
 22599  0107A8  51B6               	movf	??_printf& (0+255),w,b
 22600  0107AA  0100               	movlb	0	; () banked
 22601  0107AC  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 22602  0107AE  B4D8               	btfsc	status,2,c
 22603  0107B0  D003               	goto	l15623
 22604                           
 22605                           ; BSR set to: 0
 22606                           ;doprnt.c: 1439: (putch('-') );
 22607  0107B2  0E2D               	movlw	45
 22608  0107B4  ECB1  F0BF         	call	_putch
 22609  0107B8                     l15623:
 22610                           
 22611                           ;doprnt.c: 1469: }
 22612                           ;doprnt.c: 1472: prec = c;
 22613  0107B8  0102               	movlb	2	; () banked
 22614  0107BA  517C               	movf	printf@c& (0+255),w,b
 22615  0107BC  0102               	movlb	2	; () banked
 22616  0107BE  6F6C               	movwf	printf@prec& (0+255),b
 22617  0107C0  6B6D               	clrf	(printf@prec+1)& (0+255),b
 22618  0107C2  BF6C               	btfsc	printf@prec& (0+255),7,b
 22619  0107C4  076D               	decf	(printf@prec+1)& (0+255),f,b
 22620                           
 22621                           ;doprnt.c: 1474: while(prec--) {
 22622  0107C6  D048               	goto	l15629
 22623  0107C8                     l15625:
 22624                           
 22625                           ; BSR set to: 2
 22626                           ;doprnt.c: 1478: {
 22627                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22628  0107C8  C26C  F0B6         	movff	printf@prec,??_printf
 22629  0107CC  C26D  F0B7         	movff	printf@prec+1,??_printf+1
 22630  0107D0  0100               	movlb	0	; () banked
 22631  0107D2  90D8               	bcf	status,0,c
 22632  0107D4  37B6               	rlcf	??_printf& (0+255),f,b
 22633  0107D6  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 22634  0107D8  0100               	movlb	0	; () banked
 22635  0107DA  90D8               	bcf	status,0,c
 22636  0107DC  37B6               	rlcf	??_printf& (0+255),f,b
 22637  0107DE  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 22638  0107E0  0E75               	movlw	low _dpowers
 22639  0107E2  0100               	movlb	0	; () banked
 22640  0107E4  25B6               	addwf	??_printf& (0+255),w,b
 22641  0107E6  6EF6               	movwf	tblptrl,c
 22642  0107E8  0EFC               	movlw	high _dpowers
 22643  0107EA  21B7               	addwfc	(??_printf+1)& (0+255),w,b
 22644  0107EC  6EF7               	movwf	tblptrh,c
 22645  0107EE                     	if	1	;There are 3 active tblptr bytes
 22646  0107EE  6AF8               	clrf	tblptru,c
 22647  0107F0  0E00               	movlw	low (__mediumconst shr (0+16))
 22648  0107F2  22F8               	addwfc	tblptru,f,c
 22649  0107F4                     	endif
 22650  0107F4  0009               	tblrd		*+
 22651  0107F6  CFF5 F064          	movff	tablat,___lldiv@divisor
 22652  0107FA  0009               	tblrd		*+
 22653  0107FC  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 22654  010800  0009               	tblrd		*+
 22655  010802  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 22656  010806  000A               	tblrd		*-
 22657  010808  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 22658  01080C  C26E  F060         	movff	printf@val,___lldiv@dividend
 22659  010810  C26F  F061         	movff	printf@val+1,___lldiv@dividend+1
 22660  010814  C270  F062         	movff	printf@val+2,___lldiv@dividend+2
 22661  010818  C271  F063         	movff	printf@val+3,___lldiv@dividend+3
 22662  01081C  ECEA  F0AC         	call	___lldiv	;wreg free
 22663  010820  C060  F06D         	movff	?___lldiv,___llmod@dividend
 22664  010824  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
 22665  010828  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
 22666  01082C  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
 22667  010830  0E0A               	movlw	10
 22668  010832  0100               	movlb	0	; () banked
 22669  010834  6F71               	movwf	___llmod@divisor& (0+255),b
 22670  010836  0E00               	movlw	0
 22671  010838  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 22672  01083A  0E00               	movlw	0
 22673  01083C  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 22674  01083E  0E00               	movlw	0
 22675  010840  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 22676  010842  EC47  F0B2         	call	___llmod	;wreg free
 22677  010846  0100               	movlb	0	; () banked
 22678  010848  516D               	movf	?___llmod& (0+255),w,b
 22679  01084A  0F30               	addlw	48
 22680  01084C  0102               	movlb	2	; () banked
 22681  01084E  6F7C               	movwf	printf@c& (0+255),b
 22682                           
 22683                           ; BSR set to: 2
 22684                           ;doprnt.c: 1523: }
 22685                           ;doprnt.c: 1524: (putch(c) );
 22686  010850  0102               	movlb	2	; () banked
 22687  010852  517C               	movf	printf@c& (0+255),w,b
 22688  010854  ECB1  F0BF         	call	_putch
 22689  010858                     l15629:
 22690  010858  0102               	movlb	2	; () banked
 22691  01085A  076C               	decf	printf@prec& (0+255),f,b
 22692  01085C  A0D8               	btfss	status,0,c
 22693  01085E  076D               	decf	(printf@prec+1)& (0+255),f,b
 22694  010860  0102               	movlb	2	; () banked
 22695  010862  296C               	incf	printf@prec& (0+255),w,b
 22696  010864  E1B1               	bnz	l15625
 22697  010866  0102               	movlb	2	; () banked
 22698  010868  296D               	incf	(printf@prec+1)& (0+255),w,b
 22699  01086A  A4D8               	btfss	status,2,c
 22700  01086C  D7AD               	goto	l15625
 22701  01086E                     l15631:
 22702  01086E  C0B0  FFF6         	movff	printf@f,tblptrl
 22703  010872  C0B1  FFF7         	movff	printf@f+1,tblptrh
 22704  010876  0100               	movlb	0	; () banked
 22705  010878  4BB0               	infsnz	printf@f& (0+255),f,b
 22706  01087A  2BB1               	incf	(printf@f+1)& (0+255),f,b
 22707  01087C                     	if	0	;tblptru may be non-zero
 22708  01087C                     	endif
 22709  01087C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22710  01087C  0E00               	movlw	low (__mediumconst shr (0+16))
 22711  01087E  6EF8               	movwf	tblptru,c
 22712  010880                     	endif
 22713  010880  0008               	tblrd		*
 22714  010882  CFF5 F27C          	movff	tablat,printf@c
 22715  010886  0102               	movlb	2	; () banked
 22716  010888  517C               	movf	printf@c& (0+255),w,b
 22717  01088A  B4D8               	btfsc	status,2,c
 22718  01088C  0012               	return	
 22719  01088E  EF08  F080         	goto	l15443
 22720  010892                     __end_of_printf:
 22721                           	opt stack 0
 22722                           tosu	equ	0xFFF
 22723                           tosh	equ	0xFFE
 22724                           tosl	equ	0xFFD
 22725                           pclath	equ	0xFFA
 22726                           tblptru	equ	0xFF8
 22727                           tblptrh	equ	0xFF7
 22728                           tblptrl	equ	0xFF6
 22729                           tablat	equ	0xFF5
 22730                           prodh	equ	0xFF4
 22731                           prodl	equ	0xFF3
 22732                           intcon	equ	0xFF2
 22733                           indf0	equ	0xFEF
 22734                           postinc0	equ	0xFEE
 22735                           fsr0h	equ	0xFEA
 22736                           fsr0l	equ	0xFE9
 22737                           wreg	equ	0xFE8
 22738                           indf1	equ	0xFE7
 22739                           postdec1	equ	0xFE5
 22740                           fsr1h	equ	0xFE2
 22741                           fsr1l	equ	0xFE1
 22742                           indf2	equ	0xFDF
 22743                           postinc2	equ	0xFDE
 22744                           postdec2	equ	0xFDD
 22745                           plusw2	equ	0xFDB
 22746                           fsr2h	equ	0xFDA
 22747                           fsr2l	equ	0xFD9
 22748                           status	equ	0xFD8
 22749                           
 22750 ;; *************** function _scale *****************
 22751 ;; Defined at:
 22752 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
 22753 ;; Parameters:    Size  Location     Type
 22754 ;;  scl             1    wreg     char 
 22755 ;; Auto vars:     Size  Location     Type
 22756 ;;  scl             1   47[BANK0 ] char 
 22757 ;; Return value:  Size  Location     Type
 22758 ;;                  4   39[BANK0 ] char 
 22759 ;; Registers used:
 22760 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22761 ;; Tracked objects:
 22762 ;;		On entry : 0/0
 22763 ;;		On exit  : 0/0
 22764 ;;		Unchanged: 0/0
 22765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22766 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22767 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22769 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22770 ;;Total ram usage:        9 bytes
 22771 ;; Hardware stack levels used:    1
 22772 ;; Hardware stack levels required when called:    8
 22773 ;; This function calls:
 22774 ;;		___awdiv
 22775 ;;		___awmod
 22776 ;;		___flmul
 22777 ;; This function is called by:
 22778 ;;		_printf
 22779 ;; This function uses a non-reentrant model
 22780 ;;
 22781                           
 22782                           	psect	text117
 22783  010892                     __ptext117:
 22784                           	opt stack 0
 22785  010892                     _scale:
 22786                           	opt stack 21
 22787                           
 22788                           ; BSR set to: 2
 22789                           ;incstack = 0
 22790                           ;scale@scl stored from wreg
 22791  010892  0100               	movlb	0	; () banked
 22792  010894  6F8F               	movwf	scale@scl& (0+255),b
 22793                           
 22794                           ;doprnt.c: 428: if(scl < 0) {
 22795  010896  0100               	movlb	0	; () banked
 22796  010898  AF8F               	btfss	scale@scl& (0+255),7,b
 22797  01089A  D145               	goto	l14757
 22798                           
 22799                           ; BSR set to: 0
 22800                           ;doprnt.c: 429: scl = -scl;
 22801  01089C  0100               	movlb	0	; () banked
 22802  01089E  6D8F               	negf	scale@scl& (0+255),b
 22803                           
 22804                           ;doprnt.c: 430: if(scl>=110)
 22805  0108A0  0100               	movlb	0	; () banked
 22806  0108A2  518F               	movf	scale@scl& (0+255),w,b
 22807  0108A4  0A80               	xorlw	128
 22808  0108A6  0F12               	addlw	-238
 22809  0108A8  A0D8               	btfss	status,0,c
 22810  0108AA  D0BB               	goto	l14747
 22811                           
 22812                           ; BSR set to: 0
 22813                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 22814  0108AC  0E00               	movlw	0
 22815  0108AE  0100               	movlb	0	; () banked
 22816  0108B0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22817  0108B2  0E0A               	movlw	10
 22818  0108B4  6F68               	movwf	___awdiv@divisor& (0+255),b
 22819  0108B6  0E00               	movlw	0
 22820  0108B8  0100               	movlb	0	; () banked
 22821  0108BA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 22822  0108BC  0E64               	movlw	100
 22823  0108BE  6F62               	movwf	___awmod@divisor& (0+255),b
 22824  0108C0  0100               	movlb	0	; () banked
 22825  0108C2  518F               	movf	scale@scl& (0+255),w,b
 22826  0108C4  0100               	movlb	0	; () banked
 22827  0108C6  6F60               	movwf	___awmod@dividend& (0+255),b
 22828  0108C8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 22829  0108CA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 22830  0108CC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 22831  0108CE  ECA8  F0B1         	call	___awmod	;wreg free
 22832  0108D2  C060  F066         	movff	?___awmod,___awdiv@dividend
 22833  0108D6  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 22834  0108DA  EC8B  F0AC         	call	___awdiv	;wreg free
 22835  0108DE  0100               	movlb	0	; () banked
 22836  0108E0  90D8               	bcf	status,0,c
 22837  0108E2  3766               	rlcf	?___awdiv& (0+255),f,b
 22838  0108E4  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 22839  0108E6  0100               	movlb	0	; () banked
 22840  0108E8  90D8               	bcf	status,0,c
 22841  0108EA  3766               	rlcf	?___awdiv& (0+255),f,b
 22842  0108EC  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 22843  0108EE  0E24               	movlw	36
 22844  0108F0  0100               	movlb	0	; () banked
 22845  0108F2  2766               	addwf	?___awdiv& (0+255),f,b
 22846  0108F4  0E00               	movlw	0
 22847  0108F6  0100               	movlb	0	; () banked
 22848  0108F8  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 22849  0108FA  0E41               	movlw	low __npowers_
 22850  0108FC  0100               	movlb	0	; () banked
 22851  0108FE  2566               	addwf	?___awdiv& (0+255),w,b
 22852  010900  6EF6               	movwf	tblptrl,c
 22853  010902  0EFC               	movlw	high __npowers_
 22854  010904  0100               	movlb	0	; () banked
 22855  010906  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 22856  010908  6EF7               	movwf	tblptrh,c
 22857  01090A                     	if	1	;There are 3 active tblptr bytes
 22858  01090A  6AF8               	clrf	tblptru,c
 22859  01090C  0E00               	movlw	low (__mediumconst shr (0+16))
 22860  01090E  22F8               	addwfc	tblptru,f,c
 22861  010910                     	endif
 22862  010910  0009               	tblrd		*+
 22863  010912  CFF5 F072          	movff	tablat,___flmul@a
 22864  010916  0009               	tblrd		*+
 22865  010918  CFF5 F073          	movff	tablat,___flmul@a+1
 22866  01091C  0009               	tblrd		*+
 22867  01091E  CFF5 F074          	movff	tablat,___flmul@a+2
 22868  010922  000A               	tblrd		*-
 22869  010924  CFF5 F075          	movff	tablat,___flmul@a+3
 22870  010928  0E00               	movlw	0
 22871  01092A  0100               	movlb	0	; () banked
 22872  01092C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22873  01092E  0E64               	movlw	100
 22874  010930  6F68               	movwf	___awdiv@divisor& (0+255),b
 22875  010932  0100               	movlb	0	; () banked
 22876  010934  518F               	movf	scale@scl& (0+255),w,b
 22877  010936  0100               	movlb	0	; () banked
 22878  010938  6F66               	movwf	___awdiv@dividend& (0+255),b
 22879  01093A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 22880  01093C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 22881  01093E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 22882  010940  EC8B  F0AC         	call	___awdiv	;wreg free
 22883  010944  0100               	movlb	0	; () banked
 22884  010946  90D8               	bcf	status,0,c
 22885  010948  3766               	rlcf	?___awdiv& (0+255),f,b
 22886  01094A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 22887  01094C  0100               	movlb	0	; () banked
 22888  01094E  90D8               	bcf	status,0,c
 22889  010950  3766               	rlcf	?___awdiv& (0+255),f,b
 22890  010952  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 22891  010954  0E48               	movlw	72
 22892  010956  0100               	movlb	0	; () banked
 22893  010958  2766               	addwf	?___awdiv& (0+255),f,b
 22894  01095A  0E00               	movlw	0
 22895  01095C  0100               	movlb	0	; () banked
 22896  01095E  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 22897  010960  0E41               	movlw	low __npowers_
 22898  010962  0100               	movlb	0	; () banked
 22899  010964  2566               	addwf	?___awdiv& (0+255),w,b
 22900  010966  6EF6               	movwf	tblptrl,c
 22901  010968  0EFC               	movlw	high __npowers_
 22902  01096A  0100               	movlb	0	; () banked
 22903  01096C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 22904  01096E  6EF7               	movwf	tblptrh,c
 22905  010970                     	if	1	;There are 3 active tblptr bytes
 22906  010970  6AF8               	clrf	tblptru,c
 22907  010972  0E00               	movlw	low (__mediumconst shr (0+16))
 22908  010974  22F8               	addwfc	tblptru,f,c
 22909  010976                     	endif
 22910  010976  0009               	tblrd		*+
 22911  010978  CFF5 F06E          	movff	tablat,___flmul@b
 22912  01097C  0009               	tblrd		*+
 22913  01097E  CFF5 F06F          	movff	tablat,___flmul@b+1
 22914  010982  0009               	tblrd		*+
 22915  010984  CFF5 F070          	movff	tablat,___flmul@b+2
 22916  010988  000A               	tblrd		*-
 22917  01098A  CFF5 F071          	movff	tablat,___flmul@b+3
 22918  01098E  EC2A  F089         	call	___flmul	;wreg free
 22919  010992  C06E  F08B         	movff	?___flmul,_scale$15266
 22920  010996  C06F  F08C         	movff	?___flmul+1,_scale$15266+1
 22921  01099A  C070  F08D         	movff	?___flmul+2,_scale$15266+2
 22922  01099E  C071  F08E         	movff	?___flmul+3,_scale$15266+3
 22923                           
 22924                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 22925  0109A2  C08B  F06E         	movff	_scale$15266,___flmul@b
 22926  0109A6  C08C  F06F         	movff	_scale$15266+1,___flmul@b+1
 22927  0109AA  C08D  F070         	movff	_scale$15266+2,___flmul@b+2
 22928  0109AE  C08E  F071         	movff	_scale$15266+3,___flmul@b+3
 22929  0109B2  0E00               	movlw	0
 22930  0109B4  0100               	movlb	0	; () banked
 22931  0109B6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 22932  0109B8  0E0A               	movlw	10
 22933  0109BA  6F62               	movwf	___awmod@divisor& (0+255),b
 22934  0109BC  0100               	movlb	0	; () banked
 22935  0109BE  518F               	movf	scale@scl& (0+255),w,b
 22936  0109C0  0100               	movlb	0	; () banked
 22937  0109C2  6F60               	movwf	___awmod@dividend& (0+255),b
 22938  0109C4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 22939  0109C6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 22940  0109C8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 22941  0109CA  ECA8  F0B1         	call	___awmod	;wreg free
 22942  0109CE  0100               	movlb	0	; () banked
 22943  0109D0  90D8               	bcf	status,0,c
 22944  0109D2  3760               	rlcf	?___awmod& (0+255),f,b
 22945  0109D4  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 22946  0109D6  0100               	movlb	0	; () banked
 22947  0109D8  90D8               	bcf	status,0,c
 22948  0109DA  3760               	rlcf	?___awmod& (0+255),f,b
 22949  0109DC  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 22950  0109DE  0E41               	movlw	low __npowers_
 22951  0109E0  0100               	movlb	0	; () banked
 22952  0109E2  2560               	addwf	?___awmod& (0+255),w,b
 22953  0109E4  6EF6               	movwf	tblptrl,c
 22954  0109E6  0EFC               	movlw	high __npowers_
 22955  0109E8  0100               	movlb	0	; () banked
 22956  0109EA  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 22957  0109EC  6EF7               	movwf	tblptrh,c
 22958  0109EE                     	if	1	;There are 3 active tblptr bytes
 22959  0109EE  6AF8               	clrf	tblptru,c
 22960  0109F0  0E00               	movlw	low (__mediumconst shr (0+16))
 22961  0109F2  22F8               	addwfc	tblptru,f,c
 22962  0109F4                     	endif
 22963  0109F4  0009               	tblrd		*+
 22964  0109F6  CFF5 F072          	movff	tablat,___flmul@a
 22965  0109FA  0009               	tblrd		*+
 22966  0109FC  CFF5 F073          	movff	tablat,___flmul@a+1
 22967  010A00  0009               	tblrd		*+
 22968  010A02  CFF5 F074          	movff	tablat,___flmul@a+2
 22969  010A06  000A               	tblrd		*-
 22970  010A08  CFF5 F075          	movff	tablat,___flmul@a+3
 22971  010A0C  EC2A  F089         	call	___flmul	;wreg free
 22972  010A10  C06E  F087         	movff	?___flmul,?_scale
 22973  010A14  C06F  F088         	movff	?___flmul+1,?_scale+1
 22974  010A18  C070  F089         	movff	?___flmul+2,?_scale+2
 22975  010A1C  C071  F08A         	movff	?___flmul+3,?_scale+3
 22976  010A20  0012               	return	
 22977  010A22                     l14747:
 22978                           
 22979                           ;doprnt.c: 432: else if(scl > 10)
 22980  010A22  0100               	movlb	0	; () banked
 22981  010A24  518F               	movf	scale@scl& (0+255),w,b
 22982  010A26  0A80               	xorlw	128
 22983  010A28  0F75               	addlw	-139
 22984  010A2A  A0D8               	btfss	status,0,c
 22985  010A2C  D063               	goto	l14753
 22986                           
 22987                           ; BSR set to: 0
 22988                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 22989  010A2E  0E00               	movlw	0
 22990  010A30  0100               	movlb	0	; () banked
 22991  010A32  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22992  010A34  0E0A               	movlw	10
 22993  010A36  6F68               	movwf	___awdiv@divisor& (0+255),b
 22994  010A38  0100               	movlb	0	; () banked
 22995  010A3A  518F               	movf	scale@scl& (0+255),w,b
 22996  010A3C  0100               	movlb	0	; () banked
 22997  010A3E  6F66               	movwf	___awdiv@dividend& (0+255),b
 22998  010A40  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 22999  010A42  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 23000  010A44  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 23001  010A46  EC8B  F0AC         	call	___awdiv	;wreg free
 23002  010A4A  0100               	movlb	0	; () banked
 23003  010A4C  90D8               	bcf	status,0,c
 23004  010A4E  3766               	rlcf	?___awdiv& (0+255),f,b
 23005  010A50  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23006  010A52  0100               	movlb	0	; () banked
 23007  010A54  90D8               	bcf	status,0,c
 23008  010A56  3766               	rlcf	?___awdiv& (0+255),f,b
 23009  010A58  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23010  010A5A  0E24               	movlw	36
 23011  010A5C  0100               	movlb	0	; () banked
 23012  010A5E  2766               	addwf	?___awdiv& (0+255),f,b
 23013  010A60  0E00               	movlw	0
 23014  010A62  0100               	movlb	0	; () banked
 23015  010A64  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 23016  010A66  0E41               	movlw	low __npowers_
 23017  010A68  0100               	movlb	0	; () banked
 23018  010A6A  2566               	addwf	?___awdiv& (0+255),w,b
 23019  010A6C  6EF6               	movwf	tblptrl,c
 23020  010A6E  0EFC               	movlw	high __npowers_
 23021  010A70  0100               	movlb	0	; () banked
 23022  010A72  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 23023  010A74  6EF7               	movwf	tblptrh,c
 23024  010A76                     	if	1	;There are 3 active tblptr bytes
 23025  010A76  6AF8               	clrf	tblptru,c
 23026  010A78  0E00               	movlw	low (__mediumconst shr (0+16))
 23027  010A7A  22F8               	addwfc	tblptru,f,c
 23028  010A7C                     	endif
 23029  010A7C  0009               	tblrd		*+
 23030  010A7E  CFF5 F06E          	movff	tablat,___flmul@b
 23031  010A82  0009               	tblrd		*+
 23032  010A84  CFF5 F06F          	movff	tablat,___flmul@b+1
 23033  010A88  0009               	tblrd		*+
 23034  010A8A  CFF5 F070          	movff	tablat,___flmul@b+2
 23035  010A8E  000A               	tblrd		*-
 23036  010A90  CFF5 F071          	movff	tablat,___flmul@b+3
 23037  010A94  0E00               	movlw	0
 23038  010A96  0100               	movlb	0	; () banked
 23039  010A98  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 23040  010A9A  0E0A               	movlw	10
 23041  010A9C  6F62               	movwf	___awmod@divisor& (0+255),b
 23042  010A9E  0100               	movlb	0	; () banked
 23043  010AA0  518F               	movf	scale@scl& (0+255),w,b
 23044  010AA2  0100               	movlb	0	; () banked
 23045  010AA4  6F60               	movwf	___awmod@dividend& (0+255),b
 23046  010AA6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 23047  010AA8  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 23048  010AAA  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 23049  010AAC  ECA8  F0B1         	call	___awmod	;wreg free
 23050  010AB0  0100               	movlb	0	; () banked
 23051  010AB2  90D8               	bcf	status,0,c
 23052  010AB4  3760               	rlcf	?___awmod& (0+255),f,b
 23053  010AB6  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 23054  010AB8  0100               	movlb	0	; () banked
 23055  010ABA  90D8               	bcf	status,0,c
 23056  010ABC  3760               	rlcf	?___awmod& (0+255),f,b
 23057  010ABE  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 23058  010AC0  0E41               	movlw	low __npowers_
 23059  010AC2  0100               	movlb	0	; () banked
 23060  010AC4  2560               	addwf	?___awmod& (0+255),w,b
 23061  010AC6  6EF6               	movwf	tblptrl,c
 23062  010AC8  0EFC               	movlw	high __npowers_
 23063  010ACA  0100               	movlb	0	; () banked
 23064  010ACC  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 23065  010ACE  6EF7               	movwf	tblptrh,c
 23066  010AD0                     	if	1	;There are 3 active tblptr bytes
 23067  010AD0  6AF8               	clrf	tblptru,c
 23068  010AD2  0E00               	movlw	low (__mediumconst shr (0+16))
 23069  010AD4  22F8               	addwfc	tblptru,f,c
 23070  010AD6                     	endif
 23071  010AD6  0009               	tblrd		*+
 23072  010AD8  CFF5 F072          	movff	tablat,___flmul@a
 23073  010ADC  0009               	tblrd		*+
 23074  010ADE  CFF5 F073          	movff	tablat,___flmul@a+1
 23075  010AE2  0009               	tblrd		*+
 23076  010AE4  CFF5 F074          	movff	tablat,___flmul@a+2
 23077  010AE8  000A               	tblrd		*-
 23078  010AEA  CFF5 F075          	movff	tablat,___flmul@a+3
 23079  010AEE  EC2A  F089         	call	___flmul	;wreg free
 23080  010AF2  D78E               	goto	L16
 23081  010AF4                     l14753:
 23082                           
 23083                           ;doprnt.c: 434: return _npowers_[scl];
 23084  010AF4  0100               	movlb	0	; () banked
 23085  010AF6  518F               	movf	scale@scl& (0+255),w,b
 23086  010AF8  0D04               	mullw	4
 23087  010AFA  0E41               	movlw	low __npowers_
 23088  010AFC  24F3               	addwf	prodl,w,c
 23089  010AFE  6EF6               	movwf	tblptrl,c
 23090  010B00  0EFC               	movlw	high __npowers_
 23091  010B02  20F4               	addwfc	prodh,w,c
 23092  010B04  6EF7               	movwf	tblptrh,c
 23093  010B06                     	if	1	;There are 3 active tblptr bytes
 23094  010B06  6AF8               	clrf	tblptru,c
 23095  010B08  0E00               	movlw	low (__mediumconst shr (0+16))
 23096  010B0A  22F8               	addwfc	tblptru,f,c
 23097  010B0C                     	endif
 23098  010B0C  0009               	tblrd		*+
 23099  010B0E  CFF5 F087          	movff	tablat,?_scale
 23100  010B12  0009               	tblrd		*+
 23101  010B14  CFF5 F088          	movff	tablat,?_scale+1
 23102  010B18  0009               	tblrd		*+
 23103  010B1A  CFF5 F089          	movff	tablat,?_scale+2
 23104  010B1E  000A               	tblrd		*-
 23105  010B20  CFF5 F08A          	movff	tablat,?_scale+3
 23106                           
 23107                           ; BSR set to: 0
 23108  010B24  0012               	return	
 23109  010B26                     l14757:
 23110                           
 23111                           ; BSR set to: 0
 23112                           ;doprnt.c: 435: }
 23113                           ;doprnt.c: 436: if(scl>=110)
 23114  010B26  0100               	movlb	0	; () banked
 23115  010B28  518F               	movf	scale@scl& (0+255),w,b
 23116  010B2A  0A80               	xorlw	128
 23117  010B2C  0F12               	addlw	-238
 23118  010B2E  A0D8               	btfss	status,0,c
 23119  010B30  D0BB               	goto	l14765
 23120                           
 23121                           ; BSR set to: 0
 23122                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 23123  010B32  0E00               	movlw	0
 23124  010B34  0100               	movlb	0	; () banked
 23125  010B36  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23126  010B38  0E0A               	movlw	10
 23127  010B3A  6F68               	movwf	___awdiv@divisor& (0+255),b
 23128  010B3C  0E00               	movlw	0
 23129  010B3E  0100               	movlb	0	; () banked
 23130  010B40  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 23131  010B42  0E64               	movlw	100
 23132  010B44  6F62               	movwf	___awmod@divisor& (0+255),b
 23133  010B46  0100               	movlb	0	; () banked
 23134  010B48  518F               	movf	scale@scl& (0+255),w,b
 23135  010B4A  0100               	movlb	0	; () banked
 23136  010B4C  6F60               	movwf	___awmod@dividend& (0+255),b
 23137  010B4E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 23138  010B50  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 23139  010B52  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 23140  010B54  ECA8  F0B1         	call	___awmod	;wreg free
 23141  010B58  C060  F066         	movff	?___awmod,___awdiv@dividend
 23142  010B5C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 23143  010B60  EC8B  F0AC         	call	___awdiv	;wreg free
 23144  010B64  0100               	movlb	0	; () banked
 23145  010B66  90D8               	bcf	status,0,c
 23146  010B68  3766               	rlcf	?___awdiv& (0+255),f,b
 23147  010B6A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23148  010B6C  0100               	movlb	0	; () banked
 23149  010B6E  90D8               	bcf	status,0,c
 23150  010B70  3766               	rlcf	?___awdiv& (0+255),f,b
 23151  010B72  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23152  010B74  0E24               	movlw	36
 23153  010B76  0100               	movlb	0	; () banked
 23154  010B78  2766               	addwf	?___awdiv& (0+255),f,b
 23155  010B7A  0E00               	movlw	0
 23156  010B7C  0100               	movlb	0	; () banked
 23157  010B7E  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 23158  010B80  0E0D               	movlw	low __powers_
 23159  010B82  0100               	movlb	0	; () banked
 23160  010B84  2566               	addwf	?___awdiv& (0+255),w,b
 23161  010B86  6EF6               	movwf	tblptrl,c
 23162  010B88  0EFC               	movlw	high __powers_
 23163  010B8A  0100               	movlb	0	; () banked
 23164  010B8C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 23165  010B8E  6EF7               	movwf	tblptrh,c
 23166  010B90                     	if	1	;There are 3 active tblptr bytes
 23167  010B90  6AF8               	clrf	tblptru,c
 23168  010B92  0E00               	movlw	low (__mediumconst shr (0+16))
 23169  010B94  22F8               	addwfc	tblptru,f,c
 23170  010B96                     	endif
 23171  010B96  0009               	tblrd		*+
 23172  010B98  CFF5 F072          	movff	tablat,___flmul@a
 23173  010B9C  0009               	tblrd		*+
 23174  010B9E  CFF5 F073          	movff	tablat,___flmul@a+1
 23175  010BA2  0009               	tblrd		*+
 23176  010BA4  CFF5 F074          	movff	tablat,___flmul@a+2
 23177  010BA8  000A               	tblrd		*-
 23178  010BAA  CFF5 F075          	movff	tablat,___flmul@a+3
 23179  010BAE  0E00               	movlw	0
 23180  010BB0  0100               	movlb	0	; () banked
 23181  010BB2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23182  010BB4  0E64               	movlw	100
 23183  010BB6  6F68               	movwf	___awdiv@divisor& (0+255),b
 23184  010BB8  0100               	movlb	0	; () banked
 23185  010BBA  518F               	movf	scale@scl& (0+255),w,b
 23186  010BBC  0100               	movlb	0	; () banked
 23187  010BBE  6F66               	movwf	___awdiv@dividend& (0+255),b
 23188  010BC0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 23189  010BC2  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 23190  010BC4  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 23191  010BC6  EC8B  F0AC         	call	___awdiv	;wreg free
 23192  010BCA  0100               	movlb	0	; () banked
 23193  010BCC  90D8               	bcf	status,0,c
 23194  010BCE  3766               	rlcf	?___awdiv& (0+255),f,b
 23195  010BD0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23196  010BD2  0100               	movlb	0	; () banked
 23197  010BD4  90D8               	bcf	status,0,c
 23198  010BD6  3766               	rlcf	?___awdiv& (0+255),f,b
 23199  010BD8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23200  010BDA  0E48               	movlw	72
 23201  010BDC  0100               	movlb	0	; () banked
 23202  010BDE  2766               	addwf	?___awdiv& (0+255),f,b
 23203  010BE0  0E00               	movlw	0
 23204  010BE2  0100               	movlb	0	; () banked
 23205  010BE4  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 23206  010BE6  0E0D               	movlw	low __powers_
 23207  010BE8  0100               	movlb	0	; () banked
 23208  010BEA  2566               	addwf	?___awdiv& (0+255),w,b
 23209  010BEC  6EF6               	movwf	tblptrl,c
 23210  010BEE  0EFC               	movlw	high __powers_
 23211  010BF0  0100               	movlb	0	; () banked
 23212  010BF2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 23213  010BF4  6EF7               	movwf	tblptrh,c
 23214  010BF6                     	if	1	;There are 3 active tblptr bytes
 23215  010BF6  6AF8               	clrf	tblptru,c
 23216  010BF8  0E00               	movlw	low (__mediumconst shr (0+16))
 23217  010BFA  22F8               	addwfc	tblptru,f,c
 23218  010BFC                     	endif
 23219  010BFC  0009               	tblrd		*+
 23220  010BFE  CFF5 F06E          	movff	tablat,___flmul@b
 23221  010C02  0009               	tblrd		*+
 23222  010C04  CFF5 F06F          	movff	tablat,___flmul@b+1
 23223  010C08  0009               	tblrd		*+
 23224  010C0A  CFF5 F070          	movff	tablat,___flmul@b+2
 23225  010C0E  000A               	tblrd		*-
 23226  010C10  CFF5 F071          	movff	tablat,___flmul@b+3
 23227  010C14  EC2A  F089         	call	___flmul	;wreg free
 23228  010C18  C06E  F08B         	movff	?___flmul,_scale$15266
 23229  010C1C  C06F  F08C         	movff	?___flmul+1,_scale$15266+1
 23230  010C20  C070  F08D         	movff	?___flmul+2,_scale$15266+2
 23231  010C24  C071  F08E         	movff	?___flmul+3,_scale$15266+3
 23232                           
 23233                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 23234  010C28  C08B  F06E         	movff	_scale$15266,___flmul@b
 23235  010C2C  C08C  F06F         	movff	_scale$15266+1,___flmul@b+1
 23236  010C30  C08D  F070         	movff	_scale$15266+2,___flmul@b+2
 23237  010C34  C08E  F071         	movff	_scale$15266+3,___flmul@b+3
 23238  010C38  0E00               	movlw	0
 23239  010C3A  0100               	movlb	0	; () banked
 23240  010C3C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 23241  010C3E  0E0A               	movlw	10
 23242  010C40  6F62               	movwf	___awmod@divisor& (0+255),b
 23243  010C42  0100               	movlb	0	; () banked
 23244  010C44  518F               	movf	scale@scl& (0+255),w,b
 23245  010C46  0100               	movlb	0	; () banked
 23246  010C48  6F60               	movwf	___awmod@dividend& (0+255),b
 23247  010C4A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 23248  010C4C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 23249  010C4E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 23250  010C50  ECA8  F0B1         	call	___awmod	;wreg free
 23251  010C54  0100               	movlb	0	; () banked
 23252  010C56  90D8               	bcf	status,0,c
 23253  010C58  3760               	rlcf	?___awmod& (0+255),f,b
 23254  010C5A  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 23255  010C5C  0100               	movlb	0	; () banked
 23256  010C5E  90D8               	bcf	status,0,c
 23257  010C60  3760               	rlcf	?___awmod& (0+255),f,b
 23258  010C62  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 23259  010C64  0E0D               	movlw	low __powers_
 23260  010C66  0100               	movlb	0	; () banked
 23261  010C68  2560               	addwf	?___awmod& (0+255),w,b
 23262  010C6A  6EF6               	movwf	tblptrl,c
 23263  010C6C  0EFC               	movlw	high __powers_
 23264  010C6E  0100               	movlb	0	; () banked
 23265  010C70  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 23266  010C72  6EF7               	movwf	tblptrh,c
 23267  010C74                     	if	1	;There are 3 active tblptr bytes
 23268  010C74  6AF8               	clrf	tblptru,c
 23269  010C76  0E00               	movlw	low (__mediumconst shr (0+16))
 23270  010C78  22F8               	addwfc	tblptru,f,c
 23271  010C7A                     	endif
 23272  010C7A  0009               	tblrd		*+
 23273  010C7C  CFF5 F072          	movff	tablat,___flmul@a
 23274  010C80  0009               	tblrd		*+
 23275  010C82  CFF5 F073          	movff	tablat,___flmul@a+1
 23276  010C86  0009               	tblrd		*+
 23277  010C88  CFF5 F074          	movff	tablat,___flmul@a+2
 23278  010C8C  000A               	tblrd		*-
 23279  010C8E  CFF5 F075          	movff	tablat,___flmul@a+3
 23280  010C92  EC2A  F089         	call	___flmul	;wreg free
 23281  010C96  C06E  F087         	movff	?___flmul,?_scale
 23282  010C9A  C06F  F088         	movff	?___flmul+1,?_scale+1
 23283  010C9E  C070  F089         	movff	?___flmul+2,?_scale+2
 23284  010CA2  C071  F08A         	movff	?___flmul+3,?_scale+3
 23285  010CA6  0012               	return	
 23286  010CA8                     l14765:
 23287                           
 23288                           ;doprnt.c: 438: else if(scl > 10)
 23289  010CA8  0100               	movlb	0	; () banked
 23290  010CAA  518F               	movf	scale@scl& (0+255),w,b
 23291  010CAC  0A80               	xorlw	128
 23292  010CAE  0F75               	addlw	-139
 23293  010CB0  A0D8               	btfss	status,0,c
 23294  010CB2  D063               	goto	l14771
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 23298  010CB4  0E00               	movlw	0
 23299  010CB6  0100               	movlb	0	; () banked
 23300  010CB8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23301  010CBA  0E0A               	movlw	10
 23302  010CBC  6F68               	movwf	___awdiv@divisor& (0+255),b
 23303  010CBE  0100               	movlb	0	; () banked
 23304  010CC0  518F               	movf	scale@scl& (0+255),w,b
 23305  010CC2  0100               	movlb	0	; () banked
 23306  010CC4  6F66               	movwf	___awdiv@dividend& (0+255),b
 23307  010CC6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 23308  010CC8  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 23309  010CCA  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 23310  010CCC  EC8B  F0AC         	call	___awdiv	;wreg free
 23311  010CD0  0100               	movlb	0	; () banked
 23312  010CD2  90D8               	bcf	status,0,c
 23313  010CD4  3766               	rlcf	?___awdiv& (0+255),f,b
 23314  010CD6  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23315  010CD8  0100               	movlb	0	; () banked
 23316  010CDA  90D8               	bcf	status,0,c
 23317  010CDC  3766               	rlcf	?___awdiv& (0+255),f,b
 23318  010CDE  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 23319  010CE0  0E24               	movlw	36
 23320  010CE2  0100               	movlb	0	; () banked
 23321  010CE4  2766               	addwf	?___awdiv& (0+255),f,b
 23322  010CE6  0E00               	movlw	0
 23323  010CE8  0100               	movlb	0	; () banked
 23324  010CEA  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 23325  010CEC  0E0D               	movlw	low __powers_
 23326  010CEE  0100               	movlb	0	; () banked
 23327  010CF0  2566               	addwf	?___awdiv& (0+255),w,b
 23328  010CF2  6EF6               	movwf	tblptrl,c
 23329  010CF4  0EFC               	movlw	high __powers_
 23330  010CF6  0100               	movlb	0	; () banked
 23331  010CF8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 23332  010CFA  6EF7               	movwf	tblptrh,c
 23333  010CFC                     	if	1	;There are 3 active tblptr bytes
 23334  010CFC  6AF8               	clrf	tblptru,c
 23335  010CFE  0E00               	movlw	low (__mediumconst shr (0+16))
 23336  010D00  22F8               	addwfc	tblptru,f,c
 23337  010D02                     	endif
 23338  010D02  0009               	tblrd		*+
 23339  010D04  CFF5 F06E          	movff	tablat,___flmul@b
 23340  010D08  0009               	tblrd		*+
 23341  010D0A  CFF5 F06F          	movff	tablat,___flmul@b+1
 23342  010D0E  0009               	tblrd		*+
 23343  010D10  CFF5 F070          	movff	tablat,___flmul@b+2
 23344  010D14  000A               	tblrd		*-
 23345  010D16  CFF5 F071          	movff	tablat,___flmul@b+3
 23346  010D1A  0E00               	movlw	0
 23347  010D1C  0100               	movlb	0	; () banked
 23348  010D1E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 23349  010D20  0E0A               	movlw	10
 23350  010D22  6F62               	movwf	___awmod@divisor& (0+255),b
 23351  010D24  0100               	movlb	0	; () banked
 23352  010D26  518F               	movf	scale@scl& (0+255),w,b
 23353  010D28  0100               	movlb	0	; () banked
 23354  010D2A  6F60               	movwf	___awmod@dividend& (0+255),b
 23355  010D2C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 23356  010D2E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 23357  010D30  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 23358  010D32  ECA8  F0B1         	call	___awmod	;wreg free
 23359  010D36  0100               	movlb	0	; () banked
 23360  010D38  90D8               	bcf	status,0,c
 23361  010D3A  3760               	rlcf	?___awmod& (0+255),f,b
 23362  010D3C  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 23363  010D3E  0100               	movlb	0	; () banked
 23364  010D40  90D8               	bcf	status,0,c
 23365  010D42  3760               	rlcf	?___awmod& (0+255),f,b
 23366  010D44  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 23367  010D46  0E0D               	movlw	low __powers_
 23368  010D48  0100               	movlb	0	; () banked
 23369  010D4A  2560               	addwf	?___awmod& (0+255),w,b
 23370  010D4C  6EF6               	movwf	tblptrl,c
 23371  010D4E  0EFC               	movlw	high __powers_
 23372  010D50  0100               	movlb	0	; () banked
 23373  010D52  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 23374  010D54  6EF7               	movwf	tblptrh,c
 23375  010D56                     	if	1	;There are 3 active tblptr bytes
 23376  010D56  6AF8               	clrf	tblptru,c
 23377  010D58  0E00               	movlw	low (__mediumconst shr (0+16))
 23378  010D5A  22F8               	addwfc	tblptru,f,c
 23379  010D5C                     	endif
 23380  010D5C  0009               	tblrd		*+
 23381  010D5E  CFF5 F072          	movff	tablat,___flmul@a
 23382  010D62  0009               	tblrd		*+
 23383  010D64  CFF5 F073          	movff	tablat,___flmul@a+1
 23384  010D68  0009               	tblrd		*+
 23385  010D6A  CFF5 F074          	movff	tablat,___flmul@a+2
 23386  010D6E  000A               	tblrd		*-
 23387  010D70  CFF5 F075          	movff	tablat,___flmul@a+3
 23388  010D74  EC2A  F089         	call	___flmul	;wreg free
 23389  010D78  D78E               	goto	L17
 23390  010D7A                     l14771:
 23391                           
 23392                           ;doprnt.c: 440: return _powers_[scl];
 23393  010D7A  0100               	movlb	0	; () banked
 23394  010D7C  518F               	movf	scale@scl& (0+255),w,b
 23395  010D7E  0D04               	mullw	4
 23396  010D80  0E0D               	movlw	low __powers_
 23397  010D82  24F3               	addwf	prodl,w,c
 23398  010D84  6EF6               	movwf	tblptrl,c
 23399  010D86  0EFC               	movlw	high __powers_
 23400  010D88  20F4               	addwfc	prodh,w,c
 23401  010D8A  6EF7               	movwf	tblptrh,c
 23402  010D8C                     	if	1	;There are 3 active tblptr bytes
 23403  010D8C  6AF8               	clrf	tblptru,c
 23404  010D8E  0E00               	movlw	low (__mediumconst shr (0+16))
 23405  010D90  22F8               	addwfc	tblptru,f,c
 23406  010D92                     	endif
 23407  010D92  0009               	tblrd		*+
 23408  010D94  CFF5 F087          	movff	tablat,?_scale
 23409  010D98  0009               	tblrd		*+
 23410  010D9A  CFF5 F088          	movff	tablat,?_scale+1
 23411  010D9E  0009               	tblrd		*+
 23412  010DA0  CFF5 F089          	movff	tablat,?_scale+2
 23413  010DA4  000A               	tblrd		*-
 23414  010DA6  CFF5 F08A          	movff	tablat,?_scale+3
 23415  010DAA  0012               	return	
 23416  010DAC                     __end_of_scale:
 23417                           	opt stack 0
 23418                           tosu	equ	0xFFF
 23419                           tosh	equ	0xFFE
 23420                           tosl	equ	0xFFD
 23421                           pclath	equ	0xFFA
 23422                           tblptru	equ	0xFF8
 23423                           tblptrh	equ	0xFF7
 23424                           tblptrl	equ	0xFF6
 23425                           tablat	equ	0xFF5
 23426                           prodh	equ	0xFF4
 23427                           prodl	equ	0xFF3
 23428                           intcon	equ	0xFF2
 23429                           indf0	equ	0xFEF
 23430                           postinc0	equ	0xFEE
 23431                           fsr0h	equ	0xFEA
 23432                           fsr0l	equ	0xFE9
 23433                           wreg	equ	0xFE8
 23434                           indf1	equ	0xFE7
 23435                           postdec1	equ	0xFE5
 23436                           fsr1h	equ	0xFE2
 23437                           fsr1l	equ	0xFE1
 23438                           indf2	equ	0xFDF
 23439                           postinc2	equ	0xFDE
 23440                           postdec2	equ	0xFDD
 23441                           plusw2	equ	0xFDB
 23442                           fsr2h	equ	0xFDA
 23443                           fsr2l	equ	0xFD9
 23444                           status	equ	0xFD8
 23445                           
 23446 ;; *************** function _putch *****************
 23447 ;; Defined at:
 23448 ;;		line 454 in file "Library/Console.c"
 23449 ;; Parameters:    Size  Location     Type
 23450 ;;  c               1    wreg     unsigned char 
 23451 ;; Auto vars:     Size  Location     Type
 23452 ;;  c               1   26[BANK0 ] unsigned char 
 23453 ;; Return value:  Size  Location     Type
 23454 ;;                  1    wreg      void 
 23455 ;; Registers used:
 23456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23457 ;; Tracked objects:
 23458 ;;		On entry : 0/0
 23459 ;;		On exit  : 0/0
 23460 ;;		Unchanged: 0/0
 23461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23465 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23466 ;;Total ram usage:        1 bytes
 23467 ;; Hardware stack levels used:    1
 23468 ;; Hardware stack levels required when called:   11
 23469 ;; This function calls:
 23470 ;;		_Console_PrintChar
 23471 ;; This function is called by:
 23472 ;;		_printf
 23473 ;; This function uses a non-reentrant model
 23474 ;;
 23475                           
 23476                           	psect	text118
 23477  017F62                     __ptext118:
 23478                           	opt stack 0
 23479  017F62                     _putch:
 23480                           	opt stack 18
 23481                           
 23482                           ;incstack = 0
 23483                           ;putch@c stored from wreg
 23484  017F62  0100               	movlb	0	; () banked
 23485  017F64  6F7A               	movwf	putch@c& (0+255),b
 23486                           
 23487                           ;Console.c: 456: Console_PrintChar(c);
 23488  017F66  0100               	movlb	0	; () banked
 23489  017F68  517A               	movf	putch@c& (0+255),w,b
 23490  017F6A  ECD3  F09F         	call	_Console_PrintChar
 23491  017F6E  0012               	return		;funcret
 23492  017F70                     __end_of_putch:
 23493                           	opt stack 0
 23494                           tosu	equ	0xFFF
 23495                           tosh	equ	0xFFE
 23496                           tosl	equ	0xFFD
 23497                           pclath	equ	0xFFA
 23498                           tblptru	equ	0xFF8
 23499                           tblptrh	equ	0xFF7
 23500                           tblptrl	equ	0xFF6
 23501                           tablat	equ	0xFF5
 23502                           prodh	equ	0xFF4
 23503                           prodl	equ	0xFF3
 23504                           intcon	equ	0xFF2
 23505                           indf0	equ	0xFEF
 23506                           postinc0	equ	0xFEE
 23507                           fsr0h	equ	0xFEA
 23508                           fsr0l	equ	0xFE9
 23509                           wreg	equ	0xFE8
 23510                           indf1	equ	0xFE7
 23511                           postdec1	equ	0xFE5
 23512                           fsr1h	equ	0xFE2
 23513                           fsr1l	equ	0xFE1
 23514                           indf2	equ	0xFDF
 23515                           postinc2	equ	0xFDE
 23516                           postdec2	equ	0xFDD
 23517                           plusw2	equ	0xFDB
 23518                           fsr2h	equ	0xFDA
 23519                           fsr2l	equ	0xFD9
 23520                           status	equ	0xFD8
 23521                           
 23522 ;; *************** function _Console_PrintChar *****************
 23523 ;; Defined at:
 23524 ;;		line 322 in file "Library/Console.c"
 23525 ;; Parameters:    Size  Location     Type
 23526 ;;  pInput          1    wreg     unsigned char 
 23527 ;; Auto vars:     Size  Location     Type
 23528 ;;  pInput          1   25[BANK0 ] unsigned char 
 23529 ;; Return value:  Size  Location     Type
 23530 ;;                  1    wreg      void 
 23531 ;; Registers used:
 23532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23533 ;; Tracked objects:
 23534 ;;		On entry : 0/0
 23535 ;;		On exit  : 0/0
 23536 ;;		Unchanged: 0/0
 23537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23540 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23541 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23542 ;;Total ram usage:        4 bytes
 23543 ;; Hardware stack levels used:    1
 23544 ;; Hardware stack levels required when called:   10
 23545 ;; This function calls:
 23546 ;;		_Console_Backspace
 23547 ;;		_Console_FormFeed
 23548 ;;		_Console_IncrementCursor
 23549 ;;		_Console_NewLine
 23550 ;;		_Console_ResetCursor
 23551 ;;		_Console_Tab
 23552 ;; This function is called by:
 23553 ;;		_putch
 23554 ;;		_Console_PrintString
 23555 ;; This function uses a non-reentrant model
 23556 ;;
 23557                           
 23558                           	psect	text119
 23559  013FA6                     __ptext119:
 23560                           	opt stack 0
 23561  013FA6                     _Console_PrintChar:
 23562                           	opt stack 18
 23563                           
 23564                           ;incstack = 0
 23565                           ;Console_PrintChar@pInput stored from wreg
 23566  013FA6  0100               	movlb	0	; () banked
 23567  013FA8  6F79               	movwf	Console_PrintChar@pInput& (0+255),b
 23568                           
 23569                           ;Console.c: 324: switch(pInput)
 23570  013FAA  D0A8               	goto	l13757
 23571  013FAC                     l13713:
 23572                           
 23573                           ;Console.c: 327: case '\n':
 23574                           ;Console.c: 328: Console_NewLine();
 23575  013FAC  ECE0  F0B2         	call	_Console_NewLine	;wreg free
 23576                           
 23577                           ;Console.c: 329: return;
 23578  013FB0  0012               	return	
 23579  013FB2                     l13717:
 23580                           
 23581                           ;Console.c: 331: Console_Backspace();
 23582  013FB2  EC5C  F0BA         	call	_Console_Backspace	;wreg free
 23583                           
 23584                           ;Console.c: 332: return;
 23585  013FB6  0012               	return	
 23586  013FB8                     l13721:
 23587                           
 23588                           ;Console.c: 334: Console_FormFeed();
 23589  013FB8  ECFB  F0B3         	call	_Console_FormFeed	;wreg free
 23590                           
 23591                           ;Console.c: 335: return;
 23592  013FBC  0012               	return	
 23593  013FBE                     l13725:
 23594                           
 23595                           ;Console.c: 337: Console_Tab();
 23596  013FBE  EC2A  F0AC         	call	_Console_Tab	;wreg free
 23597                           
 23598                           ;Console.c: 338: return;
 23599  013FC2  0012               	return	
 23600  013FC4                     l13729:
 23601                           
 23602                           ;Console.c: 340: Console_IncrementCursor();
 23603  013FC4  ECC8  F0B8         	call	_Console_IncrementCursor	;wreg free
 23604                           
 23605                           ;Console.c: 341: return;
 23606  013FC8  0012               	return	
 23607  013FCA                     l13733:
 23608                           
 23609                           ;Console.c: 343: Console_ResetCursor();
 23610  013FCA  EC06  F0BF         	call	_Console_ResetCursor	;wreg free
 23611                           
 23612                           ;Console.c: 344: return;
 23613  013FCE  0012               	return	
 23614  013FD0                     l13737:
 23615                           
 23616                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 23617  013FD0  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 23618  013FD4  0E7F               	movlw	127
 23619  013FD6  0100               	movlb	0	; () banked
 23620  013FD8  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 23621  013FDA  5036               	movf	_lBufferY,w,c
 23622  013FDC  0D14               	mullw	20
 23623  013FDE  0E7D               	movlw	low _lBuffer
 23624  013FE0  0100               	movlb	0	; () banked
 23625  013FE2  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23626  013FE4  0E02               	movlw	high _lBuffer
 23627  013FE6  0100               	movlb	0	; () banked
 23628  013FE8  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 23629  013FEA  50F3               	movf	prodl,w,c
 23630  013FEC  0100               	movlb	0	; () banked
 23631  013FEE  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 23632  013FF0  50F4               	movf	prodh,w,c
 23633  013FF2  0100               	movlb	0	; () banked
 23634  013FF4  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 23635  013FF6  5037               	movf	_lBufferX,w,c
 23636  013FF8  0D01               	mullw	1
 23637  013FFA  50F3               	movf	prodl,w,c
 23638  013FFC  0100               	movlb	0	; () banked
 23639  013FFE  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 23640  014000  6ED9               	movwf	fsr2l,c
 23641  014002  50F4               	movf	prodh,w,c
 23642  014004  0100               	movlb	0	; () banked
 23643  014006  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 23644  014008  6EDA               	movwf	fsr2h,c
 23645  01400A  50DF               	movf	indf2,w,c
 23646  01400C  0B7F               	andlw	127
 23647  01400E  0100               	movlb	0	; () banked
 23648  014010  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 23649  014012  B4D8               	btfsc	status,2,c
 23650  014014  D02B               	goto	l13745
 23651                           
 23652                           ; BSR set to: 0
 23653                           ;Console.c: 351: {
 23654                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 23655  014016  0E01               	movlw	1
 23656  014018  0100               	movlb	0	; () banked
 23657  01401A  6FFC               	movwf	_change& (0+255),b
 23658                           
 23659                           ; BSR set to: 0
 23660  01401C  5036               	movf	_lBufferY,w,c
 23661  01401E  0D14               	mullw	20
 23662  014020  0E7D               	movlw	low _lBuffer
 23663  014022  0100               	movlb	0	; () banked
 23664  014024  6F76               	movwf	??_Console_PrintChar& (0+255),b
 23665  014026  0E02               	movlw	high _lBuffer
 23666  014028  0100               	movlb	0	; () banked
 23667  01402A  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23668  01402C  50F3               	movf	prodl,w,c
 23669  01402E  0100               	movlb	0	; () banked
 23670  014030  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 23671  014032  50F4               	movf	prodh,w,c
 23672  014034  0100               	movlb	0	; () banked
 23673  014036  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 23674  014038  5037               	movf	_lBufferX,w,c
 23675  01403A  0D01               	mullw	1
 23676  01403C  50F3               	movf	prodl,w,c
 23677  01403E  0100               	movlb	0	; () banked
 23678  014040  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 23679  014042  6ED9               	movwf	fsr2l,c
 23680  014044  50F4               	movf	prodh,w,c
 23681  014046  0100               	movlb	0	; () banked
 23682  014048  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 23683  01404A  6EDA               	movwf	fsr2h,c
 23684  01404C  0100               	movlb	0	; () banked
 23685  01404E  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 23686  014050  0980               	iorlw	128
 23687  014052  6EDF               	movwf	indf2,c
 23688                           
 23689                           ; BSR set to: 0
 23690                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 23691  014054  5036               	movf	_lBufferY,w,c
 23692  014056  0D02               	mullw	2
 23693  014058  0E00               	movlw	low _lCBuffer
 23694  01405A  24F3               	addwf	prodl,w,c
 23695  01405C  6ED9               	movwf	fsr2l,c
 23696  01405E  0E02               	movlw	high _lCBuffer
 23697  014060  20F4               	addwfc	prodh,w,c
 23698  014062  6EDA               	movwf	fsr2h,c
 23699  014064  C0FA  FFDE         	movff	_gForecolour,postinc2
 23700  014068  C0FB  FFDD         	movff	_gForecolour+1,postdec2
 23701  01406C                     l13745:
 23702                           
 23703                           ; BSR set to: 0
 23704                           ;Console.c: 354: }
 23705                           ;Console.c: 368: if(Console_IncrementCursor())
 23706  01406C  ECC8  F0B8         	call	_Console_IncrementCursor	;wreg free
 23707  014070  0900               	iorlw	0
 23708  014072  B4D8               	btfsc	status,2,c
 23709  014074  0012               	return	
 23710                           
 23711                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 23712  014076  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 23713  01407A  0E7F               	movlw	127
 23714  01407C  0100               	movlb	0	; () banked
 23715  01407E  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 23716  014080  5036               	movf	_lBufferY,w,c
 23717  014082  0D14               	mullw	20
 23718  014084  0E7D               	movlw	low _lBuffer
 23719  014086  0100               	movlb	0	; () banked
 23720  014088  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23721  01408A  0E02               	movlw	high _lBuffer
 23722  01408C  0100               	movlb	0	; () banked
 23723  01408E  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 23724  014090  50F3               	movf	prodl,w,c
 23725  014092  0100               	movlb	0	; () banked
 23726  014094  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 23727  014096  50F4               	movf	prodh,w,c
 23728  014098  0100               	movlb	0	; () banked
 23729  01409A  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 23730  01409C  5037               	movf	_lBufferX,w,c
 23731  01409E  0D01               	mullw	1
 23732  0140A0  50F3               	movf	prodl,w,c
 23733  0140A2  0100               	movlb	0	; () banked
 23734  0140A4  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 23735  0140A6  6ED9               	movwf	fsr2l,c
 23736  0140A8  50F4               	movf	prodh,w,c
 23737  0140AA  0100               	movlb	0	; () banked
 23738  0140AC  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 23739  0140AE  6EDA               	movwf	fsr2h,c
 23740  0140B0  50DF               	movf	indf2,w,c
 23741  0140B2  0B7F               	andlw	127
 23742  0140B4  0100               	movlb	0	; () banked
 23743  0140B6  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 23744  0140B8  B4D8               	btfsc	status,2,c
 23745  0140BA  0012               	return	
 23746                           
 23747                           ; BSR set to: 0
 23748                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 23749  0140BC  0E01               	movlw	1
 23750  0140BE  0100               	movlb	0	; () banked
 23751  0140C0  6FFC               	movwf	_change& (0+255),b
 23752                           
 23753                           ; BSR set to: 0
 23754  0140C2  5036               	movf	_lBufferY,w,c
 23755  0140C4  0D14               	mullw	20
 23756  0140C6  0E7D               	movlw	low _lBuffer
 23757  0140C8  0100               	movlb	0	; () banked
 23758  0140CA  6F76               	movwf	??_Console_PrintChar& (0+255),b
 23759  0140CC  0E02               	movlw	high _lBuffer
 23760  0140CE  0100               	movlb	0	; () banked
 23761  0140D0  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 23762  0140D2  50F3               	movf	prodl,w,c
 23763  0140D4  0100               	movlb	0	; () banked
 23764  0140D6  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 23765  0140D8  50F4               	movf	prodh,w,c
 23766  0140DA  0100               	movlb	0	; () banked
 23767  0140DC  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 23768  0140DE  5037               	movf	_lBufferX,w,c
 23769  0140E0  0D01               	mullw	1
 23770  0140E2  50F3               	movf	prodl,w,c
 23771  0140E4  0100               	movlb	0	; () banked
 23772  0140E6  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 23773  0140E8  6ED9               	movwf	fsr2l,c
 23774  0140EA  50F4               	movf	prodh,w,c
 23775  0140EC  0100               	movlb	0	; () banked
 23776  0140EE  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 23777  0140F0  6EDA               	movwf	fsr2h,c
 23778  0140F2  0100               	movlb	0	; () banked
 23779  0140F4  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 23780  0140F6  0980               	iorlw	128
 23781  0140F8  6EDF               	movwf	indf2,c
 23782                           
 23783                           ; BSR set to: 0
 23784                           ;Console.c: 372: };
 23785                           
 23786                           ; BSR set to: 0
 23787                           ;Console.c: 371: return;
 23788                           
 23789                           ; BSR set to: 0
 23790                           
 23791                           ; BSR set to: 0
 23792  0140FA  0012               	return	
 23793  0140FC                     l13757:
 23794  0140FC  0100               	movlb	0	; () banked
 23795  0140FE  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 23796                           
 23797                           ; Switch size 1, requested type "space"
 23798                           ; Number of cases is 8, Range of values is 7 to 35
 23799                           ; switch strategies available:
 23800                           ; Name         Instructions Cycles
 23801                           ; simple_byte           25    13 (average)
 23802                           ;	Chosen strategy is simple_byte
 23803  014100  0A07               	xorlw	7	; case 7
 23804  014102  B4D8               	btfsc	status,2,c
 23805  014104  D75F               	goto	l13729
 23806  014106  0A0F               	xorlw	15	; case 8
 23807  014108  B4D8               	btfsc	status,2,c
 23808  01410A  D753               	goto	l13717
 23809  01410C  0A01               	xorlw	1	; case 9
 23810  01410E  B4D8               	btfsc	status,2,c
 23811  014110  D756               	goto	l13725
 23812  014112  0A03               	xorlw	3	; case 10
 23813  014114  B4D8               	btfsc	status,2,c
 23814  014116  D74A               	goto	l13713
 23815  014118  0A06               	xorlw	6	; case 12
 23816  01411A  B4D8               	btfsc	status,2,c
 23817  01411C  D74D               	goto	l13721
 23818  01411E  0A01               	xorlw	1	; case 13
 23819  014120  B4D8               	btfsc	status,2,c
 23820  014122  D744               	goto	l13713
 23821  014124  0A2D               	xorlw	45	; case 32
 23822  014126  B4D8               	btfsc	status,2,c
 23823  014128  D753               	goto	l13737
 23824  01412A  0A03               	xorlw	3	; case 35
 23825  01412C  B4D8               	btfsc	status,2,c
 23826  01412E  D74D               	goto	l13733
 23827  014130  D74F               	goto	l13737
 23828  014132                     __end_of_Console_PrintChar:
 23829                           	opt stack 0
 23830                           tosu	equ	0xFFF
 23831                           tosh	equ	0xFFE
 23832                           tosl	equ	0xFFD
 23833                           pclath	equ	0xFFA
 23834                           tblptru	equ	0xFF8
 23835                           tblptrh	equ	0xFF7
 23836                           tblptrl	equ	0xFF6
 23837                           tablat	equ	0xFF5
 23838                           prodh	equ	0xFF4
 23839                           prodl	equ	0xFF3
 23840                           intcon	equ	0xFF2
 23841                           indf0	equ	0xFEF
 23842                           postinc0	equ	0xFEE
 23843                           fsr0h	equ	0xFEA
 23844                           fsr0l	equ	0xFE9
 23845                           wreg	equ	0xFE8
 23846                           indf1	equ	0xFE7
 23847                           postdec1	equ	0xFE5
 23848                           fsr1h	equ	0xFE2
 23849                           fsr1l	equ	0xFE1
 23850                           indf2	equ	0xFDF
 23851                           postinc2	equ	0xFDE
 23852                           postdec2	equ	0xFDD
 23853                           plusw2	equ	0xFDB
 23854                           fsr2h	equ	0xFDA
 23855                           fsr2l	equ	0xFD9
 23856                           status	equ	0xFD8
 23857                           
 23858 ;; *************** function _Console_Tab *****************
 23859 ;; Defined at:
 23860 ;;		line 260 in file "Library/Console.c"
 23861 ;; Parameters:    Size  Location     Type
 23862 ;;		None
 23863 ;; Auto vars:     Size  Location     Type
 23864 ;;  c               1   21[BANK0 ] unsigned char 
 23865 ;;  i               1   20[BANK0 ] unsigned char 
 23866 ;;  t               1   19[BANK0 ] unsigned char 
 23867 ;; Return value:  Size  Location     Type
 23868 ;;                  1    wreg      void 
 23869 ;; Registers used:
 23870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23871 ;; Tracked objects:
 23872 ;;		On entry : 0/0
 23873 ;;		On exit  : 0/0
 23874 ;;		Unchanged: 0/0
 23875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23877 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23878 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23879 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23880 ;;Total ram usage:        8 bytes
 23881 ;; Hardware stack levels used:    1
 23882 ;; Hardware stack levels required when called:    9
 23883 ;; This function calls:
 23884 ;;		_Console_ClearCursor
 23885 ;;		_Console_IncrementCursor
 23886 ;;		___awdiv
 23887 ;; This function is called by:
 23888 ;;		_Console_PrintChar
 23889 ;; This function uses a non-reentrant model
 23890 ;;
 23891                           
 23892                           	psect	text120
 23893  015854                     __ptext120:
 23894                           	opt stack 0
 23895  015854                     _Console_Tab:
 23896                           	opt stack 18
 23897                           
 23898                           ;Console.c: 262: UINT8 i = 0;
 23899                           
 23900                           ;incstack = 0
 23901  015854  0E00               	movlw	0
 23902  015856  0100               	movlb	0	; () banked
 23903  015858  6F74               	movwf	Console_Tab@i& (0+255),b
 23904                           
 23905                           ; BSR set to: 0
 23906                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 23907  01585A  0EFA               	movlw	250
 23908  01585C  243F               	addwf	_gCursor,w,c
 23909  01585E  0100               	movlb	0	; () banked
 23910  015860  6F66               	movwf	___awdiv@dividend& (0+255),b
 23911  015862  0EFF               	movlw	255
 23912  015864  2040               	addwfc	_gCursor+1,w,c
 23913  015866  0100               	movlb	0	; () banked
 23914  015868  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
 23915  01586A  0E00               	movlw	0
 23916  01586C  0100               	movlb	0	; () banked
 23917  01586E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23918  015870  0E06               	movlw	6
 23919  015872  6F68               	movwf	___awdiv@divisor& (0+255),b
 23920  015874  EC8B  F0AC         	call	___awdiv	;wreg free
 23921  015878  0100               	movlb	0	; () banked
 23922  01587A  5166               	movf	?___awdiv& (0+255),w,b
 23923  01587C  0100               	movlb	0	; () banked
 23924  01587E  6F75               	movwf	Console_Tab@c& (0+255),b
 23925                           
 23926                           ; BSR set to: 0
 23927                           ;Console.c: 264: UINT8 t = c/4;
 23928  015880  C075  F066         	movff	Console_Tab@c,___awdiv@dividend
 23929  015884  0100               	movlb	0	; () banked
 23930  015886  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 23931  015888  0E00               	movlw	0
 23932  01588A  0100               	movlb	0	; () banked
 23933  01588C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23934  01588E  0E04               	movlw	4
 23935  015890  6F68               	movwf	___awdiv@divisor& (0+255),b
 23936  015892  EC8B  F0AC         	call	___awdiv	;wreg free
 23937  015896  0100               	movlb	0	; () banked
 23938  015898  5166               	movf	?___awdiv& (0+255),w,b
 23939  01589A  0100               	movlb	0	; () banked
 23940  01589C  6F73               	movwf	Console_Tab@t& (0+255),b
 23941                           
 23942                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 23943  01589E  0E00               	movlw	0
 23944  0158A0  0100               	movlb	0	; () banked
 23945  0158A2  6F74               	movwf	Console_Tab@i& (0+255),b
 23946  0158A4  D006               	goto	l13389
 23947  0158A6                     l13385:
 23948                           
 23949                           ; BSR set to: 0
 23950                           ;Console.c: 266: {
 23951                           ;Console.c: 267: Console_ClearCursor();
 23952  0158A6  ECA4  F0BC         	call	_Console_ClearCursor	;wreg free
 23953                           
 23954                           ;Console.c: 268: Console_IncrementCursor();
 23955  0158AA  ECC8  F0B8         	call	_Console_IncrementCursor	;wreg free
 23956  0158AE  0100               	movlb	0	; () banked
 23957  0158B0  2B74               	incf	Console_Tab@i& (0+255),f,b
 23958  0158B2                     l13389:
 23959                           
 23960                           ; BSR set to: 0
 23961  0158B2  0100               	movlb	0	; () banked
 23962  0158B4  5173               	movf	Console_Tab@t& (0+255),w,b
 23963  0158B6  0D04               	mullw	4
 23964  0158B8  1EF3               	comf	prodl,f,c
 23965  0158BA  1EF4               	comf	prodh,f,c
 23966  0158BC  4AF3               	infsnz	prodl,f,c
 23967  0158BE  2AF4               	incf	prodh,f,c
 23968  0158C0  0100               	movlb	0	; () banked
 23969  0158C2  5175               	movf	Console_Tab@c& (0+255),w,b
 23970  0158C4  0100               	movlb	0	; () banked
 23971  0158C6  6F6E               	movwf	??_Console_Tab& (0+255),b
 23972  0158C8  6B6F               	clrf	(??_Console_Tab+1)& (0+255),b
 23973  0158CA  50F3               	movf	prodl,w,c
 23974  0158CC  0100               	movlb	0	; () banked
 23975  0158CE  276E               	addwf	??_Console_Tab& (0+255),f,b
 23976  0158D0  50F4               	movf	prodh,w,c
 23977  0158D2  0100               	movlb	0	; () banked
 23978  0158D4  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 23979  0158D6  0100               	movlb	0	; () banked
 23980  0158D8  1F6E               	comf	??_Console_Tab& (0+255),f,b
 23981  0158DA  1F6F               	comf	(??_Console_Tab+1)& (0+255),f,b
 23982  0158DC  4B6E               	infsnz	??_Console_Tab& (0+255),f,b
 23983  0158DE  2B6F               	incf	(??_Console_Tab+1)& (0+255),f,b
 23984  0158E0  0E04               	movlw	4
 23985  0158E2  0100               	movlb	0	; () banked
 23986  0158E4  276E               	addwf	??_Console_Tab& (0+255),f,b
 23987  0158E6  0E00               	movlw	0
 23988  0158E8  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 23989  0158EA  0100               	movlb	0	; () banked
 23990  0158EC  5174               	movf	Console_Tab@i& (0+255),w,b
 23991  0158EE  0100               	movlb	0	; () banked
 23992  0158F0  6F70               	movwf	(??_Console_Tab+2)& (0+255),b
 23993  0158F2  6B71               	clrf	(??_Console_Tab+3)& (0+255),b
 23994  0158F4  0100               	movlb	0	; () banked
 23995  0158F6  516E               	movf	??_Console_Tab& (0+255),w,b
 23996  0158F8  0100               	movlb	0	; () banked
 23997  0158FA  5D70               	subwf	(??_Console_Tab+2)& (0+255),w,b
 23998  0158FC  0100               	movlb	0	; () banked
 23999  0158FE  5171               	movf	(??_Console_Tab+3)& (0+255),w,b
 24000  015900  0A80               	xorlw	128
 24001  015902  0100               	movlb	0	; () banked
 24002  015904  6F72               	movwf	(??_Console_Tab+4)& (0+255),b
 24003  015906  0100               	movlb	0	; () banked
 24004  015908  516F               	movf	(??_Console_Tab+1)& (0+255),w,b
 24005  01590A  0A80               	xorlw	128
 24006  01590C  0100               	movlb	0	; () banked
 24007  01590E  5972               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 24008  015910  B0D8               	btfsc	status,0,c
 24009  015912  0012               	return	
 24010  015914  D7C8               	goto	l13385
 24011  015916                     __end_of_Console_Tab:
 24012                           	opt stack 0
 24013                           tosu	equ	0xFFF
 24014                           tosh	equ	0xFFE
 24015                           tosl	equ	0xFFD
 24016                           pclath	equ	0xFFA
 24017                           tblptru	equ	0xFF8
 24018                           tblptrh	equ	0xFF7
 24019                           tblptrl	equ	0xFF6
 24020                           tablat	equ	0xFF5
 24021                           prodh	equ	0xFF4
 24022                           prodl	equ	0xFF3
 24023                           intcon	equ	0xFF2
 24024                           indf0	equ	0xFEF
 24025                           postinc0	equ	0xFEE
 24026                           fsr0h	equ	0xFEA
 24027                           fsr0l	equ	0xFE9
 24028                           wreg	equ	0xFE8
 24029                           indf1	equ	0xFE7
 24030                           postdec1	equ	0xFE5
 24031                           fsr1h	equ	0xFE2
 24032                           fsr1l	equ	0xFE1
 24033                           indf2	equ	0xFDF
 24034                           postinc2	equ	0xFDE
 24035                           postdec2	equ	0xFDD
 24036                           plusw2	equ	0xFDB
 24037                           fsr2h	equ	0xFDA
 24038                           fsr2l	equ	0xFD9
 24039                           status	equ	0xFD8
 24040                           
 24041 ;; *************** function _Console_IncrementCursor *****************
 24042 ;; Defined at:
 24043 ;;		line 243 in file "Library/Console.c"
 24044 ;; Parameters:    Size  Location     Type
 24045 ;;		None
 24046 ;; Auto vars:     Size  Location     Type
 24047 ;;		None
 24048 ;; Return value:  Size  Location     Type
 24049 ;;                  1    wreg      unsigned char 
 24050 ;; Registers used:
 24051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24052 ;; Tracked objects:
 24053 ;;		On entry : 0/0
 24054 ;;		On exit  : 0/0
 24055 ;;		Unchanged: 0/0
 24056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24061 ;;Total ram usage:        2 bytes
 24062 ;; Hardware stack levels used:    1
 24063 ;; Hardware stack levels required when called:    8
 24064 ;; This function calls:
 24065 ;;		_Console_FormFeed
 24066 ;;		_Console_NewLine
 24067 ;; This function is called by:
 24068 ;;		_Console_Tab
 24069 ;;		_Console_PrintChar
 24070 ;; This function uses a non-reentrant model
 24071 ;;
 24072                           
 24073                           	psect	text121
 24074  017190                     __ptext121:
 24075                           	opt stack 0
 24076  017190                     _Console_IncrementCursor:
 24077                           	opt stack 18
 24078                           
 24079                           ;Console.c: 246: lBufferX += 1;
 24080                           
 24081                           ; BSR set to: 0
 24082                           ;incstack = 0
 24083  017190  2A37               	incf	_lBufferX,f,c
 24084                           
 24085                           ;Console.c: 248: gCursor.x += 6;
 24086  017192  0E06               	movlw	6
 24087  017194  263F               	addwf	_gCursor,f,c
 24088  017196  0E00               	movlw	0
 24089  017198  2240               	addwfc	_gCursor+1,f,c
 24090                           
 24091                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 24092  01719A  0E06               	movlw	6
 24093  01719C  243F               	addwf	_gCursor,w,c
 24094  01719E  0100               	movlb	0	; () banked
 24095  0171A0  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24096  0171A2  0E00               	movlw	0
 24097  0171A4  2040               	addwfc	_gCursor+1,w,c
 24098  0171A6  0100               	movlb	0	; () banked
 24099  0171A8  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24100  0171AA  0100               	movlb	0	; () banked
 24101  0171AC  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24102  0171AE  D009               	goto	l13089
 24103  0171B0  0100               	movlb	0	; () banked
 24104  0171B2  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24105  0171B4  E104               	bnz	u10520
 24106  0171B6  0E80               	movlw	128
 24107  0171B8  0100               	movlb	0	; () banked
 24108  0171BA  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24109  0171BC  B0D8               	btfsc	status,0,c
 24110  0171BE                     u10520:
 24111                           
 24112                           ; BSR set to: 0
 24113                           ;Console.c: 250: Console_NewLine();
 24114  0171BE  ECE0  F0B2         	call	_Console_NewLine	;wreg free
 24115  0171C2                     l13089:
 24116                           
 24117                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 24118  0171C2  0E08               	movlw	8
 24119  0171C4  2441               	addwf	_gCursor+2,w,c
 24120  0171C6  0100               	movlb	0	; () banked
 24121  0171C8  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24122  0171CA  0E00               	movlw	0
 24123  0171CC  2042               	addwfc	_gCursor+3,w,c
 24124  0171CE  0100               	movlb	0	; () banked
 24125  0171D0  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24126  0171D2  0100               	movlb	0	; () banked
 24127  0171D4  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24128  0171D6  D00C               	goto	l13097
 24129  0171D8  0100               	movlb	0	; () banked
 24130  0171DA  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24131  0171DC  E105               	bnz	u10530
 24132  0171DE  0E80               	movlw	128
 24133  0171E0  0100               	movlb	0	; () banked
 24134  0171E2  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24135  0171E4  A0D8               	btfss	status,0,c
 24136  0171E6  D004               	goto	l13097
 24137  0171E8                     u10530:
 24138                           
 24139                           ; BSR set to: 0
 24140                           ;Console.c: 252: {
 24141                           ;Console.c: 253: Console_FormFeed();
 24142  0171E8  ECFB  F0B3         	call	_Console_FormFeed	;wreg free
 24143                           
 24144                           ;Console.c: 254: return 1;
 24145  0171EC  0E01               	movlw	1
 24146  0171EE  0012               	return	
 24147  0171F0                     l13097:
 24148                           
 24149                           ;Console.c: 255: }
 24150                           ;Console.c: 257: return 0;
 24151  0171F0  0E00               	movlw	0
 24152  0171F2  0012               	return	
 24153  0171F4                     __end_of_Console_IncrementCursor:
 24154                           	opt stack 0
 24155                           tosu	equ	0xFFF
 24156                           tosh	equ	0xFFE
 24157                           tosl	equ	0xFFD
 24158                           pclath	equ	0xFFA
 24159                           tblptru	equ	0xFF8
 24160                           tblptrh	equ	0xFF7
 24161                           tblptrl	equ	0xFF6
 24162                           tablat	equ	0xFF5
 24163                           prodh	equ	0xFF4
 24164                           prodl	equ	0xFF3
 24165                           intcon	equ	0xFF2
 24166                           indf0	equ	0xFEF
 24167                           postinc0	equ	0xFEE
 24168                           fsr0h	equ	0xFEA
 24169                           fsr0l	equ	0xFE9
 24170                           wreg	equ	0xFE8
 24171                           indf1	equ	0xFE7
 24172                           postdec1	equ	0xFE5
 24173                           fsr1h	equ	0xFE2
 24174                           fsr1l	equ	0xFE1
 24175                           indf2	equ	0xFDF
 24176                           postinc2	equ	0xFDE
 24177                           postdec2	equ	0xFDD
 24178                           plusw2	equ	0xFDB
 24179                           fsr2h	equ	0xFDA
 24180                           fsr2l	equ	0xFD9
 24181                           status	equ	0xFD8
 24182                           
 24183 ;; *************** function _Console_NewLine *****************
 24184 ;; Defined at:
 24185 ;;		line 175 in file "Library/Console.c"
 24186 ;; Parameters:    Size  Location     Type
 24187 ;;		None
 24188 ;; Auto vars:     Size  Location     Type
 24189 ;;		None
 24190 ;; Return value:  Size  Location     Type
 24191 ;;                  1    wreg      void 
 24192 ;; Registers used:
 24193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24194 ;; Tracked objects:
 24195 ;;		On entry : 0/0
 24196 ;;		On exit  : 0/0
 24197 ;;		Unchanged: 0/0
 24198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24201 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24203 ;;Total ram usage:        2 bytes
 24204 ;; Hardware stack levels used:    1
 24205 ;; Hardware stack levels required when called:    7
 24206 ;; This function calls:
 24207 ;;		Nothing
 24208 ;; This function is called by:
 24209 ;;		_Console_IncrementCursor
 24210 ;;		_Console_PrintChar
 24211 ;; This function uses a non-reentrant model
 24212 ;;
 24213                           
 24214                           	psect	text122
 24215  0165C0                     __ptext122:
 24216                           	opt stack 0
 24217  0165C0                     _Console_NewLine:
 24218                           	opt stack 18
 24219                           
 24220                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 24221                           
 24222                           ;incstack = 0
 24223  0165C0  D039               	goto	l12923
 24224  0165C2                     l12915:
 24225                           
 24226                           ;Console.c: 179: {
 24227                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 24228  0165C2  5036               	movf	_lBufferY,w,c
 24229  0165C4  0D14               	mullw	20
 24230  0165C6  0E7D               	movlw	low _lBuffer
 24231  0165C8  0100               	movlb	0	; () banked
 24232  0165CA  6F60               	movwf	??_Console_NewLine& (0+255),b
 24233  0165CC  0E02               	movlw	high _lBuffer
 24234  0165CE  0100               	movlb	0	; () banked
 24235  0165D0  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 24236  0165D2  50F3               	movf	prodl,w,c
 24237  0165D4  0100               	movlb	0	; () banked
 24238  0165D6  2760               	addwf	??_Console_NewLine& (0+255),f,b
 24239  0165D8  50F4               	movf	prodh,w,c
 24240  0165DA  0100               	movlb	0	; () banked
 24241  0165DC  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 24242  0165DE  5037               	movf	_lBufferX,w,c
 24243  0165E0  0D01               	mullw	1
 24244  0165E2  50F3               	movf	prodl,w,c
 24245  0165E4  0100               	movlb	0	; () banked
 24246  0165E6  2560               	addwf	??_Console_NewLine& (0+255),w,b
 24247  0165E8  6ED9               	movwf	fsr2l,c
 24248  0165EA  50F4               	movf	prodh,w,c
 24249  0165EC  0100               	movlb	0	; () banked
 24250  0165EE  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 24251  0165F0  6EDA               	movwf	fsr2h,c
 24252  0165F2  50DF               	movf	indf2,w,c
 24253  0165F4  B4D8               	btfsc	status,2,c
 24254  0165F6  D01D               	goto	l12921
 24255                           
 24256                           ; BSR set to: 0
 24257                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 24258  0165F8  0E01               	movlw	1
 24259  0165FA  0100               	movlb	0	; () banked
 24260  0165FC  6FFC               	movwf	_change& (0+255),b
 24261                           
 24262                           ; BSR set to: 0
 24263  0165FE  5036               	movf	_lBufferY,w,c
 24264  016600  0D14               	mullw	20
 24265  016602  0E7D               	movlw	low _lBuffer
 24266  016604  0100               	movlb	0	; () banked
 24267  016606  6F60               	movwf	??_Console_NewLine& (0+255),b
 24268  016608  0E02               	movlw	high _lBuffer
 24269  01660A  0100               	movlb	0	; () banked
 24270  01660C  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 24271  01660E  50F3               	movf	prodl,w,c
 24272  016610  0100               	movlb	0	; () banked
 24273  016612  2760               	addwf	??_Console_NewLine& (0+255),f,b
 24274  016614  50F4               	movf	prodh,w,c
 24275  016616  0100               	movlb	0	; () banked
 24276  016618  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 24277  01661A  5037               	movf	_lBufferX,w,c
 24278  01661C  0D01               	mullw	1
 24279  01661E  50F3               	movf	prodl,w,c
 24280  016620  0100               	movlb	0	; () banked
 24281  016622  2560               	addwf	??_Console_NewLine& (0+255),w,b
 24282  016624  6ED9               	movwf	fsr2l,c
 24283  016626  50F4               	movf	prodh,w,c
 24284  016628  0100               	movlb	0	; () banked
 24285  01662A  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 24286  01662C  6EDA               	movwf	fsr2h,c
 24287  01662E  0E80               	movlw	128
 24288  016630  6EDF               	movwf	indf2,c
 24289  016632                     l12921:
 24290                           
 24291                           ; BSR set to: 0
 24292                           ;Console.c: 182: lBufferX ++;
 24293  016632  2A37               	incf	_lBufferX,f,c
 24294  016634                     l12923:
 24295  016634  0E13               	movlw	19
 24296  016636  6437               	cpfsgt	_lBufferX,c
 24297  016638  D7C4               	goto	l12915
 24298                           
 24299                           ;Console.c: 183: }
 24300                           ;Console.c: 185: lBufferX = 0;
 24301  01663A  0E00               	movlw	0
 24302  01663C  6E37               	movwf	_lBufferX,c
 24303                           
 24304                           ;Console.c: 186: lBufferY ++;
 24305  01663E  2A36               	incf	_lBufferY,f,c
 24306                           
 24307                           ;Console.c: 188: gCursor.y += 8;
 24308  016640  0E08               	movlw	8
 24309  016642  2641               	addwf	_gCursor+2,f,c
 24310  016644  0E00               	movlw	0
 24311  016646  2242               	addwfc	_gCursor+3,f,c
 24312                           
 24313                           ;Console.c: 189: gCursor.x = 6;
 24314  016648  0E00               	movlw	0
 24315  01664A  6E40               	movwf	_gCursor+1,c
 24316  01664C  0E06               	movlw	6
 24317  01664E  6E3F               	movwf	_gCursor,c
 24318  016650  0012               	return		;funcret
 24319  016652                     __end_of_Console_NewLine:
 24320                           	opt stack 0
 24321                           tosu	equ	0xFFF
 24322                           tosh	equ	0xFFE
 24323                           tosl	equ	0xFFD
 24324                           pclath	equ	0xFFA
 24325                           tblptru	equ	0xFF8
 24326                           tblptrh	equ	0xFF7
 24327                           tblptrl	equ	0xFF6
 24328                           tablat	equ	0xFF5
 24329                           prodh	equ	0xFF4
 24330                           prodl	equ	0xFF3
 24331                           intcon	equ	0xFF2
 24332                           indf0	equ	0xFEF
 24333                           postinc0	equ	0xFEE
 24334                           fsr0h	equ	0xFEA
 24335                           fsr0l	equ	0xFE9
 24336                           wreg	equ	0xFE8
 24337                           indf1	equ	0xFE7
 24338                           postdec1	equ	0xFE5
 24339                           fsr1h	equ	0xFE2
 24340                           fsr1l	equ	0xFE1
 24341                           indf2	equ	0xFDF
 24342                           postinc2	equ	0xFDE
 24343                           postdec2	equ	0xFDD
 24344                           plusw2	equ	0xFDB
 24345                           fsr2h	equ	0xFDA
 24346                           fsr2l	equ	0xFD9
 24347                           status	equ	0xFD8
 24348                           
 24349 ;; *************** function _Console_FormFeed *****************
 24350 ;; Defined at:
 24351 ;;		line 192 in file "Library/Console.c"
 24352 ;; Parameters:    Size  Location     Type
 24353 ;;		None
 24354 ;; Auto vars:     Size  Location     Type
 24355 ;;  y               1    3[BANK0 ] unsigned char 
 24356 ;;  x               1    2[BANK0 ] unsigned char 
 24357 ;; Return value:  Size  Location     Type
 24358 ;;                  1    wreg      void 
 24359 ;; Registers used:
 24360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24361 ;; Tracked objects:
 24362 ;;		On entry : 0/0
 24363 ;;		On exit  : 0/0
 24364 ;;		Unchanged: 0/0
 24365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24368 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24369 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24370 ;;Total ram usage:        4 bytes
 24371 ;; Hardware stack levels used:    1
 24372 ;; Hardware stack levels required when called:    7
 24373 ;; This function calls:
 24374 ;;		Nothing
 24375 ;; This function is called by:
 24376 ;;		_Console_IncrementCursor
 24377 ;;		_Console_PrintChar
 24378 ;; This function uses a non-reentrant model
 24379 ;;
 24380                           
 24381                           	psect	text123
 24382  0167F6                     __ptext123:
 24383                           	opt stack 0
 24384  0167F6                     _Console_FormFeed:
 24385                           	opt stack 18
 24386                           
 24387                           ;Console.c: 195: lBufferX = 0;
 24388                           
 24389                           ;incstack = 0
 24390  0167F6  0E00               	movlw	0
 24391  0167F8  6E37               	movwf	_lBufferX,c
 24392                           
 24393                           ;Console.c: 196: lBufferY = 0;
 24394  0167FA  0E00               	movlw	0
 24395  0167FC  6E36               	movwf	_lBufferY,c
 24396                           
 24397                           ;Console.c: 197: UINT8 x, y;
 24398                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24399  0167FE  0E00               	movlw	0
 24400  016800  0100               	movlb	0	; () banked
 24401  016802  6F63               	movwf	Console_FormFeed@y& (0+255),b
 24402  016804                     l12935:
 24403                           
 24404                           ; BSR set to: 0
 24405  016804  0E0E               	movlw	14
 24406  016806  0100               	movlb	0	; () banked
 24407  016808  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 24408  01680A  D001               	goto	l12939
 24409  01680C  D02D               	goto	l12957
 24410  01680E                     l12939:
 24411                           
 24412                           ; BSR set to: 0
 24413                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24414  01680E  0E00               	movlw	0
 24415  016810  0100               	movlb	0	; () banked
 24416  016812  6F62               	movwf	Console_FormFeed@x& (0+255),b
 24417  016814                     l12941:
 24418                           
 24419                           ; BSR set to: 0
 24420  016814  0E13               	movlw	19
 24421  016816  0100               	movlb	0	; () banked
 24422  016818  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 24423  01681A  D001               	goto	l12945
 24424  01681C  D022               	goto	l12953
 24425  01681E                     l12945:
 24426                           
 24427                           ; BSR set to: 0
 24428                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 24429  01681E  0E01               	movlw	1
 24430  016820  0100               	movlb	0	; () banked
 24431  016822  6FFC               	movwf	_change& (0+255),b
 24432                           
 24433                           ; BSR set to: 0
 24434  016824  0100               	movlb	0	; () banked
 24435  016826  5163               	movf	Console_FormFeed@y& (0+255),w,b
 24436  016828  0D14               	mullw	20
 24437  01682A  0E7D               	movlw	low _lBuffer
 24438  01682C  0100               	movlb	0	; () banked
 24439  01682E  6F60               	movwf	??_Console_FormFeed& (0+255),b
 24440  016830  0E02               	movlw	high _lBuffer
 24441  016832  0100               	movlb	0	; () banked
 24442  016834  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 24443  016836  50F3               	movf	prodl,w,c
 24444  016838  0100               	movlb	0	; () banked
 24445  01683A  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 24446  01683C  50F4               	movf	prodh,w,c
 24447  01683E  0100               	movlb	0	; () banked
 24448  016840  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 24449  016842  0100               	movlb	0	; () banked
 24450  016844  5162               	movf	Console_FormFeed@x& (0+255),w,b
 24451  016846  0D01               	mullw	1
 24452  016848  50F3               	movf	prodl,w,c
 24453  01684A  0100               	movlb	0	; () banked
 24454  01684C  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 24455  01684E  6ED9               	movwf	fsr2l,c
 24456  016850  50F4               	movf	prodh,w,c
 24457  016852  0100               	movlb	0	; () banked
 24458  016854  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 24459  016856  6EDA               	movwf	fsr2h,c
 24460  016858  0E80               	movlw	128
 24461  01685A  6EDF               	movwf	indf2,c
 24462                           
 24463                           ; BSR set to: 0
 24464  01685C  0100               	movlb	0	; () banked
 24465  01685E  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 24466  016860  D7D9               	goto	l12941
 24467  016862                     l12953:
 24468                           
 24469                           ; BSR set to: 0
 24470  016862  0100               	movlb	0	; () banked
 24471  016864  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 24472  016866  D7CE               	goto	l12935
 24473  016868                     l12957:
 24474                           
 24475                           ; BSR set to: 0
 24476                           ;Console.c: 204: clearall = 1;
 24477  016868  0E01               	movlw	1
 24478  01686A  0100               	movlb	0	; () banked
 24479  01686C  6FE9               	movwf	_clearall& (0+255),b
 24480                           
 24481                           ;Console.c: 205: gCursor.x = 6;
 24482  01686E  0E00               	movlw	0
 24483  016870  6E40               	movwf	_gCursor+1,c
 24484  016872  0E06               	movlw	6
 24485  016874  6E3F               	movwf	_gCursor,c
 24486                           
 24487                           ;Console.c: 206: gCursor.y = 6;
 24488  016876  0E00               	movlw	0
 24489  016878  6E42               	movwf	_gCursor+3,c
 24490  01687A  0E06               	movlw	6
 24491  01687C  6E41               	movwf	_gCursor+2,c
 24492                           
 24493                           ; BSR set to: 0
 24494  01687E  0012               	return		;funcret
 24495  016880                     __end_of_Console_FormFeed:
 24496                           	opt stack 0
 24497                           tosu	equ	0xFFF
 24498                           tosh	equ	0xFFE
 24499                           tosl	equ	0xFFD
 24500                           pclath	equ	0xFFA
 24501                           tblptru	equ	0xFF8
 24502                           tblptrh	equ	0xFF7
 24503                           tblptrl	equ	0xFF6
 24504                           tablat	equ	0xFF5
 24505                           prodh	equ	0xFF4
 24506                           prodl	equ	0xFF3
 24507                           intcon	equ	0xFF2
 24508                           indf0	equ	0xFEF
 24509                           postinc0	equ	0xFEE
 24510                           fsr0h	equ	0xFEA
 24511                           fsr0l	equ	0xFE9
 24512                           wreg	equ	0xFE8
 24513                           indf1	equ	0xFE7
 24514                           postdec1	equ	0xFE5
 24515                           fsr1h	equ	0xFE2
 24516                           fsr1l	equ	0xFE1
 24517                           indf2	equ	0xFDF
 24518                           postinc2	equ	0xFDE
 24519                           postdec2	equ	0xFDD
 24520                           plusw2	equ	0xFDB
 24521                           fsr2h	equ	0xFDA
 24522                           fsr2l	equ	0xFD9
 24523                           status	equ	0xFD8
 24524                           
 24525 ;; *************** function _Console_ResetCursor *****************
 24526 ;; Defined at:
 24527 ;;		line 297 in file "Library/Console.c"
 24528 ;; Parameters:    Size  Location     Type
 24529 ;;		None
 24530 ;; Auto vars:     Size  Location     Type
 24531 ;;		None
 24532 ;; Return value:  Size  Location     Type
 24533 ;;                  1    wreg      void 
 24534 ;; Registers used:
 24535 ;;		wreg, status,2
 24536 ;; Tracked objects:
 24537 ;;		On entry : 0/0
 24538 ;;		On exit  : 0/0
 24539 ;;		Unchanged: 0/0
 24540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24545 ;;Total ram usage:        0 bytes
 24546 ;; Hardware stack levels used:    1
 24547 ;; Hardware stack levels required when called:    7
 24548 ;; This function calls:
 24549 ;;		Nothing
 24550 ;; This function is called by:
 24551 ;;		_Console_PrintChar
 24552 ;; This function uses a non-reentrant model
 24553 ;;
 24554                           
 24555                           	psect	text124
 24556  017E0C                     __ptext124:
 24557                           	opt stack 0
 24558  017E0C                     _Console_ResetCursor:
 24559                           	opt stack 20
 24560                           
 24561                           ;Console.c: 299: gCursor.x = 6;
 24562                           
 24563                           ; BSR set to: 0
 24564                           ;incstack = 0
 24565  017E0C  0E00               	movlw	0
 24566  017E0E  6E40               	movwf	_gCursor+1,c
 24567  017E10  0E06               	movlw	6
 24568  017E12  6E3F               	movwf	_gCursor,c
 24569                           
 24570                           ;Console.c: 300: gCursor.y = 6;
 24571  017E14  0E00               	movlw	0
 24572  017E16  6E42               	movwf	_gCursor+3,c
 24573  017E18  0E06               	movlw	6
 24574  017E1A  6E41               	movwf	_gCursor+2,c
 24575                           
 24576                           ;Console.c: 303: lBufferX = 0;
 24577  017E1C  0E00               	movlw	0
 24578  017E1E  6E37               	movwf	_lBufferX,c
 24579                           
 24580                           ;Console.c: 304: lBufferY = 0;
 24581  017E20  0E00               	movlw	0
 24582  017E22  6E36               	movwf	_lBufferY,c
 24583  017E24  0012               	return		;funcret
 24584  017E26                     __end_of_Console_ResetCursor:
 24585                           	opt stack 0
 24586                           tosu	equ	0xFFF
 24587                           tosh	equ	0xFFE
 24588                           tosl	equ	0xFFD
 24589                           pclath	equ	0xFFA
 24590                           tblptru	equ	0xFF8
 24591                           tblptrh	equ	0xFF7
 24592                           tblptrl	equ	0xFF6
 24593                           tablat	equ	0xFF5
 24594                           prodh	equ	0xFF4
 24595                           prodl	equ	0xFF3
 24596                           intcon	equ	0xFF2
 24597                           indf0	equ	0xFEF
 24598                           postinc0	equ	0xFEE
 24599                           fsr0h	equ	0xFEA
 24600                           fsr0l	equ	0xFE9
 24601                           wreg	equ	0xFE8
 24602                           indf1	equ	0xFE7
 24603                           postdec1	equ	0xFE5
 24604                           fsr1h	equ	0xFE2
 24605                           fsr1l	equ	0xFE1
 24606                           indf2	equ	0xFDF
 24607                           postinc2	equ	0xFDE
 24608                           postdec2	equ	0xFDD
 24609                           plusw2	equ	0xFDB
 24610                           fsr2h	equ	0xFDA
 24611                           fsr2l	equ	0xFD9
 24612                           status	equ	0xFD8
 24613                           
 24614 ;; *************** function _Console_Backspace *****************
 24615 ;; Defined at:
 24616 ;;		line 209 in file "Library/Console.c"
 24617 ;; Parameters:    Size  Location     Type
 24618 ;;		None
 24619 ;; Auto vars:     Size  Location     Type
 24620 ;;		None
 24621 ;; Return value:  Size  Location     Type
 24622 ;;                  1    wreg      void 
 24623 ;; Registers used:
 24624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24625 ;; Tracked objects:
 24626 ;;		On entry : 0/0
 24627 ;;		On exit  : 0/0
 24628 ;;		Unchanged: 0/0
 24629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24634 ;;Total ram usage:        0 bytes
 24635 ;; Hardware stack levels used:    1
 24636 ;; Hardware stack levels required when called:    8
 24637 ;; This function calls:
 24638 ;;		_Console_ClearCursor
 24639 ;; This function is called by:
 24640 ;;		_Console_PrintChar
 24641 ;; This function uses a non-reentrant model
 24642 ;;
 24643                           
 24644                           	psect	text125
 24645  0174B8                     __ptext125:
 24646                           	opt stack 0
 24647  0174B8                     _Console_Backspace:
 24648                           	opt stack 19
 24649                           
 24650                           ;Console.c: 211: if (lBufferX > 0)
 24651                           
 24652                           ;incstack = 0
 24653  0174B8  5037               	movf	_lBufferX,w,c
 24654  0174BA  B4D8               	btfsc	status,2,c
 24655  0174BC  D006               	goto	l13365
 24656                           
 24657                           ;Console.c: 212: {
 24658                           ;Console.c: 213: gCursor.x -= 6;
 24659  0174BE  0EFA               	movlw	250
 24660  0174C0  263F               	addwf	_gCursor,f,c
 24661  0174C2  0EFF               	movlw	255
 24662  0174C4  2240               	addwfc	_gCursor+1,f,c
 24663                           
 24664                           ;Console.c: 216: lBufferX --;
 24665  0174C6  0637               	decf	_lBufferX,f,c
 24666                           
 24667                           ;Console.c: 218: }
 24668  0174C8  D01B               	goto	l13377
 24669  0174CA                     l13365:
 24670                           
 24671                           ;Console.c: 219: else if (lBufferY > 0)
 24672  0174CA  5036               	movf	_lBufferY,w,c
 24673  0174CC  B4D8               	btfsc	status,2,c
 24674  0174CE  D00C               	goto	l13375
 24675                           
 24676                           ;Console.c: 220: {
 24677                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 24678  0174D0  0E00               	movlw	0
 24679  0174D2  6E40               	movwf	_gCursor+1,c
 24680  0174D4  0E72               	movlw	114
 24681  0174D6  6E3F               	movwf	_gCursor,c
 24682                           
 24683                           ;Console.c: 222: gCursor.y -= 8;
 24684  0174D8  0EF8               	movlw	248
 24685  0174DA  2641               	addwf	_gCursor+2,f,c
 24686  0174DC  0EFF               	movlw	255
 24687  0174DE  2242               	addwfc	_gCursor+3,f,c
 24688                           
 24689                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 24690  0174E0  0E13               	movlw	19
 24691  0174E2  6E37               	movwf	_lBufferX,c
 24692                           
 24693                           ;Console.c: 226: lBufferY --;
 24694  0174E4  0636               	decf	_lBufferY,f,c
 24695                           
 24696                           ;Console.c: 228: }
 24697  0174E6  D00C               	goto	l13377
 24698  0174E8                     l13375:
 24699                           
 24700                           ;Console.c: 229: else
 24701                           ;Console.c: 230: {
 24702                           ;Console.c: 231: gCursor.x = 6;
 24703  0174E8  0E00               	movlw	0
 24704  0174EA  6E40               	movwf	_gCursor+1,c
 24705  0174EC  0E06               	movlw	6
 24706  0174EE  6E3F               	movwf	_gCursor,c
 24707                           
 24708                           ;Console.c: 232: gCursor.y = 6;
 24709  0174F0  0E00               	movlw	0
 24710  0174F2  6E42               	movwf	_gCursor+3,c
 24711  0174F4  0E06               	movlw	6
 24712  0174F6  6E41               	movwf	_gCursor+2,c
 24713                           
 24714                           ;Console.c: 235: lBufferX = 0;
 24715  0174F8  0E00               	movlw	0
 24716  0174FA  6E37               	movwf	_lBufferX,c
 24717                           
 24718                           ;Console.c: 236: lBufferY = 0;
 24719  0174FC  0E00               	movlw	0
 24720  0174FE  6E36               	movwf	_lBufferY,c
 24721  017500                     l13377:
 24722                           
 24723                           ;Console.c: 238: }
 24724                           ;Console.c: 240: Console_ClearCursor();
 24725  017500  ECA4  F0BC         	call	_Console_ClearCursor	;wreg free
 24726  017504  0012               	return		;funcret
 24727  017506                     __end_of_Console_Backspace:
 24728                           	opt stack 0
 24729                           tosu	equ	0xFFF
 24730                           tosh	equ	0xFFE
 24731                           tosl	equ	0xFFD
 24732                           pclath	equ	0xFFA
 24733                           tblptru	equ	0xFF8
 24734                           tblptrh	equ	0xFF7
 24735                           tblptrl	equ	0xFF6
 24736                           tablat	equ	0xFF5
 24737                           prodh	equ	0xFF4
 24738                           prodl	equ	0xFF3
 24739                           intcon	equ	0xFF2
 24740                           indf0	equ	0xFEF
 24741                           postinc0	equ	0xFEE
 24742                           fsr0h	equ	0xFEA
 24743                           fsr0l	equ	0xFE9
 24744                           wreg	equ	0xFE8
 24745                           indf1	equ	0xFE7
 24746                           postdec1	equ	0xFE5
 24747                           fsr1h	equ	0xFE2
 24748                           fsr1l	equ	0xFE1
 24749                           indf2	equ	0xFDF
 24750                           postinc2	equ	0xFDE
 24751                           postdec2	equ	0xFDD
 24752                           plusw2	equ	0xFDB
 24753                           fsr2h	equ	0xFDA
 24754                           fsr2l	equ	0xFD9
 24755                           status	equ	0xFD8
 24756                           
 24757 ;; *************** function _Console_ClearCursor *****************
 24758 ;; Defined at:
 24759 ;;		line 308 in file "Library/Console.c"
 24760 ;; Parameters:    Size  Location     Type
 24761 ;;		None
 24762 ;; Auto vars:     Size  Location     Type
 24763 ;;		None
 24764 ;; Return value:  Size  Location     Type
 24765 ;;                  1    wreg      void 
 24766 ;; Registers used:
 24767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24768 ;; Tracked objects:
 24769 ;;		On entry : 0/0
 24770 ;;		On exit  : 0/0
 24771 ;;		Unchanged: 0/0
 24772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24775 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24777 ;;Total ram usage:        2 bytes
 24778 ;; Hardware stack levels used:    1
 24779 ;; Hardware stack levels required when called:    7
 24780 ;; This function calls:
 24781 ;;		Nothing
 24782 ;; This function is called by:
 24783 ;;		_Console_Backspace
 24784 ;;		_Console_Tab
 24785 ;; This function uses a non-reentrant model
 24786 ;;
 24787                           
 24788                           	psect	text126
 24789  017948                     __ptext126:
 24790                           	opt stack 0
 24791  017948                     _Console_ClearCursor:
 24792                           	opt stack 19
 24793                           
 24794                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 24795                           
 24796                           ;incstack = 0
 24797  017948  0E01               	movlw	1
 24798  01794A  0100               	movlb	0	; () banked
 24799  01794C  6FFC               	movwf	_change& (0+255),b
 24800                           
 24801                           ; BSR set to: 0
 24802  01794E  5036               	movf	_lBufferY,w,c
 24803  017950  0D14               	mullw	20
 24804  017952  0E7D               	movlw	low _lBuffer
 24805  017954  0100               	movlb	0	; () banked
 24806  017956  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 24807  017958  0E02               	movlw	high _lBuffer
 24808  01795A  0100               	movlb	0	; () banked
 24809  01795C  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 24810  01795E  50F3               	movf	prodl,w,c
 24811  017960  0100               	movlb	0	; () banked
 24812  017962  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 24813  017964  50F4               	movf	prodh,w,c
 24814  017966  0100               	movlb	0	; () banked
 24815  017968  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 24816  01796A  5037               	movf	_lBufferX,w,c
 24817  01796C  0D01               	mullw	1
 24818  01796E  50F3               	movf	prodl,w,c
 24819  017970  0100               	movlb	0	; () banked
 24820  017972  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 24821  017974  6ED9               	movwf	fsr2l,c
 24822  017976  50F4               	movf	prodh,w,c
 24823  017978  0100               	movlb	0	; () banked
 24824  01797A  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 24825  01797C  6EDA               	movwf	fsr2h,c
 24826  01797E  0E80               	movlw	128
 24827  017980  6EDF               	movwf	indf2,c
 24828                           
 24829                           ; BSR set to: 0
 24830  017982  0012               	return		;funcret
 24831  017984                     __end_of_Console_ClearCursor:
 24832                           	opt stack 0
 24833                           tosu	equ	0xFFF
 24834                           tosh	equ	0xFFE
 24835                           tosl	equ	0xFFD
 24836                           pclath	equ	0xFFA
 24837                           tblptru	equ	0xFF8
 24838                           tblptrh	equ	0xFF7
 24839                           tblptrl	equ	0xFF6
 24840                           tablat	equ	0xFF5
 24841                           prodh	equ	0xFF4
 24842                           prodl	equ	0xFF3
 24843                           intcon	equ	0xFF2
 24844                           indf0	equ	0xFEF
 24845                           postinc0	equ	0xFEE
 24846                           fsr0h	equ	0xFEA
 24847                           fsr0l	equ	0xFE9
 24848                           wreg	equ	0xFE8
 24849                           indf1	equ	0xFE7
 24850                           postdec1	equ	0xFE5
 24851                           fsr1h	equ	0xFE2
 24852                           fsr1l	equ	0xFE1
 24853                           indf2	equ	0xFDF
 24854                           postinc2	equ	0xFDE
 24855                           postdec2	equ	0xFDD
 24856                           plusw2	equ	0xFDB
 24857                           fsr2h	equ	0xFDA
 24858                           fsr2l	equ	0xFD9
 24859                           status	equ	0xFD8
 24860                           
 24861 ;; *************** function _fround *****************
 24862 ;; Defined at:
 24863 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
 24864 ;; Parameters:    Size  Location     Type
 24865 ;;  prec            1    wreg     unsigned char 
 24866 ;; Auto vars:     Size  Location     Type
 24867 ;;  prec            1   51[BANK0 ] unsigned char 
 24868 ;; Return value:  Size  Location     Type
 24869 ;;                  4   39[BANK0 ] unsigned char 
 24870 ;; Registers used:
 24871 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24872 ;; Tracked objects:
 24873 ;;		On entry : 0/0
 24874 ;;		On exit  : 0/0
 24875 ;;		Unchanged: 0/0
 24876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24877 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24878 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24880 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24881 ;;Total ram usage:       13 bytes
 24882 ;; Hardware stack levels used:    1
 24883 ;; Hardware stack levels required when called:    8
 24884 ;; This function calls:
 24885 ;;		___awdiv
 24886 ;;		___awmod
 24887 ;;		___flmul
 24888 ;; This function is called by:
 24889 ;;		_printf
 24890 ;; This function uses a non-reentrant model
 24891 ;;
 24892                           
 24893                           	psect	text127
 24894  012292                     __ptext127:
 24895                           	opt stack 0
 24896  012292                     _fround:
 24897                           	opt stack 21
 24898                           
 24899                           ; BSR set to: 0
 24900                           ;incstack = 0
 24901                           ;fround@prec stored from wreg
 24902  012292  0100               	movlb	0	; () banked
 24903  012294  6F93               	movwf	fround@prec& (0+255),b
 24904                           
 24905                           ;doprnt.c: 413: if(prec>=110)
 24906  012296  0E6D               	movlw	109
 24907  012298  0100               	movlb	0	; () banked
 24908  01229A  6593               	cpfsgt	fround@prec& (0+255),b
 24909  01229C  D0CD               	goto	l14725
 24910                           
 24911                           ; BSR set to: 0
 24912                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 24913  01229E  0E00               	movlw	0
 24914  0122A0  0100               	movlb	0	; () banked
 24915  0122A2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24916  0122A4  0E0A               	movlw	10
 24917  0122A6  6F68               	movwf	___awdiv@divisor& (0+255),b
 24918  0122A8  0E00               	movlw	0
 24919  0122AA  0100               	movlb	0	; () banked
 24920  0122AC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 24921  0122AE  0E64               	movlw	100
 24922  0122B0  6F62               	movwf	___awmod@divisor& (0+255),b
 24923  0122B2  C093  F060         	movff	fround@prec,___awmod@dividend
 24924  0122B6  0100               	movlb	0	; () banked
 24925  0122B8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 24926  0122BA  ECA8  F0B1         	call	___awmod	;wreg free
 24927  0122BE  C060  F066         	movff	?___awmod,___awdiv@dividend
 24928  0122C2  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 24929  0122C6  EC8B  F0AC         	call	___awdiv	;wreg free
 24930  0122CA  0100               	movlb	0	; () banked
 24931  0122CC  90D8               	bcf	status,0,c
 24932  0122CE  3766               	rlcf	?___awdiv& (0+255),f,b
 24933  0122D0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24934  0122D2  0100               	movlb	0	; () banked
 24935  0122D4  90D8               	bcf	status,0,c
 24936  0122D6  3766               	rlcf	?___awdiv& (0+255),f,b
 24937  0122D8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24938  0122DA  0E24               	movlw	36
 24939  0122DC  0100               	movlb	0	; () banked
 24940  0122DE  2766               	addwf	?___awdiv& (0+255),f,b
 24941  0122E0  0E00               	movlw	0
 24942  0122E2  0100               	movlb	0	; () banked
 24943  0122E4  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24944  0122E6  0E41               	movlw	low __npowers_
 24945  0122E8  0100               	movlb	0	; () banked
 24946  0122EA  2566               	addwf	?___awdiv& (0+255),w,b
 24947  0122EC  6EF6               	movwf	tblptrl,c
 24948  0122EE  0EFC               	movlw	high __npowers_
 24949  0122F0  0100               	movlb	0	; () banked
 24950  0122F2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24951  0122F4  6EF7               	movwf	tblptrh,c
 24952  0122F6                     	if	1	;There are 3 active tblptr bytes
 24953  0122F6  6AF8               	clrf	tblptru,c
 24954  0122F8  0E00               	movlw	low (__mediumconst shr (0+16))
 24955  0122FA  22F8               	addwfc	tblptru,f,c
 24956  0122FC                     	endif
 24957  0122FC  0009               	tblrd		*+
 24958  0122FE  CFF5 F072          	movff	tablat,___flmul@a
 24959  012302  0009               	tblrd		*+
 24960  012304  CFF5 F073          	movff	tablat,___flmul@a+1
 24961  012308  0009               	tblrd		*+
 24962  01230A  CFF5 F074          	movff	tablat,___flmul@a+2
 24963  01230E  000A               	tblrd		*-
 24964  012310  CFF5 F075          	movff	tablat,___flmul@a+3
 24965  012314  0E00               	movlw	0
 24966  012316  0100               	movlb	0	; () banked
 24967  012318  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24968  01231A  0E64               	movlw	100
 24969  01231C  6F68               	movwf	___awdiv@divisor& (0+255),b
 24970  01231E  C093  F066         	movff	fround@prec,___awdiv@dividend
 24971  012322  0100               	movlb	0	; () banked
 24972  012324  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 24973  012326  EC8B  F0AC         	call	___awdiv	;wreg free
 24974  01232A  0100               	movlb	0	; () banked
 24975  01232C  90D8               	bcf	status,0,c
 24976  01232E  3766               	rlcf	?___awdiv& (0+255),f,b
 24977  012330  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24978  012332  0100               	movlb	0	; () banked
 24979  012334  90D8               	bcf	status,0,c
 24980  012336  3766               	rlcf	?___awdiv& (0+255),f,b
 24981  012338  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24982  01233A  0E48               	movlw	72
 24983  01233C  0100               	movlb	0	; () banked
 24984  01233E  2766               	addwf	?___awdiv& (0+255),f,b
 24985  012340  0E00               	movlw	0
 24986  012342  0100               	movlb	0	; () banked
 24987  012344  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24988  012346  0E41               	movlw	low __npowers_
 24989  012348  0100               	movlb	0	; () banked
 24990  01234A  2566               	addwf	?___awdiv& (0+255),w,b
 24991  01234C  6EF6               	movwf	tblptrl,c
 24992  01234E  0EFC               	movlw	high __npowers_
 24993  012350  0100               	movlb	0	; () banked
 24994  012352  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24995  012354  6EF7               	movwf	tblptrh,c
 24996  012356                     	if	1	;There are 3 active tblptr bytes
 24997  012356  6AF8               	clrf	tblptru,c
 24998  012358  0E00               	movlw	low (__mediumconst shr (0+16))
 24999  01235A  22F8               	addwfc	tblptru,f,c
 25000  01235C                     	endif
 25001  01235C  0009               	tblrd		*+
 25002  01235E  CFF5 F06E          	movff	tablat,___flmul@b
 25003  012362  0009               	tblrd		*+
 25004  012364  CFF5 F06F          	movff	tablat,___flmul@b+1
 25005  012368  0009               	tblrd		*+
 25006  01236A  CFF5 F070          	movff	tablat,___flmul@b+2
 25007  01236E  000A               	tblrd		*-
 25008  012370  CFF5 F071          	movff	tablat,___flmul@b+3
 25009  012374  EC2A  F089         	call	___flmul	;wreg free
 25010  012378  C06E  F08F         	movff	?___flmul,_fround$15264
 25011  01237C  C06F  F090         	movff	?___flmul+1,_fround$15264+1
 25012  012380  C070  F091         	movff	?___flmul+2,_fround$15264+2
 25013  012384  C071  F092         	movff	?___flmul+3,_fround$15264+3
 25014                           
 25015                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 25016  012388  0E00               	movlw	0
 25017  01238A  0100               	movlb	0	; () banked
 25018  01238C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 25019  01238E  0E0A               	movlw	10
 25020  012390  6F62               	movwf	___awmod@divisor& (0+255),b
 25021  012392  C093  F060         	movff	fround@prec,___awmod@dividend
 25022  012396  0100               	movlb	0	; () banked
 25023  012398  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 25024  01239A  ECA8  F0B1         	call	___awmod	;wreg free
 25025  01239E  0100               	movlb	0	; () banked
 25026  0123A0  90D8               	bcf	status,0,c
 25027  0123A2  3760               	rlcf	?___awmod& (0+255),f,b
 25028  0123A4  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 25029  0123A6  0100               	movlb	0	; () banked
 25030  0123A8  90D8               	bcf	status,0,c
 25031  0123AA  3760               	rlcf	?___awmod& (0+255),f,b
 25032  0123AC  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 25033  0123AE  0E41               	movlw	low __npowers_
 25034  0123B0  0100               	movlb	0	; () banked
 25035  0123B2  2560               	addwf	?___awmod& (0+255),w,b
 25036  0123B4  6EF6               	movwf	tblptrl,c
 25037  0123B6  0EFC               	movlw	high __npowers_
 25038  0123B8  0100               	movlb	0	; () banked
 25039  0123BA  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 25040  0123BC  6EF7               	movwf	tblptrh,c
 25041  0123BE                     	if	1	;There are 3 active tblptr bytes
 25042  0123BE  6AF8               	clrf	tblptru,c
 25043  0123C0  0E00               	movlw	low (__mediumconst shr (0+16))
 25044  0123C2  22F8               	addwfc	tblptru,f,c
 25045  0123C4                     	endif
 25046  0123C4  0009               	tblrd		*+
 25047  0123C6  CFF5 F072          	movff	tablat,___flmul@a
 25048  0123CA  0009               	tblrd		*+
 25049  0123CC  CFF5 F073          	movff	tablat,___flmul@a+1
 25050  0123D0  0009               	tblrd		*+
 25051  0123D2  CFF5 F074          	movff	tablat,___flmul@a+2
 25052  0123D6  000A               	tblrd		*-
 25053  0123D8  CFF5 F075          	movff	tablat,___flmul@a+3
 25054  0123DC  C08F  F06E         	movff	_fround$15264,___flmul@b
 25055  0123E0  C090  F06F         	movff	_fround$15264+1,___flmul@b+1
 25056  0123E4  C091  F070         	movff	_fround$15264+2,___flmul@b+2
 25057  0123E8  C092  F071         	movff	_fround$15264+3,___flmul@b+3
 25058  0123EC  EC2A  F089         	call	___flmul	;wreg free
 25059  0123F0  C06E  F08B         	movff	?___flmul,_fround$15265
 25060  0123F4  C06F  F08C         	movff	?___flmul+1,_fround$15265+1
 25061  0123F8  C070  F08D         	movff	?___flmul+2,_fround$15265+2
 25062  0123FC  C071  F08E         	movff	?___flmul+3,_fround$15265+3
 25063                           
 25064                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 25065  012400  C08B  F06E         	movff	_fround$15265,___flmul@b
 25066  012404  C08C  F06F         	movff	_fround$15265+1,___flmul@b+1
 25067  012408  C08D  F070         	movff	_fround$15265+2,___flmul@b+2
 25068  01240C  C08E  F071         	movff	_fround$15265+3,___flmul@b+3
 25069  012410  0E00               	movlw	0
 25070  012412  0100               	movlb	0	; () banked
 25071  012414  6F72               	movwf	___flmul@a& (0+255),b
 25072  012416  0E00               	movlw	0
 25073  012418  6F73               	movwf	(___flmul@a+1)& (0+255),b
 25074  01241A  0E00               	movlw	0
 25075  01241C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 25076  01241E  0E3F               	movlw	63
 25077  012420  6F75               	movwf	(___flmul@a+3)& (0+255),b
 25078  012422  EC2A  F089         	call	___flmul	;wreg free
 25079  012426  C06E  F087         	movff	?___flmul,?_fround
 25080  01242A  C06F  F088         	movff	?___flmul+1,?_fround+1
 25081  01242E  C070  F089         	movff	?___flmul+2,?_fround+2
 25082  012432  C071  F08A         	movff	?___flmul+3,?_fround+3
 25083  012436  0012               	return	
 25084  012438                     l14725:
 25085                           
 25086                           ;doprnt.c: 415: else if(prec > 10)
 25087  012438  0E0A               	movlw	10
 25088  01243A  0100               	movlb	0	; () banked
 25089  01243C  6593               	cpfsgt	fround@prec& (0+255),b
 25090  01243E  D078               	goto	l14733
 25091                           
 25092                           ; BSR set to: 0
 25093                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 25094  012440  0E00               	movlw	0
 25095  012442  0100               	movlb	0	; () banked
 25096  012444  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 25097  012446  0E0A               	movlw	10
 25098  012448  6F62               	movwf	___awmod@divisor& (0+255),b
 25099  01244A  C093  F060         	movff	fround@prec,___awmod@dividend
 25100  01244E  0100               	movlb	0	; () banked
 25101  012450  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 25102  012452  ECA8  F0B1         	call	___awmod	;wreg free
 25103  012456  0100               	movlb	0	; () banked
 25104  012458  90D8               	bcf	status,0,c
 25105  01245A  3760               	rlcf	?___awmod& (0+255),f,b
 25106  01245C  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 25107  01245E  0100               	movlb	0	; () banked
 25108  012460  90D8               	bcf	status,0,c
 25109  012462  3760               	rlcf	?___awmod& (0+255),f,b
 25110  012464  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 25111  012466  0E41               	movlw	low __npowers_
 25112  012468  0100               	movlb	0	; () banked
 25113  01246A  2560               	addwf	?___awmod& (0+255),w,b
 25114  01246C  6EF6               	movwf	tblptrl,c
 25115  01246E  0EFC               	movlw	high __npowers_
 25116  012470  0100               	movlb	0	; () banked
 25117  012472  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 25118  012474  6EF7               	movwf	tblptrh,c
 25119  012476                     	if	1	;There are 3 active tblptr bytes
 25120  012476  6AF8               	clrf	tblptru,c
 25121  012478  0E00               	movlw	low (__mediumconst shr (0+16))
 25122  01247A  22F8               	addwfc	tblptru,f,c
 25123  01247C                     	endif
 25124  01247C  0009               	tblrd		*+
 25125  01247E  CFF5 F072          	movff	tablat,___flmul@a
 25126  012482  0009               	tblrd		*+
 25127  012484  CFF5 F073          	movff	tablat,___flmul@a+1
 25128  012488  0009               	tblrd		*+
 25129  01248A  CFF5 F074          	movff	tablat,___flmul@a+2
 25130  01248E  000A               	tblrd		*-
 25131  012490  CFF5 F075          	movff	tablat,___flmul@a+3
 25132  012494  0E00               	movlw	0
 25133  012496  0100               	movlb	0	; () banked
 25134  012498  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 25135  01249A  0E0A               	movlw	10
 25136  01249C  6F68               	movwf	___awdiv@divisor& (0+255),b
 25137  01249E  C093  F066         	movff	fround@prec,___awdiv@dividend
 25138  0124A2  0100               	movlb	0	; () banked
 25139  0124A4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 25140  0124A6  EC8B  F0AC         	call	___awdiv	;wreg free
 25141  0124AA  0100               	movlb	0	; () banked
 25142  0124AC  90D8               	bcf	status,0,c
 25143  0124AE  3766               	rlcf	?___awdiv& (0+255),f,b
 25144  0124B0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 25145  0124B2  0100               	movlb	0	; () banked
 25146  0124B4  90D8               	bcf	status,0,c
 25147  0124B6  3766               	rlcf	?___awdiv& (0+255),f,b
 25148  0124B8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 25149  0124BA  0E24               	movlw	36
 25150  0124BC  0100               	movlb	0	; () banked
 25151  0124BE  2766               	addwf	?___awdiv& (0+255),f,b
 25152  0124C0  0E00               	movlw	0
 25153  0124C2  0100               	movlb	0	; () banked
 25154  0124C4  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 25155  0124C6  0E41               	movlw	low __npowers_
 25156  0124C8  0100               	movlb	0	; () banked
 25157  0124CA  2566               	addwf	?___awdiv& (0+255),w,b
 25158  0124CC  6EF6               	movwf	tblptrl,c
 25159  0124CE  0EFC               	movlw	high __npowers_
 25160  0124D0  0100               	movlb	0	; () banked
 25161  0124D2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 25162  0124D4  6EF7               	movwf	tblptrh,c
 25163  0124D6                     	if	1	;There are 3 active tblptr bytes
 25164  0124D6  6AF8               	clrf	tblptru,c
 25165  0124D8  0E00               	movlw	low (__mediumconst shr (0+16))
 25166  0124DA  22F8               	addwfc	tblptru,f,c
 25167  0124DC                     	endif
 25168  0124DC  0009               	tblrd		*+
 25169  0124DE  CFF5 F06E          	movff	tablat,___flmul@b
 25170  0124E2  0009               	tblrd		*+
 25171  0124E4  CFF5 F06F          	movff	tablat,___flmul@b+1
 25172  0124E8  0009               	tblrd		*+
 25173  0124EA  CFF5 F070          	movff	tablat,___flmul@b+2
 25174  0124EE  000A               	tblrd		*-
 25175  0124F0  CFF5 F071          	movff	tablat,___flmul@b+3
 25176  0124F4  EC2A  F089         	call	___flmul	;wreg free
 25177  0124F8  C06E  F08F         	movff	?___flmul,_fround$15264
 25178  0124FC  C06F  F090         	movff	?___flmul+1,_fround$15264+1
 25179  012500  C070  F091         	movff	?___flmul+2,_fround$15264+2
 25180  012504  C071  F092         	movff	?___flmul+3,_fround$15264+3
 25181                           
 25182                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 25183  012508  C08F  F06E         	movff	_fround$15264,___flmul@b
 25184  01250C  C090  F06F         	movff	_fround$15264+1,___flmul@b+1
 25185  012510  C091  F070         	movff	_fround$15264+2,___flmul@b+2
 25186  012514  C092  F071         	movff	_fround$15264+3,___flmul@b+3
 25187  012518  0E00               	movlw	0
 25188  01251A  0100               	movlb	0	; () banked
 25189  01251C  6F72               	movwf	___flmul@a& (0+255),b
 25190  01251E  0E00               	movlw	0
 25191  012520  6F73               	movwf	(___flmul@a+1)& (0+255),b
 25192  012522  0E00               	movlw	0
 25193  012524  6F74               	movwf	(___flmul@a+2)& (0+255),b
 25194  012526  0E3F               	movlw	63
 25195  012528  6F75               	movwf	(___flmul@a+3)& (0+255),b
 25196  01252A  EC2A  F089         	call	___flmul	;wreg free
 25197  01252E  D77B               	goto	L18
 25198  012530                     l14733:
 25199                           
 25200                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 25201  012530  0100               	movlb	0	; () banked
 25202  012532  5193               	movf	fround@prec& (0+255),w,b
 25203  012534  0D04               	mullw	4
 25204  012536  0E41               	movlw	low __npowers_
 25205  012538  24F3               	addwf	prodl,w,c
 25206  01253A  6EF6               	movwf	tblptrl,c
 25207  01253C  0EFC               	movlw	high __npowers_
 25208  01253E  20F4               	addwfc	prodh,w,c
 25209  012540  6EF7               	movwf	tblptrh,c
 25210  012542                     	if	1	;There are 3 active tblptr bytes
 25211  012542  6AF8               	clrf	tblptru,c
 25212  012544  0E00               	movlw	low (__mediumconst shr (0+16))
 25213  012546  22F8               	addwfc	tblptru,f,c
 25214  012548                     	endif
 25215  012548  0009               	tblrd		*+
 25216  01254A  CFF5 F06E          	movff	tablat,___flmul@b
 25217  01254E  0009               	tblrd		*+
 25218  012550  CFF5 F06F          	movff	tablat,___flmul@b+1
 25219  012554  0009               	tblrd		*+
 25220  012556  CFF5 F070          	movff	tablat,___flmul@b+2
 25221  01255A  000A               	tblrd		*-
 25222  01255C  CFF5 F071          	movff	tablat,___flmul@b+3
 25223  012560  0E00               	movlw	0
 25224  012562  0100               	movlb	0	; () banked
 25225  012564  6F72               	movwf	___flmul@a& (0+255),b
 25226  012566  0E00               	movlw	0
 25227  012568  6F73               	movwf	(___flmul@a+1)& (0+255),b
 25228  01256A  0E00               	movlw	0
 25229  01256C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 25230  01256E  0E3F               	movlw	63
 25231  012570  6F75               	movwf	(___flmul@a+3)& (0+255),b
 25232  012572  EC2A  F089         	call	___flmul	;wreg free
 25233  012576  C06E  F087         	movff	?___flmul,?_fround
 25234  01257A  C06F  F088         	movff	?___flmul+1,?_fround+1
 25235  01257E  C070  F089         	movff	?___flmul+2,?_fround+2
 25236  012582  C071  F08A         	movff	?___flmul+3,?_fround+3
 25237  012586  0012               	return	
 25238  012588                     __end_of_fround:
 25239                           	opt stack 0
 25240                           tosu	equ	0xFFF
 25241                           tosh	equ	0xFFE
 25242                           tosl	equ	0xFFD
 25243                           pclath	equ	0xFFA
 25244                           tblptru	equ	0xFF8
 25245                           tblptrh	equ	0xFF7
 25246                           tblptrl	equ	0xFF6
 25247                           tablat	equ	0xFF5
 25248                           prodh	equ	0xFF4
 25249                           prodl	equ	0xFF3
 25250                           intcon	equ	0xFF2
 25251                           indf0	equ	0xFEF
 25252                           postinc0	equ	0xFEE
 25253                           fsr0h	equ	0xFEA
 25254                           fsr0l	equ	0xFE9
 25255                           wreg	equ	0xFE8
 25256                           indf1	equ	0xFE7
 25257                           postdec1	equ	0xFE5
 25258                           fsr1h	equ	0xFE2
 25259                           fsr1l	equ	0xFE1
 25260                           indf2	equ	0xFDF
 25261                           postinc2	equ	0xFDE
 25262                           postdec2	equ	0xFDD
 25263                           plusw2	equ	0xFDB
 25264                           fsr2h	equ	0xFDA
 25265                           fsr2l	equ	0xFD9
 25266                           status	equ	0xFD8
 25267                           
 25268 ;; *************** function ___awmod *****************
 25269 ;; Defined at:
 25270 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
 25271 ;; Parameters:    Size  Location     Type
 25272 ;;  dividend        2    0[BANK0 ] int 
 25273 ;;  divisor         2    2[BANK0 ] int 
 25274 ;; Auto vars:     Size  Location     Type
 25275 ;;  sign            1    5[BANK0 ] unsigned char 
 25276 ;;  counter         1    4[BANK0 ] unsigned char 
 25277 ;; Return value:  Size  Location     Type
 25278 ;;                  2    0[BANK0 ] int 
 25279 ;; Registers used:
 25280 ;;		wreg, status,2, status,0
 25281 ;; Tracked objects:
 25282 ;;		On entry : 0/0
 25283 ;;		On exit  : 0/0
 25284 ;;		Unchanged: 0/0
 25285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25286 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25289 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25290 ;;Total ram usage:        6 bytes
 25291 ;; Hardware stack levels used:    1
 25292 ;; Hardware stack levels required when called:    7
 25293 ;; This function calls:
 25294 ;;		Nothing
 25295 ;; This function is called by:
 25296 ;;		_fround
 25297 ;;		_scale
 25298 ;; This function uses a non-reentrant model
 25299 ;;
 25300                           
 25301                           	psect	text128
 25302  016350                     __ptext128:
 25303                           	opt stack 0
 25304  016350                     ___awmod:
 25305                           	opt stack 21
 25306                           
 25307                           ;incstack = 0
 25308  016350  0E00               	movlw	0
 25309  016352  0100               	movlb	0	; () banked
 25310  016354  6F65               	movwf	___awmod@sign& (0+255),b
 25311                           
 25312                           ; BSR set to: 0
 25313  016356  0100               	movlb	0	; () banked
 25314  016358  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 25315  01635A  D008               	goto	l14245
 25316                           
 25317                           ; BSR set to: 0
 25318  01635C  0100               	movlb	0	; () banked
 25319  01635E  6D60               	negf	___awmod@dividend& (0+255),b
 25320  016360  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 25321  016362  B0D8               	btfsc	status,0,c
 25322  016364  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 25323                           
 25324                           ; BSR set to: 0
 25325  016366  0E01               	movlw	1
 25326  016368  0100               	movlb	0	; () banked
 25327  01636A  6F65               	movwf	___awmod@sign& (0+255),b
 25328  01636C                     l14245:
 25329                           
 25330                           ; BSR set to: 0
 25331  01636C  0100               	movlb	0	; () banked
 25332  01636E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 25333  016370  D005               	goto	l14249
 25334                           
 25335                           ; BSR set to: 0
 25336  016372  0100               	movlb	0	; () banked
 25337  016374  6D62               	negf	___awmod@divisor& (0+255),b
 25338  016376  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 25339  016378  B0D8               	btfsc	status,0,c
 25340  01637A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 25341  01637C                     l14249:
 25342                           
 25343                           ; BSR set to: 0
 25344  01637C  0100               	movlb	0	; () banked
 25345  01637E  5162               	movf	___awmod@divisor& (0+255),w,b
 25346  016380  0100               	movlb	0	; () banked
 25347  016382  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 25348  016384  B4D8               	btfsc	status,2,c
 25349  016386  D026               	goto	l14265
 25350                           
 25351                           ; BSR set to: 0
 25352  016388  0E01               	movlw	1
 25353  01638A  0100               	movlb	0	; () banked
 25354  01638C  6F64               	movwf	___awmod@counter& (0+255),b
 25355  01638E  D006               	goto	l14255
 25356  016390                     l14253:
 25357                           
 25358                           ; BSR set to: 0
 25359  016390  0100               	movlb	0	; () banked
 25360  016392  90D8               	bcf	status,0,c
 25361  016394  3762               	rlcf	___awmod@divisor& (0+255),f,b
 25362  016396  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 25363  016398  0100               	movlb	0	; () banked
 25364  01639A  2B64               	incf	___awmod@counter& (0+255),f,b
 25365  01639C                     l14255:
 25366                           
 25367                           ; BSR set to: 0
 25368  01639C  0100               	movlb	0	; () banked
 25369  01639E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 25370  0163A0  D7F7               	goto	l14253
 25371  0163A2                     l14257:
 25372                           
 25373                           ; BSR set to: 0
 25374  0163A2  0100               	movlb	0	; () banked
 25375  0163A4  5162               	movf	___awmod@divisor& (0+255),w,b
 25376  0163A6  0100               	movlb	0	; () banked
 25377  0163A8  5D60               	subwf	___awmod@dividend& (0+255),w,b
 25378  0163AA  0100               	movlb	0	; () banked
 25379  0163AC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 25380  0163AE  0100               	movlb	0	; () banked
 25381  0163B0  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 25382  0163B2  A0D8               	btfss	status,0,c
 25383  0163B4  D008               	goto	l14261
 25384                           
 25385                           ; BSR set to: 0
 25386  0163B6  0100               	movlb	0	; () banked
 25387  0163B8  5162               	movf	___awmod@divisor& (0+255),w,b
 25388  0163BA  0100               	movlb	0	; () banked
 25389  0163BC  5F60               	subwf	___awmod@dividend& (0+255),f,b
 25390  0163BE  0100               	movlb	0	; () banked
 25391  0163C0  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 25392  0163C2  0100               	movlb	0	; () banked
 25393  0163C4  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 25394  0163C6                     l14261:
 25395                           
 25396                           ; BSR set to: 0
 25397  0163C6  0100               	movlb	0	; () banked
 25398  0163C8  90D8               	bcf	status,0,c
 25399  0163CA  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 25400  0163CC  3362               	rrcf	___awmod@divisor& (0+255),f,b
 25401                           
 25402                           ; BSR set to: 0
 25403  0163CE  0100               	movlb	0	; () banked
 25404  0163D0  2F64               	decfsz	___awmod@counter& (0+255),f,b
 25405  0163D2  D7E7               	goto	l14257
 25406  0163D4                     l14265:
 25407                           
 25408                           ; BSR set to: 0
 25409  0163D4  0100               	movlb	0	; () banked
 25410  0163D6  5165               	movf	___awmod@sign& (0+255),w,b
 25411  0163D8  0100               	movlb	0	; () banked
 25412  0163DA  B4D8               	btfsc	status,2,c
 25413  0163DC  D005               	goto	l14269
 25414                           
 25415                           ; BSR set to: 0
 25416  0163DE  0100               	movlb	0	; () banked
 25417  0163E0  6D60               	negf	___awmod@dividend& (0+255),b
 25418  0163E2  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 25419  0163E4  B0D8               	btfsc	status,0,c
 25420  0163E6  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 25421  0163E8                     l14269:
 25422                           
 25423                           ; BSR set to: 0
 25424  0163E8  C060  F060         	movff	___awmod@dividend,?___awmod
 25425  0163EC  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 25426  0163F0  0012               	return	
 25427  0163F2                     __end_of___awmod:
 25428                           	opt stack 0
 25429                           tosu	equ	0xFFF
 25430                           tosh	equ	0xFFE
 25431                           tosl	equ	0xFFD
 25432                           pclath	equ	0xFFA
 25433                           tblptru	equ	0xFF8
 25434                           tblptrh	equ	0xFF7
 25435                           tblptrl	equ	0xFF6
 25436                           tablat	equ	0xFF5
 25437                           prodh	equ	0xFF4
 25438                           prodl	equ	0xFF3
 25439                           intcon	equ	0xFF2
 25440                           indf0	equ	0xFEF
 25441                           postinc0	equ	0xFEE
 25442                           fsr0h	equ	0xFEA
 25443                           fsr0l	equ	0xFE9
 25444                           wreg	equ	0xFE8
 25445                           indf1	equ	0xFE7
 25446                           postdec1	equ	0xFE5
 25447                           fsr1h	equ	0xFE2
 25448                           fsr1l	equ	0xFE1
 25449                           indf2	equ	0xFDF
 25450                           postinc2	equ	0xFDE
 25451                           postdec2	equ	0xFDD
 25452                           plusw2	equ	0xFDB
 25453                           fsr2h	equ	0xFDA
 25454                           fsr2l	equ	0xFD9
 25455                           status	equ	0xFD8
 25456                           
 25457 ;; *************** function ___awdiv *****************
 25458 ;; Defined at:
 25459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
 25460 ;; Parameters:    Size  Location     Type
 25461 ;;  dividend        2    6[BANK0 ] int 
 25462 ;;  divisor         2    8[BANK0 ] int 
 25463 ;; Auto vars:     Size  Location     Type
 25464 ;;  quotient        2   12[BANK0 ] int 
 25465 ;;  sign            1   11[BANK0 ] unsigned char 
 25466 ;;  counter         1   10[BANK0 ] unsigned char 
 25467 ;; Return value:  Size  Location     Type
 25468 ;;                  2    6[BANK0 ] int 
 25469 ;; Registers used:
 25470 ;;		wreg, status,2, status,0
 25471 ;; Tracked objects:
 25472 ;;		On entry : 0/0
 25473 ;;		On exit  : 0/0
 25474 ;;		Unchanged: 0/0
 25475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25477 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25479 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25480 ;;Total ram usage:        8 bytes
 25481 ;; Hardware stack levels used:    1
 25482 ;; Hardware stack levels required when called:    7
 25483 ;; This function calls:
 25484 ;;		Nothing
 25485 ;; This function is called by:
 25486 ;;		_Console_Tab
 25487 ;;		_main
 25488 ;;		_fround
 25489 ;;		_scale
 25490 ;;		_printf
 25491 ;; This function uses a non-reentrant model
 25492 ;;
 25493                           
 25494                           	psect	text129
 25495  015916                     __ptext129:
 25496                           	opt stack 0
 25497  015916                     ___awdiv:
 25498                           	opt stack 21
 25499                           
 25500                           ; BSR set to: 0
 25501                           ;incstack = 0
 25502  015916  0E00               	movlw	0
 25503  015918  0100               	movlb	0	; () banked
 25504  01591A  6F6B               	movwf	___awdiv@sign& (0+255),b
 25505                           
 25506                           ; BSR set to: 0
 25507  01591C  0100               	movlb	0	; () banked
 25508  01591E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 25509  015920  D008               	goto	l13137
 25510                           
 25511                           ; BSR set to: 0
 25512  015922  0100               	movlb	0	; () banked
 25513  015924  6D68               	negf	___awdiv@divisor& (0+255),b
 25514  015926  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 25515  015928  B0D8               	btfsc	status,0,c
 25516  01592A  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 25517                           
 25518                           ; BSR set to: 0
 25519  01592C  0E01               	movlw	1
 25520  01592E  0100               	movlb	0	; () banked
 25521  015930  6F6B               	movwf	___awdiv@sign& (0+255),b
 25522  015932                     l13137:
 25523                           
 25524                           ; BSR set to: 0
 25525  015932  0100               	movlb	0	; () banked
 25526  015934  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 25527  015936  D008               	goto	l13143
 25528                           
 25529                           ; BSR set to: 0
 25530  015938  0100               	movlb	0	; () banked
 25531  01593A  6D66               	negf	___awdiv@dividend& (0+255),b
 25532  01593C  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 25533  01593E  B0D8               	btfsc	status,0,c
 25534  015940  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 25535                           
 25536                           ; BSR set to: 0
 25537  015942  0E01               	movlw	1
 25538  015944  0100               	movlb	0	; () banked
 25539  015946  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 25540  015948                     l13143:
 25541                           
 25542                           ; BSR set to: 0
 25543  015948  0E00               	movlw	0
 25544  01594A  0100               	movlb	0	; () banked
 25545  01594C  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 25546  01594E  0E00               	movlw	0
 25547  015950  6F6C               	movwf	___awdiv@quotient& (0+255),b
 25548                           
 25549                           ; BSR set to: 0
 25550  015952  0100               	movlb	0	; () banked
 25551  015954  5168               	movf	___awdiv@divisor& (0+255),w,b
 25552  015956  0100               	movlb	0	; () banked
 25553  015958  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 25554  01595A  B4D8               	btfsc	status,2,c
 25555  01595C  D02C               	goto	l13165
 25556                           
 25557                           ; BSR set to: 0
 25558  01595E  0E01               	movlw	1
 25559  015960  0100               	movlb	0	; () banked
 25560  015962  6F6A               	movwf	___awdiv@counter& (0+255),b
 25561  015964  D006               	goto	l13151
 25562  015966                     l13149:
 25563                           
 25564                           ; BSR set to: 0
 25565  015966  0100               	movlb	0	; () banked
 25566  015968  90D8               	bcf	status,0,c
 25567  01596A  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 25568  01596C  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 25569  01596E  0100               	movlb	0	; () banked
 25570  015970  2B6A               	incf	___awdiv@counter& (0+255),f,b
 25571  015972                     l13151:
 25572                           
 25573                           ; BSR set to: 0
 25574  015972  0100               	movlb	0	; () banked
 25575  015974  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 25576  015976  D7F7               	goto	l13149
 25577  015978                     l13153:
 25578                           
 25579                           ; BSR set to: 0
 25580  015978  0100               	movlb	0	; () banked
 25581  01597A  90D8               	bcf	status,0,c
 25582  01597C  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 25583  01597E  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 25584                           
 25585                           ; BSR set to: 0
 25586  015980  0100               	movlb	0	; () banked
 25587  015982  5168               	movf	___awdiv@divisor& (0+255),w,b
 25588  015984  0100               	movlb	0	; () banked
 25589  015986  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 25590  015988  0100               	movlb	0	; () banked
 25591  01598A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 25592  01598C  0100               	movlb	0	; () banked
 25593  01598E  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 25594  015990  A0D8               	btfss	status,0,c
 25595  015992  D00A               	goto	l13161
 25596                           
 25597                           ; BSR set to: 0
 25598  015994  0100               	movlb	0	; () banked
 25599  015996  5168               	movf	___awdiv@divisor& (0+255),w,b
 25600  015998  0100               	movlb	0	; () banked
 25601  01599A  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 25602  01599C  0100               	movlb	0	; () banked
 25603  01599E  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 25604  0159A0  0100               	movlb	0	; () banked
 25605  0159A2  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 25606                           
 25607                           ; BSR set to: 0
 25608  0159A4  0100               	movlb	0	; () banked
 25609  0159A6  816C               	bsf	___awdiv@quotient& (0+255),0,b
 25610  0159A8                     l13161:
 25611                           
 25612                           ; BSR set to: 0
 25613  0159A8  0100               	movlb	0	; () banked
 25614  0159AA  90D8               	bcf	status,0,c
 25615  0159AC  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 25616  0159AE  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 25617                           
 25618                           ; BSR set to: 0
 25619  0159B0  0100               	movlb	0	; () banked
 25620  0159B2  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 25621  0159B4  D7E1               	goto	l13153
 25622  0159B6                     l13165:
 25623                           
 25624                           ; BSR set to: 0
 25625  0159B6  0100               	movlb	0	; () banked
 25626  0159B8  516B               	movf	___awdiv@sign& (0+255),w,b
 25627  0159BA  0100               	movlb	0	; () banked
 25628  0159BC  B4D8               	btfsc	status,2,c
 25629  0159BE  D005               	goto	l13169
 25630                           
 25631                           ; BSR set to: 0
 25632  0159C0  0100               	movlb	0	; () banked
 25633  0159C2  6D6C               	negf	___awdiv@quotient& (0+255),b
 25634  0159C4  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 25635  0159C6  B0D8               	btfsc	status,0,c
 25636  0159C8  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 25637  0159CA                     l13169:
 25638                           
 25639                           ; BSR set to: 0
 25640  0159CA  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 25641  0159CE  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 25642  0159D2  0012               	return	
 25643  0159D4                     __end_of___awdiv:
 25644                           	opt stack 0
 25645                           tosu	equ	0xFFF
 25646                           tosh	equ	0xFFE
 25647                           tosl	equ	0xFFD
 25648                           pclath	equ	0xFFA
 25649                           tblptru	equ	0xFF8
 25650                           tblptrh	equ	0xFF7
 25651                           tblptrl	equ	0xFF6
 25652                           tablat	equ	0xFF5
 25653                           prodh	equ	0xFF4
 25654                           prodl	equ	0xFF3
 25655                           intcon	equ	0xFF2
 25656                           indf0	equ	0xFEF
 25657                           postinc0	equ	0xFEE
 25658                           fsr0h	equ	0xFEA
 25659                           fsr0l	equ	0xFE9
 25660                           wreg	equ	0xFE8
 25661                           indf1	equ	0xFE7
 25662                           postdec1	equ	0xFE5
 25663                           fsr1h	equ	0xFE2
 25664                           fsr1l	equ	0xFE1
 25665                           indf2	equ	0xFDF
 25666                           postinc2	equ	0xFDE
 25667                           postdec2	equ	0xFDD
 25668                           plusw2	equ	0xFDB
 25669                           fsr2h	equ	0xFDA
 25670                           fsr2l	equ	0xFD9
 25671                           status	equ	0xFD8
 25672                           
 25673 ;; *************** function __tdiv_to_l_ *****************
 25674 ;; Defined at:
 25675 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
 25676 ;; Parameters:    Size  Location     Type
 25677 ;;  f1              4    0[BANK0 ] float 
 25678 ;;  f2              4    4[BANK0 ] float 
 25679 ;; Auto vars:     Size  Location     Type
 25680 ;;  quot            4   11[BANK0 ] unsigned long 
 25681 ;;  exp1            1   16[BANK0 ] unsigned char 
 25682 ;;  cntr            1   15[BANK0 ] unsigned char 
 25683 ;; Return value:  Size  Location     Type
 25684 ;;                  4    0[BANK0 ] unsigned long 
 25685 ;; Registers used:
 25686 ;;		wreg, status,2, status,0
 25687 ;; Tracked objects:
 25688 ;;		On entry : 0/0
 25689 ;;		On exit  : 0/0
 25690 ;;		Unchanged: 0/0
 25691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25692 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25693 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25694 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25695 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25696 ;;Total ram usage:       17 bytes
 25697 ;; Hardware stack levels used:    1
 25698 ;; Hardware stack levels required when called:    7
 25699 ;; This function calls:
 25700 ;;		Nothing
 25701 ;; This function is called by:
 25702 ;;		_printf
 25703 ;; This function uses a non-reentrant model
 25704 ;;
 25705                           
 25706                           	psect	text130
 25707  013AE6                     __ptext130:
 25708                           	opt stack 0
 25709  013AE6                     __tdiv_to_l_:
 25710                           	opt stack 22
 25711                           
 25712                           ; BSR set to: 0
 25713                           ;incstack = 0
 25714  013AE6  C062  F068         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 25715  013AEA  0100               	movlb	0	; () banked
 25716  013AEC  6B69               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 25717  013AEE  6B6A               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 25718  013AF0  0100               	movlb	0	; () banked
 25719  013AF2  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 25720  013AF4  0100               	movlb	0	; () banked
 25721  013AF6  3768               	rlcf	??__tdiv_to_l_& (0+255),f,b
 25722  013AF8  E301               	bnc	u12441
 25723  013AFA  8169               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 25724  013AFC                     u12441:
 25725  013AFC  0100               	movlb	0	; () banked
 25726  013AFE  5168               	movf	??__tdiv_to_l_& (0+255),w,b
 25727  013B00  0100               	movlb	0	; () banked
 25728  013B02  6F70               	movwf	__tdiv_to_l_@exp1& (0+255),b
 25729  013B04  0100               	movlb	0	; () banked
 25730  013B06  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 25731  013B08  A4D8               	btfss	status,2,c
 25732  013B0A  D00A               	goto	l14781
 25733                           
 25734                           ; BSR set to: 0
 25735  013B0C  0E00               	movlw	0
 25736  013B0E  0100               	movlb	0	; () banked
 25737  013B10  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 25738  013B12  0E00               	movlw	0
 25739  013B14  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 25740  013B16  0E00               	movlw	0
 25741  013B18  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 25742  013B1A  0E00               	movlw	0
 25743  013B1C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 25744                           
 25745                           ; BSR set to: 0
 25746  013B1E  0012               	return	
 25747  013B20                     l14781:
 25748                           
 25749                           ; BSR set to: 0
 25750  013B20  C066  F068         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 25751  013B24  0100               	movlb	0	; () banked
 25752  013B26  6B69               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 25753  013B28  6B6A               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 25754  013B2A  0100               	movlb	0	; () banked
 25755  013B2C  3565               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 25756  013B2E  0100               	movlb	0	; () banked
 25757  013B30  3768               	rlcf	??__tdiv_to_l_& (0+255),f,b
 25758  013B32  E301               	bnc	u12461
 25759  013B34  8169               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 25760  013B36                     u12461:
 25761  013B36  0100               	movlb	0	; () banked
 25762  013B38  5168               	movf	??__tdiv_to_l_& (0+255),w,b
 25763  013B3A  0100               	movlb	0	; () banked
 25764  013B3C  6F6F               	movwf	__tdiv_to_l_@cntr& (0+255),b
 25765  013B3E  0100               	movlb	0	; () banked
 25766  013B40  516F               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 25767  013B42  A4D8               	btfss	status,2,c
 25768  013B44  D00A               	goto	l14787
 25769                           
 25770                           ; BSR set to: 0
 25771  013B46  0E00               	movlw	0
 25772  013B48  0100               	movlb	0	; () banked
 25773  013B4A  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 25774  013B4C  0E00               	movlw	0
 25775  013B4E  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 25776  013B50  0E00               	movlw	0
 25777  013B52  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 25778  013B54  0E00               	movlw	0
 25779  013B56  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 25780                           
 25781                           ; BSR set to: 0
 25782  013B58  0012               	return	
 25783  013B5A                     l14787:
 25784                           
 25785                           ; BSR set to: 0
 25786  013B5A  0100               	movlb	0	; () banked
 25787  013B5C  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 25788                           
 25789                           ; BSR set to: 0
 25790  013B5E  0EFF               	movlw	255
 25791  013B60  0100               	movlb	0	; () banked
 25792  013B62  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 25793  013B64  0EFF               	movlw	255
 25794  013B66  0100               	movlb	0	; () banked
 25795  013B68  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 25796  013B6A  0E00               	movlw	0
 25797  013B6C  0100               	movlb	0	; () banked
 25798  013B6E  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 25799  013B70  0100               	movlb	0	; () banked
 25800  013B72  8F65               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 25801                           
 25802                           ; BSR set to: 0
 25803  013B74  0EFF               	movlw	255
 25804  013B76  0100               	movlb	0	; () banked
 25805  013B78  1764               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 25806  013B7A  0EFF               	movlw	255
 25807  013B7C  0100               	movlb	0	; () banked
 25808  013B7E  1765               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 25809  013B80  0E00               	movlw	0
 25810  013B82  0100               	movlb	0	; () banked
 25811  013B84  1766               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 25812                           
 25813                           ; BSR set to: 0
 25814  013B86  0E00               	movlw	0
 25815  013B88  0100               	movlb	0	; () banked
 25816  013B8A  6F6B               	movwf	__tdiv_to_l_@quot& (0+255),b
 25817  013B8C  0E00               	movlw	0
 25818  013B8E  6F6C               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 25819  013B90  0E00               	movlw	0
 25820  013B92  6F6D               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 25821  013B94  0E00               	movlw	0
 25822  013B96  6F6E               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 25823                           
 25824                           ; BSR set to: 0
 25825  013B98  0E7F               	movlw	127
 25826  013B9A  0100               	movlb	0	; () banked
 25827  013B9C  5F70               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 25828                           
 25829                           ; BSR set to: 0
 25830  013B9E  0100               	movlb	0	; () banked
 25831  013BA0  516F               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 25832  013BA2  0F98               	addlw	152
 25833  013BA4  0100               	movlb	0	; () banked
 25834  013BA6  5F70               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 25835                           
 25836                           ; BSR set to: 0
 25837  013BA8  0E18               	movlw	24
 25838  013BAA  0100               	movlb	0	; () banked
 25839  013BAC  6F6F               	movwf	__tdiv_to_l_@cntr& (0+255),b
 25840  013BAE                     l2527:
 25841                           
 25842                           ; BSR set to: 0
 25843  013BAE  0100               	movlb	0	; () banked
 25844  013BB0  90D8               	bcf	status,0,c
 25845  013BB2  376B               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 25846  013BB4  376C               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 25847  013BB6  376D               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 25848  013BB8  376E               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 25849                           
 25850                           ; BSR set to: 0
 25851  013BBA  0100               	movlb	0	; () banked
 25852  013BBC  5164               	movf	__tdiv_to_l_@f2& (0+255),w,b
 25853  013BBE  0100               	movlb	0	; () banked
 25854  013BC0  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 25855  013BC2  0100               	movlb	0	; () banked
 25856  013BC4  5165               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 25857  013BC6  0100               	movlb	0	; () banked
 25858  013BC8  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 25859  013BCA  0100               	movlb	0	; () banked
 25860  013BCC  5166               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 25861  013BCE  0100               	movlb	0	; () banked
 25862  013BD0  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 25863  013BD2  A0D8               	btfss	status,0,c
 25864  013BD4  D00E               	goto	l2528
 25865                           
 25866                           ; BSR set to: 0
 25867  013BD6  0100               	movlb	0	; () banked
 25868  013BD8  5164               	movf	__tdiv_to_l_@f2& (0+255),w,b
 25869  013BDA  0100               	movlb	0	; () banked
 25870  013BDC  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 25871  013BDE  0100               	movlb	0	; () banked
 25872  013BE0  5165               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 25873  013BE2  0100               	movlb	0	; () banked
 25874  013BE4  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 25875  013BE6  0100               	movlb	0	; () banked
 25876  013BE8  5166               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 25877  013BEA  0100               	movlb	0	; () banked
 25878  013BEC  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 25879                           
 25880                           ; BSR set to: 0
 25881  013BEE  0100               	movlb	0	; () banked
 25882  013BF0  816B               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 25883  013BF2                     l2528:
 25884                           
 25885                           ; BSR set to: 0
 25886  013BF2  0100               	movlb	0	; () banked
 25887  013BF4  90D8               	bcf	status,0,c
 25888  013BF6  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 25889  013BF8  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 25890  013BFA  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 25891                           
 25892                           ; BSR set to: 0
 25893  013BFC  0100               	movlb	0	; () banked
 25894  013BFE  2F6F               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 25895  013C00  D7D6               	goto	l2527
 25896                           
 25897                           ; BSR set to: 0
 25898                           
 25899                           ; BSR set to: 0
 25900  013C02  0100               	movlb	0	; () banked
 25901  013C04  AF70               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 25902  013C06  D01A               	goto	l14821
 25903                           
 25904                           ; BSR set to: 0
 25905  013C08  0100               	movlb	0	; () banked
 25906  013C0A  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 25907  013C0C  0A80               	xorlw	128
 25908  013C0E  0F97               	addlw	151
 25909  013C10  B0D8               	btfsc	status,0,c
 25910  013C12  D00A               	goto	l14817
 25911                           
 25912                           ; BSR set to: 0
 25913  013C14  0E00               	movlw	0
 25914  013C16  0100               	movlb	0	; () banked
 25915  013C18  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 25916  013C1A  0E00               	movlw	0
 25917  013C1C  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 25918  013C1E  0E00               	movlw	0
 25919  013C20  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 25920  013C22  0E00               	movlw	0
 25921  013C24  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 25922                           
 25923                           ; BSR set to: 0
 25924  013C26  0012               	return	
 25925  013C28                     l14817:
 25926                           
 25927                           ; BSR set to: 0
 25928  013C28  0100               	movlb	0	; () banked
 25929  013C2A  90D8               	bcf	status,0,c
 25930  013C2C  336E               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 25931  013C2E  336D               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 25932  013C30  336C               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 25933  013C32  336B               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 25934                           
 25935                           ; BSR set to: 0
 25936  013C34  0100               	movlb	0	; () banked
 25937  013C36  3F70               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 25938  013C38  D7F7               	goto	l14817
 25939                           
 25940                           ; BSR set to: 0
 25941  013C3A  D01B               	goto	l2534
 25942  013C3C                     l14821:
 25943                           
 25944                           ; BSR set to: 0
 25945  013C3C  0E17               	movlw	23
 25946  013C3E  0100               	movlb	0	; () banked
 25947  013C40  6570               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 25948  013C42  D012               	goto	l14829
 25949                           
 25950                           ; BSR set to: 0
 25951  013C44  0E00               	movlw	0
 25952  013C46  0100               	movlb	0	; () banked
 25953  013C48  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 25954  013C4A  0E00               	movlw	0
 25955  013C4C  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 25956  013C4E  0E00               	movlw	0
 25957  013C50  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 25958  013C52  0E00               	movlw	0
 25959  013C54  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 25960                           
 25961                           ; BSR set to: 0
 25962  013C56  0012               	return	
 25963  013C58                     l14827:
 25964                           
 25965                           ; BSR set to: 0
 25966  013C58  0100               	movlb	0	; () banked
 25967  013C5A  90D8               	bcf	status,0,c
 25968  013C5C  376B               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 25969  013C5E  376C               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 25970  013C60  376D               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 25971  013C62  376E               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 25972  013C64  0100               	movlb	0	; () banked
 25973  013C66  0770               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 25974  013C68                     l14829:
 25975                           
 25976                           ; BSR set to: 0
 25977  013C68  0100               	movlb	0	; () banked
 25978  013C6A  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 25979  013C6C  0100               	movlb	0	; () banked
 25980  013C6E  A4D8               	btfss	status,2,c
 25981  013C70  D7F3               	goto	l14827
 25982  013C72                     l2534:
 25983                           
 25984                           ; BSR set to: 0
 25985  013C72  C06B  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 25986  013C76  C06C  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 25987  013C7A  C06D  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 25988  013C7E  C06E  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 25989                           
 25990                           ; BSR set to: 0
 25991  013C82  0012               	return		;funcret
 25992  013C84                     __end_of__tdiv_to_l_:
 25993                           	opt stack 0
 25994                           tosu	equ	0xFFF
 25995                           tosh	equ	0xFFE
 25996                           tosl	equ	0xFFD
 25997                           pclath	equ	0xFFA
 25998                           tblptru	equ	0xFF8
 25999                           tblptrh	equ	0xFF7
 26000                           tblptrl	equ	0xFF6
 26001                           tablat	equ	0xFF5
 26002                           prodh	equ	0xFF4
 26003                           prodl	equ	0xFF3
 26004                           intcon	equ	0xFF2
 26005                           indf0	equ	0xFEF
 26006                           postinc0	equ	0xFEE
 26007                           fsr0h	equ	0xFEA
 26008                           fsr0l	equ	0xFE9
 26009                           wreg	equ	0xFE8
 26010                           indf1	equ	0xFE7
 26011                           postdec1	equ	0xFE5
 26012                           fsr1h	equ	0xFE2
 26013                           fsr1l	equ	0xFE1
 26014                           indf2	equ	0xFDF
 26015                           postinc2	equ	0xFDE
 26016                           postdec2	equ	0xFDD
 26017                           plusw2	equ	0xFDB
 26018                           fsr2h	equ	0xFDA
 26019                           fsr2l	equ	0xFD9
 26020                           status	equ	0xFD8
 26021                           
 26022 ;; *************** function __div_to_l_ *****************
 26023 ;; Defined at:
 26024 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
 26025 ;; Parameters:    Size  Location     Type
 26026 ;;  f1              4    0[BANK0 ] unsigned long 
 26027 ;;  f2              4    4[BANK0 ] unsigned long 
 26028 ;; Auto vars:     Size  Location     Type
 26029 ;;  quot            4    8[BANK0 ] unsigned long 
 26030 ;;  exp1            1   13[BANK0 ] unsigned char 
 26031 ;;  cntr            1   12[BANK0 ] unsigned char 
 26032 ;; Return value:  Size  Location     Type
 26033 ;;                  4    0[BANK0 ] unsigned long 
 26034 ;; Registers used:
 26035 ;;		wreg, status,2, status,0
 26036 ;; Tracked objects:
 26037 ;;		On entry : 0/0
 26038 ;;		On exit  : 0/0
 26039 ;;		Unchanged: 0/0
 26040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26041 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26042 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26044 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26045 ;;Total ram usage:       14 bytes
 26046 ;; Hardware stack levels used:    1
 26047 ;; Hardware stack levels required when called:    7
 26048 ;; This function calls:
 26049 ;;		Nothing
 26050 ;; This function is called by:
 26051 ;;		_printf
 26052 ;; This function uses a non-reentrant model
 26053 ;;
 26054                           
 26055                           	psect	text131
 26056  0142BC                     __ptext131:
 26057                           	opt stack 0
 26058  0142BC                     __div_to_l_:
 26059                           	opt stack 22
 26060                           
 26061                           ; BSR set to: 0
 26062                           ;incstack = 0
 26063  0142BC  0100               	movlb	0	; () banked
 26064  0142BE  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 26065  0142C0  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 26066  0142C2  0100               	movlb	0	; () banked
 26067  0142C4  6F6D               	movwf	__div_to_l_@exp1& (0+255),b
 26068  0142C6  0100               	movlb	0	; () banked
 26069  0142C8  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 26070  0142CA  A4D8               	btfss	status,2,c
 26071  0142CC  D00A               	goto	l14837
 26072                           
 26073                           ; BSR set to: 0
 26074  0142CE  0E00               	movlw	0
 26075  0142D0  0100               	movlb	0	; () banked
 26076  0142D2  6F60               	movwf	?__div_to_l_& (0+255),b
 26077  0142D4  0E00               	movlw	0
 26078  0142D6  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 26079  0142D8  0E00               	movlw	0
 26080  0142DA  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 26081  0142DC  0E00               	movlw	0
 26082  0142DE  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 26083                           
 26084                           ; BSR set to: 0
 26085  0142E0  0012               	return	
 26086  0142E2                     l14837:
 26087                           
 26088                           ; BSR set to: 0
 26089  0142E2  0100               	movlb	0	; () banked
 26090  0142E4  3566               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 26091  0142E6  3567               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 26092  0142E8  0100               	movlb	0	; () banked
 26093  0142EA  6F6C               	movwf	__div_to_l_@cntr& (0+255),b
 26094  0142EC  0100               	movlb	0	; () banked
 26095  0142EE  516C               	movf	__div_to_l_@cntr& (0+255),w,b
 26096  0142F0  A4D8               	btfss	status,2,c
 26097  0142F2  D00A               	goto	l14843
 26098                           
 26099                           ; BSR set to: 0
 26100  0142F4  0E00               	movlw	0
 26101  0142F6  0100               	movlb	0	; () banked
 26102  0142F8  6F60               	movwf	?__div_to_l_& (0+255),b
 26103  0142FA  0E00               	movlw	0
 26104  0142FC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 26105  0142FE  0E00               	movlw	0
 26106  014300  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 26107  014302  0E00               	movlw	0
 26108  014304  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 26109                           
 26110                           ; BSR set to: 0
 26111  014306  0012               	return	
 26112  014308                     l14843:
 26113                           
 26114                           ; BSR set to: 0
 26115  014308  0100               	movlb	0	; () banked
 26116  01430A  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 26117                           
 26118                           ; BSR set to: 0
 26119  01430C  0EFF               	movlw	255
 26120  01430E  0100               	movlb	0	; () banked
 26121  014310  1760               	andwf	__div_to_l_@f1& (0+255),f,b
 26122  014312  0EFF               	movlw	255
 26123  014314  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 26124  014316  0EFF               	movlw	255
 26125  014318  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 26126  01431A  0E00               	movlw	0
 26127  01431C  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 26128                           
 26129                           ; BSR set to: 0
 26130  01431E  0100               	movlb	0	; () banked
 26131  014320  8F66               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 26132  014322  0EFF               	movlw	255
 26133  014324  0100               	movlb	0	; () banked
 26134  014326  1764               	andwf	__div_to_l_@f2& (0+255),f,b
 26135  014328  0EFF               	movlw	255
 26136  01432A  1765               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 26137  01432C  0EFF               	movlw	255
 26138  01432E  1766               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 26139  014330  0E00               	movlw	0
 26140  014332  1767               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 26141                           
 26142                           ; BSR set to: 0
 26143  014334  0E00               	movlw	0
 26144  014336  0100               	movlb	0	; () banked
 26145  014338  6F68               	movwf	__div_to_l_@quot& (0+255),b
 26146  01433A  0E00               	movlw	0
 26147  01433C  6F69               	movwf	(__div_to_l_@quot+1)& (0+255),b
 26148  01433E  0E00               	movlw	0
 26149  014340  6F6A               	movwf	(__div_to_l_@quot+2)& (0+255),b
 26150  014342  0E00               	movlw	0
 26151  014344  6F6B               	movwf	(__div_to_l_@quot+3)& (0+255),b
 26152                           
 26153                           ; BSR set to: 0
 26154  014346  0E7F               	movlw	127
 26155  014348  0100               	movlb	0	; () banked
 26156  01434A  5F6D               	subwf	__div_to_l_@exp1& (0+255),f,b
 26157                           
 26158                           ; BSR set to: 0
 26159  01434C  0100               	movlb	0	; () banked
 26160  01434E  516C               	movf	__div_to_l_@cntr& (0+255),w,b
 26161  014350  0FA0               	addlw	160
 26162  014352  0100               	movlb	0	; () banked
 26163  014354  5F6D               	subwf	__div_to_l_@exp1& (0+255),f,b
 26164                           
 26165                           ; BSR set to: 0
 26166  014356  0E20               	movlw	32
 26167  014358  0100               	movlb	0	; () banked
 26168  01435A  6F6C               	movwf	__div_to_l_@cntr& (0+255),b
 26169  01435C                     l14857:
 26170                           
 26171                           ; BSR set to: 0
 26172  01435C  0100               	movlb	0	; () banked
 26173  01435E  90D8               	bcf	status,0,c
 26174  014360  3768               	rlcf	__div_to_l_@quot& (0+255),f,b
 26175  014362  3769               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 26176  014364  376A               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 26177  014366  376B               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 26178                           
 26179                           ; BSR set to: 0
 26180  014368  0100               	movlb	0	; () banked
 26181  01436A  5164               	movf	__div_to_l_@f2& (0+255),w,b
 26182  01436C  0100               	movlb	0	; () banked
 26183  01436E  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
 26184  014370  0100               	movlb	0	; () banked
 26185  014372  5165               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 26186  014374  0100               	movlb	0	; () banked
 26187  014376  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 26188  014378  0100               	movlb	0	; () banked
 26189  01437A  5166               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 26190  01437C  0100               	movlb	0	; () banked
 26191  01437E  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 26192  014380  0100               	movlb	0	; () banked
 26193  014382  5167               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 26194  014384  0100               	movlb	0	; () banked
 26195  014386  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 26196  014388  A0D8               	btfss	status,0,c
 26197  01438A  D012               	goto	l14865
 26198                           
 26199                           ; BSR set to: 0
 26200  01438C  0100               	movlb	0	; () banked
 26201  01438E  5164               	movf	__div_to_l_@f2& (0+255),w,b
 26202  014390  0100               	movlb	0	; () banked
 26203  014392  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
 26204  014394  0100               	movlb	0	; () banked
 26205  014396  5165               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 26206  014398  0100               	movlb	0	; () banked
 26207  01439A  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 26208  01439C  0100               	movlb	0	; () banked
 26209  01439E  5166               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 26210  0143A0  0100               	movlb	0	; () banked
 26211  0143A2  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 26212  0143A4  0100               	movlb	0	; () banked
 26213  0143A6  5167               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 26214  0143A8  0100               	movlb	0	; () banked
 26215  0143AA  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 26216                           
 26217                           ; BSR set to: 0
 26218  0143AC  0100               	movlb	0	; () banked
 26219  0143AE  8168               	bsf	__div_to_l_@quot& (0+255),0,b
 26220  0143B0                     l14865:
 26221                           
 26222                           ; BSR set to: 0
 26223  0143B0  0100               	movlb	0	; () banked
 26224  0143B2  90D8               	bcf	status,0,c
 26225  0143B4  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
 26226  0143B6  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 26227  0143B8  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 26228  0143BA  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 26229                           
 26230                           ; BSR set to: 0
 26231  0143BC  0100               	movlb	0	; () banked
 26232  0143BE  2F6C               	decfsz	__div_to_l_@cntr& (0+255),f,b
 26233  0143C0  D7CD               	goto	l14857
 26234                           
 26235                           ; BSR set to: 0
 26236                           
 26237                           ; BSR set to: 0
 26238  0143C2  0100               	movlb	0	; () banked
 26239  0143C4  AF6D               	btfss	__div_to_l_@exp1& (0+255),7,b
 26240  0143C6  D01A               	goto	l14881
 26241                           
 26242                           ; BSR set to: 0
 26243  0143C8  0100               	movlb	0	; () banked
 26244  0143CA  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 26245  0143CC  0A80               	xorlw	128
 26246  0143CE  0F9F               	addlw	159
 26247  0143D0  B0D8               	btfsc	status,0,c
 26248  0143D2  D00A               	goto	l14877
 26249                           
 26250                           ; BSR set to: 0
 26251  0143D4  0E00               	movlw	0
 26252  0143D6  0100               	movlb	0	; () banked
 26253  0143D8  6F60               	movwf	?__div_to_l_& (0+255),b
 26254  0143DA  0E00               	movlw	0
 26255  0143DC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 26256  0143DE  0E00               	movlw	0
 26257  0143E0  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 26258  0143E2  0E00               	movlw	0
 26259  0143E4  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 26260                           
 26261                           ; BSR set to: 0
 26262  0143E6  0012               	return	
 26263  0143E8                     l14877:
 26264                           
 26265                           ; BSR set to: 0
 26266  0143E8  0100               	movlb	0	; () banked
 26267  0143EA  90D8               	bcf	status,0,c
 26268  0143EC  336B               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 26269  0143EE  336A               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 26270  0143F0  3369               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 26271  0143F2  3368               	rrcf	__div_to_l_@quot& (0+255),f,b
 26272                           
 26273                           ; BSR set to: 0
 26274  0143F4  0100               	movlb	0	; () banked
 26275  0143F6  3F6D               	incfsz	__div_to_l_@exp1& (0+255),f,b
 26276  0143F8  D7F7               	goto	l14877
 26277                           
 26278                           ; BSR set to: 0
 26279  0143FA  D01B               	goto	l2430
 26280  0143FC                     l14881:
 26281                           
 26282                           ; BSR set to: 0
 26283  0143FC  0E1F               	movlw	31
 26284  0143FE  0100               	movlb	0	; () banked
 26285  014400  656D               	cpfsgt	__div_to_l_@exp1& (0+255),b
 26286  014402  D012               	goto	l14889
 26287                           
 26288                           ; BSR set to: 0
 26289  014404  0E00               	movlw	0
 26290  014406  0100               	movlb	0	; () banked
 26291  014408  6F60               	movwf	?__div_to_l_& (0+255),b
 26292  01440A  0E00               	movlw	0
 26293  01440C  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 26294  01440E  0E00               	movlw	0
 26295  014410  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 26296  014412  0E00               	movlw	0
 26297  014414  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 26298                           
 26299                           ; BSR set to: 0
 26300  014416  0012               	return	
 26301  014418                     l14887:
 26302                           
 26303                           ; BSR set to: 0
 26304  014418  0100               	movlb	0	; () banked
 26305  01441A  90D8               	bcf	status,0,c
 26306  01441C  3768               	rlcf	__div_to_l_@quot& (0+255),f,b
 26307  01441E  3769               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 26308  014420  376A               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 26309  014422  376B               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 26310  014424  0100               	movlb	0	; () banked
 26311  014426  076D               	decf	__div_to_l_@exp1& (0+255),f,b
 26312  014428                     l14889:
 26313                           
 26314                           ; BSR set to: 0
 26315  014428  0100               	movlb	0	; () banked
 26316  01442A  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 26317  01442C  0100               	movlb	0	; () banked
 26318  01442E  A4D8               	btfss	status,2,c
 26319  014430  D7F3               	goto	l14887
 26320  014432                     l2430:
 26321                           
 26322                           ; BSR set to: 0
 26323  014432  C068  F060         	movff	__div_to_l_@quot,?__div_to_l_
 26324  014436  C069  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 26325  01443A  C06A  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 26326  01443E  C06B  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 26327                           
 26328                           ; BSR set to: 0
 26329  014442  0012               	return		;funcret
 26330  014444                     __end_of__div_to_l_:
 26331                           	opt stack 0
 26332                           tosu	equ	0xFFF
 26333                           tosh	equ	0xFFE
 26334                           tosl	equ	0xFFD
 26335                           pclath	equ	0xFFA
 26336                           tblptru	equ	0xFF8
 26337                           tblptrh	equ	0xFF7
 26338                           tblptrl	equ	0xFF6
 26339                           tablat	equ	0xFF5
 26340                           prodh	equ	0xFF4
 26341                           prodl	equ	0xFF3
 26342                           intcon	equ	0xFF2
 26343                           indf0	equ	0xFEF
 26344                           postinc0	equ	0xFEE
 26345                           fsr0h	equ	0xFEA
 26346                           fsr0l	equ	0xFE9
 26347                           wreg	equ	0xFE8
 26348                           indf1	equ	0xFE7
 26349                           postdec1	equ	0xFE5
 26350                           fsr1h	equ	0xFE2
 26351                           fsr1l	equ	0xFE1
 26352                           indf2	equ	0xFDF
 26353                           postinc2	equ	0xFDE
 26354                           postdec2	equ	0xFDD
 26355                           plusw2	equ	0xFDB
 26356                           fsr2h	equ	0xFDA
 26357                           fsr2l	equ	0xFD9
 26358                           status	equ	0xFD8
 26359                           
 26360 ;; *************** function ___llmod *****************
 26361 ;; Defined at:
 26362 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
 26363 ;; Parameters:    Size  Location     Type
 26364 ;;  dividend        4   13[BANK0 ] unsigned long 
 26365 ;;  divisor         4   17[BANK0 ] unsigned long 
 26366 ;; Auto vars:     Size  Location     Type
 26367 ;;  counter         1   21[BANK0 ] unsigned char 
 26368 ;; Return value:  Size  Location     Type
 26369 ;;                  4   13[BANK0 ] unsigned long 
 26370 ;; Registers used:
 26371 ;;		wreg, status,2, status,0
 26372 ;; Tracked objects:
 26373 ;;		On entry : 0/0
 26374 ;;		On exit  : 0/0
 26375 ;;		Unchanged: 0/0
 26376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26377 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26380 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26381 ;;Total ram usage:        9 bytes
 26382 ;; Hardware stack levels used:    1
 26383 ;; Hardware stack levels required when called:    7
 26384 ;; This function calls:
 26385 ;;		Nothing
 26386 ;; This function is called by:
 26387 ;;		_printf
 26388 ;;		_rand_between
 26389 ;; This function uses a non-reentrant model
 26390 ;;
 26391                           
 26392                           	psect	text132
 26393  01648E                     __ptext132:
 26394                           	opt stack 0
 26395  01648E                     ___llmod:
 26396                           	opt stack 22
 26397                           
 26398                           ; BSR set to: 0
 26399                           ;incstack = 0
 26400  01648E  0100               	movlb	0	; () banked
 26401  016490  5171               	movf	___llmod@divisor& (0+255),w,b
 26402  016492  0100               	movlb	0	; () banked
 26403  016494  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 26404  016496  0100               	movlb	0	; () banked
 26405  016498  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 26406  01649A  0100               	movlb	0	; () banked
 26407  01649C  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 26408  01649E  B4D8               	btfsc	status,2,c
 26409  0164A0  D03A               	goto	l2614
 26410                           
 26411                           ; BSR set to: 0
 26412  0164A2  0E01               	movlw	1
 26413  0164A4  0100               	movlb	0	; () banked
 26414  0164A6  6F75               	movwf	___llmod@counter& (0+255),b
 26415  0164A8  D008               	goto	l15053
 26416  0164AA                     l15051:
 26417                           
 26418                           ; BSR set to: 0
 26419  0164AA  0100               	movlb	0	; () banked
 26420  0164AC  90D8               	bcf	status,0,c
 26421  0164AE  3771               	rlcf	___llmod@divisor& (0+255),f,b
 26422  0164B0  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 26423  0164B2  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 26424  0164B4  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 26425  0164B6  0100               	movlb	0	; () banked
 26426  0164B8  2B75               	incf	___llmod@counter& (0+255),f,b
 26427  0164BA                     l15053:
 26428                           
 26429                           ; BSR set to: 0
 26430  0164BA  0100               	movlb	0	; () banked
 26431  0164BC  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 26432  0164BE  D7F5               	goto	l15051
 26433  0164C0                     l15055:
 26434                           
 26435                           ; BSR set to: 0
 26436  0164C0  0100               	movlb	0	; () banked
 26437  0164C2  5171               	movf	___llmod@divisor& (0+255),w,b
 26438  0164C4  0100               	movlb	0	; () banked
 26439  0164C6  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 26440  0164C8  0100               	movlb	0	; () banked
 26441  0164CA  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 26442  0164CC  0100               	movlb	0	; () banked
 26443  0164CE  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 26444  0164D0  0100               	movlb	0	; () banked
 26445  0164D2  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 26446  0164D4  0100               	movlb	0	; () banked
 26447  0164D6  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 26448  0164D8  0100               	movlb	0	; () banked
 26449  0164DA  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 26450  0164DC  0100               	movlb	0	; () banked
 26451  0164DE  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 26452  0164E0  A0D8               	btfss	status,0,c
 26453  0164E2  D010               	goto	l15059
 26454                           
 26455                           ; BSR set to: 0
 26456  0164E4  0100               	movlb	0	; () banked
 26457  0164E6  5171               	movf	___llmod@divisor& (0+255),w,b
 26458  0164E8  0100               	movlb	0	; () banked
 26459  0164EA  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 26460  0164EC  0100               	movlb	0	; () banked
 26461  0164EE  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 26462  0164F0  0100               	movlb	0	; () banked
 26463  0164F2  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 26464  0164F4  0100               	movlb	0	; () banked
 26465  0164F6  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 26466  0164F8  0100               	movlb	0	; () banked
 26467  0164FA  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 26468  0164FC  0100               	movlb	0	; () banked
 26469  0164FE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 26470  016500  0100               	movlb	0	; () banked
 26471  016502  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 26472  016504                     l15059:
 26473                           
 26474                           ; BSR set to: 0
 26475  016504  0100               	movlb	0	; () banked
 26476  016506  90D8               	bcf	status,0,c
 26477  016508  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 26478  01650A  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 26479  01650C  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 26480  01650E  3371               	rrcf	___llmod@divisor& (0+255),f,b
 26481                           
 26482                           ; BSR set to: 0
 26483  016510  0100               	movlb	0	; () banked
 26484  016512  2F75               	decfsz	___llmod@counter& (0+255),f,b
 26485  016514  D7D5               	goto	l15055
 26486  016516                     l2614:
 26487                           
 26488                           ; BSR set to: 0
 26489  016516  C06D  F06D         	movff	___llmod@dividend,?___llmod
 26490  01651A  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 26491  01651E  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 26492  016522  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 26493                           
 26494                           ; BSR set to: 0
 26495  016526  0012               	return		;funcret
 26496  016528                     __end_of___llmod:
 26497                           	opt stack 0
 26498                           tosu	equ	0xFFF
 26499                           tosh	equ	0xFFE
 26500                           tosl	equ	0xFFD
 26501                           pclath	equ	0xFFA
 26502                           tblptru	equ	0xFF8
 26503                           tblptrh	equ	0xFF7
 26504                           tblptrl	equ	0xFF6
 26505                           tablat	equ	0xFF5
 26506                           prodh	equ	0xFF4
 26507                           prodl	equ	0xFF3
 26508                           intcon	equ	0xFF2
 26509                           indf0	equ	0xFEF
 26510                           postinc0	equ	0xFEE
 26511                           fsr0h	equ	0xFEA
 26512                           fsr0l	equ	0xFE9
 26513                           wreg	equ	0xFE8
 26514                           indf1	equ	0xFE7
 26515                           postdec1	equ	0xFE5
 26516                           fsr1h	equ	0xFE2
 26517                           fsr1l	equ	0xFE1
 26518                           indf2	equ	0xFDF
 26519                           postinc2	equ	0xFDE
 26520                           postdec2	equ	0xFDD
 26521                           plusw2	equ	0xFDB
 26522                           fsr2h	equ	0xFDA
 26523                           fsr2l	equ	0xFD9
 26524                           status	equ	0xFD8
 26525                           
 26526 ;; *************** function ___fltol *****************
 26527 ;; Defined at:
 26528 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fltol.c"
 26529 ;; Parameters:    Size  Location     Type
 26530 ;;  f1              4   39[BANK0 ] unsigned long 
 26531 ;; Auto vars:     Size  Location     Type
 26532 ;;  exp1            1   48[BANK0 ] unsigned char 
 26533 ;;  sign1           1   47[BANK0 ] unsigned char 
 26534 ;; Return value:  Size  Location     Type
 26535 ;;                  4   39[BANK0 ] long 
 26536 ;; Registers used:
 26537 ;;		wreg, status,2, status,0
 26538 ;; Tracked objects:
 26539 ;;		On entry : 0/0
 26540 ;;		On exit  : 0/0
 26541 ;;		Unchanged: 0/0
 26542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26544 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26545 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26546 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26547 ;;Total ram usage:       10 bytes
 26548 ;; Hardware stack levels used:    1
 26549 ;; Hardware stack levels required when called:    7
 26550 ;; This function calls:
 26551 ;;		Nothing
 26552 ;; This function is called by:
 26553 ;;		_main
 26554 ;;		_printf
 26555 ;;		_pow
 26556 ;;		_exp
 26557 ;;		_floor
 26558 ;; This function uses a non-reentrant model
 26559 ;;
 26560                           
 26561                           	psect	text133
 26562  014FC0                     __ptext133:
 26563                           	opt stack 0
 26564  014FC0                     ___fltol:
 26565                           	opt stack 22
 26566                           
 26567                           ; BSR set to: 0
 26568                           ;incstack = 0
 26569  014FC0  0100               	movlb	0	; () banked
 26570  014FC2  3589               	rlcf	(___fltol@f1+2)& (0+255),w,b
 26571  014FC4  358A               	rlcf	(___fltol@f1+3)& (0+255),w,b
 26572  014FC6  0100               	movlb	0	; () banked
 26573  014FC8  6F90               	movwf	___fltol@exp1& (0+255),b
 26574  014FCA  0100               	movlb	0	; () banked
 26575  014FCC  5190               	movf	___fltol@exp1& (0+255),w,b
 26576  014FCE  A4D8               	btfss	status,2,c
 26577  014FD0  D00A               	goto	l14301
 26578                           
 26579                           ; BSR set to: 0
 26580  014FD2  0E00               	movlw	0
 26581  014FD4  0100               	movlb	0	; () banked
 26582  014FD6  6F87               	movwf	?___fltol& (0+255),b
 26583  014FD8  0E00               	movlw	0
 26584  014FDA  6F88               	movwf	(?___fltol+1)& (0+255),b
 26585  014FDC  0E00               	movlw	0
 26586  014FDE  6F89               	movwf	(?___fltol+2)& (0+255),b
 26587  014FE0  0E00               	movlw	0
 26588  014FE2  6F8A               	movwf	(?___fltol+3)& (0+255),b
 26589                           
 26590                           ; BSR set to: 0
 26591  014FE4  0012               	return	
 26592  014FE6                     l14301:
 26593                           
 26594                           ; BSR set to: 0
 26595  014FE6  C087  F08B         	movff	___fltol@f1,??___fltol
 26596  014FEA  C088  F08C         	movff	___fltol@f1+1,??___fltol+1
 26597  014FEE  C089  F08D         	movff	___fltol@f1+2,??___fltol+2
 26598  014FF2  C08A  F08E         	movff	___fltol@f1+3,??___fltol+3
 26599  014FF6  0E20               	movlw	32
 26600  014FF8  D006               	goto	u11850
 26601  014FFA                     u11855:
 26602  014FFA  0100               	movlb	0	; () banked
 26603  014FFC  90D8               	bcf	status,0,c
 26604  014FFE  338E               	rrcf	(??___fltol+3)& (0+255),f,b
 26605  015000  338D               	rrcf	(??___fltol+2)& (0+255),f,b
 26606  015002  338C               	rrcf	(??___fltol+1)& (0+255),f,b
 26607  015004  338B               	rrcf	??___fltol& (0+255),f,b
 26608  015006                     u11850:
 26609  015006  2EE8               	decfsz	wreg,f,c
 26610  015008  D7F8               	goto	u11855
 26611  01500A  0100               	movlb	0	; () banked
 26612  01500C  518B               	movf	??___fltol& (0+255),w,b
 26613  01500E  0100               	movlb	0	; () banked
 26614  015010  6F8F               	movwf	___fltol@sign1& (0+255),b
 26615                           
 26616                           ; BSR set to: 0
 26617  015012  0100               	movlb	0	; () banked
 26618  015014  8F89               	bsf	(___fltol@f1+2)& (0+255),7,b
 26619                           
 26620                           ; BSR set to: 0
 26621  015016  0EFF               	movlw	255
 26622  015018  0100               	movlb	0	; () banked
 26623  01501A  1787               	andwf	___fltol@f1& (0+255),f,b
 26624  01501C  0EFF               	movlw	255
 26625  01501E  1788               	andwf	(___fltol@f1+1)& (0+255),f,b
 26626  015020  0EFF               	movlw	255
 26627  015022  1789               	andwf	(___fltol@f1+2)& (0+255),f,b
 26628  015024  0E00               	movlw	0
 26629  015026  178A               	andwf	(___fltol@f1+3)& (0+255),f,b
 26630                           
 26631                           ; BSR set to: 0
 26632  015028  0E96               	movlw	150
 26633  01502A  0100               	movlb	0	; () banked
 26634  01502C  5F90               	subwf	___fltol@exp1& (0+255),f,b
 26635                           
 26636                           ; BSR set to: 0
 26637  01502E  0100               	movlb	0	; () banked
 26638  015030  AF90               	btfss	___fltol@exp1& (0+255),7,b
 26639  015032  D01A               	goto	l14321
 26640                           
 26641                           ; BSR set to: 0
 26642  015034  0100               	movlb	0	; () banked
 26643  015036  5190               	movf	___fltol@exp1& (0+255),w,b
 26644  015038  0A80               	xorlw	128
 26645  01503A  0F97               	addlw	151
 26646  01503C  B0D8               	btfsc	status,0,c
 26647  01503E  D00A               	goto	l14317
 26648                           
 26649                           ; BSR set to: 0
 26650  015040  0E00               	movlw	0
 26651  015042  0100               	movlb	0	; () banked
 26652  015044  6F87               	movwf	?___fltol& (0+255),b
 26653  015046  0E00               	movlw	0
 26654  015048  6F88               	movwf	(?___fltol+1)& (0+255),b
 26655  01504A  0E00               	movlw	0
 26656  01504C  6F89               	movwf	(?___fltol+2)& (0+255),b
 26657  01504E  0E00               	movlw	0
 26658  015050  6F8A               	movwf	(?___fltol+3)& (0+255),b
 26659                           
 26660                           ; BSR set to: 0
 26661  015052  0012               	return	
 26662  015054                     l14317:
 26663                           
 26664                           ; BSR set to: 0
 26665  015054  0100               	movlb	0	; () banked
 26666  015056  90D8               	bcf	status,0,c
 26667  015058  338A               	rrcf	(___fltol@f1+3)& (0+255),f,b
 26668  01505A  3389               	rrcf	(___fltol@f1+2)& (0+255),f,b
 26669  01505C  3388               	rrcf	(___fltol@f1+1)& (0+255),f,b
 26670  01505E  3387               	rrcf	___fltol@f1& (0+255),f,b
 26671                           
 26672                           ; BSR set to: 0
 26673  015060  0100               	movlb	0	; () banked
 26674  015062  3F90               	incfsz	___fltol@exp1& (0+255),f,b
 26675  015064  D7F7               	goto	l14317
 26676                           
 26677                           ; BSR set to: 0
 26678  015066  D01B               	goto	l14331
 26679  015068                     l14321:
 26680                           
 26681                           ; BSR set to: 0
 26682  015068  0E1F               	movlw	31
 26683  01506A  0100               	movlb	0	; () banked
 26684  01506C  6590               	cpfsgt	___fltol@exp1& (0+255),b
 26685  01506E  D012               	goto	l14329
 26686                           
 26687                           ; BSR set to: 0
 26688  015070  0E00               	movlw	0
 26689  015072  0100               	movlb	0	; () banked
 26690  015074  6F87               	movwf	?___fltol& (0+255),b
 26691  015076  0E00               	movlw	0
 26692  015078  6F88               	movwf	(?___fltol+1)& (0+255),b
 26693  01507A  0E00               	movlw	0
 26694  01507C  6F89               	movwf	(?___fltol+2)& (0+255),b
 26695  01507E  0E00               	movlw	0
 26696  015080  6F8A               	movwf	(?___fltol+3)& (0+255),b
 26697                           
 26698                           ; BSR set to: 0
 26699  015082  0012               	return	
 26700  015084                     l14327:
 26701                           
 26702                           ; BSR set to: 0
 26703  015084  0100               	movlb	0	; () banked
 26704  015086  90D8               	bcf	status,0,c
 26705  015088  3787               	rlcf	___fltol@f1& (0+255),f,b
 26706  01508A  3788               	rlcf	(___fltol@f1+1)& (0+255),f,b
 26707  01508C  3789               	rlcf	(___fltol@f1+2)& (0+255),f,b
 26708  01508E  378A               	rlcf	(___fltol@f1+3)& (0+255),f,b
 26709  015090  0100               	movlb	0	; () banked
 26710  015092  0790               	decf	___fltol@exp1& (0+255),f,b
 26711  015094                     l14329:
 26712                           
 26713                           ; BSR set to: 0
 26714  015094  0100               	movlb	0	; () banked
 26715  015096  5190               	movf	___fltol@exp1& (0+255),w,b
 26716  015098  0100               	movlb	0	; () banked
 26717  01509A  A4D8               	btfss	status,2,c
 26718  01509C  D7F3               	goto	l14327
 26719  01509E                     l14331:
 26720                           
 26721                           ; BSR set to: 0
 26722  01509E  0100               	movlb	0	; () banked
 26723  0150A0  518F               	movf	___fltol@sign1& (0+255),w,b
 26724  0150A2  0100               	movlb	0	; () banked
 26725  0150A4  B4D8               	btfsc	status,2,c
 26726  0150A6  D009               	goto	l14335
 26727                           
 26728                           ; BSR set to: 0
 26729  0150A8  0100               	movlb	0	; () banked
 26730  0150AA  1F8A               	comf	(___fltol@f1+3)& (0+255),f,b
 26731  0150AC  1F89               	comf	(___fltol@f1+2)& (0+255),f,b
 26732  0150AE  1F88               	comf	(___fltol@f1+1)& (0+255),f,b
 26733  0150B0  6D87               	negf	___fltol@f1& (0+255),b
 26734  0150B2  0E00               	movlw	0
 26735  0150B4  2388               	addwfc	(___fltol@f1+1)& (0+255),f,b
 26736  0150B6  2389               	addwfc	(___fltol@f1+2)& (0+255),f,b
 26737  0150B8  238A               	addwfc	(___fltol@f1+3)& (0+255),f,b
 26738  0150BA                     l14335:
 26739                           
 26740                           ; BSR set to: 0
 26741  0150BA  C087  F087         	movff	___fltol@f1,?___fltol
 26742  0150BE  C088  F088         	movff	___fltol@f1+1,?___fltol+1
 26743  0150C2  C089  F089         	movff	___fltol@f1+2,?___fltol+2
 26744  0150C6  C08A  F08A         	movff	___fltol@f1+3,?___fltol+3
 26745  0150CA  0012               	return	
 26746  0150CC                     __end_of___fltol:
 26747                           	opt stack 0
 26748                           tosu	equ	0xFFF
 26749                           tosh	equ	0xFFE
 26750                           tosl	equ	0xFFD
 26751                           pclath	equ	0xFFA
 26752                           tblptru	equ	0xFF8
 26753                           tblptrh	equ	0xFF7
 26754                           tblptrl	equ	0xFF6
 26755                           tablat	equ	0xFF5
 26756                           prodh	equ	0xFF4
 26757                           prodl	equ	0xFF3
 26758                           intcon	equ	0xFF2
 26759                           indf0	equ	0xFEF
 26760                           postinc0	equ	0xFEE
 26761                           fsr0h	equ	0xFEA
 26762                           fsr0l	equ	0xFE9
 26763                           wreg	equ	0xFE8
 26764                           indf1	equ	0xFE7
 26765                           postdec1	equ	0xFE5
 26766                           fsr1h	equ	0xFE2
 26767                           fsr1l	equ	0xFE1
 26768                           indf2	equ	0xFDF
 26769                           postinc2	equ	0xFDE
 26770                           postdec2	equ	0xFDD
 26771                           plusw2	equ	0xFDB
 26772                           fsr2h	equ	0xFDA
 26773                           fsr2l	equ	0xFD9
 26774                           status	equ	0xFD8
 26775                           
 26776 ;; *************** function ___flsub *****************
 26777 ;; Defined at:
 26778 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcadd.c"
 26779 ;; Parameters:    Size  Location     Type
 26780 ;;  b               4   72[BANK0 ] long 
 26781 ;;  a               4   76[BANK0 ] long 
 26782 ;; Auto vars:     Size  Location     Type
 26783 ;;		None
 26784 ;; Return value:  Size  Location     Type
 26785 ;;                  4   72[BANK0 ] long 
 26786 ;; Registers used:
 26787 ;;		wreg, status,2, status,0, cstack
 26788 ;; Tracked objects:
 26789 ;;		On entry : 0/0
 26790 ;;		On exit  : 0/0
 26791 ;;		Unchanged: 0/0
 26792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26793 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26796 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26797 ;;Total ram usage:        8 bytes
 26798 ;; Hardware stack levels used:    1
 26799 ;; Hardware stack levels required when called:    8
 26800 ;; This function calls:
 26801 ;;		___fladd
 26802 ;; This function is called by:
 26803 ;;		_printf
 26804 ;;		_exp
 26805 ;; This function uses a non-reentrant model
 26806 ;;
 26807                           
 26808                           	psect	text134
 26809  017674                     __ptext134:
 26810                           	opt stack 0
 26811  017674                     ___flsub:
 26812                           	opt stack 21
 26813                           
 26814                           ; BSR set to: 0
 26815                           ;incstack = 0
 26816  017674  0E00               	movlw	0
 26817  017676  0100               	movlb	0	; () banked
 26818  017678  1BAC               	xorwf	___flsub@a& (0+255),f,b
 26819  01767A  0E00               	movlw	0
 26820  01767C  1BAD               	xorwf	(___flsub@a+1)& (0+255),f,b
 26821  01767E  0E00               	movlw	0
 26822  017680  1BAE               	xorwf	(___flsub@a+2)& (0+255),f,b
 26823  017682  0E80               	movlw	128
 26824  017684  1BAF               	xorwf	(___flsub@a+3)& (0+255),f,b
 26825                           
 26826                           ; BSR set to: 0
 26827  017686  C0A8  F094         	movff	___flsub@b,___fladd@b
 26828  01768A  C0A9  F095         	movff	___flsub@b+1,___fladd@b+1
 26829  01768E  C0AA  F096         	movff	___flsub@b+2,___fladd@b+2
 26830  017692  C0AB  F097         	movff	___flsub@b+3,___fladd@b+3
 26831  017696  C0AC  F098         	movff	___flsub@a,___fladd@a
 26832  01769A  C0AD  F099         	movff	___flsub@a+1,___fladd@a+1
 26833  01769E  C0AE  F09A         	movff	___flsub@a+2,___fladd@a+2
 26834  0176A2  C0AF  F09B         	movff	___flsub@a+3,___fladd@a+3
 26835  0176A6  ECD6  F086         	call	___fladd	;wreg free
 26836  0176AA  C094  F0A8         	movff	?___fladd,?___flsub
 26837  0176AE  C095  F0A9         	movff	?___fladd+1,?___flsub+1
 26838  0176B2  C096  F0AA         	movff	?___fladd+2,?___flsub+2
 26839  0176B6  C097  F0AB         	movff	?___fladd+3,?___flsub+3
 26840  0176BA  0012               	return	
 26841  0176BC                     __end_of___flsub:
 26842                           	opt stack 0
 26843                           tosu	equ	0xFFF
 26844                           tosh	equ	0xFFE
 26845                           tosl	equ	0xFFD
 26846                           pclath	equ	0xFFA
 26847                           tblptru	equ	0xFF8
 26848                           tblptrh	equ	0xFF7
 26849                           tblptrl	equ	0xFF6
 26850                           tablat	equ	0xFF5
 26851                           prodh	equ	0xFF4
 26852                           prodl	equ	0xFF3
 26853                           intcon	equ	0xFF2
 26854                           indf0	equ	0xFEF
 26855                           postinc0	equ	0xFEE
 26856                           fsr0h	equ	0xFEA
 26857                           fsr0l	equ	0xFE9
 26858                           wreg	equ	0xFE8
 26859                           indf1	equ	0xFE7
 26860                           postdec1	equ	0xFE5
 26861                           fsr1h	equ	0xFE2
 26862                           fsr1l	equ	0xFE1
 26863                           indf2	equ	0xFDF
 26864                           postinc2	equ	0xFDE
 26865                           postdec2	equ	0xFDD
 26866                           plusw2	equ	0xFDB
 26867                           fsr2h	equ	0xFDA
 26868                           fsr2l	equ	0xFD9
 26869                           status	equ	0xFD8
 26870                           
 26871 ;; *************** function ___fladd *****************
 26872 ;; Defined at:
 26873 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcadd.c"
 26874 ;; Parameters:    Size  Location     Type
 26875 ;;  b               4   52[BANK0 ] long 
 26876 ;;  a               4   56[BANK0 ] long 
 26877 ;; Auto vars:     Size  Location     Type
 26878 ;;  grs             1   71[BANK0 ] unsigned char 
 26879 ;;  bexp            1   70[BANK0 ] unsigned char 
 26880 ;;  aexp            1   69[BANK0 ] unsigned char 
 26881 ;;  signs           1   68[BANK0 ] unsigned char 
 26882 ;; Return value:  Size  Location     Type
 26883 ;;                  4   52[BANK0 ] unsigned char 
 26884 ;; Registers used:
 26885 ;;		wreg, status,2, status,0
 26886 ;; Tracked objects:
 26887 ;;		On entry : 0/0
 26888 ;;		On exit  : 0/0
 26889 ;;		Unchanged: 0/0
 26890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26891 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26892 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26893 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26894 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26895 ;;Total ram usage:       20 bytes
 26896 ;; Hardware stack levels used:    1
 26897 ;; Hardware stack levels required when called:    7
 26898 ;; This function calls:
 26899 ;;		Nothing
 26900 ;; This function is called by:
 26901 ;;		_printf
 26902 ;;		___flsub
 26903 ;;		_floor
 26904 ;;		_log
 26905 ;;		_eval_poly
 26906 ;; This function uses a non-reentrant model
 26907 ;;
 26908                           
 26909                           	psect	text135
 26910  010DAC                     __ptext135:
 26911                           	opt stack 0
 26912  010DAC                     ___fladd:
 26913                           	opt stack 21
 26914                           
 26915                           ;incstack = 0
 26916  010DAC  0100               	movlb	0	; () banked
 26917  010DAE  5197               	movf	(___fladd@b+3)& (0+255),w,b
 26918  010DB0  0B80               	andlw	128
 26919  010DB2  0100               	movlb	0	; () banked
 26920  010DB4  6FA4               	movwf	___fladd@signs& (0+255),b
 26921  010DB6  0100               	movlb	0	; () banked
 26922  010DB8  5197               	movf	(___fladd@b+3)& (0+255),w,b
 26923  010DBA  2597               	addwf	(___fladd@b+3)& (0+255),w,b
 26924  010DBC  0100               	movlb	0	; () banked
 26925  010DBE  6FA6               	movwf	___fladd@bexp& (0+255),b
 26926                           
 26927                           ; BSR set to: 0
 26928  010DC0  0100               	movlb	0	; () banked
 26929  010DC2  AF96               	btfss	(___fladd@b+2)& (0+255),7,b
 26930  010DC4  D002               	goto	l13911
 26931                           
 26932                           ; BSR set to: 0
 26933  010DC6  0100               	movlb	0	; () banked
 26934  010DC8  81A6               	bsf	___fladd@bexp& (0+255),0,b
 26935  010DCA                     l13911:
 26936                           
 26937                           ; BSR set to: 0
 26938  010DCA  0100               	movlb	0	; () banked
 26939  010DCC  51A6               	movf	___fladd@bexp& (0+255),w,b
 26940  010DCE  0100               	movlb	0	; () banked
 26941  010DD0  B4D8               	btfsc	status,2,c
 26942  010DD2  D012               	goto	l13921
 26943                           
 26944                           ; BSR set to: 0
 26945  010DD4  0100               	movlb	0	; () banked
 26946  010DD6  29A6               	incf	___fladd@bexp& (0+255),w,b
 26947  010DD8  A4D8               	btfss	status,2,c
 26948  010DDA  D009               	goto	l13917
 26949                           
 26950                           ; BSR set to: 0
 26951  010DDC  0E00               	movlw	0
 26952  010DDE  0100               	movlb	0	; () banked
 26953  010DE0  6F94               	movwf	___fladd@b& (0+255),b
 26954  010DE2  0E00               	movlw	0
 26955  010DE4  6F95               	movwf	(___fladd@b+1)& (0+255),b
 26956  010DE6  0E00               	movlw	0
 26957  010DE8  6F96               	movwf	(___fladd@b+2)& (0+255),b
 26958  010DEA  0E00               	movlw	0
 26959  010DEC  6F97               	movwf	(___fladd@b+3)& (0+255),b
 26960  010DEE                     l13917:
 26961                           
 26962                           ; BSR set to: 0
 26963  010DEE  0100               	movlb	0	; () banked
 26964  010DF0  8F96               	bsf	(___fladd@b+2)& (0+255),7,b
 26965                           
 26966                           ; BSR set to: 0
 26967  010DF2  0E00               	movlw	0
 26968  010DF4  0100               	movlb	0	; () banked
 26969  010DF6  D008               	goto	L19
 26970  010DF8                     l13921:
 26971                           
 26972                           ; BSR set to: 0
 26973  010DF8  0E00               	movlw	0
 26974  010DFA  0100               	movlb	0	; () banked
 26975  010DFC  6F94               	movwf	___fladd@b& (0+255),b
 26976  010DFE  0E00               	movlw	0
 26977  010E00  6F95               	movwf	(___fladd@b+1)& (0+255),b
 26978  010E02  0E00               	movlw	0
 26979  010E04  6F96               	movwf	(___fladd@b+2)& (0+255),b
 26980  010E06  0E00               	movlw	0
 26981  010E08                     L19:
 26982  010E08  6F97               	movwf	(___fladd@b+3)& (0+255),b
 26983                           
 26984                           ; BSR set to: 0
 26985                           
 26986                           ; BSR set to: 0
 26987  010E0A  0100               	movlb	0	; () banked
 26988  010E0C  519B               	movf	(___fladd@a+3)& (0+255),w,b
 26989  010E0E  0B80               	andlw	128
 26990  010E10  0100               	movlb	0	; () banked
 26991  010E12  6FA5               	movwf	___fladd@aexp& (0+255),b
 26992                           
 26993                           ; BSR set to: 0
 26994  010E14  0100               	movlb	0	; () banked
 26995  010E16  51A4               	movf	___fladd@signs& (0+255),w,b
 26996  010E18  0100               	movlb	0	; () banked
 26997  010E1A  19A5               	xorwf	___fladd@aexp& (0+255),w,b
 26998  010E1C  B4D8               	btfsc	status,2,c
 26999  010E1E  D002               	goto	l13929
 27000                           
 27001                           ; BSR set to: 0
 27002  010E20  0100               	movlb	0	; () banked
 27003  010E22  8DA4               	bsf	___fladd@signs& (0+255),6,b
 27004  010E24                     l13929:
 27005                           
 27006                           ; BSR set to: 0
 27007  010E24  0100               	movlb	0	; () banked
 27008  010E26  519B               	movf	(___fladd@a+3)& (0+255),w,b
 27009  010E28  259B               	addwf	(___fladd@a+3)& (0+255),w,b
 27010  010E2A  0100               	movlb	0	; () banked
 27011  010E2C  6FA5               	movwf	___fladd@aexp& (0+255),b
 27012                           
 27013                           ; BSR set to: 0
 27014  010E2E  0100               	movlb	0	; () banked
 27015  010E30  AF9A               	btfss	(___fladd@a+2)& (0+255),7,b
 27016  010E32  D002               	goto	l13935
 27017                           
 27018                           ; BSR set to: 0
 27019  010E34  0100               	movlb	0	; () banked
 27020  010E36  81A5               	bsf	___fladd@aexp& (0+255),0,b
 27021  010E38                     l13935:
 27022                           
 27023                           ; BSR set to: 0
 27024  010E38  0100               	movlb	0	; () banked
 27025  010E3A  51A5               	movf	___fladd@aexp& (0+255),w,b
 27026  010E3C  0100               	movlb	0	; () banked
 27027  010E3E  B4D8               	btfsc	status,2,c
 27028  010E40  D012               	goto	l13945
 27029                           
 27030                           ; BSR set to: 0
 27031  010E42  0100               	movlb	0	; () banked
 27032  010E44  29A5               	incf	___fladd@aexp& (0+255),w,b
 27033  010E46  A4D8               	btfss	status,2,c
 27034  010E48  D009               	goto	l13941
 27035                           
 27036                           ; BSR set to: 0
 27037  010E4A  0E00               	movlw	0
 27038  010E4C  0100               	movlb	0	; () banked
 27039  010E4E  6F98               	movwf	___fladd@a& (0+255),b
 27040  010E50  0E00               	movlw	0
 27041  010E52  6F99               	movwf	(___fladd@a+1)& (0+255),b
 27042  010E54  0E00               	movlw	0
 27043  010E56  6F9A               	movwf	(___fladd@a+2)& (0+255),b
 27044  010E58  0E00               	movlw	0
 27045  010E5A  6F9B               	movwf	(___fladd@a+3)& (0+255),b
 27046  010E5C                     l13941:
 27047                           
 27048                           ; BSR set to: 0
 27049  010E5C  0100               	movlb	0	; () banked
 27050  010E5E  8F9A               	bsf	(___fladd@a+2)& (0+255),7,b
 27051                           
 27052                           ; BSR set to: 0
 27053  010E60  0E00               	movlw	0
 27054  010E62  0100               	movlb	0	; () banked
 27055  010E64  D008               	goto	L20
 27056  010E66                     l13945:
 27057                           
 27058                           ; BSR set to: 0
 27059  010E66  0E00               	movlw	0
 27060  010E68  0100               	movlb	0	; () banked
 27061  010E6A  6F98               	movwf	___fladd@a& (0+255),b
 27062  010E6C  0E00               	movlw	0
 27063  010E6E  6F99               	movwf	(___fladd@a+1)& (0+255),b
 27064  010E70  0E00               	movlw	0
 27065  010E72  6F9A               	movwf	(___fladd@a+2)& (0+255),b
 27066  010E74  0E00               	movlw	0
 27067  010E76                     L20:
 27068  010E76  6F9B               	movwf	(___fladd@a+3)& (0+255),b
 27069                           
 27070                           ; BSR set to: 0
 27071                           
 27072                           ; BSR set to: 0
 27073  010E78  0100               	movlb	0	; () banked
 27074  010E7A  51A6               	movf	___fladd@bexp& (0+255),w,b
 27075  010E7C  0100               	movlb	0	; () banked
 27076  010E7E  5DA5               	subwf	___fladd@aexp& (0+255),w,b
 27077  010E80  B0D8               	btfsc	status,0,c
 27078  010E82  D024               	goto	l13983
 27079                           
 27080                           ; BSR set to: 0
 27081  010E84  0100               	movlb	0	; () banked
 27082  010E86  ADA4               	btfss	___fladd@signs& (0+255),6,b
 27083  010E88  D003               	goto	l13953
 27084                           
 27085                           ; BSR set to: 0
 27086  010E8A  0E80               	movlw	128
 27087  010E8C  0100               	movlb	0	; () banked
 27088  010E8E  1BA4               	xorwf	___fladd@signs& (0+255),f,b
 27089  010E90                     l13953:
 27090                           
 27091                           ; BSR set to: 0
 27092  010E90  C0A6  F0A7         	movff	___fladd@bexp,___fladd@grs
 27093                           
 27094                           ; BSR set to: 0
 27095  010E94  C0A5  F0A6         	movff	___fladd@aexp,___fladd@bexp
 27096                           
 27097                           ; BSR set to: 0
 27098  010E98  C0A7  F0A5         	movff	___fladd@grs,___fladd@aexp
 27099                           
 27100                           ; BSR set to: 0
 27101  010E9C  C094  F0A7         	movff	___fladd@b,___fladd@grs
 27102                           
 27103                           ; BSR set to: 0
 27104  010EA0  C098  F094         	movff	___fladd@a,___fladd@b
 27105                           
 27106                           ; BSR set to: 0
 27107  010EA4  C0A7  F098         	movff	___fladd@grs,___fladd@a
 27108                           
 27109                           ; BSR set to: 0
 27110  010EA8  C095  F0A7         	movff	___fladd@b+1,___fladd@grs
 27111                           
 27112                           ; BSR set to: 0
 27113  010EAC  C099  F095         	movff	___fladd@a+1,___fladd@b+1
 27114                           
 27115                           ; BSR set to: 0
 27116  010EB0  C0A7  F099         	movff	___fladd@grs,___fladd@a+1
 27117                           
 27118                           ; BSR set to: 0
 27119  010EB4  C096  F0A7         	movff	___fladd@b+2,___fladd@grs
 27120                           
 27121                           ; BSR set to: 0
 27122  010EB8  C09A  F096         	movff	___fladd@a+2,___fladd@b+2
 27123                           
 27124                           ; BSR set to: 0
 27125  010EBC  C0A7  F09A         	movff	___fladd@grs,___fladd@a+2
 27126                           
 27127                           ; BSR set to: 0
 27128  010EC0  C097  F0A7         	movff	___fladd@b+3,___fladd@grs
 27129                           
 27130                           ; BSR set to: 0
 27131  010EC4  C09B  F097         	movff	___fladd@a+3,___fladd@b+3
 27132                           
 27133                           ; BSR set to: 0
 27134  010EC8  C0A7  F09B         	movff	___fladd@grs,___fladd@a+3
 27135  010ECC                     l13983:
 27136                           
 27137                           ; BSR set to: 0
 27138  010ECC  0E00               	movlw	0
 27139  010ECE  0100               	movlb	0	; () banked
 27140  010ED0  6FA7               	movwf	___fladd@grs& (0+255),b
 27141                           
 27142                           ; BSR set to: 0
 27143  010ED2  0100               	movlb	0	; () banked
 27144  010ED4  51A6               	movf	___fladd@bexp& (0+255),w,b
 27145  010ED6  0100               	movlb	0	; () banked
 27146  010ED8  6F9C               	movwf	??___fladd& (0+255),b
 27147  010EDA  6B9D               	clrf	(??___fladd+1)& (0+255),b
 27148  010EDC  0100               	movlb	0	; () banked
 27149  010EDE  1F9C               	comf	??___fladd& (0+255),f,b
 27150  010EE0  1F9D               	comf	(??___fladd+1)& (0+255),f,b
 27151  010EE2  4B9C               	infsnz	??___fladd& (0+255),f,b
 27152  010EE4  2B9D               	incf	(??___fladd+1)& (0+255),f,b
 27153  010EE6  0100               	movlb	0	; () banked
 27154  010EE8  51A5               	movf	___fladd@aexp& (0+255),w,b
 27155  010EEA  0100               	movlb	0	; () banked
 27156  010EEC  6F9E               	movwf	(??___fladd+2)& (0+255),b
 27157  010EEE  6B9F               	clrf	(??___fladd+3)& (0+255),b
 27158  010EF0  0100               	movlb	0	; () banked
 27159  010EF2  519C               	movf	??___fladd& (0+255),w,b
 27160  010EF4  0100               	movlb	0	; () banked
 27161  010EF6  279E               	addwf	(??___fladd+2)& (0+255),f,b
 27162  010EF8  0100               	movlb	0	; () banked
 27163  010EFA  519D               	movf	(??___fladd+1)& (0+255),w,b
 27164  010EFC  0100               	movlb	0	; () banked
 27165  010EFE  239F               	addwfc	(??___fladd+3)& (0+255),f,b
 27166  010F00  0100               	movlb	0	; () banked
 27167  010F02  BF9F               	btfsc	(??___fladd+3)& (0+255),7,b
 27168  010F04  D03D               	goto	l2714
 27169  010F06  0100               	movlb	0	; () banked
 27170  010F08  519F               	movf	(??___fladd+3)& (0+255),w,b
 27171  010F0A  E105               	bnz	u11240
 27172  010F0C  0E1A               	movlw	26
 27173  010F0E  0100               	movlb	0	; () banked
 27174  010F10  5D9E               	subwf	(??___fladd+2)& (0+255),w,b
 27175  010F12  A0D8               	btfss	status,0,c
 27176  010F14  D035               	goto	l2714
 27177  010F16                     u11240:
 27178                           
 27179                           ; BSR set to: 0
 27180  010F16  0100               	movlb	0	; () banked
 27181  010F18  5194               	movf	___fladd@b& (0+255),w,b
 27182  010F1A  0100               	movlb	0	; () banked
 27183  010F1C  1195               	iorwf	(___fladd@b+1)& (0+255),w,b
 27184  010F1E  0100               	movlb	0	; () banked
 27185  010F20  1196               	iorwf	(___fladd@b+2)& (0+255),w,b
 27186  010F22  0100               	movlb	0	; () banked
 27187  010F24  1197               	iorwf	(___fladd@b+3)& (0+255),w,b
 27188  010F26  B4D8               	btfsc	status,2,c
 27189  010F28  D002               	goto	u11250
 27190  010F2A  0E01               	movlw	1
 27191  010F2C  D001               	goto	u11260
 27192  010F2E                     u11250:
 27193  010F2E  0E00               	movlw	0
 27194  010F30                     u11260:
 27195  010F30  0100               	movlb	0	; () banked
 27196  010F32  6FA7               	movwf	___fladd@grs& (0+255),b
 27197                           
 27198                           ; BSR set to: 0
 27199  010F34  0E00               	movlw	0
 27200  010F36  0100               	movlb	0	; () banked
 27201  010F38  6F94               	movwf	___fladd@b& (0+255),b
 27202  010F3A  0E00               	movlw	0
 27203  010F3C  6F95               	movwf	(___fladd@b+1)& (0+255),b
 27204  010F3E  0E00               	movlw	0
 27205  010F40  6F96               	movwf	(___fladd@b+2)& (0+255),b
 27206  010F42  0E00               	movlw	0
 27207  010F44  6F97               	movwf	(___fladd@b+3)& (0+255),b
 27208                           
 27209                           ; BSR set to: 0
 27210  010F46  C0A5  F0A6         	movff	___fladd@aexp,___fladd@bexp
 27211  010F4A  D020               	goto	l2713
 27212  010F4C                     l2715:
 27213                           
 27214                           ; BSR set to: 0
 27215  010F4C  0100               	movlb	0	; () banked
 27216  010F4E  A1A7               	btfss	___fladd@grs& (0+255),0,b
 27217  010F50  D007               	goto	l13995
 27218                           
 27219                           ; BSR set to: 0
 27220  010F52  0100               	movlb	0	; () banked
 27221  010F54  90D8               	bcf	status,0,c
 27222  010F56  31A7               	rrcf	___fladd@grs& (0+255),w,b
 27223  010F58  0901               	iorlw	1
 27224  010F5A  0100               	movlb	0	; () banked
 27225  010F5C  6FA7               	movwf	___fladd@grs& (0+255),b
 27226  010F5E  D003               	goto	l13997
 27227  010F60                     l13995:
 27228                           
 27229                           ; BSR set to: 0
 27230  010F60  0100               	movlb	0	; () banked
 27231  010F62  90D8               	bcf	status,0,c
 27232  010F64  33A7               	rrcf	___fladd@grs& (0+255),f,b
 27233  010F66                     l13997:
 27234                           
 27235                           ; BSR set to: 0
 27236  010F66  0100               	movlb	0	; () banked
 27237  010F68  A194               	btfss	___fladd@b& (0+255),0,b
 27238  010F6A  D002               	goto	l14001
 27239                           
 27240                           ; BSR set to: 0
 27241  010F6C  0100               	movlb	0	; () banked
 27242  010F6E  8FA7               	bsf	___fladd@grs& (0+255),7,b
 27243  010F70                     l14001:
 27244                           
 27245                           ; BSR set to: 0
 27246  010F70  0100               	movlb	0	; () banked
 27247  010F72  3597               	rlcf	(___fladd@b+3)& (0+255),w,b
 27248  010F74  3397               	rrcf	(___fladd@b+3)& (0+255),f,b
 27249  010F76  3396               	rrcf	(___fladd@b+2)& (0+255),f,b
 27250  010F78  3395               	rrcf	(___fladd@b+1)& (0+255),f,b
 27251  010F7A  3394               	rrcf	___fladd@b& (0+255),f,b
 27252                           
 27253                           ; BSR set to: 0
 27254  010F7C  0100               	movlb	0	; () banked
 27255  010F7E  2BA6               	incf	___fladd@bexp& (0+255),f,b
 27256  010F80                     l2714:
 27257                           
 27258                           ; BSR set to: 0
 27259  010F80  0100               	movlb	0	; () banked
 27260  010F82  51A5               	movf	___fladd@aexp& (0+255),w,b
 27261  010F84  0100               	movlb	0	; () banked
 27262  010F86  5DA6               	subwf	___fladd@bexp& (0+255),w,b
 27263  010F88  A0D8               	btfss	status,0,c
 27264  010F8A  D7E0               	goto	l2715
 27265  010F8C                     l2713:
 27266                           
 27267                           ; BSR set to: 0
 27268  010F8C  0100               	movlb	0	; () banked
 27269  010F8E  BDA4               	btfsc	___fladd@signs& (0+255),6,b
 27270  010F90  D03F               	goto	l14029
 27271                           
 27272                           ; BSR set to: 0
 27273  010F92  0100               	movlb	0	; () banked
 27274  010F94  51A6               	movf	___fladd@bexp& (0+255),w,b
 27275  010F96  0100               	movlb	0	; () banked
 27276  010F98  A4D8               	btfss	status,2,c
 27277  010F9A  D00A               	goto	l14011
 27278                           
 27279                           ; BSR set to: 0
 27280  010F9C  0E00               	movlw	0
 27281  010F9E  0100               	movlb	0	; () banked
 27282  010FA0  6F94               	movwf	?___fladd& (0+255),b
 27283  010FA2  0E00               	movlw	0
 27284  010FA4  6F95               	movwf	(?___fladd+1)& (0+255),b
 27285  010FA6  0E00               	movlw	0
 27286  010FA8  6F96               	movwf	(?___fladd+2)& (0+255),b
 27287  010FAA  0E00               	movlw	0
 27288  010FAC  6F97               	movwf	(?___fladd+3)& (0+255),b
 27289                           
 27290                           ; BSR set to: 0
 27291  010FAE  0012               	return	
 27292  010FB0                     l14011:
 27293                           
 27294                           ; BSR set to: 0
 27295  010FB0  0100               	movlb	0	; () banked
 27296  010FB2  5198               	movf	___fladd@a& (0+255),w,b
 27297  010FB4  0100               	movlb	0	; () banked
 27298  010FB6  2794               	addwf	___fladd@b& (0+255),f,b
 27299  010FB8  0100               	movlb	0	; () banked
 27300  010FBA  5199               	movf	(___fladd@a+1)& (0+255),w,b
 27301  010FBC  0100               	movlb	0	; () banked
 27302  010FBE  2395               	addwfc	(___fladd@b+1)& (0+255),f,b
 27303  010FC0  0100               	movlb	0	; () banked
 27304  010FC2  519A               	movf	(___fladd@a+2)& (0+255),w,b
 27305  010FC4  0100               	movlb	0	; () banked
 27306  010FC6  2396               	addwfc	(___fladd@b+2)& (0+255),f,b
 27307  010FC8  0100               	movlb	0	; () banked
 27308  010FCA  519B               	movf	(___fladd@a+3)& (0+255),w,b
 27309  010FCC  0100               	movlb	0	; () banked
 27310  010FCE  2397               	addwfc	(___fladd@b+3)& (0+255),f,b
 27311                           
 27312                           ; BSR set to: 0
 27313  010FD0  0100               	movlb	0	; () banked
 27314  010FD2  A197               	btfss	(___fladd@b+3)& (0+255),0,b
 27315  010FD4  D0CC               	goto	l14065
 27316                           
 27317                           ; BSR set to: 0
 27318  010FD6  0100               	movlb	0	; () banked
 27319  010FD8  A1A7               	btfss	___fladd@grs& (0+255),0,b
 27320  010FDA  D009               	goto	l14019
 27321                           
 27322                           ; BSR set to: 0
 27323  010FDC  0100               	movlb	0	; () banked
 27324  010FDE  90D8               	bcf	status,0,c
 27325  010FE0  33A7               	rrcf	___fladd@grs& (0+255),f,b
 27326  010FE2  0100               	movlb	0	; () banked
 27327  010FE4  51A7               	movf	___fladd@grs& (0+255),w,b
 27328  010FE6  0901               	iorlw	1
 27329  010FE8  0100               	movlb	0	; () banked
 27330  010FEA  6FA7               	movwf	___fladd@grs& (0+255),b
 27331  010FEC  D003               	goto	l14021
 27332  010FEE                     l14019:
 27333                           
 27334                           ; BSR set to: 0
 27335  010FEE  0100               	movlb	0	; () banked
 27336  010FF0  90D8               	bcf	status,0,c
 27337  010FF2  33A7               	rrcf	___fladd@grs& (0+255),f,b
 27338  010FF4                     l14021:
 27339                           
 27340                           ; BSR set to: 0
 27341  010FF4  0100               	movlb	0	; () banked
 27342  010FF6  A194               	btfss	___fladd@b& (0+255),0,b
 27343  010FF8  D002               	goto	l14025
 27344                           
 27345                           ; BSR set to: 0
 27346  010FFA  0100               	movlb	0	; () banked
 27347  010FFC  8FA7               	bsf	___fladd@grs& (0+255),7,b
 27348  010FFE                     l14025:
 27349                           
 27350                           ; BSR set to: 0
 27351  010FFE  0100               	movlb	0	; () banked
 27352  011000  3597               	rlcf	(___fladd@b+3)& (0+255),w,b
 27353  011002  3397               	rrcf	(___fladd@b+3)& (0+255),f,b
 27354  011004  3396               	rrcf	(___fladd@b+2)& (0+255),f,b
 27355  011006  3395               	rrcf	(___fladd@b+1)& (0+255),f,b
 27356  011008  3394               	rrcf	___fladd@b& (0+255),f,b
 27357                           
 27358                           ; BSR set to: 0
 27359  01100A  0100               	movlb	0	; () banked
 27360  01100C  2BA6               	incf	___fladd@bexp& (0+255),f,b
 27361                           
 27362                           ; BSR set to: 0
 27363  01100E  D0AF               	goto	l14065
 27364  011010                     l14029:
 27365                           
 27366                           ; BSR set to: 0
 27367  011010  0100               	movlb	0	; () banked
 27368  011012  5198               	movf	___fladd@a& (0+255),w,b
 27369  011014  0100               	movlb	0	; () banked
 27370  011016  5D94               	subwf	___fladd@b& (0+255),w,b
 27371  011018  0100               	movlb	0	; () banked
 27372  01101A  5199               	movf	(___fladd@a+1)& (0+255),w,b
 27373  01101C  0100               	movlb	0	; () banked
 27374  01101E  5995               	subwfb	(___fladd@b+1)& (0+255),w,b
 27375  011020  0100               	movlb	0	; () banked
 27376  011022  519A               	movf	(___fladd@a+2)& (0+255),w,b
 27377  011024  0100               	movlb	0	; () banked
 27378  011026  5996               	subwfb	(___fladd@b+2)& (0+255),w,b
 27379  011028  0100               	movlb	0	; () banked
 27380  01102A  5197               	movf	(___fladd@b+3)& (0+255),w,b
 27381  01102C  0A80               	xorlw	128
 27382  01102E  0100               	movlb	0	; () banked
 27383  011030  6F9C               	movwf	??___fladd& (0+255),b
 27384  011032  0100               	movlb	0	; () banked
 27385  011034  519B               	movf	(___fladd@a+3)& (0+255),w,b
 27386  011036  0A80               	xorlw	128
 27387  011038  0100               	movlb	0	; () banked
 27388  01103A  599C               	subwfb	??___fladd& (0+255),w,b
 27389  01103C  B0D8               	btfsc	status,0,c
 27390  01103E  D050               	goto	l14039
 27391                           
 27392                           ; BSR set to: 0
 27393  011040  C094  F09C         	movff	___fladd@b,??___fladd
 27394  011044  C095  F09D         	movff	___fladd@b+1,??___fladd+1
 27395  011048  C096  F09E         	movff	___fladd@b+2,??___fladd+2
 27396  01104C  C097  F09F         	movff	___fladd@b+3,??___fladd+3
 27397  011050  0100               	movlb	0	; () banked
 27398  011052  1F9C               	comf	??___fladd& (0+255),f,b
 27399  011054  1F9D               	comf	(??___fladd+1)& (0+255),f,b
 27400  011056  1F9E               	comf	(??___fladd+2)& (0+255),f,b
 27401  011058  1F9F               	comf	(??___fladd+3)& (0+255),f,b
 27402  01105A  2B9C               	incf	??___fladd& (0+255),f,b
 27403  01105C  0E00               	movlw	0
 27404  01105E  239D               	addwfc	(??___fladd+1)& (0+255),f,b
 27405  011060  239E               	addwfc	(??___fladd+2)& (0+255),f,b
 27406  011062  239F               	addwfc	(??___fladd+3)& (0+255),f,b
 27407  011064  0100               	movlb	0	; () banked
 27408  011066  5198               	movf	___fladd@a& (0+255),w,b
 27409  011068  0100               	movlb	0	; () banked
 27410  01106A  259C               	addwf	??___fladd& (0+255),w,b
 27411  01106C  0100               	movlb	0	; () banked
 27412  01106E  6FA0               	movwf	(??___fladd+4)& (0+255),b
 27413  011070  0100               	movlb	0	; () banked
 27414  011072  5199               	movf	(___fladd@a+1)& (0+255),w,b
 27415  011074  0100               	movlb	0	; () banked
 27416  011076  219D               	addwfc	(??___fladd+1)& (0+255),w,b
 27417  011078  0100               	movlb	0	; () banked
 27418  01107A  6FA1               	movwf	(??___fladd+5)& (0+255),b
 27419  01107C  0100               	movlb	0	; () banked
 27420  01107E  519A               	movf	(___fladd@a+2)& (0+255),w,b
 27421  011080  0100               	movlb	0	; () banked
 27422  011082  219E               	addwfc	(??___fladd+2)& (0+255),w,b
 27423  011084  0100               	movlb	0	; () banked
 27424  011086  6FA2               	movwf	(??___fladd+6)& (0+255),b
 27425  011088  0100               	movlb	0	; () banked
 27426  01108A  519B               	movf	(___fladd@a+3)& (0+255),w,b
 27427  01108C  0100               	movlb	0	; () banked
 27428  01108E  219F               	addwfc	(??___fladd+3)& (0+255),w,b
 27429  011090  0100               	movlb	0	; () banked
 27430  011092  6FA3               	movwf	(??___fladd+7)& (0+255),b
 27431  011094  0EFF               	movlw	255
 27432  011096  0100               	movlb	0	; () banked
 27433  011098  25A0               	addwf	(??___fladd+4)& (0+255),w,b
 27434  01109A  0100               	movlb	0	; () banked
 27435  01109C  6F94               	movwf	___fladd@b& (0+255),b
 27436  01109E  0EFF               	movlw	255
 27437  0110A0  0100               	movlb	0	; () banked
 27438  0110A2  21A1               	addwfc	(??___fladd+5)& (0+255),w,b
 27439  0110A4  0100               	movlb	0	; () banked
 27440  0110A6  6F95               	movwf	(___fladd@b+1)& (0+255),b
 27441  0110A8  0EFF               	movlw	255
 27442  0110AA  0100               	movlb	0	; () banked
 27443  0110AC  21A2               	addwfc	(??___fladd+6)& (0+255),w,b
 27444  0110AE  0100               	movlb	0	; () banked
 27445  0110B0  6F96               	movwf	(___fladd@b+2)& (0+255),b
 27446  0110B2  0EFF               	movlw	255
 27447  0110B4  0100               	movlb	0	; () banked
 27448  0110B6  21A3               	addwfc	(??___fladd+7)& (0+255),w,b
 27449  0110B8  0100               	movlb	0	; () banked
 27450  0110BA  6F97               	movwf	(___fladd@b+3)& (0+255),b
 27451  0110BC  0E80               	movlw	128
 27452  0110BE  0100               	movlb	0	; () banked
 27453  0110C0  1BA4               	xorwf	___fladd@signs& (0+255),f,b
 27454                           
 27455                           ; BSR set to: 0
 27456  0110C2  0100               	movlb	0	; () banked
 27457  0110C4  6DA7               	negf	___fladd@grs& (0+255),b
 27458                           
 27459                           ; BSR set to: 0
 27460  0110C6  0100               	movlb	0	; () banked
 27461  0110C8  51A7               	movf	___fladd@grs& (0+255),w,b
 27462  0110CA  0100               	movlb	0	; () banked
 27463  0110CC  A4D8               	btfss	status,2,c
 27464  0110CE  D018               	goto	l2730
 27465                           
 27466                           ; BSR set to: 0
 27467  0110D0  0E01               	movlw	1
 27468  0110D2  0100               	movlb	0	; () banked
 27469  0110D4  2794               	addwf	___fladd@b& (0+255),f,b
 27470  0110D6  0E00               	movlw	0
 27471  0110D8  2395               	addwfc	(___fladd@b+1)& (0+255),f,b
 27472  0110DA  2396               	addwfc	(___fladd@b+2)& (0+255),f,b
 27473  0110DC  2397               	addwfc	(___fladd@b+3)& (0+255),f,b
 27474                           
 27475                           ; BSR set to: 0
 27476  0110DE  D010               	goto	l2730
 27477  0110E0                     l14039:
 27478                           
 27479                           ; BSR set to: 0
 27480  0110E0  0100               	movlb	0	; () banked
 27481  0110E2  5198               	movf	___fladd@a& (0+255),w,b
 27482  0110E4  0100               	movlb	0	; () banked
 27483  0110E6  5F94               	subwf	___fladd@b& (0+255),f,b
 27484  0110E8  0100               	movlb	0	; () banked
 27485  0110EA  5199               	movf	(___fladd@a+1)& (0+255),w,b
 27486  0110EC  0100               	movlb	0	; () banked
 27487  0110EE  5B95               	subwfb	(___fladd@b+1)& (0+255),f,b
 27488  0110F0  0100               	movlb	0	; () banked
 27489  0110F2  519A               	movf	(___fladd@a+2)& (0+255),w,b
 27490  0110F4  0100               	movlb	0	; () banked
 27491  0110F6  5B96               	subwfb	(___fladd@b+2)& (0+255),f,b
 27492  0110F8  0100               	movlb	0	; () banked
 27493  0110FA  519B               	movf	(___fladd@a+3)& (0+255),w,b
 27494  0110FC  0100               	movlb	0	; () banked
 27495  0110FE  5B97               	subwfb	(___fladd@b+3)& (0+255),f,b
 27496  011100                     l2730:
 27497                           
 27498                           ; BSR set to: 0
 27499  011100  0100               	movlb	0	; () banked
 27500  011102  5194               	movf	___fladd@b& (0+255),w,b
 27501  011104  0100               	movlb	0	; () banked
 27502  011106  1195               	iorwf	(___fladd@b+1)& (0+255),w,b
 27503  011108  0100               	movlb	0	; () banked
 27504  01110A  1196               	iorwf	(___fladd@b+2)& (0+255),w,b
 27505  01110C  0100               	movlb	0	; () banked
 27506  01110E  1197               	iorwf	(___fladd@b+3)& (0+255),w,b
 27507  011110  A4D8               	btfss	status,2,c
 27508  011112  D02A               	goto	l14063
 27509                           
 27510                           ; BSR set to: 0
 27511  011114  0100               	movlb	0	; () banked
 27512  011116  51A7               	movf	___fladd@grs& (0+255),w,b
 27513  011118  0100               	movlb	0	; () banked
 27514  01111A  A4D8               	btfss	status,2,c
 27515  01111C  D025               	goto	l14063
 27516                           
 27517                           ; BSR set to: 0
 27518  01111E  0E00               	movlw	0
 27519  011120  0100               	movlb	0	; () banked
 27520  011122  6F94               	movwf	?___fladd& (0+255),b
 27521  011124  0E00               	movlw	0
 27522  011126  6F95               	movwf	(?___fladd+1)& (0+255),b
 27523  011128  0E00               	movlw	0
 27524  01112A  6F96               	movwf	(?___fladd+2)& (0+255),b
 27525  01112C  0E00               	movlw	0
 27526  01112E  6F97               	movwf	(?___fladd+3)& (0+255),b
 27527                           
 27528                           ; BSR set to: 0
 27529  011130  0012               	return	
 27530  011132                     l14047:
 27531                           
 27532                           ; BSR set to: 0
 27533  011132  0100               	movlb	0	; () banked
 27534  011134  90D8               	bcf	status,0,c
 27535  011136  3794               	rlcf	___fladd@b& (0+255),f,b
 27536  011138  3795               	rlcf	(___fladd@b+1)& (0+255),f,b
 27537  01113A  3796               	rlcf	(___fladd@b+2)& (0+255),f,b
 27538  01113C  3797               	rlcf	(___fladd@b+3)& (0+255),f,b
 27539                           
 27540                           ; BSR set to: 0
 27541  01113E  0100               	movlb	0	; () banked
 27542  011140  AFA7               	btfss	___fladd@grs& (0+255),7,b
 27543  011142  D002               	goto	l14053
 27544                           
 27545                           ; BSR set to: 0
 27546  011144  0100               	movlb	0	; () banked
 27547  011146  8194               	bsf	___fladd@b& (0+255),0,b
 27548  011148                     l14053:
 27549                           
 27550                           ; BSR set to: 0
 27551  011148  0100               	movlb	0	; () banked
 27552  01114A  A1A7               	btfss	___fladd@grs& (0+255),0,b
 27553  01114C  D003               	goto	l14057
 27554                           
 27555                           ; BSR set to: 0
 27556  01114E  80D8               	bsf	status,0,c
 27557  011150  0100               	movlb	0	; () banked
 27558  011152  D002               	goto	L21
 27559  011154                     l14057:
 27560                           
 27561                           ; BSR set to: 0
 27562  011154  0100               	movlb	0	; () banked
 27563  011156  90D8               	bcf	status,0,c
 27564  011158                     L21:
 27565  011158  37A7               	rlcf	___fladd@grs& (0+255),f,b
 27566                           
 27567                           ; BSR set to: 0
 27568                           
 27569                           ; BSR set to: 0
 27570  01115A  0100               	movlb	0	; () banked
 27571  01115C  51A6               	movf	___fladd@bexp& (0+255),w,b
 27572  01115E  0100               	movlb	0	; () banked
 27573  011160  B4D8               	btfsc	status,2,c
 27574  011162  D002               	goto	l14063
 27575                           
 27576                           ; BSR set to: 0
 27577  011164  0100               	movlb	0	; () banked
 27578  011166  07A6               	decf	___fladd@bexp& (0+255),f,b
 27579  011168                     l14063:
 27580                           
 27581                           ; BSR set to: 0
 27582  011168  0100               	movlb	0	; () banked
 27583  01116A  AF96               	btfss	(___fladd@b+2)& (0+255),7,b
 27584  01116C  D7E2               	goto	l14047
 27585  01116E                     l14065:
 27586                           
 27587                           ; BSR set to: 0
 27588  01116E  0E00               	movlw	0
 27589  011170  0100               	movlb	0	; () banked
 27590  011172  6FA5               	movwf	___fladd@aexp& (0+255),b
 27591                           
 27592                           ; BSR set to: 0
 27593  011174  0100               	movlb	0	; () banked
 27594  011176  AFA7               	btfss	___fladd@grs& (0+255),7,b
 27595  011178  D00D               	goto	l2739
 27596                           
 27597                           ; BSR set to: 0
 27598  01117A  C0A7  F09C         	movff	___fladd@grs,??___fladd
 27599  01117E  0E7F               	movlw	127
 27600  011180  0100               	movlb	0	; () banked
 27601  011182  179C               	andwf	??___fladd& (0+255),f,b
 27602  011184  A4D8               	btfss	status,2,c
 27603  011186  D003               	goto	l14073
 27604                           
 27605                           ; BSR set to: 0
 27606                           
 27607                           ; BSR set to: 0
 27608  011188  0100               	movlb	0	; () banked
 27609  01118A  A194               	btfss	___fladd@b& (0+255),0,b
 27610  01118C  D003               	goto	l2739
 27611  01118E                     l14073:
 27612                           
 27613                           ; BSR set to: 0
 27614  01118E  0E01               	movlw	1
 27615  011190  0100               	movlb	0	; () banked
 27616  011192  6FA5               	movwf	___fladd@aexp& (0+255),b
 27617  011194                     l2739:
 27618                           
 27619                           ; BSR set to: 0
 27620  011194  0100               	movlb	0	; () banked
 27621  011196  51A5               	movf	___fladd@aexp& (0+255),w,b
 27622  011198  0100               	movlb	0	; () banked
 27623  01119A  B4D8               	btfsc	status,2,c
 27624  01119C  D026               	goto	l14083
 27625                           
 27626                           ; BSR set to: 0
 27627  01119E  0E01               	movlw	1
 27628  0111A0  0100               	movlb	0	; () banked
 27629  0111A2  2794               	addwf	___fladd@b& (0+255),f,b
 27630  0111A4  0E00               	movlw	0
 27631  0111A6  2395               	addwfc	(___fladd@b+1)& (0+255),f,b
 27632  0111A8  2396               	addwfc	(___fladd@b+2)& (0+255),f,b
 27633  0111AA  2397               	addwfc	(___fladd@b+3)& (0+255),f,b
 27634                           
 27635                           ; BSR set to: 0
 27636  0111AC  0100               	movlb	0	; () banked
 27637  0111AE  A197               	btfss	(___fladd@b+3)& (0+255),0,b
 27638  0111B0  D01C               	goto	l14083
 27639                           
 27640                           ; BSR set to: 0
 27641  0111B2  C094  F09C         	movff	___fladd@b,??___fladd
 27642  0111B6  C095  F09D         	movff	___fladd@b+1,??___fladd+1
 27643  0111BA  C096  F09E         	movff	___fladd@b+2,??___fladd+2
 27644  0111BE  C097  F09F         	movff	___fladd@b+3,??___fladd+3
 27645  0111C2  0100               	movlb	0	; () banked
 27646  0111C4  359F               	rlcf	(??___fladd+3)& (0+255),w,b
 27647  0111C6  339F               	rrcf	(??___fladd+3)& (0+255),f,b
 27648  0111C8  339E               	rrcf	(??___fladd+2)& (0+255),f,b
 27649  0111CA  339D               	rrcf	(??___fladd+1)& (0+255),f,b
 27650  0111CC  339C               	rrcf	??___fladd& (0+255),f,b
 27651  0111CE  C09C  F094         	movff	??___fladd,___fladd@b
 27652  0111D2  C09D  F095         	movff	??___fladd+1,___fladd@b+1
 27653  0111D6  C09E  F096         	movff	??___fladd+2,___fladd@b+2
 27654  0111DA  C09F  F097         	movff	??___fladd+3,___fladd@b+3
 27655  0111DE  0100               	movlb	0	; () banked
 27656  0111E0  29A6               	incf	___fladd@bexp& (0+255),w,b
 27657  0111E2  B4D8               	btfsc	status,2,c
 27658  0111E4  D002               	goto	l14083
 27659                           
 27660                           ; BSR set to: 0
 27661  0111E6  0100               	movlb	0	; () banked
 27662  0111E8  2BA6               	incf	___fladd@bexp& (0+255),f,b
 27663  0111EA                     l14083:
 27664                           
 27665                           ; BSR set to: 0
 27666  0111EA  0100               	movlb	0	; () banked
 27667  0111EC  29A6               	incf	___fladd@bexp& (0+255),w,b
 27668  0111EE  B4D8               	btfsc	status,2,c
 27669  0111F0  D005               	goto	l14087
 27670                           
 27671                           ; BSR set to: 0
 27672  0111F2  0100               	movlb	0	; () banked
 27673  0111F4  51A6               	movf	___fladd@bexp& (0+255),w,b
 27674  0111F6  0100               	movlb	0	; () banked
 27675  0111F8  A4D8               	btfss	status,2,c
 27676  0111FA  D011               	goto	l14091
 27677  0111FC                     l14087:
 27678                           
 27679                           ; BSR set to: 0
 27680  0111FC  0E00               	movlw	0
 27681  0111FE  0100               	movlb	0	; () banked
 27682  011200  6F94               	movwf	___fladd@b& (0+255),b
 27683  011202  0E00               	movlw	0
 27684  011204  6F95               	movwf	(___fladd@b+1)& (0+255),b
 27685  011206  0E00               	movlw	0
 27686  011208  6F96               	movwf	(___fladd@b+2)& (0+255),b
 27687  01120A  0E00               	movlw	0
 27688  01120C  6F97               	movwf	(___fladd@b+3)& (0+255),b
 27689  01120E  0100               	movlb	0	; () banked
 27690  011210  51A6               	movf	___fladd@bexp& (0+255),w,b
 27691  011212  0100               	movlb	0	; () banked
 27692  011214  A4D8               	btfss	status,2,c
 27693  011216  D003               	goto	l14091
 27694                           
 27695                           ; BSR set to: 0
 27696  011218  0E00               	movlw	0
 27697  01121A  0100               	movlb	0	; () banked
 27698  01121C  6FA4               	movwf	___fladd@signs& (0+255),b
 27699  01121E                     l14091:
 27700                           
 27701                           ; BSR set to: 0
 27702  01121E  0100               	movlb	0	; () banked
 27703  011220  A1A6               	btfss	___fladd@bexp& (0+255),0,b
 27704  011222  D003               	goto	l14095
 27705                           
 27706                           ; BSR set to: 0
 27707  011224  0100               	movlb	0	; () banked
 27708  011226  8F96               	bsf	(___fladd@b+2)& (0+255),7,b
 27709  011228  D002               	goto	l14097
 27710  01122A                     l14095:
 27711                           
 27712                           ; BSR set to: 0
 27713  01122A  0100               	movlb	0	; () banked
 27714  01122C  9F96               	bcf	(___fladd@b+2)& (0+255),7,b
 27715  01122E                     l14097:
 27716                           
 27717                           ; BSR set to: 0
 27718  01122E  0100               	movlb	0	; () banked
 27719  011230  90D8               	bcf	status,0,c
 27720  011232  31A6               	rrcf	___fladd@bexp& (0+255),w,b
 27721  011234  0100               	movlb	0	; () banked
 27722  011236  6F97               	movwf	(___fladd@b+3)& (0+255),b
 27723                           
 27724                           ; BSR set to: 0
 27725  011238  0100               	movlb	0	; () banked
 27726  01123A  AFA4               	btfss	___fladd@signs& (0+255),7,b
 27727  01123C  D002               	goto	l14103
 27728                           
 27729                           ; BSR set to: 0
 27730  01123E  0100               	movlb	0	; () banked
 27731  011240  8F97               	bsf	(___fladd@b+3)& (0+255),7,b
 27732  011242                     l14103:
 27733                           
 27734                           ; BSR set to: 0
 27735  011242  C094  F094         	movff	___fladd@b,?___fladd
 27736  011246  C095  F095         	movff	___fladd@b+1,?___fladd+1
 27737  01124A  C096  F096         	movff	___fladd@b+2,?___fladd+2
 27738  01124E  C097  F097         	movff	___fladd@b+3,?___fladd+3
 27739  011252  0012               	return	
 27740  011254                     __end_of___fladd:
 27741                           	opt stack 0
 27742                           tosu	equ	0xFFF
 27743                           tosh	equ	0xFFE
 27744                           tosl	equ	0xFFD
 27745                           pclath	equ	0xFFA
 27746                           tblptru	equ	0xFF8
 27747                           tblptrh	equ	0xFF7
 27748                           tblptrl	equ	0xFF6
 27749                           tablat	equ	0xFF5
 27750                           prodh	equ	0xFF4
 27751                           prodl	equ	0xFF3
 27752                           intcon	equ	0xFF2
 27753                           indf0	equ	0xFEF
 27754                           postinc0	equ	0xFEE
 27755                           fsr0h	equ	0xFEA
 27756                           fsr0l	equ	0xFE9
 27757                           wreg	equ	0xFE8
 27758                           indf1	equ	0xFE7
 27759                           postdec1	equ	0xFE5
 27760                           fsr1h	equ	0xFE2
 27761                           fsr1l	equ	0xFE1
 27762                           indf2	equ	0xFDF
 27763                           postinc2	equ	0xFDE
 27764                           postdec2	equ	0xFDD
 27765                           plusw2	equ	0xFDB
 27766                           fsr2h	equ	0xFDA
 27767                           fsr2l	equ	0xFD9
 27768                           status	equ	0xFD8
 27769                           
 27770 ;; *************** function ___flneg *****************
 27771 ;; Defined at:
 27772 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\flneg.c"
 27773 ;; Parameters:    Size  Location     Type
 27774 ;;  f1              4    0[BANK0 ] unsigned char 
 27775 ;; Auto vars:     Size  Location     Type
 27776 ;;		None
 27777 ;; Return value:  Size  Location     Type
 27778 ;;                  4    0[BANK0 ] unsigned char 
 27779 ;; Registers used:
 27780 ;;		wreg, status,2, status,0
 27781 ;; Tracked objects:
 27782 ;;		On entry : 0/0
 27783 ;;		On exit  : 0/0
 27784 ;;		Unchanged: 0/0
 27785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27786 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27789 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27790 ;;Total ram usage:        4 bytes
 27791 ;; Hardware stack levels used:    1
 27792 ;; Hardware stack levels required when called:    7
 27793 ;; This function calls:
 27794 ;;		Nothing
 27795 ;; This function is called by:
 27796 ;;		_printf
 27797 ;;		_pow
 27798 ;;		_exp
 27799 ;; This function uses a non-reentrant model
 27800 ;;
 27801                           
 27802                           	psect	text136
 27803  0179BE                     __ptext136:
 27804                           	opt stack 0
 27805  0179BE                     ___flneg:
 27806                           	opt stack 22
 27807                           
 27808                           ; BSR set to: 0
 27809                           ;incstack = 0
 27810  0179BE  0100               	movlb	0	; () banked
 27811  0179C0  5160               	movf	___flneg@f1& (0+255),w,b
 27812  0179C2  0100               	movlb	0	; () banked
 27813  0179C4  1161               	iorwf	(___flneg@f1+1)& (0+255),w,b
 27814  0179C6  0100               	movlb	0	; () banked
 27815  0179C8  1162               	iorwf	(___flneg@f1+2)& (0+255),w,b
 27816  0179CA  0100               	movlb	0	; () banked
 27817  0179CC  1163               	iorwf	(___flneg@f1+3)& (0+255),w,b
 27818  0179CE  B4D8               	btfsc	status,2,c
 27819  0179D0  D009               	goto	l15043
 27820                           
 27821                           ; BSR set to: 0
 27822  0179D2  0E00               	movlw	0
 27823  0179D4  0100               	movlb	0	; () banked
 27824  0179D6  1B60               	xorwf	___flneg@f1& (0+255),f,b
 27825  0179D8  0E00               	movlw	0
 27826  0179DA  1B61               	xorwf	(___flneg@f1+1)& (0+255),f,b
 27827  0179DC  0E00               	movlw	0
 27828  0179DE  1B62               	xorwf	(___flneg@f1+2)& (0+255),f,b
 27829  0179E0  0E80               	movlw	128
 27830  0179E2  1B63               	xorwf	(___flneg@f1+3)& (0+255),f,b
 27831  0179E4                     l15043:
 27832                           
 27833                           ; BSR set to: 0
 27834  0179E4  C060  F060         	movff	___flneg@f1,?___flneg
 27835  0179E8  C061  F061         	movff	___flneg@f1+1,?___flneg+1
 27836  0179EC  C062  F062         	movff	___flneg@f1+2,?___flneg+2
 27837  0179F0  C063  F063         	movff	___flneg@f1+3,?___flneg+3
 27838  0179F4  0012               	return	
 27839  0179F6                     __end_of___flneg:
 27840                           	opt stack 0
 27841                           tosu	equ	0xFFF
 27842                           tosh	equ	0xFFE
 27843                           tosl	equ	0xFFD
 27844                           pclath	equ	0xFFA
 27845                           tblptru	equ	0xFF8
 27846                           tblptrh	equ	0xFF7
 27847                           tblptrl	equ	0xFF6
 27848                           tablat	equ	0xFF5
 27849                           prodh	equ	0xFF4
 27850                           prodl	equ	0xFF3
 27851                           intcon	equ	0xFF2
 27852                           indf0	equ	0xFEF
 27853                           postinc0	equ	0xFEE
 27854                           fsr0h	equ	0xFEA
 27855                           fsr0l	equ	0xFE9
 27856                           wreg	equ	0xFE8
 27857                           indf1	equ	0xFE7
 27858                           postdec1	equ	0xFE5
 27859                           fsr1h	equ	0xFE2
 27860                           fsr1l	equ	0xFE1
 27861                           indf2	equ	0xFDF
 27862                           postinc2	equ	0xFDE
 27863                           postdec2	equ	0xFDD
 27864                           plusw2	equ	0xFDB
 27865                           fsr2h	equ	0xFDA
 27866                           fsr2l	equ	0xFD9
 27867                           status	equ	0xFD8
 27868                           
 27869 ;; *************** function ___flge *****************
 27870 ;; Defined at:
 27871 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\flge.c"
 27872 ;; Parameters:    Size  Location     Type
 27873 ;;  ff1             4    0[BANK0 ] unsigned char 
 27874 ;;  ff2             4    4[BANK0 ] unsigned char 
 27875 ;; Auto vars:     Size  Location     Type
 27876 ;;		None
 27877 ;; Return value:  Size  Location     Type
 27878 ;;		None               void
 27879 ;; Registers used:
 27880 ;;		wreg, status,2, status,0
 27881 ;; Tracked objects:
 27882 ;;		On entry : 0/0
 27883 ;;		On exit  : 0/0
 27884 ;;		Unchanged: 0/0
 27885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27886 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27888 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27889 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27890 ;;Total ram usage:       12 bytes
 27891 ;; Hardware stack levels used:    1
 27892 ;; Hardware stack levels required when called:    7
 27893 ;; This function calls:
 27894 ;;		Nothing
 27895 ;; This function is called by:
 27896 ;;		_printf
 27897 ;;		_pow
 27898 ;;		_exp
 27899 ;;		_floor
 27900 ;; This function uses a non-reentrant model
 27901 ;;
 27902                           
 27903                           	psect	text137
 27904  013E16                     __ptext137:
 27905                           	opt stack 0
 27906  013E16                     ___flge:
 27907                           	opt stack 22
 27908                           
 27909                           ; BSR set to: 0
 27910                           ;incstack = 0
 27911  013E16  0E00               	movlw	0
 27912  013E18  0100               	movlb	0	; () banked
 27913  013E1A  1560               	andwf	___flge@ff1& (0+255),w,b
 27914  013E1C  0100               	movlb	0	; () banked
 27915  013E1E  6F68               	movwf	??___flge& (0+255),b
 27916  013E20  0E00               	movlw	0
 27917  013E22  0100               	movlb	0	; () banked
 27918  013E24  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 27919  013E26  0100               	movlb	0	; () banked
 27920  013E28  6F69               	movwf	(??___flge+1)& (0+255),b
 27921  013E2A  0E80               	movlw	128
 27922  013E2C  0100               	movlb	0	; () banked
 27923  013E2E  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 27924  013E30  0100               	movlb	0	; () banked
 27925  013E32  6F6A               	movwf	(??___flge+2)& (0+255),b
 27926  013E34  0E7F               	movlw	127
 27927  013E36  0100               	movlb	0	; () banked
 27928  013E38  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 27929  013E3A  0100               	movlb	0	; () banked
 27930  013E3C  6F6B               	movwf	(??___flge+3)& (0+255),b
 27931  013E3E  0100               	movlb	0	; () banked
 27932  013E40  5168               	movf	??___flge& (0+255),w,b
 27933  013E42  0100               	movlb	0	; () banked
 27934  013E44  1169               	iorwf	(??___flge+1)& (0+255),w,b
 27935  013E46  0100               	movlb	0	; () banked
 27936  013E48  116A               	iorwf	(??___flge+2)& (0+255),w,b
 27937  013E4A  0100               	movlb	0	; () banked
 27938  013E4C  116B               	iorwf	(??___flge+3)& (0+255),w,b
 27939  013E4E  A4D8               	btfss	status,2,c
 27940  013E50  D009               	goto	l14277
 27941                           
 27942                           ; BSR set to: 0
 27943  013E52  0E00               	movlw	0
 27944  013E54  0100               	movlb	0	; () banked
 27945  013E56  6F60               	movwf	___flge@ff1& (0+255),b
 27946  013E58  0E00               	movlw	0
 27947  013E5A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 27948  013E5C  0E00               	movlw	0
 27949  013E5E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 27950  013E60  0E00               	movlw	0
 27951  013E62  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 27952  013E64                     l14277:
 27953                           
 27954                           ; BSR set to: 0
 27955  013E64  0E00               	movlw	0
 27956  013E66  0100               	movlb	0	; () banked
 27957  013E68  1564               	andwf	___flge@ff2& (0+255),w,b
 27958  013E6A  0100               	movlb	0	; () banked
 27959  013E6C  6F68               	movwf	??___flge& (0+255),b
 27960  013E6E  0E00               	movlw	0
 27961  013E70  0100               	movlb	0	; () banked
 27962  013E72  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 27963  013E74  0100               	movlb	0	; () banked
 27964  013E76  6F69               	movwf	(??___flge+1)& (0+255),b
 27965  013E78  0E80               	movlw	128
 27966  013E7A  0100               	movlb	0	; () banked
 27967  013E7C  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 27968  013E7E  0100               	movlb	0	; () banked
 27969  013E80  6F6A               	movwf	(??___flge+2)& (0+255),b
 27970  013E82  0E7F               	movlw	127
 27971  013E84  0100               	movlb	0	; () banked
 27972  013E86  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 27973  013E88  0100               	movlb	0	; () banked
 27974  013E8A  6F6B               	movwf	(??___flge+3)& (0+255),b
 27975  013E8C  0100               	movlb	0	; () banked
 27976  013E8E  5168               	movf	??___flge& (0+255),w,b
 27977  013E90  0100               	movlb	0	; () banked
 27978  013E92  1169               	iorwf	(??___flge+1)& (0+255),w,b
 27979  013E94  0100               	movlb	0	; () banked
 27980  013E96  116A               	iorwf	(??___flge+2)& (0+255),w,b
 27981  013E98  0100               	movlb	0	; () banked
 27982  013E9A  116B               	iorwf	(??___flge+3)& (0+255),w,b
 27983  013E9C  A4D8               	btfss	status,2,c
 27984  013E9E  D009               	goto	l14281
 27985                           
 27986                           ; BSR set to: 0
 27987  013EA0  0E00               	movlw	0
 27988  013EA2  0100               	movlb	0	; () banked
 27989  013EA4  6F64               	movwf	___flge@ff2& (0+255),b
 27990  013EA6  0E00               	movlw	0
 27991  013EA8  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 27992  013EAA  0E00               	movlw	0
 27993  013EAC  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 27994  013EAE  0E00               	movlw	0
 27995  013EB0  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 27996  013EB2                     l14281:
 27997                           
 27998                           ; BSR set to: 0
 27999  013EB2  0100               	movlb	0	; () banked
 28000  013EB4  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 28001  013EB6  D026               	goto	l14285
 28002                           
 28003                           ; BSR set to: 0
 28004  013EB8  C060  F068         	movff	___flge@ff1,??___flge
 28005  013EBC  C061  F069         	movff	___flge@ff1+1,??___flge+1
 28006  013EC0  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 28007  013EC4  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 28008  013EC8  0100               	movlb	0	; () banked
 28009  013ECA  1F68               	comf	??___flge& (0+255),f,b
 28010  013ECC  1F69               	comf	(??___flge+1)& (0+255),f,b
 28011  013ECE  1F6A               	comf	(??___flge+2)& (0+255),f,b
 28012  013ED0  1F6B               	comf	(??___flge+3)& (0+255),f,b
 28013  013ED2  2B68               	incf	??___flge& (0+255),f,b
 28014  013ED4  0E00               	movlw	0
 28015  013ED6  2369               	addwfc	(??___flge+1)& (0+255),f,b
 28016  013ED8  236A               	addwfc	(??___flge+2)& (0+255),f,b
 28017  013EDA  236B               	addwfc	(??___flge+3)& (0+255),f,b
 28018  013EDC  0E00               	movlw	0
 28019  013EDE  0100               	movlb	0	; () banked
 28020  013EE0  2568               	addwf	??___flge& (0+255),w,b
 28021  013EE2  0100               	movlb	0	; () banked
 28022  013EE4  6F60               	movwf	___flge@ff1& (0+255),b
 28023  013EE6  0E00               	movlw	0
 28024  013EE8  0100               	movlb	0	; () banked
 28025  013EEA  2169               	addwfc	(??___flge+1)& (0+255),w,b
 28026  013EEC  0100               	movlb	0	; () banked
 28027  013EEE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 28028  013EF0  0E00               	movlw	0
 28029  013EF2  0100               	movlb	0	; () banked
 28030  013EF4  216A               	addwfc	(??___flge+2)& (0+255),w,b
 28031  013EF6  0100               	movlb	0	; () banked
 28032  013EF8  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 28033  013EFA  0E80               	movlw	128
 28034  013EFC  0100               	movlb	0	; () banked
 28035  013EFE  216B               	addwfc	(??___flge+3)& (0+255),w,b
 28036  013F00  0100               	movlb	0	; () banked
 28037  013F02  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 28038  013F04                     l14285:
 28039                           
 28040                           ; BSR set to: 0
 28041  013F04  0100               	movlb	0	; () banked
 28042  013F06  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 28043  013F08  D026               	goto	l2440
 28044                           
 28045                           ; BSR set to: 0
 28046  013F0A  C064  F068         	movff	___flge@ff2,??___flge
 28047  013F0E  C065  F069         	movff	___flge@ff2+1,??___flge+1
 28048  013F12  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 28049  013F16  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 28050  013F1A  0100               	movlb	0	; () banked
 28051  013F1C  1F68               	comf	??___flge& (0+255),f,b
 28052  013F1E  1F69               	comf	(??___flge+1)& (0+255),f,b
 28053  013F20  1F6A               	comf	(??___flge+2)& (0+255),f,b
 28054  013F22  1F6B               	comf	(??___flge+3)& (0+255),f,b
 28055  013F24  2B68               	incf	??___flge& (0+255),f,b
 28056  013F26  0E00               	movlw	0
 28057  013F28  2369               	addwfc	(??___flge+1)& (0+255),f,b
 28058  013F2A  236A               	addwfc	(??___flge+2)& (0+255),f,b
 28059  013F2C  236B               	addwfc	(??___flge+3)& (0+255),f,b
 28060  013F2E  0E00               	movlw	0
 28061  013F30  0100               	movlb	0	; () banked
 28062  013F32  2568               	addwf	??___flge& (0+255),w,b
 28063  013F34  0100               	movlb	0	; () banked
 28064  013F36  6F64               	movwf	___flge@ff2& (0+255),b
 28065  013F38  0E00               	movlw	0
 28066  013F3A  0100               	movlb	0	; () banked
 28067  013F3C  2169               	addwfc	(??___flge+1)& (0+255),w,b
 28068  013F3E  0100               	movlb	0	; () banked
 28069  013F40  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 28070  013F42  0E00               	movlw	0
 28071  013F44  0100               	movlb	0	; () banked
 28072  013F46  216A               	addwfc	(??___flge+2)& (0+255),w,b
 28073  013F48  0100               	movlb	0	; () banked
 28074  013F4A  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 28075  013F4C  0E80               	movlw	128
 28076  013F4E  0100               	movlb	0	; () banked
 28077  013F50  216B               	addwfc	(??___flge+3)& (0+255),w,b
 28078  013F52  0100               	movlb	0	; () banked
 28079  013F54  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 28080  013F56                     l2440:
 28081                           
 28082                           ; BSR set to: 0
 28083  013F56  0E00               	movlw	0
 28084  013F58  0100               	movlb	0	; () banked
 28085  013F5A  1B60               	xorwf	___flge@ff1& (0+255),f,b
 28086  013F5C  0E00               	movlw	0
 28087  013F5E  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 28088  013F60  0E00               	movlw	0
 28089  013F62  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 28090  013F64  0E80               	movlw	128
 28091  013F66  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 28092  013F68  0E00               	movlw	0
 28093  013F6A  0100               	movlb	0	; () banked
 28094  013F6C  1B64               	xorwf	___flge@ff2& (0+255),f,b
 28095  013F6E  0E00               	movlw	0
 28096  013F70  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 28097  013F72  0E00               	movlw	0
 28098  013F74  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 28099  013F76  0E80               	movlw	128
 28100  013F78  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 28101  013F7A  0100               	movlb	0	; () banked
 28102  013F7C  5164               	movf	___flge@ff2& (0+255),w,b
 28103  013F7E  0100               	movlb	0	; () banked
 28104  013F80  5D60               	subwf	___flge@ff1& (0+255),w,b
 28105  013F82  0100               	movlb	0	; () banked
 28106  013F84  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 28107  013F86  0100               	movlb	0	; () banked
 28108  013F88  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 28109  013F8A  0100               	movlb	0	; () banked
 28110  013F8C  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 28111  013F8E  0100               	movlb	0	; () banked
 28112  013F90  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 28113  013F92  0100               	movlb	0	; () banked
 28114  013F94  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 28115  013F96  0100               	movlb	0	; () banked
 28116  013F98  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 28117  013F9A  B0D8               	btfsc	status,0,c
 28118  013F9C  D002               	goto	l14291
 28119                           
 28120                           ; BSR set to: 0
 28121  013F9E  90D8               	bcf	status,0,c
 28122  013FA0  0012               	return	
 28123  013FA2                     l14291:
 28124                           
 28125                           ; BSR set to: 0
 28126  013FA2  80D8               	bsf	status,0,c
 28127                           
 28128                           ; BSR set to: 0
 28129  013FA4  0012               	return	
 28130  013FA6                     __end_of___flge:
 28131                           	opt stack 0
 28132                           tosu	equ	0xFFF
 28133                           tosh	equ	0xFFE
 28134                           tosl	equ	0xFFD
 28135                           pclath	equ	0xFFA
 28136                           tblptru	equ	0xFF8
 28137                           tblptrh	equ	0xFF7
 28138                           tblptrl	equ	0xFF6
 28139                           tablat	equ	0xFF5
 28140                           prodh	equ	0xFF4
 28141                           prodl	equ	0xFF3
 28142                           intcon	equ	0xFF2
 28143                           indf0	equ	0xFEF
 28144                           postinc0	equ	0xFEE
 28145                           fsr0h	equ	0xFEA
 28146                           fsr0l	equ	0xFE9
 28147                           wreg	equ	0xFE8
 28148                           indf1	equ	0xFE7
 28149                           postdec1	equ	0xFE5
 28150                           fsr1h	equ	0xFE2
 28151                           fsr1l	equ	0xFE1
 28152                           indf2	equ	0xFDF
 28153                           postinc2	equ	0xFDE
 28154                           postdec2	equ	0xFDD
 28155                           plusw2	equ	0xFDB
 28156                           fsr2h	equ	0xFDA
 28157                           fsr2l	equ	0xFD9
 28158                           status	equ	0xFD8
 28159                           
 28160 ;; *************** function _continuousMode *****************
 28161 ;; Defined at:
 28162 ;;		line 195 in file "main.c"
 28163 ;; Parameters:    Size  Location     Type
 28164 ;;		None
 28165 ;; Auto vars:     Size  Location     Type
 28166 ;;		None
 28167 ;; Return value:  Size  Location     Type
 28168 ;;                  1    wreg      void 
 28169 ;; Registers used:
 28170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28171 ;; Tracked objects:
 28172 ;;		On entry : 0/0
 28173 ;;		On exit  : 0/0
 28174 ;;		Unchanged: 0/0
 28175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28180 ;;Total ram usage:        0 bytes
 28181 ;; Hardware stack levels used:    1
 28182 ;; Hardware stack levels required when called:   10
 28183 ;; This function calls:
 28184 ;;		_Motor_Move
 28185 ;;		_Motor_Speed
 28186 ;; This function is called by:
 28187 ;;		_main
 28188 ;; This function uses a non-reentrant model
 28189 ;;
 28190                           
 28191                           	psect	text138
 28192  017AC8                     __ptext138:
 28193                           	opt stack 0
 28194  017AC8                     _continuousMode:
 28195                           	opt stack 20
 28196                           
 28197                           ;main.c: 196: Motor_Speed(&Stepper, speed);
 28198                           
 28199                           ; BSR set to: 0
 28200                           ;incstack = 0
 28201  017AC8  0EF4               	movlw	low _Stepper
 28202  017ACA  0100               	movlb	0	; () banked
 28203  017ACC  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
 28204  017ACE  0E00               	movlw	high _Stepper
 28205  017AD0  0100               	movlb	0	; () banked
 28206  017AD2  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
 28207  017AD4  C0D6  F07D         	movff	_speed,Motor_Speed@pFrequency
 28208  017AD8  C0D7  F07E         	movff	_speed+1,Motor_Speed@pFrequency+1
 28209  017ADC  EC20  F0BE         	call	_Motor_Speed	;wreg free
 28210                           
 28211                           ;main.c: 197: Motor_Move(&Stepper, direction);
 28212  017AE0  0EF4               	movlw	low _Stepper
 28213  017AE2  0100               	movlb	0	; () banked
 28214  017AE4  6F63               	movwf	Motor_Move@pMotor& (0+255),b
 28215  017AE6  0E00               	movlw	high _Stepper
 28216  017AE8  0100               	movlb	0	; () banked
 28217  017AEA  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
 28218  017AEC  C1FA  F065         	movff	_direction,Motor_Move@pDelta
 28219  017AF0  C1FB  F066         	movff	_direction+1,Motor_Move@pDelta+1
 28220  017AF4  ECC2  F0BC         	call	_Motor_Move	;wreg free
 28221  017AF8  0012               	return		;funcret
 28222  017AFA                     __end_of_continuousMode:
 28223                           	opt stack 0
 28224                           tosu	equ	0xFFF
 28225                           tosh	equ	0xFFE
 28226                           tosl	equ	0xFFD
 28227                           pclath	equ	0xFFA
 28228                           tblptru	equ	0xFF8
 28229                           tblptrh	equ	0xFF7
 28230                           tblptrl	equ	0xFF6
 28231                           tablat	equ	0xFF5
 28232                           prodh	equ	0xFF4
 28233                           prodl	equ	0xFF3
 28234                           intcon	equ	0xFF2
 28235                           indf0	equ	0xFEF
 28236                           postinc0	equ	0xFEE
 28237                           fsr0h	equ	0xFEA
 28238                           fsr0l	equ	0xFE9
 28239                           wreg	equ	0xFE8
 28240                           indf1	equ	0xFE7
 28241                           postdec1	equ	0xFE5
 28242                           fsr1h	equ	0xFE2
 28243                           fsr1l	equ	0xFE1
 28244                           indf2	equ	0xFDF
 28245                           postinc2	equ	0xFDE
 28246                           postdec2	equ	0xFDD
 28247                           plusw2	equ	0xFDB
 28248                           fsr2h	equ	0xFDA
 28249                           fsr2l	equ	0xFD9
 28250                           status	equ	0xFD8
 28251                           
 28252 ;; *************** function _Motor_Speed *****************
 28253 ;; Defined at:
 28254 ;;		line 117 in file "Library/Motor.c"
 28255 ;; Parameters:    Size  Location     Type
 28256 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 28257 ;;		 -> Stepper(6), 
 28258 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 28259 ;; Auto vars:     Size  Location     Type
 28260 ;;		None
 28261 ;; Return value:  Size  Location     Type
 28262 ;;                  1    wreg      unsigned char 
 28263 ;; Registers used:
 28264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28265 ;; Tracked objects:
 28266 ;;		On entry : 0/0
 28267 ;;		On exit  : 0/0
 28268 ;;		Unchanged: 0/0
 28269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28273 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28274 ;;Total ram usage:        4 bytes
 28275 ;; Hardware stack levels used:    1
 28276 ;; Hardware stack levels required when called:    9
 28277 ;; This function calls:
 28278 ;;		_Timer0_Init
 28279 ;; This function is called by:
 28280 ;;		_continuousMode
 28281 ;;		_stepMode
 28282 ;;		_positionMode
 28283 ;; This function uses a non-reentrant model
 28284 ;;
 28285                           
 28286                           	psect	text139
 28287  017C40                     __ptext139:
 28288                           	opt stack 0
 28289  017C40                     _Motor_Speed:
 28290                           	opt stack 20
 28291                           
 28292                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 28293                           
 28294                           ;incstack = 0
 28295  017C40  0100               	movlb	0	; () banked
 28296  017C42  EE20 F002          	lfsr	2,2
 28297  017C46  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
 28298  017C48  26D9               	addwf	fsr2l,f,c
 28299  017C4A  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 28300  017C4C  22DA               	addwfc	fsr2h,f,c
 28301  017C4E  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 28302  017C52  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 28303                           
 28304                           ; BSR set to: 0
 28305                           ;Motor.c: 120: Timer0_Init(pFrequency);
 28306  017C56  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 28307  017C5A  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 28308  017C5E  0100               	movlb	0	; () banked
 28309  017C60  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 28310  017C62  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 28311  017C64  EC4B  F0A4         	call	_Timer0_Init	;wreg free
 28312  017C68  0012               	return	
 28313  017C6A                     __end_of_Motor_Speed:
 28314                           	opt stack 0
 28315                           tosu	equ	0xFFF
 28316                           tosh	equ	0xFFE
 28317                           tosl	equ	0xFFD
 28318                           pclath	equ	0xFFA
 28319                           tblptru	equ	0xFF8
 28320                           tblptrh	equ	0xFF7
 28321                           tblptrl	equ	0xFF6
 28322                           tablat	equ	0xFF5
 28323                           prodh	equ	0xFF4
 28324                           prodl	equ	0xFF3
 28325                           intcon	equ	0xFF2
 28326                           indf0	equ	0xFEF
 28327                           postinc0	equ	0xFEE
 28328                           fsr0h	equ	0xFEA
 28329                           fsr0l	equ	0xFE9
 28330                           wreg	equ	0xFE8
 28331                           indf1	equ	0xFE7
 28332                           postdec1	equ	0xFE5
 28333                           fsr1h	equ	0xFE2
 28334                           fsr1l	equ	0xFE1
 28335                           indf2	equ	0xFDF
 28336                           postinc2	equ	0xFDE
 28337                           postdec2	equ	0xFDD
 28338                           plusw2	equ	0xFDB
 28339                           fsr2h	equ	0xFDA
 28340                           fsr2l	equ	0xFD9
 28341                           status	equ	0xFD8
 28342                           
 28343 ;; *************** function _Timer0_Init *****************
 28344 ;; Defined at:
 28345 ;;		line 25 in file "Library/Timer0.c"
 28346 ;; Parameters:    Size  Location     Type
 28347 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 28348 ;; Auto vars:     Size  Location     Type
 28349 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 28350 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 28351 ;; Return value:  Size  Location     Type
 28352 ;;                  1    wreg      void 
 28353 ;; Registers used:
 28354 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28355 ;; Tracked objects:
 28356 ;;		On entry : 0/0
 28357 ;;		On exit  : 0/0
 28358 ;;		Unchanged: 0/0
 28359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28360 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28361 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28363 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28364 ;;Total ram usage:       14 bytes
 28365 ;; Hardware stack levels used:    1
 28366 ;; Hardware stack levels required when called:    8
 28367 ;; This function calls:
 28368 ;;		_Timer0_Clear
 28369 ;;		___lldiv
 28370 ;; This function is called by:
 28371 ;;		_Motor_Init
 28372 ;;		_Motor_Speed
 28373 ;; This function uses a non-reentrant model
 28374 ;;
 28375                           
 28376                           	psect	text140
 28377  014896                     __ptext140:
 28378                           	opt stack 0
 28379  014896                     _Timer0_Init:
 28380                           	opt stack 20
 28381                           
 28382                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 28383                           
 28384                           ;incstack = 0
 28385  014896  0E80               	movlw	128
 28386  014898  0100               	movlb	0	; () banked
 28387  01489A  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 28388  01489C  0E8D               	movlw	141
 28389  01489E  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 28390  0148A0  0E5B               	movlw	91
 28391  0148A2  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 28392  0148A4  0E00               	movlw	0
 28393  0148A6  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 28394                           
 28395                           ; BSR set to: 0
 28396                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 28397                           ;Timer0.c: 31: static UINT8 PRE = 0;
 28398                           ;Timer0.c: 32: static UINT32 DIV = 0;
 28399                           ;Timer0.c: 34: UINT32 DIVIDE;
 28400                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 28401  0148A8  9ED5               	bcf	4053,7,c	;volatile
 28402                           
 28403                           ; BSR set to: 0
 28404                           ;Timer0.c: 38: if (pFrequency == 0)
 28405  0148AA  0100               	movlb	0	; () banked
 28406  0148AC  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 28407  0148AE  0100               	movlb	0	; () banked
 28408  0148B0  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 28409  0148B2  0100               	movlb	0	; () banked
 28410  0148B4  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 28411  0148B6  0100               	movlb	0	; () banked
 28412  0148B8  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 28413  0148BA  B4D8               	btfsc	status,2,c
 28414  0148BC  0012               	return	
 28415                           
 28416                           ; BSR set to: 0
 28417                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 28418                           
 28419                           ; BSR set to: 0
 28420                           ;Timer0.c: 39: return;
 28421  0148BE  96D5               	bcf	4053,3,c	;volatile
 28422                           
 28423                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 28424  0148C0  9CD5               	bcf	4053,6,c	;volatile
 28425                           
 28426                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 28427  0148C2  9AD5               	bcf	4053,5,c	;volatile
 28428                           
 28429                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 28430  0148C4  98D5               	bcf	4053,4,c	;volatile
 28431                           
 28432                           ; BSR set to: 0
 28433                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 28434  0148C6  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 28435  0148CA  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 28436  0148CE  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 28437  0148D2  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 28438  0148D6  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 28439  0148DA  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 28440  0148DE  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 28441  0148E2  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 28442  0148E6  ECEA  F0AC         	call	___lldiv	;wreg free
 28443  0148EA  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 28444  0148EE  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 28445  0148F2  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 28446  0148F6  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 28447                           
 28448                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 28449  0148FA  D009               	goto	l14659
 28450  0148FC                     l14649:
 28451                           
 28452                           ;Timer0.c: 50: {
 28453                           ;Timer0.c: 51: INDEX ++;
 28454  0148FC  2A31               	incf	_INDEX,f,c
 28455                           
 28456                           ;Timer0.c: 52: if (INDEX >= 3)
 28457  0148FE  0E02               	movlw	2
 28458  014900  6431               	cpfsgt	_INDEX,c
 28459  014902  D001               	goto	l14655
 28460  014904  D02D               	goto	l14661
 28461  014906                     l14655:
 28462                           
 28463                           ;Timer0.c: 56: if (INDEX >= 8)
 28464  014906  0E07               	movlw	7
 28465  014908  6431               	cpfsgt	_INDEX,c
 28466  01490A  D001               	goto	l14659
 28467  01490C  0012               	return	
 28468  01490E                     l14659:
 28469  01490E  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 28470  014912  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 28471  014916  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 28472  01491A  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 28473  01491E  5031               	movf	_INDEX,w,c
 28474  014920  0D02               	mullw	2
 28475  014922  0E9D               	movlw	low Timer0_Init@PRESCALE
 28476  014924  24F3               	addwf	prodl,w,c
 28477  014926  6EF6               	movwf	tblptrl,c
 28478  014928  0EFC               	movlw	high Timer0_Init@PRESCALE
 28479  01492A  20F4               	addwfc	prodh,w,c
 28480  01492C  6EF7               	movwf	tblptrh,c
 28481  01492E                     	if	1	;There are 3 active tblptr bytes
 28482  01492E  6AF8               	clrf	tblptru,c
 28483  014930  0E00               	movlw	low (__mediumconst shr (0+16))
 28484  014932  22F8               	addwfc	tblptru,f,c
 28485  014934                     	endif
 28486  014934  0009               	tblrd		*+
 28487  014936  CFF5 F071          	movff	tablat,??_Timer0_Init
 28488  01493A  0009               	tblrd		*+
 28489  01493C  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 28490  014940  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 28491  014944  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 28492  014948  0100               	movlb	0	; () banked
 28493  01494A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 28494  01494C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 28495  01494E  ECEA  F0AC         	call	___lldiv	;wreg free
 28496  014952  0100               	movlb	0	; () banked
 28497  014954  5163               	movf	(?___lldiv+3)& (0+255),w,b
 28498  014956  E1D2               	bnz	l14649
 28499  014958  0100               	movlb	0	; () banked
 28500  01495A  0562               	decf	(?___lldiv+2)& (0+255),w,b
 28501  01495C  B0D8               	btfsc	status,0,c
 28502  01495E  D7CE               	goto	l14649
 28503  014960                     l14661:
 28504                           
 28505                           ;Timer0.c: 58: }
 28506                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 28507  014960  5031               	movf	_INDEX,w,c
 28508  014962  0D02               	mullw	2
 28509  014964  0E9D               	movlw	low Timer0_Init@PRESCALE
 28510  014966  24F3               	addwf	prodl,w,c
 28511  014968  6EF6               	movwf	tblptrl,c
 28512  01496A  0EFC               	movlw	high Timer0_Init@PRESCALE
 28513  01496C  20F4               	addwfc	prodh,w,c
 28514  01496E  6EF7               	movwf	tblptrh,c
 28515  014970                     	if	1	;There are 3 active tblptr bytes
 28516  014970  6AF8               	clrf	tblptru,c
 28517  014972  0E00               	movlw	low (__mediumconst shr (0+16))
 28518  014974  22F8               	addwfc	tblptru,f,c
 28519  014976                     	endif
 28520  014976  0008               	tblrd		*
 28521  014978  CFF5 F030          	movff	tablat,Timer0_Init@PRE
 28522                           
 28523                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 28524  01497C  0EFF               	movlw	255
 28525  01497E  0100               	movlb	0	; () banked
 28526  014980  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 28527  014982  0101               	movlb	1	; () banked
 28528  014984  6F08               	movwf	Timer0_Init@DIV& (0+255),b
 28529  014986  0EFF               	movlw	255
 28530  014988  0100               	movlb	0	; () banked
 28531  01498A  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 28532  01498C  0101               	movlb	1	; () banked
 28533  01498E  6F09               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 28534  014990  0EFF               	movlw	255
 28535  014992  0100               	movlb	0	; () banked
 28536  014994  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 28537  014996  0101               	movlb	1	; () banked
 28538  014998  6F0A               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 28539  01499A  0EFF               	movlw	255
 28540  01499C  0100               	movlb	0	; () banked
 28541  01499E  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 28542  0149A0  0101               	movlb	1	; () banked
 28543  0149A2  6F0B               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 28544                           
 28545                           ; BSR set to: 1
 28546                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 28547  0149A4  C108  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 28548  0149A8  C109  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 28549  0149AC  C10A  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 28550  0149B0  C10B  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 28551  0149B4  5030               	movf	Timer0_Init@PRE,w,c
 28552  0149B6  0100               	movlb	0	; () banked
 28553  0149B8  6F64               	movwf	___lldiv@divisor& (0+255),b
 28554  0149BA  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 28555  0149BC  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 28556  0149BE  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 28557  0149C0  ECEA  F0AC         	call	___lldiv	;wreg free
 28558  0149C4  0100               	movlb	0	; () banked
 28559  0149C6  1F60               	comf	?___lldiv& (0+255),f,b
 28560  0149C8  0100               	movlb	0	; () banked
 28561  0149CA  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 28562  0149CC  0100               	movlb	0	; () banked
 28563  0149CE  4B60               	infsnz	?___lldiv& (0+255),f,b
 28564  0149D0  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 28565  0149D2  0EFF               	movlw	255
 28566  0149D4  0100               	movlb	0	; () banked
 28567  0149D6  2560               	addwf	?___lldiv& (0+255),w,b
 28568  0149D8  6E28               	movwf	_COUNTER,c
 28569  0149DA  0EFF               	movlw	255
 28570  0149DC  0100               	movlb	0	; () banked
 28571  0149DE  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 28572  0149E0  6E29               	movwf	_COUNTER+1,c
 28573                           
 28574                           ; BSR set to: 0
 28575                           ;Timer0.c: 68: Timer0_Clear();
 28576  0149E2  ECC5  F0BF         	call	_Timer0_Clear	;wreg free
 28577                           
 28578                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 28579  0149E6  8ED5               	bsf	4053,7,c	;volatile
 28580  0149E8  0012               	return		;funcret
 28581  0149EA                     __end_of_Timer0_Init:
 28582                           	opt stack 0
 28583                           tosu	equ	0xFFF
 28584                           tosh	equ	0xFFE
 28585                           tosl	equ	0xFFD
 28586                           pclath	equ	0xFFA
 28587                           tblptru	equ	0xFF8
 28588                           tblptrh	equ	0xFF7
 28589                           tblptrl	equ	0xFF6
 28590                           tablat	equ	0xFF5
 28591                           prodh	equ	0xFF4
 28592                           prodl	equ	0xFF3
 28593                           intcon	equ	0xFF2
 28594                           indf0	equ	0xFEF
 28595                           postinc0	equ	0xFEE
 28596                           fsr0h	equ	0xFEA
 28597                           fsr0l	equ	0xFE9
 28598                           wreg	equ	0xFE8
 28599                           indf1	equ	0xFE7
 28600                           postdec1	equ	0xFE5
 28601                           fsr1h	equ	0xFE2
 28602                           fsr1l	equ	0xFE1
 28603                           indf2	equ	0xFDF
 28604                           postinc2	equ	0xFDE
 28605                           postdec2	equ	0xFDD
 28606                           plusw2	equ	0xFDB
 28607                           fsr2h	equ	0xFDA
 28608                           fsr2l	equ	0xFD9
 28609                           status	equ	0xFD8
 28610                           
 28611 ;; *************** function ___lldiv *****************
 28612 ;; Defined at:
 28613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 28614 ;; Parameters:    Size  Location     Type
 28615 ;;  dividend        4    0[BANK0 ] unsigned long 
 28616 ;;  divisor         4    4[BANK0 ] unsigned long 
 28617 ;; Auto vars:     Size  Location     Type
 28618 ;;  quotient        4    8[BANK0 ] unsigned long 
 28619 ;;  counter         1   12[BANK0 ] unsigned char 
 28620 ;; Return value:  Size  Location     Type
 28621 ;;                  4    0[BANK0 ] unsigned long 
 28622 ;; Registers used:
 28623 ;;		wreg, status,2, status,0
 28624 ;; Tracked objects:
 28625 ;;		On entry : 0/0
 28626 ;;		On exit  : 0/0
 28627 ;;		Unchanged: 0/0
 28628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28629 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28630 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28632 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28633 ;;Total ram usage:       13 bytes
 28634 ;; Hardware stack levels used:    1
 28635 ;; Hardware stack levels required when called:    7
 28636 ;; This function calls:
 28637 ;;		Nothing
 28638 ;; This function is called by:
 28639 ;;		_Timer0_Init
 28640 ;;		_Timer2_Init
 28641 ;;		_printf
 28642 ;;		_rand_between
 28643 ;;		_I2C_Init
 28644 ;; This function uses a non-reentrant model
 28645 ;;
 28646                           
 28647                           	psect	text141
 28648  0159D4                     __ptext141:
 28649                           	opt stack 0
 28650  0159D4                     ___lldiv:
 28651                           	opt stack 20
 28652                           
 28653                           ;incstack = 0
 28654  0159D4  0E00               	movlw	0
 28655  0159D6  0100               	movlb	0	; () banked
 28656  0159D8  6F68               	movwf	___lldiv@quotient& (0+255),b
 28657  0159DA  0E00               	movlw	0
 28658  0159DC  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 28659  0159DE  0E00               	movlw	0
 28660  0159E0  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 28661  0159E2  0E00               	movlw	0
 28662  0159E4  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 28663                           
 28664                           ; BSR set to: 0
 28665  0159E6  0100               	movlb	0	; () banked
 28666  0159E8  5164               	movf	___lldiv@divisor& (0+255),w,b
 28667  0159EA  0100               	movlb	0	; () banked
 28668  0159EC  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 28669  0159EE  0100               	movlb	0	; () banked
 28670  0159F0  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 28671  0159F2  0100               	movlb	0	; () banked
 28672  0159F4  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 28673  0159F6  B4D8               	btfsc	status,2,c
 28674  0159F8  D042               	goto	l2604
 28675                           
 28676                           ; BSR set to: 0
 28677  0159FA  0E01               	movlw	1
 28678  0159FC  0100               	movlb	0	; () banked
 28679  0159FE  6F6C               	movwf	___lldiv@counter& (0+255),b
 28680  015A00  D008               	goto	l13181
 28681  015A02                     l13179:
 28682                           
 28683                           ; BSR set to: 0
 28684  015A02  0100               	movlb	0	; () banked
 28685  015A04  90D8               	bcf	status,0,c
 28686  015A06  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 28687  015A08  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 28688  015A0A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 28689  015A0C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 28690  015A0E  0100               	movlb	0	; () banked
 28691  015A10  2B6C               	incf	___lldiv@counter& (0+255),f,b
 28692  015A12                     l13181:
 28693                           
 28694                           ; BSR set to: 0
 28695  015A12  0100               	movlb	0	; () banked
 28696  015A14  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 28697  015A16  D7F5               	goto	l13179
 28698  015A18                     l13183:
 28699                           
 28700                           ; BSR set to: 0
 28701  015A18  0100               	movlb	0	; () banked
 28702  015A1A  90D8               	bcf	status,0,c
 28703  015A1C  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 28704  015A1E  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 28705  015A20  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 28706  015A22  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 28707                           
 28708                           ; BSR set to: 0
 28709  015A24  0100               	movlb	0	; () banked
 28710  015A26  5164               	movf	___lldiv@divisor& (0+255),w,b
 28711  015A28  0100               	movlb	0	; () banked
 28712  015A2A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 28713  015A2C  0100               	movlb	0	; () banked
 28714  015A2E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 28715  015A30  0100               	movlb	0	; () banked
 28716  015A32  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 28717  015A34  0100               	movlb	0	; () banked
 28718  015A36  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 28719  015A38  0100               	movlb	0	; () banked
 28720  015A3A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 28721  015A3C  0100               	movlb	0	; () banked
 28722  015A3E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 28723  015A40  0100               	movlb	0	; () banked
 28724  015A42  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 28725  015A44  A0D8               	btfss	status,0,c
 28726  015A46  D012               	goto	l13191
 28727                           
 28728                           ; BSR set to: 0
 28729  015A48  0100               	movlb	0	; () banked
 28730  015A4A  5164               	movf	___lldiv@divisor& (0+255),w,b
 28731  015A4C  0100               	movlb	0	; () banked
 28732  015A4E  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 28733  015A50  0100               	movlb	0	; () banked
 28734  015A52  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 28735  015A54  0100               	movlb	0	; () banked
 28736  015A56  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 28737  015A58  0100               	movlb	0	; () banked
 28738  015A5A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 28739  015A5C  0100               	movlb	0	; () banked
 28740  015A5E  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 28741  015A60  0100               	movlb	0	; () banked
 28742  015A62  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 28743  015A64  0100               	movlb	0	; () banked
 28744  015A66  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 28745                           
 28746                           ; BSR set to: 0
 28747  015A68  0100               	movlb	0	; () banked
 28748  015A6A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 28749  015A6C                     l13191:
 28750                           
 28751                           ; BSR set to: 0
 28752  015A6C  0100               	movlb	0	; () banked
 28753  015A6E  90D8               	bcf	status,0,c
 28754  015A70  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 28755  015A72  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 28756  015A74  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 28757  015A76  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 28758                           
 28759                           ; BSR set to: 0
 28760  015A78  0100               	movlb	0	; () banked
 28761  015A7A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 28762  015A7C  D7CD               	goto	l13183
 28763  015A7E                     l2604:
 28764                           
 28765                           ; BSR set to: 0
 28766  015A7E  C068  F060         	movff	___lldiv@quotient,?___lldiv
 28767  015A82  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 28768  015A86  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 28769  015A8A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 28770                           
 28771                           ; BSR set to: 0
 28772  015A8E  0012               	return		;funcret
 28773  015A90                     __end_of___lldiv:
 28774                           	opt stack 0
 28775                           tosu	equ	0xFFF
 28776                           tosh	equ	0xFFE
 28777                           tosl	equ	0xFFD
 28778                           pclath	equ	0xFFA
 28779                           tblptru	equ	0xFF8
 28780                           tblptrh	equ	0xFF7
 28781                           tblptrl	equ	0xFF6
 28782                           tablat	equ	0xFF5
 28783                           prodh	equ	0xFF4
 28784                           prodl	equ	0xFF3
 28785                           intcon	equ	0xFF2
 28786                           indf0	equ	0xFEF
 28787                           postinc0	equ	0xFEE
 28788                           fsr0h	equ	0xFEA
 28789                           fsr0l	equ	0xFE9
 28790                           wreg	equ	0xFE8
 28791                           indf1	equ	0xFE7
 28792                           postdec1	equ	0xFE5
 28793                           fsr1h	equ	0xFE2
 28794                           fsr1l	equ	0xFE1
 28795                           indf2	equ	0xFDF
 28796                           postinc2	equ	0xFDE
 28797                           postdec2	equ	0xFDD
 28798                           plusw2	equ	0xFDB
 28799                           fsr2h	equ	0xFDA
 28800                           fsr2l	equ	0xFD9
 28801                           status	equ	0xFD8
 28802                           
 28803 ;; *************** function _Timer0_Clear *****************
 28804 ;; Defined at:
 28805 ;;		line 20 in file "Library/Timer0.c"
 28806 ;; Parameters:    Size  Location     Type
 28807 ;;		None
 28808 ;; Auto vars:     Size  Location     Type
 28809 ;;		None
 28810 ;; Return value:  Size  Location     Type
 28811 ;;                  1    wreg      void 
 28812 ;; Registers used:
 28813 ;;		None
 28814 ;; Tracked objects:
 28815 ;;		On entry : 0/0
 28816 ;;		On exit  : 0/0
 28817 ;;		Unchanged: 0/0
 28818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28823 ;;Total ram usage:        0 bytes
 28824 ;; Hardware stack levels used:    1
 28825 ;; Hardware stack levels required when called:    7
 28826 ;; This function calls:
 28827 ;;		Nothing
 28828 ;; This function is called by:
 28829 ;;		_Timer0_Init
 28830 ;; This function uses a non-reentrant model
 28831 ;;
 28832                           
 28833                           	psect	text142
 28834  017F8A                     __ptext142:
 28835                           	opt stack 0
 28836  017F8A                     _Timer0_Clear:
 28837                           	opt stack 20
 28838                           
 28839                           ;Timer0.c: 22: TMR0 = COUNTER;
 28840                           
 28841                           ; BSR set to: 0
 28842                           ;incstack = 0
 28843  017F8A  C028  FFD6         	movff	_COUNTER,4054	;volatile
 28844  017F8E  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 28845                           
 28846                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 28847  017F92  94F2               	bcf	intcon,2,c	;volatile
 28848  017F94  0012               	return		;funcret
 28849  017F96                     __end_of_Timer0_Clear:
 28850                           	opt stack 0
 28851                           tosu	equ	0xFFF
 28852                           tosh	equ	0xFFE
 28853                           tosl	equ	0xFFD
 28854                           pclath	equ	0xFFA
 28855                           tblptru	equ	0xFF8
 28856                           tblptrh	equ	0xFF7
 28857                           tblptrl	equ	0xFF6
 28858                           tablat	equ	0xFF5
 28859                           prodh	equ	0xFF4
 28860                           prodl	equ	0xFF3
 28861                           intcon	equ	0xFF2
 28862                           indf0	equ	0xFEF
 28863                           postinc0	equ	0xFEE
 28864                           fsr0h	equ	0xFEA
 28865                           fsr0l	equ	0xFE9
 28866                           wreg	equ	0xFE8
 28867                           indf1	equ	0xFE7
 28868                           postdec1	equ	0xFE5
 28869                           fsr1h	equ	0xFE2
 28870                           fsr1l	equ	0xFE1
 28871                           indf2	equ	0xFDF
 28872                           postinc2	equ	0xFDE
 28873                           postdec2	equ	0xFDD
 28874                           plusw2	equ	0xFDB
 28875                           fsr2h	equ	0xFDA
 28876                           fsr2l	equ	0xFD9
 28877                           status	equ	0xFD8
 28878                           
 28879 ;; *************** function _Motor_Move *****************
 28880 ;; Defined at:
 28881 ;;		line 51 in file "Library/Motor.c"
 28882 ;; Parameters:    Size  Location     Type
 28883 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 28884 ;;		 -> Stepper(6), 
 28885 ;;  pDelta          2    5[BANK0 ] short 
 28886 ;; Auto vars:     Size  Location     Type
 28887 ;;		None
 28888 ;; Return value:  Size  Location     Type
 28889 ;;                  1    wreg      unsigned char 
 28890 ;; Registers used:
 28891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28892 ;; Tracked objects:
 28893 ;;		On entry : 0/0
 28894 ;;		On exit  : 0/0
 28895 ;;		Unchanged: 0/0
 28896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28900 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28901 ;;Total ram usage:        6 bytes
 28902 ;; Hardware stack levels used:    1
 28903 ;; Hardware stack levels required when called:    8
 28904 ;; This function calls:
 28905 ;;		_Timer0_Start
 28906 ;; This function is called by:
 28907 ;;		_continuousMode
 28908 ;;		_stepMode
 28909 ;;		_positionMode
 28910 ;; This function uses a non-reentrant model
 28911 ;;
 28912                           
 28913                           	psect	text143
 28914  017984                     __ptext143:
 28915                           	opt stack 0
 28916  017984                     _Motor_Move:
 28917                           	opt stack 21
 28918                           
 28919                           ;Motor.c: 54: lMotor = pMotor;
 28920                           
 28921                           ;incstack = 0
 28922  017984  C063  F02A         	movff	Motor_Move@pMotor,_lMotor
 28923  017988  C064  F02B         	movff	Motor_Move@pMotor+1,_lMotor+1
 28924                           
 28925                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 28926  01798C  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 28927  017990  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 28928  017994  50DE               	movf	postinc2,w,c
 28929  017996  10DE               	iorwf	postinc2,w,c
 28930  017998  A4D8               	btfss	status,2,c
 28931  01799A  0012               	return	
 28932                           
 28933                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 28934                           
 28935                           ;Motor.c: 59: return 0;
 28936                           ;	Return value of _Motor_Move is never used
 28937  01799C  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 28938  0179A0  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 28939  0179A4  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
 28940  0179A8  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 28941                           
 28942                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 28943  0179AC  C0CD  F060         	movff	_lStepFunction,Timer0_Start@pFunction
 28944  0179B0  C0CE  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 28945  0179B4  C0CF  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 28946  0179B8  EC49  F0BE         	call	_Timer0_Start	;wreg free
 28947  0179BC  0012               	return	
 28948  0179BE                     __end_of_Motor_Move:
 28949                           	opt stack 0
 28950                           tosu	equ	0xFFF
 28951                           tosh	equ	0xFFE
 28952                           tosl	equ	0xFFD
 28953                           pclath	equ	0xFFA
 28954                           tblptru	equ	0xFF8
 28955                           tblptrh	equ	0xFF7
 28956                           tblptrl	equ	0xFF6
 28957                           tablat	equ	0xFF5
 28958                           prodh	equ	0xFF4
 28959                           prodl	equ	0xFF3
 28960                           intcon	equ	0xFF2
 28961                           indf0	equ	0xFEF
 28962                           postinc0	equ	0xFEE
 28963                           fsr0h	equ	0xFEA
 28964                           fsr0l	equ	0xFE9
 28965                           wreg	equ	0xFE8
 28966                           indf1	equ	0xFE7
 28967                           postdec1	equ	0xFE5
 28968                           fsr1h	equ	0xFE2
 28969                           fsr1l	equ	0xFE1
 28970                           indf2	equ	0xFDF
 28971                           postinc2	equ	0xFDE
 28972                           postdec2	equ	0xFDD
 28973                           plusw2	equ	0xFDB
 28974                           fsr2h	equ	0xFDA
 28975                           fsr2l	equ	0xFD9
 28976                           status	equ	0xFD8
 28977                           
 28978 ;; *************** function _Timer0_Start *****************
 28979 ;; Defined at:
 28980 ;;		line 75 in file "Library/Timer0.c"
 28981 ;; Parameters:    Size  Location     Type
 28982 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 28983 ;;		 -> Absolute function(1), Motor_Step(1), 
 28984 ;; Auto vars:     Size  Location     Type
 28985 ;;		None
 28986 ;; Return value:  Size  Location     Type
 28987 ;;                  1    wreg      void 
 28988 ;; Registers used:
 28989 ;;		wreg, status,2, status,0
 28990 ;; Tracked objects:
 28991 ;;		On entry : 0/0
 28992 ;;		On exit  : 0/0
 28993 ;;		Unchanged: 0/0
 28994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28995 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28998 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28999 ;;Total ram usage:        3 bytes
 29000 ;; Hardware stack levels used:    1
 29001 ;; Hardware stack levels required when called:    7
 29002 ;; This function calls:
 29003 ;;		Nothing
 29004 ;; This function is called by:
 29005 ;;		_Motor_Move
 29006 ;; This function uses a non-reentrant model
 29007 ;;
 29008                           
 29009                           	psect	text144
 29010  017C92                     __ptext144:
 29011                           	opt stack 0
 29012  017C92                     _Timer0_Start:
 29013                           	opt stack 21
 29014                           
 29015                           ;Timer0.c: 77: gISR = pFunction;
 29016                           
 29017                           ;incstack = 0
 29018  017C92  C060  F10C         	movff	Timer0_Start@pFunction,_gISR
 29019  017C96  C061  F10D         	movff	Timer0_Start@pFunction+1,_gISR+1
 29020  017C9A  C062  F10E         	movff	Timer0_Start@pFunction+2,_gISR+2
 29021                           
 29022                           ;Timer0.c: 78: TMR0 = COUNTER;
 29023  017C9E  C028  FFD6         	movff	_COUNTER,4054	;volatile
 29024  017CA2  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 29025                           
 29026                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 29027  017CA6  50D5               	movf	4053,w,c	;volatile
 29028  017CA8  1831               	xorwf	_INDEX,w,c
 29029  017CAA  0BF8               	andlw	-8
 29030  017CAC  1831               	xorwf	_INDEX,w,c
 29031  017CAE  6ED5               	movwf	4053,c	;volatile
 29032                           
 29033                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 29034  017CB0  94F2               	bcf	intcon,2,c	;volatile
 29035                           
 29036                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 29037  017CB2  8AF2               	bsf	intcon,5,c	;volatile
 29038  017CB4  0012               	return		;funcret
 29039  017CB6                     __end_of_Timer0_Start:
 29040                           	opt stack 0
 29041                           tosu	equ	0xFFF
 29042                           tosh	equ	0xFFE
 29043                           tosl	equ	0xFFD
 29044                           pclath	equ	0xFFA
 29045                           tblptru	equ	0xFF8
 29046                           tblptrh	equ	0xFF7
 29047                           tblptrl	equ	0xFF6
 29048                           tablat	equ	0xFF5
 29049                           prodh	equ	0xFF4
 29050                           prodl	equ	0xFF3
 29051                           intcon	equ	0xFF2
 29052                           indf0	equ	0xFEF
 29053                           postinc0	equ	0xFEE
 29054                           fsr0h	equ	0xFEA
 29055                           fsr0l	equ	0xFE9
 29056                           wreg	equ	0xFE8
 29057                           indf1	equ	0xFE7
 29058                           postdec1	equ	0xFE5
 29059                           fsr1h	equ	0xFE2
 29060                           fsr1l	equ	0xFE1
 29061                           indf2	equ	0xFDF
 29062                           postinc2	equ	0xFDE
 29063                           postdec2	equ	0xFDD
 29064                           plusw2	equ	0xFDB
 29065                           fsr2h	equ	0xFDA
 29066                           fsr2l	equ	0xFD9
 29067                           status	equ	0xFD8
 29068                           
 29069 ;; *************** function _HMI_Render *****************
 29070 ;; Defined at:
 29071 ;;		line 138 in file "HMI.c"
 29072 ;; Parameters:    Size  Location     Type
 29073 ;;		None
 29074 ;; Auto vars:     Size  Location     Type
 29075 ;;  a               2    8[BANK0 ] unsigned short 
 29076 ;; Return value:  Size  Location     Type
 29077 ;;                  1    wreg      void 
 29078 ;; Registers used:
 29079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29080 ;; Tracked objects:
 29081 ;;		On entry : 0/0
 29082 ;;		On exit  : 0/0
 29083 ;;		Unchanged: 0/0
 29084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29089 ;;Total ram usage:        2 bytes
 29090 ;; Hardware stack levels used:    1
 29091 ;; Hardware stack levels required when called:    9
 29092 ;; This function calls:
 29093 ;;		_OutSeg
 29094 ;; This function is called by:
 29095 ;;		_main
 29096 ;; This function uses a non-reentrant model
 29097 ;;
 29098                           
 29099                           	psect	text145
 29100  0178CE                     __ptext145:
 29101                           	opt stack 0
 29102  0178CE                     _HMI_Render:
 29103                           	opt stack 21
 29104                           
 29105                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 29106                           
 29107                           ;incstack = 0
 29108  0178CE  0E00               	movlw	0
 29109  0178D0  0100               	movlb	0	; () banked
 29110  0178D2  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 29111  0178D4  0E00               	movlw	0
 29112  0178D6  6F68               	movwf	HMI_Render@a& (0+255),b
 29113  0178D8                     l15887:
 29114                           
 29115                           ; BSR set to: 0
 29116  0178D8  0100               	movlb	0	; () banked
 29117  0178DA  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 29118  0178DC  E116               	bnz	l1158
 29119  0178DE  0E08               	movlw	8
 29120  0178E0  0100               	movlb	0	; () banked
 29121  0178E2  5D68               	subwf	HMI_Render@a& (0+255),w,b
 29122  0178E4  B0D8               	btfsc	status,0,c
 29123  0178E6  0012               	return	
 29124                           
 29125                           ; BSR set to: 0
 29126                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 29127                           
 29128                           ; BSR set to: 0
 29129                           
 29130                           ; BSR set to: 0
 29131  0178E8  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 29132  0178EC  0E29               	movlw	low _HMIBoard
 29133  0178EE  0100               	movlb	0	; () banked
 29134  0178F0  2568               	addwf	HMI_Render@a& (0+255),w,b
 29135  0178F2  6ED9               	movwf	fsr2l,c
 29136  0178F4  0E01               	movlw	high _HMIBoard
 29137  0178F6  0100               	movlb	0	; () banked
 29138  0178F8  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 29139  0178FA  6EDA               	movwf	fsr2h,c
 29140  0178FC  50DF               	movf	indf2,w,c
 29141  0178FE  EC06  F0B5         	call	_OutSeg
 29142  017902  0100               	movlb	0	; () banked
 29143  017904  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 29144  017906  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 29145  017908  D7E7               	goto	l15887
 29146  01790A                     l1158:
 29147                           
 29148                           ; BSR set to: 0
 29149  01790A  0012               	return		;funcret
 29150  01790C                     __end_of_HMI_Render:
 29151                           	opt stack 0
 29152                           tosu	equ	0xFFF
 29153                           tosh	equ	0xFFE
 29154                           tosl	equ	0xFFD
 29155                           pclath	equ	0xFFA
 29156                           tblptru	equ	0xFF8
 29157                           tblptrh	equ	0xFF7
 29158                           tblptrl	equ	0xFF6
 29159                           tablat	equ	0xFF5
 29160                           prodh	equ	0xFF4
 29161                           prodl	equ	0xFF3
 29162                           intcon	equ	0xFF2
 29163                           indf0	equ	0xFEF
 29164                           postinc0	equ	0xFEE
 29165                           fsr0h	equ	0xFEA
 29166                           fsr0l	equ	0xFE9
 29167                           wreg	equ	0xFE8
 29168                           indf1	equ	0xFE7
 29169                           postdec1	equ	0xFE5
 29170                           fsr1h	equ	0xFE2
 29171                           fsr1l	equ	0xFE1
 29172                           indf2	equ	0xFDF
 29173                           postinc2	equ	0xFDE
 29174                           postdec2	equ	0xFDD
 29175                           plusw2	equ	0xFDB
 29176                           fsr2h	equ	0xFDA
 29177                           fsr2l	equ	0xFD9
 29178                           status	equ	0xFD8
 29179                           
 29180 ;; *************** function _OutSeg *****************
 29181 ;; Defined at:
 29182 ;;		line 54 in file "HMI.c"
 29183 ;; Parameters:    Size  Location     Type
 29184 ;;  pInput          1    wreg     unsigned char 
 29185 ;;  pSegment        1    3[BANK0 ] unsigned char 
 29186 ;; Auto vars:     Size  Location     Type
 29187 ;;  pInput          1    6[BANK0 ] unsigned char 
 29188 ;;  out             1    7[BANK0 ] volatile unsigned char 
 29189 ;; Return value:  Size  Location     Type
 29190 ;;                  1    wreg      void 
 29191 ;; Registers used:
 29192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29193 ;; Tracked objects:
 29194 ;;		On entry : 0/0
 29195 ;;		On exit  : 0/0
 29196 ;;		Unchanged: 0/0
 29197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29198 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29199 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29201 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29202 ;;Total ram usage:        5 bytes
 29203 ;; Hardware stack levels used:    1
 29204 ;; Hardware stack levels required when called:    8
 29205 ;; This function calls:
 29206 ;;		_SPI_Send
 29207 ;; This function is called by:
 29208 ;;		_HMI_Render
 29209 ;;		_HMI_GRender
 29210 ;; This function uses a non-reentrant model
 29211 ;;
 29212                           
 29213                           	psect	text146
 29214  016A0C                     __ptext146:
 29215                           	opt stack 0
 29216  016A0C                     _OutSeg:
 29217                           	opt stack 21
 29218                           
 29219                           ; BSR set to: 0
 29220                           ;incstack = 0
 29221                           ;OutSeg@pInput stored from wreg
 29222  016A0C  0100               	movlb	0	; () banked
 29223  016A0E  6F66               	movwf	OutSeg@pInput& (0+255),b
 29224                           
 29225                           ;HMI.c: 58: static UINT8 cur;
 29226                           ;HMI.c: 59: volatile UINT8 out;
 29227                           ;HMI.c: 60: static UINT8 segset;
 29228                           ;HMI.c: 61: static UINT8 a;
 29229                           ;HMI.c: 83: if (pSegment <= 8)
 29230  016A10  0E09               	movlw	9
 29231  016A12  0100               	movlb	0	; () banked
 29232  016A14  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 29233  016A16  0012               	return	
 29234                           
 29235                           ; BSR set to: 0
 29236                           ;HMI.c: 84: {
 29237                           ;HMI.c: 85: cur = pInput;
 29238  016A18  C066  F035         	movff	OutSeg@pInput,OutSeg@cur
 29239                           
 29240                           ; BSR set to: 0
 29241                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 29242  016A1C  0E00               	movlw	0
 29243  016A1E  6E33               	movwf	OutSeg@a,c
 29244  016A20                     l15271:
 29245                           
 29246                           ; BSR set to: 0
 29247  016A20  0E07               	movlw	7
 29248  016A22  6433               	cpfsgt	OutSeg@a,c
 29249  016A24  D001               	goto	l15275
 29250  016A26  D027               	goto	l15283
 29251  016A28                     l15275:
 29252                           
 29253                           ;HMI.c: 87: {
 29254                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 29255  016A28  C035  F064         	movff	OutSeg@cur,??_OutSeg
 29256  016A2C  0E01               	movlw	1
 29257  016A2E  0100               	movlb	0	; () banked
 29258  016A30  1764               	andwf	??_OutSeg& (0+255),f,b
 29259  016A32  0E06               	movlw	6
 29260  016A34  0100               	movlb	0	; () banked
 29261  016A36  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 29262  016A38                     u13185:
 29263  016A38  0100               	movlb	0	; () banked
 29264  016A3A  90D8               	bcf	status,0,c
 29265  016A3C  3764               	rlcf	??_OutSeg& (0+255),f,b
 29266  016A3E  0100               	movlb	0	; () banked
 29267  016A40  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 29268  016A42  D7FA               	goto	u13185
 29269  016A44  0100               	movlb	0	; () banked
 29270  016A46  5164               	movf	??_OutSeg& (0+255),w,b
 29271  016A48  6E34               	movwf	OutSeg@segset,c
 29272                           
 29273                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 29274  016A4A  0100               	movlb	0	; () banked
 29275  016A4C  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 29276  016A4E  42E8               	rrncf	wreg,f,c
 29277  016A50  0BF8               	andlw	248
 29278  016A52  1033               	iorwf	OutSeg@a,w,c
 29279  016A54  1034               	iorwf	OutSeg@segset,w,c
 29280  016A56  0100               	movlb	0	; () banked
 29281  016A58  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 29282                           
 29283                           ;HMI.c: 90: cur >>= 1;
 29284  016A5A  90D8               	bcf	status,0,c
 29285  016A5C  3235               	rrcf	OutSeg@cur,f,c
 29286                           
 29287                           ; BSR set to: 0
 29288                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 29289  016A5E  0E63               	movlw	low _SPI1
 29290  016A60  0100               	movlb	0	; () banked
 29291  016A62  6F60               	movwf	SPI_Send@pInput& (0+255),b
 29292  016A64  0E01               	movlw	high _SPI1
 29293  016A66  0100               	movlb	0	; () banked
 29294  016A68  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 29295  016A6A  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 29296  016A6E  EC90  F0B7         	call	_SPI_Send	;wreg free
 29297  016A72  2A33               	incf	OutSeg@a,f,c
 29298  016A74  D7D5               	goto	l15271
 29299  016A76                     l15283:
 29300                           
 29301                           ;HMI.c: 96: }
 29302                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 29303  016A76  0E63               	movlw	low _SPI1
 29304  016A78  0100               	movlb	0	; () banked
 29305  016A7A  6F60               	movwf	SPI_Send@pInput& (0+255),b
 29306  016A7C  0E01               	movlw	high _SPI1
 29307  016A7E  0100               	movlb	0	; () banked
 29308  016A80  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 29309  016A82  0E00               	movlw	0
 29310  016A84  0100               	movlb	0	; () banked
 29311  016A86  6F62               	movwf	SPI_Send@pData& (0+255),b
 29312  016A88  EC90  F0B7         	call	_SPI_Send	;wreg free
 29313  016A8C  0012               	return	
 29314  016A8E                     __end_of_OutSeg:
 29315                           	opt stack 0
 29316                           tosu	equ	0xFFF
 29317                           tosh	equ	0xFFE
 29318                           tosl	equ	0xFFD
 29319                           pclath	equ	0xFFA
 29320                           tblptru	equ	0xFF8
 29321                           tblptrh	equ	0xFF7
 29322                           tblptrl	equ	0xFF6
 29323                           tablat	equ	0xFF5
 29324                           prodh	equ	0xFF4
 29325                           prodl	equ	0xFF3
 29326                           intcon	equ	0xFF2
 29327                           indf0	equ	0xFEF
 29328                           postinc0	equ	0xFEE
 29329                           fsr0h	equ	0xFEA
 29330                           fsr0l	equ	0xFE9
 29331                           wreg	equ	0xFE8
 29332                           indf1	equ	0xFE7
 29333                           postdec1	equ	0xFE5
 29334                           fsr1h	equ	0xFE2
 29335                           fsr1l	equ	0xFE1
 29336                           indf2	equ	0xFDF
 29337                           postinc2	equ	0xFDE
 29338                           postdec2	equ	0xFDD
 29339                           plusw2	equ	0xFDB
 29340                           fsr2h	equ	0xFDA
 29341                           fsr2l	equ	0xFD9
 29342                           status	equ	0xFD8
 29343                           
 29344 ;; *************** function _Console_Render *****************
 29345 ;; Defined at:
 29346 ;;		line 377 in file "Library/Console.c"
 29347 ;; Parameters:    Size  Location     Type
 29348 ;;		None
 29349 ;; Auto vars:     Size  Location     Type
 29350 ;;  lCursor         4   38[BANK0 ] struct Point
 29351 ;;  y               1   43[BANK0 ] unsigned char 
 29352 ;;  x               1   42[BANK0 ] unsigned char 
 29353 ;;  temp            1   37[BANK0 ] unsigned char 
 29354 ;;  Temp            2    0        unsigned short 
 29355 ;; Return value:  Size  Location     Type
 29356 ;;                  1    wreg      void 
 29357 ;; Registers used:
 29358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29359 ;; Tracked objects:
 29360 ;;		On entry : 0/0
 29361 ;;		On exit  : 0/0
 29362 ;;		Unchanged: 0/0
 29363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29365 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29367 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29368 ;;Total ram usage:        9 bytes
 29369 ;; Hardware stack levels used:    1
 29370 ;; Hardware stack levels required when called:   11
 29371 ;; This function calls:
 29372 ;;		_Console_MakeField
 29373 ;;		_LCD_DrawField
 29374 ;;		_LCD_FillRectangle
 29375 ;; This function is called by:
 29376 ;;		_main
 29377 ;; This function uses a non-reentrant model
 29378 ;;
 29379                           
 29380                           	psect	text147
 29381  013152                     __ptext147:
 29382                           	opt stack 0
 29383  013152                     _Console_Render:
 29384                           	opt stack 19
 29385                           
 29386                           ;Console.c: 379: Colour Temp;
 29387                           ;Console.c: 380: if (change)
 29388                           
 29389                           ;incstack = 0
 29390  013152  0100               	movlb	0	; () banked
 29391  013154  51FC               	movf	_change& (0+255),w,b
 29392  013156  B4D8               	btfsc	status,2,c
 29393  013158  0012               	return	
 29394                           
 29395                           ; BSR set to: 0
 29396                           ;Console.c: 381: {
 29397                           ;Console.c: 382: UINT8 x, y, temp;
 29398                           ;Console.c: 383: Point lCursor = {6,6};
 29399  01315A  C1EC  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 29400  01315E  C1ED  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 29401  013162  C1EE  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 29402  013166  C1EF  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 29403                           
 29404                           ; BSR set to: 0
 29405                           ;Console.c: 385: if (clearall)
 29406  01316A  0100               	movlb	0	; () banked
 29407  01316C  51E9               	movf	_clearall& (0+255),w,b
 29408  01316E  B4D8               	btfsc	status,2,c
 29409  013170  D004               	goto	l1056
 29410                           
 29411                           ; BSR set to: 0
 29412                           ;Console.c: 386: {
 29413                           ;Console.c: 389: temp = lBufferY;
 29414  013172  C036  F085         	movff	_lBufferY,Console_Render@temp
 29415                           
 29416                           ; BSR set to: 0
 29417                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 29418  013176  0E0F               	movlw	15
 29419  013178  6E36               	movwf	_lBufferY,c
 29420  01317A                     l1056:
 29421                           
 29422                           ; BSR set to: 0
 29423                           ;Console.c: 391: }
 29424                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 29425  01317A  0E00               	movlw	0
 29426  01317C  0100               	movlb	0	; () banked
 29427  01317E  6F8B               	movwf	Console_Render@y& (0+255),b
 29428  013180  D0DF               	goto	l15877
 29429  013182                     l15847:
 29430                           
 29431                           ; BSR set to: 0
 29432                           ;Console.c: 394: {
 29433                           ;Console.c: 395: gForecolour = lCBuffer[y];
 29434  013182  0100               	movlb	0	; () banked
 29435  013184  518B               	movf	Console_Render@y& (0+255),w,b
 29436  013186  0D02               	mullw	2
 29437  013188  0E00               	movlw	low _lCBuffer
 29438  01318A  24F3               	addwf	prodl,w,c
 29439  01318C  6ED9               	movwf	fsr2l,c
 29440  01318E  0E02               	movlw	high _lCBuffer
 29441  013190  20F4               	addwfc	prodh,w,c
 29442  013192  6EDA               	movwf	fsr2h,c
 29443  013194  CFDE F0FA          	movff	postinc2,_gForecolour
 29444  013198  CFDD F0FB          	movff	postdec2,_gForecolour+1
 29445                           
 29446                           ; BSR set to: 0
 29447                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 29448  01319C  0E00               	movlw	0
 29449  01319E  0100               	movlb	0	; () banked
 29450  0131A0  6F8A               	movwf	Console_Render@x& (0+255),b
 29451  0131A2                     l15851:
 29452                           
 29453                           ; BSR set to: 0
 29454  0131A2  0E13               	movlw	19
 29455  0131A4  0100               	movlb	0	; () banked
 29456  0131A6  658A               	cpfsgt	Console_Render@x& (0+255),b
 29457  0131A8  D001               	goto	l15855
 29458  0131AA  D0BE               	goto	l15871
 29459  0131AC                     l15855:
 29460                           
 29461                           ; BSR set to: 0
 29462                           ;Console.c: 397: {
 29463                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 29464  0131AC  0100               	movlb	0	; () banked
 29465  0131AE  518B               	movf	Console_Render@y& (0+255),w,b
 29466  0131B0  0D14               	mullw	20
 29467  0131B2  0E7D               	movlw	low _lBuffer
 29468  0131B4  0100               	movlb	0	; () banked
 29469  0131B6  6F83               	movwf	??_Console_Render& (0+255),b
 29470  0131B8  0E02               	movlw	high _lBuffer
 29471  0131BA  0100               	movlb	0	; () banked
 29472  0131BC  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 29473  0131BE  50F3               	movf	prodl,w,c
 29474  0131C0  0100               	movlb	0	; () banked
 29475  0131C2  2783               	addwf	??_Console_Render& (0+255),f,b
 29476  0131C4  50F4               	movf	prodh,w,c
 29477  0131C6  0100               	movlb	0	; () banked
 29478  0131C8  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 29479  0131CA  0100               	movlb	0	; () banked
 29480  0131CC  518A               	movf	Console_Render@x& (0+255),w,b
 29481  0131CE  0D01               	mullw	1
 29482  0131D0  50F3               	movf	prodl,w,c
 29483  0131D2  0100               	movlb	0	; () banked
 29484  0131D4  2583               	addwf	??_Console_Render& (0+255),w,b
 29485  0131D6  6ED9               	movwf	fsr2l,c
 29486  0131D8  50F4               	movf	prodh,w,c
 29487  0131DA  0100               	movlb	0	; () banked
 29488  0131DC  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 29489  0131DE  6EDA               	movwf	fsr2h,c
 29490  0131E0  AEDF               	btfss	indf2,7,c
 29491  0131E2  D09A               	goto	l15865
 29492                           
 29493                           ; BSR set to: 0
 29494                           ;Console.c: 399: {
 29495                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 29496  0131E4  0100               	movlb	0	; () banked
 29497  0131E6  518B               	movf	Console_Render@y& (0+255),w,b
 29498  0131E8  0D14               	mullw	20
 29499  0131EA  0E7D               	movlw	low _lBuffer
 29500  0131EC  0100               	movlb	0	; () banked
 29501  0131EE  6F83               	movwf	??_Console_Render& (0+255),b
 29502  0131F0  0E02               	movlw	high _lBuffer
 29503  0131F2  0100               	movlb	0	; () banked
 29504  0131F4  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 29505  0131F6  50F3               	movf	prodl,w,c
 29506  0131F8  0100               	movlb	0	; () banked
 29507  0131FA  2783               	addwf	??_Console_Render& (0+255),f,b
 29508  0131FC  50F4               	movf	prodh,w,c
 29509  0131FE  0100               	movlb	0	; () banked
 29510  013200  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 29511  013202  0100               	movlb	0	; () banked
 29512  013204  518A               	movf	Console_Render@x& (0+255),w,b
 29513  013206  0D01               	mullw	1
 29514  013208  50F3               	movf	prodl,w,c
 29515  01320A  0100               	movlb	0	; () banked
 29516  01320C  2583               	addwf	??_Console_Render& (0+255),w,b
 29517  01320E  6ED9               	movwf	fsr2l,c
 29518  013210  50F4               	movf	prodh,w,c
 29519  013212  0100               	movlb	0	; () banked
 29520  013214  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 29521  013216  6EDA               	movwf	fsr2h,c
 29522  013218  0E7F               	movlw	127
 29523  01321A  16DF               	andwf	indf2,f,c
 29524                           
 29525                           ;Console.c: 401: if (lBuffer[y][x])
 29526  01321C  0100               	movlb	0	; () banked
 29527  01321E  518B               	movf	Console_Render@y& (0+255),w,b
 29528  013220  0D14               	mullw	20
 29529  013222  0E7D               	movlw	low _lBuffer
 29530  013224  0100               	movlb	0	; () banked
 29531  013226  6F83               	movwf	??_Console_Render& (0+255),b
 29532  013228  0E02               	movlw	high _lBuffer
 29533  01322A  0100               	movlb	0	; () banked
 29534  01322C  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 29535  01322E  50F3               	movf	prodl,w,c
 29536  013230  0100               	movlb	0	; () banked
 29537  013232  2783               	addwf	??_Console_Render& (0+255),f,b
 29538  013234  50F4               	movf	prodh,w,c
 29539  013236  0100               	movlb	0	; () banked
 29540  013238  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 29541  01323A  0100               	movlb	0	; () banked
 29542  01323C  518A               	movf	Console_Render@x& (0+255),w,b
 29543  01323E  0D01               	mullw	1
 29544  013240  50F3               	movf	prodl,w,c
 29545  013242  0100               	movlb	0	; () banked
 29546  013244  2583               	addwf	??_Console_Render& (0+255),w,b
 29547  013246  6ED9               	movwf	fsr2l,c
 29548  013248  50F4               	movf	prodh,w,c
 29549  01324A  0100               	movlb	0	; () banked
 29550  01324C  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 29551  01324E  6EDA               	movwf	fsr2h,c
 29552  013250  50DF               	movf	indf2,w,c
 29553  013252  B4D8               	btfsc	status,2,c
 29554  013254  D04A               	goto	l15863
 29555                           
 29556                           ; BSR set to: 0
 29557                           ;Console.c: 402: {
 29558                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 29559  013256  C0DE  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 29560  01325A  C0DF  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 29561  01325E  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 29562  013262  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 29563  013266  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 29564  01326A  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 29565  01326E  C1F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 29566  013272  C1F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 29567  013276  C1F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 29568  01327A  C1F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 29569  01327E  ECE8  F0B6         	call	_LCD_FillRectangle	;wreg free
 29570                           
 29571                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 29572  013282  0100               	movlb	0	; () banked
 29573  013284  518B               	movf	Console_Render@y& (0+255),w,b
 29574  013286  0D14               	mullw	20
 29575  013288  0E7D               	movlw	low _lBuffer
 29576  01328A  0100               	movlb	0	; () banked
 29577  01328C  6F83               	movwf	??_Console_Render& (0+255),b
 29578  01328E  0E02               	movlw	high _lBuffer
 29579  013290  0100               	movlb	0	; () banked
 29580  013292  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 29581  013294  50F3               	movf	prodl,w,c
 29582  013296  0100               	movlb	0	; () banked
 29583  013298  2783               	addwf	??_Console_Render& (0+255),f,b
 29584  01329A  50F4               	movf	prodh,w,c
 29585  01329C  0100               	movlb	0	; () banked
 29586  01329E  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 29587  0132A0  0100               	movlb	0	; () banked
 29588  0132A2  518A               	movf	Console_Render@x& (0+255),w,b
 29589  0132A4  0D01               	mullw	1
 29590  0132A6  50F3               	movf	prodl,w,c
 29591  0132A8  0100               	movlb	0	; () banked
 29592  0132AA  2583               	addwf	??_Console_Render& (0+255),w,b
 29593  0132AC  6ED9               	movwf	fsr2l,c
 29594  0132AE  50F4               	movf	prodh,w,c
 29595  0132B0  0100               	movlb	0	; () banked
 29596  0132B2  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 29597  0132B4  6EDA               	movwf	fsr2h,c
 29598  0132B6  50DF               	movf	indf2,w,c
 29599  0132B8  ECFA  F0AA         	call	_Console_MakeField
 29600  0132BC  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 29601  0132C0  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 29602  0132C4  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 29603  0132C8  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 29604  0132CC  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 29605  0132D0  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 29606  0132D4  C1F4  F078         	movff	_gCharSize,LCD_DrawField@pSize
 29607  0132D8  C1F5  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 29608  0132DC  C1F6  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 29609  0132E0  C1F7  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 29610  0132E4  EC05  F0B1         	call	_LCD_DrawField	;wreg free
 29611                           
 29612                           ;Console.c: 405: }
 29613  0132E8  D017               	goto	l15865
 29614  0132EA                     l15863:
 29615                           
 29616                           ;Console.c: 406: else
 29617                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 29618  0132EA  0E00               	movlw	0
 29619  0132EC  0100               	movlb	0	; () banked
 29620  0132EE  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 29621  0132F0  0E00               	movlw	0
 29622  0132F2  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 29623  0132F4  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 29624  0132F8  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 29625  0132FC  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 29626  013300  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 29627  013304  C1F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 29628  013308  C1F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 29629  01330C  C1F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 29630  013310  C1F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 29631  013314  ECE8  F0B6         	call	_LCD_FillRectangle	;wreg free
 29632  013318                     l15865:
 29633                           
 29634                           ;Console.c: 408: }
 29635                           ;Console.c: 409: lCursor.x += (5 + 1);
 29636  013318  0E06               	movlw	6
 29637  01331A  0100               	movlb	0	; () banked
 29638  01331C  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 29639  01331E  0E00               	movlw	0
 29640  013320  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 29641                           
 29642                           ; BSR set to: 0
 29643  013322  0100               	movlb	0	; () banked
 29644  013324  2B8A               	incf	Console_Render@x& (0+255),f,b
 29645  013326  D73D               	goto	l15851
 29646  013328                     l15871:
 29647                           
 29648                           ; BSR set to: 0
 29649                           ;Console.c: 410: }
 29650                           ;Console.c: 411: lCursor.y += (7 + 1);
 29651  013328  0E08               	movlw	8
 29652  01332A  0100               	movlb	0	; () banked
 29653  01332C  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 29654  01332E  0E00               	movlw	0
 29655  013330  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 29656                           
 29657                           ; BSR set to: 0
 29658                           ;Console.c: 412: lCursor.x = 6;
 29659  013332  0E00               	movlw	0
 29660  013334  0100               	movlb	0	; () banked
 29661  013336  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 29662  013338  0E06               	movlw	6
 29663  01333A  6F86               	movwf	Console_Render@lCursor& (0+255),b
 29664                           
 29665                           ; BSR set to: 0
 29666  01333C  0100               	movlb	0	; () banked
 29667  01333E  2B8B               	incf	Console_Render@y& (0+255),f,b
 29668  013340                     l15877:
 29669                           
 29670                           ; BSR set to: 0
 29671  013340  0100               	movlb	0	; () banked
 29672  013342  518B               	movf	Console_Render@y& (0+255),w,b
 29673  013344  5C36               	subwf	_lBufferY,w,c
 29674  013346  B0D8               	btfsc	status,0,c
 29675  013348  D71C               	goto	l15847
 29676                           
 29677                           ; BSR set to: 0
 29678                           ;Console.c: 413: }
 29679                           ;Console.c: 415: if (clearall)
 29680                           
 29681                           ; BSR set to: 0
 29682  01334A  0100               	movlb	0	; () banked
 29683  01334C  51E9               	movf	_clearall& (0+255),w,b
 29684  01334E  B4D8               	btfsc	status,2,c
 29685  013350  0012               	return	
 29686                           
 29687                           ; BSR set to: 0
 29688                           ;Console.c: 416: {
 29689                           ;Console.c: 417: clearall = 0;
 29690  013352  0E00               	movlw	0
 29691  013354  0100               	movlb	0	; () banked
 29692  013356  6FE9               	movwf	_clearall& (0+255),b
 29693                           
 29694                           ; BSR set to: 0
 29695                           ;Console.c: 418: lBufferY = temp;
 29696  013358  C085  F036         	movff	Console_Render@temp,_lBufferY
 29697                           
 29698                           ; BSR set to: 0
 29699  01335C  0012               	return	
 29700  01335E                     __end_of_Console_Render:
 29701                           	opt stack 0
 29702                           tosu	equ	0xFFF
 29703                           tosh	equ	0xFFE
 29704                           tosl	equ	0xFFD
 29705                           pclath	equ	0xFFA
 29706                           tblptru	equ	0xFF8
 29707                           tblptrh	equ	0xFF7
 29708                           tblptrl	equ	0xFF6
 29709                           tablat	equ	0xFF5
 29710                           prodh	equ	0xFF4
 29711                           prodl	equ	0xFF3
 29712                           intcon	equ	0xFF2
 29713                           indf0	equ	0xFEF
 29714                           postinc0	equ	0xFEE
 29715                           fsr0h	equ	0xFEA
 29716                           fsr0l	equ	0xFE9
 29717                           wreg	equ	0xFE8
 29718                           indf1	equ	0xFE7
 29719                           postdec1	equ	0xFE5
 29720                           fsr1h	equ	0xFE2
 29721                           fsr1l	equ	0xFE1
 29722                           indf2	equ	0xFDF
 29723                           postinc2	equ	0xFDE
 29724                           postdec2	equ	0xFDD
 29725                           plusw2	equ	0xFDB
 29726                           fsr2h	equ	0xFDA
 29727                           fsr2l	equ	0xFD9
 29728                           status	equ	0xFD8
 29729                           
 29730 ;; *************** function _LCD_FillRectangle *****************
 29731 ;; Defined at:
 29732 ;;		line 318 in file "Library/LCD.c"
 29733 ;; Parameters:    Size  Location     Type
 29734 ;;  pColour         2    9[BANK0 ] unsigned short 
 29735 ;;  pPoint          4   11[BANK0 ] struct Point
 29736 ;;  pSize           4   15[BANK0 ] struct Point
 29737 ;; Auto vars:     Size  Location     Type
 29738 ;;  j               1   22[BANK0 ] unsigned char 
 29739 ;;  i               1   21[BANK0 ] unsigned char 
 29740 ;; Return value:  Size  Location     Type
 29741 ;;                  1    wreg      void 
 29742 ;; Registers used:
 29743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29744 ;; Tracked objects:
 29745 ;;		On entry : 0/0
 29746 ;;		On exit  : 0/0
 29747 ;;		Unchanged: 0/0
 29748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29749 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29752 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29753 ;;Total ram usage:       14 bytes
 29754 ;; Hardware stack levels used:    1
 29755 ;; Hardware stack levels required when called:   10
 29756 ;; This function calls:
 29757 ;;		_LCD_Word_Write
 29758 ;;		_Set_Addr_Window
 29759 ;; This function is called by:
 29760 ;;		_Console_Render
 29761 ;;		_Console_ClearLine
 29762 ;; This function uses a non-reentrant model
 29763 ;;
 29764                           
 29765                           	psect	text148
 29766  016DD0                     __ptext148:
 29767                           	opt stack 0
 29768  016DD0                     _LCD_FillRectangle:
 29769                           	opt stack 19
 29770                           
 29771                           ;LCD.c: 320: UINT8 i = 0x00;
 29772                           
 29773                           ; BSR set to: 0
 29774                           ;incstack = 0
 29775  016DD0  0E00               	movlw	0
 29776  016DD2  0100               	movlb	0	; () banked
 29777  016DD4  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 29778                           
 29779                           ;LCD.c: 321: UINT8 j = 0x00;
 29780  016DD6  0E00               	movlw	0
 29781  016DD8  0100               	movlb	0	; () banked
 29782  016DDA  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 29783                           
 29784                           ; BSR set to: 0
 29785                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 29786  016DDC  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 29787  016DE0  0100               	movlb	0	; () banked
 29788  016DE2  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 29789  016DE4  0100               	movlb	0	; () banked
 29790  016DE6  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 29791  016DE8  0100               	movlb	0	; () banked
 29792  016DEA  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 29793  016DEC  0100               	movlb	0	; () banked
 29794  016DEE  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 29795  016DF0  0100               	movlb	0	; () banked
 29796  016DF2  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 29797  016DF4  0100               	movlb	0	; () banked
 29798  016DF6  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 29799  016DF8  0100               	movlb	0	; () banked
 29800  016DFA  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 29801  016DFC  0100               	movlb	0	; () banked
 29802  016DFE  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 29803  016E00  0100               	movlb	0	; () banked
 29804  016E02  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 29805  016E04  0100               	movlb	0	; () banked
 29806  016E06  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 29807  016E08  0100               	movlb	0	; () banked
 29808  016E0A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 29809  016E0C  EC62  F0AF         	call	_Set_Addr_Window
 29810                           
 29811                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 29812  016E10  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 29813  016E14                     l15167:
 29814  016E14  0100               	movlb	0	; () banked
 29815  016E16  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 29816  016E18  0100               	movlb	0	; () banked
 29817  016E1A  B4D8               	btfsc	status,2,c
 29818  016E1C  0012               	return	
 29819                           
 29820                           ; BSR set to: 0
 29821                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 29822                           
 29823                           ; BSR set to: 0
 29824  016E1E  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 29825  016E22                     l15171:
 29826                           
 29827                           ; BSR set to: 0
 29828  016E22  0100               	movlb	0	; () banked
 29829  016E24  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 29830  016E26  0100               	movlb	0	; () banked
 29831  016E28  B4D8               	btfsc	status,2,c
 29832  016E2A  D009               	goto	l15181
 29833                           
 29834                           ; BSR set to: 0
 29835                           ;LCD.c: 333: LCD_Word_Write(pColour);
 29836                           
 29837                           ; BSR set to: 0
 29838                           
 29839                           ; BSR set to: 0
 29840  016E2C  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 29841  016E30  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 29842  016E34  ECE9  F0BE         	call	_LCD_Word_Write	;wreg free
 29843  016E38  0100               	movlb	0	; () banked
 29844  016E3A  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 29845  016E3C  D7F2               	goto	l15171
 29846  016E3E                     l15181:
 29847                           
 29848                           ; BSR set to: 0
 29849  016E3E  0100               	movlb	0	; () banked
 29850  016E40  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 29851  016E42  D7E8               	goto	l15167
 29852  016E44                     __end_of_LCD_FillRectangle:
 29853                           	opt stack 0
 29854                           tosu	equ	0xFFF
 29855                           tosh	equ	0xFFE
 29856                           tosl	equ	0xFFD
 29857                           pclath	equ	0xFFA
 29858                           tblptru	equ	0xFF8
 29859                           tblptrh	equ	0xFF7
 29860                           tblptrl	equ	0xFF6
 29861                           tablat	equ	0xFF5
 29862                           prodh	equ	0xFF4
 29863                           prodl	equ	0xFF3
 29864                           intcon	equ	0xFF2
 29865                           indf0	equ	0xFEF
 29866                           postinc0	equ	0xFEE
 29867                           fsr0h	equ	0xFEA
 29868                           fsr0l	equ	0xFE9
 29869                           wreg	equ	0xFE8
 29870                           indf1	equ	0xFE7
 29871                           postdec1	equ	0xFE5
 29872                           fsr1h	equ	0xFE2
 29873                           fsr1l	equ	0xFE1
 29874                           indf2	equ	0xFDF
 29875                           postinc2	equ	0xFDE
 29876                           postdec2	equ	0xFDD
 29877                           plusw2	equ	0xFDB
 29878                           fsr2h	equ	0xFDA
 29879                           fsr2l	equ	0xFD9
 29880                           status	equ	0xFD8
 29881                           
 29882 ;; *************** function _LCD_DrawField *****************
 29883 ;; Defined at:
 29884 ;;		line 393 in file "Library/LCD.c"
 29885 ;; Parameters:    Size  Location     Type
 29886 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 29887 ;;		 -> Console_MakeField@Fill(70), 
 29888 ;;  pPoint          4   20[BANK0 ] struct Point
 29889 ;;  pSize           4   24[BANK0 ] struct Point
 29890 ;; Auto vars:     Size  Location     Type
 29891 ;;  count           2   30[BANK0 ] unsigned short 
 29892 ;;  i               1   34[BANK0 ] unsigned char 
 29893 ;;  ymax            1   33[BANK0 ] unsigned char 
 29894 ;;  xmax            1   32[BANK0 ] unsigned char 
 29895 ;; Return value:  Size  Location     Type
 29896 ;;                  1    wreg      void 
 29897 ;; Registers used:
 29898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29899 ;; Tracked objects:
 29900 ;;		On entry : 0/0
 29901 ;;		On exit  : 0/0
 29902 ;;		Unchanged: 0/0
 29903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29904 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29905 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29906 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29907 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29908 ;;Total ram usage:       17 bytes
 29909 ;; Hardware stack levels used:    1
 29910 ;; Hardware stack levels required when called:   10
 29911 ;; This function calls:
 29912 ;;		_LCD_Word_Write
 29913 ;;		_Set_Addr_Window
 29914 ;;		___wmul
 29915 ;; This function is called by:
 29916 ;;		_Console_Render
 29917 ;; This function uses a non-reentrant model
 29918 ;;
 29919                           
 29920                           	psect	text149
 29921  01620A                     __ptext149:
 29922                           	opt stack 0
 29923  01620A                     _LCD_DrawField:
 29924                           	opt stack 19
 29925                           
 29926                           ;LCD.c: 396: UINT8 i = 0x00;
 29927                           
 29928                           ; BSR set to: 0
 29929                           ;incstack = 0
 29930  01620A  0E00               	movlw	0
 29931  01620C  0100               	movlb	0	; () banked
 29932  01620E  6F82               	movwf	LCD_DrawField@i& (0+255),b
 29933                           
 29934                           ; BSR set to: 0
 29935                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 29936  016210  0100               	movlb	0	; () banked
 29937  016212  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 29938  016214  0100               	movlb	0	; () banked
 29939  016216  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 29940  016218  0100               	movlb	0	; () banked
 29941  01621A  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 29942                           
 29943                           ; BSR set to: 0
 29944                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 29945  01621C  0100               	movlb	0	; () banked
 29946  01621E  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 29947  016220  0100               	movlb	0	; () banked
 29948  016222  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 29949  016224  0100               	movlb	0	; () banked
 29950  016226  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 29951                           
 29952                           ; BSR set to: 0
 29953                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 29954  016228  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 29955  01622C  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 29956  016230  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 29957  016234  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 29958  016238  ECFB  F0BC         	call	___wmul	;wreg free
 29959  01623C  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 29960  016240  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 29961                           
 29962                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 29963  016244  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 29964  016248  0100               	movlb	0	; () banked
 29965  01624A  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 29966  01624C  0100               	movlb	0	; () banked
 29967  01624E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 29968  016250  0100               	movlb	0	; () banked
 29969  016252  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 29970  016254  0100               	movlb	0	; () banked
 29971  016256  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 29972  016258  0100               	movlb	0	; () banked
 29973  01625A  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 29974  01625C  EC62  F0AF         	call	_Set_Addr_Window
 29975                           
 29976                           ;LCD.c: 403: for(i = 0; i < count; i++)
 29977  016260  0E00               	movlw	0
 29978  016262  0100               	movlb	0	; () banked
 29979  016264  6F82               	movwf	LCD_DrawField@i& (0+255),b
 29980  016266  D013               	goto	l15203
 29981  016268                     l15199:
 29982                           
 29983                           ; BSR set to: 0
 29984                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 29985  016268  0100               	movlb	0	; () banked
 29986  01626A  5182               	movf	LCD_DrawField@i& (0+255),w,b
 29987  01626C  0D02               	mullw	2
 29988  01626E  50F3               	movf	prodl,w,c
 29989  016270  0100               	movlb	0	; () banked
 29990  016272  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 29991  016274  6ED9               	movwf	fsr2l,c
 29992  016276  50F4               	movf	prodh,w,c
 29993  016278  0100               	movlb	0	; () banked
 29994  01627A  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 29995  01627C  6EDA               	movwf	fsr2h,c
 29996  01627E  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 29997  016282  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 29998  016286  ECE9  F0BE         	call	_LCD_Word_Write	;wreg free
 29999  01628A  0100               	movlb	0	; () banked
 30000  01628C  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 30001  01628E                     l15203:
 30002                           
 30003                           ; BSR set to: 0
 30004  01628E  0100               	movlb	0	; () banked
 30005  016290  5182               	movf	LCD_DrawField@i& (0+255),w,b
 30006  016292  0100               	movlb	0	; () banked
 30007  016294  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 30008  016296  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 30009  016298  0100               	movlb	0	; () banked
 30010  01629A  517E               	movf	LCD_DrawField@count& (0+255),w,b
 30011  01629C  0100               	movlb	0	; () banked
 30012  01629E  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 30013  0162A0  0100               	movlb	0	; () banked
 30014  0162A2  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 30015  0162A4  0100               	movlb	0	; () banked
 30016  0162A6  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 30017  0162A8  B0D8               	btfsc	status,0,c
 30018  0162AA  0012               	return	
 30019  0162AC  D7DD               	goto	l15199
 30020  0162AE                     __end_of_LCD_DrawField:
 30021                           	opt stack 0
 30022                           tosu	equ	0xFFF
 30023                           tosh	equ	0xFFE
 30024                           tosl	equ	0xFFD
 30025                           pclath	equ	0xFFA
 30026                           tblptru	equ	0xFF8
 30027                           tblptrh	equ	0xFF7
 30028                           tblptrl	equ	0xFF6
 30029                           tablat	equ	0xFF5
 30030                           prodh	equ	0xFF4
 30031                           prodl	equ	0xFF3
 30032                           intcon	equ	0xFF2
 30033                           indf0	equ	0xFEF
 30034                           postinc0	equ	0xFEE
 30035                           fsr0h	equ	0xFEA
 30036                           fsr0l	equ	0xFE9
 30037                           wreg	equ	0xFE8
 30038                           indf1	equ	0xFE7
 30039                           postdec1	equ	0xFE5
 30040                           fsr1h	equ	0xFE2
 30041                           fsr1l	equ	0xFE1
 30042                           indf2	equ	0xFDF
 30043                           postinc2	equ	0xFDE
 30044                           postdec2	equ	0xFDD
 30045                           plusw2	equ	0xFDB
 30046                           fsr2h	equ	0xFDA
 30047                           fsr2l	equ	0xFD9
 30048                           status	equ	0xFD8
 30049                           
 30050 ;; *************** function ___wmul *****************
 30051 ;; Defined at:
 30052 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 30053 ;; Parameters:    Size  Location     Type
 30054 ;;  multiplier      2    0[BANK0 ] unsigned int 
 30055 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 30056 ;; Auto vars:     Size  Location     Type
 30057 ;;  product         2    4[BANK0 ] unsigned int 
 30058 ;; Return value:  Size  Location     Type
 30059 ;;                  2    0[BANK0 ] unsigned int 
 30060 ;; Registers used:
 30061 ;;		wreg, status,2, status,0, prodl, prodh
 30062 ;; Tracked objects:
 30063 ;;		On entry : 0/0
 30064 ;;		On exit  : 0/0
 30065 ;;		Unchanged: 0/0
 30066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30067 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30070 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30071 ;;Total ram usage:        6 bytes
 30072 ;; Hardware stack levels used:    1
 30073 ;; Hardware stack levels required when called:    7
 30074 ;; This function calls:
 30075 ;;		Nothing
 30076 ;; This function is called by:
 30077 ;;		_LCD_DrawField
 30078 ;;		_main
 30079 ;;		_printf
 30080 ;; This function uses a non-reentrant model
 30081 ;;
 30082                           
 30083                           	psect	text150
 30084  0179F6                     __ptext150:
 30085                           	opt stack 0
 30086  0179F6                     ___wmul:
 30087                           	opt stack 22
 30088                           
 30089                           ; BSR set to: 0
 30090                           ;incstack = 0
 30091  0179F6  0100               	movlb	0	; () banked
 30092  0179F8  5160               	movf	___wmul@multiplier& (0+255),w,b
 30093  0179FA  0100               	movlb	0	; () banked
 30094  0179FC  0362               	mulwf	___wmul@multiplicand& (0+255),b
 30095  0179FE  CFF3 F064          	movff	prodl,___wmul@product
 30096  017A02  CFF4 F065          	movff	prodh,___wmul@product+1
 30097  017A06  0100               	movlb	0	; () banked
 30098  017A08  5160               	movf	___wmul@multiplier& (0+255),w,b
 30099  017A0A  0100               	movlb	0	; () banked
 30100  017A0C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 30101  017A0E  50F3               	movf	prodl,w,c
 30102  017A10  0100               	movlb	0	; () banked
 30103  017A12  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 30104  017A14  0100               	movlb	0	; () banked
 30105  017A16  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 30106  017A18  0100               	movlb	0	; () banked
 30107  017A1A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 30108  017A1C  50F3               	movf	prodl,w,c
 30109  017A1E  0100               	movlb	0	; () banked
 30110  017A20  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 30111                           
 30112                           ; BSR set to: 0
 30113  017A22  C064  F060         	movff	___wmul@product,?___wmul
 30114  017A26  C065  F061         	movff	___wmul@product+1,?___wmul+1
 30115  017A2A  0012               	return	
 30116  017A2C                     __end_of___wmul:
 30117                           	opt stack 0
 30118                           tosu	equ	0xFFF
 30119                           tosh	equ	0xFFE
 30120                           tosl	equ	0xFFD
 30121                           pclath	equ	0xFFA
 30122                           tblptru	equ	0xFF8
 30123                           tblptrh	equ	0xFF7
 30124                           tblptrl	equ	0xFF6
 30125                           tablat	equ	0xFF5
 30126                           prodh	equ	0xFF4
 30127                           prodl	equ	0xFF3
 30128                           intcon	equ	0xFF2
 30129                           indf0	equ	0xFEF
 30130                           postinc0	equ	0xFEE
 30131                           fsr0h	equ	0xFEA
 30132                           fsr0l	equ	0xFE9
 30133                           wreg	equ	0xFE8
 30134                           indf1	equ	0xFE7
 30135                           postdec1	equ	0xFE5
 30136                           fsr1h	equ	0xFE2
 30137                           fsr1l	equ	0xFE1
 30138                           indf2	equ	0xFDF
 30139                           postinc2	equ	0xFDE
 30140                           postdec2	equ	0xFDD
 30141                           plusw2	equ	0xFDB
 30142                           fsr2h	equ	0xFDA
 30143                           fsr2l	equ	0xFD9
 30144                           status	equ	0xFD8
 30145                           
 30146 ;; *************** function _Set_Addr_Window *****************
 30147 ;; Defined at:
 30148 ;;		line 214 in file "Library/LCD.c"
 30149 ;; Parameters:    Size  Location     Type
 30150 ;;  xs              1    wreg     unsigned char 
 30151 ;;  ys              1    5[BANK0 ] unsigned char 
 30152 ;;  xe              1    6[BANK0 ] unsigned char 
 30153 ;;  ye              1    7[BANK0 ] unsigned char 
 30154 ;; Auto vars:     Size  Location     Type
 30155 ;;  xs              1    8[BANK0 ] unsigned char 
 30156 ;; Return value:  Size  Location     Type
 30157 ;;                  1    wreg      void 
 30158 ;; Registers used:
 30159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30160 ;; Tracked objects:
 30161 ;;		On entry : 0/0
 30162 ;;		On exit  : 0/0
 30163 ;;		Unchanged: 0/0
 30164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30165 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30168 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30169 ;;Total ram usage:        4 bytes
 30170 ;; Hardware stack levels used:    1
 30171 ;; Hardware stack levels required when called:    9
 30172 ;; This function calls:
 30173 ;;		_LCD_Write
 30174 ;; This function is called by:
 30175 ;;		_LCD_Fill
 30176 ;;		_LCD_FillRectangle
 30177 ;;		_LCD_DrawField
 30178 ;;		_RAM_Address_Set
 30179 ;;		_LCD_DrawPixel
 30180 ;; This function uses a non-reentrant model
 30181 ;;
 30182                           
 30183                           	psect	text151
 30184  015EC4                     __ptext151:
 30185                           	opt stack 0
 30186  015EC4                     _Set_Addr_Window:
 30187                           	opt stack 18
 30188                           
 30189                           ; BSR set to: 0
 30190                           ;incstack = 0
 30191                           ;Set_Addr_Window@xs stored from wreg
 30192  015EC4  0100               	movlb	0	; () banked
 30193  015EC6  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 30194                           
 30195                           ;LCD.c: 216: ys+=2;
 30196  015EC8  0E02               	movlw	2
 30197  015ECA  0100               	movlb	0	; () banked
 30198  015ECC  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 30199                           
 30200                           ;LCD.c: 217: ye+=2;
 30201  015ECE  0E02               	movlw	2
 30202  015ED0  0100               	movlb	0	; () banked
 30203  015ED2  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 30204                           
 30205                           ;LCD.c: 218: xs+=3;
 30206  015ED4  0E03               	movlw	3
 30207  015ED6  0100               	movlb	0	; () banked
 30208  015ED8  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 30209                           
 30210                           ;LCD.c: 219: xe+=3;
 30211  015EDA  0E03               	movlw	3
 30212  015EDC  0100               	movlb	0	; () banked
 30213  015EDE  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 30214                           
 30215                           ; BSR set to: 0
 30216                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 30217  015EE0  0E00               	movlw	0
 30218  015EE2  0100               	movlb	0	; () banked
 30219  015EE4  6F63               	movwf	LCD_Write@mode& (0+255),b
 30220  015EE6  0E2A               	movlw	42
 30221  015EE8  EC7D  F0BE         	call	_LCD_Write
 30222                           
 30223                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 30224  015EEC  0E01               	movlw	1
 30225  015EEE  0100               	movlb	0	; () banked
 30226  015EF0  6F63               	movwf	LCD_Write@mode& (0+255),b
 30227  015EF2  0E00               	movlw	0
 30228  015EF4  EC7D  F0BE         	call	_LCD_Write
 30229                           
 30230                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 30231  015EF8  0E01               	movlw	1
 30232  015EFA  0100               	movlb	0	; () banked
 30233  015EFC  6F63               	movwf	LCD_Write@mode& (0+255),b
 30234  015EFE  0100               	movlb	0	; () banked
 30235  015F00  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 30236  015F02  EC7D  F0BE         	call	_LCD_Write
 30237                           
 30238                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 30239  015F06  0E01               	movlw	1
 30240  015F08  0100               	movlb	0	; () banked
 30241  015F0A  6F63               	movwf	LCD_Write@mode& (0+255),b
 30242  015F0C  0E00               	movlw	0
 30243  015F0E  EC7D  F0BE         	call	_LCD_Write
 30244                           
 30245                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 30246  015F12  0E01               	movlw	1
 30247  015F14  0100               	movlb	0	; () banked
 30248  015F16  6F63               	movwf	LCD_Write@mode& (0+255),b
 30249  015F18  0100               	movlb	0	; () banked
 30250  015F1A  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 30251  015F1C  EC7D  F0BE         	call	_LCD_Write
 30252                           
 30253                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 30254  015F20  0E00               	movlw	0
 30255  015F22  0100               	movlb	0	; () banked
 30256  015F24  6F63               	movwf	LCD_Write@mode& (0+255),b
 30257  015F26  0E2B               	movlw	43
 30258  015F28  EC7D  F0BE         	call	_LCD_Write
 30259                           
 30260                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 30261  015F2C  0E01               	movlw	1
 30262  015F2E  0100               	movlb	0	; () banked
 30263  015F30  6F63               	movwf	LCD_Write@mode& (0+255),b
 30264  015F32  0E00               	movlw	0
 30265  015F34  EC7D  F0BE         	call	_LCD_Write
 30266                           
 30267                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 30268  015F38  0E01               	movlw	1
 30269  015F3A  0100               	movlb	0	; () banked
 30270  015F3C  6F63               	movwf	LCD_Write@mode& (0+255),b
 30271  015F3E  0100               	movlb	0	; () banked
 30272  015F40  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 30273  015F42  EC7D  F0BE         	call	_LCD_Write
 30274                           
 30275                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 30276  015F46  0E01               	movlw	1
 30277  015F48  0100               	movlb	0	; () banked
 30278  015F4A  6F63               	movwf	LCD_Write@mode& (0+255),b
 30279  015F4C  0E00               	movlw	0
 30280  015F4E  EC7D  F0BE         	call	_LCD_Write
 30281                           
 30282                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 30283  015F52  0E01               	movlw	1
 30284  015F54  0100               	movlb	0	; () banked
 30285  015F56  6F63               	movwf	LCD_Write@mode& (0+255),b
 30286  015F58  0100               	movlb	0	; () banked
 30287  015F5A  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 30288  015F5C  EC7D  F0BE         	call	_LCD_Write
 30289                           
 30290                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 30291  015F60  0E00               	movlw	0
 30292  015F62  0100               	movlb	0	; () banked
 30293  015F64  6F63               	movwf	LCD_Write@mode& (0+255),b
 30294  015F66  0E2C               	movlw	44
 30295  015F68  EC7D  F0BE         	call	_LCD_Write
 30296  015F6C  0012               	return		;funcret
 30297  015F6E                     __end_of_Set_Addr_Window:
 30298                           	opt stack 0
 30299                           tosu	equ	0xFFF
 30300                           tosh	equ	0xFFE
 30301                           tosl	equ	0xFFD
 30302                           pclath	equ	0xFFA
 30303                           tblptru	equ	0xFF8
 30304                           tblptrh	equ	0xFF7
 30305                           tblptrl	equ	0xFF6
 30306                           tablat	equ	0xFF5
 30307                           prodh	equ	0xFF4
 30308                           prodl	equ	0xFF3
 30309                           intcon	equ	0xFF2
 30310                           indf0	equ	0xFEF
 30311                           postinc0	equ	0xFEE
 30312                           fsr0h	equ	0xFEA
 30313                           fsr0l	equ	0xFE9
 30314                           wreg	equ	0xFE8
 30315                           indf1	equ	0xFE7
 30316                           postdec1	equ	0xFE5
 30317                           fsr1h	equ	0xFE2
 30318                           fsr1l	equ	0xFE1
 30319                           indf2	equ	0xFDF
 30320                           postinc2	equ	0xFDE
 30321                           postdec2	equ	0xFDD
 30322                           plusw2	equ	0xFDB
 30323                           fsr2h	equ	0xFDA
 30324                           fsr2l	equ	0xFD9
 30325                           status	equ	0xFD8
 30326                           
 30327 ;; *************** function _LCD_Word_Write *****************
 30328 ;; Defined at:
 30329 ;;		line 198 in file "Library/LCD.c"
 30330 ;; Parameters:    Size  Location     Type
 30331 ;;  value           2    5[BANK0 ] unsigned short 
 30332 ;; Auto vars:     Size  Location     Type
 30333 ;;		None
 30334 ;; Return value:  Size  Location     Type
 30335 ;;                  1    wreg      void 
 30336 ;; Registers used:
 30337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30338 ;; Tracked objects:
 30339 ;;		On entry : 0/0
 30340 ;;		On exit  : 0/0
 30341 ;;		Unchanged: 0/0
 30342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30347 ;;Total ram usage:        2 bytes
 30348 ;; Hardware stack levels used:    1
 30349 ;; Hardware stack levels required when called:    9
 30350 ;; This function calls:
 30351 ;;		_LCD_Write
 30352 ;; This function is called by:
 30353 ;;		_LCD_Fill
 30354 ;;		_LCD_FillRectangle
 30355 ;;		_LCD_DrawField
 30356 ;;		_LCD_DrawPixel
 30357 ;; This function uses a non-reentrant model
 30358 ;;
 30359                           
 30360                           	psect	text152
 30361  017DD2                     __ptext152:
 30362                           	opt stack 0
 30363  017DD2                     _LCD_Word_Write:
 30364                           	opt stack 18
 30365                           
 30366                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 30367                           
 30368                           ;incstack = 0
 30369  017DD2  0E01               	movlw	1
 30370  017DD4  0100               	movlb	0	; () banked
 30371  017DD6  6F63               	movwf	LCD_Write@mode& (0+255),b
 30372  017DD8  0100               	movlb	0	; () banked
 30373  017DDA  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 30374  017DDC  EC7D  F0BE         	call	_LCD_Write
 30375                           
 30376                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 30377  017DE0  0E01               	movlw	1
 30378  017DE2  0100               	movlb	0	; () banked
 30379  017DE4  6F63               	movwf	LCD_Write@mode& (0+255),b
 30380  017DE6  0100               	movlb	0	; () banked
 30381  017DE8  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 30382  017DEA  EC7D  F0BE         	call	_LCD_Write
 30383  017DEE  0012               	return		;funcret
 30384  017DF0                     __end_of_LCD_Word_Write:
 30385                           	opt stack 0
 30386                           tosu	equ	0xFFF
 30387                           tosh	equ	0xFFE
 30388                           tosl	equ	0xFFD
 30389                           pclath	equ	0xFFA
 30390                           tblptru	equ	0xFF8
 30391                           tblptrh	equ	0xFF7
 30392                           tblptrl	equ	0xFF6
 30393                           tablat	equ	0xFF5
 30394                           prodh	equ	0xFF4
 30395                           prodl	equ	0xFF3
 30396                           intcon	equ	0xFF2
 30397                           indf0	equ	0xFEF
 30398                           postinc0	equ	0xFEE
 30399                           fsr0h	equ	0xFEA
 30400                           fsr0l	equ	0xFE9
 30401                           wreg	equ	0xFE8
 30402                           indf1	equ	0xFE7
 30403                           postdec1	equ	0xFE5
 30404                           fsr1h	equ	0xFE2
 30405                           fsr1l	equ	0xFE1
 30406                           indf2	equ	0xFDF
 30407                           postinc2	equ	0xFDE
 30408                           postdec2	equ	0xFDD
 30409                           plusw2	equ	0xFDB
 30410                           fsr2h	equ	0xFDA
 30411                           fsr2l	equ	0xFD9
 30412                           status	equ	0xFD8
 30413                           
 30414 ;; *************** function _LCD_Write *****************
 30415 ;; Defined at:
 30416 ;;		line 67 in file "Library/LCD.c"
 30417 ;; Parameters:    Size  Location     Type
 30418 ;;  value           1    wreg     unsigned char 
 30419 ;;  mode            1    3[BANK0 ] enum E6761
 30420 ;; Auto vars:     Size  Location     Type
 30421 ;;  value           1    4[BANK0 ] unsigned char 
 30422 ;; Return value:  Size  Location     Type
 30423 ;;                  1    wreg      void 
 30424 ;; Registers used:
 30425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 30426 ;; Tracked objects:
 30427 ;;		On entry : 0/0
 30428 ;;		On exit  : 0/0
 30429 ;;		Unchanged: 0/0
 30430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30431 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30435 ;;Total ram usage:        2 bytes
 30436 ;; Hardware stack levels used:    1
 30437 ;; Hardware stack levels required when called:    8
 30438 ;; This function calls:
 30439 ;;		_Mode_Set
 30440 ;;		_SPI_Send
 30441 ;; This function is called by:
 30442 ;;		_LCD_Init
 30443 ;;		_LCD_Word_Write
 30444 ;;		_Set_Addr_Window
 30445 ;;		_Set_Rotation
 30446 ;;		_LCD_WriteCMD
 30447 ;;		_LCD_WriteData
 30448 ;;		_LCD_Data_Write
 30449 ;;		_LCD_Data_Write_4k
 30450 ;;		_Invert_Display
 30451 ;; This function uses a non-reentrant model
 30452 ;;
 30453                           
 30454                           	psect	text153
 30455  017CFA                     __ptext153:
 30456                           	opt stack 0
 30457  017CFA                     _LCD_Write:
 30458                           	opt stack 19
 30459                           
 30460                           ;incstack = 0
 30461                           ;LCD_Write@value stored from wreg
 30462  017CFA  0100               	movlb	0	; () banked
 30463  017CFC  6F64               	movwf	LCD_Write@value& (0+255),b
 30464                           
 30465                           ;LCD.c: 89: Mode_Set(mode);
 30466  017CFE  0100               	movlb	0	; () banked
 30467  017D00  5163               	movf	LCD_Write@mode& (0+255),w,b
 30468  017D02  EC92  F0BF         	call	_Mode_Set
 30469                           
 30470                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 30471  017D06  0E6E               	movlw	low _SPI2
 30472  017D08  0100               	movlb	0	; () banked
 30473  017D0A  6F60               	movwf	SPI_Send@pInput& (0+255),b
 30474  017D0C  0E01               	movlw	high _SPI2
 30475  017D0E  0100               	movlb	0	; () banked
 30476  017D10  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 30477  017D12  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 30478  017D16  EC90  F0B7         	call	_SPI_Send	;wreg free
 30479  017D1A  0012               	return		;funcret
 30480  017D1C                     __end_of_LCD_Write:
 30481                           	opt stack 0
 30482                           tosu	equ	0xFFF
 30483                           tosh	equ	0xFFE
 30484                           tosl	equ	0xFFD
 30485                           pclath	equ	0xFFA
 30486                           tblptru	equ	0xFF8
 30487                           tblptrh	equ	0xFF7
 30488                           tblptrl	equ	0xFF6
 30489                           tablat	equ	0xFF5
 30490                           prodh	equ	0xFF4
 30491                           prodl	equ	0xFF3
 30492                           intcon	equ	0xFF2
 30493                           indf0	equ	0xFEF
 30494                           postinc0	equ	0xFEE
 30495                           fsr0h	equ	0xFEA
 30496                           fsr0l	equ	0xFE9
 30497                           wreg	equ	0xFE8
 30498                           indf1	equ	0xFE7
 30499                           postdec1	equ	0xFE5
 30500                           fsr1h	equ	0xFE2
 30501                           fsr1l	equ	0xFE1
 30502                           indf2	equ	0xFDF
 30503                           postinc2	equ	0xFDE
 30504                           postdec2	equ	0xFDD
 30505                           plusw2	equ	0xFDB
 30506                           fsr2h	equ	0xFDA
 30507                           fsr2l	equ	0xFD9
 30508                           status	equ	0xFD8
 30509                           
 30510 ;; *************** function _SPI_Send *****************
 30511 ;; Defined at:
 30512 ;;		line 226 in file "Library/SPI.c"
 30513 ;; Parameters:    Size  Location     Type
 30514 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 30515 ;;		 -> SPI1(11), SPI2(11), 
 30516 ;;  pData           1    2[BANK0 ] unsigned char 
 30517 ;; Auto vars:     Size  Location     Type
 30518 ;;		None
 30519 ;; Return value:  Size  Location     Type
 30520 ;;                  1    wreg      unsigned char 
 30521 ;; Registers used:
 30522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30523 ;; Tracked objects:
 30524 ;;		On entry : 0/0
 30525 ;;		On exit  : 0/0
 30526 ;;		Unchanged: 0/0
 30527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30528 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30531 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30532 ;;Total ram usage:        3 bytes
 30533 ;; Hardware stack levels used:    1
 30534 ;; Hardware stack levels required when called:    7
 30535 ;; This function calls:
 30536 ;;		Nothing
 30537 ;; This function is called by:
 30538 ;;		_LCD_Write
 30539 ;;		_OutSeg
 30540 ;; This function uses a non-reentrant model
 30541 ;;
 30542                           
 30543                           	psect	text154
 30544  016F20                     __ptext154:
 30545                           	opt stack 0
 30546  016F20                     _SPI_Send:
 30547                           	opt stack 19
 30548                           
 30549                           ;SPI.c: 253: switch (pInput->mChannel)
 30550                           
 30551                           ;incstack = 0
 30552  016F20  D026               	goto	l13019
 30553  016F22                     l13001:
 30554                           
 30555                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 30556  016F22  C0EE  FFD9         	movff	_PortC+4,fsr2l
 30557  016F26  C0EF  FFDA         	movff	_PortC+5,fsr2h
 30558  016F2A  0100               	movlb	0	; () banked
 30559  016F2C  94DF               	bcf	indf2,2,c
 30560                           
 30561                           ; BSR set to: 0
 30562                           ;SPI.c: 257: SSP1BUF = pData;
 30563  016F2E  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 30564  016F32                     l680:
 30565  016F32  A0C7               	btfss	4039,0,c	;volatile
 30566  016F34  D7FE               	goto	l680
 30567                           
 30568                           ;SPI.c: 259: pData = SSP1BUF;
 30569  016F36  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 30570                           
 30571                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 30572  016F3A  C0EE  FFD9         	movff	_PortC+4,fsr2l
 30573  016F3E  C0EF  FFDA         	movff	_PortC+5,fsr2h
 30574  016F42  0100               	movlb	0	; () banked
 30575  016F44  84DF               	bsf	indf2,2,c
 30576                           
 30577                           ; BSR set to: 0
 30578                           ;SPI.c: 261: return pData;
 30579                           ;	Return value of _SPI_Send is never used
 30580  016F46  0012               	return	
 30581  016F48                     l13009:
 30582                           
 30583                           ; BSR set to: 0
 30584                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 30585  016F48  C1A5  FFD9         	movff	_PortD+4,fsr2l
 30586  016F4C  C1A6  FFDA         	movff	_PortD+5,fsr2h
 30587  016F50  0101               	movlb	1	; () banked
 30588  016F52  9EDF               	bcf	indf2,7,c
 30589                           
 30590                           ; BSR set to: 1
 30591                           ;SPI.c: 264: SSP2BUF = pData;
 30592  016F54  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 30593  016F58                     l685:
 30594  016F58  A06D               	btfss	3949,0,c	;volatile
 30595  016F5A  D7FE               	goto	l685
 30596                           
 30597                           ;SPI.c: 266: pData = SSP2BUF;
 30598  016F5C  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 30599                           
 30600                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 30601  016F60  C1A5  FFD9         	movff	_PortD+4,fsr2l
 30602  016F64  C1A6  FFDA         	movff	_PortD+5,fsr2h
 30603  016F68  0101               	movlb	1	; () banked
 30604  016F6A  8EDF               	bsf	indf2,7,c
 30605                           
 30606                           ; BSR set to: 1
 30607                           ;SPI.c: 269: };
 30608                           
 30609                           ; BSR set to: 1
 30610                           ;SPI.c: 268: return pData;
 30611                           ;	Return value of _SPI_Send is never used
 30612  016F6C  0012               	return	
 30613  016F6E                     l13019:
 30614  016F6E  0100               	movlb	0	; () banked
 30615  016F70  EE20 F002          	lfsr	2,2
 30616  016F74  5160               	movf	SPI_Send@pInput& (0+255),w,b
 30617  016F76  26D9               	addwf	fsr2l,f,c
 30618  016F78  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 30619  016F7A  22DA               	addwfc	fsr2h,f,c
 30620  016F7C  50DF               	movf	indf2,w,c
 30621                           
 30622                           ; Switch size 1, requested type "space"
 30623                           ; Number of cases is 2, Range of values is 0 to 1
 30624                           ; switch strategies available:
 30625                           ; Name         Instructions Cycles
 30626                           ; simple_byte            7     4 (average)
 30627                           ;	Chosen strategy is simple_byte
 30628  016F7E  0A00               	xorlw	0	; case 0
 30629  016F80  B4D8               	btfsc	status,2,c
 30630  016F82  D7CF               	goto	l13001
 30631  016F84  0A01               	xorlw	1	; case 1
 30632  016F86  A4D8               	btfss	status,2,c
 30633  016F88  0012               	return	
 30634  016F8A  D7DE               	goto	l13009
 30635  016F8C                     __end_of_SPI_Send:
 30636                           	opt stack 0
 30637                           tosu	equ	0xFFF
 30638                           tosh	equ	0xFFE
 30639                           tosl	equ	0xFFD
 30640                           pclath	equ	0xFFA
 30641                           tblptru	equ	0xFF8
 30642                           tblptrh	equ	0xFF7
 30643                           tblptrl	equ	0xFF6
 30644                           tablat	equ	0xFF5
 30645                           prodh	equ	0xFF4
 30646                           prodl	equ	0xFF3
 30647                           intcon	equ	0xFF2
 30648                           indf0	equ	0xFEF
 30649                           postinc0	equ	0xFEE
 30650                           fsr0h	equ	0xFEA
 30651                           fsr0l	equ	0xFE9
 30652                           wreg	equ	0xFE8
 30653                           indf1	equ	0xFE7
 30654                           postdec1	equ	0xFE5
 30655                           fsr1h	equ	0xFE2
 30656                           fsr1l	equ	0xFE1
 30657                           indf2	equ	0xFDF
 30658                           postinc2	equ	0xFDE
 30659                           postdec2	equ	0xFDD
 30660                           plusw2	equ	0xFDB
 30661                           fsr2h	equ	0xFDA
 30662                           fsr2l	equ	0xFD9
 30663                           status	equ	0xFD8
 30664                           
 30665 ;; *************** function _Mode_Set *****************
 30666 ;; Defined at:
 30667 ;;		line 40 in file "Library/LCD.c"
 30668 ;; Parameters:    Size  Location     Type
 30669 ;;  pMode           1    wreg     enum E6761
 30670 ;; Auto vars:     Size  Location     Type
 30671 ;;  pMode           1    0[BANK0 ] enum E6761
 30672 ;; Return value:  Size  Location     Type
 30673 ;;                  1    wreg      void 
 30674 ;; Registers used:
 30675 ;;		wreg
 30676 ;; Tracked objects:
 30677 ;;		On entry : 0/0
 30678 ;;		On exit  : 0/0
 30679 ;;		Unchanged: 0/0
 30680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30685 ;;Total ram usage:        1 bytes
 30686 ;; Hardware stack levels used:    1
 30687 ;; Hardware stack levels required when called:    7
 30688 ;; This function calls:
 30689 ;;		Nothing
 30690 ;; This function is called by:
 30691 ;;		_LCD_Write
 30692 ;; This function uses a non-reentrant model
 30693 ;;
 30694                           
 30695                           	psect	text155
 30696  017F24                     __ptext155:
 30697                           	opt stack 0
 30698  017F24                     _Mode_Set:
 30699                           	opt stack 19
 30700                           
 30701                           ;incstack = 0
 30702                           ;Mode_Set@pMode stored from wreg
 30703  017F24  0100               	movlb	0	; () banked
 30704  017F26  6F60               	movwf	Mode_Set@pMode& (0+255),b
 30705                           
 30706                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 30707  017F28  0100               	movlb	0	; () banked
 30708  017F2A  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 30709  017F2C  D002               	bra	u10445
 30710  017F2E  9E85               	bcf	3973,7,c	;volatile
 30711  017F30  D001               	bra	u10446
 30712  017F32                     u10445:
 30713  017F32  8E85               	bsf	3973,7,c	;volatile
 30714  017F34                     u10446:
 30715  017F34  0012               	return		;funcret
 30716  017F36                     __end_of_Mode_Set:
 30717                           	opt stack 0
 30718                           tosu	equ	0xFFF
 30719                           tosh	equ	0xFFE
 30720                           tosl	equ	0xFFD
 30721                           pclath	equ	0xFFA
 30722                           tblptru	equ	0xFF8
 30723                           tblptrh	equ	0xFF7
 30724                           tblptrl	equ	0xFF6
 30725                           tablat	equ	0xFF5
 30726                           prodh	equ	0xFF4
 30727                           prodl	equ	0xFF3
 30728                           intcon	equ	0xFF2
 30729                           indf0	equ	0xFEF
 30730                           postinc0	equ	0xFEE
 30731                           fsr0h	equ	0xFEA
 30732                           fsr0l	equ	0xFE9
 30733                           wreg	equ	0xFE8
 30734                           indf1	equ	0xFE7
 30735                           postdec1	equ	0xFE5
 30736                           fsr1h	equ	0xFE2
 30737                           fsr1l	equ	0xFE1
 30738                           indf2	equ	0xFDF
 30739                           postinc2	equ	0xFDE
 30740                           postdec2	equ	0xFDD
 30741                           plusw2	equ	0xFDB
 30742                           fsr2h	equ	0xFDA
 30743                           fsr2l	equ	0xFD9
 30744                           status	equ	0xFD8
 30745                           
 30746 ;; *************** function _Console_MakeField *****************
 30747 ;; Defined at:
 30748 ;;		line 435 in file "Library/Console.c"
 30749 ;; Parameters:    Size  Location     Type
 30750 ;;  pInput          1    wreg     unsigned char 
 30751 ;; Auto vars:     Size  Location     Type
 30752 ;;  pInput          1   11[BANK0 ] unsigned char 
 30753 ;;  y               1   17[BANK0 ] unsigned char 
 30754 ;;  x               1   16[BANK0 ] unsigned char 
 30755 ;;  Column          2   12[BANK0 ] PTR struct Byte
 30756 ;;		 -> Font5x7(480), 
 30757 ;;  Index           2    9[BANK0 ] unsigned short 
 30758 ;; Return value:  Size  Location     Type
 30759 ;;                  2    5[BANK0 ] PTR unsigned short 
 30760 ;; Registers used:
 30761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30762 ;; Tracked objects:
 30763 ;;		On entry : 0/0
 30764 ;;		On exit  : 0/0
 30765 ;;		Unchanged: 0/0
 30766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30767 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30768 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30769 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30770 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30771 ;;Total ram usage:       13 bytes
 30772 ;; Hardware stack levels used:    1
 30773 ;; Hardware stack levels required when called:    8
 30774 ;; This function calls:
 30775 ;;		_Byte_GetBit
 30776 ;; This function is called by:
 30777 ;;		_Console_Render
 30778 ;; This function uses a non-reentrant model
 30779 ;;
 30780                           
 30781                           	psect	text156
 30782  0155F4                     __ptext156:
 30783                           	opt stack 0
 30784  0155F4                     _Console_MakeField:
 30785                           	opt stack 21
 30786                           
 30787                           ;incstack = 0
 30788                           ;Console_MakeField@pInput stored from wreg
 30789  0155F4  0100               	movlb	0	; () banked
 30790  0155F6  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 30791                           
 30792                           ;Console.c: 437: static Colour Fill[7][5];
 30793                           ;Console.c: 438: pInput -= 32;
 30794  0155F8  0E20               	movlw	32
 30795  0155FA  0100               	movlb	0	; () banked
 30796  0155FC  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 30797                           
 30798                           ; BSR set to: 0
 30799                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 30800  0155FE  0100               	movlb	0	; () banked
 30801  015600  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 30802  015602  0D05               	mullw	5
 30803  015604  CFF3 F069          	movff	prodl,Console_MakeField@Index
 30804  015608  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 30805                           
 30806                           ; BSR set to: 0
 30807                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 30808  01560C  0ECD               	movlw	low _Font5x7
 30809  01560E  0100               	movlb	0	; () banked
 30810  015610  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 30811  015612  0100               	movlb	0	; () banked
 30812  015614  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 30813  015616  0EFC               	movlw	high _Font5x7
 30814  015618  0100               	movlb	0	; () banked
 30815  01561A  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 30816  01561C  0100               	movlb	0	; () banked
 30817  01561E  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 30818                           
 30819                           ; BSR set to: 0
 30820                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 30821  015620  0E00               	movlw	0
 30822  015622  0100               	movlb	0	; () banked
 30823  015624  6F70               	movwf	Console_MakeField@x& (0+255),b
 30824  015626                     l15237:
 30825                           
 30826                           ; BSR set to: 0
 30827  015626  0E04               	movlw	4
 30828  015628  0100               	movlb	0	; () banked
 30829  01562A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 30830  01562C  D001               	goto	l15241
 30831  01562E  D043               	goto	l15261
 30832  015630                     l15241:
 30833                           
 30834                           ; BSR set to: 0
 30835                           ;Console.c: 444: {
 30836                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 30837  015630  0E00               	movlw	0
 30838  015632  0100               	movlb	0	; () banked
 30839  015634  6F71               	movwf	Console_MakeField@y& (0+255),b
 30840  015636                     l15243:
 30841                           
 30842                           ; BSR set to: 0
 30843  015636  0E06               	movlw	6
 30844  015638  0100               	movlb	0	; () banked
 30845  01563A  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 30846  01563C  D001               	goto	l15247
 30847  01563E  D035               	goto	l15257
 30848  015640                     l15247:
 30849                           
 30850                           ; BSR set to: 0
 30851                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 30852  015640  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 30853  015644  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 30854  015648  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 30855  01564C  EC31  F0BD         	call	_Byte_GetBit	;wreg free
 30856  015650  0900               	iorlw	0
 30857  015652  A4D8               	btfss	status,2,c
 30858  015654  D005               	goto	l1082
 30859  015656  C0DE  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 30860  01565A  C0DF  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 30861  01565E  D004               	goto	l15251
 30862  015660                     l1082:
 30863  015660  C0FA  F06E         	movff	_gForecolour,_Console_MakeField$10974
 30864  015664  C0FB  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 30865  015668                     l15251:
 30866  015668  0100               	movlb	0	; () banked
 30867  01566A  5171               	movf	Console_MakeField@y& (0+255),w,b
 30868  01566C  0D0A               	mullw	10
 30869  01566E  0E1E               	movlw	low Console_MakeField@Fill
 30870  015670  0100               	movlb	0	; () banked
 30871  015672  6F67               	movwf	??_Console_MakeField& (0+255),b
 30872  015674  0E02               	movlw	high Console_MakeField@Fill
 30873  015676  0100               	movlb	0	; () banked
 30874  015678  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 30875  01567A  50F3               	movf	prodl,w,c
 30876  01567C  0100               	movlb	0	; () banked
 30877  01567E  2767               	addwf	??_Console_MakeField& (0+255),f,b
 30878  015680  50F4               	movf	prodh,w,c
 30879  015682  0100               	movlb	0	; () banked
 30880  015684  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 30881  015686  0100               	movlb	0	; () banked
 30882  015688  5170               	movf	Console_MakeField@x& (0+255),w,b
 30883  01568A  0D02               	mullw	2
 30884  01568C  50F3               	movf	prodl,w,c
 30885  01568E  0100               	movlb	0	; () banked
 30886  015690  2567               	addwf	??_Console_MakeField& (0+255),w,b
 30887  015692  6ED9               	movwf	fsr2l,c
 30888  015694  50F4               	movf	prodh,w,c
 30889  015696  0100               	movlb	0	; () banked
 30890  015698  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 30891  01569A  6EDA               	movwf	fsr2h,c
 30892  01569C  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 30893  0156A0  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 30894                           
 30895                           ; BSR set to: 0
 30896  0156A4  0100               	movlb	0	; () banked
 30897  0156A6  2B71               	incf	Console_MakeField@y& (0+255),f,b
 30898  0156A8  D7C6               	goto	l15243
 30899  0156AA                     l15257:
 30900                           
 30901                           ; BSR set to: 0
 30902                           ;Console.c: 447: Column += 1;
 30903  0156AA  0100               	movlb	0	; () banked
 30904  0156AC  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 30905  0156AE  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 30906  0156B0  0100               	movlb	0	; () banked
 30907  0156B2  2B70               	incf	Console_MakeField@x& (0+255),f,b
 30908  0156B4  D7B8               	goto	l15237
 30909  0156B6                     l15261:
 30910                           
 30911                           ; BSR set to: 0
 30912                           ;Console.c: 448: }
 30913                           ;Console.c: 449: return (ColourPtr)Fill;
 30914  0156B6  0E1E               	movlw	low Console_MakeField@Fill
 30915  0156B8  0100               	movlb	0	; () banked
 30916  0156BA  6F65               	movwf	?_Console_MakeField& (0+255),b
 30917  0156BC  0E02               	movlw	high Console_MakeField@Fill
 30918  0156BE  0100               	movlb	0	; () banked
 30919  0156C0  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 30920  0156C2  0012               	return	
 30921  0156C4                     __end_of_Console_MakeField:
 30922                           	opt stack 0
 30923                           tosu	equ	0xFFF
 30924                           tosh	equ	0xFFE
 30925                           tosl	equ	0xFFD
 30926                           pclath	equ	0xFFA
 30927                           tblptru	equ	0xFF8
 30928                           tblptrh	equ	0xFF7
 30929                           tblptrl	equ	0xFF6
 30930                           tablat	equ	0xFF5
 30931                           prodh	equ	0xFF4
 30932                           prodl	equ	0xFF3
 30933                           intcon	equ	0xFF2
 30934                           indf0	equ	0xFEF
 30935                           postinc0	equ	0xFEE
 30936                           fsr0h	equ	0xFEA
 30937                           fsr0l	equ	0xFE9
 30938                           wreg	equ	0xFE8
 30939                           indf1	equ	0xFE7
 30940                           postdec1	equ	0xFE5
 30941                           fsr1h	equ	0xFE2
 30942                           fsr1l	equ	0xFE1
 30943                           indf2	equ	0xFDF
 30944                           postinc2	equ	0xFDE
 30945                           postdec2	equ	0xFDD
 30946                           plusw2	equ	0xFDB
 30947                           fsr2h	equ	0xFDA
 30948                           fsr2l	equ	0xFD9
 30949                           status	equ	0xFD8
 30950                           
 30951 ;; *************** function _Byte_GetBit *****************
 30952 ;; Defined at:
 30953 ;;		line 38 in file "Library/Types.c"
 30954 ;; Parameters:    Size  Location     Type
 30955 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 30956 ;;		 -> Font5x7(480), 
 30957 ;;  pBit            1    2[BANK0 ] unsigned char 
 30958 ;; Auto vars:     Size  Location     Type
 30959 ;;  Output          1    4[BANK0 ] unsigned char 
 30960 ;; Return value:  Size  Location     Type
 30961 ;;                  1    wreg      unsigned char 
 30962 ;; Registers used:
 30963 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 30964 ;; Tracked objects:
 30965 ;;		On entry : 0/0
 30966 ;;		On exit  : 0/0
 30967 ;;		Unchanged: 0/0
 30968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30969 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30972 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30973 ;;Total ram usage:        5 bytes
 30974 ;; Hardware stack levels used:    1
 30975 ;; Hardware stack levels required when called:    7
 30976 ;; This function calls:
 30977 ;;		Nothing
 30978 ;; This function is called by:
 30979 ;;		_Console_MakeField
 30980 ;;		_Word_GetBit
 30981 ;; This function uses a non-reentrant model
 30982 ;;
 30983                           
 30984                           	psect	text157
 30985  017A62                     __ptext157:
 30986                           	opt stack 0
 30987  017A62                     _Byte_GetBit:
 30988                           	opt stack 21
 30989                           
 30990                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 30991                           
 30992                           ; BSR set to: 0
 30993                           ;incstack = 0
 30994  017A62  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 30995  017A66  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 30996  017A6A                     	if	0	;tblptru may be non-zero
 30997  017A6A                     	endif
 30998  017A6A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 30999  017A6A  0E00               	movlw	low (__mediumconst shr (0+16))
 31000  017A6C  6EF8               	movwf	tblptru,c
 31001  017A6E                     	endif
 31002  017A6E  0008               	tblrd		*
 31003  017A70  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 31004                           
 31005                           ;Types.c: 42: Output >>= pBit;
 31006  017A74  0100               	movlb	0	; () banked
 31007  017A76  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 31008  017A78  0100               	movlb	0	; () banked
 31009  017A7A  6F63               	movwf	??_Byte_GetBit& (0+255),b
 31010  017A7C  D003               	goto	u12210
 31011  017A7E                     u12215:
 31012  017A7E  0100               	movlb	0	; () banked
 31013  017A80  90D8               	bcf	status,0,c
 31014  017A82  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 31015  017A84                     u12210:
 31016  017A84  0100               	movlb	0	; () banked
 31017  017A86  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 31018  017A88  D7FA               	goto	u12215
 31019                           
 31020                           ;Types.c: 43: Output &= 1;
 31021  017A8A  0E01               	movlw	1
 31022  017A8C  0100               	movlb	0	; () banked
 31023  017A8E  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 31024                           
 31025                           ; BSR set to: 0
 31026                           ;Types.c: 44: return Output;
 31027  017A90  0100               	movlb	0	; () banked
 31028  017A92  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 31029  017A94  0012               	return	
 31030  017A96                     __end_of_Byte_GetBit:
 31031                           	opt stack 0
 31032                           tosu	equ	0xFFF
 31033                           tosh	equ	0xFFE
 31034                           tosl	equ	0xFFD
 31035                           pclath	equ	0xFFA
 31036                           tblptru	equ	0xFF8
 31037                           tblptrh	equ	0xFF7
 31038                           tblptrl	equ	0xFF6
 31039                           tablat	equ	0xFF5
 31040                           prodh	equ	0xFF4
 31041                           prodl	equ	0xFF3
 31042                           intcon	equ	0xFF2
 31043                           indf0	equ	0xFEF
 31044                           postinc0	equ	0xFEE
 31045                           fsr0h	equ	0xFEA
 31046                           fsr0l	equ	0xFE9
 31047                           wreg	equ	0xFE8
 31048                           indf1	equ	0xFE7
 31049                           postdec1	equ	0xFE5
 31050                           fsr1h	equ	0xFE2
 31051                           fsr1l	equ	0xFE1
 31052                           indf2	equ	0xFDF
 31053                           postinc2	equ	0xFDE
 31054                           postdec2	equ	0xFDD
 31055                           plusw2	equ	0xFDB
 31056                           fsr2h	equ	0xFDA
 31057                           fsr2l	equ	0xFD9
 31058                           status	equ	0xFD8
 31059                           
 31060 ;; *************** function _ADC_Voltage *****************
 31061 ;; Defined at:
 31062 ;;		line 259 in file "Library/ADC.c"
 31063 ;; Parameters:    Size  Location     Type
 31064 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 31065 ;;		 -> ADC_AN0(5), 
 31066 ;; Auto vars:     Size  Location     Type
 31067 ;;  output          4   53[BANK0 ] float 
 31068 ;;  ref             4   49[BANK0 ] const float 
 31069 ;;  max             4   45[BANK0 ] const float 
 31070 ;; Return value:  Size  Location     Type
 31071 ;;                  4   39[BANK0 ] float 
 31072 ;; Registers used:
 31073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31074 ;; Tracked objects:
 31075 ;;		On entry : 0/0
 31076 ;;		On exit  : 0/0
 31077 ;;		Unchanged: 0/0
 31078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31080 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31082 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31083 ;;Total ram usage:       18 bytes
 31084 ;; Hardware stack levels used:    1
 31085 ;; Hardware stack levels required when called:    8
 31086 ;; This function calls:
 31087 ;;		___fldiv
 31088 ;;		___flmul
 31089 ;;		___xxtofl
 31090 ;; This function is called by:
 31091 ;;		_main
 31092 ;; This function uses a non-reentrant model
 31093 ;;
 31094                           
 31095                           	psect	text158
 31096  0152A2                     __ptext158:
 31097                           	opt stack 0
 31098  0152A2                     _ADC_Voltage:
 31099                           	opt stack 22
 31100                           
 31101                           ;ADC.c: 261: const float max = 1024;
 31102                           
 31103                           ; BSR set to: 0
 31104                           ;incstack = 0
 31105  0152A2  0E00               	movlw	0
 31106  0152A4  0100               	movlb	0	; () banked
 31107  0152A6  6F8D               	movwf	ADC_Voltage@max& (0+255),b
 31108  0152A8  0E00               	movlw	0
 31109  0152AA  6F8E               	movwf	(ADC_Voltage@max+1)& (0+255),b
 31110  0152AC  0E80               	movlw	128
 31111  0152AE  6F8F               	movwf	(ADC_Voltage@max+2)& (0+255),b
 31112  0152B0  0E44               	movlw	68
 31113  0152B2  6F90               	movwf	(ADC_Voltage@max+3)& (0+255),b
 31114                           
 31115                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 31116  0152B4  0E33               	movlw	51
 31117  0152B6  0100               	movlb	0	; () banked
 31118  0152B8  6F91               	movwf	ADC_Voltage@ref& (0+255),b
 31119  0152BA  0E33               	movlw	51
 31120  0152BC  6F92               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 31121  0152BE  0E53               	movlw	83
 31122  0152C0  6F93               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 31123  0152C2  0E40               	movlw	64
 31124  0152C4  6F94               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 31125                           
 31126                           ; BSR set to: 0
 31127                           ;ADC.c: 263: float output = pInput->mValue;
 31128  0152C6  0100               	movlb	0	; () banked
 31129  0152C8  EE20 F001          	lfsr	2,1
 31130  0152CC  5187               	movf	ADC_Voltage@pInput& (0+255),w,b
 31131  0152CE  26D9               	addwf	fsr2l,f,c
 31132  0152D0  5188               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 31133  0152D2  22DA               	addwfc	fsr2h,f,c
 31134  0152D4  CFDE F08B          	movff	postinc2,??_ADC_Voltage
 31135  0152D8  CFDD F08C          	movff	postdec2,??_ADC_Voltage+1
 31136  0152DC  C08B  F060         	movff	??_ADC_Voltage,___xxtofl@val
 31137  0152E0  C08C  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 31138  0152E4  0100               	movlb	0	; () banked
 31139  0152E6  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 31140  0152E8  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 31141  0152EA  0E00               	movlw	0
 31142  0152EC  ECAC  F09B         	call	___xxtofl
 31143  0152F0  C060  F095         	movff	?___xxtofl,ADC_Voltage@output
 31144  0152F4  C061  F096         	movff	?___xxtofl+1,ADC_Voltage@output+1
 31145  0152F8  C062  F097         	movff	?___xxtofl+2,ADC_Voltage@output+2
 31146  0152FC  C063  F098         	movff	?___xxtofl+3,ADC_Voltage@output+3
 31147                           
 31148                           ;ADC.c: 265: output /= max;
 31149  015300  C095  F060         	movff	ADC_Voltage@output,___fldiv@b
 31150  015304  C096  F061         	movff	ADC_Voltage@output+1,___fldiv@b+1
 31151  015308  C097  F062         	movff	ADC_Voltage@output+2,___fldiv@b+2
 31152  01530C  C098  F063         	movff	ADC_Voltage@output+3,___fldiv@b+3
 31153  015310  C08D  F064         	movff	ADC_Voltage@max,___fldiv@a
 31154  015314  C08E  F065         	movff	ADC_Voltage@max+1,___fldiv@a+1
 31155  015318  C08F  F066         	movff	ADC_Voltage@max+2,___fldiv@a+2
 31156  01531C  C090  F067         	movff	ADC_Voltage@max+3,___fldiv@a+3
 31157  015320  EC8C  F08D         	call	___fldiv	;wreg free
 31158  015324  C060  F095         	movff	?___fldiv,ADC_Voltage@output
 31159  015328  C061  F096         	movff	?___fldiv+1,ADC_Voltage@output+1
 31160  01532C  C062  F097         	movff	?___fldiv+2,ADC_Voltage@output+2
 31161  015330  C063  F098         	movff	?___fldiv+3,ADC_Voltage@output+3
 31162                           
 31163                           ;ADC.c: 266: output *= ref;
 31164  015334  C095  F06E         	movff	ADC_Voltage@output,___flmul@b
 31165  015338  C096  F06F         	movff	ADC_Voltage@output+1,___flmul@b+1
 31166  01533C  C097  F070         	movff	ADC_Voltage@output+2,___flmul@b+2
 31167  015340  C098  F071         	movff	ADC_Voltage@output+3,___flmul@b+3
 31168  015344  C091  F072         	movff	ADC_Voltage@ref,___flmul@a
 31169  015348  C092  F073         	movff	ADC_Voltage@ref+1,___flmul@a+1
 31170  01534C  C093  F074         	movff	ADC_Voltage@ref+2,___flmul@a+2
 31171  015350  C094  F075         	movff	ADC_Voltage@ref+3,___flmul@a+3
 31172  015354  EC2A  F089         	call	___flmul	;wreg free
 31173  015358  C06E  F095         	movff	?___flmul,ADC_Voltage@output
 31174  01535C  C06F  F096         	movff	?___flmul+1,ADC_Voltage@output+1
 31175  015360  C070  F097         	movff	?___flmul+2,ADC_Voltage@output+2
 31176  015364  C071  F098         	movff	?___flmul+3,ADC_Voltage@output+3
 31177                           
 31178                           ;ADC.c: 268: return output + (float)0.000;
 31179  015368  C095  F087         	movff	ADC_Voltage@output,?_ADC_Voltage
 31180  01536C  C096  F088         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 31181  015370  C097  F089         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 31182  015374  C098  F08A         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 31183  015378  0012               	return	
 31184  01537A                     __end_of_ADC_Voltage:
 31185                           	opt stack 0
 31186                           tosu	equ	0xFFF
 31187                           tosh	equ	0xFFE
 31188                           tosl	equ	0xFFD
 31189                           pclath	equ	0xFFA
 31190                           tblptru	equ	0xFF8
 31191                           tblptrh	equ	0xFF7
 31192                           tblptrl	equ	0xFF6
 31193                           tablat	equ	0xFF5
 31194                           prodh	equ	0xFF4
 31195                           prodl	equ	0xFF3
 31196                           intcon	equ	0xFF2
 31197                           indf0	equ	0xFEF
 31198                           postinc0	equ	0xFEE
 31199                           fsr0h	equ	0xFEA
 31200                           fsr0l	equ	0xFE9
 31201                           wreg	equ	0xFE8
 31202                           indf1	equ	0xFE7
 31203                           postdec1	equ	0xFE5
 31204                           fsr1h	equ	0xFE2
 31205                           fsr1l	equ	0xFE1
 31206                           indf2	equ	0xFDF
 31207                           postinc2	equ	0xFDE
 31208                           postdec2	equ	0xFDD
 31209                           plusw2	equ	0xFDB
 31210                           fsr2h	equ	0xFDA
 31211                           fsr2l	equ	0xFD9
 31212                           status	equ	0xFD8
 31213                           
 31214 ;; *************** function ___xxtofl *****************
 31215 ;; Defined at:
 31216 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\xxtofl.c"
 31217 ;; Parameters:    Size  Location     Type
 31218 ;;  sign            1    wreg     unsigned char 
 31219 ;;  val             4    0[BANK0 ] long 
 31220 ;; Auto vars:     Size  Location     Type
 31221 ;;  sign            1    8[BANK0 ] unsigned char 
 31222 ;;  arg             4   10[BANK0 ] unsigned long 
 31223 ;;  exp             1    9[BANK0 ] unsigned char 
 31224 ;; Return value:  Size  Location     Type
 31225 ;;                  4    0[BANK0 ] unsigned char 
 31226 ;; Registers used:
 31227 ;;		wreg, status,2, status,0
 31228 ;; Tracked objects:
 31229 ;;		On entry : 0/0
 31230 ;;		On exit  : 0/0
 31231 ;;		Unchanged: 0/0
 31232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31233 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31234 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31235 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31236 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31237 ;;Total ram usage:       14 bytes
 31238 ;; Hardware stack levels used:    1
 31239 ;; Hardware stack levels required when called:    7
 31240 ;; This function calls:
 31241 ;;		Nothing
 31242 ;; This function is called by:
 31243 ;;		_ADC_Voltage
 31244 ;;		_displayPositionMode
 31245 ;;		_printf
 31246 ;;		_pow
 31247 ;;		_exp
 31248 ;;		_floor
 31249 ;;		_log
 31250 ;; This function uses a non-reentrant model
 31251 ;;
 31252                           
 31253                           	psect	text159
 31254  013758                     __ptext159:
 31255                           	opt stack 0
 31256  013758                     ___xxtofl:
 31257                           	opt stack 22
 31258                           
 31259                           ;incstack = 0
 31260                           ;___xxtofl@sign stored from wreg
 31261  013758  0100               	movlb	0	; () banked
 31262  01375A  6F68               	movwf	___xxtofl@sign& (0+255),b
 31263  01375C  0100               	movlb	0	; () banked
 31264  01375E  5168               	movf	___xxtofl@sign& (0+255),w,b
 31265  013760  0100               	movlb	0	; () banked
 31266  013762  B4D8               	btfsc	status,2,c
 31267  013764  D01E               	goto	l2821
 31268                           
 31269                           ; BSR set to: 0
 31270  013766  0100               	movlb	0	; () banked
 31271  013768  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 31272  01376A  D01B               	goto	l2821
 31273                           
 31274                           ; BSR set to: 0
 31275  01376C  C060  F064         	movff	___xxtofl@val,??___xxtofl
 31276  013770  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 31277  013774  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 31278  013778  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 31279  01377C  0100               	movlb	0	; () banked
 31280  01377E  1F64               	comf	??___xxtofl& (0+255),f,b
 31281  013780  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 31282  013782  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 31283  013784  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 31284  013786  2B64               	incf	??___xxtofl& (0+255),f,b
 31285  013788  0E00               	movlw	0
 31286  01378A  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 31287  01378C  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 31288  01378E  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 31289  013790  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 31290  013794  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 31291  013798  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 31292  01379C  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 31293  0137A0  D008               	goto	l14345
 31294  0137A2                     l2821:
 31295                           
 31296                           ; BSR set to: 0
 31297  0137A2  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 31298  0137A6  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 31299  0137AA  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 31300  0137AE  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 31301  0137B2                     l14345:
 31302                           
 31303                           ; BSR set to: 0
 31304  0137B2  0100               	movlb	0	; () banked
 31305  0137B4  5160               	movf	___xxtofl@val& (0+255),w,b
 31306  0137B6  0100               	movlb	0	; () banked
 31307  0137B8  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 31308  0137BA  0100               	movlb	0	; () banked
 31309  0137BC  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 31310  0137BE  0100               	movlb	0	; () banked
 31311  0137C0  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 31312  0137C2  A4D8               	btfss	status,2,c
 31313  0137C4  D00A               	goto	l14351
 31314                           
 31315                           ; BSR set to: 0
 31316  0137C6  0E00               	movlw	0
 31317  0137C8  0100               	movlb	0	; () banked
 31318  0137CA  6F60               	movwf	?___xxtofl& (0+255),b
 31319  0137CC  0E00               	movlw	0
 31320  0137CE  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 31321  0137D0  0E00               	movlw	0
 31322  0137D2  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 31323  0137D4  0E00               	movlw	0
 31324  0137D6  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 31325                           
 31326                           ; BSR set to: 0
 31327  0137D8  0012               	return	
 31328  0137DA                     l14351:
 31329                           
 31330                           ; BSR set to: 0
 31331  0137DA  0E96               	movlw	150
 31332  0137DC  0100               	movlb	0	; () banked
 31333  0137DE  6F69               	movwf	___xxtofl@exp& (0+255),b
 31334  0137E0  D008               	goto	l14355
 31335  0137E2                     l14353:
 31336                           
 31337                           ; BSR set to: 0
 31338  0137E2  0100               	movlb	0	; () banked
 31339  0137E4  2B69               	incf	___xxtofl@exp& (0+255),f,b
 31340  0137E6  0100               	movlb	0	; () banked
 31341  0137E8  90D8               	bcf	status,0,c
 31342  0137EA  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 31343  0137EC  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 31344  0137EE  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 31345  0137F0  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 31346  0137F2                     l14355:
 31347                           
 31348                           ; BSR set to: 0
 31349  0137F2  0E00               	movlw	0
 31350  0137F4  0100               	movlb	0	; () banked
 31351  0137F6  156A               	andwf	___xxtofl@arg& (0+255),w,b
 31352  0137F8  0100               	movlb	0	; () banked
 31353  0137FA  6F64               	movwf	??___xxtofl& (0+255),b
 31354  0137FC  0E00               	movlw	0
 31355  0137FE  0100               	movlb	0	; () banked
 31356  013800  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 31357  013802  0100               	movlb	0	; () banked
 31358  013804  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 31359  013806  0E00               	movlw	0
 31360  013808  0100               	movlb	0	; () banked
 31361  01380A  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 31362  01380C  0100               	movlb	0	; () banked
 31363  01380E  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 31364  013810  0EFE               	movlw	254
 31365  013812  0100               	movlb	0	; () banked
 31366  013814  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 31367  013816  0100               	movlb	0	; () banked
 31368  013818  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 31369  01381A  0100               	movlb	0	; () banked
 31370  01381C  5164               	movf	??___xxtofl& (0+255),w,b
 31371  01381E  0100               	movlb	0	; () banked
 31372  013820  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 31373  013822  0100               	movlb	0	; () banked
 31374  013824  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 31375  013826  0100               	movlb	0	; () banked
 31376  013828  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 31377  01382A  B4D8               	btfsc	status,2,c
 31378  01382C  D010               	goto	l2828
 31379  01382E  D7D9               	goto	l14353
 31380  013830                     l14357:
 31381                           
 31382                           ; BSR set to: 0
 31383  013830  0100               	movlb	0	; () banked
 31384  013832  2B69               	incf	___xxtofl@exp& (0+255),f,b
 31385                           
 31386                           ; BSR set to: 0
 31387  013834  0E01               	movlw	1
 31388  013836  0100               	movlb	0	; () banked
 31389  013838  276A               	addwf	___xxtofl@arg& (0+255),f,b
 31390  01383A  0E00               	movlw	0
 31391  01383C  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 31392  01383E  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 31393  013840  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 31394                           
 31395                           ; BSR set to: 0
 31396  013842  0100               	movlb	0	; () banked
 31397  013844  90D8               	bcf	status,0,c
 31398  013846  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 31399  013848  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 31400  01384A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 31401  01384C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 31402  01384E                     l2828:
 31403                           
 31404                           ; BSR set to: 0
 31405  01384E  0E00               	movlw	0
 31406  013850  0100               	movlb	0	; () banked
 31407  013852  156A               	andwf	___xxtofl@arg& (0+255),w,b
 31408  013854  0100               	movlb	0	; () banked
 31409  013856  6F64               	movwf	??___xxtofl& (0+255),b
 31410  013858  0E00               	movlw	0
 31411  01385A  0100               	movlb	0	; () banked
 31412  01385C  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 31413  01385E  0100               	movlb	0	; () banked
 31414  013860  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 31415  013862  0E00               	movlw	0
 31416  013864  0100               	movlb	0	; () banked
 31417  013866  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 31418  013868  0100               	movlb	0	; () banked
 31419  01386A  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 31420  01386C  0EFF               	movlw	255
 31421  01386E  0100               	movlb	0	; () banked
 31422  013870  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 31423  013872  0100               	movlb	0	; () banked
 31424  013874  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 31425  013876  0100               	movlb	0	; () banked
 31426  013878  5164               	movf	??___xxtofl& (0+255),w,b
 31427  01387A  0100               	movlb	0	; () banked
 31428  01387C  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 31429  01387E  0100               	movlb	0	; () banked
 31430  013880  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 31431  013882  0100               	movlb	0	; () banked
 31432  013884  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 31433  013886  B4D8               	btfsc	status,2,c
 31434  013888  D009               	goto	l14365
 31435  01388A  D7D2               	goto	l14357
 31436  01388C                     l14363:
 31437                           
 31438                           ; BSR set to: 0
 31439  01388C  0100               	movlb	0	; () banked
 31440  01388E  0769               	decf	___xxtofl@exp& (0+255),f,b
 31441  013890  0100               	movlb	0	; () banked
 31442  013892  90D8               	bcf	status,0,c
 31443  013894  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 31444  013896  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 31445  013898  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 31446  01389A  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 31447  01389C                     l14365:
 31448                           
 31449                           ; BSR set to: 0
 31450  01389C  0100               	movlb	0	; () banked
 31451  01389E  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 31452  0138A0  D004               	goto	l2835
 31453                           
 31454                           ; BSR set to: 0
 31455  0138A2  0E02               	movlw	2
 31456  0138A4  0100               	movlb	0	; () banked
 31457  0138A6  6169               	cpfslt	___xxtofl@exp& (0+255),b
 31458  0138A8  D7F1               	goto	l14363
 31459  0138AA                     l2835:
 31460                           
 31461                           ; BSR set to: 0
 31462  0138AA  0100               	movlb	0	; () banked
 31463  0138AC  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 31464  0138AE  D009               	goto	l2836
 31465                           
 31466                           ; BSR set to: 0
 31467  0138B0  0EFF               	movlw	255
 31468  0138B2  0100               	movlb	0	; () banked
 31469  0138B4  176A               	andwf	___xxtofl@arg& (0+255),f,b
 31470  0138B6  0EFF               	movlw	255
 31471  0138B8  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 31472  0138BA  0E7F               	movlw	127
 31473  0138BC  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 31474  0138BE  0EFF               	movlw	255
 31475  0138C0  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 31476  0138C2                     l2836:
 31477                           
 31478                           ; BSR set to: 0
 31479  0138C2  0100               	movlb	0	; () banked
 31480  0138C4  90D8               	bcf	status,0,c
 31481  0138C6  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 31482  0138C8  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 31483  0138CC  0100               	movlb	0	; () banked
 31484  0138CE  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 31485  0138D0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 31486  0138D2  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 31487  0138D4  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 31488  0138D8  0100               	movlb	0	; () banked
 31489  0138DA  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 31490  0138DC  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 31491  0138DE  6B64               	clrf	??___xxtofl& (0+255),b
 31492  0138E0  0100               	movlb	0	; () banked
 31493  0138E2  5164               	movf	??___xxtofl& (0+255),w,b
 31494  0138E4  0100               	movlb	0	; () banked
 31495  0138E6  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 31496  0138E8  0100               	movlb	0	; () banked
 31497  0138EA  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 31498  0138EC  0100               	movlb	0	; () banked
 31499  0138EE  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 31500  0138F0  0100               	movlb	0	; () banked
 31501  0138F2  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 31502  0138F4  0100               	movlb	0	; () banked
 31503  0138F6  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 31504  0138F8  0100               	movlb	0	; () banked
 31505  0138FA  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 31506  0138FC  0100               	movlb	0	; () banked
 31507  0138FE  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 31508                           
 31509                           ; BSR set to: 0
 31510  013900  0100               	movlb	0	; () banked
 31511  013902  5168               	movf	___xxtofl@sign& (0+255),w,b
 31512  013904  0100               	movlb	0	; () banked
 31513  013906  B4D8               	btfsc	status,2,c
 31514  013908  D005               	goto	l14377
 31515                           
 31516                           ; BSR set to: 0
 31517  01390A  0100               	movlb	0	; () banked
 31518  01390C  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 31519  01390E  D002               	goto	l14377
 31520                           
 31521                           ; BSR set to: 0
 31522  013910  0100               	movlb	0	; () banked
 31523  013912  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 31524  013914                     l14377:
 31525                           
 31526                           ; BSR set to: 0
 31527  013914  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 31528  013918  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 31529  01391C  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 31530  013920  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 31531  013924  0012               	return	
 31532  013926                     __end_of___xxtofl:
 31533                           	opt stack 0
 31534                           tosu	equ	0xFFF
 31535                           tosh	equ	0xFFE
 31536                           tosl	equ	0xFFD
 31537                           pclath	equ	0xFFA
 31538                           tblptru	equ	0xFF8
 31539                           tblptrh	equ	0xFF7
 31540                           tblptrl	equ	0xFF6
 31541                           tablat	equ	0xFF5
 31542                           prodh	equ	0xFF4
 31543                           prodl	equ	0xFF3
 31544                           intcon	equ	0xFF2
 31545                           indf0	equ	0xFEF
 31546                           postinc0	equ	0xFEE
 31547                           fsr0h	equ	0xFEA
 31548                           fsr0l	equ	0xFE9
 31549                           wreg	equ	0xFE8
 31550                           indf1	equ	0xFE7
 31551                           postdec1	equ	0xFE5
 31552                           fsr1h	equ	0xFE2
 31553                           fsr1l	equ	0xFE1
 31554                           indf2	equ	0xFDF
 31555                           postinc2	equ	0xFDE
 31556                           postdec2	equ	0xFDD
 31557                           plusw2	equ	0xFDB
 31558                           fsr2h	equ	0xFDA
 31559                           fsr2l	equ	0xFD9
 31560                           status	equ	0xFD8
 31561                           
 31562 ;; *************** function ___flmul *****************
 31563 ;; Defined at:
 31564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcmul.c"
 31565 ;; Parameters:    Size  Location     Type
 31566 ;;  b               4   14[BANK0 ] unsigned char 
 31567 ;;  a               4   18[BANK0 ] unsigned char 
 31568 ;; Auto vars:     Size  Location     Type
 31569 ;;  prod            4   33[BANK0 ] struct .
 31570 ;;  grs             4   28[BANK0 ] unsigned long 
 31571 ;;  temp            2   37[BANK0 ] struct .
 31572 ;;  bexp            1   32[BANK0 ] unsigned char 
 31573 ;;  aexp            1   27[BANK0 ] unsigned char 
 31574 ;;  sign            1   26[BANK0 ] unsigned char 
 31575 ;; Return value:  Size  Location     Type
 31576 ;;                  4   14[BANK0 ] unsigned char 
 31577 ;; Registers used:
 31578 ;;		wreg, status,2, status,0, prodl, prodh
 31579 ;; Tracked objects:
 31580 ;;		On entry : 0/0
 31581 ;;		On exit  : 0/0
 31582 ;;		Unchanged: 0/0
 31583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31584 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31585 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31587 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31588 ;;Total ram usage:       25 bytes
 31589 ;; Hardware stack levels used:    1
 31590 ;; Hardware stack levels required when called:    7
 31591 ;; This function calls:
 31592 ;;		Nothing
 31593 ;; This function is called by:
 31594 ;;		_ADC_Voltage
 31595 ;;		_displayPositionMode
 31596 ;;		_main
 31597 ;;		_fround
 31598 ;;		_scale
 31599 ;;		_printf
 31600 ;;		_pow
 31601 ;;		_exp
 31602 ;;		_log
 31603 ;;		_eval_poly
 31604 ;; This function uses a non-reentrant model
 31605 ;;
 31606                           
 31607                           	psect	text160
 31608  011254                     __ptext160:
 31609                           	opt stack 0
 31610  011254                     ___flmul:
 31611                           	opt stack 21
 31612                           
 31613                           ; BSR set to: 0
 31614                           ;incstack = 0
 31615  011254  0100               	movlb	0	; () banked
 31616  011256  5171               	movf	(___flmul@b+3)& (0+255),w,b
 31617  011258  0B80               	andlw	128
 31618  01125A  0100               	movlb	0	; () banked
 31619  01125C  6F7A               	movwf	___flmul@sign& (0+255),b
 31620  01125E  0100               	movlb	0	; () banked
 31621  011260  5171               	movf	(___flmul@b+3)& (0+255),w,b
 31622  011262  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 31623  011264  0100               	movlb	0	; () banked
 31624  011266  6F80               	movwf	___flmul@bexp& (0+255),b
 31625                           
 31626                           ; BSR set to: 0
 31627  011268  0100               	movlb	0	; () banked
 31628  01126A  AF70               	btfss	(___flmul@b+2)& (0+255),7,b
 31629  01126C  D002               	goto	l14113
 31630                           
 31631                           ; BSR set to: 0
 31632  01126E  0100               	movlb	0	; () banked
 31633  011270  8180               	bsf	___flmul@bexp& (0+255),0,b
 31634  011272                     l14113:
 31635                           
 31636                           ; BSR set to: 0
 31637  011272  0100               	movlb	0	; () banked
 31638  011274  5180               	movf	___flmul@bexp& (0+255),w,b
 31639  011276  0100               	movlb	0	; () banked
 31640  011278  B4D8               	btfsc	status,2,c
 31641  01127A  D010               	goto	l14121
 31642                           
 31643                           ; BSR set to: 0
 31644  01127C  0100               	movlb	0	; () banked
 31645  01127E  2980               	incf	___flmul@bexp& (0+255),w,b
 31646  011280  A4D8               	btfss	status,2,c
 31647  011282  D009               	goto	l14119
 31648                           
 31649                           ; BSR set to: 0
 31650  011284  0E00               	movlw	0
 31651  011286  0100               	movlb	0	; () banked
 31652  011288  6F6E               	movwf	___flmul@b& (0+255),b
 31653  01128A  0E00               	movlw	0
 31654  01128C  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 31655  01128E  0E00               	movlw	0
 31656  011290  6F70               	movwf	(___flmul@b+2)& (0+255),b
 31657  011292  0E00               	movlw	0
 31658  011294  6F71               	movwf	(___flmul@b+3)& (0+255),b
 31659  011296                     l14119:
 31660                           
 31661                           ; BSR set to: 0
 31662  011296  0100               	movlb	0	; () banked
 31663  011298  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 31664  01129A  D009               	goto	l14123
 31665  01129C                     l14121:
 31666                           
 31667                           ; BSR set to: 0
 31668  01129C  0E00               	movlw	0
 31669  01129E  0100               	movlb	0	; () banked
 31670  0112A0  6F6E               	movwf	___flmul@b& (0+255),b
 31671  0112A2  0E00               	movlw	0
 31672  0112A4  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 31673  0112A6  0E00               	movlw	0
 31674  0112A8  6F70               	movwf	(___flmul@b+2)& (0+255),b
 31675  0112AA  0E00               	movlw	0
 31676  0112AC  6F71               	movwf	(___flmul@b+3)& (0+255),b
 31677  0112AE                     l14123:
 31678                           
 31679                           ; BSR set to: 0
 31680  0112AE  0100               	movlb	0	; () banked
 31681  0112B0  5175               	movf	(___flmul@a+3)& (0+255),w,b
 31682  0112B2  0B80               	andlw	128
 31683  0112B4  0100               	movlb	0	; () banked
 31684  0112B6  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 31685                           
 31686                           ; BSR set to: 0
 31687  0112B8  0100               	movlb	0	; () banked
 31688  0112BA  5175               	movf	(___flmul@a+3)& (0+255),w,b
 31689  0112BC  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 31690  0112BE  0100               	movlb	0	; () banked
 31691  0112C0  6F7B               	movwf	___flmul@aexp& (0+255),b
 31692                           
 31693                           ; BSR set to: 0
 31694  0112C2  0100               	movlb	0	; () banked
 31695  0112C4  AF74               	btfss	(___flmul@a+2)& (0+255),7,b
 31696  0112C6  D002               	goto	l14131
 31697                           
 31698                           ; BSR set to: 0
 31699  0112C8  0100               	movlb	0	; () banked
 31700  0112CA  817B               	bsf	___flmul@aexp& (0+255),0,b
 31701  0112CC                     l14131:
 31702                           
 31703                           ; BSR set to: 0
 31704  0112CC  0100               	movlb	0	; () banked
 31705  0112CE  517B               	movf	___flmul@aexp& (0+255),w,b
 31706  0112D0  0100               	movlb	0	; () banked
 31707  0112D2  B4D8               	btfsc	status,2,c
 31708  0112D4  D010               	goto	l14139
 31709                           
 31710                           ; BSR set to: 0
 31711  0112D6  0100               	movlb	0	; () banked
 31712  0112D8  297B               	incf	___flmul@aexp& (0+255),w,b
 31713  0112DA  A4D8               	btfss	status,2,c
 31714  0112DC  D009               	goto	l14137
 31715                           
 31716                           ; BSR set to: 0
 31717  0112DE  0E00               	movlw	0
 31718  0112E0  0100               	movlb	0	; () banked
 31719  0112E2  6F72               	movwf	___flmul@a& (0+255),b
 31720  0112E4  0E00               	movlw	0
 31721  0112E6  6F73               	movwf	(___flmul@a+1)& (0+255),b
 31722  0112E8  0E00               	movlw	0
 31723  0112EA  6F74               	movwf	(___flmul@a+2)& (0+255),b
 31724  0112EC  0E00               	movlw	0
 31725  0112EE  6F75               	movwf	(___flmul@a+3)& (0+255),b
 31726  0112F0                     l14137:
 31727                           
 31728                           ; BSR set to: 0
 31729  0112F0  0100               	movlb	0	; () banked
 31730  0112F2  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 31731  0112F4  D009               	goto	l2799
 31732  0112F6                     l14139:
 31733                           
 31734                           ; BSR set to: 0
 31735  0112F6  0E00               	movlw	0
 31736  0112F8  0100               	movlb	0	; () banked
 31737  0112FA  6F72               	movwf	___flmul@a& (0+255),b
 31738  0112FC  0E00               	movlw	0
 31739  0112FE  6F73               	movwf	(___flmul@a+1)& (0+255),b
 31740  011300  0E00               	movlw	0
 31741  011302  6F74               	movwf	(___flmul@a+2)& (0+255),b
 31742  011304  0E00               	movlw	0
 31743  011306  6F75               	movwf	(___flmul@a+3)& (0+255),b
 31744  011308                     l2799:
 31745                           
 31746                           ; BSR set to: 0
 31747  011308  0100               	movlb	0	; () banked
 31748  01130A  517B               	movf	___flmul@aexp& (0+255),w,b
 31749  01130C  0100               	movlb	0	; () banked
 31750  01130E  B4D8               	btfsc	status,2,c
 31751  011310  D005               	goto	l14143
 31752                           
 31753                           ; BSR set to: 0
 31754  011312  0100               	movlb	0	; () banked
 31755  011314  5180               	movf	___flmul@bexp& (0+255),w,b
 31756  011316  0100               	movlb	0	; () banked
 31757  011318  A4D8               	btfss	status,2,c
 31758  01131A  D00A               	goto	l14147
 31759  01131C                     l14143:
 31760                           
 31761                           ; BSR set to: 0
 31762  01131C  0E00               	movlw	0
 31763  01131E  0100               	movlb	0	; () banked
 31764  011320  6F6E               	movwf	?___flmul& (0+255),b
 31765  011322  0E00               	movlw	0
 31766  011324  6F6F               	movwf	(?___flmul+1)& (0+255),b
 31767  011326  0E00               	movlw	0
 31768  011328  6F70               	movwf	(?___flmul+2)& (0+255),b
 31769  01132A  0E00               	movlw	0
 31770  01132C  6F71               	movwf	(?___flmul+3)& (0+255),b
 31771                           
 31772                           ; BSR set to: 0
 31773  01132E  0012               	return	
 31774  011330                     l14147:
 31775                           
 31776                           ; BSR set to: 0
 31777  011330  0100               	movlb	0	; () banked
 31778  011332  5174               	movf	(___flmul@a+2)& (0+255),w,b
 31779  011334  0100               	movlb	0	; () banked
 31780  011336  036E               	mulwf	___flmul@b& (0+255),b
 31781  011338  CFF3 F085          	movff	prodl,___flmul@temp
 31782  01133C  CFF4 F086          	movff	prodh,___flmul@temp+1
 31783                           
 31784                           ; BSR set to: 0
 31785  011340  0100               	movlb	0	; () banked
 31786  011342  5185               	movf	___flmul@temp& (0+255),w,b
 31787  011344  0100               	movlb	0	; () banked
 31788  011346  6F7C               	movwf	___flmul@grs& (0+255),b
 31789  011348  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 31790  01134A  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 31791  01134C  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 31792                           
 31793                           ; BSR set to: 0
 31794  01134E  0100               	movlb	0	; () banked
 31795  011350  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31796  011352  0100               	movlb	0	; () banked
 31797  011354  6F81               	movwf	___flmul@prod& (0+255),b
 31798  011356  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 31799  011358  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 31800  01135A  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 31801  01135C  0100               	movlb	0	; () banked
 31802  01135E  5173               	movf	(___flmul@a+1)& (0+255),w,b
 31803  011360  0100               	movlb	0	; () banked
 31804  011362  036F               	mulwf	(___flmul@b+1)& (0+255),b
 31805  011364  CFF3 F085          	movff	prodl,___flmul@temp
 31806  011368  CFF4 F086          	movff	prodh,___flmul@temp+1
 31807                           
 31808                           ; BSR set to: 0
 31809  01136C  0100               	movlb	0	; () banked
 31810  01136E  5185               	movf	___flmul@temp& (0+255),w,b
 31811  011370  0100               	movlb	0	; () banked
 31812  011372  277C               	addwf	___flmul@grs& (0+255),f,b
 31813  011374  0E00               	movlw	0
 31814  011376  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31815  011378  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31816  01137A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31817                           
 31818                           ; BSR set to: 0
 31819  01137C  0100               	movlb	0	; () banked
 31820  01137E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31821  011380  0100               	movlb	0	; () banked
 31822  011382  2781               	addwf	___flmul@prod& (0+255),f,b
 31823  011384  0E00               	movlw	0
 31824  011386  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31825  011388  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31826  01138A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31827  01138C  0100               	movlb	0	; () banked
 31828  01138E  5172               	movf	___flmul@a& (0+255),w,b
 31829  011390  0100               	movlb	0	; () banked
 31830  011392  0370               	mulwf	(___flmul@b+2)& (0+255),b
 31831  011394  CFF3 F085          	movff	prodl,___flmul@temp
 31832  011398  CFF4 F086          	movff	prodh,___flmul@temp+1
 31833                           
 31834                           ; BSR set to: 0
 31835  01139C  0100               	movlb	0	; () banked
 31836  01139E  5185               	movf	___flmul@temp& (0+255),w,b
 31837  0113A0  0100               	movlb	0	; () banked
 31838  0113A2  277C               	addwf	___flmul@grs& (0+255),f,b
 31839  0113A4  0E00               	movlw	0
 31840  0113A6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31841  0113A8  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31842  0113AA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31843                           
 31844                           ; BSR set to: 0
 31845  0113AC  0100               	movlb	0	; () banked
 31846  0113AE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31847  0113B0  0100               	movlb	0	; () banked
 31848  0113B2  2781               	addwf	___flmul@prod& (0+255),f,b
 31849  0113B4  0E00               	movlw	0
 31850  0113B6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31851  0113B8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31852  0113BA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31853                           
 31854                           ; BSR set to: 0
 31855  0113BC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 31856  0113C0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 31857  0113C4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 31858  0113C8  0100               	movlb	0	; () banked
 31859  0113CA  6B7C               	clrf	___flmul@grs& (0+255),b
 31860                           
 31861                           ; BSR set to: 0
 31862  0113CC  0100               	movlb	0	; () banked
 31863  0113CE  5172               	movf	___flmul@a& (0+255),w,b
 31864  0113D0  0100               	movlb	0	; () banked
 31865  0113D2  036F               	mulwf	(___flmul@b+1)& (0+255),b
 31866  0113D4  CFF3 F085          	movff	prodl,___flmul@temp
 31867  0113D8  CFF4 F086          	movff	prodh,___flmul@temp+1
 31868                           
 31869                           ; BSR set to: 0
 31870  0113DC  0100               	movlb	0	; () banked
 31871  0113DE  5185               	movf	___flmul@temp& (0+255),w,b
 31872  0113E0  0100               	movlb	0	; () banked
 31873  0113E2  277C               	addwf	___flmul@grs& (0+255),f,b
 31874  0113E4  0100               	movlb	0	; () banked
 31875  0113E6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31876  0113E8  0100               	movlb	0	; () banked
 31877  0113EA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31878  0113EC  0E00               	movlw	0
 31879  0113EE  0100               	movlb	0	; () banked
 31880  0113F0  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31881  0113F2  0E00               	movlw	0
 31882  0113F4  0100               	movlb	0	; () banked
 31883  0113F6  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31884                           
 31885                           ; BSR set to: 0
 31886  0113F8  0100               	movlb	0	; () banked
 31887  0113FA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 31888  0113FC  0100               	movlb	0	; () banked
 31889  0113FE  036E               	mulwf	___flmul@b& (0+255),b
 31890  011400  CFF3 F085          	movff	prodl,___flmul@temp
 31891  011404  CFF4 F086          	movff	prodh,___flmul@temp+1
 31892                           
 31893                           ; BSR set to: 0
 31894  011408  0100               	movlb	0	; () banked
 31895  01140A  5185               	movf	___flmul@temp& (0+255),w,b
 31896  01140C  0100               	movlb	0	; () banked
 31897  01140E  277C               	addwf	___flmul@grs& (0+255),f,b
 31898  011410  0100               	movlb	0	; () banked
 31899  011412  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31900  011414  0100               	movlb	0	; () banked
 31901  011416  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31902  011418  0E00               	movlw	0
 31903  01141A  0100               	movlb	0	; () banked
 31904  01141C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31905  01141E  0E00               	movlw	0
 31906  011420  0100               	movlb	0	; () banked
 31907  011422  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31908                           
 31909                           ; BSR set to: 0
 31910  011424  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 31911  011428  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 31912  01142C  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 31913  011430  0100               	movlb	0	; () banked
 31914  011432  6B7C               	clrf	___flmul@grs& (0+255),b
 31915  011434  0100               	movlb	0	; () banked
 31916  011436  5172               	movf	___flmul@a& (0+255),w,b
 31917  011438  0100               	movlb	0	; () banked
 31918  01143A  036E               	mulwf	___flmul@b& (0+255),b
 31919  01143C  CFF3 F085          	movff	prodl,___flmul@temp
 31920  011440  CFF4 F086          	movff	prodh,___flmul@temp+1
 31921                           
 31922                           ; BSR set to: 0
 31923  011444  0100               	movlb	0	; () banked
 31924  011446  5185               	movf	___flmul@temp& (0+255),w,b
 31925  011448  0100               	movlb	0	; () banked
 31926  01144A  277C               	addwf	___flmul@grs& (0+255),f,b
 31927  01144C  0100               	movlb	0	; () banked
 31928  01144E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31929  011450  0100               	movlb	0	; () banked
 31930  011452  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31931  011454  0E00               	movlw	0
 31932  011456  0100               	movlb	0	; () banked
 31933  011458  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31934  01145A  0E00               	movlw	0
 31935  01145C  0100               	movlb	0	; () banked
 31936  01145E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31937                           
 31938                           ; BSR set to: 0
 31939  011460  0100               	movlb	0	; () banked
 31940  011462  5174               	movf	(___flmul@a+2)& (0+255),w,b
 31941  011464  0100               	movlb	0	; () banked
 31942  011466  036F               	mulwf	(___flmul@b+1)& (0+255),b
 31943  011468  CFF3 F085          	movff	prodl,___flmul@temp
 31944  01146C  CFF4 F086          	movff	prodh,___flmul@temp+1
 31945  011470  0100               	movlb	0	; () banked
 31946  011472  5185               	movf	___flmul@temp& (0+255),w,b
 31947  011474  0100               	movlb	0	; () banked
 31948  011476  2781               	addwf	___flmul@prod& (0+255),f,b
 31949  011478  0100               	movlb	0	; () banked
 31950  01147A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31951  01147C  0100               	movlb	0	; () banked
 31952  01147E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31953  011480  0E00               	movlw	0
 31954  011482  0100               	movlb	0	; () banked
 31955  011484  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31956  011486  0E00               	movlw	0
 31957  011488  0100               	movlb	0	; () banked
 31958  01148A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31959                           
 31960                           ; BSR set to: 0
 31961  01148C  0100               	movlb	0	; () banked
 31962  01148E  5173               	movf	(___flmul@a+1)& (0+255),w,b
 31963  011490  0100               	movlb	0	; () banked
 31964  011492  0370               	mulwf	(___flmul@b+2)& (0+255),b
 31965  011494  CFF3 F085          	movff	prodl,___flmul@temp
 31966  011498  CFF4 F086          	movff	prodh,___flmul@temp+1
 31967                           
 31968                           ; BSR set to: 0
 31969  01149C  0100               	movlb	0	; () banked
 31970  01149E  5185               	movf	___flmul@temp& (0+255),w,b
 31971  0114A0  0100               	movlb	0	; () banked
 31972  0114A2  2781               	addwf	___flmul@prod& (0+255),f,b
 31973  0114A4  0100               	movlb	0	; () banked
 31974  0114A6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31975  0114A8  0100               	movlb	0	; () banked
 31976  0114AA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31977  0114AC  0E00               	movlw	0
 31978  0114AE  0100               	movlb	0	; () banked
 31979  0114B0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31980  0114B2  0E00               	movlw	0
 31981  0114B4  0100               	movlb	0	; () banked
 31982  0114B6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31983  0114B8  0100               	movlb	0	; () banked
 31984  0114BA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 31985  0114BC  0100               	movlb	0	; () banked
 31986  0114BE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 31987  0114C0  CFF3 F085          	movff	prodl,___flmul@temp
 31988  0114C4  CFF4 F086          	movff	prodh,___flmul@temp+1
 31989                           
 31990                           ; BSR set to: 0
 31991  0114C8  0100               	movlb	0	; () banked
 31992  0114CA  5185               	movf	___flmul@temp& (0+255),w,b
 31993  0114CC  0100               	movlb	0	; () banked
 31994  0114CE  6F76               	movwf	??___flmul& (0+255),b
 31995  0114D0  0100               	movlb	0	; () banked
 31996  0114D2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31997  0114D4  0100               	movlb	0	; () banked
 31998  0114D6  6F77               	movwf	(??___flmul+1)& (0+255),b
 31999  0114D8  0100               	movlb	0	; () banked
 32000  0114DA  6B78               	clrf	(??___flmul+2)& (0+255),b
 32001  0114DC  0100               	movlb	0	; () banked
 32002  0114DE  6B79               	clrf	(??___flmul+3)& (0+255),b
 32003  0114E0  C078  F079         	movff	??___flmul+2,??___flmul+3
 32004  0114E4  C077  F078         	movff	??___flmul+1,??___flmul+2
 32005  0114E8  C076  F077         	movff	??___flmul,??___flmul+1
 32006  0114EC  0100               	movlb	0	; () banked
 32007  0114EE  6B76               	clrf	??___flmul& (0+255),b
 32008  0114F0  0100               	movlb	0	; () banked
 32009  0114F2  5176               	movf	??___flmul& (0+255),w,b
 32010  0114F4  0100               	movlb	0	; () banked
 32011  0114F6  2781               	addwf	___flmul@prod& (0+255),f,b
 32012  0114F8  0100               	movlb	0	; () banked
 32013  0114FA  5177               	movf	(??___flmul+1)& (0+255),w,b
 32014  0114FC  0100               	movlb	0	; () banked
 32015  0114FE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 32016  011500  0100               	movlb	0	; () banked
 32017  011502  5178               	movf	(??___flmul+2)& (0+255),w,b
 32018  011504  0100               	movlb	0	; () banked
 32019  011506  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 32020  011508  0100               	movlb	0	; () banked
 32021  01150A  5179               	movf	(??___flmul+3)& (0+255),w,b
 32022  01150C  0100               	movlb	0	; () banked
 32023  01150E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 32024                           
 32025                           ; BSR set to: 0
 32026  011510  C07C  F076         	movff	___flmul@grs,??___flmul
 32027  011514  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 32028  011518  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 32029  01151C  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 32030  011520  0E19               	movlw	25
 32031  011522  D006               	goto	u11620
 32032  011524                     u11625:
 32033  011524  0100               	movlb	0	; () banked
 32034  011526  90D8               	bcf	status,0,c
 32035  011528  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 32036  01152A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 32037  01152C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 32038  01152E  3376               	rrcf	??___flmul& (0+255),f,b
 32039  011530                     u11620:
 32040  011530  2EE8               	decfsz	wreg,f,c
 32041  011532  D7F8               	goto	u11625
 32042  011534  0100               	movlb	0	; () banked
 32043  011536  5176               	movf	??___flmul& (0+255),w,b
 32044  011538  0100               	movlb	0	; () banked
 32045  01153A  2781               	addwf	___flmul@prod& (0+255),f,b
 32046  01153C  0100               	movlb	0	; () banked
 32047  01153E  5177               	movf	(??___flmul+1)& (0+255),w,b
 32048  011540  0100               	movlb	0	; () banked
 32049  011542  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 32050  011544  0100               	movlb	0	; () banked
 32051  011546  5178               	movf	(??___flmul+2)& (0+255),w,b
 32052  011548  0100               	movlb	0	; () banked
 32053  01154A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 32054  01154C  0100               	movlb	0	; () banked
 32055  01154E  5179               	movf	(??___flmul+3)& (0+255),w,b
 32056  011550  0100               	movlb	0	; () banked
 32057  011552  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 32058                           
 32059                           ; BSR set to: 0
 32060  011554  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 32061  011558  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 32062  01155C  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 32063  011560  0100               	movlb	0	; () banked
 32064  011562  6B7C               	clrf	___flmul@grs& (0+255),b
 32065                           
 32066                           ; BSR set to: 0
 32067  011564  0100               	movlb	0	; () banked
 32068  011566  517B               	movf	___flmul@aexp& (0+255),w,b
 32069  011568  C080  F076         	movff	___flmul@bexp,??___flmul
 32070  01156C  0100               	movlb	0	; () banked
 32071  01156E  6B77               	clrf	(??___flmul+1)& (0+255),b
 32072  011570  0100               	movlb	0	; () banked
 32073  011572  2776               	addwf	??___flmul& (0+255),f,b
 32074  011574  0E00               	movlw	0
 32075  011576  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 32076  011578  0E82               	movlw	130
 32077  01157A  0100               	movlb	0	; () banked
 32078  01157C  2576               	addwf	??___flmul& (0+255),w,b
 32079  01157E  0100               	movlb	0	; () banked
 32080  011580  6F85               	movwf	___flmul@temp& (0+255),b
 32081  011582  0EFF               	movlw	255
 32082  011584  0100               	movlb	0	; () banked
 32083  011586  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 32084  011588  0100               	movlb	0	; () banked
 32085  01158A  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 32086  01158C  D015               	goto	l14195
 32087  01158E                     l14189:
 32088                           
 32089                           ; BSR set to: 0
 32090  01158E  0100               	movlb	0	; () banked
 32091  011590  90D8               	bcf	status,0,c
 32092  011592  3781               	rlcf	___flmul@prod& (0+255),f,b
 32093  011594  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 32094  011596  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 32095  011598  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 32096                           
 32097                           ; BSR set to: 0
 32098  01159A  0100               	movlb	0	; () banked
 32099  01159C  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 32100  01159E  D002               	goto	l2806
 32101                           
 32102                           ; BSR set to: 0
 32103  0115A0  0100               	movlb	0	; () banked
 32104  0115A2  8181               	bsf	___flmul@prod& (0+255),0,b
 32105  0115A4                     l2806:
 32106                           
 32107                           ; BSR set to: 0
 32108  0115A4  0100               	movlb	0	; () banked
 32109  0115A6  90D8               	bcf	status,0,c
 32110  0115A8  377C               	rlcf	___flmul@grs& (0+255),f,b
 32111  0115AA  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 32112  0115AC  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 32113  0115AE  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 32114  0115B0  0100               	movlb	0	; () banked
 32115  0115B2  0785               	decf	___flmul@temp& (0+255),f,b
 32116  0115B4  A0D8               	btfss	status,0,c
 32117  0115B6  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 32118  0115B8                     l14195:
 32119                           
 32120                           ; BSR set to: 0
 32121  0115B8  0100               	movlb	0	; () banked
 32122  0115BA  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 32123  0115BC  D7E8               	goto	l14189
 32124                           
 32125                           ; BSR set to: 0
 32126                           
 32127                           ; BSR set to: 0
 32128  0115BE  0E00               	movlw	0
 32129  0115C0  0100               	movlb	0	; () banked
 32130  0115C2  6F7B               	movwf	___flmul@aexp& (0+255),b
 32131                           
 32132                           ; BSR set to: 0
 32133  0115C4  0100               	movlb	0	; () banked
 32134  0115C6  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 32135  0115C8  D024               	goto	l2808
 32136                           
 32137                           ; BSR set to: 0
 32138  0115CA  0EFF               	movlw	255
 32139  0115CC  0100               	movlb	0	; () banked
 32140  0115CE  157C               	andwf	___flmul@grs& (0+255),w,b
 32141  0115D0  0100               	movlb	0	; () banked
 32142  0115D2  6F76               	movwf	??___flmul& (0+255),b
 32143  0115D4  0EFF               	movlw	255
 32144  0115D6  0100               	movlb	0	; () banked
 32145  0115D8  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 32146  0115DA  0100               	movlb	0	; () banked
 32147  0115DC  6F77               	movwf	(??___flmul+1)& (0+255),b
 32148  0115DE  0EFF               	movlw	255
 32149  0115E0  0100               	movlb	0	; () banked
 32150  0115E2  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 32151  0115E4  0100               	movlb	0	; () banked
 32152  0115E6  6F78               	movwf	(??___flmul+2)& (0+255),b
 32153  0115E8  0E7F               	movlw	127
 32154  0115EA  0100               	movlb	0	; () banked
 32155  0115EC  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 32156  0115EE  0100               	movlb	0	; () banked
 32157  0115F0  6F79               	movwf	(??___flmul+3)& (0+255),b
 32158  0115F2  0100               	movlb	0	; () banked
 32159  0115F4  5176               	movf	??___flmul& (0+255),w,b
 32160  0115F6  0100               	movlb	0	; () banked
 32161  0115F8  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 32162  0115FA  0100               	movlb	0	; () banked
 32163  0115FC  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 32164  0115FE  0100               	movlb	0	; () banked
 32165  011600  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 32166  011602  A4D8               	btfss	status,2,c
 32167  011604  D003               	goto	l14205
 32168                           
 32169                           ; BSR set to: 0
 32170                           
 32171                           ; BSR set to: 0
 32172  011606  0100               	movlb	0	; () banked
 32173  011608  A181               	btfss	___flmul@prod& (0+255),0,b
 32174  01160A  D003               	goto	l2808
 32175  01160C                     l14205:
 32176                           
 32177                           ; BSR set to: 0
 32178  01160C  0E01               	movlw	1
 32179  01160E  0100               	movlb	0	; () banked
 32180  011610  6F7B               	movwf	___flmul@aexp& (0+255),b
 32181  011612                     l2808:
 32182                           
 32183                           ; BSR set to: 0
 32184  011612  0100               	movlb	0	; () banked
 32185  011614  517B               	movf	___flmul@aexp& (0+255),w,b
 32186  011616  0100               	movlb	0	; () banked
 32187  011618  B4D8               	btfsc	status,2,c
 32188  01161A  D023               	goto	l14215
 32189                           
 32190                           ; BSR set to: 0
 32191  01161C  0E01               	movlw	1
 32192  01161E  0100               	movlb	0	; () banked
 32193  011620  2781               	addwf	___flmul@prod& (0+255),f,b
 32194  011622  0E00               	movlw	0
 32195  011624  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 32196  011626  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 32197  011628  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 32198                           
 32199                           ; BSR set to: 0
 32200  01162A  0100               	movlb	0	; () banked
 32201  01162C  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 32202  01162E  D019               	goto	l14215
 32203                           
 32204                           ; BSR set to: 0
 32205  011630  C081  F076         	movff	___flmul@prod,??___flmul
 32206  011634  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 32207  011638  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 32208  01163C  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 32209  011640  0100               	movlb	0	; () banked
 32210  011642  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 32211  011644  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 32212  011646  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 32213  011648  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 32214  01164A  3376               	rrcf	??___flmul& (0+255),f,b
 32215  01164C  C076  F081         	movff	??___flmul,___flmul@prod
 32216  011650  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 32217  011654  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 32218  011658  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 32219                           
 32220                           ; BSR set to: 0
 32221  01165C  0100               	movlb	0	; () banked
 32222  01165E  4B85               	infsnz	___flmul@temp& (0+255),f,b
 32223  011660  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 32224  011662                     l14215:
 32225                           
 32226                           ; BSR set to: 0
 32227  011662  0100               	movlb	0	; () banked
 32228  011664  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 32229  011666  D010               	goto	l14219
 32230  011668  0100               	movlb	0	; () banked
 32231  01166A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 32232  01166C  E104               	bnz	u11700
 32233  01166E  0100               	movlb	0	; () banked
 32234  011670  2985               	incf	___flmul@temp& (0+255),w,b
 32235  011672  A0D8               	btfss	status,0,c
 32236  011674  D009               	goto	l14219
 32237  011676                     u11700:
 32238                           
 32239                           ; BSR set to: 0
 32240  011676  0E00               	movlw	0
 32241  011678  0100               	movlb	0	; () banked
 32242  01167A  6F81               	movwf	___flmul@prod& (0+255),b
 32243  01167C  0E00               	movlw	0
 32244  01167E  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 32245  011680  0E80               	movlw	128
 32246  011682  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 32247  011684  0E7F               	movlw	127
 32248  011686  D02B               	goto	L22
 32249  011688                     l14219:
 32250                           
 32251                           ; BSR set to: 0
 32252  011688  0100               	movlb	0	; () banked
 32253  01168A  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 32254  01168C  D007               	goto	l14221
 32255  01168E  0100               	movlb	0	; () banked
 32256  011690  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 32257  011692  E111               	bnz	l2816
 32258  011694  0100               	movlb	0	; () banked
 32259  011696  0585               	decf	___flmul@temp& (0+255),w,b
 32260  011698  B0D8               	btfsc	status,0,c
 32261  01169A  D00D               	goto	l2816
 32262  01169C                     l14221:
 32263                           
 32264                           ; BSR set to: 0
 32265  01169C  0E00               	movlw	0
 32266  01169E  0100               	movlb	0	; () banked
 32267  0116A0  6F81               	movwf	___flmul@prod& (0+255),b
 32268  0116A2  0E00               	movlw	0
 32269  0116A4  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 32270  0116A6  0E00               	movlw	0
 32271  0116A8  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 32272  0116AA  0E00               	movlw	0
 32273  0116AC  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 32274  0116AE  0E00               	movlw	0
 32275  0116B0  0100               	movlb	0	; () banked
 32276  0116B2  6F7A               	movwf	___flmul@sign& (0+255),b
 32277  0116B4  D015               	goto	l14231
 32278  0116B6                     l2816:
 32279                           
 32280                           ; BSR set to: 0
 32281  0116B6  C085  F080         	movff	___flmul@temp,___flmul@bexp
 32282                           
 32283                           ; BSR set to: 0
 32284  0116BA  0EFF               	movlw	255
 32285  0116BC  0100               	movlb	0	; () banked
 32286  0116BE  1781               	andwf	___flmul@prod& (0+255),f,b
 32287  0116C0  0EFF               	movlw	255
 32288  0116C2  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 32289  0116C4  0E7F               	movlw	127
 32290  0116C6  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 32291  0116C8  0E00               	movlw	0
 32292  0116CA  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 32293                           
 32294                           ; BSR set to: 0
 32295  0116CC  0100               	movlb	0	; () banked
 32296  0116CE  A180               	btfss	___flmul@bexp& (0+255),0,b
 32297  0116D0  D002               	goto	l14229
 32298                           
 32299                           ; BSR set to: 0
 32300  0116D2  0100               	movlb	0	; () banked
 32301  0116D4  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 32302  0116D6                     l14229:
 32303                           
 32304                           ; BSR set to: 0
 32305  0116D6  0100               	movlb	0	; () banked
 32306  0116D8  90D8               	bcf	status,0,c
 32307  0116DA  3180               	rrcf	___flmul@bexp& (0+255),w,b
 32308  0116DC  0100               	movlb	0	; () banked
 32309  0116DE                     L22:
 32310  0116DE  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 32311  0116E0                     l14231:
 32312                           
 32313                           ; BSR set to: 0
 32314  0116E0  0100               	movlb	0	; () banked
 32315  0116E2  517A               	movf	___flmul@sign& (0+255),w,b
 32316  0116E4  0100               	movlb	0	; () banked
 32317  0116E6  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 32318                           
 32319                           ; BSR set to: 0
 32320  0116E8  C081  F06E         	movff	___flmul@prod,?___flmul
 32321  0116EC  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 32322  0116F0  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 32323  0116F4  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 32324  0116F8  0012               	return	
 32325  0116FA                     __end_of___flmul:
 32326                           	opt stack 0
 32327                           tosu	equ	0xFFF
 32328                           tosh	equ	0xFFE
 32329                           tosl	equ	0xFFD
 32330                           pclath	equ	0xFFA
 32331                           tblptru	equ	0xFF8
 32332                           tblptrh	equ	0xFF7
 32333                           tblptrl	equ	0xFF6
 32334                           tablat	equ	0xFF5
 32335                           prodh	equ	0xFF4
 32336                           prodl	equ	0xFF3
 32337                           intcon	equ	0xFF2
 32338                           indf0	equ	0xFEF
 32339                           postinc0	equ	0xFEE
 32340                           fsr0h	equ	0xFEA
 32341                           fsr0l	equ	0xFE9
 32342                           wreg	equ	0xFE8
 32343                           indf1	equ	0xFE7
 32344                           postdec1	equ	0xFE5
 32345                           fsr1h	equ	0xFE2
 32346                           fsr1l	equ	0xFE1
 32347                           indf2	equ	0xFDF
 32348                           postinc2	equ	0xFDE
 32349                           postdec2	equ	0xFDD
 32350                           plusw2	equ	0xFDB
 32351                           fsr2h	equ	0xFDA
 32352                           fsr2l	equ	0xFD9
 32353                           status	equ	0xFD8
 32354                           
 32355 ;; *************** function ___fldiv *****************
 32356 ;; Defined at:
 32357 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprcdiv.c"
 32358 ;; Parameters:    Size  Location     Type
 32359 ;;  b               4    0[BANK0 ] unsigned char 
 32360 ;;  a               4    4[BANK0 ] unsigned char 
 32361 ;; Auto vars:     Size  Location     Type
 32362 ;;  grs             4   19[BANK0 ] unsigned long 
 32363 ;;  rem             4   13[BANK0 ] unsigned long 
 32364 ;;  new_exp         2   17[BANK0 ] int 
 32365 ;;  aexp            1   24[BANK0 ] unsigned char 
 32366 ;;  bexp            1   23[BANK0 ] unsigned char 
 32367 ;;  sign            1   12[BANK0 ] unsigned char 
 32368 ;; Return value:  Size  Location     Type
 32369 ;;                  4    0[BANK0 ] unsigned char 
 32370 ;; Registers used:
 32371 ;;		wreg, status,2, status,0
 32372 ;; Tracked objects:
 32373 ;;		On entry : 0/0
 32374 ;;		On exit  : 0/0
 32375 ;;		Unchanged: 0/0
 32376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32377 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32378 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32379 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32380 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32381 ;;Total ram usage:       25 bytes
 32382 ;; Hardware stack levels used:    1
 32383 ;; Hardware stack levels required when called:    7
 32384 ;; This function calls:
 32385 ;;		Nothing
 32386 ;; This function is called by:
 32387 ;;		_ADC_Voltage
 32388 ;;		_exp
 32389 ;; This function uses a non-reentrant model
 32390 ;;
 32391                           
 32392                           	psect	text161
 32393  011B18                     __ptext161:
 32394                           	opt stack 0
 32395  011B18                     ___fldiv:
 32396                           	opt stack 21
 32397                           
 32398                           ; BSR set to: 0
 32399                           ;incstack = 0
 32400  011B18  0100               	movlb	0	; () banked
 32401  011B1A  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 32402  011B1C  0B80               	andlw	128
 32403  011B1E  0100               	movlb	0	; () banked
 32404  011B20  6F6C               	movwf	___fldiv@sign& (0+255),b
 32405  011B22  0100               	movlb	0	; () banked
 32406  011B24  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 32407  011B26  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 32408  011B28  0100               	movlb	0	; () banked
 32409  011B2A  6F77               	movwf	___fldiv@bexp& (0+255),b
 32410                           
 32411                           ; BSR set to: 0
 32412  011B2C  0100               	movlb	0	; () banked
 32413  011B2E  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 32414  011B30  D002               	goto	l14903
 32415                           
 32416                           ; BSR set to: 0
 32417  011B32  0100               	movlb	0	; () banked
 32418  011B34  8177               	bsf	___fldiv@bexp& (0+255),0,b
 32419  011B36                     l14903:
 32420                           
 32421                           ; BSR set to: 0
 32422  011B36  0100               	movlb	0	; () banked
 32423  011B38  5177               	movf	___fldiv@bexp& (0+255),w,b
 32424  011B3A  0100               	movlb	0	; () banked
 32425  011B3C  B4D8               	btfsc	status,2,c
 32426  011B3E  D012               	goto	l14913
 32427                           
 32428                           ; BSR set to: 0
 32429  011B40  0100               	movlb	0	; () banked
 32430  011B42  2977               	incf	___fldiv@bexp& (0+255),w,b
 32431  011B44  A4D8               	btfss	status,2,c
 32432  011B46  D009               	goto	l14909
 32433                           
 32434                           ; BSR set to: 0
 32435  011B48  0E00               	movlw	0
 32436  011B4A  0100               	movlb	0	; () banked
 32437  011B4C  6F60               	movwf	___fldiv@b& (0+255),b
 32438  011B4E  0E00               	movlw	0
 32439  011B50  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32440  011B52  0E00               	movlw	0
 32441  011B54  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32442  011B56  0E00               	movlw	0
 32443  011B58  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32444  011B5A                     l14909:
 32445                           
 32446                           ; BSR set to: 0
 32447  011B5A  0100               	movlb	0	; () banked
 32448  011B5C  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 32449                           
 32450                           ; BSR set to: 0
 32451  011B5E  0E00               	movlw	0
 32452  011B60  0100               	movlb	0	; () banked
 32453  011B62  D008               	goto	L23
 32454  011B64                     l14913:
 32455                           
 32456                           ; BSR set to: 0
 32457  011B64  0E00               	movlw	0
 32458  011B66  0100               	movlb	0	; () banked
 32459  011B68  6F60               	movwf	___fldiv@b& (0+255),b
 32460  011B6A  0E00               	movlw	0
 32461  011B6C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32462  011B6E  0E00               	movlw	0
 32463  011B70  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32464  011B72  0E00               	movlw	0
 32465  011B74                     L23:
 32466  011B74  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32467                           
 32468                           ; BSR set to: 0
 32469                           
 32470                           ; BSR set to: 0
 32471  011B76  0100               	movlb	0	; () banked
 32472  011B78  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32473  011B7A  0B80               	andlw	128
 32474  011B7C  0100               	movlb	0	; () banked
 32475  011B7E  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 32476                           
 32477                           ; BSR set to: 0
 32478  011B80  0100               	movlb	0	; () banked
 32479  011B82  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32480  011B84  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 32481  011B86  0100               	movlb	0	; () banked
 32482  011B88  6F78               	movwf	___fldiv@aexp& (0+255),b
 32483                           
 32484                           ; BSR set to: 0
 32485  011B8A  0100               	movlb	0	; () banked
 32486  011B8C  AF66               	btfss	(___fldiv@a+2)& (0+255),7,b
 32487  011B8E  D002               	goto	l14923
 32488                           
 32489                           ; BSR set to: 0
 32490  011B90  0100               	movlb	0	; () banked
 32491  011B92  8178               	bsf	___fldiv@aexp& (0+255),0,b
 32492  011B94                     l14923:
 32493                           
 32494                           ; BSR set to: 0
 32495  011B94  0100               	movlb	0	; () banked
 32496  011B96  5178               	movf	___fldiv@aexp& (0+255),w,b
 32497  011B98  0100               	movlb	0	; () banked
 32498  011B9A  B4D8               	btfsc	status,2,c
 32499  011B9C  D012               	goto	l14933
 32500                           
 32501                           ; BSR set to: 0
 32502  011B9E  0100               	movlb	0	; () banked
 32503  011BA0  2978               	incf	___fldiv@aexp& (0+255),w,b
 32504  011BA2  A4D8               	btfss	status,2,c
 32505  011BA4  D009               	goto	l14929
 32506                           
 32507                           ; BSR set to: 0
 32508  011BA6  0E00               	movlw	0
 32509  011BA8  0100               	movlb	0	; () banked
 32510  011BAA  6F64               	movwf	___fldiv@a& (0+255),b
 32511  011BAC  0E00               	movlw	0
 32512  011BAE  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 32513  011BB0  0E00               	movlw	0
 32514  011BB2  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 32515  011BB4  0E00               	movlw	0
 32516  011BB6  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 32517  011BB8                     l14929:
 32518                           
 32519                           ; BSR set to: 0
 32520  011BB8  0100               	movlb	0	; () banked
 32521  011BBA  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 32522                           
 32523                           ; BSR set to: 0
 32524  011BBC  0E00               	movlw	0
 32525  011BBE  0100               	movlb	0	; () banked
 32526  011BC0  D008               	goto	L24
 32527  011BC2                     l14933:
 32528                           
 32529                           ; BSR set to: 0
 32530  011BC2  0E00               	movlw	0
 32531  011BC4  0100               	movlb	0	; () banked
 32532  011BC6  6F64               	movwf	___fldiv@a& (0+255),b
 32533  011BC8  0E00               	movlw	0
 32534  011BCA  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 32535  011BCC  0E00               	movlw	0
 32536  011BCE  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 32537  011BD0  0E00               	movlw	0
 32538  011BD2                     L24:
 32539  011BD2  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 32540                           
 32541                           ; BSR set to: 0
 32542                           
 32543                           ; BSR set to: 0
 32544  011BD4  0100               	movlb	0	; () banked
 32545  011BD6  5164               	movf	___fldiv@a& (0+255),w,b
 32546  011BD8  0100               	movlb	0	; () banked
 32547  011BDA  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 32548  011BDC  0100               	movlb	0	; () banked
 32549  011BDE  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 32550  011BE0  0100               	movlb	0	; () banked
 32551  011BE2  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 32552  011BE4  A4D8               	btfss	status,2,c
 32553  011BE6  D017               	goto	l14945
 32554                           
 32555                           ; BSR set to: 0
 32556  011BE8  0E00               	movlw	0
 32557  011BEA  0100               	movlb	0	; () banked
 32558  011BEC  6F60               	movwf	___fldiv@b& (0+255),b
 32559  011BEE  0E00               	movlw	0
 32560  011BF0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32561  011BF2  0E00               	movlw	0
 32562  011BF4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32563  011BF6  0E00               	movlw	0
 32564  011BF8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32565                           
 32566                           ; BSR set to: 0
 32567  011BFA  0100               	movlb	0	; () banked
 32568  011BFC  0E80               	movlw	128
 32569  011BFE  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 32570  011C00  0E7F               	movlw	127
 32571  011C02  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 32572                           
 32573                           ; BSR set to: 0
 32574  011C04  C060  F060         	movff	___fldiv@b,?___fldiv
 32575  011C08  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32576  011C0C  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32577  011C10  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32578                           
 32579                           ; BSR set to: 0
 32580  011C14  0012               	return	
 32581  011C16                     l14945:
 32582                           
 32583                           ; BSR set to: 0
 32584  011C16  0100               	movlb	0	; () banked
 32585  011C18  5177               	movf	___fldiv@bexp& (0+255),w,b
 32586  011C1A  0100               	movlb	0	; () banked
 32587  011C1C  A4D8               	btfss	status,2,c
 32588  011C1E  D012               	goto	l14953
 32589                           
 32590                           ; BSR set to: 0
 32591  011C20  0E00               	movlw	0
 32592  011C22  0100               	movlb	0	; () banked
 32593  011C24  6F60               	movwf	___fldiv@b& (0+255),b
 32594  011C26  0E00               	movlw	0
 32595  011C28  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32596  011C2A  0E00               	movlw	0
 32597  011C2C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32598  011C2E  0E00               	movlw	0
 32599  011C30  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32600                           
 32601                           ; BSR set to: 0
 32602  011C32  C060  F060         	movff	___fldiv@b,?___fldiv
 32603  011C36  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32604  011C3A  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32605  011C3E  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32606                           
 32607                           ; BSR set to: 0
 32608  011C42  0012               	return	
 32609  011C44                     l14953:
 32610                           
 32611                           ; BSR set to: 0
 32612  011C44  0100               	movlb	0	; () banked
 32613  011C46  5178               	movf	___fldiv@aexp& (0+255),w,b
 32614  011C48  0100               	movlb	0	; () banked
 32615  011C4A  6F68               	movwf	??___fldiv& (0+255),b
 32616  011C4C  6B69               	clrf	(??___fldiv+1)& (0+255),b
 32617  011C4E  0100               	movlb	0	; () banked
 32618  011C50  1F68               	comf	??___fldiv& (0+255),f,b
 32619  011C52  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 32620  011C54  4B68               	infsnz	??___fldiv& (0+255),f,b
 32621  011C56  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 32622  011C58  0100               	movlb	0	; () banked
 32623  011C5A  5177               	movf	___fldiv@bexp& (0+255),w,b
 32624  011C5C  0100               	movlb	0	; () banked
 32625  011C5E  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 32626  011C60  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 32627  011C62  0100               	movlb	0	; () banked
 32628  011C64  5168               	movf	??___fldiv& (0+255),w,b
 32629  011C66  0100               	movlb	0	; () banked
 32630  011C68  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 32631  011C6A  0100               	movlb	0	; () banked
 32632  011C6C  5169               	movf	(??___fldiv+1)& (0+255),w,b
 32633  011C6E  0100               	movlb	0	; () banked
 32634  011C70  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 32635  011C72  0E7F               	movlw	127
 32636  011C74  0100               	movlb	0	; () banked
 32637  011C76  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 32638  011C78  0100               	movlb	0	; () banked
 32639  011C7A  6F71               	movwf	___fldiv@new_exp& (0+255),b
 32640  011C7C  0E00               	movlw	0
 32641  011C7E  0100               	movlb	0	; () banked
 32642  011C80  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 32643  011C82  0100               	movlb	0	; () banked
 32644  011C84  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32645                           
 32646                           ; BSR set to: 0
 32647  011C86  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 32648  011C8A  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 32649  011C8E  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 32650  011C92  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 32651                           
 32652                           ; BSR set to: 0
 32653  011C96  0E00               	movlw	0
 32654  011C98  0100               	movlb	0	; () banked
 32655  011C9A  6F60               	movwf	___fldiv@b& (0+255),b
 32656  011C9C  0E00               	movlw	0
 32657  011C9E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32658  011CA0  0E00               	movlw	0
 32659  011CA2  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32660  011CA4  0E00               	movlw	0
 32661  011CA6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32662                           
 32663                           ; BSR set to: 0
 32664  011CA8  0E00               	movlw	0
 32665  011CAA  0100               	movlb	0	; () banked
 32666  011CAC  6F73               	movwf	___fldiv@grs& (0+255),b
 32667  011CAE  0E00               	movlw	0
 32668  011CB0  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 32669  011CB2  0E00               	movlw	0
 32670  011CB4  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 32671  011CB6  0E00               	movlw	0
 32672  011CB8  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 32673                           
 32674                           ; BSR set to: 0
 32675  011CBA  0E00               	movlw	0
 32676  011CBC  0100               	movlb	0	; () banked
 32677  011CBE  6F78               	movwf	___fldiv@aexp& (0+255),b
 32678  011CC0  D042               	goto	l2769
 32679  011CC2                     l14963:
 32680                           
 32681                           ; BSR set to: 0
 32682  011CC2  0100               	movlb	0	; () banked
 32683  011CC4  5178               	movf	___fldiv@aexp& (0+255),w,b
 32684  011CC6  0100               	movlb	0	; () banked
 32685  011CC8  B4D8               	btfsc	status,2,c
 32686  011CCA  D017               	goto	l14971
 32687                           
 32688                           ; BSR set to: 0
 32689  011CCC  0100               	movlb	0	; () banked
 32690  011CCE  90D8               	bcf	status,0,c
 32691  011CD0  376D               	rlcf	___fldiv@rem& (0+255),f,b
 32692  011CD2  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 32693  011CD4  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 32694  011CD6  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 32695  011CD8  0100               	movlb	0	; () banked
 32696  011CDA  90D8               	bcf	status,0,c
 32697  011CDC  3760               	rlcf	___fldiv@b& (0+255),f,b
 32698  011CDE  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 32699  011CE0  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 32700  011CE2  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 32701                           
 32702                           ; BSR set to: 0
 32703  011CE4  0100               	movlb	0	; () banked
 32704  011CE6  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 32705  011CE8  D002               	goto	l2772
 32706                           
 32707                           ; BSR set to: 0
 32708  011CEA  0100               	movlb	0	; () banked
 32709  011CEC  8160               	bsf	___fldiv@b& (0+255),0,b
 32710  011CEE                     l2772:
 32711                           
 32712                           ; BSR set to: 0
 32713  011CEE  0100               	movlb	0	; () banked
 32714  011CF0  90D8               	bcf	status,0,c
 32715  011CF2  3773               	rlcf	___fldiv@grs& (0+255),f,b
 32716  011CF4  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 32717  011CF6  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 32718  011CF8  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 32719  011CFA                     l14971:
 32720                           
 32721                           ; BSR set to: 0
 32722  011CFA  0100               	movlb	0	; () banked
 32723  011CFC  5164               	movf	___fldiv@a& (0+255),w,b
 32724  011CFE  0100               	movlb	0	; () banked
 32725  011D00  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 32726  011D02  0100               	movlb	0	; () banked
 32727  011D04  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 32728  011D06  0100               	movlb	0	; () banked
 32729  011D08  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 32730  011D0A  0100               	movlb	0	; () banked
 32731  011D0C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 32732  011D0E  0100               	movlb	0	; () banked
 32733  011D10  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 32734  011D12  0100               	movlb	0	; () banked
 32735  011D14  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32736  011D16  0100               	movlb	0	; () banked
 32737  011D18  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 32738  011D1A  A0D8               	btfss	status,0,c
 32739  011D1C  D012               	goto	l14977
 32740                           
 32741                           ; BSR set to: 0
 32742  011D1E  0100               	movlb	0	; () banked
 32743  011D20  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 32744                           
 32745                           ; BSR set to: 0
 32746  011D22  0100               	movlb	0	; () banked
 32747  011D24  5164               	movf	___fldiv@a& (0+255),w,b
 32748  011D26  0100               	movlb	0	; () banked
 32749  011D28  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 32750  011D2A  0100               	movlb	0	; () banked
 32751  011D2C  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 32752  011D2E  0100               	movlb	0	; () banked
 32753  011D30  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 32754  011D32  0100               	movlb	0	; () banked
 32755  011D34  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 32756  011D36  0100               	movlb	0	; () banked
 32757  011D38  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 32758  011D3A  0100               	movlb	0	; () banked
 32759  011D3C  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32760  011D3E  0100               	movlb	0	; () banked
 32761  011D40  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 32762  011D42                     l14977:
 32763                           
 32764                           ; BSR set to: 0
 32765  011D42  0100               	movlb	0	; () banked
 32766  011D44  2B78               	incf	___fldiv@aexp& (0+255),f,b
 32767  011D46                     l2769:
 32768                           
 32769                           ; BSR set to: 0
 32770  011D46  0E19               	movlw	25
 32771  011D48  0100               	movlb	0	; () banked
 32772  011D4A  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 32773  011D4C  D7BA               	goto	l14963
 32774                           
 32775                           ; BSR set to: 0
 32776                           
 32777                           ; BSR set to: 0
 32778  011D4E  0100               	movlb	0	; () banked
 32779  011D50  516D               	movf	___fldiv@rem& (0+255),w,b
 32780  011D52  0100               	movlb	0	; () banked
 32781  011D54  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 32782  011D56  0100               	movlb	0	; () banked
 32783  011D58  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 32784  011D5A  0100               	movlb	0	; () banked
 32785  011D5C  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 32786  011D5E  B4D8               	btfsc	status,2,c
 32787  011D60  D018               	goto	l14989
 32788                           
 32789                           ; BSR set to: 0
 32790  011D62  0100               	movlb	0	; () banked
 32791  011D64  8173               	bsf	___fldiv@grs& (0+255),0,b
 32792                           
 32793                           ; BSR set to: 0
 32794  011D66  D015               	goto	l14989
 32795  011D68                     l14983:
 32796                           
 32797                           ; BSR set to: 0
 32798  011D68  0100               	movlb	0	; () banked
 32799  011D6A  90D8               	bcf	status,0,c
 32800  011D6C  3760               	rlcf	___fldiv@b& (0+255),f,b
 32801  011D6E  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 32802  011D70  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 32803  011D72  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 32804                           
 32805                           ; BSR set to: 0
 32806  011D74  0100               	movlb	0	; () banked
 32807  011D76  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 32808  011D78  D002               	goto	l2778
 32809                           
 32810                           ; BSR set to: 0
 32811  011D7A  0100               	movlb	0	; () banked
 32812  011D7C  8160               	bsf	___fldiv@b& (0+255),0,b
 32813  011D7E                     l2778:
 32814                           
 32815                           ; BSR set to: 0
 32816  011D7E  0100               	movlb	0	; () banked
 32817  011D80  90D8               	bcf	status,0,c
 32818  011D82  3773               	rlcf	___fldiv@grs& (0+255),f,b
 32819  011D84  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 32820  011D86  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 32821  011D88  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 32822  011D8A  0100               	movlb	0	; () banked
 32823  011D8C  0771               	decf	___fldiv@new_exp& (0+255),f,b
 32824  011D8E  A0D8               	btfss	status,0,c
 32825  011D90  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 32826  011D92                     l14989:
 32827                           
 32828                           ; BSR set to: 0
 32829  011D92  0100               	movlb	0	; () banked
 32830  011D94  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 32831  011D96  D7E8               	goto	l14983
 32832                           
 32833                           ; BSR set to: 0
 32834                           
 32835                           ; BSR set to: 0
 32836  011D98  0E00               	movlw	0
 32837  011D9A  0100               	movlb	0	; () banked
 32838  011D9C  6F78               	movwf	___fldiv@aexp& (0+255),b
 32839                           
 32840                           ; BSR set to: 0
 32841  011D9E  0100               	movlb	0	; () banked
 32842  011DA0  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 32843  011DA2  D024               	goto	l2780
 32844                           
 32845                           ; BSR set to: 0
 32846  011DA4  0EFF               	movlw	255
 32847  011DA6  0100               	movlb	0	; () banked
 32848  011DA8  1573               	andwf	___fldiv@grs& (0+255),w,b
 32849  011DAA  0100               	movlb	0	; () banked
 32850  011DAC  6F68               	movwf	??___fldiv& (0+255),b
 32851  011DAE  0EFF               	movlw	255
 32852  011DB0  0100               	movlb	0	; () banked
 32853  011DB2  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 32854  011DB4  0100               	movlb	0	; () banked
 32855  011DB6  6F69               	movwf	(??___fldiv+1)& (0+255),b
 32856  011DB8  0EFF               	movlw	255
 32857  011DBA  0100               	movlb	0	; () banked
 32858  011DBC  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 32859  011DBE  0100               	movlb	0	; () banked
 32860  011DC0  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 32861  011DC2  0E7F               	movlw	127
 32862  011DC4  0100               	movlb	0	; () banked
 32863  011DC6  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 32864  011DC8  0100               	movlb	0	; () banked
 32865  011DCA  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 32866  011DCC  0100               	movlb	0	; () banked
 32867  011DCE  5168               	movf	??___fldiv& (0+255),w,b
 32868  011DD0  0100               	movlb	0	; () banked
 32869  011DD2  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 32870  011DD4  0100               	movlb	0	; () banked
 32871  011DD6  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 32872  011DD8  0100               	movlb	0	; () banked
 32873  011DDA  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 32874  011DDC  A4D8               	btfss	status,2,c
 32875  011DDE  D003               	goto	l14999
 32876                           
 32877                           ; BSR set to: 0
 32878                           
 32879                           ; BSR set to: 0
 32880  011DE0  0100               	movlb	0	; () banked
 32881  011DE2  A160               	btfss	___fldiv@b& (0+255),0,b
 32882  011DE4  D003               	goto	l2780
 32883  011DE6                     l14999:
 32884                           
 32885                           ; BSR set to: 0
 32886  011DE6  0E01               	movlw	1
 32887  011DE8  0100               	movlb	0	; () banked
 32888  011DEA  6F78               	movwf	___fldiv@aexp& (0+255),b
 32889  011DEC                     l2780:
 32890                           
 32891                           ; BSR set to: 0
 32892  011DEC  0100               	movlb	0	; () banked
 32893  011DEE  5178               	movf	___fldiv@aexp& (0+255),w,b
 32894  011DF0  0100               	movlb	0	; () banked
 32895  011DF2  B4D8               	btfsc	status,2,c
 32896  011DF4  D023               	goto	l15009
 32897                           
 32898                           ; BSR set to: 0
 32899  011DF6  0E01               	movlw	1
 32900  011DF8  0100               	movlb	0	; () banked
 32901  011DFA  2760               	addwf	___fldiv@b& (0+255),f,b
 32902  011DFC  0E00               	movlw	0
 32903  011DFE  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 32904  011E00  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 32905  011E02  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 32906                           
 32907                           ; BSR set to: 0
 32908  011E04  0100               	movlb	0	; () banked
 32909  011E06  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 32910  011E08  D019               	goto	l15009
 32911                           
 32912                           ; BSR set to: 0
 32913  011E0A  C060  F068         	movff	___fldiv@b,??___fldiv
 32914  011E0E  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 32915  011E12  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 32916  011E16  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 32917  011E1A  0100               	movlb	0	; () banked
 32918  011E1C  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 32919  011E1E  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 32920  011E20  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 32921  011E22  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 32922  011E24  3368               	rrcf	??___fldiv& (0+255),f,b
 32923  011E26  C068  F060         	movff	??___fldiv,___fldiv@b
 32924  011E2A  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 32925  011E2E  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 32926  011E32  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 32927                           
 32928                           ; BSR set to: 0
 32929  011E36  0100               	movlb	0	; () banked
 32930  011E38  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 32931  011E3A  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 32932  011E3C                     l15009:
 32933                           
 32934                           ; BSR set to: 0
 32935  011E3C  0100               	movlb	0	; () banked
 32936  011E3E  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 32937  011E40  D014               	goto	l15013
 32938  011E42  0100               	movlb	0	; () banked
 32939  011E44  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 32940  011E46  E104               	bnz	u12800
 32941  011E48  0100               	movlb	0	; () banked
 32942  011E4A  2971               	incf	___fldiv@new_exp& (0+255),w,b
 32943  011E4C  A0D8               	btfss	status,0,c
 32944  011E4E  D00D               	goto	l15013
 32945  011E50                     u12800:
 32946                           
 32947                           ; BSR set to: 0
 32948  011E50  0E00               	movlw	0
 32949  011E52  0100               	movlb	0	; () banked
 32950  011E54  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32951  011E56  6971               	setf	___fldiv@new_exp& (0+255),b
 32952  011E58  0E00               	movlw	0
 32953  011E5A  0100               	movlb	0	; () banked
 32954  011E5C  6F60               	movwf	___fldiv@b& (0+255),b
 32955  011E5E  0E00               	movlw	0
 32956  011E60  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32957  011E62  0E00               	movlw	0
 32958  011E64  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32959  011E66  0E00               	movlw	0
 32960  011E68  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32961  011E6A                     l15013:
 32962                           
 32963                           ; BSR set to: 0
 32964  011E6A  0100               	movlb	0	; () banked
 32965  011E6C  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 32966  011E6E  D007               	goto	l15015
 32967  011E70  0100               	movlb	0	; () banked
 32968  011E72  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 32969  011E74  E115               	bnz	l15017
 32970  011E76  0100               	movlb	0	; () banked
 32971  011E78  0571               	decf	___fldiv@new_exp& (0+255),w,b
 32972  011E7A  B0D8               	btfsc	status,0,c
 32973  011E7C  D011               	goto	l15017
 32974  011E7E                     l15015:
 32975                           
 32976                           ; BSR set to: 0
 32977  011E7E  0E00               	movlw	0
 32978  011E80  0100               	movlb	0	; () banked
 32979  011E82  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32980  011E84  0E00               	movlw	0
 32981  011E86  6F71               	movwf	___fldiv@new_exp& (0+255),b
 32982  011E88  0E00               	movlw	0
 32983  011E8A  0100               	movlb	0	; () banked
 32984  011E8C  6F60               	movwf	___fldiv@b& (0+255),b
 32985  011E8E  0E00               	movlw	0
 32986  011E90  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32987  011E92  0E00               	movlw	0
 32988  011E94  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32989  011E96  0E00               	movlw	0
 32990  011E98  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32991  011E9A  0E00               	movlw	0
 32992  011E9C  0100               	movlb	0	; () banked
 32993  011E9E  6F6C               	movwf	___fldiv@sign& (0+255),b
 32994  011EA0                     l15017:
 32995                           
 32996                           ; BSR set to: 0
 32997  011EA0  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 32998                           
 32999                           ; BSR set to: 0
 33000  011EA4  0100               	movlb	0	; () banked
 33001  011EA6  A177               	btfss	___fldiv@bexp& (0+255),0,b
 33002  011EA8  D003               	goto	l15023
 33003                           
 33004                           ; BSR set to: 0
 33005  011EAA  0100               	movlb	0	; () banked
 33006  011EAC  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 33007  011EAE  D002               	goto	l15025
 33008  011EB0                     l15023:
 33009                           
 33010                           ; BSR set to: 0
 33011  011EB0  0100               	movlb	0	; () banked
 33012  011EB2  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 33013  011EB4                     l15025:
 33014                           
 33015                           ; BSR set to: 0
 33016  011EB4  0100               	movlb	0	; () banked
 33017  011EB6  90D8               	bcf	status,0,c
 33018  011EB8  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 33019  011EBA  0100               	movlb	0	; () banked
 33020  011EBC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 33021                           
 33022                           ; BSR set to: 0
 33023  011EBE  0100               	movlb	0	; () banked
 33024  011EC0  516C               	movf	___fldiv@sign& (0+255),w,b
 33025  011EC2  0100               	movlb	0	; () banked
 33026  011EC4  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 33027                           
 33028                           ; BSR set to: 0
 33029  011EC6  C060  F060         	movff	___fldiv@b,?___fldiv
 33030  011ECA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 33031  011ECE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 33032  011ED2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 33033  011ED6  0012               	return	
 33034  011ED8                     __end_of___fldiv:
 33035                           	opt stack 0
 33036                           tosu	equ	0xFFF
 33037                           tosh	equ	0xFFE
 33038                           tosl	equ	0xFFD
 33039                           pclath	equ	0xFFA
 33040                           tblptru	equ	0xFF8
 33041                           tblptrh	equ	0xFF7
 33042                           tblptrl	equ	0xFF6
 33043                           tablat	equ	0xFF5
 33044                           prodh	equ	0xFF4
 33045                           prodl	equ	0xFF3
 33046                           intcon	equ	0xFF2
 33047                           indf0	equ	0xFEF
 33048                           postinc0	equ	0xFEE
 33049                           fsr0h	equ	0xFEA
 33050                           fsr0l	equ	0xFE9
 33051                           wreg	equ	0xFE8
 33052                           indf1	equ	0xFE7
 33053                           postdec1	equ	0xFE5
 33054                           fsr1h	equ	0xFE2
 33055                           fsr1l	equ	0xFE1
 33056                           indf2	equ	0xFDF
 33057                           postinc2	equ	0xFDE
 33058                           postdec2	equ	0xFDD
 33059                           plusw2	equ	0xFDB
 33060                           fsr2h	equ	0xFDA
 33061                           fsr2l	equ	0xFD9
 33062                           status	equ	0xFD8
 33063                           
 33064 ;; *************** function _ISR_Function *****************
 33065 ;; Defined at:
 33066 ;;		line 38 in file "Library/ISR.c"
 33067 ;; Parameters:    Size  Location     Type
 33068 ;;		None
 33069 ;; Auto vars:     Size  Location     Type
 33070 ;;		None
 33071 ;; Return value:  Size  Location     Type
 33072 ;;                  1    wreg      void 
 33073 ;; Registers used:
 33074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33075 ;; Tracked objects:
 33076 ;;		On entry : 0/0
 33077 ;;		On exit  : 0/0
 33078 ;;		Unchanged: 0/0
 33079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33082 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33083 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33084 ;;Total ram usage:       14 bytes
 33085 ;; Hardware stack levels used:    1
 33086 ;; Hardware stack levels required when called:    6
 33087 ;; This function calls:
 33088 ;;		_Timer0_ISR
 33089 ;; This function is called by:
 33090 ;;		Interrupt level 2
 33091 ;; This function uses a non-reentrant model
 33092 ;;
 33093                           
 33094                           	psect	intcode
 33095  001408                     __pintcode:
 33096                           	opt stack 0
 33097  001408                     _ISR_Function:
 33098                           	opt stack 13
 33099                           
 33100                           ; BSR set to: 0
 33101                           ;incstack = 0
 33102  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 33103  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 33104  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 33105  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 33106  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 33107  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 33108  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 33109  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 33110  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 33111  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 33112  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 33113  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 33114  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 33115  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 33116  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 33117                           
 33118                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 33119  001442  92F2               	bcf	intcon,1,c	;volatile
 33120                           
 33121                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 33122  001444  B4F2               	btfsc	intcon,2,c	;volatile
 33123  001446  AAF2               	btfss	intcon,5,c	;volatile
 33124  001448  D002               	goto	i2l1591
 33125                           
 33126                           ;ISR.c: 68: Timer0_ISR();
 33127  00144A  ECF4  F0BD         	call	_Timer0_ISR	;wreg free
 33128  00144E                     i2l1591:
 33129  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 33130  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 33131  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 33132  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 33133  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 33134  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 33135  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 33136  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 33137  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 33138  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 33139  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 33140  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 33141  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 33142  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 33143  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 33144  001488  0011               	retfie		f
 33145  00148A                     __end_of_ISR_Function:
 33146                           	opt stack 0
 33147                           tosu	equ	0xFFF
 33148                           tosh	equ	0xFFE
 33149                           tosl	equ	0xFFD
 33150                           pclatu	equ	0xFFB
 33151                           pclath	equ	0xFFA
 33152                           tblptru	equ	0xFF8
 33153                           tblptrh	equ	0xFF7
 33154                           tblptrl	equ	0xFF6
 33155                           tablat	equ	0xFF5
 33156                           prodh	equ	0xFF4
 33157                           prodl	equ	0xFF3
 33158                           intcon	equ	0xFF2
 33159                           indf0	equ	0xFEF
 33160                           postinc0	equ	0xFEE
 33161                           fsr0h	equ	0xFEA
 33162                           fsr0l	equ	0xFE9
 33163                           wreg	equ	0xFE8
 33164                           indf1	equ	0xFE7
 33165                           postdec1	equ	0xFE5
 33166                           fsr1h	equ	0xFE2
 33167                           fsr1l	equ	0xFE1
 33168                           indf2	equ	0xFDF
 33169                           postinc2	equ	0xFDE
 33170                           postdec2	equ	0xFDD
 33171                           plusw2	equ	0xFDB
 33172                           fsr2h	equ	0xFDA
 33173                           fsr2l	equ	0xFD9
 33174                           status	equ	0xFD8
 33175                           
 33176 ;; *************** function _Timer0_ISR *****************
 33177 ;; Defined at:
 33178 ;;		line 94 in file "Library/Timer0.c"
 33179 ;; Parameters:    Size  Location     Type
 33180 ;;		None
 33181 ;; Auto vars:     Size  Location     Type
 33182 ;;		None
 33183 ;; Return value:  Size  Location     Type
 33184 ;;                  1    wreg      void 
 33185 ;; Registers used:
 33186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33187 ;; Tracked objects:
 33188 ;;		On entry : 0/0
 33189 ;;		On exit  : 0/0
 33190 ;;		Unchanged: 0/0
 33191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33196 ;;Total ram usage:        0 bytes
 33197 ;; Hardware stack levels used:    1
 33198 ;; Hardware stack levels required when called:    5
 33199 ;; This function calls:
 33200 ;;		Absolute function
 33201 ;;		i2_Motor_Step
 33202 ;;		i2_Timer0_Stop
 33203 ;; This function is called by:
 33204 ;;		_ISR_Function
 33205 ;; This function uses a non-reentrant model
 33206 ;;
 33207                           
 33208                           	psect	text163
 33209  017BE8                     __ptext163:
 33210                           	opt stack 0
 33211  017BE8                     _Timer0_ISR:
 33212                           	opt stack 13
 33213                           
 33214                           ;Timer0.c: 96: Timer0_Stop();
 33215                           
 33216                           ;incstack = 0
 33217  017BE8  ECF9  F0BF         	call	i2_Timer0_Stop	;wreg free
 33218                           
 33219                           ;Timer0.c: 99: if (gISR != 0)
 33220  017BEC  0101               	movlb	1	; () banked
 33221  017BEE  510C               	movf	_gISR& (0+255),w,b
 33222  017BF0  0101               	movlb	1	; () banked
 33223  017BF2  110D               	iorwf	(_gISR+1)& (0+255),w,b
 33224  017BF4  0101               	movlb	1	; () banked
 33225  017BF6  110E               	iorwf	(_gISR+2)& (0+255),w,b
 33226  017BF8  B4D8               	btfsc	status,2,c
 33227  017BFA  0012               	return	
 33228                           
 33229                           ; BSR set to: 1
 33230                           ;Timer0.c: 100: gISR();
 33231  017BFC  D801               	call	i2u1501_48
 33232  017BFE  0012               	return	
 33233  017C00                     i2u1501_48:
 33234  017C00  0005               	push	
 33235  017C02  6EFA               	movwf	pclath,c
 33236  017C04  0101               	movlb	1	; () banked
 33237  017C06  510C               	movf	_gISR& (0+255),w,b
 33238  017C08  6EFD               	movwf	tosl,c
 33239  017C0A  510D               	movf	(_gISR+1)& (0+255),w,b
 33240  017C0C  6EFE               	movwf	tosh,c
 33241  017C0E  510E               	movf	(_gISR+2)& (0+255),w,b
 33242  017C10  6EFF               	movwf	tosu,c
 33243  017C12  50FA               	movf	pclath,w,c
 33244  017C14  0012               	return		;indir
 33245  017C16                     __end_of_Timer0_ISR:
 33246                           	opt stack 0
 33247                           tosu	equ	0xFFF
 33248                           tosh	equ	0xFFE
 33249                           tosl	equ	0xFFD
 33250                           pclatu	equ	0xFFB
 33251                           pclath	equ	0xFFA
 33252                           tblptru	equ	0xFF8
 33253                           tblptrh	equ	0xFF7
 33254                           tblptrl	equ	0xFF6
 33255                           tablat	equ	0xFF5
 33256                           prodh	equ	0xFF4
 33257                           prodl	equ	0xFF3
 33258                           intcon	equ	0xFF2
 33259                           indf0	equ	0xFEF
 33260                           postinc0	equ	0xFEE
 33261                           fsr0h	equ	0xFEA
 33262                           fsr0l	equ	0xFE9
 33263                           wreg	equ	0xFE8
 33264                           indf1	equ	0xFE7
 33265                           postdec1	equ	0xFE5
 33266                           fsr1h	equ	0xFE2
 33267                           fsr1l	equ	0xFE1
 33268                           indf2	equ	0xFDF
 33269                           postinc2	equ	0xFDE
 33270                           postdec2	equ	0xFDD
 33271                           plusw2	equ	0xFDB
 33272                           fsr2h	equ	0xFDA
 33273                           fsr2l	equ	0xFD9
 33274                           status	equ	0xFD8
 33275                           
 33276 ;; *************** function i2_Motor_Step *****************
 33277 ;; Defined at:
 33278 ;;		line 75 in file "Library/Motor.c"
 33279 ;; Parameters:    Size  Location     Type
 33280 ;;		None
 33281 ;; Auto vars:     Size  Location     Type
 33282 ;;		None
 33283 ;; Return value:  Size  Location     Type
 33284 ;;                  1    wreg      void 
 33285 ;; Registers used:
 33286 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33287 ;; Tracked objects:
 33288 ;;		On entry : 0/0
 33289 ;;		On exit  : 0/0
 33290 ;;		Unchanged: 0/0
 33291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33296 ;;Total ram usage:        2 bytes
 33297 ;; Hardware stack levels used:    1
 33298 ;; Hardware stack levels required when called:    4
 33299 ;; This function calls:
 33300 ;;		i2_MXK_Queue
 33301 ;;		i2_MXK_Release
 33302 ;;		i2_MXK_SwitchTo
 33303 ;;		i2_Port_SetPin
 33304 ;;		i2_Timer0_Restart
 33305 ;;		i2_Timer0_Stop
 33306 ;; This function is called by:
 33307 ;; This function uses a non-reentrant model
 33308 ;;
 33309                           
 33310                           	psect	text164
 33311  0150CC                     __ptext164:
 33312                           	opt stack 0
 33313  0150CC                     i2_Motor_Step:
 33314                           	opt stack 13
 33315                           
 33316                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 33317                           
 33318                           ;incstack = 0
 33319  0150CC  EE20 F004          	lfsr	2,4
 33320  0150D0  502A               	movf	_lMotor,w,c
 33321  0150D2  26D9               	addwf	fsr2l,f,c
 33322  0150D4  502B               	movf	_lMotor+1,w,c
 33323  0150D6  22DA               	addwfc	fsr2h,f,c
 33324  0150D8  50DF               	movf	indf2,w,c
 33325  0150DA  EC16  F0BD         	call	i2_MXK_SwitchTo
 33326  0150DE  0900               	iorlw	0
 33327  0150E0  B4D8               	btfsc	status,2,c
 33328  0150E2  D06A               	goto	i2l11191
 33329                           
 33330                           ;Motor.c: 78: {
 33331                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 33332  0150E4  C02A  FFD9         	movff	_lMotor,fsr2l
 33333  0150E8  C02B  FFDA         	movff	_lMotor+1,fsr2h
 33334  0150EC  50DE               	movf	postinc2,w,c
 33335  0150EE  10DE               	iorwf	postinc2,w,c
 33336  0150F0  B4D8               	btfsc	status,2,c
 33337  0150F2  D05D               	goto	i2l11185
 33338                           
 33339                           ;Motor.c: 80: {
 33340                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 33341  0150F4  C02A  FFD9         	movff	_lMotor,fsr2l
 33342  0150F8  C02B  FFDA         	movff	_lMotor+1,fsr2h
 33343  0150FC  0E01               	movlw	1
 33344  0150FE  BEDB               	btfsc	plusw2,7,c
 33345  015100  D022               	goto	i2l11169
 33346  015102  0E01               	movlw	1
 33347  015104  50DB               	movf	plusw2,w,c
 33348  015106  E103               	bnz	i2u879_40
 33349  015108  04DE               	decf	postinc2,w,c
 33350  01510A  A0D8               	btfss	status,0,c
 33351  01510C  D01C               	goto	i2l11169
 33352  01510E                     i2u879_40:
 33353                           
 33354                           ;Motor.c: 83: {
 33355                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 33356  01510E  C02A  FFD9         	movff	_lMotor,fsr2l
 33357  015112  C02B  FFDA         	movff	_lMotor+1,fsr2h
 33358  015116  28DE               	incf	postinc2,w,c
 33359  015118  E104               	bnz	i2u880_40
 33360  01511A  0E7F               	movlw	127
 33361  01511C  18DE               	xorwf	postinc2,w,c
 33362  01511E  B4D8               	btfsc	status,2,c
 33363  015120  D007               	goto	i2l11167
 33364  015122                     i2u880_40:
 33365                           
 33366                           ;Motor.c: 85: lMotor->mDelta --;
 33367  015122  C02A  FFD9         	movff	_lMotor,fsr2l
 33368  015126  C02B  FFDA         	movff	_lMotor+1,fsr2h
 33369  01512A  06DE               	decf	postinc2,f,c
 33370  01512C  0E00               	movlw	0
 33371  01512E  5ADD               	subwfb	postdec2,f,c
 33372  015130                     i2l11167:
 33373                           
 33374                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 33375  015130  0E97               	movlw	low _PortE
 33376  015132  6E10               	movwf	i2Port_SetPin@pInput,c
 33377  015134  0E01               	movlw	high _PortE
 33378  015136  6E11               	movwf	i2Port_SetPin@pInput+1,c
 33379  015138  0E00               	movlw	0
 33380  01513A  6E12               	movwf	i2Port_SetPin@pPin,c
 33381  01513C  0E01               	movlw	1
 33382  01513E  6E13               	movwf	i2Port_SetPin@pValue,c
 33383  015140  ECB7  F0AF         	call	i2_Port_SetPin	;wreg free
 33384                           
 33385                           ;Motor.c: 88: }
 33386  015144  D01B               	goto	i2l11175
 33387  015146                     i2l11169:
 33388                           
 33389                           ;Motor.c: 89: else
 33390                           ;Motor.c: 90: {
 33391                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 33392  015146  C02A  FFD9         	movff	_lMotor,fsr2l
 33393  01514A  C02B  FFDA         	movff	_lMotor+1,fsr2h
 33394  01514E  04DE               	decf	postinc2,w,c
 33395  015150  E104               	bnz	i2u881_40
 33396  015152  0E80               	movlw	128
 33397  015154  18DE               	xorwf	postinc2,w,c
 33398  015156  B4D8               	btfsc	status,2,c
 33399  015158  D007               	goto	i2l11173
 33400  01515A                     i2u881_40:
 33401                           
 33402                           ;Motor.c: 92: lMotor->mDelta ++;
 33403  01515A  C02A  FFD9         	movff	_lMotor,fsr2l
 33404  01515E  C02B  FFDA         	movff	_lMotor+1,fsr2h
 33405  015162  2ADE               	incf	postinc2,f,c
 33406  015164  0E00               	movlw	0
 33407  015166  22DD               	addwfc	postdec2,f,c
 33408  015168                     i2l11173:
 33409                           
 33410                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 33411  015168  0E97               	movlw	low _PortE
 33412  01516A  6E10               	movwf	i2Port_SetPin@pInput,c
 33413  01516C  0E01               	movlw	high _PortE
 33414  01516E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 33415  015170  0E00               	movlw	0
 33416  015172  6E12               	movwf	i2Port_SetPin@pPin,c
 33417  015174  0E00               	movlw	0
 33418  015176  6E13               	movwf	i2Port_SetPin@pValue,c
 33419  015178  ECB7  F0AF         	call	i2_Port_SetPin	;wreg free
 33420  01517C                     i2l11175:
 33421                           
 33422                           ;Motor.c: 95: }
 33423                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 33424  01517C  0E97               	movlw	low _PortE
 33425  01517E  6E10               	movwf	i2Port_SetPin@pInput,c
 33426  015180  0E01               	movlw	high _PortE
 33427  015182  6E11               	movwf	i2Port_SetPin@pInput+1,c
 33428  015184  0E01               	movlw	1
 33429  015186  6E12               	movwf	i2Port_SetPin@pPin,c
 33430  015188  0E01               	movlw	1
 33431  01518A  6E13               	movwf	i2Port_SetPin@pValue,c
 33432  01518C  ECB7  F0AF         	call	i2_Port_SetPin	;wreg free
 33433                           
 33434                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 33435  015190  0E97               	movlw	low _PortE
 33436  015192  6E10               	movwf	i2Port_SetPin@pInput,c
 33437  015194  0E01               	movlw	high _PortE
 33438  015196  6E11               	movwf	i2Port_SetPin@pInput+1,c
 33439  015198  0E01               	movlw	1
 33440  01519A  6E12               	movwf	i2Port_SetPin@pPin,c
 33441  01519C  0E00               	movlw	0
 33442  01519E  6E13               	movwf	i2Port_SetPin@pValue,c
 33443  0151A0  ECB7  F0AF         	call	i2_Port_SetPin	;wreg free
 33444                           
 33445                           ;Motor.c: 101: MXK_Release();
 33446  0151A4  ECFC  F0BF         	call	i2_MXK_Release	;wreg free
 33447                           
 33448                           ;Motor.c: 102: Timer0_Restart();
 33449  0151A8  ECCB  F0BF         	call	i2_Timer0_Restart	;wreg free
 33450                           
 33451                           ;Motor.c: 103: return;
 33452  0151AC  0012               	return	
 33453  0151AE                     i2l11185:
 33454                           
 33455                           ;Motor.c: 104: }
 33456                           ;Motor.c: 105: MXK_Release();
 33457  0151AE  ECFC  F0BF         	call	i2_MXK_Release	;wreg free
 33458                           
 33459                           ;Motor.c: 106: Timer0_Stop();
 33460  0151B2  ECF9  F0BF         	call	i2_Timer0_Stop	;wreg free
 33461                           
 33462                           ;Motor.c: 107: return;
 33463  0151B6  0012               	return	
 33464  0151B8                     i2l11191:
 33465                           
 33466                           ;Motor.c: 108: }
 33467                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 33468  0151B8  C0CD  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 33469  0151BC  C0CE  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 33470  0151C0  C0CF  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 33471  0151C4  ECB8  F0BF         	call	i2_MXK_Queue	;wreg free
 33472  0151C8  0012               	return		;funcret
 33473  0151CA                     __end_ofi2_Motor_Step:
 33474                           	opt stack 0
 33475                           tosu	equ	0xFFF
 33476                           tosh	equ	0xFFE
 33477                           tosl	equ	0xFFD
 33478                           pclatu	equ	0xFFB
 33479                           pclath	equ	0xFFA
 33480                           tblptru	equ	0xFF8
 33481                           tblptrh	equ	0xFF7
 33482                           tblptrl	equ	0xFF6
 33483                           tablat	equ	0xFF5
 33484                           prodh	equ	0xFF4
 33485                           prodl	equ	0xFF3
 33486                           intcon	equ	0xFF2
 33487                           indf0	equ	0xFEF
 33488                           postinc0	equ	0xFEE
 33489                           fsr0h	equ	0xFEA
 33490                           fsr0l	equ	0xFE9
 33491                           wreg	equ	0xFE8
 33492                           indf1	equ	0xFE7
 33493                           postdec1	equ	0xFE5
 33494                           fsr1h	equ	0xFE2
 33495                           fsr1l	equ	0xFE1
 33496                           indf2	equ	0xFDF
 33497                           postinc2	equ	0xFDE
 33498                           postdec2	equ	0xFDD
 33499                           plusw2	equ	0xFDB
 33500                           fsr2h	equ	0xFDA
 33501                           fsr2l	equ	0xFD9
 33502                           status	equ	0xFD8
 33503                           
 33504 ;; *************** function i2_Timer0_Stop *****************
 33505 ;; Defined at:
 33506 ;;		line 89 in file "Library/Timer0.c"
 33507 ;; Parameters:    Size  Location     Type
 33508 ;;		None
 33509 ;; Auto vars:     Size  Location     Type
 33510 ;;		None
 33511 ;; Return value:  Size  Location     Type
 33512 ;;                  1    wreg      void 
 33513 ;; Registers used:
 33514 ;;		None
 33515 ;; Tracked objects:
 33516 ;;		On entry : 0/0
 33517 ;;		On exit  : 0/0
 33518 ;;		Unchanged: 0/0
 33519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33524 ;;Total ram usage:        0 bytes
 33525 ;; Hardware stack levels used:    1
 33526 ;; This function calls:
 33527 ;;		Nothing
 33528 ;; This function is called by:
 33529 ;;		_Timer0_ISR
 33530 ;;		i2_Motor_Step
 33531 ;; This function uses a non-reentrant model
 33532 ;;
 33533                           
 33534                           	psect	text165
 33535  017FF2                     __ptext165:
 33536                           	opt stack 0
 33537  017FF2                     i2_Timer0_Stop:
 33538                           	opt stack 17
 33539                           
 33540                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 33541                           
 33542                           ;incstack = 0
 33543  017FF2  9AF2               	bcf	intcon,5,c	;volatile
 33544                           
 33545                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 33546  017FF4  94F2               	bcf	intcon,2,c	;volatile
 33547  017FF6  0012               	return		;funcret
 33548  017FF8                     __end_ofi2_Timer0_Stop:
 33549                           	opt stack 0
 33550                           tosu	equ	0xFFF
 33551                           tosh	equ	0xFFE
 33552                           tosl	equ	0xFFD
 33553                           pclatu	equ	0xFFB
 33554                           pclath	equ	0xFFA
 33555                           tblptru	equ	0xFF8
 33556                           tblptrh	equ	0xFF7
 33557                           tblptrl	equ	0xFF6
 33558                           tablat	equ	0xFF5
 33559                           prodh	equ	0xFF4
 33560                           prodl	equ	0xFF3
 33561                           intcon	equ	0xFF2
 33562                           indf0	equ	0xFEF
 33563                           postinc0	equ	0xFEE
 33564                           fsr0h	equ	0xFEA
 33565                           fsr0l	equ	0xFE9
 33566                           wreg	equ	0xFE8
 33567                           indf1	equ	0xFE7
 33568                           postdec1	equ	0xFE5
 33569                           fsr1h	equ	0xFE2
 33570                           fsr1l	equ	0xFE1
 33571                           indf2	equ	0xFDF
 33572                           postinc2	equ	0xFDE
 33573                           postdec2	equ	0xFDD
 33574                           plusw2	equ	0xFDB
 33575                           fsr2h	equ	0xFDA
 33576                           fsr2l	equ	0xFD9
 33577                           status	equ	0xFD8
 33578                           
 33579 ;; *************** function i2_Timer0_Restart *****************
 33580 ;; Defined at:
 33581 ;;		line 83 in file "Library/Timer0.c"
 33582 ;; Parameters:    Size  Location     Type
 33583 ;;		None
 33584 ;; Auto vars:     Size  Location     Type
 33585 ;;		None
 33586 ;; Return value:  Size  Location     Type
 33587 ;;                  1    wreg      void 
 33588 ;; Registers used:
 33589 ;;		None
 33590 ;; Tracked objects:
 33591 ;;		On entry : 0/0
 33592 ;;		On exit  : 0/0
 33593 ;;		Unchanged: 0/0
 33594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33599 ;;Total ram usage:        0 bytes
 33600 ;; Hardware stack levels used:    1
 33601 ;; This function calls:
 33602 ;;		Nothing
 33603 ;; This function is called by:
 33604 ;;		i2_Motor_Step
 33605 ;; This function uses a non-reentrant model
 33606 ;;
 33607                           
 33608                           	psect	text166
 33609  017F96                     __ptext166:
 33610                           	opt stack 0
 33611  017F96                     i2_Timer0_Restart:
 33612                           	opt stack 16
 33613                           
 33614                           ;Timer0.c: 85: TMR0 = COUNTER;
 33615                           
 33616                           ;incstack = 0
 33617  017F96  C028  FFD6         	movff	_COUNTER,4054	;volatile
 33618  017F9A  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 33619                           
 33620                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 33621  017F9E  8AF2               	bsf	intcon,5,c	;volatile
 33622  017FA0  0012               	return		;funcret
 33623  017FA2                     __end_ofi2_Timer0_Restart:
 33624                           	opt stack 0
 33625                           tosu	equ	0xFFF
 33626                           tosh	equ	0xFFE
 33627                           tosl	equ	0xFFD
 33628                           pclatu	equ	0xFFB
 33629                           pclath	equ	0xFFA
 33630                           tblptru	equ	0xFF8
 33631                           tblptrh	equ	0xFF7
 33632                           tblptrl	equ	0xFF6
 33633                           tablat	equ	0xFF5
 33634                           prodh	equ	0xFF4
 33635                           prodl	equ	0xFF3
 33636                           intcon	equ	0xFF2
 33637                           indf0	equ	0xFEF
 33638                           postinc0	equ	0xFEE
 33639                           fsr0h	equ	0xFEA
 33640                           fsr0l	equ	0xFE9
 33641                           wreg	equ	0xFE8
 33642                           indf1	equ	0xFE7
 33643                           postdec1	equ	0xFE5
 33644                           fsr1h	equ	0xFE2
 33645                           fsr1l	equ	0xFE1
 33646                           indf2	equ	0xFDF
 33647                           postinc2	equ	0xFDE
 33648                           postdec2	equ	0xFDD
 33649                           plusw2	equ	0xFDB
 33650                           fsr2h	equ	0xFDA
 33651                           fsr2l	equ	0xFD9
 33652                           status	equ	0xFD8
 33653                           
 33654 ;; *************** function i2_Port_SetPin *****************
 33655 ;; Defined at:
 33656 ;;		line 247 in file "Library/Port.c"
 33657 ;; Parameters:    Size  Location     Type
 33658 ;;  pInput          2   15[COMRAM] const PTR struct Port
 33659 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 33660 ;;  pPin            1   17[COMRAM] enum E6750
 33661 ;;  pValue          1   18[COMRAM] unsigned char 
 33662 ;; Auto vars:     Size  Location     Type
 33663 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 33664 ;; Return value:  Size  Location     Type
 33665 ;;                  1    wreg      void 
 33666 ;; Registers used:
 33667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33668 ;; Tracked objects:
 33669 ;;		On entry : 0/0
 33670 ;;		On exit  : 0/0
 33671 ;;		Unchanged: 0/0
 33672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33676 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33677 ;;Total ram usage:        5 bytes
 33678 ;; Hardware stack levels used:    1
 33679 ;; Hardware stack levels required when called:    3
 33680 ;; This function calls:
 33681 ;;		i2_Byte_SetBit
 33682 ;;		i2_Word_GetPair
 33683 ;; This function is called by:
 33684 ;;		i2_Motor_Step
 33685 ;; This function uses a non-reentrant model
 33686 ;;
 33687                           
 33688                           	psect	text167
 33689  015F6E                     __ptext167:
 33690                           	opt stack 0
 33691  015F6E                     i2_Port_SetPin:
 33692                           	opt stack 13
 33693                           
 33694                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 33695                           
 33696                           ;incstack = 0
 33697  015F6E  0E08               	movlw	8
 33698  015F70  2410               	addwf	i2Port_SetPin@pInput,w,c
 33699  015F72  6E0D               	movwf	i2Word_GetPair@pInput,c
 33700  015F74  0E00               	movlw	0
 33701  015F76  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 33702  015F78  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 33703  015F7A  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 33704  015F7E  ECC5  F0BD         	call	i2_Word_GetPair	;wreg free
 33705  015F82  6E14               	movwf	i2Port_SetPin@Type,c
 33706                           
 33707                           ;Port.c: 250: switch (Type)
 33708  015F84  D03B               	goto	i2l10543
 33709  015F86                     i2l10529:
 33710                           
 33711                           ;Port.c: 256: pValue &= 1;
 33712  015F86  0E01               	movlw	1
 33713  015F88  1613               	andwf	i2Port_SetPin@pValue,f,c
 33714                           
 33715                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 33716  015F8A  EE20 F002          	lfsr	2,2
 33717  015F8E  5010               	movf	i2Port_SetPin@pInput,w,c
 33718  015F90  26D9               	addwf	fsr2l,f,c
 33719  015F92  5011               	movf	i2Port_SetPin@pInput+1,w,c
 33720  015F94  22DA               	addwfc	fsr2h,f,c
 33721  015F96  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 33722  015F9A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 33723  015F9E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 33724  015FA2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 33725  015FA6  EC83  F0BA         	call	i2_Byte_SetBit	;wreg free
 33726                           
 33727                           ;Port.c: 258: break;
 33728  015FAA  0012               	return	
 33729  015FAC                     i2l10533:
 33730                           
 33731                           ;Port.c: 261: pValue &= 1;
 33732  015FAC  0E01               	movlw	1
 33733  015FAE  1613               	andwf	i2Port_SetPin@pValue,f,c
 33734                           
 33735                           ;Port.c: 262: pValue ^= 1;
 33736  015FB0  0E01               	movlw	1
 33737  015FB2  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 33738                           
 33739                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 33740  015FB4  EE20 F002          	lfsr	2,2
 33741  015FB8  5010               	movf	i2Port_SetPin@pInput,w,c
 33742  015FBA  26D9               	addwf	fsr2l,f,c
 33743  015FBC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 33744  015FBE  22DA               	addwfc	fsr2h,f,c
 33745  015FC0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 33746  015FC4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 33747  015FC8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 33748  015FCC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 33749  015FD0  EC83  F0BA         	call	i2_Byte_SetBit	;wreg free
 33750                           
 33751                           ;Port.c: 264: break;
 33752  015FD4  0012               	return	
 33753  015FD6                     i2l10537:
 33754                           
 33755                           ;Port.c: 266: pValue &= 1;
 33756  015FD6  0E01               	movlw	1
 33757  015FD8  1613               	andwf	i2Port_SetPin@pValue,f,c
 33758                           
 33759                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 33760  015FDA  EE20 F004          	lfsr	2,4
 33761  015FDE  5010               	movf	i2Port_SetPin@pInput,w,c
 33762  015FE0  26D9               	addwf	fsr2l,f,c
 33763  015FE2  5011               	movf	i2Port_SetPin@pInput+1,w,c
 33764  015FE4  22DA               	addwfc	fsr2h,f,c
 33765  015FE6  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 33766  015FEA  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 33767  015FEE  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 33768  015FF2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 33769  015FF6  EC83  F0BA         	call	i2_Byte_SetBit	;wreg free
 33770                           
 33771                           ;Port.c: 269: }
 33772                           
 33773                           ;Port.c: 268: break;
 33774  015FFA  0012               	return	
 33775  015FFC                     i2l10543:
 33776  015FFC  5014               	movf	i2Port_SetPin@Type,w,c
 33777                           
 33778                           ; Switch size 1, requested type "space"
 33779                           ; Number of cases is 4, Range of values is 0 to 3
 33780                           ; switch strategies available:
 33781                           ; Name         Instructions Cycles
 33782                           ; simple_byte           13     7 (average)
 33783                           ;	Chosen strategy is simple_byte
 33784  015FFE  0A00               	xorlw	0	; case 0
 33785  016000  B4D8               	btfsc	status,2,c
 33786  016002  0012               	return	
 33787  016004  0A01               	xorlw	1	; case 1
 33788  016006  B4D8               	btfsc	status,2,c
 33789  016008  D7BE               	goto	i2l10529
 33790  01600A  0A03               	xorlw	3	; case 2
 33791  01600C  B4D8               	btfsc	status,2,c
 33792  01600E  D7CE               	goto	i2l10533
 33793  016010  0A01               	xorlw	1	; case 3
 33794  016012  A4D8               	btfss	status,2,c
 33795  016014  0012               	return	
 33796  016016  D7DF               	goto	i2l10537
 33797  016018                     __end_ofi2_Port_SetPin:
 33798                           	opt stack 0
 33799                           tosu	equ	0xFFF
 33800                           tosh	equ	0xFFE
 33801                           tosl	equ	0xFFD
 33802                           pclatu	equ	0xFFB
 33803                           pclath	equ	0xFFA
 33804                           tblptru	equ	0xFF8
 33805                           tblptrh	equ	0xFF7
 33806                           tblptrl	equ	0xFF6
 33807                           tablat	equ	0xFF5
 33808                           prodh	equ	0xFF4
 33809                           prodl	equ	0xFF3
 33810                           intcon	equ	0xFF2
 33811                           indf0	equ	0xFEF
 33812                           postinc0	equ	0xFEE
 33813                           fsr0h	equ	0xFEA
 33814                           fsr0l	equ	0xFE9
 33815                           wreg	equ	0xFE8
 33816                           indf1	equ	0xFE7
 33817                           postdec1	equ	0xFE5
 33818                           fsr1h	equ	0xFE2
 33819                           fsr1l	equ	0xFE1
 33820                           indf2	equ	0xFDF
 33821                           postinc2	equ	0xFDE
 33822                           postdec2	equ	0xFDD
 33823                           plusw2	equ	0xFDB
 33824                           fsr2h	equ	0xFDA
 33825                           fsr2l	equ	0xFD9
 33826                           status	equ	0xFD8
 33827                           
 33828 ;; *************** function i2_Word_GetPair *****************
 33829 ;; Defined at:
 33830 ;;		line 156 in file "Library/Types.c"
 33831 ;; Parameters:    Size  Location     Type
 33832 ;;  pInput          2   12[COMRAM] PTR struct Word
 33833 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 33834 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 33835 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 33836 ;;		 -> PortC(10), PortF(10), NULL(0), 
 33837 ;;  pPair           1   14[COMRAM] unsigned char 
 33838 ;; Auto vars:     Size  Location     Type
 33839 ;;		None
 33840 ;; Return value:  Size  Location     Type
 33841 ;;                  1    wreg      unsigned char 
 33842 ;; Registers used:
 33843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33844 ;; Tracked objects:
 33845 ;;		On entry : 0/0
 33846 ;;		On exit  : 0/0
 33847 ;;		Unchanged: 0/0
 33848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33849 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33853 ;;Total ram usage:        3 bytes
 33854 ;; Hardware stack levels used:    1
 33855 ;; Hardware stack levels required when called:    2
 33856 ;; This function calls:
 33857 ;;		i2_Byte_GetPair
 33858 ;; This function is called by:
 33859 ;;		i2_Port_SetPin
 33860 ;; This function uses a non-reentrant model
 33861 ;;
 33862                           
 33863                           	psect	text168
 33864  017B8A                     __ptext168:
 33865                           	opt stack 0
 33866  017B8A                     i2_Word_GetPair:
 33867                           	opt stack 13
 33868                           
 33869                           ;Types.c: 158: if (pPair >= 4)
 33870                           
 33871                           ;incstack = 0
 33872  017B8A  0E03               	movlw	3
 33873  017B8C  640F               	cpfsgt	i2Word_GetPair@pPair,c
 33874  017B8E  D00C               	goto	i2l9783
 33875                           
 33876                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 33877  017B90  0E01               	movlw	1
 33878  017B92  240D               	addwf	i2Word_GetPair@pInput,w,c
 33879  017B94  6E0A               	movwf	i2Byte_GetPair@pInput,c
 33880  017B96  0E00               	movlw	0
 33881  017B98  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 33882  017B9A  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 33883  017B9C  500F               	movf	i2Word_GetPair@pPair,w,c
 33884  017B9E  0FFC               	addlw	252
 33885  017BA0  6E0C               	movwf	i2Byte_GetPair@pPair,c
 33886  017BA2  EC13  F0BF         	call	i2_Byte_GetPair	;wreg free
 33887  017BA6  0012               	return	
 33888  017BA8                     i2l9783:
 33889                           
 33890                           ;Types.c: 160: else
 33891                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 33892  017BA8  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 33893  017BAC  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 33894  017BB0  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 33895  017BB4  EC13  F0BF         	call	i2_Byte_GetPair	;wreg free
 33896  017BB8  0012               	return	
 33897  017BBA                     __end_ofi2_Word_GetPair:
 33898                           	opt stack 0
 33899                           tosu	equ	0xFFF
 33900                           tosh	equ	0xFFE
 33901                           tosl	equ	0xFFD
 33902                           pclatu	equ	0xFFB
 33903                           pclath	equ	0xFFA
 33904                           tblptru	equ	0xFF8
 33905                           tblptrh	equ	0xFF7
 33906                           tblptrl	equ	0xFF6
 33907                           tablat	equ	0xFF5
 33908                           prodh	equ	0xFF4
 33909                           prodl	equ	0xFF3
 33910                           intcon	equ	0xFF2
 33911                           indf0	equ	0xFEF
 33912                           postinc0	equ	0xFEE
 33913                           fsr0h	equ	0xFEA
 33914                           fsr0l	equ	0xFE9
 33915                           wreg	equ	0xFE8
 33916                           indf1	equ	0xFE7
 33917                           postdec1	equ	0xFE5
 33918                           fsr1h	equ	0xFE2
 33919                           fsr1l	equ	0xFE1
 33920                           indf2	equ	0xFDF
 33921                           postinc2	equ	0xFDE
 33922                           postdec2	equ	0xFDD
 33923                           plusw2	equ	0xFDB
 33924                           fsr2h	equ	0xFDA
 33925                           fsr2l	equ	0xFD9
 33926                           status	equ	0xFD8
 33927                           
 33928 ;; *************** function i2_Byte_GetPair *****************
 33929 ;; Defined at:
 33930 ;;		line 87 in file "Library/Types.c"
 33931 ;; Parameters:    Size  Location     Type
 33932 ;;  pInput          2    9[COMRAM] PTR struct Byte
 33933 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 33934 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 33935 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 33936 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 33937 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 33938 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 33939 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 33940 ;;		 -> NULL(0), 
 33941 ;;  pPair           1   11[COMRAM] unsigned char 
 33942 ;; Auto vars:     Size  Location     Type
 33943 ;;		None
 33944 ;; Return value:  Size  Location     Type
 33945 ;;                  1    wreg      unsigned char 
 33946 ;; Registers used:
 33947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33948 ;; Tracked objects:
 33949 ;;		On entry : 0/0
 33950 ;;		On exit  : 0/0
 33951 ;;		Unchanged: 0/0
 33952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33953 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33956 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33957 ;;Total ram usage:        3 bytes
 33958 ;; Hardware stack levels used:    1
 33959 ;; Hardware stack levels required when called:    1
 33960 ;; This function calls:
 33961 ;;		i2_Byte_GetZone
 33962 ;; This function is called by:
 33963 ;;		i2_Word_GetPair
 33964 ;; This function uses a non-reentrant model
 33965 ;;
 33966                           
 33967                           	psect	text169
 33968  017E26                     __ptext169:
 33969                           	opt stack 0
 33970  017E26                     i2_Byte_GetPair:
 33971                           	opt stack 13
 33972                           
 33973                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 33974                           
 33975                           ;incstack = 0
 33976  017E26  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 33977  017E2A  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 33978  017E2E  0E04               	movlw	4
 33979  017E30  6E03               	movwf	i2Byte_GetZone@pMax,c
 33980  017E32  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 33981  017E36  0E02               	movlw	2
 33982  017E38  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 33983  017E3A  ECFF  F0B5         	call	i2_Byte_GetZone	;wreg free
 33984  017E3E  0012               	return	
 33985  017E40                     __end_ofi2_Byte_GetPair:
 33986                           	opt stack 0
 33987                           tosu	equ	0xFFF
 33988                           tosh	equ	0xFFE
 33989                           tosl	equ	0xFFD
 33990                           pclatu	equ	0xFFB
 33991                           pclath	equ	0xFFA
 33992                           tblptru	equ	0xFF8
 33993                           tblptrh	equ	0xFF7
 33994                           tblptrl	equ	0xFF6
 33995                           tablat	equ	0xFF5
 33996                           prodh	equ	0xFF4
 33997                           prodl	equ	0xFF3
 33998                           intcon	equ	0xFF2
 33999                           indf0	equ	0xFEF
 34000                           postinc0	equ	0xFEE
 34001                           fsr0h	equ	0xFEA
 34002                           fsr0l	equ	0xFE9
 34003                           wreg	equ	0xFE8
 34004                           indf1	equ	0xFE7
 34005                           postdec1	equ	0xFE5
 34006                           fsr1h	equ	0xFE2
 34007                           fsr1l	equ	0xFE1
 34008                           indf2	equ	0xFDF
 34009                           postinc2	equ	0xFDE
 34010                           postdec2	equ	0xFDD
 34011                           plusw2	equ	0xFDB
 34012                           fsr2h	equ	0xFDA
 34013                           fsr2l	equ	0xFD9
 34014                           status	equ	0xFD8
 34015                           
 34016 ;; *************** function i2_Byte_GetZone *****************
 34017 ;; Defined at:
 34018 ;;		line 64 in file "Library/Types.c"
 34019 ;; Parameters:    Size  Location     Type
 34020 ;;  pInput          2    0[COMRAM] PTR struct Byte
 34021 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 34022 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 34023 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 34024 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 34025 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 34026 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 34027 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 34028 ;;		 -> NULL(0), 
 34029 ;;  pMax            1    2[COMRAM] unsigned char 
 34030 ;;  pChunk          1    3[COMRAM] unsigned char 
 34031 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 34032 ;; Auto vars:     Size  Location     Type
 34033 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 34034 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 34035 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 34036 ;; Return value:  Size  Location     Type
 34037 ;;                  1    wreg      unsigned char 
 34038 ;; Registers used:
 34039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 34040 ;; Tracked objects:
 34041 ;;		On entry : 0/0
 34042 ;;		On exit  : 0/0
 34043 ;;		Unchanged: 0/0
 34044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34045 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34046 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34048 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34049 ;;Total ram usage:        9 bytes
 34050 ;; Hardware stack levels used:    1
 34051 ;; This function calls:
 34052 ;;		Nothing
 34053 ;; This function is called by:
 34054 ;;		i2_Byte_GetPair
 34055 ;; This function uses a non-reentrant model
 34056 ;;
 34057                           
 34058                           	psect	text170
 34059  016BFE                     __ptext170:
 34060                           	opt stack 0
 34061  016BFE                     i2_Byte_GetZone:
 34062                           	opt stack 13
 34063                           
 34064                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 34065                           
 34066                           ;incstack = 0
 34067  016BFE  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 34068  016C02  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 34069  016C06  0E00               	movlw	low (__mediumconst shr (0+16))
 34070  016C08  6EF8               	movwf	tblptru,c
 34071  016C0A  0E0F               	movlw	(high __ramtop+-1)
 34072  016C0C  64F7               	cpfsgt	tblptrh,c
 34073  016C0E  D003               	bra	i2u563_47
 34074  016C10  0008               	tblrd		*
 34075  016C12  50F5               	movf	tablat,w,c
 34076  016C14  D005               	bra	i2u563_40
 34077  016C16                     i2u563_47:
 34078  016C16  CFF6 FFE9          	movff	tblptrl,fsr0l
 34079  016C1A  CFF7 FFEA          	movff	tblptrh,fsr0h
 34080  016C1E  50EF               	movf	indf0,w,c
 34081  016C20                     i2u563_40:
 34082  016C20  6E09               	movwf	i2Byte_GetZone@Output,c
 34083                           
 34084                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 34085  016C22  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 34086  016C24  0D01               	mullw	1
 34087  016C26  0EBD               	movlw	low _MASKS
 34088  016C28  24F3               	addwf	prodl,w,c
 34089  016C2A  6EF6               	movwf	tblptrl,c
 34090  016C2C  0EFC               	movlw	high _MASKS
 34091  016C2E  20F4               	addwfc	prodh,w,c
 34092  016C30  6EF7               	movwf	tblptrh,c
 34093  016C32                     	if	1	;There are 3 active tblptr bytes
 34094  016C32  6AF8               	clrf	tblptru,c
 34095  016C34  0E00               	movlw	low (__mediumconst shr (0+16))
 34096  016C36  22F8               	addwfc	tblptru,f,c
 34097  016C38                     	endif
 34098  016C38  0008               	tblrd		*
 34099  016C3A  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 34100                           
 34101                           ;Types.c: 68: UINT8 Offset = 0;
 34102  016C3E  0E00               	movlw	0
 34103  016C40  6E08               	movwf	i2Byte_GetZone@Offset,c
 34104                           
 34105                           ;Types.c: 70: while (pChunk >= pMax)
 34106  016C42  D003               	goto	i2l8545
 34107  016C44                     i2l8541:
 34108                           
 34109                           ;Types.c: 71: {
 34110                           ;Types.c: 72: pChunk -= pMax;
 34111  016C44  5003               	movf	i2Byte_GetZone@pMax,w,c
 34112  016C46  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 34113                           
 34114                           ;Types.c: 73: Offset += 1;
 34115  016C48  2A08               	incf	i2Byte_GetZone@Offset,f,c
 34116  016C4A                     i2l8545:
 34117  016C4A  5003               	movf	i2Byte_GetZone@pMax,w,c
 34118  016C4C  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 34119  016C4E  B0D8               	btfsc	status,0,c
 34120  016C50  D7F9               	goto	i2l8541
 34121                           
 34122                           ;Types.c: 74: }
 34123                           ;Types.c: 75: pChunk *= pChunkSize;
 34124  016C52  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 34125  016C54  0204               	mulwf	i2Byte_GetZone@pChunk,c
 34126  016C56  50F3               	movf	prodl,w,c
 34127  016C58  6E04               	movwf	i2Byte_GetZone@pChunk,c
 34128                           
 34129                           ;Types.c: 76: pChunk += Offset;
 34130  016C5A  5008               	movf	i2Byte_GetZone@Offset,w,c
 34131  016C5C  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 34132                           
 34133                           ;Types.c: 78: Output >>= pChunk;
 34134  016C5E  2804               	incf	i2Byte_GetZone@pChunk,w,c
 34135  016C60  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 34136  016C62  D002               	goto	i2u565_40
 34137  016C64                     i2u565_45:
 34138  016C64  90D8               	bcf	status,0,c
 34139  016C66  3209               	rrcf	i2Byte_GetZone@Output,f,c
 34140  016C68                     i2u565_40:
 34141  016C68  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 34142  016C6A  D7FC               	goto	i2u565_45
 34143                           
 34144                           ;Types.c: 79: Output &= MASK;
 34145  016C6C  5007               	movf	i2Byte_GetZone@MASK,w,c
 34146  016C6E  1609               	andwf	i2Byte_GetZone@Output,f,c
 34147                           
 34148                           ;Types.c: 80: return Output;
 34149  016C70  5009               	movf	i2Byte_GetZone@Output,w,c
 34150  016C72  0012               	return	
 34151  016C74                     __end_ofi2_Byte_GetZone:
 34152                           	opt stack 0
 34153                           tosu	equ	0xFFF
 34154                           tosh	equ	0xFFE
 34155                           tosl	equ	0xFFD
 34156                           pclatu	equ	0xFFB
 34157                           pclath	equ	0xFFA
 34158                           tblptru	equ	0xFF8
 34159                           tblptrh	equ	0xFF7
 34160                           tblptrl	equ	0xFF6
 34161                           tablat	equ	0xFF5
 34162                           prodh	equ	0xFF4
 34163                           prodl	equ	0xFF3
 34164                           intcon	equ	0xFF2
 34165                           indf0	equ	0xFEF
 34166                           postinc0	equ	0xFEE
 34167                           fsr0h	equ	0xFEA
 34168                           fsr0l	equ	0xFE9
 34169                           wreg	equ	0xFE8
 34170                           indf1	equ	0xFE7
 34171                           postdec1	equ	0xFE5
 34172                           fsr1h	equ	0xFE2
 34173                           fsr1l	equ	0xFE1
 34174                           indf2	equ	0xFDF
 34175                           postinc2	equ	0xFDE
 34176                           postdec2	equ	0xFDD
 34177                           plusw2	equ	0xFDB
 34178                           fsr2h	equ	0xFDA
 34179                           fsr2l	equ	0xFD9
 34180                           status	equ	0xFD8
 34181                           
 34182 ;; *************** function i2_Byte_SetBit *****************
 34183 ;; Defined at:
 34184 ;;		line 32 in file "Library/Types.c"
 34185 ;; Parameters:    Size  Location     Type
 34186 ;;  pInput          2    0[COMRAM] PTR struct Byte
 34187 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 34188 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 34189 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 34190 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 34191 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 34192 ;;		 -> NULL(0), 
 34193 ;;  pBit            1    2[COMRAM] unsigned char 
 34194 ;;  pValue          1    3[COMRAM] unsigned char 
 34195 ;; Auto vars:     Size  Location     Type
 34196 ;;		None
 34197 ;; Return value:  Size  Location     Type
 34198 ;;                  1    wreg      void 
 34199 ;; Registers used:
 34200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34201 ;; Tracked objects:
 34202 ;;		On entry : 0/0
 34203 ;;		On exit  : 0/0
 34204 ;;		Unchanged: 0/0
 34205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34209 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34210 ;;Total ram usage:        7 bytes
 34211 ;; Hardware stack levels used:    1
 34212 ;; This function calls:
 34213 ;;		Nothing
 34214 ;; This function is called by:
 34215 ;;		i2_Port_SetPin
 34216 ;; This function uses a non-reentrant model
 34217 ;;
 34218                           
 34219                           	psect	text171
 34220  017506                     __ptext171:
 34221                           	opt stack 0
 34222  017506                     i2_Byte_SetBit:
 34223                           	opt stack 15
 34224                           
 34225                           ;Types.c: 34: pValue &= 1;
 34226                           
 34227                           ;incstack = 0
 34228  017506  0E01               	movlw	1
 34229  017508  1604               	andwf	i2Byte_SetBit@pValue,f,c
 34230                           
 34231                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 34232  01750A  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 34233  01750E  0E01               	movlw	1
 34234  017510  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 34235  017512  2A05               	incf	??i2_Byte_SetBit,f,c
 34236  017514  D002               	goto	i2u702_44
 34237  017516                     i2u702_45:
 34238  017516  90D8               	bcf	status,0,c
 34239  017518  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 34240  01751A                     i2u702_44:
 34241  01751A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 34242  01751C  D7FC               	goto	i2u702_45
 34243  01751E  5006               	movf	??i2_Byte_SetBit+1,w,c
 34244  017520  0AFF               	xorlw	255
 34245  017522  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 34246  017524  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 34247  017528  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 34248  01752C  5007               	movf	??i2_Byte_SetBit+2,w,c
 34249  01752E  16DF               	andwf	indf2,f,c
 34250                           
 34251                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 34252  017530  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 34253  017534  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 34254  017538  2A05               	incf	??i2_Byte_SetBit,f,c
 34255  01753A  D002               	goto	i2u703_44
 34256  01753C                     i2u703_45:
 34257  01753C  90D8               	bcf	status,0,c
 34258  01753E  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 34259  017540                     i2u703_44:
 34260  017540  2E05               	decfsz	??i2_Byte_SetBit,f,c
 34261  017542  D7FC               	goto	i2u703_45
 34262  017544  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 34263  017548  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 34264  01754C  5006               	movf	??i2_Byte_SetBit+1,w,c
 34265  01754E  12DF               	iorwf	indf2,f,c
 34266  017550  0012               	return		;funcret
 34267  017552                     __end_ofi2_Byte_SetBit:
 34268                           	opt stack 0
 34269                           tosu	equ	0xFFF
 34270                           tosh	equ	0xFFE
 34271                           tosl	equ	0xFFD
 34272                           pclatu	equ	0xFFB
 34273                           pclath	equ	0xFFA
 34274                           tblptru	equ	0xFF8
 34275                           tblptrh	equ	0xFF7
 34276                           tblptrl	equ	0xFF6
 34277                           tablat	equ	0xFF5
 34278                           prodh	equ	0xFF4
 34279                           prodl	equ	0xFF3
 34280                           intcon	equ	0xFF2
 34281                           indf0	equ	0xFEF
 34282                           postinc0	equ	0xFEE
 34283                           fsr0h	equ	0xFEA
 34284                           fsr0l	equ	0xFE9
 34285                           wreg	equ	0xFE8
 34286                           indf1	equ	0xFE7
 34287                           postdec1	equ	0xFE5
 34288                           fsr1h	equ	0xFE2
 34289                           fsr1l	equ	0xFE1
 34290                           indf2	equ	0xFDF
 34291                           postinc2	equ	0xFDE
 34292                           postdec2	equ	0xFDD
 34293                           plusw2	equ	0xFDB
 34294                           fsr2h	equ	0xFDA
 34295                           fsr2l	equ	0xFD9
 34296                           status	equ	0xFD8
 34297                           
 34298 ;; *************** function i2_MXK_SwitchTo *****************
 34299 ;; Defined at:
 34300 ;;		line 105 in file "Library/MXK.c"
 34301 ;; Parameters:    Size  Location     Type
 34302 ;;  pModule         1    wreg     enum E6927
 34303 ;; Auto vars:     Size  Location     Type
 34304 ;;  pModule         1    7[COMRAM] enum E6927
 34305 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 34306 ;; Return value:  Size  Location     Type
 34307 ;;                  1    wreg      unsigned char 
 34308 ;; Registers used:
 34309 ;;		wreg, status,2, status,0, cstack
 34310 ;; Tracked objects:
 34311 ;;		On entry : 0/0
 34312 ;;		On exit  : 0/0
 34313 ;;		Unchanged: 0/0
 34314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34316 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34319 ;;Total ram usage:        2 bytes
 34320 ;; Hardware stack levels used:    1
 34321 ;; Hardware stack levels required when called:    1
 34322 ;; This function calls:
 34323 ;;		i2_delay_us
 34324 ;; This function is called by:
 34325 ;;		i2_Motor_Step
 34326 ;; This function uses a non-reentrant model
 34327 ;;
 34328                           
 34329                           	psect	text172
 34330  017A2C                     __ptext172:
 34331                           	opt stack 0
 34332  017A2C                     i2_MXK_SwitchTo:
 34333                           	opt stack 15
 34334                           
 34335                           ;incstack = 0
 34336                           ;i2MXK_SwitchTo@pModule stored from wreg
 34337  017A2C  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 34338                           
 34339                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 34340  017A2E  5086               	movf	3974,w,c	;volatile
 34341  017A30  0B0F               	andlw	15
 34342  017A32  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 34343                           
 34344                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 34345  017A34  5043               	movf	_Bus_State,w,c
 34346  017A36  A4D8               	btfss	status,2,c
 34347  017A38  D002               	goto	i2l10553
 34348                           
 34349                           ;MXK.c: 110: return 0;
 34350  017A3A  0E00               	movlw	0
 34351  017A3C  0012               	return	
 34352  017A3E                     i2l10553:
 34353                           
 34354                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 34355  017A3E  0E00               	movlw	0
 34356  017A40  6E43               	movwf	_Bus_State,c
 34357                           
 34358                           ;MXK.c: 114: if (CUR != pModule)
 34359  017A42  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 34360  017A44  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 34361  017A46  B4D8               	btfsc	status,2,c
 34362  017A48  D00A               	goto	i2l10561
 34363                           
 34364                           ;MXK.c: 115: {
 34365                           ;MXK.c: 116: PORTG &= ~(0xF);
 34366  017A4A  0EF0               	movlw	240
 34367  017A4C  1686               	andwf	3974,f,c	;volatile
 34368                           
 34369                           ;MXK.c: 117: PORTG |= pModule;
 34370  017A4E  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 34371  017A50  1286               	iorwf	3974,f,c	;volatile
 34372                           
 34373                           ;MXK.c: 120: delay_us(10);
 34374  017A52  0E00               	movlw	0
 34375  017A54  6E02               	movwf	i2delay_us@us+1,c
 34376  017A56  0E0A               	movlw	10
 34377  017A58  6E01               	movwf	i2delay_us@us,c
 34378  017A5A  EC09  F0BC         	call	i2_delay_us	;wreg free
 34379  017A5E                     i2l10561:
 34380                           
 34381                           ;MXK.c: 121: }
 34382                           ;MXK.c: 122: return 1;
 34383  017A5E  0E01               	movlw	1
 34384  017A60  0012               	return	
 34385  017A62                     __end_ofi2_MXK_SwitchTo:
 34386                           	opt stack 0
 34387                           tosu	equ	0xFFF
 34388                           tosh	equ	0xFFE
 34389                           tosl	equ	0xFFD
 34390                           pclatu	equ	0xFFB
 34391                           pclath	equ	0xFFA
 34392                           tblptru	equ	0xFF8
 34393                           tblptrh	equ	0xFF7
 34394                           tblptrl	equ	0xFF6
 34395                           tablat	equ	0xFF5
 34396                           prodh	equ	0xFF4
 34397                           prodl	equ	0xFF3
 34398                           intcon	equ	0xFF2
 34399                           indf0	equ	0xFEF
 34400                           postinc0	equ	0xFEE
 34401                           fsr0h	equ	0xFEA
 34402                           fsr0l	equ	0xFE9
 34403                           wreg	equ	0xFE8
 34404                           indf1	equ	0xFE7
 34405                           postdec1	equ	0xFE5
 34406                           fsr1h	equ	0xFE2
 34407                           fsr1l	equ	0xFE1
 34408                           indf2	equ	0xFDF
 34409                           postinc2	equ	0xFDE
 34410                           postdec2	equ	0xFDD
 34411                           plusw2	equ	0xFDB
 34412                           fsr2h	equ	0xFDA
 34413                           fsr2l	equ	0xFD9
 34414                           status	equ	0xFD8
 34415                           
 34416 ;; *************** function i2_delay_us *****************
 34417 ;; Defined at:
 34418 ;;		line 255 in file "Library/Types.c"
 34419 ;; Parameters:    Size  Location     Type
 34420 ;;  us              2    0[COMRAM] unsigned short 
 34421 ;; Auto vars:     Size  Location     Type
 34422 ;;  delay_us        4    2[COMRAM] unsigned long 
 34423 ;; Return value:  Size  Location     Type
 34424 ;;                  1    wreg      void 
 34425 ;; Registers used:
 34426 ;;		wreg, status,2, status,0
 34427 ;; Tracked objects:
 34428 ;;		On entry : 0/0
 34429 ;;		On exit  : 0/0
 34430 ;;		Unchanged: 0/0
 34431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34433 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34435 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34436 ;;Total ram usage:        6 bytes
 34437 ;; Hardware stack levels used:    1
 34438 ;; This function calls:
 34439 ;;		Nothing
 34440 ;; This function is called by:
 34441 ;;		i2_MXK_SwitchTo
 34442 ;; This function uses a non-reentrant model
 34443 ;;
 34444                           
 34445                           	psect	text173
 34446  017812                     __ptext173:
 34447                           	opt stack 0
 34448  017812                     i2_delay_us:
 34449                           	opt stack 15
 34450                           
 34451                           ;Types.c: 256: unsigned long u;
 34452                           ;Types.c: 257: while (us--) {
 34453                           
 34454                           ;incstack = 0
 34455  017812  D016               	goto	i2l9797
 34456  017814                     i2l9789:
 34457                           
 34458                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 34459  017814  0E00               	movlw	0
 34460  017816  6E03               	movwf	i2delay_us@u,c
 34461  017818  0E00               	movlw	0
 34462  01781A  6E04               	movwf	i2delay_us@u+1,c
 34463  01781C  0E00               	movlw	0
 34464  01781E  6E05               	movwf	i2delay_us@u+2,c
 34465  017820  0E00               	movlw	0
 34466  017822  6E06               	movwf	i2delay_us@u+3,c
 34467  017824                     i2l9791:
 34468  017824  5003               	movf	i2delay_us@u,w,c
 34469  017826  1004               	iorwf	i2delay_us@u+1,w,c
 34470  017828  1005               	iorwf	i2delay_us@u+2,w,c
 34471  01782A  1006               	iorwf	i2delay_us@u+3,w,c
 34472  01782C  A4D8               	btfss	status,2,c
 34473  01782E  D008               	goto	i2l9797
 34474  017830  F000               	nop		; ;# 
 34475  017832  0E01               	movlw	1
 34476  017834  2603               	addwf	i2delay_us@u,f,c
 34477  017836  0E00               	movlw	0
 34478  017838  2204               	addwfc	i2delay_us@u+1,f,c
 34479  01783A  2205               	addwfc	i2delay_us@u+2,f,c
 34480  01783C  2206               	addwfc	i2delay_us@u+3,f,c
 34481  01783E  D7F2               	goto	i2l9791
 34482  017840                     i2l9797:
 34483  017840  0601               	decf	i2delay_us@us,f,c
 34484  017842  A0D8               	btfss	status,0,c
 34485  017844  0602               	decf	i2delay_us@us+1,f,c
 34486  017846  2801               	incf	i2delay_us@us,w,c
 34487  017848  E1E5               	bnz	i2l9789
 34488  01784A  2802               	incf	i2delay_us@us+1,w,c
 34489  01784C  B4D8               	btfsc	status,2,c
 34490  01784E  0012               	return	
 34491  017850  D7E1               	goto	i2l9789
 34492  017852                     __end_ofi2_delay_us:
 34493                           	opt stack 0
 34494                           tosu	equ	0xFFF
 34495                           tosh	equ	0xFFE
 34496                           tosl	equ	0xFFD
 34497                           pclatu	equ	0xFFB
 34498                           pclath	equ	0xFFA
 34499                           tblptru	equ	0xFF8
 34500                           tblptrh	equ	0xFF7
 34501                           tblptrl	equ	0xFF6
 34502                           tablat	equ	0xFF5
 34503                           prodh	equ	0xFF4
 34504                           prodl	equ	0xFF3
 34505                           intcon	equ	0xFF2
 34506                           indf0	equ	0xFEF
 34507                           postinc0	equ	0xFEE
 34508                           fsr0h	equ	0xFEA
 34509                           fsr0l	equ	0xFE9
 34510                           wreg	equ	0xFE8
 34511                           indf1	equ	0xFE7
 34512                           postdec1	equ	0xFE5
 34513                           fsr1h	equ	0xFE2
 34514                           fsr1l	equ	0xFE1
 34515                           indf2	equ	0xFDF
 34516                           postinc2	equ	0xFDE
 34517                           postdec2	equ	0xFDD
 34518                           plusw2	equ	0xFDB
 34519                           fsr2h	equ	0xFDA
 34520                           fsr2l	equ	0xFD9
 34521                           status	equ	0xFD8
 34522                           
 34523 ;; *************** function i2_MXK_Release *****************
 34524 ;; Defined at:
 34525 ;;		line 130 in file "Library/MXK.c"
 34526 ;; Parameters:    Size  Location     Type
 34527 ;;		None
 34528 ;; Auto vars:     Size  Location     Type
 34529 ;;		None
 34530 ;; Return value:  Size  Location     Type
 34531 ;;                  1    wreg      unsigned char 
 34532 ;; Registers used:
 34533 ;;		wreg, status,2, status,0
 34534 ;; Tracked objects:
 34535 ;;		On entry : 0/0
 34536 ;;		On exit  : 0/0
 34537 ;;		Unchanged: 0/0
 34538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34543 ;;Total ram usage:        0 bytes
 34544 ;; Hardware stack levels used:    1
 34545 ;; This function calls:
 34546 ;;		Nothing
 34547 ;; This function is called by:
 34548 ;;		i2_Motor_Step
 34549 ;; This function uses a non-reentrant model
 34550 ;;
 34551                           
 34552                           	psect	text174
 34553  017FF8                     __ptext174:
 34554                           	opt stack 0
 34555  017FF8                     i2_MXK_Release:
 34556                           	opt stack 16
 34557                           
 34558                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 34559                           
 34560                           ;incstack = 0
 34561  017FF8  0E01               	movlw	1
 34562  017FFA  6E43               	movwf	_Bus_State,c
 34563                           
 34564                           ;MXK.c: 135: return 1;
 34565                           ;	Return value of i2_MXK_Release is never used
 34566  017FFC  0012               	return	
 34567  017FFE                     __end_ofi2_MXK_Release:
 34568                           	opt stack 0
 34569                           tosu	equ	0xFFF
 34570                           tosh	equ	0xFFE
 34571                           tosl	equ	0xFFD
 34572                           pclatu	equ	0xFFB
 34573                           pclath	equ	0xFFA
 34574                           tblptru	equ	0xFF8
 34575                           tblptrh	equ	0xFF7
 34576                           tblptrl	equ	0xFF6
 34577                           tablat	equ	0xFF5
 34578                           prodh	equ	0xFF4
 34579                           prodl	equ	0xFF3
 34580                           intcon	equ	0xFF2
 34581                           indf0	equ	0xFEF
 34582                           postinc0	equ	0xFEE
 34583                           fsr0h	equ	0xFEA
 34584                           fsr0l	equ	0xFE9
 34585                           wreg	equ	0xFE8
 34586                           indf1	equ	0xFE7
 34587                           postdec1	equ	0xFE5
 34588                           fsr1h	equ	0xFE2
 34589                           fsr1l	equ	0xFE1
 34590                           indf2	equ	0xFDF
 34591                           postinc2	equ	0xFDE
 34592                           postdec2	equ	0xFDD
 34593                           plusw2	equ	0xFDB
 34594                           fsr2h	equ	0xFDA
 34595                           fsr2l	equ	0xFD9
 34596                           status	equ	0xFD8
 34597                           
 34598 ;; *************** function i2_MXK_Queue *****************
 34599 ;; Defined at:
 34600 ;;		line 144 in file "Library/MXK.c"
 34601 ;; Parameters:    Size  Location     Type
 34602 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 34603 ;;		 -> Absolute function(1), Motor_Step(1), 
 34604 ;; Auto vars:     Size  Location     Type
 34605 ;;		None
 34606 ;; Return value:  Size  Location     Type
 34607 ;;                  1    wreg      void 
 34608 ;; Registers used:
 34609 ;;		wreg, status,2, status,0
 34610 ;; Tracked objects:
 34611 ;;		On entry : 0/0
 34612 ;;		On exit  : 0/0
 34613 ;;		Unchanged: 0/0
 34614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34615 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34618 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34619 ;;Total ram usage:        3 bytes
 34620 ;; Hardware stack levels used:    1
 34621 ;; This function calls:
 34622 ;;		Nothing
 34623 ;; This function is called by:
 34624 ;;		i2_Motor_Step
 34625 ;; This function uses a non-reentrant model
 34626 ;;
 34627                           
 34628                           	psect	text175
 34629  017F70                     __ptext175:
 34630                           	opt stack 0
 34631  017F70                     i2_MXK_Queue:
 34632                           	opt stack 16
 34633                           
 34634                           ;MXK.c: 146: lQueue = pCallback;
 34635                           
 34636                           ;incstack = 0
 34637  017F70  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 34638  017F74  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 34639  017F78  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 34640  017F7C  0012               	return		;funcret
 34641  017F7E                     __end_ofi2_MXK_Queue:
 34642                           	opt stack 0
 34643                           tosu	equ	0xFFF
 34644                           tosh	equ	0xFFE
 34645                           tosl	equ	0xFFD
 34646                           pclatu	equ	0xFFB
 34647                           pclath	equ	0xFFA
 34648                           tblptru	equ	0xFF8
 34649                           tblptrh	equ	0xFF7
 34650                           tblptrl	equ	0xFF6
 34651                           tablat	equ	0xFF5
 34652                           prodh	equ	0xFF4
 34653                           prodl	equ	0xFF3
 34654                           intcon	equ	0xFF2
 34655                           indf0	equ	0xFEF
 34656                           postinc0	equ	0xFEE
 34657                           fsr0h	equ	0xFEA
 34658                           fsr0l	equ	0xFE9
 34659                           wreg	equ	0xFE8
 34660                           indf1	equ	0xFE7
 34661                           postdec1	equ	0xFE5
 34662                           fsr1h	equ	0xFE2
 34663                           fsr1l	equ	0xFE1
 34664                           indf2	equ	0xFDF
 34665                           postinc2	equ	0xFDE
 34666                           postdec2	equ	0xFDD
 34667                           plusw2	equ	0xFDB
 34668                           fsr2h	equ	0xFDA
 34669                           fsr2l	equ	0xFD9
 34670                           status	equ	0xFD8
 34671                           tosu	equ	0xFFF
 34672                           tosh	equ	0xFFE
 34673                           tosl	equ	0xFFD
 34674                           pclatu	equ	0xFFB
 34675                           pclath	equ	0xFFA
 34676                           tblptru	equ	0xFF8
 34677                           tblptrh	equ	0xFF7
 34678                           tblptrl	equ	0xFF6
 34679                           tablat	equ	0xFF5
 34680                           prodh	equ	0xFF4
 34681                           prodl	equ	0xFF3
 34682                           intcon	equ	0xFF2
 34683                           indf0	equ	0xFEF
 34684                           postinc0	equ	0xFEE
 34685                           fsr0h	equ	0xFEA
 34686                           fsr0l	equ	0xFE9
 34687                           wreg	equ	0xFE8
 34688                           indf1	equ	0xFE7
 34689                           postdec1	equ	0xFE5
 34690                           fsr1h	equ	0xFE2
 34691                           fsr1l	equ	0xFE1
 34692                           indf2	equ	0xFDF
 34693                           postinc2	equ	0xFDE
 34694                           postdec2	equ	0xFDD
 34695                           plusw2	equ	0xFDB
 34696                           fsr2h	equ	0xFDA
 34697                           fsr2l	equ	0xFD9
 34698                           status	equ	0xFD8
 34699                           
 34700                           	psect	text176
 34701  000000                     __ptext176:
 34702                           	opt stack 0
 34703                           tosu	equ	0xFFF
 34704                           tosh	equ	0xFFE
 34705                           tosl	equ	0xFFD
 34706                           pclatu	equ	0xFFB
 34707                           pclath	equ	0xFFA
 34708                           tblptru	equ	0xFF8
 34709                           tblptrh	equ	0xFF7
 34710                           tblptrl	equ	0xFF6
 34711                           tablat	equ	0xFF5
 34712                           prodh	equ	0xFF4
 34713                           prodl	equ	0xFF3
 34714                           intcon	equ	0xFF2
 34715                           indf0	equ	0xFEF
 34716                           postinc0	equ	0xFEE
 34717                           fsr0h	equ	0xFEA
 34718                           fsr0l	equ	0xFE9
 34719                           wreg	equ	0xFE8
 34720                           indf1	equ	0xFE7
 34721                           postdec1	equ	0xFE5
 34722                           fsr1h	equ	0xFE2
 34723                           fsr1l	equ	0xFE1
 34724                           indf2	equ	0xFDF
 34725                           postinc2	equ	0xFDE
 34726                           postdec2	equ	0xFDD
 34727                           plusw2	equ	0xFDB
 34728                           fsr2h	equ	0xFDA
 34729                           fsr2l	equ	0xFD9
 34730                           status	equ	0xFD8
 34731                           
 34732                           	psect	rparam
 34733  0000                     tosu	equ	0xFFF
 34734                           tosh	equ	0xFFE
 34735                           tosl	equ	0xFFD
 34736                           pclatu	equ	0xFFB
 34737                           pclath	equ	0xFFA
 34738                           tblptru	equ	0xFF8
 34739                           tblptrh	equ	0xFF7
 34740                           tblptrl	equ	0xFF6
 34741                           tablat	equ	0xFF5
 34742                           prodh	equ	0xFF4
 34743                           prodl	equ	0xFF3
 34744                           intcon	equ	0xFF2
 34745                           indf0	equ	0xFEF
 34746                           postinc0	equ	0xFEE
 34747                           fsr0h	equ	0xFEA
 34748                           fsr0l	equ	0xFE9
 34749                           wreg	equ	0xFE8
 34750                           indf1	equ	0xFE7
 34751                           postdec1	equ	0xFE5
 34752                           fsr1h	equ	0xFE2
 34753                           fsr1l	equ	0xFE1
 34754                           indf2	equ	0xFDF
 34755                           postinc2	equ	0xFDE
 34756                           postdec2	equ	0xFDD
 34757                           plusw2	equ	0xFDB
 34758                           fsr2h	equ	0xFDA
 34759                           fsr2l	equ	0xFD9
 34760                           status	equ	0xFD8
 34761                           
 34762                           	psect	temp
 34763  000049                     btemp:
 34764                           	opt stack 0
 34765  000049                     	ds	1
 34766  0000                     int$flags	set	btemp
 34767                           tosu	equ	0xFFF
 34768                           tosh	equ	0xFFE
 34769                           tosl	equ	0xFFD
 34770                           pclatu	equ	0xFFB
 34771                           pclath	equ	0xFFA
 34772                           tblptru	equ	0xFF8
 34773                           tblptrh	equ	0xFF7
 34774                           tblptrl	equ	0xFF6
 34775                           tablat	equ	0xFF5
 34776                           prodh	equ	0xFF4
 34777                           prodl	equ	0xFF3
 34778                           intcon	equ	0xFF2
 34779                           indf0	equ	0xFEF
 34780                           postinc0	equ	0xFEE
 34781                           fsr0h	equ	0xFEA
 34782                           fsr0l	equ	0xFE9
 34783                           wreg	equ	0xFE8
 34784                           indf1	equ	0xFE7
 34785                           postdec1	equ	0xFE5
 34786                           fsr1h	equ	0xFE2
 34787                           fsr1l	equ	0xFE1
 34788                           indf2	equ	0xFDF
 34789                           postinc2	equ	0xFDE
 34790                           postdec2	equ	0xFDD
 34791                           plusw2	equ	0xFDB
 34792                           fsr2h	equ	0xFDA
 34793                           fsr2l	equ	0xFD9
 34794                           status	equ	0xFD8


Data Sizes:
    Strings     248
    Constant    940
    Data        29
    BSS         707
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160    109     157
    BANK1           256      4     256
    BANK2           256     25     125
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[24]), STR_14(CODE[24]), 
		 -> STR_13(CODE[24]), STR_12(CODE[26]), STR_11(CODE[20]), STR_10(CODE[31]), 
		 -> STR_9(CODE[22]), STR_8(CODE[11]), STR_7(CODE[26]), STR_6(CODE[13]), 
		 -> STR_5(CODE[5]), STR_4(CODE[4]), STR_3(CODE[12]), STR_2(CODE[32]), 
		 -> STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK1[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), 

    ADC_Sequence@pItemA	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _stepMode->_Motor_Speed
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    _eval_poly->___fladd
    _positionMode->_Motor_Speed
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _FunctADC->_ADC_Start
    _ADC_Start->_ADC_SetChannel
    _initialise->_HMI_Init
    _Motor_Init->_Port_SetPinType
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _FunctInitADC->_ADC_Init
    _ADC_Init->_ADC_SetupIO
    _displayStepMode->_printf
    _displaySID->_printf
    _displayPositionMode->_printf
    _displayNullMode->_printf
    _displayContinuousMode->_printf
    _printf->___flsub
    _scale->___flmul
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _fround->___flmul
    ___awdiv->___awmod
    ___awdiv->___wmul
    ___llmod->___lldiv
    ___fltol->___flmul
    ___flsub->___fladd
    ___fladd->_fround
    _continuousMode->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _Timer0_Init->___lldiv
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___awdiv
    ___flmul->___xxtofl

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf
    _displayStepMode->_printf
    _displaySID->_printf
    _displayPositionMode->_printf
    _displayNullMode->_printf
    _displayContinuousMode->_printf

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1938733
                                            107 BANK0      2     2      0
                                              0 BANK1      4     4      0
                        _ADC_Voltage
                     _Console_Render
              _Console_SetForecolour
                         _HMI_Render
                      _HMI_SetNumber
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                            ___awdiv
                            ___flmul
                            ___fltol
                             ___wmul
                     _continuousMode
              _displayContinuousMode
                    _displayNullMode
                _displayPositionMode
                         _displaySID
                    _displayStepMode
                            _getMode
                         _initialise
                           _inputVar
                           _nullMode
                       _positionMode
                                _pow
                             _printf
                           _stepMode
 ---------------------------------------------------------------------------------
 (1) _stepMode                                             0     0      0    6882
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (1) _pow                                                 21    13      8  101604
                                              0 BANK2     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   32964
                                             88 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   52486
                                             96 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                8     2      6     663
                                             88 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4   11731
                                             72 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           16     8      8   15605
                                             72 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (1) _positionMode                                         2     2      0    6882
                                             31 BANK0      2     2      0
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (1) _nullMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inputVar                                             1     1      0   95917
                                             36 BANK0      1     1      0
                           _FunctADC
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   83949
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   83949
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   36581
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    3486
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctADC                                             0     0      0     310
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2     310
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0 1101474
                       _Console_Init
                       _FunctInitADC
                    _FunctInitButton
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   89390
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291428
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262573
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (7) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  218813
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   87051
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    3876
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (8) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (9) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (10) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctInitADC                                         0     0      0    2935
                           _ADC_Init
                       _ADC_Sequence
 ---------------------------------------------------------------------------------
 (3) _ADC_Sequence                                         4     0      4    1067
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             3     0      3    1868
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (4) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStepMode                                      0     0      0   84176
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displaySID                                           0     0      0   84511
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Console_SetForecolour                                2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _displayPositionMode                                  4     4      0   95075
                                             88 BANK0      4     4      0
                            ___flmul
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayNullMode                                      0     0      0   84176
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayContinuousMode                                0     0      0   84176
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    35      6   84176
                                             80 BANK0      8     2      6
                                              0 BANK2     25    25      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               13     9      4   17672
                                             39 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    5316
                                             26 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    5285
                                             22 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    4734
                                             14 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    13      4   17393
                                             39 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    3169
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    4397
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     758
                                              0 BANK0     17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     758
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1752
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1401
                                             39 BANK0     10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5967
                                             72 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    5030
                                             52 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     673
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _continuousMode                                       0     0      0    6882
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    5359
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    4050
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    3585
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35935
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   17128
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1144
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _ADC_Voltage                                         18    14      4   13705
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1456
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    9409
                                             14 BANK0     25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       14    14      0    1778
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Voltage
     ___fldiv
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_Render
     _OutSeg
       _SPI_Send
   _HMI_SetNumber
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
       _reverse
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod (ARG)
     ___xxtofl (ARG)
     _frexp (ARG)
   ___fltol
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl (ARG)
   ___wmul
   _continuousMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _displayContinuousMode
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displayNullMode
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displayPositionMode
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displaySID
     _Console_SetForecolour
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displayStepMode
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _getMode
   _initialise
     _Console_Init
     _FunctInitADC
       _ADC_Init
         _ADC_Calibrate
           _ADC_Off
           _ADC_On
         _ADC_ClockDivision
         _ADC_ConversionTime
         _ADC_SetChannel
         _ADC_SetupIO
       _ADC_Sequence
     _FunctInitButton
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _inputVar
     _FunctADC
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _nullMode
   _positionMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _pow
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _exp
       ___fldiv
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _eval_poly
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _floor
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___flge
         ___fltol
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
     _log
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl
       _eval_poly
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _frexp
   _printf
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___fladd
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
     _scale
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
   _stepMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     19      7D       9       48.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6D      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     262      12        0.0%
DATA                 0      0     38E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Aug 24 12:56:08 2017

                   i2_Timer0_Stop 7FF2                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 50CC  
                               _A 0044                      ___fldiv@aexp 0078  
                    ___fldiv@bexp 0077                                 _a 0045  
                               _i 00E7                                 _j 00E6  
                               _l 0047                                 _u 00E5  
                               _w 0048                      ___fldiv@sign 006C  
                    ___awdiv@sign 006B                __size_of_ADC_Start 0084  
             ___wmul@multiplicand 0062                     _HMI_DIPSwitch 7E58  
              LCD_DrawField@pSize 0078           __end_of_displayNullMode 7812  
              LCD_DrawField@count 007E                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 7F96              ADC_ClockDivision@reg 0061  
                     ?_LED_Toggle 0001                     ??_Console_Tab 006E  
                     ?_HMI_GetBar 0001                               l615 1A98  
                             l528 2290                               l617 1A9C  
                             l655 7C6C                               l680 6F32  
                             l657 7C70                               l685 6F58  
                             _PR2 000FCB           __end_of_displayStepMode 67F6  
                             _dip 011F                               _exp 2588  
                             _log 4132                               _val 00DA  
                             _pow 335E                   __end_of_ADC_Off 7FDA  
                     ?_HMI_SetBar 0001                      ___awmod@sign 0065  
              ??_Event_TestButton 0079                      _Word_GetPair 7890  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 0067        __end_of_ADC_ConversionTime 7674  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                    Console_Tab@c 0075                      Console_Tab@i 0074  
             LCD_DrawField@pField 0072                      Console_Tab@t 0073  
      __size_of_ADC_ClockDivision 008A                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 7812  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 7468           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 5F6E                      ___fltol@exp1 0090  
                    _Word_SetPair 7702                     ?_Byte_GetZone 0060  
                            l1310 7654                              l1207 5B48  
                            l1056 317A                              l1153 3756  
                            l1082 5660                              l2202 0560  
                            l1253 7F06                              l1158 790A  
                            l2062 571A                              l2430 4432  
                            l1279 6922                              l2440 3F56  
                            l2604 5A7E                              l2614 6516  
                            l2534 3C72                              l2527 3BAE  
                            l2528 3BF2                              l2713 0F8C  
                            l2730 1100                              l2714 0F80  
                            l2715 0F4C                              l2821 37A2  
                            l2806 15A4                              l2816 16B6  
                            l2808 1612                              l2657 6BF4  
                            l2835 38AA                              l2739 1194  
                            l2667 724C                              l2780 1DEC  
                            l2772 1CEE                              l2836 38C2  
                            l2828 384E                              l2694 354C  
                            l2769 1D46                              l2857 2810  
                            l2689 33AE                              l2778 1D7E  
                            l2867 4D72                              l2799 1308  
                            ?_exp 00C0                              ?_log 00B8  
                  ??_Console_Init 0060             Port_SetPinType@pInput 0086  
                            ?_pow 0264                              STR_1 FF92  
                            STR_2 FF07                              STR_3 FFE0  
                            STR_4 FFF8                              STR_5 FFF7  
                            STR_6 FFD3                              STR_7 FF60  
                            STR_8 FFEC                              STR_9 FFA9  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
                    printf@tmpval 0274               __end_of_GetPortPORT 620A  
                            _PIR1 000F9E                              _PIR2 000FA1  
                            _PIR3 000FA4               __end_of_GetPortTRIS 60BE  
                            _SPI1 0163                              _SPI2 016E  
                            _TMR0 000FD6                              _gISR 010C  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
                            _diff 00D0              __size_of_ADC_SetupIO 0032  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 7B8A  
                            _main 2CFC                              _mode 0121  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 51CA                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0049  
                            _zero 0046                              exp@x 00C0  
                            log@x 00B8                  __end_of_ADC_Init 6B86  
                   ??_Byte_SetBit 0064                              pow@x 0264  
                            pow@y 0268                __size_of_LCD_Reset 0050  
            __size_of_ADC_Voltage 00D8                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 0065  
                            start 148A                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
               Timer0_Init@DIVIDE 0077                   ?_SPI_DisableISR 0060  
                Motor_Move@pMotor 0063               HMI_SetButton@pValue 0066  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FEAD  
            Set_Rotation@rotation 0066            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A                       ?_ISR_Enable 0001  
                           ??_exp 00C4                             ??_log 00BC  
                           ??_pow 00CB      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 73C6                  __end_of_LCD_Init 4730  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 72B8                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 3758                             l13001 6F22  
                           l13111 5AF0                             l13103 5A9C  
                           l13009 6F48                             l14001 0F70  
                           l13121 5B1C                             l13019 6F6E  
                           l14011 0FB0                             l13211 39D0  
                           l13203 393E                             l14021 0FF4  
                           l13037 7368                             l13045 7732  
                           l13205 3964                             l13125 5B36  
                           l13061 5208                             l14103 1242  
                           l13151 5972                             l13143 5948  
                           l13223 3AA8                             l13311 4A56  
                           l13119 5B0C                             l14121 129C  
                           l14113 1272                             l14025 0FFE  
                           l13161 59A8                             l13153 5978  
                           l13137 5932                             l12521 644A  
                           l13217 3A3C                             l13225 3AC4  
                           l13321 4ABC                             l13241 761A  
                           l13073 5274                             l14131 12CC  
                           l14123 12AE                             l14019 0FEE  
                           l12603 580C                             l13235 75EA  
                           l13075 5288                             l15013 1E6A  
                           l14221 169C                             l14205 160C  
                           l13181 5A12                             l14053 1148  
                           l14029 1010                             l14301 4FE6  
                           l13149 5966                             l13165 59B6  
                           l12517 643E                             l13237 7602  
                           l13245 6F8E                             l13253 6FCC  
                           l12701 2864                             l13069 5258  
                           l15023 1EB0                             l15015 1E7E  
                           l14231 16E0                             l14215 1662  
                           l14143 131C                             l14119 1296  
                           l13191 5A6C                             l13183 5A18  
                           l14047 1132                             l14063 1168  
                           l14039 10E0                             l12623 705A  
                           l13271 2AF8                             l13319 4A72  
                           l13247 6FA0                             l13351 73DA  
                           l13263 75DE                             l15025 1EB4  
                           l15017 1EA0                             l15009 1E3C  
                           l14137 12F0                             l14073 118E  
                           l14057 1154                             l14065 116E  
                           l14321 5068                             l13169 59CA  
                           l13097 71F0                             l13089 71C2  
                           l13345 7B7C                             l13441 1714  
                           l12609 5836                             l12801 28C8  
                           l12721 2878                             l12713 2870  
                           l12705 2868                             l12641 2828  
                           l14219 1688                             l14147 1330  
                           l14139 12F6                             l15203 628E  
                           l13179 5A02                             l15043 79E4  
                           l14091 121E                             l14083 11EA  
                           l14331 509E                             l15051 64AA  
                           l15211 6898                             l12547 78BC  
                           l12563 6B06                             l13275 2B64  
                           l13339 7C74                             l13443 1724  
                           l13435 16FC                             l13531 741E  
                           l13603 61BE                             l15123 4C0C  
                           l15107 4BCA                             l14229 16D6  
                           l14317 5054                             l15053 64BA  
                           l14261 63C6                             l14253 6390  
                           l14245 636C                             l13365 74CA  
                           l16021 5746                             l15213 689E  
                           l12581 5C32                             l13269 2AAE  
                           l13285 2C3C                             l14421 54A2  
                           l13453 17E6                             l13445 1738  
                           l13437 1706                             l14501 7396  
                           l13349 73C8                             l13357 7400  
                           l13533 743A                             l13613 61DA  
                           l13541 60C4                             l13621 602C  
                           l13701 222E                             l12821 28DC  
                           l12813 28D4                             l12805 28CC  
                           l12741 288C                             l12733 2884  
                           l12725 287C                             l12717 2874  
                           l12709 286C                             l12661 283C  
                           l12653 2834                             l12645 282C  
                           l14351 37DA                             l14095 122A  
                           l14087 11FC                             l14335 50BA  
                           l14327 5084                             l15055 64C0  
                           l14255 639C                             l13375 74E8  
                           l16015 570A                             l15223 6900  
                           l15207 688E                             l13279 2BD0  
                           l13287 2C58                             l13471 1970  
                           l13463 189A                             l15143 464E  
                           l13607 61CC                             l12903 6ECE  
                           l12911 6F02                             l15119 4BFA  
                           l14353 37E2                             l14345 37B2  
                           l15241 5630                             l14281 3EB2  
                           l14097 122E                             l14329 5094  
                           l14257 63A2                             l14265 63D4  
                           l14249 637C                             l13377 7500  
                           l12921 6632                             l13385 58A6  
                           l13721 3FB8                             l13713 3FAC  
                           l16025 575A                             l15217 68A8  
                           l13801 66FE                             l12577 5C26  
                           l13473 19BE                             l13465 18AC  
                           l14505 73A4                             l15153 46F2  
                           l15137 45E0                             l13537 7456  
                           l14521 725C                             l13561 610A  
                           l13553 60EE                             l13545 60D2  
                           l13641 6072                             l13633 6056  
                           l13625 603A                             l13617 601E  
                           l13705 2252                             l12841 28F0  
                           l12833 28E8                             l12825 28E0  
                           l12817 28D8                             l12809 28D0  
                           l12761 28A0                             l12753 2898  
                           l12745 2890                             l12737 2888  
                           l12729 2880                             l12681 2850  
                           l12673 2848                             l12665 2840  
                           l12657 2838                             l12649 2830  
                           l14441 4798                             l15081 4CD6  
                           l15073 4CA0                             l14195 15B8  
                           l14363 388C                             l14355 37F2  
                           l15251 5668                             l15243 5636  
                           l15171 6E22                             l14291 3FA2  
                           l15059 6504                             l12915 65C2  
                           l12923 6634                             l16043 67D2  
                           l13803 6702                             l13467 18D4  
                           l12595 57B2                             l14515 73C0  
                           l15147 46BA                             l14523 727A  
                           l13651 608E                             l14443 47AE  
                           l15091 4FA2                             l16123 3472  
                           l16115 33EA                             l14189 158E  
                           l14365 389C                             l14357 3830  
                           l15261 56B6                             l15237 5626  
                           l15181 6E3E                             l14285 3F04  
                           l14277 3E64                             l14269 63E8  
                           l12941 6814                             l13389 58B2  
                           l13733 3FCA                             l13725 3FBE  
                           l13717 3FB2                             l16029 576A  
                           l13813 6722                             l13805 6706  
                           l13469 1922                             l13477 1A0C  
                           l15149 46E4                             l13565 6118  
                           l13557 60FC                             l13549 60E0  
                           l13645 6080                             l13637 6064  
                           l13629 6048                             l13709 2272  
                           l13661 2F9A                             l14541 3D62  
                           l17021 7088                             l12861 2904  
                           l12853 28FC                             l12845 28F4  
                           l12837 28EC                             l12829 28E4  
                           l12781 28B4                             l12773 28AC  
                           l12765 28A4                             l12757 289C  
                           l12749 2894                             l12693 285C  
                           l12685 2854                             l12677 284C  
                           l12669 2844                             l15077 4CB4  
                           l16109 33C2                             l17101 2ED8  
                           l15247 5640                             l15167 6E14  
                           l15271 6A20                             l13911 0DCA  
                           l12935 6804                             l15503 0236  
                           l16047 67E2                             l13807 670A  
                           l13815 672A                             l13487 1AA0  
                           l13479 1A2A                             l12599 57DC  
                           l15415 785E                             l14527 7298  
                           l13591 6194                             l13583 6178  
                           l13575 6134                             l13655 2F30  
                           l13671 3024                             l14551 3DB4  
                           l14623 690A                             l13903 7940  
                           l16127 34A0                             l17103 2EDE  
                           l17111 2F18                             l14377 3914  
                           l15257 56AA                             l13921 0DF8  
                           l12953 6862                             l12945 681E  
                           l13745 406C                             l13737 3FD0  
                           l13729 3FC4                             l15505 024C  
                           l13809 6714                             l13817 6754  
                           l13489 1AB2                             l14473 6560  
                           l15425 788C                             l14713 4E96  
                           l14529 72A8                             l13569 6126  
                           l13665 2FE2                             l13657 2F52  
                           l13673 3040                             l14545 3D6C  
                           l14561 3E02                             l12881 2918  
                           l12873 2910                             l12865 2908  
                           l12857 2900                             l12849 28F8  
                           l12793 28C0                             l12785 28B8  
                           l12777 28B0                             l12769 28A8  
                           l12697 2860                             l12689 2858  
                           l15089 4EFE                             l17105 2EE4  
                           l15283 6A76                             l15275 6A28  
                           l12939 680E                             l15515 02F0  
                           l15507 0288                             l15451 0038  
                           l15443 0010                             l14467 654A  
                           l14707 4E8C                             l13595 61A2  
                           l13587 6186                             l13579 616A  
                           l14547 3D84                             l14555 3DCC  
                           l15099 4B64                             l16075 7116  
                           l17043 2D00                             l14661 4960  
                           l13941 0E5C                             l13917 0DEE  
                           l14821 3C3C                             l14733 2530  
                           l14725 2438                             l12957 6868  
                           l13757 40FC                             l15605 0740  
                           l15533 0404                             l15509 029E  
                           l15461 0096                             l15293 372A  
                           l14485 658C                             l14493 65A2  
                           l14549 3D9C                             l14557 3DFC  
                           l17029 70BA                             l14637 6984  
                           l12885 291C                             l12877 2914  
                           l12869 290C                             l12797 28C4  
                           l12789 28BC                             l12965 6BA4  
                           l14389 5B82                             l17109 2EEA  
                           l17061 2D66                  __end_of_HMI_Poll 6CE8  
                           l14903 1B36                             l15199 6268  
                           l14655 4906                             l13935 0E38  
                           l15623 07B8                             l15607 0746  
                           l15551 047E                             l15535 040A  
                           l15519 0322                             l15455 0050  
                           l15447 0026                             l15631 086E  
                           l14479 6576                             l13847 77CC  
                           l13839 77A4                             l13599 61B0  
                           l12895 2924                             l12967 6BB0  
                           l14913 1B64                             l14649 48FC  
                           l13953 0E90                             l13945 0E66  
                           l13929 0E24                             l14817 3C28  
                           l14753 0AF4                             l15625 07C8  
                           l15529 038C                             l15449 0032  
                           l13793 764E                             l12889 2920  
                           l12977 6BE6                             l12969 6BB6  
                           l12993 723E                             l12985 7208  
                           l16089 55A8                             l17073 2E5E  
                           l17057 2D5A                             l14923 1B94  
                           l14659 490E                             l14843 4308  
                           l14827 3C58                             l14771 0D7A  
                           l14747 0A22                             l15619 0792  
                           l15563 052E                             l15547 0456  
                           l15491 0180                             l15475 00FC  
                           l15459 005C                             l13859 7EFA  
                           l14691 4E0C                             l13699 220E  
                           l12987 7214                             l17059 2D60  
                           l17083 2E7A                             l14933 1BC2  
                           l14909 1B5A                             l14837 42E2  
                           l14829 3C68                             l14781 3B20  
                           l14765 0CA8                             l14757 0B26  
                           l15629 0858                             l15565 0542  
                           l15557 0512                             l13797 66F0  
                           l12989 721A                             l15661 25B0  
                           l15645 4188                             l17077 2E6E  
                           l17085 2EA4                             l13983 0ECC  
                           l15575 0588                             l15559 0520  
                           l13799 66FA                             l14695 4E2E  
                           l15639 4156                             l17079 2E74  
                           l17095 2EC4                             l14953 1C44  
                           l14945 1C16                             l14929 1BB8  
                           l14881 43FC                             l14865 43B0  
                           l14857 435C                             l15593 06EE  
                           l15569 0564                             l14697 4E4A  
                           l14689 4DEE                             l15673 2644  
                           l14971 1CFA                             l14963 1CC2  
                           l15851 31A2                             l13995 0F60  
                           l14787 3B5A                             l15579 05EA  
                           l15587 06D2                             l15499 0204  
                           l15595 06FC                             l15667 25FA  
                           l17099 2ED2                             l13997 0F66  
                           l14877 43E8                             l15589 06E0  
                           l14983 1D68                             l15863 32EA  
                           l15871 3328                             l15855 31AC  
                           l15847 3182                             l14887 4418  
                           l15679 2682                             l14977 1D42  
                           l15865 3318                             l14889 4428  
                           l15697 27D8                             l14989 1D92  
                           l15877 3340                             l15981 72BA  
                           l14999 1DE6                             l15887 78D8  
                           l15993 72DE                             l15985 72C6  
                           _I2C1T 0038                             _I2C2T 01C9  
                           l15989 72D2                             l15999 72EA  
                           l16999 7B1C                     ___fltol@sign1 008F  
                 __end_of___fladd 1254                             ?_main 0001  
                 __end_of___fldiv 1ED8                   __end_of___awdiv 59D4  
                 __end_of___flneg 79F6                             ?_itos 0067  
                           STR_10 FF27                             STR_11 FFBF  
                           STR_12 FF46                             STR_13 FF7A  
                           STR_14 FF7A                             STR_15 FF7A  
                           STR_16 FFFC                             STR_17 FFF3  
                 __end_of___awmod 63F2                   __end_of___flmul 16FA  
                 __end_of___flsub 76BC                   __end_of___fltol 50CC  
                 _Event_DIPSwitch 7BBA                   __end_of___lldiv 5A90  
                           u10210 6AA0                             u10300 76F0  
                           u10305 76EA                             u10170 6414  
                           u10244 7148                             u12020 5BB4  
                           u10245 7142                             u10190 647A  
                           u10254 717A                             u10255 7174  
                           u11240 0F16                             u10520 71BE  
                           u10177 640A                             u12210 7A84  
                           u11250 0F2E                             u10530 71E8  
                           u10274 5C6E                             u10275 5C68  
                           u10195 6474                             u11260 0F30  
                           u10284 5CA0           __size_of_HMI_LeftSwitch 0018  
                           u12028 5BB8                   ___awdiv@divisor 0068  
                           u10445 7F32                             u10285 5C9A  
                           u10446 7F34                             u11094 7AB0  
                           u12215 7A7E                             u11095 7AAA  
                 __end_of___llmod 6528                             u11700 1676  
                           u11620 1530                             u14100 56F8  
                           u12340 4DCC                             u12148 487E  
                           u12350 4DE0                             u12088 550E  
                           u12360 4E20                             u11625 1524  
                           u12441 3AFC                             u10770 758A  
                           u12098 4742                             u12099 4756  
                           u12461 3B36                             u10925 1F06  
                           u14150 5786                             u14310 3454  
                           u10935 1F1E                             u10775 7584  
                           u12800 1E50                             u14240 556E  
                           u13185 6A38                             u10785 4A0E  
                           u10945 1F36                             u11850 5006  
                           u14170 67C8                             u14058 5CC6  
                           u10955 1F58                             u14059 5CDA  
                           u10884 66AE                             u14068 5CF0  
                           u10965 20D8                             u10885 66A8  
                           u14069 5D04                             u13470 0558  
                           u14078 5D10                             u13630 264E  
                           u11855 4FFA                             u10975 2156  
                           u14079 5D24                             u14088 5D30  
                           u13640 2650                             u10985 2198  
                           u14089 5D44                             u14098 5D50  
                           u12930 4B96                             u15090 2E54  
                           u10995 21DA                             u14099 5D64  
                           u12970 45DE                             u12890 4CC4  
                           u12938 4B9A                             _INDEX 0031  
                 __end_of___lwdiv 6BFE                             u14998 7B08  
                           _MASKS FCBD                   __end_of___lwmod 7256  
                 ___awdiv@counter 006A                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                     ?_FunctInitADC 0001  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 0076  
                 __end_of_getMode 7314                    __CFG_FCMEN$OFF 000000  
                           _PortA 01B5                             _PortB 01AB  
                           _PortC 00EA                             _PortD 01A1  
                           _PortE 0197                             _PortF 01BF  
                           _PortG 018D           __end_of_Port_SetPinType 3AE6  
                 _ADC_Initialised 00E8                    ??_Byte_GetPair 006C  
                           _angle 00D2                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 0075             __size_of_ADC_Sequence 0046  
                 __end_of_dpowers FC9D                    ??_Byte_GetZone 0065  
                           _floor 4C60                             _ldexp 4B3C  
                  Button_Poll@Pin 0083                             _frexp 5B4A  
                           _errno 011B          __size_of_Set_Addr_Window 00AA  
             __end_of_Console_Tab 5916                             _scale 0892  
                __end_of_MXK_Init 45BE                             _speed 00D6  
            i2Byte_GetPair@pInput 000A                             _putch 7F62  
                           _steps 00D4                  __end_of_SPI_Init 1B18  
                __end_of_SPI_Send 6F8C             __end_ofi2_MXK_Release 7FFE  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 6F20                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 0063                 __end_of_ADC_Start 698A  
                  ??_Byte_SetPair 006F                             pow@yi 0275  
                  ??_Byte_SetQuad 006F                             plusw2 000FDB  
                  ??_Byte_SetZone 0066                             status 000FD8  
          __size_of_ADC_Calibrate 0014                   _Configure_GPIOs 6E44  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 7DD2               __size_of_LED_Toggle 0048  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                     exp@exponent 00C8                        _Event_NULL 8002  
     __size_of_Port_CheckPairType 006A                       ldexp@newexp 00BC  
             __size_of_HMI_SetBar 000A                   __initialization 5E18  
             __size_of_HMI_Render 003E                       log@exponent 00BC  
             __end_of_Byte_GetBit 7A96                    _remainingSteps 0125  
                    __end_of_main 2F28                      __end_of_itos 52A2  
            HMI_SetButton@reindex 0062                      SPI_Send9@dat 0127  
             __end_of_Byte_SetBit 7190                  __end_of_FunctADC 7F24  
                __end_of_InitList FC0D       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 7F36                         ??_ADC_Off 0060  
     __size_of_Port_CheckPortType 0048                       HMI_Render@a 0068  
                          ??_main 00CB                  ?_displayNullMode 0001  
                    _ADC_Sequence 7748                            ??_itos 006B  
        __size_of_FunctInitButton 00A2           _Console_MakeField$10974 006E  
                   __activetblptr 000003                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 74B8                 Port_SetPin@pValue 0072  
                ?_displayStepMode 0001              __size_of__tdiv_to_l_ 019E  
                  ??_FunctInitADC 0067                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 7D78                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 7D1C                       _GetPortPORT 6164  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 6018  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 6B0A  
                __end_of_Port_Set 2292                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0064               __end_of_Button_Init 5524  
             __end_of_Button_Poll 4896                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 6652                         ??_SPI_DCS 0062  
                          ?_floor 00A8                            ?_ldexp 00B8  
                          ?_frexp 0060                  ___llmod@dividend 006D  
                          ?_scale 0087                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 7FEC  
                   _HMI_SetNumber 7C16            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0066  
                  _continuousMode 7AC8                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
           _Console_SetForecolour 7FC0                  _Console_FormFeed 67F6  
          Port_SetQuadType@pInput 0096                    __CFG_WDTEN$OFF 000000  
                          i2l1591 144E               __size_of_ISR_Enable 000A  
                          i2l8541 6C44                            i2l8545 6C4A  
                          i2l9791 7824                            i2l9783 7BA8  
                          i2l9789 7814                            i2l9797 7840  
          __end_of_LCD_Word_Write 7DF0                    _Timer0_Restart 7F7E  
             ??_MXK_InitDIPSwitch 009B                  __end_of___xxtofl 3926  
                  i2_MXK_SwitchTo 7A2C                   Byte_GetBit@pBit 0062  
    Console_SetForecolour@pColour 0060                        _Reset_High 7D5A  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077            ADC_SetChannel@pChannel 0061  
                __end_of_delay_ms 6FF6                      LED_Init@pLED 008D  
                __end_of_delay_us 7418                     ??_Timer0_Init 0071  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
                      _Timer0_ISR 7BE8          __size_of_Console_NewLine 0092  
               Timer2_Init@DIVIDE 007A                    __CFG_XINST$OFF 000000  
                __end_of__powers_ FC41                            _OutSeg 6A0C  
        __size_of_HMI_InitButtons 0006                        _Motor_Init 537A  
                      _Motor_Move 7984                     ??_Motor_Speed 007F  
                          ___flge 3E16                        _Motor_Step 4D84  
         __end_of_Event_DIPSwitch 7BE8                         ??___fladd 009C  
                          ___wmul 79F6                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 006A  
                       ??___flneg 0064                    __CFG_STVREN$ON 000000  
                       ??___awmod 0064                            _change 00FC  
                       ??___flmul 0076                            _lMotor 002A  
                       ??___flsub 00B0                         ??___fltol 008B  
                       ??___lldiv 0068                            _lQueue 0025  
                      _TestButton 0183                         ??___llmod 0075  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 0064          __end_of_Port_SetQuadType 2CFC  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002C  
            __end_of_Console_Init 6906                            _locked 0123  
                          _fround 2292                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 001E                            clear_0 5E7E  
                          clear_1 5E90                            clear_2 5E9C  
                          clear_3 5EA8                            clear_4 5EB4  
                ___awdiv@quotient 006C                   ___awmod@divisor 0062  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 7F62  
      __end_ofHMI_SetButton@F7213 FCCA                   ___awmod@counter 0064  
                       ??_getMode 0060                            _printf 0000  
                __end_of_inputVar 5D6A         __end_of_MXK_InitDIPSwitch 7D96  
                   _ADC_Calibrate 7EFE                    HMI_SetButton@v 0067  
                          floor@i 00AC                            floor@x 00A8  
          HMI_SetSegments@pString 0061                       _Console_Tab 5854  
             LCD_Word_Write@value 0065                      __pdataCOMRAM 003F  
              __size_of_Port_Init 0192                     ??_Port_GetPin 0063  
        Port_CheckPortType@Output 0099                  __end_of_nullMode 1406  
                       ?_ADC_Init 0064                   ??i2_Port_SetPin 0014  
                    __mediumconst FB5A       __end_ofTimer2_Init@PRESCALE FCCD  
        Port_CheckPortType@pDrive 0098                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 0096                     ??_Port_SetPin 0073  
                       ??_reverse 0064            __end_of_continuousMode 7AFA  
                __end_of_stepMode 712C             Console_MakeField@Fill 021E  
                ?_Port_SetPinType 0086                            putch@c 007A  
               Motor_Speed@pMotor 007B                    ?_HMI_SetNumber 0071  
                  i2_Word_GetPair 7B8A           __end_of_Configure_GPIOs 6EB4  
                ??_MXK_TestButton 0066            __end_of_Timer0_Restart 7F8A  
                   Set_Rotation@m 0065                      ?_MXK_Release 0001  
                      ___flge@ff1 0060                        ___flge@ff2 0064  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 7A62  
                    ___xxtofl@arg 006A                  __end_ofexp@coeff FED5  
                    i2delay_us@us 0001                      ___xxtofl@exp 0069  
                    ___xxtofl@val 0060                  __end_oflog@coeff FEF9  
                 ?_LCD_Word_Write 0065                        __accesstop 0060  
         __end_of__initialization 5EBA                         ?_LCD_Fill 0069  
                       ?_LCD_Init 0001                     SPI_Init@pMode 0092  
                      ___flneg@f1 0060                       _Byte_GetBit 7A62  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 7FA2  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 0068  
                       ?_HMI_Poll 0001                      eval_poly@res 00B4  
                   ___rparam_used 000001                        ___fltol@f1 0087  
                     _Byte_SetBit 712C                     __end_of_MASKS FCC6  
                  _PortA_Property FF05                       ?_Event_NULL 0001  
                       LCD_Fill@i 006B                         LCD_Fill@j 006C  
                       LCD_Init@i 0097                    __pcstackCOMRAM 0001  
                  _PortB_Property FF03               __size_ofi2_delay_us 0040  
                    __pidataBANK0 7FFE                      __pidataBANK1 7F36  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 7DD2  
                 Console_Render@x 008A                   Console_Render@y 008B  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FC9D              __end_of_Byte_GetZone 648E  
              ADC_Sequence@pItemA 0060                ADC_Sequence@pItemB 0062  
                   __end_of_floor 4D84                     __end_of_ldexp 4C60  
                   __end_of_frexp 5C00                     __end_of_scale 0DAC  
                  _PortC_Property FF01               __end_of_Timer0_Init 49EA  
                   __end_of_putch 7F70                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 4B3C               __end_of_Timer0_Stop 7FE6  
                  ?_ADC_Calibrate 0001                         ?_SPI_Init 008D  
                       ?_SPI_Send 0060                       _Button_Init 5450  
    __size_of_displayPositionMode 0082                 Port_SetType@pType 009C  
                     _Button_Poll 4730              __end_of_Byte_SetByte 7F54  
            __end_of_Byte_SetPair 7CD8                    _HMI_LeftSwitch 7EB8  
                  _PortD_Property FEFF              __end_of_Byte_SetQuad 7CFA  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 5CB6               __end_of_Motor_Speed 7C6A  
                  _HMI_DownSwitch 7E70                     SPI_Send@pData 0062  
                      __div_to_l_ 42BC             __end_of_MXK_DIPSwitch 7E58  
           _displayContinuousMode 56C4                      ??_HMI_SetBar 0060  
                    ??_HMI_Render 0068                    _PortE_Property FEFD  
                      ??_ADC_Init 0067          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 7BBA                   ?_continuousMode 0001  
                  _PortF_Property FEFB           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                 __div_to_l_@exp1 006D                           ??_floor 00AC  
                         ??_ldexp 00BE                   __div_to_l_@cntr 006C  
                         ??_frexp 0066            ?_Console_SetForecolour 0060  
               ??_FunctInitButton 00A8                           ??_scale 008B  
                         ?_ADC_On 0001                 _Console_Backspace 74B8  
                 __div_to_l_@quot 0068                   ?_Timer0_Restart 0001  
                         ??_putch 007A          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 7948                 __end_of_ToSegment 2AA6  
                  _PortG_Property FEF9                        __pbssBANK0 00CD  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 7702           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                __size_of_eval_poly 0118  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 7D5A  
                       ?_FunctADC 0001         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 5854  
          __end_of_PortA_Property FF07                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 0060                        ??_LED_Init 008D  
        ADC_ClockDivision@pDivide 0060                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
              _ADC_ConversionTime 762C                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001                     __div_to_l_@f1 0060  
                   __div_to_l_@f2 0064                        _main$15263 01FC  
         Port_CheckPairType@Props 008D            __end_of_PortB_Property FF05  
                   ?_Timer0_Start 0060                 __end_of_Port_Init 3E16  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 0088  
              __end_of_LED_Toggle 762C                __end_of_HMI_GetBar 7FE0  
            __end_of_FunctInitADC 5E18          LCD_FillRectangle@pColour 0069  
             ??_Console_Backspace 0062                 Set_Addr_Window@xe 0066  
               Set_Addr_Window@ye 0067                 Set_Addr_Window@xs 0068  
               Set_Addr_Window@ys 0065                           ?_OutSeg 0063  
                     ?_Motor_Init 008D                Byte_SetPair@pInput 006B  
                     ?_Motor_Move 0063                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 006E                           ?___flge 0060  
              __end_of_HMI_SetBar 7FB6            __end_of_PortC_Property FF03  
              Word_GetPair@pInput 006C                __end_of_HMI_Render 790C  
                  ??_Set_Rotation 0065                         ?_Port_Set 006F  
             ?_ADC_ConversionTime 0001                           ?___wmul 0060  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 0065  
                    ??_ISR_Enable 0060      __size_of_Console_ResetCursor 001A  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 7ED0  
          __end_of_PortD_Property FF01                           _ADC_AN0 01DF  
                         _ADC_AN1 01DA                           _ADC_AN2 01D5  
                         _ADC_AN3 01D0                        ??_MXK_Init 00A6  
               Port_GetPin@pInput 0060                 _Console_MakeField 55F4  
                         ?_fround 0087                           _ADC_Off 7FD2  
               ??_Console_NewLine 0060          ADC_ClockDivision@unfound 0062  
          __end_of_HMI_DownSwitch 7E88                        ??_SPI_Init 0093  
          Event_TestButton@pState 0079                        ??_SPI_Send 0063  
                         ?_printf 00B0                 ??_HMI_InitButtons 0060  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FEFF  
             Console_Render@F6956 01EC                ?_Console_MakeField 0065  
                         _COUNTER 0028                           i2l10533 5FAC  
                         i2l11173 5168                           i2l10543 5FFC  
                         i2l11175 517C                           i2l11167 5130  
                         i2l11191 51B8                           i2l10561 7A5E  
                         i2l10553 7A3E                           i2l10537 5FD6  
                         i2l10529 5F86                           i2l11169 5146  
                         i2l11185 51AE                   ??_HMI_SetButton 0060  
            __end_of_HMI_UpSwitch 7EA0                           _LED_Set 7418  
         _Console_IncrementCursor 7190                         ?___xxtofl 0060  
          __end_of_PortF_Property FEFD                       _gBackcolour 00DE  
                 ??_HMI_SetNumber 0073                         _I2C1_Done 0118  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0115  
                       _I2C1_More 0112                         _I2C2_More 010F  
                       ?_delay_ms 0060         __end_of_Console_Backspace 7506  
                       ?_delay_us 0060               __size_of_Event_NULL 0002  
      __end_of_MXK_InitTestButton 7DB4                           _SSP1ADD 000FC8  
                      _displaySID 7D1C                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F              ??_ADC_ConversionTime 0060  
          __end_of_PortG_Property FEFB               ??_Console_MakeField 0067  
         __size_of_ADC_SetChannel 001C                           _SPI_DCS 7B5A  
            __size_ofi2_MXK_Queue 000E                     ??_ADC_SetupIO 0060  
                ?_Configure_GPIOs 0001                   __size_of_ADC_On 0006  
                ADC_Init@pChannel 0066              i2Byte_GetZone@Offset 0008  
                   ??_ADC_Voltage 008B                        ??_FunctADC 0066  
              __end_of_ISR_Enable 7FC0                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 0060  
               Event_TestButton@j 00E4                        ??_Mode_Set 0060  
                  ??_Timer2_Clear 0060                           _Font5x7 FCCD  
            i2Byte_GetZone@pChunk 0004          ADC_ConversionTime@pCount 0061  
            i2Byte_GetZone@pInput 0001                    ??_Timer0_Start 0063  
                       ?_inputVar 0001              SPI_DisableISR@pInput 0060  
                   ?_Port_GetQuad 0060                   Byte_SetBit@pBit 0062  
            Port_TogglePin@pInput 0074             __end_ofi2_Byte_SetBit 7552  
                       _ADC_Start 6906                 __end_of__npowers_ FC75  
                         __Hparam 0000                 Port_GetQuad@pQuad 0062  
                     _Timer0_Init 4896                       _Timer2_Init 49EA  
                         __Lparam 0000                       _Timer0_Stop 7FE0  
           __size_of_Console_Init 0086                           OutSeg@a 0033  
 __end_ofPortProperty_Valid@F6830 FCBD                     LCD_Write@mode 0063  
                       ?_nullMode 0001                   __size_of_OutSeg 0082  
                      ??_Port_Set 0072                   __size_of___flge 0190  
       __end_of_Console_MakeField 56C4                 _Console_PrintChar 3FA6  
                     _Motor_Speed 7C40                           _Stepper 00F4  
                         ___fladd 0DAC                     ?_Port_SetType 009A  
                         _gCursor 003F                           ___fldiv 1B18  
                         ___awdiv 5916                           ___flneg 79BE  
           ??_Console_ClearCursor 0060                           ___awmod 6350  
                         ___flmul 1254                           ___flsub 7674  
                         ___fltol 4FC0                           _lBuffer 027D  
                         ___lldiv 59D4                   __size_of___wmul 0036  
                       ?_stepMode 0001                   ??_ADC_Calibrate 0060  
                         ___llmod 648E                           ___lwdiv 6B86  
                         ___lwmod 71F4                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 6880                        _currentPos 01F8  
              ?_Console_PrintChar 0001                           __pcinit 5E18  
               __end_of_eval_poly 4FC0                   __size_of_fround 02F6  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                      _initialise 7060                           _getMode 72B8  
                         __ptext0 2CFC                           __ptext1 70C8  
                         __ptext2 335E                           __ptext3 4132  
                         __ptext4 2588                           __ptext5 4B3C  
                         __ptext6 4C60                           __ptext7 5B4A  
                         __ptext8 4EA8                           __ptext9 5524  
          ?_displayContinuousMode 0001                   __size_of_printf 0892  
                       _T0CONbits 000FD5                 i2MXK_SwitchTo@CUR 0007  
                     ?__div_to_l_ 0060                           _dpowers FC75  
                       _T2CONbits 000FCA                     LED_Set@pValue 0074  
                    __size_of_exp 029A                      __size_of_log 018A  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 0079  
                    __size_of_pow 0200                        ??___xxtofl 0064  
                    ?_GetPortPORT 0060                  ___awmod@dividend 0060  
                    ?_GetPortTRIS 0060               ??_Console_PrintChar 0076  
                     _Port_GetPin 76BC                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 01E8               LCD_DrawRectangle@p4 01E4  
                    ??i2_delay_us 0003                        ??_delay_ms 0062  
                      ??_delay_us 0062                           _reverse 6EB4  
                       _DIPSwitch 0179               __size_of_Timer0_ISR 002E  
                         _upState 00E3                       _Port_SetPin 5790  
                  LCD_DrawField@i 0082                         _LCD_Reset 7468  
             __size_of_Motor_Init 00D6               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0124                         _LCD_Write 7CFA  
            __size_of_MXK_Dequeue 0030                        delay_ms@ms 0060  
            end_of_initialization 5EBA               ADC_SetupIO@pChannel 0062  
                         exp@sign 00CA                        delay_us@us 0060  
               ??_HMI_SetSegments 0063           Console_PrintChar@pInput 0079  
                    _Console_Init 6880              __size_of_MXK_Release 0016  
      __end_of_Port_CheckPairType 7060                           itos@Out 006F  
                  ??_Port_GetQuad 0063                _PortProperty_Valid 6A8E  
                       i2u1501_48 7C00                        _rightState 00E0  
              Byte_SetQuad@pInput 006B                        ??_inputVar 0084  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
             __end_of_ADC_SetupIO 7AC8             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 0064             __size_of_Byte_GetZone 009C  
                      ?_ADC_Start 0062                 ??_HMI_RightSwitch 0066  
                         pow@sign 0274                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 4132               __end_of_ADC_Voltage 537A  
                      ??_nullMode 0060                    ??_Port_SetType 009D  
      __end_of_Port_CheckQuadType 736E                           printf@c 027C  
                         printf@f 00B0                    Port_Init@pPort 00A2  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 0069                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 006F  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 75E4  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 7852  
                      ??_stepMode 007F                Button_Init@pInitIO 009F  
                  __tdiv_to_l_@f1 0060                    __tdiv_to_l_@f2 0064  
           Timer0_Init@pFrequency 006D                 ?_Port_SetQuadType 0096  
                     _gForecolour 00FA                     ??__tdiv_to_l_ 0068  
       ??_Console_IncrementCursor 0064            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 009A  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 0066  
                     ___fladd@grs 00A7             Console_Render@lCursor 0086  
                       _MXK_Queue 7F54                  __CFG_CPUDIV$OSC1 000000  
                   ___xxtofl@sign 0068                  Byte_GetZone@pMax 0062  
      __size_of_Console_Backspace 004E                   _Set_Addr_Window 5EC4  
                  SPI_Init@pClock 008D                  ??_LCD_Word_Write 0067  
                     ?_displaySID 0001                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 62AE  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                 __size_of_ADC_Init 007C  
                  Port_Set@pValue 0071                        ?_LCD_Reset 0001  
        __size_of_displayNullMode 0042              __end_of_Set_Rotation 65C0  
                      ?_LCD_Write 0063                      _Byte_GetPair 7DB4  
              HMI_SetButton@F7213 FCC6                      _Byte_GetZone 63F2  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 0080  
               LCD_DrawField@ymax 0081          __size_of_displayStepMode 008A  
                  __end_of_ADC_On 7FF2                    _Port_TogglePin 7B2A  
                _Event_TestButton 790C             __size_of_FunctInitADC 00AE  
                     ___flmul@grs 007C               _displayPositionMode 698A  
            Port_SetPinType@Props 008B                      ?_Byte_GetBit 0060  
         __size_ofi2_Byte_GetPair 001A                     ?_positionMode 0001  
                    _Byte_SetByte 7F46                      _Byte_SetPair 7CB6  
                 ADC_SetupIO@MASK 0063                      _Byte_SetQuad 7CD8  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 5C00  
            Port_SetPinType@pType 0089                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 0060                     ?_SPI_MaxSpeed 006F  
               __size_of_LCD_Fill 0058                      ??_Event_NULL 0060  
               __size_of_LCD_Init 0172               __size_of__div_to_l_ 0188  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 7FF8                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0074  
                   ?i2_Motor_Step 0001        __size_of_Console_MakeField 00D0  
                  __end_of_OutSeg 6A8E                    __end_of___flge 3FA6  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 7A2C  
           __end_of_HMI_DIPSwitch 7E70                     __pidataCOMRAM 7FA2  
                     ?_initialise 0001                      ?_Button_Init 009B  
            ?_displayPositionMode 0001                   _FunctInitButton 62AE  
                    ?_Button_Poll 007B                         _Bus_State 0043  
                ??_continuousMode 007F                    __end_of_fround 2588  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
            __end_of_Timer0_Clear 7F96                 __size_of_MXK_Init 017A  
                      floor@expon 00B0              __end_of_Timer2_Clear 7FD2  
                  __end_of_printf 0892                 __size_of_SPI_Init 041E  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 006C  
                ??_Timer0_Restart 0060              __end_of_Timer0_Start 7CB6  
         ??_Console_SetForecolour 0062                Port_SetType@Output 009F  
             start_initialization 5E18                        ?_MXK_Queue 0060  
                      eval_poly@d 00AC                        eval_poly@n 00AE  
                      eval_poly@x 00A8                      _FunctInitADC 5D6A  
                      ldexp@value 00B8          PortProperty_Valid@Errors 0075  
                ??i2_MXK_SwitchTo 0007               __end_of__tdiv_to_l_ 3C84  
               _LCD_FillRectangle 6DD0                Port_SetType@pInput 009A  
                  _ADC_SetChannel 7DF0                       __end_of_exp 2822  
                     __end_of_log 42BC                       __end_of_pow 355E  
                      HMI_Init@in 00A8               HMI_SetNumber@pInput 0071  
           __end_ofi2_Port_SetPin 6018                __end_of_Event_NULL 8004  
          __end_of_Port_TogglePin 7B5A                     ?_Word_SetPair 006F  
               Byte_SetBit@pInput 0060                          ??_ADC_On 0060  
                  ??_MXK_SwitchTo 0066                 Byte_SetBit@pValue 0063  
              ?_LCD_FillRectangle 0069               _Console_ResetCursor 7E0C  
     PortProperty_Valid@pPinDrive 0071                       _ADC_SetupIO 7A96  
            MXK_BlockSwitchTo@CUR 0066          PortProperty_Valid@pInput 006F  
                   i2_MXK_Release 7FF8                       _ADC_Voltage 52A2  
                      frexp@value 0060                    ??_positionMode 007F  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074                   ___llmod@divisor 0071  
        __size_of_Port_SetPinType 01C0                    ??_SPI_MaxSpeed 0071  
           Port_SetQuadType@pQuad 0098                   ___llmod@counter 0075  
                       _ToSegment 2822               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Console_NewLine 65C0  
               __size_of_FunctADC 0012                    ??_SPI_MinSpeed 0071  
                     ??_ADC_Start 0064                      _HMI_UpSwitch 7E88  
                       _Reset_Low 7D3C                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 7FE6                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 018C                    ADC_Init@pInput 0064  
                       _gCharSize 01F4                  Timer2_Init@INDEX 002F  
                       OutSeg@cur 0035                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 0091                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 020C  
                    ??_Motor_Move 0067                      ??_Motor_Step 0074  
                        ??___flge 0068                Byte_SetZone@Offset 0069  
                        ??___wmul 0064               __size_of_displaySID 0020  
            ?_Console_ResetCursor 0001                         _Port_Init 3C84  
                     __pdataBANK0 00FA                       __pdataBANK1 01EC  
                        ??_fround 008B                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 0063             ??_displayPositionMode 00B8  
                        ?_ADC_Off 0001                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 0060                Byte_SetZone@pValue 0065  
                   Mode_Set@pMode 0060                          ??_printf 00B6  
         __end_of_Set_Addr_Window 5F6E          Port_CheckQuadType@Output 0095  
                       _gLineSize 01F0          Port_CheckQuadType@pDrive 0092  
                       ___fladd@a 0098                         ___fladd@b 0094  
                  ??_Word_GetPair 006F                        fround@prec 0093  
        Port_CheckQuadType@pInput 008F              __end_of_Port_GetQuad 759C  
                       ___fldiv@a 0064                         ___fldiv@b 0060  
       __end_of_LCD_FillRectangle 6E44                       __pbssBIGRAM 027D  
          __end_of_ADC_SetChannel 7E0C                          ?_LED_Set 0074  
                       ___flmul@a 0072                         ___flmul@b 006E  
                     __pbssCOMRAM 0025                         ___flsub@a 00AC  
                       ___flsub@b 00A8                   ADC_Start@pInput 0062  
              __end_of_Reset_High 7D78                     __pcstackBANK0 0060  
                   __pcstackBANK1 01FC                     __pcstackBANK2 0264  
                    _fround$15264 008F                      _fround$15265 008B  
                      itos@Length 006D                    ??_Word_SetPair 0073  
               __size_of___xxtofl 01CE                __end_of_Timer0_ISR 7C16  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 0079  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 3152  
                        ?_SPI_DCS 0060                   ?_Port_TogglePin 0074  
                     ??_LCD_Write 0064                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 5450  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Move 79BE  
              __end_of_Motor_Step 4EA8             Timer2_Init@pFrequency 006D  
                  ?i2_MXK_Release 0001                         _exp$15270 00C4  
             __size_of_initialise 0068          Port_CheckPairType@Output 008C  
               ??_displayNullMode 00B8                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 0089          Port_CheckPairType@pInput 0086  
                  reverse@tempVar 0064                _MXK_InitTestButton 7D96  
                      ?_Reset_Low 0001                      ?_Timer0_Init 006D  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 006D  
                ??_HMI_LeftSwitch 0066                 ??_displayStepMode 00B8  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 00CD           __size_of_MXK_TestButton 0018  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 6350  
               __size_of_inputVar 00B4                  ??_HMI_DownSwitch 0066  
                       __pintcode 1408                     __pmediumconst FB5A  
                    ?_Motor_Speed 007B             ??_Console_ResetCursor 0060  
                        ?___fladd 0094                          ?___fldiv 0060  
                        ?___awdiv 0066                         __ptext100 6B0A  
                       __ptext101 7A96                         __ptext110 676C  
                       __ptext102 7DF0                          ?___flneg 0060  
                       __ptext111 7D1C                         __ptext103 762C  
                       __ptext120 5854                         __ptext112 7FC0  
                       __ptext104 66E2                         __ptext121 7190  
                       __ptext113 698A                         __ptext105 7EFE  
                       __ptext130 3AE6                         __ptext122 65C0  
                       __ptext114 77D0                         __ptext106 7FEC  
                       __ptext131 42BC                         __ptext123 67F6  
                       __ptext115 56C4                         __ptext107 7FD2  
                       __ptext140 4896                         __ptext132 648E  
                       __ptext124 7E0C                         __ptext116 0000  
                       __ptext108 6880                         __ptext141 59D4  
                       __ptext133 4FC0                         __ptext125 74B8  
                       __ptext117 0892                         __ptext109 72B8  
                       __ptext150 79F6                         __ptext142 7F8A  
                       __ptext134 7674                         __ptext126 7948  
                       __ptext118 7F62                         __ptext151 5EC4  
                       __ptext143 7984                         __ptext135 0DAC  
                       __ptext127 2292                         __ptext119 3FA6  
                       __ptext160 1254                         __ptext152 7DD2  
                       __ptext144 7C92                         __ptext136 79BE  
                       __ptext128 6350                         __ptext161 1B18  
                       __ptext153 7CFA                         __ptext145 78CE  
                       __ptext137 3E16                         __ptext129 5916  
                       __ptext170 6BFE                         __ptext154 6F20  
                       __ptext146 6A0C                         __ptext138 7AC8  
                       __ptext171 7506                         __ptext163 7BE8  
                       __ptext155 7F24                         __ptext147 3152  
                       __ptext139 7C40                         __ptext172 7A2C  
                       __ptext164 50CC                         __ptext156 55F4  
                       __ptext148 6DD0                         __ptext173 7812  
                       __ptext165 7FF2                         __ptext157 7A62  
                       __ptext149 620A                         __ptext174 7FF8  
                       __ptext166 7F96                         __ptext158 52A2  
                       _pShiftVal 00D8                         __ptext175 7F70  
                       __ptext167 5F6E                         __ptext159 3758  
                       __ptext176 0000                         __ptext168 7B8A  
                       __ptext169 7E26                          ?___awmod 0060  
                        ?___flmul 006E                          ?___flsub 00A8  
                        ?___fltol 0087                          ?___lldiv 0060  
                      ?_Port_Init 00A0                          ?___llmod 006D  
                       __npowers_ FC41              Timer0_Init@pCPUClock 0073  
         ??_displayContinuousMode 00B8                          ?___lwdiv 0060  
                        ?___lwmod 0060               ?_MXK_InitTestButton 0001  
               __size_of_nullMode 0002                         _direction 01FA  
               ?_Console_FormFeed 0001                 _GetPortProperties 60BE  
               __size_of_stepMode 0064                          ?_getMode 0001  
                     __tdiv_to_l_ 3AE6                     ?_ADC_Sequence 0060  
                       _pow$15268 026C                         _pow$15269 0270  
     __end_ofTimer0_Init@PRESCALE FCAD                      ??__div_to_l_ 0068  
              ??_Console_FormFeed 0060                   _HMI_SetSegments 5A90  
              ?_GetPortProperties 0060                  Event_NULL@pState 0001  
        __size_of_Event_DIPSwitch 002E             __size_of_Set_Rotation 0098  
                 ?_ADC_SetChannel 0001                     ??i2_MXK_Queue 0004  
                       _leftState 00E1                         _eval_poly 4EA8  
                     ??_MXK_Queue 0063                      ?_Port_GetPin 0060  
                        _ADC_Init 6B0A                         _downState 00E2  
           __end_of_HMI_SetButton 66E2              __size_of_Console_Tab 00C2  
                        ?_reverse 0060                      ?_Port_SetPin 006F  
           __end_of_HMI_SetNumber 7C40                  ___lwdiv@quotient 0065  
                 _HMI_RightSwitch 7EA0       __size_of_ADC_ConversionTime 0048  
                  __size_of_floor 0124                    __size_of_ldexp 0124  
                  __size_of_frexp 00B6               ??_GetPortProperties 0062  
                  __size_of_scale 051A           __end_of_Console_NewLine 6652  
            ??_MXK_InitTestButton 008D                Byte_GetPair@pInput 0069  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 7FEC  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 7E26                          _LCD_Fill 736E  
                        _LCD_Init 45BE                    ___wmul@product 0064  
                        _HMIBoard 0129                    i2_Byte_GetZone 6BFE  
                        _LED_Init 7256                         delay_ms@u 0062  
              Button_Poll@pButton 007B                         delay_us@u 0062  
                        _HMI_Init 355E                          _HMI_Poll 6C74  
              MXK_Queue@pCallback 0060                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 7984  
        __size_of_Configure_GPIOs 0070              __size_of_Byte_GetBit 0034  
               Byte_SetQuad@pQuad 006D                          _PIR1bits 000F9E  
              __end_of__div_to_l_ 4444                          _PIR3bits 000FA4  
                        i2u702_44 751A                          i2u702_45 7516  
                        i2u703_44 7540                          i2u703_45 753C  
                        i2u563_40 6C20                          i2u563_47 6C16  
                        i2u565_40 6C68                          i2u565_45 6C64  
                        i2u880_40 5122                          i2u881_40 515A  
            __size_of_Byte_SetBit 0064                          i2u879_40 510E  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000                  HMI_SetBar@pValue 0060  
               Button_Init@pInput 009B           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 008A  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 0082  
           __size_of_Timer0_Clear 000C                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 6164                          _SSP2STAT 000F6D  
                    _Set_Rotation 6528             __size_of_Timer2_Clear 0008  
            __end_of_MXK_SwitchTo 77D0                _Port_CheckPairType 6FF6  
                        _MXK_Init 4444             __size_of_Timer0_Start 0024  
                  ??_ADC_Sequence 0064                   MXK_SwitchTo@CUR 0066  
           __end_of_ADC_Calibrate 7F12                          _SPI_Init 16FA  
        __end_of_Event_TestButton 7948                          _SPI_Send 6F20  
                      _ADCON0bits 000FC2                  __size_of_ADC_Off 0008  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 0065  
               ___wmul@multiplier 0060              __end_of_positionMode 55F4  
               Byte_GetBit@Output 0064                        printf@flag 026A  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0074  
                      printf@fval 0278              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 6D5C                        printf@prec 026C  
           Motor_Speed@pFrequency 007D                 Byte_GetBit@pInput 0060  
             Port_SetPinType@pPin 0088              __size_of_Button_Poll 0166  
                      ?_eval_poly 00A8                _Port_CheckQuadType 7314  
                   _MXK_DIPSwitch 7E40               ?_Port_CheckPairType 0086  
            __end_of_SPI_MinSpeed 6DD0                     ??_MXK_Dequeue 0076  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 759C             Button_Poll@pIncrement 007D  
                    ??_displaySID 00B8           PortProperty_Valid@F6830 FCAD  
            __end_ofi2_Motor_Step 51CA                   ??i2_MXK_Release 0001  
                       copy_data0 5E2C                         copy_data1 5E6A  
                   ??_MXK_Release 0060            __end_ofi2_Byte_GetPair 7E40  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 008F            __end_ofi2_Byte_GetZone 6C74  
             __end_ofi2_MXK_Queue 7F7E               ?_Port_CheckPortType 0096  
                        _FunctADC 7F12                   itos@destination 0069  
                        _InitList FB5B              _Motor_Step$intlevel0 4D8A  
                        _Mode_Set 7F24                Port_GetQuad@Output 0065  
                     ??_ToSegment 0060                      _ISR_Function 1408  
                       frexp@eptr 0064                      _Timer0_Clear 7F8A  
              Port_GetQuad@pInput 0060                       _scale$15266 008B  
                    _Timer2_Clear 7FCA              __end_of_Word_GetPair 78CE  
                        _lCBuffer 0200              ??_Port_CheckPairType 008A  
                      _ADCVoltage 0100                       ??_Reset_Low 0074  
                        __Hrparam 0000                      _Timer0_Start 7C92  
                    OutSeg@pInput 0066                    _Console_Render 3152  
                        __Lrparam 0000                   Timer2_Init@RDIV 0072  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 1ED8                      OutSeg@segset 0034  
                       rand@screw 0032              __end_of_Word_SetPair 7748  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 5B4A  
            ??_Port_CheckQuadType 0093                  __size_of___fladd 04A8  
              __end_of_displaySID 7D3C                  __size_of___fldiv 03C0  
           __size_of_Port_GetQuad 004A                  __size_of___awdiv 00BE  
                __size_of___flneg 0038                  __size_of___awmod 00A2  
                __size_of___flmul 04A6                  __size_of___flsub 0048  
                __size_of___fltol 010C                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 7852                  __size_of___llmod 009A  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0062                      ??_initialise 00AA  
                        _lBufferX 0037                          _lBufferY 0036  
             Timer2_Init@PRESCALE FCCA                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00DC                  __size_of_getMode 005C  
         __end_of_HMI_RightSwitch 7EB8            Byte_GetZone@pChunkSize 0064  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 0064  
           __size_of_Port_SetType 022A                     reverse@length 0062  
                       itos@input 0067             i2MXK_SwitchTo@pModule 0008  
                        ___xxtofl 3758                Motor_Init@pAddress 008F  
                        _delay_ms 6F8C                          _delay_us 73C6  
                        _clearall 00E9                   ___lwdiv@divisor 0062  
  __size_of_Console_SetForecolour 000A                   ___lwdiv@counter 0064  
   __end_of_Console_SetForecolour 7FCA                   Port_GetPin@pPin 0062  
                        __ptext10 1404                          __ptext11 5CB6  
                        __ptext20 7ED0                          __ptext12 6C74  
                        __ptext21 7552                          __ptext13 4730  
                        __ptext30 5A90                          __ptext22 7BBA  
                        __ptext14 7E40                          __ptext31 2822  
                        __ptext23 8002                          __ptext15 7E58  
                        __ptext40 3C84                          __ptext32 6652  
                        __ptext24 790C                          __ptext16 7E70  
                        __ptext41 2F28                          __ptext33 7FAC  
                        __ptext25 7C16                          __ptext17 7E88  
                        __ptext50 7AFA                          __ptext42 759C  
                        __ptext34 7FDA                          __ptext26 51CA  
                        __ptext18 7EA0                          __ptext51 4D84  
                        __ptext43 1ED8                          __ptext35 7F12  
                        __ptext27 6EB4                          __ptext19 7EB8  
                        __ptext60 6528                          __ptext52 7FE0  
                        __ptext44 7F46                          __ptext36 6906  
                        __ptext28 71F4                          __ptext61 736E  
                        __ptext53 7F7E                          __ptext45 6018  
                        __ptext37 7060                          __ptext29 6B86  
                        __ptext70 5790                          __ptext62 6E44  
                        __ptext54 778E                          __ptext46 60BE  
                        __ptext38 537A                          __ptext71 76BC  
                        __ptext63 6CE8                          __ptext55 7EE8  
                        __ptext47 6164                          __ptext39 4444  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 62AE  
                        __ptext72 7FB6                          __ptext64 7468  
                        __ptext56 7F54                          __ptext48 7256  
                        __ptext81 5450                          __ptext73 355E  
                        __ptext65 6F8C                          __ptext57 7852  
                        __ptext49 7418                          __ptext90 7314  
                        __ptext82 7D78                          __ptext74 6D5C  
                        __ptext66 7D3C                          __ptext58 73C6  
                        __ptext91 6FF6                          __ptext83 7FE6  
                        __ptext75 16FA                          __ptext67 7D5A  
                        __ptext59 45BE                          __ptext92 6A8E  
                        __ptext84 7D96                          __ptext76 49EA  
                        __ptext68 75E4                          __ptext93 7890  
                        __ptext85 3926                          __ptext77 7FCA  
                        __ptext69 7B2A                          __ptext94 7DB4  
                        __ptext86 712C                          __ptext78 7C6A  
                        __ptext95 63F2                          __ptext87 2AA6  
                        __ptext79 7B5A                          __ptext96 7CD8  
                        __ptext88 7702                          __ptext97 5C00  
                        __ptext89 7CB6                          __ptext98 5D6A  
                        __ptext99 7748                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
                        __powers_ FC0D       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                 _ADC_ClockDivision 66E2  
                    ?_ADC_SetupIO 0001                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 0079  
                 ?i2_Byte_GetZone 0001                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001                ?_ADC_ClockDivision 0001  
                    ?_ADC_Voltage 0087               __end_of_MXK_Dequeue 7B2A  
               HMI_SetSegments@in 0064             Button_Init@pThreshold 009D  
                   __size_of_main 022C                     __size_of_itos 00D8  
               Byte_GetPair@pPair 006B            __end_of_Console_Render 335E  
              __end_of_initialise 70C8                          _inputVar 5CB6  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
                    _Port_GetQuad 7552               __end_of_MXK_Release 7EFE  
                  _MXK_TestButton 7ED0                     i2_Byte_SetBit 7506  
             ??_ADC_ClockDivision 0060               i2Word_GetPair@pPair 000F  
                        _nullMode 1404                    ADC_Voltage@max 008D  
                  ADC_Voltage@ref 0091         __end_of_MXK_BlockSwitchTo 7890  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0154  
            __size_of_Timer2_Init 0152                          int$flags 0049  
            __size_of_Timer0_Stop 0006                      _Port_SetType 2F28  
                    Port_Set@Type 0086                          _stepMode 70C8  
      __size_of_GetPortProperties 00A6            __size_of_LCD_DrawField 00A4  
               ??_Configure_GPIOs 0095                         printf@exp 0272  
                       printf@val 026E                      _SSP1STATbits 000FC7  
            __size_of_Motor_Speed 002A                    Timer0_Init@DIV 0108  
                  Timer0_Init@PRE 0030                      _SSP2STATbits 000F6D  
                        exp@coeff FEAD                        _LED_Toggle 75E4  
                        log@coeff FED5                        _HMI_GetBar 7FDA  
            Button_Init@pGetState 00A2            PortProperty_Valid@Pair 0085  
                ??_Port_TogglePin 0077                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2            PortProperty_Valid@pPin 0072  
                     ??_eval_poly 00B0                        _HMI_SetBar 7FAC  
                      _HMI_Render 78CE                  Byte_SetZone@MASK 006A  
                     i2_MXK_Queue 7F70         __end_of_ADC_ClockDivision 676C  
                  Timer2_Init@DIV 0104                    Timer2_Init@PRE 002E  
                 _displayNullMode 77D0                  Byte_SetZone@pMax 0062  
          __size_ofi2_Timer0_Stop 0006                          scale@scl 008F  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 00A5  
                        itos@Data 006B                      _printf$15267 0264  
                 _displayStepMode 676C                LCD_FillRectangle@i 0075  
              LCD_FillRectangle@j 0076              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                  __tdiv_to_l_@exp1 0070  
                __tdiv_to_l_@cntr 006F                      reverse@input 0060  
                __tdiv_to_l_@quot 006B              __end_of_ADC_Sequence 778E  
          __size_of_HMI_DIPSwitch 0018                  ___lwmod@dividend 0060  
                ___lldiv@dividend 0060            __end_of_MXK_TestButton 7EE8  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
     __end_of_displayPositionMode 6A0C                    _SPI_DisableISR 7C6A  
 displayPositionMode@angleDegrees 00B8                   Port_Init@pInput 00A0  
                        printf@ap 0268             __size_of_positionMode 00D0  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 7FB6  
                ?_HMI_SetSegments 0061           Console_MakeField@Column 006C  
                      _IRDistance 011D             __size_of_SPI_MaxSpeed 0074  
                ??_ADC_SetChannel 0060                     SPI_DCS@pInput 0060  
  __size_of_displayContinuousMode 00CC             __size_of_SPI_MinSpeed 0074  
   __end_of_displayContinuousMode 5790                      ?__tdiv_to_l_ 0060  
                 ??_MXK_DIPSwitch 0066             __size_ofi2_Motor_Step 00FE  
               ADC_Voltage@pInput 0087           Console_MakeField@pInput 006B  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 0068  
                   ??_GetPortPORT 0062                   ___lwmod@divisor 0062  
                   ??_GetPortTRIS 0062             Timer0_Start@pFunction 0060  
              Word_SetPair@pInput 006F                   ___lwmod@counter 0064  
              Word_SetPair@pValue 0072                  Motor_Init@pMotor 008D  
                     _MXK_Dequeue 7AFA                 ADC_Voltage@output 0095  
                  LED_Toggle@pLED 0078                     ___fladd@signs 00A4  
                   _LCD_DrawField 620A                  _Port_SetQuadType 2AA6  
         __size_of_continuousMode 0032                       _MXK_Release 7EE8  
       __size_of_Console_FormFeed 008A                      _MXK_SwitchTo 778E  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
                 _Port_SetPinType 3926                      ___fladd@aexp 00A5  
                    ___fladd@bexp 00A6           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 0068                Byte_GetZone@pChunk 0063  
                    _positionMode 5524                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 7E26                Byte_GetZone@pInput 0060  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 71F4  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 7C92  
                    _SPI_MaxSpeed 6CE8                      _SPI_MinSpeed 6D5C  
              Port_Set@TypeActual 0084  
